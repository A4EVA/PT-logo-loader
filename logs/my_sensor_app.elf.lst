
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x000265bc vaddr 0x000265bc paddr 0x000265bc align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x000265d4 memsz 0x000265d4 flags rwx
    LOAD off    0x000300d8 vaddr 0x200000d8 paddr 0x000265d4 align 2**16
         filesz 0x0000006c memsz 0x0000006c flags rw-
    LOAD off    0x00030148 vaddr 0x20000148 paddr 0x00026640 align 2**16
         filesz 0x00000000 memsz 0x0000de40 flags rw-
    LOAD off    0x00040000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              0001e59c  00008020  00008020  00008020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  000265bc  000265bc  00030144  2**0  CONTENTS
  3 .ARM.exidx         00000018  000265bc  000265bc  000265bc  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  00030144  2**0  CONTENTS
  6 .data              0000006c  200000d8  000265d4  000300d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20000144  20000144  00030144  2**0  CONTENTS
  8 .bss               0000de40  20000148  00026640  00030148  2**3  ALLOC
  9 .stack_dummy       000001b0  2000df88  2000df88  00030148  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  000302f8  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  00030333  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000303b2  2**0  CONTENTS, READONLY
 13 .debug_line        000494ef  00000000  00000000  000303b6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        00085813  00000000  00000000  000798a5  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0000e3fe  00000000  00000000  000ff0b8  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00005a28  00000000  00000000  0010d4b8  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         000598f1  00000000  00000000  00112ee0  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         000134bc  00000000  00000000  0016c7d1  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      00019de0  00000000  00000000  0017fc8d  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000e944  00000000  00000000  00199a70  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_macinfo     00000054  00000000  00000000  001a83b4  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubnames    00014c3a  00000000  00000000  001a8408  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes    00030975  00000000  00000000  001bd042  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
000265bc l    d  .ARM.extab	00000000 .ARM.extab
000265bc l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000144 l    d  .bssnz	00000000 .bssnz
20000148 l    d  .bss	00000000 .bss
2000df88 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000820c l     F .text	0000003c errata_16
00008248 l     F .text	0000004c errata_31
00008294 l     F .text	0000003c errata_32
000082d0 l     F .text	0000004c errata_36
0000831c l     F .text	0000003c errata_37
00008358 l     F .text	0000003c errata_57
00008394 l     F .text	0000003c errata_66
000083d0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 9mu0l0cofx40kg7
00000d09 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00020033 l       .debug_str	00000000 
00020027 l       .debug_str	00000000 
0002c490 l       .debug_str	00000000 
0005211c l       .debug_str	00000000 
00052883 l       .debug_str	00000000 
00051b50 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
0002c4bd l       .debug_str	00000000 
0002c4af l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00000e0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00054d75 l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
00053bfe l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
00003f42 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0002c47c l       .debug_str	00000000 
00057836 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00031536 l       .debug_str	00000000 
00054c1f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052891 l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 uihlqvdlbzm5wxk
00001076 l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
0003666a l       .debug_str	00000000 
0000103b l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000010df l       .debug_str	00000000 
0000114a l       .debug_str	00000000 
00001186 l       .debug_str	00000000 
000011d3 l       .debug_str	00000000 
0000120f l       .debug_str	00000000 
0000121d l       .debug_str	00000000 
00001288 l       .debug_str	00000000 
000012a3 l       .debug_str	00000000 
0000130f l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00052e9f l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
0000136b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
000133b6 l       .debug_str	00000000 
0005504c l       .debug_str	00000000 
0005933f l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016db0 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00023722 l       .debug_str	00000000 
00057792 l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e9c l       .debug_str	00000000 
0000137e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001ff9b l       .debug_str	00000000 
00000eee l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
00000f20 l       .debug_str	00000000 
00000f59 l       .debug_str	00000000 
00000f82 l       .debug_str	00000000 
00016c8b l       .debug_str	00000000 
00000f99 l       .debug_str	00000000 
00000fd2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16zjnp1vbo7kc1gp
00000c82 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00031536 l       .debug_str	00000000 
00054c1f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052891 l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00020033 l       .debug_str	00000000 
00020027 l       .debug_str	00000000 
0000151c l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000133b6 l       .debug_str	00000000 
0005504c l       .debug_str	00000000 
0005933f l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
0005924a l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00057f35 l       .debug_str	00000000 
000013e2 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00058f09 l       .debug_str	00000000 
000013ef l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00022ef5 l       .debug_str	00000000 
00016654 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000169d l       .debug_str	00000000 
000013ff l       .debug_str	00000000 
00001484 l       .debug_str	00000000 
0000149a l       .debug_str	00000000 
00054d7e l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
0003795a l       .debug_str	00000000 
000014e9 l       .debug_str	00000000 
00001517 l       .debug_str	00000000 
00001521 l       .debug_str	00000000 
0000154c l       .debug_str	00000000 
00001553 l       .debug_str	00000000 
000576cf l       .debug_str	00000000 
0000157b l       .debug_str	00000000 
000592ca l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
000015a8 l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
000015dc l       .debug_str	00000000 
0000160c l       .debug_str	00000000 
00001617 l       .debug_str	00000000 
00001644 l       .debug_str	00000000 
0000164d l       .debug_str	00000000 
00001683 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00001694 l       .debug_str	00000000 
0000151b l       .debug_str	00000000 
00051c9d l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
000016bb l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2d0u1dup22f6p5uq
00000d12 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00020033 l       .debug_str	00000000 
000016e7 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00031536 l       .debug_str	00000000 
00054c1f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052891 l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2q7rzzztqsy7quqz
000030eb l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
000036ac l       .debug_str	00000000 
000036ec l       .debug_str	00000000 
0000373a l       .debug_str	00000000 
0000377a l       .debug_str	00000000 
000037a1 l       .debug_str	00000000 
000037e1 l       .debug_str	00000000 
000037ef l       .debug_str	00000000 
0000385e l       .debug_str	00000000 
00003889 l       .debug_str	00000000 
000038f9 l       .debug_str	00000000 
0000390c l       .debug_str	00000000 
0000397c l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000039a8 l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00017512 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003666a l       .debug_str	00000000 
000039b7 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00052c43 l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a654 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001834 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
000018f0 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001942 l       .debug_str	00000000 
00001991 l       .debug_str	00000000 
0000199b l       .debug_str	00000000 
000019d8 l       .debug_str	00000000 
00001a1d l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a36 l       .debug_str	00000000 
00001a3e l       .debug_str	00000000 
00001a93 l       .debug_str	00000000 
00001af0 l       .debug_str	00000000 
00001afc l       .debug_str	00000000 
00001b05 l       .debug_str	00000000 
00001b11 l       .debug_str	00000000 
00001b1d l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001b2e l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001b36 l       .debug_str	00000000 
00001b64 l       .debug_str	00000000 
00001b4b l       .debug_str	00000000 
00001b6b l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00057511 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00051f56 l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
0005834c l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
00001d62 l       .debug_str	00000000 
000475f9 l       .debug_str	00000000 
00001d79 l       .debug_str	00000000 
00001d81 l       .debug_str	00000000 
00001d8a l       .debug_str	00000000 
0000318e l       .debug_str	00000000 
00001d93 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
00057fff l       .debug_str	00000000 
00001d9b l       .debug_str	00000000 
00001da7 l       .debug_str	00000000 
00001db2 l       .debug_str	00000000 
00001dba l       .debug_str	00000000 
0000b338 l       .debug_str	00000000 
0000b863 l       .debug_str	00000000 
00001dc2 l       .debug_str	00000000 
00001ebe l       .debug_str	00000000 
00001fc2 l       .debug_str	00000000 
00001fd0 l       .debug_str	00000000 
00001fdb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002008 l       .debug_str	00000000 
00001fe5 l       .debug_str	00000000 
00002013 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00002111 l       .debug_str	00000000 
0000211f l       .debug_str	00000000 
0000217e l       .debug_str	00000000 
000021e5 l       .debug_str	00000000 
000021fb l       .debug_str	00000000 
0000220b l       .debug_str	00000000 
00056835 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000221a l       .debug_str	00000000 
00025966 l       .debug_str	00000000 
00002220 l       .debug_str	00000000 
00002226 l       .debug_str	00000000 
0000222c l       .debug_str	00000000 
00002238 l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
00002240 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
0000224e l       .debug_str	00000000 
00002294 l       .debug_str	00000000 
00002271 l       .debug_str	00000000 
000022a4 l       .debug_str	00000000 
000022e4 l       .debug_str	00000000 
000563c2 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002332 l       .debug_str	00000000 
00002338 l       .debug_str	00000000 
00002361 l       .debug_str	00000000 
0000233e l       .debug_str	00000000 
00002373 l       .debug_str	00000000 
000023b5 l       .debug_str	00000000 
000562ab l       .debug_str	00000000 
000023ff l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002434 l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002446 l       .debug_str	00000000 
00002488 l       .debug_str	00000000 
0005576f l       .debug_str	00000000 
000024d2 l       .debug_str	00000000 
000024d8 l       .debug_str	00000000 
000024de l       .debug_str	00000000 
000024e4 l       .debug_str	00000000 
0000250d l       .debug_str	00000000 
000024ea l       .debug_str	00000000 
0000251e l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
000025a8 l       .debug_str	00000000 
000025ad l       .debug_str	00000000 
000565f9 l       .debug_str	00000000 
000025b2 l       .debug_str	00000000 
000025b8 l       .debug_str	00000000 
000025be l       .debug_str	00000000 
000025e7 l       .debug_str	00000000 
000025c4 l       .debug_str	00000000 
000025f8 l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
00055827 l       .debug_str	00000000 
00002682 l       .debug_str	00000000 
000026ae l       .debug_str	00000000 
0000268b l       .debug_str	00000000 
000026bf l       .debug_str	00000000 
00002700 l       .debug_str	00000000 
00002749 l       .debug_str	00000000 
000567cd l       .debug_str	00000000 
0000274e l       .debug_str	00000000 
00002757 l       .debug_str	00000000 
0000275e l       .debug_str	00000000 
00002789 l       .debug_str	00000000 
00002766 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027dd l       .debug_str	00000000 
00056495 l       .debug_str	00000000 
00002827 l       .debug_str	00000000 
0000282d l       .debug_str	00000000 
00002833 l       .debug_str	00000000 
00002839 l       .debug_str	00000000 
0000283f l       .debug_str	00000000 
00002847 l       .debug_str	00000000 
00002855 l       .debug_str	00000000 
00002864 l       .debug_str	00000000 
00002875 l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
0000288b l       .debug_str	00000000 
00002896 l       .debug_str	00000000 
0000289d l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028c0 l       .debug_str	00000000 
000028f5 l       .debug_str	00000000 
00002937 l       .debug_str	00000000 
0005592a l       .debug_str	00000000 
00002981 l       .debug_str	00000000 
000029ae l       .debug_str	00000000 
0000298b l       .debug_str	00000000 
000029c0 l       .debug_str	00000000 
00002a02 l       .debug_str	00000000 
00002a4c l       .debug_str	00000000 
00002a51 l       .debug_str	00000000 
00002a7e l       .debug_str	00000000 
00002a5b l       .debug_str	00000000 
00002a90 l       .debug_str	00000000 
00002ad2 l       .debug_str	00000000 
00002b1c l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00002b9b l       .debug_str	00000000 
00002b30 l       .debug_str	00000000 
00002b40 l       .debug_str	00000000 
00002b49 l       .debug_str	00000000 
00002b54 l       .debug_str	00000000 
00002b63 l       .debug_str	00000000 
00002b78 l       .debug_str	00000000 
00002ba9 l       .debug_str	00000000 
00002c46 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002cf6 l       .debug_str	00000000 
00002cff l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d20 l       .debug_str	00000000 
00002d56 l       .debug_str	00000000 
00002dd9 l       .debug_str	00000000 
00002e64 l       .debug_str	00000000 
00002e80 l       .debug_str	00000000 
00002ecc l       .debug_str	00000000 
00002f20 l       .debug_str	00000000 
00002f3d l       .debug_str	00000000 
00002f51 l       .debug_str	00000000 
00002f9d l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00003007 l       .debug_str	00000000 
0000301b l       .debug_str	00000000 
00003062 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030dd l       .debug_str	00000000 
000030ba l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
000030f9 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
00003e25 l       .debug_str	00000000 
00003108 l       .debug_str	00000000 
00003110 l       .debug_str	00000000 
0002bf7b l       .debug_str	00000000 
0000311f l       .debug_str	00000000 
00003e57 l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003135 l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314c l       .debug_str	00000000 
00003154 l       .debug_str	00000000 
0000315b l       .debug_str	00000000 
00003165 l       .debug_str	00000000 
0000316d l       .debug_str	00000000 
00003175 l       .debug_str	00000000 
00003197 l       .debug_str	00000000 
000031a2 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
000031b6 l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
000031ca l       .debug_str	00000000 
000031d5 l       .debug_str	00000000 
000031e0 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
0005589b l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00003298 l       .debug_str	00000000 
000032a8 l       .debug_str	00000000 
000032b7 l       .debug_str	00000000 
000032bf l       .debug_str	00000000 
000032c6 l       .debug_str	00000000 
000032ce l       .debug_str	00000000 
0000330f l       .debug_str	00000000 
000032ec l       .debug_str	00000000 
0000331f l       .debug_str	00000000 
00003334 l       .debug_str	00000000 
0000333d l       .debug_str	00000000 
0000339a l       .debug_str	00000000 
000033ff l       .debug_str	00000000 
00003409 l       .debug_str	00000000 
00003419 l       .debug_str	00000000 
0000342e l       .debug_str	00000000 
00003436 l       .debug_str	00000000 
0000349a l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
0000350d l       .debug_str	00000000 
00003515 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003566 l       .debug_str	00000000 
0000357b l       .debug_str	00000000 
0000358e l       .debug_str	00000000 
000035a3 l       .debug_str	00000000 
000035aa l       .debug_str	00000000 
000035bf l       .debug_str	00000000 
000035e9 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00003660 l       .debug_str	00000000 
0000369f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vuqh37eag1b6y30
00003ba4 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005504c l       .debug_str	00000000 
0005933f l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
00023722 l       .debug_str	00000000 
00003b19 l       .debug_str	00000000 
00003b7c l       .debug_str	00000000 
00003c22 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
00003cc8 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00003d4f l       .debug_str	00000000 
00003d5e l       .debug_str	00000000 
00052704 l       .debug_str	00000000 
00003d80 l       .debug_str	00000000 
00016db0 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000133b6 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000039d8 l       .debug_str	00000000 
00003a62 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00052ba9 l       .debug_str	00000000 
00003a7a l       .debug_str	00000000 
00003b0f l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00020051 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3l5pa7f4r4pjxp5p
00004acd l       .debug_str	00000000 
00004afa l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00004b15 l       .debug_str	00000000 
00004b49 l       .debug_str	00000000 
00004b30 l       .debug_str	00000000 
00004b51 l       .debug_str	00000000 
00004b67 l       .debug_str	00000000 
00004bcf l       .debug_str	00000000 
00004c47 l       .debug_str	00000000 
00004c74 l       .debug_str	00000000 
00004c8c l       .debug_str	00000000 
00004cf6 l       .debug_str	00000000 
00004cfe l       .debug_str	00000000 
00004d04 l       .debug_str	00000000 
00004d0e l       .debug_str	00000000 
00004d88 l       .debug_str	00000000 
00004df4 l       .debug_str	00000000 
00004e6d l       .debug_str	00000000 
00004ee6 l       .debug_str	00000000 
00004f51 l       .debug_str	00000000 
00004fc0 l       .debug_str	00000000 
00004fc7 l       .debug_str	00000000 
00004fd2 l       .debug_str	00000000 
00004ffa l       .debug_str	00000000 
0000506f l       .debug_str	00000000 
000050ec l       .debug_str	00000000 
00004feb l       .debug_str	00000000 
000050f8 l       .debug_str	00000000 
00001d62 l       .debug_str	00000000 
0000516f l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
000475f9 l       .debug_str	00000000 
00001d79 l       .debug_str	00000000 
00001d81 l       .debug_str	00000000 
00001d8a l       .debug_str	00000000 
0000318e l       .debug_str	00000000 
000051d8 l       .debug_str	00000000 
00005256 l       .debug_str	00000000 
000052c6 l       .debug_str	00000000 
00005340 l       .debug_str	00000000 
0000535a l       .debug_str	00000000 
000053c6 l       .debug_str	00000000 
000053cf l       .debug_str	00000000 
000053db l       .debug_str	00000000 
00005451 l       .debug_str	00000000 
000054c7 l       .debug_str	00000000 
0000553d l       .debug_str	00000000 
000055a5 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00005614 l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
00005681 l       .debug_str	00000000 
000056f6 l       .debug_str	00000000 
0000570b l       .debug_str	00000000 
00005772 l       .debug_str	00000000 
0000577b l       .debug_str	00000000 
00005786 l       .debug_str	00000000 
0000578d l       .debug_str	00000000 
00053c06 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
0003666a l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
000057c2 l       .debug_str	00000000 
0005363f l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
000534e6 l       .debug_str	00000000 
0005897d l       .debug_str	00000000 
00005877 l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
00005884 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00058f09 l       .debug_str	00000000 
000013ef l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00022ef5 l       .debug_str	00000000 
00016654 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000169d l       .debug_str	00000000 
00001694 l       .debug_str	00000000 
000058a5 l       .debug_str	00000000 
000058aa l       .debug_str	00000000 
000058af l       .debug_str	00000000 
000058b4 l       .debug_str	00000000 
000058b9 l       .debug_str	00000000 
000058be l       .debug_str	00000000 
000058c9 l       .debug_str	00000000 
000058d4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a654 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00003d8a l       .debug_str	00000000 
000141e4 l       .debug_str	00000000 
00003dfe l       .debug_str	00000000 
000030f9 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
00003e25 l       .debug_str	00000000 
00003e0a l       .debug_str	00000000 
00003e30 l       .debug_str	00000000 
00003110 l       .debug_str	00000000 
0002bf7b l       .debug_str	00000000 
0000311f l       .debug_str	00000000 
00003e57 l       .debug_str	00000000 
00003e3c l       .debug_str	00000000 
00003e63 l       .debug_str	00000000 
00003e6e l       .debug_str	00000000 
00003e79 l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
00003f33 l       .debug_str	00000000 
00003e8a l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00003f11 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00003f18 l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00003f47 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00003fa4 l       .debug_str	00000000 
00004009 l       .debug_str	00000000 
00004011 l       .debug_str	00000000 
00004033 l       .debug_str	00000000 
0000401a l       .debug_str	00000000 
0000404b l       .debug_str	00000000 
00004071 l       .debug_str	00000000 
000040e9 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
0005589b l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
00004160 l       .debug_str	00000000 
000041c9 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004241 l       .debug_str	00000000 
00004268 l       .debug_str	00000000 
00004280 l       .debug_str	00000000 
000042ea l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00057511 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00051f56 l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
0005834c l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
000042f4 l       .debug_str	00000000 
000042fd l       .debug_str	00000000 
0000439d l       .debug_str	00000000 
00004306 l       .debug_str	00000000 
0000437f l       .debug_str	00000000 
0005897b l       .debug_str	00000000 
00004384 l       .debug_str	00000000 
000043a7 l       .debug_str	00000000 
00000aa4 l       .debug_str	00000000 
000043cd l       .debug_str	00000000 
000043b4 l       .debug_str	00000000 
000043af l       .debug_str	00000000 
000043d8 l       .debug_str	00000000 
000043f1 l       .debug_str	00000000 
0000445c l       .debug_str	00000000 
00000896 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
000044cc l       .debug_str	00000000 
000044dc l       .debug_str	00000000 
00004554 l       .debug_str	00000000 
00053196 l       .debug_str	00000000 
00052ef0 l       .debug_str	00000000 
0000455e l       .debug_str	00000000 
00004565 l       .debug_str	00000000 
00004588 l       .debug_str	00000000 
0000456f l       .debug_str	00000000 
0000456a l       .debug_str	00000000 
00004592 l       .debug_str	00000000 
000045aa l       .debug_str	00000000 
00004614 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00001834 l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
000018f0 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001942 l       .debug_str	00000000 
00001991 l       .debug_str	00000000 
0000199b l       .debug_str	00000000 
000019d8 l       .debug_str	00000000 
00001a1d l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a36 l       .debug_str	00000000 
00001a3e l       .debug_str	00000000 
00001a93 l       .debug_str	00000000 
00001af0 l       .debug_str	00000000 
00001afc l       .debug_str	00000000 
00001b05 l       .debug_str	00000000 
00001b11 l       .debug_str	00000000 
00001b1d l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b2e l       .debug_str	00000000 
00001b64 l       .debug_str	00000000 
00001b4b l       .debug_str	00000000 
00001b36 l       .debug_str	00000000 
00004689 l       .debug_str	00000000 
000046f0 l       .debug_str	00000000 
0000476b l       .debug_str	00000000 
0000477b l       .debug_str	00000000 
00004784 l       .debug_str	00000000 
00004792 l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047ac l       .debug_str	00000000 
000049ba l       .debug_str	00000000 
000047b8 l       .debug_str	00000000 
000047c7 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047e8 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
000047f9 l       .debug_str	00000000 
00004801 l       .debug_str	00000000 
00004834 l       .debug_str	00000000 
0000481b l       .debug_str	00000000 
00004840 l       .debug_str	00000000 
00001b29 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00004872 l       .debug_str	00000000 
00004859 l       .debug_str	00000000 
0000487d l       .debug_str	00000000 
0000489f l       .debug_str	00000000 
00004886 l       .debug_str	00000000 
000048ac l       .debug_str	00000000 
000048c7 l       .debug_str	00000000 
00004934 l       .debug_str	00000000 
000049b1 l       .debug_str	00000000 
000049b9 l       .debug_str	00000000 
00004c65 l       .debug_str	00000000 
00004c4c l       .debug_str	00000000 
000049c3 l       .debug_str	00000000 
000049e0 l       .debug_str	00000000 
00004a4f l       .debug_str	00000000 
00004ac5 l       .debug_str	00000000 
00004ad6 l       .debug_str	00000000 
00004ae4 l       .debug_str	00000000 
00004aeb l       .debug_str	00000000 
00004af2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 413mqmtb04w1hzsl
000078c2 l       .debug_str	00000000 
00009c94 l       .debug_str	00000000 
00009edd l       .debug_str	00000000 
0000a143 l       .debug_str	00000000 
000297ca l       .debug_str	00000000 
00022663 l       .debug_str	00000000 
0000a3a8 l       .debug_str	00000000 
0000a3d8 l       .debug_str	00000000 
0000a636 l       .debug_str	00000000 
0000a666 l       .debug_str	00000000 
0000a691 l       .debug_str	00000000 
0000a69b l       .debug_str	00000000 
0000a6f4 l       .debug_str	00000000 
0000a948 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
0000a696 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000058d9 l       .debug_str	00000000 
00005909 l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00058197 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
000542b5 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002d98f l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00052c98 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00005a29 l       .debug_str	00000000 
00005a77 l       .debug_str	00000000 
00005ae2 l       .debug_str	00000000 
000576cf l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00052ba9 l       .debug_str	00000000 
00029756 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000228b7 l       .debug_str	00000000 
00005b4c l       .debug_str	00000000 
00005b7c l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00005c24 l       .debug_str	00000000 
00005c92 l       .debug_str	00000000 
00005d29 l       .debug_str	00000000 
00005de9 l       .debug_str	00000000 
00005ed2 l       .debug_str	00000000 
00005fe4 l       .debug_str	00000000 
0000611f l       .debug_str	00000000 
00006283 l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
000065c6 l       .debug_str	00000000 
000067a5 l       .debug_str	00000000 
000069ad l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00009617 l       .debug_str	00000000 
0000983b l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n7qec2sa6vjglqv
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052891 l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00020033 l       .debug_str	00000000 
00020027 l       .debug_str	00000000 
00012f2e l       .debug_str	00000000 
00052e9f l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
0005924a l       .debug_str	00000000 
0000ad71 l       .debug_str	00000000 
0000ad7a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000a969 l       .debug_str	00000000 
0000b283 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
0000a9a0 l       .debug_str	00000000 
0000a9f3 l       .debug_str	00000000 
00023722 l       .debug_str	00000000 
0000aa07 l       .debug_str	00000000 
0000aa4d l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
0000aa5b l       .debug_str	00000000 
0000aaa2 l       .debug_str	00000000 
0000aaab l       .debug_str	00000000 
0000aaf4 l       .debug_str	00000000 
000058be l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
000133b6 l       .debug_str	00000000 
00003d80 l       .debug_str	00000000 
0000ab00 l       .debug_str	00000000 
0000ab7c l       .debug_str	00000000 
0005933f l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00003d4f l       .debug_str	00000000 
0000aba6 l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
0000ac51 l       .debug_str	00000000 
0000acd7 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002d7d5 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
000141d4 l       .debug_str	00000000 
0000acff l       .debug_str	00000000 
0000ad61 l       .debug_str	00000000 
000542b5 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
000576cf l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00022ef5 l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
00016c8b l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0000ad69 l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00031536 l       .debug_str	00000000 
00054c1f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4oqy1cznfkuv6rc
00055061 l       .debug_str	00000000 
0000af8d l       .debug_str	00000000 
00051c17 l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
000576cf l       .debug_str	00000000 
0005968f l       .debug_str	00000000 
0005968e l       .debug_str	00000000 
00058f09 l       .debug_str	00000000 
000013ef l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00022ef5 l       .debug_str	00000000 
00016654 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000169d l       .debug_str	00000000 
00001694 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00025966 l       .debug_str	00000000 
0002596b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000ad81 l       .debug_str	00000000 
00051b3a l       .debug_str	00000000 
0000ad85 l       .debug_str	00000000 
0000adb6 l       .debug_str	00000000 
0000adbc l       .debug_str	00000000 
0000adfd l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0000ae12 l       .debug_str	00000000 
0000ae49 l       .debug_str	00000000 
0000ae54 l       .debug_str	00000000 
00058197 l       .debug_str	00000000 
0000ae86 l       .debug_str	00000000 
00051c7e l       .debug_str	00000000 
0000aeba l       .debug_str	00000000 
00051c6d l       .debug_str	00000000 
0000aeee l       .debug_str	00000000 
00051c25 l       .debug_str	00000000 
0000af25 l       .debug_str	00000000 
00051cb7 l       .debug_str	00000000 
0000af5d l       .debug_str	00000000 
00051ae8 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4qlpitlm4hs8kdcv
00003e57 l       .debug_str	00000000 
0000b2d4 l       .debug_str	00000000 
0000b2fb l       .debug_str	00000000 
0000b306 l       .debug_str	00000000 
0000b32d l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000b338 l       .debug_str	00000000 
0000b337 l       .debug_str	00000000 
0001fee6 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00052c26 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
000576cf l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
000542b5 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000058be l       .debug_str	00000000 
00055b76 l       .debug_str	00000000 
00052e80 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000afbe l       .debug_str	00000000 
0000afe7 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
0000aff4 l       .debug_str	00000000 
0000b006 l       .debug_str	00000000 
0000b017 l       .debug_str	00000000 
0000b063 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0000b06f l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052c43 l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a654 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001834 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
000018f0 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001942 l       .debug_str	00000000 
00001991 l       .debug_str	00000000 
0000199b l       .debug_str	00000000 
000019d8 l       .debug_str	00000000 
00001a1d l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a36 l       .debug_str	00000000 
00001a3e l       .debug_str	00000000 
00001a93 l       .debug_str	00000000 
00001af0 l       .debug_str	00000000 
00001afc l       .debug_str	00000000 
00001b05 l       .debug_str	00000000 
00001b11 l       .debug_str	00000000 
00001b1d l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001b2e l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001b36 l       .debug_str	00000000 
00001b64 l       .debug_str	00000000 
00001b4b l       .debug_str	00000000 
00001b6b l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00057511 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00051f56 l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
0005834c l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
00001d62 l       .debug_str	00000000 
000475f9 l       .debug_str	00000000 
00001d79 l       .debug_str	00000000 
00001d81 l       .debug_str	00000000 
00001d8a l       .debug_str	00000000 
0000318e l       .debug_str	00000000 
00001d93 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
00057fff l       .debug_str	00000000 
00001d9b l       .debug_str	00000000 
00001da7 l       .debug_str	00000000 
00001db2 l       .debug_str	00000000 
00001dba l       .debug_str	00000000 
0000b073 l       .debug_str	00000000 
0000b863 l       .debug_str	00000000 
00001dc2 l       .debug_str	00000000 
00001ebe l       .debug_str	00000000 
00001fc2 l       .debug_str	00000000 
00001fd0 l       .debug_str	00000000 
00001fdb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002008 l       .debug_str	00000000 
00001fe5 l       .debug_str	00000000 
00002013 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00002111 l       .debug_str	00000000 
0000211f l       .debug_str	00000000 
0000217e l       .debug_str	00000000 
000021e5 l       .debug_str	00000000 
000021fb l       .debug_str	00000000 
0000220b l       .debug_str	00000000 
00056835 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000221a l       .debug_str	00000000 
00025966 l       .debug_str	00000000 
00002220 l       .debug_str	00000000 
00002226 l       .debug_str	00000000 
0000222c l       .debug_str	00000000 
00002238 l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
00002240 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
0000224e l       .debug_str	00000000 
00002294 l       .debug_str	00000000 
00002271 l       .debug_str	00000000 
000022a4 l       .debug_str	00000000 
000022e4 l       .debug_str	00000000 
000563c2 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002332 l       .debug_str	00000000 
00002338 l       .debug_str	00000000 
00002361 l       .debug_str	00000000 
0000233e l       .debug_str	00000000 
00002373 l       .debug_str	00000000 
000023b5 l       .debug_str	00000000 
000562ab l       .debug_str	00000000 
000023ff l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002434 l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002446 l       .debug_str	00000000 
00002488 l       .debug_str	00000000 
0005576f l       .debug_str	00000000 
000024d2 l       .debug_str	00000000 
000024d8 l       .debug_str	00000000 
000024de l       .debug_str	00000000 
000024e4 l       .debug_str	00000000 
0000250d l       .debug_str	00000000 
000024ea l       .debug_str	00000000 
0000251e l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
000025a8 l       .debug_str	00000000 
000025ad l       .debug_str	00000000 
000565f9 l       .debug_str	00000000 
000025b2 l       .debug_str	00000000 
000025b8 l       .debug_str	00000000 
000025be l       .debug_str	00000000 
000025e7 l       .debug_str	00000000 
000025c4 l       .debug_str	00000000 
000025f8 l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
00055827 l       .debug_str	00000000 
00002682 l       .debug_str	00000000 
000026ae l       .debug_str	00000000 
0000268b l       .debug_str	00000000 
000026bf l       .debug_str	00000000 
00002700 l       .debug_str	00000000 
00002749 l       .debug_str	00000000 
000567cd l       .debug_str	00000000 
0000274e l       .debug_str	00000000 
00002757 l       .debug_str	00000000 
0000275e l       .debug_str	00000000 
00002789 l       .debug_str	00000000 
00002766 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027dd l       .debug_str	00000000 
00056495 l       .debug_str	00000000 
00002827 l       .debug_str	00000000 
0000282d l       .debug_str	00000000 
00002833 l       .debug_str	00000000 
00002839 l       .debug_str	00000000 
0000283f l       .debug_str	00000000 
00002847 l       .debug_str	00000000 
00002855 l       .debug_str	00000000 
00002864 l       .debug_str	00000000 
00002875 l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
0000288b l       .debug_str	00000000 
00002896 l       .debug_str	00000000 
0000289d l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028c0 l       .debug_str	00000000 
000028f5 l       .debug_str	00000000 
00002937 l       .debug_str	00000000 
0005592a l       .debug_str	00000000 
00002981 l       .debug_str	00000000 
000029ae l       .debug_str	00000000 
0000298b l       .debug_str	00000000 
000029c0 l       .debug_str	00000000 
00002a02 l       .debug_str	00000000 
00002a4c l       .debug_str	00000000 
00002a51 l       .debug_str	00000000 
00002a7e l       .debug_str	00000000 
00002a5b l       .debug_str	00000000 
00002a90 l       .debug_str	00000000 
00002ad2 l       .debug_str	00000000 
00002b1c l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00002b9b l       .debug_str	00000000 
00002b30 l       .debug_str	00000000 
00002b40 l       .debug_str	00000000 
00002b49 l       .debug_str	00000000 
00002b54 l       .debug_str	00000000 
00002b63 l       .debug_str	00000000 
00002b78 l       .debug_str	00000000 
00002ba9 l       .debug_str	00000000 
00002c46 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002cf6 l       .debug_str	00000000 
00002cff l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d20 l       .debug_str	00000000 
00002d56 l       .debug_str	00000000 
00002dd9 l       .debug_str	00000000 
00002e64 l       .debug_str	00000000 
00002e80 l       .debug_str	00000000 
00002ecc l       .debug_str	00000000 
00002f20 l       .debug_str	00000000 
00002f3d l       .debug_str	00000000 
00002f51 l       .debug_str	00000000 
00002f9d l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00003007 l       .debug_str	00000000 
0000301b l       .debug_str	00000000 
00003062 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030dd l       .debug_str	00000000 
000030ba l       .debug_str	00000000 
000030eb l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
000030f9 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
00003e25 l       .debug_str	00000000 
00003108 l       .debug_str	00000000 
00003110 l       .debug_str	00000000 
0002bf7b l       .debug_str	00000000 
0000311f l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003135 l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314c l       .debug_str	00000000 
00003154 l       .debug_str	00000000 
0000315b l       .debug_str	00000000 
00003165 l       .debug_str	00000000 
0000316d l       .debug_str	00000000 
00003175 l       .debug_str	00000000 
00003197 l       .debug_str	00000000 
000031a2 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
000031b6 l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
000031ca l       .debug_str	00000000 
000031d5 l       .debug_str	00000000 
000031e0 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
0005589b l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00003298 l       .debug_str	00000000 
000032a8 l       .debug_str	00000000 
000032b7 l       .debug_str	00000000 
000032bf l       .debug_str	00000000 
000032c6 l       .debug_str	00000000 
000032ce l       .debug_str	00000000 
0000330f l       .debug_str	00000000 
000032ec l       .debug_str	00000000 
0000331f l       .debug_str	00000000 
00003334 l       .debug_str	00000000 
0000333d l       .debug_str	00000000 
0000339a l       .debug_str	00000000 
000033ff l       .debug_str	00000000 
00003409 l       .debug_str	00000000 
00003419 l       .debug_str	00000000 
0000342e l       .debug_str	00000000 
00003436 l       .debug_str	00000000 
0000349a l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
0000350d l       .debug_str	00000000 
00003515 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003566 l       .debug_str	00000000 
0000357b l       .debug_str	00000000 
0000358e l       .debug_str	00000000 
000035a3 l       .debug_str	00000000 
000035aa l       .debug_str	00000000 
000035bf l       .debug_str	00000000 
00052ba9 l       .debug_str	00000000 
00052c98 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
000529a3 l       .debug_str	00000000 
0000b080 l       .debug_str	00000000 
0000b138 l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
0000b19c l       .debug_str	00000000 
0000b1d2 l       .debug_str	00000000 
0000b1eb l       .debug_str	00000000 
0000b225 l       .debug_str	00000000 
0000b242 l       .debug_str	00000000 
0000b27d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
0000b29a l       .debug_str	00000000 
0000b2a4 l       .debug_str	00000000 
0000b2ca l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z8krxbvbr97ayck
000576cf l       .debug_str	00000000 
0000b3fe l       .debug_str	00000000 
0000b43a l       .debug_str	00000000 
0000154c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000b3b4 l       .debug_str	00000000 
0000b3f5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00022ef5 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 54b6z89c74d8bdz1
00003108 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00052e9f l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012f72 l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
0000b84b l       .debug_str	00000000 
0000b854 l       .debug_str	00000000 
0001fee6 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0000b8f7 l       .debug_str	00000000 
0000b337 l       .debug_str	00000000 
0000b902 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
0000a696 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
0000b479 l       .debug_str	00000000 
0000b4c1 l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
0003666a l       .debug_str	00000000 
0000b4e0 l       .debug_str	00000000 
0000b51b l       .debug_str	00000000 
0000b540 l       .debug_str	00000000 
0000b567 l       .debug_str	00000000 
0000b5c7 l       .debug_str	00000000 
0000b5d0 l       .debug_str	00000000 
0000b63b l       .debug_str	00000000 
0000b64b l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052c43 l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a654 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001834 l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
000018f0 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001942 l       .debug_str	00000000 
00001991 l       .debug_str	00000000 
0000199b l       .debug_str	00000000 
000019d8 l       .debug_str	00000000 
00001a1d l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a36 l       .debug_str	00000000 
00001a3e l       .debug_str	00000000 
00001a93 l       .debug_str	00000000 
00001af0 l       .debug_str	00000000 
00001afc l       .debug_str	00000000 
00001b05 l       .debug_str	00000000 
00001b11 l       .debug_str	00000000 
00001b1d l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001b2e l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001b36 l       .debug_str	00000000 
00001b64 l       .debug_str	00000000 
00001b4b l       .debug_str	00000000 
00001b6b l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00057511 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00051f56 l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
0005834c l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
00001d62 l       .debug_str	00000000 
000475f9 l       .debug_str	00000000 
00001d79 l       .debug_str	00000000 
00001d81 l       .debug_str	00000000 
00001d8a l       .debug_str	00000000 
0000318e l       .debug_str	00000000 
00001d93 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
00057fff l       .debug_str	00000000 
00001d9b l       .debug_str	00000000 
00001da7 l       .debug_str	00000000 
00001db2 l       .debug_str	00000000 
00001dba l       .debug_str	00000000 
0000b863 l       .debug_str	00000000 
00001dc2 l       .debug_str	00000000 
00001ebe l       .debug_str	00000000 
00001fc2 l       .debug_str	00000000 
00001fd0 l       .debug_str	00000000 
00001fdb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002008 l       .debug_str	00000000 
00001fe5 l       .debug_str	00000000 
00002013 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00002111 l       .debug_str	00000000 
0000211f l       .debug_str	00000000 
0000217e l       .debug_str	00000000 
000021e5 l       .debug_str	00000000 
000021fb l       .debug_str	00000000 
0000220b l       .debug_str	00000000 
00056835 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000221a l       .debug_str	00000000 
00025966 l       .debug_str	00000000 
00002220 l       .debug_str	00000000 
00002226 l       .debug_str	00000000 
0000222c l       .debug_str	00000000 
00002238 l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
00002240 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
0000224e l       .debug_str	00000000 
00002294 l       .debug_str	00000000 
00002271 l       .debug_str	00000000 
000022a4 l       .debug_str	00000000 
000022e4 l       .debug_str	00000000 
000563c2 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002332 l       .debug_str	00000000 
00002338 l       .debug_str	00000000 
00002361 l       .debug_str	00000000 
0000233e l       .debug_str	00000000 
00002373 l       .debug_str	00000000 
000023b5 l       .debug_str	00000000 
000562ab l       .debug_str	00000000 
000023ff l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002434 l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002446 l       .debug_str	00000000 
00002488 l       .debug_str	00000000 
0005576f l       .debug_str	00000000 
000024d2 l       .debug_str	00000000 
000024d8 l       .debug_str	00000000 
000024de l       .debug_str	00000000 
000024e4 l       .debug_str	00000000 
0000250d l       .debug_str	00000000 
000024ea l       .debug_str	00000000 
0000251e l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
000025a8 l       .debug_str	00000000 
000025ad l       .debug_str	00000000 
000565f9 l       .debug_str	00000000 
000025b2 l       .debug_str	00000000 
000025b8 l       .debug_str	00000000 
000025be l       .debug_str	00000000 
000025e7 l       .debug_str	00000000 
000025c4 l       .debug_str	00000000 
000025f8 l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
00055827 l       .debug_str	00000000 
00002682 l       .debug_str	00000000 
000026ae l       .debug_str	00000000 
0000268b l       .debug_str	00000000 
000026bf l       .debug_str	00000000 
00002700 l       .debug_str	00000000 
00002749 l       .debug_str	00000000 
000567cd l       .debug_str	00000000 
0000274e l       .debug_str	00000000 
00002757 l       .debug_str	00000000 
0000275e l       .debug_str	00000000 
00002789 l       .debug_str	00000000 
00002766 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027dd l       .debug_str	00000000 
00056495 l       .debug_str	00000000 
00002827 l       .debug_str	00000000 
0000282d l       .debug_str	00000000 
00002833 l       .debug_str	00000000 
00002839 l       .debug_str	00000000 
0000283f l       .debug_str	00000000 
00002847 l       .debug_str	00000000 
00002855 l       .debug_str	00000000 
00002864 l       .debug_str	00000000 
00002875 l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
0000288b l       .debug_str	00000000 
00002896 l       .debug_str	00000000 
0000289d l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028c0 l       .debug_str	00000000 
000028f5 l       .debug_str	00000000 
00002937 l       .debug_str	00000000 
0005592a l       .debug_str	00000000 
00002981 l       .debug_str	00000000 
000029ae l       .debug_str	00000000 
0000298b l       .debug_str	00000000 
000029c0 l       .debug_str	00000000 
00002a02 l       .debug_str	00000000 
00002a4c l       .debug_str	00000000 
00002a51 l       .debug_str	00000000 
00002a7e l       .debug_str	00000000 
00002a5b l       .debug_str	00000000 
00002a90 l       .debug_str	00000000 
00002ad2 l       .debug_str	00000000 
00002b1c l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00002b9b l       .debug_str	00000000 
00002b30 l       .debug_str	00000000 
00002b40 l       .debug_str	00000000 
00002b49 l       .debug_str	00000000 
00002b54 l       .debug_str	00000000 
00002b63 l       .debug_str	00000000 
00002b78 l       .debug_str	00000000 
00002ba9 l       .debug_str	00000000 
00002c46 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002cf6 l       .debug_str	00000000 
00002cff l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d20 l       .debug_str	00000000 
00002d56 l       .debug_str	00000000 
00002dd9 l       .debug_str	00000000 
00002e64 l       .debug_str	00000000 
00002e80 l       .debug_str	00000000 
00002ecc l       .debug_str	00000000 
00002f20 l       .debug_str	00000000 
00002f3d l       .debug_str	00000000 
00002f51 l       .debug_str	00000000 
00002f9d l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00003007 l       .debug_str	00000000 
0000301b l       .debug_str	00000000 
00003062 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030dd l       .debug_str	00000000 
000030ba l       .debug_str	00000000 
000030eb l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
000030f9 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
00003e25 l       .debug_str	00000000 
00003110 l       .debug_str	00000000 
0002bf7b l       .debug_str	00000000 
0000311f l       .debug_str	00000000 
00003e57 l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003135 l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314c l       .debug_str	00000000 
00003154 l       .debug_str	00000000 
0000315b l       .debug_str	00000000 
00003165 l       .debug_str	00000000 
0000316d l       .debug_str	00000000 
00003175 l       .debug_str	00000000 
00003197 l       .debug_str	00000000 
000031a2 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
000031b6 l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
000031ca l       .debug_str	00000000 
000031d5 l       .debug_str	00000000 
000031e0 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
0005589b l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00003298 l       .debug_str	00000000 
000032a8 l       .debug_str	00000000 
000032b7 l       .debug_str	00000000 
000032bf l       .debug_str	00000000 
000032c6 l       .debug_str	00000000 
000032ce l       .debug_str	00000000 
0000330f l       .debug_str	00000000 
000032ec l       .debug_str	00000000 
0000331f l       .debug_str	00000000 
00003334 l       .debug_str	00000000 
0000333d l       .debug_str	00000000 
0000339a l       .debug_str	00000000 
000033ff l       .debug_str	00000000 
00003409 l       .debug_str	00000000 
00003419 l       .debug_str	00000000 
0000342e l       .debug_str	00000000 
00003436 l       .debug_str	00000000 
0000349a l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
0000350d l       .debug_str	00000000 
00003515 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003566 l       .debug_str	00000000 
0000357b l       .debug_str	00000000 
0000358e l       .debug_str	00000000 
000035a3 l       .debug_str	00000000 
000035aa l       .debug_str	00000000 
000035bf l       .debug_str	00000000 
0000b338 l       .debug_str	00000000 
0000b6ca l       .debug_str	00000000 
0000b72d l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
0000b7ad l       .debug_str	00000000 
0000b810 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000016bb l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 57lqf44sdwu8qayr
00000c71 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00020033 l       .debug_str	00000000 
0000bba7 l       .debug_str	00000000 
0000bbd8 l       .debug_str	00000000 
0000be6b l       .debug_str	00000000 
0000bbf2 l       .debug_str	00000000 
0000bc23 l       .debug_str	00000000 
0000bca1 l       .debug_str	00000000 
0000bc53 l       .debug_str	00000000 
0000bc84 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
0000a696 l       .debug_str	00000000 
0000bc94 l       .debug_str	00000000 
0000bc9a l       .debug_str	00000000 
0000bca0 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0000bca6 l       .debug_str	00000000 
0000bcf8 l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
0000bd4b l       .debug_str	00000000 
0000bdb4 l       .debug_str	00000000 
00020027 l       .debug_str	00000000 
0000be07 l       .debug_str	00000000 
0000be6a l       .debug_str	00000000 
0000be96 l       .debug_str	00000000 
0000bf0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00057f35 l       .debug_str	00000000 
000013e2 l       .debug_str	00000000 
00001725 l       .debug_str	00000000 
0000b90c l       .debug_str	00000000 
0000be8c l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0000b91b l       .debug_str	00000000 
0000b963 l       .debug_str	00000000 
0000b96c l       .debug_str	00000000 
0000b9b4 l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
0000b9bc l       .debug_str	00000000 
0000b5c7 l       .debug_str	00000000 
0000ba04 l       .debug_str	00000000 
0000ba4c l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
0000ba55 l       .debug_str	00000000 
0000ba9d l       .debug_str	00000000 
0000baa6 l       .debug_str	00000000 
0000bad7 l       .debug_str	00000000 
0001975e l       .debug_str	00000000 
0000bae0 l       .debug_str	00000000 
0000bb11 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
000016bb l       .debug_str	00000000 
0000bb1b l       .debug_str	00000000 
0000bb4c l       .debug_str	00000000 
00019772 l       .debug_str	00000000 
0000bb6c l       .debug_str	00000000 
0000bb9d l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00031536 l       .debug_str	00000000 
00054c1f l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052891 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dmg7ylzo67ab86f
0000c0b6 l       .debug_str	00000000 
0000bfb3 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
0000c00c l       .debug_str	00000000 
0000c018 l       .debug_str	00000000 
0000c05f l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
0000c06b l       .debug_str	00000000 
0000c0c6 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
00054c0d l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00056a23 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000bf62 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00020051 l       .debug_str	00000000 
00009548 l     F .text	00000044 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E
00000000 l    df *ABS*	00000000 2zydbnxo7qpu1b5q
0000c386 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
00019822 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0002618d l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
0002cadb l       .debug_str	00000000 
00027d88 l       .debug_str	00000000 
0000c3df l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000c3e5 l       .debug_str	00000000 
00019906 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
00019941 l       .debug_str	00000000 
0000c42f l       .debug_str	00000000 
0000c49e l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
00019768 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c10d l       .debug_str	00000000 
00016f7f l       .debug_str	00000000 
0000c124 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052c43 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c135 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c13f l       .debug_str	00000000 
0000c14a l       .debug_str	00000000 
0000c154 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0002373a l       .debug_str	00000000 
0000c15d l       .debug_str	00000000 
0000c1a3 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
00055630 l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
00023720 l       .debug_str	00000000 
0000c1be l       .debug_str	00000000 
00052a63 l       .debug_str	00000000 
00023763 l       .debug_str	00000000 
0005850b l       .debug_str	00000000 
0000c1c2 l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
00000e31 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00057947 l       .debug_str	00000000 
0000c1cf l       .debug_str	00000000 
00056f9f l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
0000c1d2 l       .debug_str	00000000 
0000c212 l       .debug_str	00000000 
0000c221 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
0000c269 l       .debug_str	00000000 
0000c2b0 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003666a l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
0000c2be l       .debug_str	00000000 
0000c302 l       .debug_str	00000000 
0000c30d l       .debug_str	00000000 
0000c316 l       .debug_str	00000000 
0000c31e l       .debug_str	00000000 
00054848 l       .debug_str	00000000 
0000e90e l       .debug_str	00000000 
00052e9f l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000c327 l       .debug_str	00000000 
0000c32d l       .debug_str	00000000 
0000c336 l       .debug_str	00000000 
0000c343 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
0003bbd7 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c346 l       .debug_str	00000000 
0000c35d l       .debug_str	00000000 
000576cf l       .debug_str	00000000 
00052ba9 l       .debug_str	00000000 
00010b99 l       .debug_str	00000000 
0000c373 l       .debug_str	00000000 
0000c379 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000c380 l       .debug_str	00000000 
00016ea7 l       .debug_str	00000000 
0000e9e6 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
000197d7 l       .debug_str	00000000 
00057dc8 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
200000e8 l     O .data	00000008 _ZN22piet_embedded_graphics7display12SPI_SETTINGS17h78a64d1040fbeee1E
20000160 l     O .bss	00000004 _ZN22piet_embedded_graphics7display14BACKLIGHT_HIGH17hd6bdc29c96588211E
00000000 l    df *ABS*	00000000 3eyht9wxrw4fbo0o
0000e50e l       .debug_str	00000000 
0000e472 l       .debug_str	00000000 
0000e4b8 l       .debug_str	00000000 
0000e557 l       .debug_str	00000000 
0000e59d l       .debug_str	00000000 
0000e90e l       .debug_str	00000000 
0001306c l       .debug_str	00000000 
0000e5d7 l       .debug_str	00000000 
0000e61e l       .debug_str	00000000 
0000e66c l       .debug_str	00000000 
0000e6b8 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000c380 l       .debug_str	00000000 
0000c386 l       .debug_str	00000000 
00016ea7 l       .debug_str	00000000 
0000e9e6 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
000197d7 l       .debug_str	00000000 
00057dc8 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
00019822 l       .debug_str	00000000 
0002618d l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
00027d88 l       .debug_str	00000000 
0000c3df l       .debug_str	00000000 
0000c3e5 l       .debug_str	00000000 
00019906 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
00019941 l       .debug_str	00000000 
0000c42f l       .debug_str	00000000 
0000e6f8 l       .debug_str	00000000 
0000e7a4 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000e876 l       .debug_str	00000000 
0000e88f l       .debug_str	00000000 
00052e9f l       .debug_str	00000000 
0001ff6f l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0001da5e l       .debug_str	00000000 
0000e8df l       .debug_str	00000000 
00038d91 l       .debug_str	00000000 
0001a9dc l       .debug_str	00000000 
00035941 l       .debug_str	00000000 
0000e8e2 l       .debug_str	00000000 
00022ef5 l       .debug_str	00000000 
00017471 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00010925 l       .debug_str	00000000 
0005924a l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
0002323c l       .debug_str	00000000 
0000e8e9 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000261d2 l       .debug_str	00000000 
0000e8f0 l       .debug_str	00000000 
00055631 l       .debug_str	00000000 
0000c1bf l       .debug_str	00000000 
00016f7f l       .debug_str	00000000 
00054848 l       .debug_str	00000000 
0000e8fc l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000e914 l       .debug_str	00000000 
0000e920 l       .debug_str	00000000 
0000e92c l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000e939 l       .debug_str	00000000 
000597b7 l       .debug_str	00000000 
0000e946 l       .debug_str	00000000 
0000e9bd l       .debug_str	00000000 
0000e9c6 l       .debug_str	00000000 
0000e9d4 l       .debug_str	00000000 
00019888 l       .debug_str	00000000 
0000e9ec l       .debug_str	00000000 
0000ea21 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c4a5 l       .debug_str	00000000 
0000c4ae l       .debug_str	00000000 
0000c4b8 l       .debug_str	00000000 
0000c4c8 l       .debug_str	00000000 
0000e883 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0000c4e9 l       .debug_str	00000000 
0000c4f1 l       .debug_str	00000000 
0000c4f7 l       .debug_str	00000000 
0000c4fd l       .debug_str	00000000 
0000c503 l       .debug_str	00000000 
0000c50a l       .debug_str	00000000 
0000c510 l       .debug_str	00000000 
0000c516 l       .debug_str	00000000 
0000c51d l       .debug_str	00000000 
0000c523 l       .debug_str	00000000 
0000c52b l       .debug_str	00000000 
0000c532 l       .debug_str	00000000 
0000c538 l       .debug_str	00000000 
0000c53e l       .debug_str	00000000 
0000c544 l       .debug_str	00000000 
0000c54a l       .debug_str	00000000 
0000c550 l       .debug_str	00000000 
0000c557 l       .debug_str	00000000 
0000c55e l       .debug_str	00000000 
0000c566 l       .debug_str	00000000 
0000c56e l       .debug_str	00000000 
0000c576 l       .debug_str	00000000 
0000c57d l       .debug_str	00000000 
0000c585 l       .debug_str	00000000 
0000c58c l       .debug_str	00000000 
0000c593 l       .debug_str	00000000 
0000c59a l       .debug_str	00000000 
0000c5a1 l       .debug_str	00000000 
0000c5a8 l       .debug_str	00000000 
0000c5af l       .debug_str	00000000 
0000c5b5 l       .debug_str	00000000 
0000c5bb l       .debug_str	00000000 
0000c5c1 l       .debug_str	00000000 
0000c5c7 l       .debug_str	00000000 
0000c5ce l       .debug_str	00000000 
0000c5d6 l       .debug_str	00000000 
0000eaaf l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
00056ea4 l       .debug_str	00000000 
0000c5e9 l       .debug_str	00000000 
00055630 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
00023720 l       .debug_str	00000000 
0000c1be l       .debug_str	00000000 
00052a63 l       .debug_str	00000000 
00023763 l       .debug_str	00000000 
0005850b l       .debug_str	00000000 
0000c1c2 l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
00000e31 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00057947 l       .debug_str	00000000 
0000c1cf l       .debug_str	00000000 
00056f9f l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000c5f5 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0000c605 l       .debug_str	00000000 
0000c641 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
0000c660 l       .debug_str	00000000 
0000c6ae l       .debug_str	00000000 
0000c6ef l       .debug_str	00000000 
0000c75b l       .debug_str	00000000 
0000c79d l       .debug_str	00000000 
0000c809 l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00058197 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
000542b5 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000c875 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000c8d8 l       .debug_str	00000000 
0000c8e9 l       .debug_str	00000000 
0000c959 l       .debug_str	00000000 
0000c9f3 l       .debug_str	00000000 
0000cab6 l       .debug_str	00000000 
0000cba3 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002d98f l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00052c98 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
0000ccba l       .debug_str	00000000 
0000cd0a l       .debug_str	00000000 
0000cd67 l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
0000cdbb l       .debug_str	00000000 
0000ce32 l       .debug_str	00000000 
0000ceb6 l       .debug_str	00000000 
0000cf31 l       .debug_str	00000000 
0000cfcf l       .debug_str	00000000 
0000d07a l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000d1e1 l       .debug_str	00000000 
0000d2b3 l       .debug_str	00000000 
0000d37c l       .debug_str	00000000 
0000d468 l       .debug_str	00000000 
0000d561 l       .debug_str	00000000 
0000d651 l       .debug_str	00000000 
0000d764 l       .debug_str	00000000 
0000d884 l       .debug_str	00000000 
0000d99b l       .debug_str	00000000 
0000dad4 l       .debug_str	00000000 
0000dc2a l       .debug_str	00000000 
000576cf l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00052ba9 l       .debug_str	00000000 
0000dd7f l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00010583 l       .debug_str	00000000 
0002cadb l       .debug_str	00000000 
0000decc l       .debug_str	00000000 
0000df1a l       .debug_str	00000000 
0000e09a l       .debug_str	00000000 
0000e0e8 l       .debug_str	00000000 
0000e129 l       .debug_str	00000000 
0000e177 l       .debug_str	00000000 
0000e1b8 l       .debug_str	00000000 
0000e208 l       .debug_str	00000000 
0000e38a l       .debug_str	00000000 
0000e3db l       .debug_str	00000000 
0000e41f l       .debug_str	00000000 
0001c130 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3sr9zgbizuzi7j5h
0000c5e9 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000ea95 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0000c4e9 l       .debug_str	00000000 
0000c4f1 l       .debug_str	00000000 
0000c4f7 l       .debug_str	00000000 
0000c4fd l       .debug_str	00000000 
0000c503 l       .debug_str	00000000 
0000c50a l       .debug_str	00000000 
0000c510 l       .debug_str	00000000 
0000c516 l       .debug_str	00000000 
0000c51d l       .debug_str	00000000 
0000c523 l       .debug_str	00000000 
0000c52b l       .debug_str	00000000 
0000c532 l       .debug_str	00000000 
0000c538 l       .debug_str	00000000 
0000c53e l       .debug_str	00000000 
0000c544 l       .debug_str	00000000 
0000c54a l       .debug_str	00000000 
0000c550 l       .debug_str	00000000 
0000c557 l       .debug_str	00000000 
0000c55e l       .debug_str	00000000 
0000c566 l       .debug_str	00000000 
0000c56e l       .debug_str	00000000 
0000c576 l       .debug_str	00000000 
0000c57d l       .debug_str	00000000 
0000c585 l       .debug_str	00000000 
0000c58c l       .debug_str	00000000 
0000c593 l       .debug_str	00000000 
0000c59a l       .debug_str	00000000 
0000c5a1 l       .debug_str	00000000 
0000c5a8 l       .debug_str	00000000 
0000c5af l       .debug_str	00000000 
0000c5b5 l       .debug_str	00000000 
0000c5bb l       .debug_str	00000000 
0000c5c1 l       .debug_str	00000000 
0000c5c7 l       .debug_str	00000000 
0000c5ce l       .debug_str	00000000 
0000c5d6 l       .debug_str	00000000 
0000eaaf l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
00056ea4 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0000ea2d l       .debug_str	00000000 
0000ea69 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44cnu8660c26myi6
0000eb0a l       .debug_str	00000000 
0000eaff l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
0000eb48 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00056a23 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000eabb l       .debug_str	00000000 
0000a53c l     F .text	0000001e _ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E
00000000 l    df *ABS*	00000000 469um0xjm96v8cgk
0000f6d9 l       .debug_str	00000000 
0001009a l       .debug_str	00000000 
000101ed l       .debug_str	00000000 
0001021d l       .debug_str	00000000 
0000c32d l       .debug_str	00000000 
0000c336 l       .debug_str	00000000 
0000c343 l       .debug_str	00000000 
0003bbd7 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c346 l       .debug_str	00000000 
0000c35d l       .debug_str	00000000 
00010b99 l       .debug_str	00000000 
00010b7c l       .debug_str	00000000 
00010344 l       .debug_str	00000000 
00010374 l       .debug_str	00000000 
00010c20 l       .debug_str	00000000 
00010bc2 l       .debug_str	00000000 
000103b6 l       .debug_str	00000000 
000103e6 l       .debug_str	00000000 
00010435 l       .debug_str	00000000 
00010465 l       .debug_str	00000000 
00010477 l       .debug_str	00000000 
000104a7 l       .debug_str	00000000 
000104e0 l       .debug_str	00000000 
000104e9 l       .debug_str	00000000 
00010516 l       .debug_str	00000000 
00010559 l       .debug_str	00000000 
0001056f l       .debug_str	00000000 
000106b3 l       .debug_str	00000000 
0001074f l       .debug_str	00000000 
00010819 l       .debug_str	00000000 
00010832 l       .debug_str	00000000 
00010911 l       .debug_str	00000000 
00010a5a l       .debug_str	00000000 
00010b77 l       .debug_str	00000000 
00010baf l       .debug_str	00000000 
00010bf4 l       .debug_str	00000000 
00010bfc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0000eb4e l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
0000eb55 l       .debug_str	00000000 
0000eb5a l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0000eb7f l       .debug_str	00000000 
0000eb86 l       .debug_str	00000000 
0000eb8b l       .debug_str	00000000 
0000ebc6 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
0000ebfd l       .debug_str	00000000 
0000ec2d l       .debug_str	00000000 
0000c10d l       .debug_str	00000000 
0000ec40 l       .debug_str	00000000 
0000ec46 l       .debug_str	00000000 
0000ec4d l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000e8e2 l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00058197 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
000542b5 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000c875 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000c8d8 l       .debug_str	00000000 
0000c8e9 l       .debug_str	00000000 
0000c959 l       .debug_str	00000000 
0000c9f3 l       .debug_str	00000000 
0000cab6 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002d98f l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00052c98 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
0000ccba l       .debug_str	00000000 
0000cd0a l       .debug_str	00000000 
0000cd67 l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
0000cdbb l       .debug_str	00000000 
0000ce32 l       .debug_str	00000000 
0000ceb6 l       .debug_str	00000000 
0000cf31 l       .debug_str	00000000 
0000cfcf l       .debug_str	00000000 
0000d07a l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000d1e1 l       .debug_str	00000000 
0000d2b3 l       .debug_str	00000000 
0000d37c l       .debug_str	00000000 
0000d468 l       .debug_str	00000000 
0000d561 l       .debug_str	00000000 
0000ec55 l       .debug_str	00000000 
0000ed67 l       .debug_str	00000000 
0000ee96 l       .debug_str	00000000 
000576cf l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00052ba9 l       .debug_str	00000000 
0000efc4 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00010a6e l       .debug_str	00000000 
0001050d l       .debug_str	00000000 
0000f0ea l       .debug_str	00000000 
0000f11a l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00010529 l       .debug_str	00000000 
0000f151 l       .debug_str	00000000 
0000f181 l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
000168ba l       .debug_str	00000000 
0000f1ce l       .debug_str	00000000 
0000f1fe l       .debug_str	00000000 
0000cba3 l       .debug_str	00000000 
0000d651 l       .debug_str	00000000 
0000d764 l       .debug_str	00000000 
0000d884 l       .debug_str	00000000 
0000d99b l       .debug_str	00000000 
0000dad4 l       .debug_str	00000000 
0000dc2a l       .debug_str	00000000 
0000dd7f l       .debug_str	00000000 
00010583 l       .debug_str	00000000 
0000f21e l       .debug_str	00000000 
0000f24e l       .debug_str	00000000 
0000ea26 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000f39c l       .debug_str	00000000 
0000f3a7 l       .debug_str	00000000 
0000f3b1 l       .debug_str	00000000 
0000e9e6 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
000197d7 l       .debug_str	00000000 
0000f3ba l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
00019822 l       .debug_str	00000000 
0002618d l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
0002cadb l       .debug_str	00000000 
00027d88 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
00027d1c l       .debug_str	00000000 
0000f3c7 l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
000106d7 l       .debug_str	00000000 
0000f3d3 l       .debug_str	00000000 
0000f403 l       .debug_str	00000000 
0000f4a9 l       .debug_str	00000000 
0000f4ae l       .debug_str	00000000 
0000f4b4 l       .debug_str	00000000 
0000f4bd l       .debug_str	00000000 
000552a9 l       .debug_str	00000000 
00010773 l       .debug_str	00000000 
0000f4c7 l       .debug_str	00000000 
0000f4f7 l       .debug_str	00000000 
0000f5cb l       .debug_str	00000000 
00056ae7 l       .debug_str	00000000 
0002596b l       .debug_str	00000000 
0001082c l       .debug_str	00000000 
0000f5d1 l       .debug_str	00000000 
0000f601 l       .debug_str	00000000 
0000f624 l       .debug_str	00000000 
0000f651 l       .debug_str	00000000 
0000f672 l       .debug_str	00000000 
0000f779 l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
0000f853 l       .debug_str	00000000 
0000f8ca l       .debug_str	00000000 
0000f94e l       .debug_str	00000000 
0000f9c9 l       .debug_str	00000000 
0000fa67 l       .debug_str	00000000 
0000fb12 l       .debug_str	00000000 
0000fbb4 l       .debug_str	00000000 
0000fc88 l       .debug_str	00000000 
0000fd79 l       .debug_str	00000000 
0000fe69 l       .debug_str	00000000 
00010846 l       .debug_str	00000000 
0000ff51 l       .debug_str	00000000 
0000ff81 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00010925 l       .debug_str	00000000 
0001006a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 49htiubyezwzqodr
00052808 l       .debug_str	00000000 
00010c2b l       .debug_str	00000000 
00010c5c l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00019768 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00010c65 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1vm1jsf9206jqt1a
00013f17 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010dc9 l       .debug_str	00000000 
00010dd5 l       .debug_str	00000000 
00010e96 l       .debug_str	00000000 
00026172 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000ea95 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010cb7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0000c4e9 l       .debug_str	00000000 
0000c4f1 l       .debug_str	00000000 
0000c4f7 l       .debug_str	00000000 
0000c4fd l       .debug_str	00000000 
0000c503 l       .debug_str	00000000 
0000c50a l       .debug_str	00000000 
0000c510 l       .debug_str	00000000 
0000c516 l       .debug_str	00000000 
0000c51d l       .debug_str	00000000 
0000c523 l       .debug_str	00000000 
0000c52b l       .debug_str	00000000 
0000c532 l       .debug_str	00000000 
0000c538 l       .debug_str	00000000 
0000c53e l       .debug_str	00000000 
0000c544 l       .debug_str	00000000 
0000c54a l       .debug_str	00000000 
0000c550 l       .debug_str	00000000 
0000c557 l       .debug_str	00000000 
0000c55e l       .debug_str	00000000 
0000c566 l       .debug_str	00000000 
0000c56e l       .debug_str	00000000 
0000c576 l       .debug_str	00000000 
0000c57d l       .debug_str	00000000 
0000c585 l       .debug_str	00000000 
0000c58c l       .debug_str	00000000 
0000c593 l       .debug_str	00000000 
0000c59a l       .debug_str	00000000 
0000c5a1 l       .debug_str	00000000 
0000c5a8 l       .debug_str	00000000 
0000c5af l       .debug_str	00000000 
0000c5b5 l       .debug_str	00000000 
0000c5bb l       .debug_str	00000000 
0000c5c1 l       .debug_str	00000000 
0000c5c7 l       .debug_str	00000000 
0000c5ce l       .debug_str	00000000 
0000c5d6 l       .debug_str	00000000 
0000eaaf l       .debug_str	00000000 
00010cdb l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00010d01 l       .debug_str	00000000 
00010dc2 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3on1efjgx1q5grpf
00026172 l       .debug_str	00000000 
00010e96 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000e876 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010cb7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c4a5 l       .debug_str	00000000 
0000c4ae l       .debug_str	00000000 
0000c4b8 l       .debug_str	00000000 
0000c4c8 l       .debug_str	00000000 
0000e883 l       .debug_str	00000000 
00010e9d l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00010ec3 l       .debug_str	00000000 
00010dc2 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010dc9 l       .debug_str	00000000 
00010f6a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dxw5xp80tje79rx
00001366 l       .debug_str	00000000 
00011061 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010cb7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010dc9 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
00010cdb l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00010e96 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00057792 l       .debug_str	00000000 
00011011 l       .debug_str	00000000 
0001104a l       .debug_str	00000000 
00026172 l       .debug_str	00000000 
00010e9d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2y6wwi1wx5h1fq
00002330 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010cb7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
00010cdb l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
00010e96 l       .debug_str	00000000 
0001109a l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 10fld6rw1cguoaz1
00001366 l       .debug_str	00000000 
000111d3 l       .debug_str	00000000 
0001120f l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
00011218 l       .debug_str	00000000 
0001b0d2 l       .debug_str	00000000 
00011243 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0002c47c l       .debug_str	00000000 
000112a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00013d9d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00011179 l       .debug_str	00000000 
000111c0 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001ff9b l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000eee l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1ewcpkt7vg0rrbln
0001163b l       .debug_str	00000000 
0003bbd7 l       .debug_str	00000000 
000119cc l       .debug_str	00000000 
00002403 l       .debug_str	00000000 
000119c8 l       .debug_str	00000000 
000119c3 l       .debug_str	00000000 
00022ef5 l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000540c4 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00057792 l       .debug_str	00000000 
00011352 l       .debug_str	00000000 
000113de l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
000133b6 l       .debug_str	00000000 
0005504c l       .debug_str	00000000 
0005933f l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016db0 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00023722 l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
000113fb l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00011487 l       .debug_str	00000000 
000114bc l       .debug_str	00000000 
000114d6 l       .debug_str	00000000 
0001150b l       .debug_str	00000000 
00011998 l       .debug_str	00000000 
00052891 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00011525 l       .debug_str	00000000 
00011979 l       .debug_str	00000000 
0001193f l       .debug_str	00000000 
0001155a l       .debug_str	00000000 
00011921 l       .debug_str	00000000 
00011574 l       .debug_str	00000000 
000115aa l       .debug_str	00000000 
000118e8 l       .debug_str	00000000 
000118cc l       .debug_str	00000000 
000115c5 l       .debug_str	00000000 
00011895 l       .debug_str	00000000 
00011879 l       .debug_str	00000000 
00011842 l       .debug_str	00000000 
00011827 l       .debug_str	00000000 
000117f1 l       .debug_str	00000000 
000117d6 l       .debug_str	00000000 
000117a0 l       .debug_str	00000000 
00011785 l       .debug_str	00000000 
0001174f l       .debug_str	00000000 
00011734 l       .debug_str	00000000 
000116fe l       .debug_str	00000000 
000116e3 l       .debug_str	00000000 
000116ad l       .debug_str	00000000 
00011619 l       .debug_str	00000000 
00011d0c l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00011a0a l       .debug_str	00000000 
00011a06 l       .debug_str	00000000 
00052e80 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00051b7c l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000112aa l       .debug_str	00000000 
000168ba l       .debug_str	00000000 
000112ae l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0002c448 l       .debug_str	00000000 
000112b3 l       .debug_str	00000000 
0001349a l       .debug_str	00000000 
0001ffd2 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0002810a l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
000112b9 l       .debug_str	00000000 
000135d4 l       .debug_str	00000000 
000112bc l       .debug_str	00000000 
00044ccc l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
000536de l       .debug_str	00000000 
00057ff7 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00011a00 l       .debug_str	00000000 
000119fa l       .debug_str	00000000 
000119f4 l       .debug_str	00000000 
000119ee l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00055062 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0005924a l       .debug_str	00000000 
000024e8 l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
00019768 l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000119eb l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00026172 l       .debug_str	00000000 
000112bf l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
00052c43 l       .debug_str	00000000 
00054d75 l       .debug_str	00000000 
00052704 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
000112c7 l       .debug_str	00000000 
000112d3 l       .debug_str	00000000 
000112de l       .debug_str	00000000 
000112eb l       .debug_str	00000000 
000112f9 l       .debug_str	00000000 
00011308 l       .debug_str	00000000 
00012e5e l       .debug_str	00000000 
000119a7 l       .debug_str	00000000 
0001131a l       .debug_str	00000000 
00011340 l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
0001134a l       .debug_str	00000000 
00052ba9 l       .debug_str	00000000 
00016c8b l       .debug_str	00000000 
000119e7 l       .debug_str	00000000 
00012ea6 l       .debug_str	00000000 
00013c2a l       .debug_str	00000000 
00013c9c l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
000119de l       .debug_str	00000000 
0000137e l       .debug_str	00000000 
000119d4 l       .debug_str	00000000 
0001c2a0 l     O .text	0000001c str.0
0001c520 l     O .text	00000021 str.1
0001c800 l     O .text	00000039 str.2
0001c860 l     O .text	00000021 str.3
0001c8a0 l     O .text	00000023 str.4
00000000 l    df *ABS*	00000000 1expeypgojy7j7ax
000031f0 l       .debug_str	00000000 
00011a0f l       .debug_str	00000000 
00011a4f l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00017512 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a654 l       .debug_str	00000000 
000042ea l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00057511 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00051f56 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
0005834c l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
000042f4 l       .debug_str	00000000 
000042fd l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
0005589b l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004241 l       .debug_str	00000000 
00004268 l       .debug_str	00000000 
0000439d l       .debug_str	00000000 
00004384 l       .debug_str	00000000 
0003666a l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1rlfak9oa38tk11p
00011b3d l       .debug_str	00000000 
00052c98 l       .debug_str	00000000 
00016c8b l       .debug_str	00000000 
00011b7c l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00011bef l       .debug_str	00000000 
00011c2e l       .debug_str	00000000 
00011d0c l       .debug_str	00000000 
00011c6b l       .debug_str	00000000 
00011cce l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00011cf5 l       .debug_str	00000000 
00052704 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000133b6 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011a96 l       .debug_str	00000000 
0002e64f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00052ba9 l       .debug_str	00000000 
00011a9f l       .debug_str	00000000 
00011b34 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005504c l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
0005933f l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016db0 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00023722 l       .debug_str	00000000 
00057792 l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2qmowyvqdyca5tsh
00011ef5 l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
00011d5a l       .debug_str	00000000 
00011d9f l       .debug_str	00000000 
00011dac l       .debug_str	00000000 
00011df1 l       .debug_str	00000000 
00011dfe l       .debug_str	00000000 
00011e43 l       .debug_str	00000000 
00011e50 l       .debug_str	00000000 
00011e95 l       .debug_str	00000000 
00011ea2 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
00011eea l       .debug_str	00000000 
0000c0b6 l       .debug_str	00000000 
00011f3d l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00011f83 l       .debug_str	00000000 
00011fc9 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
00054c0d l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00056a23 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00011d16 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 31071ffymf9y6tnj
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00012f2e l       .debug_str	00000000 
000133b6 l       .debug_str	00000000 
0005504c l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
0005933f l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016db0 l       .debug_str	00000000 
00023722 l       .debug_str	00000000 
0001200f l       .debug_str	00000000 
0001208b l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 33bdok1lz3m5vvyy
00016beb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000133b6 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000120b8 l       .debug_str	00000000 
00012114 l       .debug_str	00000000 
0001210a l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
00052704 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3jm8kpc30rum4biz
0001221b l       .debug_str	00000000 
000119de l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00013c9c l       .debug_str	00000000 
00013c2a l       .debug_str	00000000 
000121ac l       .debug_str	00000000 
000121ed l       .debug_str	00000000 
0001225c l       .debug_str	00000000 
000122bf l       .debug_str	00000000 
00052c98 l       .debug_str	00000000 
0001230f l       .debug_str	00000000 
0001238f l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00012403 l       .debug_str	00000000 
00012483 l       .debug_str	00000000 
00000f82 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011a96 l       .debug_str	00000000 
0002e64f l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
000133b6 l       .debug_str	00000000 
0005504c l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
0005933f l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016db0 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00016c8b l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00023722 l       .debug_str	00000000 
00057792 l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0001211b l       .debug_str	00000000 
0001215e l       .debug_str	00000000 
000119cc l       .debug_str	00000000 
0003bbd7 l       .debug_str	00000000 
000119d4 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000137e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3tdzqkid9cxb86kn
00012dd1 l       .debug_str	00000000 
00012763 l       .debug_str	00000000 
0003795a l       .debug_str	00000000 
00012792 l       .debug_str	00000000 
00052922 l       .debug_str	00000000 
000127ec l       .debug_str	00000000 
00035940 l       .debug_str	00000000 
00012845 l       .debug_str	00000000 
000128a3 l       .debug_str	00000000 
000128ac l       .debug_str	00000000 
0001290a l       .debug_str	00000000 
00012913 l       .debug_str	00000000 
00012976 l       .debug_str	00000000 
00012983 l       .debug_str	00000000 
000129e2 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000129ec l       .debug_str	00000000 
00012a47 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00012a4d l       .debug_str	00000000 
00012aa7 l       .debug_str	00000000 
00012aac l       .debug_str	00000000 
00053be5 l       .debug_str	00000000 
00012b07 l       .debug_str	00000000 
00012b38 l       .debug_str	00000000 
00012b46 l       .debug_str	00000000 
00012b76 l       .debug_str	00000000 
00012b83 l       .debug_str	00000000 
00012bb8 l       .debug_str	00000000 
00012bfb l       .debug_str	00000000 
00012c0c l       .debug_str	00000000 
00012c49 l       .debug_str	00000000 
00012c54 l       .debug_str	00000000 
00012c8f l       .debug_str	00000000 
00012c99 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00012d0c l       .debug_str	00000000 
00012d18 l       .debug_str	00000000 
00012d49 l       .debug_str	00000000 
00012d57 l       .debug_str	00000000 
00012d87 l       .debug_str	00000000 
00012d94 l       .debug_str	00000000 
00012dc4 l       .debug_str	00000000 
00012e2d l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000f39c l       .debug_str	00000000 
0000f3a7 l       .debug_str	00000000 
0000f3b1 l       .debug_str	00000000 
0000e9e6 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
000197d7 l       .debug_str	00000000 
0000f3ba l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
00019822 l       .debug_str	00000000 
0002618d l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
0002cadb l       .debug_str	00000000 
00027d88 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
00027cb1 l       .debug_str	00000000 
00052e9f l       .debug_str	00000000 
0005806c l       .debug_str	00000000 
00012e38 l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000112b9 l       .debug_str	00000000 
000135d4 l       .debug_str	00000000 
000112bc l       .debug_str	00000000 
00044ccc l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
000536de l       .debug_str	00000000 
00057ff7 l       .debug_str	00000000 
00026172 l       .debug_str	00000000 
000112bf l       .debug_str	00000000 
00052c43 l       .debug_str	00000000 
000119a7 l       .debug_str	00000000 
000540c4 l       .debug_str	00000000 
00012e41 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00012e4d l       .debug_str	00000000 
0003593f l       .debug_str	00000000 
00013da2 l       .debug_str	00000000 
0003e87a l       .debug_str	00000000 
00053f3c l       .debug_str	00000000 
000112da l       .debug_str	00000000 
000112e5 l       .debug_str	00000000 
000112f2 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00012e67 l       .debug_str	00000000 
00012b7d l       .debug_str	00000000 
00012e6e l       .debug_str	00000000 
00012e7c l       .debug_str	00000000 
00012e89 l       .debug_str	00000000 
00012e98 l       .debug_str	00000000 
00012ea8 l       .debug_str	00000000 
00012eb5 l       .debug_str	00000000 
00012ec1 l       .debug_str	00000000 
00012ecf l       .debug_str	00000000 
00012ede l       .debug_str	00000000 
00012ef0 l       .debug_str	00000000 
00012f06 l       .debug_str	00000000 
00012f11 l       .debug_str	00000000 
00012f1b l       .debug_str	00000000 
00012f27 l       .debug_str	00000000 
00012f34 l       .debug_str	00000000 
000283ec l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
00012f4f l       .debug_str	00000000 
00012f55 l       .debug_str	00000000 
00012f5b l       .debug_str	00000000 
00012f69 l       .debug_str	00000000 
0000232f l       .debug_str	00000000 
00002335 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012f6e l       .debug_str	00000000 
00012f79 l       .debug_str	00000000 
00012f85 l       .debug_str	00000000 
00012f90 l       .debug_str	00000000 
00012f9b l       .debug_str	00000000 
00012fa6 l       .debug_str	00000000 
00012fb1 l       .debug_str	00000000 
00012fbc l       .debug_str	00000000 
00012fc7 l       .debug_str	00000000 
00012fd2 l       .debug_str	00000000 
00012fdd l       .debug_str	00000000 
00012fe8 l       .debug_str	00000000 
00012ff3 l       .debug_str	00000000 
00012fff l       .debug_str	00000000 
0001300b l       .debug_str	00000000 
00013017 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00054d75 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
000124c1 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a654 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00057511 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00051f56 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
0005834c l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
000124cc l       .debug_str	00000000 
000124fa l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0001250b l       .debug_str	00000000 
0001253f l       .debug_str	00000000 
0001254d l       .debug_str	00000000 
0001257e l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0003aad8 l       .debug_str	00000000 
00012596 l       .debug_str	00000000 
000125ae l       .debug_str	00000000 
000125e9 l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00012605 l       .debug_str	00000000 
00012609 l       .debug_str	00000000 
0001261a l       .debug_str	00000000 
00012638 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000112c7 l       .debug_str	00000000 
000112d3 l       .debug_str	00000000 
000112de l       .debug_str	00000000 
000112eb l       .debug_str	00000000 
000112f9 l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
00011308 l       .debug_str	00000000 
00012e5e l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00012673 l       .debug_str	00000000 
0001267c l       .debug_str	00000000 
00012685 l       .debug_str	00000000 
00012690 l       .debug_str	00000000 
0001269b l       .debug_str	00000000 
000126a6 l       .debug_str	00000000 
000126b2 l       .debug_str	00000000 
000126bc l       .debug_str	00000000 
000126c9 l       .debug_str	00000000 
000126d7 l       .debug_str	00000000 
000126e6 l       .debug_str	00000000 
000126f3 l       .debug_str	00000000 
000283fd l       .debug_str	00000000 
00012703 l       .debug_str	00000000 
0001272e l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
0003666a l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
00012737 l       .debug_str	00000000 
000231e2 l       .debug_str	00000000 
20000164 l     O .bss	00000050 _ZN3app5chip810CHIP8_TASK17hff5b4dd283ecf9fcE
0000fca4 l     F .text	000000a8 _ZN3app5chip812render_block17h6c8b81526965606bE
00010490 l     F .text	00000088 _ZN3app5chip812update_color17h39b5eb1e5de90ff7E
00010014 l     F .text	00000022 _ZN3app5chip813PixelIterator10get_window17h111d7a23399766c3E
0000fdf8 l     F .text	0000021c _ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE
0000fd4c l     F .text	000000ac _ZN3app5chip813PixelIterator3new17h975cb5db80e10243E
00010036 l     F .text	00000130 _ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE
200041b4 l     O .bss	00000800 _ZN3app5chip813SCREEN_BUFFER17hb69bb065c68bd165E
00010376 l     F .text	0000011a _ZN3app5chip813convert_color17h69ad441a1103d8f7E
0000f9a2 l     F .text	00000302 _ZN3app5chip813render_region17hc692a4d55cab74f0E
200001b4 l     O .bss	00004000 _ZN3app5chip816CHIP8_TASK_STACK17hdcbcc41748325ebbE
00023c40 l     O .text	00000004 _ZN3app5chip823PHYSICAL_TO_VIRTUAL_MAP17h5b1a7b084f35e873E
00024444 l     O .text	00000004 _ZN3app5chip823VIRTUAL_TO_PHYSICAL_MAP17h0c964d4301637332E
0000f3f6 l     F .text	00000010 _ZN3app5chip88Hardware3new17h53332fc09faf36beE
0000f340 l     F .text	000000b6 _ZN3app5chip89task_func17h20d1a4715d78a45aE
0001db90 l     O .text	00000021 str.0
0001dbd0 l     O .text	0000001c str.1
0001dcb0 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 3zmcssigt164od5g
00000d77 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00020033 l       .debug_str	00000000 
00020027 l       .debug_str	00000000 
0005806d l       .debug_str	00000000 
00055528 l       .debug_str	00000000 
000042ea l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00057511 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00051f56 l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
0005834c l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
000042f4 l       .debug_str	00000000 
000042fd l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004241 l       .debug_str	00000000 
00004268 l       .debug_str	00000000 
0000439d l       .debug_str	00000000 
00004384 l       .debug_str	00000000 
00056678 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000133b6 l       .debug_str	00000000 
0005504c l       .debug_str	00000000 
0005933f l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016db0 l       .debug_str	00000000 
0005924a l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000542b5 l       .debug_str	00000000 
000133bc l       .debug_str	00000000 
000133e3 l       .debug_str	00000000 
000133eb l       .debug_str	00000000 
000133f2 l       .debug_str	00000000 
000133f8 l       .debug_str	00000000 
000133ff l       .debug_str	00000000 
00055062 l       .debug_str	00000000 
00013405 l       .debug_str	00000000 
00013414 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00013422 l       .debug_str	00000000 
00013427 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00054d75 l       .debug_str	00000000 
00013263 l       .debug_str	00000000 
00013023 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
00052a63 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00023763 l       .debug_str	00000000 
0001302f l       .debug_str	00000000 
00013066 l       .debug_str	00000000 
0000e90e l       .debug_str	00000000 
00013072 l       .debug_str	00000000 
000130a9 l       .debug_str	00000000 
000130b4 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
000130bc l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000130c3 l       .debug_str	00000000 
000130ca l       .debug_str	00000000 
000583ea l       .debug_str	00000000 
000130d3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00052c26 l       .debug_str	00000000 
000130dd l       .debug_str	00000000 
000133d4 l       .debug_str	00000000 
000130e7 l       .debug_str	00000000 
0001abb5 l       .debug_str	00000000 
0001311d l       .debug_str	00000000 
0001314b l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a654 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
0005589b l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00013157 l       .debug_str	00000000 
0001318e l       .debug_str	00000000 
00052c43 l       .debug_str	00000000 
00057f1e l       .debug_str	00000000 
000576cf l       .debug_str	00000000 
00058197 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00013197 l       .debug_str	00000000 
000131ab l       .debug_str	00000000 
000131de l       .debug_str	00000000 
000131e9 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001321f l       .debug_str	00000000 
0001325d l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
0003666a l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
00013270 l       .debug_str	00000000 
000132b3 l       .debug_str	00000000 
000132cb l       .debug_str	00000000 
0001330b l       .debug_str	00000000 
00013320 l       .debug_str	00000000 
0001335a l       .debug_str	00000000 
00013369 l       .debug_str	00000000 
000133a8 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
00052e9f l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
0001975e l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00031536 l       .debug_str	00000000 
00054c1f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052891 l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
20004a64 l     O .bss	00000001 _ZN3app12touch_sensor10I2C_BUFFER17h59a4aa8a83a81f4aE
200049b8 l     O .bss	00000052 _ZN3app12touch_sensor10TOUCH_DATA17h163add160b6b9aeeE
200049b8 l     O .bss	00000000 _ZN3app12touch_sensor11TOUCH_DELAY17h441481867ef0356fE
20004a4c l     O .bss	00000010 _ZN3app12touch_sensor11TOUCH_EVENT17h8cf0280828a4287dE
200049b4 l     O .bss	00000004 _ZN3app12touch_sensor11TOUCH_RESET17h4fe28d66de6f4ab2E
0001093c l     F .text	00000752 _ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E
0001108e l     F .text	0000019a _ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E
00010802 l     F .text	0000013a _ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E
000107b6 l     F .text	0000004c _ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E
20004a0a l     O .bss	0000003f _ZN3app12touch_sensor3BUF17h040da56764e02a75E
20004a5c l     O .bss	00000008 _ZN3app12touch_sensor8I2C_DATA17hacfa42d26b44dc46E
00024590 l     O .text	00000021 str.0
000245d0 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 4lznhndqn2vyhgat
0001fee6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00051b7c l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000168ba l       .debug_str	00000000 
000112ae l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
00013494 l       .debug_str	00000000 
0002c448 l       .debug_str	00000000 
000112b3 l       .debug_str	00000000 
0001ffd2 l       .debug_str	00000000 
000112aa l       .debug_str	00000000 
0001349a l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0001342b l       .debug_str	00000000 
00019ec9 l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0001ffcc l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n402vs8u2uo93u9
000134f2 l       .debug_str	00000000 
0000e8df l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00038d91 l       .debug_str	00000000 
0001a9dc l       .debug_str	00000000 
00035941 l       .debug_str	00000000 
0000e8e2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c10d l       .debug_str	00000000 
00016f7f l       .debug_str	00000000 
00054d75 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00012673 l       .debug_str	00000000 
0001267c l       .debug_str	00000000 
00012685 l       .debug_str	00000000 
00012690 l       .debug_str	00000000 
0001269b l       .debug_str	00000000 
000126a6 l       .debug_str	00000000 
000126b2 l       .debug_str	00000000 
000126bc l       .debug_str	00000000 
000126c9 l       .debug_str	00000000 
000126d7 l       .debug_str	00000000 
000126e6 l       .debug_str	00000000 
000126f3 l       .debug_str	00000000 
000283fd l       .debug_str	00000000 
000283ec l       .debug_str	00000000 
0002cadb l       .debug_str	00000000 
000134a6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4op4c7h4jps44h2j
00000d1e l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00020033 l       .debug_str	00000000 
00013525 l       .debug_str	00000000 
00013562 l       .debug_str	00000000 
00013573 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00031536 l       .debug_str	00000000 
00054c1f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052891 l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 50njrjlotjql8eh3
00013617 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000135a5 l       .debug_str	00000000 
000135aa l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000135b1 l       .debug_str	00000000 
000135b9 l       .debug_str	00000000 
0000c144 l       .debug_str	00000000 
000135c1 l       .debug_str	00000000 
000135c9 l       .debug_str	00000000 
000135d0 l       .debug_str	00000000 
00017174 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
000135d7 l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002006a l       .debug_str	00000000 
0001362c l       .debug_str	00000000 
000135dc l       .debug_str	00000000 
0002bdef l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53ibzm1eooc9qec2
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00013638 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00013691 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00013640 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 9p7wjmcx8ujsz0s
000136cd l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001369e l       .debug_str	00000000 
000136c4 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 mka4gzufox8dws5
0000eb86 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001370c l       .debug_str	00000000 
00013717 l       .debug_str	00000000 
00013752 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001378c l       .debug_str	00000000 
000137bc l       .debug_str	00000000 
000137cf l       .debug_str	00000000 
0000a666 l       .debug_str	00000000 
000137ff l       .debug_str	00000000 
0000a948 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00056807 l       .debug_str	00000000 
0002d7fb l       .debug_str	00000000 
000136d5 l       .debug_str	00000000 
000136da l       .debug_str	00000000 
000136e0 l       .debug_str	00000000 
00017174 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0000eb4e l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
000136e8 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nnlkt1k56qesyal
000139b6 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00000f82 l       .debug_str	00000000 
00013922 l       .debug_str	00000000 
000139ff l       .debug_str	00000000 
00013a49 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00013b2b l       .debug_str	00000000 
00013b8e l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00013c06 l       .debug_str	00000000 
00013c78 l       .debug_str	00000000 
00013d36 l       .debug_str	00000000 
00052e9f l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
000119cc l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0003bbd7 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
000133b6 l       .debug_str	00000000 
0005504c l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
0005933f l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016db0 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00016c8b l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00023722 l       .debug_str	00000000 
00057792 l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
000119d4 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000137e l       .debug_str	00000000 
000119de l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00013c9c l       .debug_str	00000000 
00013c2a l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00013808 l       .debug_str	00000000 
00013892 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 r34gpska6wbd31
00012f85 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00013d3a l       .debug_str	00000000 
0002bd09 l       .debug_str	00000000 
0000eb55 l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00013d9d l       .debug_str	00000000 
00013d91 l       .debug_str	00000000 
0001fee6 l       .debug_str	00000000 
00013da4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 rclpy9fcvorr8wf
00000c36 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
0001fee6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00056807 l       .debug_str	00000000 
0002d7fb l       .debug_str	00000000 
000136d5 l       .debug_str	00000000 
000136da l       .debug_str	00000000 
000136e0 l       .debug_str	00000000 
00017174 l       .debug_str	00000000 
0002810a l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00013daf l       .debug_str	00000000 
00013e0b l       .debug_str	00000000 
00013d37 l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.8j8txwjh-cgu.0
000154a6 l       .debug_str	00000000 
000144a1 l       .debug_str	00000000 
000144cb l       .debug_str	00000000 
00014519 l       .debug_str	00000000 
00014521 l       .debug_str	00000000 
0000c067 l       .debug_str	00000000 
0001456e l       .debug_str	00000000 
000145c8 l       .debug_str	00000000 
000145d6 l       .debug_str	00000000 
00014629 l       .debug_str	00000000 
00014631 l       .debug_str	00000000 
0001210a l       .debug_str	00000000 
00014686 l       .debug_str	00000000 
000146c4 l       .debug_str	00000000 
000146df l       .debug_str	00000000 
0001473e l       .debug_str	00000000 
00013d37 l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
000147a3 l       .debug_str	00000000 
000147d4 l       .debug_str	00000000 
000147df l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00014811 l       .debug_str	00000000 
0001483f l       .debug_str	00000000 
00014851 l       .debug_str	00000000 
00014877 l       .debug_str	00000000 
00014883 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
000148ca l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
0000c0c6 l       .debug_str	00000000 
00014915 l       .debug_str	00000000 
00052ba9 l       .debug_str	00000000 
0001491b l       .debug_str	00000000 
000149a7 l       .debug_str	00000000 
000149c2 l       .debug_str	00000000 
000149f2 l       .debug_str	00000000 
00014a27 l       .debug_str	00000000 
00014a57 l       .debug_str	00000000 
00014a6d l       .debug_str	00000000 
00014aa3 l       .debug_str	00000000 
00014abe l       .debug_str	00000000 
00014af8 l       .debug_str	00000000 
00014b17 l       .debug_str	00000000 
00014b53 l       .debug_str	00000000 
00014b79 l       .debug_str	00000000 
00014b85 l       .debug_str	00000000 
00014bac l       .debug_str	00000000 
00014bb9 l       .debug_str	00000000 
00014dc6 l       .debug_str	00000000 
00014c07 l       .debug_str	00000000 
00014e36 l       .debug_str	00000000 
00014c58 l       .debug_str	00000000 
00014caa l       .debug_str	00000000 
00014cb6 l       .debug_str	00000000 
00014d01 l       .debug_str	00000000 
00014d13 l       .debug_str	00000000 
00014d56 l       .debug_str	00000000 
00014d61 l       .debug_str	00000000 
00014dbd l       .debug_str	00000000 
00014dce l       .debug_str	00000000 
00014e2d l       .debug_str	00000000 
00014e41 l       .debug_str	00000000 
00014e97 l       .debug_str	00000000 
00014f2c l       .debug_str	00000000 
00014f38 l       .debug_str	00000000 
00014fd2 l       .debug_str	00000000 
00014fe3 l       .debug_str	00000000 
00015008 l       .debug_str	00000000 
000150b1 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00052c98 l       .debug_str	00000000 
000150c2 l       .debug_str	00000000 
0001514a l       .debug_str	00000000 
00015101 l       .debug_str	00000000 
00015145 l       .debug_str	00000000 
0001518f l       .debug_str	00000000 
000151d0 l       .debug_str	00000000 
000151f5 l       .debug_str	00000000 
00015246 l       .debug_str	00000000 
0001528b l       .debug_str	00000000 
000152de l       .debug_str	00000000 
0001533f l       .debug_str	00000000 
000153a6 l       .debug_str	00000000 
0000acdc l       .debug_str	00000000 
000153ed l       .debug_str	00000000 
00015438 l       .debug_str	00000000 
00015445 l       .debug_str	00000000 
0001551f l       .debug_str	00000000 
00015517 l       .debug_str	00000000 
00015527 l       .debug_str	00000000 
00003d4f l       .debug_str	00000000 
00015543 l       .debug_str	00000000 
000155b8 l       .debug_str	00000000 
000155e3 l       .debug_str	00000000 
0001565c l       .debug_str	00000000 
00015666 l       .debug_str	00000000 
0001568c l       .debug_str	00000000 
000156c5 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
000156dd l       .debug_str	00000000 
00015716 l       .debug_str	00000000 
0001574e l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
00015787 l       .debug_str	00000000 
000157c2 l       .debug_str	00000000 
00015806 l       .debug_str	00000000 
0001584c l       .debug_str	00000000 
00015888 l       .debug_str	00000000 
000158b0 l       .debug_str	00000000 
000158ec l       .debug_str	00000000 
00015910 l       .debug_str	00000000 
0001596d l       .debug_str	00000000 
00015981 l       .debug_str	00000000 
000159d2 l       .debug_str	00000000 
000168ba l       .debug_str	00000000 
000159de l       .debug_str	00000000 
00015a2f l       .debug_str	00000000 
00015a46 l       .debug_str	00000000 
00015a97 l       .debug_str	00000000 
00015ab5 l       .debug_str	00000000 
00015b06 l       .debug_str	00000000 
00015b18 l       .debug_str	00000000 
00015b70 l       .debug_str	00000000 
00015b86 l       .debug_str	00000000 
00015be9 l       .debug_str	00000000 
00015c14 l       .debug_str	00000000 
00015c77 l       .debug_str	00000000 
00015cec l       .debug_str	00000000 
00015d50 l       .debug_str	00000000 
00015d5a l       .debug_str	00000000 
00015dc5 l       .debug_str	00000000 
00015dd4 l       .debug_str	00000000 
00015e40 l       .debug_str	00000000 
00015e72 l       .debug_str	00000000 
00015e98 l       .debug_str	00000000 
00015f07 l       .debug_str	00000000 
00015f27 l       .debug_str	00000000 
00015f97 l       .debug_str	00000000 
00015fb8 l       .debug_str	00000000 
00011b34 l       .debug_str	00000000 
0001602c l       .debug_str	00000000 
000160ac l       .debug_str	00000000 
000160f2 l       .debug_str	00000000 
0001611b l       .debug_str	00000000 
00016122 l       .debug_str	00000000 
0001615a l       .debug_str	00000000 
00016199 l       .debug_str	00000000 
000161a0 l       .debug_str	00000000 
00016219 l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
000162b0 l       .debug_str	00000000 
0001632e l       .debug_str	00000000 
00016338 l       .debug_str	00000000 
000163c6 l       .debug_str	00000000 
00016472 l       .debug_str	00000000 
000164b9 l       .debug_str	00000000 
000164c6 l       .debug_str	00000000 
00016513 l       .debug_str	00000000 
00016526 l       .debug_str	00000000 
00016578 l       .debug_str	00000000 
000165e8 l       .debug_str	00000000 
000141e4 l       .debug_str	00000000 
00016648 l       .debug_str	00000000 
00016659 l       .debug_str	00000000 
000166be l       .debug_str	00000000 
000166ee l       .debug_str	00000000 
000166f7 l       .debug_str	00000000 
00016733 l       .debug_str	00000000 
00016747 l       .debug_str	00000000 
00016782 l       .debug_str	00000000 
000167c8 l       .debug_str	00000000 
000167e6 l       .debug_str	00000000 
00016816 l       .debug_str	00000000 
0001681f l       .debug_str	00000000 
00016859 l       .debug_str	00000000 
0001686b l       .debug_str	00000000 
00016899 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000168a0 l       .debug_str	00000000 
000168ac l       .debug_str	00000000 
000168b6 l       .debug_str	00000000 
000168c0 l       .debug_str	00000000 
000168e3 l       .debug_str	00000000 
0002bd09 l       .debug_str	00000000 
00016938 l       .debug_str	00000000 
00016998 l       .debug_str	00000000 
000169a4 l       .debug_str	00000000 
000169f4 l       .debug_str	00000000 
00016a57 l       .debug_str	00000000 
00016abe l       .debug_str	00000000 
00016b2d l       .debug_str	00000000 
00052e9f l       .debug_str	00000000 
00013d36 l       .debug_str	00000000 
00016bbd l       .debug_str	00000000 
00053f3c l       .debug_str	00000000 
000112e5 l       .debug_str	00000000 
0000c144 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0001fee6 l       .debug_str	00000000 
00052704 l       .debug_str	00000000 
00012114 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00016be4 l       .debug_str	00000000 
00052e80 l       .debug_str	00000000 
00016bf1 l       .debug_str	00000000 
00052c26 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00016bfc l       .debug_str	00000000 
0005924a l       .debug_str	00000000 
00016c50 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
00054c0d l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00016c5b l       .debug_str	00000000 
00016c86 l       .debug_str	00000000 
000576cf l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016c92 l       .debug_str	00000000 
00016ccc l       .debug_str	00000000 
00016d05 l       .debug_str	00000000 
00016d14 l       .debug_str	00000000 
00016d57 l       .debug_str	00000000 
00054151 l       .debug_str	00000000 
00030adc l       .debug_str	00000000 
00055b76 l       .debug_str	00000000 
00016d99 l       .debug_str	00000000 
00016dbd l       .debug_str	00000000 
00016333 l       .debug_str	00000000 
00012f2e l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00016ddd l       .debug_str	00000000 
0003e87a l       .debug_str	00000000 
00016e18 l       .debug_str	00000000 
00016e1f l       .debug_str	00000000 
0002f476 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00016e60 l       .debug_str	00000000 
00016ea7 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
00020397 l       .debug_str	00000000 
00016e81 l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
00017471 l       .debug_str	00000000 
00016ea3 l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012f6e l       .debug_str	00000000 
00012f79 l       .debug_str	00000000 
00012f85 l       .debug_str	00000000 
00012f72 l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
0000b84b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00013e6d l       .debug_str	00000000 
00013ec5 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00013f12 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00013f1c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00013f28 l       .debug_str	00000000 
00016c6c l       .debug_str	00000000 
00016c60 l       .debug_str	00000000 
00016c8b l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00056807 l       .debug_str	00000000 
0002d7fb l       .debug_str	00000000 
000136d5 l       .debug_str	00000000 
000136da l       .debug_str	00000000 
000136e0 l       .debug_str	00000000 
00017174 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
000119cc l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00013f39 l       .debug_str	00000000 
000133b6 l       .debug_str	00000000 
00013f3f l       .debug_str	00000000 
0002810a l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00031536 l       .debug_str	00000000 
00054c1f l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052891 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00020033 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00056a23 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013f4a l       .debug_str	00000000 
00013f73 l       .debug_str	00000000 
00013f82 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00012605 l       .debug_str	00000000 
00016d0e l       .debug_str	00000000 
00013f9c l       .debug_str	00000000 
00013fc5 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00013ffa l       .debug_str	00000000 
0001400e l       .debug_str	00000000 
00014021 l       .debug_str	00000000 
0001406d l       .debug_str	00000000 
0001407b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
0002d7d5 l       .debug_str	00000000 
00014083 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011a96 l       .debug_str	00000000 
0002e64f l       .debug_str	00000000 
0005933f l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
000141d4 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00023722 l       .debug_str	00000000 
00057792 l       .debug_str	00000000 
00016e3a l       .debug_str	00000000 
0003bbd7 l       .debug_str	00000000 
000119d4 l       .debug_str	00000000 
0001408d l       .debug_str	00000000 
0005504c l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016db0 l       .debug_str	00000000 
000542b5 l       .debug_str	00000000 
0001567e l       .debug_str	00000000 
00016df0 l       .debug_str	00000000 
000119de l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00016b51 l       .debug_str	00000000 
00016ae2 l       .debug_str	00000000 
00014093 l       .debug_str	00000000 
00014099 l       .debug_str	00000000 
000140c2 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
00015667 l       .debug_str	00000000 
000140ce l       .debug_str	00000000 
00013638 l       .debug_str	00000000 
000140fb l       .debug_str	00000000 
0003666a l       .debug_str	00000000 
00014106 l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
0001412f l       .debug_str	00000000 
00014136 l       .debug_str	00000000 
00014160 l       .debug_str	00000000 
000210b7 l       .debug_str	00000000 
00014164 l       .debug_str	00000000 
00022ef5 l       .debug_str	00000000 
0001416d l       .debug_str	00000000 
000141af l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000141c2 l       .debug_str	00000000 
0005769c l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
00042f29 l       .debug_str	00000000 
000141dd l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
000141ec l       .debug_str	00000000 
000141f6 l       .debug_str	00000000 
00016e8d l       .debug_str	00000000 
00016654 l       .debug_str	00000000 
000141fb l       .debug_str	00000000 
00014281 l       .debug_str	00000000 
0001428b l       .debug_str	00000000 
0001431d l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
00014363 l       .debug_str	00000000 
000143f7 l       .debug_str	00000000 
00014459 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 embedded_graphics.94s3esdv-cgu.0
00017869 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00056a23 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00031536 l       .debug_str	00000000 
00054c1f l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052891 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00020033 l       .debug_str	00000000 
0000eb4e l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000e9e6 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
000197d7 l       .debug_str	00000000 
0000c380 l       .debug_str	00000000 
0000c3e5 l       .debug_str	00000000 
00016f60 l       .debug_str	00000000 
00016f69 l       .debug_str	00000000 
00016f71 l       .debug_str	00000000 
00016f7a l       .debug_str	00000000 
0002cadb l       .debug_str	00000000 
00016f87 l       .debug_str	00000000 
00016f97 l       .debug_str	00000000 
00016fa8 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
00019822 l       .debug_str	00000000 
0000f39c l       .debug_str	00000000 
00016fb9 l       .debug_str	00000000 
0000e9c6 l       .debug_str	00000000 
0000e9d4 l       .debug_str	00000000 
00019888 l       .debug_str	00000000 
00016fc2 l       .debug_str	00000000 
00016fc8 l       .debug_str	00000000 
00016fd3 l       .debug_str	00000000 
00016fdd l       .debug_str	00000000 
00016fe7 l       .debug_str	00000000 
0000b963 l       .debug_str	00000000 
0001702f l       .debug_str	00000000 
0000ba4c l       .debug_str	00000000 
00017077 l       .debug_str	00000000 
000170bf l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
000170c8 l       .debug_str	00000000 
000170f1 l       .debug_str	00000000 
000170fa l       .debug_str	00000000 
00017157 l       .debug_str	00000000 
00057792 l       .debug_str	00000000 
0001717d l       .debug_str	00000000 
000171a5 l       .debug_str	00000000 
000171d7 l       .debug_str	00000000 
000147d4 l       .debug_str	00000000 
00017208 l       .debug_str	00000000 
00017265 l       .debug_str	00000000 
000172c2 l       .debug_str	00000000 
0001731f l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00017351 l       .debug_str	00000000 
00017396 l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
000173a2 l       .debug_str	00000000 
00051c9c l       .debug_str	00000000 
000173de l       .debug_str	00000000 
0000eaff l       .debug_str	00000000 
00017422 l       .debug_str	00000000 
00017469 l       .debug_str	00000000 
00017477 l       .debug_str	00000000 
000174be l       .debug_str	00000000 
000174cc l       .debug_str	00000000 
0001750c l       .debug_str	00000000 
00017514 l       .debug_str	00000000 
0000eb86 l       .debug_str	00000000 
00017521 l       .debug_str	00000000 
0001755c l       .debug_str	00000000 
0001759a l       .debug_str	00000000 
000175ca l       .debug_str	00000000 
000175de l       .debug_str	00000000 
0001760e l       .debug_str	00000000 
00017622 l       .debug_str	00000000 
00017652 l       .debug_str	00000000 
00017666 l       .debug_str	00000000 
0003795a l       .debug_str	00000000 
000176b1 l       .debug_str	00000000 
00017708 l       .debug_str	00000000 
00017717 l       .debug_str	00000000 
00017762 l       .debug_str	00000000 
0000bfaf l       .debug_str	00000000 
000177d9 l       .debug_str	00000000 
0001785e l       .debug_str	00000000 
0000c067 l       .debug_str	00000000 
000178e0 l       .debug_str	00000000 
00017965 l       .debug_str	00000000 
00017970 l       .debug_str	00000000 
00012f2e l       .debug_str	00000000 
000179f9 l       .debug_str	00000000 
00020805 l       .debug_str	00000000 
00017a70 l       .debug_str	00000000 
000540c3 l       .debug_str	00000000 
00017b05 l       .debug_str	00000000 
00017b9c l       .debug_str	00000000 
00017c37 l       .debug_str	00000000 
00017ccc l       .debug_str	00000000 
00017d63 l       .debug_str	00000000 
00017dfe l       .debug_str	00000000 
00017ec6 l       .debug_str	00000000 
00017ed1 l       .debug_str	00000000 
00017f9d l       .debug_str	00000000 
0001802d l       .debug_str	00000000 
00018039 l       .debug_str	00000000 
000180df l       .debug_str	00000000 
000180eb l       .debug_str	00000000 
0001818f l       .debug_str	00000000 
00018231 l       .debug_str	00000000 
000182d5 l       .debug_str	00000000 
00018329 l       .debug_str	00000000 
0001837e l       .debug_str	00000000 
000183d3 l       .debug_str	00000000 
000141e4 l       .debug_str	00000000 
00018456 l       .debug_str	00000000 
000184da l       .debug_str	00000000 
0001855e l       .debug_str	00000000 
0000282b l       .debug_str	00000000 
000185a5 l       .debug_str	00000000 
00002831 l       .debug_str	00000000 
000185ec l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00018633 l       .debug_str	00000000 
000186b1 l       .debug_str	00000000 
00018730 l       .debug_str	00000000 
000187cb l       .debug_str	00000000 
0001885f l       .debug_str	00000000 
000188ac l       .debug_str	00000000 
000188b8 l       .debug_str	00000000 
0001891b l       .debug_str	00000000 
00018963 l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
0001896b l       .debug_str	00000000 
000189ff l       .debug_str	00000000 
00018a65 l       .debug_str	00000000 
00018af6 l       .debug_str	00000000 
00018b95 l       .debug_str	00000000 
00018c26 l       .debug_str	00000000 
00018cc5 l       .debug_str	00000000 
00018d67 l       .debug_str	00000000 
00018df8 l       .debug_str	00000000 
00018ea6 l       .debug_str	00000000 
00018f56 l       .debug_str	00000000 
0001900a l       .debug_str	00000000 
000190fd l       .debug_str	00000000 
00019108 l       .debug_str	00000000 
000191ff l       .debug_str	00000000 
000192ab l       .debug_str	00000000 
000192b5 l       .debug_str	00000000 
00019327 l       .debug_str	00000000 
0001939c l       .debug_str	00000000 
0001940f l       .debug_str	00000000 
00019480 l       .debug_str	00000000 
000194f3 l       .debug_str	00000000 
0001956a l       .debug_str	00000000 
000195df l       .debug_str	00000000 
00019654 l       .debug_str	00000000 
000196c4 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
0000bc9a l       .debug_str	00000000 
00019750 l       .debug_str	00000000 
0001fee6 l       .debug_str	00000000 
00019756 l       .debug_str	00000000 
00014519 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00016c8b l       .debug_str	00000000 
00016bfc l       .debug_str	00000000 
00017471 l       .debug_str	00000000 
00019759 l       .debug_str	00000000 
00019763 l       .debug_str	00000000 
0001976d l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00019777 l       .debug_str	00000000 
000197a8 l       .debug_str	00000000 
000597b7 l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000197dd l       .debug_str	00000000 
000197e7 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
000197f1 l       .debug_str	00000000 
000197fa l       .debug_str	00000000 
00019829 l       .debug_str	00000000 
00019836 l       .debug_str	00000000 
00019839 l       .debug_str	00000000 
0001983c l       .debug_str	00000000 
0001983f l       .debug_str	00000000 
00019842 l       .debug_str	00000000 
00019845 l       .debug_str	00000000 
00019848 l       .debug_str	00000000 
00019896 l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012f72 l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
00012f85 l       .debug_str	00000000 
00012f90 l       .debug_str	00000000 
00019906 l       .debug_str	00000000 
000198e0 l       .debug_str	00000000 
00019939 l       .debug_str	00000000 
00019914 l       .debug_str	00000000 
0001996a l       .debug_str	00000000 
00019946 l       .debug_str	00000000 
0001999b l       .debug_str	00000000 
00019976 l       .debug_str	00000000 
000199cf l       .debug_str	00000000 
000199a8 l       .debug_str	00000000 
00019a04 l       .debug_str	00000000 
000199de l       .debug_str	00000000 
00019a38 l       .debug_str	00000000 
00019a12 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00016eab l       .debug_str	00000000 
00016f0b l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0001975e l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00019768 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00019772 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00056807 l       .debug_str	00000000 
0002d7fb l       .debug_str	00000000 
000136d5 l       .debug_str	00000000 
000136da l       .debug_str	00000000 
000136e0 l       .debug_str	00000000 
00017174 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000306ec l       .debug_str	00000000 
0002810a l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
000117ac l     F .text	0000006e _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E
00000000 l    df *ABS*	00000000 hash32.79y5bd3b-cgu.0
00015b06 l       .debug_str	00000000 
00019f13 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
0000c0c6 l       .debug_str	00000000 
00019f5e l       .debug_str	00000000 
00014aa3 l       .debug_str	00000000 
00019f94 l       .debug_str	00000000 
00014af8 l       .debug_str	00000000 
00019fce l       .debug_str	00000000 
0001a00a l       .debug_str	00000000 
00014b79 l       .debug_str	00000000 
0001a030 l       .debug_str	00000000 
00014bac l       .debug_str	00000000 
0001a057 l       .debug_str	00000000 
00014dc6 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0001a0a5 l       .debug_str	00000000 
00014e36 l       .debug_str	00000000 
0001a0f6 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0001a148 l       .debug_str	00000000 
00052ba9 l       .debug_str	00000000 
0001a19d l       .debug_str	00000000 
00014f2c l       .debug_str	00000000 
0001a232 l       .debug_str	00000000 
0001a280 l       .debug_str	00000000 
00023722 l       .debug_str	00000000 
0001a28f l       .debug_str	00000000 
0001a2e0 l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
0001a2f8 l       .debug_str	00000000 
0001a34d l       .debug_str	00000000 
000136cd l       .debug_str	00000000 
0001a369 l       .debug_str	00000000 
0001a3af l       .debug_str	00000000 
0001a3b7 l       .debug_str	00000000 
00014d56 l       .debug_str	00000000 
0001a400 l       .debug_str	00000000 
000540c3 l       .debug_str	00000000 
0001a46f l       .debug_str	00000000 
000159d2 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0001a4c0 l       .debug_str	00000000 
0001a511 l       .debug_str	00000000 
00015b70 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
000140fb l       .debug_str	00000000 
0003666a l       .debug_str	00000000 
00014106 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005504c l       .debug_str	00000000 
0005933f l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016db0 l       .debug_str	00000000 
0001a569 l       .debug_str	00000000 
0001a5cc l       .debug_str	00000000 
0001a5f6 l       .debug_str	00000000 
0001a659 l       .debug_str	00000000 
0001a662 l       .debug_str	00000000 
0001a6cf l       .debug_str	00000000 
0001a6e1 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
0001a752 l       .debug_str	00000000 
000141e4 l       .debug_str	00000000 
0001a7b2 l       .debug_str	00000000 
0001a7e5 l       .debug_str	00000000 
0001a84f l       .debug_str	00000000 
0001a882 l       .debug_str	00000000 
0001a887 l       .debug_str	00000000 
0001a8eb l       .debug_str	00000000 
0005697c l       .debug_str	00000000 
0001a946 l       .debug_str	00000000 
0001a982 l       .debug_str	00000000 
0001a990 l       .debug_str	00000000 
0001a9bf l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00016c8b l       .debug_str	00000000 
00052704 l       .debug_str	00000000 
00012114 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00052e80 l       .debug_str	00000000 
00052c26 l       .debug_str	00000000 
00016be4 l       .debug_str	00000000 
00016bf1 l       .debug_str	00000000 
0001fee6 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00016c50 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
00054c0d l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
000576cf l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016c92 l       .debug_str	00000000 
00016ccc l       .debug_str	00000000 
00016d05 l       .debug_str	00000000 
00016d14 l       .debug_str	00000000 
00016d57 l       .debug_str	00000000 
00054151 l       .debug_str	00000000 
00030adc l       .debug_str	00000000 
00055b76 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
00016d99 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00022ef5 l       .debug_str	00000000 
0002dd6e l       .debug_str	00000000 
000542b5 l       .debug_str	00000000 
0001a9c7 l       .debug_str	00000000 
0001a9df l       .debug_str	00000000 
0005924a l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0001a9fc l       .debug_str	00000000 
00012b7d l       .debug_str	00000000 
0001aa15 l       .debug_str	00000000 
0001aa31 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00019a46 l       .debug_str	00000000 
00019a9b l       .debug_str	00000000 
00019ae5 l       .debug_str	00000000 
00019aec l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00012f8d l       .debug_str	00000000 
00012f98 l       .debug_str	00000000 
00012fa3 l       .debug_str	00000000 
00012fae l       .debug_str	00000000 
0001a9d9 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000133b6 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00013f3f l       .debug_str	00000000 
00056807 l       .debug_str	00000000 
0002810a l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00056a23 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00019af4 l       .debug_str	00000000 
00013f73 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013f82 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00012605 l       .debug_str	00000000 
00016d0e l       .debug_str	00000000 
00019b1d l       .debug_str	00000000 
00013fc5 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00013ffa l       .debug_str	00000000 
0001400e l       .debug_str	00000000 
00019b46 l       .debug_str	00000000 
0001406d l       .debug_str	00000000 
0001407b l       .debug_str	00000000 
00014083 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00013638 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00019b92 l       .debug_str	00000000 
0000afe7 l       .debug_str	00000000 
00019bbb l       .debug_str	00000000 
00019bc5 l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
00017471 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000574 l       .debug_str	00000000 
00012f2e l       .debug_str	00000000 
00019bc9 l       .debug_str	00000000 
00052bfa l       .debug_str	00000000 
0001aa2b l       .debug_str	00000000 
0001a9f5 l       .debug_str	00000000 
00019bd3 l       .debug_str	00000000 
0001210a l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
00019c28 l       .debug_str	00000000 
00019c66 l       .debug_str	00000000 
00019c7e l       .debug_str	00000000 
000146c4 l       .debug_str	00000000 
00019cbc l       .debug_str	00000000 
00013d37 l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
00019d21 l       .debug_str	00000000 
00019d51 l       .debug_str	00000000 
00019d78 l       .debug_str	00000000 
00014877 l       .debug_str	00000000 
00019d9e l       .debug_str	00000000 
00019de3 l       .debug_str	00000000 
00019def l       .debug_str	00000000 
00011d9f l       .debug_str	00000000 
00019e35 l       .debug_str	00000000 
00019e7b l       .debug_str	00000000 
00019e88 l       .debug_str	00000000 
00019ec6 l       .debug_str	00000000 
00019ecc l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
000118ba l     F .text	00000034 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE
00011924 l     F .text	00000018 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E
0001194e l     F .text	0000003e _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE
0001198c l     F .text	00000040 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE
00011a5c l     F .text	0000011c _ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE
00000000 l    df *ABS*	00000000 4iim1qfb3qo0ur8y
0001aab5 l       .debug_str	00000000 
0001aab3 l       .debug_str	00000000 
0001ab06 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001aa3a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00013638 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001aa59 l       .debug_str	00000000 
0001aaaa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 log.9af4yuww-cgu.0
0001cc77 l       .debug_str	00000000 
000135c1 l       .debug_str	00000000 
000135c9 l       .debug_str	00000000 
000135d0 l       .debug_str	00000000 
000112aa l       .debug_str	00000000 
0001349a l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0001ae2e l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
0001ae32 l       .debug_str	00000000 
0001a3af l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
0002d7d5 l       .debug_str	00000000 
0005933f l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
000141d4 l       .debug_str	00000000 
0001aeb0 l       .debug_str	00000000 
0005504c l       .debug_str	00000000 
0003e87a l       .debug_str	00000000 
00058120 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0001aec7 l       .debug_str	00000000 
000140c2 l       .debug_str	00000000 
0001aef0 l       .debug_str	00000000 
0001af22 l       .debug_str	00000000 
00013f3f l       .debug_str	00000000 
000306ec l       .debug_str	00000000 
0002810a l       .debug_str	00000000 
00056a23 l       .debug_str	00000000 
0000eb4e l       .debug_str	00000000 
0001af34 l       .debug_str	00000000 
0001af5d l       .debug_str	00000000 
00013f82 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00012605 l       .debug_str	00000000 
00016d0e l       .debug_str	00000000 
0001af82 l       .debug_str	00000000 
00013fc5 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
0001afab l       .debug_str	00000000 
0001afd5 l       .debug_str	00000000 
0001affe l       .debug_str	00000000 
0001b04a l       .debug_str	00000000 
0001407b l       .debug_str	00000000 
0001b06e l       .debug_str	00000000 
00014083 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b3b4 l       .debug_str	00000000 
0000b3f5 l       .debug_str	00000000 
00022ef5 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
00052c98 l       .debug_str	00000000 
0001b07c l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011a96 l       .debug_str	00000000 
0002e64f l       .debug_str	00000000 
000539eb l       .debug_str	00000000 
00046a3e l       .debug_str	00000000 
00054750 l       .debug_str	00000000 
00056069 l       .debug_str	00000000 
00023722 l       .debug_str	00000000 
0001fdd7 l       .debug_str	00000000 
0003bbd7 l       .debug_str	00000000 
000312f6 l       .debug_str	00000000 
00052ba9 l       .debug_str	00000000 
000200e7 l       .debug_str	00000000 
0002008f l       .debug_str	00000000 
0001b091 l       .debug_str	00000000 
0001b09b l       .debug_str	00000000 
0001ff6f l       .debug_str	00000000 
0002cadb l       .debug_str	00000000 
0001fd47 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
0001da5e l       .debug_str	00000000 
00057792 l       .debug_str	00000000 
00020120 l       .debug_str	00000000 
00054c0d l       .debug_str	00000000 
000200ff l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00012f2e l       .debug_str	00000000 
000576cf l       .debug_str	00000000 
0001fd98 l       .debug_str	00000000 
00014093 l       .debug_str	00000000 
0001b0a4 l       .debug_str	00000000 
0001b0cd l       .debug_str	00000000 
0001b0db l       .debug_str	00000000 
0001b0e8 l       .debug_str	00000000 
0001b0fb l       .debug_str	00000000 
0003666a l       .debug_str	00000000 
0001b114 l       .debug_str	00000000 
00013638 l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
0001b129 l       .debug_str	00000000 
0001b1a5 l       .debug_str	00000000 
0001b13c l       .debug_str	00000000 
0001b17e l       .debug_str	00000000 
0001b193 l       .debug_str	00000000 
0005769c l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
00042f29 l       .debug_str	00000000 
0001b1b0 l       .debug_str	00000000 
0001b1ba l       .debug_str	00000000 
0001b1ec l       .debug_str	00000000 
0001b200 l       .debug_str	00000000 
0001b215 l       .debug_str	00000000 
0001f342 l       .debug_str	00000000 
0001f54b l       .debug_str	00000000 
0001b21c l       .debug_str	00000000 
0001b227 l       .debug_str	00000000 
0001b2ab l       .debug_str	00000000 
0001b2d9 l       .debug_str	00000000 
0001b35f l       .debug_str	00000000 
0003aad8 l       .debug_str	00000000 
0001b387 l       .debug_str	00000000 
0001b398 l       .debug_str	00000000 
0001b422 l       .debug_str	00000000 
0001b440 l       .debug_str	00000000 
0001b4ce l       .debug_str	00000000 
0001b4f5 l       .debug_str	00000000 
0001b584 l       .debug_str	00000000 
0001b5cc l       .debug_str	00000000 
0001b5fb l       .debug_str	00000000 
0001b643 l       .debug_str	00000000 
0001b662 l       .debug_str	00000000 
0001b6aa l       .debug_str	00000000 
0001b6ba l       .debug_str	00000000 
0001b702 l       .debug_str	00000000 
0001b713 l       .debug_str	00000000 
0001b75b l       .debug_str	00000000 
0001b763 l       .debug_str	00000000 
0001b7ab l       .debug_str	00000000 
0001b7b5 l       .debug_str	00000000 
0001b7fd l       .debug_str	00000000 
0001b817 l       .debug_str	00000000 
0001b85f l       .debug_str	00000000 
0001b878 l       .debug_str	00000000 
0001b8c0 l       .debug_str	00000000 
0001b8d3 l       .debug_str	00000000 
0001b91b l       .debug_str	00000000 
0001b924 l       .debug_str	00000000 
0000ba4c l       .debug_str	00000000 
0001b96c l       .debug_str	00000000 
0001b9b6 l       .debug_str	00000000 
0001ba01 l       .debug_str	00000000 
0001ba3f l       .debug_str	00000000 
0001ba70 l       .debug_str	00000000 
00019c66 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0001baae l       .debug_str	00000000 
0001bad7 l       .debug_str	00000000 
0001bae2 l       .debug_str	00000000 
0001bb07 l       .debug_str	00000000 
0001bb66 l       .debug_str	00000000 
0002bd09 l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
00016c8b l       .debug_str	00000000 
0001bbcd l       .debug_str	00000000 
0001bbf7 l       .debug_str	00000000 
0001bc1f l       .debug_str	00000000 
0001bc57 l       .debug_str	00000000 
0001bc88 l       .debug_str	00000000 
0001bc92 l       .debug_str	00000000 
0001bcef l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
0001bd21 l       .debug_str	00000000 
0001bd47 l       .debug_str	00000000 
0001bd69 l       .debug_str	00000000 
0001bd8f l       .debug_str	00000000 
0001bdb1 l       .debug_str	00000000 
0001bdda l       .debug_str	00000000 
0001bdff l       .debug_str	00000000 
00011e95 l       .debug_str	00000000 
0001be47 l       .debug_str	00000000 
0001be50 l       .debug_str	00000000 
0001beda l       .debug_str	00000000 
0001134a l       .debug_str	00000000 
0001bef7 l       .debug_str	00000000 
0001bf83 l       .debug_str	00000000 
0001bfa0 l       .debug_str	00000000 
0001bfc0 l       .debug_str	00000000 
0000eb86 l       .debug_str	00000000 
0001bfc7 l       .debug_str	00000000 
0001c002 l       .debug_str	00000000 
0001c034 l       .debug_str	00000000 
0001c045 l       .debug_str	00000000 
0001c080 l       .debug_str	00000000 
0001c0c6 l       .debug_str	00000000 
00017652 l       .debug_str	00000000 
0001c0f6 l       .debug_str	00000000 
0001c126 l       .debug_str	00000000 
0001c144 l       .debug_str	00000000 
0001c174 l       .debug_str	00000000 
0001c187 l       .debug_str	00000000 
0001c1b7 l       .debug_str	00000000 
0001c1cc l       .debug_str	00000000 
0001c1fc l       .debug_str	00000000 
0001c218 l       .debug_str	00000000 
0001c248 l       .debug_str	00000000 
0001c266 l       .debug_str	00000000 
0001c296 l       .debug_str	00000000 
0001c2b1 l       .debug_str	00000000 
0001c2e1 l       .debug_str	00000000 
0001c305 l       .debug_str	00000000 
0001c335 l       .debug_str	00000000 
0001c36f l       .debug_str	00000000 
0001c39f l       .debug_str	00000000 
0001c3c4 l       .debug_str	00000000 
0001c3f4 l       .debug_str	00000000 
0001c41e l       .debug_str	00000000 
0001c454 l       .debug_str	00000000 
0001c485 l       .debug_str	00000000 
0001c4bf l       .debug_str	00000000 
0001c4f4 l       .debug_str	00000000 
0001c530 l       .debug_str	00000000 
0001c556 l       .debug_str	00000000 
0001c578 l       .debug_str	00000000 
0001c59f l       .debug_str	00000000 
0001c5c2 l       .debug_str	00000000 
00014dc6 l       .debug_str	00000000 
0001c610 l       .debug_str	00000000 
00014e36 l       .debug_str	00000000 
0001c661 l       .debug_str	00000000 
0001c6b2 l       .debug_str	00000000 
0001c6bf l       .debug_str	00000000 
0001c711 l       .debug_str	00000000 
0001c71f l       .debug_str	00000000 
00014d01 l       .debug_str	00000000 
0001c76a l       .debug_str	00000000 
0001c7b5 l       .debug_str	00000000 
0001c7c9 l       .debug_str	00000000 
0001c80c l       .debug_str	00000000 
0001c819 l       .debug_str	00000000 
00014d56 l       .debug_str	00000000 
0001c85c l       .debug_str	00000000 
00014dbd l       .debug_str	00000000 
0001c8b8 l       .debug_str	00000000 
00014e2d l       .debug_str	00000000 
0001c917 l       .debug_str	00000000 
0001c969 l       .debug_str	00000000 
0001c9bb l       .debug_str	00000000 
0001c9c5 l       .debug_str	00000000 
0001ca1a l       .debug_str	00000000 
0001ca6f l       .debug_str	00000000 
0001cac5 l       .debug_str	00000000 
00014caa l       .debug_str	00000000 
0001cb1b l       .debug_str	00000000 
0001cb57 l       .debug_str	00000000 
00017471 l       .debug_str	00000000 
0001cb95 l       .debug_str	00000000 
0001cbd0 l       .debug_str	00000000 
00016bf1 l       .debug_str	00000000 
0001cbdb l       .debug_str	00000000 
0001cc22 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0001cc38 l       .debug_str	00000000 
0001ccc9 l       .debug_str	00000000 
0001ccdf l       .debug_str	00000000 
0001cd24 l       .debug_str	00000000 
0001cd3e l       .debug_str	00000000 
0001cda1 l       .debug_str	00000000 
0001cdc1 l       .debug_str	00000000 
0001ce00 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0001ce61 l       .debug_str	00000000 
0001cea0 l       .debug_str	00000000 
0001ff6a l       .debug_str	00000000 
0001cec7 l       .debug_str	00000000 
0001cf07 l       .debug_str	00000000 
0001cf3a l       .debug_str	00000000 
0001cf51 l       .debug_str	00000000 
0001cf97 l       .debug_str	00000000 
0001cfb3 l       .debug_str	00000000 
0001d017 l       .debug_str	00000000 
0001d039 l       .debug_str	00000000 
0001d07b l       .debug_str	00000000 
0001d09c l       .debug_str	00000000 
0001d0de l       .debug_str	00000000 
000552a9 l       .debug_str	00000000 
0001d10e l       .debug_str	00000000 
0001d152 l       .debug_str	00000000 
0001d1a7 l       .debug_str	00000000 
0001d1eb l       .debug_str	00000000 
0001d241 l       .debug_str	00000000 
0001d285 l       .debug_str	00000000 
0001d2fd l       .debug_str	00000000 
0001d341 l       .debug_str	00000000 
0001d381 l       .debug_str	00000000 
0001d39c l       .debug_str	00000000 
0001d3dd l       .debug_str	00000000 
0001d433 l       .debug_str	00000000 
0001d477 l       .debug_str	00000000 
0001d4a4 l       .debug_str	00000000 
0001d4e9 l       .debug_str	00000000 
0001d531 l       .debug_str	00000000 
0001d542 l       .debug_str	00000000 
0001d58a l       .debug_str	00000000 
0001d59b l       .debug_str	00000000 
0002bdef l       .debug_str	00000000 
0001d5d6 l       .debug_str	00000000 
0001d612 l       .debug_str	00000000 
0001d618 l       .debug_str	00000000 
0001d64e l       .debug_str	00000000 
0001d661 l       .debug_str	00000000 
0001d698 l       .debug_str	00000000 
0001d6ac l       .debug_str	00000000 
0001d6ee l       .debug_str	00000000 
0001d70d l       .debug_str	00000000 
0001d752 l       .debug_str	00000000 
0001d76d l       .debug_str	00000000 
0001d7d2 l       .debug_str	00000000 
0001d839 l       .debug_str	00000000 
0001d844 l       .debug_str	00000000 
0001d88a l       .debug_str	00000000 
0001d8d0 l       .debug_str	00000000 
0001d8da l       .debug_str	00000000 
0001d921 l       .debug_str	00000000 
0001d92c l       .debug_str	00000000 
0000acdc l       .debug_str	00000000 
0001d973 l       .debug_str	00000000 
0001d9bc l       .debug_str	00000000 
0001da05 l       .debug_str	00000000 
0001da3e l       .debug_str	00000000 
0001da59 l       .debug_str	00000000 
0001da68 l       .debug_str	00000000 
0001daa1 l       .debug_str	00000000 
0001dac6 l       .debug_str	00000000 
0001daff l       .debug_str	00000000 
0001db38 l       .debug_str	00000000 
0001db5e l       .debug_str	00000000 
0001db97 l       .debug_str	00000000 
0001dbd5 l       .debug_str	00000000 
0001dc0f l       .debug_str	00000000 
0001dc1b l       .debug_str	00000000 
0001dc57 l       .debug_str	00000000 
0001dc6a l       .debug_str	00000000 
0001dca6 l       .debug_str	00000000 
0001dcbf l       .debug_str	00000000 
0001dcfc l       .debug_str	00000000 
0001dd0d l       .debug_str	00000000 
000159d2 l       .debug_str	00000000 
0001dd5e l       .debug_str	00000000 
0001aaaa l       .debug_str	00000000 
0001ddaf l       .debug_str	00000000 
0001de0a l       .debug_str	00000000 
0001de6d l       .debug_str	00000000 
0001de89 l       .debug_str	00000000 
0001dee9 l       .debug_str	00000000 
0001df49 l       .debug_str	00000000 
0001dfad l       .debug_str	00000000 
0001dfc8 l       .debug_str	00000000 
0001e02c l       .debug_str	00000000 
0001e037 l       .debug_str	00000000 
0001e0a1 l       .debug_str	00000000 
0001e0b0 l       .debug_str	00000000 
0001e11f l       .debug_str	00000000 
0001e137 l       .debug_str	00000000 
0001e1a7 l       .debug_str	00000000 
0001e1c0 l       .debug_str	00000000 
0001e22b l       .debug_str	00000000 
0001e240 l       .debug_str	00000000 
0001e2b0 l       .debug_str	00000000 
0001e2c5 l       .debug_str	00000000 
0001e335 l       .debug_str	00000000 
0001e347 l       .debug_str	00000000 
000038f9 l       .debug_str	00000000 
0001e3b8 l       .debug_str	00000000 
0001e429 l       .debug_str	00000000 
0001e43f l       .debug_str	00000000 
0001e451 l       .debug_str	00000000 
0001e4bd l       .debug_str	00000000 
0001e4cf l       .debug_str	00000000 
0001e53b l       .debug_str	00000000 
0001e54a l       .debug_str	00000000 
0001e5b2 l       .debug_str	00000000 
0001e5bc l       .debug_str	00000000 
0001e630 l       .debug_str	00000000 
00000eee l       .debug_str	00000000 
0001e63b l       .debug_str	00000000 
0001e6b3 l       .debug_str	00000000 
0001e6cc l       .debug_str	00000000 
0001e744 l       .debug_str	00000000 
0001e7da l       .debug_str	00000000 
0001e7f6 l       .debug_str	00000000 
0001e88c l       .debug_str	00000000 
0001e922 l       .debug_str	00000000 
0001e9b8 l       .debug_str	00000000 
00014f2c l       .debug_str	00000000 
0001ea2d l       .debug_str	00000000 
0001eaa1 l       .debug_str	00000000 
0001eb1a l       .debug_str	00000000 
0001eb99 l       .debug_str	00000000 
0001ebaa l       .debug_str	00000000 
0001ec2a l       .debug_str	00000000 
0001ec8c l       .debug_str	00000000 
000201d8 l       .debug_str	00000000 
0001ecdd l       .debug_str	00000000 
0001ecff l       .debug_str	00000000 
0001ed2c l       .debug_str	00000000 
0001ed5b l       .debug_str	00000000 
0001ed7d l       .debug_str	00000000 
0001eda4 l       .debug_str	00000000 
0001edcd l       .debug_str	00000000 
0001edff l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
0001ee4f l       .debug_str	00000000 
0001ee95 l       .debug_str	00000000 
0001eea8 l       .debug_str	00000000 
0001eefc l       .debug_str	00000000 
0001ef6e l       .debug_str	00000000 
0001efe0 l       .debug_str	00000000 
0001f052 l       .debug_str	00000000 
0001f0a1 l       .debug_str	00000000 
0001f0cf l       .debug_str	00000000 
0001f0da l       .debug_str	00000000 
0001f134 l       .debug_str	00000000 
0001f1ac l       .debug_str	00000000 
0001f224 l       .debug_str	00000000 
0001f279 l       .debug_str	00000000 
0001f2ae l       .debug_str	00000000 
0000b824 l       .debug_str	00000000 
0001f2d9 l       .debug_str	00000000 
0003795a l       .debug_str	00000000 
0001f308 l       .debug_str	00000000 
0001f338 l       .debug_str	00000000 
0001f350 l       .debug_str	00000000 
0001f381 l       .debug_str	00000000 
0001f3b3 l       .debug_str	00000000 
0001f3f2 l       .debug_str	00000000 
0001f405 l       .debug_str	00000000 
0001f43d l       .debug_str	00000000 
0001f449 l       .debug_str	00000000 
0001f479 l       .debug_str	00000000 
0001f4aa l       .debug_str	00000000 
0001f4b0 l       .debug_str	00000000 
0001f4dd l       .debug_str	00000000 
0001f50e l       .debug_str	00000000 
0001f541 l       .debug_str	00000000 
0001f55b l       .debug_str	00000000 
0001f58f l       .debug_str	00000000 
0001f5c2 l       .debug_str	00000000 
00051c34 l       .debug_str	00000000 
0001f60f l       .debug_str	00000000 
0001f658 l       .debug_str	00000000 
00051c17 l       .debug_str	00000000 
0001f6a3 l       .debug_str	00000000 
0001f6cb l       .debug_str	00000000 
0001f711 l       .debug_str	00000000 
0001f717 l       .debug_str	00000000 
0001f745 l       .debug_str	00000000 
0001f761 l       .debug_str	00000000 
0001f78e l       .debug_str	00000000 
0001f79e l       .debug_str	00000000 
0001f7f6 l       .debug_str	00000000 
0001f84f l       .debug_str	00000000 
0001f872 l       .debug_str	00000000 
0001f8a1 l       .debug_str	00000000 
0001f8b3 l       .debug_str	00000000 
0001f8e6 l       .debug_str	00000000 
0001f8fc l       .debug_str	00000000 
0001f949 l       .debug_str	00000000 
0001f99c l       .debug_str	00000000 
0001f9cf l       .debug_str	00000000 
0001f9df l       .debug_str	00000000 
0001fa35 l       .debug_str	00000000 
0001fa8f l       .debug_str	00000000 
0001fadd l       .debug_str	00000000 
0001fb2f l       .debug_str	00000000 
0001fb84 l       .debug_str	00000000 
0001fbd4 l       .debug_str	00000000 
0001fc28 l       .debug_str	00000000 
0001fc7f l       .debug_str	00000000 
0001fcd5 l       .debug_str	00000000 
0001fd2c l       .debug_str	00000000 
0001fd78 l       .debug_str	00000000 
0001fdc0 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0001fdf5 l       .debug_str	00000000 
0001fe21 l       .debug_str	00000000 
0001fe3d l       .debug_str	00000000 
0001fe4a l       .debug_str	00000000 
0001fe58 l       .debug_str	00000000 
0001fe5d l       .debug_str	00000000 
0001fe64 l       .debug_str	00000000 
0001fe7b l       .debug_str	00000000 
0001fe91 l       .debug_str	00000000 
0000bc9a l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0001fea1 l       .debug_str	00000000 
00052e80 l       .debug_str	00000000 
0001fec4 l       .debug_str	00000000 
00052c26 l       .debug_str	00000000 
0001fee6 l       .debug_str	00000000 
00019756 l       .debug_str	00000000 
0001fee5 l       .debug_str	00000000 
00014519 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0001feec l       .debug_str	00000000 
0001ff3f l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0001ff60 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
0001ff65 l       .debug_str	00000000 
0001976d l       .debug_str	00000000 
0001ff79 l       .debug_str	00000000 
0001ff8d l       .debug_str	00000000 
0001ff96 l       .debug_str	00000000 
0001ffa1 l       .debug_str	00000000 
0001ffb3 l       .debug_str	00000000 
0001ffc7 l       .debug_str	00000000 
0001ffd8 l       .debug_str	00000000 
0001fff2 l       .debug_str	00000000 
00020022 l       .debug_str	00000000 
0002003d l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016c92 l       .debug_str	00000000 
00016ccc l       .debug_str	00000000 
00016d05 l       .debug_str	00000000 
00016d14 l       .debug_str	00000000 
00016d57 l       .debug_str	00000000 
00054151 l       .debug_str	00000000 
00030adc l       .debug_str	00000000 
00055b76 l       .debug_str	00000000 
0002005d l       .debug_str	00000000 
0002007c l       .debug_str	00000000 
000580a6 l       .debug_str	00000000 
0002009f l       .debug_str	00000000 
00052e9f l       .debug_str	00000000 
00013617 l       .debug_str	00000000 
000200a5 l       .debug_str	00000000 
0000c144 l       .debug_str	00000000 
000200ad l       .debug_str	00000000 
00053a58 l       .debug_str	00000000 
0005924a l       .debug_str	00000000 
00016be4 l       .debug_str	00000000 
000544c7 l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012f72 l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
0000b84b l       .debug_str	00000000 
000200b5 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
0000b8f7 l       .debug_str	00000000 
0000b902 l       .debug_str	00000000 
00052704 l       .debug_str	00000000 
000200d4 l       .debug_str	00000000 
000200f3 l       .debug_str	00000000 
00020105 l       .debug_str	00000000 
00017512 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00001b29 l       .debug_str	00000000 
000597b7 l       .debug_str	00000000 
00054372 l       .debug_str	00000000 
0002f476 l       .debug_str	00000000 
00013494 l       .debug_str	00000000 
0001ae1f l       .debug_str	00000000 
00020177 l       .debug_str	00000000 
0005806d l       .debug_str	00000000 
0002018b l       .debug_str	00000000 
000201a1 l       .debug_str	00000000 
000201b1 l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000201c3 l       .debug_str	00000000 
000201bd l       .debug_str	00000000 
000201d2 l       .debug_str	00000000 
000201e9 l       .debug_str	00000000 
000201e8 l       .debug_str	00000000 
00012f6e l       .debug_str	00000000 
00012f79 l       .debug_str	00000000 
00012f85 l       .debug_str	00000000 
00012f90 l       .debug_str	00000000 
00012f9b l       .debug_str	00000000 
00012fa6 l       .debug_str	00000000 
00012fb1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001abe2 l       .debug_str	00000000 
0001ac34 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00051b7c l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0001ac7b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001ac82 l       .debug_str	00000000 
0001bfb1 l       .debug_str	00000000 
0001ffdd l       .debug_str	00000000 
00019772 l       .debug_str	00000000 
0001ac8b l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0001f712 l       .debug_str	00000000 
0001ac92 l       .debug_str	00000000 
0001acb5 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000135a5 l       .debug_str	00000000 
000135aa l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
000135d7 l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002006a l       .debug_str	00000000 
0001362c l       .debug_str	00000000 
0001acbb l       .debug_str	00000000 
0001acdd l       .debug_str	00000000 
0001acf2 l       .debug_str	00000000 
0001ad24 l       .debug_str	00000000 
0001ad34 l       .debug_str	00000000 
0001ad61 l       .debug_str	00000000 
0001ad72 l       .debug_str	00000000 
0001ada0 l       .debug_str	00000000 
0001adb2 l       .debug_str	00000000 
0001ff83 l       .debug_str	00000000 
000201b6 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0001ade1 l       .debug_str	00000000 
0001ff9b l       .debug_str	00000000 
00001d84 l       .debug_str	00000000 
000168ba l       .debug_str	00000000 
000112ae l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0002c448 l       .debug_str	00000000 
000112b3 l       .debug_str	00000000 
0001ffd2 l       .debug_str	00000000 
0001ae08 l       .debug_str	00000000 
0001ffbe l       .debug_str	00000000 
0001ffb8 l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00031536 l       .debug_str	00000000 
00054c1f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052891 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00020033 l       .debug_str	00000000 
00020027 l       .debug_str	00000000 
00020006 l       .debug_str	00000000 
0001fff7 l       .debug_str	00000000 
00020051 l       .debug_str	00000000 
00020042 l       .debug_str	00000000 
0001ae0f l       .debug_str	00000000 
0001ae18 l       .debug_str	00000000 
00052883 l       .debug_str	00000000 
00051b50 l       .debug_str	00000000 
0001ffac l       .debug_str	00000000 
0001ffa6 l       .debug_str	00000000 
0001ffcc l       .debug_str	00000000 
0001ff92 l       .debug_str	00000000 
00056807 l       .debug_str	00000000 
0002d7fb l       .debug_str	00000000 
000136d5 l       .debug_str	00000000 
000136da l       .debug_str	00000000 
000136e0 l       .debug_str	00000000 
00017174 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
0002bafb l       .debug_str	00000000 
00056d4f l       .debug_str	00000000 
0001ae24 l       .debug_str	00000000 
000135b1 l       .debug_str	00000000 
000135b9 l       .debug_str	00000000 
0001210c l     F .text	0000002a _ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E
000120e2 l     F .text	0000002a _ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE
00012008 l     F .text	0000009c _ZN3log13RecordBuilder3new17haca8312579858419E
000120a4 l     F .text	00000022 _ZN3log13RecordBuilder4args17h0d0d49873389eda9E
00012136 l     F .text	00000010 _ZN3log13RecordBuilder4line17h44de9f431bb34307E
00012146 l     F .text	00000010 _ZN3log13RecordBuilder5build17h83529556a009112eE
000120c6 l     F .text	0000000c _ZN3log13RecordBuilder5level17h0f95d7860f854eb5E
000120d2 l     F .text	00000010 _ZN3log13RecordBuilder6target17hd1b0e0684e399993E
000122fa l     F .text	00000012 _ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E
00012160 l     F .text	00000028 _ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E
00012188 l     F .text	00000010 _ZN3log15MetadataBuilder5build17h2478972692162fc0E
20004a68 l     O .bss	00000004 _ZN3log5STATE17hc9404a0f5c97cef6E
200000f0 l     O .data	00000008 _ZN3log6LOGGER17hc33d4d9c061fc628E
00011ffe l     F .text	0000000a _ZN3log6Record7builder17hde62ab0132265febE
00024984 l     O .text	00000000 _ZN3log6logger3NOP17h5a3de47970f20990E
00012156 l     F .text	0000000a _ZN3log8Metadata7builder17ha56bd59835d60a3cE
00011ff4 l     F .text	0000000a _ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E
00011d88 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E
00011dc0 l     F .text	00000016 _ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE
00011dd6 l     F .text	00000008 _ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE
00011de6 l     F .text	00000028 _ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E
00011e8c l     F .text	0000000a _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E
00012320 l     F .text	000000aa _ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E
000123ca l     F .text	0000003a _ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E
0001230c l     F .text	00000014 _ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE
00011f58 l     F .text	00000012 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E
00000000 l    df *ABS*	00000000 memchr.2yzmedhn-cgu.0
00020854 l       .debug_str	00000000 
0001412f l       .debug_str	00000000 
000197f1 l       .debug_str	00000000 
000202a0 l       .debug_str	00000000 
000202d5 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00057792 l       .debug_str	00000000 
000202e1 l       .debug_str	00000000 
00020319 l       .debug_str	00000000 
00020333 l       .debug_str	00000000 
0002033d l       .debug_str	00000000 
00020345 l       .debug_str	00000000 
0002034d l       .debug_str	00000000 
00020389 l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0002039c l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
000203a4 l       .debug_str	00000000 
000203dc l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
000203e4 l       .debug_str	00000000 
0002041c l       .debug_str	00000000 
00020424 l       .debug_str	00000000 
0002045c l       .debug_str	00000000 
00020476 l       .debug_str	00000000 
0002047f l       .debug_str	00000000 
000204b7 l       .debug_str	00000000 
000204c0 l       .debug_str	00000000 
000204f8 l       .debug_str	00000000 
00014281 l       .debug_str	00000000 
00022ef5 l       .debug_str	00000000 
00020580 l       .debug_str	00000000 
000205c8 l       .debug_str	00000000 
000205d3 l       .debug_str	00000000 
00019c66 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00020611 l       .debug_str	00000000 
0001bad7 l       .debug_str	00000000 
0002063a l       .debug_str	00000000 
0002065f l       .debug_str	00000000 
00016c8b l       .debug_str	00000000 
0001bbcd l       .debug_str	00000000 
000206be l       .debug_str	00000000 
0001bc1f l       .debug_str	00000000 
000206e6 l       .debug_str	00000000 
00020717 l       .debug_str	00000000 
00020723 l       .debug_str	00000000 
00020782 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
000207b4 l       .debug_str	00000000 
000207fc l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
00020809 l       .debug_str	00000000 
00020864 l       .debug_str	00000000 
00020872 l       .debug_str	00000000 
00011e95 l       .debug_str	00000000 
0001c034 l       .debug_str	00000000 
0000eb86 l       .debug_str	00000000 
000208ba l       .debug_str	00000000 
0001c080 l       .debug_str	00000000 
000208f5 l       .debug_str	00000000 
0002092c l       .debug_str	00000000 
00020945 l       .debug_str	00000000 
00020951 l       .debug_str	00000000 
00014dc6 l       .debug_str	00000000 
000209a3 l       .debug_str	00000000 
00014e36 l       .debug_str	00000000 
000209f8 l       .debug_str	00000000 
00020932 l       .debug_str	00000000 
00020a2b l       .debug_str	00000000 
0001a3af l       .debug_str	00000000 
00020a71 l       .debug_str	00000000 
00014d56 l       .debug_str	00000000 
000133b6 l       .debug_str	00000000 
0005504c l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00020aba l       .debug_str	00000000 
00023722 l       .debug_str	00000000 
00020acb l       .debug_str	00000000 
00020b40 l       .debug_str	00000000 
00020b6d l       .debug_str	00000000 
0001a6cf l       .debug_str	00000000 
00020bf9 l       .debug_str	00000000 
00020c7c l       .debug_str	00000000 
00020cab l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00020cf8 l       .debug_str	00000000 
00020d28 l       .debug_str	00000000 
00020d76 l       .debug_str	00000000 
00020da6 l       .debug_str	00000000 
00020df4 l       .debug_str	00000000 
00020e24 l       .debug_str	00000000 
00020e72 l       .debug_str	00000000 
00020ea3 l       .debug_str	00000000 
00020ef2 l       .debug_str	00000000 
00020f23 l       .debug_str	00000000 
00020f72 l       .debug_str	00000000 
00020fa2 l       .debug_str	00000000 
00020faa l       .debug_str	00000000 
00020fda l       .debug_str	00000000 
00020fe2 l       .debug_str	00000000 
00021020 l       .debug_str	00000000 
00021035 l       .debug_str	00000000 
0000c067 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000ad69 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00052e80 l       .debug_str	00000000 
00052c26 l       .debug_str	00000000 
0001fee6 l       .debug_str	00000000 
00019756 l       .debug_str	00000000 
00014519 l       .debug_str	00000000 
00021061 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
000542b5 l       .debug_str	00000000 
000576cf l       .debug_str	00000000 
00012f2e l       .debug_str	00000000 
0005933f l       .debug_str	00000000 
00016db0 l       .debug_str	00000000 
000210b7 l       .debug_str	00000000 
00014164 l       .debug_str	00000000 
000210b6 l       .debug_str	00000000 
000210ba l       .debug_str	00000000 
000210c4 l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
00054c0d l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000210ca l       .debug_str	00000000 
000210ce l       .debug_str	00000000 
00020397 l       .debug_str	00000000 
000210d3 l       .debug_str	00000000 
000210d2 l       .debug_str	00000000 
000210d6 l       .debug_str	00000000 
000210da l       .debug_str	00000000 
000210df l       .debug_str	00000000 
000210de l       .debug_str	00000000 
000210e2 l       .debug_str	00000000 
000210e6 l       .debug_str	00000000 
00052704 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00020201 l       .debug_str	00000000 
00020256 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00056807 l       .debug_str	00000000 
0002d7fb l       .debug_str	00000000 
000136d5 l       .debug_str	00000000 
000136da l       .debug_str	00000000 
000136e0 l       .debug_str	00000000 
00017174 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00013f3f l       .debug_str	00000000 
000306ec l       .debug_str	00000000 
0002810a l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00056a23 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00031536 l       .debug_str	00000000 
00054c1f l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052891 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00020033 l       .debug_str	00000000 
0000eb4e l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00014083 l       .debug_str	00000000 
0001244a l     F .text	0000006e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE
00000000 l    df *ABS*	00000000 1oq54qwymghnfn7s
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000210ea l       .debug_str	00000000 
000540c3 l       .debug_str	00000000 
0002116f l       .debug_str	00000000 
000211dc l       .debug_str	00000000 
0002124e l       .debug_str	00000000 
00052e9f l       .debug_str	00000000 
00056a23 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000212ac l       .debug_str	00000000 
00046a7a l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1sklumn9v47r13ke
0001fee6 l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00019772 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00056807 l       .debug_str	00000000 
0002810a l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000212c9 l       .debug_str	00000000 
0002bd09 l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
0002132a l       .debug_str	00000000 
00013d37 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2la8qm50nrg05wyh
00029756 l       .debug_str	00000000 
00022ef5 l       .debug_str	00000000 
0002198e l       .debug_str	00000000 
000219f9 l       .debug_str	00000000 
00021a3f l       .debug_str	00000000 
00021ab1 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00021cf6 l       .debug_str	00000000 
00021d68 l       .debug_str	00000000 
00021db2 l       .debug_str	00000000 
00021dfc l       .debug_str	00000000 
00022049 l       .debug_str	00000000 
00022085 l       .debug_str	00000000 
0003666a l       .debug_str	00000000 
000039b7 l       .debug_str	00000000 
000220ca l       .debug_str	00000000 
00022107 l       .debug_str	00000000 
0002214d l       .debug_str	00000000 
0002218a l       .debug_str	00000000 
000223cb l       .debug_str	00000000 
0002240b l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0002264f l       .debug_str	00000000 
000228a3 l       .debug_str	00000000 
000228fc l       .debug_str	00000000 
00022b4c l       .debug_str	00000000 
0001fee6 l       .debug_str	00000000 
00011a0a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00058197 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
000542b5 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00005c24 l       .debug_str	00000000 
00005c92 l       .debug_str	00000000 
00005d29 l       .debug_str	00000000 
00005de9 l       .debug_str	00000000 
00005ed2 l       .debug_str	00000000 
00005fe4 l       .debug_str	00000000 
0000611f l       .debug_str	00000000 
00006283 l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
000065c6 l       .debug_str	00000000 
000067a5 l       .debug_str	00000000 
000069ad l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002d98f l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00052c98 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000078c2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00009617 l       .debug_str	00000000 
0000983b l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00009c94 l       .debug_str	00000000 
00009edd l       .debug_str	00000000 
0000a143 l       .debug_str	00000000 
000576cf l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00052ba9 l       .debug_str	00000000 
000297ca l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00022663 l       .debug_str	00000000 
00005a29 l       .debug_str	00000000 
00005a77 l       .debug_str	00000000 
00005ae2 l       .debug_str	00000000 
000228b7 l       .debug_str	00000000 
0002138d l       .debug_str	00000000 
000213f5 l       .debug_str	00000000 
00021635 l       .debug_str	00000000 
0002169d l       .debug_str	00000000 
000216e2 l       .debug_str	00000000 
0002174d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xneats2au1n52xr
00022bf2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00013638 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00022ba1 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3hq83qlgyhwbaj1j
00000beb l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0001975e l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
0000bca1 l       .debug_str	00000000 
00019772 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00056a23 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00022c14 l       .debug_str	00000000 
00022c70 l       .debug_str	00000000 
00022ccd l       .debug_str	00000000 
00022d2a l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4dguvrsipkvuzwcx
0001ff9b l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001fee6 l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
0000a696 l       .debug_str	00000000 
00022ef5 l       .debug_str	00000000 
00022ef4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00056807 l       .debug_str	00000000 
0002810a l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002d7fb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00052ba9 l       .debug_str	00000000 
00052c98 l       .debug_str	00000000 
00022d87 l       .debug_str	00000000 
00022df8 l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00022e04 l       .debug_str	00000000 
0001565c l       .debug_str	00000000 
00022e75 l       .debug_str	00000000 
00022ee6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 501bil2zkh495ov3
0002327f l       .debug_str	00000000 
000232ea l       .debug_str	00000000 
000233b2 l       .debug_str	00000000 
00023320 l       .debug_str	00000000 
00023357 l       .debug_str	00000000 
0002336a l       .debug_str	00000000 
000233a9 l       .debug_str	00000000 
000233c4 l       .debug_str	00000000 
000233fc l       .debug_str	00000000 
00023410 l       .debug_str	00000000 
0002343c l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
0001975e l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
0005806d l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00031536 l       .debug_str	00000000 
00054c1f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052891 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00020033 l       .debug_str	00000000 
00020027 l       .debug_str	00000000 
00019772 l       .debug_str	00000000 
0000bc9a l       .debug_str	00000000 
00052e9f l       .debug_str	00000000 
0005806c l       .debug_str	00000000 
00023445 l       .debug_str	00000000 
00022ef5 l       .debug_str	00000000 
00017512 l       .debug_str	00000000 
00023449 l       .debug_str	00000000 
0005759a l       .debug_str	00000000 
00004ac5 l       .debug_str	00000000 
00004acd l       .debug_str	00000000 
00004ad6 l       .debug_str	00000000 
00004ae4 l       .debug_str	00000000 
00004aeb l       .debug_str	00000000 
0000476b l       .debug_str	00000000 
0000477b l       .debug_str	00000000 
00004784 l       .debug_str	00000000 
00004792 l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047ac l       .debug_str	00000000 
000049ba l       .debug_str	00000000 
000047b8 l       .debug_str	00000000 
000047c7 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047e8 l       .debug_str	00000000 
000047f9 l       .debug_str	00000000 
00004801 l       .debug_str	00000000 
00004834 l       .debug_str	00000000 
0000481b l       .debug_str	00000000 
00004840 l       .debug_str	00000000 
00001b29 l       .debug_str	00000000 
00004872 l       .debug_str	00000000 
00004859 l       .debug_str	00000000 
000048ac l       .debug_str	00000000 
0000489f l       .debug_str	00000000 
00004886 l       .debug_str	00000000 
00004af2 l       .debug_str	00000000 
00004b51 l       .debug_str	00000000 
00004afa l       .debug_str	00000000 
00004b15 l       .debug_str	00000000 
00004b49 l       .debug_str	00000000 
00004b30 l       .debug_str	00000000 
00056678 l       .debug_str	00000000 
00044cc5 l       .debug_str	00000000 
00023ff0 l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
00053e8a l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
00023451 l       .debug_str	00000000 
000576ce l       .debug_str	00000000 
00055a0e l       .debug_str	00000000 
00053900 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00055631 l       .debug_str	00000000 
0000c124 l       .debug_str	00000000 
00052c43 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c135 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c13f l       .debug_str	00000000 
0000c14a l       .debug_str	00000000 
0000c154 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0002373a l       .debug_str	00000000 
00022efb l       .debug_str	00000000 
00022f2c l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00058197 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
000542b5 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002d98f l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00052c98 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00005a29 l       .debug_str	00000000 
00005a77 l       .debug_str	00000000 
00005ae2 l       .debug_str	00000000 
000576cf l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00052ba9 l       .debug_str	00000000 
00029756 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000228b7 l       .debug_str	00000000 
00022f38 l       .debug_str	00000000 
00022f68 l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00005c24 l       .debug_str	00000000 
00005c92 l       .debug_str	00000000 
00005d29 l       .debug_str	00000000 
00005de9 l       .debug_str	00000000 
00005ed2 l       .debug_str	00000000 
00005fe4 l       .debug_str	00000000 
0000611f l       .debug_str	00000000 
00006283 l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
000065c6 l       .debug_str	00000000 
000067a5 l       .debug_str	00000000 
000069ad l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000078c2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00009617 l       .debug_str	00000000 
0000983b l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00009c94 l       .debug_str	00000000 
00009edd l       .debug_str	00000000 
0000a143 l       .debug_str	00000000 
000297ca l       .debug_str	00000000 
00022663 l       .debug_str	00000000 
00022f75 l       .debug_str	00000000 
00022fa6 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a654 l       .debug_str	00000000 
00005772 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00057511 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00051f56 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
0005834c l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
000056f6 l       .debug_str	00000000 
000475f9 l       .debug_str	00000000 
0000577b l       .debug_str	00000000 
00005786 l       .debug_str	00000000 
00022fae l       .debug_str	00000000 
00022fd9 l       .debug_str	00000000 
00022fea l       .debug_str	00000000 
0002301f l       .debug_str	00000000 
00004cf6 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
000049b1 l       .debug_str	00000000 
000049b9 l       .debug_str	00000000 
0000487d l       .debug_str	00000000 
000049c3 l       .debug_str	00000000 
00004c65 l       .debug_str	00000000 
00004c4c l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004c47 l       .debug_str	00000000 
00004c74 l       .debug_str	00000000 
00004cfe l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
0005589b l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00004d04 l       .debug_str	00000000 
0002302e l       .debug_str	00000000 
00023061 l       .debug_str	00000000 
000042ea l       .debug_str	00000000 
000042f4 l       .debug_str	00000000 
000042fd l       .debug_str	00000000 
00004241 l       .debug_str	00000000 
00004268 l       .debug_str	00000000 
0000439d l       .debug_str	00000000 
00023071 l       .debug_str	00000000 
000230a5 l       .debug_str	00000000 
000230ae l       .debug_str	00000000 
000230da l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000230e9 l       .debug_str	00000000 
0002311c l       .debug_str	00000000 
00023129 l       .debug_str	00000000 
00023135 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00023166 l       .debug_str	00000000 
0002319b l       .debug_str	00000000 
0003666a l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
000231ac l       .debug_str	00000000 
000231de l       .debug_str	00000000 
000231ec l       .debug_str	00000000 
0002322a l       .debug_str	00000000 
00023244 l       .debug_str	00000000 
00023296 l       .debug_str	00000000 
000232d2 l       .debug_str	00000000 
20004a70 l     O .bss	00000008 _ZN6mynewt3spi11PENDING_CMD17hd08bb758c99a7708E
20004a78 l     O .bss	00002004 _ZN6mynewt3spi12PENDING_DATA17hf749c482f1fd6e90E
20006f04 l     O .bss	00000000 _ZN6mynewt3spi12SPI_CALLBACK17h9820a4217e4879a6E
200000f8 l     O .data	00000008 _ZN6mynewt3spi12SPI_SETTINGS17h4a4473e27299c06dE
000131fe l     F .text	0000003a _ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E
20006a8c l     O .bss	00000018 _ZN6mynewt3spi14SPI_DATA_QUEUE17h4880c24292cc1218E
20006b04 l     O .bss	00000400 _ZN6mynewt3spi14SPI_TASK_STACK17h041a1fc76b4d16c1E
20006aa4 l     O .bss	00000010 _ZN6mynewt3spi15SPI_EVENT_QUEUE17h4e2cf68a255fc2fdE
20006a84 l     O .bss	00000008 _ZN6mynewt3spi16SPI_THROTTLE_SEM17h1f0932d6e65cb8daE
00013516 l     F .text	000001ea _ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E
00013700 l     F .text	000002e8 _ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E
00013d1e l     F .text	00000128 _ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E
000139e8 l     F .text	00000336 _ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E
20006a7c l     O .bss	00000008 _ZN6mynewt3spi7SPI_SEM17hd7399e388b8e657cE
20006ab4 l     O .bss	00000050 _ZN6mynewt3spi8SPI_TASK17h4c45c24ee73ad430E
00013e46 l     F .text	00000054 _ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E
00024b80 l     O .text	0000001c str.0
00024be0 l     O .text	00000021 str.1
00024c40 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 53x3bckk5lzipnpa
00000c52 l       .debug_str	00000000 
00031536 l       .debug_str	00000000 
00054c1f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052891 l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00020033 l       .debug_str	00000000 
00020027 l       .debug_str	00000000 
0002374b l       .debug_str	00000000 
00022ef5 l       .debug_str	00000000 
00023751 l       .debug_str	00000000 
0000e8fc l       .debug_str	00000000 
00055a0e l       .debug_str	00000000 
00053900 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
00023720 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00052a63 l       .debug_str	00000000 
00023763 l       .debug_str	00000000 
0000e90e l       .debug_str	00000000 
0002345c l       .debug_str	00000000 
0003795a l       .debug_str	00000000 
00023487 l       .debug_str	00000000 
000580a6 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003666a l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
000234b3 l       .debug_str	00000000 
000593a2 l       .debug_str	00000000 
00023524 l       .debug_str	00000000 
00023550 l       .debug_str	00000000 
0002357d l       .debug_str	00000000 
000235e9 l       .debug_str	00000000 
000235f1 l       .debug_str	00000000 
0002365e l       .debug_str	00000000 
00023667 l       .debug_str	00000000 
00023694 l       .debug_str	00000000 
0002343c l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0002370e l       .debug_str	00000000 
0002373e l       .debug_str	00000000 
00052c43 l       .debug_str	00000000 
0000c135 l       .debug_str	00000000 
0000c13f l       .debug_str	00000000 
0000c14a l       .debug_str	00000000 
0000c154 l       .debug_str	00000000 
0002373a l       .debug_str	00000000 
00023724 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
0001975e l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00024e40 l     O .text	00000021 str.0
00000000 l    df *ABS*	00000000 n1xzuhnvw82wqrn
00004afa l       .debug_str	00000000 
00004b15 l       .debug_str	00000000 
00004b49 l       .debug_str	00000000 
00023768 l       .debug_str	00000000 
000237ba l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0001407b l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a654 l       .debug_str	00000000 
00004ac5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00004acd l       .debug_str	00000000 
00004ad6 l       .debug_str	00000000 
00004ae4 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00004aeb l       .debug_str	00000000 
0000476b l       .debug_str	00000000 
0000477b l       .debug_str	00000000 
00004784 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00004792 l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047ac l       .debug_str	00000000 
000049ba l       .debug_str	00000000 
000047b8 l       .debug_str	00000000 
000047c7 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047e8 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
000047f9 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00004801 l       .debug_str	00000000 
00004834 l       .debug_str	00000000 
0000481b l       .debug_str	00000000 
00004840 l       .debug_str	00000000 
00001b29 l       .debug_str	00000000 
00004872 l       .debug_str	00000000 
00004859 l       .debug_str	00000000 
0000487d l       .debug_str	00000000 
000048ac l       .debug_str	00000000 
0000489f l       .debug_str	00000000 
00004886 l       .debug_str	00000000 
00004af2 l       .debug_str	00000000 
00004b30 l       .debug_str	00000000 
00004b51 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 num_traits.eydd4btj-cgu.0
00024b0a l       .debug_str	00000000 
00023d2b l       .debug_str	00000000 
00014d56 l       .debug_str	00000000 
00023d6e l       .debug_str	00000000 
00014dbd l       .debug_str	00000000 
00023dca l       .debug_str	00000000 
00014e2d l       .debug_str	00000000 
00023e29 l       .debug_str	00000000 
00014dc6 l       .debug_str	00000000 
00023e7b l       .debug_str	00000000 
00023ed0 l       .debug_str	00000000 
00023f26 l       .debug_str	00000000 
00023f54 l       .debug_str	00000000 
00023f60 l       .debug_str	00000000 
00023f92 l       .debug_str	00000000 
00023fb9 l       .debug_str	00000000 
00023feb l       .debug_str	00000000 
00023ffb l       .debug_str	00000000 
00024030 l       .debug_str	00000000 
00024043 l       .debug_str	00000000 
00024079 l       .debug_str	00000000 
0002408d l       .debug_str	00000000 
000240d7 l       .debug_str	00000000 
000240e8 l       .debug_str	00000000 
000576cf l       .debug_str	00000000 
00024124 l       .debug_str	00000000 
00051f82 l       .debug_str	00000000 
00057792 l       .debug_str	00000000 
00024162 l       .debug_str	00000000 
000241a0 l       .debug_str	00000000 
000141f6 l       .debug_str	00000000 
000241ad l       .debug_str	00000000 
0003666a l       .debug_str	00000000 
000241bb l       .debug_str	00000000 
000241e3 l       .debug_str	00000000 
0000154c l       .debug_str	00000000 
00024222 l       .debug_str	00000000 
00024250 l       .debug_str	00000000 
00024257 l       .debug_str	00000000 
000242fa l       .debug_str	00000000 
00024308 l       .debug_str	00000000 
00038e63 l       .debug_str	00000000 
000243a0 l       .debug_str	00000000 
0002443a l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
000244f2 l       .debug_str	00000000 
0002bd09 l       .debug_str	00000000 
000133b6 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00020aba l       .debug_str	00000000 
00024555 l       .debug_str	00000000 
000245c7 l       .debug_str	00000000 
000245f1 l       .debug_str	00000000 
0002462f l       .debug_str	00000000 
00024642 l       .debug_str	00000000 
0002468d l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00024696 l       .debug_str	00000000 
000246d8 l       .debug_str	00000000 
00025999 l       .debug_str	00000000 
00024712 l       .debug_str	00000000 
00024757 l       .debug_str	00000000 
00024773 l       .debug_str	00000000 
000247b6 l       .debug_str	00000000 
000247cc l       .debug_str	00000000 
00024831 l       .debug_str	00000000 
00024896 l       .debug_str	00000000 
000248d1 l       .debug_str	00000000 
000248de l       .debug_str	00000000 
00020932 l       .debug_str	00000000 
00024911 l       .debug_str	00000000 
0000aa4d l       .debug_str	00000000 
00024957 l       .debug_str	00000000 
0001a3af l       .debug_str	00000000 
0002499d l       .debug_str	00000000 
0000acdc l       .debug_str	00000000 
000249e4 l       .debug_str	00000000 
00024a2d l       .debug_str	00000000 
0001565c l       .debug_str	00000000 
0001ff9b l       .debug_str	00000000 
00016c8b l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00024aa6 l       .debug_str	00000000 
00024aeb l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00024b43 l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
00024b5b l       .debug_str	00000000 
00024b96 l       .debug_str	00000000 
00024bba l       .debug_str	00000000 
00024be0 l       .debug_str	00000000 
00024c1b l       .debug_str	00000000 
00024c3e l       .debug_str	00000000 
00024c63 l       .debug_str	00000000 
00024ca0 l       .debug_str	00000000 
00024cb7 l       .debug_str	00000000 
00024cf4 l       .debug_str	00000000 
00024d0b l       .debug_str	00000000 
00015a97 l       .debug_str	00000000 
00024d5c l       .debug_str	00000000 
0001785e l       .debug_str	00000000 
00024db7 l       .debug_str	00000000 
00024e1a l       .debug_str	00000000 
00024e5c l       .debug_str	00000000 
00015d50 l       .debug_str	00000000 
00024ec0 l       .debug_str	00000000 
0001a6cf l       .debug_str	00000000 
00024f2d l       .debug_str	00000000 
0000ad61 l       .debug_str	00000000 
00024f8f l       .debug_str	00000000 
00024f9d l       .debug_str	00000000 
00025008 l       .debug_str	00000000 
00025022 l       .debug_str	00000000 
00025038 l       .debug_str	00000000 
000250a3 l       .debug_str	00000000 
000250b3 l       .debug_str	00000000 
0002511f l       .debug_str	00000000 
00025131 l       .debug_str	00000000 
0002519d l       .debug_str	00000000 
000251ae l       .debug_str	00000000 
00025215 l       .debug_str	00000000 
0002524d l       .debug_str	00000000 
000252b7 l       .debug_str	00000000 
0002533f l       .debug_str	00000000 
00011b34 l       .debug_str	00000000 
000253b3 l       .debug_str	00000000 
00025435 l       .debug_str	00000000 
0002544c l       .debug_str	00000000 
0002548a l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
0002bf7b l       .debug_str	00000000 
0002d7fb l       .debug_str	00000000 
0002549d l       .debug_str	00000000 
000254ac l       .debug_str	00000000 
000254ea l       .debug_str	00000000 
000254fd l       .debug_str	00000000 
00025529 l       .debug_str	00000000 
00025532 l       .debug_str	00000000 
0002555e l       .debug_str	00000000 
00025567 l       .debug_str	00000000 
000255c7 l       .debug_str	00000000 
0002b9bc l       .debug_str	00000000 
00025618 l       .debug_str	00000000 
00025669 l       .debug_str	00000000 
000256c6 l       .debug_str	00000000 
00025724 l       .debug_str	00000000 
00025a09 l       .debug_str	00000000 
00025775 l       .debug_str	00000000 
0002579e l       .debug_str	00000000 
00025801 l       .debug_str	00000000 
00025812 l       .debug_str	00000000 
0002581f l       .debug_str	00000000 
00025834 l       .debug_str	00000000 
00025885 l       .debug_str	00000000 
000258ae l       .debug_str	00000000 
00025911 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0001fee6 l       .debug_str	00000000 
00022ef4 l       .debug_str	00000000 
0005924a l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
0002592e l       .debug_str	00000000 
000542b5 l       .debug_str	00000000 
000312f6 l       .debug_str	00000000 
00020397 l       .debug_str	00000000 
00017471 l       .debug_str	00000000 
00052e9f l       .debug_str	00000000 
00051c56 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000580a6 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
0002594f l       .debug_str	00000000 
000024e8 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00025953 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000239c0 l       .debug_str	00000000 
00025965 l       .debug_str	00000000 
0002596a l       .debug_str	00000000 
0002596f l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016c50 l       .debug_str	00000000 
00025994 l       .debug_str	00000000 
000259d0 l       .debug_str	00000000 
00054c0d l       .debug_str	00000000 
00035d22 l       .debug_str	00000000 
000259e6 l       .debug_str	00000000 
000259ef l       .debug_str	00000000 
0002f327 l       .debug_str	00000000 
00052cf2 l       .debug_str	00000000 
00044f39 l       .debug_str	00000000 
000259f8 l       .debug_str	00000000 
000259fc l       .debug_str	00000000 
0002f5ed l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012f72 l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
00012f6e l       .debug_str	00000000 
00012f79 l       .debug_str	00000000 
00012f85 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00025a1e l       .debug_str	00000000 
00025a19 l       .debug_str	00000000 
00052a73 l       .debug_str	00000000 
00025a22 l       .debug_str	00000000 
000310c4 l       .debug_str	00000000 
00025a2b l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00033b7e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000237df l       .debug_str	00000000 
00023839 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002bc26 l       .debug_str	00000000 
00023888 l       .debug_str	00000000 
00025940 l       .debug_str	00000000 
00025933 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00056a23 l       .debug_str	00000000 
00023890 l       .debug_str	00000000 
0002389d l       .debug_str	00000000 
000238a6 l       .debug_str	00000000 
00051b70 l       .debug_str	00000000 
0002bff2 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00013f39 l       .debug_str	00000000 
00056807 l       .debug_str	00000000 
0002810a l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0001407b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d7d5 l       .debug_str	00000000 
00014083 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b3b4 l       .debug_str	00000000 
0000b3f5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00022ef5 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
0005933f l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
000141d4 l       .debug_str	00000000 
000259e0 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00012f2e l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00013638 l       .debug_str	00000000 
00054c9b l       .debug_str	00000000 
00011a96 l       .debug_str	00000000 
0002e64f l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00052c26 l       .debug_str	00000000 
00023722 l       .debug_str	00000000 
000259b4 l       .debug_str	00000000 
00014093 l       .debug_str	00000000 
000238b0 l       .debug_str	00000000 
000238ee l       .debug_str	00000000 
0001aeb0 l       .debug_str	00000000 
0005504c l       .debug_str	00000000 
0003e87a l       .debug_str	00000000 
00058120 l       .debug_str	00000000 
000238fd l       .debug_str	00000000 
000140c2 l       .debug_str	00000000 
00023926 l       .debug_str	00000000 
0001af22 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001b0db l       .debug_str	00000000 
00020051 l       .debug_str	00000000 
0000e939 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00023958 l       .debug_str	00000000 
0002597e l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00023966 l       .debug_str	00000000 
000141af l       .debug_str	00000000 
000141c2 l       .debug_str	00000000 
0005769c l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
00042f29 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00051d0b l       .debug_str	00000000 
000239a8 l       .debug_str	00000000 
000239ac l       .debug_str	00000000 
000239b7 l       .debug_str	00000000 
000239c6 l       .debug_str	00000000 
00023a0e l       .debug_str	00000000 
00023a2e l       .debug_str	00000000 
00031e10 l       .debug_str	00000000 
00025966 l       .debug_str	00000000 
00023a79 l       .debug_str	00000000 
0002596b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00052ba9 l       .debug_str	00000000 
00052c98 l       .debug_str	00000000 
00023ac4 l       .debug_str	00000000 
00022ee6 l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
00023b35 l       .debug_str	00000000 
0001483f l       .debug_str	00000000 
00023b63 l       .debug_str	00000000 
00011e95 l       .debug_str	00000000 
00023bab l       .debug_str	00000000 
00023bdb l       .debug_str	00000000 
00023c06 l       .debug_str	00000000 
0002092c l       .debug_str	00000000 
00020945 l       .debug_str	00000000 
00023c3d l       .debug_str	00000000 
00014e36 l       .debug_str	00000000 
00023c8e l       .debug_str	00000000 
00014caa l       .debug_str	00000000 
00023ce0 l       .debug_str	00000000 
00014d01 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19c5s2vweequjzfw
0000eb55 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00025a37 l       .debug_str	00000000 
00025a60 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00025af1 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00025a6d l       .debug_str	00000000 
000140c2 l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
00056ea4 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00025a96 l       .debug_str	00000000 
00025aeb l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1bm86yaetip2rc3f
00025e66 l       .debug_str	00000000 
00025cce l       .debug_str	00000000 
00025d0a l       .debug_str	00000000 
00025d26 l       .debug_str	00000000 
00025d62 l       .debug_str	00000000 
00025d98 l       .debug_str	00000000 
00025dd4 l       .debug_str	00000000 
00025ddf l       .debug_str	00000000 
00025e1b l       .debug_str	00000000 
00025e29 l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
00025e9d l       .debug_str	00000000 
00025eda l       .debug_str	00000000 
00025ee9 l       .debug_str	00000000 
00025f26 l       .debug_str	00000000 
00025f69 l       .debug_str	00000000 
00025fa6 l       .debug_str	00000000 
0000eb5a l       .debug_str	00000000 
00025fdd l       .debug_str	00000000 
0002601b l       .debug_str	00000000 
00026052 l       .debug_str	00000000 
00026091 l       .debug_str	00000000 
000260ca l       .debug_str	00000000 
0002612e l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00026163 l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0002617e l       .debug_str	00000000 
000261c3 l       .debug_str	00000000 
000261e0 l       .debug_str	00000000 
000141e4 l       .debug_str	00000000 
000197fa l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00019822 l       .debug_str	00000000 
00025af5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000261ef l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00026172 l       .debug_str	00000000 
0000f5cb l       .debug_str	00000000 
00056ae7 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0002596b l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0001082c l       .debug_str	00000000 
00025b2f l       .debug_str	00000000 
0002618d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00022ef5 l       .debug_str	00000000 
000261d2 l       .debug_str	00000000 
0000eb55 l       .debug_str	00000000 
00025b4b l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000e9bd l       .debug_str	00000000 
0000e9c6 l       .debug_str	00000000 
0000e9d4 l       .debug_str	00000000 
00019888 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0000e9ec l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000f39c l       .debug_str	00000000 
0000f3a7 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00057792 l       .debug_str	00000000 
00025b58 l       .debug_str	00000000 
00025b91 l       .debug_str	00000000 
00025c2c l       .debug_str	00000000 
00025c86 l       .debug_str	00000000 
00025cc2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1w4juabyv8bmed5v
00000d37 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00020033 l       .debug_str	00000000 
00026231 l       .debug_str	00000000 
0002627c l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0001ff92 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00031536 l       .debug_str	00000000 
00054c1f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052891 l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2jbqb9ep0zzhh36j
0001cf4c l       .debug_str	00000000 
00026eeb l       .debug_str	00000000 
00026ef8 l       .debug_str	00000000 
00026f38 l       .debug_str	00000000 
00027035 l       .debug_str	00000000 
00027075 l       .debug_str	00000000 
00027084 l       .debug_str	00000000 
000270c4 l       .debug_str	00000000 
000270e3 l       .debug_str	00000000 
00027123 l       .debug_str	00000000 
0002713f l       .debug_str	00000000 
0002717f l       .debug_str	00000000 
0002718d l       .debug_str	00000000 
000271cd l       .debug_str	00000000 
00057792 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c5f5 l       .debug_str	00000000 
0001da5e l       .debug_str	00000000 
00000788 l       .debug_str	00000000 
000271db l       .debug_str	00000000 
0002721c l       .debug_str	00000000 
0000c336 l       .debug_str	00000000 
00027251 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0002725b l       .debug_str	00000000 
0002729c l       .debug_str	00000000 
0001ff6f l       .debug_str	00000000 
000272e9 l       .debug_str	00000000 
0002732a l       .debug_str	00000000 
0002735f l       .debug_str	00000000 
0002736a l       .debug_str	00000000 
000273ab l       .debug_str	00000000 
000273f8 l       .debug_str	00000000 
00027439 l       .debug_str	00000000 
0002746e l       .debug_str	00000000 
000274dd l       .debug_str	00000000 
000275de l       .debug_str	00000000 
0001e335 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0002764d l       .debug_str	00000000 
0002766c l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00017512 l       .debug_str	00000000 
00052ade l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
0000f5cb l       .debug_str	00000000 
00056ae7 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0002596b l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0001082c l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
000168ba l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003666a l       .debug_str	00000000 
0002765c l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
00058b49 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
00058197 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
000542b5 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
000262ae l       .debug_str	00000000 
0002631b l       .debug_str	00000000 
000263b1 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002d98f l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00052c98 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
0000f853 l       .debug_str	00000000 
0000f8ca l       .debug_str	00000000 
0000f94e l       .debug_str	00000000 
0000f9c9 l       .debug_str	00000000 
0000fa67 l       .debug_str	00000000 
0000fb12 l       .debug_str	00000000 
00026470 l       .debug_str	00000000 
00026535 l       .debug_str	00000000 
00026607 l       .debug_str	00000000 
000266d0 l       .debug_str	00000000 
000267ba l       .debug_str	00000000 
000268c1 l       .debug_str	00000000 
000576cf l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00052ba9 l       .debug_str	00000000 
000269c7 l       .debug_str	00000000 
00026ac5 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00026bc6 l       .debug_str	00000000 
00026ca6 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00026da4 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
0000c32d l       .debug_str	00000000 
00026dc4 l       .debug_str	00000000 
00026dcb l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00026dd3 l       .debug_str	00000000 
00026de7 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00026e19 l       .debug_str	00000000 
00026e2d l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00026e5f l       .debug_str	00000000 
00026e9e l       .debug_str	00000000 
00026eac l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53kqumdi8360wwys
00027c03 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0000e9bd l       .debug_str	00000000 
0000e9c6 l       .debug_str	00000000 
0000e9d4 l       .debug_str	00000000 
00019888 l       .debug_str	00000000 
0000e9ec l       .debug_str	00000000 
00025c2c l       .debug_str	00000000 
00027a7f l       .debug_str	00000000 
00027b3c l       .debug_str	00000000 
00027b77 l       .debug_str	00000000 
00027bd0 l       .debug_str	00000000 
0002612e l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00027c86 l       .debug_str	00000000 
00027cea l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
00027ced l       .debug_str	00000000 
00012f63 l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00025af5 l       .debug_str	00000000 
000261ef l       .debug_str	00000000 
00051e81 l       .debug_str	00000000 
000597a1 l       .debug_str	00000000 
00027d5d l       .debug_str	00000000 
00027d60 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00012f85 l       .debug_str	00000000 
00019777 l       .debug_str	00000000 
00012f90 l       .debug_str	00000000 
00012f9b l       .debug_str	00000000 
00027d6d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000f39c l       .debug_str	00000000 
0000f3a7 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
0000f3b1 l       .debug_str	00000000 
0000e9e6 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
000197d7 l       .debug_str	00000000 
0000f3ba l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
00019822 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0002618d l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002cadb l       .debug_str	00000000 
00027d88 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
00027cb1 l       .debug_str	00000000 
0002768a l       .debug_str	00000000 
00027727 l       .debug_str	00000000 
00027760 l       .debug_str	00000000 
000277ff l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00027d1c l       .debug_str	00000000 
00027838 l       .debug_str	00000000 
000278d5 l       .debug_str	00000000 
00027909 l       .debug_str	00000000 
000279ac l       .debug_str	00000000 
00027a4b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 tool5db1zbl71ep
00027d6d l       .debug_str	00000000 
00027d88 l       .debug_str	00000000 
00027e2c l       .debug_str	00000000 
00027ea1 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00012f85 l       .debug_str	00000000 
0002617e l       .debug_str	00000000 
00012f90 l       .debug_str	00000000 
00012f9b l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00019822 l       .debug_str	00000000 
0002cadb l       .debug_str	00000000 
00027dbd l       .debug_str	00000000 
0002612e l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0002618d l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ik332mkg6tevaet
0000bca2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010cb7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
00010e9d l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00010e96 l       .debug_str	00000000 
00027ed8 l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2m8s7rk6gjg5sdjo
0002809b l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000e88f l       .debug_str	00000000 
0000e8df l       .debug_str	00000000 
00038d91 l       .debug_str	00000000 
0001a9dc l       .debug_str	00000000 
00035941 l       .debug_str	00000000 
0000e8e2 l       .debug_str	00000000 
00052e9f l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
0005924a l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
00055630 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
00023720 l       .debug_str	00000000 
0000c1be l       .debug_str	00000000 
00052a63 l       .debug_str	00000000 
00023763 l       .debug_str	00000000 
0005850b l       .debug_str	00000000 
0000c1c2 l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
00000e31 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00057947 l       .debug_str	00000000 
0000c1cf l       .debug_str	00000000 
00056f9f l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
00054d75 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00012673 l       .debug_str	00000000 
0001267c l       .debug_str	00000000 
00012685 l       .debug_str	00000000 
00012690 l       .debug_str	00000000 
0001269b l       .debug_str	00000000 
000126a6 l       .debug_str	00000000 
000126b2 l       .debug_str	00000000 
000126bc l       .debug_str	00000000 
000126c9 l       .debug_str	00000000 
000126d7 l       .debug_str	00000000 
000126e6 l       .debug_str	00000000 
000126f3 l       .debug_str	00000000 
000283fd l       .debug_str	00000000 
000283ec l       .debug_str	00000000 
0002cadb l       .debug_str	00000000 
00027f9d l       .debug_str	00000000 
00027feb l       .debug_str	00000000 
0002804b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2ug841oumney39pv
00054372 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00013638 l       .debug_str	00000000 
00056a23 l       .debug_str	00000000 
000280fd l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00028110 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
0002819c l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
000281a5 l       .debug_str	00000000 
0003666a l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000281b5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vf5zed9a93zfp29
0000171d l       .debug_str	00000000 
0001fee6 l       .debug_str	00000000 
00019756 l       .debug_str	00000000 
00014519 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00056807 l       .debug_str	00000000 
0002d7fb l       .debug_str	00000000 
000136d5 l       .debug_str	00000000 
000136da l       .debug_str	00000000 
000136e0 l       .debug_str	00000000 
00017174 l       .debug_str	00000000 
000306ec l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
000281dc l       .debug_str	00000000 
00028205 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
000136e8 l       .debug_str	00000000 
00057792 l       .debug_str	00000000 
0002820d l       .debug_str	00000000 
00028235 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ng3xpvqtoio1chp
0002dd6e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00013638 l       .debug_str	00000000 
00056a23 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00028264 l       .debug_str	00000000 
000540c3 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3qt6984rqt15w0xm
000104e5 l       .debug_str	00000000 
000283c7 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00012d0c l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000283e7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00011a96 l       .debug_str	00000000 
00054d75 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00012673 l       .debug_str	00000000 
0001267c l       .debug_str	00000000 
00012685 l       .debug_str	00000000 
00012690 l       .debug_str	00000000 
0001269b l       .debug_str	00000000 
000126a6 l       .debug_str	00000000 
000126b2 l       .debug_str	00000000 
000126bc l       .debug_str	00000000 
000126c9 l       .debug_str	00000000 
000126d7 l       .debug_str	00000000 
000126e6 l       .debug_str	00000000 
000126f3 l       .debug_str	00000000 
000283fd l       .debug_str	00000000 
000283ec l       .debug_str	00000000 
00023722 l       .debug_str	00000000 
000282d3 l       .debug_str	00000000 
00028336 l       .debug_str	00000000 
00028360 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5cymlse6j4664rei
00052c26 l       .debug_str	00000000 
00028534 l       .debug_str	00000000 
00028550 l       .debug_str	00000000 
00028576 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
000576cf l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00055b76 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002840b l       .debug_str	00000000 
000140c2 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00028434 l       .debug_str	00000000 
00028445 l       .debug_str	00000000 
00028455 l       .debug_str	00000000 
000284a1 l       .debug_str	00000000 
000284ac l       .debug_str	00000000 
000284e2 l       .debug_str	00000000 
000284fa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 13ma8mzaba1sllzw
00028a83 l       .debug_str	00000000 
0003666a l       .debug_str	00000000 
000039b7 l       .debug_str	00000000 
00028dd7 l       .debug_str	00000000 
00022107 l       .debug_str	00000000 
00028e56 l       .debug_str	00000000 
0002218a l       .debug_str	00000000 
00028ed5 l       .debug_str	00000000 
00028f57 l       .debug_str	00000000 
00022ef5 l       .debug_str	00000000 
0002919b l       .debug_str	00000000 
0002921d l       .debug_str	00000000 
00029266 l       .debug_str	00000000 
000292e8 l       .debug_str	00000000 
00029331 l       .debug_str	00000000 
0002240b l       .debug_str	00000000 
000293b3 l       .debug_str	00000000 
00029435 l       .debug_str	00000000 
00029679 l       .debug_str	00000000 
000296fb l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00029744 l       .debug_str	00000000 
000297b8 l       .debug_str	00000000 
00011a0a l       .debug_str	00000000 
0001fee6 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002d7d5 l       .debug_str	00000000 
0005933f l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
000141d4 l       .debug_str	00000000 
0005924a l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
00029a27 l       .debug_str	00000000 
00029a2c l       .debug_str	00000000 
00029c97 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00058197 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
000542b5 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002d98f l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00052c98 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00005a29 l       .debug_str	00000000 
00005a77 l       .debug_str	00000000 
00005ae2 l       .debug_str	00000000 
000576cf l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00052ba9 l       .debug_str	00000000 
00029756 l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00005c24 l       .debug_str	00000000 
00005c92 l       .debug_str	00000000 
00005d29 l       .debug_str	00000000 
00005de9 l       .debug_str	00000000 
00005ed2 l       .debug_str	00000000 
00005fe4 l       .debug_str	00000000 
0000611f l       .debug_str	00000000 
00006283 l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
000065c6 l       .debug_str	00000000 
000067a5 l       .debug_str	00000000 
000069ad l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000078c2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00009617 l       .debug_str	00000000 
0000983b l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00009c94 l       .debug_str	00000000 
00009edd l       .debug_str	00000000 
0000a143 l       .debug_str	00000000 
000297ca l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002857f l       .debug_str	00000000 
00028606 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00028653 l       .debug_str	00000000 
000286da l       .debug_str	00000000 
00028922 l       .debug_str	00000000 
000289ab l       .debug_str	00000000 
000289fa l       .debug_str	00000000 
00028ccd l       .debug_str	00000000 
00021dfc l       .debug_str	00000000 
00028d59 l       .debug_str	00000000 
00022085 l       .debug_str	00000000 
00024f90 l     O .text	0000001c str.0
00024fd0 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 4miap3quw76e3k6m
00000beb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0001407b l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0005924a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00029d07 l       .debug_str	00000000 
0000b32d l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4yl298udq4i2eqhh
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00014093 l       .debug_str	00000000 
0002810a l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00029d57 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 f8ebwo3yn0ryfmw
0002a01c l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
0002a094 l       .debug_str	00000000 
0002a2bf l       .debug_str	00000000 
0002a337 l       .debug_str	00000000 
0002a4c6 l       .debug_str	00000000 
0002a53e l       .debug_str	00000000 
0002a6a6 l       .debug_str	00000000 
0002a71e l       .debug_str	00000000 
0002a79c l       .debug_str	00000000 
0002a814 l       .debug_str	00000000 
0002a907 l       .debug_str	00000000 
0002a97f l       .debug_str	00000000 
0002ab5c l       .debug_str	00000000 
0002abd4 l       .debug_str	00000000 
0002aca0 l       .debug_str	00000000 
0002ad18 l       .debug_str	00000000 
0002ad48 l       .debug_str	00000000 
0002adc0 l       .debug_str	00000000 
0002ae65 l       .debug_str	00000000 
0002aedd l       .debug_str	00000000 
0002b01e l       .debug_str	00000000 
0002b096 l       .debug_str	00000000 
0002b24c l       .debug_str	00000000 
0002b2c4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002d98f l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00052c98 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00029dbb l       .debug_str	00000000 
00029e33 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00029e8a l       .debug_str	00000000 
00029f02 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000078c2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3wi7uqccuys0591w
00016c92 l       .debug_str	00000000 
00016ccc l       .debug_str	00000000 
00016d05 l       .debug_str	00000000 
00016d14 l       .debug_str	00000000 
00016d57 l       .debug_str	00000000 
00054151 l       .debug_str	00000000 
00030adc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013f82 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00012605 l       .debug_str	00000000 
00016d0e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002b4c8 l       .debug_str	00000000 
00013fc5 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
0002b4f1 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
000576cf l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19nunfeq6523tst5
00025aeb l       .debug_str	00000000 
0002b52d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002b58d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
0002d98f l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1xpo0qpsduc6enem
0002b659 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002b5ed l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4xxoizn3g1nl6m5i
0002dd6e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00013638 l       .debug_str	00000000 
00056a23 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002b662 l       .debug_str	00000000 
000540c3 l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.b09zx0wt-cgu.0
00000afc l       .debug_str	00000000 
0002b6d3 l       .debug_str	00000000 
0002b6e6 l       .debug_str	00000000 
00013f17 l       .debug_str	00000000 
00056a23 l       .debug_str	00000000 
0002b717 l       .debug_str	00000000 
0002b71f l       .debug_str	00000000 
0002b728 l       .debug_str	00000000 
0002b771 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0002b72f l       .debug_str	00000000 
0002b76e l       .debug_str	00000000 
0002b777 l       .debug_str	00000000 
0002b7b9 l       .debug_str	00000000 
0002b7c3 l       .debug_str	00000000 
0002b806 l       .debug_str	00000000 
0002b810 l       .debug_str	00000000 
0002b853 l       .debug_str	00000000 
0002b85d l       .debug_str	00000000 
0002b8a0 l       .debug_str	00000000 
0002b8ab l       .debug_str	00000000 
0002b8f0 l       .debug_str	00000000 
0002b8fb l       .debug_str	00000000 
0002b940 l       .debug_str	00000000 
0002b946 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002bf7b l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
0002b953 l       .debug_str	00000000 
0002b963 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
000119cc l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d7d5 l       .debug_str	00000000 
0005933f l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00013804 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
000141d4 l       .debug_str	00000000 
000259e0 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
0002b9a9 l       .debug_str	00000000 
00023722 l       .debug_str	00000000 
00057792 l       .debug_str	00000000 
0002c37f l       .debug_str	00000000 
000119d4 l       .debug_str	00000000 
000573a4 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00052bfa l       .debug_str	00000000 
0002b9bb l       .debug_str	00000000 
0002b9c0 l       .debug_str	00000000 
00058d1a l       .debug_str	00000000 
0002b9cb l       .debug_str	00000000 
00000326 l       .debug_str	00000000 
0002b9d5 l       .debug_str	00000000 
0002c049 l       .debug_str	00000000 
0002b9df l       .debug_str	00000000 
00016beb l       .debug_str	00000000 
0002c089 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0002c3c2 l       .debug_str	00000000 
000119de l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0002b9ed l       .debug_str	00000000 
0002ba61 l       .debug_str	00000000 
0002c2a3 l       .debug_str	00000000 
0002ba73 l       .debug_str	00000000 
0002c08f l       .debug_str	00000000 
0002c069 l       .debug_str	00000000 
0001567e l       .debug_str	00000000 
0002c2e6 l       .debug_str	00000000 
0002ba78 l       .debug_str	00000000 
0002baec l       .debug_str	00000000 
0002c3fb l       .debug_str	00000000 
0002c442 l       .debug_str	00000000 
0002c348 l       .debug_str	00000000 
0002bb04 l       .debug_str	00000000 
0003bbd7 l       .debug_str	00000000 
000312f6 l       .debug_str	00000000 
00052ba9 l       .debug_str	00000000 
0002c45d l       .debug_str	00000000 
0002c317 l       .debug_str	00000000 
0002bb7c l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000569b0 l       .debug_str	00000000 
00022ef5 l       .debug_str	00000000 
0002bbd4 l       .debug_str	00000000 
0002bbd9 l       .debug_str	00000000 
0002bbeb l       .debug_str	00000000 
0001cf4c l       .debug_str	00000000 
0002cadb l       .debug_str	00000000 
0002bbf4 l       .debug_str	00000000 
0001b091 l       .debug_str	00000000 
0002bc1c l       .debug_str	00000000 
0002bc2c l       .debug_str	00000000 
0005504c l       .debug_str	00000000 
0002bc85 l       .debug_str	00000000 
0002bc8d l       .debug_str	00000000 
00014164 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000130c3 l       .debug_str	00000000 
0002bc95 l       .debug_str	00000000 
00016e18 l       .debug_str	00000000 
0002bca1 l       .debug_str	00000000 
0002bcab l       .debug_str	00000000 
0002bcb8 l       .debug_str	00000000 
0002bcc5 l       .debug_str	00000000 
0002bcda l       .debug_str	00000000 
0002bcee l       .debug_str	00000000 
0002bd04 l       .debug_str	00000000 
0002bd0c l       .debug_str	00000000 
0002bd19 l       .debug_str	00000000 
0002bd26 l       .debug_str	00000000 
0002c62f l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0002bd33 l       .debug_str	00000000 
0002bd60 l       .debug_str	00000000 
0002bd8f l       .debug_str	00000000 
0002bdb6 l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002bdd5 l       .debug_str	00000000 
0002bdea l       .debug_str	00000000 
0001aab3 l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00052808 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
0002bdf4 l       .debug_str	00000000 
0002be19 l       .debug_str	00000000 
0002bdff l       .debug_str	00000000 
0002be98 l       .debug_str	00000000 
0002be29 l       .debug_str	00000000 
0002be2f l       .debug_str	00000000 
0002be3e l       .debug_str	00000000 
0002be49 l       .debug_str	00000000 
0002be7e l       .debug_str	00000000 
0002bea3 l       .debug_str	00000000 
0002beb3 l       .debug_str	00000000 
00053412 l       .debug_str	00000000 
0002bee5 l       .debug_str	00000000 
0002beea l       .debug_str	00000000 
000542b5 l       .debug_str	00000000 
0002d74f l       .debug_str	00000000 
0002d748 l       .debug_str	00000000 
00014093 l       .debug_str	00000000 
0002d776 l       .debug_str	00000000 
0002d7aa l       .debug_str	00000000 
0002bef0 l       .debug_str	00000000 
00005940 l       .debug_str	00000000 
0002bf2e l       .debug_str	00000000 
0002d753 l       .debug_str	00000000 
0002d7a0 l       .debug_str	00000000 
0002bf0f l       .debug_str	00000000 
0002befc l       .debug_str	00000000 
0002bf15 l       .debug_str	00000000 
00022ef4 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
0000bca1 l       .debug_str	00000000 
0002bf3d l       .debug_str	00000000 
0002bf45 l       .debug_str	00000000 
0003740e l       .debug_str	00000000 
0002bf4b l       .debug_str	00000000 
00044f39 l       .debug_str	00000000 
0002bf72 l       .debug_str	00000000 
0002bf56 l       .debug_str	00000000 
0000eb55 l       .debug_str	00000000 
0002bf7a l       .debug_str	00000000 
0002bc26 l       .debug_str	00000000 
00023888 l       .debug_str	00000000 
00025940 l       .debug_str	00000000 
0002bf7f l       .debug_str	00000000 
0002bfa3 l       .debug_str	00000000 
0002bfa9 l       .debug_str	00000000 
0002bfb1 l       .debug_str	00000000 
000475a4 l       .debug_str	00000000 
0003700a l       .debug_str	00000000 
0002bfb6 l       .debug_str	00000000 
0002bfde l       .debug_str	00000000 
0002bfc0 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00019768 l       .debug_str	00000000 
00016c8b l       .debug_str	00000000 
0001ff92 l       .debug_str	00000000 
00023890 l       .debug_str	00000000 
0002389d l       .debug_str	00000000 
000238a6 l       .debug_str	00000000 
00051b70 l       .debug_str	00000000 
0002bff2 l       .debug_str	00000000 
0002bfe6 l       .debug_str	00000000 
00013638 l       .debug_str	00000000 
0002bfff l       .debug_str	00000000 
0002c00b l       .debug_str	00000000 
0002c02e l       .debug_str	00000000 
0002c018 l       .debug_str	00000000 
0002c03c l       .debug_str	00000000 
0002c05c l       .debug_str	00000000 
0002c07c l       .debug_str	00000000 
0002c097 l       .debug_str	00000000 
0002c0b2 l       .debug_str	00000000 
0002c0b8 l       .debug_str	00000000 
0002c0bc l       .debug_str	00000000 
0002c0cd l       .debug_str	00000000 
0002c0c0 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
0002c0e2 l       .debug_str	00000000 
0002c0dd l       .debug_str	00000000 
0002c0f5 l       .debug_str	00000000 
0002c141 l       .debug_str	00000000 
0002c11a l       .debug_str	00000000 
0002c131 l       .debug_str	00000000 
0002c15b l       .debug_str	00000000 
0002c14c l       .debug_str	00000000 
0002c1a3 l       .debug_str	00000000 
0002c183 l       .debug_str	00000000 
0002c1fc l       .debug_str	00000000 
0002c1dc l       .debug_str	00000000 
00051b62 l       .debug_str	00000000 
0002c253 l       .debug_str	00000000 
0002c258 l       .debug_str	00000000 
0002c25e l       .debug_str	00000000 
0002c281 l       .debug_str	00000000 
0002c263 l       .debug_str	00000000 
0002c28c l       .debug_str	00000000 
0002c2d7 l       .debug_str	00000000 
0002c308 l       .debug_str	00000000 
0002c339 l       .debug_str	00000000 
0002c368 l       .debug_str	00000000 
0002c3b3 l       .debug_str	00000000 
0002c3e4 l       .debug_str	00000000 
0001aeb0 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00031536 l       .debug_str	00000000 
00054c1f l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00059259 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00052891 l       .debug_str	00000000 
00052792 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00052dda l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001feb6 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00020033 l       .debug_str	00000000 
00020027 l       .debug_str	00000000 
0001fe64 l       .debug_str	00000000 
0002c435 l       .debug_str	00000000 
0002c44e l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
0002c47c l       .debug_str	00000000 
0002c47b l       .debug_str	00000000 
0002c490 l       .debug_str	00000000 
0002c481 l       .debug_str	00000000 
00052883 l       .debug_str	00000000 
00051b50 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
0002c4bd l       .debug_str	00000000 
0002c4af l       .debug_str	00000000 
0002c4ae l       .debug_str	00000000 
0001ff9b l       .debug_str	00000000 
00019772 l       .debug_str	00000000 
0005968f l       .debug_str	00000000 
0002c4c6 l       .debug_str	00000000 
0002c4ca l       .debug_str	00000000 
0002c4cd l       .debug_str	00000000 
0005817f l       .debug_str	00000000 
00019756 l       .debug_str	00000000 
0002c4d0 l       .debug_str	00000000 
0001aa2b l       .debug_str	00000000 
0002c4d4 l       .debug_str	00000000 
0002c4d3 l       .debug_str	00000000 
0002c4d9 l       .debug_str	00000000 
0002c5ab l       .debug_str	00000000 
00000238 l       .debug_str	00000000 
0002c4f7 l       .debug_str	00000000 
0002c4e5 l       .debug_str	00000000 
0002c51c l       .debug_str	00000000 
0002c5e4 l       .debug_str	00000000 
0002c53a l       .debug_str	00000000 
0002c528 l       .debug_str	00000000 
0002c55f l       .debug_str	00000000 
0002c578 l       .debug_str	00000000 
0002c566 l       .debug_str	00000000 
0002c584 l       .debug_str	00000000 
0002c59c l       .debug_str	00000000 
0002c5d5 l       .debug_str	00000000 
0001aa31 l       .debug_str	00000000 
0002c60e l       .debug_str	00000000 
0002c61b l       .debug_str	00000000 
0002c61a l       .debug_str	00000000 
0002c623 l       .debug_str	00000000 
0002c650 l       .debug_str	00000000 
0002c63b l       .debug_str	00000000 
0002c66d l       .debug_str	00000000 
0002c679 l       .debug_str	00000000 
0002c723 l       .debug_str	00000000 
0002c685 l       .debug_str	00000000 
0002c68c l       .debug_str	00000000 
0002c695 l       .debug_str	00000000 
0002c6a3 l       .debug_str	00000000 
0002c6aa l       .debug_str	00000000 
0002c6b2 l       .debug_str	00000000 
0002c6b9 l       .debug_str	00000000 
0002c6ff l       .debug_str	00000000 
0002c6da l       .debug_str	00000000 
0002c6c5 l       .debug_str	00000000 
0002c6ea l       .debug_str	00000000 
0002c70e l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
0002c72f l       .debug_str	00000000 
00025953 l       .debug_str	00000000 
00056069 l       .debug_str	00000000 
0001fdd7 l       .debug_str	00000000 
0001fdc0 l       .debug_str	00000000 
0002c749 l       .debug_str	00000000 
0002c76c l       .debug_str	00000000 
0002c755 l       .debug_str	00000000 
0002c7b6 l       .debug_str	00000000 
0002c7aa l       .debug_str	00000000 
0002bc21 l       .debug_str	00000000 
0002c7d3 l       .debug_str	00000000 
0002c7bc l       .debug_str	00000000 
0002c81c l       .debug_str	00000000 
0002c844 l       .debug_str	00000000 
0002c82d l       .debug_str	00000000 
00054c0d l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00052c98 l       .debug_str	00000000 
0002c8f3 l       .debug_str	00000000 
0002c8d5 l       .debug_str	00000000 
0002c9e9 l       .debug_str	00000000 
0002c9c9 l       .debug_str	00000000 
0002ca5c l       .debug_str	00000000 
0002ca3c l       .debug_str	00000000 
00043062 l       .debug_str	00000000 
0002caaf l       .debug_str	00000000 
0002cabc l       .debug_str	00000000 
0002cac7 l       .debug_str	00000000 
0002cadd l       .debug_str	00000000 
0002cae7 l       .debug_str	00000000 
0002cb3d l       .debug_str	00000000 
0002cb4f l       .debug_str	00000000 
0002cba1 l       .debug_str	00000000 
0002cbb5 l       .debug_str	00000000 
0002cc09 l       .debug_str	00000000 
0002cc10 l       .debug_str	00000000 
0002cc56 l       .debug_str	00000000 
0002cc65 l       .debug_str	00000000 
0002ccbf l       .debug_str	00000000 
0002cd15 l       .debug_str	00000000 
0002cd6d l       .debug_str	00000000 
0002cdb7 l       .debug_str	00000000 
0002cdbd l       .debug_str	00000000 
0002ce0d l       .debug_str	00000000 
0002ce59 l       .debug_str	00000000 
0002cea7 l       .debug_str	00000000 
000259f9 l       .debug_str	00000000 
0002cee7 l       .debug_str	00000000 
0002cf34 l       .debug_str	00000000 
0002cf7d l       .debug_str	00000000 
0002cfc8 l       .debug_str	00000000 
0002d005 l       .debug_str	00000000 
0002d015 l       .debug_str	00000000 
0002d070 l       .debug_str	00000000 
0002d0c7 l       .debug_str	00000000 
0002d120 l       .debug_str	00000000 
0003a3f6 l       .debug_str	00000000 
0002d16b l       .debug_str	00000000 
0002d1bf l       .debug_str	00000000 
0002d20f l       .debug_str	00000000 
0002d261 l       .debug_str	00000000 
00052704 l       .debug_str	00000000 
0002d2a5 l       .debug_str	00000000 
0002d2f1 l       .debug_str	00000000 
0002d339 l       .debug_str	00000000 
0002d383 l       .debug_str	00000000 
0003a22c l       .debug_str	00000000 
0002d3bf l       .debug_str	00000000 
0002d413 l       .debug_str	00000000 
0002d463 l       .debug_str	00000000 
0002d4b5 l       .debug_str	00000000 
0002d4f9 l       .debug_str	00000000 
0002d505 l       .debug_str	00000000 
0002d55c l       .debug_str	00000000 
0002d5af l       .debug_str	00000000 
0002d604 l       .debug_str	00000000 
0002d64b l       .debug_str	00000000 
0002d657 l       .debug_str	00000000 
0002d66e l       .debug_str	00000000 
0002d667 l       .debug_str	00000000 
0002d680 l       .debug_str	00000000 
0002d695 l       .debug_str	00000000 
0002d6e6 l       .debug_str	00000000 
0002d6f6 l       .debug_str	00000000 
0002d747 l       .debug_str	00000000 
0002d752 l       .debug_str	00000000 
0002d775 l       .debug_str	00000000 
0002d7a9 l       .debug_str	00000000 
0002d7bf l       .debug_str	00000000 
0002d7ed l       .debug_str	00000000 
0002d7e1 l       .debug_str	00000000 
0002d7fb l       .debug_str	00000000 
0002d7fa l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0001975e l       .debug_str	00000000 
00025966 l       .debug_str	00000000 
00025965 l       .debug_str	00000000 
0002596b l       .debug_str	00000000 
0002596a l       .debug_str	00000000 
0002d7fe l       .debug_str	00000000 
0002d83e l       .debug_str	00000000 
0002d846 l       .debug_str	00000000 
0002d886 l       .debug_str	00000000 
0002d890 l       .debug_str	00000000 
00051c9c l       .debug_str	00000000 
00056807 l       .debug_str	00000000 
0002d8cc l       .debug_str	00000000 
0001bc1f l       .debug_str	00000000 
000306ec l       .debug_str	00000000 
0002d8f4 l       .debug_str	00000000 
0001bad7 l       .debug_str	00000000 
0002d91d l       .debug_str	00000000 
0002d942 l       .debug_str	00000000 
0003e87a l       .debug_str	00000000 
00052cf2 l       .debug_str	00000000 
0002d949 l       .debug_str	00000000 
0002d952 l       .debug_str	00000000 
0002d98b l       .debug_str	00000000 
000133b6 l       .debug_str	00000000 
0002d993 l       .debug_str	00000000 
00014f2c l       .debug_str	00000000 
0002da28 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
0002da73 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
0002daba l       .debug_str	00000000 
0001210a l       .debug_str	00000000 
0002db0f l       .debug_str	00000000 
0002db4c l       .debug_str	00000000 
00014083 l       .debug_str	00000000 
0002db57 l       .debug_str	00000000 
00014e36 l       .debug_str	00000000 
0002dbac l       .debug_str	00000000 
00014dc6 l       .debug_str	00000000 
0002dbfe l       .debug_str	00000000 
0000acdc l       .debug_str	00000000 
0002dc45 l       .debug_str	00000000 
0000acd7 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011a96 l       .debug_str	00000000 
0002e64f l       .debug_str	00000000 
0002dccb l       .debug_str	00000000 
0002dd0c l       .debug_str	00000000 
0002dd2f l       .debug_str	00000000 
0002dd6a l       .debug_str	00000000 
0002dd74 l       .debug_str	00000000 
0002ddfe l       .debug_str	00000000 
0002de30 l       .debug_str	00000000 
00011b34 l       .debug_str	00000000 
0001407b l       .debug_str	00000000 
0002dea4 l       .debug_str	00000000 
0002def5 l       .debug_str	00000000 
000141af l       .debug_str	00000000 
0002df37 l       .debug_str	00000000 
0002dfbe l       .debug_str	00000000 
0002dfcd l       .debug_str	00000000 
0002e057 l       .debug_str	00000000 
0002e0d3 l       .debug_str	00000000 
0002e103 l       .debug_str	00000000 
0002e13e l       .debug_str	00000000 
0002e148 l       .debug_str	00000000 
00003b0f l       .debug_str	00000000 
0002e1bf l       .debug_str	00000000 
0002e214 l       .debug_str	00000000 
0002e21d l       .debug_str	00000000 
0002e26e l       .debug_str	00000000 
000058be l       .debug_str	00000000 
0002e27a l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0002e287 l       .debug_str	00000000 
0002e290 l       .debug_str	00000000 
0002e2a6 l       .debug_str	00000000 
0002e2b3 l       .debug_str	00000000 
0002e2f8 l       .debug_str	00000000 
0002e30c l       .debug_str	00000000 
0002e361 l       .debug_str	00000000 
0002e36a l       .debug_str	00000000 
00045519 l       .debug_str	00000000 
0002e3a2 l       .debug_str	00000000 
0002e3df l       .debug_str	00000000 
0002e3ea l       .debug_str	00000000 
0002e46d l       .debug_str	00000000 
0002e478 l       .debug_str	00000000 
0002e4fe l       .debug_str	00000000 
0002e573 l       .debug_str	00000000 
0002e59f l       .debug_str	00000000 
0002e628 l       .debug_str	00000000 
0002e637 l       .debug_str	00000000 
0002e644 l       .debug_str	00000000 
0002e658 l       .debug_str	00000000 
0002e6ae l       .debug_str	00000000 
0002e71d l       .debug_str	00000000 
0002e79d l       .debug_str	00000000 
0002e80b l       .debug_str	00000000 
0002e896 l       .debug_str	00000000 
0002e90b l       .debug_str	00000000 
0002e94b l       .debug_str	00000000 
0002e9ce l       .debug_str	00000000 
0002ea0f l       .debug_str	00000000 
00042f24 l       .debug_str	00000000 
00046a3e l       .debug_str	00000000 
0002ea74 l       .debug_str	00000000 
0002eb23 l       .debug_str	00000000 
0002eb6e l       .debug_str	00000000 
000150b1 l       .debug_str	00000000 
0002ec17 l       .debug_str	00000000 
0002ec93 l       .debug_str	00000000 
00013f39 l       .debug_str	00000000 
0002ecb8 l       .debug_str	00000000 
0000c067 l       .debug_str	00000000 
0002ed05 l       .debug_str	00000000 
00014629 l       .debug_str	00000000 
0002ed58 l       .debug_str	00000000 
0002ed93 l       .debug_str	00000000 
0002ed9e l       .debug_str	00000000 
0001a6cf l       .debug_str	00000000 
0002ee2a l       .debug_str	00000000 
00014281 l       .debug_str	00000000 
0002eead l       .debug_str	00000000 
0002ef35 l       .debug_str	00000000 
00020b40 l       .debug_str	00000000 
0002efaa l       .debug_str	00000000 
0002f030 l       .debug_str	00000000 
000155b8 l       .debug_str	00000000 
0002f0a5 l       .debug_str	00000000 
0000b810 l       .debug_str	00000000 
0002f108 l       .debug_str	00000000 
0000ad61 l       .debug_str	00000000 
0002f16a l       .debug_str	00000000 
0000aa4d l       .debug_str	00000000 
0002f1b0 l       .debug_str	00000000 
0002f1f8 l       .debug_str	00000000 
0002f202 l       .debug_str	00000000 
0002f243 l       .debug_str	00000000 
0002f25d l       .debug_str	00000000 
00025a1e l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
0002f263 l       .debug_str	00000000 
0002f26c l       .debug_str	00000000 
0002f2d1 l       .debug_str	00000000 
0002f2e0 l       .debug_str	00000000 
0002f322 l       .debug_str	00000000 
0002f32c l       .debug_str	00000000 
0002f391 l       .debug_str	00000000 
0002f3d3 l       .debug_str	00000000 
0002f41d l       .debug_str	00000000 
0002f42c l       .debug_str	00000000 
0002f462 l       .debug_str	00000000 
0002f46b l       .debug_str	00000000 
00017512 l       .debug_str	00000000 
0002f475 l       .debug_str	00000000 
0002f478 l       .debug_str	00000000 
0002f4b0 l       .debug_str	00000000 
0002f4ba l       .debug_str	00000000 
0002f4fe l       .debug_str	00000000 
0002f514 l       .debug_str	00000000 
0002f55d l       .debug_str	00000000 
000141f6 l       .debug_str	00000000 
00025a09 l       .debug_str	00000000 
0002f5a2 l       .debug_str	00000000 
0002f5eb l       .debug_str	00000000 
0002f5f9 l       .debug_str	00000000 
0002f641 l       .debug_str	00000000 
000240d7 l       .debug_str	00000000 
0002f68b l       .debug_str	00000000 
00038e63 l       .debug_str	00000000 
0002f723 l       .debug_str	00000000 
00012f2e l       .debug_str	00000000 
0002f7bd l       .debug_str	00000000 
000245c7 l       .debug_str	00000000 
0002f82f l       .debug_str	00000000 
000242fa l       .debug_str	00000000 
0002f8d2 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
0002f904 l       .debug_str	00000000 
0002f94b l       .debug_str	00000000 
0002f959 l       .debug_str	00000000 
0002f963 l       .debug_str	00000000 
0002f9b1 l       .debug_str	00000000 
0002f9c1 l       .debug_str	00000000 
0002fa0c l       .debug_str	00000000 
0002fa1a l       .debug_str	00000000 
0002faa8 l       .debug_str	00000000 
0002fab7 l       .debug_str	00000000 
0000c0b6 l       .debug_str	00000000 
0002fb00 l       .debug_str	00000000 
0000c05f l       .debug_str	00000000 
0002fb45 l       .debug_str	00000000 
0002fb7f l       .debug_str	00000000 
0002fb88 l       .debug_str	00000000 
0002fbd4 l       .debug_str	00000000 
0002fbec l       .debug_str	00000000 
0002fc4e l       .debug_str	00000000 
0000bfaf l       .debug_str	00000000 
0002fc83 l       .debug_str	00000000 
0002fcab l       .debug_str	00000000 
0002fce3 l       .debug_str	00000000 
0002fd0c l       .debug_str	00000000 
0002fd17 l       .debug_str	00000000 
0001ae2e l       .debug_str	00000000 
0002fd3c l       .debug_str	00000000 
0002fdcb l       .debug_str	00000000 
0002fe02 l       .debug_str	00000000 
0002fe88 l       .debug_str	00000000 
0002fed6 l       .debug_str	00000000 
0002fedf l       .debug_str	00000000 
0002ff65 l       .debug_str	00000000 
0002ff78 l       .debug_str	00000000 
00030001 l       .debug_str	00000000 
0003005d l       .debug_str	00000000 
0003009f l       .debug_str	00000000 
00030151 l       .debug_str	00000000 
00030190 l       .debug_str	00000000 
00030235 l       .debug_str	00000000 
000302c9 l       .debug_str	00000000 
000302ef l       .debug_str	00000000 
0003036b l       .debug_str	00000000 
000303a6 l       .debug_str	00000000 
000303b3 l       .debug_str	00000000 
000303ec l       .debug_str	00000000 
00030404 l       .debug_str	00000000 
00030444 l       .debug_str	00000000 
0002810a l       .debug_str	00000000 
00030450 l       .debug_str	00000000 
000304ad l       .debug_str	00000000 
0003050a l       .debug_str	00000000 
000305b7 l       .debug_str	00000000 
00030614 l       .debug_str	00000000 
00016998 l       .debug_str	00000000 
00030681 l       .debug_str	00000000 
000306e5 l       .debug_str	00000000 
000306f0 l       .debug_str	00000000 
00030720 l       .debug_str	00000000 
0003074c l       .debug_str	00000000 
000307b8 l       .debug_str	00000000 
000307e8 l       .debug_str	00000000 
00030824 l       .debug_str	00000000 
0003086e l       .debug_str	00000000 
0003087e l       .debug_str	00000000 
000308b3 l       .debug_str	00000000 
000308f8 l       .debug_str	00000000 
00030903 l       .debug_str	00000000 
00030943 l       .debug_str	00000000 
00030951 l       .debug_str	00000000 
000309dd l       .debug_str	00000000 
00030a59 l       .debug_str	00000000 
00030a79 l       .debug_str	00000000 
00030ad3 l       .debug_str	00000000 
00030ae0 l       .debug_str	00000000 
00030b19 l       .debug_str	00000000 
00030b21 l       .debug_str	00000000 
00030b76 l       .debug_str	00000000 
00030bc8 l       .debug_str	00000000 
0002faad l       .debug_str	00000000 
00030c0f l       .debug_str	00000000 
00030c83 l       .debug_str	00000000 
00030cc7 l       .debug_str	00000000 
00030d13 l       .debug_str	00000000 
00030d52 l       .debug_str	00000000 
00030d78 l       .debug_str	00000000 
00030d8a l       .debug_str	00000000 
00030d94 l       .debug_str	00000000 
00030dd6 l       .debug_str	00000000 
00003a62 l       .debug_str	00000000 
00030e5d l       .debug_str	00000000 
0001208b l       .debug_str	00000000 
00030ed9 l       .debug_str	00000000 
00030f50 l       .debug_str	00000000 
00030f9e l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
0003102e l       .debug_str	00000000 
0003106a l       .debug_str	00000000 
00031077 l       .debug_str	00000000 
000310bd l       .debug_str	00000000 
000310ca l       .debug_str	00000000 
00031e10 l       .debug_str	00000000 
000310fc l       .debug_str	00000000 
0003114c l       .debug_str	00000000 
00031163 l       .debug_str	00000000 
000311ed l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
00031269 l       .debug_str	00000000 
0003127d l       .debug_str	00000000 
000312da l       .debug_str	00000000 
000312e9 l       .debug_str	00000000 
000312fa l       .debug_str	00000000 
00031354 l       .debug_str	00000000 
00031363 l       .debug_str	00000000 
000313ec l       .debug_str	00000000 
000313fa l       .debug_str	00000000 
00031450 l       .debug_str	00000000 
000314a4 l       .debug_str	00000000 
0003151d l       .debug_str	00000000 
00031535 l       .debug_str	00000000 
0003153f l       .debug_str	00000000 
000315d6 l       .debug_str	00000000 
000315f0 l       .debug_str	00000000 
0001da3e l       .debug_str	00000000 
00031629 l       .debug_str	00000000 
00013d37 l       .debug_str	00000000 
0003168e l       .debug_str	00000000 
00031725 l       .debug_str	00000000 
00031729 l       .debug_str	00000000 
00031a1e l       .debug_str	00000000 
0003172e l       .debug_str	00000000 
000576cf l       .debug_str	00000000 
00013f3f l       .debug_str	00000000 
00031760 l       .debug_str	00000000 
00019c66 l       .debug_str	00000000 
0003179e l       .debug_str	00000000 
0000a9f3 l       .debug_str	00000000 
000317f1 l       .debug_str	00000000 
0003187d l       .debug_str	00000000 
000318f9 l       .debug_str	00000000 
00031918 l       .debug_str	00000000 
00031963 l       .debug_str	00000000 
00031970 l       .debug_str	00000000 
000319e4 l       .debug_str	00000000 
00035d22 l       .debug_str	00000000 
0004745d l       .debug_str	00000000 
00031a03 l       .debug_str	00000000 
00031a23 l       .debug_str	00000000 
00031a3f l       .debug_str	00000000 
00031a49 l       .debug_str	00000000 
00031ad5 l       .debug_str	00000000 
00031b51 l       .debug_str	00000000 
00031b82 l       .debug_str	00000000 
00031c05 l       .debug_str	00000000 
00031c25 l       .debug_str	00000000 
00031cab l       .debug_str	00000000 
00031d20 l       .debug_str	00000000 
000281a5 l       .debug_str	00000000 
00054c9b l       .debug_str	00000000 
00031d61 l       .debug_str	00000000 
0002468d l       .debug_str	00000000 
00031dac l       .debug_str	00000000 
00031e08 l       .debug_str	00000000 
00031e14 l       .debug_str	00000000 
00031e5d l       .debug_str	00000000 
00031e6d l       .debug_str	00000000 
00031eb2 l       .debug_str	00000000 
00031efb l       .debug_str	00000000 
00031f40 l       .debug_str	00000000 
00031f9c l       .debug_str	00000000 
00031fe7 l       .debug_str	00000000 
0003202e l       .debug_str	00000000 
0003208c l       .debug_str	00000000 
000320d7 l       .debug_str	00000000 
0003211e l       .debug_str	00000000 
0003217c l       .debug_str	00000000 
000321c7 l       .debug_str	00000000 
0003220e l       .debug_str	00000000 
0003226c l       .debug_str	00000000 
000322b5 l       .debug_str	00000000 
000322fa l       .debug_str	00000000 
00032356 l       .debug_str	00000000 
0003239f l       .debug_str	00000000 
000323e4 l       .debug_str	00000000 
00032440 l       .debug_str	00000000 
0003248a l       .debug_str	00000000 
000324d0 l       .debug_str	00000000 
0003252d l       .debug_str	00000000 
00032577 l       .debug_str	00000000 
000325bd l       .debug_str	00000000 
0003261a l       .debug_str	00000000 
00032675 l       .debug_str	00000000 
000326bd l       .debug_str	00000000 
00032701 l       .debug_str	00000000 
00032749 l       .debug_str	00000000 
0003278d l       .debug_str	00000000 
000327e8 l       .debug_str	00000000 
00032831 l       .debug_str	00000000 
00032876 l       .debug_str	00000000 
000328d2 l       .debug_str	00000000 
0003291b l       .debug_str	00000000 
00032960 l       .debug_str	00000000 
000329bc l       .debug_str	00000000 
00032a05 l       .debug_str	00000000 
00032a4a l       .debug_str	00000000 
00032aa6 l       .debug_str	00000000 
00032af0 l       .debug_str	00000000 
00032b36 l       .debug_str	00000000 
00032b93 l       .debug_str	00000000 
00032bdd l       .debug_str	00000000 
00032c23 l       .debug_str	00000000 
00032c80 l       .debug_str	00000000 
00032cca l       .debug_str	00000000 
00032d10 l       .debug_str	00000000 
00032d6d l       .debug_str	00000000 
00032dc8 l       .debug_str	00000000 
00032e10 l       .debug_str	00000000 
00032e54 l       .debug_str	00000000 
00032e9c l       .debug_str	00000000 
00032ee0 l       .debug_str	00000000 
00032f3b l       .debug_str	00000000 
00032f96 l       .debug_str	00000000 
00032fde l       .debug_str	00000000 
00033022 l       .debug_str	00000000 
0003306b l       .debug_str	00000000 
000330b0 l       .debug_str	00000000 
0003310c l       .debug_str	00000000 
00033168 l       .debug_str	00000000 
000331b1 l       .debug_str	00000000 
000331f6 l       .debug_str	00000000 
00033252 l       .debug_str	00000000 
0003329b l       .debug_str	00000000 
000332e0 l       .debug_str	00000000 
0003333c l       .debug_str	00000000 
00033385 l       .debug_str	00000000 
000333ca l       .debug_str	00000000 
000241ad l       .debug_str	00000000 
00033426 l       .debug_str	00000000 
00033465 l       .debug_str	00000000 
0003349a l       .debug_str	00000000 
0000594d l       .debug_str	00000000 
0001408d l       .debug_str	00000000 
000141dd l       .debug_str	00000000 
000334a4 l       .debug_str	00000000 
00016199 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
000334de l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00033570 l       .debug_str	00000000 
000156c5 l       .debug_str	00000000 
000335a9 l       .debug_str	00000000 
00014bac l       .debug_str	00000000 
000335d0 l       .debug_str	00000000 
00014af8 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0003360a l       .debug_str	00000000 
00014877 l       .debug_str	00000000 
00033630 l       .debug_str	00000000 
000145c8 l       .debug_str	00000000 
0003368a l       .debug_str	00000000 
00014fd2 l       .debug_str	00000000 
00033724 l       .debug_str	00000000 
000141ec l       .debug_str	00000000 
000337ad l       .debug_str	00000000 
00033854 l       .debug_str	00000000 
0003388d l       .debug_str	00000000 
00033902 l       .debug_str	00000000 
0003392b l       .debug_str	00000000 
00027251 l       .debug_str	00000000 
00033960 l       .debug_str	00000000 
0003399c l       .debug_str	00000000 
000339ad l       .debug_str	00000000 
000339e6 l       .debug_str	00000000 
000135d7 l       .debug_str	00000000 
000339f3 l       .debug_str	00000000 
00033a02 l       .debug_str	00000000 
0002f2d9 l       .debug_str	00000000 
00033a4b l       .debug_str	00000000 
00033a7e l       .debug_str	00000000 
00033a8b l       .debug_str	00000000 
0005898e l       .debug_str	00000000 
00033ad6 l       .debug_str	00000000 
00033b2e l       .debug_str	00000000 
00033b43 l       .debug_str	00000000 
00033b79 l       .debug_str	00000000 
00033b84 l       .debug_str	00000000 
0002735f l       .debug_str	00000000 
00033be3 l       .debug_str	00000000 
00033c56 l       .debug_str	00000000 
00033cbd l       .debug_str	00000000 
00033cdd l       .debug_str	00000000 
00033d1c l       .debug_str	00000000 
00033d3b l       .debug_str	00000000 
00000ad8 l       .debug_str	00000000 
00033dae l       .debug_str	00000000 
00033e2b l       .debug_str	00000000 
00033e90 l       .debug_str	00000000 
00033ef0 l       .debug_str	00000000 
00033f63 l       .debug_str	00000000 
00033fe0 l       .debug_str	00000000 
0001632e l       .debug_str	00000000 
00034058 l       .debug_str	00000000 
000340cd l       .debug_str	00000000 
00034147 l       .debug_str	00000000 
00012f6e l       .debug_str	00000000 
00012f79 l       .debug_str	00000000 
000341a7 l       .debug_str	00000000 
0005697c l       .debug_str	00000000 
000341e5 l       .debug_str	00000000 
00034227 l       .debug_str	00000000 
00034252 l       .debug_str	00000000 
00034293 l       .debug_str	00000000 
0003429d l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00057836 l       .debug_str	00000000 
0005211c l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
000342f9 l       .debug_str	00000000 
0001120f l       .debug_str	00000000 
00034335 l       .debug_str	00000000 
000111c0 l       .debug_str	00000000 
0003437c l       .debug_str	00000000 
000343da l       .debug_str	00000000 
0002bd09 l       .debug_str	00000000 
00034431 l       .debug_str	00000000 
0003448b l       .debug_str	00000000 
00034495 l       .debug_str	00000000 
000135a5 l       .debug_str	00000000 
000135aa l       .debug_str	00000000 
000344d8 l       .debug_str	00000000 
0003450e l       .debug_str	00000000 
0003451e l       .debug_str	00000000 
0003452d l       .debug_str	00000000 
00034538 l       .debug_str	00000000 
0002bdef l       .debug_str	00000000 
00034572 l       .debug_str	00000000 
000345bb l       .debug_str	00000000 
000261d2 l       .debug_str	00000000 
00034602 l       .debug_str	00000000 
0003463d l       .debug_str	00000000 
00034662 l       .debug_str	00000000 
000346ce l       .debug_str	00000000 
000346e1 l       .debug_str	00000000 
00034758 l       .debug_str	00000000 
00034763 l       .debug_str	00000000 
000347a0 l       .debug_str	00000000 
000347ab l       .debug_str	00000000 
0003482c l       .debug_str	00000000 
00034872 l       .debug_str	00000000 
00034899 l       .debug_str	00000000 
000348c8 l       .debug_str	00000000 
000348d9 l       .debug_str	00000000 
0001412f l       .debug_str	00000000 
00034935 l       .debug_str	00000000 
00034966 l       .debug_str	00000000 
00011e95 l       .debug_str	00000000 
000349ae l       .debug_str	00000000 
00020389 l       .debug_str	00000000 
000349ec l       .debug_str	00000000 
00034a30 l       .debug_str	00000000 
00034a83 l       .debug_str	00000000 
0003151e l       .debug_str	00000000 
00034afb l       .debug_str	00000000 
00034b4a l       .debug_str	00000000 
00034be0 l       .debug_str	00000000 
00034c24 l       .debug_str	00000000 
00038962 l       .debug_str	00000000 
00034c9c l       .debug_str	00000000 
00034ceb l       .debug_str	00000000 
00034d81 l       .debug_str	00000000 
00034d9b l       .debug_str	00000000 
00034dea l       .debug_str	00000000 
00034e23 l       .debug_str	00000000 
00034e3e l       .debug_str	00000000 
00015d50 l       .debug_str	00000000 
00034ea2 l       .debug_str	00000000 
0001565c l       .debug_str	00000000 
00034f1b l       .debug_str	00000000 
00022ee6 l       .debug_str	00000000 
00034f8c l       .debug_str	00000000 
00035022 l       .debug_str	00000000 
000350ba l       .debug_str	00000000 
0003512c l       .debug_str	00000000 
00035154 l       .debug_str	00000000 
0001b0db l       .debug_str	00000000 
0003520c l       .debug_str	00000000 
00024aeb l       .debug_str	00000000 
00035251 l       .debug_str	00000000 
00035307 l       .debug_str	00000000 
0003534c l       .debug_str	00000000 
00002b2a l       .debug_str	00000000 
0003538e l       .debug_str	00000000 
000353e9 l       .debug_str	00000000 
000353ee l       .debug_str	00000000 
00035447 l       .debug_str	00000000 
0003547b l       .debug_str	00000000 
0003548f l       .debug_str	00000000 
000354ca l       .debug_str	00000000 
0003550c l       .debug_str	00000000 
00035522 l       .debug_str	00000000 
0003558e l       .debug_str	00000000 
00012f72 l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
000355d0 l       .debug_str	00000000 
00035610 l       .debug_str	00000000 
0003566a l       .debug_str	00000000 
000356ac l       .debug_str	00000000 
00035707 l       .debug_str	00000000 
00035749 l       .debug_str	00000000 
00035754 l       .debug_str	00000000 
00035794 l       .debug_str	00000000 
0003579a l       .debug_str	00000000 
000357f4 l       .debug_str	00000000 
000357fd l       .debug_str	00000000 
0003583f l       .debug_str	00000000 
00035897 l       .debug_str	00000000 
000358d9 l       .debug_str	00000000 
00035932 l       .debug_str	00000000 
0003593c l       .debug_str	00000000 
00035944 l       .debug_str	00000000 
0003594d l       .debug_str	00000000 
00035940 l       .debug_str	00000000 
0003598f l       .debug_str	00000000 
000359e4 l       .debug_str	00000000 
00035a21 l       .debug_str	00000000 
00035a63 l       .debug_str	00000000 
00035aba l       .debug_str	00000000 
00035afc l       .debug_str	00000000 
00035b54 l       .debug_str	00000000 
00035b8c l       .debug_str	00000000 
00035b98 l       .debug_str	00000000 
00035bd5 l       .debug_str	00000000 
00035c37 l       .debug_str	00000000 
00035c78 l       .debug_str	00000000 
00035c81 l       .debug_str	00000000 
00035cdf l       .debug_str	00000000 
00035d18 l       .debug_str	00000000 
00035d27 l       .debug_str	00000000 
00035d66 l       .debug_str	00000000 
00035d7b l       .debug_str	00000000 
00035dc1 l       .debug_str	00000000 
00035dce l       .debug_str	00000000 
00035dd4 l       .debug_str	00000000 
00035e0d l       .debug_str	00000000 
00035e99 l       .debug_str	00000000 
00035ed5 l       .debug_str	00000000 
00051d0b l       .debug_str	00000000 
00035ee7 l       .debug_str	00000000 
00035f1f l       .debug_str	00000000 
00035f2b l       .debug_str	00000000 
00035f68 l       .debug_str	00000000 
00035fca l       .debug_str	00000000 
0003600b l       .debug_str	00000000 
00036069 l       .debug_str	00000000 
000360a3 l       .debug_str	00000000 
000360fd l       .debug_str	00000000 
00036146 l       .debug_str	00000000 
00036156 l       .debug_str	00000000 
0003618f l       .debug_str	00000000 
00036211 l       .debug_str	00000000 
0003624b l       .debug_str	00000000 
000362a5 l       .debug_str	00000000 
000362e0 l       .debug_str	00000000 
00036340 l       .debug_str	00000000 
0003637b l       .debug_str	00000000 
000363db l       .debug_str	00000000 
00036419 l       .debug_str	00000000 
00036477 l       .debug_str	00000000 
000364b5 l       .debug_str	00000000 
00036513 l       .debug_str	00000000 
0003655e l       .debug_str	00000000 
00036567 l       .debug_str	00000000 
000365b6 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
000365c2 l       .debug_str	00000000 
000365f3 l       .debug_str	00000000 
0003661e l       .debug_str	00000000 
0003666c l       .debug_str	00000000 
00014160 l       .debug_str	00000000 
00036673 l       .debug_str	00000000 
000366d8 l       .debug_str	00000000 
00036709 l       .debug_str	00000000 
00036711 l       .debug_str	00000000 
000147d4 l       .debug_str	00000000 
00036742 l       .debug_str	00000000 
0003679b l       .debug_str	00000000 
00036829 l       .debug_str	00000000 
00036875 l       .debug_str	00000000 
0003689a l       .debug_str	00000000 
000368b7 l       .debug_str	00000000 
000368e1 l       .debug_str	00000000 
0001b06e l       .debug_str	00000000 
0001b129 l       .debug_str	00000000 
0001b1a5 l       .debug_str	00000000 
00036903 l       .debug_str	00000000 
00036950 l       .debug_str	00000000 
00036995 l       .debug_str	00000000 
000369d4 l       .debug_str	00000000 
00036a20 l       .debug_str	00000000 
00036aaf l       .debug_str	00000000 
00036afc l       .debug_str	00000000 
00036b82 l       .debug_str	00000000 
00053c0d l       .debug_str	00000000 
00036ba7 l       .debug_str	00000000 
00036bd1 l       .debug_str	00000000 
00036bda l       .debug_str	00000000 
00036c10 l       .debug_str	00000000 
00036c19 l       .debug_str	00000000 
00036ca7 l       .debug_str	00000000 
00036ced l       .debug_str	00000000 
00036d0c l       .debug_str	00000000 
00036d23 l       .debug_str	00000000 
00036d47 l       .debug_str	00000000 
00036d63 l       .debug_str	00000000 
00036daa l       .debug_str	00000000 
00036def l       .debug_str	00000000 
00036e2e l       .debug_str	00000000 
00036e74 l       .debug_str	00000000 
00036f03 l       .debug_str	00000000 
00036f4a l       .debug_str	00000000 
00036fd0 l       .debug_str	00000000 
00037005 l       .debug_str	00000000 
0003700f l       .debug_str	00000000 
00052c26 l       .debug_str	00000000 
0003707a l       .debug_str	00000000 
000370af l       .debug_str	00000000 
000370b9 l       .debug_str	00000000 
000370ec l       .debug_str	00000000 
000370f4 l       .debug_str	00000000 
00037128 l       .debug_str	00000000 
0003713a l       .debug_str	00000000 
00037174 l       .debug_str	00000000 
00037192 l       .debug_str	00000000 
000371b8 l       .debug_str	00000000 
000371c3 l       .debug_str	00000000 
000371ec l       .debug_str	00000000 
000371fa l       .debug_str	00000000 
00037234 l       .debug_str	00000000 
0003726a l       .debug_str	00000000 
00037290 l       .debug_str	00000000 
000372b3 l       .debug_str	00000000 
000372dc l       .debug_str	00000000 
00037302 l       .debug_str	00000000 
00037340 l       .debug_str	00000000 
0003735a l       .debug_str	00000000 
00037398 l       .debug_str	00000000 
000373ca l       .debug_str	00000000 
000373d6 l       .debug_str	00000000 
000593a2 l       .debug_str	00000000 
0003740a l       .debug_str	00000000 
00037417 l       .debug_str	00000000 
00023f92 l       .debug_str	00000000 
00037449 l       .debug_str	00000000 
000374b3 l       .debug_str	00000000 
00037523 l       .debug_str	00000000 
0003758a l       .debug_str	00000000 
000375a7 l       .debug_str	00000000 
000375e6 l       .debug_str	00000000 
00037602 l       .debug_str	00000000 
00023f54 l       .debug_str	00000000 
00037630 l       .debug_str	00000000 
00024030 l       .debug_str	00000000 
00037665 l       .debug_str	00000000 
000376a1 l       .debug_str	00000000 
000376c7 l       .debug_str	00000000 
00037706 l       .debug_str	00000000 
00037716 l       .debug_str	00000000 
0003777a l       .debug_str	00000000 
000377b1 l       .debug_str	00000000 
000377c7 l       .debug_str	00000000 
00037816 l       .debug_str	00000000 
00037822 l       .debug_str	00000000 
000378f4 l       .debug_str	00000000 
00037869 l       .debug_str	00000000 
000378ef l       .debug_str	00000000 
00037913 l       .debug_str	00000000 
0003794e l       .debug_str	00000000 
0003795e l       .debug_str	00000000 
000592ca l       .debug_str	00000000 
0003799f l       .debug_str	00000000 
000379d9 l       .debug_str	00000000 
000379e8 l       .debug_str	00000000 
00037a21 l       .debug_str	00000000 
00037a2f l       .debug_str	00000000 
00037a68 l       .debug_str	00000000 
00037a76 l       .debug_str	00000000 
00037ac6 l       .debug_str	00000000 
00037ad3 l       .debug_str	00000000 
00037b49 l       .debug_str	00000000 
00037b54 l       .debug_str	00000000 
00037b66 l       .debug_str	00000000 
00037bb2 l       .debug_str	00000000 
00037bcf l       .debug_str	00000000 
00037c63 l       .debug_str	00000000 
00037cf9 l       .debug_str	00000000 
00037d6b l       .debug_str	00000000 
00037d91 l       .debug_str	00000000 
00037e30 l       .debug_str	00000000 
00037ea1 l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00037ee6 l       .debug_str	00000000 
00037f49 l       .debug_str	00000000 
00037f6c l       .debug_str	00000000 
00037fc0 l       .debug_str	00000000 
00037fd7 l       .debug_str	00000000 
00025aeb l       .debug_str	00000000 
00038024 l       .debug_str	00000000 
00038031 l       .debug_str	00000000 
0003806c l       .debug_str	00000000 
00038094 l       .debug_str	00000000 
000380f6 l       .debug_str	00000000 
00033b7e l       .debug_str	00000000 
0003815f l       .debug_str	00000000 
0003a98d l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00028434 l       .debug_str	00000000 
00028445 l       .debug_str	00000000 
000381ac l       .debug_str	00000000 
0000b32d l       .debug_str	00000000 
000381f7 l       .debug_str	00000000 
0003827a l       .debug_str	00000000 
000382aa l       .debug_str	00000000 
00038332 l       .debug_str	00000000 
000383a7 l       .debug_str	00000000 
000383fa l       .debug_str	00000000 
00038486 l       .debug_str	00000000 
000384be l       .debug_str	00000000 
00038513 l       .debug_str	00000000 
00038544 l       .debug_str	00000000 
00038596 l       .debug_str	00000000 
000385c4 l       .debug_str	00000000 
00038618 l       .debug_str	00000000 
0003863e l       .debug_str	00000000 
000202d5 l       .debug_str	00000000 
00038675 l       .debug_str	00000000 
000386c0 l       .debug_str	00000000 
000386dc l       .debug_str	00000000 
00038732 l       .debug_str	00000000 
0002041c l       .debug_str	00000000 
000387ab l       .debug_str	00000000 
000387fb l       .debug_str	00000000 
00038892 l       .debug_str	00000000 
000388e8 l       .debug_str	00000000 
00038961 l       .debug_str	00000000 
00038979 l       .debug_str	00000000 
00038a10 l       .debug_str	00000000 
00038a49 l       .debug_str	00000000 
00038c79 l       .debug_str	00000000 
00038a92 l       .debug_str	00000000 
0003795a l       .debug_str	00000000 
00038acf l       .debug_str	00000000 
00038b13 l       .debug_str	00000000 
00038b5e l       .debug_str	00000000 
00038b9e l       .debug_str	00000000 
00038bc8 l       .debug_str	00000000 
00038c11 l       .debug_str	00000000 
00038c20 l       .debug_str	00000000 
00038c71 l       .debug_str	00000000 
00038c88 l       .debug_str	00000000 
00042f28 l       .debug_str	00000000 
000544c7 l       .debug_str	00000000 
00038cef l       .debug_str	00000000 
00038d50 l       .debug_str	00000000 
00038d6f l       .debug_str	00000000 
00038d78 l       .debug_str	00000000 
00038d84 l       .debug_str	00000000 
00017471 l       .debug_str	00000000 
00038d8a l       .debug_str	00000000 
00038d94 l       .debug_str	00000000 
00038dc6 l       .debug_str	00000000 
00038dd6 l       .debug_str	00000000 
00038e5e l       .debug_str	00000000 
00038e67 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
00038ed4 l       .debug_str	00000000 
00038f13 l       .debug_str	00000000 
000168a0 l       .debug_str	00000000 
000168ac l       .debug_str	00000000 
000168b6 l       .debug_str	00000000 
00038f22 l       .debug_str	00000000 
00038f92 l       .debug_str	00000000 
00038fb7 l       .debug_str	00000000 
00039026 l       .debug_str	00000000 
0003904c l       .debug_str	00000000 
000390bb l       .debug_str	00000000 
000390e5 l       .debug_str	00000000 
0003911c l       .debug_str	00000000 
00039127 l       .debug_str	00000000 
00039163 l       .debug_str	00000000 
00039182 l       .debug_str	00000000 
000391bc l       .debug_str	00000000 
000391f7 l       .debug_str	00000000 
00039233 l       .debug_str	00000000 
0000e939 l       .debug_str	00000000 
0003924d l       .debug_str	00000000 
00039289 l       .debug_str	00000000 
00039296 l       .debug_str	00000000 
00051f82 l       .debug_str	00000000 
000392d4 l       .debug_str	00000000 
0003931a l       .debug_str	00000000 
000393a2 l       .debug_str	00000000 
000393bb l       .debug_str	00000000 
00039415 l       .debug_str	00000000 
0003945b l       .debug_str	00000000 
00039473 l       .debug_str	00000000 
000394f3 l       .debug_str	00000000 
000399c7 l       .debug_str	00000000 
00039503 l       .debug_str	00000000 
00039542 l       .debug_str	00000000 
00039582 l       .debug_str	00000000 
0003960c l       .debug_str	00000000 
00039623 l       .debug_str	00000000 
00039674 l       .debug_str	00000000 
00039682 l       .debug_str	00000000 
00039687 l       .debug_str	00000000 
000396e2 l       .debug_str	00000000 
0003a09c l       .debug_str	00000000 
00039739 l       .debug_str	00000000 
0003976c l       .debug_str	00000000 
000397b3 l       .debug_str	00000000 
000397ed l       .debug_str	00000000 
0003981c l       .debug_str	00000000 
0003989a l       .debug_str	00000000 
0003991e l       .debug_str	00000000 
000399ab l       .debug_str	00000000 
000399c0 l       .debug_str	00000000 
000399d0 l       .debug_str	00000000 
00039a1c l       .debug_str	00000000 
00039a61 l       .debug_str	00000000 
00039af8 l       .debug_str	00000000 
00039b14 l       .debug_str	00000000 
00039b5b l       .debug_str	00000000 
00039b89 l       .debug_str	00000000 
00039bc2 l       .debug_str	00000000 
00039be4 l       .debug_str	00000000 
0001a3af l       .debug_str	00000000 
00039c62 l       .debug_str	00000000 
00039ce2 l       .debug_str	00000000 
00039d21 l       .debug_str	00000000 
00039dab l       .debug_str	00000000 
00039df7 l       .debug_str	00000000 
00039e15 l       .debug_str	00000000 
00039e20 l       .debug_str	00000000 
00039e82 l       .debug_str	00000000 
00039ed9 l       .debug_str	00000000 
00039f66 l       .debug_str	00000000 
00039fb2 l       .debug_str	00000000 
0003a049 l       .debug_str	00000000 
0003a093 l       .debug_str	00000000 
0003a0af l       .debug_str	00000000 
0003a109 l       .debug_str	00000000 
0003a112 l       .debug_str	00000000 
0003a171 l       .debug_str	00000000 
0003a1c8 l       .debug_str	00000000 
0003a221 l       .debug_str	00000000 
0003a236 l       .debug_str	00000000 
0003a283 l       .debug_str	00000000 
0003a2ce l       .debug_str	00000000 
0003a2e1 l       .debug_str	00000000 
0001ee95 l       .debug_str	00000000 
000136cd l       .debug_str	00000000 
0003a32c l       .debug_str	00000000 
0003a341 l       .debug_str	00000000 
0003a34d l       .debug_str	00000000 
0003a392 l       .debug_str	00000000 
0003a3eb l       .debug_str	00000000 
0003a400 l       .debug_str	00000000 
0003a44d l       .debug_str	00000000 
0003a498 l       .debug_str	00000000 
0003a4ab l       .debug_str	00000000 
0003a4f6 l       .debug_str	00000000 
0003a509 l       .debug_str	00000000 
0003a56d l       .debug_str	00000000 
0003a5a6 l       .debug_str	00000000 
0003a5d2 l       .debug_str	00000000 
00057ff7 l       .debug_str	00000000 
000533bc l       .debug_str	00000000 
0003a651 l       .debug_str	00000000 
0003a657 l       .debug_str	00000000 
0003a660 l       .debug_str	00000000 
0003a698 l       .debug_str	00000000 
0003a6b5 l       .debug_str	00000000 
0003a6f1 l       .debug_str	00000000 
0003a70e l       .debug_str	00000000 
0003a76a l       .debug_str	00000000 
0003a7a2 l       .debug_str	00000000 
0003a7fe l       .debug_str	00000000 
00026172 l       .debug_str	00000000 
0003a836 l       .debug_str	00000000 
0003a874 l       .debug_str	00000000 
0003a890 l       .debug_str	00000000 
0003a8e6 l       .debug_str	00000000 
0003a94d l       .debug_str	00000000 
0003a985 l       .debug_str	00000000 
0003a991 l       .debug_str	00000000 
0003a9f8 l       .debug_str	00000000 
0003aa37 l       .debug_str	00000000 
0003aa48 l       .debug_str	00000000 
0003aa81 l       .debug_str	00000000 
00048a29 l       .debug_str	00000000 
0003aa9c l       .debug_str	00000000 
0003aad8 l       .debug_str	00000000 
0003aad1 l       .debug_str	00000000 
0003aae1 l       .debug_str	00000000 
0003aaf3 l       .debug_str	00000000 
0003ab3e l       .debug_str	00000000 
0003ab56 l       .debug_str	00000000 
0003ab60 l       .debug_str	00000000 
0003ab77 l       .debug_str	00000000 
0003ab86 l       .debug_str	00000000 
0003abc8 l       .debug_str	00000000 
0003abe1 l       .debug_str	00000000 
0003ac55 l       .debug_str	00000000 
0003ac64 l       .debug_str	00000000 
0003ac9d l       .debug_str	00000000 
0003acb3 l       .debug_str	00000000 
0003acf3 l       .debug_str	00000000 
0003acfe l       .debug_str	00000000 
0003ad7d l       .debug_str	00000000 
00052b35 l       .debug_str	00000000 
0003ad9c l       .debug_str	00000000 
0003adb1 l       .debug_str	00000000 
0003adbb l       .debug_str	00000000 
0001a9dc l       .debug_str	00000000 
0003adc0 l       .debug_str	00000000 
0003adf1 l       .debug_str	00000000 
0003ae04 l       .debug_str	00000000 
0003ae0e l       .debug_str	00000000 
0003ae2b l       .debug_str	00000000 
0003ae66 l       .debug_str	00000000 
0003ae9b l       .debug_str	00000000 
0003aecc l       .debug_str	00000000 
0003aee0 l       .debug_str	00000000 
0003aeeb l       .debug_str	00000000 
0003af09 l       .debug_str	00000000 
0003af44 l       .debug_str	00000000 
0003af7a l       .debug_str	00000000 
0003afab l       .debug_str	00000000 
0003afbf l       .debug_str	00000000 
0003afca l       .debug_str	00000000 
0003afe8 l       .debug_str	00000000 
0003b023 l       .debug_str	00000000 
0003b059 l       .debug_str	00000000 
0003b08a l       .debug_str	00000000 
0003b09e l       .debug_str	00000000 
0003b0a9 l       .debug_str	00000000 
0003b0c7 l       .debug_str	00000000 
0003b102 l       .debug_str	00000000 
0003b138 l       .debug_str	00000000 
0003b169 l       .debug_str	00000000 
0003f9b6 l       .debug_str	00000000 
0003b17e l       .debug_str	00000000 
0003b18a l       .debug_str	00000000 
0003b1a9 l       .debug_str	00000000 
0003b1e4 l       .debug_str	00000000 
0003b21b l       .debug_str	00000000 
0003b24c l       .debug_str	00000000 
0003b25f l       .debug_str	00000000 
0003b269 l       .debug_str	00000000 
0003b286 l       .debug_str	00000000 
0003b2c1 l       .debug_str	00000000 
0003b2f6 l       .debug_str	00000000 
0003b327 l       .debug_str	00000000 
0003b33b l       .debug_str	00000000 
0003b346 l       .debug_str	00000000 
0003b364 l       .debug_str	00000000 
0003b39f l       .debug_str	00000000 
0003b3d5 l       .debug_str	00000000 
0003b406 l       .debug_str	00000000 
0003b41a l       .debug_str	00000000 
0003b489 l       .debug_str	00000000 
0003b4c4 l       .debug_str	00000000 
0003b50d l       .debug_str	00000000 
0003b552 l       .debug_str	00000000 
0003b5ae l       .debug_str	00000000 
0003b5f7 l       .debug_str	00000000 
0003b63c l       .debug_str	00000000 
0003b698 l       .debug_str	00000000 
0003b6e1 l       .debug_str	00000000 
0003b726 l       .debug_str	00000000 
0003b782 l       .debug_str	00000000 
0003b78d l       .debug_str	00000000 
0003b7ab l       .debug_str	00000000 
0003b7e6 l       .debug_str	00000000 
0003b81c l       .debug_str	00000000 
0003b84d l       .debug_str	00000000 
0003b861 l       .debug_str	00000000 
0003b86c l       .debug_str	00000000 
0003b88a l       .debug_str	00000000 
0003b8c5 l       .debug_str	00000000 
0003b8fb l       .debug_str	00000000 
0003b96a l       .debug_str	00000000 
0003b9a5 l       .debug_str	00000000 
0003b9d6 l       .debug_str	00000000 
0003b9eb l       .debug_str	00000000 
0003b9f0 l       .debug_str	00000000 
0003b9fc l       .debug_str	00000000 
0003ba1b l       .debug_str	00000000 
0003ba56 l       .debug_str	00000000 
0003ba8d l       .debug_str	00000000 
0003bafc l       .debug_str	00000000 
0003bb38 l       .debug_str	00000000 
0000aaf4 l       .debug_str	00000000 
0003bb81 l       .debug_str	00000000 
0003bb8c l       .debug_str	00000000 
0003bbd3 l       .debug_str	00000000 
0003bbdd l       .debug_str	00000000 
0003bc5f l       .debug_str	00000000 
0003bc7c l       .debug_str	00000000 
0001785e l       .debug_str	00000000 
0003bcd7 l       .debug_str	00000000 
0003bd31 l       .debug_str	00000000 
0003bd3e l       .debug_str	00000000 
0003bdb0 l       .debug_str	00000000 
0003be14 l       .debug_str	00000000 
0003be1f l       .debug_str	00000000 
0003be98 l       .debug_str	00000000 
0003bea4 l       .debug_str	00000000 
0003bf20 l       .debug_str	00000000 
0003bf26 l       .debug_str	00000000 
0003bf2d l       .debug_str	00000000 
0003bf69 l       .debug_str	00000000 
00014d56 l       .debug_str	00000000 
0003bfb2 l       .debug_str	00000000 
0003bff6 l       .debug_str	00000000 
0003c041 l       .debug_str	00000000 
0003c080 l       .debug_str	00000000 
0003c0a5 l       .debug_str	00000000 
0003c0fb l       .debug_str	00000000 
0003c169 l       .debug_str	00000000 
0003c1e9 l       .debug_str	00000000 
0003c256 l       .debug_str	00000000 
0003c2e1 l       .debug_str	00000000 
0003c355 l       .debug_str	00000000 
0003c395 l       .debug_str	00000000 
0003c416 l       .debug_str	00000000 
0003c457 l       .debug_str	00000000 
0003c4bb l       .debug_str	00000000 
0003c56a l       .debug_str	00000000 
0003c5b4 l       .debug_str	00000000 
0003c601 l       .debug_str	00000000 
0003c647 l       .debug_str	00000000 
0003c651 l       .debug_str	00000000 
0003c68a l       .debug_str	00000000 
0003c6b9 l       .debug_str	00000000 
0003c71a l       .debug_str	00000000 
0003c749 l       .debug_str	00000000 
0003c786 l       .debug_str	00000000 
0003c815 l       .debug_str	00000000 
0003c84a l       .debug_str	00000000 
0003c8d0 l       .debug_str	00000000 
0003c956 l       .debug_str	00000000 
0003c9aa l       .debug_str	00000000 
0003ca33 l       .debug_str	00000000 
0001a280 l       .debug_str	00000000 
0003ca81 l       .debug_str	00000000 
0003cb0f l       .debug_str	00000000 
0003cb63 l       .debug_str	00000000 
0003cba2 l       .debug_str	00000000 
0003cbed l       .debug_str	00000000 
0003cc6f l       .debug_str	00000000 
0003cc8b l       .debug_str	00000000 
0003cce4 l       .debug_str	00000000 
0003cd3d l       .debug_str	00000000 
0003cd7a l       .debug_str	00000000 
0003cdbb l       .debug_str	00000000 
0003ce1c l       .debug_str	00000000 
0003ce8d l       .debug_str	00000000 
0003cebd l       .debug_str	00000000 
0003cf03 l       .debug_str	00000000 
0003cf75 l       .debug_str	00000000 
0003d009 l       .debug_str	00000000 
0003d02d l       .debug_str	00000000 
0003d0a9 l       .debug_str	00000000 
0003d0e3 l       .debug_str	00000000 
0003d125 l       .debug_str	00000000 
0003d1d5 l       .debug_str	00000000 
0003d214 l       .debug_str	00000000 
0003d2b7 l       .debug_str	00000000 
0003d313 l       .debug_str	00000000 
0003d370 l       .debug_str	00000000 
0003d41b l       .debug_str	00000000 
0003d454 l       .debug_str	00000000 
0003d4d0 l       .debug_str	00000000 
0003d508 l       .debug_str	00000000 
0003d514 l       .debug_str	00000000 
0003d551 l       .debug_str	00000000 
0003d5a9 l       .debug_str	00000000 
0003d5c9 l       .debug_str	00000000 
0003d622 l       .debug_str	00000000 
0003d67b l       .debug_str	00000000 
0003d6d4 l       .debug_str	00000000 
0003d72e l       .debug_str	00000000 
0003d764 l       .debug_str	00000000 
0003d774 l       .debug_str	00000000 
0003d783 l       .debug_str	00000000 
0003d78c l       .debug_str	00000000 
0003d7c3 l       .debug_str	00000000 
0003d7ff l       .debug_str	00000000 
0003d80f l       .debug_str	00000000 
0003d86b l       .debug_str	00000000 
0003d8cd l       .debug_str	00000000 
00030adc l       .debug_str	00000000 
0003d917 l       .debug_str	00000000 
0003d952 l       .debug_str	00000000 
0003d977 l       .debug_str	00000000 
0003d9d6 l       .debug_str	00000000 
0003da20 l       .debug_str	00000000 
0003da5b l       .debug_str	00000000 
0003da80 l       .debug_str	00000000 
0003dadf l       .debug_str	00000000 
0003db48 l       .debug_str	00000000 
0003db51 l       .debug_str	00000000 
0003db88 l       .debug_str	00000000 
0003dbe4 l       .debug_str	00000000 
0003dc46 l       .debug_str	00000000 
0003dca5 l       .debug_str	00000000 
0003dd04 l       .debug_str	00000000 
0003dd3a l       .debug_str	00000000 
0003dd4b l       .debug_str	00000000 
0003dd5b l       .debug_str	00000000 
0003dd65 l       .debug_str	00000000 
0003dd9d l       .debug_str	00000000 
0003ddfa l       .debug_str	00000000 
0003de5d l       .debug_str	00000000 
0003dea8 l       .debug_str	00000000 
0003dee3 l       .debug_str	00000000 
0003df09 l       .debug_str	00000000 
0003df69 l       .debug_str	00000000 
0003dfb4 l       .debug_str	00000000 
0003dfef l       .debug_str	00000000 
0003e015 l       .debug_str	00000000 
0003e075 l       .debug_str	00000000 
0003e0ab l       .debug_str	00000000 
0003e0bc l       .debug_str	00000000 
0003e0cc l       .debug_str	00000000 
0003e0d6 l       .debug_str	00000000 
0003e10e l       .debug_str	00000000 
0003e16b l       .debug_str	00000000 
0003e1ce l       .debug_str	00000000 
0003e22e l       .debug_str	00000000 
0003e28e l       .debug_str	00000000 
0003e2c4 l       .debug_str	00000000 
0003e2d5 l       .debug_str	00000000 
0003e2e5 l       .debug_str	00000000 
0003e2ef l       .debug_str	00000000 
0003e327 l       .debug_str	00000000 
0003e384 l       .debug_str	00000000 
0003e3e7 l       .debug_str	00000000 
0003e432 l       .debug_str	00000000 
0003e46d l       .debug_str	00000000 
0003e493 l       .debug_str	00000000 
0003e4f3 l       .debug_str	00000000 
0003e53e l       .debug_str	00000000 
0003e579 l       .debug_str	00000000 
0003e59f l       .debug_str	00000000 
0003e5ff l       .debug_str	00000000 
0003e635 l       .debug_str	00000000 
0003e646 l       .debug_str	00000000 
0003e656 l       .debug_str	00000000 
0003e660 l       .debug_str	00000000 
0003e698 l       .debug_str	00000000 
0003e6f5 l       .debug_str	00000000 
0003e758 l       .debug_str	00000000 
0003e7b8 l       .debug_str	00000000 
0003e818 l       .debug_str	00000000 
0003e84e l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0003e861 l       .debug_str	00000000 
0003e873 l       .debug_str	00000000 
0003e87f l       .debug_str	00000000 
0003e8ba l       .debug_str	00000000 
0003e919 l       .debug_str	00000000 
0003e97e l       .debug_str	00000000 
0003e9e0 l       .debug_str	00000000 
0003ea1b l       .debug_str	00000000 
0003ea43 l       .debug_str	00000000 
0003eaa5 l       .debug_str	00000000 
0001d64e l       .debug_str	00000000 
0002006a l       .debug_str	00000000 
0001362c l       .debug_str	00000000 
0003eadb l       .debug_str	00000000 
0003eb16 l       .debug_str	00000000 
0003eb56 l       .debug_str	00000000 
0003eb73 l       .debug_str	00000000 
0003ebb7 l       .debug_str	00000000 
0003ebd8 l       .debug_str	00000000 
0003ec18 l       .debug_str	00000000 
0003ec35 l       .debug_str	00000000 
0003ec79 l       .debug_str	00000000 
0003ec9a l       .debug_str	00000000 
0003ecfc l       .debug_str	00000000 
0003ed63 l       .debug_str	00000000 
0003ed9e l       .debug_str	00000000 
0003edc1 l       .debug_str	00000000 
0003ee27 l       .debug_str	00000000 
0003ee62 l       .debug_str	00000000 
0003ee84 l       .debug_str	00000000 
0003eebf l       .debug_str	00000000 
0003eee3 l       .debug_str	00000000 
0003ef1e l       .debug_str	00000000 
0003ef41 l       .debug_str	00000000 
0003ef7c l       .debug_str	00000000 
0003efa0 l       .debug_str	00000000 
0003efdb l       .debug_str	00000000 
0003effe l       .debug_str	00000000 
0003f039 l       .debug_str	00000000 
0003f05d l       .debug_str	00000000 
0003f0a8 l       .debug_str	00000000 
0003f10a l       .debug_str	00000000 
0003f145 l       .debug_str	00000000 
0003f168 l       .debug_str	00000000 
0003f1b3 l       .debug_str	00000000 
0003f1ee l       .debug_str	00000000 
0003f214 l       .debug_str	00000000 
0003f24f l       .debug_str	00000000 
0003f275 l       .debug_str	00000000 
0003f2c6 l       .debug_str	00000000 
0003f314 l       .debug_str	00000000 
0003f35f l       .debug_str	00000000 
0003f392 l       .debug_str	00000000 
0003f3cd l       .debug_str	00000000 
0003f3f2 l       .debug_str	00000000 
0003f47e l       .debug_str	00000000 
0003f4b2 l       .debug_str	00000000 
0003f52e l       .debug_str	00000000 
0003f573 l       .debug_str	00000000 
0003f5bf l       .debug_str	00000000 
0003f622 l       .debug_str	00000000 
0003f65d l       .debug_str	00000000 
0003f681 l       .debug_str	00000000 
0003f6bc l       .debug_str	00000000 
0003f6e3 l       .debug_str	00000000 
0003f72f l       .debug_str	00000000 
0003f76a l       .debug_str	00000000 
0003f791 l       .debug_str	00000000 
0003f7dc l       .debug_str	00000000 
0003f828 l       .debug_str	00000000 
0003f874 l       .debug_str	00000000 
0003f8a5 l       .debug_str	00000000 
0003f8ad l       .debug_str	00000000 
00010e96 l       .debug_str	00000000 
0003f8f9 l       .debug_str	00000000 
0003f92e l       .debug_str	00000000 
0003f95c l       .debug_str	00000000 
0003f965 l       .debug_str	00000000 
0003f9b3 l       .debug_str	00000000 
0003f9bb l       .debug_str	00000000 
0003fa20 l       .debug_str	00000000 
0003fa73 l       .debug_str	00000000 
0003fad3 l       .debug_str	00000000 
0003faf2 l       .debug_str	00000000 
0003fb55 l       .debug_str	00000000 
0003fb77 l       .debug_str	00000000 
0003fbc2 l       .debug_str	00000000 
0003fc27 l       .debug_str	00000000 
0003fc49 l       .debug_str	00000000 
0003fcb2 l       .debug_str	00000000 
0003fcef l       .debug_str	00000000 
0003fd58 l       .debug_str	00000000 
0003fde8 l       .debug_str	00000000 
0000b9b4 l       .debug_str	00000000 
0003fe48 l       .debug_str	00000000 
0003feab l       .debug_str	00000000 
0003ff14 l       .debug_str	00000000 
0003ff47 l       .debug_str	00000000 
0003ff8f l       .debug_str	00000000 
00040009 l       .debug_str	00000000 
0004005a l       .debug_str	00000000 
000400b1 l       .debug_str	00000000 
0001b7fd l       .debug_str	00000000 
000400f9 l       .debug_str	00000000 
00040157 l       .debug_str	00000000 
00040174 l       .debug_str	00000000 
000401e0 l       .debug_str	00000000 
00040225 l       .debug_str	00000000 
00040273 l       .debug_str	00000000 
000402bb l       .debug_str	00000000 
000402c5 l       .debug_str	00000000 
00040333 l       .debug_str	00000000 
0004036f l       .debug_str	00000000 
00040392 l       .debug_str	00000000 
00040402 l       .debug_str	00000000 
0004044a l       .debug_str	00000000 
00040453 l       .debug_str	00000000 
000404b0 l       .debug_str	00000000 
00040513 l       .debug_str	00000000 
00040573 l       .debug_str	00000000 
000405d3 l       .debug_str	00000000 
0004062f l       .debug_str	00000000 
0004068e l       .debug_str	00000000 
000406ee l       .debug_str	00000000 
00040709 l       .debug_str	00000000 
0001b75b l       .debug_str	00000000 
0004075d l       .debug_str	00000000 
000407db l       .debug_str	00000000 
00040805 l       .debug_str	00000000 
00040867 l       .debug_str	00000000 
000408c8 l       .debug_str	00000000 
00040922 l       .debug_str	00000000 
00040987 l       .debug_str	00000000 
000409d9 l       .debug_str	00000000 
00040a21 l       .debug_str	00000000 
00040a3c l       .debug_str	00000000 
00040ab6 l       .debug_str	00000000 
00040b03 l       .debug_str	00000000 
00040b7d l       .debug_str	00000000 
00040bca l       .debug_str	00000000 
00040c1e l       .debug_str	00000000 
00040c70 l       .debug_str	00000000 
00040cd8 l       .debug_str	00000000 
00040d38 l       .debug_str	00000000 
00040d92 l       .debug_str	00000000 
00040df1 l       .debug_str	00000000 
00040e4b l       .debug_str	00000000 
00040ea8 l       .debug_str	00000000 
000238ee l       .debug_str	00000000 
00040ee6 l       .debug_str	00000000 
000248d1 l       .debug_str	00000000 
00040f21 l       .debug_str	00000000 
00040f93 l       .debug_str	00000000 
00041066 l       .debug_str	00000000 
0001b91b l       .debug_str	00000000 
000410ae l       .debug_str	00000000 
000410fc l       .debug_str	00000000 
00041106 l       .debug_str	00000000 
0004114e l       .debug_str	00000000 
0004115a l       .debug_str	00000000 
000411ce l       .debug_str	00000000 
000411d9 l       .debug_str	00000000 
00041215 l       .debug_str	00000000 
0004123c l       .debug_str	00000000 
0004128d l       .debug_str	00000000 
0004129a l       .debug_str	00000000 
000412a8 l       .debug_str	00000000 
000412bb l       .debug_str	00000000 
000412c6 l       .debug_str	00000000 
00041308 l       .debug_str	00000000 
0004131d l       .debug_str	00000000 
00041387 l       .debug_str	00000000 
000413e4 l       .debug_str	00000000 
00041444 l       .debug_str	00000000 
000414a4 l       .debug_str	00000000 
00041516 l       .debug_str	00000000 
00041563 l       .debug_str	00000000 
000415c2 l       .debug_str	00000000 
0004161c l       .debug_str	00000000 
0004168f l       .debug_str	00000000 
0004169c l       .debug_str	00000000 
000416fc l       .debug_str	00000000 
0004171b l       .debug_str	00000000 
00041783 l       .debug_str	00000000 
0004179e l       .debug_str	00000000 
000417f6 l       .debug_str	00000000 
00041840 l       .debug_str	00000000 
000418a4 l       .debug_str	00000000 
000418c3 l       .debug_str	00000000 
00041925 l       .debug_str	00000000 
0004198b l       .debug_str	00000000 
00041a0b l       .debug_str	00000000 
00041a5a l       .debug_str	00000000 
00041ad0 l       .debug_str	00000000 
00041b46 l       .debug_str	00000000 
00041c1b l       .debug_str	00000000 
00041c78 l       .debug_str	00000000 
00041cd6 l       .debug_str	00000000 
00041d56 l       .debug_str	00000000 
00041dc5 l       .debug_str	00000000 
00041e43 l       .debug_str	00000000 
00041e96 l       .debug_str	00000000 
00041efb l       .debug_str	00000000 
00041f5b l       .debug_str	00000000 
00041fc9 l       .debug_str	00000000 
00042061 l       .debug_str	00000000 
000420f0 l       .debug_str	00000000 
0004217e l       .debug_str	00000000 
0004220c l       .debug_str	00000000 
0004231c l       .debug_str	00000000 
00042390 l       .debug_str	00000000 
000423d2 l       .debug_str	00000000 
0004241b l       .debug_str	00000000 
00042475 l       .debug_str	00000000 
000424ee l       .debug_str	00000000 
000424fb l       .debug_str	00000000 
00042500 l       .debug_str	00000000 
0004256c l       .debug_str	00000000 
000425b3 l       .debug_str	00000000 
0004263d l       .debug_str	00000000 
0004265c l       .debug_str	00000000 
000426e6 l       .debug_str	00000000 
0004270a l       .debug_str	00000000 
0004274e l       .debug_str	00000000 
000427b2 l       .debug_str	00000000 
000427f6 l       .debug_str	00000000 
00042868 l       .debug_str	00000000 
00042926 l       .debug_str	00000000 
00042988 l       .debug_str	00000000 
00042a20 l       .debug_str	00000000 
00042acf l       .debug_str	00000000 
00042b65 l       .debug_str	00000000 
00042bf8 l       .debug_str	00000000 
00042c3c l       .debug_str	00000000 
00042c8f l       .debug_str	00000000 
00042d13 l       .debug_str	00000000 
00042da1 l       .debug_str	00000000 
00042df5 l       .debug_str	00000000 
00042e06 l       .debug_str	00000000 
00042e8b l       .debug_str	00000000 
00042f17 l       .debug_str	00000000 
00042f20 l       .debug_str	00000000 
00042f2d l       .debug_str	00000000 
00042f84 l       .debug_str	00000000 
00043009 l       .debug_str	00000000 
0004305b l       .debug_str	00000000 
0004306a l       .debug_str	00000000 
000430b1 l       .debug_str	00000000 
00043115 l       .debug_str	00000000 
00043136 l       .debug_str	00000000 
000431b6 l       .debug_str	00000000 
00043221 l       .debug_str	00000000 
0004329f l       .debug_str	00000000 
000432ee l       .debug_str	00000000 
0004334d l       .debug_str	00000000 
000433e5 l       .debug_str	00000000 
0004348b l       .debug_str	00000000 
00043521 l       .debug_str	00000000 
000435ab l       .debug_str	00000000 
00043621 l       .debug_str	00000000 
0004366a l       .debug_str	00000000 
000436c6 l       .debug_str	00000000 
00043741 l       .debug_str	00000000 
000437ad l       .debug_str	00000000 
00043837 l       .debug_str	00000000 
0004387b l       .debug_str	00000000 
000438dc l       .debug_str	00000000 
00043920 l       .debug_str	00000000 
000439a4 l       .debug_str	00000000 
00043a2e l       .debug_str	00000000 
00043a80 l       .debug_str	00000000 
00043afe l       .debug_str	00000000 
00043b83 l       .debug_str	00000000 
00043bda l       .debug_str	00000000 
00043c5b l       .debug_str	00000000 
00043d19 l       .debug_str	00000000 
00043d78 l       .debug_str	00000000 
00043ddb l       .debug_str	00000000 
00043e00 l       .debug_str	00000000 
00043e64 l       .debug_str	00000000 
00043e85 l       .debug_str	00000000 
00043f05 l       .debug_str	00000000 
00043f70 l       .debug_str	00000000 
00043fee l       .debug_str	00000000 
0004403d l       .debug_str	00000000 
0004409c l       .debug_str	00000000 
00044134 l       .debug_str	00000000 
000441da l       .debug_str	00000000 
00044270 l       .debug_str	00000000 
000442fa l       .debug_str	00000000 
00044370 l       .debug_str	00000000 
000443b9 l       .debug_str	00000000 
00044415 l       .debug_str	00000000 
00044490 l       .debug_str	00000000 
000444fc l       .debug_str	00000000 
00044586 l       .debug_str	00000000 
000445ca l       .debug_str	00000000 
0004462b l       .debug_str	00000000 
0004466f l       .debug_str	00000000 
000446f3 l       .debug_str	00000000 
0004477d l       .debug_str	00000000 
000447fb l       .debug_str	00000000 
00044880 l       .debug_str	00000000 
000448d7 l       .debug_str	00000000 
00044958 l       .debug_str	00000000 
00044a16 l       .debug_str	00000000 
00044a75 l       .debug_str	00000000 
00044aa8 l       .debug_str	00000000 
00044adb l       .debug_str	00000000 
00044b0e l       .debug_str	00000000 
00044b41 l       .debug_str	00000000 
00044b74 l       .debug_str	00000000 
00044ba7 l       .debug_str	00000000 
00044bda l       .debug_str	00000000 
00044c2e l       .debug_str	00000000 
00044c5c l       .debug_str	00000000 
00044cb0 l       .debug_str	00000000 
0005768d l       .debug_str	00000000 
00013418 l       .debug_str	00000000 
00044cc3 l       .debug_str	00000000 
00044cc7 l       .debug_str	00000000 
00044ccb l       .debug_str	00000000 
00044ccf l       .debug_str	00000000 
00044cd6 l       .debug_str	00000000 
00044cdb l       .debug_str	00000000 
00044d0b l       .debug_str	00000000 
00044d5d l       .debug_str	00000000 
00044d9e l       .debug_str	00000000 
00044dab l       .debug_str	00000000 
00044dea l       .debug_str	00000000 
00044df5 l       .debug_str	00000000 
00044e31 l       .debug_str	00000000 
00044e3f l       .debug_str	00000000 
00044e73 l       .debug_str	00000000 
00044eae l       .debug_str	00000000 
00044eec l       .debug_str	00000000 
00044efa l       .debug_str	00000000 
00044f33 l       .debug_str	00000000 
00044f3d l       .debug_str	00000000 
00044f79 l       .debug_str	00000000 
00044fd5 l       .debug_str	00000000 
00044fdc l       .debug_str	00000000 
0004503a l       .debug_str	00000000 
00045043 l       .debug_str	00000000 
000450aa l       .debug_str	00000000 
000450bb l       .debug_str	00000000 
00045118 l       .debug_str	00000000 
00045177 l       .debug_str	00000000 
000451d3 l       .debug_str	00000000 
00045231 l       .debug_str	00000000 
00045298 l       .debug_str	00000000 
000452f5 l       .debug_str	00000000 
00045354 l       .debug_str	00000000 
0004538d l       .debug_str	00000000 
00045397 l       .debug_str	00000000 
000453ff l       .debug_str	00000000 
00045432 l       .debug_str	00000000 
0004543c l       .debug_str	00000000 
00045472 l       .debug_str	00000000 
0004547e l       .debug_str	00000000 
000454b5 l       .debug_str	00000000 
000454c2 l       .debug_str	00000000 
00045506 l       .debug_str	00000000 
00045520 l       .debug_str	00000000 
00045591 l       .debug_str	00000000 
000455a4 l       .debug_str	00000000 
00045615 l       .debug_str	00000000 
00045658 l       .debug_str	00000000 
00045662 l       .debug_str	00000000 
000456ac l       .debug_str	00000000 
000456f3 l       .debug_str	00000000 
00045740 l       .debug_str	00000000 
0004578a l       .debug_str	00000000 
000457bc l       .debug_str	00000000 
000457c5 l       .debug_str	00000000 
000457f9 l       .debug_str	00000000 
00045832 l       .debug_str	00000000 
0004586e l       .debug_str	00000000 
00045880 l       .debug_str	00000000 
000458c1 l       .debug_str	00000000 
00045920 l       .debug_str	00000000 
00045951 l       .debug_str	00000000 
00045967 l       .debug_str	00000000 
0004599c l       .debug_str	00000000 
000459f9 l       .debug_str	00000000 
00045a5d l       .debug_str	00000000 
00045abc l       .debug_str	00000000 
00045b1c l       .debug_str	00000000 
00045b7a l       .debug_str	00000000 
000205c8 l       .debug_str	00000000 
00045bdf l       .debug_str	00000000 
00045c25 l       .debug_str	00000000 
00045c65 l       .debug_str	00000000 
00045ced l       .debug_str	00000000 
000540c3 l       .debug_str	00000000 
00045d74 l       .debug_str	00000000 
00045da7 l       .debug_str	00000000 
00045e1b l       .debug_str	00000000 
00045e94 l       .debug_str	00000000 
00045f08 l       .debug_str	00000000 
00045f67 l       .debug_str	00000000 
00045fc4 l       .debug_str	00000000 
0004601e l       .debug_str	00000000 
0004607a l       .debug_str	00000000 
000460d7 l       .debug_str	00000000 
00046136 l       .debug_str	00000000 
0004619e l       .debug_str	00000000 
00046208 l       .debug_str	00000000 
00046271 l       .debug_str	00000000 
000462cf l       .debug_str	00000000 
00046341 l       .debug_str	00000000 
00046345 l       .debug_str	00000000 
000463b8 l       .debug_str	00000000 
00046416 l       .debug_str	00000000 
00046472 l       .debug_str	00000000 
000464e3 l       .debug_str	00000000 
00046559 l       .debug_str	00000000 
00046590 l       .debug_str	00000000 
000465ec l       .debug_str	00000000 
00046640 l       .debug_str	00000000 
0004669e l       .debug_str	00000000 
0004670a l       .debug_str	00000000 
0004675f l       .debug_str	00000000 
00046792 l       .debug_str	00000000 
000467a0 l       .debug_str	00000000 
000467d8 l       .debug_str	00000000 
000467eb l       .debug_str	00000000 
00046820 l       .debug_str	00000000 
00046856 l       .debug_str	00000000 
000468b1 l       .debug_str	00000000 
000468e4 l       .debug_str	00000000 
000468eb l       .debug_str	00000000 
0004692d l       .debug_str	00000000 
0004695e l       .debug_str	00000000 
0004698f l       .debug_str	00000000 
000469c2 l       .debug_str	00000000 
000469c9 l       .debug_str	00000000 
000469f6 l       .debug_str	00000000 
00046a31 l       .debug_str	00000000 
00046a44 l       .debug_str	00000000 
00046a75 l       .debug_str	00000000 
00046a7f l       .debug_str	00000000 
00046ae0 l       .debug_str	00000000 
00046b48 l       .debug_str	00000000 
00046b85 l       .debug_str	00000000 
00046bd3 l       .debug_str	00000000 
00046c0f l       .debug_str	00000000 
00046c4b l       .debug_str	00000000 
00046c84 l       .debug_str	00000000 
00046cbe l       .debug_str	00000000 
00046cf7 l       .debug_str	00000000 
00046d2e l       .debug_str	00000000 
00046d67 l       .debug_str	00000000 
00046da1 l       .debug_str	00000000 
00046de7 l       .debug_str	00000000 
00046e0a l       .debug_str	00000000 
00046e50 l       .debug_str	00000000 
00046e73 l       .debug_str	00000000 
00046ebc l       .debug_str	00000000 
00046ee2 l       .debug_str	00000000 
00046f2b l       .debug_str	00000000 
00046f51 l       .debug_str	00000000 
00046f9b l       .debug_str	00000000 
00046fc2 l       .debug_str	00000000 
0004700c l       .debug_str	00000000 
00047033 l       .debug_str	00000000 
00047080 l       .debug_str	00000000 
000470aa l       .debug_str	00000000 
000470f7 l       .debug_str	00000000 
00047121 l       .debug_str	00000000 
00047154 l       .debug_str	00000000 
00047180 l       .debug_str	00000000 
000471d6 l       .debug_str	00000000 
00047201 l       .debug_str	00000000 
00047259 l       .debug_str	00000000 
000472af l       .debug_str	00000000 
000472e8 l       .debug_str	00000000 
000472f3 l       .debug_str	00000000 
0001f0cf l       .debug_str	00000000 
0004732c l       .debug_str	00000000 
00047353 l       .debug_str	00000000 
0004738c l       .debug_str	00000000 
000473d3 l       .debug_str	00000000 
000473e0 l       .debug_str	00000000 
000475fa l       .debug_str	00000000 
0004740f l       .debug_str	00000000 
0004744f l       .debug_str	00000000 
00047463 l       .debug_str	00000000 
000474a5 l       .debug_str	00000000 
000474d6 l       .debug_str	00000000 
00047506 l       .debug_str	00000000 
00047537 l       .debug_str	00000000 
00047568 l       .debug_str	00000000 
0004759f l       .debug_str	00000000 
000475aa l       .debug_str	00000000 
000475ea l       .debug_str	00000000 
000475fe l       .debug_str	00000000 
0004763a l       .debug_str	00000000 
0004764a l       .debug_str	00000000 
0004767f l       .debug_str	00000000 
00047689 l       .debug_str	00000000 
000476be l       .debug_str	00000000 
000476c8 l       .debug_str	00000000 
0004771d l       .debug_str	00000000 
00047765 l       .debug_str	00000000 
000477ab l       .debug_str	00000000 
000477f2 l       .debug_str	00000000 
0004783b l       .debug_str	00000000 
0004788d l       .debug_str	00000000 
000478df l       .debug_str	00000000 
0004797d l       .debug_str	00000000 
000479af l       .debug_str	00000000 
000479e8 l       .debug_str	00000000 
000479fd l       .debug_str	00000000 
00047a38 l       .debug_str	00000000 
00047a4f l       .debug_str	00000000 
00047a8d l       .debug_str	00000000 
00047aa7 l       .debug_str	00000000 
00047b09 l       .debug_str	00000000 
00047b2e l       .debug_str	00000000 
00047b89 l       .debug_str	00000000 
00047b98 l       .debug_str	00000000 
00047c0d l       .debug_str	00000000 
00047c2a l       .debug_str	00000000 
00047c64 l       .debug_str	00000000 
00047ca1 l       .debug_str	00000000 
00047cac l       .debug_str	00000000 
00047ce4 l       .debug_str	00000000 
00047ceb l       .debug_str	00000000 
00047d6a l       .debug_str	00000000 
00047dca l       .debug_str	00000000 
00047e28 l       .debug_str	00000000 
00047e86 l       .debug_str	00000000 
00047ebe l       .debug_str	00000000 
00047ef3 l       .debug_str	00000000 
00047f1e l       .debug_str	00000000 
00047f28 l       .debug_str	00000000 
00047f58 l       .debug_str	00000000 
00047f66 l       .debug_str	00000000 
00047fbf l       .debug_str	00000000 
00048012 l       .debug_str	00000000 
0004808e l       .debug_str	00000000 
000480f2 l       .debug_str	00000000 
00048156 l       .debug_str	00000000 
0004818c l       .debug_str	00000000 
000481a0 l       .debug_str	00000000 
000481e1 l       .debug_str	00000000 
000481f9 l       .debug_str	00000000 
000482ad l       .debug_str	00000000 
000482e0 l       .debug_str	00000000 
000482f1 l       .debug_str	00000000 
00048337 l       .debug_str	00000000 
00048344 l       .debug_str	00000000 
00048381 l       .debug_str	00000000 
000483c5 l       .debug_str	00000000 
00048406 l       .debug_str	00000000 
00048448 l       .debug_str	00000000 
00048452 l       .debug_str	00000000 
00048496 l       .debug_str	00000000 
000484a1 l       .debug_str	00000000 
000484ef l       .debug_str	00000000 
0004853d l       .debug_str	00000000 
00048583 l       .debug_str	00000000 
000485cb l       .debug_str	00000000 
00048613 l       .debug_str	00000000 
000141e4 l       .debug_str	00000000 
0004867a l       .debug_str	00000000 
000486d3 l       .debug_str	00000000 
0004873d l       .debug_str	00000000 
00017965 l       .debug_str	00000000 
000487a7 l       .debug_str	00000000 
00048822 l       .debug_str	00000000 
00048897 l       .debug_str	00000000 
000488a2 l       .debug_str	00000000 
00048917 l       .debug_str	00000000 
00048922 l       .debug_str	00000000 
00048979 l       .debug_str	00000000 
000489dd l       .debug_str	00000000 
000489e9 l       .debug_str	00000000 
00048a26 l       .debug_str	00000000 
00048a33 l       .debug_str	00000000 
00048a67 l       .debug_str	00000000 
00048aa2 l       .debug_str	00000000 
00048afe l       .debug_str	00000000 
00048b59 l       .debug_str	00000000 
00048bb3 l       .debug_str	00000000 
0002f5ed l       .debug_str	00000000 
00048bf9 l       .debug_str	00000000 
00048c5f l       .debug_str	00000000 
00048c96 l       .debug_str	00000000 
00048c9e l       .debug_str	00000000 
00048cd6 l       .debug_str	00000000 
00048cdf l       .debug_str	00000000 
00048d17 l       .debug_str	00000000 
00048d20 l       .debug_str	00000000 
00048d57 l       .debug_str	00000000 
00048d5f l       .debug_str	00000000 
00048d97 l       .debug_str	00000000 
00048da0 l       .debug_str	00000000 
00048dd8 l       .debug_str	00000000 
00048de1 l       .debug_str	00000000 
00048e18 l       .debug_str	00000000 
00048e20 l       .debug_str	00000000 
00048e9a l       .debug_str	00000000 
00048f14 l       .debug_str	00000000 
00048f8e l       .debug_str	00000000 
0004900a l       .debug_str	00000000 
0001b09b l       .debug_str	00000000 
00049068 l       .debug_str	00000000 
000490c7 l       .debug_str	00000000 
00049126 l       .debug_str	00000000 
00049185 l       .debug_str	00000000 
000491e5 l       .debug_str	00000000 
00049243 l       .debug_str	00000000 
000492a2 l       .debug_str	00000000 
00049301 l       .debug_str	00000000 
00049360 l       .debug_str	00000000 
000493c0 l       .debug_str	00000000 
00049415 l       .debug_str	00000000 
0004946a l       .debug_str	00000000 
000494c4 l       .debug_str	00000000 
0004951e l       .debug_str	00000000 
00049558 l       .debug_str	00000000 
00049561 l       .debug_str	00000000 
0004959b l       .debug_str	00000000 
000495a4 l       .debug_str	00000000 
000495e1 l       .debug_str	00000000 
00030ad8 l       .debug_str	00000000 
0004961a l       .debug_str	00000000 
0004967b l       .debug_str	00000000 
000496d9 l       .debug_str	00000000 
0004971a l       .debug_str	00000000 
00049758 l       .debug_str	00000000 
00049791 l       .debug_str	00000000 
000497d0 l       .debug_str	00000000 
0004980e l       .debug_str	00000000 
0004984c l       .debug_str	00000000 
0004988d l       .debug_str	00000000 
000498d1 l       .debug_str	00000000 
0004990e l       .debug_str	00000000 
00049974 l       .debug_str	00000000 
000499db l       .debug_str	00000000 
00049a3e l       .debug_str	00000000 
00049aa0 l       .debug_str	00000000 
00049b05 l       .debug_str	00000000 
00049b6e l       .debug_str	00000000 
00049bd4 l       .debug_str	00000000 
00049c3a l       .debug_str	00000000 
00049c95 l       .debug_str	00000000 
00049cfc l       .debug_str	00000000 
00049d67 l       .debug_str	00000000 
00049dc2 l       .debug_str	00000000 
00049e1d l       .debug_str	00000000 
000239b7 l       .debug_str	00000000 
00049e64 l       .debug_str	00000000 
00049eac l       .debug_str	00000000 
00049ef4 l       .debug_str	00000000 
00049f3c l       .debug_str	00000000 
00049f85 l       .debug_str	00000000 
00049fcf l       .debug_str	00000000 
0004a016 l       .debug_str	00000000 
0004a069 l       .debug_str	00000000 
0004a084 l       .debug_str	00000000 
0004a0cc l       .debug_str	00000000 
0004a120 l       .debug_str	00000000 
0004a168 l       .debug_str	00000000 
0004a1bc l       .debug_str	00000000 
0004a204 l       .debug_str	00000000 
0004a258 l       .debug_str	00000000 
0004a2a1 l       .debug_str	00000000 
0004a2f6 l       .debug_str	00000000 
0004a340 l       .debug_str	00000000 
0004a398 l       .debug_str	00000000 
0004a3fa l       .debug_str	00000000 
0004a459 l       .debug_str	00000000 
0004a4b9 l       .debug_str	00000000 
0004a519 l       .debug_str	00000000 
0004a579 l       .debug_str	00000000 
0004a5da l       .debug_str	00000000 
0004a639 l       .debug_str	00000000 
0004a699 l       .debug_str	00000000 
0004a6f9 l       .debug_str	00000000 
0004a759 l       .debug_str	00000000 
0004a7ba l       .debug_str	00000000 
0004a817 l       .debug_str	00000000 
0004a872 l       .debug_str	00000000 
0004a8c8 l       .debug_str	00000000 
0004a926 l       .debug_str	00000000 
0004a97a l       .debug_str	00000000 
0004a9db l       .debug_str	00000000 
0004aa41 l       .debug_str	00000000 
0004aaa9 l       .debug_str	00000000 
0004ab10 l       .debug_str	00000000 
0004ab6c l       .debug_str	00000000 
0004abcd l       .debug_str	00000000 
0004ac27 l       .debug_str	00000000 
0004ac81 l       .debug_str	00000000 
0004acdf l       .debug_str	00000000 
0004ad33 l       .debug_str	00000000 
0004adaf l       .debug_str	00000000 
0004ae18 l       .debug_str	00000000 
0004ae94 l       .debug_str	00000000 
0004af10 l       .debug_str	00000000 
0004af79 l       .debug_str	00000000 
0004aff5 l       .debug_str	00000000 
0004b062 l       .debug_str	00000000 
0004b0bc l       .debug_str	00000000 
0004b115 l       .debug_str	00000000 
0004b16d l       .debug_str	00000000 
0004b1cc l       .debug_str	00000000 
0004b22b l       .debug_str	00000000 
0004b28a l       .debug_str	00000000 
0004b2ea l       .debug_str	00000000 
0004b34a l       .debug_str	00000000 
0004b3aa l       .debug_str	00000000 
0004b40a l       .debug_str	00000000 
0004b46c l       .debug_str	00000000 
0004b4ce l       .debug_str	00000000 
0004b52f l       .debug_str	00000000 
0004b591 l       .debug_str	00000000 
0004b5f3 l       .debug_str	00000000 
0004b654 l       .debug_str	00000000 
0004b6b6 l       .debug_str	00000000 
0004b718 l       .debug_str	00000000 
00030b1c l       .debug_str	00000000 
0004b761 l       .debug_str	00000000 
0004b7ad l       .debug_str	00000000 
0004b7b5 l       .debug_str	00000000 
0004b7ff l       .debug_str	00000000 
0004b84a l       .debug_str	00000000 
0004b851 l       .debug_str	00000000 
0004b89c l       .debug_str	00000000 
0004b8e7 l       .debug_str	00000000 
0004b933 l       .debug_str	00000000 
0004b97d l       .debug_str	00000000 
0004b9ca l       .debug_str	00000000 
0004ba15 l       .debug_str	00000000 
0004ba61 l       .debug_str	00000000 
0004baad l       .debug_str	00000000 
0004baf9 l       .debug_str	00000000 
0004bb46 l       .debug_str	00000000 
0004bb90 l       .debug_str	00000000 
0004bbdd l       .debug_str	00000000 
0004bc28 l       .debug_str	00000000 
0004bc74 l       .debug_str	00000000 
0004bcc0 l       .debug_str	00000000 
0004bd0c l       .debug_str	00000000 
0004bd59 l       .debug_str	00000000 
0004bda3 l       .debug_str	00000000 
0004bdf0 l       .debug_str	00000000 
0004be3b l       .debug_str	00000000 
0004be87 l       .debug_str	00000000 
0004bed3 l       .debug_str	00000000 
0004bf1f l       .debug_str	00000000 
0004bf6c l       .debug_str	00000000 
0004bfb7 l       .debug_str	00000000 
0004c005 l       .debug_str	00000000 
0004c051 l       .debug_str	00000000 
0004c09e l       .debug_str	00000000 
0004c0eb l       .debug_str	00000000 
0004c138 l       .debug_str	00000000 
0004c186 l       .debug_str	00000000 
0004c1d1 l       .debug_str	00000000 
0004c21c l       .debug_str	00000000 
0004c268 l       .debug_str	00000000 
0004c2b4 l       .debug_str	00000000 
0004c301 l       .debug_str	00000000 
0004c34d l       .debug_str	00000000 
0004c39a l       .debug_str	00000000 
0004c3e7 l       .debug_str	00000000 
0004c446 l       .debug_str	00000000 
0004c4a3 l       .debug_str	00000000 
0004c4ff l       .debug_str	00000000 
0004c55d l       .debug_str	00000000 
0004c5ba l       .debug_str	00000000 
0004c618 l       .debug_str	00000000 
0004c675 l       .debug_str	00000000 
0004c6d3 l       .debug_str	00000000 
0004c730 l       .debug_str	00000000 
0004c78f l       .debug_str	00000000 
0004c7ed l       .debug_str	00000000 
0004c84e l       .debug_str	00000000 
0004c8af l       .debug_str	00000000 
0004c912 l       .debug_str	00000000 
0004c943 l       .debug_str	00000000 
0004c94b l       .debug_str	00000000 
0004c9ae l       .debug_str	00000000 
0004ca11 l       .debug_str	00000000 
0004ca75 l       .debug_str	00000000 
0004cad9 l       .debug_str	00000000 
0004cb3d l       .debug_str	00000000 
0004cba1 l       .debug_str	00000000 
0004cc04 l       .debug_str	00000000 
0004cc67 l       .debug_str	00000000 
0004cccb l       .debug_str	00000000 
0004cd2f l       .debug_str	00000000 
0004cd93 l       .debug_str	00000000 
0004cdf7 l       .debug_str	00000000 
0004ce28 l       .debug_str	00000000 
0004ce30 l       .debug_str	00000000 
0004ce94 l       .debug_str	00000000 
0004cef8 l       .debug_str	00000000 
0004cf5c l       .debug_str	00000000 
0004cfc0 l       .debug_str	00000000 
0004d020 l       .debug_str	00000000 
0004d080 l       .debug_str	00000000 
0004d0ae l       .debug_str	00000000 
0004d0b7 l       .debug_str	00000000 
0004d118 l       .debug_str	00000000 
0004d179 l       .debug_str	00000000 
0004d1da l       .debug_str	00000000 
0004d23b l       .debug_str	00000000 
0004d292 l       .debug_str	00000000 
0004d2e5 l       .debug_str	00000000 
0004d32d l       .debug_str	00000000 
0004d355 l       .debug_str	00000000 
0004d39d l       .debug_str	00000000 
0004d3b3 l       .debug_str	00000000 
0004d3fb l       .debug_str	00000000 
0004d430 l       .debug_str	00000000 
0004d478 l       .debug_str	00000000 
0004d4b3 l       .debug_str	00000000 
0004d4fb l       .debug_str	00000000 
0004d543 l       .debug_str	00000000 
0004d564 l       .debug_str	00000000 
0004d5ac l       .debug_str	00000000 
0004d5b7 l       .debug_str	00000000 
0004d5ff l       .debug_str	00000000 
0004d63c l       .debug_str	00000000 
0004d684 l       .debug_str	00000000 
0004d6dd l       .debug_str	00000000 
0004d725 l       .debug_str	00000000 
0004d741 l       .debug_str	00000000 
0004d789 l       .debug_str	00000000 
0004d835 l       .debug_str	00000000 
0004d87d l       .debug_str	00000000 
0004d89b l       .debug_str	00000000 
0004d8e3 l       .debug_str	00000000 
0004d8ed l       .debug_str	00000000 
0004d935 l       .debug_str	00000000 
0004d970 l       .debug_str	00000000 
0004d9b8 l       .debug_str	00000000 
0004da07 l       .debug_str	00000000 
0004da4f l       .debug_str	00000000 
0004da76 l       .debug_str	00000000 
0004dabe l       .debug_str	00000000 
0004dae8 l       .debug_str	00000000 
0004db30 l       .debug_str	00000000 
0004dbab l       .debug_str	00000000 
0004dbf3 l       .debug_str	00000000 
0004dc3b l       .debug_str	00000000 
0004dc51 l       .debug_str	00000000 
000170bf l       .debug_str	00000000 
0004dc99 l       .debug_str	00000000 
0004dce1 l       .debug_str	00000000 
0004dd29 l       .debug_str	00000000 
0004dd5a l       .debug_str	00000000 
0004dda2 l       .debug_str	00000000 
0004de06 l       .debug_str	00000000 
0004de4e l       .debug_str	00000000 
0000b963 l       .debug_str	00000000 
0004de96 l       .debug_str	00000000 
0004dede l       .debug_str	00000000 
0004deeb l       .debug_str	00000000 
0004df33 l       .debug_str	00000000 
0004df3d l       .debug_str	00000000 
0004df85 l       .debug_str	00000000 
0004df8e l       .debug_str	00000000 
0004dfd6 l       .debug_str	00000000 
0004dffe l       .debug_str	00000000 
0004e046 l       .debug_str	00000000 
0004e08e l       .debug_str	00000000 
0004e0b0 l       .debug_str	00000000 
0004e0f8 l       .debug_str	00000000 
0004e129 l       .debug_str	00000000 
0004e171 l       .debug_str	00000000 
0004e1b9 l       .debug_str	00000000 
0004e1f1 l       .debug_str	00000000 
0004e239 l       .debug_str	00000000 
0004e26e l       .debug_str	00000000 
0004e2b6 l       .debug_str	00000000 
0004e2df l       .debug_str	00000000 
0004e327 l       .debug_str	00000000 
0004e34b l       .debug_str	00000000 
0004e393 l       .debug_str	00000000 
0004e3b8 l       .debug_str	00000000 
0004e400 l       .debug_str	00000000 
0004e41d l       .debug_str	00000000 
0004e465 l       .debug_str	00000000 
0004e470 l       .debug_str	00000000 
0004e4b8 l       .debug_str	00000000 
0004e4e0 l       .debug_str	00000000 
0004e528 l       .debug_str	00000000 
0004e537 l       .debug_str	00000000 
0004e57f l       .debug_str	00000000 
0004e5c7 l       .debug_str	00000000 
0004e5e3 l       .debug_str	00000000 
0004e62b l       .debug_str	00000000 
0004e6a2 l       .debug_str	00000000 
0004e6ea l       .debug_str	00000000 
0004e761 l       .debug_str	00000000 
0004e7a9 l       .debug_str	00000000 
0004e7b2 l       .debug_str	00000000 
0004e7fa l       .debug_str	00000000 
0004e820 l       .debug_str	00000000 
0004e868 l       .debug_str	00000000 
0004e89b l       .debug_str	00000000 
0004e8e3 l       .debug_str	00000000 
0004e900 l       .debug_str	00000000 
0004e948 l       .debug_str	00000000 
0004e951 l       .debug_str	00000000 
0004e999 l       .debug_str	00000000 
0004e9e1 l       .debug_str	00000000 
0004ea05 l       .debug_str	00000000 
0000ba4c l       .debug_str	00000000 
0004ea4d l       .debug_str	00000000 
0004ea95 l       .debug_str	00000000 
0004eadd l       .debug_str	00000000 
0004ebd5 l       .debug_str	00000000 
0001b7ab l       .debug_str	00000000 
0004ec1d l       .debug_str	00000000 
0004ec65 l       .debug_str	00000000 
0004ecad l       .debug_str	00000000 
0004ecda l       .debug_str	00000000 
0000ba9d l       .debug_str	00000000 
0004ed22 l       .debug_str	00000000 
0004ed6a l       .debug_str	00000000 
0004edc7 l       .debug_str	00000000 
0004ee0f l       .debug_str	00000000 
0004ee18 l       .debug_str	00000000 
0004ee60 l       .debug_str	00000000 
0004ee7d l       .debug_str	00000000 
0004eec5 l       .debug_str	00000000 
0004eefb l       .debug_str	00000000 
0004ef43 l       .debug_str	00000000 
0004ef78 l       .debug_str	00000000 
0004efc0 l       .debug_str	00000000 
0004eff9 l       .debug_str	00000000 
0004f041 l       .debug_str	00000000 
0004f05d l       .debug_str	00000000 
0004f0a5 l       .debug_str	00000000 
0004f0ad l       .debug_str	00000000 
0004f0f5 l       .debug_str	00000000 
0004f110 l       .debug_str	00000000 
0004f158 l       .debug_str	00000000 
0004f180 l       .debug_str	00000000 
0004f1ca l       .debug_str	00000000 
0004f214 l       .debug_str	00000000 
0004f273 l       .debug_str	00000000 
0004f2d0 l       .debug_str	00000000 
0004f329 l       .debug_str	00000000 
0004f388 l       .debug_str	00000000 
0004f3e7 l       .debug_str	00000000 
0004f448 l       .debug_str	00000000 
0004f4ab l       .debug_str	00000000 
0004f513 l       .debug_str	00000000 
0004f575 l       .debug_str	00000000 
0004f5db l       .debug_str	00000000 
0004f63d l       .debug_str	00000000 
0004f6a2 l       .debug_str	00000000 
0004f705 l       .debug_str	00000000 
0004f761 l       .debug_str	00000000 
0004f7b8 l       .debug_str	00000000 
0004f811 l       .debug_str	00000000 
0004f864 l       .debug_str	00000000 
0004f8c0 l       .debug_str	00000000 
0004f926 l       .debug_str	00000000 
0004f97c l       .debug_str	00000000 
0004f9d9 l       .debug_str	00000000 
0004fa3b l       .debug_str	00000000 
0004fa94 l       .debug_str	00000000 
0004faef l       .debug_str	00000000 
0004fb4a l       .debug_str	00000000 
0004fba5 l       .debug_str	00000000 
0004fc02 l       .debug_str	00000000 
0004fc5f l       .debug_str	00000000 
0004fca5 l       .debug_str	00000000 
0004fcef l       .debug_str	00000000 
0004fd2f l       .debug_str	00000000 
0004fd6c l       .debug_str	00000000 
0004fdb0 l       .debug_str	00000000 
0004fdec l       .debug_str	00000000 
0004fe30 l       .debug_str	00000000 
0004fe79 l       .debug_str	00000000 
0004fe82 l       .debug_str	00000000 
0004fecb l       .debug_str	00000000 
0004fed4 l       .debug_str	00000000 
0004ff3d l       .debug_str	00000000 
0004ff9a l       .debug_str	00000000 
0004fffd l       .debug_str	00000000 
00050053 l       .debug_str	00000000 
000500a9 l       .debug_str	00000000 
00050102 l       .debug_str	00000000 
0005015a l       .debug_str	00000000 
000501be l       .debug_str	00000000 
00050244 l       .debug_str	00000000 
0005024a l       .debug_str	00000000 
000502d0 l       .debug_str	00000000 
000502d6 l       .debug_str	00000000 
00050358 l       .debug_str	00000000 
000503da l       .debug_str	00000000 
0005045d l       .debug_str	00000000 
00050464 l       .debug_str	00000000 
000504e7 l       .debug_str	00000000 
000504ee l       .debug_str	00000000 
00050574 l       .debug_str	00000000 
000505fa l       .debug_str	00000000 
0005067d l       .debug_str	00000000 
00050700 l       .debug_str	00000000 
00050782 l       .debug_str	00000000 
00050808 l       .debug_str	00000000 
0005088e l       .debug_str	00000000 
00050918 l       .debug_str	00000000 
000509a0 l       .debug_str	00000000 
00050a28 l       .debug_str	00000000 
00050a90 l       .debug_str	00000000 
00050af9 l       .debug_str	00000000 
00050b63 l       .debug_str	00000000 
00050bce l       .debug_str	00000000 
00050c2c l       .debug_str	00000000 
00050c8a l       .debug_str	00000000 
00050ce8 l       .debug_str	00000000 
00050d47 l       .debug_str	00000000 
00050da5 l       .debug_str	00000000 
00050e04 l       .debug_str	00000000 
00050e62 l       .debug_str	00000000 
00050ec1 l       .debug_str	00000000 
00050f20 l       .debug_str	00000000 
00050f7f l       .debug_str	00000000 
00050fdd l       .debug_str	00000000 
0005103c l       .debug_str	00000000 
0005109b l       .debug_str	00000000 
000510fa l       .debug_str	00000000 
00051159 l       .debug_str	00000000 
000511b8 l       .debug_str	00000000 
00051217 l       .debug_str	00000000 
00051276 l       .debug_str	00000000 
000512d5 l       .debug_str	00000000 
00051334 l       .debug_str	00000000 
00051393 l       .debug_str	00000000 
000513f2 l       .debug_str	00000000 
00051451 l       .debug_str	00000000 
000514b0 l       .debug_str	00000000 
0005150f l       .debug_str	00000000 
0005156e l       .debug_str	00000000 
000515cd l       .debug_str	00000000 
0005162c l       .debug_str	00000000 
0005168b l       .debug_str	00000000 
000516ea l       .debug_str	00000000 
0005174a l       .debug_str	00000000 
000517a9 l       .debug_str	00000000 
00051808 l       .debug_str	00000000 
00051867 l       .debug_str	00000000 
000518c7 l       .debug_str	00000000 
00051926 l       .debug_str	00000000 
00051985 l       .debug_str	00000000 
000519e4 l       .debug_str	00000000 
00051a44 l       .debug_str	00000000 
00015552 l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE
000173aa l     F .text	0000000a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E
000173b4 l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E
00015bbe l     F .text	000000e4 _ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE
00016be6 l     F .text	0000024c _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE
00015ab8 l     F .text	000000b0 _ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E
00015b68 l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE
000160e0 l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E
00015502 l     F .text	00000002 _ZN4core3ptr13drop_in_place17h000c7c147ade2111E
00015564 l     F .text	00000114 _ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E
00025b24 l     O .text	0000007b _ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E
00025b9f l     O .text	000001f0 _ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E
00025d90 l     O .text	00000458 _ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E
00025100 l     O .text	00000010 _ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE
00015b92 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE
00015b98 l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE
00015b8c l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E
00015504 l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE
00000000 l    df *ABS*	00000000 semihosting_console.c
000173c0 l     F .text	00000024 __semihost
000173e4 l     F .text	00000010 debugger_connected
000173f4 l     F .text	0000002e semihost_write
000174c8 l     F .text	0000001c semihosting_console_write_ch
20006f04 l     O .bss	00000004 semihost_mbuf
20000100 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
20006f08 l     O .bss	00000010 avail_queue
20006f18 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20006f24 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
00017698 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_gpio.c
000176ec l     F .text	00000050 hal_gpio_irq_handler
0001773c l     F .text	0000002c hal_gpio_irq_setup
00017768 l     F .text	0000001c hal_gpio_find_empty_slot
00017784 l     F .text	00000038 hal_gpio_find_pin
20006f28 l     O .bss	00000040 hal_gpio_irqs
20006f68 l     O .bss	00000001 irq_setup.8906
00000000 l    df *ABS*	00000000 hal_i2c.c
00017918 l     F .text	0000007a hal_i2c_delay_us
00017994 l     F .text	00000024 hal_i2c_resolve
000179b8 l     F .text	0000001c hal_i2c_convert_status
000179d4 l     F .text	00000012 read_gpio_inbuffer
000179e6 l     F .text	000000a2 hal_i2c_clear_bus
000261f8 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_spi.c
00017d84 l     F .text	0000006e nrf52_irqm_handler
00017e0c l     F .text	00000014 hal_spi_stop_transfer
00017e20 l     F .text	0000004c hal_spi_config_slave
00017e6c l     F .text	000000b8 hal_spi_init_master
00017f24 l     F .text	000000e0 hal_spi_config_master
00026200 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
00018308 l     F .text	0000000e nrf52_hal_wdt_default_handler
00018318 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00018530 l     F .text	00000016 os_main
20007070 l     O .bss	00002000 g_os_main_stack
20006f70 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
00018840 l     F .text	0000005c os_dev_add
0001889c l     F .text	00000026 os_dev_initialize
000188c2 l     F .text	00000020 os_dev_init
20009070 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20009078 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
00018dec l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00018f00 l     F .text	00000010 os_msys_find_biggest_pool
00018f10 l     F .text	0000002c os_msys_find_pool
00018f88 l     F .text	00000044 os_msys_init_once
20009088 l     O .bss	00004900 os_msys_1_data
2000d988 l     O .bss	0000000c os_msys_1_mbuf_pool
2000d994 l     O .bss	0000001c os_msys_1_mempool
2000010c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
000191e4 l     F .text	00000020 os_sanity_check_list_lock
00019204 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00019678 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
00019768 l     F .text	0000004c os_deltatime
000197b4 l     F .text	0000005c os_time_tick
2000d9b8 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
00019ad0 l       .text	00000000 SVC_User
00019aee l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
00019b90 l       .text	00000000 test1
00019b84 l       .text	00000000 loop1
00019b96 l       .text	00000000 res1
00019bb2 l       .text	00000000 test2
00019bba l       .text	00000000 done
00019ba6 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00019bc6 l       .text	00000000 test1
00019bc2 l       .text	00000000 loop1
00019bd4 l       .text	00000000 test2
00019bd0 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
00019c3e l     F .text	000000c0 ui2a
00019cfe l     F .text	00000020 i2a
00019d1e l     F .text	00000030 a2d
00019d4e l     F .text	00000036 a2i
00019d84 l     F .text	0000002a putf
00019db0 l     F .text	0000011c putchw
00019ecc l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0001a250 l     F .text	00000004 stdin_read
0001a254 l     F .text	00000010 stdout_write
20000124 l     O .data	00000004 _stdin
20000128 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001a304 l     F .text	00000028 nrf52k_flash_wait_ready
0001a32c l     F .text	00000054 nrf52k_flash_erase_sector
0001a380 l     F .text	00000004 nrf52k_flash_init
0001a384 l     F .text	00000020 nrf52k_flash_sector_info
0001a3a4 l     F .text	000000d0 nrf52k_flash_write
0001a474 l     F .text	0000000e nrf52k_flash_read
000263b8 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001a484 l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
0001a690 l     F .text	0000000a nrf_read_timer_cntr
0001a69c l     F .text	000000b4 nrf_timer_set_ocmp
0001a750 l     F .text	0000000a nrf_timer_disable_ocmp
0001a75a l     F .text	0000000a nrf_rtc_disable_ocmp
0001a764 l     F .text	00000054 hal_timer_read_bsptimer
0001a7b8 l     F .text	00000076 hal_timer_chk_queue
0001a82e l     F .text	0000002c hal_timer_irq_handler
000263d4 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001a9f4 l     F .text	00000034 nrf52_periph_create_timers
0001aa28 l     F .text	00000020 nrf52_periph_create_i2c
0001aa48 l     F .text	00000020 nrf52_periph_create_spi
000263ec l     O .text	0000000c hal_i2c1_cfg
000263f8 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
0001aa7c l     F .text	00000028 sensor_mgr_remove
0001aaa4 l     F .text	00000060 sensor_mgr_insert
0001ab04 l     F .text	0000000a sensor_type_traits_empty
0001ab10 l     F .text	0000000c sensor_mgr_evq_set
0001ab4a l     F .text	0000005c sensor_read_data_func
0001aba8 l     F .text	00000048 sensor_base_ts_update_event
0001abf0 l     F .text	00000050 sensor_up_timestamp
0001ac78 l     F .text	000000a0 sensor_mgr_init
0001aee4 l     F .text	0000007c sensor_mgr_wakeup_event
0001ad42 l     F .text	00000032 sensor_update_nextrun
0001ad74 l     F .text	0000001e sensor_calc_nextrun_delta
0001ad94 l     F .text	00000024 sensor_find_min_nextrun_sensor
0001ae6c l     F .text	0000004a sensor_mgr_poll_bytype
0001aeb6 l     F .text	0000002e sensor_poll_per_type_trait
2000d9ec l     O .bss	00000078 sensor_notify_evt_area
2000da64 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 sensor_coap.c
2000da80 l     O .bss	00000008 oc_sem
2000da88 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000da8c l     O .bss	0000000c hw_id
2000da98 l     O .bss	00000004 hw_id_len
2000daa0 l     O .bss	00000008 sensor_node_address
2000daa8 l     O .bss	00000037 sensor_node_names_buf
20000130 l     O .data	00000014 sensor_node_names
00026410 l     O .text	0000000c COLLECTOR_NODE_HW_ID
0002641c l     O .text	0000003c SENSOR_NODE_HW_IDS
000264b8 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
0001b108 l     F .text	00000050 config_device
2000dae0 l     O .bss	00000014 adc_1_itf_temp_stub
2000daf8 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001b1b4 l     F .text	00000004 temp_stub_close
0001b1b8 l     F .text	0000001c temp_stub_sensor_get_config
0001b1d4 l     F .text	00000026 temp_stub_open
0001b2b0 l     F .text	0000007c temp_stub_sensor_read
000264fc l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
0001b354 l     F .text	00000030 oc_buffer_tx
0001b384 l     F .text	0000002c oc_buffer_rx
2000dbb8 l     O .bss	00000018 oc_inq
2000dbd0 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
2000dbe8 l     O .bss	000000c8 oc_client_cb_area
2000dcb0 l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
2000dccc l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000dcd0 l     O .bss	0000001c oc_rep_objects
2000dcec l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 flash_map.c
0001b4d8 l     F .text	00000078 flash_map_read_mfg
2000dd1c l     O .bss	00000078 mfg_areas.9056
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0001b62c l     F .text	00000094 mfg_seek_next_aux
0001b6c0 l     F .text	00000070 mfg_read_mmr
0001b730 l     F .text	00000054 mfg_read_next_mmr
0001b784 l     F .text	0000003c mfg_open_flash_area
0001b7c0 l     F .text	00000044 mfg_read_tlv_body
0001b88c l     F .text	0000004e mfg_read_mmr_refs
2000dd94 l     O .bss	00000001 mfg_initialized
2000dd98 l     O .bss	00000018 mfg_mmrs
2000ddb0 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001b8f2 l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memclr.c
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 lib_a-aeabi_memset-soft.o
00000000 l    df *ABS*	00000000 libchip8.bde0u64m-cgu.0
00000afc l       .debug_str	00000000 
0001ab0e l       .debug_str	00000000 
0001ab65 l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
0001abb1 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0001abb9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
000156d0 g     F .text	00000004 _ZN4core5panic8Location4line17h650a566d9637c91dE
0000886c g     F .text	0000009c _ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE
00008616 g     F .text	000000ba main
00009dfc g     F .text	0000070a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E
00018b10 g     F .text	00000040 os_eventq_remove
0001995c g     F .text	00000018 os_arch_init
00019b78 g     F .text	00000048 memcmp
00011e96 g     F .text	00000012 _ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE
00014874 g     F .text	00000024 _ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE
000115c2 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E
0001220c g     F .text	000000ee _ZN3log17__private_api_log17h076f8f4ccc99f19bE
0001510a g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE
00014f92 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E
00014378 g     F .text	00000002 _ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E
00015700 g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E
0000a574 g     F .text	0000001e .hidden _ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE
000091a8 g     F .text	00000010 _ZN4core3ptr5write17h7ef3fa6b6f80daebE
000171d2 g     F .text	000000f4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hc96955e2b836ab47E
2000ded0 g     O .bss	0000001c nrf52_hal_timer0
0000918e g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE
0001ad38 g     F .text	0000000a sensor_unlock
0000a95a g     F .text	00000036 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E
00011616 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E
00008ffa g     F .text	0000006c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E
00019230 g     F .text	00000024 os_sanity_check_register
0001b208 g     F .text	0000007c temp_stub_init
000192d0 g     F .text	00000054 os_sched_insert
2000ddb4 g     O .bss	00000001 g_silence_console
00012528 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE
00014d88 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001b990 g     F .text	00000034 hal_bsp_hw_id
00008164  w    F .text	00000002 NFCT_IRQHandler
000154f0 g     F .text	00000004 .hidden _ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE
00008d66 g     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE
000147ba g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE
00008ba4 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E
20000114 g     O .data	00000008 g_os_run_list
0001b414 g     F .text	00000020 oc_send_buffer
00011398 g     F .text	00000112 _ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E
00019a04 g     F .text	00000030 os_arch_start
0000e968 g     F .text	00000024 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hbe953f3cc8769e4cE
0001b02c g     F .text	0000001a is_standalone_node
00014c6c g     F .text	00000008 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h48c974e346f24094E
000189fc g     F .text	00000010 os_eventq_init
000165be g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E
000125e0 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E
00015ca2 g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E
00011600 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E
00008e5c g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE
0001530c g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE
0001af60 g     F .text	00000028 init_sensor_coap
0001501e g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE
0001b434 g     F .text	0000004c oc_send_multicast_message
00011bb6 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E
0000eaa2 g     F .text	000000a8 _ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E
0001657a g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE
2000def0 g     O .bss	00000034 sensor_mgr
00017564 g     F .text	0000002c console_dump
0000ac5c g     F .text	0000001c _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf6f4911cb4702538E
000193fc g     F .text	00000078 os_sched_wakeup
0000ea26 g     F .text	00000026 _ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE
000124b8 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E
00017082 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6ff113c3a96d4445E
00008bdc g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E
0001b8f0 g     F .text	00000002 _fini
00018834 g     F .text	0000000a os_cputime_get32
000116c6 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E
0001421a g     F .text	00000132 _ZN6mynewt3hal4GPIO4init17h54c34caf27320956E
2000ddb5 g     O .bss	00000001 g_console_input_ignore
000198ec g     F .text	00000014 os_arch_ctx_sw
000124fe g     F .text	0000001a _ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E
00014cc4 g     F .text	00000058 _ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E
00019b3a g     F .text	0000000c SysTick_Handler
0000ef80 g     F .text	00000026 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hd8fc987b7fb948dbE
0000f0ea g     F .text	0000002a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc22918223fd59462E
0001afa0 g     F .text	00000070 get_hardware_id
00008168 g     F .text	00000010 _sbrkInit
00011fb8 g     F .text	0000003c _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E
0001162c g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE
000114e2 g     F .text	0000004c _ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h1051abda59747a6bE
000094e0 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE
00012532 g     F .text	00000012 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E
00019c12 g     F .text	0000001c strcmp
2000dde8 g     O .bss	00000050 g_idle_task
0000f7e0 g     F .text	000000c4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E
000189ec g     F .text	00000010 os_dev_reset
0000958c g     F .text	00000262 _ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E
0001954c g     F .text	00000010 os_sem_init
0000eb4a g     F .text	00000106 _ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E
000174e4 g     F .text	00000070 console_printhex
000143e4 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE
0000e9b0 g     F .text	00000076 _ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE
000265bc g       .text	00000000 __exidx_start
0001b010 g     F .text	0000001c is_collector_node
00019bda g     F .text	00000038 memset
00008164  w    F .text	00000002 WDT_IRQHandler
00016e90 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h096b8fea83a9dea7E
00017474 g     F .text	00000054 console_buffer
00018a0c g     F .text	0000000a os_eventq_inited
000176ac g     F .text	0000000c sysinit_end
00014f40 g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE
0001539c g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE
00008020 g       .text	00000000 __isr_vector_start
00008164  w    F .text	00000002 TIMER3_IRQHandler
00008164  w    F .text	00000002 MWU_IRQHandler
00015678 g     F .text	0000004a _ZN4core6result13unwrap_failed17h10957bfda7d5e5f2E
2000df88 g       .bss	00000000 __HeapBase
0000eec0 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h9d41144da998d389E
0000948c g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E
00014c5e g     F .text	0000000e .hidden _ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h8e5f04233c93701aE
0001434c g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E
0000f218 g     F .text	00000128 .hidden _ZN3app5chip88on_start17h13652dc8e27bf6d4E
00014554 g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E
0001b590 g     F .text	00000026 flash_area_read
000124e8 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E
0001b4a6 g     F .text	00000002 oc_register_ip4
000090b2 g     F .text	00000046 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E
0001b4a8 g     F .text	00000002 oc_register_ip6
0000842c g     F .text	000001d4 SystemInit
00011240 g     F .text	00000060 _ZN22piet_embedded_graphics7display18set_display_pixels17he48c5c43fd96ddebE
00014e16 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE
0001b910 g     F .text	00000028 hal_flash_init
000189b4 g     F .text	00000036 os_dev_close
00026554 g     O .text	00000048 sysflash_map_dflt
0000f452 g     F .text	0000020c _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE
0001a2f8 g     F .text	0000000c hal_bsp_init
00008c88 g     F .text	00000032 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E
0000f8a4 g     F .text	00000008 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha9851d0b0cdc4725E
00011cb2 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
00010166 g     F .text	00000210 _ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE
00009a26 g     F .text	0000012c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE
00011b78 g     F .text	00000032 _ZN4core3ptr4read17h2038b0ecb0975c4fE
0001bcec g     F .text	00000004 __aeabi_memcpy4
00018150 g     F .text	0000002c hal_spi_set_txrx_cb
0001bce4 g     F .text	00000006 __aeabi_memclr8
000086d0 g     F .text	00000102 rust_begin_unwind
2000ddb8 g     O .bss	00000004 console_is_midline
0001bce4 g     F .text	00000006 __aeabi_memclr4
0000f0ba g     F .text	00000030 .hidden _ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17hf8eddcd100cb7a54E
000080f8 g       .text	00000000 __isr_vector_end
00017c48 g     F .text	0000013c hal_i2c_master_read
00011366 g     F .text	0000001a .hidden _ZN4core3ops8function6FnOnce9call_once17h59e116d6918016e9E
00019f30 g     F .text	0000025c tfp_format
000153cc g     F .text	0000011c .hidden _ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E
000152dc g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE
0001ae04 g     F .text	00000068 sensor_read
00009174 g     F .text	00000010 _ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E
0001bcec g     F .text	00000004 __aeabi_memcpy
0001bcec g     F .text	00000004 __aeabi_memcpy8
2000df24 g     O .bss	00000020 st_up_osco
00019a34 g     F .text	0000005c os_arch_os_start
0001ade6 g     F .text	0000001e sensor_init
0000ad80 g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E
20000000 g       .bss	00000000 _ram_start
0001985c g     F .text	00000026 os_time_delay
00011228 g     F .text	00000018 .hidden _ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E
0001b4a4 g     F .text	00000002 oc_register_gatt
20004a6c g     O .bss	00000004 _ZN3log20MAX_LOG_LEVEL_FILTER17h20753a6176f34564E
0001b98c g     F .text	00000004 hal_bsp_hw_id_len
000187f4 g     F .text	00000034 os_callout_wakeup_ticks
00018b6a g     F .text	00000026 os_mqueue_get
00017a88 g     F .text	00000098 hal_i2c_init
000115aa g     F .text	00000018 .hidden _ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h0340384168a45934E
0001644c g     F .text	0000012e _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E
00016e90 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E
000089ac g     F .text	00000042 _ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E
00008164  w    F .text	00000002 TIMER4_IRQHandler
0002484d g     O .text	00000050 _ZN8libchip87CHARBUF17h227c6d0d7e24574cE
000152ac g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E
000194fc g     F .text	00000022 os_sched
00008d78 g     F .text	00000020 _ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00011cf8 g     F .text	00000014 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE
2000fe50 g       *ABS*	000001b0 __StackLimit
0001ab1c g     F .text	0000002e sensor_mgr_match_bytype
00011bcc g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE
0000aadc g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE
00019038 g     F .text	00000014 os_mutex_init
00009066 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E
00009db8 g     F .text	00000044 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE
0000f1b2 g     F .text	0000000e _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfc3726000bdb855aE
2000ddc0 g     O .bss	00000028 nrf52_hal_spi0
00008614 g     F .text	00000002 _init
00000020 g       *ABS*	00000000 _imghdr_size
00008164  w    F .text	00000002 RTC1_IRQHandler
00011dde g     F .text	00000008 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E
00008164  w    F .text	00000002 PDM_IRQHandler
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
0001521c g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE
00014b9e g     F .text	00000022 _ZN4core3cmp3Ord3min17hc89b724701767be9E
20000124 g       .data	00000000 __aeabi_unwind_cpp_pr0
0000931c g     F .text	0000001a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E
00009462 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE
00008c80 g     F .text	00000008 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E
000126f8 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E
00018fdc g     F .text	00000028 os_msys_get_pkthdr
0001b284 g     F .text	0000002c temp_stub_get_raw_temperature
00019474 g     F .text	0000003c os_sched_os_timer_exp
0000efa6 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h85ad829ef61f8d1fE
000188e4 g     F .text	00000040 os_dev_create
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
00019220 g     F .text	00000010 os_sanity_check_init
00015762 g     F .text	0000022c _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE
00008164  w    F .text	00000002 SAADC_IRQHandler
00014b6c g     F .text	00000032 .hidden _ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE
00018828 g     F .text	0000000c os_cputime_init
0000ac02 g     F .text	00000030 _ZN4core3any6TypeId2of17h3f51c8cccab069bdE
00018af8 g     F .text	00000018 os_eventq_run
00012198 g     F .text	0000000c _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE
00019004 g     F .text	00000034 os_msys_init
0001491c g     F .text	0000000e .hidden _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E
00014db2 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E
000198e2 g     F .text	0000000a timer_handler
00011790 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE
000154f4 g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E
000093f2 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E
00008cba g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E
000154ec g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E
00015740 g     F .text	00000022 _ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E
000080f8 g     F .text	0000005c Reset_Handler
000148f0 g     F .text	0000002c _ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE
00008020 g       .text	000000d8 __isr_vector
00017082 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17heaf2297ac445d947E
000145ea g     F .text	0000002a .hidden _ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE
0001a18c g     F .text	00000008 vfprintf
000143d0 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E
00011d24 g     F .text	0000000a _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E
00008984 g     F .text	00000028 _ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E
00011d82 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E
00018c0a g     F .text	00000036 os_mbuf_get_pkthdr
00008164  w    F .text	00000002 PWM0_IRQHandler
0001527c g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E
00000000 g       .svc_table	00000000 SVC_Count
0000eed4 g     F .text	00000012 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6e7fb991422ea45dE
0001694e g     F .text	00000298 _ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE
000087d2 g     F .text	0000009a _ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE
000156d4 g     F .text	0000002c _ZN4core9panicking5panic17h24d1dd0a9d540834E
00019912 g     F .text	0000000a os_arch_in_critical
0000e9a0 g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E
000192c0 g     F .text	00000010 os_sanity_init
00017082 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E
000183d4 g     F .text	0000004c __assert_func
0000ef5e g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17he0c9c1743ed48494E
0001500a g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E
00014710 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
00018eaa g     F .text	0000001e os_memblock_put_from_cb
00019a94 g     F .text	00000014 os_set_env
00011380 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h63142b18dacbc787E
2000deac g     O .bss	00000004 g_os_last_ctx_sw_time
00012544 g     F .text	0000000a _ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE
00017644 g     F .text	00000048 console_printf
0001255a g     F .text	00000016 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E
0000aa2c g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE
00011bf8 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE
00012404 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E
000151bc g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E
00019aa8 g     F .text	00000006 os_arch_init_task_stack
0001b87c g     F .text	00000010 mfg_open
00017082 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb33f6f1f0114a92bE
0001b3d8 g     F .text	00000030 oc_ri_mem_init
00014a30 g     F .text	0000013c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E
0000f18e g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h116a6636383259eeE
000097ee g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE
0001a2e8 g     F .text	00000010 hal_bsp_flash_dev
0001b5b8 g     F .text	00000070 flash_map_init
2000dec0 g     O .bss	00000004 g_os_time
00010518 g     F .text	0000002e .hidden _ZN3app5chip812handle_touch17h09fa961dda8dcb87E
00019b46 g     F .text	0000001e os_default_irq_asm
00018420 g     F .text	00000098 os_default_irq
200000e4 g     O .data	00000004 SystemCoreClock
00018088 g     F .text	00000068 hal_spi_disable
000125a0 g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E
00009146 g     F .text	0000002e _ZN6mynewt3sys7console6buffer17h6e460748855d110aE
0001b4aa g     F .text	00000002 oc_register_lora
00018c8c g     F .text	000000a8 os_mbuf_append
0001b158 g     F .text	0000005c temp_stub_create
0001b938 g     F .text	00000054 hal_flash_read
00017424 g     F .text	00000048 console_flush
00018674 g     F .text	0000001a os_start
00014c8e g     F .text	00000036 _ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E
0001a86c g     F .text	00000060 hal_timer_init
00011640 g     F .text	00000086 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E
0001a264 g     F .text	00000010 rust_sysinit
00008164  w    F .text	00000002 I2S_IRQHandler
00017554 g     F .text	00000010 console_printint
00019520 g     F .text	0000002c os_sched_resort
00010546 g     F .text	00000270 .hidden _ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE
00026394 g     O .text	00000008 MemFile_methods
0001a238 g     F .text	00000018 fmemopen_w
000133f0 g     F .text	00000126 _ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E
00018004 g     F .text	00000038 hal_spi_config
0001bce0  w    F .text	00000002 .hidden __aeabi_ldiv0
00018ef0 g     F .text	00000010 os_mempool_module_init
000194f0 g     F .text	0000000c os_sched_next_task
0000ed8e g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$8shutdown17hb4ffb829681b047bE
00017842 g     F .text	00000034 hal_gpio_read
000186c8 g     F .text	0000001a os_callout_init
00018fcc g     F .text	00000010 os_msys_reset
0001a194 g     F .text	00000024 printf
00008156  w    F .text	00000002 HardFault_Handler
0001b9e4 g     F .text	00000000 .hidden __aeabi_uldivmod
00019884 g     F .text	00000038 os_gettimeofday
000175d0 g     F .text	0000001e console_write
0001133a g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E
0001536c g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E
00016416 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE
000098ea g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE
00018554 g     F .text	00000070 os_init_idle_task
00019974 g     F .text	0000008c os_arch_os_init
0000942a g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E
000185c4 g     F .text	000000b0 os_init
2000de98 g     O .bss	00000008 g_os_mempool_list
000098e0 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE
00008184 g     F .text	00000010 hal_debugger_connected
00011c0e g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E
000175cc g     F .text	00000004 semihosting_console_init
0001b816 g     F .text	0000001a mfg_seek_next_with_type
00019104 g     F .text	000000e0 os_mutex_pend
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
00017820 g     F .text	00000022 hal_gpio_write
00008600 g     F .text	00000014 _start
00011cf0 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE
00011d58 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE
0001b8dc g     F .text	00000014 __wrap_coap_receive
000151ec g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E
2000ddbc g     O .bss	00000001 sysinit_active
0000ac78 g     F .text	00000108 _ZN8libchip814Chip8$LT$T$GT$3new17hca880a1e3fbd9a67E
0001261c g     F .text	0000006e .hidden _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E
00014468 g     F .text	0000002a _ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE
0001a208 g     F .text	0000002e memfile_write
0001bce0  w    F .text	00000002 .hidden __aeabi_idiv0
00018548 g     F .text	0000000c os_started
0000ac32 g     F .text	00000016 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h1a1e70438bc017caE
0001b3b0 g     F .text	00000028 oc_buffer_init
0001437a g     F .text	00000056 _ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE
0000940e g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E
2000dea0 g     O .bss	0000000c g_os_sanity_check_mu
000091b8 g     F .text	0000002c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
00014d1c g     F .text	00000042 _ZN4core3ptr4read17h9c6a8e2989f962ccE
0000ed9e g     F .text	00000054 _ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E
0001bce4 g     F .text	00000006 __aeabi_memclr
0001bcf0 g     F .text	0000009a __aeabi_memset4
0000eeac g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h704adbbd229a4ae6E
00012784 g     F .text	00000a7a _ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E
0001641e g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE
00012570 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E
0001981c g     F .text	00000040 os_time_advance
0001803c g     F .text	0000004c hal_spi_enable
0001b844 g     F .text	00000038 mfg_init
00013e9a g     F .text	00000010 _ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E
000089ee g     F .text	0000000a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc4148eaa15af1e8eE
2000de38 g     O .bss	00000050 g_os_main_task
0001bcf0 g     F .text	0000009a __aeabi_memset8
00016eee g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hcd88e3dc15351fceE
0000f65e g     F .text	000000d4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE
00008c74 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE
000265d4 g       .ARM.exidx	00000000 __exidx_end
00008164  w    F .text	00000002 PWM1_IRQHandler
20000148 g     O .bss	00000018 _ZN22piet_embedded_graphics7display7DISPLAY17ha0ff10e671b220f2E
00015a60 g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE
00008c02 g     F .text	0000004e _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE
000172c6 g     F .text	000000e4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17hea84eef47d2fd641E
000176b8 g     F .text	00000034 NVIC_Relocate
00014bc0 g     F .text	0000009e _ZN4core3cmp6min_by17hbd80813895a56a69E
000176a0 g     F .text	0000000c sysinit_start
000263a0 g     O .text	00000018 nrf52k_flash_dev
0001a8cc g     F .text	000000f8 hal_timer_config
000144e4 g     F .text	0000004c _ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E
0001a1f4 g     F .text	00000014 vprintf
00009098 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E
0001746c g     F .text	00000008 disable_buffer
00015032 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E
2000de88 g     O .bss	00000004 g_os_started
000156c8 g     F .text	00000008 _ZN4core5panic9PanicInfo7payload17h9302c8d957737573E
20000144 g       .bssnz	00000000 __bssnz_end__
00018950 g     F .text	00000020 os_dev_lookup
00009310 g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E
000183b0 g     F .text	00000010 hal_watchdog_enable
2000dec4 g     O .bss	0000000c g_hal_os_tick
00014fa4 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E
0001990c g     F .text	00000006 os_arch_restore_sr
00018720 g     F .text	00000078 os_callout_reset
000098f4 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE
0001b830 g     F .text	0000000a mfg_read_tlv_flash_area
000125bc g     F .text	00000024 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E
0000815a  w    F .text	00000002 BusFault_Handler
00018b58 g     F .text	00000012 os_mqueue_init
0001524c g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E
00014614 g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E
0001b1fa g     F .text	0000000e temp_stub_default_cfg
000125f0 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E
0000f8ac g     F .text	000000f6 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E
00008020 g       .imghdr	00000000 __text
000186e4 g     F .text	0000003c os_callout_stop
00008908 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E
000081c0 g     F .text	0000004c hal_system_clock_start
00018c54 g     F .text	00000024 os_mbuf_free_chain
000091e4 g     F .text	0000000a .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E
0001a274 g     F .text	00000030 mem_init_mbuf_pool
00012614 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E
00011388 g     F .text	00000010 _ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4a745471c1d57141E
0001254e g     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E
00014fb6 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E
00017b20 g     F .text	00000128 hal_i2c_master_write
0000add6 g     F .text	00000052 _ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E
00008164  w    F .text	00000002 QDEC_IRQHandler
0000f1ec g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE
0000ac48 g     F .text	00000014 _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h939acc3a20dd048cE
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
00012766 g     F .text	0000001e _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E
000119cc g     F .text	0000003a _ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E
000114aa g     F .text	00000038 _ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hc4675c1f0b8e1d41E
00018b50 g     F .text	00000008 os_eventq_dflt_get
0001ad20 g     F .text	00000018 sensor_lock
000112a0 g     F .text	0000003a .hidden _ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE
000115d8 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE
000175f8 g     F .text	0000004c console_pkg_init
20000104 g     O .data	00000004 sysinit_panic_cb
00018c78 g     F .text	00000014 os_mbuf_len
00018c40 g     F .text	00000014 os_mbuf_free
00011be2 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE
000121a4 g     F .text	0000000a _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE
00008194 g     F .text	0000002c hal_system_reset
0000ae28 g     F .text	00003b40 _ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE
000175ee g     F .text	00000008 console_blocking_mode
0000a59a g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE
00009b52 g     F .text	00000266 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE
000115ec g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E
0001aa68 g     F .text	00000010 nrf52_periph_create
00019254 g     F .text	0000006c os_sanity_run
0000841c g     F .text	00000010 SystemCoreClockUpdate
0000f172 g     F .text	0000001c _ZN4core4iter6traits8iterator8Iterator7flatten17hb125ae9dc567cfd9E
000143ea g     F .text	0000007e .hidden _ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE
00014530 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E
0000ec50 g     F .text	0000007e _ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E
00018e64 g     F .text	00000014 os_mempool_init
0002639c g     O .text	00000004 stdout
00011542 g     F .text	00000024 .hidden _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h27d5684c70bb37e8E
0000ab8c g     F .text	0000000e .hidden _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE
00018924 g     F .text	0000002c os_dev_initialize_all
00008d98 g     F .text	000000b4 _ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E
0000f7cc g     F .text	00000014 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbb5c150f8fc596c2E
00014fe0 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE
000184b8 g     F .text	00000078 os_idle_task
00008e4c g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h1982c2483e0a2028E
00015122 g     F .text	0000000a .hidden _ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE
00009970 g     F .text	000000b6 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE
0000f732 g     F .text	0000009a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE
00016114 g     F .text	00000302 _ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE
0001b550 g     F .text	00000040 flash_area_open
00008164 g     F .text	00000002 Default_Handler
000156c6 g     F .text	00000002 _ZN4core5panic8Location6caller17h4b6b61f9498709a3E
0000f098 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E
00009336 g     F .text	000000bc _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E
00018f3c g     F .text	0000004c os_msys_register
000091ee g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E
2000d9b0 g     O .bss	00000004 g_os_sanity_check_list
0000a990 g     F .text	00000066 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E
00011d2e g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE
00011908 g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E
000180f0 g     F .text	00000060 hal_spi_init
00008164  w    F .text	00000002 RNG_IRQHandler
0001ac5c g     F .text	00000010 sensor_mgr_unlock
2000df80 g     O .bss	00000004 flash_map_entries
00016e32 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17hb1f1dec5462292d8E
0001512c g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E
0001b4ac g     F .text	00000002 oc_register_serial
00008178 g     F .text	0000000c hal_system_init
00014864 g     F .text	00000010 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E
0000a5c4 g     F .text	00000396 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E
00008164  w    F .text	00000002 GPIOTE_IRQHandler
00011ea8 g     F .text	000000aa _ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001b804 g     F .text	00000012 mfg_seek_next
000121ae g     F .text	00000008 _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE
2000011c g     O .data	00000008 g_os_sleep_list
00015e84 g     F .text	0000025c _ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E
00018bce g     F .text	0000000a os_mbuf_pool_init
2000de90 g     O .bss	00000008 g_callout_list
00019360 g     F .text	0000000c os_sched_set_current_task
00018798 g     F .text	0000005c os_callout_tick
0000ecce g     F .text	000000c0 _ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE
0000920a g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE
00011e10 g     F .text	0000007c _ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E
0000f076 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E
00018338 g     F .text	00000078 hal_watchdog_init
2000deb4 g     O .bss	00000001 g_task_id
00017158 g     F .text	0000007a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E
0000a592 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17hef1277471241eea2E
00018970 g     F .text	00000044 os_dev_open
2000deb0 g     O .bss	00000004 g_current_task
000154e8 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE
20000148 g       .bss	00000000 __bss_start__
0001509e g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E
00008c68 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE
00017df4 g     F .text	00000018 nrf52_spi0_irq_handler
0001ad18 g     F .text	00000008 sensor_pkg_init
0001b32c g     F .text	00000028 temp_stub_config
00018b90 g     F .text	0000003e os_mqueue_put
000172c6 g     F .text	000000e4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE
0001817c g     F .text	000000ac hal_spi_txrx
00008164  w    F .text	00000002 RTC2_IRQHandler
00014c74 g     F .text	0000001a _ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3601a500030acd5E
00019354 g     F .text	0000000c os_sched_get_current_task
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00012420 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E
0001b628 g     F .text	00000002 modlog_init
00018228 g     F .text	000000e0 hal_spi_txrx_noblock
00016426 g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE
00009184 g     F .text	0000000a _ZN6mynewt3sys7console5flush17h78b2f38352f0d691E
00008164  w    F .text	00000002 TEMP_IRQHandler
00008fd6 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE
00019324 g     F .text	00000030 os_sched_ctx_sw_hook
0001adb8 g     F .text	0000002e sensor_mgr_register
00011566 g     F .text	00000044 .hidden _ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE
00015678 g     F .text	0000004a _ZN4core6option18expect_none_failed17h54d938081af97677E
0000f406 g     F .text	0000000a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17hd3173c320d2551cfE
00015cc4 g     F .text	000001c0 _ZN4core3fmt5write17hd95ac78ed22a2252E
00008154  w    F .text	00000002 NMI_Handler
00014362 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE
0000ef3c g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE
00009286 g     F .text	0000008a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE
00008e54 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E
00011baa g     F .text	0000000c _ZN4core3ptr5write17h4a80332de2cee3d3E
00018bd8 g     F .text	00000032 os_mbuf_get
2000deb8 g     O .bss	00000008 g_os_task_list
00008a58 g     F .text	0000014c _ZN6mynewt4Strn8validate17h1102378208cc75cdE
0001598e g     F .text	000000d2 _ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E
0001a1b8 g     F .text	0000003a vsnprintf
00013238 g     F .text	00000090 _ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E
0000f1a0 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h1647783578bb3807E
0001904c g     F .text	000000b8 os_mutex_release
000121b6 g     F .text	00000056 _ZN3log6logger17hf609e7cc1c031552E
0000f114 g     F .text	0000005e .hidden _ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E
00011f6a g     F .text	0000004e _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E
0001ac6c g     F .text	0000000c sensor_mgr_evq_get
00014898 g     F .text	00000058 _ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E
00011d0c g     F .text	00000018 _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E
2000de8c g     O .bss	00000004 g_os_idle_ctr
000177bc g     F .text	0000002c hal_gpio_init_in
00011ca8 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE
000098fe g     F .text	00000036 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E
00008164  w    F .text	00000002 TIMER1_IRQHandler
0001aa78 g     F .text	00000002 sensor_dev_create
0000ab9a g     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E
0001182c g     F .text	0000008e _ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE
00008164  w    F .text	00000002 TIMER0_IRQHandler
00008a0c g     F .text	00000010 _ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE
000177e8 g     F .text	00000038 hal_gpio_init_out
0000f410 g     F .text	00000042 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E
00008e76 g     F .text	00000160 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE
0001193c g     F .text	00000012 _ZN4core3mem4swap17hc4afbec7b5ffb125E
0000950a g     F .text	0000003e .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE
200000d8 g       .data	00000000 __data_start__
00019810 g     F .text	0000000c os_time_get
000156c8 g     F .text	00000008 _ZN4core5panic8Location4file17h61e77cb122865fdbE
0000a506 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E
00018ec8 g     F .text	00000026 os_memblock_put
000132c8 g     F .text	00000128 _ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE
0001936c g     F .text	00000090 os_sched_sleep
00011ce6 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE
0001ac40 g     F .text	0000001c sensor_mgr_lock
0001ba14 g     F .text	000002cc .hidden __udivmoddi4
000115f8 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E
0001a5f0 g     F .text	000000a0 os_tick_init
00014492 g     F .text	00000052 _ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E
000156c2 g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E
00008164  w    F .text	00000002 RTC0_IRQHandler
000090f8 g     F .text	00000044 _ZN6mynewt3sys7console5print17hc13a6743274d87fcE
000194b0 g     F .text	00000040 os_sched_wakeup_ticks
00009446 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE
0001a9c4 g     F .text	00000030 hal_timer_read
20000144 g       .data	00000000 __data_end__
000178f0 g     F .text	00000028 hal_gpio_irq_enable
0001b408 g     F .text	0000000c oc_evq_set
0001af88 g     F .text	00000018 is_sensor_node
00016e32 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE
0001b480 g     F .text	00000024 oc_init
00016fac g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h54b904d9d5d295daE
00016fac g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h85ec06f2c95e1ecaE
00009824 g     F .text	000000bc _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE
00016602 g     F .text	0000034c _ZN4core3str16slice_error_fail17h232f9181d55b3da9E
0000abc8 g     F .text	0000003a _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E
0001518c g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E
2000df48 g     O .bss	00000018 sensor_base_ts
000171d2 g     F .text	000000f4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E
00014e7a g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E
000265d4 g       .ARM.exidx	00000000 __etext
00016eee g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E
0001492a g     F .text	00000106 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E
0001768c g     F .text	0000000c console_get_ticks
0000e98c g     F .text	00000014 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h6a25aae91f88a8abE
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
0000913c g     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E
0000eee6 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E
000112da g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h745a95d658ce50bcE
20000108 g     O .data	00000004 hal_twi_i2c1
0000ea4c g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE
00019690 g     F .text	000000d8 os_task_init
00009070 g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E
000118ee g     F .text	0000001a _ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE
00011cd6 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E
0001533c g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E
00011312 g     F .text	00000028 .hidden _ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE
0001955c g     F .text	00000064 os_sem_release
0000efc8 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E
0001bcf0 g     F .text	0000009a __aeabi_memset
0000f01e g     F .text	00000058 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE
00018d34 g     F .text	000000b8 os_mbuf_dup
00019af4 g     F .text	00000046 PendSV_Handler
00012600 g     F .text	00000014 _ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E
00019aae g     F .text	00000046 SVC_Handler
000089f8 g     F .text	00000014 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdb0154f18aef5e62E
00019900 g     F .text	0000000c os_arch_save_sr
00008164  w    F .text	00000002 PWM2_IRQHandler
0000815c  w    F .text	00000002 UsageFault_Handler
0001a85c g     F .text	00000010 nrf52_timer0_irq_handler
0001991c g     F .text	00000040 os_arch_task_stack_init
2000df88 g       .bss	00000000 __bss_end__
00018e78 g     F .text	00000032 os_memblock_get
0000f1c0 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E
2000df84 g     O .bss	00000004 flash_map
00008164  w    F .text	00000002 RADIO_IRQHandler
00011a06 g     F .text	00000056 _ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE
00008164  w    F .text	00000002 TIMER2_IRQHandler
000116cc g     F .text	000000c4 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E
000183c0 g     F .text	00000014 hal_watchdog_tickle
00018a7e g     F .text	0000007a os_eventq_get
0001b9c4 g     F .text	00000020 sprintf
000198bc g     F .text	00000026 os_time_ms_to_ticks
00008a1c g     F .text	0000003c _ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E
0000a9f6 g     F .text	00000036 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE
2000d9e8 g     O .bss	00000004 os_flags
0001b4b0 g     F .text	00000028 oc_rep_init
00019bc0 g     F .text	0000001a memcpy
0001a2a4 g     F .text	00000044 sysinit_app
00011f52 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E
0001515c g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E
00013eaa g     F .text	0000036c _ZN6mynewt3hal3SPI4init17h97467ea724680fb5E
000124d2 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE
00017590 g     F .text	0000003c console_out_nolock
2000df60 g     O .bss	00000020 oc_transports
00017878 g     F .text	00000078 hal_gpio_irq_init
0000edf2 g     F .text	000000ba _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E
00019c2e g     F .text	00000010 strlen
000195c0 g     F .text	000000b8 os_sem_pend
0001152e g     F .text	00000014 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he2e30225e051e80dE
0001a558 g     F .text	00000098 os_tick_idle
00012518 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00011354 g     F .text	00000012 _ZN4core3mem4swap17h21afb25e2d195463E
00000000 g       .svc_table	00000000 SVC_Table
0001268a g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE
2000fe50 g       *ABS*	00000000 __HeapLimit
00018690 g     F .text	00000038 os_pkg_init
20000144 g       .bssnz	00000000 __bssnz_start__
000094b6 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17had883e363867a05eE
0000a55a g     F .text	0000001a .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E
00014666 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE
00008164  w    F .text	00000002 ECB_IRQHandler
00014216 g     F .text	00000004 _ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E
00008158  w    F .text	00000002 MemoryManagement_Handler
00016fac g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hc11e05ad6528dc14E
00018a16 g     F .text	00000068 os_eventq_put
20010000 g       .bss	00000000 __StackTop
00009934 g     F .text	0000003c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E
0001181a g     F .text	00000012 _ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE
0001b83a g     F .text	0000000a mfg_read_tlv_mmr_ref
00008c50 g     F .text	00000018 _ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E
0001b048 g     F .text	000000c0 sensor_network_init
00016fac g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE
00014d5e g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE
00008cfc g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE
00012588 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	00019aaf 	.word	0x00019aaf
	...
    8058:	00019af5 	.word	0x00019af5
    805c:	00019b3b 	.word	0x00019b3b
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f826 	bl	8178 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20000148 	.word	0x20000148
    ldr     r3, =__bss_end__
    8134:	2000df88 	.word	0x2000df88
    ldr    r1, =__etext
    8138:	000265d4 	.word	0x000265d4
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	20000144 	.word	0x20000144
    LDR     R0, =__HeapBase
    8144:	2000df88 	.word	0x2000df88
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	0000842d 	.word	0x0000842d
    LDR     R0, =_start
    8150:	00008601 	.word	0x00008601

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    8178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    817c:	2201      	movs	r2, #1
    817e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    8182:	4770      	bx	lr

00008184 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <hal_debugger_connected+0xc>)
    8186:	6818      	ldr	r0, [r3, #0]
}
    8188:	f000 0001 	and.w	r0, r0, #1
    818c:	4770      	bx	lr
    818e:	bf00      	nop
    8190:	e000edf0 	.word	0xe000edf0

00008194 <hal_system_reset>:
{
    8194:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    8196:	f7ff fff5 	bl	8184 <hal_debugger_connected>
    819a:	b100      	cbz	r0, 819e <hal_system_reset+0xa>
            asm("bkpt");
    819c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    819e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81a2:	4905      	ldr	r1, [pc, #20]	; (81b8 <hal_system_reset+0x24>)
    81a4:	68ca      	ldr	r2, [r1, #12]
    81a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81aa:	4b04      	ldr	r3, [pc, #16]	; (81bc <hal_system_reset+0x28>)
    81ac:	4313      	orrs	r3, r2
    81ae:	60cb      	str	r3, [r1, #12]
    81b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81b4:	bf00      	nop
    81b6:	e7fd      	b.n	81b4 <hal_system_reset+0x20>
    81b8:	e000ed00 	.word	0xe000ed00
    81bc:	05fa0004 	.word	0x05fa0004

000081c0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <hal_system_clock_start+0x48>)
    81ca:	4013      	ands	r3, r2
    81cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    81d0:	d018      	beq.n	8204 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81d6:	2201      	movs	r2, #1
    81d8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    81da:	2100      	movs	r1, #0
    81dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    81e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    81e4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    81e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    81ee:	2b00      	cmp	r3, #0
    81f0:	d0f9      	beq.n	81e6 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    81f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81fa:	4b03      	ldr	r3, [pc, #12]	; (8208 <hal_system_clock_start+0x48>)
    81fc:	4013      	ands	r3, r2
    81fe:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    8202:	d1f0      	bne.n	81e6 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8204:	4770      	bx	lr
    8206:	bf00      	nop
    8208:	00010003 	.word	0x00010003

0000820c <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    820c:	4b0b      	ldr	r3, [pc, #44]	; (823c <errata_16+0x30>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	2b06      	cmp	r3, #6
    8212:	d001      	beq.n	8218 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8214:	2000      	movs	r0, #0
    8216:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8218:	4b09      	ldr	r3, [pc, #36]	; (8240 <errata_16+0x34>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	f013 0f0f 	tst.w	r3, #15
    8220:	d107      	bne.n	8232 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8222:	4b08      	ldr	r3, [pc, #32]	; (8244 <errata_16+0x38>)
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    822a:	2b30      	cmp	r3, #48	; 0x30
    822c:	d003      	beq.n	8236 <errata_16+0x2a>
    return false;
    822e:	2000      	movs	r0, #0
    8230:	4770      	bx	lr
    8232:	2000      	movs	r0, #0
    8234:	4770      	bx	lr
            return true;
    8236:	2001      	movs	r0, #1
}
    8238:	4770      	bx	lr
    823a:	bf00      	nop
    823c:	f0000fe0 	.word	0xf0000fe0
    8240:	f0000fe4 	.word	0xf0000fe4
    8244:	f0000fe8 	.word	0xf0000fe8

00008248 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0f      	ldr	r3, [pc, #60]	; (8288 <errata_31+0x40>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b0d      	ldr	r3, [pc, #52]	; (828c <errata_31+0x44>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d10b      	bne.n	8276 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b0c      	ldr	r3, [pc, #48]	; (8290 <errata_31+0x48>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d007      	beq.n	827a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    826a:	2b40      	cmp	r3, #64	; 0x40
    826c:	d007      	beq.n	827e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    826e:	2b50      	cmp	r3, #80	; 0x50
    8270:	d007      	beq.n	8282 <errata_31+0x3a>
    return false;
    8272:	2000      	movs	r0, #0
    8274:	4770      	bx	lr
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
            return true;
    827a:	2001      	movs	r0, #1
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
    8280:	4770      	bx	lr
            return true;
    8282:	2001      	movs	r0, #1
}
    8284:	4770      	bx	lr
    8286:	bf00      	nop
    8288:	f0000fe0 	.word	0xf0000fe0
    828c:	f0000fe4 	.word	0xf0000fe4
    8290:	f0000fe8 	.word	0xf0000fe8

00008294 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8294:	4b0b      	ldr	r3, [pc, #44]	; (82c4 <errata_32+0x30>)
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b06      	cmp	r3, #6
    829a:	d001      	beq.n	82a0 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    829c:	2000      	movs	r0, #0
    829e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82a0:	4b09      	ldr	r3, [pc, #36]	; (82c8 <errata_32+0x34>)
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	f013 0f0f 	tst.w	r3, #15
    82a8:	d107      	bne.n	82ba <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82aa:	4b08      	ldr	r3, [pc, #32]	; (82cc <errata_32+0x38>)
    82ac:	681b      	ldr	r3, [r3, #0]
    82ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82b2:	2b30      	cmp	r3, #48	; 0x30
    82b4:	d003      	beq.n	82be <errata_32+0x2a>
    return false;
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
    82ba:	2000      	movs	r0, #0
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0f      	ldr	r3, [pc, #60]	; (8310 <errata_36+0x40>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b0d      	ldr	r3, [pc, #52]	; (8314 <errata_36+0x44>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d10b      	bne.n	82fe <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b0c      	ldr	r3, [pc, #48]	; (8318 <errata_36+0x48>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d007      	beq.n	8302 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82f2:	2b40      	cmp	r3, #64	; 0x40
    82f4:	d007      	beq.n	8306 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82f6:	2b50      	cmp	r3, #80	; 0x50
    82f8:	d007      	beq.n	830a <errata_36+0x3a>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
    8304:	4770      	bx	lr
            return true;
    8306:	2001      	movs	r0, #1
    8308:	4770      	bx	lr
            return true;
    830a:	2001      	movs	r0, #1
}
    830c:	4770      	bx	lr
    830e:	bf00      	nop
    8310:	f0000fe0 	.word	0xf0000fe0
    8314:	f0000fe4 	.word	0xf0000fe4
    8318:	f0000fe8 	.word	0xf0000fe8

0000831c <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    831c:	4b0b      	ldr	r3, [pc, #44]	; (834c <errata_37+0x30>)
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	2b06      	cmp	r3, #6
    8322:	d001      	beq.n	8328 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8324:	2000      	movs	r0, #0
    8326:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <errata_37+0x34>)
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	f013 0f0f 	tst.w	r3, #15
    8330:	d107      	bne.n	8342 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8332:	4b08      	ldr	r3, [pc, #32]	; (8354 <errata_37+0x38>)
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    833a:	2b30      	cmp	r3, #48	; 0x30
    833c:	d003      	beq.n	8346 <errata_37+0x2a>
    return false;
    833e:	2000      	movs	r0, #0
    8340:	4770      	bx	lr
    8342:	2000      	movs	r0, #0
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_57+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_57+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_57+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_57+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_66+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_66+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_66+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b50      	cmp	r3, #80	; 0x50
    83b4:	d003      	beq.n	83be <errata_66+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0f      	ldr	r3, [pc, #60]	; (8410 <errata_108+0x40>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b0d      	ldr	r3, [pc, #52]	; (8414 <errata_108+0x44>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d10b      	bne.n	83fe <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83e6:	4b0c      	ldr	r3, [pc, #48]	; (8418 <errata_108+0x48>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b30      	cmp	r3, #48	; 0x30
    83f0:	d007      	beq.n	8402 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    83f2:	2b40      	cmp	r3, #64	; 0x40
    83f4:	d007      	beq.n	8406 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83f6:	2b50      	cmp	r3, #80	; 0x50
    83f8:	d007      	beq.n	840a <errata_108+0x3a>
    return false;
    83fa:	2000      	movs	r0, #0
    83fc:	4770      	bx	lr
    83fe:	2000      	movs	r0, #0
    8400:	4770      	bx	lr
            return true;
    8402:	2001      	movs	r0, #1
    8404:	4770      	bx	lr
            return true;
    8406:	2001      	movs	r0, #1
    8408:	4770      	bx	lr
            return true;
    840a:	2001      	movs	r0, #1
}
    840c:	4770      	bx	lr
    840e:	bf00      	nop
    8410:	f0000fe0 	.word	0xf0000fe0
    8414:	f0000fe4 	.word	0xf0000fe4
    8418:	f0000fe8 	.word	0xf0000fe8

0000841c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    841c:	4b01      	ldr	r3, [pc, #4]	; (8424 <SystemCoreClockUpdate+0x8>)
    841e:	4a02      	ldr	r2, [pc, #8]	; (8428 <SystemCoreClockUpdate+0xc>)
    8420:	601a      	str	r2, [r3, #0]
}
    8422:	4770      	bx	lr
    8424:	200000e4 	.word	0x200000e4
    8428:	03d09000 	.word	0x03d09000

0000842c <SystemInit>:
{
    842c:	b508      	push	{r3, lr}
    if (errata_16()){
    842e:	f7ff feed 	bl	820c <errata_16>
    8432:	b110      	cbz	r0, 843a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8434:	4b65      	ldr	r3, [pc, #404]	; (85cc <SystemInit+0x1a0>)
    8436:	4a66      	ldr	r2, [pc, #408]	; (85d0 <SystemInit+0x1a4>)
    8438:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    843a:	f7ff ff05 	bl	8248 <errata_31>
    843e:	b128      	cbz	r0, 844c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    8440:	4b64      	ldr	r3, [pc, #400]	; (85d4 <SystemInit+0x1a8>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8448:	4a63      	ldr	r2, [pc, #396]	; (85d8 <SystemInit+0x1ac>)
    844a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    844c:	f7ff ff22 	bl	8294 <errata_32>
    8450:	b120      	cbz	r0, 845c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8452:	4a62      	ldr	r2, [pc, #392]	; (85dc <SystemInit+0x1b0>)
    8454:	68d3      	ldr	r3, [r2, #12]
    8456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    845a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    845c:	f7ff ff38 	bl	82d0 <errata_36>
    8460:	b140      	cbz	r0, 8474 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    8462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8466:	2200      	movs	r2, #0
    8468:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    846c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    8470:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    8474:	f7ff ff52 	bl	831c <errata_37>
    8478:	b110      	cbz	r0, 8480 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    847a:	4b59      	ldr	r3, [pc, #356]	; (85e0 <SystemInit+0x1b4>)
    847c:	2203      	movs	r2, #3
    847e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    8480:	f7ff ff6a 	bl	8358 <errata_57>
    8484:	b158      	cbz	r0, 849e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    8486:	4b57      	ldr	r3, [pc, #348]	; (85e4 <SystemInit+0x1b8>)
    8488:	2205      	movs	r2, #5
    848a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    848c:	3378      	adds	r3, #120	; 0x78
    848e:	2201      	movs	r2, #1
    8490:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8492:	3b70      	subs	r3, #112	; 0x70
    8494:	2200      	movs	r2, #0
    8496:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8498:	3b04      	subs	r3, #4
    849a:	223f      	movs	r2, #63	; 0x3f
    849c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    849e:	f7ff ff79 	bl	8394 <errata_66>
    84a2:	2800      	cmp	r0, #0
    84a4:	d046      	beq.n	8534 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ae:	4b4e      	ldr	r3, [pc, #312]	; (85e8 <SystemInit+0x1bc>)
    84b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    84c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    84c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    84cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    84d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    84d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    84dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    84e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    84e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    84e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    84ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    84f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    84f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    84f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    84fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8500:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8504:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8508:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    850c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8510:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8514:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8518:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    851c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8520:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8524:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8528:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    852c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8530:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8534:	f7ff ff4c 	bl	83d0 <errata_108>
    8538:	b128      	cbz	r0, 8546 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    853a:	4b2c      	ldr	r3, [pc, #176]	; (85ec <SystemInit+0x1c0>)
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8542:	4a2b      	ldr	r2, [pc, #172]	; (85f0 <SystemInit+0x1c4>)
    8544:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8546:	4a2b      	ldr	r2, [pc, #172]	; (85f4 <SystemInit+0x1c8>)
    8548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    854c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8558:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    855c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8560:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    8564:	f013 0f01 	tst.w	r3, #1
    8568:	d104      	bne.n	8574 <SystemInit+0x148>
    SystemCoreClockUpdate();
    856a:	f7ff ff57 	bl	841c <SystemCoreClockUpdate>
    NVIC_Relocate();
    856e:	f00f f8a3 	bl	176b8 <NVIC_Relocate>
}
    8572:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8574:	4b20      	ldr	r3, [pc, #128]	; (85f8 <SystemInit+0x1cc>)
    8576:	2201      	movs	r2, #1
    8578:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    857c:	4b1e      	ldr	r3, [pc, #120]	; (85f8 <SystemInit+0x1cc>)
    857e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8582:	2b00      	cmp	r3, #0
    8584:	d0fa      	beq.n	857c <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8586:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    858a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    858e:	f023 0301 	bic.w	r3, r3, #1
    8592:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8596:	4b18      	ldr	r3, [pc, #96]	; (85f8 <SystemInit+0x1cc>)
    8598:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    859c:	2b00      	cmp	r3, #0
    859e:	d0fa      	beq.n	8596 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85a0:	4b15      	ldr	r3, [pc, #84]	; (85f8 <SystemInit+0x1cc>)
    85a2:	2200      	movs	r2, #0
    85a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85a8:	4b13      	ldr	r3, [pc, #76]	; (85f8 <SystemInit+0x1cc>)
    85aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ae:	2b00      	cmp	r3, #0
    85b0:	d0fa      	beq.n	85a8 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85b2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85b6:	490f      	ldr	r1, [pc, #60]	; (85f4 <SystemInit+0x1c8>)
    85b8:	68ca      	ldr	r2, [r1, #12]
    85ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85be:	4b0f      	ldr	r3, [pc, #60]	; (85fc <SystemInit+0x1d0>)
    85c0:	4313      	orrs	r3, r2
    85c2:	60cb      	str	r3, [r1, #12]
    85c4:	f3bf 8f4f 	dsb	sy
    __NOP();
    85c8:	bf00      	nop
    85ca:	e7fd      	b.n	85c8 <SystemInit+0x19c>
    85cc:	4007c074 	.word	0x4007c074
    85d0:	baadf00d 	.word	0xbaadf00d
    85d4:	10000244 	.word	0x10000244
    85d8:	4000053c 	.word	0x4000053c
    85dc:	e000edf0 	.word	0xe000edf0
    85e0:	400005a0 	.word	0x400005a0
    85e4:	40005610 	.word	0x40005610
    85e8:	4000c000 	.word	0x4000c000
    85ec:	10000258 	.word	0x10000258
    85f0:	40000ee4 	.word	0x40000ee4
    85f4:	e000ed00 	.word	0xe000ed00
    85f8:	4001e000 	.word	0x4001e000
    85fc:	05fa0004 	.word	0x05fa0004

00008600 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8600:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8602:	4803      	ldr	r0, [pc, #12]	; (8610 <_start+0x10>)
    8604:	f00f ffde 	bl	185c4 <os_init>
    os_start();
    8608:	f010 f834 	bl	18674 <os_start>
#endif
}
    860c:	bd08      	pop	{r3, pc}
    860e:	bf00      	nop
    8610:	00008617 	.word	0x00008617

00008614 <_init>:

void
_init(void)
{
}
    8614:	4770      	bx	lr

00008616 <main>:
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8616:	b088      	sub	sp, #32
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8618:	f000 f9f8 	bl	8a0c <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>
    861c:	e7ff      	b.n	861e <main+0x8>
    //  extern { fn start_ble() -> i32; }
    //  let rc = unsafe { start_ble() };
    //  assert!(rc == 0, "BLE fail");

    //  Start the display
    druid::start_display()
    861e:	f000 ffb5 	bl	958c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>
    8622:	9005      	str	r0, [sp, #20]
    8624:	e7ff      	b.n	8626 <main+0x10>
    8626:	f64b 518a 	movw	r1, #48522	; 0xbd8a
    862a:	f2c0 0101 	movt	r1, #1
    862e:	f64b 53c0 	movw	r3, #48576	; 0xbdc0
    8632:	f2c0 0301 	movt	r3, #1
    8636:	2208      	movs	r2, #8
    8638:	9805      	ldr	r0, [sp, #20]
    863a:	f000 fae2 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    863e:	e7ff      	b.n	8640 <main+0x2a>
    #[cfg(feature = "display_app")]  //  If graphics display app is enabled...
    display::test_display()
        .expect("DSP test fail");

    //  Start the touch sensor
    touch_sensor::start_touch_sensor()
    8640:	f007 ff81 	bl	10546 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE>
    8644:	9004      	str	r0, [sp, #16]
    8646:	e7ff      	b.n	8648 <main+0x32>
    8648:	f64b 5192 	movw	r1, #48530	; 0xbd92
    864c:	f2c0 0101 	movt	r1, #1
    8650:	f64b 53d0 	movw	r3, #48592	; 0xbdd0
    8654:	f2c0 0301 	movt	r3, #1
    8658:	2208      	movs	r2, #8
    865a:	9804      	ldr	r0, [sp, #16]
    865c:	f000 fad1 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8660:	e7ff      	b.n	8662 <main+0x4c>
    visual::on_start()
        .expect("VIS fail");

    //  Launch the CHIP8 Emulator app
    #[cfg(feature = "chip8_app")]  //  If CHIP8 Emulator app is enabled...
    chip8::on_start()
    8662:	f006 fdd9 	bl	f218 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E>
    8666:	9003      	str	r0, [sp, #12]
    8668:	e7ff      	b.n	866a <main+0x54>
    866a:	f64b 51e0 	movw	r1, #48608	; 0xbde0
    866e:	f2c0 0101 	movt	r1, #1
    8672:	f64b 53ec 	movw	r3, #48620	; 0xbdec
    8676:	f2c0 0301 	movt	r3, #1
    867a:	220a      	movs	r2, #10
    867c:	9803      	ldr	r0, [sp, #12]
    867e:	f000 fac0 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8682:	e7ff      	b.n	8684 <main+0x6e>
        .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
    8684:	e7ff      	b.n	8686 <main+0x70>
    8686:	a806      	add	r0, sp, #24
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8688:	f000 fb76 	bl	8d78 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    868c:	e7ff      	b.n	868e <main+0x78>
    868e:	f64b 519a 	movw	r1, #48538	; 0xbd9a
    8692:	f2c0 0101 	movt	r1, #1
    8696:	f64b 53fc 	movw	r3, #48636	; 0xbdfc
    869a:	f2c0 0301 	movt	r3, #1
    869e:	a806      	add	r0, sp, #24
    86a0:	2208      	movs	r2, #8
    86a2:	f006 fb7c 	bl	ed9e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E>
    86a6:	9002      	str	r0, [sp, #8]
    86a8:	e7ff      	b.n	86aa <main+0x94>
        os::eventq_run(               //  Processing events...
    86aa:	9802      	ldr	r0, [sp, #8]
    86ac:	f000 fb5b 	bl	8d66 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    86b0:	9001      	str	r0, [sp, #4]
    86b2:	e7ff      	b.n	86b4 <main+0x9e>
    86b4:	f64b 51a2 	movw	r1, #48546	; 0xbda2
    86b8:	f2c0 0101 	movt	r1, #1
    86bc:	f64b 630c 	movw	r3, #48652	; 0xbe0c
    86c0:	f2c0 0301 	movt	r3, #1
    86c4:	2208      	movs	r2, #8
    86c6:	9801      	ldr	r0, [sp, #4]
    86c8:	f000 fa9b 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    86cc:	e7ff      	b.n	86ce <main+0xb8>
    loop {                            //  Loop forever...
    86ce:	e7da      	b.n	8686 <main+0x70>

000086d0 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    86d0:	b08e      	sub	sp, #56	; 0x38
    86d2:	900b      	str	r0, [sp, #44]	; 0x2c
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    86d4:	f64b 611c 	movw	r1, #48668	; 0xbe1c
    86d8:	f2c0 0101 	movt	r1, #1
    86dc:	2206      	movs	r2, #6
    86de:	9007      	str	r0, [sp, #28]
    86e0:	4608      	mov	r0, r1
    86e2:	4611      	mov	r1, r2
    86e4:	f000 fd08 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    86e8:	e7ff      	b.n	86ea <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
    86ea:	9807      	ldr	r0, [sp, #28]
    86ec:	f00c ffe9 	bl	156c2 <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>
    86f0:	9008      	str	r0, [sp, #32]
    86f2:	e7ff      	b.n	86f4 <rust_begin_unwind+0x24>
    86f4:	9808      	ldr	r0, [sp, #32]
    86f6:	2800      	cmp	r0, #0
    86f8:	d108      	bne.n	870c <rust_begin_unwind+0x3c>
    86fa:	e7ff      	b.n	86fc <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    86fc:	f64b 6022 	movw	r0, #48674	; 0xbe22
    8700:	f2c0 0001 	movt	r0, #1
    8704:	2107      	movs	r1, #7
    8706:	f000 fcf7 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    870a:	e033      	b.n	8774 <rust_begin_unwind+0xa4>
    if let Some(location) = info.location() {
    870c:	9808      	ldr	r0, [sp, #32]
    870e:	900c      	str	r0, [sp, #48]	; 0x30
        let file = location.file();
    8710:	9006      	str	r0, [sp, #24]
    8712:	f00c ffd9 	bl	156c8 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8716:	910a      	str	r1, [sp, #40]	; 0x28
    8718:	9009      	str	r0, [sp, #36]	; 0x24
    871a:	e7ff      	b.n	871c <rust_begin_unwind+0x4c>
        let line = location.line();
    871c:	9806      	ldr	r0, [sp, #24]
    871e:	f00c ffd7 	bl	156d0 <_ZN4core5panic8Location4line17h650a566d9637c91dE>
    8722:	4601      	mov	r1, r0
    8724:	900d      	str	r0, [sp, #52]	; 0x34
    8726:	9105      	str	r1, [sp, #20]
    8728:	e7ff      	b.n	872a <rust_begin_unwind+0x5a>
        console::print("at ");       console::buffer(&file);
    872a:	f64b 6029 	movw	r0, #48681	; 0xbe29
    872e:	f2c0 0001 	movt	r0, #1
    8732:	2103      	movs	r1, #3
    8734:	f000 fce0 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8738:	e7ff      	b.n	873a <rust_begin_unwind+0x6a>
    873a:	9809      	ldr	r0, [sp, #36]	; 0x24
    873c:	990a      	ldr	r1, [sp, #40]	; 0x28
    873e:	f000 fd02 	bl	9146 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>
    8742:	e7ff      	b.n	8744 <rust_begin_unwind+0x74>
        console::print(" line ");    console::printint(line as i32);
    8744:	f64b 602c 	movw	r0, #48684	; 0xbe2c
    8748:	f2c0 0001 	movt	r0, #1
    874c:	2106      	movs	r1, #6
    874e:	f000 fcd3 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8752:	e7ff      	b.n	8754 <rust_begin_unwind+0x84>
    8754:	9805      	ldr	r0, [sp, #20]
    8756:	f000 fd0d 	bl	9174 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    875a:	e7ff      	b.n	875c <rust_begin_unwind+0x8c>
        console::print("\n");        console::flush();
    875c:	f64b 6032 	movw	r0, #48690	; 0xbe32
    8760:	f2c0 0001 	movt	r0, #1
    8764:	2101      	movs	r1, #1
    8766:	f000 fcc7 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    876a:	e7ff      	b.n	876c <rust_begin_unwind+0x9c>
    876c:	f000 fd0a 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8770:	e7ff      	b.n	8772 <rust_begin_unwind+0xa2>
    if let Some(location) = info.location() {
    8772:	e003      	b.n	877c <rust_begin_unwind+0xac>
        console::print("no loc\n");  console::flush();
    8774:	f000 fd06 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8778:	e7ff      	b.n	877a <rust_begin_unwind+0xaa>
    if let Some(location) = info.location() {
    877a:	e7ff      	b.n	877c <rust_begin_unwind+0xac>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
    877c:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    877e:	e7ff      	b.n	8780 <rust_begin_unwind+0xb0>
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    8780:	9807      	ldr	r0, [sp, #28]
    8782:	f00c ffa1 	bl	156c8 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8786:	9004      	str	r0, [sp, #16]
    8788:	9103      	str	r1, [sp, #12]
    878a:	e7ff      	b.n	878c <rust_begin_unwind+0xbc>
    878c:	9804      	ldr	r0, [sp, #16]
    878e:	9903      	ldr	r1, [sp, #12]
    8790:	f002 fa4f 	bl	ac32 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h1a1e70438bc017caE>
    8794:	9002      	str	r0, [sp, #8]
    8796:	e7ff      	b.n	8798 <rust_begin_unwind+0xc8>
    8798:	f64b 6134 	movw	r1, #48692	; 0xbe34
    879c:	f2c0 0101 	movt	r1, #1
    87a0:	9802      	ldr	r0, [sp, #8]
    87a2:	f000 f903 	bl	89ac <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E>
    87a6:	9001      	str	r0, [sp, #4]
    87a8:	e7ff      	b.n	87aa <rust_begin_unwind+0xda>
    87aa:	9801      	ldr	r0, [sp, #4]
    87ac:	6800      	ldr	r0, [r0, #0]
    87ae:	9901      	ldr	r1, [sp, #4]
    87b0:	6849      	ldr	r1, [r1, #4]
    87b2:	f000 fca1 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87b6:	e7ff      	b.n	87b8 <rust_begin_unwind+0xe8>
    console::print("\n");  console::flush();
    87b8:	f64b 6032 	movw	r0, #48690	; 0xbe32
    87bc:	f2c0 0001 	movt	r0, #1
    87c0:	2101      	movs	r1, #1
    87c2:	f000 fc99 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87c6:	e7ff      	b.n	87c8 <rust_begin_unwind+0xf8>
    87c8:	f000 fcdc 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    87cc:	e7ff      	b.n	87ce <rust_begin_unwind+0xfe>
    //  Loop forever so that device won't restart.
    loop {}
    87ce:	e7ff      	b.n	87d0 <rust_begin_unwind+0x100>
    87d0:	e7fe      	b.n	87d0 <rust_begin_unwind+0x100>

000087d2 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE>:
    87d2:	b580      	push	{r7, lr}
    87d4:	b08a      	sub	sp, #40	; 0x28
    87d6:	9104      	str	r1, [sp, #16]
    87d8:	9205      	str	r2, [sp, #20]
    87da:	9308      	str	r3, [sp, #32]
    87dc:	2100      	movs	r1, #0
    87de:	f88d 101e 	strb.w	r1, [sp, #30]
    87e2:	f88d 101f 	strb.w	r1, [sp, #31]
    87e6:	2101      	movs	r1, #1
    87e8:	f88d 101f 	strb.w	r1, [sp, #31]
    87ec:	f88d 101e 	strb.w	r1, [sp, #30]
    87f0:	9904      	ldr	r1, [sp, #16]
    87f2:	2900      	cmp	r1, #0
    87f4:	9303      	str	r3, [sp, #12]
    87f6:	9002      	str	r0, [sp, #8]
    87f8:	d001      	beq.n	87fe <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x2c>
    87fa:	e7ff      	b.n	87fc <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x2a>
    87fc:	e004      	b.n	8808 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x36>
    87fe:	2000      	movs	r0, #0
    8800:	9902      	ldr	r1, [sp, #8]
    8802:	6008      	str	r0, [r1, #0]
    8804:	e01f      	b.n	8846 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x74>
    8806:	defe      	udf	#254	; 0xfe
    8808:	2000      	movs	r0, #0
    880a:	f88d 001f 	strb.w	r0, [sp, #31]
    880e:	9905      	ldr	r1, [sp, #20]
    8810:	9109      	str	r1, [sp, #36]	; 0x24
    8812:	f88d 001e 	strb.w	r0, [sp, #30]
    8816:	9106      	str	r1, [sp, #24]
    8818:	9906      	ldr	r1, [sp, #24]
    881a:	9803      	ldr	r0, [sp, #12]
    881c:	f002 fa1e 	bl	ac5c <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf6f4911cb4702538E>
    8820:	9001      	str	r0, [sp, #4]
    8822:	9100      	str	r1, [sp, #0]
    8824:	e7ff      	b.n	8826 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x54>
    8826:	9801      	ldr	r0, [sp, #4]
    8828:	9902      	ldr	r1, [sp, #8]
    882a:	6048      	str	r0, [r1, #4]
    882c:	9a00      	ldr	r2, [sp, #0]
    882e:	608a      	str	r2, [r1, #8]
    8830:	2301      	movs	r3, #1
    8832:	600b      	str	r3, [r1, #0]
    8834:	e007      	b.n	8846 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x74>
    8836:	9804      	ldr	r0, [sp, #16]
    8838:	2801      	cmp	r0, #1
    883a:	d00c      	beq.n	8856 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x84>
    883c:	e015      	b.n	886a <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x98>
    883e:	2000      	movs	r0, #0
    8840:	f88d 001e 	strb.w	r0, [sp, #30]
    8844:	e7f7      	b.n	8836 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x64>
    8846:	f89d 001e 	ldrb.w	r0, [sp, #30]
    884a:	07c0      	lsls	r0, r0, #31
    884c:	2800      	cmp	r0, #0
    884e:	d1f6      	bne.n	883e <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x6c>
    8850:	e7f1      	b.n	8836 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x64>
    8852:	b00a      	add	sp, #40	; 0x28
    8854:	bd80      	pop	{r7, pc}
    8856:	f89d 001f 	ldrb.w	r0, [sp, #31]
    885a:	07c0      	lsls	r0, r0, #31
    885c:	2800      	cmp	r0, #0
    885e:	d0f8      	beq.n	8852 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x80>
    8860:	e7ff      	b.n	8862 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x90>
    8862:	2000      	movs	r0, #0
    8864:	f88d 001f 	strb.w	r0, [sp, #31]
    8868:	e7f3      	b.n	8852 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x80>
    886a:	e7f2      	b.n	8852 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x80>

0000886c <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE>:
    886c:	b580      	push	{r7, lr}
    886e:	b08c      	sub	sp, #48	; 0x30
    8870:	9103      	str	r1, [sp, #12]
    8872:	9204      	str	r2, [sp, #16]
    8874:	930a      	str	r3, [sp, #40]	; 0x28
    8876:	2100      	movs	r1, #0
    8878:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    887c:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    8880:	2101      	movs	r1, #1
    8882:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    8886:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    888a:	9903      	ldr	r1, [sp, #12]
    888c:	2900      	cmp	r1, #0
    888e:	9302      	str	r3, [sp, #8]
    8890:	9001      	str	r0, [sp, #4]
    8892:	d001      	beq.n	8898 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x2c>
    8894:	e7ff      	b.n	8896 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x2a>
    8896:	e004      	b.n	88a2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x36>
    8898:	2000      	movs	r0, #0
    889a:	9901      	ldr	r1, [sp, #4]
    889c:	6008      	str	r0, [r1, #0]
    889e:	e020      	b.n	88e2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x76>
    88a0:	defe      	udf	#254	; 0xfe
    88a2:	2000      	movs	r0, #0
    88a4:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    88a8:	9904      	ldr	r1, [sp, #16]
    88aa:	910b      	str	r1, [sp, #44]	; 0x2c
    88ac:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    88b0:	9108      	str	r1, [sp, #32]
    88b2:	9a08      	ldr	r2, [sp, #32]
    88b4:	a805      	add	r0, sp, #20
    88b6:	9902      	ldr	r1, [sp, #8]
    88b8:	f002 f9c6 	bl	ac48 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h939acc3a20dd048cE>
    88bc:	e7ff      	b.n	88be <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x52>
    88be:	9805      	ldr	r0, [sp, #20]
    88c0:	9906      	ldr	r1, [sp, #24]
    88c2:	9a07      	ldr	r2, [sp, #28]
    88c4:	9b01      	ldr	r3, [sp, #4]
    88c6:	60da      	str	r2, [r3, #12]
    88c8:	6099      	str	r1, [r3, #8]
    88ca:	6058      	str	r0, [r3, #4]
    88cc:	2001      	movs	r0, #1
    88ce:	6018      	str	r0, [r3, #0]
    88d0:	e007      	b.n	88e2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x76>
    88d2:	9803      	ldr	r0, [sp, #12]
    88d4:	2801      	cmp	r0, #1
    88d6:	d00c      	beq.n	88f2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x86>
    88d8:	e015      	b.n	8906 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x9a>
    88da:	2000      	movs	r0, #0
    88dc:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    88e0:	e7f7      	b.n	88d2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x66>
    88e2:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    88e6:	07c0      	lsls	r0, r0, #31
    88e8:	2800      	cmp	r0, #0
    88ea:	d1f6      	bne.n	88da <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x6e>
    88ec:	e7f1      	b.n	88d2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x66>
    88ee:	b00c      	add	sp, #48	; 0x30
    88f0:	bd80      	pop	{r7, pc}
    88f2:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    88f6:	07c0      	lsls	r0, r0, #31
    88f8:	2800      	cmp	r0, #0
    88fa:	d0f8      	beq.n	88ee <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x82>
    88fc:	e7ff      	b.n	88fe <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x92>
    88fe:	2000      	movs	r0, #0
    8900:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    8904:	e7f3      	b.n	88ee <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x82>
    8906:	e7f2      	b.n	88ee <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x82>

00008908 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E>:
    8908:	b085      	sub	sp, #20
    890a:	9000      	str	r0, [sp, #0]
    890c:	2000      	movs	r0, #0
    890e:	f88d 000b 	strb.w	r0, [sp, #11]
    8912:	f88d 000a 	strb.w	r0, [sp, #10]
    8916:	2001      	movs	r0, #1
    8918:	f88d 000b 	strb.w	r0, [sp, #11]
    891c:	f88d 000a 	strb.w	r0, [sp, #10]
    8920:	9800      	ldr	r0, [sp, #0]
    8922:	2800      	cmp	r0, #0
    8924:	4601      	mov	r1, r0
    8926:	bf18      	it	ne
    8928:	2101      	movne	r1, #1
    892a:	2800      	cmp	r0, #0
    892c:	d001      	beq.n	8932 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x2a>
    892e:	e7ff      	b.n	8930 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x28>
    8930:	e005      	b.n	893e <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x36>
    8932:	2000      	movs	r0, #0
    8934:	f88d 000a 	strb.w	r0, [sp, #10]
    8938:	9001      	str	r0, [sp, #4]
    893a:	e007      	b.n	894c <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x44>
    893c:	defe      	udf	#254	; 0xfe
    893e:	2000      	movs	r0, #0
    8940:	f88d 000b 	strb.w	r0, [sp, #11]
    8944:	9800      	ldr	r0, [sp, #0]
    8946:	9004      	str	r0, [sp, #16]
    8948:	9001      	str	r0, [sp, #4]
    894a:	e7ff      	b.n	894c <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x44>
    894c:	f89d 000a 	ldrb.w	r0, [sp, #10]
    8950:	07c0      	lsls	r0, r0, #31
    8952:	2800      	cmp	r0, #0
    8954:	d104      	bne.n	8960 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x58>
    8956:	e7ff      	b.n	8958 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x50>
    8958:	9800      	ldr	r0, [sp, #0]
    895a:	2800      	cmp	r0, #0
    895c:	d107      	bne.n	896e <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x66>
    895e:	e010      	b.n	8982 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x7a>
    8960:	2000      	movs	r0, #0
    8962:	f88d 000a 	strb.w	r0, [sp, #10]
    8966:	e7f7      	b.n	8958 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x50>
    8968:	9801      	ldr	r0, [sp, #4]
    896a:	b005      	add	sp, #20
    896c:	4770      	bx	lr
    896e:	f89d 000b 	ldrb.w	r0, [sp, #11]
    8972:	07c0      	lsls	r0, r0, #31
    8974:	2800      	cmp	r0, #0
    8976:	d0f7      	beq.n	8968 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x60>
    8978:	e7ff      	b.n	897a <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x72>
    897a:	2000      	movs	r0, #0
    897c:	f88d 000b 	strb.w	r0, [sp, #11]
    8980:	e7f2      	b.n	8968 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x60>
    8982:	e7f1      	b.n	8968 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x60>

00008984 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E>:
    8984:	b084      	sub	sp, #16
    8986:	9002      	str	r0, [sp, #8]
    8988:	6801      	ldr	r1, [r0, #0]
    898a:	2900      	cmp	r1, #0
    898c:	9000      	str	r0, [sp, #0]
    898e:	d001      	beq.n	8994 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0x10>
    8990:	e7ff      	b.n	8992 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0xe>
    8992:	e003      	b.n	899c <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0x18>
    8994:	2000      	movs	r0, #0
    8996:	9001      	str	r0, [sp, #4]
    8998:	e005      	b.n	89a6 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0x22>
    899a:	defe      	udf	#254	; 0xfe
    899c:	9800      	ldr	r0, [sp, #0]
    899e:	1d01      	adds	r1, r0, #4
    89a0:	9103      	str	r1, [sp, #12]
    89a2:	9101      	str	r1, [sp, #4]
    89a4:	e7ff      	b.n	89a6 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0x22>
    89a6:	9801      	ldr	r0, [sp, #4]
    89a8:	b004      	add	sp, #16
    89aa:	4770      	bx	lr

000089ac <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E>:
    89ac:	b084      	sub	sp, #16
    89ae:	9002      	str	r0, [sp, #8]
    89b0:	9802      	ldr	r0, [sp, #8]
    89b2:	2800      	cmp	r0, #0
    89b4:	4602      	mov	r2, r0
    89b6:	bf18      	it	ne
    89b8:	2201      	movne	r2, #1
    89ba:	2800      	cmp	r0, #0
    89bc:	9101      	str	r1, [sp, #4]
    89be:	d001      	beq.n	89c4 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x18>
    89c0:	e7ff      	b.n	89c2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x16>
    89c2:	e009      	b.n	89d8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x2c>
    89c4:	f64b 6044 	movw	r0, #48708	; 0xbe44
    89c8:	f2c0 0001 	movt	r0, #1
    89cc:	212b      	movs	r1, #43	; 0x2b
    89ce:	9a01      	ldr	r2, [sp, #4]
    89d0:	f00c fe80 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    89d4:	defe      	udf	#254	; 0xfe
    89d6:	defe      	udf	#254	; 0xfe
    89d8:	9802      	ldr	r0, [sp, #8]
    89da:	9003      	str	r0, [sp, #12]
    89dc:	9902      	ldr	r1, [sp, #8]
    89de:	2900      	cmp	r1, #0
    89e0:	9000      	str	r0, [sp, #0]
    89e2:	d003      	beq.n	89ec <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x40>
    89e4:	e7ff      	b.n	89e6 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x3a>
    89e6:	9800      	ldr	r0, [sp, #0]
    89e8:	b004      	add	sp, #16
    89ea:	4770      	bx	lr
    89ec:	e7fb      	b.n	89e6 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x3a>

000089ee <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc4148eaa15af1e8eE>:
    89ee:	b081      	sub	sp, #4
    89f0:	2100      	movs	r1, #0
    89f2:	6001      	str	r1, [r0, #0]
    89f4:	b001      	add	sp, #4
    89f6:	4770      	bx	lr

000089f8 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdb0154f18aef5e62E>:
    89f8:	b580      	push	{r7, lr}
    89fa:	b082      	sub	sp, #8
    89fc:	9001      	str	r0, [sp, #4]
    89fe:	f7ff ff83 	bl	8908 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E>
    8a02:	9000      	str	r0, [sp, #0]
    8a04:	e7ff      	b.n	8a06 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdb0154f18aef5e62E+0xe>
    8a06:	9800      	ldr	r0, [sp, #0]
    8a08:	b002      	add	sp, #8
    8a0a:	bd80      	pop	{r7, pc}

00008a0c <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>:
pub use hal::{ Delay, GPIO, SPI };  //  Export `hal` types GPIO and SPI

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    8a0c:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
    8a0e:	f011 fc29 	bl	1a264 <rust_sysinit>
    8a12:	e7ff      	b.n	8a14 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0x8>
    sys::console::flush();
    8a14:	f000 fbb6 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8a18:	e7ff      	b.n	8a1a <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0xe>
}
    8a1a:	bd80      	pop	{r7, pc}

00008a1c <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>:
            rep: StrnRep::CStr(cstr)
        }
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
    8a1c:	b580      	push	{r7, lr}
    8a1e:	b086      	sub	sp, #24
    8a20:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    8a22:	7801      	ldrb	r1, [r0, #0]
    8a24:	07ca      	lsls	r2, r1, #31
    8a26:	2a00      	cmp	r2, #0
    8a28:	9000      	str	r0, [sp, #0]
    8a2a:	d006      	beq.n	8a3a <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x1e>
    8a2c:	e7ff      	b.n	8a2e <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x12>
            StrnRep::CStr(cstr)  => { cstr }
    8a2e:	9800      	ldr	r0, [sp, #0]
    8a30:	6841      	ldr	r1, [r0, #4]
    8a32:	9103      	str	r1, [sp, #12]
    8a34:	9101      	str	r1, [sp, #4]
        match self.rep {
    8a36:	e00c      	b.n	8a52 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
    8a38:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    8a3a:	9800      	ldr	r0, [sp, #0]
    8a3c:	6841      	ldr	r1, [r0, #4]
    8a3e:	6882      	ldr	r2, [r0, #8]
    8a40:	9104      	str	r1, [sp, #16]
    8a42:	9205      	str	r2, [sp, #20]
    8a44:	4608      	mov	r0, r1
    8a46:	4611      	mov	r1, r2
    8a48:	f009 f94d 	bl	11ce6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8a4c:	9001      	str	r0, [sp, #4]
    8a4e:	e7ff      	b.n	8a50 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x34>
        match self.rep {
    8a50:	e7ff      	b.n	8a52 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
        }
    }
    8a52:	9801      	ldr	r0, [sp, #4]
    8a54:	b006      	add	sp, #24
    8a56:	bd80      	pop	{r7, pc}

00008a58 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
    8a58:	b5b0      	push	{r4, r5, r7, lr}
    8a5a:	b0b2      	sub	sp, #200	; 0xc8
    8a5c:	9029      	str	r0, [sp, #164]	; 0xa4
        match self.rep {
            StrnRep::ByteStr(bs) => {         
    8a5e:	7801      	ldrb	r1, [r0, #0]
    8a60:	07ca      	lsls	r2, r1, #31
    8a62:	2a00      	cmp	r2, #0
    8a64:	900e      	str	r0, [sp, #56]	; 0x38
    8a66:	d005      	beq.n	8a74 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x1c>
    8a68:	e7ff      	b.n	8a6a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
    8a6a:	980e      	ldr	r0, [sp, #56]	; 0x38
    8a6c:	6841      	ldr	r1, [r0, #4]
    8a6e:	912a      	str	r1, [sp, #168]	; 0xa8
        match self.rep {
    8a70:	e096      	b.n	8ba0 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
    8a72:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
    8a74:	980e      	ldr	r0, [sp, #56]	; 0x38
    8a76:	6841      	ldr	r1, [r0, #4]
    8a78:	6882      	ldr	r2, [r0, #8]
    8a7a:	912b      	str	r1, [sp, #172]	; 0xac
    8a7c:	922c      	str	r2, [sp, #176]	; 0xb0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    8a7e:	4608      	mov	r0, r1
    8a80:	4611      	mov	r1, r2
    8a82:	f000 faba 	bl	8ffa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>
    8a86:	9011      	str	r0, [sp, #68]	; 0x44
    8a88:	e7ff      	b.n	8a8a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x32>
    8a8a:	f64b 6074 	movw	r0, #48756	; 0xbe74
    8a8e:	f2c0 0001 	movt	r0, #1
    8a92:	6800      	ldr	r0, [r0, #0]
    8a94:	a911      	add	r1, sp, #68	; 0x44
    8a96:	910f      	str	r1, [sp, #60]	; 0x3c
    8a98:	9010      	str	r0, [sp, #64]	; 0x40
    8a9a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8a9c:	902d      	str	r0, [sp, #180]	; 0xb4
    8a9e:	9910      	ldr	r1, [sp, #64]	; 0x40
    8aa0:	912e      	str	r1, [sp, #184]	; 0xb8
    8aa2:	900d      	str	r0, [sp, #52]	; 0x34
    8aa4:	910c      	str	r1, [sp, #48]	; 0x30
    8aa6:	f000 fc46 	bl	9336 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>
    8aaa:	900b      	str	r0, [sp, #44]	; 0x2c
    8aac:	e7ff      	b.n	8aae <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x56>
    8aae:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8ab0:	07c1      	lsls	r1, r0, #31
    8ab2:	2900      	cmp	r1, #0
    8ab4:	d001      	beq.n	8aba <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x62>
    8ab6:	e7ff      	b.n	8ab8 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x60>
        }
    }
    8ab8:	e072      	b.n	8ba0 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    8aba:	f64b 60cc 	movw	r0, #48844	; 0xbecc
    8abe:	f2c0 0001 	movt	r0, #1
    8ac2:	6801      	ldr	r1, [r0, #0]
    8ac4:	980d      	ldr	r0, [sp, #52]	; 0x34
    8ac6:	9021      	str	r0, [sp, #132]	; 0x84
    8ac8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8aca:	9222      	str	r2, [sp, #136]	; 0x88
    8acc:	f64b 63e0 	movw	r3, #48864	; 0xbee0
    8ad0:	f2c0 0301 	movt	r3, #1
    8ad4:	681b      	ldr	r3, [r3, #0]
    8ad6:	f64b 6ce4 	movw	ip, #48868	; 0xbee4
    8ada:	f2c0 0c01 	movt	ip, #1
    8ade:	f8dc c000 	ldr.w	ip, [ip]
    8ae2:	46ee      	mov	lr, sp
    8ae4:	2400      	movs	r4, #0
    8ae6:	f8ce 4000 	str.w	r4, [lr]
    8aea:	a823      	add	r0, sp, #140	; 0x8c
    8aec:	2201      	movs	r2, #1
    8aee:	910a      	str	r1, [sp, #40]	; 0x28
    8af0:	4619      	mov	r1, r3
    8af2:	4663      	mov	r3, ip
    8af4:	f000 f856 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8af8:	e7ff      	b.n	8afa <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xa2>
    8afa:	a821      	add	r0, sp, #132	; 0x84
    8afc:	901e      	str	r0, [sp, #120]	; 0x78
    8afe:	a822      	add	r0, sp, #136	; 0x88
    8b00:	901f      	str	r0, [sp, #124]	; 0x7c
    8b02:	a823      	add	r0, sp, #140	; 0x8c
    8b04:	9020      	str	r0, [sp, #128]	; 0x80
    8b06:	981e      	ldr	r0, [sp, #120]	; 0x78
    8b08:	902f      	str	r0, [sp, #188]	; 0xbc
    8b0a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8b0c:	9130      	str	r1, [sp, #192]	; 0xc0
    8b0e:	9a20      	ldr	r2, [sp, #128]	; 0x80
    8b10:	9231      	str	r2, [sp, #196]	; 0xc4
    8b12:	f249 13ef 	movw	r3, #37359	; 0x91ef
    8b16:	f2c0 0300 	movt	r3, #0
    8b1a:	9109      	str	r1, [sp, #36]	; 0x24
    8b1c:	4619      	mov	r1, r3
    8b1e:	9208      	str	r2, [sp, #32]
    8b20:	f000 fcb4 	bl	948c <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8b24:	9007      	str	r0, [sp, #28]
    8b26:	9106      	str	r1, [sp, #24]
    8b28:	e7ff      	b.n	8b2a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xd2>
    8b2a:	f249 11ef 	movw	r1, #37359	; 0x91ef
    8b2e:	f2c0 0100 	movt	r1, #0
    8b32:	9809      	ldr	r0, [sp, #36]	; 0x24
    8b34:	f000 fcaa 	bl	948c <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8b38:	9005      	str	r0, [sp, #20]
    8b3a:	9104      	str	r1, [sp, #16]
    8b3c:	e7ff      	b.n	8b3e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xe6>
    8b3e:	f645 41a3 	movw	r1, #23715	; 0x5ca3
    8b42:	f2c0 0101 	movt	r1, #1
    8b46:	9808      	ldr	r0, [sp, #32]
    8b48:	f000 fcca 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8b4c:	9003      	str	r0, [sp, #12]
    8b4e:	9102      	str	r1, [sp, #8]
    8b50:	e7ff      	b.n	8b52 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xfa>
    8b52:	9807      	ldr	r0, [sp, #28]
    8b54:	9018      	str	r0, [sp, #96]	; 0x60
    8b56:	9906      	ldr	r1, [sp, #24]
    8b58:	9119      	str	r1, [sp, #100]	; 0x64
    8b5a:	9a05      	ldr	r2, [sp, #20]
    8b5c:	921a      	str	r2, [sp, #104]	; 0x68
    8b5e:	9b04      	ldr	r3, [sp, #16]
    8b60:	931b      	str	r3, [sp, #108]	; 0x6c
    8b62:	f8dd c00c 	ldr.w	ip, [sp, #12]
    8b66:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    8b6a:	f8dd e008 	ldr.w	lr, [sp, #8]
    8b6e:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    8b72:	466c      	mov	r4, sp
    8b74:	2503      	movs	r5, #3
    8b76:	6025      	str	r5, [r4, #0]
    8b78:	a812      	add	r0, sp, #72	; 0x48
    8b7a:	ab18      	add	r3, sp, #96	; 0x60
    8b7c:	990a      	ldr	r1, [sp, #40]	; 0x28
    8b7e:	462a      	mov	r2, r5
    8b80:	f000 f810 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8b84:	e7ff      	b.n	8b86 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12e>
    8b86:	f64b 7000 	movw	r0, #48896	; 0xbf00
    8b8a:	f2c0 0001 	movt	r0, #1
    8b8e:	f00c fd9a 	bl	156c6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8b92:	9001      	str	r0, [sp, #4]
    8b94:	e7ff      	b.n	8b96 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x13e>
    8b96:	a812      	add	r0, sp, #72	; 0x48
    8b98:	9901      	ldr	r1, [sp, #4]
    8b9a:	f00c fdd1 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8b9e:	defe      	udf	#254	; 0xfe
    }
    8ba0:	b032      	add	sp, #200	; 0xc8
    8ba2:	bdb0      	pop	{r4, r5, r7, pc}

00008ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>:
    8ba4:	b580      	push	{r7, lr}
    8ba6:	b086      	sub	sp, #24
    8ba8:	f8dd c020 	ldr.w	ip, [sp, #32]
    8bac:	9102      	str	r1, [sp, #8]
    8bae:	9203      	str	r2, [sp, #12]
    8bb0:	9304      	str	r3, [sp, #16]
    8bb2:	f8cd c014 	str.w	ip, [sp, #20]
    8bb6:	f04f 0e00 	mov.w	lr, #0
    8bba:	f8cd e004 	str.w	lr, [sp, #4]
    8bbe:	f8cd e000 	str.w	lr, [sp]
    8bc2:	f8cd e000 	str.w	lr, [sp]
    8bc6:	6001      	str	r1, [r0, #0]
    8bc8:	6042      	str	r2, [r0, #4]
    8bca:	9900      	ldr	r1, [sp, #0]
    8bcc:	9a01      	ldr	r2, [sp, #4]
    8bce:	6081      	str	r1, [r0, #8]
    8bd0:	60c2      	str	r2, [r0, #12]
    8bd2:	6103      	str	r3, [r0, #16]
    8bd4:	f8c0 c014 	str.w	ip, [r0, #20]
    8bd8:	b006      	add	sp, #24
    8bda:	bd80      	pop	{r7, pc}

00008bdc <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>:
    8bdc:	b082      	sub	sp, #8
    8bde:	9001      	str	r0, [sp, #4]
    8be0:	7800      	ldrb	r0, [r0, #0]
    8be2:	07c0      	lsls	r0, r0, #31
    8be4:	2800      	cmp	r0, #0
    8be6:	d004      	beq.n	8bf2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x16>
    8be8:	e7ff      	b.n	8bea <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0xe>
    8bea:	2000      	movs	r0, #0
    8bec:	f88d 0003 	strb.w	r0, [sp, #3]
    8bf0:	e003      	b.n	8bfa <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8bf2:	2001      	movs	r0, #1
    8bf4:	f88d 0003 	strb.w	r0, [sp, #3]
    8bf8:	e7ff      	b.n	8bfa <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8bfa:	f89d 0003 	ldrb.w	r0, [sp, #3]
    8bfe:	b002      	add	sp, #8
    8c00:	4770      	bx	lr

00008c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>:
    8c02:	b08a      	sub	sp, #40	; 0x28
    8c04:	9005      	str	r0, [sp, #20]
    8c06:	9107      	str	r1, [sp, #28]
    8c08:	9208      	str	r2, [sp, #32]
    8c0a:	9805      	ldr	r0, [sp, #20]
    8c0c:	f1b0 0c01 	subs.w	ip, r0, #1
    8c10:	bf18      	it	ne
    8c12:	f04f 0c01 	movne.w	ip, #1
    8c16:	2801      	cmp	r0, #1
    8c18:	9304      	str	r3, [sp, #16]
    8c1a:	9203      	str	r2, [sp, #12]
    8c1c:	9102      	str	r1, [sp, #8]
    8c1e:	d010      	beq.n	8c42 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x40>
    8c20:	e7ff      	b.n	8c22 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x20>
    8c22:	9805      	ldr	r0, [sp, #20]
    8c24:	9006      	str	r0, [sp, #24]
    8c26:	4668      	mov	r0, sp
    8c28:	9904      	ldr	r1, [sp, #16]
    8c2a:	6001      	str	r1, [r0, #0]
    8c2c:	f64b 7310 	movw	r3, #48912	; 0xbf10
    8c30:	f2c0 0301 	movt	r3, #1
    8c34:	aa06      	add	r2, sp, #24
    8c36:	9802      	ldr	r0, [sp, #8]
    8c38:	9903      	ldr	r1, [sp, #12]
    8c3a:	f00c fd1d 	bl	15678 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    8c3e:	defe      	udf	#254	; 0xfe
    8c40:	defe      	udf	#254	; 0xfe
    8c42:	9805      	ldr	r0, [sp, #20]
    8c44:	2801      	cmp	r0, #1
    8c46:	d102      	bne.n	8c4e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x4c>
    8c48:	e7ff      	b.n	8c4a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>
    8c4a:	b00a      	add	sp, #40	; 0x28
    8c4c:	4770      	bx	lr
    8c4e:	e7fc      	b.n	8c4a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>

00008c50 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>:
    8c50:	b580      	push	{r7, lr}
    8c52:	b082      	sub	sp, #8
    8c54:	9001      	str	r0, [sp, #4]
    8c56:	f7ff ffc1 	bl	8bdc <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>
    8c5a:	9000      	str	r0, [sp, #0]
    8c5c:	e7ff      	b.n	8c5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E+0xe>
    8c5e:	2001      	movs	r0, #1
    8c60:	9900      	ldr	r1, [sp, #0]
    8c62:	4388      	bics	r0, r1
    8c64:	b002      	add	sp, #8
    8c66:	bd80      	pop	{r7, pc}

00008c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>:
    8c68:	b082      	sub	sp, #8
    8c6a:	9001      	str	r0, [sp, #4]
    8c6c:	9000      	str	r0, [sp, #0]
    8c6e:	9800      	ldr	r0, [sp, #0]
    8c70:	b002      	add	sp, #8
    8c72:	4770      	bx	lr

00008c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>:
    8c74:	b081      	sub	sp, #4
    8c76:	4601      	mov	r1, r0
    8c78:	f88d 0003 	strb.w	r0, [sp, #3]
    8c7c:	b001      	add	sp, #4
    8c7e:	4770      	bx	lr

00008c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>:
    8c80:	b081      	sub	sp, #4
    8c82:	9000      	str	r0, [sp, #0]
    8c84:	b001      	add	sp, #4
    8c86:	4770      	bx	lr

00008c88 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>:
    8c88:	b580      	push	{r7, lr}
    8c8a:	b08a      	sub	sp, #40	; 0x28
    8c8c:	9007      	str	r0, [sp, #28]
    8c8e:	9108      	str	r1, [sp, #32]
    8c90:	9209      	str	r2, [sp, #36]	; 0x24
    8c92:	2300      	movs	r3, #0
    8c94:	9305      	str	r3, [sp, #20]
    8c96:	9006      	str	r0, [sp, #24]
    8c98:	9805      	ldr	r0, [sp, #20]
    8c9a:	9b06      	ldr	r3, [sp, #24]
    8c9c:	9104      	str	r1, [sp, #16]
    8c9e:	4619      	mov	r1, r3
    8ca0:	9b04      	ldr	r3, [sp, #16]
    8ca2:	9203      	str	r2, [sp, #12]
    8ca4:	461a      	mov	r2, r3
    8ca6:	9b03      	ldr	r3, [sp, #12]
    8ca8:	f000 f828 	bl	8cfc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    8cac:	9002      	str	r0, [sp, #8]
    8cae:	9101      	str	r1, [sp, #4]
    8cb0:	e7ff      	b.n	8cb2 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E+0x2a>
    8cb2:	9802      	ldr	r0, [sp, #8]
    8cb4:	9901      	ldr	r1, [sp, #4]
    8cb6:	b00a      	add	sp, #40	; 0x28
    8cb8:	bd80      	pop	{r7, pc}

00008cba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>:
    8cba:	b580      	push	{r7, lr}
    8cbc:	b08a      	sub	sp, #40	; 0x28
    8cbe:	9006      	str	r0, [sp, #24]
    8cc0:	9107      	str	r1, [sp, #28]
    8cc2:	9208      	str	r2, [sp, #32]
    8cc4:	9309      	str	r3, [sp, #36]	; 0x24
    8cc6:	9005      	str	r0, [sp, #20]
    8cc8:	4610      	mov	r0, r2
    8cca:	9104      	str	r1, [sp, #16]
    8ccc:	4619      	mov	r1, r3
    8cce:	f008 ffeb 	bl	11ca8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8cd2:	9003      	str	r0, [sp, #12]
    8cd4:	e7ff      	b.n	8cd6 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x1c>
    8cd6:	9803      	ldr	r0, [sp, #12]
    8cd8:	9905      	ldr	r1, [sp, #20]
    8cda:	f008 ff6c 	bl	11bb6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    8cde:	9002      	str	r0, [sp, #8]
    8ce0:	e7ff      	b.n	8ce2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x28>
    8ce2:	9804      	ldr	r0, [sp, #16]
    8ce4:	9905      	ldr	r1, [sp, #20]
    8ce6:	1a41      	subs	r1, r0, r1
    8ce8:	9802      	ldr	r0, [sp, #8]
    8cea:	f000 f8b7 	bl	8e5c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
    8cee:	9001      	str	r0, [sp, #4]
    8cf0:	9100      	str	r1, [sp, #0]
    8cf2:	e7ff      	b.n	8cf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x3a>
    8cf4:	9801      	ldr	r0, [sp, #4]
    8cf6:	9900      	ldr	r1, [sp, #0]
    8cf8:	b00a      	add	sp, #40	; 0x28
    8cfa:	bd80      	pop	{r7, pc}

00008cfc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>:
    8cfc:	b580      	push	{r7, lr}
    8cfe:	b08c      	sub	sp, #48	; 0x30
    8d00:	9008      	str	r0, [sp, #32]
    8d02:	9109      	str	r1, [sp, #36]	; 0x24
    8d04:	920a      	str	r2, [sp, #40]	; 0x28
    8d06:	930b      	str	r3, [sp, #44]	; 0x2c
    8d08:	4288      	cmp	r0, r1
    8d0a:	9307      	str	r3, [sp, #28]
    8d0c:	9206      	str	r2, [sp, #24]
    8d0e:	9105      	str	r1, [sp, #20]
    8d10:	9004      	str	r0, [sp, #16]
    8d12:	d806      	bhi.n	8d22 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x26>
    8d14:	e7ff      	b.n	8d16 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x1a>
    8d16:	9806      	ldr	r0, [sp, #24]
    8d18:	9907      	ldr	r1, [sp, #28]
    8d1a:	f008 ffdc 	bl	11cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d1e:	9003      	str	r0, [sp, #12]
    8d20:	e004      	b.n	8d2c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x30>
    8d22:	9804      	ldr	r0, [sp, #16]
    8d24:	9905      	ldr	r1, [sp, #20]
    8d26:	f00d fc4a 	bl	165be <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
    8d2a:	defe      	udf	#254	; 0xfe
    8d2c:	9805      	ldr	r0, [sp, #20]
    8d2e:	9903      	ldr	r1, [sp, #12]
    8d30:	4288      	cmp	r0, r1
    8d32:	d809      	bhi.n	8d48 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x4c>
    8d34:	e7ff      	b.n	8d36 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x3a>
    8d36:	9804      	ldr	r0, [sp, #16]
    8d38:	9905      	ldr	r1, [sp, #20]
    8d3a:	9a06      	ldr	r2, [sp, #24]
    8d3c:	9b07      	ldr	r3, [sp, #28]
    8d3e:	f7ff ffbc 	bl	8cba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>
    8d42:	9002      	str	r0, [sp, #8]
    8d44:	9101      	str	r1, [sp, #4]
    8d46:	e00a      	b.n	8d5e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x62>
    8d48:	9806      	ldr	r0, [sp, #24]
    8d4a:	9907      	ldr	r1, [sp, #28]
    8d4c:	f008 ffc3 	bl	11cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d50:	9000      	str	r0, [sp, #0]
    8d52:	e7ff      	b.n	8d54 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x58>
    8d54:	9805      	ldr	r0, [sp, #20]
    8d56:	9900      	ldr	r1, [sp, #0]
    8d58:	f00d fc0f 	bl	1657a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
    8d5c:	defe      	udf	#254	; 0xfe
    8d5e:	9802      	ldr	r0, [sp, #8]
    8d60:	9901      	ldr	r1, [sp, #4]
    8d62:	b00c      	add	sp, #48	; 0x30
    8d64:	bd80      	pop	{r7, pc}

00008d66 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8d66:	b580      	push	{r7, lr}
    8d68:	b082      	sub	sp, #8
    8d6a:	9001      	str	r0, [sp, #4]
    8d6c:	f00f fec4 	bl	18af8 <os_eventq_run>
    8d70:	e7ff      	b.n	8d72 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE+0xc>
    8d72:	2001      	movs	r0, #1
    8d74:	b002      	add	sp, #8
    8d76:	bd80      	pop	{r7, pc}

00008d78 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8d78:	b580      	push	{r7, lr}
    8d7a:	b084      	sub	sp, #16
    8d7c:	9002      	str	r0, [sp, #8]
    8d7e:	f00f fee7 	bl	18b50 <os_eventq_dflt_get>
    8d82:	4601      	mov	r1, r0
    8d84:	9003      	str	r0, [sp, #12]
    8d86:	9101      	str	r1, [sp, #4]
    8d88:	e7ff      	b.n	8d8a <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE+0x12>
    8d8a:	9801      	ldr	r0, [sp, #4]
    8d8c:	9902      	ldr	r1, [sp, #8]
    8d8e:	6048      	str	r0, [r1, #4]
    8d90:	2200      	movs	r2, #0
    8d92:	600a      	str	r2, [r1, #0]
    8d94:	b004      	add	sp, #16
    8d96:	bd80      	pop	{r7, pc}

00008d98 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>:
impl Default for os_task_stailq {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8d98:	b570      	push	{r4, r5, r6, lr}
    8d9a:	b09c      	sub	sp, #112	; 0x70
    8d9c:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
    8da0:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
    8da4:	9c22      	ldr	r4, [sp, #136]	; 0x88
    8da6:	9d21      	ldr	r5, [sp, #132]	; 0x84
    8da8:	9e20      	ldr	r6, [sp, #128]	; 0x80
    8daa:	9013      	str	r0, [sp, #76]	; 0x4c
    8dac:	9114      	str	r1, [sp, #80]	; 0x50
    8dae:	9215      	str	r2, [sp, #84]	; 0x54
    8db0:	9316      	str	r3, [sp, #88]	; 0x58
    8db2:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
    8db6:	9418      	str	r4, [sp, #96]	; 0x60
    8db8:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
    8dbc:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
    8dc0:	9011      	str	r0, [sp, #68]	; 0x44
    8dc2:	4608      	mov	r0, r1
    8dc4:	9310      	str	r3, [sp, #64]	; 0x40
    8dc6:	920f      	str	r2, [sp, #60]	; 0x3c
    8dc8:	910e      	str	r1, [sp, #56]	; 0x38
    8dca:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    8dce:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    8dd2:	940b      	str	r4, [sp, #44]	; 0x2c
    8dd4:	950a      	str	r5, [sp, #40]	; 0x28
    8dd6:	9609      	str	r6, [sp, #36]	; 0x24
    8dd8:	f7ff fe3e 	bl	8a58 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>
    8ddc:	e7ff      	b.n	8dde <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x46>
    8dde:	980e      	ldr	r0, [sp, #56]	; 0x38
    8de0:	f7ff fe1c 	bl	8a1c <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>
    8de4:	9008      	str	r0, [sp, #32]
    8de6:	e7ff      	b.n	8de8 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x50>
    8de8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8dea:	990c      	ldr	r1, [sp, #48]	; 0x30
    8dec:	f000 f93b 	bl	9066 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>
    8df0:	9007      	str	r0, [sp, #28]
    8df2:	e7ff      	b.n	8df4 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x5c>
    8df4:	980d      	ldr	r0, [sp, #52]	; 0x34
    8df6:	b281      	uxth	r1, r0
    8df8:	466a      	mov	r2, sp
    8dfa:	60d1      	str	r1, [r2, #12]
    8dfc:	9907      	ldr	r1, [sp, #28]
    8dfe:	6091      	str	r1, [r2, #8]
    8e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e02:	6053      	str	r3, [r2, #4]
    8e04:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    8e08:	fa5f fe8c 	uxtb.w	lr, ip
    8e0c:	f8c2 e000 	str.w	lr, [r2]
    8e10:	9811      	ldr	r0, [sp, #68]	; 0x44
    8e12:	9908      	ldr	r1, [sp, #32]
    8e14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8e16:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8e18:	f010 fc3a 	bl	19690 <os_task_init>
    8e1c:	4601      	mov	r1, r0
    8e1e:	901b      	str	r0, [sp, #108]	; 0x6c
    8e20:	9106      	str	r1, [sp, #24]
    8e22:	e7ff      	b.n	8e24 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x8c>
    8e24:	9806      	ldr	r0, [sp, #24]
    8e26:	2800      	cmp	r0, #0
    8e28:	d005      	beq.n	8e36 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x9e>
    8e2a:	e7ff      	b.n	8e2c <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x94>
    8e2c:	9806      	ldr	r0, [sp, #24]
    8e2e:	f009 fb80 	bl	12532 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>
    8e32:	9005      	str	r0, [sp, #20]
    8e34:	e004      	b.n	8e40 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xa8>
    8e36:	2000      	movs	r0, #0
    8e38:	9012      	str	r0, [sp, #72]	; 0x48
    8e3a:	2001      	movs	r0, #1
    8e3c:	9012      	str	r0, [sp, #72]	; 0x48
    8e3e:	e002      	b.n	8e46 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8e40:	9805      	ldr	r0, [sp, #20]
    8e42:	9012      	str	r0, [sp, #72]	; 0x48
    8e44:	e7ff      	b.n	8e46 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8e46:	9812      	ldr	r0, [sp, #72]	; 0x48
    8e48:	b01c      	add	sp, #112	; 0x70
    8e4a:	bd70      	pop	{r4, r5, r6, pc}

00008e4c <_ZN4core3ptr13drop_in_place17h1982c2483e0a2028E>:
    8e4c:	b081      	sub	sp, #4
    8e4e:	9000      	str	r0, [sp, #0]
    8e50:	b001      	add	sp, #4
    8e52:	4770      	bx	lr

00008e54 <_ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E>:
    8e54:	b081      	sub	sp, #4
    8e56:	9000      	str	r0, [sp, #0]
    8e58:	b001      	add	sp, #4
    8e5a:	4770      	bx	lr

00008e5c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>:
    8e5c:	b580      	push	{r7, lr}
    8e5e:	b084      	sub	sp, #16
    8e60:	9002      	str	r0, [sp, #8]
    8e62:	9103      	str	r1, [sp, #12]
    8e64:	f000 f993 	bl	918e <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>
    8e68:	9001      	str	r0, [sp, #4]
    8e6a:	9100      	str	r1, [sp, #0]
    8e6c:	e7ff      	b.n	8e6e <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE+0x12>
    8e6e:	9801      	ldr	r0, [sp, #4]
    8e70:	9900      	ldr	r1, [sp, #0]
    8e72:	b004      	add	sp, #16
    8e74:	bd80      	pop	{r7, pc}

00008e76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>:
    8e76:	b5b0      	push	{r4, r5, r7, lr}
    8e78:	b0b8      	sub	sp, #224	; 0xe0
    8e7a:	902f      	str	r0, [sp, #188]	; 0xbc
    8e7c:	9130      	str	r1, [sp, #192]	; 0xc0
    8e7e:	9231      	str	r2, [sp, #196]	; 0xc4
    8e80:	9332      	str	r3, [sp, #200]	; 0xc8
    8e82:	9013      	str	r0, [sp, #76]	; 0x4c
    8e84:	9112      	str	r1, [sp, #72]	; 0x48
    8e86:	9311      	str	r3, [sp, #68]	; 0x44
    8e88:	9210      	str	r2, [sp, #64]	; 0x40
    8e8a:	f008 ff24 	bl	11cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8e8e:	9016      	str	r0, [sp, #88]	; 0x58
    8e90:	e7ff      	b.n	8e92 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x1c>
    8e92:	9810      	ldr	r0, [sp, #64]	; 0x40
    8e94:	9911      	ldr	r1, [sp, #68]	; 0x44
    8e96:	f008 ff1e 	bl	11cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8e9a:	9017      	str	r0, [sp, #92]	; 0x5c
    8e9c:	e7ff      	b.n	8e9e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x28>
    8e9e:	a816      	add	r0, sp, #88	; 0x58
    8ea0:	9014      	str	r0, [sp, #80]	; 0x50
    8ea2:	a817      	add	r0, sp, #92	; 0x5c
    8ea4:	9015      	str	r0, [sp, #84]	; 0x54
    8ea6:	9814      	ldr	r0, [sp, #80]	; 0x50
    8ea8:	9033      	str	r0, [sp, #204]	; 0xcc
    8eaa:	9915      	ldr	r1, [sp, #84]	; 0x54
    8eac:	9134      	str	r1, [sp, #208]	; 0xd0
    8eae:	6802      	ldr	r2, [r0, #0]
    8eb0:	680b      	ldr	r3, [r1, #0]
    8eb2:	429a      	cmp	r2, r3
    8eb4:	900f      	str	r0, [sp, #60]	; 0x3c
    8eb6:	910e      	str	r1, [sp, #56]	; 0x38
    8eb8:	d106      	bne.n	8ec8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x52>
    8eba:	e7ff      	b.n	8ebc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x46>
    8ebc:	9810      	ldr	r0, [sp, #64]	; 0x40
    8ebe:	9911      	ldr	r1, [sp, #68]	; 0x44
    8ec0:	f008 ff11 	bl	11ce6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8ec4:	900d      	str	r0, [sp, #52]	; 0x34
    8ec6:	e072      	b.n	8fae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x138>
    8ec8:	f64b 7074 	movw	r0, #49012	; 0xbf74
    8ecc:	f2c0 0001 	movt	r0, #1
    8ed0:	6801      	ldr	r1, [r0, #0]
    8ed2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8ed4:	9027      	str	r0, [sp, #156]	; 0x9c
    8ed6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8ed8:	9228      	str	r2, [sp, #160]	; 0xa0
    8eda:	f64b 73b4 	movw	r3, #49076	; 0xbfb4
    8ede:	f2c0 0301 	movt	r3, #1
    8ee2:	681b      	ldr	r3, [r3, #0]
    8ee4:	f64b 7cb8 	movw	ip, #49080	; 0xbfb8
    8ee8:	f2c0 0c01 	movt	ip, #1
    8eec:	f8dc c000 	ldr.w	ip, [ip]
    8ef0:	46ee      	mov	lr, sp
    8ef2:	2400      	movs	r4, #0
    8ef4:	f8ce 4000 	str.w	r4, [lr]
    8ef8:	a829      	add	r0, sp, #164	; 0xa4
    8efa:	2201      	movs	r2, #1
    8efc:	910c      	str	r1, [sp, #48]	; 0x30
    8efe:	4619      	mov	r1, r3
    8f00:	4663      	mov	r3, ip
    8f02:	f7ff fe4f 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8f06:	e7ff      	b.n	8f08 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x92>
    8f08:	a827      	add	r0, sp, #156	; 0x9c
    8f0a:	9024      	str	r0, [sp, #144]	; 0x90
    8f0c:	a828      	add	r0, sp, #160	; 0xa0
    8f0e:	9025      	str	r0, [sp, #148]	; 0x94
    8f10:	a829      	add	r0, sp, #164	; 0xa4
    8f12:	9026      	str	r0, [sp, #152]	; 0x98
    8f14:	9824      	ldr	r0, [sp, #144]	; 0x90
    8f16:	9035      	str	r0, [sp, #212]	; 0xd4
    8f18:	9925      	ldr	r1, [sp, #148]	; 0x94
    8f1a:	9136      	str	r1, [sp, #216]	; 0xd8
    8f1c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8f1e:	9237      	str	r2, [sp, #220]	; 0xdc
    8f20:	f242 4305 	movw	r3, #9221	; 0x2405
    8f24:	f2c0 0301 	movt	r3, #1
    8f28:	910b      	str	r1, [sp, #44]	; 0x2c
    8f2a:	4619      	mov	r1, r3
    8f2c:	920a      	str	r2, [sp, #40]	; 0x28
    8f2e:	f009 fa77 	bl	12420 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8f32:	9009      	str	r0, [sp, #36]	; 0x24
    8f34:	9108      	str	r1, [sp, #32]
    8f36:	e7ff      	b.n	8f38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xc2>
    8f38:	f242 4105 	movw	r1, #9221	; 0x2405
    8f3c:	f2c0 0101 	movt	r1, #1
    8f40:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8f42:	f009 fa6d 	bl	12420 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8f46:	9007      	str	r0, [sp, #28]
    8f48:	9106      	str	r1, [sp, #24]
    8f4a:	e7ff      	b.n	8f4c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xd6>
    8f4c:	f645 41a3 	movw	r1, #23715	; 0x5ca3
    8f50:	f2c0 0101 	movt	r1, #1
    8f54:	980a      	ldr	r0, [sp, #40]	; 0x28
    8f56:	f000 fac3 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8f5a:	9005      	str	r0, [sp, #20]
    8f5c:	9104      	str	r1, [sp, #16]
    8f5e:	e7ff      	b.n	8f60 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xea>
    8f60:	9809      	ldr	r0, [sp, #36]	; 0x24
    8f62:	901e      	str	r0, [sp, #120]	; 0x78
    8f64:	9908      	ldr	r1, [sp, #32]
    8f66:	911f      	str	r1, [sp, #124]	; 0x7c
    8f68:	9a07      	ldr	r2, [sp, #28]
    8f6a:	9220      	str	r2, [sp, #128]	; 0x80
    8f6c:	9b06      	ldr	r3, [sp, #24]
    8f6e:	9321      	str	r3, [sp, #132]	; 0x84
    8f70:	f8dd c014 	ldr.w	ip, [sp, #20]
    8f74:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    8f78:	f8dd e010 	ldr.w	lr, [sp, #16]
    8f7c:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
    8f80:	466c      	mov	r4, sp
    8f82:	2503      	movs	r5, #3
    8f84:	6025      	str	r5, [r4, #0]
    8f86:	a818      	add	r0, sp, #96	; 0x60
    8f88:	ab1e      	add	r3, sp, #120	; 0x78
    8f8a:	990c      	ldr	r1, [sp, #48]	; 0x30
    8f8c:	462a      	mov	r2, r5
    8f8e:	f7ff fe09 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8f92:	e7ff      	b.n	8f94 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x11e>
    8f94:	f24c 0008 	movw	r0, #49160	; 0xc008
    8f98:	f2c0 0001 	movt	r0, #1
    8f9c:	f00c fb93 	bl	156c6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8fa0:	9003      	str	r0, [sp, #12]
    8fa2:	e7ff      	b.n	8fa4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x12e>
    8fa4:	a818      	add	r0, sp, #96	; 0x60
    8fa6:	9903      	ldr	r1, [sp, #12]
    8fa8:	f00c fbca 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8fac:	defe      	udf	#254	; 0xfe
    8fae:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8fb0:	9912      	ldr	r1, [sp, #72]	; 0x48
    8fb2:	f008 fe79 	bl	11ca8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8fb6:	9002      	str	r0, [sp, #8]
    8fb8:	e7ff      	b.n	8fba <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x144>
    8fba:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8fbc:	9912      	ldr	r1, [sp, #72]	; 0x48
    8fbe:	f008 fe8a 	bl	11cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8fc2:	9001      	str	r0, [sp, #4]
    8fc4:	e7ff      	b.n	8fc6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x150>
    8fc6:	980d      	ldr	r0, [sp, #52]	; 0x34
    8fc8:	9902      	ldr	r1, [sp, #8]
    8fca:	9a01      	ldr	r2, [sp, #4]
    8fcc:	f008 fc8f 	bl	118ee <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    8fd0:	e7ff      	b.n	8fd2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x15c>
    8fd2:	b038      	add	sp, #224	; 0xe0
    8fd4:	bdb0      	pop	{r4, r5, r7, pc}

00008fd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>:
    8fd6:	b580      	push	{r7, lr}
    8fd8:	b086      	sub	sp, #24
    8fda:	9003      	str	r0, [sp, #12]
    8fdc:	9104      	str	r1, [sp, #16]
    8fde:	9205      	str	r2, [sp, #20]
    8fe0:	9002      	str	r0, [sp, #8]
    8fe2:	4610      	mov	r0, r2
    8fe4:	9a02      	ldr	r2, [sp, #8]
    8fe6:	9101      	str	r1, [sp, #4]
    8fe8:	4611      	mov	r1, r2
    8fea:	9a01      	ldr	r2, [sp, #4]
    8fec:	f000 f861 	bl	90b2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>
    8ff0:	9000      	str	r0, [sp, #0]
    8ff2:	e7ff      	b.n	8ff4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE+0x1e>
    8ff4:	9800      	ldr	r0, [sp, #0]
    8ff6:	b006      	add	sp, #24
    8ff8:	bd80      	pop	{r7, pc}

00008ffa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>:
    8ffa:	b580      	push	{r7, lr}
    8ffc:	b08e      	sub	sp, #56	; 0x38
    8ffe:	9009      	str	r0, [sp, #36]	; 0x24
    9000:	910a      	str	r1, [sp, #40]	; 0x28
    9002:	9005      	str	r0, [sp, #20]
    9004:	9104      	str	r1, [sp, #16]
    9006:	f008 fe66 	bl	11cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    900a:	9003      	str	r0, [sp, #12]
    900c:	e7ff      	b.n	900e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x14>
    900e:	2101      	movs	r1, #1
    9010:	9803      	ldr	r0, [sp, #12]
    9012:	f000 fa7a 	bl	950a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>
    9016:	9002      	str	r0, [sp, #8]
    9018:	9101      	str	r1, [sp, #4]
    901a:	e7ff      	b.n	901c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x22>
    901c:	9802      	ldr	r0, [sp, #8]
    901e:	9901      	ldr	r1, [sp, #4]
    9020:	f000 f97c 	bl	931c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>
    9024:	9108      	str	r1, [sp, #32]
    9026:	9007      	str	r0, [sp, #28]
    9028:	e7ff      	b.n	902a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x30>
    902a:	9807      	ldr	r0, [sp, #28]
    902c:	2800      	cmp	r0, #0
    902e:	d001      	beq.n	9034 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x3a>
    9030:	e7ff      	b.n	9032 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x38>
    9032:	e00c      	b.n	904e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x54>
    9034:	9808      	ldr	r0, [sp, #32]
    9036:	900c      	str	r0, [sp, #48]	; 0x30
    9038:	900d      	str	r0, [sp, #52]	; 0x34
    903a:	9905      	ldr	r1, [sp, #20]
    903c:	9000      	str	r0, [sp, #0]
    903e:	4608      	mov	r0, r1
    9040:	9904      	ldr	r1, [sp, #16]
    9042:	9a00      	ldr	r2, [sp, #0]
    9044:	f7ff ffc7 	bl	8fd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>
    9048:	9006      	str	r0, [sp, #24]
    904a:	e00b      	b.n	9064 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x6a>
    904c:	defe      	udf	#254	; 0xfe
    904e:	f008 fb3a 	bl	116c6 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>
    9052:	e002      	b.n	905a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x60>
    9054:	9806      	ldr	r0, [sp, #24]
    9056:	b00e      	add	sp, #56	; 0x38
    9058:	bd80      	pop	{r7, pc}
    905a:	f000 f959 	bl	9310 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>
    905e:	9006      	str	r0, [sp, #24]
    9060:	e7ff      	b.n	9062 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x68>
    9062:	e7f7      	b.n	9054 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>
    9064:	e7f6      	b.n	9054 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>

00009066 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>:
    9066:	b082      	sub	sp, #8
    9068:	9000      	str	r0, [sp, #0]
    906a:	9101      	str	r1, [sp, #4]
    906c:	b002      	add	sp, #8
    906e:	4770      	bx	lr

00009070 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>:
    9070:	b580      	push	{r7, lr}
    9072:	b088      	sub	sp, #32
    9074:	9005      	str	r0, [sp, #20]
    9076:	9106      	str	r1, [sp, #24]
    9078:	9207      	str	r2, [sp, #28]
    907a:	9004      	str	r0, [sp, #16]
    907c:	4610      	mov	r0, r2
    907e:	9a04      	ldr	r2, [sp, #16]
    9080:	9103      	str	r1, [sp, #12]
    9082:	4611      	mov	r1, r2
    9084:	9a03      	ldr	r2, [sp, #12]
    9086:	f7ff fdff 	bl	8c88 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>
    908a:	9002      	str	r0, [sp, #8]
    908c:	9101      	str	r1, [sp, #4]
    908e:	e7ff      	b.n	9090 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E+0x20>
    9090:	9802      	ldr	r0, [sp, #8]
    9092:	9901      	ldr	r1, [sp, #4]
    9094:	b008      	add	sp, #32
    9096:	bd80      	pop	{r7, pc}

00009098 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>:
    9098:	b580      	push	{r7, lr}
    909a:	b084      	sub	sp, #16
    909c:	9002      	str	r0, [sp, #8]
    909e:	9103      	str	r1, [sp, #12]
    90a0:	f008 face 	bl	11640 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>
    90a4:	9001      	str	r0, [sp, #4]
    90a6:	9100      	str	r1, [sp, #0]
    90a8:	e7ff      	b.n	90aa <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E+0x12>
    90aa:	9801      	ldr	r0, [sp, #4]
    90ac:	9900      	ldr	r1, [sp, #0]
    90ae:	b004      	add	sp, #16
    90b0:	bd80      	pop	{r7, pc}

000090b2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>:
    90b2:	b580      	push	{r7, lr}
    90b4:	b08a      	sub	sp, #40	; 0x28
    90b6:	9007      	str	r0, [sp, #28]
    90b8:	9108      	str	r1, [sp, #32]
    90ba:	9209      	str	r2, [sp, #36]	; 0x24
    90bc:	9005      	str	r0, [sp, #20]
    90be:	4608      	mov	r0, r1
    90c0:	9104      	str	r1, [sp, #16]
    90c2:	4611      	mov	r1, r2
    90c4:	9203      	str	r2, [sp, #12]
    90c6:	f008 fe06 	bl	11cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    90ca:	9002      	str	r0, [sp, #8]
    90cc:	e7ff      	b.n	90ce <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x1c>
    90ce:	9805      	ldr	r0, [sp, #20]
    90d0:	9902      	ldr	r1, [sp, #8]
    90d2:	4288      	cmp	r0, r1
    90d4:	d303      	bcc.n	90de <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x2c>
    90d6:	e7ff      	b.n	90d8 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x26>
    90d8:	2000      	movs	r0, #0
    90da:	9006      	str	r0, [sp, #24]
    90dc:	e009      	b.n	90f2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    90de:	9805      	ldr	r0, [sp, #20]
    90e0:	9904      	ldr	r1, [sp, #16]
    90e2:	9a03      	ldr	r2, [sp, #12]
    90e4:	f008 fe23 	bl	11d2e <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>
    90e8:	9001      	str	r0, [sp, #4]
    90ea:	e7ff      	b.n	90ec <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x3a>
    90ec:	9801      	ldr	r0, [sp, #4]
    90ee:	9006      	str	r0, [sp, #24]
    90f0:	e7ff      	b.n	90f2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    90f2:	9806      	ldr	r0, [sp, #24]
    90f4:	b00a      	add	sp, #40	; 0x28
    90f6:	bd80      	pop	{r7, pc}

000090f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    90f8:	b580      	push	{r7, lr}
    90fa:	b08a      	sub	sp, #40	; 0x28
    90fc:	9004      	str	r0, [sp, #16]
    90fe:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    9100:	9003      	str	r0, [sp, #12]
    9102:	9102      	str	r1, [sp, #8]
    9104:	f000 f86e 	bl	91e4 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    9108:	4601      	mov	r1, r0
    910a:	9006      	str	r0, [sp, #24]
    910c:	9101      	str	r1, [sp, #4]
    910e:	e7ff      	b.n	9110 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x18>
    let len = msg.len() as u32;
    9110:	9803      	ldr	r0, [sp, #12]
    9112:	9902      	ldr	r1, [sp, #8]
    9114:	f000 f850 	bl	91b8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    9118:	9000      	str	r0, [sp, #0]
    911a:	e7ff      	b.n	911c <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x24>
    911c:	9800      	ldr	r0, [sp, #0]
    911e:	9007      	str	r0, [sp, #28]
    9120:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    9122:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    9124:	4608      	mov	r0, r1
    9126:	f000 f809 	bl	913c <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>
    912a:	9009      	str	r0, [sp, #36]	; 0x24
    912c:	e7ff      	b.n	912e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x36>
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    912e:	9801      	ldr	r0, [sp, #4]
    9130:	9900      	ldr	r1, [sp, #0]
    9132:	f00e f99f 	bl	17474 <console_buffer>
    9136:	e7ff      	b.n	9138 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x40>
}
    9138:	b00a      	add	sp, #40	; 0x28
    913a:	bd80      	pop	{r7, pc}

0000913c <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    913c:	b081      	sub	sp, #4
    913e:	9000      	str	r0, [sp, #0]
    9140:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    9142:	b001      	add	sp, #4
    9144:	4770      	bx	lr

00009146 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    9146:	b580      	push	{r7, lr}
    9148:	b086      	sub	sp, #24
    914a:	9004      	str	r0, [sp, #16]
    914c:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    914e:	9003      	str	r0, [sp, #12]
    9150:	9102      	str	r1, [sp, #8]
    9152:	f000 f847 	bl	91e4 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    9156:	9001      	str	r0, [sp, #4]
    9158:	e7ff      	b.n	915a <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x14>
    915a:	9803      	ldr	r0, [sp, #12]
    915c:	9902      	ldr	r1, [sp, #8]
    915e:	f000 f82b 	bl	91b8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    9162:	9000      	str	r0, [sp, #0]
    9164:	e7ff      	b.n	9166 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x20>
    9166:	9801      	ldr	r0, [sp, #4]
    9168:	9900      	ldr	r1, [sp, #0]
    916a:	f00e f983 	bl	17474 <console_buffer>
    916e:	e7ff      	b.n	9170 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x2a>
}
    9170:	b006      	add	sp, #24
    9172:	bd80      	pop	{r7, pc}

00009174 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    9174:	b580      	push	{r7, lr}
    9176:	b082      	sub	sp, #8
    9178:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    917a:	f00e f9eb 	bl	17554 <console_printint>
    917e:	e7ff      	b.n	9180 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E+0xc>
}
    9180:	b002      	add	sp, #8
    9182:	bd80      	pop	{r7, pc}

00009184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    9184:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
    9186:	f00e f94d 	bl	17424 <console_flush>
    918a:	e7ff      	b.n	918c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E+0x8>
}
    918c:	bd80      	pop	{r7, pc}

0000918e <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>:
    918e:	b086      	sub	sp, #24
    9190:	9004      	str	r0, [sp, #16]
    9192:	9105      	str	r1, [sp, #20]
    9194:	9002      	str	r0, [sp, #8]
    9196:	9103      	str	r1, [sp, #12]
    9198:	9802      	ldr	r0, [sp, #8]
    919a:	9903      	ldr	r1, [sp, #12]
    919c:	9000      	str	r0, [sp, #0]
    919e:	9101      	str	r1, [sp, #4]
    91a0:	9800      	ldr	r0, [sp, #0]
    91a2:	9901      	ldr	r1, [sp, #4]
    91a4:	b006      	add	sp, #24
    91a6:	4770      	bx	lr

000091a8 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>:
    91a8:	b082      	sub	sp, #8
    91aa:	460a      	mov	r2, r1
    91ac:	9000      	str	r0, [sp, #0]
    91ae:	f88d 1007 	strb.w	r1, [sp, #7]
    91b2:	7001      	strb	r1, [r0, #0]
    91b4:	b002      	add	sp, #8
    91b6:	4770      	bx	lr

000091b8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>:
    91b8:	b580      	push	{r7, lr}
    91ba:	b08a      	sub	sp, #40	; 0x28
    91bc:	9004      	str	r0, [sp, #16]
    91be:	9105      	str	r1, [sp, #20]
    91c0:	9008      	str	r0, [sp, #32]
    91c2:	9109      	str	r1, [sp, #36]	; 0x24
    91c4:	9006      	str	r0, [sp, #24]
    91c6:	9107      	str	r1, [sp, #28]
    91c8:	9806      	ldr	r0, [sp, #24]
    91ca:	9907      	ldr	r1, [sp, #28]
    91cc:	9003      	str	r0, [sp, #12]
    91ce:	9102      	str	r1, [sp, #8]
    91d0:	e7ff      	b.n	91d2 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x1a>
    91d2:	9803      	ldr	r0, [sp, #12]
    91d4:	9902      	ldr	r1, [sp, #8]
    91d6:	f008 fd7e 	bl	11cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    91da:	9001      	str	r0, [sp, #4]
    91dc:	e7ff      	b.n	91de <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x26>
    91de:	9801      	ldr	r0, [sp, #4]
    91e0:	b00a      	add	sp, #40	; 0x28
    91e2:	bd80      	pop	{r7, pc}

000091e4 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>:
    91e4:	b082      	sub	sp, #8
    91e6:	9000      	str	r0, [sp, #0]
    91e8:	9101      	str	r1, [sp, #4]
    91ea:	b002      	add	sp, #8
    91ec:	4770      	bx	lr

000091ee <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E>:
    91ee:	b580      	push	{r7, lr}
    91f0:	b084      	sub	sp, #16
    91f2:	9002      	str	r0, [sp, #8]
    91f4:	9103      	str	r1, [sp, #12]
    91f6:	6800      	ldr	r0, [r0, #0]
    91f8:	f000 f845 	bl	9286 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>
    91fc:	9001      	str	r0, [sp, #4]
    91fe:	e7ff      	b.n	9200 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E+0x12>
    9200:	9801      	ldr	r0, [sp, #4]
    9202:	f000 0001 	and.w	r0, r0, #1
    9206:	b004      	add	sp, #16
    9208:	bd80      	pop	{r7, pc}

0000920a <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>:
    920a:	b087      	sub	sp, #28
    920c:	9000      	str	r0, [sp, #0]
    920e:	9101      	str	r1, [sp, #4]
    9210:	2000      	movs	r0, #0
    9212:	f88d 0013 	strb.w	r0, [sp, #19]
    9216:	f88d 0012 	strb.w	r0, [sp, #18]
    921a:	2001      	movs	r0, #1
    921c:	f88d 0013 	strb.w	r0, [sp, #19]
    9220:	f88d 0012 	strb.w	r0, [sp, #18]
    9224:	9800      	ldr	r0, [sp, #0]
    9226:	2800      	cmp	r0, #0
    9228:	d001      	beq.n	922e <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x24>
    922a:	e7ff      	b.n	922c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x22>
    922c:	e006      	b.n	923c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x32>
    922e:	2000      	movs	r0, #0
    9230:	f88d 0012 	strb.w	r0, [sp, #18]
    9234:	2001      	movs	r0, #1
    9236:	9002      	str	r0, [sp, #8]
    9238:	e008      	b.n	924c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    923a:	defe      	udf	#254	; 0xfe
    923c:	2000      	movs	r0, #0
    923e:	f88d 0013 	strb.w	r0, [sp, #19]
    9242:	9901      	ldr	r1, [sp, #4]
    9244:	9106      	str	r1, [sp, #24]
    9246:	9103      	str	r1, [sp, #12]
    9248:	9002      	str	r0, [sp, #8]
    924a:	e7ff      	b.n	924c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    924c:	f89d 0012 	ldrb.w	r0, [sp, #18]
    9250:	07c0      	lsls	r0, r0, #31
    9252:	2800      	cmp	r0, #0
    9254:	d104      	bne.n	9260 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x56>
    9256:	e7ff      	b.n	9258 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9258:	9800      	ldr	r0, [sp, #0]
    925a:	2801      	cmp	r0, #1
    925c:	d008      	beq.n	9270 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x66>
    925e:	e011      	b.n	9284 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x7a>
    9260:	2000      	movs	r0, #0
    9262:	f88d 0012 	strb.w	r0, [sp, #18]
    9266:	e7f7      	b.n	9258 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9268:	9802      	ldr	r0, [sp, #8]
    926a:	9903      	ldr	r1, [sp, #12]
    926c:	b007      	add	sp, #28
    926e:	4770      	bx	lr
    9270:	f89d 0013 	ldrb.w	r0, [sp, #19]
    9274:	07c0      	lsls	r0, r0, #31
    9276:	2800      	cmp	r0, #0
    9278:	d0f6      	beq.n	9268 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    927a:	e7ff      	b.n	927c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x72>
    927c:	2000      	movs	r0, #0
    927e:	f88d 0013 	strb.w	r0, [sp, #19]
    9282:	e7f1      	b.n	9268 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    9284:	e7f0      	b.n	9268 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>

00009286 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>:
    9286:	b580      	push	{r7, lr}
    9288:	b08e      	sub	sp, #56	; 0x38
    928a:	900b      	str	r0, [sp, #44]	; 0x2c
    928c:	910c      	str	r1, [sp, #48]	; 0x30
    928e:	9003      	str	r0, [sp, #12]
    9290:	9803      	ldr	r0, [sp, #12]
    9292:	6800      	ldr	r0, [r0, #0]
    9294:	2800      	cmp	r0, #0
    9296:	4602      	mov	r2, r0
    9298:	bf18      	it	ne
    929a:	2201      	movne	r2, #1
    929c:	2800      	cmp	r0, #0
    929e:	9101      	str	r1, [sp, #4]
    92a0:	d00f      	beq.n	92c2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x3c>
    92a2:	e7ff      	b.n	92a4 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x1e>
    92a4:	9803      	ldr	r0, [sp, #12]
    92a6:	900d      	str	r0, [sp, #52]	; 0x34
    92a8:	f24c 0218 	movw	r2, #49176	; 0xc018
    92ac:	f2c0 0201 	movt	r2, #1
    92b0:	a907      	add	r1, sp, #28
    92b2:	2304      	movs	r3, #4
    92b4:	9000      	str	r0, [sp, #0]
    92b6:	4608      	mov	r0, r1
    92b8:	9901      	ldr	r1, [sp, #4]
    92ba:	f00d f8b4 	bl	16426 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    92be:	e011      	b.n	92e4 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5e>
    92c0:	defe      	udf	#254	; 0xfe
    92c2:	f24c 021c 	movw	r2, #49180	; 0xc01c
    92c6:	f2c0 0201 	movt	r2, #1
    92ca:	a804      	add	r0, sp, #16
    92cc:	2304      	movs	r3, #4
    92ce:	9901      	ldr	r1, [sp, #4]
    92d0:	f00d f8a9 	bl	16426 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    92d4:	e7ff      	b.n	92d6 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x50>
    92d6:	a804      	add	r0, sp, #16
    92d8:	f00c fbc2 	bl	15a60 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    92dc:	f88d 000b 	strb.w	r0, [sp, #11]
    92e0:	e7ff      	b.n	92e2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5c>
    92e2:	e011      	b.n	9308 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    92e4:	9800      	ldr	r0, [sp, #0]
    92e6:	900a      	str	r0, [sp, #40]	; 0x28
    92e8:	f24c 0220 	movw	r2, #49184	; 0xc020
    92ec:	f2c0 0201 	movt	r2, #1
    92f0:	a807      	add	r0, sp, #28
    92f2:	a90a      	add	r1, sp, #40	; 0x28
    92f4:	f00c fb4b 	bl	1598e <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>
    92f8:	e7ff      	b.n	92fa <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x74>
    92fa:	a807      	add	r0, sp, #28
    92fc:	f00c fbb0 	bl	15a60 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    9300:	f88d 000b 	strb.w	r0, [sp, #11]
    9304:	e7ff      	b.n	9306 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x80>
    9306:	e7ff      	b.n	9308 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    9308:	f89d 000b 	ldrb.w	r0, [sp, #11]
    930c:	b00e      	add	sp, #56	; 0x38
    930e:	bd80      	pop	{r7, pc}

00009310 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>:
    9310:	b082      	sub	sp, #8
    9312:	2000      	movs	r0, #0
    9314:	9000      	str	r0, [sp, #0]
    9316:	9800      	ldr	r0, [sp, #0]
    9318:	b002      	add	sp, #8
    931a:	4770      	bx	lr

0000931c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>:
    931c:	b580      	push	{r7, lr}
    931e:	b084      	sub	sp, #16
    9320:	9002      	str	r0, [sp, #8]
    9322:	9103      	str	r1, [sp, #12]
    9324:	f7ff ff71 	bl	920a <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>
    9328:	9001      	str	r0, [sp, #4]
    932a:	9100      	str	r1, [sp, #0]
    932c:	e7ff      	b.n	932e <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E+0x12>
    932e:	9801      	ldr	r0, [sp, #4]
    9330:	9900      	ldr	r1, [sp, #0]
    9332:	b004      	add	sp, #16
    9334:	bd80      	pop	{r7, pc}

00009336 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>:
    9336:	b580      	push	{r7, lr}
    9338:	b094      	sub	sp, #80	; 0x50
    933a:	9008      	str	r0, [sp, #32]
    933c:	9109      	str	r1, [sp, #36]	; 0x24
    933e:	6802      	ldr	r2, [r0, #0]
    9340:	2a00      	cmp	r2, #0
    9342:	bf18      	it	ne
    9344:	2201      	movne	r2, #1
    9346:	f04f 0300 	mov.w	r3, #0
    934a:	930b      	str	r3, [sp, #44]	; 0x2c
    934c:	920a      	str	r2, [sp, #40]	; 0x28
    934e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9352:	9104      	str	r1, [sp, #16]
    9354:	9003      	str	r0, [sp, #12]
    9356:	9202      	str	r2, [sp, #8]
    9358:	e7ff      	b.n	935a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x24>
    935a:	9802      	ldr	r0, [sp, #8]
    935c:	9902      	ldr	r1, [sp, #8]
    935e:	910d      	str	r1, [sp, #52]	; 0x34
    9360:	9a04      	ldr	r2, [sp, #16]
    9362:	6813      	ldr	r3, [r2, #0]
    9364:	2b00      	cmp	r3, #0
    9366:	bf18      	it	ne
    9368:	2301      	movne	r3, #1
    936a:	f04f 0c00 	mov.w	ip, #0
    936e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    9372:	930e      	str	r3, [sp, #56]	; 0x38
    9374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9376:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    937a:	9001      	str	r0, [sp, #4]
    937c:	9300      	str	r3, [sp, #0]
    937e:	e7ff      	b.n	9380 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x4a>
    9380:	9800      	ldr	r0, [sp, #0]
    9382:	9011      	str	r0, [sp, #68]	; 0x44
    9384:	9901      	ldr	r1, [sp, #4]
    9386:	4281      	cmp	r1, r0
    9388:	d104      	bne.n	9394 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x5e>
    938a:	e7ff      	b.n	938c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x56>
    938c:	2001      	movs	r0, #1
    938e:	f88d 0017 	strb.w	r0, [sp, #23]
    9392:	e003      	b.n	939c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    9394:	2000      	movs	r0, #0
    9396:	f88d 0017 	strb.w	r0, [sp, #23]
    939a:	e7ff      	b.n	939c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    939c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    93a0:	07c0      	lsls	r0, r0, #31
    93a2:	2800      	cmp	r0, #0
    93a4:	d104      	bne.n	93b0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x7a>
    93a6:	e7ff      	b.n	93a8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x72>
    93a8:	2000      	movs	r0, #0
    93aa:	f88d 0016 	strb.w	r0, [sp, #22]
    93ae:	e01c      	b.n	93ea <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    93b0:	9803      	ldr	r0, [sp, #12]
    93b2:	9006      	str	r0, [sp, #24]
    93b4:	9904      	ldr	r1, [sp, #16]
    93b6:	9107      	str	r1, [sp, #28]
    93b8:	9a06      	ldr	r2, [sp, #24]
    93ba:	6812      	ldr	r2, [r2, #0]
    93bc:	2a00      	cmp	r2, #0
    93be:	d104      	bne.n	93ca <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x94>
    93c0:	e7ff      	b.n	93c2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    93c2:	2001      	movs	r0, #1
    93c4:	f88d 0016 	strb.w	r0, [sp, #22]
    93c8:	e00e      	b.n	93e8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    93ca:	9807      	ldr	r0, [sp, #28]
    93cc:	6800      	ldr	r0, [r0, #0]
    93ce:	2800      	cmp	r0, #0
    93d0:	d0f7      	beq.n	93c2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    93d2:	e7ff      	b.n	93d4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x9e>
    93d4:	9806      	ldr	r0, [sp, #24]
    93d6:	9012      	str	r0, [sp, #72]	; 0x48
    93d8:	9907      	ldr	r1, [sp, #28]
    93da:	9113      	str	r1, [sp, #76]	; 0x4c
    93dc:	f009 f9c3 	bl	12766 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>
    93e0:	f88d 0016 	strb.w	r0, [sp, #22]
    93e4:	e7ff      	b.n	93e6 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb0>
    93e6:	e7ff      	b.n	93e8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    93e8:	e7ff      	b.n	93ea <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    93ea:	f89d 0016 	ldrb.w	r0, [sp, #22]
    93ee:	b014      	add	sp, #80	; 0x50
    93f0:	bd80      	pop	{r7, pc}

000093f2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E>:
    93f2:	b580      	push	{r7, lr}
    93f4:	b084      	sub	sp, #16
    93f6:	9002      	str	r0, [sp, #8]
    93f8:	9103      	str	r1, [sp, #12]
    93fa:	6800      	ldr	r0, [r0, #0]
    93fc:	f009 f945 	bl	1268a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>
    9400:	9001      	str	r0, [sp, #4]
    9402:	e7ff      	b.n	9404 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E+0x12>
    9404:	9801      	ldr	r0, [sp, #4]
    9406:	f000 0001 	and.w	r0, r0, #1
    940a:	b004      	add	sp, #16
    940c:	bd80      	pop	{r7, pc}

0000940e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>:
    940e:	b580      	push	{r7, lr}
    9410:	b084      	sub	sp, #16
    9412:	9002      	str	r0, [sp, #8]
    9414:	9103      	str	r1, [sp, #12]
    9416:	6800      	ldr	r0, [r0, #0]
    9418:	f009 f900 	bl	1261c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>
    941c:	9001      	str	r0, [sp, #4]
    941e:	e7ff      	b.n	9420 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E+0x12>
    9420:	9801      	ldr	r0, [sp, #4]
    9422:	f000 0001 	and.w	r0, r0, #1
    9426:	b004      	add	sp, #16
    9428:	bd80      	pop	{r7, pc}

0000942a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E>:
    942a:	b580      	push	{r7, lr}
    942c:	b084      	sub	sp, #16
    942e:	9002      	str	r0, [sp, #8]
    9430:	9103      	str	r1, [sp, #12]
    9432:	6800      	ldr	r0, [r0, #0]
    9434:	f7ff ffeb 	bl	940e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>
    9438:	9001      	str	r0, [sp, #4]
    943a:	e7ff      	b.n	943c <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E+0x12>
    943c:	9801      	ldr	r0, [sp, #4]
    943e:	f000 0001 	and.w	r0, r0, #1
    9442:	b004      	add	sp, #16
    9444:	bd80      	pop	{r7, pc}

00009446 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE>:
    9446:	b580      	push	{r7, lr}
    9448:	b084      	sub	sp, #16
    944a:	9002      	str	r0, [sp, #8]
    944c:	9103      	str	r1, [sp, #12]
    944e:	6800      	ldr	r0, [r0, #0]
    9450:	f009 f952 	bl	126f8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>
    9454:	9001      	str	r0, [sp, #4]
    9456:	e7ff      	b.n	9458 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE+0x12>
    9458:	9801      	ldr	r0, [sp, #4]
    945a:	f000 0001 	and.w	r0, r0, #1
    945e:	b004      	add	sp, #16
    9460:	bd80      	pop	{r7, pc}

00009462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>:
    9462:	b089      	sub	sp, #36	; 0x24
    9464:	9005      	str	r0, [sp, #20]
    9466:	9106      	str	r1, [sp, #24]
    9468:	9107      	str	r1, [sp, #28]
    946a:	9907      	ldr	r1, [sp, #28]
    946c:	9002      	str	r0, [sp, #8]
    946e:	9101      	str	r1, [sp, #4]
    9470:	e7ff      	b.n	9472 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x10>
    9472:	9802      	ldr	r0, [sp, #8]
    9474:	9008      	str	r0, [sp, #32]
    9476:	9908      	ldr	r1, [sp, #32]
    9478:	9100      	str	r1, [sp, #0]
    947a:	e7ff      	b.n	947c <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x1a>
    947c:	9800      	ldr	r0, [sp, #0]
    947e:	9003      	str	r0, [sp, #12]
    9480:	9901      	ldr	r1, [sp, #4]
    9482:	9104      	str	r1, [sp, #16]
    9484:	9803      	ldr	r0, [sp, #12]
    9486:	9904      	ldr	r1, [sp, #16]
    9488:	b009      	add	sp, #36	; 0x24
    948a:	4770      	bx	lr

0000948c <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>:
    948c:	b089      	sub	sp, #36	; 0x24
    948e:	9005      	str	r0, [sp, #20]
    9490:	9106      	str	r1, [sp, #24]
    9492:	9107      	str	r1, [sp, #28]
    9494:	9907      	ldr	r1, [sp, #28]
    9496:	9002      	str	r0, [sp, #8]
    9498:	9101      	str	r1, [sp, #4]
    949a:	e7ff      	b.n	949c <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x10>
    949c:	9802      	ldr	r0, [sp, #8]
    949e:	9008      	str	r0, [sp, #32]
    94a0:	9908      	ldr	r1, [sp, #32]
    94a2:	9100      	str	r1, [sp, #0]
    94a4:	e7ff      	b.n	94a6 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x1a>
    94a6:	9800      	ldr	r0, [sp, #0]
    94a8:	9003      	str	r0, [sp, #12]
    94aa:	9901      	ldr	r1, [sp, #4]
    94ac:	9104      	str	r1, [sp, #16]
    94ae:	9803      	ldr	r0, [sp, #12]
    94b0:	9904      	ldr	r1, [sp, #16]
    94b2:	b009      	add	sp, #36	; 0x24
    94b4:	4770      	bx	lr

000094b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>:
    94b6:	b089      	sub	sp, #36	; 0x24
    94b8:	9005      	str	r0, [sp, #20]
    94ba:	9106      	str	r1, [sp, #24]
    94bc:	9107      	str	r1, [sp, #28]
    94be:	9907      	ldr	r1, [sp, #28]
    94c0:	9002      	str	r0, [sp, #8]
    94c2:	9101      	str	r1, [sp, #4]
    94c4:	e7ff      	b.n	94c6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x10>
    94c6:	9802      	ldr	r0, [sp, #8]
    94c8:	9008      	str	r0, [sp, #32]
    94ca:	9908      	ldr	r1, [sp, #32]
    94cc:	9100      	str	r1, [sp, #0]
    94ce:	e7ff      	b.n	94d0 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x1a>
    94d0:	9800      	ldr	r0, [sp, #0]
    94d2:	9003      	str	r0, [sp, #12]
    94d4:	9901      	ldr	r1, [sp, #4]
    94d6:	9104      	str	r1, [sp, #16]
    94d8:	9803      	ldr	r0, [sp, #12]
    94da:	9904      	ldr	r1, [sp, #16]
    94dc:	b009      	add	sp, #36	; 0x24
    94de:	4770      	bx	lr

000094e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>:
    94e0:	b089      	sub	sp, #36	; 0x24
    94e2:	9005      	str	r0, [sp, #20]
    94e4:	9106      	str	r1, [sp, #24]
    94e6:	9107      	str	r1, [sp, #28]
    94e8:	9907      	ldr	r1, [sp, #28]
    94ea:	9002      	str	r0, [sp, #8]
    94ec:	9101      	str	r1, [sp, #4]
    94ee:	e7ff      	b.n	94f0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x10>
    94f0:	9802      	ldr	r0, [sp, #8]
    94f2:	9008      	str	r0, [sp, #32]
    94f4:	9908      	ldr	r1, [sp, #32]
    94f6:	9100      	str	r1, [sp, #0]
    94f8:	e7ff      	b.n	94fa <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x1a>
    94fa:	9800      	ldr	r0, [sp, #0]
    94fc:	9003      	str	r0, [sp, #12]
    94fe:	9901      	ldr	r1, [sp, #4]
    9500:	9104      	str	r1, [sp, #16]
    9502:	9803      	ldr	r0, [sp, #12]
    9504:	9904      	ldr	r1, [sp, #16]
    9506:	b009      	add	sp, #36	; 0x24
    9508:	4770      	bx	lr

0000950a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>:
    950a:	b580      	push	{r7, lr}
    950c:	b088      	sub	sp, #32
    950e:	9004      	str	r0, [sp, #16]
    9510:	9105      	str	r1, [sp, #20]
    9512:	f000 f819 	bl	9548 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>
    9516:	9001      	str	r0, [sp, #4]
    9518:	9100      	str	r1, [sp, #0]
    951a:	e7ff      	b.n	951c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x12>
    951c:	9801      	ldr	r0, [sp, #4]
    951e:	9006      	str	r0, [sp, #24]
    9520:	9900      	ldr	r1, [sp, #0]
    9522:	f001 0201 	and.w	r2, r1, #1
    9526:	f88d 201f 	strb.w	r2, [sp, #31]
    952a:	2a00      	cmp	r2, #0
    952c:	d105      	bne.n	953a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x30>
    952e:	e7ff      	b.n	9530 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x26>
    9530:	9801      	ldr	r0, [sp, #4]
    9532:	9003      	str	r0, [sp, #12]
    9534:	2101      	movs	r1, #1
    9536:	9102      	str	r1, [sp, #8]
    9538:	e002      	b.n	9540 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    953a:	2000      	movs	r0, #0
    953c:	9002      	str	r0, [sp, #8]
    953e:	e7ff      	b.n	9540 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    9540:	9802      	ldr	r0, [sp, #8]
    9542:	9903      	ldr	r1, [sp, #12]
    9544:	b008      	add	sp, #32
    9546:	bd80      	pop	{r7, pc}

00009548 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>:
    9548:	b08a      	sub	sp, #40	; 0x28
    954a:	9004      	str	r0, [sp, #16]
    954c:	9105      	str	r1, [sp, #20]
    954e:	1a40      	subs	r0, r0, r1
    9550:	f04f 0100 	mov.w	r1, #0
    9554:	f141 0100 	adc.w	r1, r1, #0
    9558:	f1c1 0101 	rsb	r1, r1, #1
    955c:	9006      	str	r0, [sp, #24]
    955e:	f88d 101c 	strb.w	r1, [sp, #28]
    9562:	9806      	ldr	r0, [sp, #24]
    9564:	f89d 101c 	ldrb.w	r1, [sp, #28]
    9568:	9001      	str	r0, [sp, #4]
    956a:	9100      	str	r1, [sp, #0]
    956c:	e7ff      	b.n	956e <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E+0x26>
    956e:	9801      	ldr	r0, [sp, #4]
    9570:	9008      	str	r0, [sp, #32]
    9572:	9900      	ldr	r1, [sp, #0]
    9574:	f001 0201 	and.w	r2, r1, #1
    9578:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    957c:	9002      	str	r0, [sp, #8]
    957e:	f88d 200c 	strb.w	r2, [sp, #12]
    9582:	9802      	ldr	r0, [sp, #8]
    9584:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9588:	b00a      	add	sp, #40	; 0x28
    958a:	4770      	bx	lr

0000958c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>:
    baudrate:   8000,  //  In kHZ. Use SPI at 8MHz (the fastest clock available on the nRF52832) because otherwise refreshing will be super slow.
    word_size:  hal::HAL_SPI_WORD_SIZE_8BIT as u8,
};

/// Initialise the display controller
pub fn start_display() -> MynewtResult<()> {
    958c:	b5b0      	push	{r4, r5, r7, lr}
    958e:	b0b2      	sub	sp, #200	; 0xc8
    //  Create SPI port and GPIO pins
    let mut spi_port = mynewt::SPI::new();
    9590:	f00a fc83 	bl	13e9a <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>
    9594:	9115      	str	r1, [sp, #84]	; 0x54
    9596:	9014      	str	r0, [sp, #80]	; 0x50
    9598:	e7ff      	b.n	959a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe>
    let mut dc_gpio =  mynewt::GPIO::new();
    959a:	f00a fe3c 	bl	14216 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    959e:	9016      	str	r0, [sp, #88]	; 0x58
    95a0:	e7ff      	b.n	95a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16>
    let mut rst_gpio = mynewt::GPIO::new();
    95a2:	f00a fe38 	bl	14216 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    95a6:	9017      	str	r0, [sp, #92]	; 0x5c
    95a8:	e7ff      	b.n	95aa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e>

    //  Init SPI port and GPIO pins
    spi_port.init(
    95aa:	f240 03e8 	movw	r3, #232	; 0xe8
    95ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95b2:	a814      	add	r0, sp, #80	; 0x50
    95b4:	2100      	movs	r1, #0
    95b6:	2219      	movs	r2, #25
    95b8:	f00a fc77 	bl	13eaa <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>
    95bc:	9012      	str	r0, [sp, #72]	; 0x48
    95be:	e7ff      	b.n	95c0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x34>
    95c0:	9812      	ldr	r0, [sp, #72]	; 0x48
    95c2:	f7ff fb5d 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    95c6:	9018      	str	r0, [sp, #96]	; 0x60
    95c8:	e7ff      	b.n	95ca <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x3e>
        DISPLAY_SPI, //  Mynewt SPI port 0
        DISPLAY_CS,  //  LCD_CS (P0.25): Chip select
        unsafe { &mut SPI_SETTINGS }
    ) ? ;
    95ca:	9818      	ldr	r0, [sp, #96]	; 0x60
    95cc:	1e41      	subs	r1, r0, #1
    95ce:	bf18      	it	ne
    95d0:	2101      	movne	r1, #1
    95d2:	2801      	cmp	r0, #1
    95d4:	d001      	beq.n	95da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4e>
    95d6:	e7ff      	b.n	95d8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4c>
    95d8:	e006      	b.n	95e8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x5c>
    95da:	a816      	add	r0, sp, #88	; 0x58
    95dc:	2112      	movs	r1, #18
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    95de:	f00a fe1c 	bl	1421a <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    95e2:	9011      	str	r0, [sp, #68]	; 0x44
    95e4:	e010      	b.n	9608 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7c>
    spi_port.init(
    95e6:	defe      	udf	#254	; 0xfe
    ) ? ;
    95e8:	9818      	ldr	r0, [sp, #96]	; 0x60
    95ea:	902d      	str	r0, [sp, #180]	; 0xb4
    95ec:	f009 f812 	bl	12614 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    95f0:	9010      	str	r0, [sp, #64]	; 0x40
    95f2:	e002      	b.n	95fa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x6e>
    unsafe {
        DISPLAY.init(&mut delay) ? ;
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    }
    Ok(())
}
    95f4:	9813      	ldr	r0, [sp, #76]	; 0x4c
    95f6:	b032      	add	sp, #200	; 0xc8
    95f8:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;
    95fa:	9810      	ldr	r0, [sp, #64]	; 0x40
    95fc:	f7ff fb34 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9600:	9013      	str	r0, [sp, #76]	; 0x4c
    9602:	e7ff      	b.n	9604 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x78>
    9604:	e7ff      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    9606:	e7f5      	b.n	95f4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    9608:	9811      	ldr	r0, [sp, #68]	; 0x44
    960a:	f7ff fb39 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    960e:	9019      	str	r0, [sp, #100]	; 0x64
    9610:	e7ff      	b.n	9612 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x86>
    9612:	9819      	ldr	r0, [sp, #100]	; 0x64
    9614:	1e41      	subs	r1, r0, #1
    9616:	bf18      	it	ne
    9618:	2101      	movne	r1, #1
    961a:	2801      	cmp	r0, #1
    961c:	d001      	beq.n	9622 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x96>
    961e:	e7ff      	b.n	9620 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x94>
    9620:	e006      	b.n	9630 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xa4>
    9622:	a817      	add	r0, sp, #92	; 0x5c
    9624:	211a      	movs	r1, #26
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9626:	f00a fdf8 	bl	1421a <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    962a:	900f      	str	r0, [sp, #60]	; 0x3c
    962c:	e00c      	b.n	9648 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xbc>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    962e:	defe      	udf	#254	; 0xfe
    9630:	9819      	ldr	r0, [sp, #100]	; 0x64
    9632:	902e      	str	r0, [sp, #184]	; 0xb8
    9634:	f008 ffee 	bl	12614 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9638:	900e      	str	r0, [sp, #56]	; 0x38
    963a:	e7ff      	b.n	963c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xb0>
    963c:	980e      	ldr	r0, [sp, #56]	; 0x38
    963e:	f7ff fb13 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9642:	9013      	str	r0, [sp, #76]	; 0x4c
    9644:	e7ff      	b.n	9646 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xba>
    9646:	e7de      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9648:	980f      	ldr	r0, [sp, #60]	; 0x3c
    964a:	f7ff fb19 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    964e:	901a      	str	r0, [sp, #104]	; 0x68
    9650:	e7ff      	b.n	9652 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xc6>
    9652:	981a      	ldr	r0, [sp, #104]	; 0x68
    9654:	1e41      	subs	r1, r0, #1
    9656:	bf18      	it	ne
    9658:	2101      	movne	r1, #1
    965a:	2801      	cmp	r0, #1
    965c:	d001      	beq.n	9662 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd6>
    965e:	e7ff      	b.n	9660 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd4>
    9660:	e004      	b.n	966c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe0>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    9662:	f00a fdd8 	bl	14216 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    9666:	900d      	str	r0, [sp, #52]	; 0x34
    9668:	e00c      	b.n	9684 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf8>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    966a:	defe      	udf	#254	; 0xfe
    966c:	981a      	ldr	r0, [sp, #104]	; 0x68
    966e:	902f      	str	r0, [sp, #188]	; 0xbc
    9670:	f008 ffd0 	bl	12614 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9674:	900c      	str	r0, [sp, #48]	; 0x30
    9676:	e7ff      	b.n	9678 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xec>
    9678:	980c      	ldr	r0, [sp, #48]	; 0x30
    967a:	f7ff faf5 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    967e:	9013      	str	r0, [sp, #76]	; 0x4c
    9680:	e7ff      	b.n	9682 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf6>
    9682:	e7c0      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    9684:	f240 1060 	movw	r0, #352	; 0x160
    9688:	f2c2 0000 	movt	r0, #8192	; 0x2000
    968c:	990d      	ldr	r1, [sp, #52]	; 0x34
    968e:	6001      	str	r1, [r0, #0]
    9690:	2117      	movs	r1, #23
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    9692:	f00a fdc2 	bl	1421a <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    9696:	900b      	str	r0, [sp, #44]	; 0x2c
    9698:	e7ff      	b.n	969a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x10e>
    969a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    969c:	f7ff faf0 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    96a0:	901b      	str	r0, [sp, #108]	; 0x6c
    96a2:	e7ff      	b.n	96a4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x118>
    96a4:	981b      	ldr	r0, [sp, #108]	; 0x6c
    96a6:	1e41      	subs	r1, r0, #1
    96a8:	bf18      	it	ne
    96aa:	2101      	movne	r1, #1
    96ac:	2801      	cmp	r0, #1
    96ae:	d001      	beq.n	96b4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x128>
    96b0:	e7ff      	b.n	96b2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x126>
    96b2:	e008      	b.n	96c6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x13a>
        BACKLIGHT_HIGH.set_low() ? ;    
    96b4:	f240 1060 	movw	r0, #352	; 0x160
    96b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    96bc:	f00a fe46 	bl	1434c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    96c0:	900a      	str	r0, [sp, #40]	; 0x28
    96c2:	e00d      	b.n	96e0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x154>
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    96c4:	defe      	udf	#254	; 0xfe
    96c6:	981b      	ldr	r0, [sp, #108]	; 0x6c
    96c8:	9030      	str	r0, [sp, #192]	; 0xc0
    96ca:	f008 ffa3 	bl	12614 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    96ce:	9009      	str	r0, [sp, #36]	; 0x24
    96d0:	e7ff      	b.n	96d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x146>
    96d2:	9809      	ldr	r0, [sp, #36]	; 0x24
    96d4:	f7ff fac8 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    96d8:	9013      	str	r0, [sp, #76]	; 0x4c
    96da:	e7ff      	b.n	96dc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x150>
    96dc:	e7ff      	b.n	96de <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    96de:	e792      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH.set_low() ? ;    
    96e0:	980a      	ldr	r0, [sp, #40]	; 0x28
    96e2:	f7ff facd 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    96e6:	901c      	str	r0, [sp, #112]	; 0x70
    96e8:	e7ff      	b.n	96ea <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x15e>
    96ea:	981c      	ldr	r0, [sp, #112]	; 0x70
    96ec:	1e41      	subs	r1, r0, #1
    96ee:	bf18      	it	ne
    96f0:	2101      	movne	r1, #1
    96f2:	2801      	cmp	r0, #1
    96f4:	d001      	beq.n	96fa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16e>
    96f6:	e7ff      	b.n	96f8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16c>
    96f8:	e011      	b.n	971e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x192>
        spi_port,    //  SPI Port
    96fa:	9914      	ldr	r1, [sp, #80]	; 0x50
    96fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
        dc_gpio,     //  GPIO Pin for DC
    96fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
        rst_gpio,    //  GPIO Pin for RST
    9700:	9817      	ldr	r0, [sp, #92]	; 0x5c
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    9702:	46ec      	mov	ip, sp
    9704:	f04f 0e01 	mov.w	lr, #1
    9708:	f8cc e008 	str.w	lr, [ip, #8]
    970c:	f8cc e004 	str.w	lr, [ip, #4]
    9710:	f8cc 0000 	str.w	r0, [ip]
    9714:	a81d      	add	r0, sp, #116	; 0x74
    9716:	f000 fb4f 	bl	9db8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>
    971a:	e00c      	b.n	9736 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1aa>
        BACKLIGHT_HIGH.set_low() ? ;    
    971c:	defe      	udf	#254	; 0xfe
    971e:	981c      	ldr	r0, [sp, #112]	; 0x70
    9720:	9031      	str	r0, [sp, #196]	; 0xc4
    9722:	f008 ff77 	bl	12614 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9726:	9008      	str	r0, [sp, #32]
    9728:	e7ff      	b.n	972a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x19e>
    972a:	9808      	ldr	r0, [sp, #32]
    972c:	f7ff fa9c 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9730:	9013      	str	r0, [sp, #76]	; 0x4c
    9732:	e7ff      	b.n	9734 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1a8>
    9734:	e7d3      	b.n	96de <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    9736:	f240 1048 	movw	r0, #328	; 0x148
    973a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    973e:	a91d      	add	r1, sp, #116	; 0x74
    9740:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    9744:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    let mut delay = mynewt::Delay::new();
    9748:	f00a fe16 	bl	14378 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>
    974c:	e7ff      	b.n	974e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1c2>
        DISPLAY.init(&mut delay) ? ;
    974e:	f240 1048 	movw	r0, #328	; 0x148
    9752:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9756:	a923      	add	r1, sp, #140	; 0x8c
    9758:	f000 fb50 	bl	9dfc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>
    975c:	9007      	str	r0, [sp, #28]
    975e:	e7ff      	b.n	9760 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1d4>
    9760:	9807      	ldr	r0, [sp, #28]
    9762:	f000 0001 	and.w	r0, r0, #1
    9766:	f7ff fa85 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    976a:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
    976e:	e7ff      	b.n	9770 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e4>
    9770:	f89d 008e 	ldrb.w	r0, [sp, #142]	; 0x8e
    9774:	07c1      	lsls	r1, r0, #31
    9776:	2900      	cmp	r1, #0
    9778:	d001      	beq.n	977e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f2>
    977a:	e7ff      	b.n	977c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f0>
    977c:	e00d      	b.n	979a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x20e>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    977e:	f24c 0034 	movw	r0, #49204	; 0xc034
    9782:	f2c0 0001 	movt	r0, #1
    9786:	6801      	ldr	r1, [r0, #0]
    9788:	f240 1048 	movw	r0, #328	; 0x148
    978c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9790:	f000 f949 	bl	9a26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>
    9794:	9006      	str	r0, [sp, #24]
    9796:	e00b      	b.n	97b0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x224>
        DISPLAY.init(&mut delay) ? ;
    9798:	defe      	udf	#254	; 0xfe
    979a:	f008 fed3 	bl	12544 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    979e:	9005      	str	r0, [sp, #20]
    97a0:	e7ff      	b.n	97a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x216>
    97a2:	9805      	ldr	r0, [sp, #20]
    97a4:	f7ff fa60 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    97a8:	9013      	str	r0, [sp, #76]	; 0x4c
    97aa:	e7ff      	b.n	97ac <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x220>
    97ac:	e7ff      	b.n	97ae <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>
    97ae:	e72a      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    97b0:	9806      	ldr	r0, [sp, #24]
    97b2:	f000 0001 	and.w	r0, r0, #1
    97b6:	f7ff fa5d 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    97ba:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
    97be:	e7ff      	b.n	97c0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x234>
    97c0:	f89d 008f 	ldrb.w	r0, [sp, #143]	; 0x8f
    97c4:	07c1      	lsls	r1, r0, #31
    97c6:	2900      	cmp	r1, #0
    97c8:	d001      	beq.n	97ce <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x242>
    97ca:	e7ff      	b.n	97cc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x240>
    97cc:	e005      	b.n	97da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x24e>
    97ce:	2000      	movs	r0, #0
    Ok(())
    97d0:	9013      	str	r0, [sp, #76]	; 0x4c
    97d2:	2001      	movs	r0, #1
    97d4:	9013      	str	r0, [sp, #76]	; 0x4c
}
    97d6:	e70d      	b.n	95f4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    97d8:	defe      	udf	#254	; 0xfe
    97da:	f008 feb3 	bl	12544 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    97de:	9004      	str	r0, [sp, #16]
    97e0:	e7ff      	b.n	97e2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x256>
    97e2:	9804      	ldr	r0, [sp, #16]
    97e4:	f7ff fa40 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    97e8:	9013      	str	r0, [sp, #76]	; 0x4c
    97ea:	e7ff      	b.n	97ec <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x260>
    97ec:	e7df      	b.n	97ae <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>

000097ee <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>:
    }

    /// Converts the value of `self` to a `u8`. If the value cannot be
    /// represented by a `u8`, then `None` is returned.
    #[inline]
    fn to_u8(&self) -> Option<u8> {
    97ee:	b580      	push	{r7, lr}
    97f0:	b08a      	sub	sp, #40	; 0x28
    97f2:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    97f4:	f001 f8ff 	bl	a9f6 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>
    97f8:	9307      	str	r3, [sp, #28]
    97fa:	9206      	str	r2, [sp, #24]
    97fc:	9105      	str	r1, [sp, #20]
    97fe:	9004      	str	r0, [sp, #16]
    9800:	e7ff      	b.n	9802 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x14>
    9802:	a804      	add	r0, sp, #16
    9804:	f00a fe30 	bl	14468 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    9808:	9003      	str	r0, [sp, #12]
    980a:	e7ff      	b.n	980c <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x1e>
    980c:	9803      	ldr	r0, [sp, #12]
    980e:	f00a fea1 	bl	14554 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    9812:	9002      	str	r0, [sp, #8]
    9814:	9101      	str	r1, [sp, #4]
    9816:	e7ff      	b.n	9818 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x2a>
    }
    9818:	9802      	ldr	r0, [sp, #8]
    981a:	f000 0001 	and.w	r0, r0, #1
    981e:	9901      	ldr	r1, [sp, #4]
    9820:	b00a      	add	sp, #40	; 0x28
    9822:	bd80      	pop	{r7, pc}

00009824 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>:
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }

    pub fn hard_reset(&mut self) -> Result<(), ()>
    9824:	b580      	push	{r7, lr}
    9826:	b090      	sub	sp, #64	; 0x40
    9828:	900b      	str	r0, [sp, #44]	; 0x2c
    {
        self.rst.set_high().map_err(|_| ())?;
    982a:	f100 010c 	add.w	r1, r0, #12
    982e:	9006      	str	r0, [sp, #24]
    9830:	4608      	mov	r0, r1
    9832:	f00a fd96 	bl	14362 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    9836:	9005      	str	r0, [sp, #20]
    9838:	e7ff      	b.n	983a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x16>
    983a:	9805      	ldr	r0, [sp, #20]
    983c:	f00a ffbd 	bl	147ba <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>
    9840:	9004      	str	r0, [sp, #16]
    9842:	e7ff      	b.n	9844 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x20>
    9844:	9804      	ldr	r0, [sp, #16]
    9846:	f000 0001 	and.w	r0, r0, #1
    984a:	f7ff fa13 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    984e:	f88d 001f 	strb.w	r0, [sp, #31]
    9852:	e7ff      	b.n	9854 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x30>
    9854:	f89d 001f 	ldrb.w	r0, [sp, #31]
    9858:	07c1      	lsls	r1, r0, #31
    985a:	2900      	cmp	r1, #0
    985c:	d001      	beq.n	9862 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3e>
    985e:	e7ff      	b.n	9860 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3c>
    9860:	e006      	b.n	9870 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x4c>
        self.rst.set_low().map_err(|_| ())?;
    9862:	9806      	ldr	r0, [sp, #24]
    9864:	300c      	adds	r0, #12
    9866:	f00a fd71 	bl	1434c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    986a:	9003      	str	r0, [sp, #12]
    986c:	e00d      	b.n	988a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x66>
        self.rst.set_high().map_err(|_| ())?;
    986e:	defe      	udf	#254	; 0xfe
    9870:	f008 fa87 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9874:	e003      	b.n	987e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x5a>
        self.rst.set_high().map_err(|_| ())
    }
    9876:	f89d 001e 	ldrb.w	r0, [sp, #30]
    987a:	b010      	add	sp, #64	; 0x40
    987c:	bd80      	pop	{r7, pc}
        self.rst.set_high().map_err(|_| ())?;
    987e:	f00a fff1 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9882:	f88d 001e 	strb.w	r0, [sp, #30]
    9886:	e7ff      	b.n	9888 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x64>
    9888:	e7f5      	b.n	9876 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_low().map_err(|_| ())?;
    988a:	9803      	ldr	r0, [sp, #12]
    988c:	f00a ff40 	bl	14710 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>
    9890:	9002      	str	r0, [sp, #8]
    9892:	e7ff      	b.n	9894 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x70>
    9894:	9802      	ldr	r0, [sp, #8]
    9896:	f000 0001 	and.w	r0, r0, #1
    989a:	f7ff f9eb 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    989e:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    98a2:	e7ff      	b.n	98a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x80>
    98a4:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    98a8:	07c1      	lsls	r1, r0, #31
    98aa:	2900      	cmp	r1, #0
    98ac:	d001      	beq.n	98b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8e>
    98ae:	e7ff      	b.n	98b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8c>
    98b0:	e006      	b.n	98c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x9c>
        self.rst.set_high().map_err(|_| ())
    98b2:	9806      	ldr	r0, [sp, #24]
    98b4:	300c      	adds	r0, #12
    98b6:	f00a fd54 	bl	14362 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    98ba:	9001      	str	r0, [sp, #4]
    98bc:	e009      	b.n	98d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xae>
        self.rst.set_low().map_err(|_| ())?;
    98be:	defe      	udf	#254	; 0xfe
    98c0:	f008 fa5f 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    98c4:	e7ff      	b.n	98c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xa2>
    98c6:	f00a ffcd 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    98ca:	f88d 001e 	strb.w	r0, [sp, #30]
    98ce:	e7ff      	b.n	98d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xac>
    98d0:	e7d1      	b.n	9876 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_high().map_err(|_| ())
    98d2:	9801      	ldr	r0, [sp, #4]
    98d4:	f00a fec7 	bl	14666 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>
    98d8:	f88d 001e 	strb.w	r0, [sp, #30]
    98dc:	e7ff      	b.n	98de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xba>
    }
    98de:	e7ca      	b.n	9876 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>

000098e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>:
        self.rst.set_low().map_err(|_| ())?;
    98e0:	b082      	sub	sp, #8
    98e2:	9001      	str	r0, [sp, #4]
    98e4:	e7ff      	b.n	98e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE+0x6>
    98e6:	b002      	add	sp, #8
    98e8:	4770      	bx	lr

000098ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>:
        self.rst.set_high().map_err(|_| ())?;
    98ea:	b082      	sub	sp, #8
    98ec:	9001      	str	r0, [sp, #4]
    98ee:	e7ff      	b.n	98f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE+0x6>
    98f0:	b002      	add	sp, #8
    98f2:	4770      	bx	lr

000098f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>:
        self.rst.set_high().map_err(|_| ())
    98f4:	b082      	sub	sp, #8
    98f6:	9001      	str	r0, [sp, #4]
    98f8:	e7ff      	b.n	98fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE+0x6>
    98fa:	b002      	add	sp, #8
    98fc:	4770      	bx	lr

000098fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>:
        }
        Ok(())
    }

    #[cfg(feature = "noblock_spi")]  //  If non-blocking SPI is enabled...
    fn write_data(&mut self, data: &[u8]) -> Result<(), ()> {
    98fe:	b580      	push	{r7, lr}
    9900:	b084      	sub	sp, #16
    9902:	9001      	str	r0, [sp, #4]
    9904:	9102      	str	r1, [sp, #8]
    9906:	9203      	str	r2, [sp, #12]
        //  Write the data bytes,
        mynewt::spi::spi_noblock_write_data(
    9908:	4608      	mov	r0, r1
    990a:	4611      	mov	r1, r2
    990c:	f009 fcdc 	bl	132c8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9910:	9000      	str	r0, [sp, #0]
    9912:	e7ff      	b.n	9914 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x16>
    9914:	f24c 0194 	movw	r1, #49300	; 0xc094
    9918:	f2c0 0101 	movt	r1, #1
    991c:	f24c 03a4 	movw	r3, #49316	; 0xc0a4
    9920:	f2c0 0301 	movt	r3, #1
    9924:	220d      	movs	r2, #13
    9926:	9800      	ldr	r0, [sp, #0]
    9928:	f7ff f96b 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    992c:	e7ff      	b.n	992e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x30>
    992e:	2000      	movs	r0, #0
            data
        ).expect("spi data fail");
        Ok(())
    }
    9930:	b004      	add	sp, #16
    9932:	bd80      	pop	{r7, pc}

00009934 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>:
        self.dc.set_high().map_err(|_| ())?;
        self.spi.write(data).map_err(|_| ())
    }

    /// Writes a data word to the display.
    fn write_word(&mut self, value: u16) -> Result<(), ()> {
    9934:	b580      	push	{r7, lr}
    9936:	b088      	sub	sp, #32
    9938:	460a      	mov	r2, r1
    993a:	9006      	str	r0, [sp, #24]
    993c:	f8ad 101e 	strh.w	r1, [sp, #30]
        let bytes: [u8; 2] = unsafe { transmute(value.to_be()) };
    9940:	9004      	str	r0, [sp, #16]
    9942:	4608      	mov	r0, r1
    9944:	9203      	str	r2, [sp, #12]
    9946:	f000 fe08 	bl	a55a <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>
    994a:	9002      	str	r0, [sp, #8]
    994c:	e7ff      	b.n	994e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x1a>
    994e:	9802      	ldr	r0, [sp, #8]
    9950:	f8ad 0016 	strh.w	r0, [sp, #22]
    9954:	e7ff      	b.n	9956 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x22>
    9956:	f10d 0116 	add.w	r1, sp, #22
    995a:	2202      	movs	r2, #2
        self.write_data(&bytes)
    995c:	9804      	ldr	r0, [sp, #16]
    995e:	f7ff ffce 	bl	98fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>
    9962:	9001      	str	r0, [sp, #4]
    9964:	e7ff      	b.n	9966 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x32>
    }
    9966:	9801      	ldr	r0, [sp, #4]
    9968:	f000 0001 	and.w	r0, r0, #1
    996c:	b008      	add	sp, #32
    996e:	bd80      	pop	{r7, pc}

00009970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>:
    fn write_command(&mut self, command: Instruction, params: Option<&[u8]>) -> Result<(), ()> {
    9970:	b580      	push	{r7, lr}
    9972:	b08e      	sub	sp, #56	; 0x38
    9974:	468c      	mov	ip, r1
    9976:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
    997a:	920b      	str	r2, [sp, #44]	; 0x2c
    997c:	930c      	str	r3, [sp, #48]	; 0x30
    997e:	900d      	str	r0, [sp, #52]	; 0x34
    9980:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
            command.to_u8().unwrap()
    9984:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    9988:	f000 fdbd 	bl	a506 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>
    998c:	9008      	str	r0, [sp, #32]
    998e:	9107      	str	r1, [sp, #28]
    9990:	e7ff      	b.n	9992 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x22>
    9992:	9808      	ldr	r0, [sp, #32]
    9994:	f000 0001 	and.w	r0, r0, #1
    9998:	f24c 02b4 	movw	r2, #49332	; 0xc0b4
    999c:	f2c0 0201 	movt	r2, #1
    99a0:	9907      	ldr	r1, [sp, #28]
    99a2:	f00a fd76 	bl	14492 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    99a6:	9006      	str	r0, [sp, #24]
    99a8:	e7ff      	b.n	99aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x3a>
        mynewt::spi::spi_noblock_write_command(
    99aa:	9806      	ldr	r0, [sp, #24]
    99ac:	f009 fc44 	bl	13238 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>
    99b0:	9005      	str	r0, [sp, #20]
    99b2:	e7ff      	b.n	99b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x44>
    99b4:	f24c 01c4 	movw	r1, #49348	; 0xc0c4
    99b8:	f2c0 0101 	movt	r1, #1
    99bc:	f24c 03d0 	movw	r3, #49360	; 0xc0d0
    99c0:	f2c0 0301 	movt	r3, #1
    99c4:	220c      	movs	r2, #12
    99c6:	9805      	ldr	r0, [sp, #20]
    99c8:	f7ff f91b 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    99cc:	e7ff      	b.n	99ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x5e>
    99ce:	a80b      	add	r0, sp, #44	; 0x2c
        if params.is_some() {
    99d0:	f00a fdae 	bl	14530 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>
    99d4:	9004      	str	r0, [sp, #16]
    99d6:	e7ff      	b.n	99d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x68>
    99d8:	9804      	ldr	r0, [sp, #16]
    99da:	07c1      	lsls	r1, r0, #31
    99dc:	2900      	cmp	r1, #0
    99de:	d01f      	beq.n	9a20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    99e0:	e7ff      	b.n	99e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x72>
                params.unwrap()
    99e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    99e4:	990c      	ldr	r1, [sp, #48]	; 0x30
    99e6:	f24c 02e0 	movw	r2, #49376	; 0xc0e0
    99ea:	f2c0 0201 	movt	r2, #1
    99ee:	f00a fd79 	bl	144e4 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>
    99f2:	9003      	str	r0, [sp, #12]
    99f4:	9102      	str	r1, [sp, #8]
    99f6:	e7ff      	b.n	99f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x88>
            mynewt::spi::spi_noblock_write_data(
    99f8:	9803      	ldr	r0, [sp, #12]
    99fa:	9902      	ldr	r1, [sp, #8]
    99fc:	f009 fc64 	bl	132c8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9a00:	9001      	str	r0, [sp, #4]
    9a02:	e7ff      	b.n	9a04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x94>
    9a04:	f24c 0194 	movw	r1, #49300	; 0xc094
    9a08:	f2c0 0101 	movt	r1, #1
    9a0c:	f24c 03f0 	movw	r3, #49392	; 0xc0f0
    9a10:	f2c0 0301 	movt	r3, #1
    9a14:	220d      	movs	r2, #13
    9a16:	9801      	ldr	r0, [sp, #4]
    9a18:	f7ff f8f3 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9a1c:	e7ff      	b.n	9a1e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xae>
        if params.is_some() {
    9a1e:	e7ff      	b.n	9a20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9a20:	2000      	movs	r0, #0
    }
    9a22:	b00e      	add	sp, #56	; 0x38
    9a24:	bd80      	pop	{r7, pc}

00009a26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>:

    pub fn set_orientation(&mut self, orientation: &Orientation) -> Result<(), ()> {
    9a26:	b580      	push	{r7, lr}
    9a28:	b098      	sub	sp, #96	; 0x60
    9a2a:	9012      	str	r0, [sp, #72]	; 0x48
    9a2c:	9113      	str	r1, [sp, #76]	; 0x4c
        if self.rgb {
    9a2e:	7d02      	ldrb	r2, [r0, #20]
    9a30:	07d2      	lsls	r2, r2, #31
    9a32:	2a00      	cmp	r2, #0
    9a34:	910a      	str	r1, [sp, #40]	; 0x28
    9a36:	9009      	str	r0, [sp, #36]	; 0x24
    9a38:	d109      	bne.n	9a4e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x28>
    9a3a:	e7ff      	b.n	9a3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x16>
    9a3c:	2036      	movs	r0, #54	; 0x36
            self.write_command(
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
            ))?;
        } else {
            self.write_command(
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9a3e:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    9a42:	980a      	ldr	r0, [sp, #40]	; 0x28
    9a44:	f7ff fed3 	bl	97ee <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9a48:	9008      	str	r0, [sp, #32]
    9a4a:	9107      	str	r1, [sp, #28]
    9a4c:	e044      	b.n	9ad8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb2>
    9a4e:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
    9a50:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    9a54:	980a      	ldr	r0, [sp, #40]	; 0x28
    9a56:	f7ff feca 	bl	97ee <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9a5a:	9006      	str	r0, [sp, #24]
    9a5c:	9105      	str	r1, [sp, #20]
    9a5e:	e7ff      	b.n	9a60 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x3a>
    9a60:	9806      	ldr	r0, [sp, #24]
    9a62:	f000 0001 	and.w	r0, r0, #1
    9a66:	f24c 1200 	movw	r2, #49408	; 0xc100
    9a6a:	f2c0 0201 	movt	r2, #1
    9a6e:	9905      	ldr	r1, [sp, #20]
    9a70:	f00a fd0f 	bl	14492 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9a74:	9004      	str	r0, [sp, #16]
    9a76:	e7ff      	b.n	9a78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x52>
    9a78:	9804      	ldr	r0, [sp, #16]
    9a7a:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9a7e:	f10d 0139 	add.w	r1, sp, #57	; 0x39
    9a82:	910c      	str	r1, [sp, #48]	; 0x30
    9a84:	2101      	movs	r1, #1
    9a86:	910d      	str	r1, [sp, #52]	; 0x34
            self.write_command(
    9a88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9a8c:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    9a90:	9809      	ldr	r0, [sp, #36]	; 0x24
    9a92:	f7ff ff6d 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9a96:	9003      	str	r0, [sp, #12]
    9a98:	e7ff      	b.n	9a9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x74>
    9a9a:	9803      	ldr	r0, [sp, #12]
    9a9c:	f000 0001 	and.w	r0, r0, #1
    9aa0:	f7ff f8e8 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9aa4:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    9aa8:	e7ff      	b.n	9aaa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x84>
            ))?;
    9aaa:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    9aae:	07c1      	lsls	r1, r0, #31
    9ab0:	2900      	cmp	r1, #0
    9ab2:	d001      	beq.n	9ab8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x92>
    9ab4:	e7ff      	b.n	9ab6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x90>
    9ab6:	e001      	b.n	9abc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x96>
        if self.rgb {
    9ab8:	e047      	b.n	9b4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9aba:	defe      	udf	#254	; 0xfe
            ))?;
    9abc:	f008 f961 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9ac0:	e003      	b.n	9aca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xa4>
            ))?;
        }
        Ok(())
    }
    9ac2:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    9ac6:	b018      	add	sp, #96	; 0x60
    9ac8:	bd80      	pop	{r7, pc}
            ))?;
    9aca:	f00a fecb 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ace:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9ad2:	e7ff      	b.n	9ad4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xae>
    9ad4:	e7ff      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9ad6:	e7f4      	b.n	9ac2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9ad8:	9808      	ldr	r0, [sp, #32]
    9ada:	f000 0001 	and.w	r0, r0, #1
    9ade:	f24c 1210 	movw	r2, #49424	; 0xc110
    9ae2:	f2c0 0201 	movt	r2, #1
    9ae6:	9907      	ldr	r1, [sp, #28]
    9ae8:	f00a fcd3 	bl	14492 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9aec:	9002      	str	r0, [sp, #8]
    9aee:	e7ff      	b.n	9af0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xca>
    9af0:	9802      	ldr	r0, [sp, #8]
    9af2:	f040 0108 	orr.w	r1, r0, #8
    9af6:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    9afa:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    9afe:	910f      	str	r1, [sp, #60]	; 0x3c
    9b00:	2101      	movs	r1, #1
    9b02:	9110      	str	r1, [sp, #64]	; 0x40
            self.write_command(
    9b04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9b06:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9b08:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
    9b0e:	f7ff ff2f 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9b12:	9001      	str	r0, [sp, #4]
    9b14:	e7ff      	b.n	9b16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xf0>
    9b16:	9801      	ldr	r0, [sp, #4]
    9b18:	f000 0001 	and.w	r0, r0, #1
    9b1c:	f7ff f8aa 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9b20:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9b24:	e7ff      	b.n	9b26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x100>
            ))?;
    9b26:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9b2a:	07c1      	lsls	r1, r0, #31
    9b2c:	2900      	cmp	r1, #0
    9b2e:	d001      	beq.n	9b34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10e>
    9b30:	e7ff      	b.n	9b32 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10c>
    9b32:	e001      	b.n	9b38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x112>
        if self.rgb {
    9b34:	e009      	b.n	9b4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9b36:	defe      	udf	#254	; 0xfe
            ))?;
    9b38:	f008 f923 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9b3c:	e7ff      	b.n	9b3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x118>
    9b3e:	f00a fe91 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9b42:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9b46:	e7ff      	b.n	9b48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x122>
    9b48:	e7c5      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9b4a:	2000      	movs	r0, #0
        Ok(())
    9b4c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    9b50:	e7b7      	b.n	9ac2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>

00009b52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>:
        self.dx = dx;
        self.dy = dy;
    }

    /// Sets the address window for the display.
    fn set_address_window(&mut self, sx: u16, sy: u16, ex: u16, ey: u16) -> Result<(), ()> {
    9b52:	b5b0      	push	{r4, r5, r7, lr}
    9b54:	b0a2      	sub	sp, #136	; 0x88
    9b56:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
    9b5a:	469e      	mov	lr, r3
    9b5c:	4614      	mov	r4, r2
    9b5e:	460d      	mov	r5, r1
    9b60:	9015      	str	r0, [sp, #84]	; 0x54
    9b62:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
    9b66:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    9b6a:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    9b6e:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
    9b72:	212a      	movs	r1, #42	; 0x2a
        self.write_command(Instruction::CASET, None)?;
    9b74:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
    9b78:	2100      	movs	r1, #0
    9b7a:	9110      	str	r1, [sp, #64]	; 0x40
    9b7c:	910f      	str	r1, [sp, #60]	; 0x3c
    9b7e:	910f      	str	r1, [sp, #60]	; 0x3c
    9b80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9b82:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9b84:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9b88:	900d      	str	r0, [sp, #52]	; 0x34
    9b8a:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    9b8e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    9b92:	940a      	str	r4, [sp, #40]	; 0x28
    9b94:	9509      	str	r5, [sp, #36]	; 0x24
    9b96:	f7ff feeb 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9b9a:	9008      	str	r0, [sp, #32]
    9b9c:	e7ff      	b.n	9b9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x4c>
    9b9e:	9808      	ldr	r0, [sp, #32]
    9ba0:	f000 0001 	and.w	r0, r0, #1
    9ba4:	f7ff f866 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9ba8:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9bac:	e7ff      	b.n	9bae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x5c>
    9bae:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9bb2:	07c1      	lsls	r1, r0, #31
    9bb4:	2900      	cmp	r1, #0
    9bb6:	d001      	beq.n	9bbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x6a>
    9bb8:	e7ff      	b.n	9bba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x68>
    9bba:	e00d      	b.n	9bd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x86>
        self.write_word(sx + self.dx)?;
    9bbc:	980d      	ldr	r0, [sp, #52]	; 0x34
    9bbe:	8a01      	ldrh	r1, [r0, #16]
    9bc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9bc2:	fa11 f182 	uxtah	r1, r1, r2
    9bc6:	b28b      	uxth	r3, r1
    9bc8:	468c      	mov	ip, r1
    9bca:	428b      	cmp	r3, r1
    9bcc:	f8cd c01c 	str.w	ip, [sp, #28]
    9bd0:	f040 80c2 	bne.w	9d58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x206>
    9bd4:	e00d      	b.n	9bf2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xa0>
        self.write_command(Instruction::CASET, None)?;
    9bd6:	defe      	udf	#254	; 0xfe
    9bd8:	f008 f8d3 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9bdc:	e003      	b.n	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x94>
        self.write_word(ex + self.dx)?;
        self.write_command(Instruction::RASET, None)?;
        self.write_word(sy + self.dy)?;
        self.write_word(ey + self.dy)
    }
    9bde:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    9be2:	b022      	add	sp, #136	; 0x88
    9be4:	bdb0      	pop	{r4, r5, r7, pc}
        self.write_command(Instruction::CASET, None)?;
    9be6:	f00a fe3d 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9bea:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9bee:	e7ff      	b.n	9bf0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x9e>
    9bf0:	e7f5      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9bf2:	980d      	ldr	r0, [sp, #52]	; 0x34
    9bf4:	9907      	ldr	r1, [sp, #28]
    9bf6:	f7ff fe9d 	bl	9934 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9bfa:	9006      	str	r0, [sp, #24]
    9bfc:	e7ff      	b.n	9bfe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xac>
    9bfe:	9806      	ldr	r0, [sp, #24]
    9c00:	f000 0001 	and.w	r0, r0, #1
    9c04:	f7ff f836 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9c08:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    9c0c:	e7ff      	b.n	9c0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xbc>
    9c0e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9c12:	07c1      	lsls	r1, r0, #31
    9c14:	2900      	cmp	r1, #0
    9c16:	d001      	beq.n	9c1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xca>
    9c18:	e7ff      	b.n	9c1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xc8>
    9c1a:	e00d      	b.n	9c38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xe6>
        self.write_word(ex + self.dx)?;
    9c1c:	980d      	ldr	r0, [sp, #52]	; 0x34
    9c1e:	8a01      	ldrh	r1, [r0, #16]
    9c20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9c22:	fa11 f182 	uxtah	r1, r1, r2
    9c26:	b28b      	uxth	r3, r1
    9c28:	468c      	mov	ip, r1
    9c2a:	428b      	cmp	r3, r1
    9c2c:	f8cd c014 	str.w	ip, [sp, #20]
    9c30:	f040 809e 	bne.w	9d70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x21e>
    9c34:	e009      	b.n	9c4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf8>
        self.write_word(sx + self.dx)?;
    9c36:	defe      	udf	#254	; 0xfe
    9c38:	f008 f8a3 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9c3c:	e7ff      	b.n	9c3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xec>
    9c3e:	f00a fe11 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9c42:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9c46:	e7ff      	b.n	9c48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf6>
    9c48:	e7c9      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ex + self.dx)?;
    9c4a:	980d      	ldr	r0, [sp, #52]	; 0x34
    9c4c:	9905      	ldr	r1, [sp, #20]
    9c4e:	f7ff fe71 	bl	9934 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9c52:	9004      	str	r0, [sp, #16]
    9c54:	e7ff      	b.n	9c56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x104>
    9c56:	9804      	ldr	r0, [sp, #16]
    9c58:	f000 0001 	and.w	r0, r0, #1
    9c5c:	f7ff f80a 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9c60:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    9c64:	e7ff      	b.n	9c66 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x114>
    9c66:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    9c6a:	07c1      	lsls	r1, r0, #31
    9c6c:	2900      	cmp	r1, #0
    9c6e:	d001      	beq.n	9c74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x122>
    9c70:	e7ff      	b.n	9c72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x120>
    9c72:	e010      	b.n	9c96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x144>
    9c74:	202b      	movs	r0, #43	; 0x2b
        self.write_command(Instruction::RASET, None)?;
    9c76:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
    9c7a:	2000      	movs	r0, #0
    9c7c:	9013      	str	r0, [sp, #76]	; 0x4c
    9c7e:	9012      	str	r0, [sp, #72]	; 0x48
    9c80:	9012      	str	r0, [sp, #72]	; 0x48
    9c82:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9c84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9c86:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
    9c8a:	980d      	ldr	r0, [sp, #52]	; 0x34
    9c8c:	f7ff fe70 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9c90:	9003      	str	r0, [sp, #12]
    9c92:	e009      	b.n	9ca8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x156>
        self.write_word(ex + self.dx)?;
    9c94:	defe      	udf	#254	; 0xfe
    9c96:	f008 f874 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9c9a:	e7ff      	b.n	9c9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x14a>
    9c9c:	f00a fde2 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ca0:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9ca4:	e7ff      	b.n	9ca6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x154>
    9ca6:	e79a      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_command(Instruction::RASET, None)?;
    9ca8:	9803      	ldr	r0, [sp, #12]
    9caa:	f000 0001 	and.w	r0, r0, #1
    9cae:	f7fe ffe1 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9cb2:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9cb6:	e7ff      	b.n	9cb8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x166>
    9cb8:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    9cbc:	07c1      	lsls	r1, r0, #31
    9cbe:	2900      	cmp	r1, #0
    9cc0:	d001      	beq.n	9cc6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x174>
    9cc2:	e7ff      	b.n	9cc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x172>
    9cc4:	e00c      	b.n	9ce0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x18e>
        self.write_word(sy + self.dy)?;
    9cc6:	980d      	ldr	r0, [sp, #52]	; 0x34
    9cc8:	8a41      	ldrh	r1, [r0, #18]
    9cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9ccc:	fa11 f182 	uxtah	r1, r1, r2
    9cd0:	b28b      	uxth	r3, r1
    9cd2:	468c      	mov	ip, r1
    9cd4:	428b      	cmp	r3, r1
    9cd6:	f8cd c008 	str.w	ip, [sp, #8]
    9cda:	d155      	bne.n	9d88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x236>
    9cdc:	e009      	b.n	9cf2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1a0>
        self.write_command(Instruction::RASET, None)?;
    9cde:	defe      	udf	#254	; 0xfe
    9ce0:	f008 f84f 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9ce4:	e7ff      	b.n	9ce6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x194>
    9ce6:	f00a fdbd 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9cea:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9cee:	e7ff      	b.n	9cf0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x19e>
    9cf0:	e775      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sy + self.dy)?;
    9cf2:	980d      	ldr	r0, [sp, #52]	; 0x34
    9cf4:	9902      	ldr	r1, [sp, #8]
    9cf6:	f7ff fe1d 	bl	9934 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9cfa:	9001      	str	r0, [sp, #4]
    9cfc:	e7ff      	b.n	9cfe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ac>
    9cfe:	9801      	ldr	r0, [sp, #4]
    9d00:	f000 0001 	and.w	r0, r0, #1
    9d04:	f7fe ffb6 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d08:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    9d0c:	e7ff      	b.n	9d0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1bc>
    9d0e:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    9d12:	07c1      	lsls	r1, r0, #31
    9d14:	2900      	cmp	r1, #0
    9d16:	d001      	beq.n	9d1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ca>
    9d18:	e7ff      	b.n	9d1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1c8>
    9d1a:	e00c      	b.n	9d36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1e4>
        self.write_word(ey + self.dy)
    9d1c:	980d      	ldr	r0, [sp, #52]	; 0x34
    9d1e:	8a41      	ldrh	r1, [r0, #18]
    9d20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9d22:	fa11 f182 	uxtah	r1, r1, r2
    9d26:	b28b      	uxth	r3, r1
    9d28:	468c      	mov	ip, r1
    9d2a:	428b      	cmp	r3, r1
    9d2c:	f8cd c000 	str.w	ip, [sp]
    9d30:	d136      	bne.n	9da0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x24e>
    9d32:	e009      	b.n	9d48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f6>
        self.write_word(sy + self.dy)?;
    9d34:	defe      	udf	#254	; 0xfe
    9d36:	f008 f824 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9d3a:	e7ff      	b.n	9d3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ea>
    9d3c:	f00a fd92 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9d40:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9d44:	e7ff      	b.n	9d46 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f4>
    9d46:	e74a      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ey + self.dy)
    9d48:	980d      	ldr	r0, [sp, #52]	; 0x34
    9d4a:	9900      	ldr	r1, [sp, #0]
    9d4c:	f7ff fdf2 	bl	9934 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9d50:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9d54:	e7ff      	b.n	9d56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x204>
    }
    9d56:	e742      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9d58:	f24c 1030 	movw	r0, #49456	; 0xc130
    9d5c:	f2c0 0001 	movt	r0, #1
    9d60:	f24c 1220 	movw	r2, #49440	; 0xc120
    9d64:	f2c0 0201 	movt	r2, #1
    9d68:	211c      	movs	r1, #28
    9d6a:	f00b fcb3 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9d6e:	defe      	udf	#254	; 0xfe
        self.write_word(ex + self.dx)?;
    9d70:	f24c 1030 	movw	r0, #49456	; 0xc130
    9d74:	f2c0 0001 	movt	r0, #1
    9d78:	f24c 124c 	movw	r2, #49484	; 0xc14c
    9d7c:	f2c0 0201 	movt	r2, #1
    9d80:	211c      	movs	r1, #28
    9d82:	f00b fca7 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9d86:	defe      	udf	#254	; 0xfe
        self.write_word(sy + self.dy)?;
    9d88:	f24c 1030 	movw	r0, #49456	; 0xc130
    9d8c:	f2c0 0001 	movt	r0, #1
    9d90:	f24c 125c 	movw	r2, #49500	; 0xc15c
    9d94:	f2c0 0201 	movt	r2, #1
    9d98:	211c      	movs	r1, #28
    9d9a:	f00b fc9b 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9d9e:	defe      	udf	#254	; 0xfe
        self.write_word(ey + self.dy)
    9da0:	f24c 1030 	movw	r0, #49456	; 0xc130
    9da4:	f2c0 0001 	movt	r0, #1
    9da8:	f24c 126c 	movw	r2, #49516	; 0xc16c
    9dac:	f2c0 0201 	movt	r2, #1
    9db0:	211c      	movs	r1, #28
    9db2:	f00b fc8f 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9db6:	defe      	udf	#254	; 0xfe

00009db8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>:
    pub fn new(
    9db8:	b5b0      	push	{r4, r5, r7, lr}
    9dba:	b08a      	sub	sp, #40	; 0x28
    9dbc:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    9dc0:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    9dc4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    9dc6:	9106      	str	r1, [sp, #24]
    9dc8:	9207      	str	r2, [sp, #28]
    9dca:	9308      	str	r3, [sp, #32]
    9dcc:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    9dd0:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
        let display = ST7735 {
    9dd4:	9100      	str	r1, [sp, #0]
    9dd6:	9201      	str	r2, [sp, #4]
    9dd8:	9302      	str	r3, [sp, #8]
    9dda:	9403      	str	r4, [sp, #12]
    9ddc:	f88d e014 	strb.w	lr, [sp, #20]
    9de0:	f88d c015 	strb.w	ip, [sp, #21]
    9de4:	2100      	movs	r1, #0
    9de6:	f8ad 1010 	strh.w	r1, [sp, #16]
    9dea:	f8ad 1012 	strh.w	r1, [sp, #18]
    9dee:	4669      	mov	r1, sp
        display
    9df0:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    9df4:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    }
    9df8:	b00a      	add	sp, #40	; 0x28
    9dfa:	bdb0      	pop	{r4, r5, r7, pc}

00009dfc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>:
    pub fn init<DELAY>(&mut self, delay: &mut DELAY) -> Result<(), ()>
    9dfc:	b580      	push	{r7, lr}
    9dfe:	b0f6      	sub	sp, #472	; 0x1d8
    9e00:	904e      	str	r0, [sp, #312]	; 0x138
    9e02:	914f      	str	r1, [sp, #316]	; 0x13c
        mynewt::spi::spi_noblock_init()  //  Init the SPI queue
    9e04:	9117      	str	r1, [sp, #92]	; 0x5c
    9e06:	9016      	str	r0, [sp, #88]	; 0x58
    9e08:	f008 fcbc 	bl	12784 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>
    9e0c:	9015      	str	r0, [sp, #84]	; 0x54
    9e0e:	e7ff      	b.n	9e10 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x14>
    9e10:	f24c 117c 	movw	r1, #49532	; 0xc17c
    9e14:	f2c0 0101 	movt	r1, #1
    9e18:	f24c 138c 	movw	r3, #49548	; 0xc18c
    9e1c:	f2c0 0301 	movt	r3, #1
    9e20:	220d      	movs	r2, #13
    9e22:	9815      	ldr	r0, [sp, #84]	; 0x54
    9e24:	f7fe feed 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9e28:	e7ff      	b.n	9e2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2e>
        self.hard_reset()?;
    9e2a:	9816      	ldr	r0, [sp, #88]	; 0x58
    9e2c:	f7ff fcfa 	bl	9824 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>
    9e30:	9014      	str	r0, [sp, #80]	; 0x50
    9e32:	e7ff      	b.n	9e34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38>
    9e34:	9814      	ldr	r0, [sp, #80]	; 0x50
    9e36:	f000 0001 	and.w	r0, r0, #1
    9e3a:	f7fe ff1b 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e3e:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
    9e42:	e7ff      	b.n	9e44 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48>
    9e44:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
    9e48:	07c1      	lsls	r1, r0, #31
    9e4a:	2900      	cmp	r1, #0
    9e4c:	d001      	beq.n	9e52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x56>
    9e4e:	e7ff      	b.n	9e50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54>
    9e50:	e010      	b.n	9e74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x78>
    9e52:	2001      	movs	r0, #1
        self.write_command(Instruction::SWRESET, None)?;
    9e54:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
    9e58:	2000      	movs	r0, #0
    9e5a:	901a      	str	r0, [sp, #104]	; 0x68
    9e5c:	9019      	str	r0, [sp, #100]	; 0x64
    9e5e:	9019      	str	r0, [sp, #100]	; 0x64
    9e60:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9e62:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9e64:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
    9e68:	9816      	ldr	r0, [sp, #88]	; 0x58
    9e6a:	f7ff fd81 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9e6e:	9013      	str	r0, [sp, #76]	; 0x4c
    9e70:	e00d      	b.n	9e8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x92>
        self.hard_reset()?;
    9e72:	defe      	udf	#254	; 0xfe
    9e74:	f007 ff85 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e78:	e003      	b.n	9e82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x86>
    }
    9e7a:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    9e7e:	b076      	add	sp, #472	; 0x1d8
    9e80:	bd80      	pop	{r7, pc}
        self.hard_reset()?;
    9e82:	f00a fcef 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e86:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9e8a:	e7ff      	b.n	9e8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x90>
    9e8c:	e7f5      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::SWRESET, None)?;
    9e8e:	9813      	ldr	r0, [sp, #76]	; 0x4c
    9e90:	f000 0001 	and.w	r0, r0, #1
    9e94:	f7fe feee 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e98:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    9e9c:	e7ff      	b.n	9e9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xa2>
    9e9e:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    9ea2:	07c1      	lsls	r1, r0, #31
    9ea4:	2900      	cmp	r1, #0
    9ea6:	d001      	beq.n	9eac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xb0>
    9ea8:	e7ff      	b.n	9eaa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xae>
    9eaa:	e005      	b.n	9eb8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xbc>
    9eac:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    9eae:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9eb0:	f00a fa63 	bl	1437a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    9eb4:	e009      	b.n	9eca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xce>
        self.write_command(Instruction::SWRESET, None)?;
    9eb6:	defe      	udf	#254	; 0xfe
    9eb8:	f007 ff63 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9ebc:	e7ff      	b.n	9ebe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xc2>
    9ebe:	f00a fcd1 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ec2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9ec6:	e7ff      	b.n	9ec8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xcc>
    9ec8:	e7d7      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    9eca:	2011      	movs	r0, #17
        self.write_command(Instruction::SLPOUT, None)?;
    9ecc:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    9ed0:	2000      	movs	r0, #0
    9ed2:	901d      	str	r0, [sp, #116]	; 0x74
    9ed4:	901c      	str	r0, [sp, #112]	; 0x70
    9ed6:	901c      	str	r0, [sp, #112]	; 0x70
    9ed8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    9eda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9edc:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
    9ee0:	9816      	ldr	r0, [sp, #88]	; 0x58
    9ee2:	f7ff fd45 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9ee6:	9012      	str	r0, [sp, #72]	; 0x48
    9ee8:	e7ff      	b.n	9eea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xee>
    9eea:	9812      	ldr	r0, [sp, #72]	; 0x48
    9eec:	f000 0001 	and.w	r0, r0, #1
    9ef0:	f7fe fec0 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9ef4:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
    9ef8:	e7ff      	b.n	9efa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xfe>
    9efa:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
    9efe:	07c1      	lsls	r1, r0, #31
    9f00:	2900      	cmp	r1, #0
    9f02:	d001      	beq.n	9f08 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10c>
    9f04:	e7ff      	b.n	9f06 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10a>
    9f06:	e005      	b.n	9f14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x118>
    9f08:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    9f0a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9f0c:	f00a fa35 	bl	1437a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    9f10:	e009      	b.n	9f26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x12a>
        self.write_command(Instruction::SLPOUT, None)?;
    9f12:	defe      	udf	#254	; 0xfe
    9f14:	f007 ff35 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9f18:	e7ff      	b.n	9f1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x11e>
    9f1a:	f00a fca3 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9f1e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9f22:	e7ff      	b.n	9f24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x128>
    9f24:	e7a9      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    9f26:	20b1      	movs	r0, #177	; 0xb1
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    9f28:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
    9f2c:	f24c 10a0 	movw	r0, #49568	; 0xc1a0
    9f30:	f2c0 0001 	movt	r0, #1
    9f34:	6800      	ldr	r0, [r0, #0]
    9f36:	901f      	str	r0, [sp, #124]	; 0x7c
    9f38:	2003      	movs	r0, #3
    9f3a:	9020      	str	r0, [sp, #128]	; 0x80
    9f3c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    9f3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9f40:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
    9f44:	9816      	ldr	r0, [sp, #88]	; 0x58
    9f46:	f7ff fd13 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9f4a:	9011      	str	r0, [sp, #68]	; 0x44
    9f4c:	e7ff      	b.n	9f4e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x152>
    9f4e:	9811      	ldr	r0, [sp, #68]	; 0x44
    9f50:	f000 0001 	and.w	r0, r0, #1
    9f54:	f7fe fe8e 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9f58:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    9f5c:	e7ff      	b.n	9f5e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x162>
    9f5e:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    9f62:	07c1      	lsls	r1, r0, #31
    9f64:	2900      	cmp	r1, #0
    9f66:	d001      	beq.n	9f6c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x170>
    9f68:	e7ff      	b.n	9f6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x16e>
    9f6a:	e014      	b.n	9f96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x19a>
    9f6c:	20b2      	movs	r0, #178	; 0xb2
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    9f6e:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    9f72:	f24c 10a0 	movw	r0, #49568	; 0xc1a0
    9f76:	f2c0 0001 	movt	r0, #1
    9f7a:	6800      	ldr	r0, [r0, #0]
    9f7c:	9022      	str	r0, [sp, #136]	; 0x88
    9f7e:	2003      	movs	r0, #3
    9f80:	9023      	str	r0, [sp, #140]	; 0x8c
    9f82:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9f84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9f86:	f89d 1087 	ldrb.w	r1, [sp, #135]	; 0x87
    9f8a:	9816      	ldr	r0, [sp, #88]	; 0x58
    9f8c:	f7ff fcf0 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9f90:	9010      	str	r0, [sp, #64]	; 0x40
    9f92:	e009      	b.n	9fa8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ac>
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    9f94:	defe      	udf	#254	; 0xfe
    9f96:	f007 fef4 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9f9a:	e7ff      	b.n	9f9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1a0>
    9f9c:	f00a fc62 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9fa0:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9fa4:	e7ff      	b.n	9fa6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1aa>
    9fa6:	e768      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    9fa8:	9810      	ldr	r0, [sp, #64]	; 0x40
    9faa:	f000 0001 	and.w	r0, r0, #1
    9fae:	f7fe fe61 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9fb2:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
    9fb6:	e7ff      	b.n	9fb8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1bc>
    9fb8:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
    9fbc:	07c1      	lsls	r1, r0, #31
    9fbe:	2900      	cmp	r1, #0
    9fc0:	d001      	beq.n	9fc6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ca>
    9fc2:	e7ff      	b.n	9fc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1c8>
    9fc4:	e014      	b.n	9ff0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1f4>
    9fc6:	20b3      	movs	r0, #179	; 0xb3
        self.write_command(Instruction::FRMCTR3,
    9fc8:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    9fcc:	f24c 10ac 	movw	r0, #49580	; 0xc1ac
    9fd0:	f2c0 0001 	movt	r0, #1
    9fd4:	6800      	ldr	r0, [r0, #0]
    9fd6:	9025      	str	r0, [sp, #148]	; 0x94
    9fd8:	2006      	movs	r0, #6
    9fda:	9026      	str	r0, [sp, #152]	; 0x98
        self.write_command(Instruction::FRMCTR3,
    9fdc:	9a25      	ldr	r2, [sp, #148]	; 0x94
    9fde:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9fe0:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
    9fe4:	9816      	ldr	r0, [sp, #88]	; 0x58
    9fe6:	f7ff fcc3 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9fea:	900f      	str	r0, [sp, #60]	; 0x3c
    9fec:	e009      	b.n	a002 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x206>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    9fee:	defe      	udf	#254	; 0xfe
    9ff0:	f007 fec7 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9ff4:	e7ff      	b.n	9ff6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1fa>
    9ff6:	f00a fc35 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ffa:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9ffe:	e7ff      	b.n	a000 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x204>
    a000:	e73b      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR3,
    a002:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a004:	f000 0001 	and.w	r0, r0, #1
    a008:	f7fe fe34 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a00c:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
    a010:	e7ff      	b.n	a012 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x216>
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a012:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
    a016:	07c1      	lsls	r1, r0, #31
    a018:	2900      	cmp	r1, #0
    a01a:	d001      	beq.n	a020 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x224>
    a01c:	e7ff      	b.n	a01e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x222>
    a01e:	e014      	b.n	a04a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x24e>
    a020:	20b4      	movs	r0, #180	; 0xb4
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a022:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
    a026:	f24c 10b4 	movw	r0, #49588	; 0xc1b4
    a02a:	f2c0 0001 	movt	r0, #1
    a02e:	6800      	ldr	r0, [r0, #0]
    a030:	9028      	str	r0, [sp, #160]	; 0xa0
    a032:	2001      	movs	r0, #1
    a034:	9029      	str	r0, [sp, #164]	; 0xa4
    a036:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    a038:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    a03a:	f89d 109f 	ldrb.w	r1, [sp, #159]	; 0x9f
    a03e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a040:	f7ff fc96 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a044:	900e      	str	r0, [sp, #56]	; 0x38
    a046:	e009      	b.n	a05c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x260>
        self.write_command(Instruction::FRMCTR3,
    a048:	defe      	udf	#254	; 0xfe
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a04a:	f007 fe9a 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a04e:	e7ff      	b.n	a050 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x254>
    a050:	f00a fc08 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a054:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a058:	e7ff      	b.n	a05a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x25e>
    a05a:	e70e      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a05c:	980e      	ldr	r0, [sp, #56]	; 0x38
    a05e:	f000 0001 	and.w	r0, r0, #1
    a062:	f7fe fe07 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a066:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
    a06a:	e7ff      	b.n	a06c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x270>
    a06c:	f89d 009e 	ldrb.w	r0, [sp, #158]	; 0x9e
    a070:	07c1      	lsls	r1, r0, #31
    a072:	2900      	cmp	r1, #0
    a074:	d001      	beq.n	a07a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27e>
    a076:	e7ff      	b.n	a078 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27c>
    a078:	e014      	b.n	a0a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2a8>
    a07a:	20c0      	movs	r0, #192	; 0xc0
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a07c:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
    a080:	f24c 10bc 	movw	r0, #49596	; 0xc1bc
    a084:	f2c0 0001 	movt	r0, #1
    a088:	6800      	ldr	r0, [r0, #0]
    a08a:	902b      	str	r0, [sp, #172]	; 0xac
    a08c:	2003      	movs	r0, #3
    a08e:	902c      	str	r0, [sp, #176]	; 0xb0
    a090:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    a092:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    a094:	f89d 10ab 	ldrb.w	r1, [sp, #171]	; 0xab
    a098:	9816      	ldr	r0, [sp, #88]	; 0x58
    a09a:	f7ff fc69 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a09e:	900d      	str	r0, [sp, #52]	; 0x34
    a0a0:	e009      	b.n	a0b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ba>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a0a2:	defe      	udf	#254	; 0xfe
    a0a4:	f007 fe6d 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a0a8:	e7ff      	b.n	a0aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ae>
    a0aa:	f00a fbdb 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a0ae:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a0b2:	e7ff      	b.n	a0b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2b8>
    a0b4:	e6e1      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a0b6:	980d      	ldr	r0, [sp, #52]	; 0x34
    a0b8:	f000 0001 	and.w	r0, r0, #1
    a0bc:	f7fe fdda 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a0c0:	f88d 00aa 	strb.w	r0, [sp, #170]	; 0xaa
    a0c4:	e7ff      	b.n	a0c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ca>
    a0c6:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
    a0ca:	07c1      	lsls	r1, r0, #31
    a0cc:	2900      	cmp	r1, #0
    a0ce:	d001      	beq.n	a0d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d8>
    a0d0:	e7ff      	b.n	a0d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d6>
    a0d2:	e014      	b.n	a0fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x302>
    a0d4:	20c1      	movs	r0, #193	; 0xc1
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a0d6:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
    a0da:	f24c 10c4 	movw	r0, #49604	; 0xc1c4
    a0de:	f2c0 0001 	movt	r0, #1
    a0e2:	6800      	ldr	r0, [r0, #0]
    a0e4:	902e      	str	r0, [sp, #184]	; 0xb8
    a0e6:	2001      	movs	r0, #1
    a0e8:	902f      	str	r0, [sp, #188]	; 0xbc
    a0ea:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    a0ec:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    a0ee:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
    a0f2:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0f4:	f7ff fc3c 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a0f8:	900c      	str	r0, [sp, #48]	; 0x30
    a0fa:	e009      	b.n	a110 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x314>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a0fc:	defe      	udf	#254	; 0xfe
    a0fe:	f007 fe40 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a102:	e7ff      	b.n	a104 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x308>
    a104:	f00a fbae 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a108:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a10c:	e7ff      	b.n	a10e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x312>
    a10e:	e6b4      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a110:	980c      	ldr	r0, [sp, #48]	; 0x30
    a112:	f000 0001 	and.w	r0, r0, #1
    a116:	f7fe fdad 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a11a:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
    a11e:	e7ff      	b.n	a120 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x324>
    a120:	f89d 00b6 	ldrb.w	r0, [sp, #182]	; 0xb6
    a124:	07c1      	lsls	r1, r0, #31
    a126:	2900      	cmp	r1, #0
    a128:	d001      	beq.n	a12e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x332>
    a12a:	e7ff      	b.n	a12c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x330>
    a12c:	e014      	b.n	a158 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x35c>
    a12e:	20c2      	movs	r0, #194	; 0xc2
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a130:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
    a134:	f24c 10cc 	movw	r0, #49612	; 0xc1cc
    a138:	f2c0 0001 	movt	r0, #1
    a13c:	6800      	ldr	r0, [r0, #0]
    a13e:	9031      	str	r0, [sp, #196]	; 0xc4
    a140:	2002      	movs	r0, #2
    a142:	9032      	str	r0, [sp, #200]	; 0xc8
    a144:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    a146:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    a148:	f89d 10c3 	ldrb.w	r1, [sp, #195]	; 0xc3
    a14c:	9816      	ldr	r0, [sp, #88]	; 0x58
    a14e:	f7ff fc0f 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a152:	900b      	str	r0, [sp, #44]	; 0x2c
    a154:	e009      	b.n	a16a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a156:	defe      	udf	#254	; 0xfe
    a158:	f007 fe13 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a15c:	e7ff      	b.n	a15e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x362>
    a15e:	f00a fb81 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a162:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a166:	e7ff      	b.n	a168 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36c>
    a168:	e687      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a16a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a16c:	f000 0001 	and.w	r0, r0, #1
    a170:	f7fe fd80 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a174:	f88d 00c2 	strb.w	r0, [sp, #194]	; 0xc2
    a178:	e7ff      	b.n	a17a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x37e>
    a17a:	f89d 00c2 	ldrb.w	r0, [sp, #194]	; 0xc2
    a17e:	07c1      	lsls	r1, r0, #31
    a180:	2900      	cmp	r1, #0
    a182:	d001      	beq.n	a188 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38c>
    a184:	e7ff      	b.n	a186 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38a>
    a186:	e014      	b.n	a1b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3b6>
    a188:	20c3      	movs	r0, #195	; 0xc3
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a18a:	f88d 00cf 	strb.w	r0, [sp, #207]	; 0xcf
    a18e:	f24c 10d4 	movw	r0, #49620	; 0xc1d4
    a192:	f2c0 0001 	movt	r0, #1
    a196:	6800      	ldr	r0, [r0, #0]
    a198:	9034      	str	r0, [sp, #208]	; 0xd0
    a19a:	2002      	movs	r0, #2
    a19c:	9035      	str	r0, [sp, #212]	; 0xd4
    a19e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    a1a0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    a1a2:	f89d 10cf 	ldrb.w	r1, [sp, #207]	; 0xcf
    a1a6:	9816      	ldr	r0, [sp, #88]	; 0x58
    a1a8:	f7ff fbe2 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a1ac:	900a      	str	r0, [sp, #40]	; 0x28
    a1ae:	e009      	b.n	a1c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c8>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a1b0:	defe      	udf	#254	; 0xfe
    a1b2:	f007 fde6 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a1b6:	e7ff      	b.n	a1b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3bc>
    a1b8:	f00a fb54 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a1bc:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a1c0:	e7ff      	b.n	a1c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c6>
    a1c2:	e65a      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a1c4:	980a      	ldr	r0, [sp, #40]	; 0x28
    a1c6:	f000 0001 	and.w	r0, r0, #1
    a1ca:	f7fe fd53 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a1ce:	f88d 00ce 	strb.w	r0, [sp, #206]	; 0xce
    a1d2:	e7ff      	b.n	a1d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3d8>
    a1d4:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
    a1d8:	07c1      	lsls	r1, r0, #31
    a1da:	2900      	cmp	r1, #0
    a1dc:	d001      	beq.n	a1e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e6>
    a1de:	e7ff      	b.n	a1e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e4>
    a1e0:	e014      	b.n	a20c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x410>
    a1e2:	20c4      	movs	r0, #196	; 0xc4
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a1e4:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
    a1e8:	f24c 10dc 	movw	r0, #49628	; 0xc1dc
    a1ec:	f2c0 0001 	movt	r0, #1
    a1f0:	6800      	ldr	r0, [r0, #0]
    a1f2:	9037      	str	r0, [sp, #220]	; 0xdc
    a1f4:	2002      	movs	r0, #2
    a1f6:	9038      	str	r0, [sp, #224]	; 0xe0
    a1f8:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    a1fa:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    a1fc:	f89d 10db 	ldrb.w	r1, [sp, #219]	; 0xdb
    a200:	9816      	ldr	r0, [sp, #88]	; 0x58
    a202:	f7ff fbb5 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a206:	9009      	str	r0, [sp, #36]	; 0x24
    a208:	e009      	b.n	a21e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x422>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a20a:	defe      	udf	#254	; 0xfe
    a20c:	f007 fdb9 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a210:	e7ff      	b.n	a212 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x416>
    a212:	f00a fb27 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a216:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a21a:	e7ff      	b.n	a21c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x420>
    a21c:	e62d      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a21e:	9809      	ldr	r0, [sp, #36]	; 0x24
    a220:	f000 0001 	and.w	r0, r0, #1
    a224:	f7fe fd26 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a228:	f88d 00da 	strb.w	r0, [sp, #218]	; 0xda
    a22c:	e7ff      	b.n	a22e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x432>
    a22e:	f89d 00da 	ldrb.w	r0, [sp, #218]	; 0xda
    a232:	07c1      	lsls	r1, r0, #31
    a234:	2900      	cmp	r1, #0
    a236:	d001      	beq.n	a23c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x440>
    a238:	e7ff      	b.n	a23a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x43e>
    a23a:	e014      	b.n	a266 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x46a>
    a23c:	20c5      	movs	r0, #197	; 0xc5
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a23e:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
    a242:	f24c 10e4 	movw	r0, #49636	; 0xc1e4
    a246:	f2c0 0001 	movt	r0, #1
    a24a:	6800      	ldr	r0, [r0, #0]
    a24c:	903a      	str	r0, [sp, #232]	; 0xe8
    a24e:	2001      	movs	r0, #1
    a250:	903b      	str	r0, [sp, #236]	; 0xec
    a252:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    a254:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    a256:	f89d 10e7 	ldrb.w	r1, [sp, #231]	; 0xe7
    a25a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a25c:	f7ff fb88 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a260:	9008      	str	r0, [sp, #32]
    a262:	e009      	b.n	a278 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47c>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a264:	defe      	udf	#254	; 0xfe
    a266:	f007 fd8c 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a26a:	e7ff      	b.n	a26c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x470>
    a26c:	f00a fafa 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a270:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a274:	e7ff      	b.n	a276 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47a>
    a276:	e600      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a278:	9808      	ldr	r0, [sp, #32]
    a27a:	f000 0001 	and.w	r0, r0, #1
    a27e:	f7fe fcf9 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a282:	f88d 00e6 	strb.w	r0, [sp, #230]	; 0xe6
    a286:	e7ff      	b.n	a288 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48c>
    a288:	f89d 00e6 	ldrb.w	r0, [sp, #230]	; 0xe6
    a28c:	07c1      	lsls	r1, r0, #31
    a28e:	2900      	cmp	r1, #0
    a290:	d001      	beq.n	a296 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x49a>
    a292:	e7ff      	b.n	a294 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x498>
    a294:	e006      	b.n	a2a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4a8>
        if self.inverted {
    a296:	9816      	ldr	r0, [sp, #88]	; 0x58
    a298:	7d41      	ldrb	r1, [r0, #21]
    a29a:	07c9      	lsls	r1, r1, #31
    a29c:	2900      	cmp	r1, #0
    a29e:	d11a      	bne.n	a2d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4da>
    a2a0:	e009      	b.n	a2b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ba>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a2a2:	defe      	udf	#254	; 0xfe
    a2a4:	f007 fd6d 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a2a8:	e7ff      	b.n	a2aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ae>
    a2aa:	f00a fadb 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a2ae:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a2b2:	e7ff      	b.n	a2b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4b8>
    a2b4:	e5e1      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a2b6:	2020      	movs	r0, #32
            self.write_command(Instruction::INVOFF, None)?;
    a2b8:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    a2bc:	2000      	movs	r0, #0
    a2be:	9041      	str	r0, [sp, #260]	; 0x104
    a2c0:	9040      	str	r0, [sp, #256]	; 0x100
    a2c2:	9040      	str	r0, [sp, #256]	; 0x100
    a2c4:	9a40      	ldr	r2, [sp, #256]	; 0x100
    a2c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
    a2c8:	f89d 10ff 	ldrb.w	r1, [sp, #255]	; 0xff
    a2cc:	9816      	ldr	r0, [sp, #88]	; 0x58
    a2ce:	f7ff fb4f 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a2d2:	9007      	str	r0, [sp, #28]
    a2d4:	e02a      	b.n	a32c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x530>
    a2d6:	2021      	movs	r0, #33	; 0x21
            self.write_command(Instruction::INVON, None)?;
    a2d8:	f88d 00f3 	strb.w	r0, [sp, #243]	; 0xf3
    a2dc:	2000      	movs	r0, #0
    a2de:	903e      	str	r0, [sp, #248]	; 0xf8
    a2e0:	903d      	str	r0, [sp, #244]	; 0xf4
    a2e2:	903d      	str	r0, [sp, #244]	; 0xf4
    a2e4:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    a2e6:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    a2e8:	f89d 10f3 	ldrb.w	r1, [sp, #243]	; 0xf3
    a2ec:	9816      	ldr	r0, [sp, #88]	; 0x58
    a2ee:	f7ff fb3f 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a2f2:	9006      	str	r0, [sp, #24]
    a2f4:	e7ff      	b.n	a2f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4fa>
    a2f6:	9806      	ldr	r0, [sp, #24]
    a2f8:	f000 0001 	and.w	r0, r0, #1
    a2fc:	f7fe fcba 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a300:	f88d 00f2 	strb.w	r0, [sp, #242]	; 0xf2
    a304:	e7ff      	b.n	a306 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x50a>
    a306:	f89d 00f2 	ldrb.w	r0, [sp, #242]	; 0xf2
    a30a:	07c1      	lsls	r1, r0, #31
    a30c:	2900      	cmp	r1, #0
    a30e:	d001      	beq.n	a314 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x518>
    a310:	e7ff      	b.n	a312 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x516>
    a312:	e001      	b.n	a318 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x51c>
        if self.inverted {
    a314:	e024      	b.n	a360 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVON, None)?;
    a316:	defe      	udf	#254	; 0xfe
    a318:	f007 fd33 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a31c:	e7ff      	b.n	a31e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x522>
    a31e:	f00a faa1 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a322:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a326:	e7ff      	b.n	a328 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52c>
    a328:	e7ff      	b.n	a32a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
    a32a:	e5a6      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::INVOFF, None)?;
    a32c:	9807      	ldr	r0, [sp, #28]
    a32e:	f000 0001 	and.w	r0, r0, #1
    a332:	f7fe fc9f 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a336:	f88d 00fe 	strb.w	r0, [sp, #254]	; 0xfe
    a33a:	e7ff      	b.n	a33c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x540>
    a33c:	f89d 00fe 	ldrb.w	r0, [sp, #254]	; 0xfe
    a340:	07c1      	lsls	r1, r0, #31
    a342:	2900      	cmp	r1, #0
    a344:	d001      	beq.n	a34a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54e>
    a346:	e7ff      	b.n	a348 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54c>
    a348:	e001      	b.n	a34e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x552>
        if self.inverted {
    a34a:	e009      	b.n	a360 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVOFF, None)?;
    a34c:	defe      	udf	#254	; 0xfe
    a34e:	f007 fd18 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a352:	e7ff      	b.n	a354 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x558>
    a354:	f00a fa86 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a358:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a35c:	e7ff      	b.n	a35e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x562>
    a35e:	e7e4      	b.n	a32a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
        if self.rgb {
    a360:	9816      	ldr	r0, [sp, #88]	; 0x58
    a362:	7d01      	ldrb	r1, [r0, #20]
    a364:	07c9      	lsls	r1, r1, #31
    a366:	2900      	cmp	r1, #0
    a368:	d114      	bne.n	a394 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x598>
    a36a:	e7ff      	b.n	a36c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x570>
    a36c:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a36e:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
    a372:	f24c 10f4 	movw	r0, #49652	; 0xc1f4
    a376:	f2c0 0001 	movt	r0, #1
    a37a:	6800      	ldr	r0, [r0, #0]
    a37c:	9046      	str	r0, [sp, #280]	; 0x118
    a37e:	2001      	movs	r0, #1
    a380:	9047      	str	r0, [sp, #284]	; 0x11c
    a382:	9a46      	ldr	r2, [sp, #280]	; 0x118
    a384:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    a386:	f89d 1117 	ldrb.w	r1, [sp, #279]	; 0x117
    a38a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a38c:	f7ff faf0 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a390:	9005      	str	r0, [sp, #20]
    a392:	e02e      	b.n	a3f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f6>
    a394:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a396:	f88d 010b 	strb.w	r0, [sp, #267]	; 0x10b
    a39a:	f24c 10ec 	movw	r0, #49644	; 0xc1ec
    a39e:	f2c0 0001 	movt	r0, #1
    a3a2:	6800      	ldr	r0, [r0, #0]
    a3a4:	9043      	str	r0, [sp, #268]	; 0x10c
    a3a6:	2001      	movs	r0, #1
    a3a8:	9044      	str	r0, [sp, #272]	; 0x110
    a3aa:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    a3ac:	9b44      	ldr	r3, [sp, #272]	; 0x110
    a3ae:	f89d 110b 	ldrb.w	r1, [sp, #267]	; 0x10b
    a3b2:	9816      	ldr	r0, [sp, #88]	; 0x58
    a3b4:	f7ff fadc 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a3b8:	9004      	str	r0, [sp, #16]
    a3ba:	e7ff      	b.n	a3bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5c0>
    a3bc:	9804      	ldr	r0, [sp, #16]
    a3be:	f000 0001 	and.w	r0, r0, #1
    a3c2:	f7fe fc57 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a3c6:	f88d 010a 	strb.w	r0, [sp, #266]	; 0x10a
    a3ca:	e7ff      	b.n	a3cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5d0>
    a3cc:	f89d 010a 	ldrb.w	r0, [sp, #266]	; 0x10a
    a3d0:	07c1      	lsls	r1, r0, #31
    a3d2:	2900      	cmp	r1, #0
    a3d4:	d001      	beq.n	a3da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5de>
    a3d6:	e7ff      	b.n	a3d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5dc>
    a3d8:	e001      	b.n	a3de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e2>
        if self.rgb {
    a3da:	e024      	b.n	a426 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a3dc:	defe      	udf	#254	; 0xfe
    a3de:	f007 fcd0 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a3e2:	e7ff      	b.n	a3e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e8>
    a3e4:	f00a fa3e 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a3e8:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a3ec:	e7ff      	b.n	a3ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f2>
    a3ee:	e7ff      	b.n	a3f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a3f0:	e543      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a3f2:	9805      	ldr	r0, [sp, #20]
    a3f4:	f000 0001 	and.w	r0, r0, #1
    a3f8:	f7fe fc3c 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a3fc:	f88d 0116 	strb.w	r0, [sp, #278]	; 0x116
    a400:	e7ff      	b.n	a402 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x606>
    a402:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    a406:	07c1      	lsls	r1, r0, #31
    a408:	2900      	cmp	r1, #0
    a40a:	d001      	beq.n	a410 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x614>
    a40c:	e7ff      	b.n	a40e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x612>
    a40e:	e001      	b.n	a414 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x618>
        if self.rgb {
    a410:	e009      	b.n	a426 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a412:	defe      	udf	#254	; 0xfe
    a414:	f007 fcb5 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a418:	e7ff      	b.n	a41a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x61e>
    a41a:	f00a fa23 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a41e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a422:	e7ff      	b.n	a424 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x628>
    a424:	e7e4      	b.n	a3f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a426:	203a      	movs	r0, #58	; 0x3a
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a428:	f88d 0123 	strb.w	r0, [sp, #291]	; 0x123
    a42c:	f24c 10fc 	movw	r0, #49660	; 0xc1fc
    a430:	f2c0 0001 	movt	r0, #1
    a434:	6800      	ldr	r0, [r0, #0]
    a436:	9049      	str	r0, [sp, #292]	; 0x124
    a438:	2001      	movs	r0, #1
    a43a:	904a      	str	r0, [sp, #296]	; 0x128
    a43c:	9a49      	ldr	r2, [sp, #292]	; 0x124
    a43e:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    a440:	f89d 1123 	ldrb.w	r1, [sp, #291]	; 0x123
    a444:	9816      	ldr	r0, [sp, #88]	; 0x58
    a446:	f7ff fa93 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a44a:	9003      	str	r0, [sp, #12]
    a44c:	e7ff      	b.n	a44e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x652>
    a44e:	9803      	ldr	r0, [sp, #12]
    a450:	f000 0001 	and.w	r0, r0, #1
    a454:	f7fe fc0e 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a458:	f88d 0122 	strb.w	r0, [sp, #290]	; 0x122
    a45c:	e7ff      	b.n	a45e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x662>
    a45e:	f89d 0122 	ldrb.w	r0, [sp, #290]	; 0x122
    a462:	07c1      	lsls	r1, r0, #31
    a464:	2900      	cmp	r1, #0
    a466:	d001      	beq.n	a46c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x670>
    a468:	e7ff      	b.n	a46a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x66e>
    a46a:	e010      	b.n	a48e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x692>
    a46c:	2029      	movs	r0, #41	; 0x29
        self.write_command(Instruction::DISPON, None)?;
    a46e:	f88d 012f 	strb.w	r0, [sp, #303]	; 0x12f
    a472:	2000      	movs	r0, #0
    a474:	904d      	str	r0, [sp, #308]	; 0x134
    a476:	904c      	str	r0, [sp, #304]	; 0x130
    a478:	904c      	str	r0, [sp, #304]	; 0x130
    a47a:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    a47c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    a47e:	f89d 112f 	ldrb.w	r1, [sp, #303]	; 0x12f
    a482:	9816      	ldr	r0, [sp, #88]	; 0x58
    a484:	f7ff fa74 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a488:	9002      	str	r0, [sp, #8]
    a48a:	e009      	b.n	a4a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a4>
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a48c:	defe      	udf	#254	; 0xfe
    a48e:	f007 fc78 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a492:	e7ff      	b.n	a494 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x698>
    a494:	f00a f9e6 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a498:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a49c:	e7ff      	b.n	a49e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a2>
    a49e:	e4ec      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::DISPON, None)?;
    a4a0:	9802      	ldr	r0, [sp, #8]
    a4a2:	f000 0001 	and.w	r0, r0, #1
    a4a6:	f7fe fbe5 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a4aa:	f88d 012e 	strb.w	r0, [sp, #302]	; 0x12e
    a4ae:	e7ff      	b.n	a4b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6b4>
    a4b0:	f89d 012e 	ldrb.w	r0, [sp, #302]	; 0x12e
    a4b4:	07c1      	lsls	r1, r0, #31
    a4b6:	2900      	cmp	r1, #0
    a4b8:	d001      	beq.n	a4be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c2>
    a4ba:	e7ff      	b.n	a4bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c0>
    a4bc:	e005      	b.n	a4ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6ce>
    a4be:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a4c0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a4c2:	f009 ff5a 	bl	1437a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a4c6:	e009      	b.n	a4dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e0>
        self.write_command(Instruction::DISPON, None)?;
    a4c8:	defe      	udf	#254	; 0xfe
    a4ca:	f007 fc5a 	bl	11d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a4ce:	e7ff      	b.n	a4d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6d4>
    a4d0:	f00a f9c8 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a4d4:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a4d8:	e7ff      	b.n	a4da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6de>
    a4da:	e4ce      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    a4dc:	f008 ff88 	bl	133f0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    a4e0:	9001      	str	r0, [sp, #4]
    a4e2:	e7ff      	b.n	a4e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e8>
    a4e4:	f24c 0138 	movw	r1, #49208	; 0xc038
    a4e8:	f2c0 0101 	movt	r1, #1
    a4ec:	f24c 2300 	movw	r3, #49664	; 0xc200
    a4f0:	f2c0 0301 	movt	r3, #1
    a4f4:	220e      	movs	r2, #14
    a4f6:	9801      	ldr	r0, [sp, #4]
    a4f8:	f7fe fb83 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    a4fc:	e7ff      	b.n	a4fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x702>
    a4fe:	2000      	movs	r0, #0
        Ok(())
    a500:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    }
    a504:	e4b9      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>

0000a506 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>:
    fn to_u8(&self) -> Option<u8> {
    a506:	b580      	push	{r7, lr}
    a508:	b08a      	sub	sp, #40	; 0x28
    a50a:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    a50c:	f000 fa25 	bl	a95a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>
    a510:	9307      	str	r3, [sp, #28]
    a512:	9206      	str	r2, [sp, #24]
    a514:	9105      	str	r1, [sp, #20]
    a516:	9004      	str	r0, [sp, #16]
    a518:	e7ff      	b.n	a51a <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x14>
    a51a:	a804      	add	r0, sp, #16
    a51c:	f009 ffa4 	bl	14468 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    a520:	9003      	str	r0, [sp, #12]
    a522:	e7ff      	b.n	a524 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x1e>
    a524:	9803      	ldr	r0, [sp, #12]
    a526:	f00a f815 	bl	14554 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    a52a:	9002      	str	r0, [sp, #8]
    a52c:	9101      	str	r1, [sp, #4]
    a52e:	e7ff      	b.n	a530 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x2a>
    }
    a530:	9802      	ldr	r0, [sp, #8]
    a532:	f000 0001 	and.w	r0, r0, #1
    a536:	9901      	ldr	r1, [sp, #4]
    a538:	b00a      	add	sp, #40	; 0x28
    a53a:	bd80      	pop	{r7, pc}

0000a53c <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>:
    a53c:	b082      	sub	sp, #8
    a53e:	4601      	mov	r1, r0
    a540:	f8ad 0004 	strh.w	r0, [sp, #4]
    a544:	ba00      	rev	r0, r0
    a546:	0c00      	lsrs	r0, r0, #16
    a548:	f8ad 0006 	strh.w	r0, [sp, #6]
    a54c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a550:	9000      	str	r0, [sp, #0]
    a552:	e7ff      	b.n	a554 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E+0x18>
    a554:	9800      	ldr	r0, [sp, #0]
    a556:	b002      	add	sp, #8
    a558:	4770      	bx	lr

0000a55a <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>:
    a55a:	b580      	push	{r7, lr}
    a55c:	b084      	sub	sp, #16
    a55e:	4601      	mov	r1, r0
    a560:	f8ad 000e 	strh.w	r0, [sp, #14]
    a564:	9102      	str	r1, [sp, #8]
    a566:	f7ff ffe9 	bl	a53c <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>
    a56a:	9001      	str	r0, [sp, #4]
    a56c:	e7ff      	b.n	a56e <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E+0x14>
    a56e:	9801      	ldr	r0, [sp, #4]
    a570:	b004      	add	sp, #16
    a572:	bd80      	pop	{r7, pc}

0000a574 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>:
    a574:	b580      	push	{r7, lr}
    a576:	b084      	sub	sp, #16
    a578:	9002      	str	r0, [sp, #8]
    a57a:	9802      	ldr	r0, [sp, #8]
    a57c:	f009 ff35 	bl	143ea <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>
    a580:	9001      	str	r0, [sp, #4]
    a582:	9100      	str	r1, [sp, #0]
    a584:	e7ff      	b.n	a586 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE+0x12>
    a586:	9801      	ldr	r0, [sp, #4]
    a588:	f000 0001 	and.w	r0, r0, #1
    a58c:	9900      	ldr	r1, [sp, #0]
    a58e:	b004      	add	sp, #16
    a590:	bd80      	pop	{r7, pc}

0000a592 <_ZN4core3ptr13drop_in_place17hef1277471241eea2E>:
    a592:	b081      	sub	sp, #4
    a594:	9000      	str	r0, [sp, #0]
    a596:	b001      	add	sp, #4
    a598:	4770      	bx	lr

0000a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>:
    a59a:	b089      	sub	sp, #36	; 0x24
    a59c:	9005      	str	r0, [sp, #20]
    a59e:	9106      	str	r1, [sp, #24]
    a5a0:	9107      	str	r1, [sp, #28]
    a5a2:	9907      	ldr	r1, [sp, #28]
    a5a4:	9002      	str	r0, [sp, #8]
    a5a6:	9101      	str	r1, [sp, #4]
    a5a8:	e7ff      	b.n	a5aa <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x10>
    a5aa:	9802      	ldr	r0, [sp, #8]
    a5ac:	9008      	str	r0, [sp, #32]
    a5ae:	9908      	ldr	r1, [sp, #32]
    a5b0:	9100      	str	r1, [sp, #0]
    a5b2:	e7ff      	b.n	a5b4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x1a>
    a5b4:	9800      	ldr	r0, [sp, #0]
    a5b6:	9003      	str	r0, [sp, #12]
    a5b8:	9901      	ldr	r1, [sp, #4]
    a5ba:	9104      	str	r1, [sp, #16]
    a5bc:	9803      	ldr	r0, [sp, #12]
    a5be:	9904      	ldr	r1, [sp, #16]
    a5c0:	b009      	add	sp, #36	; 0x24
    a5c2:	4770      	bx	lr

0000a5c4 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>:
use num_derive::ToPrimitive;

/// ST7735 instructions.
#[derive(ToPrimitive)]
    a5c4:	b08a      	sub	sp, #40	; 0x28
    a5c6:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Instruction {
    a5c8:	7800      	ldrb	r0, [r0, #0]
    a5ca:	9001      	str	r0, [sp, #4]
    a5cc:	9901      	ldr	r1, [sp, #4]
    a5ce:	e8df f011 	tbh	[pc, r1, lsl #1]
    a5d2:	0103      	.short	0x0103
    a5d4:	01020107 	.word	0x01020107
    a5d8:	010c0102 	.word	0x010c0102
    a5dc:	01020102 	.word	0x01020102
    a5e0:	01020102 	.word	0x01020102
    a5e4:	01020111 	.word	0x01020111
    a5e8:	01020102 	.word	0x01020102
    a5ec:	01020102 	.word	0x01020102
    a5f0:	01160102 	.word	0x01160102
    a5f4:	0120011b 	.word	0x0120011b
    a5f8:	01020125 	.word	0x01020125
    a5fc:	01020102 	.word	0x01020102
    a600:	01020102 	.word	0x01020102
    a604:	01020102 	.word	0x01020102
    a608:	01020102 	.word	0x01020102
    a60c:	01020102 	.word	0x01020102
    a610:	012a0102 	.word	0x012a0102
    a614:	0102012f 	.word	0x0102012f
    a618:	01020102 	.word	0x01020102
    a61c:	01020102 	.word	0x01020102
    a620:	01340102 	.word	0x01340102
    a624:	013e0139 	.word	0x013e0139
    a628:	01480143 	.word	0x01480143
    a62c:	014d0102 	.word	0x014d0102
    a630:	01520102 	.word	0x01520102
    a634:	01020102 	.word	0x01020102
    a638:	01020102 	.word	0x01020102
    a63c:	015c0102 	.word	0x015c0102
    a640:	01020102 	.word	0x01020102
    a644:	01570102 	.word	0x01570102
    a648:	01020102 	.word	0x01020102
    a64c:	01020102 	.word	0x01020102
    a650:	01020102 	.word	0x01020102
    a654:	01020102 	.word	0x01020102
    a658:	01020102 	.word	0x01020102
    a65c:	01020102 	.word	0x01020102
    a660:	01020102 	.word	0x01020102
    a664:	01020102 	.word	0x01020102
    a668:	01020102 	.word	0x01020102
    a66c:	01020102 	.word	0x01020102
    a670:	01020102 	.word	0x01020102
    a674:	01020102 	.word	0x01020102
    a678:	01020102 	.word	0x01020102
    a67c:	01020102 	.word	0x01020102
    a680:	01020102 	.word	0x01020102
    a684:	01020102 	.word	0x01020102
    a688:	01020102 	.word	0x01020102
    a68c:	01020102 	.word	0x01020102
    a690:	01020102 	.word	0x01020102
    a694:	01020102 	.word	0x01020102
    a698:	01020102 	.word	0x01020102
    a69c:	01020102 	.word	0x01020102
    a6a0:	01020102 	.word	0x01020102
    a6a4:	01020102 	.word	0x01020102
    a6a8:	01020102 	.word	0x01020102
    a6ac:	01020102 	.word	0x01020102
    a6b0:	01020102 	.word	0x01020102
    a6b4:	01020102 	.word	0x01020102
    a6b8:	01020102 	.word	0x01020102
    a6bc:	01020102 	.word	0x01020102
    a6c0:	01020102 	.word	0x01020102
    a6c4:	01020102 	.word	0x01020102
    a6c8:	01020102 	.word	0x01020102
    a6cc:	01020102 	.word	0x01020102
    a6d0:	01020102 	.word	0x01020102
    a6d4:	01020102 	.word	0x01020102
    a6d8:	01020102 	.word	0x01020102
    a6dc:	01020102 	.word	0x01020102
    a6e0:	01020102 	.word	0x01020102
    a6e4:	01020102 	.word	0x01020102
    a6e8:	01020102 	.word	0x01020102
    a6ec:	01020102 	.word	0x01020102
    a6f0:	01020102 	.word	0x01020102
    a6f4:	01020102 	.word	0x01020102
    a6f8:	01020102 	.word	0x01020102
    a6fc:	01020102 	.word	0x01020102
    a700:	01020102 	.word	0x01020102
    a704:	01020102 	.word	0x01020102
    a708:	01020102 	.word	0x01020102
    a70c:	01020102 	.word	0x01020102
    a710:	01020102 	.word	0x01020102
    a714:	01020102 	.word	0x01020102
    a718:	01020102 	.word	0x01020102
    a71c:	01020102 	.word	0x01020102
    a720:	01020102 	.word	0x01020102
    a724:	01020102 	.word	0x01020102
    a728:	01020102 	.word	0x01020102
    a72c:	01020102 	.word	0x01020102
    a730:	01020102 	.word	0x01020102
    a734:	01660161 	.word	0x01660161
    a738:	0170016b 	.word	0x0170016b
    a73c:	01750102 	.word	0x01750102
    a740:	01020102 	.word	0x01020102
    a744:	01020102 	.word	0x01020102
    a748:	01020102 	.word	0x01020102
    a74c:	01020102 	.word	0x01020102
    a750:	017a0102 	.word	0x017a0102
    a754:	0184017f 	.word	0x0184017f
    a758:	018e0189 	.word	0x018e0189
    a75c:	01020193 	.word	0x01020193
    a760:	01020102 	.word	0x01020102
    a764:	01020102 	.word	0x01020102
    a768:	01020102 	.word	0x01020102
    a76c:	01020102 	.word	0x01020102
    a770:	01020102 	.word	0x01020102
    a774:	01020102 	.word	0x01020102
    a778:	01020102 	.word	0x01020102
    a77c:	01020102 	.word	0x01020102
    a780:	01020102 	.word	0x01020102
    a784:	01980102 	.word	0x01980102
    a788:	01a2019d 	.word	0x01a2019d
    a78c:	010201a7 	.word	0x010201a7
    a790:	01b10102 	.word	0x01b10102
    a794:	010200fd 	.word	0x010200fd
    a798:	01020102 	.word	0x01020102
    a79c:	01020102 	.word	0x01020102
    a7a0:	01020102 	.word	0x01020102
    a7a4:	01020102 	.word	0x01020102
    a7a8:	01020102 	.word	0x01020102
    a7ac:	01020102 	.word	0x01020102
    a7b0:	01020102 	.word	0x01020102
    a7b4:	01020102 	.word	0x01020102
    a7b8:	01020102 	.word	0x01020102
    a7bc:	01020102 	.word	0x01020102
    a7c0:	01020102 	.word	0x01020102
    a7c4:	01020102 	.word	0x01020102
    a7c8:	01ac0102 	.word	0x01ac0102
    a7cc:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    a7ce:	9007      	str	r0, [sp, #28]
    a7d0:	20e1      	movs	r0, #225	; 0xe1
    a7d2:	9006      	str	r0, [sp, #24]
    a7d4:	e0b3      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7d6:	defe      	udf	#254	; 0xfe
    a7d8:	2000      	movs	r0, #0
    a7da:	9007      	str	r0, [sp, #28]
    a7dc:	9006      	str	r0, [sp, #24]
    a7de:	e0ae      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7e0:	2000      	movs	r0, #0
    a7e2:	9007      	str	r0, [sp, #28]
    a7e4:	2001      	movs	r0, #1
    a7e6:	9006      	str	r0, [sp, #24]
    a7e8:	e0a9      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7ea:	2000      	movs	r0, #0
    a7ec:	9007      	str	r0, [sp, #28]
    a7ee:	2004      	movs	r0, #4
    a7f0:	9006      	str	r0, [sp, #24]
    a7f2:	e0a4      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7f4:	2000      	movs	r0, #0
    a7f6:	9007      	str	r0, [sp, #28]
    a7f8:	2009      	movs	r0, #9
    a7fa:	9006      	str	r0, [sp, #24]
    a7fc:	e09f      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7fe:	2000      	movs	r0, #0
    a800:	9007      	str	r0, [sp, #28]
    a802:	2010      	movs	r0, #16
    a804:	9006      	str	r0, [sp, #24]
    a806:	e09a      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a808:	2000      	movs	r0, #0
    a80a:	9007      	str	r0, [sp, #28]
    a80c:	2011      	movs	r0, #17
    a80e:	9006      	str	r0, [sp, #24]
    a810:	e095      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a812:	2000      	movs	r0, #0
    a814:	9007      	str	r0, [sp, #28]
    a816:	2012      	movs	r0, #18
    a818:	9006      	str	r0, [sp, #24]
    a81a:	e090      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a81c:	2000      	movs	r0, #0
    a81e:	9007      	str	r0, [sp, #28]
    a820:	2013      	movs	r0, #19
    a822:	9006      	str	r0, [sp, #24]
    a824:	e08b      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a826:	2000      	movs	r0, #0
    a828:	9007      	str	r0, [sp, #28]
    a82a:	2020      	movs	r0, #32
    a82c:	9006      	str	r0, [sp, #24]
    a82e:	e086      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a830:	2000      	movs	r0, #0
    a832:	9007      	str	r0, [sp, #28]
    a834:	2021      	movs	r0, #33	; 0x21
    a836:	9006      	str	r0, [sp, #24]
    a838:	e081      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a83a:	2000      	movs	r0, #0
    a83c:	9007      	str	r0, [sp, #28]
    a83e:	2028      	movs	r0, #40	; 0x28
    a840:	9006      	str	r0, [sp, #24]
    a842:	e07c      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a844:	2000      	movs	r0, #0
    a846:	9007      	str	r0, [sp, #28]
    a848:	2029      	movs	r0, #41	; 0x29
    a84a:	9006      	str	r0, [sp, #24]
    a84c:	e077      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a84e:	2000      	movs	r0, #0
    a850:	9007      	str	r0, [sp, #28]
    a852:	202a      	movs	r0, #42	; 0x2a
    a854:	9006      	str	r0, [sp, #24]
    a856:	e072      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a858:	2000      	movs	r0, #0
    a85a:	9007      	str	r0, [sp, #28]
    a85c:	202b      	movs	r0, #43	; 0x2b
    a85e:	9006      	str	r0, [sp, #24]
    a860:	e06d      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a862:	2000      	movs	r0, #0
    a864:	9007      	str	r0, [sp, #28]
    a866:	202c      	movs	r0, #44	; 0x2c
    a868:	9006      	str	r0, [sp, #24]
    a86a:	e068      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a86c:	2000      	movs	r0, #0
    a86e:	9007      	str	r0, [sp, #28]
    a870:	202e      	movs	r0, #46	; 0x2e
    a872:	9006      	str	r0, [sp, #24]
    a874:	e063      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a876:	2000      	movs	r0, #0
    a878:	9007      	str	r0, [sp, #28]
    a87a:	2030      	movs	r0, #48	; 0x30
    a87c:	9006      	str	r0, [sp, #24]
    a87e:	e05e      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a880:	2000      	movs	r0, #0
    a882:	9007      	str	r0, [sp, #28]
    a884:	203a      	movs	r0, #58	; 0x3a
    a886:	9006      	str	r0, [sp, #24]
    a888:	e059      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a88a:	2000      	movs	r0, #0
    a88c:	9007      	str	r0, [sp, #28]
    a88e:	2036      	movs	r0, #54	; 0x36
    a890:	9006      	str	r0, [sp, #24]
    a892:	e054      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a894:	2000      	movs	r0, #0
    a896:	9007      	str	r0, [sp, #28]
    a898:	20b1      	movs	r0, #177	; 0xb1
    a89a:	9006      	str	r0, [sp, #24]
    a89c:	e04f      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a89e:	2000      	movs	r0, #0
    a8a0:	9007      	str	r0, [sp, #28]
    a8a2:	20b2      	movs	r0, #178	; 0xb2
    a8a4:	9006      	str	r0, [sp, #24]
    a8a6:	e04a      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8a8:	2000      	movs	r0, #0
    a8aa:	9007      	str	r0, [sp, #28]
    a8ac:	20b3      	movs	r0, #179	; 0xb3
    a8ae:	9006      	str	r0, [sp, #24]
    a8b0:	e045      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8b2:	2000      	movs	r0, #0
    a8b4:	9007      	str	r0, [sp, #28]
    a8b6:	20b4      	movs	r0, #180	; 0xb4
    a8b8:	9006      	str	r0, [sp, #24]
    a8ba:	e040      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8bc:	2000      	movs	r0, #0
    a8be:	9007      	str	r0, [sp, #28]
    a8c0:	20b6      	movs	r0, #182	; 0xb6
    a8c2:	9006      	str	r0, [sp, #24]
    a8c4:	e03b      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8c6:	2000      	movs	r0, #0
    a8c8:	9007      	str	r0, [sp, #28]
    a8ca:	20c0      	movs	r0, #192	; 0xc0
    a8cc:	9006      	str	r0, [sp, #24]
    a8ce:	e036      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8d0:	2000      	movs	r0, #0
    a8d2:	9007      	str	r0, [sp, #28]
    a8d4:	20c1      	movs	r0, #193	; 0xc1
    a8d6:	9006      	str	r0, [sp, #24]
    a8d8:	e031      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8da:	2000      	movs	r0, #0
    a8dc:	9007      	str	r0, [sp, #28]
    a8de:	20c2      	movs	r0, #194	; 0xc2
    a8e0:	9006      	str	r0, [sp, #24]
    a8e2:	e02c      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8e4:	2000      	movs	r0, #0
    a8e6:	9007      	str	r0, [sp, #28]
    a8e8:	20c3      	movs	r0, #195	; 0xc3
    a8ea:	9006      	str	r0, [sp, #24]
    a8ec:	e027      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8ee:	2000      	movs	r0, #0
    a8f0:	9007      	str	r0, [sp, #28]
    a8f2:	20c4      	movs	r0, #196	; 0xc4
    a8f4:	9006      	str	r0, [sp, #24]
    a8f6:	e022      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8f8:	2000      	movs	r0, #0
    a8fa:	9007      	str	r0, [sp, #28]
    a8fc:	20c5      	movs	r0, #197	; 0xc5
    a8fe:	9006      	str	r0, [sp, #24]
    a900:	e01d      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a902:	2000      	movs	r0, #0
    a904:	9007      	str	r0, [sp, #28]
    a906:	20da      	movs	r0, #218	; 0xda
    a908:	9006      	str	r0, [sp, #24]
    a90a:	e018      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a90c:	2000      	movs	r0, #0
    a90e:	9007      	str	r0, [sp, #28]
    a910:	20db      	movs	r0, #219	; 0xdb
    a912:	9006      	str	r0, [sp, #24]
    a914:	e013      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a916:	2000      	movs	r0, #0
    a918:	9007      	str	r0, [sp, #28]
    a91a:	20dc      	movs	r0, #220	; 0xdc
    a91c:	9006      	str	r0, [sp, #24]
    a91e:	e00e      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a920:	2000      	movs	r0, #0
    a922:	9007      	str	r0, [sp, #28]
    a924:	20dd      	movs	r0, #221	; 0xdd
    a926:	9006      	str	r0, [sp, #24]
    a928:	e009      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a92a:	2000      	movs	r0, #0
    a92c:	9007      	str	r0, [sp, #28]
    a92e:	20fc      	movs	r0, #252	; 0xfc
    a930:	9006      	str	r0, [sp, #24]
    a932:	e004      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a934:	2000      	movs	r0, #0
    a936:	9007      	str	r0, [sp, #28]
    a938:	20e0      	movs	r0, #224	; 0xe0
    a93a:	9006      	str	r0, [sp, #24]
    a93c:	e7ff      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a93e:	9806      	ldr	r0, [sp, #24]
    a940:	9907      	ldr	r1, [sp, #28]
    a942:	9105      	str	r1, [sp, #20]
    a944:	9004      	str	r0, [sp, #16]
    a946:	2000      	movs	r0, #0
    a948:	9003      	str	r0, [sp, #12]
    a94a:	2001      	movs	r0, #1
    a94c:	9002      	str	r0, [sp, #8]
    a94e:	9802      	ldr	r0, [sp, #8]
    a950:	9903      	ldr	r1, [sp, #12]
    a952:	9a04      	ldr	r2, [sp, #16]
    a954:	9b05      	ldr	r3, [sp, #20]
    a956:	b00a      	add	sp, #40	; 0x28
    a958:	4770      	bx	lr

0000a95a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>:
    a95a:	b580      	push	{r7, lr}
    a95c:	b08a      	sub	sp, #40	; 0x28
    a95e:	9009      	str	r0, [sp, #36]	; 0x24
    a960:	f7ff fe30 	bl	a5c4 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>
    a964:	9108      	str	r1, [sp, #32]
    a966:	9007      	str	r0, [sp, #28]
    a968:	9306      	str	r3, [sp, #24]
    a96a:	9205      	str	r2, [sp, #20]
    a96c:	e7ff      	b.n	a96e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x14>
    a96e:	9807      	ldr	r0, [sp, #28]
    a970:	9908      	ldr	r1, [sp, #32]
    a972:	9a05      	ldr	r2, [sp, #20]
    a974:	9b06      	ldr	r3, [sp, #24]
    a976:	f000 f859 	bl	aa2c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>
    a97a:	9104      	str	r1, [sp, #16]
    a97c:	9003      	str	r0, [sp, #12]
    a97e:	9302      	str	r3, [sp, #8]
    a980:	9201      	str	r2, [sp, #4]
    a982:	e7ff      	b.n	a984 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x2a>
    a984:	9803      	ldr	r0, [sp, #12]
    a986:	9904      	ldr	r1, [sp, #16]
    a988:	9a01      	ldr	r2, [sp, #4]
    a98a:	9b02      	ldr	r3, [sp, #8]
    a98c:	b00a      	add	sp, #40	; 0x28
    a98e:	bd80      	pop	{r7, pc}

0000a990 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>:
#[derive(ToPrimitive)]
    a990:	b08a      	sub	sp, #40	; 0x28
    a992:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Orientation {
    a994:	7800      	ldrb	r0, [r0, #0]
    a996:	4601      	mov	r1, r0
    a998:	2800      	cmp	r0, #0
    a99a:	9101      	str	r1, [sp, #4]
    a99c:	d00f      	beq.n	a9be <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x2e>
    a99e:	e7ff      	b.n	a9a0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x10>
    a9a0:	9801      	ldr	r0, [sp, #4]
    a9a2:	2860      	cmp	r0, #96	; 0x60
    a9a4:	d00f      	beq.n	a9c6 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x36>
    a9a6:	e7ff      	b.n	a9a8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x18>
    a9a8:	9801      	ldr	r0, [sp, #4]
    a9aa:	28a0      	cmp	r0, #160	; 0xa0
    a9ac:	d001      	beq.n	a9b2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x22>
    a9ae:	e7ff      	b.n	a9b0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x20>
    a9b0:	e00e      	b.n	a9d0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x40>
    a9b2:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    a9b4:	9007      	str	r0, [sp, #28]
    a9b6:	20a0      	movs	r0, #160	; 0xa0
    a9b8:	9006      	str	r0, [sp, #24]
    a9ba:	e00e      	b.n	a9da <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a9bc:	defe      	udf	#254	; 0xfe
    a9be:	2000      	movs	r0, #0
    a9c0:	9007      	str	r0, [sp, #28]
    a9c2:	9006      	str	r0, [sp, #24]
    a9c4:	e009      	b.n	a9da <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a9c6:	2000      	movs	r0, #0
    a9c8:	9007      	str	r0, [sp, #28]
    a9ca:	2060      	movs	r0, #96	; 0x60
    a9cc:	9006      	str	r0, [sp, #24]
    a9ce:	e004      	b.n	a9da <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a9d0:	2000      	movs	r0, #0
    a9d2:	9007      	str	r0, [sp, #28]
    a9d4:	20c0      	movs	r0, #192	; 0xc0
    a9d6:	9006      	str	r0, [sp, #24]
    a9d8:	e7ff      	b.n	a9da <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a9da:	9806      	ldr	r0, [sp, #24]
    a9dc:	9907      	ldr	r1, [sp, #28]
    a9de:	9105      	str	r1, [sp, #20]
    a9e0:	9004      	str	r0, [sp, #16]
    a9e2:	2000      	movs	r0, #0
    a9e4:	9003      	str	r0, [sp, #12]
    a9e6:	2001      	movs	r0, #1
    a9e8:	9002      	str	r0, [sp, #8]
    a9ea:	9802      	ldr	r0, [sp, #8]
    a9ec:	9903      	ldr	r1, [sp, #12]
    a9ee:	9a04      	ldr	r2, [sp, #16]
    a9f0:	9b05      	ldr	r3, [sp, #20]
    a9f2:	b00a      	add	sp, #40	; 0x28
    a9f4:	4770      	bx	lr

0000a9f6 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>:
    a9f6:	b580      	push	{r7, lr}
    a9f8:	b08a      	sub	sp, #40	; 0x28
    a9fa:	9009      	str	r0, [sp, #36]	; 0x24
    a9fc:	f7ff ffc8 	bl	a990 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>
    aa00:	9108      	str	r1, [sp, #32]
    aa02:	9007      	str	r0, [sp, #28]
    aa04:	9306      	str	r3, [sp, #24]
    aa06:	9205      	str	r2, [sp, #20]
    aa08:	e7ff      	b.n	aa0a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x14>
    aa0a:	9807      	ldr	r0, [sp, #28]
    aa0c:	9908      	ldr	r1, [sp, #32]
    aa0e:	9a05      	ldr	r2, [sp, #20]
    aa10:	9b06      	ldr	r3, [sp, #24]
    aa12:	f000 f863 	bl	aadc <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>
    aa16:	9104      	str	r1, [sp, #16]
    aa18:	9003      	str	r0, [sp, #12]
    aa1a:	9302      	str	r3, [sp, #8]
    aa1c:	9201      	str	r2, [sp, #4]
    aa1e:	e7ff      	b.n	aa20 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x2a>
    aa20:	9803      	ldr	r0, [sp, #12]
    aa22:	9904      	ldr	r1, [sp, #16]
    aa24:	9a01      	ldr	r2, [sp, #4]
    aa26:	9b02      	ldr	r3, [sp, #8]
    aa28:	b00a      	add	sp, #40	; 0x28
    aa2a:	bd80      	pop	{r7, pc}

0000aa2c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>:
    aa2c:	b5b0      	push	{r4, r5, r7, lr}
    aa2e:	b090      	sub	sp, #64	; 0x40
    aa30:	469c      	mov	ip, r3
    aa32:	4696      	mov	lr, r2
    aa34:	460c      	mov	r4, r1
    aa36:	4605      	mov	r5, r0
    aa38:	9103      	str	r1, [sp, #12]
    aa3a:	9002      	str	r0, [sp, #8]
    aa3c:	9305      	str	r3, [sp, #20]
    aa3e:	9204      	str	r2, [sp, #16]
    aa40:	2000      	movs	r0, #0
    aa42:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aa46:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aa4a:	2001      	movs	r0, #1
    aa4c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aa50:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aa54:	9802      	ldr	r0, [sp, #8]
    aa56:	2800      	cmp	r0, #0
    aa58:	d001      	beq.n	aa5e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x32>
    aa5a:	e7ff      	b.n	aa5c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x30>
    aa5c:	e004      	b.n	aa68 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x3c>
    aa5e:	2000      	movs	r0, #0
    aa60:	9007      	str	r0, [sp, #28]
    aa62:	9006      	str	r0, [sp, #24]
    aa64:	e023      	b.n	aaae <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    aa66:	defe      	udf	#254	; 0xfe
    aa68:	2000      	movs	r0, #0
    aa6a:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aa6e:	9904      	ldr	r1, [sp, #16]
    aa70:	9a05      	ldr	r2, [sp, #20]
    aa72:	920f      	str	r2, [sp, #60]	; 0x3c
    aa74:	910e      	str	r1, [sp, #56]	; 0x38
    aa76:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aa7a:	920b      	str	r2, [sp, #44]	; 0x2c
    aa7c:	910a      	str	r1, [sp, #40]	; 0x28
    aa7e:	980a      	ldr	r0, [sp, #40]	; 0x28
    aa80:	990b      	ldr	r1, [sp, #44]	; 0x2c
    aa82:	f000 f883 	bl	ab8c <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>
    aa86:	9101      	str	r1, [sp, #4]
    aa88:	9000      	str	r0, [sp, #0]
    aa8a:	e7ff      	b.n	aa8c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x60>
    aa8c:	9800      	ldr	r0, [sp, #0]
    aa8e:	9008      	str	r0, [sp, #32]
    aa90:	9901      	ldr	r1, [sp, #4]
    aa92:	9109      	str	r1, [sp, #36]	; 0x24
    aa94:	2200      	movs	r2, #0
    aa96:	9207      	str	r2, [sp, #28]
    aa98:	2201      	movs	r2, #1
    aa9a:	9206      	str	r2, [sp, #24]
    aa9c:	e007      	b.n	aaae <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    aa9e:	9802      	ldr	r0, [sp, #8]
    aaa0:	2801      	cmp	r0, #1
    aaa2:	d010      	beq.n	aac6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x9a>
    aaa4:	e019      	b.n	aada <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xae>
    aaa6:	2000      	movs	r0, #0
    aaa8:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aaac:	e7f7      	b.n	aa9e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    aaae:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    aab2:	07c0      	lsls	r0, r0, #31
    aab4:	2800      	cmp	r0, #0
    aab6:	d1f6      	bne.n	aaa6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x7a>
    aab8:	e7f1      	b.n	aa9e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    aaba:	9806      	ldr	r0, [sp, #24]
    aabc:	9907      	ldr	r1, [sp, #28]
    aabe:	9a08      	ldr	r2, [sp, #32]
    aac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aac2:	b010      	add	sp, #64	; 0x40
    aac4:	bdb0      	pop	{r4, r5, r7, pc}
    aac6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    aaca:	07c0      	lsls	r0, r0, #31
    aacc:	2800      	cmp	r0, #0
    aace:	d0f4      	beq.n	aaba <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    aad0:	e7ff      	b.n	aad2 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xa6>
    aad2:	2000      	movs	r0, #0
    aad4:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aad8:	e7ef      	b.n	aaba <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    aada:	e7ee      	b.n	aaba <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>

0000aadc <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>:
    aadc:	b5b0      	push	{r4, r5, r7, lr}
    aade:	b090      	sub	sp, #64	; 0x40
    aae0:	469c      	mov	ip, r3
    aae2:	4696      	mov	lr, r2
    aae4:	460c      	mov	r4, r1
    aae6:	4605      	mov	r5, r0
    aae8:	9103      	str	r1, [sp, #12]
    aaea:	9002      	str	r0, [sp, #8]
    aaec:	9305      	str	r3, [sp, #20]
    aaee:	9204      	str	r2, [sp, #16]
    aaf0:	2000      	movs	r0, #0
    aaf2:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aaf6:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aafa:	2001      	movs	r0, #1
    aafc:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ab00:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ab04:	9802      	ldr	r0, [sp, #8]
    ab06:	2800      	cmp	r0, #0
    ab08:	d001      	beq.n	ab0e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x32>
    ab0a:	e7ff      	b.n	ab0c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x30>
    ab0c:	e004      	b.n	ab18 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x3c>
    ab0e:	2000      	movs	r0, #0
    ab10:	9007      	str	r0, [sp, #28]
    ab12:	9006      	str	r0, [sp, #24]
    ab14:	e023      	b.n	ab5e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    ab16:	defe      	udf	#254	; 0xfe
    ab18:	2000      	movs	r0, #0
    ab1a:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ab1e:	9904      	ldr	r1, [sp, #16]
    ab20:	9a05      	ldr	r2, [sp, #20]
    ab22:	920f      	str	r2, [sp, #60]	; 0x3c
    ab24:	910e      	str	r1, [sp, #56]	; 0x38
    ab26:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ab2a:	920b      	str	r2, [sp, #44]	; 0x2c
    ab2c:	910a      	str	r1, [sp, #40]	; 0x28
    ab2e:	980a      	ldr	r0, [sp, #40]	; 0x28
    ab30:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ab32:	f009 fef3 	bl	1491c <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>
    ab36:	9101      	str	r1, [sp, #4]
    ab38:	9000      	str	r0, [sp, #0]
    ab3a:	e7ff      	b.n	ab3c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x60>
    ab3c:	9800      	ldr	r0, [sp, #0]
    ab3e:	9008      	str	r0, [sp, #32]
    ab40:	9901      	ldr	r1, [sp, #4]
    ab42:	9109      	str	r1, [sp, #36]	; 0x24
    ab44:	2200      	movs	r2, #0
    ab46:	9207      	str	r2, [sp, #28]
    ab48:	2201      	movs	r2, #1
    ab4a:	9206      	str	r2, [sp, #24]
    ab4c:	e007      	b.n	ab5e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    ab4e:	9802      	ldr	r0, [sp, #8]
    ab50:	2801      	cmp	r0, #1
    ab52:	d010      	beq.n	ab76 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x9a>
    ab54:	e019      	b.n	ab8a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xae>
    ab56:	2000      	movs	r0, #0
    ab58:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ab5c:	e7f7      	b.n	ab4e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    ab5e:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    ab62:	07c0      	lsls	r0, r0, #31
    ab64:	2800      	cmp	r0, #0
    ab66:	d1f6      	bne.n	ab56 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x7a>
    ab68:	e7f1      	b.n	ab4e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    ab6a:	9806      	ldr	r0, [sp, #24]
    ab6c:	9907      	ldr	r1, [sp, #28]
    ab6e:	9a08      	ldr	r2, [sp, #32]
    ab70:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ab72:	b010      	add	sp, #64	; 0x40
    ab74:	bdb0      	pop	{r4, r5, r7, pc}
    ab76:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    ab7a:	07c0      	lsls	r0, r0, #31
    ab7c:	2800      	cmp	r0, #0
    ab7e:	d0f4      	beq.n	ab6a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    ab80:	e7ff      	b.n	ab82 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xa6>
    ab82:	2000      	movs	r0, #0
    ab84:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ab88:	e7ef      	b.n	ab6a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    ab8a:	e7ee      	b.n	ab6a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>

0000ab8c <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>:
    ab8c:	b084      	sub	sp, #16
    ab8e:	460a      	mov	r2, r1
    ab90:	4603      	mov	r3, r0
    ab92:	9103      	str	r1, [sp, #12]
    ab94:	9002      	str	r0, [sp, #8]
    ab96:	b004      	add	sp, #16
    ab98:	4770      	bx	lr

0000ab9a <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E>:
    ab9a:	b580      	push	{r7, lr}
    ab9c:	b086      	sub	sp, #24
    ab9e:	9004      	str	r0, [sp, #16]
    aba0:	9105      	str	r1, [sp, #20]
    aba2:	9002      	str	r0, [sp, #8]
    aba4:	f000 f810 	bl	abc8 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E>
    aba8:	9001      	str	r0, [sp, #4]
    abaa:	e7ff      	b.n	abac <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x12>
    abac:	9801      	ldr	r0, [sp, #4]
    abae:	07c1      	lsls	r1, r0, #31
    abb0:	2900      	cmp	r1, #0
    abb2:	d103      	bne.n	abbc <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x22>
    abb4:	e7ff      	b.n	abb6 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x1c>
    abb6:	2000      	movs	r0, #0
    abb8:	9003      	str	r0, [sp, #12]
    abba:	e002      	b.n	abc2 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x28>
    abbc:	9802      	ldr	r0, [sp, #8]
    abbe:	9003      	str	r0, [sp, #12]
    abc0:	e7ff      	b.n	abc2 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x28>
    abc2:	9803      	ldr	r0, [sp, #12]
    abc4:	b006      	add	sp, #24
    abc6:	bd80      	pop	{r7, pc}

0000abc8 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E>:
    abc8:	b580      	push	{r7, lr}
    abca:	b08a      	sub	sp, #40	; 0x28
    abcc:	9008      	str	r0, [sp, #32]
    abce:	9109      	str	r1, [sp, #36]	; 0x24
    abd0:	9103      	str	r1, [sp, #12]
    abd2:	9002      	str	r0, [sp, #8]
    abd4:	f000 f815 	bl	ac02 <_ZN4core3any6TypeId2of17h3f51c8cccab069bdE>
    abd8:	9105      	str	r1, [sp, #20]
    abda:	9004      	str	r0, [sp, #16]
    abdc:	e7ff      	b.n	abde <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E+0x16>
    abde:	9803      	ldr	r0, [sp, #12]
    abe0:	68c1      	ldr	r1, [r0, #12]
    abe2:	9802      	ldr	r0, [sp, #8]
    abe4:	4788      	blx	r1
    abe6:	9107      	str	r1, [sp, #28]
    abe8:	9006      	str	r0, [sp, #24]
    abea:	e7ff      	b.n	abec <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E+0x24>
    abec:	a804      	add	r0, sp, #16
    abee:	a906      	add	r1, sp, #24
    abf0:	f006 fca7 	bl	11542 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h27d5684c70bb37e8E>
    abf4:	9001      	str	r0, [sp, #4]
    abf6:	e7ff      	b.n	abf8 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E+0x30>
    abf8:	9801      	ldr	r0, [sp, #4]
    abfa:	f000 0001 	and.w	r0, r0, #1
    abfe:	b00a      	add	sp, #40	; 0x28
    ac00:	bd80      	pop	{r7, pc}

0000ac02 <_ZN4core3any6TypeId2of17h3f51c8cccab069bdE>:
    ac02:	b086      	sub	sp, #24
    ac04:	f249 40d9 	movw	r0, #38105	; 0x94d9
    ac08:	f2c1 1010 	movt	r0, #4368	; 0x1110
    ac0c:	9005      	str	r0, [sp, #20]
    ac0e:	f249 7064 	movw	r0, #38756	; 0x9764
    ac12:	f2c7 00b0 	movt	r0, #28848	; 0x70b0
    ac16:	9004      	str	r0, [sp, #16]
    ac18:	9804      	ldr	r0, [sp, #16]
    ac1a:	9905      	ldr	r1, [sp, #20]
    ac1c:	9001      	str	r0, [sp, #4]
    ac1e:	9100      	str	r1, [sp, #0]
    ac20:	e7ff      	b.n	ac22 <_ZN4core3any6TypeId2of17h3f51c8cccab069bdE+0x20>
    ac22:	9801      	ldr	r0, [sp, #4]
    ac24:	9002      	str	r0, [sp, #8]
    ac26:	9900      	ldr	r1, [sp, #0]
    ac28:	9103      	str	r1, [sp, #12]
    ac2a:	9802      	ldr	r0, [sp, #8]
    ac2c:	9903      	ldr	r1, [sp, #12]
    ac2e:	b006      	add	sp, #24
    ac30:	4770      	bx	lr

0000ac32 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h1a1e70438bc017caE>:
    ac32:	b580      	push	{r7, lr}
    ac34:	b084      	sub	sp, #16
    ac36:	9002      	str	r0, [sp, #8]
    ac38:	9103      	str	r1, [sp, #12]
    ac3a:	f7ff ffae 	bl	ab9a <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E>
    ac3e:	9001      	str	r0, [sp, #4]
    ac40:	e7ff      	b.n	ac42 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h1a1e70438bc017caE+0x10>
    ac42:	9801      	ldr	r0, [sp, #4]
    ac44:	b004      	add	sp, #16
    ac46:	bd80      	pop	{r7, pc}

0000ac48 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h939acc3a20dd048cE>:
    ac48:	b580      	push	{r7, lr}
    ac4a:	b082      	sub	sp, #8
    ac4c:	9200      	str	r2, [sp, #0]
    ac4e:	9101      	str	r1, [sp, #4]
    ac50:	9a00      	ldr	r2, [sp, #0]
    ac52:	f003 fe89 	bl	e968 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hbe953f3cc8769e4cE>
    ac56:	e7ff      	b.n	ac58 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h939acc3a20dd048cE+0x10>
    ac58:	b002      	add	sp, #8
    ac5a:	bd80      	pop	{r7, pc}

0000ac5c <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf6f4911cb4702538E>:
    ac5c:	b580      	push	{r7, lr}
    ac5e:	b084      	sub	sp, #16
    ac60:	9102      	str	r1, [sp, #8]
    ac62:	9003      	str	r0, [sp, #12]
    ac64:	9902      	ldr	r1, [sp, #8]
    ac66:	f003 fe91 	bl	e98c <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h6a25aae91f88a8abE>
    ac6a:	9001      	str	r0, [sp, #4]
    ac6c:	9100      	str	r1, [sp, #0]
    ac6e:	e7ff      	b.n	ac70 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf6f4911cb4702538E+0x14>
    ac70:	9801      	ldr	r0, [sp, #4]
    ac72:	9900      	ldr	r1, [sp, #0]
    ac74:	b004      	add	sp, #16
    ac76:	bd80      	pop	{r7, pc}

0000ac78 <_ZN8libchip814Chip8$LT$T$GT$3new17hca880a1e3fbd9a67E>:
    0xf0, 0x80, 0xf0, 0x80, 0x80, // f
];

impl<T: Hardware> Chip8<T> {
    /// Create an interpreter instance.
    pub fn new(hw: T) -> Self {
    ac78:	b5b0      	push	{r4, r5, r7, lr}
    ac7a:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
    ac7e:	b082      	sub	sp, #8
    ac80:	f10d 0e0c 	add.w	lr, sp, #12
    ac84:	f50e 5282 	add.w	r2, lr, #4160	; 0x1040
    ac88:	2300      	movs	r3, #0
        Self {
            v: [0; REGS],
    ac8a:	930b      	str	r3, [sp, #44]	; 0x2c
    ac8c:	930a      	str	r3, [sp, #40]	; 0x28
    ac8e:	9309      	str	r3, [sp, #36]	; 0x24
    ac90:	9308      	str	r3, [sp, #32]
    ac92:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
    ac96:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
            i: 0,
            dt: 0,
            st: 0,
            pc: 0,
            sp: 0,
            mem: [0; MEMS],
    ac9a:	9007      	str	r0, [sp, #28]
    ac9c:	4660      	mov	r0, ip
    ac9e:	9106      	str	r1, [sp, #24]
    aca0:	4671      	mov	r1, lr
    aca2:	9205      	str	r2, [sp, #20]
    aca4:	9304      	str	r3, [sp, #16]
    aca6:	f8cd c00c 	str.w	ip, [sp, #12]
    acaa:	f8cd e008 	str.w	lr, [sp, #8]
    acae:	f011 f819 	bl	1bce4 <__aeabi_memclr>
            stack: [0; STACKS],
    acb2:	9804      	ldr	r0, [sp, #16]
    acb4:	9905      	ldr	r1, [sp, #20]
    acb6:	6008      	str	r0, [r1, #0]
    acb8:	f841 0c04 	str.w	r0, [r1, #-4]
    acbc:	f841 0c08 	str.w	r0, [r1, #-8]
    acc0:	f841 0c0c 	str.w	r0, [r1, #-12]
    acc4:	f841 0c10 	str.w	r0, [r1, #-16]
    acc8:	f841 0c14 	str.w	r0, [r1, #-20]
    accc:	f841 0c18 	str.w	r0, [r1, #-24]
    acd0:	f841 0c1c 	str.w	r0, [r1, #-28]
            time: None,
    acd4:	6088      	str	r0, [r1, #8]
    acd6:	6048      	str	r0, [r1, #4]
            running: false,
            hw,
    acd8:	9a06      	ldr	r2, [sp, #24]
    acda:	8893      	ldrh	r3, [r2, #4]
    acdc:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    ace0:	f8ae 3064 	strh.w	r3, [lr, #100]	; 0x64
    ace4:	6813      	ldr	r3, [r2, #0]
    ace6:	614b      	str	r3, [r1, #20]
        Self {
    ace8:	9b08      	ldr	r3, [sp, #32]
    acea:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    acee:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    acf2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    acf4:	9d07      	ldr	r5, [sp, #28]
    acf6:	642c      	str	r4, [r5, #64]	; 0x40
    acf8:	f8c5 e03c 	str.w	lr, [r5, #60]	; 0x3c
    acfc:	f8c5 c038 	str.w	ip, [r5, #56]	; 0x38
    ad00:	636b      	str	r3, [r5, #52]	; 0x34
    ad02:	8228      	strh	r0, [r5, #16]
    ad04:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    ad08:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    ad0c:	8268      	strh	r0, [r5, #18]
    ad0e:	f885 0046 	strb.w	r0, [r5, #70]	; 0x46
    ad12:	f105 0047 	add.w	r0, r5, #71	; 0x47
    ad16:	9903      	ldr	r1, [sp, #12]
    ad18:	9a02      	ldr	r2, [sp, #8]
    ad1a:	f010 ffe7 	bl	1bcec <__aeabi_memcpy>
    ad1e:	9907      	ldr	r1, [sp, #28]
    ad20:	f101 0214 	add.w	r2, r1, #20
    ad24:	f10d 0e10 	add.w	lr, sp, #16
    ad28:	f50e 5181 	add.w	r1, lr, #4128	; 0x1020
    ad2c:	2320      	movs	r3, #32
    ad2e:	9001      	str	r0, [sp, #4]
    ad30:	4610      	mov	r0, r2
    ad32:	461a      	mov	r2, r3
    ad34:	f010 ffda 	bl	1bcec <__aeabi_memcpy>
    ad38:	9905      	ldr	r1, [sp, #20]
    ad3a:	684a      	ldr	r2, [r1, #4]
    ad3c:	688b      	ldr	r3, [r1, #8]
    ad3e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    ad42:	f8d1 e010 	ldr.w	lr, [r1, #16]
    ad46:	9c07      	ldr	r4, [sp, #28]
    ad48:	6063      	str	r3, [r4, #4]
    ad4a:	6022      	str	r2, [r4, #0]
    ad4c:	f8c4 e00c 	str.w	lr, [r4, #12]
    ad50:	f8c4 c008 	str.w	ip, [r4, #8]
    ad54:	f241 0247 	movw	r2, #4167	; 0x1047
    ad58:	9b04      	ldr	r3, [sp, #16]
    ad5a:	54a3      	strb	r3, [r4, r2]
    ad5c:	f241 0248 	movw	r2, #4168	; 0x1048
    ad60:	eb04 0c02 	add.w	ip, r4, r2
    ad64:	f8d1 e014 	ldr.w	lr, [r1, #20]
    ad68:	f844 e002 	str.w	lr, [r4, r2]
    ad6c:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
    ad70:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    ad74:	f8ac 2004 	strh.w	r2, [ip, #4]
        }
    }
    ad78:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
    ad7c:	b002      	add	sp, #8
    ad7e:	bdb0      	pop	{r4, r5, r7, pc}

0000ad80 <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E>:
    fn push(&mut self, item: u16) {
        self.stack[self.sp as usize] = item;
        self.sp = self.sp.wrapping_add(1);
    }

    fn pop(&mut self) -> u16 {
    ad80:	b580      	push	{r7, lr}
    ad82:	b086      	sub	sp, #24
    ad84:	9004      	str	r0, [sp, #16]
        self.sp = self.sp.wrapping_sub(1);
    ad86:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    ad8a:	2201      	movs	r2, #1
    ad8c:	9003      	str	r0, [sp, #12]
    ad8e:	4608      	mov	r0, r1
    ad90:	4611      	mov	r1, r2
    ad92:	f004 f908 	bl	efa6 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h85ad829ef61f8d1fE>
    ad96:	9002      	str	r0, [sp, #8]
    ad98:	e7ff      	b.n	ad9a <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E+0x1a>
    ad9a:	9802      	ldr	r0, [sp, #8]
    ad9c:	9903      	ldr	r1, [sp, #12]
    ad9e:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
        let item = self.stack[self.sp as usize];
    ada2:	f891 2046 	ldrb.w	r2, [r1, #70]	; 0x46
    ada6:	4613      	mov	r3, r2
    ada8:	2a0f      	cmp	r2, #15
    adaa:	9301      	str	r3, [sp, #4]
    adac:	d80a      	bhi.n	adc4 <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E+0x44>
    adae:	e7ff      	b.n	adb0 <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E+0x30>
    adb0:	9803      	ldr	r0, [sp, #12]
    adb2:	9901      	ldr	r1, [sp, #4]
    adb4:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    adb8:	8a92      	ldrh	r2, [r2, #20]
    adba:	f8ad 2016 	strh.w	r2, [sp, #22]
        item
    }
    adbe:	4610      	mov	r0, r2
    adc0:	b006      	add	sp, #24
    adc2:	bd80      	pop	{r7, pc}
        let item = self.stack[self.sp as usize];
    adc4:	f24c 2068 	movw	r0, #49768	; 0xc268
    adc8:	f2c0 0001 	movt	r0, #1
    adcc:	2210      	movs	r2, #16
    adce:	9901      	ldr	r1, [sp, #4]
    add0:	f00a fc96 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    add4:	defe      	udf	#254	; 0xfe

0000add6 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E>:
    pub fn run(mut self, rom: &[u8]) {
    add6:	b580      	push	{r7, lr}
    add8:	b086      	sub	sp, #24
    adda:	9104      	str	r1, [sp, #16]
    addc:	9205      	str	r2, [sp, #20]
        self.setup();
    adde:	9003      	str	r0, [sp, #12]
    ade0:	9202      	str	r2, [sp, #8]
    ade2:	9101      	str	r1, [sp, #4]
    ade4:	f003 ff34 	bl	ec50 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E>
    ade8:	e7ff      	b.n	adea <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x14>
        self.load(rom);
    adea:	9803      	ldr	r0, [sp, #12]
    adec:	9901      	ldr	r1, [sp, #4]
    adee:	9a02      	ldr	r2, [sp, #8]
    adf0:	f003 fdde 	bl	e9b0 <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE>
    adf4:	e7ff      	b.n	adf6 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x20>
        while self.running {
    adf6:	e7ff      	b.n	adf8 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x22>
    adf8:	f241 0047 	movw	r0, #4167	; 0x1047
    adfc:	9903      	ldr	r1, [sp, #12]
    adfe:	5c08      	ldrb	r0, [r1, r0]
    ae00:	07c0      	lsls	r0, r0, #31
    ae02:	2800      	cmp	r0, #0
    ae04:	d101      	bne.n	ae0a <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x34>
    ae06:	e7ff      	b.n	ae08 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x32>
    }
    ae08:	e00c      	b.n	ae24 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x4e>
            self.sched();
    ae0a:	9803      	ldr	r0, [sp, #12]
    ae0c:	f003 fe9d 	bl	eb4a <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E>
    ae10:	e7ff      	b.n	ae12 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x3c>
            self.eval();
    ae12:	9803      	ldr	r0, [sp, #12]
    ae14:	f000 f808 	bl	ae28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE>
    ae18:	e7ff      	b.n	ae1a <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x44>
            self.next();
    ae1a:	9803      	ldr	r0, [sp, #12]
    ae1c:	f003 fe03 	bl	ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    ae20:	e7ff      	b.n	ae22 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x4c>
        while self.running {
    ae22:	e7e9      	b.n	adf8 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x22>
    }
    ae24:	b006      	add	sp, #24
    ae26:	bd80      	pop	{r7, pc}

0000ae28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE>:
        }

        return b' ';
    }

    fn eval(&mut self) {
    ae28:	b570      	push	{r4, r5, r6, lr}
    ae2a:	f5ad 6d6c 	sub.w	sp, sp, #3776	; 0xec0
    ae2e:	f8cd 0c70 	str.w	r0, [sp, #3184]	; 0xc70
        let h = self.mem[self.pc as usize] as u16;
    ae32:	8a41      	ldrh	r1, [r0, #18]
    ae34:	460a      	mov	r2, r1
    ae36:	2300      	movs	r3, #0
    ae38:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    ae3c:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
    ae40:	f8cd 248c 	str.w	r2, [sp, #1164]	; 0x48c
    ae44:	f043 82c0 	bne.w	e3c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35a0>
    ae48:	e7ff      	b.n	ae4a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22>
    ae4a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ae4e:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    ae52:	1842      	adds	r2, r0, r1
    ae54:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    ae58:	4613      	mov	r3, r2
    ae5a:	f8ad 2c76 	strh.w	r2, [sp, #3190]	; 0xc76
        let l = self.mem[(self.pc + 1) as usize] as u16;
    ae5e:	8a42      	ldrh	r2, [r0, #18]
    ae60:	3201      	adds	r2, #1
    ae62:	fa1f fc82 	uxth.w	ip, r2
    ae66:	4696      	mov	lr, r2
    ae68:	4594      	cmp	ip, r2
    ae6a:	f8cd 3488 	str.w	r3, [sp, #1160]	; 0x488
    ae6e:	f8cd e484 	str.w	lr, [sp, #1156]	; 0x484
    ae72:	f043 82b4 	bne.w	e3de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35b6>
    ae76:	e7ff      	b.n	ae78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x50>
    ae78:	f8dd 0484 	ldr.w	r0, [sp, #1156]	; 0x484
    ae7c:	b281      	uxth	r1, r0
    ae7e:	460a      	mov	r2, r1
    ae80:	2300      	movs	r3, #0
    ae82:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    ae86:	f8cd 2480 	str.w	r2, [sp, #1152]	; 0x480
    ae8a:	f043 82b4 	bne.w	e3f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35ce>
    ae8e:	e7ff      	b.n	ae90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x68>
    ae90:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ae94:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    ae98:	1842      	adds	r2, r0, r1
    ae9a:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    ae9e:	4613      	mov	r3, r2
    aea0:	f8ad 2c78 	strh.w	r2, [sp, #3192]	; 0xc78
        let inst = h << 8 | l;
    aea4:	f8dd 2488 	ldr.w	r2, [sp, #1160]	; 0x488
    aea8:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    aeac:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c
    aeb0:	f8cd c478 	str.w	ip, [sp, #1144]	; 0x478
    aeb4:	e7ff      	b.n	aeb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8e>
    aeb6:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478
    aeba:	f8dd 147c 	ldr.w	r1, [sp, #1148]	; 0x47c
    aebe:	ea40 0201 	orr.w	r2, r0, r1
    aec2:	f8ad 2496 	strh.w	r2, [sp, #1174]	; 0x496

        let nnn = inst & 0xfff;
    aec6:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    aeca:	f36f 321f 	bfc	r2, #12, #20
    aece:	4613      	mov	r3, r2
    aed0:	f8ad 2c7a 	strh.w	r2, [sp, #3194]	; 0xc7a
        let n = (inst & 0xf) as usize;
    aed4:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    aed8:	f002 020f 	and.w	r2, r2, #15
    aedc:	4694      	mov	ip, r2
    aede:	f8cd 2c7c 	str.w	r2, [sp, #3196]	; 0xc7c
        let x = ((inst >> 8) & 0xf) as usize;
    aee2:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    aee6:	f8cd 3474 	str.w	r3, [sp, #1140]	; 0x474
    aeea:	f8cd c470 	str.w	ip, [sp, #1136]	; 0x470
    aeee:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
    aef2:	e7ff      	b.n	aef4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcc>
    aef4:	f8dd 046c 	ldr.w	r0, [sp, #1132]	; 0x46c
    aef8:	f000 010f 	and.w	r1, r0, #15
    aefc:	460a      	mov	r2, r1
    aefe:	f8cd 1c80 	str.w	r1, [sp, #3200]	; 0xc80
        let y = ((inst >> 4) & 0xf) as usize;
    af02:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    af06:	0909      	lsrs	r1, r1, #4
    af08:	f8cd 2468 	str.w	r2, [sp, #1128]	; 0x468
    af0c:	f8cd 1464 	str.w	r1, [sp, #1124]	; 0x464
    af10:	e7ff      	b.n	af12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xea>
    af12:	f8dd 0464 	ldr.w	r0, [sp, #1124]	; 0x464
    af16:	f000 010f 	and.w	r1, r0, #15
    af1a:	460a      	mov	r2, r1
    af1c:	f8cd 1c84 	str.w	r1, [sp, #3204]	; 0xc84
        let kk = (inst & 0xff) as u8;
    af20:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    af24:	b2cb      	uxtb	r3, r1
    af26:	f88d 1c8b 	strb.w	r1, [sp, #3211]	; 0xc8b

        match (
            (inst >> 12) & 0xf,
    af2a:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    af2e:	0b09      	lsrs	r1, r1, #12
    af30:	f8cd 2460 	str.w	r2, [sp, #1120]	; 0x460
    af34:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c
    af38:	f8cd 1458 	str.w	r1, [sp, #1112]	; 0x458
    af3c:	e7ff      	b.n	af3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x116>
    af3e:	f8dd 0458 	ldr.w	r0, [sp, #1112]	; 0x458
    af42:	f000 010f 	and.w	r1, r0, #15
            (inst >> 8) & 0xf,
    af46:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    af4a:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
    af4e:	f8cd 2450 	str.w	r2, [sp, #1104]	; 0x450
    af52:	e7ff      	b.n	af54 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x12c>
    af54:	f8dd 0450 	ldr.w	r0, [sp, #1104]	; 0x450
    af58:	f000 010f 	and.w	r1, r0, #15
            (inst >> 4) & 0xf,
    af5c:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    af60:	0912      	lsrs	r2, r2, #4
    af62:	f8cd 144c 	str.w	r1, [sp, #1100]	; 0x44c
    af66:	f8cd 2448 	str.w	r2, [sp, #1096]	; 0x448
    af6a:	e7ff      	b.n	af6c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x144>
    af6c:	f8dd 0448 	ldr.w	r0, [sp, #1096]	; 0x448
    af70:	f000 010f 	and.w	r1, r0, #15
            (inst >> 0) & 0xf,
    af74:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    af78:	f8cd 1444 	str.w	r1, [sp, #1092]	; 0x444
    af7c:	f8cd 2440 	str.w	r2, [sp, #1088]	; 0x440
    af80:	e7ff      	b.n	af82 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15a>
    af82:	f8dd 0440 	ldr.w	r0, [sp, #1088]	; 0x440
    af86:	f000 010f 	and.w	r1, r0, #15
        match (
    af8a:	f8dd 2454 	ldr.w	r2, [sp, #1108]	; 0x454
    af8e:	f8ad 2498 	strh.w	r2, [sp, #1176]	; 0x498
    af92:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
    af96:	f8ad 349a 	strh.w	r3, [sp, #1178]	; 0x49a
    af9a:	f8dd c444 	ldr.w	ip, [sp, #1092]	; 0x444
    af9e:	f8ad c49c 	strh.w	ip, [sp, #1180]	; 0x49c
    afa2:	f8ad 149e 	strh.w	r1, [sp, #1182]	; 0x49e
        ) {
            (0, 0, 0xe, 0) => {
    afa6:	f8bd 1498 	ldrh.w	r1, [sp, #1176]	; 0x498
    afaa:	468e      	mov	lr, r1
    afac:	290f      	cmp	r1, #15
    afae:	f8cd e43c 	str.w	lr, [sp, #1084]	; 0x43c
    afb2:	d84f      	bhi.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    afb4:	f8dd 143c 	ldr.w	r1, [sp, #1084]	; 0x43c
    afb8:	e8df f011 	tbh	[pc, r1, lsl #1]
    afbc:	03060010 	.word	0x03060010
    afc0:	04320399 	.word	0x04320399
    afc4:	002c04d2 	.word	0x002c04d2
    afc8:	06b4061f 	.word	0x06b4061f
    afcc:	00750032 	.word	0x00750032
    afd0:	0ee40e59 	.word	0x0ee40e59
    afd4:	10260f85 	.word	0x10260f85
    afd8:	0095007b 	.word	0x0095007b
    afdc:	f8bd 049a 	ldrh.w	r0, [sp, #1178]	; 0x49a
    afe0:	2800      	cmp	r0, #0
    afe2:	f040 8261 	bne.w	b4a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x680>
    afe6:	e7ff      	b.n	afe8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c0>
    afe8:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    afec:	280e      	cmp	r0, #14
    afee:	f040 825b 	bne.w	b4a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x680>
    aff2:	e7ff      	b.n	aff4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1cc>
    aff4:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    aff8:	4601      	mov	r1, r0
    affa:	2800      	cmp	r0, #0
    affc:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438
    b000:	f000 80c0 	beq.w	b184 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35c>
    b004:	e7ff      	b.n	b006 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1de>
    b006:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
    b00a:	b281      	uxth	r1, r0
    b00c:	290e      	cmp	r1, #14
    b00e:	f000 81b6 	beq.w	b37e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x556>
    b012:	e249      	b.n	b4a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x680>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
                if self.v[x] != kk {
                    self.next();
                }
            }
            (5, _, _, 0) => {
    b014:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b018:	2800      	cmp	r0, #0
    b01a:	f000 8541 	beq.w	baa0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc78>
    b01e:	e019      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            }
            (7, _, _, _) => {
                trace!("[{:04x}] ADD Vx, kk", self.pc);
                self.v[x] = self.v[x].wrapping_add(kk);
            }
            (8, _, _, 0) => {
    b020:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b024:	4601      	mov	r1, r0
    b026:	280e      	cmp	r0, #14
    b028:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
    b02c:	d812      	bhi.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b02e:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
    b032:	e8df f011 	tbh	[pc, r1, lsl #1]
    b036:	071e      	.short	0x071e
    b038:	086707c0 	.word	0x086707c0
    b03c:	09b5090e 	.word	0x09b5090e
    b040:	0b3b0a77 	.word	0x0b3b0a77
    b044:	000f0bf0 	.word	0x000f0bf0
    b048:	000f000f 	.word	0x000f000f
    b04c:	000f000f 	.word	0x000f000f
    b050:	0cb4000f 	.word	0x0cb4000f
                let x = x as usize;
                for i in 0..(x + 1) {
                    self.v[i] = self.mem[self.i as usize + i];
                }
            }
            _ => panic!("[{:04x}] Invalid op: {:04x}", self.pc, inst), // Bad ops
    b054:	f64c 6078 	movw	r0, #52856	; 0xce78
    b058:	f2c0 0001 	movt	r0, #1
    b05c:	6801      	ldr	r1, [r0, #0]
    b05e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b062:	f100 0212 	add.w	r2, r0, #18
    b066:	f8cd 2c68 	str.w	r2, [sp, #3176]	; 0xc68
    b06a:	f20d 4296 	addw	r2, sp, #1174	; 0x496
    b06e:	f8cd 2c6c 	str.w	r2, [sp, #3180]	; 0xc6c
    b072:	f8dd 2c68 	ldr.w	r2, [sp, #3176]	; 0xc68
    b076:	f8cd 2d60 	str.w	r2, [sp, #3424]	; 0xd60
    b07a:	f8dd 3c6c 	ldr.w	r3, [sp, #3180]	; 0xc6c
    b07e:	f8cd 3d64 	str.w	r3, [sp, #3428]	; 0xd64
    b082:	f646 6cef 	movw	ip, #28399	; 0x6eef
    b086:	f2c0 0c01 	movt	ip, #1
    b08a:	4610      	mov	r0, r2
    b08c:	f8cd 1434 	str.w	r1, [sp, #1076]	; 0x434
    b090:	4661      	mov	r1, ip
    b092:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    b096:	f7ff fa80 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b09a:	f8cd 042c 	str.w	r0, [sp, #1068]	; 0x42c
    b09e:	f8cd 1428 	str.w	r1, [sp, #1064]	; 0x428
    b0a2:	f003 b94f 	b.w	e344 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x351c>
            (9, _, _, 0) => {
    b0a6:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b0aa:	2800      	cmp	r0, #0
    b0ac:	f001 8532 	beq.w	cb14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1cec>
    b0b0:	e7d0      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xe, _, 9, 0xe) => {
    b0b2:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    b0b6:	4601      	mov	r1, r0
    b0b8:	2809      	cmp	r0, #9
    b0ba:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420
    b0be:	d006      	beq.n	b0ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a6>
    b0c0:	e7ff      	b.n	b0c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29a>
    b0c2:	f8dd 0420 	ldr.w	r0, [sp, #1056]	; 0x420
    b0c6:	b281      	uxth	r1, r0
    b0c8:	290a      	cmp	r1, #10
    b0ca:	d006      	beq.n	b0da <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b2>
    b0cc:	e7c2      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b0ce:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b0d2:	280e      	cmp	r0, #14
    b0d4:	f002 815b 	beq.w	d38e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2566>
    b0d8:	e7bc      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xe, _, 0xa, 0x1) => {
    b0da:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b0de:	2801      	cmp	r0, #1
    b0e0:	f002 81fe 	beq.w	d4e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26b8>
    b0e4:	e7b6      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 0, 7) => {
    b0e6:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    b0ea:	4601      	mov	r1, r0
    b0ec:	2806      	cmp	r0, #6
    b0ee:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c
    b0f2:	d8af      	bhi.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b0f4:	f8dd 141c 	ldr.w	r1, [sp, #1052]	; 0x41c
    b0f8:	e8df f001 	tbb	[pc, r1]
    b0fc:	322c1505 	.word	0x322c1505
    b100:	003e3804 	.word	0x003e3804
    b104:	e7a6      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b106:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b10a:	4601      	mov	r1, r0
    b10c:	2807      	cmp	r0, #7
    b10e:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
    b112:	f002 828e 	beq.w	d632 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x280a>
    b116:	e7ff      	b.n	b118 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f0>
    b118:	f8dd 0418 	ldr.w	r0, [sp, #1048]	; 0x418
    b11c:	b281      	uxth	r1, r0
    b11e:	290a      	cmp	r1, #10
    b120:	f002 8320 	beq.w	d764 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x293c>
    b124:	e796      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 1, 5) => {
    b126:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b12a:	4601      	mov	r1, r0
    b12c:	2805      	cmp	r0, #5
    b12e:	f8cd 1414 	str.w	r1, [sp, #1044]	; 0x414
    b132:	f002 83b1 	beq.w	d898 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a70>
    b136:	e7ff      	b.n	b138 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x310>
    b138:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    b13c:	b281      	uxth	r1, r0
    b13e:	2908      	cmp	r1, #8
    b140:	f002 843f 	beq.w	d9c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b9a>
    b144:	e7ff      	b.n	b146 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31e>
    b146:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    b14a:	b281      	uxth	r1, r0
    b14c:	290e      	cmp	r1, #14
    b14e:	f002 84cd 	beq.w	daec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2cc4>
    b152:	e77f      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 2, 9) => {
    b154:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b158:	2809      	cmp	r0, #9
    b15a:	f002 856b 	beq.w	dc34 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e0c>
    b15e:	e779      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 3, 3) => {
    b160:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b164:	2803      	cmp	r0, #3
    b166:	f002 8616 	beq.w	dd96 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f6e>
    b16a:	e773      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 5, 5) => {
    b16c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b170:	2805      	cmp	r0, #5
    b172:	f002 871f 	beq.w	dfb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x318c>
    b176:	e76d      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 6, 5) => {
    b178:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b17c:	2805      	cmp	r0, #5
    b17e:	f002 87fc 	beq.w	e17a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3352>
    b182:	e767      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b184:	2005      	movs	r0, #5
    b186:	f8cd 04a0 	str.w	r0, [sp, #1184]	; 0x4a0
    b18a:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    b18e:	f2c0 0001 	movt	r0, #1
    b192:	6801      	ldr	r1, [r0, #0]
    b194:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    b198:	f006 f846 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b19c:	f8cd 0410 	str.w	r0, [sp, #1040]	; 0x410
    b1a0:	e01f      	b.n	b1e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ba>
    b1a2:	2001      	movs	r0, #1
    b1a4:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    b1a8:	e015      	b.n	b1d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ae>
    b1aa:	2000      	movs	r0, #0
    b1ac:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    b1b0:	e011      	b.n	b1d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ae>
    b1b2:	2000      	movs	r0, #0
/// [`debug!`]: macro.debug.html
/// [`trace!`]: macro.trace.html
/// [`set_max_level`]: fn.set_max_level.html
#[inline(always)]
pub fn max_level() -> LevelFilter {
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
    b1b4:	f88d 0dab 	strb.w	r0, [sp, #3499]	; 0xdab
    b1b8:	f89d 1dab 	ldrb.w	r1, [sp, #3499]	; 0xdab
    b1bc:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b1c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b1c4:	f006 f8a5 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b1c8:	f8cd 0dac 	str.w	r0, [sp, #3500]	; 0xdac
    b1cc:	f8dd 0dac 	ldr.w	r0, [sp, #3500]	; 0xdac
    b1d0:	f8cd 04a8 	str.w	r0, [sp, #1192]	; 0x4a8
    b1d4:	e00b      	b.n	b1ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3c6>
    b1d6:	f89d 04a7 	ldrb.w	r0, [sp, #1191]	; 0x4a7
    b1da:	07c0      	lsls	r0, r0, #31
    b1dc:	2800      	cmp	r0, #0
    b1de:	d115      	bne.n	b20c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3e4>
    b1e0:	e05e      	b.n	b2a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x478>
    b1e2:	f8dd 0410 	ldr.w	r0, [sp, #1040]	; 0x410
    b1e6:	07c1      	lsls	r1, r0, #31
    b1e8:	2900      	cmp	r1, #0
    b1ea:	d1e2      	bne.n	b1b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38a>
    b1ec:	e7dd      	b.n	b1aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x382>
    b1ee:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    b1f2:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
    b1f6:	f006 f817 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b1fa:	f8cd 040c 	str.w	r0, [sp, #1036]	; 0x40c
    b1fe:	e7ff      	b.n	b200 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3d8>
    b200:	f8dd 040c 	ldr.w	r0, [sp, #1036]	; 0x40c
    b204:	07c1      	lsls	r1, r0, #31
    b206:	2900      	cmp	r1, #0
    b208:	d1cb      	bne.n	b1a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37a>
    b20a:	e7ce      	b.n	b1aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x382>
                trace!("[{:04x}] CLS", self.pc);
    b20c:	f24d 1018 	movw	r0, #53528	; 0xd118
    b210:	f2c0 0001 	movt	r0, #1
    b214:	6801      	ldr	r1, [r0, #0]
    b216:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b21a:	f100 0212 	add.w	r2, r0, #18
    b21e:	f8cd 24cc 	str.w	r2, [sp, #1228]	; 0x4cc
    b222:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
    b226:	f8cd 2d88 	str.w	r2, [sp, #3464]	; 0xd88
    b22a:	f646 63ef 	movw	r3, #28399	; 0x6eef
    b22e:	f2c0 0301 	movt	r3, #1
    b232:	4610      	mov	r0, r2
    b234:	f8cd 1408 	str.w	r1, [sp, #1032]	; 0x408
    b238:	4619      	mov	r1, r3
    b23a:	f7ff f9ae 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b23e:	f8cd 0404 	str.w	r0, [sp, #1028]	; 0x404
    b242:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400
    b246:	e7ff      	b.n	b248 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x420>
    b248:	f8dd 0404 	ldr.w	r0, [sp, #1028]	; 0x404
    b24c:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
    b250:	f8dd 1400 	ldr.w	r1, [sp, #1024]	; 0x400
    b254:	f8cd 14c8 	str.w	r1, [sp, #1224]	; 0x4c8
    b258:	f24c 3218 	movw	r2, #49944	; 0xc318
    b25c:	f2c0 0201 	movt	r2, #1
    b260:	6812      	ldr	r2, [r2, #0]
    b262:	466b      	mov	r3, sp
    b264:	f04f 0c01 	mov.w	ip, #1
    b268:	f8c3 c008 	str.w	ip, [r3, #8]
    b26c:	605a      	str	r2, [r3, #4]
    b26e:	f8c3 c000 	str.w	ip, [r3]
    b272:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    b276:	2202      	movs	r2, #2
    b278:	f20d 43c4 	addw	r3, sp, #1220	; 0x4c4
    b27c:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    b280:	f006 f80e 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b284:	e7ff      	b.n	b286 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x45e>
    b286:	f8dd 14a0 	ldr.w	r1, [sp, #1184]	; 0x4a0
    b28a:	f24d 1038 	movw	r0, #53560	; 0xd138
    b28e:	f2c0 0001 	movt	r0, #1
    b292:	6802      	ldr	r2, [r0, #0]
    b294:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    b298:	f006 ffb8 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b29c:	e7ff      	b.n	b29e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x476>
    b29e:	e7ff      	b.n	b2a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x478>
    b2a0:	f241 0048 	movw	r0, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    b2a4:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    b2a8:	4408      	add	r0, r1
    b2aa:	f004 fa8f 	bl	f7cc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbb5c150f8fc596c2E>
    b2ae:	90ff      	str	r0, [sp, #1020]	; 0x3fc
    b2b0:	91fe      	str	r1, [sp, #1016]	; 0x3f8
    b2b2:	e7ff      	b.n	b2b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x48c>
    b2b4:	98ff      	ldr	r0, [sp, #1020]	; 0x3fc
    b2b6:	f8cd 0d8c 	str.w	r0, [sp, #3468]	; 0xd8c
    b2ba:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
    b2bc:	f8cd 14d0 	str.w	r1, [sp, #1232]	; 0x4d0
    b2c0:	2200      	movs	r2, #0
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    b2c2:	f8cd 2538 	str.w	r2, [sp, #1336]	; 0x538
    b2c6:	f8cd 053c 	str.w	r0, [sp, #1340]	; 0x53c
    b2ca:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
    b2ce:	f8cd 2540 	str.w	r2, [sp, #1344]	; 0x540
    b2d2:	f8dd 1538 	ldr.w	r1, [sp, #1336]	; 0x538
    b2d6:	f8dd 253c 	ldr.w	r2, [sp, #1340]	; 0x53c
    b2da:	f8dd 3540 	ldr.w	r3, [sp, #1344]	; 0x540
    b2de:	f20d 502c 	addw	r0, sp, #1324	; 0x52c
    b2e2:	f003 fde3 	bl	eeac <_ZN4core4iter6traits8iterator8Iterator3map17h704adbbd229a4ae6E>
    b2e6:	e7ff      	b.n	b2e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4c0>
    b2e8:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
    b2ec:	f20d 512c 	addw	r1, sp, #1324	; 0x52c
    b2f0:	f003 ff3f 	bl	f172 <_ZN4core4iter6traits8iterator8Iterator7flatten17hb125ae9dc567cfd9E>
    b2f4:	e7ff      	b.n	b2f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4ce>
    b2f6:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    b2fa:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
    b2fe:	f006 f916 	bl	1152e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he2e30225e051e80dE>
    b302:	e7ff      	b.n	b304 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4dc>
    b304:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    b308:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    b30c:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    b310:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    b314:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    b318:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    b31c:	e7ff      	b.n	b31e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4f6>
    b31e:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    b322:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    b326:	f006 f82f 	bl	11388 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4a745471c1d57141E>
    b32a:	e7ff      	b.n	b32c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x504>
    b32c:	f8dd 0570 	ldr.w	r0, [sp, #1392]	; 0x570
    b330:	2800      	cmp	r0, #0
    b332:	d001      	beq.n	b338 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x510>
    b334:	e7ff      	b.n	b336 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x50e>
    b336:	e002      	b.n	b33e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x516>
        match (
    b338:	f003 b843 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    b33c:	defe      	udf	#254	; 0xfe
    b33e:	f8dd 0574 	ldr.w	r0, [sp, #1396]	; 0x574
    b342:	f8dd 1578 	ldr.w	r1, [sp, #1400]	; 0x578
    b346:	f8cd 0d90 	str.w	r0, [sp, #3472]	; 0xd90
    b34a:	f8cd 1d94 	str.w	r1, [sp, #3476]	; 0xd94
    b34e:	f8cd 0d98 	str.w	r0, [sp, #3480]	; 0xd98
    b352:	f8cd 1d9c 	str.w	r1, [sp, #3484]	; 0xd9c
    b356:	f8cd 0da0 	str.w	r0, [sp, #3488]	; 0xda0
    b35a:	f8cd 1da4 	str.w	r1, [sp, #3492]	; 0xda4
    b35e:	f241 0248 	movw	r2, #4168	; 0x1048
                    self.hw.vram_set(x, y, false);
    b362:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    b366:	441a      	add	r2, r3
    b368:	2300      	movs	r3, #0
    b36a:	90fd      	str	r0, [sp, #1012]	; 0x3f4
    b36c:	4610      	mov	r0, r2
    b36e:	9afd      	ldr	r2, [sp, #1012]	; 0x3f4
    b370:	91fc      	str	r1, [sp, #1008]	; 0x3f0
    b372:	4611      	mov	r1, r2
    b374:	9afc      	ldr	r2, [sp, #1008]	; 0x3f0
    b376:	f004 f86c 	bl	f452 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE>
    b37a:	e7ff      	b.n	b37c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x554>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    b37c:	e7cf      	b.n	b31e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4f6>
    b37e:	2005      	movs	r0, #5
    b380:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
    b384:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    b388:	f2c0 0001 	movt	r0, #1
    b38c:	6801      	ldr	r1, [r0, #0]
    b38e:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    b392:	f005 ff49 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b396:	90fb      	str	r0, [sp, #1004]	; 0x3ec
    b398:	e01f      	b.n	b3da <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5b2>
    b39a:	2001      	movs	r0, #1
    b39c:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    b3a0:	e015      	b.n	b3ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5a6>
    b3a2:	2000      	movs	r0, #0
    b3a4:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    b3a8:	e011      	b.n	b3ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5a6>
    b3aa:	2000      	movs	r0, #0
    b3ac:	f88d 0db3 	strb.w	r0, [sp, #3507]	; 0xdb3
    b3b0:	f89d 1db3 	ldrb.w	r1, [sp, #3507]	; 0xdb3
    b3b4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b3b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b3bc:	f005 ffa9 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b3c0:	f8cd 0db4 	str.w	r0, [sp, #3508]	; 0xdb4
    b3c4:	f8dd 0db4 	ldr.w	r0, [sp, #3508]	; 0xdb4
    b3c8:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
    b3cc:	e00a      	b.n	b3e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5bc>
    b3ce:	f89d 0583 	ldrb.w	r0, [sp, #1411]	; 0x583
    b3d2:	07c0      	lsls	r0, r0, #31
    b3d4:	2800      	cmp	r0, #0
    b3d6:	d112      	bne.n	b3fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5d6>
    b3d8:	e055      	b.n	b486 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x65e>
    b3da:	98fb      	ldr	r0, [sp, #1004]	; 0x3ec
    b3dc:	07c1      	lsls	r1, r0, #31
    b3de:	2900      	cmp	r1, #0
    b3e0:	d1e3      	bne.n	b3aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x582>
    b3e2:	e7de      	b.n	b3a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x57a>
    b3e4:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    b3e8:	f20d 5184 	addw	r1, sp, #1412	; 0x584
    b3ec:	f005 ff1c 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b3f0:	90fa      	str	r0, [sp, #1000]	; 0x3e8
    b3f2:	e7ff      	b.n	b3f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5cc>
    b3f4:	98fa      	ldr	r0, [sp, #1000]	; 0x3e8
    b3f6:	07c1      	lsls	r1, r0, #31
    b3f8:	2900      	cmp	r1, #0
    b3fa:	d1ce      	bne.n	b39a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x572>
    b3fc:	e7d1      	b.n	b3a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x57a>
                trace!("[{:04x}] RET", self.pc);
    b3fe:	f24d 00dc 	movw	r0, #53468	; 0xd0dc
    b402:	f2c0 0001 	movt	r0, #1
    b406:	6801      	ldr	r1, [r0, #0]
    b408:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b40c:	f100 0212 	add.w	r2, r0, #18
    b410:	f8cd 25a8 	str.w	r2, [sp, #1448]	; 0x5a8
    b414:	f8dd 25a8 	ldr.w	r2, [sp, #1448]	; 0x5a8
    b418:	f8cd 2d80 	str.w	r2, [sp, #3456]	; 0xd80
    b41c:	f646 63ef 	movw	r3, #28399	; 0x6eef
    b420:	f2c0 0301 	movt	r3, #1
    b424:	4610      	mov	r0, r2
    b426:	91f9      	str	r1, [sp, #996]	; 0x3e4
    b428:	4619      	mov	r1, r3
    b42a:	f7ff f8b6 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b42e:	90f8      	str	r0, [sp, #992]	; 0x3e0
    b430:	91f7      	str	r1, [sp, #988]	; 0x3dc
    b432:	e7ff      	b.n	b434 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x60c>
    b434:	98f8      	ldr	r0, [sp, #992]	; 0x3e0
    b436:	f8cd 05a0 	str.w	r0, [sp, #1440]	; 0x5a0
    b43a:	99f7      	ldr	r1, [sp, #988]	; 0x3dc
    b43c:	f8cd 15a4 	str.w	r1, [sp, #1444]	; 0x5a4
    b440:	f24c 3218 	movw	r2, #49944	; 0xc318
    b444:	f2c0 0201 	movt	r2, #1
    b448:	6812      	ldr	r2, [r2, #0]
    b44a:	466b      	mov	r3, sp
    b44c:	f04f 0c01 	mov.w	ip, #1
    b450:	f8c3 c008 	str.w	ip, [r3, #8]
    b454:	605a      	str	r2, [r3, #4]
    b456:	f8c3 c000 	str.w	ip, [r3]
    b45a:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    b45e:	2202      	movs	r2, #2
    b460:	f50d 63b4 	add.w	r3, sp, #1440	; 0x5a0
    b464:	99f9      	ldr	r1, [sp, #996]	; 0x3e4
    b466:	f005 ff1b 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b46a:	e7ff      	b.n	b46c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x644>
    b46c:	f8dd 157c 	ldr.w	r1, [sp, #1404]	; 0x57c
    b470:	f24d 00fc 	movw	r0, #53500	; 0xd0fc
    b474:	f2c0 0001 	movt	r0, #1
    b478:	6802      	ldr	r2, [r0, #0]
    b47a:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    b47e:	f006 fec5 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b482:	e7ff      	b.n	b484 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x65c>
    b484:	e7ff      	b.n	b486 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x65e>
                let addr = self.pop();
    b486:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b48a:	f7ff fc79 	bl	ad80 <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E>
    b48e:	4601      	mov	r1, r0
    b490:	f8ad 0d86 	strh.w	r0, [sp, #3462]	; 0xd86
    b494:	91f6      	str	r1, [sp, #984]	; 0x3d8
    b496:	e7ff      	b.n	b498 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x670>
                self.jump(addr);
    b498:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b49c:	99f6      	ldr	r1, [sp, #984]	; 0x3d8
    b49e:	f003 fa7f 	bl	e9a0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    b4a2:	e7ff      	b.n	b4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x67c>
        match (
    b4a4:	f002 bf8d 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    b4a8:	2005      	movs	r0, #5
    b4aa:	f8cd 05ac 	str.w	r0, [sp, #1452]	; 0x5ac
    b4ae:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    b4b2:	f2c0 0001 	movt	r0, #1
    b4b6:	6801      	ldr	r1, [r0, #0]
    b4b8:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    b4bc:	f005 feb4 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b4c0:	90f5      	str	r0, [sp, #980]	; 0x3d4
    b4c2:	e01f      	b.n	b504 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6dc>
    b4c4:	2001      	movs	r0, #1
    b4c6:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    b4ca:	e015      	b.n	b4f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6d0>
    b4cc:	2000      	movs	r0, #0
    b4ce:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    b4d2:	e011      	b.n	b4f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6d0>
    b4d4:	2000      	movs	r0, #0
    b4d6:	f88d 0dbb 	strb.w	r0, [sp, #3515]	; 0xdbb
    b4da:	f89d 1dbb 	ldrb.w	r1, [sp, #3515]	; 0xdbb
    b4de:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b4e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b4e6:	f005 ff14 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b4ea:	f8cd 0dbc 	str.w	r0, [sp, #3516]	; 0xdbc
    b4ee:	f8dd 0dbc 	ldr.w	r0, [sp, #3516]	; 0xdbc
    b4f2:	f8cd 05b4 	str.w	r0, [sp, #1460]	; 0x5b4
    b4f6:	e00a      	b.n	b50e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6e6>
    b4f8:	f89d 05b3 	ldrb.w	r0, [sp, #1459]	; 0x5b3
    b4fc:	07c0      	lsls	r0, r0, #31
    b4fe:	2800      	cmp	r0, #0
    b500:	d112      	bne.n	b528 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x700>
    b502:	e055      	b.n	b5b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x788>
    b504:	98f5      	ldr	r0, [sp, #980]	; 0x3d4
    b506:	07c1      	lsls	r1, r0, #31
    b508:	2900      	cmp	r1, #0
    b50a:	d1e3      	bne.n	b4d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6ac>
    b50c:	e7de      	b.n	b4cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6a4>
    b50e:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    b512:	f20d 51b4 	addw	r1, sp, #1460	; 0x5b4
    b516:	f005 fe87 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b51a:	90f4      	str	r0, [sp, #976]	; 0x3d0
    b51c:	e7ff      	b.n	b51e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6f6>
    b51e:	98f4      	ldr	r0, [sp, #976]	; 0x3d0
    b520:	07c1      	lsls	r1, r0, #31
    b522:	2900      	cmp	r1, #0
    b524:	d1ce      	bne.n	b4c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x69c>
    b526:	e7d1      	b.n	b4cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6a4>
                trace!("[{:04x}] SYS nnn", self.pc);
    b528:	f24d 0080 	movw	r0, #53376	; 0xd080
    b52c:	f2c0 0001 	movt	r0, #1
    b530:	6801      	ldr	r1, [r0, #0]
    b532:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b536:	f100 0212 	add.w	r2, r0, #18
    b53a:	f8cd 25d8 	str.w	r2, [sp, #1496]	; 0x5d8
    b53e:	f8dd 25d8 	ldr.w	r2, [sp, #1496]	; 0x5d8
    b542:	f8cd 2d7c 	str.w	r2, [sp, #3452]	; 0xd7c
    b546:	f646 63ef 	movw	r3, #28399	; 0x6eef
    b54a:	f2c0 0301 	movt	r3, #1
    b54e:	4610      	mov	r0, r2
    b550:	91f3      	str	r1, [sp, #972]	; 0x3cc
    b552:	4619      	mov	r1, r3
    b554:	f7ff f821 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b558:	90f2      	str	r0, [sp, #968]	; 0x3c8
    b55a:	91f1      	str	r1, [sp, #964]	; 0x3c4
    b55c:	e7ff      	b.n	b55e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x736>
    b55e:	98f2      	ldr	r0, [sp, #968]	; 0x3c8
    b560:	f8cd 05d0 	str.w	r0, [sp, #1488]	; 0x5d0
    b564:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
    b566:	f8cd 15d4 	str.w	r1, [sp, #1492]	; 0x5d4
    b56a:	f24c 3218 	movw	r2, #49944	; 0xc318
    b56e:	f2c0 0201 	movt	r2, #1
    b572:	6812      	ldr	r2, [r2, #0]
    b574:	466b      	mov	r3, sp
    b576:	f04f 0c01 	mov.w	ip, #1
    b57a:	f8c3 c008 	str.w	ip, [r3, #8]
    b57e:	605a      	str	r2, [r3, #4]
    b580:	f8c3 c000 	str.w	ip, [r3]
    b584:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    b588:	2202      	movs	r2, #2
    b58a:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
    b58e:	99f3      	ldr	r1, [sp, #972]	; 0x3cc
    b590:	f005 fe86 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b594:	e7ff      	b.n	b596 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x76e>
    b596:	f8dd 15ac 	ldr.w	r1, [sp, #1452]	; 0x5ac
    b59a:	f24d 00a0 	movw	r0, #53408	; 0xd0a0
    b59e:	f2c0 0001 	movt	r0, #1
    b5a2:	6802      	ldr	r2, [r0, #0]
    b5a4:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    b5a8:	f006 fe30 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b5ac:	e7ff      	b.n	b5ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x786>
    b5ae:	e7ff      	b.n	b5b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x788>
    b5b0:	f24d 00a4 	movw	r0, #53412	; 0xd0a4
    b5b4:	f2c0 0001 	movt	r0, #1
    b5b8:	f24d 02b4 	movw	r2, #53428	; 0xd0b4
    b5bc:	f2c0 0201 	movt	r2, #1
    b5c0:	210f      	movs	r1, #15
    b5c2:	f00a f887 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b5c6:	defe      	udf	#254	; 0xfe
    b5c8:	2005      	movs	r0, #5
    b5ca:	f8cd 05dc 	str.w	r0, [sp, #1500]	; 0x5dc
    b5ce:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    b5d2:	f2c0 0001 	movt	r0, #1
    b5d6:	6801      	ldr	r1, [r0, #0]
    b5d8:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    b5dc:	f005 fe24 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b5e0:	90f0      	str	r0, [sp, #960]	; 0x3c0
    b5e2:	e01f      	b.n	b624 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7fc>
    b5e4:	2001      	movs	r0, #1
    b5e6:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    b5ea:	e015      	b.n	b618 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7f0>
    b5ec:	2000      	movs	r0, #0
    b5ee:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    b5f2:	e011      	b.n	b618 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7f0>
    b5f4:	2000      	movs	r0, #0
    b5f6:	f88d 0dc3 	strb.w	r0, [sp, #3523]	; 0xdc3
    b5fa:	f89d 1dc3 	ldrb.w	r1, [sp, #3523]	; 0xdc3
    b5fe:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b602:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b606:	f005 fe84 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b60a:	f8cd 0dc4 	str.w	r0, [sp, #3524]	; 0xdc4
    b60e:	f8dd 0dc4 	ldr.w	r0, [sp, #3524]	; 0xdc4
    b612:	f8cd 05e4 	str.w	r0, [sp, #1508]	; 0x5e4
    b616:	e00a      	b.n	b62e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x806>
    b618:	f89d 05e3 	ldrb.w	r0, [sp, #1507]	; 0x5e3
    b61c:	07c0      	lsls	r0, r0, #31
    b61e:	2800      	cmp	r0, #0
    b620:	d112      	bne.n	b648 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x820>
    b622:	e055      	b.n	b6d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8a8>
    b624:	98f0      	ldr	r0, [sp, #960]	; 0x3c0
    b626:	07c1      	lsls	r1, r0, #31
    b628:	2900      	cmp	r1, #0
    b62a:	d1e3      	bne.n	b5f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7cc>
    b62c:	e7de      	b.n	b5ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7c4>
    b62e:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    b632:	f20d 51e4 	addw	r1, sp, #1508	; 0x5e4
    b636:	f005 fdf7 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b63a:	90ef      	str	r0, [sp, #956]	; 0x3bc
    b63c:	e7ff      	b.n	b63e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x816>
    b63e:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
    b640:	07c1      	lsls	r1, r0, #31
    b642:	2900      	cmp	r1, #0
    b644:	d1ce      	bne.n	b5e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7bc>
    b646:	e7d1      	b.n	b5ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7c4>
                trace!("[{:04x}] JP nnn", self.pc);
    b648:	f24d 0040 	movw	r0, #53312	; 0xd040
    b64c:	f2c0 0001 	movt	r0, #1
    b650:	6801      	ldr	r1, [r0, #0]
    b652:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b656:	f100 0212 	add.w	r2, r0, #18
    b65a:	f8cd 2608 	str.w	r2, [sp, #1544]	; 0x608
    b65e:	f8dd 2608 	ldr.w	r2, [sp, #1544]	; 0x608
    b662:	f8cd 2d78 	str.w	r2, [sp, #3448]	; 0xd78
    b666:	f646 63ef 	movw	r3, #28399	; 0x6eef
    b66a:	f2c0 0301 	movt	r3, #1
    b66e:	4610      	mov	r0, r2
    b670:	91ee      	str	r1, [sp, #952]	; 0x3b8
    b672:	4619      	mov	r1, r3
    b674:	f7fe ff91 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b678:	90ed      	str	r0, [sp, #948]	; 0x3b4
    b67a:	91ec      	str	r1, [sp, #944]	; 0x3b0
    b67c:	e7ff      	b.n	b67e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x856>
    b67e:	98ed      	ldr	r0, [sp, #948]	; 0x3b4
    b680:	f8cd 0600 	str.w	r0, [sp, #1536]	; 0x600
    b684:	99ec      	ldr	r1, [sp, #944]	; 0x3b0
    b686:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
    b68a:	f24c 3218 	movw	r2, #49944	; 0xc318
    b68e:	f2c0 0201 	movt	r2, #1
    b692:	6812      	ldr	r2, [r2, #0]
    b694:	466b      	mov	r3, sp
    b696:	f04f 0c01 	mov.w	ip, #1
    b69a:	f8c3 c008 	str.w	ip, [r3, #8]
    b69e:	605a      	str	r2, [r3, #4]
    b6a0:	f8c3 c000 	str.w	ip, [r3]
    b6a4:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    b6a8:	2202      	movs	r2, #2
    b6aa:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
    b6ae:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
    b6b0:	f005 fdf6 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b6b4:	e7ff      	b.n	b6b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x88e>
    b6b6:	f8dd 15dc 	ldr.w	r1, [sp, #1500]	; 0x5dc
    b6ba:	f24d 0060 	movw	r0, #53344	; 0xd060
    b6be:	f2c0 0001 	movt	r0, #1
    b6c2:	6802      	ldr	r2, [r0, #0]
    b6c4:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    b6c8:	f006 fda0 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b6cc:	e7ff      	b.n	b6ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8a6>
    b6ce:	e7ff      	b.n	b6d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8a8>
    b6d0:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    b6d2:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    b6d6:	f003 fcdf 	bl	f098 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E>
    b6da:	90eb      	str	r0, [sp, #940]	; 0x3ac
    b6dc:	e7ff      	b.n	b6de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8b6>
    b6de:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b6e2:	99eb      	ldr	r1, [sp, #940]	; 0x3ac
    b6e4:	f003 f95c 	bl	e9a0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    b6e8:	e7ff      	b.n	b6ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8c2>
        match (
    b6ea:	f002 be6a 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    b6ee:	2005      	movs	r0, #5
    b6f0:	f8cd 060c 	str.w	r0, [sp, #1548]	; 0x60c
    b6f4:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    b6f8:	f2c0 0001 	movt	r0, #1
    b6fc:	6801      	ldr	r1, [r0, #0]
    b6fe:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    b702:	f005 fd91 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b706:	90ea      	str	r0, [sp, #936]	; 0x3a8
    b708:	e01f      	b.n	b74a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x922>
    b70a:	2001      	movs	r0, #1
    b70c:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    b710:	e015      	b.n	b73e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x916>
    b712:	2000      	movs	r0, #0
    b714:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    b718:	e011      	b.n	b73e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x916>
    b71a:	2000      	movs	r0, #0
    b71c:	f88d 0dcb 	strb.w	r0, [sp, #3531]	; 0xdcb
    b720:	f89d 1dcb 	ldrb.w	r1, [sp, #3531]	; 0xdcb
    b724:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b728:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b72c:	f005 fdf1 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b730:	f8cd 0dcc 	str.w	r0, [sp, #3532]	; 0xdcc
    b734:	f8dd 0dcc 	ldr.w	r0, [sp, #3532]	; 0xdcc
    b738:	f8cd 0614 	str.w	r0, [sp, #1556]	; 0x614
    b73c:	e00a      	b.n	b754 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x92c>
    b73e:	f89d 0613 	ldrb.w	r0, [sp, #1555]	; 0x613
    b742:	07c0      	lsls	r0, r0, #31
    b744:	2800      	cmp	r0, #0
    b746:	d112      	bne.n	b76e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x946>
    b748:	e055      	b.n	b7f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9ce>
    b74a:	98ea      	ldr	r0, [sp, #936]	; 0x3a8
    b74c:	07c1      	lsls	r1, r0, #31
    b74e:	2900      	cmp	r1, #0
    b750:	d1e3      	bne.n	b71a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8f2>
    b752:	e7de      	b.n	b712 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8ea>
    b754:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    b758:	f20d 6114 	addw	r1, sp, #1556	; 0x614
    b75c:	f005 fd64 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b760:	90e9      	str	r0, [sp, #932]	; 0x3a4
    b762:	e7ff      	b.n	b764 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x93c>
    b764:	98e9      	ldr	r0, [sp, #932]	; 0x3a4
    b766:	07c1      	lsls	r1, r0, #31
    b768:	2900      	cmp	r1, #0
    b76a:	d1ce      	bne.n	b70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8e2>
    b76c:	e7d1      	b.n	b712 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8ea>
                trace!("[{:04x}] CALL nnn", self.pc);
    b76e:	f24d 000c 	movw	r0, #53260	; 0xd00c
    b772:	f2c0 0001 	movt	r0, #1
    b776:	6801      	ldr	r1, [r0, #0]
    b778:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b77c:	f100 0212 	add.w	r2, r0, #18
    b780:	f8cd 2638 	str.w	r2, [sp, #1592]	; 0x638
    b784:	f8dd 2638 	ldr.w	r2, [sp, #1592]	; 0x638
    b788:	f8cd 2d74 	str.w	r2, [sp, #3444]	; 0xd74
    b78c:	f646 63ef 	movw	r3, #28399	; 0x6eef
    b790:	f2c0 0301 	movt	r3, #1
    b794:	4610      	mov	r0, r2
    b796:	91e8      	str	r1, [sp, #928]	; 0x3a0
    b798:	4619      	mov	r1, r3
    b79a:	f7fe fefe 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b79e:	90e7      	str	r0, [sp, #924]	; 0x39c
    b7a0:	91e6      	str	r1, [sp, #920]	; 0x398
    b7a2:	e7ff      	b.n	b7a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x97c>
    b7a4:	98e7      	ldr	r0, [sp, #924]	; 0x39c
    b7a6:	f8cd 0630 	str.w	r0, [sp, #1584]	; 0x630
    b7aa:	99e6      	ldr	r1, [sp, #920]	; 0x398
    b7ac:	f8cd 1634 	str.w	r1, [sp, #1588]	; 0x634
    b7b0:	f24c 3218 	movw	r2, #49944	; 0xc318
    b7b4:	f2c0 0201 	movt	r2, #1
    b7b8:	6812      	ldr	r2, [r2, #0]
    b7ba:	466b      	mov	r3, sp
    b7bc:	f04f 0c01 	mov.w	ip, #1
    b7c0:	f8c3 c008 	str.w	ip, [r3, #8]
    b7c4:	605a      	str	r2, [r3, #4]
    b7c6:	f8c3 c000 	str.w	ip, [r3]
    b7ca:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    b7ce:	2202      	movs	r2, #2
    b7d0:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
    b7d4:	99e8      	ldr	r1, [sp, #928]	; 0x3a0
    b7d6:	f005 fd63 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b7da:	e7ff      	b.n	b7dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9b4>
    b7dc:	f8dd 160c 	ldr.w	r1, [sp, #1548]	; 0x60c
    b7e0:	f24d 002c 	movw	r0, #53292	; 0xd02c
    b7e4:	f2c0 0001 	movt	r0, #1
    b7e8:	6802      	ldr	r2, [r0, #0]
    b7ea:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    b7ee:	f006 fd0d 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b7f2:	e7ff      	b.n	b7f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9cc>
    b7f4:	e7ff      	b.n	b7f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9ce>
                self.push(self.pc);
    b7f6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b7fa:	8a41      	ldrh	r1, [r0, #18]
    b7fc:	f003 f926 	bl	ea4c <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE>
    b800:	e7ff      	b.n	b802 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9da>
    b802:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    b804:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    b808:	f003 fc46 	bl	f098 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E>
    b80c:	90e5      	str	r0, [sp, #916]	; 0x394
    b80e:	e7ff      	b.n	b810 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9e8>
    b810:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b814:	99e5      	ldr	r1, [sp, #916]	; 0x394
    b816:	f003 f8c3 	bl	e9a0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    b81a:	e7ff      	b.n	b81c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9f4>
        match (
    b81c:	f002 bdd1 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    b820:	2005      	movs	r0, #5
    b822:	f8cd 063c 	str.w	r0, [sp, #1596]	; 0x63c
    b826:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    b82a:	f2c0 0001 	movt	r0, #1
    b82e:	6801      	ldr	r1, [r0, #0]
    b830:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    b834:	f005 fcf8 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b838:	90e4      	str	r0, [sp, #912]	; 0x390
    b83a:	e01f      	b.n	b87c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa54>
    b83c:	2001      	movs	r0, #1
    b83e:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    b842:	e015      	b.n	b870 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa48>
    b844:	2000      	movs	r0, #0
    b846:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    b84a:	e011      	b.n	b870 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa48>
    b84c:	2000      	movs	r0, #0
    b84e:	f88d 0dd3 	strb.w	r0, [sp, #3539]	; 0xdd3
    b852:	f89d 1dd3 	ldrb.w	r1, [sp, #3539]	; 0xdd3
    b856:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b85a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b85e:	f005 fd58 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b862:	f8cd 0dd4 	str.w	r0, [sp, #3540]	; 0xdd4
    b866:	f8dd 0dd4 	ldr.w	r0, [sp, #3540]	; 0xdd4
    b86a:	f8cd 0644 	str.w	r0, [sp, #1604]	; 0x644
    b86e:	e00a      	b.n	b886 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa5e>
    b870:	f89d 0643 	ldrb.w	r0, [sp, #1603]	; 0x643
    b874:	07c0      	lsls	r0, r0, #31
    b876:	2800      	cmp	r0, #0
    b878:	d112      	bne.n	b8a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa78>
    b87a:	e055      	b.n	b928 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb00>
    b87c:	98e4      	ldr	r0, [sp, #912]	; 0x390
    b87e:	07c1      	lsls	r1, r0, #31
    b880:	2900      	cmp	r1, #0
    b882:	d1e3      	bne.n	b84c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa24>
    b884:	e7de      	b.n	b844 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa1c>
    b886:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    b88a:	f20d 6144 	addw	r1, sp, #1604	; 0x644
    b88e:	f005 fccb 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b892:	90e3      	str	r0, [sp, #908]	; 0x38c
    b894:	e7ff      	b.n	b896 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa6e>
    b896:	98e3      	ldr	r0, [sp, #908]	; 0x38c
    b898:	07c1      	lsls	r1, r0, #31
    b89a:	2900      	cmp	r1, #0
    b89c:	d1ce      	bne.n	b83c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa14>
    b89e:	e7d1      	b.n	b844 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa1c>
                trace!("[{:04x}] SE Vx kk", self.pc);
    b8a0:	f64c 70bc 	movw	r0, #53180	; 0xcfbc
    b8a4:	f2c0 0001 	movt	r0, #1
    b8a8:	6801      	ldr	r1, [r0, #0]
    b8aa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b8ae:	f100 0212 	add.w	r2, r0, #18
    b8b2:	f8cd 2668 	str.w	r2, [sp, #1640]	; 0x668
    b8b6:	f8dd 2668 	ldr.w	r2, [sp, #1640]	; 0x668
    b8ba:	f8cd 2d70 	str.w	r2, [sp, #3440]	; 0xd70
    b8be:	f646 63ef 	movw	r3, #28399	; 0x6eef
    b8c2:	f2c0 0301 	movt	r3, #1
    b8c6:	4610      	mov	r0, r2
    b8c8:	91e2      	str	r1, [sp, #904]	; 0x388
    b8ca:	4619      	mov	r1, r3
    b8cc:	f7fe fe65 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b8d0:	90e1      	str	r0, [sp, #900]	; 0x384
    b8d2:	91e0      	str	r1, [sp, #896]	; 0x380
    b8d4:	e7ff      	b.n	b8d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xaae>
    b8d6:	98e1      	ldr	r0, [sp, #900]	; 0x384
    b8d8:	f8cd 0660 	str.w	r0, [sp, #1632]	; 0x660
    b8dc:	99e0      	ldr	r1, [sp, #896]	; 0x380
    b8de:	f8cd 1664 	str.w	r1, [sp, #1636]	; 0x664
    b8e2:	f24c 3218 	movw	r2, #49944	; 0xc318
    b8e6:	f2c0 0201 	movt	r2, #1
    b8ea:	6812      	ldr	r2, [r2, #0]
    b8ec:	466b      	mov	r3, sp
    b8ee:	f04f 0c01 	mov.w	ip, #1
    b8f2:	f8c3 c008 	str.w	ip, [r3, #8]
    b8f6:	605a      	str	r2, [r3, #4]
    b8f8:	f8c3 c000 	str.w	ip, [r3]
    b8fc:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    b900:	2202      	movs	r2, #2
    b902:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
    b906:	99e2      	ldr	r1, [sp, #904]	; 0x388
    b908:	f005 fcca 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b90c:	e7ff      	b.n	b90e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xae6>
    b90e:	f8dd 163c 	ldr.w	r1, [sp, #1596]	; 0x63c
    b912:	f64c 70dc 	movw	r0, #53212	; 0xcfdc
    b916:	f2c0 0001 	movt	r0, #1
    b91a:	6802      	ldr	r2, [r0, #0]
    b91c:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    b920:	f006 fc74 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b924:	e7ff      	b.n	b926 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xafe>
    b926:	e7ff      	b.n	b928 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb00>
                if self.v[x] == kk {
    b928:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b92c:	280f      	cmp	r0, #15
    b92e:	f203 8011 	bhi.w	e954 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3b2c>
    b932:	e7ff      	b.n	b934 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb0c>
    b934:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b938:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b93c:	1842      	adds	r2, r0, r1
    b93e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b942:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    b946:	fa5f fc83 	uxtb.w	ip, r3
    b94a:	4562      	cmp	r2, ip
    b94c:	d106      	bne.n	b95c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb34>
    b94e:	e7ff      	b.n	b950 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb28>
                    self.next();
    b950:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b954:	f003 f867 	bl	ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    b958:	e7ff      	b.n	b95a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb32>
                if self.v[x] == kk {
    b95a:	e7ff      	b.n	b95c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb34>
        match (
    b95c:	f002 bd31 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    b960:	2005      	movs	r0, #5
    b962:	f8cd 066c 	str.w	r0, [sp, #1644]	; 0x66c
    b966:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    b96a:	f2c0 0001 	movt	r0, #1
    b96e:	6801      	ldr	r1, [r0, #0]
    b970:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    b974:	f005 fc58 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b978:	90df      	str	r0, [sp, #892]	; 0x37c
    b97a:	e01f      	b.n	b9bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb94>
    b97c:	2001      	movs	r0, #1
    b97e:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    b982:	e015      	b.n	b9b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb88>
    b984:	2000      	movs	r0, #0
    b986:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    b98a:	e011      	b.n	b9b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb88>
    b98c:	2000      	movs	r0, #0
    b98e:	f88d 0ddb 	strb.w	r0, [sp, #3547]	; 0xddb
    b992:	f89d 1ddb 	ldrb.w	r1, [sp, #3547]	; 0xddb
    b996:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b99a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b99e:	f005 fcb8 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b9a2:	f8cd 0ddc 	str.w	r0, [sp, #3548]	; 0xddc
    b9a6:	f8dd 0ddc 	ldr.w	r0, [sp, #3548]	; 0xddc
    b9aa:	f8cd 0674 	str.w	r0, [sp, #1652]	; 0x674
    b9ae:	e00a      	b.n	b9c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb9e>
    b9b0:	f89d 0673 	ldrb.w	r0, [sp, #1651]	; 0x673
    b9b4:	07c0      	lsls	r0, r0, #31
    b9b6:	2800      	cmp	r0, #0
    b9b8:	d112      	bne.n	b9e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xbb8>
    b9ba:	e055      	b.n	ba68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc40>
    b9bc:	98df      	ldr	r0, [sp, #892]	; 0x37c
    b9be:	07c1      	lsls	r1, r0, #31
    b9c0:	2900      	cmp	r1, #0
    b9c2:	d1e3      	bne.n	b98c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb64>
    b9c4:	e7de      	b.n	b984 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb5c>
    b9c6:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    b9ca:	f20d 6174 	addw	r1, sp, #1652	; 0x674
    b9ce:	f005 fc2b 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b9d2:	90de      	str	r0, [sp, #888]	; 0x378
    b9d4:	e7ff      	b.n	b9d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xbae>
    b9d6:	98de      	ldr	r0, [sp, #888]	; 0x378
    b9d8:	07c1      	lsls	r1, r0, #31
    b9da:	2900      	cmp	r1, #0
    b9dc:	d1ce      	bne.n	b97c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb54>
    b9de:	e7d1      	b.n	b984 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb5c>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
    b9e0:	f64c 706c 	movw	r0, #53100	; 0xcf6c
    b9e4:	f2c0 0001 	movt	r0, #1
    b9e8:	6801      	ldr	r1, [r0, #0]
    b9ea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b9ee:	f100 0212 	add.w	r2, r0, #18
    b9f2:	f8cd 2698 	str.w	r2, [sp, #1688]	; 0x698
    b9f6:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
    b9fa:	f8cd 2d6c 	str.w	r2, [sp, #3436]	; 0xd6c
    b9fe:	f646 63ef 	movw	r3, #28399	; 0x6eef
    ba02:	f2c0 0301 	movt	r3, #1
    ba06:	4610      	mov	r0, r2
    ba08:	91dd      	str	r1, [sp, #884]	; 0x374
    ba0a:	4619      	mov	r1, r3
    ba0c:	f7fe fdc5 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ba10:	90dc      	str	r0, [sp, #880]	; 0x370
    ba12:	91db      	str	r1, [sp, #876]	; 0x36c
    ba14:	e7ff      	b.n	ba16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xbee>
    ba16:	98dc      	ldr	r0, [sp, #880]	; 0x370
    ba18:	f8cd 0690 	str.w	r0, [sp, #1680]	; 0x690
    ba1c:	99db      	ldr	r1, [sp, #876]	; 0x36c
    ba1e:	f8cd 1694 	str.w	r1, [sp, #1684]	; 0x694
    ba22:	f24c 3218 	movw	r2, #49944	; 0xc318
    ba26:	f2c0 0201 	movt	r2, #1
    ba2a:	6812      	ldr	r2, [r2, #0]
    ba2c:	466b      	mov	r3, sp
    ba2e:	f04f 0c01 	mov.w	ip, #1
    ba32:	f8c3 c008 	str.w	ip, [r3, #8]
    ba36:	605a      	str	r2, [r3, #4]
    ba38:	f8c3 c000 	str.w	ip, [r3]
    ba3c:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    ba40:	2202      	movs	r2, #2
    ba42:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
    ba46:	99dd      	ldr	r1, [sp, #884]	; 0x374
    ba48:	f005 fc2a 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    ba4c:	e7ff      	b.n	ba4e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc26>
    ba4e:	f8dd 166c 	ldr.w	r1, [sp, #1644]	; 0x66c
    ba52:	f64c 708c 	movw	r0, #53132	; 0xcf8c
    ba56:	f2c0 0001 	movt	r0, #1
    ba5a:	6802      	ldr	r2, [r0, #0]
    ba5c:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    ba60:	f006 fbd4 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ba64:	e7ff      	b.n	ba66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc3e>
    ba66:	e7ff      	b.n	ba68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc40>
                if self.v[x] != kk {
    ba68:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ba6c:	280f      	cmp	r0, #15
    ba6e:	f202 8767 	bhi.w	e940 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3b18>
    ba72:	e7ff      	b.n	ba74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc4c>
    ba74:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ba78:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ba7c:	1842      	adds	r2, r0, r1
    ba7e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ba82:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    ba86:	fa5f fc83 	uxtb.w	ip, r3
    ba8a:	4562      	cmp	r2, ip
    ba8c:	d006      	beq.n	ba9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc74>
    ba8e:	e7ff      	b.n	ba90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc68>
                    self.next();
    ba90:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ba94:	f002 ffc7 	bl	ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    ba98:	e7ff      	b.n	ba9a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc72>
                if self.v[x] != kk {
    ba9a:	e7ff      	b.n	ba9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc74>
        match (
    ba9c:	f002 bc91 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    baa0:	2005      	movs	r0, #5
    baa2:	f8cd 069c 	str.w	r0, [sp, #1692]	; 0x69c
    baa6:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    baaa:	f2c0 0001 	movt	r0, #1
    baae:	6801      	ldr	r1, [r0, #0]
    bab0:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    bab4:	f005 fbb8 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bab8:	90da      	str	r0, [sp, #872]	; 0x368
    baba:	e01f      	b.n	bafc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcd4>
    babc:	2001      	movs	r0, #1
    babe:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    bac2:	e015      	b.n	baf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcc8>
    bac4:	2000      	movs	r0, #0
    bac6:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    baca:	e011      	b.n	baf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcc8>
    bacc:	2000      	movs	r0, #0
    bace:	f88d 0de3 	strb.w	r0, [sp, #3555]	; 0xde3
    bad2:	f89d 1de3 	ldrb.w	r1, [sp, #3555]	; 0xde3
    bad6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    bada:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bade:	f005 fc18 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    bae2:	f8cd 0de4 	str.w	r0, [sp, #3556]	; 0xde4
    bae6:	f8dd 0de4 	ldr.w	r0, [sp, #3556]	; 0xde4
    baea:	f8cd 06a4 	str.w	r0, [sp, #1700]	; 0x6a4
    baee:	e00a      	b.n	bb06 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcde>
    baf0:	f89d 06a3 	ldrb.w	r0, [sp, #1699]	; 0x6a3
    baf4:	07c0      	lsls	r0, r0, #31
    baf6:	2800      	cmp	r0, #0
    baf8:	d112      	bne.n	bb20 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcf8>
    bafa:	e055      	b.n	bba8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd80>
    bafc:	98da      	ldr	r0, [sp, #872]	; 0x368
    bafe:	07c1      	lsls	r1, r0, #31
    bb00:	2900      	cmp	r1, #0
    bb02:	d1e3      	bne.n	bacc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xca4>
    bb04:	e7de      	b.n	bac4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc9c>
    bb06:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    bb0a:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
    bb0e:	f005 fb8b 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bb12:	90d9      	str	r0, [sp, #868]	; 0x364
    bb14:	e7ff      	b.n	bb16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcee>
    bb16:	98d9      	ldr	r0, [sp, #868]	; 0x364
    bb18:	07c1      	lsls	r1, r0, #31
    bb1a:	2900      	cmp	r1, #0
    bb1c:	d1ce      	bne.n	babc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc94>
    bb1e:	e7d1      	b.n	bac4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc9c>
                trace!("[{:04x}] SE Vx, Vy", self.pc);
    bb20:	f64c 700c 	movw	r0, #53004	; 0xcf0c
    bb24:	f2c0 0001 	movt	r0, #1
    bb28:	6801      	ldr	r1, [r0, #0]
    bb2a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bb2e:	f100 0212 	add.w	r2, r0, #18
    bb32:	f8cd 26c8 	str.w	r2, [sp, #1736]	; 0x6c8
    bb36:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
    bb3a:	f8cd 2d68 	str.w	r2, [sp, #3432]	; 0xd68
    bb3e:	f646 63ef 	movw	r3, #28399	; 0x6eef
    bb42:	f2c0 0301 	movt	r3, #1
    bb46:	4610      	mov	r0, r2
    bb48:	91d8      	str	r1, [sp, #864]	; 0x360
    bb4a:	4619      	mov	r1, r3
    bb4c:	f7fe fd25 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bb50:	90d7      	str	r0, [sp, #860]	; 0x35c
    bb52:	91d6      	str	r1, [sp, #856]	; 0x358
    bb54:	e7ff      	b.n	bb56 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd2e>
    bb56:	98d7      	ldr	r0, [sp, #860]	; 0x35c
    bb58:	f8cd 06c0 	str.w	r0, [sp, #1728]	; 0x6c0
    bb5c:	99d6      	ldr	r1, [sp, #856]	; 0x358
    bb5e:	f8cd 16c4 	str.w	r1, [sp, #1732]	; 0x6c4
    bb62:	f24c 3218 	movw	r2, #49944	; 0xc318
    bb66:	f2c0 0201 	movt	r2, #1
    bb6a:	6812      	ldr	r2, [r2, #0]
    bb6c:	466b      	mov	r3, sp
    bb6e:	f04f 0c01 	mov.w	ip, #1
    bb72:	f8c3 c008 	str.w	ip, [r3, #8]
    bb76:	605a      	str	r2, [r3, #4]
    bb78:	f8c3 c000 	str.w	ip, [r3]
    bb7c:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    bb80:	2202      	movs	r2, #2
    bb82:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
    bb86:	99d8      	ldr	r1, [sp, #864]	; 0x360
    bb88:	f005 fb8a 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    bb8c:	e7ff      	b.n	bb8e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd66>
    bb8e:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
    bb92:	f64c 702c 	movw	r0, #53036	; 0xcf2c
    bb96:	f2c0 0001 	movt	r0, #1
    bb9a:	6802      	ldr	r2, [r0, #0]
    bb9c:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    bba0:	f006 fb34 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bba4:	e7ff      	b.n	bba6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd7e>
    bba6:	e7ff      	b.n	bba8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd80>
                if self.v[x] == self.v[y] {
    bba8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    bbac:	280f      	cmp	r0, #15
    bbae:	f202 86b3 	bhi.w	e918 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3af0>
    bbb2:	e7ff      	b.n	bbb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd8c>
    bbb4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bbb8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bbbc:	1842      	adds	r2, r0, r1
    bbbe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bbc2:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    bbc6:	2b0f      	cmp	r3, #15
    bbc8:	92d5      	str	r2, [sp, #852]	; 0x354
    bbca:	f202 86af 	bhi.w	e92c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3b04>
    bbce:	e7ff      	b.n	bbd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xda8>
    bbd0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bbd4:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    bbd8:	1842      	adds	r2, r0, r1
    bbda:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bbde:	9bd5      	ldr	r3, [sp, #852]	; 0x354
    bbe0:	fa5f fc83 	uxtb.w	ip, r3
    bbe4:	4594      	cmp	ip, r2
    bbe6:	d106      	bne.n	bbf6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdce>
    bbe8:	e7ff      	b.n	bbea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdc2>
                    self.next();
    bbea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bbee:	f002 ff1a 	bl	ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    bbf2:	e7ff      	b.n	bbf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdcc>
                if self.v[x] == self.v[y] {
    bbf4:	e7ff      	b.n	bbf6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdce>
        match (
    bbf6:	f002 bbe4 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    bbfa:	2005      	movs	r0, #5
    bbfc:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
    bc00:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    bc04:	f2c0 0001 	movt	r0, #1
    bc08:	6801      	ldr	r1, [r0, #0]
    bc0a:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    bc0e:	f005 fb0b 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bc12:	90d4      	str	r0, [sp, #848]	; 0x350
    bc14:	e01f      	b.n	bc56 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe2e>
    bc16:	2001      	movs	r0, #1
    bc18:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    bc1c:	e015      	b.n	bc4a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe22>
    bc1e:	2000      	movs	r0, #0
    bc20:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    bc24:	e011      	b.n	bc4a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe22>
    bc26:	2000      	movs	r0, #0
    bc28:	f88d 0deb 	strb.w	r0, [sp, #3563]	; 0xdeb
    bc2c:	f89d 1deb 	ldrb.w	r1, [sp, #3563]	; 0xdeb
    bc30:	f644 206c 	movw	r0, #19052	; 0x4a6c
    bc34:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bc38:	f005 fb6b 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    bc3c:	f8cd 0dec 	str.w	r0, [sp, #3564]	; 0xdec
    bc40:	f8dd 0dec 	ldr.w	r0, [sp, #3564]	; 0xdec
    bc44:	f8cd 06d4 	str.w	r0, [sp, #1748]	; 0x6d4
    bc48:	e00a      	b.n	bc60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe38>
    bc4a:	f89d 06d3 	ldrb.w	r0, [sp, #1747]	; 0x6d3
    bc4e:	07c0      	lsls	r0, r0, #31
    bc50:	2800      	cmp	r0, #0
    bc52:	d112      	bne.n	bc7a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe52>
    bc54:	e055      	b.n	bd02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xeda>
    bc56:	98d4      	ldr	r0, [sp, #848]	; 0x350
    bc58:	07c1      	lsls	r1, r0, #31
    bc5a:	2900      	cmp	r1, #0
    bc5c:	d1e3      	bne.n	bc26 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdfe>
    bc5e:	e7de      	b.n	bc1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdf6>
    bc60:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    bc64:	f20d 61d4 	addw	r1, sp, #1748	; 0x6d4
    bc68:	f005 fade 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bc6c:	90d3      	str	r0, [sp, #844]	; 0x34c
    bc6e:	e7ff      	b.n	bc70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe48>
    bc70:	98d3      	ldr	r0, [sp, #844]	; 0x34c
    bc72:	07c1      	lsls	r1, r0, #31
    bc74:	2900      	cmp	r1, #0
    bc76:	d1ce      	bne.n	bc16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdee>
    bc78:	e7d1      	b.n	bc1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdf6>
                trace!("[{:04x}] LD Vx, kk", self.pc);
    bc7a:	f64c 6024 	movw	r0, #52772	; 0xce24
    bc7e:	f2c0 0001 	movt	r0, #1
    bc82:	6801      	ldr	r1, [r0, #0]
    bc84:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bc88:	f100 0212 	add.w	r2, r0, #18
    bc8c:	f8cd 26f8 	str.w	r2, [sp, #1784]	; 0x6f8
    bc90:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
    bc94:	f8cd 2d5c 	str.w	r2, [sp, #3420]	; 0xd5c
    bc98:	f646 63ef 	movw	r3, #28399	; 0x6eef
    bc9c:	f2c0 0301 	movt	r3, #1
    bca0:	4610      	mov	r0, r2
    bca2:	91d2      	str	r1, [sp, #840]	; 0x348
    bca4:	4619      	mov	r1, r3
    bca6:	f7fe fc78 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bcaa:	90d1      	str	r0, [sp, #836]	; 0x344
    bcac:	91d0      	str	r1, [sp, #832]	; 0x340
    bcae:	e7ff      	b.n	bcb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe88>
    bcb0:	98d1      	ldr	r0, [sp, #836]	; 0x344
    bcb2:	f8cd 06f0 	str.w	r0, [sp, #1776]	; 0x6f0
    bcb6:	99d0      	ldr	r1, [sp, #832]	; 0x340
    bcb8:	f8cd 16f4 	str.w	r1, [sp, #1780]	; 0x6f4
    bcbc:	f24c 3218 	movw	r2, #49944	; 0xc318
    bcc0:	f2c0 0201 	movt	r2, #1
    bcc4:	6812      	ldr	r2, [r2, #0]
    bcc6:	466b      	mov	r3, sp
    bcc8:	f04f 0c01 	mov.w	ip, #1
    bccc:	f8c3 c008 	str.w	ip, [r3, #8]
    bcd0:	605a      	str	r2, [r3, #4]
    bcd2:	f8c3 c000 	str.w	ip, [r3]
    bcd6:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    bcda:	2202      	movs	r2, #2
    bcdc:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
    bce0:	99d2      	ldr	r1, [sp, #840]	; 0x348
    bce2:	f005 fadd 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    bce6:	e7ff      	b.n	bce8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xec0>
    bce8:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
    bcec:	f64c 6044 	movw	r0, #52804	; 0xce44
    bcf0:	f2c0 0001 	movt	r0, #1
    bcf4:	6802      	ldr	r2, [r0, #0]
    bcf6:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    bcfa:	f006 fa87 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bcfe:	e7ff      	b.n	bd00 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xed8>
    bd00:	e7ff      	b.n	bd02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xeda>
                self.v[x] = kk;
    bd02:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    bd06:	280f      	cmp	r0, #15
    bd08:	f202 85fc 	bhi.w	e904 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3adc>
    bd0c:	e7ff      	b.n	bd0e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xee6>
    bd0e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bd12:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bd16:	1842      	adds	r2, r0, r1
    bd18:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    bd1c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    bd20:	f002 bb4f 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    bd24:	2005      	movs	r0, #5
    bd26:	f8cd 06fc 	str.w	r0, [sp, #1788]	; 0x6fc
    bd2a:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    bd2e:	f2c0 0001 	movt	r0, #1
    bd32:	6801      	ldr	r1, [r0, #0]
    bd34:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    bd38:	f005 fa76 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bd3c:	90cf      	str	r0, [sp, #828]	; 0x33c
    bd3e:	e01f      	b.n	bd80 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf58>
    bd40:	2001      	movs	r0, #1
    bd42:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    bd46:	e015      	b.n	bd74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf4c>
    bd48:	2000      	movs	r0, #0
    bd4a:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    bd4e:	e011      	b.n	bd74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf4c>
    bd50:	2000      	movs	r0, #0
    bd52:	f88d 0df3 	strb.w	r0, [sp, #3571]	; 0xdf3
    bd56:	f89d 1df3 	ldrb.w	r1, [sp, #3571]	; 0xdf3
    bd5a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    bd5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bd62:	f005 fad6 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    bd66:	f8cd 0df4 	str.w	r0, [sp, #3572]	; 0xdf4
    bd6a:	f8dd 0df4 	ldr.w	r0, [sp, #3572]	; 0xdf4
    bd6e:	f8cd 0704 	str.w	r0, [sp, #1796]	; 0x704
    bd72:	e00a      	b.n	bd8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf62>
    bd74:	f89d 0703 	ldrb.w	r0, [sp, #1795]	; 0x703
    bd78:	07c0      	lsls	r0, r0, #31
    bd7a:	2800      	cmp	r0, #0
    bd7c:	d112      	bne.n	bda4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf7c>
    bd7e:	e055      	b.n	be2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1004>
    bd80:	98cf      	ldr	r0, [sp, #828]	; 0x33c
    bd82:	07c1      	lsls	r1, r0, #31
    bd84:	2900      	cmp	r1, #0
    bd86:	d1e3      	bne.n	bd50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf28>
    bd88:	e7de      	b.n	bd48 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf20>
    bd8a:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    bd8e:	f20d 7104 	addw	r1, sp, #1796	; 0x704
    bd92:	f005 fa49 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bd96:	90ce      	str	r0, [sp, #824]	; 0x338
    bd98:	e7ff      	b.n	bd9a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf72>
    bd9a:	98ce      	ldr	r0, [sp, #824]	; 0x338
    bd9c:	07c1      	lsls	r1, r0, #31
    bd9e:	2900      	cmp	r1, #0
    bda0:	d1ce      	bne.n	bd40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf18>
    bda2:	e7d1      	b.n	bd48 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf20>
                trace!("[{:04x}] ADD Vx, kk", self.pc);
    bda4:	f64c 50c4 	movw	r0, #52676	; 0xcdc4
    bda8:	f2c0 0001 	movt	r0, #1
    bdac:	6801      	ldr	r1, [r0, #0]
    bdae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bdb2:	f100 0212 	add.w	r2, r0, #18
    bdb6:	f8cd 2728 	str.w	r2, [sp, #1832]	; 0x728
    bdba:	f8dd 2728 	ldr.w	r2, [sp, #1832]	; 0x728
    bdbe:	f8cd 2d58 	str.w	r2, [sp, #3416]	; 0xd58
    bdc2:	f646 63ef 	movw	r3, #28399	; 0x6eef
    bdc6:	f2c0 0301 	movt	r3, #1
    bdca:	4610      	mov	r0, r2
    bdcc:	91cd      	str	r1, [sp, #820]	; 0x334
    bdce:	4619      	mov	r1, r3
    bdd0:	f7fe fbe3 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bdd4:	90cc      	str	r0, [sp, #816]	; 0x330
    bdd6:	91cb      	str	r1, [sp, #812]	; 0x32c
    bdd8:	e7ff      	b.n	bdda <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xfb2>
    bdda:	98cc      	ldr	r0, [sp, #816]	; 0x330
    bddc:	f8cd 0720 	str.w	r0, [sp, #1824]	; 0x720
    bde0:	99cb      	ldr	r1, [sp, #812]	; 0x32c
    bde2:	f8cd 1724 	str.w	r1, [sp, #1828]	; 0x724
    bde6:	f24c 3218 	movw	r2, #49944	; 0xc318
    bdea:	f2c0 0201 	movt	r2, #1
    bdee:	6812      	ldr	r2, [r2, #0]
    bdf0:	466b      	mov	r3, sp
    bdf2:	f04f 0c01 	mov.w	ip, #1
    bdf6:	f8c3 c008 	str.w	ip, [r3, #8]
    bdfa:	605a      	str	r2, [r3, #4]
    bdfc:	f8c3 c000 	str.w	ip, [r3]
    be00:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    be04:	2202      	movs	r2, #2
    be06:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
    be0a:	99cd      	ldr	r1, [sp, #820]	; 0x334
    be0c:	f005 fa48 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    be10:	e7ff      	b.n	be12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xfea>
    be12:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
    be16:	f64c 50e4 	movw	r0, #52708	; 0xcde4
    be1a:	f2c0 0001 	movt	r0, #1
    be1e:	6802      	ldr	r2, [r0, #0]
    be20:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    be24:	f006 f9f2 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    be28:	e7ff      	b.n	be2a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1002>
    be2a:	e7ff      	b.n	be2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1004>
                self.v[x] = self.v[x].wrapping_add(kk);
    be2c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    be30:	280f      	cmp	r0, #15
    be32:	f202 8553 	bhi.w	e8dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ab4>
    be36:	e7ff      	b.n	be38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1010>
    be38:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    be3c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    be40:	1842      	adds	r2, r0, r1
    be42:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    be46:	f8dd 145c 	ldr.w	r1, [sp, #1116]	; 0x45c
    be4a:	f003 f877 	bl	ef3c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE>
    be4e:	90ca      	str	r0, [sp, #808]	; 0x328
    be50:	e7ff      	b.n	be52 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x102a>
    be52:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    be56:	280f      	cmp	r0, #15
    be58:	f202 854a 	bhi.w	e8f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ac8>
    be5c:	e7ff      	b.n	be5e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1036>
    be5e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    be62:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    be66:	1842      	adds	r2, r0, r1
    be68:	9bca      	ldr	r3, [sp, #808]	; 0x328
    be6a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    be6e:	f002 baa8 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    be72:	2005      	movs	r0, #5
    be74:	f8cd 072c 	str.w	r0, [sp, #1836]	; 0x72c
    be78:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    be7c:	f2c0 0001 	movt	r0, #1
    be80:	6801      	ldr	r1, [r0, #0]
    be82:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    be86:	f005 f9cf 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    be8a:	90c9      	str	r0, [sp, #804]	; 0x324
    be8c:	e01f      	b.n	bece <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x10a6>
    be8e:	2001      	movs	r0, #1
    be90:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    be94:	e015      	b.n	bec2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x109a>
    be96:	2000      	movs	r0, #0
    be98:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    be9c:	e011      	b.n	bec2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x109a>
    be9e:	2000      	movs	r0, #0
    bea0:	f88d 0dfb 	strb.w	r0, [sp, #3579]	; 0xdfb
    bea4:	f89d 1dfb 	ldrb.w	r1, [sp, #3579]	; 0xdfb
    bea8:	f644 206c 	movw	r0, #19052	; 0x4a6c
    beac:	f2c2 0000 	movt	r0, #8192	; 0x2000
    beb0:	f005 fa2f 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    beb4:	f8cd 0dfc 	str.w	r0, [sp, #3580]	; 0xdfc
    beb8:	f8dd 0dfc 	ldr.w	r0, [sp, #3580]	; 0xdfc
    bebc:	f8cd 0734 	str.w	r0, [sp, #1844]	; 0x734
    bec0:	e00a      	b.n	bed8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x10b0>
    bec2:	f89d 0733 	ldrb.w	r0, [sp, #1843]	; 0x733
    bec6:	07c0      	lsls	r0, r0, #31
    bec8:	2800      	cmp	r0, #0
    beca:	d112      	bne.n	bef2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x10ca>
    becc:	e055      	b.n	bf7a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1152>
    bece:	98c9      	ldr	r0, [sp, #804]	; 0x324
    bed0:	07c1      	lsls	r1, r0, #31
    bed2:	2900      	cmp	r1, #0
    bed4:	d1e3      	bne.n	be9e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1076>
    bed6:	e7de      	b.n	be96 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x106e>
    bed8:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    bedc:	f20d 7134 	addw	r1, sp, #1844	; 0x734
    bee0:	f005 f9a2 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bee4:	90c8      	str	r0, [sp, #800]	; 0x320
    bee6:	e7ff      	b.n	bee8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x10c0>
    bee8:	98c8      	ldr	r0, [sp, #800]	; 0x320
    beea:	07c1      	lsls	r1, r0, #31
    beec:	2900      	cmp	r1, #0
    beee:	d1ce      	bne.n	be8e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1066>
    bef0:	e7d1      	b.n	be96 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x106e>
                trace!("[{:04x}] LD Vx, Vy", self.pc);
    bef2:	f64c 5064 	movw	r0, #52580	; 0xcd64
    bef6:	f2c0 0001 	movt	r0, #1
    befa:	6801      	ldr	r1, [r0, #0]
    befc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bf00:	f100 0212 	add.w	r2, r0, #18
    bf04:	f8cd 2758 	str.w	r2, [sp, #1880]	; 0x758
    bf08:	f8dd 2758 	ldr.w	r2, [sp, #1880]	; 0x758
    bf0c:	f8cd 2d54 	str.w	r2, [sp, #3412]	; 0xd54
    bf10:	f646 63ef 	movw	r3, #28399	; 0x6eef
    bf14:	f2c0 0301 	movt	r3, #1
    bf18:	4610      	mov	r0, r2
    bf1a:	91c7      	str	r1, [sp, #796]	; 0x31c
    bf1c:	4619      	mov	r1, r3
    bf1e:	f7fe fb3c 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bf22:	90c6      	str	r0, [sp, #792]	; 0x318
    bf24:	91c5      	str	r1, [sp, #788]	; 0x314
    bf26:	e7ff      	b.n	bf28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1100>
    bf28:	98c6      	ldr	r0, [sp, #792]	; 0x318
    bf2a:	f8cd 0750 	str.w	r0, [sp, #1872]	; 0x750
    bf2e:	99c5      	ldr	r1, [sp, #788]	; 0x314
    bf30:	f8cd 1754 	str.w	r1, [sp, #1876]	; 0x754
    bf34:	f24c 3218 	movw	r2, #49944	; 0xc318
    bf38:	f2c0 0201 	movt	r2, #1
    bf3c:	6812      	ldr	r2, [r2, #0]
    bf3e:	466b      	mov	r3, sp
    bf40:	f04f 0c01 	mov.w	ip, #1
    bf44:	f8c3 c008 	str.w	ip, [r3, #8]
    bf48:	605a      	str	r2, [r3, #4]
    bf4a:	f8c3 c000 	str.w	ip, [r3]
    bf4e:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    bf52:	2202      	movs	r2, #2
    bf54:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
    bf58:	99c7      	ldr	r1, [sp, #796]	; 0x31c
    bf5a:	f005 f9a1 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    bf5e:	e7ff      	b.n	bf60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1138>
    bf60:	f8dd 172c 	ldr.w	r1, [sp, #1836]	; 0x72c
    bf64:	f64c 5084 	movw	r0, #52612	; 0xcd84
    bf68:	f2c0 0001 	movt	r0, #1
    bf6c:	6802      	ldr	r2, [r0, #0]
    bf6e:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    bf72:	f006 f94b 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bf76:	e7ff      	b.n	bf78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1150>
    bf78:	e7ff      	b.n	bf7a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1152>
                self.v[x] = self.v[y];
    bf7a:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    bf7e:	280f      	cmp	r0, #15
    bf80:	f202 8498 	bhi.w	e8b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a8c>
    bf84:	e7ff      	b.n	bf86 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x115e>
    bf86:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bf8a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    bf8e:	1842      	adds	r2, r0, r1
    bf90:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bf94:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    bf98:	2b0f      	cmp	r3, #15
    bf9a:	92c4      	str	r2, [sp, #784]	; 0x310
    bf9c:	f202 8494 	bhi.w	e8c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3aa0>
    bfa0:	e7ff      	b.n	bfa2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x117a>
    bfa2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bfa6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bfaa:	1842      	adds	r2, r0, r1
    bfac:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    bfae:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    bfb2:	f002 ba06 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    bfb6:	2005      	movs	r0, #5
    bfb8:	f8cd 075c 	str.w	r0, [sp, #1884]	; 0x75c
    bfbc:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    bfc0:	f2c0 0001 	movt	r0, #1
    bfc4:	6801      	ldr	r1, [r0, #0]
    bfc6:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    bfca:	f005 f92d 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bfce:	90c3      	str	r0, [sp, #780]	; 0x30c
    bfd0:	e01f      	b.n	c012 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11ea>
    bfd2:	2001      	movs	r0, #1
    bfd4:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    bfd8:	e015      	b.n	c006 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11de>
    bfda:	2000      	movs	r0, #0
    bfdc:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    bfe0:	e011      	b.n	c006 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11de>
    bfe2:	2000      	movs	r0, #0
    bfe4:	f88d 0e03 	strb.w	r0, [sp, #3587]	; 0xe03
    bfe8:	f89d 1e03 	ldrb.w	r1, [sp, #3587]	; 0xe03
    bfec:	f644 206c 	movw	r0, #19052	; 0x4a6c
    bff0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bff4:	f005 f98d 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    bff8:	f8cd 0e04 	str.w	r0, [sp, #3588]	; 0xe04
    bffc:	f8dd 0e04 	ldr.w	r0, [sp, #3588]	; 0xe04
    c000:	f8cd 0764 	str.w	r0, [sp, #1892]	; 0x764
    c004:	e00a      	b.n	c01c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11f4>
    c006:	f89d 0763 	ldrb.w	r0, [sp, #1891]	; 0x763
    c00a:	07c0      	lsls	r0, r0, #31
    c00c:	2800      	cmp	r0, #0
    c00e:	d112      	bne.n	c036 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x120e>
    c010:	e055      	b.n	c0be <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1296>
    c012:	98c3      	ldr	r0, [sp, #780]	; 0x30c
    c014:	07c1      	lsls	r1, r0, #31
    c016:	2900      	cmp	r1, #0
    c018:	d1e3      	bne.n	bfe2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11ba>
    c01a:	e7de      	b.n	bfda <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11b2>
    c01c:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    c020:	f20d 7164 	addw	r1, sp, #1892	; 0x764
    c024:	f005 f900 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c028:	90c2      	str	r0, [sp, #776]	; 0x308
    c02a:	e7ff      	b.n	c02c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1204>
    c02c:	98c2      	ldr	r0, [sp, #776]	; 0x308
    c02e:	07c1      	lsls	r1, r0, #31
    c030:	2900      	cmp	r1, #0
    c032:	d1ce      	bne.n	bfd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11aa>
    c034:	e7d1      	b.n	bfda <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11b2>
                trace!("[{:04x}] OR Vx, Vy", self.pc);
    c036:	f64c 5004 	movw	r0, #52484	; 0xcd04
    c03a:	f2c0 0001 	movt	r0, #1
    c03e:	6801      	ldr	r1, [r0, #0]
    c040:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c044:	f100 0212 	add.w	r2, r0, #18
    c048:	f8cd 2788 	str.w	r2, [sp, #1928]	; 0x788
    c04c:	f8dd 2788 	ldr.w	r2, [sp, #1928]	; 0x788
    c050:	f8cd 2d50 	str.w	r2, [sp, #3408]	; 0xd50
    c054:	f646 63ef 	movw	r3, #28399	; 0x6eef
    c058:	f2c0 0301 	movt	r3, #1
    c05c:	4610      	mov	r0, r2
    c05e:	91c1      	str	r1, [sp, #772]	; 0x304
    c060:	4619      	mov	r1, r3
    c062:	f7fe fa9a 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c066:	90c0      	str	r0, [sp, #768]	; 0x300
    c068:	91bf      	str	r1, [sp, #764]	; 0x2fc
    c06a:	e7ff      	b.n	c06c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1244>
    c06c:	98c0      	ldr	r0, [sp, #768]	; 0x300
    c06e:	f8cd 0780 	str.w	r0, [sp, #1920]	; 0x780
    c072:	99bf      	ldr	r1, [sp, #764]	; 0x2fc
    c074:	f8cd 1784 	str.w	r1, [sp, #1924]	; 0x784
    c078:	f24c 3218 	movw	r2, #49944	; 0xc318
    c07c:	f2c0 0201 	movt	r2, #1
    c080:	6812      	ldr	r2, [r2, #0]
    c082:	466b      	mov	r3, sp
    c084:	f04f 0c01 	mov.w	ip, #1
    c088:	f8c3 c008 	str.w	ip, [r3, #8]
    c08c:	605a      	str	r2, [r3, #4]
    c08e:	f8c3 c000 	str.w	ip, [r3]
    c092:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    c096:	2202      	movs	r2, #2
    c098:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
    c09c:	99c1      	ldr	r1, [sp, #772]	; 0x304
    c09e:	f005 f8ff 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c0a2:	e7ff      	b.n	c0a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x127c>
    c0a4:	f8dd 175c 	ldr.w	r1, [sp, #1884]	; 0x75c
    c0a8:	f64c 5024 	movw	r0, #52516	; 0xcd24
    c0ac:	f2c0 0001 	movt	r0, #1
    c0b0:	6802      	ldr	r2, [r0, #0]
    c0b2:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    c0b6:	f006 f8a9 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c0ba:	e7ff      	b.n	c0bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1294>
    c0bc:	e7ff      	b.n	c0be <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1296>
                self.v[x] |= self.v[y];
    c0be:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    c0c2:	280f      	cmp	r0, #15
    c0c4:	f202 83e2 	bhi.w	e88c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a64>
    c0c8:	e7ff      	b.n	c0ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x12a2>
    c0ca:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c0ce:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c0d2:	1842      	adds	r2, r0, r1
    c0d4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c0d8:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    c0dc:	2b0f      	cmp	r3, #15
    c0de:	92be      	str	r2, [sp, #760]	; 0x2f8
    c0e0:	f202 83de 	bhi.w	e8a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a78>
    c0e4:	e7ff      	b.n	c0e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x12be>
    c0e6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c0ea:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c0ee:	1842      	adds	r2, r0, r1
    c0f0:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    c0f4:	f8dd c2f8 	ldr.w	ip, [sp, #760]	; 0x2f8
    c0f8:	ea43 030c 	orr.w	r3, r3, ip
    c0fc:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c100:	f002 b95f 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c104:	2005      	movs	r0, #5
    c106:	f8cd 078c 	str.w	r0, [sp, #1932]	; 0x78c
    c10a:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    c10e:	f2c0 0001 	movt	r0, #1
    c112:	6801      	ldr	r1, [r0, #0]
    c114:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    c118:	f005 f886 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c11c:	90bd      	str	r0, [sp, #756]	; 0x2f4
    c11e:	e01f      	b.n	c160 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1338>
    c120:	2001      	movs	r0, #1
    c122:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    c126:	e015      	b.n	c154 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x132c>
    c128:	2000      	movs	r0, #0
    c12a:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    c12e:	e011      	b.n	c154 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x132c>
    c130:	2000      	movs	r0, #0
    c132:	f88d 0e0b 	strb.w	r0, [sp, #3595]	; 0xe0b
    c136:	f89d 1e0b 	ldrb.w	r1, [sp, #3595]	; 0xe0b
    c13a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c13e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c142:	f005 f8e6 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c146:	f8cd 0e0c 	str.w	r0, [sp, #3596]	; 0xe0c
    c14a:	f8dd 0e0c 	ldr.w	r0, [sp, #3596]	; 0xe0c
    c14e:	f8cd 0794 	str.w	r0, [sp, #1940]	; 0x794
    c152:	e00a      	b.n	c16a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1342>
    c154:	f89d 0793 	ldrb.w	r0, [sp, #1939]	; 0x793
    c158:	07c0      	lsls	r0, r0, #31
    c15a:	2800      	cmp	r0, #0
    c15c:	d112      	bne.n	c184 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x135c>
    c15e:	e055      	b.n	c20c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13e4>
    c160:	98bd      	ldr	r0, [sp, #756]	; 0x2f4
    c162:	07c1      	lsls	r1, r0, #31
    c164:	2900      	cmp	r1, #0
    c166:	d1e3      	bne.n	c130 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1308>
    c168:	e7de      	b.n	c128 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1300>
    c16a:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    c16e:	f20d 7194 	addw	r1, sp, #1940	; 0x794
    c172:	f005 f859 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c176:	90bc      	str	r0, [sp, #752]	; 0x2f0
    c178:	e7ff      	b.n	c17a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1352>
    c17a:	98bc      	ldr	r0, [sp, #752]	; 0x2f0
    c17c:	07c1      	lsls	r1, r0, #31
    c17e:	2900      	cmp	r1, #0
    c180:	d1ce      	bne.n	c120 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x12f8>
    c182:	e7d1      	b.n	c128 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1300>
                trace!("[{:04x}] AND Vx, Vy", self.pc);
    c184:	f64c 40a4 	movw	r0, #52388	; 0xcca4
    c188:	f2c0 0001 	movt	r0, #1
    c18c:	6801      	ldr	r1, [r0, #0]
    c18e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c192:	f100 0212 	add.w	r2, r0, #18
    c196:	f8cd 27b8 	str.w	r2, [sp, #1976]	; 0x7b8
    c19a:	f8dd 27b8 	ldr.w	r2, [sp, #1976]	; 0x7b8
    c19e:	f8cd 2d4c 	str.w	r2, [sp, #3404]	; 0xd4c
    c1a2:	f646 63ef 	movw	r3, #28399	; 0x6eef
    c1a6:	f2c0 0301 	movt	r3, #1
    c1aa:	4610      	mov	r0, r2
    c1ac:	91bb      	str	r1, [sp, #748]	; 0x2ec
    c1ae:	4619      	mov	r1, r3
    c1b0:	f7fe f9f3 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c1b4:	90ba      	str	r0, [sp, #744]	; 0x2e8
    c1b6:	91b9      	str	r1, [sp, #740]	; 0x2e4
    c1b8:	e7ff      	b.n	c1ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1392>
    c1ba:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
    c1bc:	f8cd 07b0 	str.w	r0, [sp, #1968]	; 0x7b0
    c1c0:	99b9      	ldr	r1, [sp, #740]	; 0x2e4
    c1c2:	f8cd 17b4 	str.w	r1, [sp, #1972]	; 0x7b4
    c1c6:	f24c 3218 	movw	r2, #49944	; 0xc318
    c1ca:	f2c0 0201 	movt	r2, #1
    c1ce:	6812      	ldr	r2, [r2, #0]
    c1d0:	466b      	mov	r3, sp
    c1d2:	f04f 0c01 	mov.w	ip, #1
    c1d6:	f8c3 c008 	str.w	ip, [r3, #8]
    c1da:	605a      	str	r2, [r3, #4]
    c1dc:	f8c3 c000 	str.w	ip, [r3]
    c1e0:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    c1e4:	2202      	movs	r2, #2
    c1e6:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
    c1ea:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
    c1ec:	f005 f858 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c1f0:	e7ff      	b.n	c1f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13ca>
    c1f2:	f8dd 178c 	ldr.w	r1, [sp, #1932]	; 0x78c
    c1f6:	f64c 40c4 	movw	r0, #52420	; 0xccc4
    c1fa:	f2c0 0001 	movt	r0, #1
    c1fe:	6802      	ldr	r2, [r0, #0]
    c200:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    c204:	f006 f802 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c208:	e7ff      	b.n	c20a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13e2>
    c20a:	e7ff      	b.n	c20c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13e4>
                self.v[x] &= self.v[y];
    c20c:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    c210:	280f      	cmp	r0, #15
    c212:	f202 8327 	bhi.w	e864 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a3c>
    c216:	e7ff      	b.n	c218 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13f0>
    c218:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c21c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c220:	1842      	adds	r2, r0, r1
    c222:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c226:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    c22a:	2b0f      	cmp	r3, #15
    c22c:	92b8      	str	r2, [sp, #736]	; 0x2e0
    c22e:	f202 8323 	bhi.w	e878 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a50>
    c232:	e7ff      	b.n	c234 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x140c>
    c234:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c238:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c23c:	1842      	adds	r2, r0, r1
    c23e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    c242:	f8dd c2e0 	ldr.w	ip, [sp, #736]	; 0x2e0
    c246:	ea03 030c 	and.w	r3, r3, ip
    c24a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c24e:	f002 b8b8 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c252:	2005      	movs	r0, #5
    c254:	f8cd 07bc 	str.w	r0, [sp, #1980]	; 0x7bc
    c258:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    c25c:	f2c0 0001 	movt	r0, #1
    c260:	6801      	ldr	r1, [r0, #0]
    c262:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    c266:	f004 ffdf 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c26a:	90b7      	str	r0, [sp, #732]	; 0x2dc
    c26c:	e01f      	b.n	c2ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1486>
    c26e:	2001      	movs	r0, #1
    c270:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    c274:	e015      	b.n	c2a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x147a>
    c276:	2000      	movs	r0, #0
    c278:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    c27c:	e011      	b.n	c2a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x147a>
    c27e:	2000      	movs	r0, #0
    c280:	f88d 0e13 	strb.w	r0, [sp, #3603]	; 0xe13
    c284:	f89d 1e13 	ldrb.w	r1, [sp, #3603]	; 0xe13
    c288:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c28c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c290:	f005 f83f 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c294:	f8cd 0e14 	str.w	r0, [sp, #3604]	; 0xe14
    c298:	f8dd 0e14 	ldr.w	r0, [sp, #3604]	; 0xe14
    c29c:	f8cd 07c4 	str.w	r0, [sp, #1988]	; 0x7c4
    c2a0:	e00a      	b.n	c2b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1490>
    c2a2:	f89d 07c3 	ldrb.w	r0, [sp, #1987]	; 0x7c3
    c2a6:	07c0      	lsls	r0, r0, #31
    c2a8:	2800      	cmp	r0, #0
    c2aa:	d112      	bne.n	c2d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x14aa>
    c2ac:	e055      	b.n	c35a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1532>
    c2ae:	98b7      	ldr	r0, [sp, #732]	; 0x2dc
    c2b0:	07c1      	lsls	r1, r0, #31
    c2b2:	2900      	cmp	r1, #0
    c2b4:	d1e3      	bne.n	c27e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1456>
    c2b6:	e7de      	b.n	c276 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x144e>
    c2b8:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    c2bc:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
    c2c0:	f004 ffb2 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c2c4:	90b6      	str	r0, [sp, #728]	; 0x2d8
    c2c6:	e7ff      	b.n	c2c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x14a0>
    c2c8:	98b6      	ldr	r0, [sp, #728]	; 0x2d8
    c2ca:	07c1      	lsls	r1, r0, #31
    c2cc:	2900      	cmp	r1, #0
    c2ce:	d1ce      	bne.n	c26e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1446>
    c2d0:	e7d1      	b.n	c276 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x144e>
                trace!("[{:04x}] XOR Vx, Vy", self.pc);
    c2d2:	f64c 4044 	movw	r0, #52292	; 0xcc44
    c2d6:	f2c0 0001 	movt	r0, #1
    c2da:	6801      	ldr	r1, [r0, #0]
    c2dc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c2e0:	f100 0212 	add.w	r2, r0, #18
    c2e4:	f8cd 27e8 	str.w	r2, [sp, #2024]	; 0x7e8
    c2e8:	f8dd 27e8 	ldr.w	r2, [sp, #2024]	; 0x7e8
    c2ec:	f8cd 2d48 	str.w	r2, [sp, #3400]	; 0xd48
    c2f0:	f646 63ef 	movw	r3, #28399	; 0x6eef
    c2f4:	f2c0 0301 	movt	r3, #1
    c2f8:	4610      	mov	r0, r2
    c2fa:	91b5      	str	r1, [sp, #724]	; 0x2d4
    c2fc:	4619      	mov	r1, r3
    c2fe:	f7fe f94c 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c302:	90b4      	str	r0, [sp, #720]	; 0x2d0
    c304:	91b3      	str	r1, [sp, #716]	; 0x2cc
    c306:	e7ff      	b.n	c308 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x14e0>
    c308:	98b4      	ldr	r0, [sp, #720]	; 0x2d0
    c30a:	f8cd 07e0 	str.w	r0, [sp, #2016]	; 0x7e0
    c30e:	99b3      	ldr	r1, [sp, #716]	; 0x2cc
    c310:	f8cd 17e4 	str.w	r1, [sp, #2020]	; 0x7e4
    c314:	f24c 3218 	movw	r2, #49944	; 0xc318
    c318:	f2c0 0201 	movt	r2, #1
    c31c:	6812      	ldr	r2, [r2, #0]
    c31e:	466b      	mov	r3, sp
    c320:	f04f 0c01 	mov.w	ip, #1
    c324:	f8c3 c008 	str.w	ip, [r3, #8]
    c328:	605a      	str	r2, [r3, #4]
    c32a:	f8c3 c000 	str.w	ip, [r3]
    c32e:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    c332:	2202      	movs	r2, #2
    c334:	f50d 63fc 	add.w	r3, sp, #2016	; 0x7e0
    c338:	99b5      	ldr	r1, [sp, #724]	; 0x2d4
    c33a:	f004 ffb1 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c33e:	e7ff      	b.n	c340 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1518>
    c340:	f8dd 17bc 	ldr.w	r1, [sp, #1980]	; 0x7bc
    c344:	f64c 4064 	movw	r0, #52324	; 0xcc64
    c348:	f2c0 0001 	movt	r0, #1
    c34c:	6802      	ldr	r2, [r0, #0]
    c34e:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    c352:	f005 ff5b 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c356:	e7ff      	b.n	c358 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1530>
    c358:	e7ff      	b.n	c35a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1532>
                self.v[x] ^= self.v[y];
    c35a:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    c35e:	280f      	cmp	r0, #15
    c360:	f202 826c 	bhi.w	e83c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a14>
    c364:	e7ff      	b.n	c366 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x153e>
    c366:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c36a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c36e:	1842      	adds	r2, r0, r1
    c370:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c374:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    c378:	2b0f      	cmp	r3, #15
    c37a:	92b2      	str	r2, [sp, #712]	; 0x2c8
    c37c:	f202 8268 	bhi.w	e850 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a28>
    c380:	e7ff      	b.n	c382 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x155a>
    c382:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c386:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c38a:	1842      	adds	r2, r0, r1
    c38c:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    c390:	f8dd c2c8 	ldr.w	ip, [sp, #712]	; 0x2c8
    c394:	ea83 030c 	eor.w	r3, r3, ip
    c398:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c39c:	f002 b811 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c3a0:	2005      	movs	r0, #5
    c3a2:	f8cd 07ec 	str.w	r0, [sp, #2028]	; 0x7ec
    c3a6:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    c3aa:	f2c0 0001 	movt	r0, #1
    c3ae:	6801      	ldr	r1, [r0, #0]
    c3b0:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    c3b4:	f004 ff38 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c3b8:	90b1      	str	r0, [sp, #708]	; 0x2c4
    c3ba:	e01f      	b.n	c3fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15d4>
    c3bc:	2001      	movs	r0, #1
    c3be:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    c3c2:	e015      	b.n	c3f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15c8>
    c3c4:	2000      	movs	r0, #0
    c3c6:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    c3ca:	e011      	b.n	c3f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15c8>
    c3cc:	2000      	movs	r0, #0
    c3ce:	f88d 0e1b 	strb.w	r0, [sp, #3611]	; 0xe1b
    c3d2:	f89d 1e1b 	ldrb.w	r1, [sp, #3611]	; 0xe1b
    c3d6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c3da:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c3de:	f004 ff98 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c3e2:	f8cd 0e1c 	str.w	r0, [sp, #3612]	; 0xe1c
    c3e6:	f8dd 0e1c 	ldr.w	r0, [sp, #3612]	; 0xe1c
    c3ea:	f8cd 07f4 	str.w	r0, [sp, #2036]	; 0x7f4
    c3ee:	e00a      	b.n	c406 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15de>
    c3f0:	f89d 07f3 	ldrb.w	r0, [sp, #2035]	; 0x7f3
    c3f4:	07c0      	lsls	r0, r0, #31
    c3f6:	2800      	cmp	r0, #0
    c3f8:	d112      	bne.n	c420 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15f8>
    c3fa:	e055      	b.n	c4a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1680>
    c3fc:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
    c3fe:	07c1      	lsls	r1, r0, #31
    c400:	2900      	cmp	r1, #0
    c402:	d1e3      	bne.n	c3cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15a4>
    c404:	e7de      	b.n	c3c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x159c>
    c406:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    c40a:	f20d 71f4 	addw	r1, sp, #2036	; 0x7f4
    c40e:	f004 ff0b 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c412:	90b0      	str	r0, [sp, #704]	; 0x2c0
    c414:	e7ff      	b.n	c416 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15ee>
    c416:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
    c418:	07c1      	lsls	r1, r0, #31
    c41a:	2900      	cmp	r1, #0
    c41c:	d1ce      	bne.n	c3bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1594>
    c41e:	e7d1      	b.n	c3c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x159c>
                trace!("[{:04x}] ADD Vx, Vy", self.pc);
    c420:	f64c 30d4 	movw	r0, #52180	; 0xcbd4
    c424:	f2c0 0001 	movt	r0, #1
    c428:	6801      	ldr	r1, [r0, #0]
    c42a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c42e:	f100 0212 	add.w	r2, r0, #18
    c432:	f8cd 2818 	str.w	r2, [sp, #2072]	; 0x818
    c436:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
    c43a:	f8cd 2d40 	str.w	r2, [sp, #3392]	; 0xd40
    c43e:	f646 63ef 	movw	r3, #28399	; 0x6eef
    c442:	f2c0 0301 	movt	r3, #1
    c446:	4610      	mov	r0, r2
    c448:	91af      	str	r1, [sp, #700]	; 0x2bc
    c44a:	4619      	mov	r1, r3
    c44c:	f7fe f8a5 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c450:	90ae      	str	r0, [sp, #696]	; 0x2b8
    c452:	91ad      	str	r1, [sp, #692]	; 0x2b4
    c454:	e7ff      	b.n	c456 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x162e>
    c456:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
    c458:	f8cd 0810 	str.w	r0, [sp, #2064]	; 0x810
    c45c:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
    c45e:	f8cd 1814 	str.w	r1, [sp, #2068]	; 0x814
    c462:	f24c 3218 	movw	r2, #49944	; 0xc318
    c466:	f2c0 0201 	movt	r2, #1
    c46a:	6812      	ldr	r2, [r2, #0]
    c46c:	466b      	mov	r3, sp
    c46e:	f04f 0c01 	mov.w	ip, #1
    c472:	f8c3 c008 	str.w	ip, [r3, #8]
    c476:	605a      	str	r2, [r3, #4]
    c478:	f8c3 c000 	str.w	ip, [r3]
    c47c:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    c480:	2202      	movs	r2, #2
    c482:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
    c486:	99af      	ldr	r1, [sp, #700]	; 0x2bc
    c488:	f004 ff0a 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c48c:	e7ff      	b.n	c48e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1666>
    c48e:	f8dd 17ec 	ldr.w	r1, [sp, #2028]	; 0x7ec
    c492:	f64c 30f4 	movw	r0, #52212	; 0xcbf4
    c496:	f2c0 0001 	movt	r0, #1
    c49a:	6802      	ldr	r2, [r0, #0]
    c49c:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    c4a0:	f005 feb4 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c4a4:	e7ff      	b.n	c4a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x167e>
    c4a6:	e7ff      	b.n	c4a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1680>
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    c4a8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c4ac:	280f      	cmp	r0, #15
    c4ae:	f202 81a7 	bhi.w	e800 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x39d8>
    c4b2:	e7ff      	b.n	c4b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x168c>
    c4b4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c4b8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c4bc:	1842      	adds	r2, r0, r1
    c4be:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c4c2:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    c4c6:	2b0f      	cmp	r3, #15
    c4c8:	92ac      	str	r2, [sp, #688]	; 0x2b0
    c4ca:	f202 81a3 	bhi.w	e814 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x39ec>
    c4ce:	e7ff      	b.n	c4d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x16a8>
    c4d0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c4d4:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c4d8:	1842      	adds	r2, r0, r1
    c4da:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c4de:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
    c4e0:	f002 fd72 	bl	efc8 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E>
    c4e4:	90ab      	str	r0, [sp, #684]	; 0x2ac
    c4e6:	91aa      	str	r1, [sp, #680]	; 0x2a8
    c4e8:	e7ff      	b.n	c4ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x16c2>
    c4ea:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
    c4ec:	f88d 0d46 	strb.w	r0, [sp, #3398]	; 0xd46
    c4f0:	99aa      	ldr	r1, [sp, #680]	; 0x2a8
    c4f2:	f001 0201 	and.w	r2, r1, #1
    c4f6:	f88d 2d47 	strb.w	r2, [sp, #3399]	; 0xd47
                self.v[x] = v;
    c4fa:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    c4fe:	2a0f      	cmp	r2, #15
    c500:	f202 8192 	bhi.w	e828 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a00>
    c504:	e7ff      	b.n	c506 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x16de>
    c506:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c50a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c50e:	1842      	adds	r2, r0, r1
    c510:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
    c512:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                self.v[0xf] = c as u8;
    c516:	9aaa      	ldr	r2, [sp, #680]	; 0x2a8
    c518:	f002 0c01 	and.w	ip, r2, #1
    c51c:	f880 c043 	strb.w	ip, [r0, #67]	; 0x43
        match (
    c520:	f001 bf4f 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c524:	2005      	movs	r0, #5
    c526:	f8cd 081c 	str.w	r0, [sp, #2076]	; 0x81c
    c52a:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    c52e:	f2c0 0001 	movt	r0, #1
    c532:	6801      	ldr	r1, [r0, #0]
    c534:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    c538:	f004 fe76 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c53c:	90a9      	str	r0, [sp, #676]	; 0x2a4
    c53e:	e01f      	b.n	c580 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1758>
    c540:	2001      	movs	r0, #1
    c542:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    c546:	e015      	b.n	c574 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x174c>
    c548:	2000      	movs	r0, #0
    c54a:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    c54e:	e011      	b.n	c574 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x174c>
    c550:	2000      	movs	r0, #0
    c552:	f88d 0e23 	strb.w	r0, [sp, #3619]	; 0xe23
    c556:	f89d 1e23 	ldrb.w	r1, [sp, #3619]	; 0xe23
    c55a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c55e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c562:	f004 fed6 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c566:	f8cd 0e24 	str.w	r0, [sp, #3620]	; 0xe24
    c56a:	f8dd 0e24 	ldr.w	r0, [sp, #3620]	; 0xe24
    c56e:	f8cd 0824 	str.w	r0, [sp, #2084]	; 0x824
    c572:	e00a      	b.n	c58a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1762>
    c574:	f89d 0823 	ldrb.w	r0, [sp, #2083]	; 0x823
    c578:	07c0      	lsls	r0, r0, #31
    c57a:	2800      	cmp	r0, #0
    c57c:	d112      	bne.n	c5a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x177c>
    c57e:	e055      	b.n	c62c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1804>
    c580:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
    c582:	07c1      	lsls	r1, r0, #31
    c584:	2900      	cmp	r1, #0
    c586:	d1e3      	bne.n	c550 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1728>
    c588:	e7de      	b.n	c548 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1720>
    c58a:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    c58e:	f60d 0124 	addw	r1, sp, #2084	; 0x824
    c592:	f004 fe49 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c596:	90a8      	str	r0, [sp, #672]	; 0x2a0
    c598:	e7ff      	b.n	c59a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1772>
    c59a:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
    c59c:	07c1      	lsls	r1, r0, #31
    c59e:	2900      	cmp	r1, #0
    c5a0:	d1ce      	bne.n	c540 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1718>
    c5a2:	e7d1      	b.n	c548 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1720>
                trace!("[{:04x}] SUB Vx, Vy", self.pc);
    c5a4:	f64c 3064 	movw	r0, #52068	; 0xcb64
    c5a8:	f2c0 0001 	movt	r0, #1
    c5ac:	6801      	ldr	r1, [r0, #0]
    c5ae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c5b2:	f100 0212 	add.w	r2, r0, #18
    c5b6:	f8cd 2848 	str.w	r2, [sp, #2120]	; 0x848
    c5ba:	f8dd 2848 	ldr.w	r2, [sp, #2120]	; 0x848
    c5be:	f8cd 2d38 	str.w	r2, [sp, #3384]	; 0xd38
    c5c2:	f646 63ef 	movw	r3, #28399	; 0x6eef
    c5c6:	f2c0 0301 	movt	r3, #1
    c5ca:	4610      	mov	r0, r2
    c5cc:	91a7      	str	r1, [sp, #668]	; 0x29c
    c5ce:	4619      	mov	r1, r3
    c5d0:	f7fd ffe3 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c5d4:	90a6      	str	r0, [sp, #664]	; 0x298
    c5d6:	91a5      	str	r1, [sp, #660]	; 0x294
    c5d8:	e7ff      	b.n	c5da <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x17b2>
    c5da:	98a6      	ldr	r0, [sp, #664]	; 0x298
    c5dc:	f8cd 0840 	str.w	r0, [sp, #2112]	; 0x840
    c5e0:	99a5      	ldr	r1, [sp, #660]	; 0x294
    c5e2:	f8cd 1844 	str.w	r1, [sp, #2116]	; 0x844
    c5e6:	f24c 3218 	movw	r2, #49944	; 0xc318
    c5ea:	f2c0 0201 	movt	r2, #1
    c5ee:	6812      	ldr	r2, [r2, #0]
    c5f0:	466b      	mov	r3, sp
    c5f2:	f04f 0c01 	mov.w	ip, #1
    c5f6:	f8c3 c008 	str.w	ip, [r3, #8]
    c5fa:	605a      	str	r2, [r3, #4]
    c5fc:	f8c3 c000 	str.w	ip, [r3]
    c600:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    c604:	2202      	movs	r2, #2
    c606:	f50d 6304 	add.w	r3, sp, #2112	; 0x840
    c60a:	99a7      	ldr	r1, [sp, #668]	; 0x29c
    c60c:	f004 fe48 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c610:	e7ff      	b.n	c612 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x17ea>
    c612:	f8dd 181c 	ldr.w	r1, [sp, #2076]	; 0x81c
    c616:	f64c 3084 	movw	r0, #52100	; 0xcb84
    c61a:	f2c0 0001 	movt	r0, #1
    c61e:	6802      	ldr	r2, [r0, #0]
    c620:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    c624:	f005 fdf2 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c628:	e7ff      	b.n	c62a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1802>
    c62a:	e7ff      	b.n	c62c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1804>
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    c62c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c630:	280f      	cmp	r0, #15
    c632:	f202 80c7 	bhi.w	e7c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x399c>
    c636:	e7ff      	b.n	c638 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1810>
    c638:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c63c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c640:	1842      	adds	r2, r0, r1
    c642:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c646:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    c64a:	2b0f      	cmp	r3, #15
    c64c:	92a4      	str	r2, [sp, #656]	; 0x290
    c64e:	f202 80c3 	bhi.w	e7d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x39b0>
    c652:	e7ff      	b.n	c654 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x182c>
    c654:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c658:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c65c:	1842      	adds	r2, r0, r1
    c65e:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c662:	98a4      	ldr	r0, [sp, #656]	; 0x290
    c664:	f002 fcdb 	bl	f01e <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE>
    c668:	90a3      	str	r0, [sp, #652]	; 0x28c
    c66a:	91a2      	str	r1, [sp, #648]	; 0x288
    c66c:	e7ff      	b.n	c66e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1846>
    c66e:	98a3      	ldr	r0, [sp, #652]	; 0x28c
    c670:	f88d 0d3e 	strb.w	r0, [sp, #3390]	; 0xd3e
    c674:	99a2      	ldr	r1, [sp, #648]	; 0x288
    c676:	f001 0201 	and.w	r2, r1, #1
    c67a:	f88d 2d3f 	strb.w	r2, [sp, #3391]	; 0xd3f
                self.v[x] = v;
    c67e:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    c682:	2a0f      	cmp	r2, #15
    c684:	f202 80b2 	bhi.w	e7ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x39c4>
    c688:	e7ff      	b.n	c68a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1862>
    c68a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c68e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c692:	1842      	adds	r2, r0, r1
    c694:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    c696:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    c69a:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    c69c:	f8dd c288 	ldr.w	ip, [sp, #648]	; 0x288
    c6a0:	ea22 020c 	bic.w	r2, r2, ip
    c6a4:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    c6a8:	f001 be8b 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c6ac:	2005      	movs	r0, #5
    c6ae:	f8cd 084c 	str.w	r0, [sp, #2124]	; 0x84c
    c6b2:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    c6b6:	f2c0 0001 	movt	r0, #1
    c6ba:	6801      	ldr	r1, [r0, #0]
    c6bc:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    c6c0:	f004 fdb2 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c6c4:	90a1      	str	r0, [sp, #644]	; 0x284
    c6c6:	e01f      	b.n	c708 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18e0>
    c6c8:	2001      	movs	r0, #1
    c6ca:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    c6ce:	e015      	b.n	c6fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18d4>
    c6d0:	2000      	movs	r0, #0
    c6d2:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    c6d6:	e011      	b.n	c6fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18d4>
    c6d8:	2000      	movs	r0, #0
    c6da:	f88d 0e2b 	strb.w	r0, [sp, #3627]	; 0xe2b
    c6de:	f89d 1e2b 	ldrb.w	r1, [sp, #3627]	; 0xe2b
    c6e2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c6e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c6ea:	f004 fe12 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c6ee:	f8cd 0e2c 	str.w	r0, [sp, #3628]	; 0xe2c
    c6f2:	f8dd 0e2c 	ldr.w	r0, [sp, #3628]	; 0xe2c
    c6f6:	f8cd 0854 	str.w	r0, [sp, #2132]	; 0x854
    c6fa:	e00a      	b.n	c712 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18ea>
    c6fc:	f89d 0853 	ldrb.w	r0, [sp, #2131]	; 0x853
    c700:	07c0      	lsls	r0, r0, #31
    c702:	2800      	cmp	r0, #0
    c704:	d112      	bne.n	c72c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1904>
    c706:	e055      	b.n	c7b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x198c>
    c708:	98a1      	ldr	r0, [sp, #644]	; 0x284
    c70a:	07c1      	lsls	r1, r0, #31
    c70c:	2900      	cmp	r1, #0
    c70e:	d1e3      	bne.n	c6d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18b0>
    c710:	e7de      	b.n	c6d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18a8>
    c712:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    c716:	f60d 0154 	addw	r1, sp, #2132	; 0x854
    c71a:	f004 fd85 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c71e:	90a0      	str	r0, [sp, #640]	; 0x280
    c720:	e7ff      	b.n	c722 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18fa>
    c722:	98a0      	ldr	r0, [sp, #640]	; 0x280
    c724:	07c1      	lsls	r1, r0, #31
    c726:	2900      	cmp	r1, #0
    c728:	d1ce      	bne.n	c6c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18a0>
    c72a:	e7d1      	b.n	c6d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18a8>
                trace!("[{:04x}] SHR Vx, Vy", self.pc);
    c72c:	f64c 20f4 	movw	r0, #51956	; 0xcaf4
    c730:	f2c0 0001 	movt	r0, #1
    c734:	6801      	ldr	r1, [r0, #0]
    c736:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c73a:	f100 0212 	add.w	r2, r0, #18
    c73e:	f8cd 2878 	str.w	r2, [sp, #2168]	; 0x878
    c742:	f8dd 2878 	ldr.w	r2, [sp, #2168]	; 0x878
    c746:	f8cd 2d34 	str.w	r2, [sp, #3380]	; 0xd34
    c74a:	f646 63ef 	movw	r3, #28399	; 0x6eef
    c74e:	f2c0 0301 	movt	r3, #1
    c752:	4610      	mov	r0, r2
    c754:	919f      	str	r1, [sp, #636]	; 0x27c
    c756:	4619      	mov	r1, r3
    c758:	f7fd ff1f 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c75c:	909e      	str	r0, [sp, #632]	; 0x278
    c75e:	919d      	str	r1, [sp, #628]	; 0x274
    c760:	e7ff      	b.n	c762 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x193a>
    c762:	989e      	ldr	r0, [sp, #632]	; 0x278
    c764:	f8cd 0870 	str.w	r0, [sp, #2160]	; 0x870
    c768:	999d      	ldr	r1, [sp, #628]	; 0x274
    c76a:	f8cd 1874 	str.w	r1, [sp, #2164]	; 0x874
    c76e:	f24c 3218 	movw	r2, #49944	; 0xc318
    c772:	f2c0 0201 	movt	r2, #1
    c776:	6812      	ldr	r2, [r2, #0]
    c778:	466b      	mov	r3, sp
    c77a:	f04f 0c01 	mov.w	ip, #1
    c77e:	f8c3 c008 	str.w	ip, [r3, #8]
    c782:	605a      	str	r2, [r3, #4]
    c784:	f8c3 c000 	str.w	ip, [r3]
    c788:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    c78c:	2202      	movs	r2, #2
    c78e:	f50d 6307 	add.w	r3, sp, #2160	; 0x870
    c792:	999f      	ldr	r1, [sp, #636]	; 0x27c
    c794:	f004 fd84 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c798:	e7ff      	b.n	c79a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1972>
    c79a:	f8dd 184c 	ldr.w	r1, [sp, #2124]	; 0x84c
    c79e:	f64c 3014 	movw	r0, #51988	; 0xcb14
    c7a2:	f2c0 0001 	movt	r0, #1
    c7a6:	6802      	ldr	r2, [r0, #0]
    c7a8:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    c7ac:	f005 fd2e 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c7b0:	e7ff      	b.n	c7b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x198a>
    c7b2:	e7ff      	b.n	c7b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x198c>
                self.v[0xf] = self.v[x] & 1;
    c7b4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c7b8:	280f      	cmp	r0, #15
    c7ba:	f201 87e5 	bhi.w	e788 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3960>
    c7be:	e7ff      	b.n	c7c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1998>
    c7c0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c7c4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c7c8:	1842      	adds	r2, r0, r1
    c7ca:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c7ce:	f002 0201 	and.w	r2, r2, #1
    c7d2:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shr(1);
    c7d6:	290f      	cmp	r1, #15
    c7d8:	f201 87e0 	bhi.w	e79c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3974>
    c7dc:	e7ff      	b.n	c7de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x19b6>
    c7de:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c7e2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c7e6:	1842      	adds	r2, r0, r1
    c7e8:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    c7ec:	2101      	movs	r1, #1
    c7ee:	f002 fbc7 	bl	ef80 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hd8fc987b7fb948dbE>
    c7f2:	909c      	str	r0, [sp, #624]	; 0x270
    c7f4:	e7ff      	b.n	c7f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x19ce>
    c7f6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c7fa:	280f      	cmp	r0, #15
    c7fc:	f201 87d8 	bhi.w	e7b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3988>
    c800:	e7ff      	b.n	c802 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x19da>
    c802:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c806:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c80a:	1842      	adds	r2, r0, r1
    c80c:	9b9c      	ldr	r3, [sp, #624]	; 0x270
    c80e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c812:	f001 bdd6 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c816:	2005      	movs	r0, #5
    c818:	f8cd 087c 	str.w	r0, [sp, #2172]	; 0x87c
    c81c:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    c820:	f2c0 0001 	movt	r0, #1
    c824:	6801      	ldr	r1, [r0, #0]
    c826:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    c82a:	f004 fcfd 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c82e:	909b      	str	r0, [sp, #620]	; 0x26c
    c830:	e01f      	b.n	c872 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a4a>
    c832:	2001      	movs	r0, #1
    c834:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    c838:	e015      	b.n	c866 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a3e>
    c83a:	2000      	movs	r0, #0
    c83c:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    c840:	e011      	b.n	c866 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a3e>
    c842:	2000      	movs	r0, #0
    c844:	f88d 0e33 	strb.w	r0, [sp, #3635]	; 0xe33
    c848:	f89d 1e33 	ldrb.w	r1, [sp, #3635]	; 0xe33
    c84c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c850:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c854:	f004 fd5d 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c858:	f8cd 0e34 	str.w	r0, [sp, #3636]	; 0xe34
    c85c:	f8dd 0e34 	ldr.w	r0, [sp, #3636]	; 0xe34
    c860:	f8cd 0884 	str.w	r0, [sp, #2180]	; 0x884
    c864:	e00a      	b.n	c87c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a54>
    c866:	f89d 0883 	ldrb.w	r0, [sp, #2179]	; 0x883
    c86a:	07c0      	lsls	r0, r0, #31
    c86c:	2800      	cmp	r0, #0
    c86e:	d112      	bne.n	c896 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a6e>
    c870:	e055      	b.n	c91e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1af6>
    c872:	989b      	ldr	r0, [sp, #620]	; 0x26c
    c874:	07c1      	lsls	r1, r0, #31
    c876:	2900      	cmp	r1, #0
    c878:	d1e3      	bne.n	c842 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a1a>
    c87a:	e7de      	b.n	c83a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a12>
    c87c:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    c880:	f60d 0184 	addw	r1, sp, #2180	; 0x884
    c884:	f004 fcd0 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c888:	909a      	str	r0, [sp, #616]	; 0x268
    c88a:	e7ff      	b.n	c88c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a64>
    c88c:	989a      	ldr	r0, [sp, #616]	; 0x268
    c88e:	07c1      	lsls	r1, r0, #31
    c890:	2900      	cmp	r1, #0
    c892:	d1ce      	bne.n	c832 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a0a>
    c894:	e7d1      	b.n	c83a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a12>
                trace!("[{:04x}] SUBN Vx, Vy", self.pc);
    c896:	f64c 2084 	movw	r0, #51844	; 0xca84
    c89a:	f2c0 0001 	movt	r0, #1
    c89e:	6801      	ldr	r1, [r0, #0]
    c8a0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c8a4:	f100 0212 	add.w	r2, r0, #18
    c8a8:	f8cd 28a8 	str.w	r2, [sp, #2216]	; 0x8a8
    c8ac:	f8dd 28a8 	ldr.w	r2, [sp, #2216]	; 0x8a8
    c8b0:	f8cd 2d2c 	str.w	r2, [sp, #3372]	; 0xd2c
    c8b4:	f646 63ef 	movw	r3, #28399	; 0x6eef
    c8b8:	f2c0 0301 	movt	r3, #1
    c8bc:	4610      	mov	r0, r2
    c8be:	9199      	str	r1, [sp, #612]	; 0x264
    c8c0:	4619      	mov	r1, r3
    c8c2:	f7fd fe6a 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c8c6:	9098      	str	r0, [sp, #608]	; 0x260
    c8c8:	9197      	str	r1, [sp, #604]	; 0x25c
    c8ca:	e7ff      	b.n	c8cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1aa4>
    c8cc:	9898      	ldr	r0, [sp, #608]	; 0x260
    c8ce:	f8cd 08a0 	str.w	r0, [sp, #2208]	; 0x8a0
    c8d2:	9997      	ldr	r1, [sp, #604]	; 0x25c
    c8d4:	f8cd 18a4 	str.w	r1, [sp, #2212]	; 0x8a4
    c8d8:	f24c 3218 	movw	r2, #49944	; 0xc318
    c8dc:	f2c0 0201 	movt	r2, #1
    c8e0:	6812      	ldr	r2, [r2, #0]
    c8e2:	466b      	mov	r3, sp
    c8e4:	f04f 0c01 	mov.w	ip, #1
    c8e8:	f8c3 c008 	str.w	ip, [r3, #8]
    c8ec:	605a      	str	r2, [r3, #4]
    c8ee:	f8c3 c000 	str.w	ip, [r3]
    c8f2:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    c8f6:	2202      	movs	r2, #2
    c8f8:	f50d 630a 	add.w	r3, sp, #2208	; 0x8a0
    c8fc:	9999      	ldr	r1, [sp, #612]	; 0x264
    c8fe:	f004 fccf 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c902:	e7ff      	b.n	c904 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1adc>
    c904:	f8dd 187c 	ldr.w	r1, [sp, #2172]	; 0x87c
    c908:	f64c 20a4 	movw	r0, #51876	; 0xcaa4
    c90c:	f2c0 0001 	movt	r0, #1
    c910:	6802      	ldr	r2, [r0, #0]
    c912:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    c916:	f005 fc79 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c91a:	e7ff      	b.n	c91c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1af4>
    c91c:	e7ff      	b.n	c91e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1af6>
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    c91e:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    c922:	280f      	cmp	r0, #15
    c924:	f201 8712 	bhi.w	e74c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3924>
    c928:	e7ff      	b.n	c92a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b02>
    c92a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c92e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c932:	1842      	adds	r2, r0, r1
    c934:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c938:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    c93c:	2b0f      	cmp	r3, #15
    c93e:	9296      	str	r2, [sp, #600]	; 0x258
    c940:	f201 870e 	bhi.w	e760 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3938>
    c944:	e7ff      	b.n	c946 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b1e>
    c946:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c94a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c94e:	1842      	adds	r2, r0, r1
    c950:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c954:	9896      	ldr	r0, [sp, #600]	; 0x258
    c956:	f002 fb62 	bl	f01e <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE>
    c95a:	9095      	str	r0, [sp, #596]	; 0x254
    c95c:	9194      	str	r1, [sp, #592]	; 0x250
    c95e:	e7ff      	b.n	c960 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b38>
    c960:	9895      	ldr	r0, [sp, #596]	; 0x254
    c962:	f88d 0d32 	strb.w	r0, [sp, #3378]	; 0xd32
    c966:	9994      	ldr	r1, [sp, #592]	; 0x250
    c968:	f001 0201 	and.w	r2, r1, #1
    c96c:	f88d 2d33 	strb.w	r2, [sp, #3379]	; 0xd33
                self.v[x] = v;
    c970:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    c974:	2a0f      	cmp	r2, #15
    c976:	f201 86fd 	bhi.w	e774 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x394c>
    c97a:	e7ff      	b.n	c97c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b54>
    c97c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c980:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c984:	1842      	adds	r2, r0, r1
    c986:	9b95      	ldr	r3, [sp, #596]	; 0x254
    c988:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    c98c:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    c98e:	f8dd c250 	ldr.w	ip, [sp, #592]	; 0x250
    c992:	ea22 020c 	bic.w	r2, r2, ip
    c996:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    c99a:	f001 bd12 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c99e:	2005      	movs	r0, #5
    c9a0:	f8cd 08ac 	str.w	r0, [sp, #2220]	; 0x8ac
    c9a4:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    c9a8:	f2c0 0001 	movt	r0, #1
    c9ac:	6801      	ldr	r1, [r0, #0]
    c9ae:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    c9b2:	f004 fc39 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c9b6:	9093      	str	r0, [sp, #588]	; 0x24c
    c9b8:	e01f      	b.n	c9fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bd2>
    c9ba:	2001      	movs	r0, #1
    c9bc:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    c9c0:	e015      	b.n	c9ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bc6>
    c9c2:	2000      	movs	r0, #0
    c9c4:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    c9c8:	e011      	b.n	c9ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bc6>
    c9ca:	2000      	movs	r0, #0
    c9cc:	f88d 0e3b 	strb.w	r0, [sp, #3643]	; 0xe3b
    c9d0:	f89d 1e3b 	ldrb.w	r1, [sp, #3643]	; 0xe3b
    c9d4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c9d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c9dc:	f004 fc99 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c9e0:	f8cd 0e3c 	str.w	r0, [sp, #3644]	; 0xe3c
    c9e4:	f8dd 0e3c 	ldr.w	r0, [sp, #3644]	; 0xe3c
    c9e8:	f8cd 08b4 	str.w	r0, [sp, #2228]	; 0x8b4
    c9ec:	e00a      	b.n	ca04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bdc>
    c9ee:	f89d 08b3 	ldrb.w	r0, [sp, #2227]	; 0x8b3
    c9f2:	07c0      	lsls	r0, r0, #31
    c9f4:	2800      	cmp	r0, #0
    c9f6:	d112      	bne.n	ca1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bf6>
    c9f8:	e055      	b.n	caa6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c7e>
    c9fa:	9893      	ldr	r0, [sp, #588]	; 0x24c
    c9fc:	07c1      	lsls	r1, r0, #31
    c9fe:	2900      	cmp	r1, #0
    ca00:	d1e3      	bne.n	c9ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ba2>
    ca02:	e7de      	b.n	c9c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b9a>
    ca04:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    ca08:	f60d 01b4 	addw	r1, sp, #2228	; 0x8b4
    ca0c:	f004 fc0c 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    ca10:	9092      	str	r0, [sp, #584]	; 0x248
    ca12:	e7ff      	b.n	ca14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bec>
    ca14:	9892      	ldr	r0, [sp, #584]	; 0x248
    ca16:	07c1      	lsls	r1, r0, #31
    ca18:	2900      	cmp	r1, #0
    ca1a:	d1ce      	bne.n	c9ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b92>
    ca1c:	e7d1      	b.n	c9c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b9a>
                trace!("[{:04x}] SHL Vx, Vy", self.pc);
    ca1e:	f64c 2010 	movw	r0, #51728	; 0xca10
    ca22:	f2c0 0001 	movt	r0, #1
    ca26:	6801      	ldr	r1, [r0, #0]
    ca28:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ca2c:	f100 0212 	add.w	r2, r0, #18
    ca30:	f8cd 28d8 	str.w	r2, [sp, #2264]	; 0x8d8
    ca34:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
    ca38:	f8cd 2d28 	str.w	r2, [sp, #3368]	; 0xd28
    ca3c:	f646 63ef 	movw	r3, #28399	; 0x6eef
    ca40:	f2c0 0301 	movt	r3, #1
    ca44:	4610      	mov	r0, r2
    ca46:	9191      	str	r1, [sp, #580]	; 0x244
    ca48:	4619      	mov	r1, r3
    ca4a:	f7fd fda6 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ca4e:	9090      	str	r0, [sp, #576]	; 0x240
    ca50:	918f      	str	r1, [sp, #572]	; 0x23c
    ca52:	e7ff      	b.n	ca54 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c2c>
    ca54:	9890      	ldr	r0, [sp, #576]	; 0x240
    ca56:	f8cd 08d0 	str.w	r0, [sp, #2256]	; 0x8d0
    ca5a:	998f      	ldr	r1, [sp, #572]	; 0x23c
    ca5c:	f8cd 18d4 	str.w	r1, [sp, #2260]	; 0x8d4
    ca60:	f24c 3218 	movw	r2, #49944	; 0xc318
    ca64:	f2c0 0201 	movt	r2, #1
    ca68:	6812      	ldr	r2, [r2, #0]
    ca6a:	466b      	mov	r3, sp
    ca6c:	f04f 0c01 	mov.w	ip, #1
    ca70:	f8c3 c008 	str.w	ip, [r3, #8]
    ca74:	605a      	str	r2, [r3, #4]
    ca76:	f8c3 c000 	str.w	ip, [r3]
    ca7a:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    ca7e:	2202      	movs	r2, #2
    ca80:	f50d 630d 	add.w	r3, sp, #2256	; 0x8d0
    ca84:	9991      	ldr	r1, [sp, #580]	; 0x244
    ca86:	f004 fc0b 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    ca8a:	e7ff      	b.n	ca8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c64>
    ca8c:	f8dd 18ac 	ldr.w	r1, [sp, #2220]	; 0x8ac
    ca90:	f64c 2030 	movw	r0, #51760	; 0xca30
    ca94:	f2c0 0001 	movt	r0, #1
    ca98:	6802      	ldr	r2, [r0, #0]
    ca9a:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    ca9e:	f005 fbb5 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    caa2:	e7ff      	b.n	caa4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c7c>
    caa4:	e7ff      	b.n	caa6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c7e>
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    caa6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    caaa:	280f      	cmp	r0, #15
    caac:	f201 8630 	bhi.w	e710 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38e8>
    cab0:	e7ff      	b.n	cab2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c8a>
    cab2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cab6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    caba:	1842      	adds	r2, r0, r1
    cabc:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cac0:	09d2      	lsrs	r2, r2, #7
    cac2:	928e      	str	r2, [sp, #568]	; 0x238
    cac4:	e7ff      	b.n	cac6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c9e>
    cac6:	988e      	ldr	r0, [sp, #568]	; 0x238
    cac8:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    cacc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shl(1);
    cad0:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    cad4:	2a0f      	cmp	r2, #15
    cad6:	f201 8625 	bhi.w	e724 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38fc>
    cada:	e7ff      	b.n	cadc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1cb4>
    cadc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cae0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cae4:	1842      	adds	r2, r0, r1
    cae6:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    caea:	2101      	movs	r1, #1
    caec:	f002 fa37 	bl	ef5e <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17he0c9c1743ed48494E>
    caf0:	908d      	str	r0, [sp, #564]	; 0x234
    caf2:	e7ff      	b.n	caf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ccc>
    caf4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    caf8:	280f      	cmp	r0, #15
    cafa:	f201 861d 	bhi.w	e738 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3910>
    cafe:	e7ff      	b.n	cb00 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1cd8>
    cb00:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cb04:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cb08:	1842      	adds	r2, r0, r1
    cb0a:	9b8d      	ldr	r3, [sp, #564]	; 0x234
    cb0c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    cb10:	f001 bc57 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    cb14:	2005      	movs	r0, #5
    cb16:	f8cd 08dc 	str.w	r0, [sp, #2268]	; 0x8dc
    cb1a:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    cb1e:	f2c0 0001 	movt	r0, #1
    cb22:	6801      	ldr	r1, [r0, #0]
    cb24:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    cb28:	f004 fb7e 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cb2c:	908c      	str	r0, [sp, #560]	; 0x230
    cb2e:	e01f      	b.n	cb70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d48>
    cb30:	2001      	movs	r0, #1
    cb32:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    cb36:	e015      	b.n	cb64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d3c>
    cb38:	2000      	movs	r0, #0
    cb3a:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    cb3e:	e011      	b.n	cb64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d3c>
    cb40:	2000      	movs	r0, #0
    cb42:	f88d 0e43 	strb.w	r0, [sp, #3651]	; 0xe43
    cb46:	f89d 1e43 	ldrb.w	r1, [sp, #3651]	; 0xe43
    cb4a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    cb4e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cb52:	f004 fbde 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    cb56:	f8cd 0e44 	str.w	r0, [sp, #3652]	; 0xe44
    cb5a:	f8dd 0e44 	ldr.w	r0, [sp, #3652]	; 0xe44
    cb5e:	f8cd 08e4 	str.w	r0, [sp, #2276]	; 0x8e4
    cb62:	e00a      	b.n	cb7a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d52>
    cb64:	f89d 08e3 	ldrb.w	r0, [sp, #2275]	; 0x8e3
    cb68:	07c0      	lsls	r0, r0, #31
    cb6a:	2800      	cmp	r0, #0
    cb6c:	d112      	bne.n	cb94 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d6c>
    cb6e:	e055      	b.n	cc1c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1df4>
    cb70:	988c      	ldr	r0, [sp, #560]	; 0x230
    cb72:	07c1      	lsls	r1, r0, #31
    cb74:	2900      	cmp	r1, #0
    cb76:	d1e3      	bne.n	cb40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d18>
    cb78:	e7de      	b.n	cb38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d10>
    cb7a:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    cb7e:	f60d 01e4 	addw	r1, sp, #2276	; 0x8e4
    cb82:	f004 fb51 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cb86:	908b      	str	r0, [sp, #556]	; 0x22c
    cb88:	e7ff      	b.n	cb8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d62>
    cb8a:	988b      	ldr	r0, [sp, #556]	; 0x22c
    cb8c:	07c1      	lsls	r1, r0, #31
    cb8e:	2900      	cmp	r1, #0
    cb90:	d1ce      	bne.n	cb30 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d08>
    cb92:	e7d1      	b.n	cb38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d10>
                trace!("[{:04x}] SNE Vx, Vy", self.pc);
    cb94:	f64c 10b0 	movw	r0, #51632	; 0xc9b0
    cb98:	f2c0 0001 	movt	r0, #1
    cb9c:	6801      	ldr	r1, [r0, #0]
    cb9e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cba2:	f100 0212 	add.w	r2, r0, #18
    cba6:	f8cd 2908 	str.w	r2, [sp, #2312]	; 0x908
    cbaa:	f8dd 2908 	ldr.w	r2, [sp, #2312]	; 0x908
    cbae:	f8cd 2d24 	str.w	r2, [sp, #3364]	; 0xd24
    cbb2:	f646 63ef 	movw	r3, #28399	; 0x6eef
    cbb6:	f2c0 0301 	movt	r3, #1
    cbba:	4610      	mov	r0, r2
    cbbc:	918a      	str	r1, [sp, #552]	; 0x228
    cbbe:	4619      	mov	r1, r3
    cbc0:	f7fd fceb 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cbc4:	9089      	str	r0, [sp, #548]	; 0x224
    cbc6:	9188      	str	r1, [sp, #544]	; 0x220
    cbc8:	e7ff      	b.n	cbca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1da2>
    cbca:	9889      	ldr	r0, [sp, #548]	; 0x224
    cbcc:	f8cd 0900 	str.w	r0, [sp, #2304]	; 0x900
    cbd0:	9988      	ldr	r1, [sp, #544]	; 0x220
    cbd2:	f8cd 1904 	str.w	r1, [sp, #2308]	; 0x904
    cbd6:	f24c 3218 	movw	r2, #49944	; 0xc318
    cbda:	f2c0 0201 	movt	r2, #1
    cbde:	6812      	ldr	r2, [r2, #0]
    cbe0:	466b      	mov	r3, sp
    cbe2:	f04f 0c01 	mov.w	ip, #1
    cbe6:	f8c3 c008 	str.w	ip, [r3, #8]
    cbea:	605a      	str	r2, [r3, #4]
    cbec:	f8c3 c000 	str.w	ip, [r3]
    cbf0:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    cbf4:	2202      	movs	r2, #2
    cbf6:	f50d 6310 	add.w	r3, sp, #2304	; 0x900
    cbfa:	998a      	ldr	r1, [sp, #552]	; 0x228
    cbfc:	f004 fb50 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    cc00:	e7ff      	b.n	cc02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1dda>
    cc02:	f8dd 18dc 	ldr.w	r1, [sp, #2268]	; 0x8dc
    cc06:	f64c 10d0 	movw	r0, #51664	; 0xc9d0
    cc0a:	f2c0 0001 	movt	r0, #1
    cc0e:	6802      	ldr	r2, [r0, #0]
    cc10:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    cc14:	f005 fafa 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cc18:	e7ff      	b.n	cc1a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1df2>
    cc1a:	e7ff      	b.n	cc1c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1df4>
                if self.v[x] != self.v[y] {
    cc1c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cc20:	280f      	cmp	r0, #15
    cc22:	f201 8561 	bhi.w	e6e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38c0>
    cc26:	e7ff      	b.n	cc28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e00>
    cc28:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cc2c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cc30:	1842      	adds	r2, r0, r1
    cc32:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cc36:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    cc3a:	2b0f      	cmp	r3, #15
    cc3c:	9287      	str	r2, [sp, #540]	; 0x21c
    cc3e:	f201 855d 	bhi.w	e6fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38d4>
    cc42:	e7ff      	b.n	cc44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e1c>
    cc44:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cc48:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    cc4c:	1842      	adds	r2, r0, r1
    cc4e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cc52:	9b87      	ldr	r3, [sp, #540]	; 0x21c
    cc54:	fa5f fc83 	uxtb.w	ip, r3
    cc58:	4594      	cmp	ip, r2
    cc5a:	d006      	beq.n	cc6a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e42>
    cc5c:	e7ff      	b.n	cc5e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e36>
                    self.next();
    cc5e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cc62:	f001 fee0 	bl	ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    cc66:	e7ff      	b.n	cc68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e40>
                if self.v[x] != self.v[y] {
    cc68:	e7ff      	b.n	cc6a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e42>
        match (
    cc6a:	f001 bbaa 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    cc6e:	2005      	movs	r0, #5
    cc70:	f8cd 090c 	str.w	r0, [sp, #2316]	; 0x90c
    cc74:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    cc78:	f2c0 0001 	movt	r0, #1
    cc7c:	6801      	ldr	r1, [r0, #0]
    cc7e:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    cc82:	f004 fad1 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cc86:	9086      	str	r0, [sp, #536]	; 0x218
    cc88:	e01f      	b.n	ccca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ea2>
    cc8a:	2001      	movs	r0, #1
    cc8c:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    cc90:	e015      	b.n	ccbe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e96>
    cc92:	2000      	movs	r0, #0
    cc94:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    cc98:	e011      	b.n	ccbe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e96>
    cc9a:	2000      	movs	r0, #0
    cc9c:	f88d 0e4b 	strb.w	r0, [sp, #3659]	; 0xe4b
    cca0:	f89d 1e4b 	ldrb.w	r1, [sp, #3659]	; 0xe4b
    cca4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    cca8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ccac:	f004 fb31 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    ccb0:	f8cd 0e4c 	str.w	r0, [sp, #3660]	; 0xe4c
    ccb4:	f8dd 0e4c 	ldr.w	r0, [sp, #3660]	; 0xe4c
    ccb8:	f8cd 0914 	str.w	r0, [sp, #2324]	; 0x914
    ccbc:	e00a      	b.n	ccd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1eac>
    ccbe:	f89d 0913 	ldrb.w	r0, [sp, #2323]	; 0x913
    ccc2:	07c0      	lsls	r0, r0, #31
    ccc4:	2800      	cmp	r0, #0
    ccc6:	d112      	bne.n	ccee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ec6>
    ccc8:	e055      	b.n	cd76 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f4e>
    ccca:	9886      	ldr	r0, [sp, #536]	; 0x218
    cccc:	07c1      	lsls	r1, r0, #31
    ccce:	2900      	cmp	r1, #0
    ccd0:	d1e3      	bne.n	cc9a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e72>
    ccd2:	e7de      	b.n	cc92 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e6a>
    ccd4:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    ccd8:	f60d 1114 	addw	r1, sp, #2324	; 0x914
    ccdc:	f004 faa4 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cce0:	9085      	str	r0, [sp, #532]	; 0x214
    cce2:	e7ff      	b.n	cce4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ebc>
    cce4:	9885      	ldr	r0, [sp, #532]	; 0x214
    cce6:	07c1      	lsls	r1, r0, #31
    cce8:	2900      	cmp	r1, #0
    ccea:	d1ce      	bne.n	cc8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e62>
    ccec:	e7d1      	b.n	cc92 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e6a>
                trace!("[{:04x}] LD I, nnn", self.pc);
    ccee:	f64c 1070 	movw	r0, #51568	; 0xc970
    ccf2:	f2c0 0001 	movt	r0, #1
    ccf6:	6801      	ldr	r1, [r0, #0]
    ccf8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ccfc:	f100 0212 	add.w	r2, r0, #18
    cd00:	f8cd 2938 	str.w	r2, [sp, #2360]	; 0x938
    cd04:	f8dd 2938 	ldr.w	r2, [sp, #2360]	; 0x938
    cd08:	f8cd 2d20 	str.w	r2, [sp, #3360]	; 0xd20
    cd0c:	f646 63ef 	movw	r3, #28399	; 0x6eef
    cd10:	f2c0 0301 	movt	r3, #1
    cd14:	4610      	mov	r0, r2
    cd16:	9184      	str	r1, [sp, #528]	; 0x210
    cd18:	4619      	mov	r1, r3
    cd1a:	f7fd fc3e 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cd1e:	9083      	str	r0, [sp, #524]	; 0x20c
    cd20:	9182      	str	r1, [sp, #520]	; 0x208
    cd22:	e7ff      	b.n	cd24 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1efc>
    cd24:	9883      	ldr	r0, [sp, #524]	; 0x20c
    cd26:	f8cd 0930 	str.w	r0, [sp, #2352]	; 0x930
    cd2a:	9982      	ldr	r1, [sp, #520]	; 0x208
    cd2c:	f8cd 1934 	str.w	r1, [sp, #2356]	; 0x934
    cd30:	f24c 3218 	movw	r2, #49944	; 0xc318
    cd34:	f2c0 0201 	movt	r2, #1
    cd38:	6812      	ldr	r2, [r2, #0]
    cd3a:	466b      	mov	r3, sp
    cd3c:	f04f 0c01 	mov.w	ip, #1
    cd40:	f8c3 c008 	str.w	ip, [r3, #8]
    cd44:	605a      	str	r2, [r3, #4]
    cd46:	f8c3 c000 	str.w	ip, [r3]
    cd4a:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    cd4e:	2202      	movs	r2, #2
    cd50:	f50d 6313 	add.w	r3, sp, #2352	; 0x930
    cd54:	9984      	ldr	r1, [sp, #528]	; 0x210
    cd56:	f004 faa3 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    cd5a:	e7ff      	b.n	cd5c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f34>
    cd5c:	f8dd 190c 	ldr.w	r1, [sp, #2316]	; 0x90c
    cd60:	f64c 1090 	movw	r0, #51600	; 0xc990
    cd64:	f2c0 0001 	movt	r0, #1
    cd68:	6802      	ldr	r2, [r0, #0]
    cd6a:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    cd6e:	f005 fa4d 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cd72:	e7ff      	b.n	cd74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f4c>
    cd74:	e7ff      	b.n	cd76 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f4e>
                self.i = nnn;
    cd76:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    cd7a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    cd7e:	8208      	strh	r0, [r1, #16]
        match (
    cd80:	f001 bb1f 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    cd84:	2005      	movs	r0, #5
    cd86:	f8cd 093c 	str.w	r0, [sp, #2364]	; 0x93c
    cd8a:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    cd8e:	f2c0 0001 	movt	r0, #1
    cd92:	6801      	ldr	r1, [r0, #0]
    cd94:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    cd98:	f004 fa46 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cd9c:	9081      	str	r0, [sp, #516]	; 0x204
    cd9e:	e01f      	b.n	cde0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fb8>
    cda0:	2001      	movs	r0, #1
    cda2:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    cda6:	e015      	b.n	cdd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fac>
    cda8:	2000      	movs	r0, #0
    cdaa:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    cdae:	e011      	b.n	cdd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fac>
    cdb0:	2000      	movs	r0, #0
    cdb2:	f88d 0e53 	strb.w	r0, [sp, #3667]	; 0xe53
    cdb6:	f89d 1e53 	ldrb.w	r1, [sp, #3667]	; 0xe53
    cdba:	f644 206c 	movw	r0, #19052	; 0x4a6c
    cdbe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cdc2:	f004 faa6 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    cdc6:	f8cd 0e54 	str.w	r0, [sp, #3668]	; 0xe54
    cdca:	f8dd 0e54 	ldr.w	r0, [sp, #3668]	; 0xe54
    cdce:	f8cd 0944 	str.w	r0, [sp, #2372]	; 0x944
    cdd2:	e00a      	b.n	cdea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fc2>
    cdd4:	f89d 0943 	ldrb.w	r0, [sp, #2371]	; 0x943
    cdd8:	07c0      	lsls	r0, r0, #31
    cdda:	2800      	cmp	r0, #0
    cddc:	d112      	bne.n	ce04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fdc>
    cdde:	e055      	b.n	ce8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2064>
    cde0:	9881      	ldr	r0, [sp, #516]	; 0x204
    cde2:	07c1      	lsls	r1, r0, #31
    cde4:	2900      	cmp	r1, #0
    cde6:	d1e3      	bne.n	cdb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f88>
    cde8:	e7de      	b.n	cda8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f80>
    cdea:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    cdee:	f60d 1144 	addw	r1, sp, #2372	; 0x944
    cdf2:	f004 fa19 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cdf6:	9080      	str	r0, [sp, #512]	; 0x200
    cdf8:	e7ff      	b.n	cdfa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fd2>
    cdfa:	9880      	ldr	r0, [sp, #512]	; 0x200
    cdfc:	07c1      	lsls	r1, r0, #31
    cdfe:	2900      	cmp	r1, #0
    ce00:	d1ce      	bne.n	cda0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f78>
    ce02:	e7d1      	b.n	cda8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f80>
                trace!("[{:04x}] JP V0, nnn", self.pc);
    ce04:	f64c 1030 	movw	r0, #51504	; 0xc930
    ce08:	f2c0 0001 	movt	r0, #1
    ce0c:	6801      	ldr	r1, [r0, #0]
    ce0e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ce12:	f100 0212 	add.w	r2, r0, #18
    ce16:	f8cd 2968 	str.w	r2, [sp, #2408]	; 0x968
    ce1a:	f8dd 2968 	ldr.w	r2, [sp, #2408]	; 0x968
    ce1e:	f8cd 2d1c 	str.w	r2, [sp, #3356]	; 0xd1c
    ce22:	f646 63ef 	movw	r3, #28399	; 0x6eef
    ce26:	f2c0 0301 	movt	r3, #1
    ce2a:	4610      	mov	r0, r2
    ce2c:	917f      	str	r1, [sp, #508]	; 0x1fc
    ce2e:	4619      	mov	r1, r3
    ce30:	f7fd fbb3 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ce34:	907e      	str	r0, [sp, #504]	; 0x1f8
    ce36:	917d      	str	r1, [sp, #500]	; 0x1f4
    ce38:	e7ff      	b.n	ce3a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2012>
    ce3a:	987e      	ldr	r0, [sp, #504]	; 0x1f8
    ce3c:	f8cd 0960 	str.w	r0, [sp, #2400]	; 0x960
    ce40:	997d      	ldr	r1, [sp, #500]	; 0x1f4
    ce42:	f8cd 1964 	str.w	r1, [sp, #2404]	; 0x964
    ce46:	f24c 3218 	movw	r2, #49944	; 0xc318
    ce4a:	f2c0 0201 	movt	r2, #1
    ce4e:	6812      	ldr	r2, [r2, #0]
    ce50:	466b      	mov	r3, sp
    ce52:	f04f 0c01 	mov.w	ip, #1
    ce56:	f8c3 c008 	str.w	ip, [r3, #8]
    ce5a:	605a      	str	r2, [r3, #4]
    ce5c:	f8c3 c000 	str.w	ip, [r3]
    ce60:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    ce64:	2202      	movs	r2, #2
    ce66:	f50d 6316 	add.w	r3, sp, #2400	; 0x960
    ce6a:	997f      	ldr	r1, [sp, #508]	; 0x1fc
    ce6c:	f004 fa18 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    ce70:	e7ff      	b.n	ce72 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x204a>
    ce72:	f8dd 193c 	ldr.w	r1, [sp, #2364]	; 0x93c
    ce76:	f64c 1050 	movw	r0, #51536	; 0xc950
    ce7a:	f2c0 0001 	movt	r0, #1
    ce7e:	6802      	ldr	r2, [r0, #0]
    ce80:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    ce84:	f005 f9c2 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ce88:	e7ff      	b.n	ce8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2062>
    ce8a:	e7ff      	b.n	ce8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2064>
                self.jump(nnn.wrapping_add(self.v[0].into()).wrapping_sub(2));
    ce8c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ce90:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    ce94:	f004 fa51 	bl	1133a <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E>
    ce98:	907c      	str	r0, [sp, #496]	; 0x1f0
    ce9a:	e7ff      	b.n	ce9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2074>
    ce9c:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    cea0:	997c      	ldr	r1, [sp, #496]	; 0x1f0
    cea2:	f002 f8e8 	bl	f076 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E>
    cea6:	907b      	str	r0, [sp, #492]	; 0x1ec
    cea8:	e7ff      	b.n	ceaa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2082>
    ceaa:	2102      	movs	r1, #2
    ceac:	987b      	ldr	r0, [sp, #492]	; 0x1ec
    ceae:	f002 f8f3 	bl	f098 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E>
    ceb2:	907a      	str	r0, [sp, #488]	; 0x1e8
    ceb4:	e7ff      	b.n	ceb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x208e>
    ceb6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ceba:	997a      	ldr	r1, [sp, #488]	; 0x1e8
    cebc:	f001 fd70 	bl	e9a0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    cec0:	e7ff      	b.n	cec2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x209a>
        match (
    cec2:	f001 ba7e 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    cec6:	2005      	movs	r0, #5
    cec8:	f8cd 096c 	str.w	r0, [sp, #2412]	; 0x96c
    cecc:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    ced0:	f2c0 0001 	movt	r0, #1
    ced4:	6801      	ldr	r1, [r0, #0]
    ced6:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    ceda:	f004 f9a5 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cede:	9079      	str	r0, [sp, #484]	; 0x1e4
    cee0:	e01f      	b.n	cf22 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20fa>
    cee2:	2001      	movs	r0, #1
    cee4:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    cee8:	e015      	b.n	cf16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20ee>
    ceea:	2000      	movs	r0, #0
    ceec:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    cef0:	e011      	b.n	cf16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20ee>
    cef2:	2000      	movs	r0, #0
    cef4:	f88d 0e5b 	strb.w	r0, [sp, #3675]	; 0xe5b
    cef8:	f89d 1e5b 	ldrb.w	r1, [sp, #3675]	; 0xe5b
    cefc:	f644 206c 	movw	r0, #19052	; 0x4a6c
    cf00:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cf04:	f004 fa05 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    cf08:	f8cd 0e5c 	str.w	r0, [sp, #3676]	; 0xe5c
    cf0c:	f8dd 0e5c 	ldr.w	r0, [sp, #3676]	; 0xe5c
    cf10:	f8cd 0974 	str.w	r0, [sp, #2420]	; 0x974
    cf14:	e00a      	b.n	cf2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2104>
    cf16:	f89d 0973 	ldrb.w	r0, [sp, #2419]	; 0x973
    cf1a:	07c0      	lsls	r0, r0, #31
    cf1c:	2800      	cmp	r0, #0
    cf1e:	d112      	bne.n	cf46 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x211e>
    cf20:	e055      	b.n	cfce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21a6>
    cf22:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    cf24:	07c1      	lsls	r1, r0, #31
    cf26:	2900      	cmp	r1, #0
    cf28:	d1e3      	bne.n	cef2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20ca>
    cf2a:	e7de      	b.n	ceea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20c2>
    cf2c:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    cf30:	f60d 1174 	addw	r1, sp, #2420	; 0x974
    cf34:	f004 f978 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cf38:	9078      	str	r0, [sp, #480]	; 0x1e0
    cf3a:	e7ff      	b.n	cf3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2114>
    cf3c:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    cf3e:	07c1      	lsls	r1, r0, #31
    cf40:	2900      	cmp	r1, #0
    cf42:	d1ce      	bne.n	cee2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20ba>
    cf44:	e7d1      	b.n	ceea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20c2>
                trace!("[{:04x}] RND Vx, kk", self.pc);
    cf46:	f64c 00e0 	movw	r0, #51424	; 0xc8e0
    cf4a:	f2c0 0001 	movt	r0, #1
    cf4e:	6801      	ldr	r1, [r0, #0]
    cf50:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cf54:	f100 0212 	add.w	r2, r0, #18
    cf58:	f8cd 2998 	str.w	r2, [sp, #2456]	; 0x998
    cf5c:	f8dd 2998 	ldr.w	r2, [sp, #2456]	; 0x998
    cf60:	f8cd 2d18 	str.w	r2, [sp, #3352]	; 0xd18
    cf64:	f646 63ef 	movw	r3, #28399	; 0x6eef
    cf68:	f2c0 0301 	movt	r3, #1
    cf6c:	4610      	mov	r0, r2
    cf6e:	9177      	str	r1, [sp, #476]	; 0x1dc
    cf70:	4619      	mov	r1, r3
    cf72:	f7fd fb12 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cf76:	9076      	str	r0, [sp, #472]	; 0x1d8
    cf78:	9175      	str	r1, [sp, #468]	; 0x1d4
    cf7a:	e7ff      	b.n	cf7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2154>
    cf7c:	9876      	ldr	r0, [sp, #472]	; 0x1d8
    cf7e:	f8cd 0990 	str.w	r0, [sp, #2448]	; 0x990
    cf82:	9975      	ldr	r1, [sp, #468]	; 0x1d4
    cf84:	f8cd 1994 	str.w	r1, [sp, #2452]	; 0x994
    cf88:	f24c 3218 	movw	r2, #49944	; 0xc318
    cf8c:	f2c0 0201 	movt	r2, #1
    cf90:	6812      	ldr	r2, [r2, #0]
    cf92:	466b      	mov	r3, sp
    cf94:	f04f 0c01 	mov.w	ip, #1
    cf98:	f8c3 c008 	str.w	ip, [r3, #8]
    cf9c:	605a      	str	r2, [r3, #4]
    cf9e:	f8c3 c000 	str.w	ip, [r3]
    cfa2:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    cfa6:	2202      	movs	r2, #2
    cfa8:	f50d 6319 	add.w	r3, sp, #2448	; 0x990
    cfac:	9977      	ldr	r1, [sp, #476]	; 0x1dc
    cfae:	f004 f977 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    cfb2:	e7ff      	b.n	cfb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x218c>
    cfb4:	f8dd 196c 	ldr.w	r1, [sp, #2412]	; 0x96c
    cfb8:	f64c 1000 	movw	r0, #51456	; 0xc900
    cfbc:	f2c0 0001 	movt	r0, #1
    cfc0:	6802      	ldr	r2, [r0, #0]
    cfc2:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    cfc6:	f005 f921 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cfca:	e7ff      	b.n	cfcc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21a4>
    cfcc:	e7ff      	b.n	cfce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21a6>
    cfce:	f241 0048 	movw	r0, #4168	; 0x1048
                self.v[x] = self.hw.rand() & kk;
    cfd2:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    cfd6:	4408      	add	r0, r1
    cfd8:	f002 fa15 	bl	f406 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17hd3173c320d2551cfE>
    cfdc:	9074      	str	r0, [sp, #464]	; 0x1d0
    cfde:	e7ff      	b.n	cfe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21b8>
    cfe0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cfe4:	280f      	cmp	r0, #15
    cfe6:	f201 8375 	bhi.w	e6d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38ac>
    cfea:	e7ff      	b.n	cfec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21c4>
    cfec:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cff0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cff4:	1842      	adds	r2, r0, r1
    cff6:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
    cff8:	f8dd c45c 	ldr.w	ip, [sp, #1116]	; 0x45c
    cffc:	ea03 0e0c 	and.w	lr, r3, ip
    d000:	f882 e034 	strb.w	lr, [r2, #52]	; 0x34
        match (
    d004:	f001 b9dd 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d008:	2005      	movs	r0, #5
    d00a:	f8cd 099c 	str.w	r0, [sp, #2460]	; 0x99c
    d00e:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    d012:	f2c0 0001 	movt	r0, #1
    d016:	6801      	ldr	r1, [r0, #0]
    d018:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    d01c:	f004 f904 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d020:	9073      	str	r0, [sp, #460]	; 0x1cc
    d022:	e01f      	b.n	d064 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x223c>
    d024:	2001      	movs	r0, #1
    d026:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    d02a:	e015      	b.n	d058 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2230>
    d02c:	2000      	movs	r0, #0
    d02e:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    d032:	e011      	b.n	d058 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2230>
    d034:	2000      	movs	r0, #0
    d036:	f88d 0e63 	strb.w	r0, [sp, #3683]	; 0xe63
    d03a:	f89d 1e63 	ldrb.w	r1, [sp, #3683]	; 0xe63
    d03e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d042:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d046:	f004 f964 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d04a:	f8cd 0e64 	str.w	r0, [sp, #3684]	; 0xe64
    d04e:	f8dd 0e64 	ldr.w	r0, [sp, #3684]	; 0xe64
    d052:	f8cd 09a4 	str.w	r0, [sp, #2468]	; 0x9a4
    d056:	e00a      	b.n	d06e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2246>
    d058:	f89d 09a3 	ldrb.w	r0, [sp, #2467]	; 0x9a3
    d05c:	07c0      	lsls	r0, r0, #31
    d05e:	2800      	cmp	r0, #0
    d060:	d112      	bne.n	d088 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2260>
    d062:	e055      	b.n	d110 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22e8>
    d064:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    d066:	07c1      	lsls	r1, r0, #31
    d068:	2900      	cmp	r1, #0
    d06a:	d1e3      	bne.n	d034 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x220c>
    d06c:	e7de      	b.n	d02c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2204>
    d06e:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    d072:	f60d 11a4 	addw	r1, sp, #2468	; 0x9a4
    d076:	f004 f8d7 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d07a:	9072      	str	r0, [sp, #456]	; 0x1c8
    d07c:	e7ff      	b.n	d07e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2256>
    d07e:	9872      	ldr	r0, [sp, #456]	; 0x1c8
    d080:	07c1      	lsls	r1, r0, #31
    d082:	2900      	cmp	r1, #0
    d084:	d1ce      	bne.n	d024 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21fc>
    d086:	e7d1      	b.n	d02c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2204>
                trace!("[{:04x}] DRW Vx, Vy, n", self.pc);
    d088:	f24c 7084 	movw	r0, #51076	; 0xc784
    d08c:	f2c0 0001 	movt	r0, #1
    d090:	6801      	ldr	r1, [r0, #0]
    d092:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d096:	f100 0212 	add.w	r2, r0, #18
    d09a:	f8cd 29c8 	str.w	r2, [sp, #2504]	; 0x9c8
    d09e:	f8dd 29c8 	ldr.w	r2, [sp, #2504]	; 0x9c8
    d0a2:	f8cd 2cdc 	str.w	r2, [sp, #3292]	; 0xcdc
    d0a6:	f646 63ef 	movw	r3, #28399	; 0x6eef
    d0aa:	f2c0 0301 	movt	r3, #1
    d0ae:	4610      	mov	r0, r2
    d0b0:	9171      	str	r1, [sp, #452]	; 0x1c4
    d0b2:	4619      	mov	r1, r3
    d0b4:	f7fd fa71 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d0b8:	9070      	str	r0, [sp, #448]	; 0x1c0
    d0ba:	916f      	str	r1, [sp, #444]	; 0x1bc
    d0bc:	e7ff      	b.n	d0be <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2296>
    d0be:	9870      	ldr	r0, [sp, #448]	; 0x1c0
    d0c0:	f8cd 09c0 	str.w	r0, [sp, #2496]	; 0x9c0
    d0c4:	996f      	ldr	r1, [sp, #444]	; 0x1bc
    d0c6:	f8cd 19c4 	str.w	r1, [sp, #2500]	; 0x9c4
    d0ca:	f24c 3218 	movw	r2, #49944	; 0xc318
    d0ce:	f2c0 0201 	movt	r2, #1
    d0d2:	6812      	ldr	r2, [r2, #0]
    d0d4:	466b      	mov	r3, sp
    d0d6:	f04f 0c01 	mov.w	ip, #1
    d0da:	f8c3 c008 	str.w	ip, [r3, #8]
    d0de:	605a      	str	r2, [r3, #4]
    d0e0:	f8c3 c000 	str.w	ip, [r3]
    d0e4:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    d0e8:	2202      	movs	r2, #2
    d0ea:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
    d0ee:	9971      	ldr	r1, [sp, #452]	; 0x1c4
    d0f0:	f004 f8d6 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d0f4:	e7ff      	b.n	d0f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22ce>
    d0f6:	f8dd 199c 	ldr.w	r1, [sp, #2460]	; 0x99c
    d0fa:	f24c 70a4 	movw	r0, #51108	; 0xc7a4
    d0fe:	f2c0 0001 	movt	r0, #1
    d102:	6802      	ldr	r2, [r0, #0]
    d104:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    d108:	f005 f880 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d10c:	e7ff      	b.n	d10e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22e6>
    d10e:	e7ff      	b.n	d110 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22e8>
                let basex = self.v[x] as usize;
    d110:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d114:	280f      	cmp	r0, #15
    d116:	f201 826b 	bhi.w	e5f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37c8>
    d11a:	e7ff      	b.n	d11c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22f4>
    d11c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d120:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d124:	1842      	adds	r2, r0, r1
    d126:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d12a:	4613      	mov	r3, r2
    d12c:	f8cd 2ce0 	str.w	r2, [sp, #3296]	; 0xce0
                let basey = self.v[y] as usize;
    d130:	f8dd 2460 	ldr.w	r2, [sp, #1120]	; 0x460
    d134:	2a0f      	cmp	r2, #15
    d136:	936e      	str	r3, [sp, #440]	; 0x1b8
    d138:	f201 8264 	bhi.w	e604 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37dc>
    d13c:	e7ff      	b.n	d13e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2316>
    d13e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d142:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d146:	1842      	adds	r2, r0, r1
    d148:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d14c:	4613      	mov	r3, r2
    d14e:	f8cd 2ce4 	str.w	r2, [sp, #3300]	; 0xce4
    d152:	f241 0248 	movw	r2, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    d156:	4410      	add	r0, r2
    d158:	936d      	str	r3, [sp, #436]	; 0x1b4
    d15a:	f002 fb37 	bl	f7cc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbb5c150f8fc596c2E>
    d15e:	906c      	str	r0, [sp, #432]	; 0x1b0
    d160:	916b      	str	r1, [sp, #428]	; 0x1ac
    d162:	e7ff      	b.n	d164 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x233c>
    d164:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    d166:	f8cd 0ce8 	str.w	r0, [sp, #3304]	; 0xce8
    d16a:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    d16c:	f8cd 1cec 	str.w	r1, [sp, #3308]	; 0xcec
    d170:	2200      	movs	r2, #0
                self.v[0xf] = 0;
    d172:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    d176:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                for y in 0..n {
    d17a:	f8cd 29cc 	str.w	r2, [sp, #2508]	; 0x9cc
    d17e:	f8dd 2470 	ldr.w	r2, [sp, #1136]	; 0x470
    d182:	f8cd 29d0 	str.w	r2, [sp, #2512]	; 0x9d0
    d186:	f8dd 09cc 	ldr.w	r0, [sp, #2508]	; 0x9cc
    d18a:	f8dd 19d0 	ldr.w	r1, [sp, #2512]	; 0x9d0
    d18e:	f004 fdc9 	bl	11d24 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    d192:	906a      	str	r0, [sp, #424]	; 0x1a8
    d194:	9169      	str	r1, [sp, #420]	; 0x1a4
    d196:	e7ff      	b.n	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2370>
    d198:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    d19a:	f8cd 09d4 	str.w	r0, [sp, #2516]	; 0x9d4
    d19e:	9969      	ldr	r1, [sp, #420]	; 0x1a4
    d1a0:	f8cd 19d8 	str.w	r1, [sp, #2520]	; 0x9d8
    d1a4:	e7ff      	b.n	d1a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x237e>
    d1a6:	f60d 10d4 	addw	r0, sp, #2516	; 0x9d4
    d1aa:	f004 fd30 	bl	11c0e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    d1ae:	f8cd 19e0 	str.w	r1, [sp, #2528]	; 0x9e0
    d1b2:	f8cd 09dc 	str.w	r0, [sp, #2524]	; 0x9dc
    d1b6:	e7ff      	b.n	d1b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2390>
    d1b8:	f8dd 09dc 	ldr.w	r0, [sp, #2524]	; 0x9dc
    d1bc:	2800      	cmp	r0, #0
    d1be:	d001      	beq.n	d1c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x239c>
    d1c0:	e7ff      	b.n	d1c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x239a>
    d1c2:	e002      	b.n	d1ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x23a2>
        match (
    d1c4:	f001 b8fd 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
                for y in 0..n {
    d1c8:	defe      	udf	#254	; 0xfe
    d1ca:	f8dd 09e0 	ldr.w	r0, [sp, #2528]	; 0x9e0
    d1ce:	f8cd 0cf0 	str.w	r0, [sp, #3312]	; 0xcf0
    d1d2:	f8cd 0cf4 	str.w	r0, [sp, #3316]	; 0xcf4
    d1d6:	f8cd 0cf8 	str.w	r0, [sp, #3320]	; 0xcf8
                    let b = self.mem[self.i as usize + y];
    d1da:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d1de:	8a0a      	ldrh	r2, [r1, #16]
    d1e0:	1813      	adds	r3, r2, r0
    d1e2:	469c      	mov	ip, r3
    d1e4:	4293      	cmp	r3, r2
    d1e6:	9068      	str	r0, [sp, #416]	; 0x1a0
    d1e8:	f8cd c19c 	str.w	ip, [sp, #412]	; 0x19c
    d1ec:	f0c1 8214 	bcc.w	e618 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37f0>
    d1f0:	e7ff      	b.n	d1f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x23ca>
    d1f2:	2000      	movs	r0, #0
    d1f4:	9967      	ldr	r1, [sp, #412]	; 0x19c
    d1f6:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    d1fa:	f041 8219 	bne.w	e630 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3808>
    d1fe:	e7ff      	b.n	d200 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x23d8>
    d200:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d204:	9967      	ldr	r1, [sp, #412]	; 0x19c
    d206:	1842      	adds	r2, r0, r1
    d208:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d20c:	4613      	mov	r3, r2
    d20e:	f88d 2cff 	strb.w	r2, [sp, #3327]	; 0xcff
                    let vramy = (y + basey) % h;
    d212:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
    d214:	f8dd c1b4 	ldr.w	ip, [sp, #436]	; 0x1b4
    d218:	eb02 0e0c 	add.w	lr, r2, ip
    d21c:	4674      	mov	r4, lr
    d21e:	4596      	cmp	lr, r2
    d220:	9366      	str	r3, [sp, #408]	; 0x198
    d222:	9465      	str	r4, [sp, #404]	; 0x194
    d224:	f0c1 820e 	bcc.w	e644 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x381c>
    d228:	e7ff      	b.n	d22a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2402>
    d22a:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    d22c:	2800      	cmp	r0, #0
    d22e:	f001 8215 	beq.w	e65c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3834>
    d232:	e7ff      	b.n	d234 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x240c>
    d234:	9865      	ldr	r0, [sp, #404]	; 0x194
    d236:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    d238:	fbb0 f2f1 	udiv	r2, r0, r1
    d23c:	fb02 0211 	mls	r2, r2, r1, r0
    d240:	4613      	mov	r3, r2
    d242:	f8cd 2d00 	str.w	r2, [sp, #3328]	; 0xd00
    d246:	2200      	movs	r2, #0
                    for x in 0..8 {
    d248:	f8cd 29e4 	str.w	r2, [sp, #2532]	; 0x9e4
    d24c:	2208      	movs	r2, #8
    d24e:	f8cd 29e8 	str.w	r2, [sp, #2536]	; 0x9e8
    d252:	f8dd 09e4 	ldr.w	r0, [sp, #2532]	; 0x9e4
    d256:	f8dd 19e8 	ldr.w	r1, [sp, #2536]	; 0x9e8
    d25a:	9364      	str	r3, [sp, #400]	; 0x190
    d25c:	f004 fd62 	bl	11d24 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    d260:	9063      	str	r0, [sp, #396]	; 0x18c
    d262:	9162      	str	r1, [sp, #392]	; 0x188
    d264:	e7ff      	b.n	d266 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x243e>
    d266:	9863      	ldr	r0, [sp, #396]	; 0x18c
    d268:	f8cd 09ec 	str.w	r0, [sp, #2540]	; 0x9ec
    d26c:	9962      	ldr	r1, [sp, #392]	; 0x188
    d26e:	f8cd 19f0 	str.w	r1, [sp, #2544]	; 0x9f0
    d272:	e7ff      	b.n	d274 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x244c>
    d274:	f60d 10ec 	addw	r0, sp, #2540	; 0x9ec
    d278:	f004 fcc9 	bl	11c0e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    d27c:	f8cd 19f8 	str.w	r1, [sp, #2552]	; 0x9f8
    d280:	f8cd 09f4 	str.w	r0, [sp, #2548]	; 0x9f4
    d284:	e7ff      	b.n	d286 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x245e>
    d286:	f8dd 09f4 	ldr.w	r0, [sp, #2548]	; 0x9f4
    d28a:	2800      	cmp	r0, #0
    d28c:	d001      	beq.n	d292 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x246a>
    d28e:	e7ff      	b.n	d290 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2468>
    d290:	e001      	b.n	d296 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x246e>
                for y in 0..n {
    d292:	e788      	b.n	d1a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x237e>
                    for x in 0..8 {
    d294:	defe      	udf	#254	; 0xfe
    d296:	f8dd 09f8 	ldr.w	r0, [sp, #2552]	; 0x9f8
    d29a:	f8cd 0d04 	str.w	r0, [sp, #3332]	; 0xd04
    d29e:	f8cd 0d08 	str.w	r0, [sp, #3336]	; 0xd08
    d2a2:	f8cd 0d0c 	str.w	r0, [sp, #3340]	; 0xd0c
                        let vramx = (x + basex) % w;
    d2a6:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    d2a8:	1842      	adds	r2, r0, r1
    d2aa:	4613      	mov	r3, r2
    d2ac:	4282      	cmp	r2, r0
    d2ae:	9061      	str	r0, [sp, #388]	; 0x184
    d2b0:	9360      	str	r3, [sp, #384]	; 0x180
    d2b2:	f0c1 81df 	bcc.w	e674 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x384c>
    d2b6:	e7ff      	b.n	d2b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2490>
    d2b8:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    d2ba:	2800      	cmp	r0, #0
    d2bc:	f001 81e6 	beq.w	e68c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3864>
    d2c0:	e7ff      	b.n	d2c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x249a>
    d2c2:	9860      	ldr	r0, [sp, #384]	; 0x180
    d2c4:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    d2c6:	fbb0 f2f1 	udiv	r2, r0, r1
    d2ca:	fb02 0211 	mls	r2, r2, r1, r0
    d2ce:	4613      	mov	r3, r2
    d2d0:	f8cd 2d10 	str.w	r2, [sp, #3344]	; 0xd10
                        let src = (b & 1 << (7 - x)) > 0;
    d2d4:	9a61      	ldr	r2, [sp, #388]	; 0x184
    d2d6:	f1c2 0c07 	rsb	ip, r2, #7
    d2da:	f04f 0e07 	mov.w	lr, #7
    d2de:	4596      	cmp	lr, r2
    d2e0:	935f      	str	r3, [sp, #380]	; 0x17c
    d2e2:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
    d2e6:	f0c1 81dd 	bcc.w	e6a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x387c>
    d2ea:	e7ff      	b.n	d2ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x24c4>
    d2ec:	985e      	ldr	r0, [sp, #376]	; 0x178
    d2ee:	f000 0107 	and.w	r1, r0, #7
    d2f2:	2201      	movs	r2, #1
    d2f4:	fa02 f101 	lsl.w	r1, r2, r1
    d2f8:	08c2      	lsrs	r2, r0, #3
    d2fa:	2a00      	cmp	r2, #0
    d2fc:	915d      	str	r1, [sp, #372]	; 0x174
    d2fe:	f041 81dd 	bne.w	e6bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3894>
    d302:	e7ff      	b.n	d304 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x24dc>
    d304:	9866      	ldr	r0, [sp, #408]	; 0x198
    d306:	995d      	ldr	r1, [sp, #372]	; 0x174
    d308:	ea00 0201 	and.w	r2, r0, r1
    d30c:	b2d2      	uxtb	r2, r2
    d30e:	2a00      	cmp	r2, #0
    d310:	bf18      	it	ne
    d312:	2201      	movne	r2, #1
    d314:	4613      	mov	r3, r2
    d316:	f88d 2d16 	strb.w	r2, [sp, #3350]	; 0xd16
    d31a:	f241 0248 	movw	r2, #4168	; 0x1048
                        let dst = self.hw.vram_get(vramx, vramy);
    d31e:	f8dd c490 	ldr.w	ip, [sp, #1168]	; 0x490
    d322:	eb0c 0002 	add.w	r0, ip, r2
    d326:	995f      	ldr	r1, [sp, #380]	; 0x17c
    d328:	9a64      	ldr	r2, [sp, #400]	; 0x190
    d32a:	935c      	str	r3, [sp, #368]	; 0x170
    d32c:	f002 f997 	bl	f65e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE>
    d330:	4601      	mov	r1, r0
    d332:	f88d 0d17 	strb.w	r0, [sp, #3351]	; 0xd17
    d336:	915b      	str	r1, [sp, #364]	; 0x16c
    d338:	e7ff      	b.n	d33a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2512>
                        self.v[0xf] |= (src && dst) as u8;
    d33a:	985c      	ldr	r0, [sp, #368]	; 0x170
    d33c:	07c1      	lsls	r1, r0, #31
    d33e:	2900      	cmp	r1, #0
    d340:	d108      	bne.n	d354 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x252c>
    d342:	e003      	b.n	d34c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2524>
    d344:	2001      	movs	r0, #1
    d346:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    d34a:	e008      	b.n	d35e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2536>
    d34c:	2000      	movs	r0, #0
    d34e:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    d352:	e004      	b.n	d35e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2536>
    d354:	985b      	ldr	r0, [sp, #364]	; 0x16c
    d356:	07c1      	lsls	r1, r0, #31
    d358:	2900      	cmp	r1, #0
    d35a:	d1f3      	bne.n	d344 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x251c>
    d35c:	e7f6      	b.n	d34c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2524>
    d35e:	f89d 09ff 	ldrb.w	r0, [sp, #2559]	; 0x9ff
    d362:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d366:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    d36a:	4310      	orrs	r0, r2
    d36c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    d370:	f241 0048 	movw	r0, #4168	; 0x1048
                        self.hw.vram_set(vramx, vramy, src ^ dst);
    d374:	4408      	add	r0, r1
    d376:	9a5c      	ldr	r2, [sp, #368]	; 0x170
    d378:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    d37a:	ea82 0c03 	eor.w	ip, r2, r3
    d37e:	f00c 0301 	and.w	r3, ip, #1
    d382:	995f      	ldr	r1, [sp, #380]	; 0x17c
    d384:	9a64      	ldr	r2, [sp, #400]	; 0x190
    d386:	f002 f864 	bl	f452 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE>
    d38a:	e7ff      	b.n	d38c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2564>
                    for x in 0..8 {
    d38c:	e772      	b.n	d274 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x244c>
    d38e:	2005      	movs	r0, #5
    d390:	f8cd 0a00 	str.w	r0, [sp, #2560]	; 0xa00
    d394:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    d398:	f2c0 0001 	movt	r0, #1
    d39c:	6801      	ldr	r1, [r0, #0]
    d39e:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    d3a2:	f003 ff41 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d3a6:	905a      	str	r0, [sp, #360]	; 0x168
    d3a8:	e01f      	b.n	d3ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25c2>
    d3aa:	2001      	movs	r0, #1
    d3ac:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    d3b0:	e015      	b.n	d3de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25b6>
    d3b2:	2000      	movs	r0, #0
    d3b4:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    d3b8:	e011      	b.n	d3de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25b6>
    d3ba:	2000      	movs	r0, #0
    d3bc:	f88d 0e6b 	strb.w	r0, [sp, #3691]	; 0xe6b
    d3c0:	f89d 1e6b 	ldrb.w	r1, [sp, #3691]	; 0xe6b
    d3c4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d3c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d3cc:	f003 ffa1 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d3d0:	f8cd 0e6c 	str.w	r0, [sp, #3692]	; 0xe6c
    d3d4:	f8dd 0e6c 	ldr.w	r0, [sp, #3692]	; 0xe6c
    d3d8:	f8cd 0a08 	str.w	r0, [sp, #2568]	; 0xa08
    d3dc:	e00a      	b.n	d3f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25cc>
    d3de:	f89d 0a07 	ldrb.w	r0, [sp, #2567]	; 0xa07
    d3e2:	07c0      	lsls	r0, r0, #31
    d3e4:	2800      	cmp	r0, #0
    d3e6:	d112      	bne.n	d40e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25e6>
    d3e8:	e055      	b.n	d496 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x266e>
    d3ea:	985a      	ldr	r0, [sp, #360]	; 0x168
    d3ec:	07c1      	lsls	r1, r0, #31
    d3ee:	2900      	cmp	r1, #0
    d3f0:	d1e3      	bne.n	d3ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2592>
    d3f2:	e7de      	b.n	d3b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x258a>
    d3f4:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    d3f8:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
    d3fc:	f003 ff14 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d400:	9059      	str	r0, [sp, #356]	; 0x164
    d402:	e7ff      	b.n	d404 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25dc>
    d404:	9859      	ldr	r0, [sp, #356]	; 0x164
    d406:	07c1      	lsls	r1, r0, #31
    d408:	2900      	cmp	r1, #0
    d40a:	d1ce      	bne.n	d3aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2582>
    d40c:	e7d1      	b.n	d3b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x258a>
                trace!("[{:04x}] SKP Vx", self.pc);
    d40e:	f24c 7030 	movw	r0, #50992	; 0xc730
    d412:	f2c0 0001 	movt	r0, #1
    d416:	6801      	ldr	r1, [r0, #0]
    d418:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d41c:	f100 0212 	add.w	r2, r0, #18
    d420:	f8cd 2a2c 	str.w	r2, [sp, #2604]	; 0xa2c
    d424:	f8dd 2a2c 	ldr.w	r2, [sp, #2604]	; 0xa2c
    d428:	f8cd 2cd8 	str.w	r2, [sp, #3288]	; 0xcd8
    d42c:	f646 63ef 	movw	r3, #28399	; 0x6eef
    d430:	f2c0 0301 	movt	r3, #1
    d434:	4610      	mov	r0, r2
    d436:	9158      	str	r1, [sp, #352]	; 0x160
    d438:	4619      	mov	r1, r3
    d43a:	f7fd f8ae 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d43e:	9057      	str	r0, [sp, #348]	; 0x15c
    d440:	9156      	str	r1, [sp, #344]	; 0x158
    d442:	e7ff      	b.n	d444 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x261c>
    d444:	9857      	ldr	r0, [sp, #348]	; 0x15c
    d446:	f8cd 0a24 	str.w	r0, [sp, #2596]	; 0xa24
    d44a:	9956      	ldr	r1, [sp, #344]	; 0x158
    d44c:	f8cd 1a28 	str.w	r1, [sp, #2600]	; 0xa28
    d450:	f24c 3218 	movw	r2, #49944	; 0xc318
    d454:	f2c0 0201 	movt	r2, #1
    d458:	6812      	ldr	r2, [r2, #0]
    d45a:	466b      	mov	r3, sp
    d45c:	f04f 0c01 	mov.w	ip, #1
    d460:	f8c3 c008 	str.w	ip, [r3, #8]
    d464:	605a      	str	r2, [r3, #4]
    d466:	f8c3 c000 	str.w	ip, [r3]
    d46a:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    d46e:	2202      	movs	r2, #2
    d470:	f60d 2324 	addw	r3, sp, #2596	; 0xa24
    d474:	9958      	ldr	r1, [sp, #352]	; 0x160
    d476:	f003 ff13 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d47a:	e7ff      	b.n	d47c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2654>
    d47c:	f8dd 1a00 	ldr.w	r1, [sp, #2560]	; 0xa00
    d480:	f24c 7050 	movw	r0, #51024	; 0xc750
    d484:	f2c0 0001 	movt	r0, #1
    d488:	6802      	ldr	r2, [r0, #0]
    d48a:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    d48e:	f004 febd 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d492:	e7ff      	b.n	d494 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x266c>
    d494:	e7ff      	b.n	d496 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x266e>
    d496:	f241 0048 	movw	r0, #4168	; 0x1048
                if self.hw.key(self.v[x]) {
    d49a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d49e:	4408      	add	r0, r1
    d4a0:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    d4a4:	2a0f      	cmp	r2, #15
    d4a6:	9055      	str	r0, [sp, #340]	; 0x154
    d4a8:	f201 8098 	bhi.w	e5dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37b4>
    d4ac:	e7ff      	b.n	d4ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2686>
    d4ae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d4b2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d4b6:	1842      	adds	r2, r0, r1
    d4b8:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    d4bc:	9855      	ldr	r0, [sp, #340]	; 0x154
    d4be:	f001 ffa7 	bl	f410 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E>
    d4c2:	9054      	str	r0, [sp, #336]	; 0x150
    d4c4:	e7ff      	b.n	d4c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x269e>
    d4c6:	9854      	ldr	r0, [sp, #336]	; 0x150
    d4c8:	07c1      	lsls	r1, r0, #31
    d4ca:	2900      	cmp	r1, #0
    d4cc:	d006      	beq.n	d4dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26b4>
    d4ce:	e7ff      	b.n	d4d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26a8>
                    self.next();
    d4d0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d4d4:	f001 faa7 	bl	ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    d4d8:	e7ff      	b.n	d4da <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26b2>
                if self.hw.key(self.v[x]) {
    d4da:	e7ff      	b.n	d4dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26b4>
        match (
    d4dc:	f000 bf71 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d4e0:	2005      	movs	r0, #5
    d4e2:	f8cd 0a30 	str.w	r0, [sp, #2608]	; 0xa30
    d4e6:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    d4ea:	f2c0 0001 	movt	r0, #1
    d4ee:	6801      	ldr	r1, [r0, #0]
    d4f0:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    d4f4:	f003 fe98 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d4f8:	9053      	str	r0, [sp, #332]	; 0x14c
    d4fa:	e01f      	b.n	d53c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2714>
    d4fc:	2001      	movs	r0, #1
    d4fe:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    d502:	e015      	b.n	d530 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2708>
    d504:	2000      	movs	r0, #0
    d506:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    d50a:	e011      	b.n	d530 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2708>
    d50c:	2000      	movs	r0, #0
    d50e:	f88d 0e73 	strb.w	r0, [sp, #3699]	; 0xe73
    d512:	f89d 1e73 	ldrb.w	r1, [sp, #3699]	; 0xe73
    d516:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d51a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d51e:	f003 fef8 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d522:	f8cd 0e74 	str.w	r0, [sp, #3700]	; 0xe74
    d526:	f8dd 0e74 	ldr.w	r0, [sp, #3700]	; 0xe74
    d52a:	f8cd 0a38 	str.w	r0, [sp, #2616]	; 0xa38
    d52e:	e00a      	b.n	d546 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x271e>
    d530:	f89d 0a37 	ldrb.w	r0, [sp, #2615]	; 0xa37
    d534:	07c0      	lsls	r0, r0, #31
    d536:	2800      	cmp	r0, #0
    d538:	d112      	bne.n	d560 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2738>
    d53a:	e055      	b.n	d5e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27c0>
    d53c:	9853      	ldr	r0, [sp, #332]	; 0x14c
    d53e:	07c1      	lsls	r1, r0, #31
    d540:	2900      	cmp	r1, #0
    d542:	d1e3      	bne.n	d50c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26e4>
    d544:	e7de      	b.n	d504 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26dc>
    d546:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    d54a:	f60d 2138 	addw	r1, sp, #2616	; 0xa38
    d54e:	f003 fe6b 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d552:	9052      	str	r0, [sp, #328]	; 0x148
    d554:	e7ff      	b.n	d556 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x272e>
    d556:	9852      	ldr	r0, [sp, #328]	; 0x148
    d558:	07c1      	lsls	r1, r0, #31
    d55a:	2900      	cmp	r1, #0
    d55c:	d1ce      	bne.n	d4fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26d4>
    d55e:	e7d1      	b.n	d504 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26dc>
                trace!("[{:04x}] SKNP Vx", self.pc);
    d560:	f24c 60ec 	movw	r0, #50924	; 0xc6ec
    d564:	f2c0 0001 	movt	r0, #1
    d568:	6801      	ldr	r1, [r0, #0]
    d56a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d56e:	f100 0212 	add.w	r2, r0, #18
    d572:	f8cd 2a5c 	str.w	r2, [sp, #2652]	; 0xa5c
    d576:	f8dd 2a5c 	ldr.w	r2, [sp, #2652]	; 0xa5c
    d57a:	f8cd 2cd4 	str.w	r2, [sp, #3284]	; 0xcd4
    d57e:	f646 63ef 	movw	r3, #28399	; 0x6eef
    d582:	f2c0 0301 	movt	r3, #1
    d586:	4610      	mov	r0, r2
    d588:	9151      	str	r1, [sp, #324]	; 0x144
    d58a:	4619      	mov	r1, r3
    d58c:	f7fd f805 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d590:	9050      	str	r0, [sp, #320]	; 0x140
    d592:	914f      	str	r1, [sp, #316]	; 0x13c
    d594:	e7ff      	b.n	d596 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x276e>
    d596:	9850      	ldr	r0, [sp, #320]	; 0x140
    d598:	f8cd 0a54 	str.w	r0, [sp, #2644]	; 0xa54
    d59c:	994f      	ldr	r1, [sp, #316]	; 0x13c
    d59e:	f8cd 1a58 	str.w	r1, [sp, #2648]	; 0xa58
    d5a2:	f24c 3218 	movw	r2, #49944	; 0xc318
    d5a6:	f2c0 0201 	movt	r2, #1
    d5aa:	6812      	ldr	r2, [r2, #0]
    d5ac:	466b      	mov	r3, sp
    d5ae:	f04f 0c01 	mov.w	ip, #1
    d5b2:	f8c3 c008 	str.w	ip, [r3, #8]
    d5b6:	605a      	str	r2, [r3, #4]
    d5b8:	f8c3 c000 	str.w	ip, [r3]
    d5bc:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    d5c0:	2202      	movs	r2, #2
    d5c2:	f60d 2354 	addw	r3, sp, #2644	; 0xa54
    d5c6:	9951      	ldr	r1, [sp, #324]	; 0x144
    d5c8:	f003 fe6a 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d5cc:	e7ff      	b.n	d5ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27a6>
    d5ce:	f8dd 1a30 	ldr.w	r1, [sp, #2608]	; 0xa30
    d5d2:	f24c 700c 	movw	r0, #50956	; 0xc70c
    d5d6:	f2c0 0001 	movt	r0, #1
    d5da:	6802      	ldr	r2, [r0, #0]
    d5dc:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    d5e0:	f004 fe14 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d5e4:	e7ff      	b.n	d5e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27be>
    d5e6:	e7ff      	b.n	d5e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27c0>
    d5e8:	f241 0048 	movw	r0, #4168	; 0x1048
                if !self.hw.key(self.v[x]) {
    d5ec:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d5f0:	4408      	add	r0, r1
    d5f2:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    d5f6:	2a0f      	cmp	r2, #15
    d5f8:	904e      	str	r0, [sp, #312]	; 0x138
    d5fa:	f200 87e5 	bhi.w	e5c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37a0>
    d5fe:	e7ff      	b.n	d600 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27d8>
    d600:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d604:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d608:	1842      	adds	r2, r0, r1
    d60a:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    d60e:	984e      	ldr	r0, [sp, #312]	; 0x138
    d610:	f001 fefe 	bl	f410 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E>
    d614:	904d      	str	r0, [sp, #308]	; 0x134
    d616:	e7ff      	b.n	d618 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27f0>
    d618:	984d      	ldr	r0, [sp, #308]	; 0x134
    d61a:	07c1      	lsls	r1, r0, #31
    d61c:	2900      	cmp	r1, #0
    d61e:	d106      	bne.n	d62e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2806>
    d620:	e7ff      	b.n	d622 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27fa>
                    self.next();
    d622:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d626:	f001 f9fe 	bl	ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    d62a:	e7ff      	b.n	d62c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2804>
                if !self.hw.key(self.v[x]) {
    d62c:	e7ff      	b.n	d62e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2806>
        match (
    d62e:	f000 bec8 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d632:	2005      	movs	r0, #5
    d634:	f8cd 0a60 	str.w	r0, [sp, #2656]	; 0xa60
    d638:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    d63c:	f2c0 0001 	movt	r0, #1
    d640:	6801      	ldr	r1, [r0, #0]
    d642:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    d646:	f003 fdef 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d64a:	904c      	str	r0, [sp, #304]	; 0x130
    d64c:	e01f      	b.n	d68e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2866>
    d64e:	2001      	movs	r0, #1
    d650:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    d654:	e015      	b.n	d682 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x285a>
    d656:	2000      	movs	r0, #0
    d658:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    d65c:	e011      	b.n	d682 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x285a>
    d65e:	2000      	movs	r0, #0
    d660:	f88d 0e7b 	strb.w	r0, [sp, #3707]	; 0xe7b
    d664:	f89d 1e7b 	ldrb.w	r1, [sp, #3707]	; 0xe7b
    d668:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d66c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d670:	f003 fe4f 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d674:	f8cd 0e7c 	str.w	r0, [sp, #3708]	; 0xe7c
    d678:	f8dd 0e7c 	ldr.w	r0, [sp, #3708]	; 0xe7c
    d67c:	f8cd 0a68 	str.w	r0, [sp, #2664]	; 0xa68
    d680:	e00a      	b.n	d698 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2870>
    d682:	f89d 0a67 	ldrb.w	r0, [sp, #2663]	; 0xa67
    d686:	07c0      	lsls	r0, r0, #31
    d688:	2800      	cmp	r0, #0
    d68a:	d112      	bne.n	d6b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x288a>
    d68c:	e055      	b.n	d73a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2912>
    d68e:	984c      	ldr	r0, [sp, #304]	; 0x130
    d690:	07c1      	lsls	r1, r0, #31
    d692:	2900      	cmp	r1, #0
    d694:	d1e3      	bne.n	d65e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2836>
    d696:	e7de      	b.n	d656 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x282e>
    d698:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    d69c:	f60d 2168 	addw	r1, sp, #2664	; 0xa68
    d6a0:	f003 fdc2 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d6a4:	904b      	str	r0, [sp, #300]	; 0x12c
    d6a6:	e7ff      	b.n	d6a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2880>
    d6a8:	984b      	ldr	r0, [sp, #300]	; 0x12c
    d6aa:	07c1      	lsls	r1, r0, #31
    d6ac:	2900      	cmp	r1, #0
    d6ae:	d1ce      	bne.n	d64e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2826>
    d6b0:	e7d1      	b.n	d656 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x282e>
                trace!("[{:04x}] LD Vx, DT", self.pc);
    d6b2:	f24c 609c 	movw	r0, #50844	; 0xc69c
    d6b6:	f2c0 0001 	movt	r0, #1
    d6ba:	6801      	ldr	r1, [r0, #0]
    d6bc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d6c0:	f100 0212 	add.w	r2, r0, #18
    d6c4:	f8cd 2a8c 	str.w	r2, [sp, #2700]	; 0xa8c
    d6c8:	f8dd 2a8c 	ldr.w	r2, [sp, #2700]	; 0xa8c
    d6cc:	f8cd 2cd0 	str.w	r2, [sp, #3280]	; 0xcd0
    d6d0:	f646 63ef 	movw	r3, #28399	; 0x6eef
    d6d4:	f2c0 0301 	movt	r3, #1
    d6d8:	4610      	mov	r0, r2
    d6da:	914a      	str	r1, [sp, #296]	; 0x128
    d6dc:	4619      	mov	r1, r3
    d6de:	f7fc ff5c 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d6e2:	9049      	str	r0, [sp, #292]	; 0x124
    d6e4:	9148      	str	r1, [sp, #288]	; 0x120
    d6e6:	e7ff      	b.n	d6e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x28c0>
    d6e8:	9849      	ldr	r0, [sp, #292]	; 0x124
    d6ea:	f8cd 0a84 	str.w	r0, [sp, #2692]	; 0xa84
    d6ee:	9948      	ldr	r1, [sp, #288]	; 0x120
    d6f0:	f8cd 1a88 	str.w	r1, [sp, #2696]	; 0xa88
    d6f4:	f24c 3218 	movw	r2, #49944	; 0xc318
    d6f8:	f2c0 0201 	movt	r2, #1
    d6fc:	6812      	ldr	r2, [r2, #0]
    d6fe:	466b      	mov	r3, sp
    d700:	f04f 0c01 	mov.w	ip, #1
    d704:	f8c3 c008 	str.w	ip, [r3, #8]
    d708:	605a      	str	r2, [r3, #4]
    d70a:	f8c3 c000 	str.w	ip, [r3]
    d70e:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    d712:	2202      	movs	r2, #2
    d714:	f60d 2384 	addw	r3, sp, #2692	; 0xa84
    d718:	994a      	ldr	r1, [sp, #296]	; 0x128
    d71a:	f003 fdc1 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d71e:	e7ff      	b.n	d720 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x28f8>
    d720:	f8dd 1a60 	ldr.w	r1, [sp, #2656]	; 0xa60
    d724:	f24c 60bc 	movw	r0, #50876	; 0xc6bc
    d728:	f2c0 0001 	movt	r0, #1
    d72c:	6802      	ldr	r2, [r0, #0]
    d72e:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    d732:	f004 fd6b 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d736:	e7ff      	b.n	d738 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2910>
    d738:	e7ff      	b.n	d73a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2912>
                self.v[x] = self.dt;
    d73a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d73e:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    d742:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    d746:	2a0f      	cmp	r2, #15
    d748:	9147      	str	r1, [sp, #284]	; 0x11c
    d74a:	f200 8733 	bhi.w	e5b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x378c>
    d74e:	e7ff      	b.n	d750 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2928>
    d750:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d754:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d758:	1842      	adds	r2, r0, r1
    d75a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    d75c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    d760:	f000 be2f 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d764:	2005      	movs	r0, #5
    d766:	f8cd 0a90 	str.w	r0, [sp, #2704]	; 0xa90
    d76a:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    d76e:	f2c0 0001 	movt	r0, #1
    d772:	6801      	ldr	r1, [r0, #0]
    d774:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    d778:	f003 fd56 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d77c:	9046      	str	r0, [sp, #280]	; 0x118
    d77e:	e01f      	b.n	d7c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2998>
    d780:	2001      	movs	r0, #1
    d782:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    d786:	e015      	b.n	d7b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x298c>
    d788:	2000      	movs	r0, #0
    d78a:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    d78e:	e011      	b.n	d7b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x298c>
    d790:	2000      	movs	r0, #0
    d792:	f88d 0e83 	strb.w	r0, [sp, #3715]	; 0xe83
    d796:	f89d 1e83 	ldrb.w	r1, [sp, #3715]	; 0xe83
    d79a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d79e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d7a2:	f003 fdb6 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d7a6:	f8cd 0e84 	str.w	r0, [sp, #3716]	; 0xe84
    d7aa:	f8dd 0e84 	ldr.w	r0, [sp, #3716]	; 0xe84
    d7ae:	f8cd 0a98 	str.w	r0, [sp, #2712]	; 0xa98
    d7b2:	e00a      	b.n	d7ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29a2>
    d7b4:	f89d 0a97 	ldrb.w	r0, [sp, #2711]	; 0xa97
    d7b8:	07c0      	lsls	r0, r0, #31
    d7ba:	2800      	cmp	r0, #0
    d7bc:	d112      	bne.n	d7e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29bc>
    d7be:	e055      	b.n	d86c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a44>
    d7c0:	9846      	ldr	r0, [sp, #280]	; 0x118
    d7c2:	07c1      	lsls	r1, r0, #31
    d7c4:	2900      	cmp	r1, #0
    d7c6:	d1e3      	bne.n	d790 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2968>
    d7c8:	e7de      	b.n	d788 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2960>
    d7ca:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    d7ce:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
    d7d2:	f003 fd29 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d7d6:	9045      	str	r0, [sp, #276]	; 0x114
    d7d8:	e7ff      	b.n	d7da <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29b2>
    d7da:	9845      	ldr	r0, [sp, #276]	; 0x114
    d7dc:	07c1      	lsls	r1, r0, #31
    d7de:	2900      	cmp	r1, #0
    d7e0:	d1ce      	bne.n	d780 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2958>
    d7e2:	e7d1      	b.n	d788 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2960>
                trace!("[{:04x}] LD Vx, K", self.pc);
    d7e4:	f24c 604c 	movw	r0, #50764	; 0xc64c
    d7e8:	f2c0 0001 	movt	r0, #1
    d7ec:	6801      	ldr	r1, [r0, #0]
    d7ee:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d7f2:	f100 0212 	add.w	r2, r0, #18
    d7f6:	f8cd 2abc 	str.w	r2, [sp, #2748]	; 0xabc
    d7fa:	f8dd 2abc 	ldr.w	r2, [sp, #2748]	; 0xabc
    d7fe:	f8cd 2ccc 	str.w	r2, [sp, #3276]	; 0xccc
    d802:	f646 63ef 	movw	r3, #28399	; 0x6eef
    d806:	f2c0 0301 	movt	r3, #1
    d80a:	4610      	mov	r0, r2
    d80c:	9144      	str	r1, [sp, #272]	; 0x110
    d80e:	4619      	mov	r1, r3
    d810:	f7fc fec3 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d814:	9043      	str	r0, [sp, #268]	; 0x10c
    d816:	9142      	str	r1, [sp, #264]	; 0x108
    d818:	e7ff      	b.n	d81a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29f2>
    d81a:	9843      	ldr	r0, [sp, #268]	; 0x10c
    d81c:	f8cd 0ab4 	str.w	r0, [sp, #2740]	; 0xab4
    d820:	9942      	ldr	r1, [sp, #264]	; 0x108
    d822:	f8cd 1ab8 	str.w	r1, [sp, #2744]	; 0xab8
    d826:	f24c 3218 	movw	r2, #49944	; 0xc318
    d82a:	f2c0 0201 	movt	r2, #1
    d82e:	6812      	ldr	r2, [r2, #0]
    d830:	466b      	mov	r3, sp
    d832:	f04f 0c01 	mov.w	ip, #1
    d836:	f8c3 c008 	str.w	ip, [r3, #8]
    d83a:	605a      	str	r2, [r3, #4]
    d83c:	f8c3 c000 	str.w	ip, [r3]
    d840:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    d844:	2202      	movs	r2, #2
    d846:	f60d 23b4 	addw	r3, sp, #2740	; 0xab4
    d84a:	9944      	ldr	r1, [sp, #272]	; 0x110
    d84c:	f003 fd28 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d850:	e7ff      	b.n	d852 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a2a>
    d852:	f8dd 1a90 	ldr.w	r1, [sp, #2704]	; 0xa90
    d856:	f24c 606c 	movw	r0, #50796	; 0xc66c
    d85a:	f2c0 0001 	movt	r0, #1
    d85e:	6802      	ldr	r2, [r0, #0]
    d860:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    d864:	f004 fcd2 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d868:	e7ff      	b.n	d86a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a42>
    d86a:	e7ff      	b.n	d86c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a44>
                self.v[x] = self.waitkey();
    d86c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d870:	f001 fa2d 	bl	ecce <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE>
    d874:	9041      	str	r0, [sp, #260]	; 0x104
    d876:	e7ff      	b.n	d878 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a50>
    d878:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d87c:	280f      	cmp	r0, #15
    d87e:	f200 868f 	bhi.w	e5a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3778>
    d882:	e7ff      	b.n	d884 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a5c>
    d884:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d888:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d88c:	1842      	adds	r2, r0, r1
    d88e:	9b41      	ldr	r3, [sp, #260]	; 0x104
    d890:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    d894:	f000 bd95 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d898:	2005      	movs	r0, #5
    d89a:	f8cd 0ac0 	str.w	r0, [sp, #2752]	; 0xac0
    d89e:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    d8a2:	f2c0 0001 	movt	r0, #1
    d8a6:	6801      	ldr	r1, [r0, #0]
    d8a8:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    d8ac:	f003 fcbc 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d8b0:	9040      	str	r0, [sp, #256]	; 0x100
    d8b2:	e01f      	b.n	d8f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2acc>
    d8b4:	2001      	movs	r0, #1
    d8b6:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    d8ba:	e015      	b.n	d8e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ac0>
    d8bc:	2000      	movs	r0, #0
    d8be:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    d8c2:	e011      	b.n	d8e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ac0>
    d8c4:	2000      	movs	r0, #0
    d8c6:	f88d 0e8b 	strb.w	r0, [sp, #3723]	; 0xe8b
    d8ca:	f89d 1e8b 	ldrb.w	r1, [sp, #3723]	; 0xe8b
    d8ce:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d8d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d8d6:	f003 fd1c 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d8da:	f8cd 0e8c 	str.w	r0, [sp, #3724]	; 0xe8c
    d8de:	f8dd 0e8c 	ldr.w	r0, [sp, #3724]	; 0xe8c
    d8e2:	f8cd 0ac8 	str.w	r0, [sp, #2760]	; 0xac8
    d8e6:	e00a      	b.n	d8fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ad6>
    d8e8:	f89d 0ac7 	ldrb.w	r0, [sp, #2759]	; 0xac7
    d8ec:	07c0      	lsls	r0, r0, #31
    d8ee:	2800      	cmp	r0, #0
    d8f0:	d112      	bne.n	d918 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2af0>
    d8f2:	e055      	b.n	d9a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b78>
    d8f4:	9840      	ldr	r0, [sp, #256]	; 0x100
    d8f6:	07c1      	lsls	r1, r0, #31
    d8f8:	2900      	cmp	r1, #0
    d8fa:	d1e3      	bne.n	d8c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a9c>
    d8fc:	e7de      	b.n	d8bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a94>
    d8fe:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    d902:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
    d906:	f003 fc8f 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d90a:	903f      	str	r0, [sp, #252]	; 0xfc
    d90c:	e7ff      	b.n	d90e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ae6>
    d90e:	983f      	ldr	r0, [sp, #252]	; 0xfc
    d910:	07c1      	lsls	r1, r0, #31
    d912:	2900      	cmp	r1, #0
    d914:	d1ce      	bne.n	d8b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a8c>
    d916:	e7d1      	b.n	d8bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a94>
                trace!("[{:04x}] LD DT, Vx", self.pc);
    d918:	f24c 50fc 	movw	r0, #50684	; 0xc5fc
    d91c:	f2c0 0001 	movt	r0, #1
    d920:	6801      	ldr	r1, [r0, #0]
    d922:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d926:	f100 0212 	add.w	r2, r0, #18
    d92a:	f8cd 2aec 	str.w	r2, [sp, #2796]	; 0xaec
    d92e:	f8dd 2aec 	ldr.w	r2, [sp, #2796]	; 0xaec
    d932:	f8cd 2cc8 	str.w	r2, [sp, #3272]	; 0xcc8
    d936:	f646 63ef 	movw	r3, #28399	; 0x6eef
    d93a:	f2c0 0301 	movt	r3, #1
    d93e:	4610      	mov	r0, r2
    d940:	913e      	str	r1, [sp, #248]	; 0xf8
    d942:	4619      	mov	r1, r3
    d944:	f7fc fe29 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d948:	903d      	str	r0, [sp, #244]	; 0xf4
    d94a:	913c      	str	r1, [sp, #240]	; 0xf0
    d94c:	e7ff      	b.n	d94e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b26>
    d94e:	983d      	ldr	r0, [sp, #244]	; 0xf4
    d950:	f8cd 0ae4 	str.w	r0, [sp, #2788]	; 0xae4
    d954:	993c      	ldr	r1, [sp, #240]	; 0xf0
    d956:	f8cd 1ae8 	str.w	r1, [sp, #2792]	; 0xae8
    d95a:	f24c 3218 	movw	r2, #49944	; 0xc318
    d95e:	f2c0 0201 	movt	r2, #1
    d962:	6812      	ldr	r2, [r2, #0]
    d964:	466b      	mov	r3, sp
    d966:	f04f 0c01 	mov.w	ip, #1
    d96a:	f8c3 c008 	str.w	ip, [r3, #8]
    d96e:	605a      	str	r2, [r3, #4]
    d970:	f8c3 c000 	str.w	ip, [r3]
    d974:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    d978:	2202      	movs	r2, #2
    d97a:	f60d 23e4 	addw	r3, sp, #2788	; 0xae4
    d97e:	993e      	ldr	r1, [sp, #248]	; 0xf8
    d980:	f003 fc8e 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d984:	e7ff      	b.n	d986 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b5e>
    d986:	f8dd 1ac0 	ldr.w	r1, [sp, #2752]	; 0xac0
    d98a:	f24c 601c 	movw	r0, #50716	; 0xc61c
    d98e:	f2c0 0001 	movt	r0, #1
    d992:	6802      	ldr	r2, [r0, #0]
    d994:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    d998:	f004 fc38 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d99c:	e7ff      	b.n	d99e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b76>
    d99e:	e7ff      	b.n	d9a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b78>
                self.dt = self.v[x];
    d9a0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d9a4:	280f      	cmp	r0, #15
    d9a6:	f200 85f1 	bhi.w	e58c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3764>
    d9aa:	e7ff      	b.n	d9ac <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b84>
    d9ac:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d9b0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d9b4:	1842      	adds	r2, r0, r1
    d9b6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d9ba:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
        match (
    d9be:	f000 bd00 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d9c2:	2005      	movs	r0, #5
    d9c4:	f8cd 0af0 	str.w	r0, [sp, #2800]	; 0xaf0
    d9c8:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    d9cc:	f2c0 0001 	movt	r0, #1
    d9d0:	6801      	ldr	r1, [r0, #0]
    d9d2:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    d9d6:	f003 fc27 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d9da:	903b      	str	r0, [sp, #236]	; 0xec
    d9dc:	e01f      	b.n	da1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bf6>
    d9de:	2001      	movs	r0, #1
    d9e0:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    d9e4:	e015      	b.n	da12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bea>
    d9e6:	2000      	movs	r0, #0
    d9e8:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    d9ec:	e011      	b.n	da12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bea>
    d9ee:	2000      	movs	r0, #0
    d9f0:	f88d 0e93 	strb.w	r0, [sp, #3731]	; 0xe93
    d9f4:	f89d 1e93 	ldrb.w	r1, [sp, #3731]	; 0xe93
    d9f8:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d9fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    da00:	f003 fc87 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    da04:	f8cd 0e94 	str.w	r0, [sp, #3732]	; 0xe94
    da08:	f8dd 0e94 	ldr.w	r0, [sp, #3732]	; 0xe94
    da0c:	f8cd 0af8 	str.w	r0, [sp, #2808]	; 0xaf8
    da10:	e00a      	b.n	da28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c00>
    da12:	f89d 0af7 	ldrb.w	r0, [sp, #2807]	; 0xaf7
    da16:	07c0      	lsls	r0, r0, #31
    da18:	2800      	cmp	r0, #0
    da1a:	d112      	bne.n	da42 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c1a>
    da1c:	e055      	b.n	daca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ca2>
    da1e:	983b      	ldr	r0, [sp, #236]	; 0xec
    da20:	07c1      	lsls	r1, r0, #31
    da22:	2900      	cmp	r1, #0
    da24:	d1e3      	bne.n	d9ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bc6>
    da26:	e7de      	b.n	d9e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bbe>
    da28:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    da2c:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
    da30:	f003 fbfa 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    da34:	903a      	str	r0, [sp, #232]	; 0xe8
    da36:	e7ff      	b.n	da38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c10>
    da38:	983a      	ldr	r0, [sp, #232]	; 0xe8
    da3a:	07c1      	lsls	r1, r0, #31
    da3c:	2900      	cmp	r1, #0
    da3e:	d1ce      	bne.n	d9de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bb6>
    da40:	e7d1      	b.n	d9e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bbe>
                trace!("[{:04x}] LD ST, Vx", self.pc);
    da42:	f24c 50ac 	movw	r0, #50604	; 0xc5ac
    da46:	f2c0 0001 	movt	r0, #1
    da4a:	6801      	ldr	r1, [r0, #0]
    da4c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    da50:	f100 0212 	add.w	r2, r0, #18
    da54:	f8cd 2b1c 	str.w	r2, [sp, #2844]	; 0xb1c
    da58:	f8dd 2b1c 	ldr.w	r2, [sp, #2844]	; 0xb1c
    da5c:	f8cd 2cc4 	str.w	r2, [sp, #3268]	; 0xcc4
    da60:	f646 63ef 	movw	r3, #28399	; 0x6eef
    da64:	f2c0 0301 	movt	r3, #1
    da68:	4610      	mov	r0, r2
    da6a:	9139      	str	r1, [sp, #228]	; 0xe4
    da6c:	4619      	mov	r1, r3
    da6e:	f7fc fd94 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    da72:	9038      	str	r0, [sp, #224]	; 0xe0
    da74:	9137      	str	r1, [sp, #220]	; 0xdc
    da76:	e7ff      	b.n	da78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c50>
    da78:	9838      	ldr	r0, [sp, #224]	; 0xe0
    da7a:	f8cd 0b14 	str.w	r0, [sp, #2836]	; 0xb14
    da7e:	9937      	ldr	r1, [sp, #220]	; 0xdc
    da80:	f8cd 1b18 	str.w	r1, [sp, #2840]	; 0xb18
    da84:	f24c 3218 	movw	r2, #49944	; 0xc318
    da88:	f2c0 0201 	movt	r2, #1
    da8c:	6812      	ldr	r2, [r2, #0]
    da8e:	466b      	mov	r3, sp
    da90:	f04f 0c01 	mov.w	ip, #1
    da94:	f8c3 c008 	str.w	ip, [r3, #8]
    da98:	605a      	str	r2, [r3, #4]
    da9a:	f8c3 c000 	str.w	ip, [r3]
    da9e:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    daa2:	2202      	movs	r2, #2
    daa4:	f60d 3314 	addw	r3, sp, #2836	; 0xb14
    daa8:	9939      	ldr	r1, [sp, #228]	; 0xe4
    daaa:	f003 fbf9 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    daae:	e7ff      	b.n	dab0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c88>
    dab0:	f8dd 1af0 	ldr.w	r1, [sp, #2800]	; 0xaf0
    dab4:	f24c 50cc 	movw	r0, #50636	; 0xc5cc
    dab8:	f2c0 0001 	movt	r0, #1
    dabc:	6802      	ldr	r2, [r0, #0]
    dabe:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    dac2:	f004 fba3 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dac6:	e7ff      	b.n	dac8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ca0>
    dac8:	e7ff      	b.n	daca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ca2>
                self.st = self.v[x];
    daca:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dace:	280f      	cmp	r0, #15
    dad0:	f200 8552 	bhi.w	e578 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3750>
    dad4:	e7ff      	b.n	dad6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2cae>
    dad6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dada:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dade:	1842      	adds	r2, r0, r1
    dae0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    dae4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
        match (
    dae8:	f000 bc6b 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    daec:	2005      	movs	r0, #5
    daee:	f8cd 0b20 	str.w	r0, [sp, #2848]	; 0xb20
    daf2:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    daf6:	f2c0 0001 	movt	r0, #1
    dafa:	6801      	ldr	r1, [r0, #0]
    dafc:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    db00:	f003 fb92 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    db04:	9036      	str	r0, [sp, #216]	; 0xd8
    db06:	e01f      	b.n	db48 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d20>
    db08:	2001      	movs	r0, #1
    db0a:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    db0e:	e015      	b.n	db3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d14>
    db10:	2000      	movs	r0, #0
    db12:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    db16:	e011      	b.n	db3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d14>
    db18:	2000      	movs	r0, #0
    db1a:	f88d 0e9b 	strb.w	r0, [sp, #3739]	; 0xe9b
    db1e:	f89d 1e9b 	ldrb.w	r1, [sp, #3739]	; 0xe9b
    db22:	f644 206c 	movw	r0, #19052	; 0x4a6c
    db26:	f2c2 0000 	movt	r0, #8192	; 0x2000
    db2a:	f003 fbf2 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    db2e:	f8cd 0e9c 	str.w	r0, [sp, #3740]	; 0xe9c
    db32:	f8dd 0e9c 	ldr.w	r0, [sp, #3740]	; 0xe9c
    db36:	f8cd 0b28 	str.w	r0, [sp, #2856]	; 0xb28
    db3a:	e00a      	b.n	db52 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d2a>
    db3c:	f89d 0b27 	ldrb.w	r0, [sp, #2855]	; 0xb27
    db40:	07c0      	lsls	r0, r0, #31
    db42:	2800      	cmp	r0, #0
    db44:	d112      	bne.n	db6c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d44>
    db46:	e055      	b.n	dbf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2dcc>
    db48:	9836      	ldr	r0, [sp, #216]	; 0xd8
    db4a:	07c1      	lsls	r1, r0, #31
    db4c:	2900      	cmp	r1, #0
    db4e:	d1e3      	bne.n	db18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2cf0>
    db50:	e7de      	b.n	db10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ce8>
    db52:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    db56:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
    db5a:	f003 fb65 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    db5e:	9035      	str	r0, [sp, #212]	; 0xd4
    db60:	e7ff      	b.n	db62 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d3a>
    db62:	9835      	ldr	r0, [sp, #212]	; 0xd4
    db64:	07c1      	lsls	r1, r0, #31
    db66:	2900      	cmp	r1, #0
    db68:	d1ce      	bne.n	db08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ce0>
    db6a:	e7d1      	b.n	db10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ce8>
                trace!("[{:04x}] ADD I, Vx", self.pc);
    db6c:	f24c 505c 	movw	r0, #50524	; 0xc55c
    db70:	f2c0 0001 	movt	r0, #1
    db74:	6801      	ldr	r1, [r0, #0]
    db76:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    db7a:	f100 0212 	add.w	r2, r0, #18
    db7e:	f8cd 2b4c 	str.w	r2, [sp, #2892]	; 0xb4c
    db82:	f8dd 2b4c 	ldr.w	r2, [sp, #2892]	; 0xb4c
    db86:	f8cd 2cc0 	str.w	r2, [sp, #3264]	; 0xcc0
    db8a:	f646 63ef 	movw	r3, #28399	; 0x6eef
    db8e:	f2c0 0301 	movt	r3, #1
    db92:	4610      	mov	r0, r2
    db94:	9134      	str	r1, [sp, #208]	; 0xd0
    db96:	4619      	mov	r1, r3
    db98:	f7fc fcff 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    db9c:	9033      	str	r0, [sp, #204]	; 0xcc
    db9e:	9132      	str	r1, [sp, #200]	; 0xc8
    dba0:	e7ff      	b.n	dba2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d7a>
    dba2:	9833      	ldr	r0, [sp, #204]	; 0xcc
    dba4:	f8cd 0b44 	str.w	r0, [sp, #2884]	; 0xb44
    dba8:	9932      	ldr	r1, [sp, #200]	; 0xc8
    dbaa:	f8cd 1b48 	str.w	r1, [sp, #2888]	; 0xb48
    dbae:	f24c 3218 	movw	r2, #49944	; 0xc318
    dbb2:	f2c0 0201 	movt	r2, #1
    dbb6:	6812      	ldr	r2, [r2, #0]
    dbb8:	466b      	mov	r3, sp
    dbba:	f04f 0c01 	mov.w	ip, #1
    dbbe:	f8c3 c008 	str.w	ip, [r3, #8]
    dbc2:	605a      	str	r2, [r3, #4]
    dbc4:	f8c3 c000 	str.w	ip, [r3]
    dbc8:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    dbcc:	2202      	movs	r2, #2
    dbce:	f60d 3344 	addw	r3, sp, #2884	; 0xb44
    dbd2:	9934      	ldr	r1, [sp, #208]	; 0xd0
    dbd4:	f003 fb64 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    dbd8:	e7ff      	b.n	dbda <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2db2>
    dbda:	f8dd 1b20 	ldr.w	r1, [sp, #2848]	; 0xb20
    dbde:	f24c 507c 	movw	r0, #50556	; 0xc57c
    dbe2:	f2c0 0001 	movt	r0, #1
    dbe6:	6802      	ldr	r2, [r0, #0]
    dbe8:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    dbec:	f004 fb0e 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dbf0:	e7ff      	b.n	dbf2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2dca>
    dbf2:	e7ff      	b.n	dbf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2dcc>
                self.i = self.i.wrapping_add(self.v[x].into());
    dbf4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dbf8:	8a01      	ldrh	r1, [r0, #16]
    dbfa:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    dbfe:	2a0f      	cmp	r2, #15
    dc00:	9131      	str	r1, [sp, #196]	; 0xc4
    dc02:	f200 84af 	bhi.w	e564 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x373c>
    dc06:	e7ff      	b.n	dc08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2de0>
    dc08:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dc0c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dc10:	1842      	adds	r2, r0, r1
    dc12:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    dc16:	f003 fb90 	bl	1133a <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E>
    dc1a:	9030      	str	r0, [sp, #192]	; 0xc0
    dc1c:	e7ff      	b.n	dc1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2df6>
    dc1e:	9831      	ldr	r0, [sp, #196]	; 0xc4
    dc20:	9930      	ldr	r1, [sp, #192]	; 0xc0
    dc22:	f001 fa28 	bl	f076 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E>
    dc26:	902f      	str	r0, [sp, #188]	; 0xbc
    dc28:	e7ff      	b.n	dc2a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e02>
    dc2a:	982f      	ldr	r0, [sp, #188]	; 0xbc
    dc2c:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    dc30:	8208      	strh	r0, [r1, #16]
        match (
    dc32:	e3c6      	b.n	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    dc34:	2005      	movs	r0, #5
    dc36:	f8cd 0b50 	str.w	r0, [sp, #2896]	; 0xb50
    dc3a:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    dc3e:	f2c0 0001 	movt	r0, #1
    dc42:	6801      	ldr	r1, [r0, #0]
    dc44:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    dc48:	f003 faee 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dc4c:	902e      	str	r0, [sp, #184]	; 0xb8
    dc4e:	e01f      	b.n	dc90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e68>
    dc50:	2001      	movs	r0, #1
    dc52:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    dc56:	e015      	b.n	dc84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e5c>
    dc58:	2000      	movs	r0, #0
    dc5a:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    dc5e:	e011      	b.n	dc84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e5c>
    dc60:	2000      	movs	r0, #0
    dc62:	f88d 0ea3 	strb.w	r0, [sp, #3747]	; 0xea3
    dc66:	f89d 1ea3 	ldrb.w	r1, [sp, #3747]	; 0xea3
    dc6a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dc6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dc72:	f003 fb4e 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    dc76:	f8cd 0ea4 	str.w	r0, [sp, #3748]	; 0xea4
    dc7a:	f8dd 0ea4 	ldr.w	r0, [sp, #3748]	; 0xea4
    dc7e:	f8cd 0b58 	str.w	r0, [sp, #2904]	; 0xb58
    dc82:	e00a      	b.n	dc9a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e72>
    dc84:	f89d 0b57 	ldrb.w	r0, [sp, #2903]	; 0xb57
    dc88:	07c0      	lsls	r0, r0, #31
    dc8a:	2800      	cmp	r0, #0
    dc8c:	d112      	bne.n	dcb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e8c>
    dc8e:	e055      	b.n	dd3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f14>
    dc90:	982e      	ldr	r0, [sp, #184]	; 0xb8
    dc92:	07c1      	lsls	r1, r0, #31
    dc94:	2900      	cmp	r1, #0
    dc96:	d1e3      	bne.n	dc60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e38>
    dc98:	e7de      	b.n	dc58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e30>
    dc9a:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    dc9e:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
    dca2:	f003 fac1 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dca6:	902d      	str	r0, [sp, #180]	; 0xb4
    dca8:	e7ff      	b.n	dcaa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e82>
    dcaa:	982d      	ldr	r0, [sp, #180]	; 0xb4
    dcac:	07c1      	lsls	r1, r0, #31
    dcae:	2900      	cmp	r1, #0
    dcb0:	d1ce      	bne.n	dc50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e28>
    dcb2:	e7d1      	b.n	dc58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e30>
                trace!("[{:04x}] LD F, Vx", self.pc);
    dcb4:	f24c 40d8 	movw	r0, #50392	; 0xc4d8
    dcb8:	f2c0 0001 	movt	r0, #1
    dcbc:	6801      	ldr	r1, [r0, #0]
    dcbe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dcc2:	f100 0212 	add.w	r2, r0, #18
    dcc6:	f8cd 2b7c 	str.w	r2, [sp, #2940]	; 0xb7c
    dcca:	f8dd 2b7c 	ldr.w	r2, [sp, #2940]	; 0xb7c
    dcce:	f8cd 2cbc 	str.w	r2, [sp, #3260]	; 0xcbc
    dcd2:	f646 63ef 	movw	r3, #28399	; 0x6eef
    dcd6:	f2c0 0301 	movt	r3, #1
    dcda:	4610      	mov	r0, r2
    dcdc:	912c      	str	r1, [sp, #176]	; 0xb0
    dcde:	4619      	mov	r1, r3
    dce0:	f7fc fc5b 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dce4:	902b      	str	r0, [sp, #172]	; 0xac
    dce6:	912a      	str	r1, [sp, #168]	; 0xa8
    dce8:	e7ff      	b.n	dcea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ec2>
    dcea:	982b      	ldr	r0, [sp, #172]	; 0xac
    dcec:	f8cd 0b74 	str.w	r0, [sp, #2932]	; 0xb74
    dcf0:	992a      	ldr	r1, [sp, #168]	; 0xa8
    dcf2:	f8cd 1b78 	str.w	r1, [sp, #2936]	; 0xb78
    dcf6:	f24c 3218 	movw	r2, #49944	; 0xc318
    dcfa:	f2c0 0201 	movt	r2, #1
    dcfe:	6812      	ldr	r2, [r2, #0]
    dd00:	466b      	mov	r3, sp
    dd02:	f04f 0c01 	mov.w	ip, #1
    dd06:	f8c3 c008 	str.w	ip, [r3, #8]
    dd0a:	605a      	str	r2, [r3, #4]
    dd0c:	f8c3 c000 	str.w	ip, [r3]
    dd10:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    dd14:	2202      	movs	r2, #2
    dd16:	f60d 3374 	addw	r3, sp, #2932	; 0xb74
    dd1a:	992c      	ldr	r1, [sp, #176]	; 0xb0
    dd1c:	f003 fac0 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    dd20:	e7ff      	b.n	dd22 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2efa>
    dd22:	f8dd 1b50 	ldr.w	r1, [sp, #2896]	; 0xb50
    dd26:	f24c 40f8 	movw	r0, #50424	; 0xc4f8
    dd2a:	f2c0 0001 	movt	r0, #1
    dd2e:	6802      	ldr	r2, [r0, #0]
    dd30:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    dd34:	f004 fa6a 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dd38:	e7ff      	b.n	dd3a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f12>
    dd3a:	e7ff      	b.n	dd3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f14>
                self.i = (self.v[x] * 5).into();
    dd3c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dd40:	280f      	cmp	r0, #15
    dd42:	f200 83f9 	bhi.w	e538 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3710>
    dd46:	e7ff      	b.n	dd48 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f20>
    dd48:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dd4c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dd50:	1842      	adds	r2, r0, r1
    dd52:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    dd56:	2305      	movs	r3, #5
    dd58:	fba2 2303 	umull	r2, r3, r2, r3
    dd5c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    dd60:	f04f 0e00 	mov.w	lr, #0
    dd64:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
    dd68:	bf18      	it	ne
    dd6a:	f04f 0c01 	movne.w	ip, #1
    dd6e:	2b00      	cmp	r3, #0
    dd70:	bf18      	it	ne
    dd72:	2301      	movne	r3, #1
    dd74:	ea43 030c 	orr.w	r3, r3, ip
    dd78:	2b00      	cmp	r3, #0
    dd7a:	9229      	str	r2, [sp, #164]	; 0xa4
    dd7c:	f040 83e6 	bne.w	e54c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3724>
    dd80:	e7ff      	b.n	dd82 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f5a>
    dd82:	9829      	ldr	r0, [sp, #164]	; 0xa4
    dd84:	f003 fad9 	bl	1133a <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E>
    dd88:	9028      	str	r0, [sp, #160]	; 0xa0
    dd8a:	e7ff      	b.n	dd8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f64>
    dd8c:	9828      	ldr	r0, [sp, #160]	; 0xa0
    dd8e:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    dd92:	8208      	strh	r0, [r1, #16]
        match (
    dd94:	e315      	b.n	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    dd96:	2005      	movs	r0, #5
    dd98:	f8cd 0b80 	str.w	r0, [sp, #2944]	; 0xb80
    dd9c:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    dda0:	f2c0 0001 	movt	r0, #1
    dda4:	6801      	ldr	r1, [r0, #0]
    dda6:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    ddaa:	f003 fa3d 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    ddae:	9027      	str	r0, [sp, #156]	; 0x9c
    ddb0:	e01f      	b.n	ddf2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fca>
    ddb2:	2001      	movs	r0, #1
    ddb4:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    ddb8:	e015      	b.n	dde6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fbe>
    ddba:	2000      	movs	r0, #0
    ddbc:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    ddc0:	e011      	b.n	dde6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fbe>
    ddc2:	2000      	movs	r0, #0
    ddc4:	f88d 0eab 	strb.w	r0, [sp, #3755]	; 0xeab
    ddc8:	f89d 1eab 	ldrb.w	r1, [sp, #3755]	; 0xeab
    ddcc:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ddd0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ddd4:	f003 fa9d 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    ddd8:	f8cd 0eac 	str.w	r0, [sp, #3756]	; 0xeac
    dddc:	f8dd 0eac 	ldr.w	r0, [sp, #3756]	; 0xeac
    dde0:	f8cd 0b88 	str.w	r0, [sp, #2952]	; 0xb88
    dde4:	e00a      	b.n	ddfc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fd4>
    dde6:	f89d 0b87 	ldrb.w	r0, [sp, #2951]	; 0xb87
    ddea:	07c0      	lsls	r0, r0, #31
    ddec:	2800      	cmp	r0, #0
    ddee:	d112      	bne.n	de16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fee>
    ddf0:	e055      	b.n	de9e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3076>
    ddf2:	9827      	ldr	r0, [sp, #156]	; 0x9c
    ddf4:	07c1      	lsls	r1, r0, #31
    ddf6:	2900      	cmp	r1, #0
    ddf8:	d1e3      	bne.n	ddc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f9a>
    ddfa:	e7de      	b.n	ddba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f92>
    ddfc:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    de00:	f60d 3188 	addw	r1, sp, #2952	; 0xb88
    de04:	f003 fa10 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    de08:	9026      	str	r0, [sp, #152]	; 0x98
    de0a:	e7ff      	b.n	de0c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fe4>
    de0c:	9826      	ldr	r0, [sp, #152]	; 0x98
    de0e:	07c1      	lsls	r1, r0, #31
    de10:	2900      	cmp	r1, #0
    de12:	d1ce      	bne.n	ddb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f8a>
    de14:	e7d1      	b.n	ddba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f92>
                trace!("[{:04x}] LD B, Vx", self.pc);
    de16:	f24c 4038 	movw	r0, #50232	; 0xc438
    de1a:	f2c0 0001 	movt	r0, #1
    de1e:	6801      	ldr	r1, [r0, #0]
    de20:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    de24:	f100 0212 	add.w	r2, r0, #18
    de28:	f8cd 2bac 	str.w	r2, [sp, #2988]	; 0xbac
    de2c:	f8dd 2bac 	ldr.w	r2, [sp, #2988]	; 0xbac
    de30:	f8cd 2cb4 	str.w	r2, [sp, #3252]	; 0xcb4
    de34:	f646 63ef 	movw	r3, #28399	; 0x6eef
    de38:	f2c0 0301 	movt	r3, #1
    de3c:	4610      	mov	r0, r2
    de3e:	9125      	str	r1, [sp, #148]	; 0x94
    de40:	4619      	mov	r1, r3
    de42:	f7fc fbaa 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    de46:	9024      	str	r0, [sp, #144]	; 0x90
    de48:	9123      	str	r1, [sp, #140]	; 0x8c
    de4a:	e7ff      	b.n	de4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3024>
    de4c:	9824      	ldr	r0, [sp, #144]	; 0x90
    de4e:	f8cd 0ba4 	str.w	r0, [sp, #2980]	; 0xba4
    de52:	9923      	ldr	r1, [sp, #140]	; 0x8c
    de54:	f8cd 1ba8 	str.w	r1, [sp, #2984]	; 0xba8
    de58:	f24c 3218 	movw	r2, #49944	; 0xc318
    de5c:	f2c0 0201 	movt	r2, #1
    de60:	6812      	ldr	r2, [r2, #0]
    de62:	466b      	mov	r3, sp
    de64:	f04f 0c01 	mov.w	ip, #1
    de68:	f8c3 c008 	str.w	ip, [r3, #8]
    de6c:	605a      	str	r2, [r3, #4]
    de6e:	f8c3 c000 	str.w	ip, [r3]
    de72:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    de76:	2202      	movs	r2, #2
    de78:	f60d 33a4 	addw	r3, sp, #2980	; 0xba4
    de7c:	9925      	ldr	r1, [sp, #148]	; 0x94
    de7e:	f003 fa0f 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    de82:	e7ff      	b.n	de84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x305c>
    de84:	f8dd 1b80 	ldr.w	r1, [sp, #2944]	; 0xb80
    de88:	f24c 4058 	movw	r0, #50264	; 0xc458
    de8c:	f2c0 0001 	movt	r0, #1
    de90:	6802      	ldr	r2, [r0, #0]
    de92:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    de96:	f004 f9b9 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    de9a:	e7ff      	b.n	de9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3074>
    de9c:	e7ff      	b.n	de9e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3076>
                let bcd = self.v[x];
    de9e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dea2:	280f      	cmp	r0, #15
    dea4:	f200 8308 	bhi.w	e4b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3690>
    dea8:	e7ff      	b.n	deaa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3082>
    deaa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    deae:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    deb2:	1842      	adds	r2, r0, r1
    deb4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    deb8:	4613      	mov	r3, r2
    deba:	f88d 2cbb 	strb.w	r2, [sp, #3259]	; 0xcbb
    debe:	f248 5c1f 	movw	ip, #34079	; 0x851f
    dec2:	f2c5 1ceb 	movt	ip, #20971	; 0x51eb
                self.mem[self.i as usize] = (bcd / 100) % 10;
    dec6:	fba2 2c0c 	umull	r2, ip, r2, ip
    deca:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    dece:	f8b0 e010 	ldrh.w	lr, [r0, #16]
    ded2:	4674      	mov	r4, lr
    ded4:	2500      	movs	r5, #0
    ded6:	ebb5 3f1e 	cmp.w	r5, lr, lsr #12
    deda:	9322      	str	r3, [sp, #136]	; 0x88
    dedc:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    dee0:	9420      	str	r4, [sp, #128]	; 0x80
    dee2:	f040 82f3 	bne.w	e4cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36a4>
    dee6:	e7ff      	b.n	dee8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x30c0>
    dee8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    deec:	9920      	ldr	r1, [sp, #128]	; 0x80
    deee:	1842      	adds	r2, r0, r1
    def0:	9b21      	ldr	r3, [sp, #132]	; 0x84
    def2:	fa5f fc83 	uxtb.w	ip, r3
    def6:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    defa:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    defe:	fbac 450e 	umull	r4, r5, ip, lr
    df02:	08ed      	lsrs	r5, r5, #3
    df04:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    df08:	ebac 0c45 	sub.w	ip, ip, r5, lsl #1
    df0c:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    df10:	9a22      	ldr	r2, [sp, #136]	; 0x88
    df12:	fa5f fc82 	uxtb.w	ip, r2
    df16:	fbac ce0e 	umull	ip, lr, ip, lr
    df1a:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    df1e:	8a05      	ldrh	r5, [r0, #16]
    df20:	3501      	adds	r5, #1
    df22:	2600      	movs	r6, #0
    df24:	2e00      	cmp	r6, #0
    df26:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
    df2a:	951e      	str	r5, [sp, #120]	; 0x78
    df2c:	f040 82d8 	bne.w	e4e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36b8>
    df30:	e7ff      	b.n	df32 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x310a>
    df32:	2000      	movs	r0, #0
    df34:	991e      	ldr	r1, [sp, #120]	; 0x78
    df36:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    df3a:	f040 82dd 	bne.w	e4f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36d0>
    df3e:	e7ff      	b.n	df40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3118>
    df40:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df44:	991e      	ldr	r1, [sp, #120]	; 0x78
    df46:	1842      	adds	r2, r0, r1
    df48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    df4a:	fa5f fc83 	uxtb.w	ip, r3
    df4e:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    df52:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    df56:	fbac e40e 	umull	lr, r4, ip, lr
    df5a:	08e4      	lsrs	r4, r4, #3
    df5c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    df60:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    df64:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 2] = bcd % 10;
    df68:	8a02      	ldrh	r2, [r0, #16]
    df6a:	3202      	adds	r2, #2
    df6c:	f04f 0c00 	mov.w	ip, #0
    df70:	f1bc 0f00 	cmp.w	ip, #0
    df74:	921d      	str	r2, [sp, #116]	; 0x74
    df76:	f040 82c9 	bne.w	e50c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36e4>
    df7a:	e7ff      	b.n	df7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3154>
    df7c:	2000      	movs	r0, #0
    df7e:	991d      	ldr	r1, [sp, #116]	; 0x74
    df80:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    df84:	f040 82ce 	bne.w	e524 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36fc>
    df88:	e7ff      	b.n	df8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3162>
    df8a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df8e:	991d      	ldr	r1, [sp, #116]	; 0x74
    df90:	1842      	adds	r2, r0, r1
    df92:	9b22      	ldr	r3, [sp, #136]	; 0x88
    df94:	fa5f fc83 	uxtb.w	ip, r3
    df98:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    df9c:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    dfa0:	fbac e40e 	umull	lr, r4, ip, lr
    dfa4:	08e4      	lsrs	r4, r4, #3
    dfa6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    dfaa:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    dfae:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
        match (
    dfb2:	e206      	b.n	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    dfb4:	2005      	movs	r0, #5
    dfb6:	f8cd 0bb0 	str.w	r0, [sp, #2992]	; 0xbb0
    dfba:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    dfbe:	f2c0 0001 	movt	r0, #1
    dfc2:	6801      	ldr	r1, [r0, #0]
    dfc4:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    dfc8:	f003 f92e 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dfcc:	901c      	str	r0, [sp, #112]	; 0x70
    dfce:	e01f      	b.n	e010 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31e8>
    dfd0:	2001      	movs	r0, #1
    dfd2:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    dfd6:	e015      	b.n	e004 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31dc>
    dfd8:	2000      	movs	r0, #0
    dfda:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    dfde:	e011      	b.n	e004 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31dc>
    dfe0:	2000      	movs	r0, #0
    dfe2:	f88d 0eb3 	strb.w	r0, [sp, #3763]	; 0xeb3
    dfe6:	f89d 1eb3 	ldrb.w	r1, [sp, #3763]	; 0xeb3
    dfea:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dfee:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dff2:	f003 f98e 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    dff6:	f8cd 0eb4 	str.w	r0, [sp, #3764]	; 0xeb4
    dffa:	f8dd 0eb4 	ldr.w	r0, [sp, #3764]	; 0xeb4
    dffe:	f8cd 0bb8 	str.w	r0, [sp, #3000]	; 0xbb8
    e002:	e00a      	b.n	e01a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31f2>
    e004:	f89d 0bb7 	ldrb.w	r0, [sp, #2999]	; 0xbb7
    e008:	07c0      	lsls	r0, r0, #31
    e00a:	2800      	cmp	r0, #0
    e00c:	d112      	bne.n	e034 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x320c>
    e00e:	e055      	b.n	e0bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3294>
    e010:	981c      	ldr	r0, [sp, #112]	; 0x70
    e012:	07c1      	lsls	r1, r0, #31
    e014:	2900      	cmp	r1, #0
    e016:	d1e3      	bne.n	dfe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31b8>
    e018:	e7de      	b.n	dfd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31b0>
    e01a:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    e01e:	f60d 31b8 	addw	r1, sp, #3000	; 0xbb8
    e022:	f003 f901 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    e026:	901b      	str	r0, [sp, #108]	; 0x6c
    e028:	e7ff      	b.n	e02a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3202>
    e02a:	981b      	ldr	r0, [sp, #108]	; 0x6c
    e02c:	07c1      	lsls	r1, r0, #31
    e02e:	2900      	cmp	r1, #0
    e030:	d1ce      	bne.n	dfd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31a8>
    e032:	e7d1      	b.n	dfd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31b0>
                trace!("[{:04x}] LD [I], Vx", self.pc);
    e034:	f24c 30b8 	movw	r0, #50104	; 0xc3b8
    e038:	f2c0 0001 	movt	r0, #1
    e03c:	6801      	ldr	r1, [r0, #0]
    e03e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e042:	f100 0212 	add.w	r2, r0, #18
    e046:	f8cd 2bdc 	str.w	r2, [sp, #3036]	; 0xbdc
    e04a:	f8dd 2bdc 	ldr.w	r2, [sp, #3036]	; 0xbdc
    e04e:	f8cd 2ca0 	str.w	r2, [sp, #3232]	; 0xca0
    e052:	f646 63ef 	movw	r3, #28399	; 0x6eef
    e056:	f2c0 0301 	movt	r3, #1
    e05a:	4610      	mov	r0, r2
    e05c:	911a      	str	r1, [sp, #104]	; 0x68
    e05e:	4619      	mov	r1, r3
    e060:	f7fc fa9b 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e064:	9019      	str	r0, [sp, #100]	; 0x64
    e066:	9118      	str	r1, [sp, #96]	; 0x60
    e068:	e7ff      	b.n	e06a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3242>
    e06a:	9819      	ldr	r0, [sp, #100]	; 0x64
    e06c:	f8cd 0bd4 	str.w	r0, [sp, #3028]	; 0xbd4
    e070:	9918      	ldr	r1, [sp, #96]	; 0x60
    e072:	f8cd 1bd8 	str.w	r1, [sp, #3032]	; 0xbd8
    e076:	f24c 3218 	movw	r2, #49944	; 0xc318
    e07a:	f2c0 0201 	movt	r2, #1
    e07e:	6812      	ldr	r2, [r2, #0]
    e080:	466b      	mov	r3, sp
    e082:	f04f 0c01 	mov.w	ip, #1
    e086:	f8c3 c008 	str.w	ip, [r3, #8]
    e08a:	605a      	str	r2, [r3, #4]
    e08c:	f8c3 c000 	str.w	ip, [r3]
    e090:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    e094:	2202      	movs	r2, #2
    e096:	f60d 33d4 	addw	r3, sp, #3028	; 0xbd4
    e09a:	991a      	ldr	r1, [sp, #104]	; 0x68
    e09c:	f003 f900 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    e0a0:	e7ff      	b.n	e0a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x327a>
    e0a2:	f8dd 1bb0 	ldr.w	r1, [sp, #2992]	; 0xbb0
    e0a6:	f24c 30d8 	movw	r0, #50136	; 0xc3d8
    e0aa:	f2c0 0001 	movt	r0, #1
    e0ae:	6802      	ldr	r2, [r0, #0]
    e0b0:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    e0b4:	f004 f8aa 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e0b8:	e7ff      	b.n	e0ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3292>
    e0ba:	e7ff      	b.n	e0bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3294>
                let x = x as usize;
    e0bc:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e0c0:	f8cd 0ca4 	str.w	r0, [sp, #3236]	; 0xca4
                for i in 0..(x + 1) {
    e0c4:	1c41      	adds	r1, r0, #1
    e0c6:	460a      	mov	r2, r1
    e0c8:	4281      	cmp	r1, r0
    e0ca:	9217      	str	r2, [sp, #92]	; 0x5c
    e0cc:	f0c0 81c9 	bcc.w	e462 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x363a>
    e0d0:	e7ff      	b.n	e0d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32aa>
    e0d2:	2000      	movs	r0, #0
    e0d4:	f8cd 0be0 	str.w	r0, [sp, #3040]	; 0xbe0
    e0d8:	9817      	ldr	r0, [sp, #92]	; 0x5c
    e0da:	f8cd 0be4 	str.w	r0, [sp, #3044]	; 0xbe4
    e0de:	f8dd 0be0 	ldr.w	r0, [sp, #3040]	; 0xbe0
    e0e2:	f8dd 1be4 	ldr.w	r1, [sp, #3044]	; 0xbe4
    e0e6:	f003 fe1d 	bl	11d24 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    e0ea:	9016      	str	r0, [sp, #88]	; 0x58
    e0ec:	9115      	str	r1, [sp, #84]	; 0x54
    e0ee:	e7ff      	b.n	e0f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32c8>
    e0f0:	9816      	ldr	r0, [sp, #88]	; 0x58
    e0f2:	f8cd 0be8 	str.w	r0, [sp, #3048]	; 0xbe8
    e0f6:	9915      	ldr	r1, [sp, #84]	; 0x54
    e0f8:	f8cd 1bec 	str.w	r1, [sp, #3052]	; 0xbec
    e0fc:	e7ff      	b.n	e0fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32d6>
    e0fe:	f60d 30e8 	addw	r0, sp, #3048	; 0xbe8
    e102:	f003 fd84 	bl	11c0e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    e106:	f8cd 1bf4 	str.w	r1, [sp, #3060]	; 0xbf4
    e10a:	f8cd 0bf0 	str.w	r0, [sp, #3056]	; 0xbf0
    e10e:	e7ff      	b.n	e110 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32e8>
    e110:	f8dd 0bf0 	ldr.w	r0, [sp, #3056]	; 0xbf0
    e114:	2800      	cmp	r0, #0
    e116:	d001      	beq.n	e11c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32f4>
    e118:	e7ff      	b.n	e11a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32f2>
    e11a:	e001      	b.n	e120 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32f8>
        match (
    e11c:	e151      	b.n	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
                for i in 0..(x + 1) {
    e11e:	defe      	udf	#254	; 0xfe
    e120:	f8dd 0bf4 	ldr.w	r0, [sp, #3060]	; 0xbf4
    e124:	f8cd 0ca8 	str.w	r0, [sp, #3240]	; 0xca8
    e128:	f8cd 0cac 	str.w	r0, [sp, #3244]	; 0xcac
    e12c:	f8cd 0cb0 	str.w	r0, [sp, #3248]	; 0xcb0
                    self.mem[self.i as usize + i] = self.v[i];
    e130:	280f      	cmp	r0, #15
    e132:	9014      	str	r0, [sp, #80]	; 0x50
    e134:	f200 81a1 	bhi.w	e47a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3652>
    e138:	e7ff      	b.n	e13a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3312>
    e13a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e13e:	9914      	ldr	r1, [sp, #80]	; 0x50
    e140:	1842      	adds	r2, r0, r1
    e142:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e146:	8a03      	ldrh	r3, [r0, #16]
    e148:	eb03 0c01 	add.w	ip, r3, r1
    e14c:	46e6      	mov	lr, ip
    e14e:	459c      	cmp	ip, r3
    e150:	9213      	str	r2, [sp, #76]	; 0x4c
    e152:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    e156:	f0c0 8199 	bcc.w	e48c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3664>
    e15a:	e7ff      	b.n	e15c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3334>
    e15c:	2000      	movs	r0, #0
    e15e:	9912      	ldr	r1, [sp, #72]	; 0x48
    e160:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    e164:	f040 819e 	bne.w	e4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x367c>
    e168:	e7ff      	b.n	e16a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3342>
    e16a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e16e:	9912      	ldr	r1, [sp, #72]	; 0x48
    e170:	1842      	adds	r2, r0, r1
    e172:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e174:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
                for i in 0..(x + 1) {
    e178:	e7c1      	b.n	e0fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32d6>
    e17a:	2005      	movs	r0, #5
    e17c:	f8cd 0bf8 	str.w	r0, [sp, #3064]	; 0xbf8
    e180:	f24c 20d0 	movw	r0, #49872	; 0xc2d0
    e184:	f2c0 0001 	movt	r0, #1
    e188:	6801      	ldr	r1, [r0, #0]
    e18a:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    e18e:	f003 f84b 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    e192:	9011      	str	r0, [sp, #68]	; 0x44
    e194:	e01f      	b.n	e1d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33ae>
    e196:	2001      	movs	r0, #1
    e198:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    e19c:	e015      	b.n	e1ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33a2>
    e19e:	2000      	movs	r0, #0
    e1a0:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    e1a4:	e011      	b.n	e1ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33a2>
    e1a6:	2000      	movs	r0, #0
    e1a8:	f88d 0ebb 	strb.w	r0, [sp, #3771]	; 0xebb
    e1ac:	f89d 1ebb 	ldrb.w	r1, [sp, #3771]	; 0xebb
    e1b0:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e1b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e1b8:	f003 f8ab 	bl	11312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    e1bc:	f8cd 0ebc 	str.w	r0, [sp, #3772]	; 0xebc
    e1c0:	f8dd 0ebc 	ldr.w	r0, [sp, #3772]	; 0xebc
    e1c4:	f8cd 0c00 	str.w	r0, [sp, #3072]	; 0xc00
    e1c8:	e00a      	b.n	e1e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33b8>
    e1ca:	f89d 0bff 	ldrb.w	r0, [sp, #3071]	; 0xbff
    e1ce:	07c0      	lsls	r0, r0, #31
    e1d0:	2800      	cmp	r0, #0
    e1d2:	d112      	bne.n	e1fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33d2>
    e1d4:	e055      	b.n	e282 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x345a>
    e1d6:	9811      	ldr	r0, [sp, #68]	; 0x44
    e1d8:	07c1      	lsls	r1, r0, #31
    e1da:	2900      	cmp	r1, #0
    e1dc:	d1e3      	bne.n	e1a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x337e>
    e1de:	e7de      	b.n	e19e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3376>
    e1e0:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    e1e4:	f50d 6140 	add.w	r1, sp, #3072	; 0xc00
    e1e8:	f003 f81e 	bl	11228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    e1ec:	9010      	str	r0, [sp, #64]	; 0x40
    e1ee:	e7ff      	b.n	e1f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33c8>
    e1f0:	9810      	ldr	r0, [sp, #64]	; 0x40
    e1f2:	07c1      	lsls	r1, r0, #31
    e1f4:	2900      	cmp	r1, #0
    e1f6:	d1ce      	bne.n	e196 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x336e>
    e1f8:	e7d1      	b.n	e19e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3376>
                trace!("[{:04x}] LD Vx, [I]", self.pc);
    e1fa:	f24c 20f4 	movw	r0, #49908	; 0xc2f4
    e1fe:	f2c0 0001 	movt	r0, #1
    e202:	6801      	ldr	r1, [r0, #0]
    e204:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e208:	f100 0212 	add.w	r2, r0, #18
    e20c:	f8cd 2c24 	str.w	r2, [sp, #3108]	; 0xc24
    e210:	f8dd 2c24 	ldr.w	r2, [sp, #3108]	; 0xc24
    e214:	f8cd 2c8c 	str.w	r2, [sp, #3212]	; 0xc8c
    e218:	f646 63ef 	movw	r3, #28399	; 0x6eef
    e21c:	f2c0 0301 	movt	r3, #1
    e220:	4610      	mov	r0, r2
    e222:	910f      	str	r1, [sp, #60]	; 0x3c
    e224:	4619      	mov	r1, r3
    e226:	f7fc f9b8 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e22a:	900e      	str	r0, [sp, #56]	; 0x38
    e22c:	910d      	str	r1, [sp, #52]	; 0x34
    e22e:	e7ff      	b.n	e230 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3408>
    e230:	980e      	ldr	r0, [sp, #56]	; 0x38
    e232:	f8cd 0c1c 	str.w	r0, [sp, #3100]	; 0xc1c
    e236:	990d      	ldr	r1, [sp, #52]	; 0x34
    e238:	f8cd 1c20 	str.w	r1, [sp, #3104]	; 0xc20
    e23c:	f24c 3218 	movw	r2, #49944	; 0xc318
    e240:	f2c0 0201 	movt	r2, #1
    e244:	6812      	ldr	r2, [r2, #0]
    e246:	466b      	mov	r3, sp
    e248:	f04f 0c01 	mov.w	ip, #1
    e24c:	f8c3 c008 	str.w	ip, [r3, #8]
    e250:	605a      	str	r2, [r3, #4]
    e252:	f8c3 c000 	str.w	ip, [r3]
    e256:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    e25a:	2202      	movs	r2, #2
    e25c:	f60d 431c 	addw	r3, sp, #3100	; 0xc1c
    e260:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e262:	f003 f81d 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    e266:	e7ff      	b.n	e268 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3440>
    e268:	f8dd 1bf8 	ldr.w	r1, [sp, #3064]	; 0xbf8
    e26c:	f24c 3058 	movw	r0, #50008	; 0xc358
    e270:	f2c0 0001 	movt	r0, #1
    e274:	6802      	ldr	r2, [r0, #0]
    e276:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    e27a:	f003 ffc7 	bl	1220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e27e:	e7ff      	b.n	e280 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3458>
    e280:	e7ff      	b.n	e282 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x345a>
                let x = x as usize;
    e282:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e286:	f8cd 0c90 	str.w	r0, [sp, #3216]	; 0xc90
                for i in 0..(x + 1) {
    e28a:	1c41      	adds	r1, r0, #1
    e28c:	460a      	mov	r2, r1
    e28e:	4281      	cmp	r1, r0
    e290:	920c      	str	r2, [sp, #48]	; 0x30
    e292:	f0c0 80bb 	bcc.w	e40c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35e4>
    e296:	e7ff      	b.n	e298 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3470>
    e298:	2000      	movs	r0, #0
    e29a:	f8cd 0c28 	str.w	r0, [sp, #3112]	; 0xc28
    e29e:	980c      	ldr	r0, [sp, #48]	; 0x30
    e2a0:	f8cd 0c2c 	str.w	r0, [sp, #3116]	; 0xc2c
    e2a4:	f8dd 0c28 	ldr.w	r0, [sp, #3112]	; 0xc28
    e2a8:	f8dd 1c2c 	ldr.w	r1, [sp, #3116]	; 0xc2c
    e2ac:	f003 fd3a 	bl	11d24 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    e2b0:	900b      	str	r0, [sp, #44]	; 0x2c
    e2b2:	910a      	str	r1, [sp, #40]	; 0x28
    e2b4:	e7ff      	b.n	e2b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x348e>
    e2b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e2b8:	f8cd 0c30 	str.w	r0, [sp, #3120]	; 0xc30
    e2bc:	990a      	ldr	r1, [sp, #40]	; 0x28
    e2be:	f8cd 1c34 	str.w	r1, [sp, #3124]	; 0xc34
    e2c2:	e7ff      	b.n	e2c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x349c>
    e2c4:	f50d 6043 	add.w	r0, sp, #3120	; 0xc30
    e2c8:	f003 fca1 	bl	11c0e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    e2cc:	f8cd 1c3c 	str.w	r1, [sp, #3132]	; 0xc3c
    e2d0:	f8cd 0c38 	str.w	r0, [sp, #3128]	; 0xc38
    e2d4:	e7ff      	b.n	e2d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34ae>
    e2d6:	f8dd 0c38 	ldr.w	r0, [sp, #3128]	; 0xc38
    e2da:	2800      	cmp	r0, #0
    e2dc:	d001      	beq.n	e2e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34ba>
    e2de:	e7ff      	b.n	e2e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34b8>
    e2e0:	e001      	b.n	e2e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34be>
        match (
    e2e2:	e06e      	b.n	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
                for i in 0..(x + 1) {
    e2e4:	defe      	udf	#254	; 0xfe
    e2e6:	f8dd 0c3c 	ldr.w	r0, [sp, #3132]	; 0xc3c
    e2ea:	f8cd 0c94 	str.w	r0, [sp, #3220]	; 0xc94
    e2ee:	f8cd 0c98 	str.w	r0, [sp, #3224]	; 0xc98
    e2f2:	f8cd 0c9c 	str.w	r0, [sp, #3228]	; 0xc9c
                    self.v[i] = self.mem[self.i as usize + i];
    e2f6:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    e2fa:	8a0a      	ldrh	r2, [r1, #16]
    e2fc:	1813      	adds	r3, r2, r0
    e2fe:	469c      	mov	ip, r3
    e300:	4293      	cmp	r3, r2
    e302:	9009      	str	r0, [sp, #36]	; 0x24
    e304:	f8cd c020 	str.w	ip, [sp, #32]
    e308:	f0c0 808c 	bcc.w	e424 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35fc>
    e30c:	e7ff      	b.n	e30e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34e6>
    e30e:	2000      	movs	r0, #0
    e310:	9908      	ldr	r1, [sp, #32]
    e312:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    e316:	f040 8091 	bne.w	e43c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3614>
    e31a:	e7ff      	b.n	e31c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34f4>
    e31c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e320:	9908      	ldr	r1, [sp, #32]
    e322:	1842      	adds	r2, r0, r1
    e324:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    e328:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e32a:	2b0f      	cmp	r3, #15
    e32c:	9207      	str	r2, [sp, #28]
    e32e:	f200 808f 	bhi.w	e450 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3628>
    e332:	e7ff      	b.n	e334 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x350c>
    e334:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e338:	9909      	ldr	r1, [sp, #36]	; 0x24
    e33a:	1842      	adds	r2, r0, r1
    e33c:	9b07      	ldr	r3, [sp, #28]
    e33e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                for i in 0..(x + 1) {
    e342:	e7bf      	b.n	e2c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x349c>
    e344:	f646 61ef 	movw	r1, #28399	; 0x6eef
    e348:	f2c0 0101 	movt	r1, #1
    e34c:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
    e350:	f7fc f923 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e354:	9006      	str	r0, [sp, #24]
    e356:	9105      	str	r1, [sp, #20]
    e358:	e7ff      	b.n	e35a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3532>
    e35a:	f8dd 042c 	ldr.w	r0, [sp, #1068]	; 0x42c
    e35e:	f8cd 0c58 	str.w	r0, [sp, #3160]	; 0xc58
    e362:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
    e366:	f8cd 1c5c 	str.w	r1, [sp, #3164]	; 0xc5c
    e36a:	9a06      	ldr	r2, [sp, #24]
    e36c:	f8cd 2c60 	str.w	r2, [sp, #3168]	; 0xc60
    e370:	9b05      	ldr	r3, [sp, #20]
    e372:	f8cd 3c64 	str.w	r3, [sp, #3172]	; 0xc64
    e376:	f64c 6cbc 	movw	ip, #52924	; 0xcebc
    e37a:	f2c0 0c01 	movt	ip, #1
    e37e:	f8dc c000 	ldr.w	ip, [ip]
    e382:	46ee      	mov	lr, sp
    e384:	2402      	movs	r4, #2
    e386:	f8ce 4008 	str.w	r4, [lr, #8]
    e38a:	f8ce c004 	str.w	ip, [lr, #4]
    e38e:	f8ce 4000 	str.w	r4, [lr]
    e392:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
    e396:	f60d 4358 	addw	r3, sp, #3160	; 0xc58
    e39a:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
    e39e:	4622      	mov	r2, r4
    e3a0:	f002 ff7e 	bl	112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    e3a4:	e7ff      	b.n	e3a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x357e>
    e3a6:	f64c 60e0 	movw	r0, #52960	; 0xcee0
    e3aa:	f2c0 0001 	movt	r0, #1
    e3ae:	f007 f98a 	bl	156c6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    e3b2:	9004      	str	r0, [sp, #16]
    e3b4:	e7ff      	b.n	e3b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x358e>
    e3b6:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
    e3ba:	9904      	ldr	r1, [sp, #16]
    e3bc:	f007 f9c0 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    e3c0:	defe      	udf	#254	; 0xfe
        }
    }
    e3c2:	f50d 6d6c 	add.w	sp, sp, #3776	; 0xec0
    e3c6:	bd70      	pop	{r4, r5, r6, pc}
        let h = self.mem[self.pc as usize] as u16;
    e3c8:	f24c 2078 	movw	r0, #49784	; 0xc278
    e3cc:	f2c0 0001 	movt	r0, #1
    e3d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e3d4:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    e3d8:	f007 f992 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e3dc:	defe      	udf	#254	; 0xfe
        let l = self.mem[(self.pc + 1) as usize] as u16;
    e3de:	f24c 20a0 	movw	r0, #49824	; 0xc2a0
    e3e2:	f2c0 0001 	movt	r0, #1
    e3e6:	f24c 2288 	movw	r2, #49800	; 0xc288
    e3ea:	f2c0 0201 	movt	r2, #1
    e3ee:	211c      	movs	r1, #28
    e3f0:	f007 f970 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e3f4:	defe      	udf	#254	; 0xfe
    e3f6:	f24c 20bc 	movw	r0, #49852	; 0xc2bc
    e3fa:	f2c0 0001 	movt	r0, #1
    e3fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e402:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    e406:	f007 f97b 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e40a:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
    e40c:	f24c 20a0 	movw	r0, #49824	; 0xc2a0
    e410:	f2c0 0001 	movt	r0, #1
    e414:	f24c 325c 	movw	r2, #50012	; 0xc35c
    e418:	f2c0 0201 	movt	r2, #1
    e41c:	211c      	movs	r1, #28
    e41e:	f007 f959 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e422:	defe      	udf	#254	; 0xfe
                    self.v[i] = self.mem[self.i as usize + i];
    e424:	f24c 20a0 	movw	r0, #49824	; 0xc2a0
    e428:	f2c0 0001 	movt	r0, #1
    e42c:	f24c 326c 	movw	r2, #50028	; 0xc36c
    e430:	f2c0 0201 	movt	r2, #1
    e434:	211c      	movs	r1, #28
    e436:	f007 f94d 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e43a:	defe      	udf	#254	; 0xfe
    e43c:	f24c 307c 	movw	r0, #50044	; 0xc37c
    e440:	f2c0 0001 	movt	r0, #1
    e444:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e448:	9908      	ldr	r1, [sp, #32]
    e44a:	f007 f959 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e44e:	defe      	udf	#254	; 0xfe
    e450:	f24c 308c 	movw	r0, #50060	; 0xc38c
    e454:	f2c0 0001 	movt	r0, #1
    e458:	2210      	movs	r2, #16
    e45a:	9909      	ldr	r1, [sp, #36]	; 0x24
    e45c:	f007 f950 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e460:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
    e462:	f24c 20a0 	movw	r0, #49824	; 0xc2a0
    e466:	f2c0 0001 	movt	r0, #1
    e46a:	f24c 32dc 	movw	r2, #50140	; 0xc3dc
    e46e:	f2c0 0201 	movt	r2, #1
    e472:	211c      	movs	r1, #28
    e474:	f007 f92e 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e478:	defe      	udf	#254	; 0xfe
                    self.mem[self.i as usize + i] = self.v[i];
    e47a:	f24c 30ec 	movw	r0, #50156	; 0xc3ec
    e47e:	f2c0 0001 	movt	r0, #1
    e482:	2210      	movs	r2, #16
    e484:	9914      	ldr	r1, [sp, #80]	; 0x50
    e486:	f007 f93b 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e48a:	defe      	udf	#254	; 0xfe
    e48c:	f24c 20a0 	movw	r0, #49824	; 0xc2a0
    e490:	f2c0 0001 	movt	r0, #1
    e494:	f24c 32fc 	movw	r2, #50172	; 0xc3fc
    e498:	f2c0 0201 	movt	r2, #1
    e49c:	211c      	movs	r1, #28
    e49e:	f007 f919 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e4a2:	defe      	udf	#254	; 0xfe
    e4a4:	f24c 400c 	movw	r0, #50188	; 0xc40c
    e4a8:	f2c0 0001 	movt	r0, #1
    e4ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e4b0:	9912      	ldr	r1, [sp, #72]	; 0x48
    e4b2:	f007 f925 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e4b6:	defe      	udf	#254	; 0xfe
                let bcd = self.v[x];
    e4b8:	f24c 405c 	movw	r0, #50268	; 0xc45c
    e4bc:	f2c0 0001 	movt	r0, #1
    e4c0:	2210      	movs	r2, #16
    e4c2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e4c6:	f007 f91b 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e4ca:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize] = (bcd / 100) % 10;
    e4cc:	f24c 406c 	movw	r0, #50284	; 0xc46c
    e4d0:	f2c0 0001 	movt	r0, #1
    e4d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e4d8:	9920      	ldr	r1, [sp, #128]	; 0x80
    e4da:	f007 f911 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e4de:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    e4e0:	f24c 20a0 	movw	r0, #49824	; 0xc2a0
    e4e4:	f2c0 0001 	movt	r0, #1
    e4e8:	f24c 427c 	movw	r2, #50300	; 0xc47c
    e4ec:	f2c0 0201 	movt	r2, #1
    e4f0:	211c      	movs	r1, #28
    e4f2:	f007 f8ef 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e4f6:	defe      	udf	#254	; 0xfe
    e4f8:	f24c 408c 	movw	r0, #50316	; 0xc48c
    e4fc:	f2c0 0001 	movt	r0, #1
    e500:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e504:	991e      	ldr	r1, [sp, #120]	; 0x78
    e506:	f007 f8fb 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e50a:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 2] = bcd % 10;
    e50c:	f24c 20a0 	movw	r0, #49824	; 0xc2a0
    e510:	f2c0 0001 	movt	r0, #1
    e514:	f24c 429c 	movw	r2, #50332	; 0xc49c
    e518:	f2c0 0201 	movt	r2, #1
    e51c:	211c      	movs	r1, #28
    e51e:	f007 f8d9 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e522:	defe      	udf	#254	; 0xfe
    e524:	f24c 40ac 	movw	r0, #50348	; 0xc4ac
    e528:	f2c0 0001 	movt	r0, #1
    e52c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e530:	991d      	ldr	r1, [sp, #116]	; 0x74
    e532:	f007 f8e5 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e536:	defe      	udf	#254	; 0xfe
                self.i = (self.v[x] * 5).into();
    e538:	f24c 40fc 	movw	r0, #50428	; 0xc4fc
    e53c:	f2c0 0001 	movt	r0, #1
    e540:	2210      	movs	r2, #16
    e542:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e546:	f007 f8db 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e54a:	defe      	udf	#254	; 0xfe
    e54c:	f24c 5020 	movw	r0, #50464	; 0xc520
    e550:	f2c0 0001 	movt	r0, #1
    e554:	f24c 520c 	movw	r2, #50444	; 0xc50c
    e558:	f2c0 0201 	movt	r2, #1
    e55c:	2121      	movs	r1, #33	; 0x21
    e55e:	f007 f8b9 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e562:	defe      	udf	#254	; 0xfe
                self.i = self.i.wrapping_add(self.v[x].into());
    e564:	f24c 5080 	movw	r0, #50560	; 0xc580
    e568:	f2c0 0001 	movt	r0, #1
    e56c:	2210      	movs	r2, #16
    e56e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e572:	f007 f8c5 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e576:	defe      	udf	#254	; 0xfe
                self.st = self.v[x];
    e578:	f24c 50d0 	movw	r0, #50640	; 0xc5d0
    e57c:	f2c0 0001 	movt	r0, #1
    e580:	2210      	movs	r2, #16
    e582:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e586:	f007 f8bb 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e58a:	defe      	udf	#254	; 0xfe
                self.dt = self.v[x];
    e58c:	f24c 6020 	movw	r0, #50720	; 0xc620
    e590:	f2c0 0001 	movt	r0, #1
    e594:	2210      	movs	r2, #16
    e596:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e59a:	f007 f8b1 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e59e:	defe      	udf	#254	; 0xfe
                self.v[x] = self.waitkey();
    e5a0:	f24c 6070 	movw	r0, #50800	; 0xc670
    e5a4:	f2c0 0001 	movt	r0, #1
    e5a8:	2210      	movs	r2, #16
    e5aa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e5ae:	f007 f8a7 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e5b2:	defe      	udf	#254	; 0xfe
                self.v[x] = self.dt;
    e5b4:	f24c 60c0 	movw	r0, #50880	; 0xc6c0
    e5b8:	f2c0 0001 	movt	r0, #1
    e5bc:	2210      	movs	r2, #16
    e5be:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e5c2:	f007 f89d 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e5c6:	defe      	udf	#254	; 0xfe
                if !self.hw.key(self.v[x]) {
    e5c8:	f24c 7010 	movw	r0, #50960	; 0xc710
    e5cc:	f2c0 0001 	movt	r0, #1
    e5d0:	2210      	movs	r2, #16
    e5d2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e5d6:	f007 f893 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e5da:	defe      	udf	#254	; 0xfe
                if self.hw.key(self.v[x]) {
    e5dc:	f24c 7054 	movw	r0, #51028	; 0xc754
    e5e0:	f2c0 0001 	movt	r0, #1
    e5e4:	2210      	movs	r2, #16
    e5e6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e5ea:	f007 f889 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e5ee:	defe      	udf	#254	; 0xfe
                let basex = self.v[x] as usize;
    e5f0:	f24c 70a8 	movw	r0, #51112	; 0xc7a8
    e5f4:	f2c0 0001 	movt	r0, #1
    e5f8:	2210      	movs	r2, #16
    e5fa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e5fe:	f007 f87f 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e602:	defe      	udf	#254	; 0xfe
                let basey = self.v[y] as usize;
    e604:	f24c 70b8 	movw	r0, #51128	; 0xc7b8
    e608:	f2c0 0001 	movt	r0, #1
    e60c:	2210      	movs	r2, #16
    e60e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e612:	f007 f875 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e616:	defe      	udf	#254	; 0xfe
                    let b = self.mem[self.i as usize + y];
    e618:	f24c 20a0 	movw	r0, #49824	; 0xc2a0
    e61c:	f2c0 0001 	movt	r0, #1
    e620:	f24c 72c8 	movw	r2, #51144	; 0xc7c8
    e624:	f2c0 0201 	movt	r2, #1
    e628:	211c      	movs	r1, #28
    e62a:	f007 f853 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e62e:	defe      	udf	#254	; 0xfe
    e630:	f24c 70d8 	movw	r0, #51160	; 0xc7d8
    e634:	f2c0 0001 	movt	r0, #1
    e638:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e63c:	9967      	ldr	r1, [sp, #412]	; 0x19c
    e63e:	f007 f85f 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e642:	defe      	udf	#254	; 0xfe
                    let vramy = (y + basey) % h;
    e644:	f24c 20a0 	movw	r0, #49824	; 0xc2a0
    e648:	f2c0 0001 	movt	r0, #1
    e64c:	f24c 72e8 	movw	r2, #51176	; 0xc7e8
    e650:	f2c0 0201 	movt	r2, #1
    e654:	211c      	movs	r1, #28
    e656:	f007 f83d 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e65a:	defe      	udf	#254	; 0xfe
    e65c:	f64c 0000 	movw	r0, #51200	; 0xc800
    e660:	f2c0 0001 	movt	r0, #1
    e664:	f24c 72e8 	movw	r2, #51176	; 0xc7e8
    e668:	f2c0 0201 	movt	r2, #1
    e66c:	2139      	movs	r1, #57	; 0x39
    e66e:	f007 f831 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e672:	defe      	udf	#254	; 0xfe
                        let vramx = (x + basex) % w;
    e674:	f24c 20a0 	movw	r0, #49824	; 0xc2a0
    e678:	f2c0 0001 	movt	r0, #1
    e67c:	f64c 023c 	movw	r2, #51260	; 0xc83c
    e680:	f2c0 0201 	movt	r2, #1
    e684:	211c      	movs	r1, #28
    e686:	f007 f825 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e68a:	defe      	udf	#254	; 0xfe
    e68c:	f64c 0000 	movw	r0, #51200	; 0xc800
    e690:	f2c0 0001 	movt	r0, #1
    e694:	f64c 023c 	movw	r2, #51260	; 0xc83c
    e698:	f2c0 0201 	movt	r2, #1
    e69c:	2139      	movs	r1, #57	; 0x39
    e69e:	f007 f819 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e6a2:	defe      	udf	#254	; 0xfe
                        let src = (b & 1 << (7 - x)) > 0;
    e6a4:	f64c 0060 	movw	r0, #51296	; 0xc860
    e6a8:	f2c0 0001 	movt	r0, #1
    e6ac:	f64c 024c 	movw	r2, #51276	; 0xc84c
    e6b0:	f2c0 0201 	movt	r2, #1
    e6b4:	2121      	movs	r1, #33	; 0x21
    e6b6:	f007 f80d 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e6ba:	defe      	udf	#254	; 0xfe
    e6bc:	f64c 00a0 	movw	r0, #51360	; 0xc8a0
    e6c0:	f2c0 0001 	movt	r0, #1
    e6c4:	f64c 0284 	movw	r2, #51332	; 0xc884
    e6c8:	f2c0 0201 	movt	r2, #1
    e6cc:	2123      	movs	r1, #35	; 0x23
    e6ce:	f007 f801 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e6d2:	defe      	udf	#254	; 0xfe
                self.v[x] = self.hw.rand() & kk;
    e6d4:	f64c 1004 	movw	r0, #51460	; 0xc904
    e6d8:	f2c0 0001 	movt	r0, #1
    e6dc:	2210      	movs	r2, #16
    e6de:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e6e2:	f007 f80d 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e6e6:	defe      	udf	#254	; 0xfe
                if self.v[x] != self.v[y] {
    e6e8:	f64c 10d4 	movw	r0, #51668	; 0xc9d4
    e6ec:	f2c0 0001 	movt	r0, #1
    e6f0:	2210      	movs	r2, #16
    e6f2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e6f6:	f007 f803 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e6fa:	defe      	udf	#254	; 0xfe
    e6fc:	f64c 10e4 	movw	r0, #51684	; 0xc9e4
    e700:	f2c0 0001 	movt	r0, #1
    e704:	2210      	movs	r2, #16
    e706:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e70a:	f006 fff9 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e70e:	defe      	udf	#254	; 0xfe
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    e710:	f64c 2034 	movw	r0, #51764	; 0xca34
    e714:	f2c0 0001 	movt	r0, #1
    e718:	2210      	movs	r2, #16
    e71a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e71e:	f006 ffef 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e722:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shl(1);
    e724:	f64c 2044 	movw	r0, #51780	; 0xca44
    e728:	f2c0 0001 	movt	r0, #1
    e72c:	2210      	movs	r2, #16
    e72e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e732:	f006 ffe5 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e736:	defe      	udf	#254	; 0xfe
    e738:	f64c 2054 	movw	r0, #51796	; 0xca54
    e73c:	f2c0 0001 	movt	r0, #1
    e740:	2210      	movs	r2, #16
    e742:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e746:	f006 ffdb 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e74a:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    e74c:	f64c 20a8 	movw	r0, #51880	; 0xcaa8
    e750:	f2c0 0001 	movt	r0, #1
    e754:	2210      	movs	r2, #16
    e756:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e75a:	f006 ffd1 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e75e:	defe      	udf	#254	; 0xfe
    e760:	f64c 20b8 	movw	r0, #51896	; 0xcab8
    e764:	f2c0 0001 	movt	r0, #1
    e768:	2210      	movs	r2, #16
    e76a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e76e:	f006 ffc7 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e772:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    e774:	f64c 20c8 	movw	r0, #51912	; 0xcac8
    e778:	f2c0 0001 	movt	r0, #1
    e77c:	2210      	movs	r2, #16
    e77e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e782:	f006 ffbd 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e786:	defe      	udf	#254	; 0xfe
                self.v[0xf] = self.v[x] & 1;
    e788:	f64c 3018 	movw	r0, #51992	; 0xcb18
    e78c:	f2c0 0001 	movt	r0, #1
    e790:	2210      	movs	r2, #16
    e792:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e796:	f006 ffb3 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e79a:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shr(1);
    e79c:	f64c 3028 	movw	r0, #52008	; 0xcb28
    e7a0:	f2c0 0001 	movt	r0, #1
    e7a4:	2210      	movs	r2, #16
    e7a6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e7aa:	f006 ffa9 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e7ae:	defe      	udf	#254	; 0xfe
    e7b0:	f64c 3038 	movw	r0, #52024	; 0xcb38
    e7b4:	f2c0 0001 	movt	r0, #1
    e7b8:	2210      	movs	r2, #16
    e7ba:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e7be:	f006 ff9f 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e7c2:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    e7c4:	f64c 3088 	movw	r0, #52104	; 0xcb88
    e7c8:	f2c0 0001 	movt	r0, #1
    e7cc:	2210      	movs	r2, #16
    e7ce:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e7d2:	f006 ff95 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e7d6:	defe      	udf	#254	; 0xfe
    e7d8:	f64c 3098 	movw	r0, #52120	; 0xcb98
    e7dc:	f2c0 0001 	movt	r0, #1
    e7e0:	2210      	movs	r2, #16
    e7e2:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e7e6:	f006 ff8b 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e7ea:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    e7ec:	f64c 30a8 	movw	r0, #52136	; 0xcba8
    e7f0:	f2c0 0001 	movt	r0, #1
    e7f4:	2210      	movs	r2, #16
    e7f6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e7fa:	f006 ff81 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e7fe:	defe      	udf	#254	; 0xfe
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    e800:	f64c 30f8 	movw	r0, #52216	; 0xcbf8
    e804:	f2c0 0001 	movt	r0, #1
    e808:	2210      	movs	r2, #16
    e80a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e80e:	f006 ff77 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e812:	defe      	udf	#254	; 0xfe
    e814:	f64c 4008 	movw	r0, #52232	; 0xcc08
    e818:	f2c0 0001 	movt	r0, #1
    e81c:	2210      	movs	r2, #16
    e81e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e822:	f006 ff6d 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e826:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    e828:	f64c 4018 	movw	r0, #52248	; 0xcc18
    e82c:	f2c0 0001 	movt	r0, #1
    e830:	2210      	movs	r2, #16
    e832:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e836:	f006 ff63 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e83a:	defe      	udf	#254	; 0xfe
                self.v[x] ^= self.v[y];
    e83c:	f64c 4068 	movw	r0, #52328	; 0xcc68
    e840:	f2c0 0001 	movt	r0, #1
    e844:	2210      	movs	r2, #16
    e846:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e84a:	f006 ff59 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e84e:	defe      	udf	#254	; 0xfe
    e850:	f64c 4078 	movw	r0, #52344	; 0xcc78
    e854:	f2c0 0001 	movt	r0, #1
    e858:	2210      	movs	r2, #16
    e85a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e85e:	f006 ff4f 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e862:	defe      	udf	#254	; 0xfe
                self.v[x] &= self.v[y];
    e864:	f64c 40c8 	movw	r0, #52424	; 0xccc8
    e868:	f2c0 0001 	movt	r0, #1
    e86c:	2210      	movs	r2, #16
    e86e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e872:	f006 ff45 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e876:	defe      	udf	#254	; 0xfe
    e878:	f64c 40d8 	movw	r0, #52440	; 0xccd8
    e87c:	f2c0 0001 	movt	r0, #1
    e880:	2210      	movs	r2, #16
    e882:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e886:	f006 ff3b 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e88a:	defe      	udf	#254	; 0xfe
                self.v[x] |= self.v[y];
    e88c:	f64c 5028 	movw	r0, #52520	; 0xcd28
    e890:	f2c0 0001 	movt	r0, #1
    e894:	2210      	movs	r2, #16
    e896:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e89a:	f006 ff31 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e89e:	defe      	udf	#254	; 0xfe
    e8a0:	f64c 5038 	movw	r0, #52536	; 0xcd38
    e8a4:	f2c0 0001 	movt	r0, #1
    e8a8:	2210      	movs	r2, #16
    e8aa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8ae:	f006 ff27 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e8b2:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[y];
    e8b4:	f64c 5088 	movw	r0, #52616	; 0xcd88
    e8b8:	f2c0 0001 	movt	r0, #1
    e8bc:	2210      	movs	r2, #16
    e8be:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e8c2:	f006 ff1d 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e8c6:	defe      	udf	#254	; 0xfe
    e8c8:	f64c 5098 	movw	r0, #52632	; 0xcd98
    e8cc:	f2c0 0001 	movt	r0, #1
    e8d0:	2210      	movs	r2, #16
    e8d2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8d6:	f006 ff13 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e8da:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_add(kk);
    e8dc:	f64c 50e8 	movw	r0, #52712	; 0xcde8
    e8e0:	f2c0 0001 	movt	r0, #1
    e8e4:	2210      	movs	r2, #16
    e8e6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8ea:	f006 ff09 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e8ee:	defe      	udf	#254	; 0xfe
    e8f0:	f64c 50f8 	movw	r0, #52728	; 0xcdf8
    e8f4:	f2c0 0001 	movt	r0, #1
    e8f8:	2210      	movs	r2, #16
    e8fa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8fe:	f006 feff 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e902:	defe      	udf	#254	; 0xfe
                self.v[x] = kk;
    e904:	f64c 6048 	movw	r0, #52808	; 0xce48
    e908:	f2c0 0001 	movt	r0, #1
    e90c:	2210      	movs	r2, #16
    e90e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e912:	f006 fef5 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e916:	defe      	udf	#254	; 0xfe
                if self.v[x] == self.v[y] {
    e918:	f64c 7030 	movw	r0, #53040	; 0xcf30
    e91c:	f2c0 0001 	movt	r0, #1
    e920:	2210      	movs	r2, #16
    e922:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e926:	f006 feeb 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e92a:	defe      	udf	#254	; 0xfe
    e92c:	f64c 7040 	movw	r0, #53056	; 0xcf40
    e930:	f2c0 0001 	movt	r0, #1
    e934:	2210      	movs	r2, #16
    e936:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e93a:	f006 fee1 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e93e:	defe      	udf	#254	; 0xfe
                if self.v[x] != kk {
    e940:	f64c 7090 	movw	r0, #53136	; 0xcf90
    e944:	f2c0 0001 	movt	r0, #1
    e948:	2210      	movs	r2, #16
    e94a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e94e:	f006 fed7 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e952:	defe      	udf	#254	; 0xfe
                if self.v[x] == kk {
    e954:	f64c 70e0 	movw	r0, #53216	; 0xcfe0
    e958:	f2c0 0001 	movt	r0, #1
    e95c:	2210      	movs	r2, #16
    e95e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e962:	f006 fecd 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e966:	defe      	udf	#254	; 0xfe

0000e968 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hbe953f3cc8769e4cE>:
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    e968:	b580      	push	{r7, lr}
    e96a:	b086      	sub	sp, #24
    e96c:	9104      	str	r1, [sp, #16]
    e96e:	9205      	str	r2, [sp, #20]
    e970:	6809      	ldr	r1, [r1, #0]
    e972:	6809      	ldr	r1, [r1, #0]
    e974:	2300      	movs	r3, #0
    e976:	9301      	str	r3, [sp, #4]
    e978:	9102      	str	r1, [sp, #8]
    e97a:	9203      	str	r2, [sp, #12]
    e97c:	9901      	ldr	r1, [sp, #4]
    e97e:	9a02      	ldr	r2, [sp, #8]
    e980:	9b03      	ldr	r3, [sp, #12]
    e982:	f000 fa9d 	bl	eec0 <_ZN4core4iter6traits8iterator8Iterator3map17h9d41144da998d389E>
    e986:	e7ff      	b.n	e988 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hbe953f3cc8769e4cE+0x20>
    e988:	b006      	add	sp, #24
    e98a:	bd80      	pop	{r7, pc}

0000e98c <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h6a25aae91f88a8abE>:
    e98c:	b084      	sub	sp, #16
    e98e:	9002      	str	r0, [sp, #8]
    e990:	9103      	str	r1, [sp, #12]
    e992:	6800      	ldr	r0, [r0, #0]
    e994:	9000      	str	r0, [sp, #0]
    e996:	9101      	str	r1, [sp, #4]
    e998:	9800      	ldr	r0, [sp, #0]
    e99a:	9901      	ldr	r1, [sp, #4]
    e99c:	b004      	add	sp, #16
    e99e:	4770      	bx	lr

0000e9a0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>:
    fn jump(&mut self, pc: u16) {
    e9a0:	b082      	sub	sp, #8
    e9a2:	460a      	mov	r2, r1
    e9a4:	9000      	str	r0, [sp, #0]
    e9a6:	f8ad 1006 	strh.w	r1, [sp, #6]
        self.pc = pc;
    e9aa:	8241      	strh	r1, [r0, #18]
    }
    e9ac:	b002      	add	sp, #8
    e9ae:	4770      	bx	lr

0000e9b0 <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE>:
    fn load(&mut self, rom: &[u8]) {
    e9b0:	b580      	push	{r7, lr}
    e9b2:	b08a      	sub	sp, #40	; 0x28
    e9b4:	9105      	str	r1, [sp, #20]
    e9b6:	9206      	str	r2, [sp, #24]
    e9b8:	9009      	str	r0, [sp, #36]	; 0x24
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
    e9ba:	3047      	adds	r0, #71	; 0x47
    e9bc:	9905      	ldr	r1, [sp, #20]
    e9be:	9a06      	ldr	r2, [sp, #24]
    e9c0:	9004      	str	r0, [sp, #16]
    e9c2:	4608      	mov	r0, r1
    e9c4:	4611      	mov	r1, r2
    e9c6:	f003 f986 	bl	11cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    e9ca:	9003      	str	r0, [sp, #12]
    e9cc:	e7ff      	b.n	e9ce <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x1e>
    e9ce:	9803      	ldr	r0, [sp, #12]
    e9d0:	f500 7100 	add.w	r1, r0, #512	; 0x200
    e9d4:	460a      	mov	r2, r1
    e9d6:	4281      	cmp	r1, r0
    e9d8:	9202      	str	r2, [sp, #8]
    e9da:	d318      	bcc.n	ea0e <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x5e>
    e9dc:	e7ff      	b.n	e9de <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x2e>
    e9de:	f44f 7000 	mov.w	r0, #512	; 0x200
    e9e2:	9007      	str	r0, [sp, #28]
    e9e4:	9802      	ldr	r0, [sp, #8]
    e9e6:	9008      	str	r0, [sp, #32]
    e9e8:	9a07      	ldr	r2, [sp, #28]
    e9ea:	9b08      	ldr	r3, [sp, #32]
    e9ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    e9f0:	9804      	ldr	r0, [sp, #16]
    e9f2:	f000 fb7a 	bl	f0ea <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc22918223fd59462E>
    e9f6:	9001      	str	r0, [sp, #4]
    e9f8:	9100      	str	r1, [sp, #0]
    e9fa:	e7ff      	b.n	e9fc <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x4c>
    e9fc:	9a05      	ldr	r2, [sp, #20]
    e9fe:	9b06      	ldr	r3, [sp, #24]
    ea00:	9801      	ldr	r0, [sp, #4]
    ea02:	9900      	ldr	r1, [sp, #0]
    ea04:	f7fa fa37 	bl	8e76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
    ea08:	e7ff      	b.n	ea0a <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x5a>
    }
    ea0a:	b00a      	add	sp, #40	; 0x28
    ea0c:	bd80      	pop	{r7, pc}
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
    ea0e:	f24c 20a0 	movw	r0, #49824	; 0xc2a0
    ea12:	f2c0 0001 	movt	r0, #1
    ea16:	f24d 123c 	movw	r2, #53564	; 0xd13c
    ea1a:	f2c0 0201 	movt	r2, #1
    ea1e:	211c      	movs	r1, #28
    ea20:	f006 fe58 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ea24:	defe      	udf	#254	; 0xfe

0000ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>:
    fn next(&mut self) {
    ea26:	b580      	push	{r7, lr}
    ea28:	b084      	sub	sp, #16
    ea2a:	9003      	str	r0, [sp, #12]
        self.jump(self.pc.wrapping_add(2));
    ea2c:	8a41      	ldrh	r1, [r0, #18]
    ea2e:	2202      	movs	r2, #2
    ea30:	9002      	str	r0, [sp, #8]
    ea32:	4608      	mov	r0, r1
    ea34:	4611      	mov	r1, r2
    ea36:	f000 fb1e 	bl	f076 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E>
    ea3a:	9001      	str	r0, [sp, #4]
    ea3c:	e7ff      	b.n	ea3e <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE+0x18>
    ea3e:	9802      	ldr	r0, [sp, #8]
    ea40:	9901      	ldr	r1, [sp, #4]
    ea42:	f7ff ffad 	bl	e9a0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    ea46:	e7ff      	b.n	ea48 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE+0x22>
    }
    ea48:	b004      	add	sp, #16
    ea4a:	bd80      	pop	{r7, pc}

0000ea4c <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE>:
    fn push(&mut self, item: u16) {
    ea4c:	b580      	push	{r7, lr}
    ea4e:	b086      	sub	sp, #24
    ea50:	460a      	mov	r2, r1
    ea52:	9004      	str	r0, [sp, #16]
    ea54:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.stack[self.sp as usize] = item;
    ea58:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    ea5c:	460b      	mov	r3, r1
    ea5e:	290f      	cmp	r1, #15
    ea60:	9003      	str	r0, [sp, #12]
    ea62:	9202      	str	r2, [sp, #8]
    ea64:	9301      	str	r3, [sp, #4]
    ea66:	d813      	bhi.n	ea90 <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE+0x44>
    ea68:	e7ff      	b.n	ea6a <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE+0x1e>
    ea6a:	9803      	ldr	r0, [sp, #12]
    ea6c:	9901      	ldr	r1, [sp, #4]
    ea6e:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    ea72:	9b02      	ldr	r3, [sp, #8]
    ea74:	8293      	strh	r3, [r2, #20]
        self.sp = self.sp.wrapping_add(1);
    ea76:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    ea7a:	2101      	movs	r1, #1
    ea7c:	f000 fa5e 	bl	ef3c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE>
    ea80:	9000      	str	r0, [sp, #0]
    ea82:	e7ff      	b.n	ea84 <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE+0x38>
    ea84:	9800      	ldr	r0, [sp, #0]
    ea86:	9903      	ldr	r1, [sp, #12]
    ea88:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
    }
    ea8c:	b006      	add	sp, #24
    ea8e:	bd80      	pop	{r7, pc}
        self.stack[self.sp as usize] = item;
    ea90:	f24d 104c 	movw	r0, #53580	; 0xd14c
    ea94:	f2c0 0001 	movt	r0, #1
    ea98:	2210      	movs	r2, #16
    ea9a:	9901      	ldr	r1, [sp, #4]
    ea9c:	f006 fe30 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eaa0:	defe      	udf	#254	; 0xfe

0000eaa2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E>:
    fn tick(&mut self) {
    eaa2:	b580      	push	{r7, lr}
    eaa4:	b084      	sub	sp, #16
    eaa6:	9003      	str	r0, [sp, #12]
        if self.dt > 0 {
    eaa8:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    eaac:	2900      	cmp	r1, #0
    eaae:	9002      	str	r0, [sp, #8]
    eab0:	d00f      	beq.n	ead2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x30>
    eab2:	e7ff      	b.n	eab4 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x12>
            self.dt -= 1;
    eab4:	9802      	ldr	r0, [sp, #8]
    eab6:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    eaba:	3901      	subs	r1, #1
    eabc:	b2ca      	uxtb	r2, r1
    eabe:	460b      	mov	r3, r1
    eac0:	428a      	cmp	r2, r1
    eac2:	9301      	str	r3, [sp, #4]
    eac4:	d129      	bne.n	eb1a <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x78>
    eac6:	e7ff      	b.n	eac8 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x26>
    eac8:	9801      	ldr	r0, [sp, #4]
    eaca:	9902      	ldr	r1, [sp, #8]
    eacc:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
        if self.dt > 0 {
    ead0:	e7ff      	b.n	ead2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x30>
        if self.st > 0 {
    ead2:	9802      	ldr	r0, [sp, #8]
    ead4:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
    ead8:	2900      	cmp	r1, #0
    eada:	d01c      	beq.n	eb16 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x74>
    eadc:	e7ff      	b.n	eade <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x3c>
            self.st -= 1;
    eade:	9802      	ldr	r0, [sp, #8]
    eae0:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
    eae4:	3901      	subs	r1, #1
    eae6:	b2ca      	uxtb	r2, r1
    eae8:	460b      	mov	r3, r1
    eaea:	428a      	cmp	r2, r1
    eaec:	9300      	str	r3, [sp, #0]
    eaee:	d120      	bne.n	eb32 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x90>
    eaf0:	e7ff      	b.n	eaf2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x50>
    eaf2:	9800      	ldr	r0, [sp, #0]
    eaf4:	9902      	ldr	r1, [sp, #8]
    eaf6:	f881 0045 	strb.w	r0, [r1, #69]	; 0x45
            if self.st == 0 {
    eafa:	f891 2045 	ldrb.w	r2, [r1, #69]	; 0x45
    eafe:	2a00      	cmp	r2, #0
    eb00:	d108      	bne.n	eb14 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x72>
    eb02:	e7ff      	b.n	eb04 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x62>
    eb04:	f241 0048 	movw	r0, #4168	; 0x1048
                self.hw.beep();
    eb08:	9902      	ldr	r1, [sp, #8]
    eb0a:	4408      	add	r0, r1
    eb0c:	f000 feca 	bl	f8a4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha9851d0b0cdc4725E>
    eb10:	e7ff      	b.n	eb12 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x70>
            if self.st == 0 {
    eb12:	e7ff      	b.n	eb14 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x72>
        if self.st > 0 {
    eb14:	e7ff      	b.n	eb16 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x74>
    }
    eb16:	b004      	add	sp, #16
    eb18:	bd80      	pop	{r7, pc}
            self.dt -= 1;
    eb1a:	f64c 0060 	movw	r0, #51296	; 0xc860
    eb1e:	f2c0 0001 	movt	r0, #1
    eb22:	f24d 125c 	movw	r2, #53596	; 0xd15c
    eb26:	f2c0 0201 	movt	r2, #1
    eb2a:	2121      	movs	r1, #33	; 0x21
    eb2c:	f006 fdd2 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    eb30:	defe      	udf	#254	; 0xfe
            self.st -= 1;
    eb32:	f64c 0060 	movw	r0, #51296	; 0xc860
    eb36:	f2c0 0001 	movt	r0, #1
    eb3a:	f24d 126c 	movw	r2, #53612	; 0xd16c
    eb3e:	f2c0 0201 	movt	r2, #1
    eb42:	2121      	movs	r1, #33	; 0x21
    eb44:	f006 fdc6 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    eb48:	defe      	udf	#254	; 0xfe

0000eb4a <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E>:
    fn sched(&mut self) {
    eb4a:	b510      	push	{r4, lr}
    eb4c:	b098      	sub	sp, #96	; 0x60
    eb4e:	9015      	str	r0, [sp, #84]	; 0x54
    eb50:	f241 0148 	movw	r1, #4168	; 0x1048
        if self.hw.sched() {
    eb54:	4401      	add	r1, r0
    eb56:	900b      	str	r0, [sp, #44]	; 0x2c
    eb58:	4608      	mov	r0, r1
    eb5a:	f000 fea7 	bl	f8ac <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E>
    eb5e:	900a      	str	r0, [sp, #40]	; 0x28
    eb60:	e7ff      	b.n	eb62 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x18>
    eb62:	980a      	ldr	r0, [sp, #40]	; 0x28
    eb64:	07c1      	lsls	r1, r0, #31
    eb66:	2900      	cmp	r1, #0
    eb68:	d005      	beq.n	eb76 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x2c>
    eb6a:	e7ff      	b.n	eb6c <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x22>
            self.shutdown();
    eb6c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    eb6e:	f000 f90e 	bl	ed8e <_ZN8libchip814Chip8$LT$T$GT$8shutdown17hb4ffb829681b047bE>
    eb72:	e7ff      	b.n	eb74 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x2a>
        if self.hw.sched() {
    eb74:	e7ff      	b.n	eb76 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x2c>
        if let Some(t) = self.time {
    eb76:	980b      	ldr	r0, [sp, #44]	; 0x2c
    eb78:	6801      	ldr	r1, [r0, #0]
    eb7a:	2901      	cmp	r1, #1
    eb7c:	d009      	beq.n	eb92 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x48>
    eb7e:	e7ff      	b.n	eb80 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x36>
    eb80:	f241 0048 	movw	r0, #4168	; 0x1048
            self.time = Some(self.hw.clock());
    eb84:	990b      	ldr	r1, [sp, #44]	; 0x2c
    eb86:	4408      	add	r0, r1
    eb88:	f000 fe2a 	bl	f7e0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E>
    eb8c:	9109      	str	r1, [sp, #36]	; 0x24
    eb8e:	9008      	str	r0, [sp, #32]
    eb90:	e046      	b.n	ec20 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0xd6>
        if let Some(t) = self.time {
    eb92:	980b      	ldr	r0, [sp, #44]	; 0x2c
    eb94:	6881      	ldr	r1, [r0, #8]
    eb96:	68c2      	ldr	r2, [r0, #12]
    eb98:	9217      	str	r2, [sp, #92]	; 0x5c
    eb9a:	9116      	str	r1, [sp, #88]	; 0x58
    eb9c:	f241 0348 	movw	r3, #4168	; 0x1048
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
    eba0:	4418      	add	r0, r3
    eba2:	9107      	str	r1, [sp, #28]
    eba4:	9206      	str	r2, [sp, #24]
    eba6:	f000 fe1b 	bl	f7e0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E>
    ebaa:	9105      	str	r1, [sp, #20]
    ebac:	9004      	str	r0, [sp, #16]
    ebae:	e7ff      	b.n	ebb0 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x66>
    ebb0:	9804      	ldr	r0, [sp, #16]
    ebb2:	9905      	ldr	r1, [sp, #20]
    ebb4:	9a07      	ldr	r2, [sp, #28]
    ebb6:	9b06      	ldr	r3, [sp, #24]
    ebb8:	f000 fa7f 	bl	f0ba <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17hf8eddcd100cb7a54E>
    ebbc:	9103      	str	r1, [sp, #12]
    ebbe:	9002      	str	r0, [sp, #8]
    ebc0:	e7ff      	b.n	ebc2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x78>
    ebc2:	f245 002b 	movw	r0, #20523	; 0x502b
    ebc6:	f2c0 00fe 	movt	r0, #254	; 0xfe
    ebca:	9902      	ldr	r1, [sp, #8]
    ebcc:	1a08      	subs	r0, r1, r0
    ebce:	9a03      	ldr	r2, [sp, #12]
    ebd0:	f172 0300 	sbcs.w	r3, r2, #0
    ebd4:	d323      	bcc.n	ec1e <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0xd4>
    ebd6:	e7ff      	b.n	ebd8 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x8e>
                self.tick();
    ebd8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ebda:	f7ff ff62 	bl	eaa2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E>
    ebde:	e7ff      	b.n	ebe0 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x96>
    ebe0:	f241 0048 	movw	r0, #4168	; 0x1048
                self.time = Some(self.hw.clock());
    ebe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ebe6:	4408      	add	r0, r1
    ebe8:	f000 fdfa 	bl	f7e0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E>
    ebec:	9101      	str	r1, [sp, #4]
    ebee:	9000      	str	r0, [sp, #0]
    ebf0:	e7ff      	b.n	ebf2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0xa8>
    ebf2:	9800      	ldr	r0, [sp, #0]
    ebf4:	900e      	str	r0, [sp, #56]	; 0x38
    ebf6:	9901      	ldr	r1, [sp, #4]
    ebf8:	910f      	str	r1, [sp, #60]	; 0x3c
    ebfa:	2200      	movs	r2, #0
    ebfc:	920d      	str	r2, [sp, #52]	; 0x34
    ebfe:	2201      	movs	r2, #1
    ec00:	920c      	str	r2, [sp, #48]	; 0x30
    ec02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ec04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ec06:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    ec0a:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    ec0e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ec10:	6063      	str	r3, [r4, #4]
    ec12:	6022      	str	r2, [r4, #0]
    ec14:	f8c4 e00c 	str.w	lr, [r4, #12]
    ec18:	f8c4 c008 	str.w	ip, [r4, #8]
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
    ec1c:	e7ff      	b.n	ec1e <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0xd4>
        if let Some(t) = self.time {
    ec1e:	e015      	b.n	ec4c <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x102>
            self.time = Some(self.hw.clock());
    ec20:	9808      	ldr	r0, [sp, #32]
    ec22:	9012      	str	r0, [sp, #72]	; 0x48
    ec24:	9909      	ldr	r1, [sp, #36]	; 0x24
    ec26:	9113      	str	r1, [sp, #76]	; 0x4c
    ec28:	2200      	movs	r2, #0
    ec2a:	9211      	str	r2, [sp, #68]	; 0x44
    ec2c:	2201      	movs	r2, #1
    ec2e:	9210      	str	r2, [sp, #64]	; 0x40
    ec30:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ec32:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ec34:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    ec38:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
    ec3c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ec3e:	6063      	str	r3, [r4, #4]
    ec40:	6022      	str	r2, [r4, #0]
    ec42:	f8c4 e00c 	str.w	lr, [r4, #12]
    ec46:	f8c4 c008 	str.w	ip, [r4, #8]
        if let Some(t) = self.time {
    ec4a:	e7ff      	b.n	ec4c <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x102>
    }
    ec4c:	b018      	add	sp, #96	; 0x60
    ec4e:	bd10      	pop	{r4, pc}

0000ec50 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E>:
    fn setup(&mut self) {
    ec50:	b580      	push	{r7, lr}
    ec52:	b088      	sub	sp, #32
    ec54:	9007      	str	r0, [sp, #28]
    ec56:	f44f 7100 	mov.w	r1, #512	; 0x200
        self.pc = ENTRY;
    ec5a:	8241      	strh	r1, [r0, #18]
    ec5c:	f241 0148 	movw	r1, #4168	; 0x1048
        self.hw.vram_setsize(DISPS);
    ec60:	4401      	add	r1, r0
    ec62:	f24c 3234 	movw	r2, #49972	; 0xc334
    ec66:	f2c0 0201 	movt	r2, #1
    ec6a:	6813      	ldr	r3, [r2, #0]
    ec6c:	6852      	ldr	r2, [r2, #4]
    ec6e:	9005      	str	r0, [sp, #20]
    ec70:	4608      	mov	r0, r1
    ec72:	4619      	mov	r1, r3
    ec74:	f000 fd5d 	bl	f732 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE>
    ec78:	e7ff      	b.n	ec7a <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E+0x2a>
        self.mem[..CHARBUF.len()].copy_from_slice(&CHARBUF);
    ec7a:	9805      	ldr	r0, [sp, #20]
    ec7c:	f100 0147 	add.w	r1, r0, #71	; 0x47
    ec80:	f644 004d 	movw	r0, #18509	; 0x484d
    ec84:	f2c0 0002 	movt	r0, #2
    ec88:	2250      	movs	r2, #80	; 0x50
    ec8a:	9104      	str	r1, [sp, #16]
    ec8c:	4611      	mov	r1, r2
    ec8e:	f003 f822 	bl	11cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    ec92:	9003      	str	r0, [sp, #12]
    ec94:	e7ff      	b.n	ec96 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E+0x46>
    ec96:	9803      	ldr	r0, [sp, #12]
    ec98:	9006      	str	r0, [sp, #24]
    ec9a:	9a06      	ldr	r2, [sp, #24]
    ec9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    eca0:	9804      	ldr	r0, [sp, #16]
    eca2:	f7fa f9e5 	bl	9070 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>
    eca6:	9002      	str	r0, [sp, #8]
    eca8:	9101      	str	r1, [sp, #4]
    ecaa:	e7ff      	b.n	ecac <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E+0x5c>
    ecac:	f644 024d 	movw	r2, #18509	; 0x484d
    ecb0:	f2c0 0202 	movt	r2, #2
    ecb4:	2350      	movs	r3, #80	; 0x50
    ecb6:	9802      	ldr	r0, [sp, #8]
    ecb8:	9901      	ldr	r1, [sp, #4]
    ecba:	f7fa f8dc 	bl	8e76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
    ecbe:	e7ff      	b.n	ecc0 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E+0x70>
    ecc0:	f241 0047 	movw	r0, #4167	; 0x1047
    ecc4:	2101      	movs	r1, #1
        self.running = true;
    ecc6:	9a05      	ldr	r2, [sp, #20]
    ecc8:	5411      	strb	r1, [r2, r0]
    }
    ecca:	b008      	add	sp, #32
    eccc:	bd80      	pop	{r7, pc}

0000ecce <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE>:
    fn waitkey(&mut self) -> u8 {
    ecce:	b580      	push	{r7, lr}
    ecd0:	b08c      	sub	sp, #48	; 0x30
    ecd2:	900a      	str	r0, [sp, #40]	; 0x28
        while self.running {
    ecd4:	9005      	str	r0, [sp, #20]
    ecd6:	e7ff      	b.n	ecd8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xa>
    ecd8:	f241 0047 	movw	r0, #4167	; 0x1047
    ecdc:	9905      	ldr	r1, [sp, #20]
    ecde:	5c08      	ldrb	r0, [r1, r0]
    ece0:	07c0      	lsls	r0, r0, #31
    ece2:	2800      	cmp	r0, #0
    ece4:	d104      	bne.n	ecf0 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x22>
    ece6:	e7ff      	b.n	ece8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x1a>
    ece8:	2020      	movs	r0, #32
        return b' ';
    ecea:	f88d 001b 	strb.w	r0, [sp, #27]
    ecee:	e04a      	b.n	ed86 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xb8>
            self.sched();
    ecf0:	9805      	ldr	r0, [sp, #20]
    ecf2:	f7ff ff2a 	bl	eb4a <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E>
    ecf6:	e7ff      	b.n	ecf8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x2a>
    ecf8:	2000      	movs	r0, #0
            for i in 0..0xf {
    ecfa:	f88d 001c 	strb.w	r0, [sp, #28]
    ecfe:	200f      	movs	r0, #15
    ed00:	f88d 001d 	strb.w	r0, [sp, #29]
    ed04:	f89d 001c 	ldrb.w	r0, [sp, #28]
    ed08:	f89d 101d 	ldrb.w	r1, [sp, #29]
    ed0c:	f000 f8e2 	bl	eed4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6e7fb991422ea45dE>
    ed10:	9004      	str	r0, [sp, #16]
    ed12:	9103      	str	r1, [sp, #12]
    ed14:	e7ff      	b.n	ed16 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x48>
    ed16:	9804      	ldr	r0, [sp, #16]
    ed18:	f88d 0020 	strb.w	r0, [sp, #32]
    ed1c:	9903      	ldr	r1, [sp, #12]
    ed1e:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    ed22:	e7ff      	b.n	ed24 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x56>
    ed24:	a808      	add	r0, sp, #32
    ed26:	f000 f864 	bl	edf2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E>
    ed2a:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
    ed2e:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    ed32:	e7ff      	b.n	ed34 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x66>
    ed34:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    ed38:	07c1      	lsls	r1, r0, #31
    ed3a:	2900      	cmp	r1, #0
    ed3c:	d001      	beq.n	ed42 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x74>
    ed3e:	e7ff      	b.n	ed40 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x72>
    ed40:	e001      	b.n	ed46 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x78>
        while self.running {
    ed42:	e7c9      	b.n	ecd8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xa>
            for i in 0..0xf {
    ed44:	defe      	udf	#254	; 0xfe
    ed46:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    ed4a:	4601      	mov	r1, r0
    ed4c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    ed50:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    ed54:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    ed58:	f241 0248 	movw	r2, #4168	; 0x1048
                if self.hw.key(i) {
    ed5c:	9b05      	ldr	r3, [sp, #20]
    ed5e:	441a      	add	r2, r3
    ed60:	9002      	str	r0, [sp, #8]
    ed62:	4610      	mov	r0, r2
    ed64:	9a02      	ldr	r2, [sp, #8]
    ed66:	9101      	str	r1, [sp, #4]
    ed68:	4611      	mov	r1, r2
    ed6a:	f000 fb51 	bl	f410 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E>
    ed6e:	9000      	str	r0, [sp, #0]
    ed70:	e7ff      	b.n	ed72 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xa4>
    ed72:	9800      	ldr	r0, [sp, #0]
    ed74:	07c1      	lsls	r1, r0, #31
    ed76:	2900      	cmp	r1, #0
    ed78:	d101      	bne.n	ed7e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xb0>
    ed7a:	e7ff      	b.n	ed7c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xae>
            for i in 0..0xf {
    ed7c:	e7d2      	b.n	ed24 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x56>
                    return i;
    ed7e:	9801      	ldr	r0, [sp, #4]
    ed80:	f88d 001b 	strb.w	r0, [sp, #27]
    ed84:	e7ff      	b.n	ed86 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xb8>
    }
    ed86:	f89d 001b 	ldrb.w	r0, [sp, #27]
    ed8a:	b00c      	add	sp, #48	; 0x30
    ed8c:	bd80      	pop	{r7, pc}

0000ed8e <_ZN8libchip814Chip8$LT$T$GT$8shutdown17hb4ffb829681b047bE>:
    fn shutdown(&mut self) {
    ed8e:	b081      	sub	sp, #4
    ed90:	9000      	str	r0, [sp, #0]
    ed92:	f241 0147 	movw	r1, #4167	; 0x1047
    ed96:	2200      	movs	r2, #0
        self.running = false;
    ed98:	5442      	strb	r2, [r0, r1]
    }
    ed9a:	b001      	add	sp, #4
    ed9c:	4770      	bx	lr

0000ed9e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E>:
    ed9e:	b08a      	sub	sp, #40	; 0x28
    eda0:	9107      	str	r1, [sp, #28]
    eda2:	9208      	str	r2, [sp, #32]
    eda4:	f8d0 c000 	ldr.w	ip, [r0]
    eda8:	f1bc 0f00 	cmp.w	ip, #0
    edac:	9305      	str	r3, [sp, #20]
    edae:	9204      	str	r2, [sp, #16]
    edb0:	9103      	str	r1, [sp, #12]
    edb2:	9002      	str	r0, [sp, #8]
    edb4:	d011      	beq.n	edda <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x3c>
    edb6:	e7ff      	b.n	edb8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x1a>
    edb8:	9802      	ldr	r0, [sp, #8]
    edba:	6841      	ldr	r1, [r0, #4]
    edbc:	9106      	str	r1, [sp, #24]
    edbe:	4669      	mov	r1, sp
    edc0:	9a05      	ldr	r2, [sp, #20]
    edc2:	600a      	str	r2, [r1, #0]
    edc4:	f24d 137c 	movw	r3, #53628	; 0xd17c
    edc8:	f2c0 0301 	movt	r3, #1
    edcc:	aa06      	add	r2, sp, #24
    edce:	9803      	ldr	r0, [sp, #12]
    edd0:	9904      	ldr	r1, [sp, #16]
    edd2:	f006 fc51 	bl	15678 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    edd6:	defe      	udf	#254	; 0xfe
    edd8:	defe      	udf	#254	; 0xfe
    edda:	9802      	ldr	r0, [sp, #8]
    eddc:	6841      	ldr	r1, [r0, #4]
    edde:	9109      	str	r1, [sp, #36]	; 0x24
    ede0:	6802      	ldr	r2, [r0, #0]
    ede2:	2a00      	cmp	r2, #0
    ede4:	9101      	str	r1, [sp, #4]
    ede6:	d103      	bne.n	edf0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x52>
    ede8:	e7ff      	b.n	edea <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x4c>
    edea:	9801      	ldr	r0, [sp, #4]
    edec:	b00a      	add	sp, #40	; 0x28
    edee:	4770      	bx	lr
    edf0:	e7fb      	b.n	edea <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x4c>

0000edf2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E>:
    edf2:	b580      	push	{r7, lr}
    edf4:	b086      	sub	sp, #24
    edf6:	9005      	str	r0, [sp, #20]
    edf8:	2100      	movs	r1, #0
    edfa:	f88d 1013 	strb.w	r1, [sp, #19]
    edfe:	1c41      	adds	r1, r0, #1
    ee00:	9002      	str	r0, [sp, #8]
    ee02:	f002 fbd2 	bl	115aa <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h0340384168a45934E>
    ee06:	9001      	str	r0, [sp, #4]
    ee08:	e7ff      	b.n	ee0a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x18>
    ee0a:	9801      	ldr	r0, [sp, #4]
    ee0c:	07c1      	lsls	r1, r0, #31
    ee0e:	2900      	cmp	r1, #0
    ee10:	d104      	bne.n	ee1c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x2a>
    ee12:	e7ff      	b.n	ee14 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x22>
    ee14:	2000      	movs	r0, #0
    ee16:	f88d 000c 	strb.w	r0, [sp, #12]
    ee1a:	e02c      	b.n	ee76 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x84>
    ee1c:	2001      	movs	r0, #1
    ee1e:	f88d 0013 	strb.w	r0, [sp, #19]
    ee22:	9902      	ldr	r1, [sp, #8]
    ee24:	9000      	str	r0, [sp, #0]
    ee26:	4608      	mov	r0, r1
    ee28:	9900      	ldr	r1, [sp, #0]
    ee2a:	f000 f973 	bl	f114 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E>
    ee2e:	f88d 1011 	strb.w	r1, [sp, #17]
    ee32:	f88d 0010 	strb.w	r0, [sp, #16]
    ee36:	e7ff      	b.n	ee38 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x46>
    ee38:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ee3c:	07c0      	lsls	r0, r0, #31
    ee3e:	2800      	cmp	r0, #0
    ee40:	d104      	bne.n	ee4c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x5a>
    ee42:	e7ff      	b.n	ee44 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x52>
    ee44:	2000      	movs	r0, #0
    ee46:	f88d 000c 	strb.w	r0, [sp, #12]
    ee4a:	e029      	b.n	eea0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0xae>
    ee4c:	2000      	movs	r0, #0
    ee4e:	f88d 0013 	strb.w	r0, [sp, #19]
    ee52:	f89d 0011 	ldrb.w	r0, [sp, #17]
    ee56:	f88d 0012 	strb.w	r0, [sp, #18]
    ee5a:	f10d 0012 	add.w	r0, sp, #18
    ee5e:	9902      	ldr	r1, [sp, #8]
    ee60:	f002 fa78 	bl	11354 <_ZN4core3mem4swap17h21afb25e2d195463E>
    ee64:	e7ff      	b.n	ee66 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x74>
    ee66:	f89d 0012 	ldrb.w	r0, [sp, #18]
    ee6a:	f88d 000d 	strb.w	r0, [sp, #13]
    ee6e:	2001      	movs	r0, #1
    ee70:	f88d 000c 	strb.w	r0, [sp, #12]
    ee74:	e014      	b.n	eea0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0xae>
    ee76:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ee7a:	f89d 100d 	ldrb.w	r1, [sp, #13]
    ee7e:	b006      	add	sp, #24
    ee80:	bd80      	pop	{r7, pc}
    ee82:	2000      	movs	r0, #0
    ee84:	f88d 0013 	strb.w	r0, [sp, #19]
    ee88:	e7f5      	b.n	ee76 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x84>
    ee8a:	f89d 0013 	ldrb.w	r0, [sp, #19]
    ee8e:	07c0      	lsls	r0, r0, #31
    ee90:	2800      	cmp	r0, #0
    ee92:	d0f6      	beq.n	ee82 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x90>
    ee94:	e7ff      	b.n	ee96 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0xa4>
    ee96:	2000      	movs	r0, #0
    ee98:	f88d 0013 	strb.w	r0, [sp, #19]
    ee9c:	e7f1      	b.n	ee82 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x90>
    ee9e:	e7f0      	b.n	ee82 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x90>
    eea0:	f89d 0010 	ldrb.w	r0, [sp, #16]
    eea4:	07c0      	lsls	r0, r0, #31
    eea6:	2800      	cmp	r0, #0
    eea8:	d1ef      	bne.n	ee8a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x98>
    eeaa:	e7f8      	b.n	ee9e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0xac>

0000eeac <_ZN4core4iter6traits8iterator8Iterator3map17h704adbbd229a4ae6E>:
    eeac:	b580      	push	{r7, lr}
    eeae:	b084      	sub	sp, #16
    eeb0:	9101      	str	r1, [sp, #4]
    eeb2:	9202      	str	r2, [sp, #8]
    eeb4:	9303      	str	r3, [sp, #12]
    eeb6:	f000 f96a 	bl	f18e <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h116a6636383259eeE>
    eeba:	e7ff      	b.n	eebc <_ZN4core4iter6traits8iterator8Iterator3map17h704adbbd229a4ae6E+0x10>
    eebc:	b004      	add	sp, #16
    eebe:	bd80      	pop	{r7, pc}

0000eec0 <_ZN4core4iter6traits8iterator8Iterator3map17h9d41144da998d389E>:
    eec0:	b580      	push	{r7, lr}
    eec2:	b084      	sub	sp, #16
    eec4:	9101      	str	r1, [sp, #4]
    eec6:	9202      	str	r2, [sp, #8]
    eec8:	9303      	str	r3, [sp, #12]
    eeca:	f000 f969 	bl	f1a0 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h1647783578bb3807E>
    eece:	e7ff      	b.n	eed0 <_ZN4core4iter6traits8iterator8Iterator3map17h9d41144da998d389E+0x10>
    eed0:	b004      	add	sp, #16
    eed2:	bd80      	pop	{r7, pc}

0000eed4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6e7fb991422ea45dE>:
    eed4:	b081      	sub	sp, #4
    eed6:	460a      	mov	r2, r1
    eed8:	4603      	mov	r3, r0
    eeda:	f88d 0000 	strb.w	r0, [sp]
    eede:	f88d 1001 	strb.w	r1, [sp, #1]
    eee2:	b001      	add	sp, #4
    eee4:	4770      	bx	lr

0000eee6 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E>:
    eee6:	b580      	push	{r7, lr}
    eee8:	b086      	sub	sp, #24
    eeea:	460a      	mov	r2, r1
    eeec:	4603      	mov	r3, r0
    eeee:	f88d 0014 	strb.w	r0, [sp, #20]
    eef2:	f88d 1015 	strb.w	r1, [sp, #21]
    eef6:	9203      	str	r2, [sp, #12]
    eef8:	9302      	str	r3, [sp, #8]
    eefa:	f000 f865 	bl	efc8 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E>
    eefe:	9001      	str	r0, [sp, #4]
    ef00:	9100      	str	r1, [sp, #0]
    ef02:	e7ff      	b.n	ef04 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x1e>
    ef04:	9801      	ldr	r0, [sp, #4]
    ef06:	f88d 0016 	strb.w	r0, [sp, #22]
    ef0a:	9900      	ldr	r1, [sp, #0]
    ef0c:	f001 0201 	and.w	r2, r1, #1
    ef10:	f88d 2017 	strb.w	r2, [sp, #23]
    ef14:	2a00      	cmp	r2, #0
    ef16:	d107      	bne.n	ef28 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x42>
    ef18:	e7ff      	b.n	ef1a <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x34>
    ef1a:	9801      	ldr	r0, [sp, #4]
    ef1c:	f88d 0011 	strb.w	r0, [sp, #17]
    ef20:	2101      	movs	r1, #1
    ef22:	f88d 1010 	strb.w	r1, [sp, #16]
    ef26:	e003      	b.n	ef30 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x4a>
    ef28:	2000      	movs	r0, #0
    ef2a:	f88d 0010 	strb.w	r0, [sp, #16]
    ef2e:	e7ff      	b.n	ef30 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x4a>
    ef30:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ef34:	f89d 1011 	ldrb.w	r1, [sp, #17]
    ef38:	b006      	add	sp, #24
    ef3a:	bd80      	pop	{r7, pc}

0000ef3c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE>:
    ef3c:	b082      	sub	sp, #8
    ef3e:	460a      	mov	r2, r1
    ef40:	4603      	mov	r3, r0
    ef42:	f88d 0005 	strb.w	r0, [sp, #5]
    ef46:	f88d 1006 	strb.w	r1, [sp, #6]
    ef4a:	4408      	add	r0, r1
    ef4c:	f88d 0007 	strb.w	r0, [sp, #7]
    ef50:	f89d 0007 	ldrb.w	r0, [sp, #7]
    ef54:	9000      	str	r0, [sp, #0]
    ef56:	e7ff      	b.n	ef58 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE+0x1c>
    ef58:	9800      	ldr	r0, [sp, #0]
    ef5a:	b002      	add	sp, #8
    ef5c:	4770      	bx	lr

0000ef5e <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17he0c9c1743ed48494E>:
    ef5e:	b084      	sub	sp, #16
    ef60:	4602      	mov	r2, r0
    ef62:	f88d 0007 	strb.w	r0, [sp, #7]
    ef66:	9102      	str	r1, [sp, #8]
    ef68:	f001 0107 	and.w	r1, r1, #7
    ef6c:	4088      	lsls	r0, r1
    ef6e:	f88d 000f 	strb.w	r0, [sp, #15]
    ef72:	f89d 000f 	ldrb.w	r0, [sp, #15]
    ef76:	9000      	str	r0, [sp, #0]
    ef78:	e7ff      	b.n	ef7a <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17he0c9c1743ed48494E+0x1c>
    ef7a:	9800      	ldr	r0, [sp, #0]
    ef7c:	b004      	add	sp, #16
    ef7e:	4770      	bx	lr

0000ef80 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hd8fc987b7fb948dbE>:
    ef80:	b084      	sub	sp, #16
    ef82:	b2c2      	uxtb	r2, r0
    ef84:	4603      	mov	r3, r0
    ef86:	f88d 0007 	strb.w	r0, [sp, #7]
    ef8a:	9102      	str	r1, [sp, #8]
    ef8c:	f001 0007 	and.w	r0, r1, #7
    ef90:	fa22 f000 	lsr.w	r0, r2, r0
    ef94:	f88d 000f 	strb.w	r0, [sp, #15]
    ef98:	f89d 000f 	ldrb.w	r0, [sp, #15]
    ef9c:	9000      	str	r0, [sp, #0]
    ef9e:	e7ff      	b.n	efa0 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hd8fc987b7fb948dbE+0x20>
    efa0:	9800      	ldr	r0, [sp, #0]
    efa2:	b004      	add	sp, #16
    efa4:	4770      	bx	lr

0000efa6 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h85ad829ef61f8d1fE>:
    efa6:	b082      	sub	sp, #8
    efa8:	460a      	mov	r2, r1
    efaa:	4603      	mov	r3, r0
    efac:	f88d 0005 	strb.w	r0, [sp, #5]
    efb0:	f88d 1006 	strb.w	r1, [sp, #6]
    efb4:	1a40      	subs	r0, r0, r1
    efb6:	f88d 0007 	strb.w	r0, [sp, #7]
    efba:	f89d 0007 	ldrb.w	r0, [sp, #7]
    efbe:	9000      	str	r0, [sp, #0]
    efc0:	e7ff      	b.n	efc2 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h85ad829ef61f8d1fE+0x1c>
    efc2:	9800      	ldr	r0, [sp, #0]
    efc4:	b002      	add	sp, #8
    efc6:	4770      	bx	lr

0000efc8 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E>:
    efc8:	b084      	sub	sp, #16
    efca:	b2c2      	uxtb	r2, r0
    efcc:	460b      	mov	r3, r1
    efce:	4684      	mov	ip, r0
    efd0:	f88d 000a 	strb.w	r0, [sp, #10]
    efd4:	f88d 100b 	strb.w	r1, [sp, #11]
    efd8:	fa52 f081 	uxtab	r0, r2, r1
    efdc:	b2c1      	uxtb	r1, r0
    efde:	1a09      	subs	r1, r1, r0
    efe0:	bf18      	it	ne
    efe2:	2101      	movne	r1, #1
    efe4:	f88d 000c 	strb.w	r0, [sp, #12]
    efe8:	f88d 100d 	strb.w	r1, [sp, #13]
    efec:	f89d 000c 	ldrb.w	r0, [sp, #12]
    eff0:	f89d 100d 	ldrb.w	r1, [sp, #13]
    eff4:	9001      	str	r0, [sp, #4]
    eff6:	9100      	str	r1, [sp, #0]
    eff8:	e7ff      	b.n	effa <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E+0x32>
    effa:	9801      	ldr	r0, [sp, #4]
    effc:	f88d 000e 	strb.w	r0, [sp, #14]
    f000:	9900      	ldr	r1, [sp, #0]
    f002:	f001 0201 	and.w	r2, r1, #1
    f006:	f88d 200f 	strb.w	r2, [sp, #15]
    f00a:	f88d 0008 	strb.w	r0, [sp, #8]
    f00e:	f88d 2009 	strb.w	r2, [sp, #9]
    f012:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f016:	f89d 1009 	ldrb.w	r1, [sp, #9]
    f01a:	b004      	add	sp, #16
    f01c:	4770      	bx	lr

0000f01e <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE>:
    f01e:	b580      	push	{r7, lr}
    f020:	b084      	sub	sp, #16
    f022:	b2ca      	uxtb	r2, r1
    f024:	b2c3      	uxtb	r3, r0
    f026:	468c      	mov	ip, r1
    f028:	4686      	mov	lr, r0
    f02a:	f88d 000a 	strb.w	r0, [sp, #10]
    f02e:	f88d 100b 	strb.w	r1, [sp, #11]
    f032:	1a98      	subs	r0, r3, r2
    f034:	b2c1      	uxtb	r1, r0
    f036:	1a09      	subs	r1, r1, r0
    f038:	bf18      	it	ne
    f03a:	2101      	movne	r1, #1
    f03c:	f88d 000c 	strb.w	r0, [sp, #12]
    f040:	f88d 100d 	strb.w	r1, [sp, #13]
    f044:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f048:	f89d 100d 	ldrb.w	r1, [sp, #13]
    f04c:	9001      	str	r0, [sp, #4]
    f04e:	9100      	str	r1, [sp, #0]
    f050:	e7ff      	b.n	f052 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE+0x34>
    f052:	9801      	ldr	r0, [sp, #4]
    f054:	f88d 000e 	strb.w	r0, [sp, #14]
    f058:	9900      	ldr	r1, [sp, #0]
    f05a:	f001 0201 	and.w	r2, r1, #1
    f05e:	f88d 200f 	strb.w	r2, [sp, #15]
    f062:	f88d 0008 	strb.w	r0, [sp, #8]
    f066:	f88d 2009 	strb.w	r2, [sp, #9]
    f06a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f06e:	f89d 1009 	ldrb.w	r1, [sp, #9]
    f072:	b004      	add	sp, #16
    f074:	bd80      	pop	{r7, pc}

0000f076 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E>:
    f076:	b083      	sub	sp, #12
    f078:	460a      	mov	r2, r1
    f07a:	4603      	mov	r3, r0
    f07c:	f8ad 0006 	strh.w	r0, [sp, #6]
    f080:	f8ad 1008 	strh.w	r1, [sp, #8]
    f084:	4408      	add	r0, r1
    f086:	f8ad 000a 	strh.w	r0, [sp, #10]
    f08a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    f08e:	9000      	str	r0, [sp, #0]
    f090:	e7ff      	b.n	f092 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E+0x1c>
    f092:	9800      	ldr	r0, [sp, #0]
    f094:	b003      	add	sp, #12
    f096:	4770      	bx	lr

0000f098 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E>:
    f098:	b083      	sub	sp, #12
    f09a:	460a      	mov	r2, r1
    f09c:	4603      	mov	r3, r0
    f09e:	f8ad 0006 	strh.w	r0, [sp, #6]
    f0a2:	f8ad 1008 	strh.w	r1, [sp, #8]
    f0a6:	1a40      	subs	r0, r0, r1
    f0a8:	f8ad 000a 	strh.w	r0, [sp, #10]
    f0ac:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    f0b0:	9000      	str	r0, [sp, #0]
    f0b2:	e7ff      	b.n	f0b4 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E+0x1c>
    f0b4:	9800      	ldr	r0, [sp, #0]
    f0b6:	b003      	add	sp, #12
    f0b8:	4770      	bx	lr

0000f0ba <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17hf8eddcd100cb7a54E>:
    f0ba:	b5b0      	push	{r4, r5, r7, lr}
    f0bc:	b088      	sub	sp, #32
    f0be:	469c      	mov	ip, r3
    f0c0:	4696      	mov	lr, r2
    f0c2:	460c      	mov	r4, r1
    f0c4:	4605      	mov	r5, r0
    f0c6:	9103      	str	r1, [sp, #12]
    f0c8:	9002      	str	r0, [sp, #8]
    f0ca:	9305      	str	r3, [sp, #20]
    f0cc:	9204      	str	r2, [sp, #16]
    f0ce:	1a80      	subs	r0, r0, r2
    f0d0:	eb61 0103 	sbc.w	r1, r1, r3
    f0d4:	9107      	str	r1, [sp, #28]
    f0d6:	9006      	str	r0, [sp, #24]
    f0d8:	9806      	ldr	r0, [sp, #24]
    f0da:	9907      	ldr	r1, [sp, #28]
    f0dc:	9001      	str	r0, [sp, #4]
    f0de:	9100      	str	r1, [sp, #0]
    f0e0:	e7ff      	b.n	f0e2 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17hf8eddcd100cb7a54E+0x28>
    f0e2:	9801      	ldr	r0, [sp, #4]
    f0e4:	9900      	ldr	r1, [sp, #0]
    f0e6:	b008      	add	sp, #32
    f0e8:	bdb0      	pop	{r4, r5, r7, pc}

0000f0ea <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc22918223fd59462E>:
    f0ea:	b580      	push	{r7, lr}
    f0ec:	b088      	sub	sp, #32
    f0ee:	9004      	str	r0, [sp, #16]
    f0f0:	9105      	str	r1, [sp, #20]
    f0f2:	9206      	str	r2, [sp, #24]
    f0f4:	9307      	str	r3, [sp, #28]
    f0f6:	9003      	str	r0, [sp, #12]
    f0f8:	4610      	mov	r0, r2
    f0fa:	9102      	str	r1, [sp, #8]
    f0fc:	4619      	mov	r1, r3
    f0fe:	9a03      	ldr	r2, [sp, #12]
    f100:	9b02      	ldr	r3, [sp, #8]
    f102:	f7f9 fdfb 	bl	8cfc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    f106:	9001      	str	r0, [sp, #4]
    f108:	9100      	str	r1, [sp, #0]
    f10a:	e7ff      	b.n	f10c <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc22918223fd59462E+0x22>
    f10c:	9801      	ldr	r0, [sp, #4]
    f10e:	9900      	ldr	r1, [sp, #0]
    f110:	b008      	add	sp, #32
    f112:	bd80      	pop	{r7, pc}

0000f114 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E>:
    f114:	b580      	push	{r7, lr}
    f116:	b088      	sub	sp, #32
    f118:	9005      	str	r0, [sp, #20]
    f11a:	9106      	str	r1, [sp, #24]
    f11c:	9002      	str	r0, [sp, #8]
    f11e:	4608      	mov	r0, r1
    f120:	f005 fd24 	bl	14b6c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE>
    f124:	f88d 1011 	strb.w	r1, [sp, #17]
    f128:	f88d 0010 	strb.w	r0, [sp, #16]
    f12c:	e7ff      	b.n	f12e <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x1a>
    f12e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    f132:	07c1      	lsls	r1, r0, #31
    f134:	2900      	cmp	r1, #0
    f136:	d005      	beq.n	f144 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x30>
    f138:	e7ff      	b.n	f13a <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x26>
    f13a:	2000      	movs	r0, #0
    f13c:	f88d 000c 	strb.w	r0, [sp, #12]
    f140:	e011      	b.n	f166 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x52>
    f142:	defe      	udf	#254	; 0xfe
    f144:	f89d 0011 	ldrb.w	r0, [sp, #17]
    f148:	f88d 001f 	strb.w	r0, [sp, #31]
    f14c:	9902      	ldr	r1, [sp, #8]
    f14e:	780a      	ldrb	r2, [r1, #0]
    f150:	9001      	str	r0, [sp, #4]
    f152:	4610      	mov	r0, r2
    f154:	9901      	ldr	r1, [sp, #4]
    f156:	f7ff fec6 	bl	eee6 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E>
    f15a:	f88d 100d 	strb.w	r1, [sp, #13]
    f15e:	f88d 000c 	strb.w	r0, [sp, #12]
    f162:	e7ff      	b.n	f164 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x50>
    f164:	e7ff      	b.n	f166 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x52>
    f166:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f16a:	f89d 100d 	ldrb.w	r1, [sp, #13]
    f16e:	b008      	add	sp, #32
    f170:	bd80      	pop	{r7, pc}

0000f172 <_ZN4core4iter6traits8iterator8Iterator7flatten17hb125ae9dc567cfd9E>:
    f172:	b580      	push	{r7, lr}
    f174:	b084      	sub	sp, #16
    f176:	680a      	ldr	r2, [r1, #0]
    f178:	684b      	ldr	r3, [r1, #4]
    f17a:	6889      	ldr	r1, [r1, #8]
    f17c:	9103      	str	r1, [sp, #12]
    f17e:	9302      	str	r3, [sp, #8]
    f180:	9201      	str	r2, [sp, #4]
    f182:	a901      	add	r1, sp, #4
    f184:	f002 f991 	bl	114aa <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hc4675c1f0b8e1d41E>
    f188:	e7ff      	b.n	f18a <_ZN4core4iter6traits8iterator8Iterator7flatten17hb125ae9dc567cfd9E+0x18>
    f18a:	b004      	add	sp, #16
    f18c:	bd80      	pop	{r7, pc}

0000f18e <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h116a6636383259eeE>:
    f18e:	b083      	sub	sp, #12
    f190:	9100      	str	r1, [sp, #0]
    f192:	9201      	str	r2, [sp, #4]
    f194:	9302      	str	r3, [sp, #8]
    f196:	6001      	str	r1, [r0, #0]
    f198:	6042      	str	r2, [r0, #4]
    f19a:	6083      	str	r3, [r0, #8]
    f19c:	b003      	add	sp, #12
    f19e:	4770      	bx	lr

0000f1a0 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h1647783578bb3807E>:
    f1a0:	b083      	sub	sp, #12
    f1a2:	9100      	str	r1, [sp, #0]
    f1a4:	9201      	str	r2, [sp, #4]
    f1a6:	9302      	str	r3, [sp, #8]
    f1a8:	6001      	str	r1, [r0, #0]
    f1aa:	6042      	str	r2, [r0, #4]
    f1ac:	6083      	str	r3, [r0, #8]
    f1ae:	b003      	add	sp, #12
    f1b0:	4770      	bx	lr

0000f1b2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfc3726000bdb855aE>:
    f1b2:	680a      	ldr	r2, [r1, #0]
    f1b4:	684b      	ldr	r3, [r1, #4]
    f1b6:	6889      	ldr	r1, [r1, #8]
    f1b8:	6081      	str	r1, [r0, #8]
    f1ba:	6043      	str	r3, [r0, #4]
    f1bc:	6002      	str	r2, [r0, #0]
    f1be:	4770      	bx	lr

0000f1c0 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E>:
    f1c0:	b580      	push	{r7, lr}
    f1c2:	b086      	sub	sp, #24
    f1c4:	9105      	str	r1, [sp, #20]
    f1c6:	9004      	str	r0, [sp, #16]
    f1c8:	4608      	mov	r0, r1
    f1ca:	9103      	str	r1, [sp, #12]
    f1cc:	f002 fd1f 	bl	11c0e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f1d0:	9002      	str	r0, [sp, #8]
    f1d2:	9101      	str	r1, [sp, #4]
    f1d4:	e7ff      	b.n	f1d6 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E+0x16>
    f1d6:	9803      	ldr	r0, [sp, #12]
    f1d8:	f100 0308 	add.w	r3, r0, #8
    f1dc:	9804      	ldr	r0, [sp, #16]
    f1de:	9902      	ldr	r1, [sp, #8]
    f1e0:	9a01      	ldr	r2, [sp, #4]
    f1e2:	f7f9 fb43 	bl	886c <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE>
    f1e6:	e7ff      	b.n	f1e8 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E+0x28>
    f1e8:	b006      	add	sp, #24
    f1ea:	bd80      	pop	{r7, pc}

0000f1ec <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE>:
    f1ec:	b580      	push	{r7, lr}
    f1ee:	b086      	sub	sp, #24
    f1f0:	9105      	str	r1, [sp, #20]
    f1f2:	9004      	str	r0, [sp, #16]
    f1f4:	4608      	mov	r0, r1
    f1f6:	9103      	str	r1, [sp, #12]
    f1f8:	f002 fd09 	bl	11c0e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f1fc:	9002      	str	r0, [sp, #8]
    f1fe:	9101      	str	r1, [sp, #4]
    f200:	e7ff      	b.n	f202 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE+0x16>
    f202:	9803      	ldr	r0, [sp, #12]
    f204:	f100 0308 	add.w	r3, r0, #8
    f208:	9804      	ldr	r0, [sp, #16]
    f20a:	9902      	ldr	r1, [sp, #8]
    f20c:	9a01      	ldr	r2, [sp, #4]
    f20e:	f7f9 fae0 	bl	87d2 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE>
    f212:	e7ff      	b.n	f214 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE+0x28>
    f214:	b006      	add	sp, #24
    f216:	bd80      	pop	{r7, pc}

0000f218 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E>:
const PIXEL_WIDTH: usize = 3;
#[cfg(not(feature = "chip8_curve"))]  //  If we are not rendering CHIP8 Emulator as curved surface...
const PIXEL_HEIGHT: usize = 5;

/// Render some graphics and text to the PineTime display. `start_display()` must have been called earlier.
pub fn on_start() -> MynewtResult<()> {
    f218:	b580      	push	{r7, lr}
    f21a:	b0a4      	sub	sp, #144	; 0x90
    console::print("Rust CHIP8\n"); console::flush();
    f21c:	f24d 108c 	movw	r0, #53644	; 0xd18c
    f220:	f2c0 0001 	movt	r0, #1
    f224:	210b      	movs	r1, #11
    f226:	f7f9 ff67 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f22a:	e7ff      	b.n	f22c <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x14>
    f22c:	f7f9 ffaa 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f230:	e7ff      	b.n	f232 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x1a>
    f232:	2000      	movs	r0, #0
    
    //  Create black background
    let background = Rectangle::<Rgb565>
        ::new( Coord::new( 0, 0 ), Coord::new( 239, 239 ) )   //  Rectangle coordinates
    f234:	900e      	str	r0, [sp, #56]	; 0x38
    f236:	990e      	ldr	r1, [sp, #56]	; 0x38
    f238:	f002 faef 	bl	1181a <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    f23c:	900d      	str	r0, [sp, #52]	; 0x34
    f23e:	910c      	str	r1, [sp, #48]	; 0x30
    f240:	e7ff      	b.n	f242 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x2a>
    f242:	20ef      	movs	r0, #239	; 0xef
    f244:	900b      	str	r0, [sp, #44]	; 0x2c
    f246:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f248:	f002 fae7 	bl	1181a <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    f24c:	900a      	str	r0, [sp, #40]	; 0x28
    f24e:	9109      	str	r1, [sp, #36]	; 0x24
    f250:	e7ff      	b.n	f252 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x3a>
    let background = Rectangle::<Rgb565>
    f252:	4668      	mov	r0, sp
    f254:	9909      	ldr	r1, [sp, #36]	; 0x24
    f256:	6001      	str	r1, [r0, #0]
    f258:	a817      	add	r0, sp, #92	; 0x5c
    f25a:	990d      	ldr	r1, [sp, #52]	; 0x34
    f25c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f260:	f005 fb1a 	bl	14898 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    f264:	e7ff      	b.n	f266 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x4e>
    f266:	2000      	movs	r0, #0
        .fill( Some( Rgb565::from(( 0x00, 0x00, 0x00 )) ) );  //  Black
    f268:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
    f26c:	f88d 007d 	strb.w	r0, [sp, #125]	; 0x7d
    f270:	f88d 007e 	strb.w	r0, [sp, #126]	; 0x7e
    f274:	f89d 007e 	ldrb.w	r0, [sp, #126]	; 0x7e
    f278:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
    f27c:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    f280:	f002 fad4 	bl	1182c <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    f284:	9008      	str	r0, [sp, #32]
    f286:	e7ff      	b.n	f288 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x70>
    f288:	9808      	ldr	r0, [sp, #32]
    f28a:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
    f28e:	2101      	movs	r1, #1
    f290:	f8ad 1078 	strh.w	r1, [sp, #120]	; 0x78
    let background = Rectangle::<Rgb565>
    f294:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    f298:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    f29c:	a810      	add	r0, sp, #64	; 0x40
    f29e:	a917      	add	r1, sp, #92	; 0x5c
    f2a0:	f005 fae8 	bl	14874 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    f2a4:	e7ff      	b.n	f2a6 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x8e>
    f2a6:	2000      	movs	r0, #0
    f2a8:	223f      	movs	r2, #63	; 0x3f
    f2aa:	231f      	movs	r3, #31

    //  Render background to display
    //  druid::draw_to_display(background);
    render_region(0, 0, SCREEN_WIDTH as u8 - 1, SCREEN_HEIGHT as u8 - 1);
    f2ac:	9007      	str	r0, [sp, #28]
    f2ae:	9907      	ldr	r1, [sp, #28]
    f2b0:	f000 fb77 	bl	f9a2 <_ZN3app5chip813render_region17hc692a4d55cab74f0E>
    f2b4:	e7ff      	b.n	f2b6 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x9e>

    //  Start the emulator in a background task
    os::task_init(                  //  Create a new task and start it...
        unsafe { &mut CHIP8_TASK }, //  Task object will be saved here
        &init_strn!( "chip8" ),     //  Name of task
    f2b6:	f24d 10ac 	movw	r0, #53676	; 0xd1ac
    f2ba:	f2c0 0001 	movt	r0, #1
    f2be:	6801      	ldr	r1, [r0, #0]
        Some( task_func ),    //  Function to execute when task starts
    f2c0:	f24f 3041 	movw	r0, #62273	; 0xf341
    f2c4:	f2c0 0000 	movt	r0, #0
    f2c8:	9021      	str	r0, [sp, #132]	; 0x84
    os::task_init(                  //  Create a new task and start it...
    f2ca:	9a21      	ldr	r2, [sp, #132]	; 0x84
    f2cc:	4668      	mov	r0, sp
    f2ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    f2d2:	6103      	str	r3, [r0, #16]
    f2d4:	60c3      	str	r3, [r0, #12]
    f2d6:	f240 13b4 	movw	r3, #436	; 0x1b4
    f2da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2de:	6083      	str	r3, [r0, #8]
    f2e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f2e4:	6043      	str	r3, [r0, #4]
    f2e6:	2314      	movs	r3, #20
    f2e8:	6003      	str	r3, [r0, #0]
    f2ea:	f240 1064 	movw	r0, #356	; 0x164
    f2ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f2f2:	2300      	movs	r3, #0
    f2f4:	f7f9 fd50 	bl	8d98 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
    f2f8:	9006      	str	r0, [sp, #24]
    f2fa:	e7ff      	b.n	f2fc <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0xe4>
    f2fc:	9806      	ldr	r0, [sp, #24]
    f2fe:	f7f9 fcbf 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    f302:	9020      	str	r0, [sp, #128]	; 0x80
    f304:	e7ff      	b.n	f306 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0xee>
        NULL,  //  Argument to be passed to above function
        20,    //  Task priority: highest is 0, lowest is 255 (main task is 127), SPI is 10
        os::OS_WAIT_FOREVER as u32,       //  Don't do sanity / watchdog checking
        unsafe { &mut CHIP8_TASK_STACK }, //  Stack space for the task
        CHIP8_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                                 //  `?` means check for error
    f306:	9820      	ldr	r0, [sp, #128]	; 0x80
    f308:	1e41      	subs	r1, r0, #1
    f30a:	bf18      	it	ne
    f30c:	2101      	movne	r1, #1
    f30e:	2801      	cmp	r0, #1
    f310:	d001      	beq.n	f316 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0xfe>
    f312:	e7ff      	b.n	f314 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0xfc>
    f314:	e005      	b.n	f322 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x10a>
    f316:	2000      	movs	r0, #0

    //  Return success to the caller
    Ok(())
    f318:	900f      	str	r0, [sp, #60]	; 0x3c
    f31a:	2001      	movs	r0, #1
    f31c:	900f      	str	r0, [sp, #60]	; 0x3c
}
    f31e:	e006      	b.n	f32e <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x116>
    os::task_init(                  //  Create a new task and start it...
    f320:	defe      	udf	#254	; 0xfe
    ) ? ;                                 //  `?` means check for error
    f322:	9820      	ldr	r0, [sp, #128]	; 0x80
    f324:	9023      	str	r0, [sp, #140]	; 0x8c
    f326:	f003 f975 	bl	12614 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    f32a:	9005      	str	r0, [sp, #20]
    f32c:	e002      	b.n	f334 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x11c>
}
    f32e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    f330:	b024      	add	sp, #144	; 0x90
    f332:	bd80      	pop	{r7, pc}
    ) ? ;                                 //  `?` means check for error
    f334:	9805      	ldr	r0, [sp, #20]
    f336:	f7f9 fc97 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    f33a:	900f      	str	r0, [sp, #60]	; 0x3c
    f33c:	e7ff      	b.n	f33e <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x126>
    f33e:	e7f6      	b.n	f32e <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x116>

0000f340 <_ZN3app5chip89task_func17h20d1a4715d78a45aE>:

/// Size of the stack (in 4-byte units). Previously `OS_STACK_ALIGN(256)`  
const CHIP8_TASK_STACK_SIZE: usize = 4096;  //  Must be 4096 and above because CHIP8 Emulator requires substantial stack space

///  Run the emulator
extern "C" fn task_func(_arg: Ptr) {    
    f340:	b580      	push	{r7, lr}
    f342:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
    f346:	b082      	sub	sp, #8
    f348:	f50d 5103 	add.w	r1, sp, #8384	; 0x20c0
    f34c:	6008      	str	r0, [r1, #0]
    f34e:	a804      	add	r0, sp, #16
    //  Create the hardware API for rendering the emulator
    let hardware = Hardware::new();
    f350:	9103      	str	r1, [sp, #12]
    f352:	f000 f850 	bl	f3f6 <_ZN3app5chip88Hardware3new17h53332fc09faf36beE>
    f356:	e7ff      	b.n	f358 <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x18>

    //  Create the emulator
    let chip8 = libchip8::Chip8::new(hardware);
    f358:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    f35c:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    f360:	f8ae 006c 	strh.w	r0, [lr, #108]	; 0x6c
    f364:	9804      	ldr	r0, [sp, #16]
    f366:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    f36a:	f8ce 0068 	str.w	r0, [lr, #104]	; 0x68
    f36e:	a806      	add	r0, sp, #24
    f370:	f10d 0e08 	add.w	lr, sp, #8
    f374:	f50e 5183 	add.w	r1, lr, #4192	; 0x1060
    f378:	f7fb fc7e 	bl	ac78 <_ZN8libchip814Chip8$LT$T$GT$3new17hca880a1e3fbd9a67E>
    f37c:	e7ff      	b.n	f37e <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x3e>
    console::print("CHIP8 started\n"); console::flush();
    f37e:	f24d 10b0 	movw	r0, #53680	; 0xd1b0
    f382:	f2c0 0001 	movt	r0, #1
    f386:	210e      	movs	r1, #14
    f388:	f7f9 feb6 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f38c:	e7ff      	b.n	f38e <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x4e>
    f38e:	f7f9 fef9 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f392:	e7ff      	b.n	f394 <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x54>

    //  Load the emulator ROM
    //  let rom = include_bytes!("../roms/invaders.ch8");
    let rom = include_bytes!("../roms/blinky.ch8");
    f394:	f24d 10be 	movw	r0, #53694	; 0xd1be
    f398:	f2c0 0001 	movt	r0, #1
    f39c:	9903      	ldr	r1, [sp, #12]
    f39e:	6048      	str	r0, [r1, #4]
    f3a0:	f10d 0e10 	add.w	lr, sp, #16
    f3a4:	f50e 5283 	add.w	r2, lr, #4192	; 0x1060
    f3a8:	a906      	add	r1, sp, #24
    f3aa:	f241 0350 	movw	r3, #4176	; 0x1050
    //  let rom = include_bytes!("../roms/pong.ch8");

    //  Run the emulator ROM. This will block until emulator terminates
    chip8.run(rom);
    f3ae:	9002      	str	r0, [sp, #8]
    f3b0:	4610      	mov	r0, r2
    f3b2:	9201      	str	r2, [sp, #4]
    f3b4:	461a      	mov	r2, r3
    f3b6:	f00c fc99 	bl	1bcec <__aeabi_memcpy>
    f3ba:	f640 1234 	movw	r2, #2356	; 0x934
    f3be:	9801      	ldr	r0, [sp, #4]
    f3c0:	9902      	ldr	r1, [sp, #8]
    f3c2:	f7fb fd08 	bl	add6 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E>
    f3c6:	e7ff      	b.n	f3c8 <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x88>

    //  Should not come here
    console::print("CHIP8 done\n"); console::flush();
    f3c8:	f64d 20f2 	movw	r0, #56050	; 0xdaf2
    f3cc:	f2c0 0001 	movt	r0, #1
    f3d0:	210b      	movs	r1, #11
    f3d2:	f7f9 fe91 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f3d6:	e7ff      	b.n	f3d8 <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x98>
    f3d8:	f7f9 fed4 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f3dc:	e7ff      	b.n	f3de <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x9e>
    assert!(false, "CHIP8 should not end");
    f3de:	f64d 20fd 	movw	r0, #56061	; 0xdafd
    f3e2:	f2c0 0001 	movt	r0, #1
    f3e6:	f64d 3228 	movw	r2, #56104	; 0xdb28
    f3ea:	f2c0 0201 	movt	r2, #1
    f3ee:	2114      	movs	r1, #20
    f3f0:	f006 f970 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f3f4:	defe      	udf	#254	; 0xfe

0000f3f6 <_ZN3app5chip88Hardware3new17h53332fc09faf36beE>:
    is_checking_input: bool,
}

impl Hardware {
    /// Return a new Hardware API for rendering CHIP8 Emulator
    pub fn new() -> Hardware {
    f3f6:	2100      	movs	r1, #0
        Hardware {
    f3f8:	7001      	strb	r1, [r0, #0]
    f3fa:	7041      	strb	r1, [r0, #1]
    f3fc:	7081      	strb	r1, [r0, #2]
    f3fe:	70c1      	strb	r1, [r0, #3]
    f400:	7101      	strb	r1, [r0, #4]
    f402:	7141      	strb	r1, [r0, #5]
            update_right: 0,
            update_bottom: 0,
            is_interactive: false,
            is_checking_input: false,
        }
    }
    f404:	4770      	bx	lr

0000f406 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17hd3173c320d2551cfE>:
}

impl libchip8::Hardware for Hardware {
    /// Return a random value.
    fn rand(&mut self) -> u8 {
    f406:	b081      	sub	sp, #4
    f408:	9000      	str	r0, [sp, #0]
    f40a:	207b      	movs	r0, #123	; 0x7b
        123  //  TODO
    }
    f40c:	b001      	add	sp, #4
    f40e:	4770      	bx	lr

0000f410 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E>:

    /// Check if the key is pressed.
    fn key(&mut self, _key: u8) -> bool {
    f410:	b580      	push	{r7, lr}
    f412:	b084      	sub	sp, #16
    f414:	460a      	mov	r2, r1
    f416:	9002      	str	r0, [sp, #8]
    f418:	f88d 100f 	strb.w	r1, [sp, #15]
        if !self.is_interactive {
    f41c:	7901      	ldrb	r1, [r0, #4]
    f41e:	07c9      	lsls	r1, r1, #31
    f420:	2900      	cmp	r1, #0
    f422:	9001      	str	r0, [sp, #4]
    f424:	d10f      	bne.n	f446 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x36>
    f426:	e7ff      	b.n	f428 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x18>
    f428:	2001      	movs	r0, #1
            self.is_interactive = true;
    f42a:	9901      	ldr	r1, [sp, #4]
    f42c:	7108      	strb	r0, [r1, #4]
            console::print("key\n"); console::flush(); ////
    f42e:	f64d 3038 	movw	r0, #56120	; 0xdb38
    f432:	f2c0 0001 	movt	r0, #1
    f436:	2104      	movs	r1, #4
    f438:	f7f9 fe5e 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f43c:	e7ff      	b.n	f43e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x2e>
    f43e:	f7f9 fea1 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f442:	e7ff      	b.n	f444 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x34>
        if !self.is_interactive {
    f444:	e7ff      	b.n	f446 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x36>
    f446:	2001      	movs	r0, #1
        }
        self.is_checking_input = true;
    f448:	9901      	ldr	r1, [sp, #4]
    f44a:	7148      	strb	r0, [r1, #5]
    f44c:	2000      	movs	r0, #0
        match &self.win {
            Some(win) => win.is_key_down(k),
            None => false,
        }
        */
    }
    f44e:	b004      	add	sp, #16
    f450:	bd80      	pop	{r7, pc}

0000f452 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE>:

    /// Set the state of a pixel in the screen. true for white, and false for black.
    fn vram_set(&mut self, x: usize, y: usize, d: bool) {
    f452:	b08c      	sub	sp, #48	; 0x30
    f454:	469c      	mov	ip, r3
    f456:	9007      	str	r0, [sp, #28]
    f458:	9108      	str	r1, [sp, #32]
    f45a:	9209      	str	r2, [sp, #36]	; 0x24
    f45c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        //  console::print("set "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    f460:	293f      	cmp	r1, #63	; 0x3f
    f462:	9205      	str	r2, [sp, #20]
    f464:	9104      	str	r1, [sp, #16]
    f466:	9003      	str	r0, [sp, #12]
    f468:	f8cd c008 	str.w	ip, [sp, #8]
    f46c:	d804      	bhi.n	f478 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x26>
    f46e:	e7ff      	b.n	f470 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1e>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    f470:	9805      	ldr	r0, [sp, #20]
    f472:	281f      	cmp	r0, #31
    f474:	d814      	bhi.n	f4a0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x4e>
    f476:	e00b      	b.n	f490 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x3e>
        assert!(x < SCREEN_WIDTH, "x overflow");
    f478:	f64d 303c 	movw	r0, #56124	; 0xdb3c
    f47c:	f2c0 0001 	movt	r0, #1
    f480:	f64d 3248 	movw	r2, #56136	; 0xdb48
    f484:	f2c0 0201 	movt	r2, #1
    f488:	210a      	movs	r1, #10
    f48a:	f006 f923 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f48e:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    f490:	9805      	ldr	r0, [sp, #20]
    f492:	0181      	lsls	r1, r0, #6
    f494:	0e82      	lsrs	r2, r0, #26
    f496:	2a00      	cmp	r2, #0
    f498:	9101      	str	r1, [sp, #4]
    f49a:	f040 80be 	bne.w	f61a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1c8>
    f49e:	e00b      	b.n	f4b8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x66>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    f4a0:	f64d 3058 	movw	r0, #56152	; 0xdb58
    f4a4:	f2c0 0001 	movt	r0, #1
    f4a8:	f64d 3264 	movw	r2, #56164	; 0xdb64
    f4ac:	f2c0 0201 	movt	r2, #1
    f4b0:	210a      	movs	r1, #10
    f4b2:	f006 f90f 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f4b6:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    f4b8:	9804      	ldr	r0, [sp, #16]
    f4ba:	9901      	ldr	r1, [sp, #4]
    f4bc:	1842      	adds	r2, r0, r1
    f4be:	4613      	mov	r3, r2
    f4c0:	4282      	cmp	r2, r0
    f4c2:	9300      	str	r3, [sp, #0]
    f4c4:	f0c0 80b5 	bcc.w	f632 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1e0>
    f4c8:	e7ff      	b.n	f4ca <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x78>
    f4ca:	9800      	ldr	r0, [sp, #0]
    f4cc:	900b      	str	r0, [sp, #44]	; 0x2c
        unsafe { SCREEN_BUFFER[i] = 
            if d {
    f4ce:	9902      	ldr	r1, [sp, #8]
    f4d0:	07ca      	lsls	r2, r1, #31
    f4d2:	2a00      	cmp	r2, #0
    f4d4:	d106      	bne.n	f4e4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x92>
    f4d6:	e7ff      	b.n	f4d8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x86>
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
                else { 200 }                    //  Darker colour for initial screen
            } 
            else { 
                if self.is_interactive { 127 }  //  Fade to black
    f4d8:	9803      	ldr	r0, [sp, #12]
    f4da:	7901      	ldrb	r1, [r0, #4]
    f4dc:	07c9      	lsls	r1, r1, #31
    f4de:	2900      	cmp	r1, #0
    f4e0:	d113      	bne.n	f50a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xb8>
    f4e2:	e00e      	b.n	f502 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xb0>
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
    f4e4:	9803      	ldr	r0, [sp, #12]
    f4e6:	7901      	ldrb	r1, [r0, #4]
    f4e8:	07c9      	lsls	r1, r1, #31
    f4ea:	2900      	cmp	r1, #0
    f4ec:	d104      	bne.n	f4f8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xa6>
    f4ee:	e7ff      	b.n	f4f0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x9e>
    f4f0:	20c8      	movs	r0, #200	; 0xc8
                else { 200 }                    //  Darker colour for initial screen
    f4f2:	f88d 0018 	strb.w	r0, [sp, #24]
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
    f4f6:	e003      	b.n	f500 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xae>
    f4f8:	20ff      	movs	r0, #255	; 0xff
    f4fa:	f88d 0018 	strb.w	r0, [sp, #24]
    f4fe:	e7ff      	b.n	f500 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xae>
            if d {
    f500:	e008      	b.n	f514 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xc2>
    f502:	2000      	movs	r0, #0
                else { 0 }                      //  Black for initial screen                 
    f504:	f88d 0018 	strb.w	r0, [sp, #24]
                if self.is_interactive { 127 }  //  Fade to black
    f508:	e003      	b.n	f512 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xc0>
    f50a:	207f      	movs	r0, #127	; 0x7f
    f50c:	f88d 0018 	strb.w	r0, [sp, #24]
    f510:	e7ff      	b.n	f512 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xc0>
            if d {
    f512:	e7ff      	b.n	f514 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xc2>
    f514:	2000      	movs	r0, #0
        unsafe { SCREEN_BUFFER[i] = 
    f516:	9900      	ldr	r1, [sp, #0]
    f518:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    f51c:	f040 8095 	bne.w	f64a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1f8>
    f520:	e7ff      	b.n	f522 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xd0>
    f522:	f244 10b4 	movw	r0, #16820	; 0x41b4
    f526:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f52a:	f89d 1018 	ldrb.w	r1, [sp, #24]
    f52e:	9a00      	ldr	r2, [sp, #0]
    f530:	5481      	strb	r1, [r0, r2]
            }  
        };

        //  Remember the boundaries of the screen region to be updated
        if self.update_left == 0 && self.update_right == 0 &&
    f532:	9803      	ldr	r0, [sp, #12]
    f534:	7801      	ldrb	r1, [r0, #0]
    f536:	2900      	cmp	r1, #0
    f538:	d02e      	beq.n	f598 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x146>
    f53a:	e029      	b.n	f590 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x13e>
    f53c:	2001      	movs	r0, #1
    f53e:	f88d 0019 	strb.w	r0, [sp, #25]
    f542:	e008      	b.n	f556 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x104>
    f544:	2000      	movs	r0, #0
    f546:	f88d 0019 	strb.w	r0, [sp, #25]
    f54a:	e004      	b.n	f556 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x104>
            self.update_top == 0 && self.update_bottom == 0 {
    f54c:	9803      	ldr	r0, [sp, #12]
    f54e:	78c1      	ldrb	r1, [r0, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    f550:	2900      	cmp	r1, #0
    f552:	d0f3      	beq.n	f53c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xea>
    f554:	e7f6      	b.n	f544 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xf2>
    f556:	f89d 0019 	ldrb.w	r0, [sp, #25]
    f55a:	07c0      	lsls	r0, r0, #31
    f55c:	2800      	cmp	r0, #0
    f55e:	d126      	bne.n	f5ae <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x15c>
    f560:	e02d      	b.n	f5be <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x16c>
    f562:	2001      	movs	r0, #1
    f564:	f88d 001a 	strb.w	r0, [sp, #26]
    f568:	e008      	b.n	f57c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x12a>
    f56a:	2000      	movs	r0, #0
    f56c:	f88d 001a 	strb.w	r0, [sp, #26]
    f570:	e004      	b.n	f57c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x12a>
            self.update_top == 0 && self.update_bottom == 0 {
    f572:	9803      	ldr	r0, [sp, #12]
    f574:	7841      	ldrb	r1, [r0, #1]
        if self.update_left == 0 && self.update_right == 0 &&
    f576:	2900      	cmp	r1, #0
    f578:	d0f3      	beq.n	f562 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x110>
    f57a:	e7f6      	b.n	f56a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x118>
    f57c:	f89d 001a 	ldrb.w	r0, [sp, #26]
    f580:	07c0      	lsls	r0, r0, #31
    f582:	2800      	cmp	r0, #0
    f584:	d1e2      	bne.n	f54c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xfa>
    f586:	e7dd      	b.n	f544 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xf2>
    f588:	2001      	movs	r0, #1
    f58a:	f88d 001b 	strb.w	r0, [sp, #27]
    f58e:	e008      	b.n	f5a2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x150>
    f590:	2000      	movs	r0, #0
    f592:	f88d 001b 	strb.w	r0, [sp, #27]
    f596:	e004      	b.n	f5a2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x150>
    f598:	9803      	ldr	r0, [sp, #12]
    f59a:	7881      	ldrb	r1, [r0, #2]
    f59c:	2900      	cmp	r1, #0
    f59e:	d0f3      	beq.n	f588 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x136>
    f5a0:	e7f6      	b.n	f590 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x13e>
    f5a2:	f89d 001b 	ldrb.w	r0, [sp, #27]
    f5a6:	07c0      	lsls	r0, r0, #31
    f5a8:	2800      	cmp	r0, #0
    f5aa:	d1e2      	bne.n	f572 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x120>
    f5ac:	e7dd      	b.n	f56a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x118>
            self.update_left = x as u8;
    f5ae:	9804      	ldr	r0, [sp, #16]
    f5b0:	9903      	ldr	r1, [sp, #12]
    f5b2:	7008      	strb	r0, [r1, #0]
            self.update_right = x as u8;
    f5b4:	7088      	strb	r0, [r1, #2]
            self.update_top = y as u8;
    f5b6:	9a05      	ldr	r2, [sp, #20]
    f5b8:	704a      	strb	r2, [r1, #1]
            self.update_bottom = y as u8;
    f5ba:	70ca      	strb	r2, [r1, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    f5bc:	e7ff      	b.n	f5be <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x16c>
        }
        if (x as u8) < self.update_left { self.update_left = x as u8; }
    f5be:	9804      	ldr	r0, [sp, #16]
    f5c0:	b2c1      	uxtb	r1, r0
    f5c2:	9a03      	ldr	r2, [sp, #12]
    f5c4:	7813      	ldrb	r3, [r2, #0]
    f5c6:	4299      	cmp	r1, r3
    f5c8:	d204      	bcs.n	f5d4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x182>
    f5ca:	e7ff      	b.n	f5cc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x17a>
    f5cc:	9804      	ldr	r0, [sp, #16]
    f5ce:	9903      	ldr	r1, [sp, #12]
    f5d0:	7008      	strb	r0, [r1, #0]
    f5d2:	e7ff      	b.n	f5d4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x182>
        if (x as u8) > self.update_right { self.update_right = x as u8; }
    f5d4:	9804      	ldr	r0, [sp, #16]
    f5d6:	b2c1      	uxtb	r1, r0
    f5d8:	9a03      	ldr	r2, [sp, #12]
    f5da:	7893      	ldrb	r3, [r2, #2]
    f5dc:	4299      	cmp	r1, r3
    f5de:	d904      	bls.n	f5ea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x198>
    f5e0:	e7ff      	b.n	f5e2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x190>
    f5e2:	9804      	ldr	r0, [sp, #16]
    f5e4:	9903      	ldr	r1, [sp, #12]
    f5e6:	7088      	strb	r0, [r1, #2]
    f5e8:	e7ff      	b.n	f5ea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x198>
        if (y as u8) < self.update_top { self.update_top = y as u8; }
    f5ea:	9805      	ldr	r0, [sp, #20]
    f5ec:	b2c1      	uxtb	r1, r0
    f5ee:	9a03      	ldr	r2, [sp, #12]
    f5f0:	7853      	ldrb	r3, [r2, #1]
    f5f2:	4299      	cmp	r1, r3
    f5f4:	d204      	bcs.n	f600 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1ae>
    f5f6:	e7ff      	b.n	f5f8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1a6>
    f5f8:	9805      	ldr	r0, [sp, #20]
    f5fa:	9903      	ldr	r1, [sp, #12]
    f5fc:	7048      	strb	r0, [r1, #1]
    f5fe:	e7ff      	b.n	f600 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1ae>
        if (y as u8) > self.update_bottom { self.update_bottom = y as u8; }
    f600:	9805      	ldr	r0, [sp, #20]
    f602:	b2c1      	uxtb	r1, r0
    f604:	9a03      	ldr	r2, [sp, #12]
    f606:	78d3      	ldrb	r3, [r2, #3]
    f608:	4299      	cmp	r1, r3
    f60a:	d904      	bls.n	f616 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1c4>
    f60c:	e7ff      	b.n	f60e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1bc>
    f60e:	9805      	ldr	r0, [sp, #20]
    f610:	9903      	ldr	r1, [sp, #12]
    f612:	70c8      	strb	r0, [r1, #3]
    f614:	e7ff      	b.n	f616 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1c4>
    }
    f616:	b00c      	add	sp, #48	; 0x30
    f618:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    f61a:	f64d 3090 	movw	r0, #56208	; 0xdb90
    f61e:	f2c0 0001 	movt	r0, #1
    f622:	f64d 3274 	movw	r2, #56180	; 0xdb74
    f626:	f2c0 0201 	movt	r2, #1
    f62a:	2121      	movs	r1, #33	; 0x21
    f62c:	f006 f852 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f630:	defe      	udf	#254	; 0xfe
    f632:	f64d 30d0 	movw	r0, #56272	; 0xdbd0
    f636:	f2c0 0001 	movt	r0, #1
    f63a:	f64d 32b4 	movw	r2, #56244	; 0xdbb4
    f63e:	f2c0 0201 	movt	r2, #1
    f642:	211c      	movs	r1, #28
    f644:	f006 f846 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f648:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] = 
    f64a:	f64d 30ec 	movw	r0, #56300	; 0xdbec
    f64e:	f2c0 0001 	movt	r0, #1
    f652:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f656:	9900      	ldr	r1, [sp, #0]
    f658:	f006 f852 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    f65c:	defe      	udf	#254	; 0xfe

0000f65e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE>:

    /// Get the current state of a pixel in the screen.
    fn vram_get(&mut self, x: usize, y: usize) -> bool {
    f65e:	b088      	sub	sp, #32
    f660:	9004      	str	r0, [sp, #16]
    f662:	9105      	str	r1, [sp, #20]
    f664:	9206      	str	r2, [sp, #24]
        //  console::print("get "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    f666:	293f      	cmp	r1, #63	; 0x3f
    f668:	9203      	str	r2, [sp, #12]
    f66a:	9102      	str	r1, [sp, #8]
    f66c:	d804      	bhi.n	f678 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x1a>
    f66e:	e7ff      	b.n	f670 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x12>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    f670:	9803      	ldr	r0, [sp, #12]
    f672:	281f      	cmp	r0, #31
    f674:	d813      	bhi.n	f69e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x40>
    f676:	e00b      	b.n	f690 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x32>
        assert!(x < SCREEN_WIDTH, "x overflow");
    f678:	f64d 303c 	movw	r0, #56124	; 0xdb3c
    f67c:	f2c0 0001 	movt	r0, #1
    f680:	f64d 32fc 	movw	r2, #56316	; 0xdbfc
    f684:	f2c0 0201 	movt	r2, #1
    f688:	210a      	movs	r1, #10
    f68a:	f006 f823 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f68e:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    f690:	9803      	ldr	r0, [sp, #12]
    f692:	0181      	lsls	r1, r0, #6
    f694:	0e82      	lsrs	r2, r0, #26
    f696:	2a00      	cmp	r2, #0
    f698:	9101      	str	r1, [sp, #4]
    f69a:	d128      	bne.n	f6ee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x90>
    f69c:	e00b      	b.n	f6b6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x58>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    f69e:	f64d 3058 	movw	r0, #56152	; 0xdb58
    f6a2:	f2c0 0001 	movt	r0, #1
    f6a6:	f64d 420c 	movw	r2, #56332	; 0xdc0c
    f6aa:	f2c0 0201 	movt	r2, #1
    f6ae:	210a      	movs	r1, #10
    f6b0:	f006 f810 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f6b4:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    f6b6:	9802      	ldr	r0, [sp, #8]
    f6b8:	9901      	ldr	r1, [sp, #4]
    f6ba:	1842      	adds	r2, r0, r1
    f6bc:	4613      	mov	r3, r2
    f6be:	4282      	cmp	r2, r0
    f6c0:	9300      	str	r3, [sp, #0]
    f6c2:	d320      	bcc.n	f706 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0xa8>
    f6c4:	e7ff      	b.n	f6c6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x68>
    f6c6:	9800      	ldr	r0, [sp, #0]
    f6c8:	9007      	str	r0, [sp, #28]
    f6ca:	2100      	movs	r1, #0
        unsafe { SCREEN_BUFFER[i] >= 128 }
    f6cc:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    f6d0:	d125      	bne.n	f71e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0xc0>
    f6d2:	e7ff      	b.n	f6d4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x76>
    f6d4:	f244 10b4 	movw	r0, #16820	; 0x41b4
    f6d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f6dc:	9900      	ldr	r1, [sp, #0]
    f6de:	5640      	ldrsb	r0, [r0, r1]
    f6e0:	2200      	movs	r2, #0
    f6e2:	2800      	cmp	r0, #0
    f6e4:	bf48      	it	mi
    f6e6:	2201      	movmi	r2, #1
    }
    f6e8:	4610      	mov	r0, r2
    f6ea:	b008      	add	sp, #32
    f6ec:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    f6ee:	f64d 3090 	movw	r0, #56208	; 0xdb90
    f6f2:	f2c0 0001 	movt	r0, #1
    f6f6:	f64d 421c 	movw	r2, #56348	; 0xdc1c
    f6fa:	f2c0 0201 	movt	r2, #1
    f6fe:	2121      	movs	r1, #33	; 0x21
    f700:	f005 ffe8 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f704:	defe      	udf	#254	; 0xfe
    f706:	f64d 30d0 	movw	r0, #56272	; 0xdbd0
    f70a:	f2c0 0001 	movt	r0, #1
    f70e:	f64d 422c 	movw	r2, #56364	; 0xdc2c
    f712:	f2c0 0201 	movt	r2, #1
    f716:	211c      	movs	r1, #28
    f718:	f005 ffdc 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f71c:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] >= 128 }
    f71e:	f64d 403c 	movw	r0, #56380	; 0xdc3c
    f722:	f2c0 0001 	movt	r0, #1
    f726:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f72a:	9900      	ldr	r1, [sp, #0]
    f72c:	f005 ffe8 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    f730:	defe      	udf	#254	; 0xfe

0000f732 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE>:

    /// Set the size of the screen.
    fn vram_setsize(&mut self, size: (usize, usize)) {
    f732:	b580      	push	{r7, lr}
    f734:	b086      	sub	sp, #24
    f736:	9003      	str	r0, [sp, #12]
    f738:	9104      	str	r1, [sp, #16]
    f73a:	9205      	str	r2, [sp, #20]
        //  Do nothing. We assume SCREEN_WIDTH and SCREEN_HEIGHT.
        assert!(size.0 == SCREEN_WIDTH && size.1 == SCREEN_HEIGHT, "bad size");
    f73c:	2940      	cmp	r1, #64	; 0x40
    f73e:	9201      	str	r2, [sp, #4]
    f740:	9100      	str	r1, [sp, #0]
    f742:	d008      	beq.n	f756 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x24>
    f744:	e003      	b.n	f74e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x1c>
    f746:	2001      	movs	r0, #1
    f748:	f88d 000b 	strb.w	r0, [sp, #11]
    f74c:	e007      	b.n	f75e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x2c>
    f74e:	2000      	movs	r0, #0
    f750:	f88d 000b 	strb.w	r0, [sp, #11]
    f754:	e003      	b.n	f75e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x2c>
    f756:	9801      	ldr	r0, [sp, #4]
    f758:	2820      	cmp	r0, #32
    f75a:	d0f4      	beq.n	f746 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x14>
    f75c:	e7f7      	b.n	f74e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x1c>
    f75e:	f89d 000b 	ldrb.w	r0, [sp, #11]
    f762:	07c0      	lsls	r0, r0, #31
    f764:	2800      	cmp	r0, #0
    f766:	d008      	beq.n	f77a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x48>
    f768:	e7ff      	b.n	f76a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x38>
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    f76a:	f64d 4054 	movw	r0, #56404	; 0xdc54
    f76e:	f2c0 0001 	movt	r0, #1
    f772:	2108      	movs	r1, #8
    f774:	f7f9 fcc0 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f778:	e00b      	b.n	f792 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x60>
        assert!(size.0 == SCREEN_WIDTH && size.1 == SCREEN_HEIGHT, "bad size");
    f77a:	f64d 404c 	movw	r0, #56396	; 0xdc4c
    f77e:	f2c0 0001 	movt	r0, #1
    f782:	f64d 4274 	movw	r2, #56436	; 0xdc74
    f786:	f2c0 0201 	movt	r2, #1
    f78a:	2108      	movs	r1, #8
    f78c:	f005 ffa2 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f790:	defe      	udf	#254	; 0xfe
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    f792:	9800      	ldr	r0, [sp, #0]
    f794:	f7f9 fcee 	bl	9174 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    f798:	e7ff      	b.n	f79a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x68>
    f79a:	f64d 4084 	movw	r0, #56452	; 0xdc84
    f79e:	f2c0 0001 	movt	r0, #1
    f7a2:	2102      	movs	r1, #2
    f7a4:	f7f9 fca8 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f7a8:	e7ff      	b.n	f7aa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x78>
    f7aa:	9801      	ldr	r0, [sp, #4]
    f7ac:	f7f9 fce2 	bl	9174 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    f7b0:	e7ff      	b.n	f7b2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x80>
    f7b2:	f64d 4086 	movw	r0, #56454	; 0xdc86
    f7b6:	f2c0 0001 	movt	r0, #1
    f7ba:	2101      	movs	r1, #1
    f7bc:	f7f9 fc9c 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f7c0:	e7ff      	b.n	f7c2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x90>
    f7c2:	f7f9 fcdf 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f7c6:	e7ff      	b.n	f7c8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x96>
    }
    f7c8:	b006      	add	sp, #24
    f7ca:	bd80      	pop	{r7, pc}

0000f7cc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbb5c150f8fc596c2E>:

    /// Get the size of the screen.
    fn vram_size(&mut self) -> (usize, usize) {
    f7cc:	b083      	sub	sp, #12
    f7ce:	9002      	str	r0, [sp, #8]
    f7d0:	2040      	movs	r0, #64	; 0x40
        (SCREEN_WIDTH, SCREEN_HEIGHT)
    f7d2:	9000      	str	r0, [sp, #0]
    f7d4:	2020      	movs	r0, #32
    f7d6:	9001      	str	r0, [sp, #4]
    }
    f7d8:	9800      	ldr	r0, [sp, #0]
    f7da:	9901      	ldr	r1, [sp, #4]
    f7dc:	b003      	add	sp, #12
    f7de:	4770      	bx	lr

0000f7e0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E>:

    /// Return the current clock value in nanoseconds.
    fn clock(&mut self) -> u64 {
    f7e0:	b5b0      	push	{r4, r5, r7, lr}
    f7e2:	b086      	sub	sp, #24
    f7e4:	9005      	str	r0, [sp, #20]
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    f7e6:	f00a f813 	bl	19810 <os_time_get>
    f7ea:	9004      	str	r0, [sp, #16]
    f7ec:	e7ff      	b.n	f7ee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0xe>
    f7ee:	2000      	movs	r0, #0
    f7f0:	9904      	ldr	r1, [sp, #16]
    f7f2:	fba0 2301 	umull	r2, r3, r0, r1
    f7f6:	2b00      	cmp	r3, #0
    f7f8:	bf18      	it	ne
    f7fa:	2301      	movne	r3, #1
    f7fc:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    f800:	fba0 e40c 	umull	lr, r4, r0, ip
    f804:	2c00      	cmp	r4, #0
    f806:	bf18      	it	ne
    f808:	2401      	movne	r4, #1
    f80a:	ea43 0304 	orr.w	r3, r3, r4
    f80e:	4472      	add	r2, lr
    f810:	fba1 ce0c 	umull	ip, lr, r1, ip
    f814:	eb12 020e 	adds.w	r2, r2, lr
    f818:	f140 0000 	adc.w	r0, r0, #0
    f81c:	ea40 0003 	orr.w	r0, r0, r3
    f820:	2800      	cmp	r0, #0
    f822:	f8cd c00c 	str.w	ip, [sp, #12]
    f826:	9202      	str	r2, [sp, #8]
    f828:	d124      	bne.n	f874 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0x94>
    f82a:	e7ff      	b.n	f82c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0x4c>
    f82c:	2000      	movs	r0, #0
    f82e:	9903      	ldr	r1, [sp, #12]
    f830:	fba0 2301 	umull	r2, r3, r0, r1
    f834:	2b00      	cmp	r3, #0
    f836:	bf18      	it	ne
    f838:	2301      	movne	r3, #1
    f83a:	f44f 6cfa 	mov.w	ip, #2000	; 0x7d0
    f83e:	f8dd e008 	ldr.w	lr, [sp, #8]
    f842:	fbae 450c 	umull	r4, r5, lr, ip
    f846:	2d00      	cmp	r5, #0
    f848:	bf18      	it	ne
    f84a:	2501      	movne	r5, #1
    f84c:	ea43 0305 	orr.w	r3, r3, r5
    f850:	4422      	add	r2, r4
    f852:	fba1 c40c 	umull	ip, r4, r1, ip
    f856:	1912      	adds	r2, r2, r4
    f858:	f140 0000 	adc.w	r0, r0, #0
    f85c:	ea40 0003 	orr.w	r0, r0, r3
    f860:	2800      	cmp	r0, #0
    f862:	f8cd c004 	str.w	ip, [sp, #4]
    f866:	9200      	str	r2, [sp, #0]
    f868:	d110      	bne.n	f88c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0xac>
    f86a:	e7ff      	b.n	f86c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0x8c>
    }
    f86c:	9801      	ldr	r0, [sp, #4]
    f86e:	9900      	ldr	r1, [sp, #0]
    f870:	b006      	add	sp, #24
    f872:	bdb0      	pop	{r4, r5, r7, pc}
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    f874:	f64d 3090 	movw	r0, #56208	; 0xdb90
    f878:	f2c0 0001 	movt	r0, #1
    f87c:	f64d 4288 	movw	r2, #56456	; 0xdc88
    f880:	f2c0 0201 	movt	r2, #1
    f884:	2121      	movs	r1, #33	; 0x21
    f886:	f005 ff25 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f88a:	defe      	udf	#254	; 0xfe
    f88c:	f64d 3090 	movw	r0, #56208	; 0xdb90
    f890:	f2c0 0001 	movt	r0, #1
    f894:	f64d 4288 	movw	r2, #56456	; 0xdc88
    f898:	f2c0 0201 	movt	r2, #1
    f89c:	2121      	movs	r1, #33	; 0x21
    f89e:	f005 ff19 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f8a2:	defe      	udf	#254	; 0xfe

0000f8a4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha9851d0b0cdc4725E>:

    /// Play beep sound.
    fn beep(&mut self) {
    f8a4:	b081      	sub	sp, #4
    f8a6:	9000      	str	r0, [sp, #0]
        //  TODO: Vibrate? Flash?
    }
    f8a8:	b001      	add	sp, #4
    f8aa:	4770      	bx	lr

0000f8ac <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E>:

    /// Called in every step; return true for shutdown.
    fn sched(&mut self) -> bool {
    f8ac:	b580      	push	{r7, lr}
    f8ae:	b084      	sub	sp, #16
    f8b0:	9003      	str	r0, [sp, #12]
        //  console::print("sched\n"); console::flush(); ////

        //  If no screen update, return
        if self.update_left == 0 && self.update_right == 0 &&
    f8b2:	7801      	ldrb	r1, [r0, #0]
    f8b4:	2900      	cmp	r1, #0
    f8b6:	9001      	str	r0, [sp, #4]
    f8b8:	d02e      	beq.n	f918 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x6c>
    f8ba:	e029      	b.n	f910 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x64>
    f8bc:	2001      	movs	r0, #1
    f8be:	f88d 0009 	strb.w	r0, [sp, #9]
    f8c2:	e008      	b.n	f8d6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x2a>
    f8c4:	2000      	movs	r0, #0
    f8c6:	f88d 0009 	strb.w	r0, [sp, #9]
    f8ca:	e004      	b.n	f8d6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x2a>
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    f8cc:	9801      	ldr	r0, [sp, #4]
    f8ce:	78c1      	ldrb	r1, [r0, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    f8d0:	2900      	cmp	r1, #0
    f8d2:	d0f3      	beq.n	f8bc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x10>
    f8d4:	e7f6      	b.n	f8c4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x18>
    f8d6:	f89d 0009 	ldrb.w	r0, [sp, #9]
    f8da:	07c0      	lsls	r0, r0, #31
    f8dc:	2800      	cmp	r0, #0
    f8de:	d12c      	bne.n	f93a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x8e>
    f8e0:	e025      	b.n	f92e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x82>
    f8e2:	2001      	movs	r0, #1
    f8e4:	f88d 000a 	strb.w	r0, [sp, #10]
    f8e8:	e008      	b.n	f8fc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x50>
    f8ea:	2000      	movs	r0, #0
    f8ec:	f88d 000a 	strb.w	r0, [sp, #10]
    f8f0:	e004      	b.n	f8fc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x50>
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    f8f2:	9801      	ldr	r0, [sp, #4]
    f8f4:	7841      	ldrb	r1, [r0, #1]
        if self.update_left == 0 && self.update_right == 0 &&
    f8f6:	2900      	cmp	r1, #0
    f8f8:	d0f3      	beq.n	f8e2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x36>
    f8fa:	e7f6      	b.n	f8ea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x3e>
    f8fc:	f89d 000a 	ldrb.w	r0, [sp, #10]
    f900:	07c0      	lsls	r0, r0, #31
    f902:	2800      	cmp	r0, #0
    f904:	d1e2      	bne.n	f8cc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x20>
    f906:	e7dd      	b.n	f8c4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x18>
    f908:	2001      	movs	r0, #1
    f90a:	f88d 000b 	strb.w	r0, [sp, #11]
    f90e:	e008      	b.n	f922 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x76>
    f910:	2000      	movs	r0, #0
    f912:	f88d 000b 	strb.w	r0, [sp, #11]
    f916:	e004      	b.n	f922 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x76>
    f918:	9801      	ldr	r0, [sp, #4]
    f91a:	7881      	ldrb	r1, [r0, #2]
    f91c:	2900      	cmp	r1, #0
    f91e:	d0f3      	beq.n	f908 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x5c>
    f920:	e7f6      	b.n	f910 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x64>
    f922:	f89d 000b 	ldrb.w	r0, [sp, #11]
    f926:	07c0      	lsls	r0, r0, #31
    f928:	2800      	cmp	r0, #0
    f92a:	d1e2      	bne.n	f8f2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x46>
    f92c:	e7dd      	b.n	f8ea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x3e>

        //  If emulator is preparing the initial screen, refresh the screen later
        if !self.is_interactive { return false; }
    f92e:	9801      	ldr	r0, [sp, #4]
    f930:	7901      	ldrb	r1, [r0, #4]
    f932:	07c9      	lsls	r1, r1, #31
    f934:	2900      	cmp	r1, #0
    f936:	d00e      	beq.n	f956 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xaa>
    f938:	e007      	b.n	f94a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x9e>
    f93a:	2000      	movs	r0, #0
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    f93c:	f88d 0008 	strb.w	r0, [sp, #8]
    f940:	e7ff      	b.n	f942 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x96>
        self.update_right = 0;
        self.update_bottom = 0;

        //  Return false to indicate no shutdown
        false
    }
    f942:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f946:	b004      	add	sp, #16
    f948:	bd80      	pop	{r7, pc}
        if !self.is_checking_input { return false; }
    f94a:	9801      	ldr	r0, [sp, #4]
    f94c:	7941      	ldrb	r1, [r0, #5]
    f94e:	07c9      	lsls	r1, r1, #31
    f950:	2900      	cmp	r1, #0
    f952:	d00a      	beq.n	f96a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xbe>
    f954:	e003      	b.n	f95e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xb2>
    f956:	2000      	movs	r0, #0
        if !self.is_interactive { return false; }
    f958:	f88d 0008 	strb.w	r0, [sp, #8]
    f95c:	e7f1      	b.n	f942 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x96>
    f95e:	2000      	movs	r0, #0
        self.is_checking_input = false;
    f960:	9901      	ldr	r1, [sp, #4]
    f962:	7148      	strb	r0, [r1, #5]
        unsafe { hal_watchdog_tickle() };
    f964:	f008 fd2c 	bl	183c0 <hal_watchdog_tickle>
    f968:	e003      	b.n	f972 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xc6>
    f96a:	2000      	movs	r0, #0
        if !self.is_checking_input { return false; }
    f96c:	f88d 0008 	strb.w	r0, [sp, #8]
    f970:	e7e7      	b.n	f942 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x96>
    f972:	2001      	movs	r0, #1
        unsafe { os::os_time_delay(1) };
    f974:	f009 ff72 	bl	1985c <os_time_delay>
    f978:	e7ff      	b.n	f97a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xce>
        render_region(
    f97a:	9801      	ldr	r0, [sp, #4]
    f97c:	7800      	ldrb	r0, [r0, #0]
    f97e:	9901      	ldr	r1, [sp, #4]
    f980:	7849      	ldrb	r1, [r1, #1]
    f982:	9a01      	ldr	r2, [sp, #4]
    f984:	7892      	ldrb	r2, [r2, #2]
    f986:	9b01      	ldr	r3, [sp, #4]
    f988:	78db      	ldrb	r3, [r3, #3]
    f98a:	f000 f80a 	bl	f9a2 <_ZN3app5chip813render_region17hc692a4d55cab74f0E>
    f98e:	e7ff      	b.n	f990 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xe4>
    f990:	2000      	movs	r0, #0
        self.update_left = 0;
    f992:	9901      	ldr	r1, [sp, #4]
    f994:	7008      	strb	r0, [r1, #0]
        self.update_top = 0;
    f996:	7048      	strb	r0, [r1, #1]
        self.update_right = 0;
    f998:	7088      	strb	r0, [r1, #2]
        self.update_bottom = 0;
    f99a:	70c8      	strb	r0, [r1, #3]
        false
    f99c:	f88d 0008 	strb.w	r0, [sp, #8]
    }
    f9a0:	e7cf      	b.n	f942 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x96>

0000f9a2 <_ZN3app5chip813render_region17hc692a4d55cab74f0E>:
}

/// Render the Virtual Screen region
fn render_region(left: u8, top: u8, right: u8, bottom: u8) {
    f9a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    f9a4:	b095      	sub	sp, #84	; 0x54
    f9a6:	fa5f fc80 	uxtb.w	ip, r0
    f9aa:	fa5f fe82 	uxtb.w	lr, r2
    f9ae:	461c      	mov	r4, r3
    f9b0:	4615      	mov	r5, r2
    f9b2:	460e      	mov	r6, r1
    f9b4:	4607      	mov	r7, r0
    f9b6:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    f9ba:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    f9be:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
    f9c2:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    let width = right - left + 1;
    f9c6:	ebae 000c 	sub.w	r0, lr, ip
    f9ca:	b2c1      	uxtb	r1, r0
    f9cc:	4602      	mov	r2, r0
    f9ce:	4281      	cmp	r1, r0
    f9d0:	9411      	str	r4, [sp, #68]	; 0x44
    f9d2:	9510      	str	r5, [sp, #64]	; 0x40
    f9d4:	960f      	str	r6, [sp, #60]	; 0x3c
    f9d6:	970e      	str	r7, [sp, #56]	; 0x38
    f9d8:	920d      	str	r2, [sp, #52]	; 0x34
    f9da:	f040 80df 	bne.w	fb9c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1fa>
    f9de:	e7ff      	b.n	f9e0 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x3e>
    f9e0:	2001      	movs	r0, #1
    f9e2:	990d      	ldr	r1, [sp, #52]	; 0x34
    f9e4:	fa50 f081 	uxtab	r0, r0, r1
    f9e8:	b2c2      	uxtb	r2, r0
    f9ea:	4603      	mov	r3, r0
    f9ec:	4282      	cmp	r2, r0
    f9ee:	930c      	str	r3, [sp, #48]	; 0x30
    f9f0:	f040 80e0 	bne.w	fbb4 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x212>
    f9f4:	e7ff      	b.n	f9f6 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x54>
    f9f6:	980c      	ldr	r0, [sp, #48]	; 0x30
    f9f8:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    let height = bottom - top + 1;
    f9fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    f9fe:	b2ca      	uxtb	r2, r1
    fa00:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fa02:	fa5f fc83 	uxtb.w	ip, r3
    fa06:	ebac 0202 	sub.w	r2, ip, r2
    fa0a:	fa5f fc82 	uxtb.w	ip, r2
    fa0e:	4696      	mov	lr, r2
    fa10:	4594      	cmp	ip, r2
    fa12:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    fa16:	f040 80d9 	bne.w	fbcc <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x22a>
    fa1a:	e7ff      	b.n	fa1c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x7a>
    fa1c:	2001      	movs	r0, #1
    fa1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    fa20:	fa50 f081 	uxtab	r0, r0, r1
    fa24:	b2c2      	uxtb	r2, r0
    fa26:	4603      	mov	r3, r0
    fa28:	4282      	cmp	r2, r0
    fa2a:	930a      	str	r3, [sp, #40]	; 0x28
    fa2c:	f040 80da 	bne.w	fbe4 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x242>
    fa30:	e7ff      	b.n	fa32 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x90>
    fa32:	980a      	ldr	r0, [sp, #40]	; 0x28
    fa34:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
    //  If the update region is small, render with a single block
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    fa38:	990c      	ldr	r1, [sp, #48]	; 0x30
    fa3a:	b2ca      	uxtb	r2, r1
    fa3c:	fa52 f280 	uxtab	r2, r2, r0
    fa40:	b2d3      	uxtb	r3, r2
    fa42:	4694      	mov	ip, r2
    fa44:	4293      	cmp	r3, r2
    fa46:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    fa4a:	f040 80d7 	bne.w	fbfc <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x25a>
    fa4e:	e7ff      	b.n	fa50 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xae>
    fa50:	9809      	ldr	r0, [sp, #36]	; 0x24
    fa52:	b2c1      	uxtb	r1, r0
    fa54:	2926      	cmp	r1, #38	; 0x26
    fa56:	d307      	bcc.n	fa68 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xc6>
    fa58:	e7ff      	b.n	fa5a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xb8>
        render_block(left, top, right, bottom);
    } else {
        //  If the update region is too big for a single block, break the region into blocks and render
        let mut x = left;
    fa5a:	980e      	ldr	r0, [sp, #56]	; 0x38
    fa5c:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
        let mut y = top;
    fa60:	990f      	ldr	r1, [sp, #60]	; 0x3c
    fa62:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
        loop {
    fa66:	e007      	b.n	fa78 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xd6>
        render_block(left, top, right, bottom);
    fa68:	980e      	ldr	r0, [sp, #56]	; 0x38
    fa6a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    fa6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fa6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fa70:	f000 f918 	bl	fca4 <_ZN3app5chip812render_block17h6c8b81526965606bE>
    fa74:	e7ff      	b.n	fa76 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xd4>
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    fa76:	e08f      	b.n	fb98 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1f6>
            let block_right = x + BLOCK_WIDTH as u8 - 1;
    fa78:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    fa7c:	3020      	adds	r0, #32
    fa7e:	b2c1      	uxtb	r1, r0
    fa80:	4602      	mov	r2, r0
    fa82:	4281      	cmp	r1, r0
    fa84:	9208      	str	r2, [sp, #32]
    fa86:	f040 80c5 	bne.w	fc14 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x272>
    fa8a:	e7ff      	b.n	fa8c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xea>
    fa8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fa90:	9908      	ldr	r1, [sp, #32]
    fa92:	fa50 f081 	uxtab	r0, r0, r1
    fa96:	b2c2      	uxtb	r2, r0
    fa98:	4603      	mov	r3, r0
    fa9a:	4282      	cmp	r2, r0
    fa9c:	9307      	str	r3, [sp, #28]
    fa9e:	f040 80c5 	bne.w	fc2c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x28a>
    faa2:	e7ff      	b.n	faa4 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x102>
    faa4:	9807      	ldr	r0, [sp, #28]
    faa6:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
            let block_bottom = y + BLOCK_HEIGHT as u8 - 1;
    faaa:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    faae:	3105      	adds	r1, #5
    fab0:	b2ca      	uxtb	r2, r1
    fab2:	460b      	mov	r3, r1
    fab4:	428a      	cmp	r2, r1
    fab6:	9306      	str	r3, [sp, #24]
    fab8:	f040 80c4 	bne.w	fc44 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x2a2>
    fabc:	e7ff      	b.n	fabe <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x11c>
    fabe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fac2:	9906      	ldr	r1, [sp, #24]
    fac4:	fa50 f081 	uxtab	r0, r0, r1
    fac8:	b2c2      	uxtb	r2, r0
    faca:	4603      	mov	r3, r0
    facc:	4282      	cmp	r2, r0
    face:	9305      	str	r3, [sp, #20]
    fad0:	f040 80c4 	bne.w	fc5c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x2ba>
    fad4:	e7ff      	b.n	fad6 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x134>
    fad6:	9805      	ldr	r0, [sp, #20]
    fad8:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
            render_block(x, y,
    fadc:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    fae0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
                if block_right  <= right  { block_right }  else { right },
    fae4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fae6:	fa5f fc83 	uxtb.w	ip, r3
    faea:	f8dd e01c 	ldr.w	lr, [sp, #28]
    faee:	fa5f f48e 	uxtb.w	r4, lr
    faf2:	4564      	cmp	r4, ip
    faf4:	9104      	str	r1, [sp, #16]
    faf6:	9203      	str	r2, [sp, #12]
    faf8:	d904      	bls.n	fb04 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x162>
    fafa:	e7ff      	b.n	fafc <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x15a>
    fafc:	9810      	ldr	r0, [sp, #64]	; 0x40
    fafe:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    fb02:	e003      	b.n	fb0c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x16a>
    fb04:	9807      	ldr	r0, [sp, #28]
    fb06:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    fb0a:	e7ff      	b.n	fb0c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x16a>
                if block_bottom <= bottom { block_bottom } else { bottom }
    fb0c:	9811      	ldr	r0, [sp, #68]	; 0x44
    fb0e:	b2c1      	uxtb	r1, r0
    fb10:	9a05      	ldr	r2, [sp, #20]
    fb12:	b2d3      	uxtb	r3, r2
    fb14:	428b      	cmp	r3, r1
    fb16:	d904      	bls.n	fb22 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x180>
    fb18:	e7ff      	b.n	fb1a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x178>
    fb1a:	9811      	ldr	r0, [sp, #68]	; 0x44
    fb1c:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
    fb20:	e003      	b.n	fb2a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x188>
    fb22:	9805      	ldr	r0, [sp, #20]
    fb24:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
    fb28:	e7ff      	b.n	fb2a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x188>
            render_block(x, y,
    fb2a:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
    fb2e:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    fb32:	9804      	ldr	r0, [sp, #16]
    fb34:	9903      	ldr	r1, [sp, #12]
    fb36:	f000 f8b5 	bl	fca4 <_ZN3app5chip812render_block17h6c8b81526965606bE>
    fb3a:	e7ff      	b.n	fb3c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x19a>
            );  //  Will not overflow SPI buffer
            x += BLOCK_WIDTH as u8;
    fb3c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    fb40:	3020      	adds	r0, #32
    fb42:	b2c1      	uxtb	r1, r0
    fb44:	4602      	mov	r2, r0
    fb46:	4281      	cmp	r1, r0
    fb48:	9202      	str	r2, [sp, #8]
    fb4a:	f040 8093 	bne.w	fc74 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x2d2>
    fb4e:	e7ff      	b.n	fb50 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1ae>
    fb50:	9802      	ldr	r0, [sp, #8]
    fb52:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
            if x > right {
    fb56:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    fb5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fb5c:	b2d3      	uxtb	r3, r2
    fb5e:	4299      	cmp	r1, r3
    fb60:	d919      	bls.n	fb96 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1f4>
    fb62:	e7ff      	b.n	fb64 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1c2>
                x = left;
    fb64:	980e      	ldr	r0, [sp, #56]	; 0x38
    fb66:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
                y += BLOCK_HEIGHT as u8;
    fb6a:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    fb6e:	3105      	adds	r1, #5
    fb70:	b2ca      	uxtb	r2, r1
    fb72:	460b      	mov	r3, r1
    fb74:	428a      	cmp	r2, r1
    fb76:	9301      	str	r3, [sp, #4]
    fb78:	f040 8088 	bne.w	fc8c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x2ea>
    fb7c:	e7ff      	b.n	fb7e <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1dc>
    fb7e:	9801      	ldr	r0, [sp, #4]
    fb80:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
                if y > bottom { break; }
    fb84:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    fb88:	9a11      	ldr	r2, [sp, #68]	; 0x44
    fb8a:	b2d3      	uxtb	r3, r2
    fb8c:	4299      	cmp	r1, r3
    fb8e:	d801      	bhi.n	fb94 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1f2>
    fb90:	e7ff      	b.n	fb92 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1f0>
            if x > right {
    fb92:	e000      	b.n	fb96 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1f4>
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    fb94:	e000      	b.n	fb98 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1f6>
        loop {
    fb96:	e76f      	b.n	fa78 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xd6>
            }
        }
    }
}
    fb98:	b015      	add	sp, #84	; 0x54
    fb9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    let width = right - left + 1;
    fb9c:	f64d 40b0 	movw	r0, #56496	; 0xdcb0
    fba0:	f2c0 0001 	movt	r0, #1
    fba4:	f64d 4298 	movw	r2, #56472	; 0xdc98
    fba8:	f2c0 0201 	movt	r2, #1
    fbac:	2121      	movs	r1, #33	; 0x21
    fbae:	f005 fd91 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fbb2:	defe      	udf	#254	; 0xfe
    fbb4:	f64d 30d0 	movw	r0, #56272	; 0xdbd0
    fbb8:	f2c0 0001 	movt	r0, #1
    fbbc:	f64d 4298 	movw	r2, #56472	; 0xdc98
    fbc0:	f2c0 0201 	movt	r2, #1
    fbc4:	211c      	movs	r1, #28
    fbc6:	f005 fd85 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fbca:	defe      	udf	#254	; 0xfe
    let height = bottom - top + 1;
    fbcc:	f64d 40b0 	movw	r0, #56496	; 0xdcb0
    fbd0:	f2c0 0001 	movt	r0, #1
    fbd4:	f64d 42d4 	movw	r2, #56532	; 0xdcd4
    fbd8:	f2c0 0201 	movt	r2, #1
    fbdc:	2121      	movs	r1, #33	; 0x21
    fbde:	f005 fd79 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fbe2:	defe      	udf	#254	; 0xfe
    fbe4:	f64d 30d0 	movw	r0, #56272	; 0xdbd0
    fbe8:	f2c0 0001 	movt	r0, #1
    fbec:	f64d 42d4 	movw	r2, #56532	; 0xdcd4
    fbf0:	f2c0 0201 	movt	r2, #1
    fbf4:	211c      	movs	r1, #28
    fbf6:	f005 fd6d 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fbfa:	defe      	udf	#254	; 0xfe
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    fbfc:	f64d 30d0 	movw	r0, #56272	; 0xdbd0
    fc00:	f2c0 0001 	movt	r0, #1
    fc04:	f64d 42e4 	movw	r2, #56548	; 0xdce4
    fc08:	f2c0 0201 	movt	r2, #1
    fc0c:	211c      	movs	r1, #28
    fc0e:	f005 fd61 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc12:	defe      	udf	#254	; 0xfe
            let block_right = x + BLOCK_WIDTH as u8 - 1;
    fc14:	f64d 30d0 	movw	r0, #56272	; 0xdbd0
    fc18:	f2c0 0001 	movt	r0, #1
    fc1c:	f64d 42f4 	movw	r2, #56564	; 0xdcf4
    fc20:	f2c0 0201 	movt	r2, #1
    fc24:	211c      	movs	r1, #28
    fc26:	f005 fd55 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc2a:	defe      	udf	#254	; 0xfe
    fc2c:	f64d 40b0 	movw	r0, #56496	; 0xdcb0
    fc30:	f2c0 0001 	movt	r0, #1
    fc34:	f64d 42f4 	movw	r2, #56564	; 0xdcf4
    fc38:	f2c0 0201 	movt	r2, #1
    fc3c:	2121      	movs	r1, #33	; 0x21
    fc3e:	f005 fd49 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc42:	defe      	udf	#254	; 0xfe
            let block_bottom = y + BLOCK_HEIGHT as u8 - 1;
    fc44:	f64d 30d0 	movw	r0, #56272	; 0xdbd0
    fc48:	f2c0 0001 	movt	r0, #1
    fc4c:	f64d 5204 	movw	r2, #56580	; 0xdd04
    fc50:	f2c0 0201 	movt	r2, #1
    fc54:	211c      	movs	r1, #28
    fc56:	f005 fd3d 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc5a:	defe      	udf	#254	; 0xfe
    fc5c:	f64d 40b0 	movw	r0, #56496	; 0xdcb0
    fc60:	f2c0 0001 	movt	r0, #1
    fc64:	f64d 5204 	movw	r2, #56580	; 0xdd04
    fc68:	f2c0 0201 	movt	r2, #1
    fc6c:	2121      	movs	r1, #33	; 0x21
    fc6e:	f005 fd31 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc72:	defe      	udf	#254	; 0xfe
            x += BLOCK_WIDTH as u8;
    fc74:	f64d 30d0 	movw	r0, #56272	; 0xdbd0
    fc78:	f2c0 0001 	movt	r0, #1
    fc7c:	f64d 5214 	movw	r2, #56596	; 0xdd14
    fc80:	f2c0 0201 	movt	r2, #1
    fc84:	211c      	movs	r1, #28
    fc86:	f005 fd25 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc8a:	defe      	udf	#254	; 0xfe
                y += BLOCK_HEIGHT as u8;
    fc8c:	f64d 30d0 	movw	r0, #56272	; 0xdbd0
    fc90:	f2c0 0001 	movt	r0, #1
    fc94:	f64d 5224 	movw	r2, #56612	; 0xdd24
    fc98:	f2c0 0201 	movt	r2, #1
    fc9c:	211c      	movs	r1, #28
    fc9e:	f005 fd19 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fca2:	defe      	udf	#254	; 0xfe

0000fca4 <_ZN3app5chip812render_block17h6c8b81526965606bE>:

/// Render the Virtual Block
fn render_block(left: u8, top: u8, right: u8, bottom: u8) {
    fca4:	b570      	push	{r4, r5, r6, lr}
    fca6:	b092      	sub	sp, #72	; 0x48
    fca8:	469c      	mov	ip, r3
    fcaa:	4696      	mov	lr, r2
    fcac:	460c      	mov	r4, r1
    fcae:	4605      	mov	r5, r0
    fcb0:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
    fcb4:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
    fcb8:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
    fcbc:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    //  console::print("render "); console::printint(left as i32); console::print(", "); console::printint(top as i32); console::print(", "); console::printint(right as i32 - left as i32); console::print(", "); console::printint(bottom as i32 - top as i32); console::print("\n"); console::flush(); ////
    //  Create a new block for the region to be updated
    let mut block = PixelIterator::new(
    fcc0:	466e      	mov	r6, sp
    fcc2:	6033      	str	r3, [r6, #0]
    fcc4:	ab0a      	add	r3, sp, #40	; 0x28
    fcc6:	9009      	str	r0, [sp, #36]	; 0x24
    fcc8:	4618      	mov	r0, r3
    fcca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fccc:	9108      	str	r1, [sp, #32]
    fcce:	4619      	mov	r1, r3
    fcd0:	9e08      	ldr	r6, [sp, #32]
    fcd2:	9207      	str	r2, [sp, #28]
    fcd4:	4632      	mov	r2, r6
    fcd6:	9b07      	ldr	r3, [sp, #28]
    fcd8:	f8cd c018 	str.w	ip, [sp, #24]
    fcdc:	f8cd e014 	str.w	lr, [sp, #20]
    fce0:	9404      	str	r4, [sp, #16]
    fce2:	9503      	str	r5, [sp, #12]
    fce4:	f000 f832 	bl	fd4c <_ZN3app5chip813PixelIterator3new17h975cb5db80e10243E>
    fce8:	e7ff      	b.n	fcea <_ZN3app5chip812render_block17h6c8b81526965606bE+0x46>
    fcea:	a80a      	add	r0, sp, #40	; 0x28
        left, top, 
        right, bottom,
    );
    //  Render the block
    let (left_physical, top_physical, right_physical, bottom_physical) = block.get_window();
    fcec:	f000 f992 	bl	10014 <_ZN3app5chip813PixelIterator10get_window17h111d7a23399766c3E>
    fcf0:	9010      	str	r0, [sp, #64]	; 0x40
    fcf2:	9810      	ldr	r0, [sp, #64]	; 0x40
    fcf4:	900e      	str	r0, [sp, #56]	; 0x38
    fcf6:	e7ff      	b.n	fcf8 <_ZN3app5chip812render_block17h6c8b81526965606bE+0x54>
    fcf8:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    fcfc:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    fd00:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    fd04:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    fd08:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    fd0c:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
    fd10:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
    fd14:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    druid::set_display_pixels(left_physical as u16, top_physical as u16, right_physical as u16, bottom_physical as u16,
    fd18:	46ec      	mov	ip, sp
    fd1a:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
    fd1e:	f8cc e000 	str.w	lr, [ip]
    fd22:	f001 fa8d 	bl	11240 <_ZN22piet_embedded_graphics7display18set_display_pixels17he48c5c43fd96ddebE>
    fd26:	9002      	str	r0, [sp, #8]
    fd28:	e7ff      	b.n	fd2a <_ZN3app5chip812render_block17h6c8b81526965606bE+0x86>
    fd2a:	9802      	ldr	r0, [sp, #8]
    fd2c:	f000 0001 	and.w	r0, r0, #1
    fd30:	f64d 5134 	movw	r1, #56628	; 0xdd34
    fd34:	f2c0 0101 	movt	r1, #1
    fd38:	f64d 5348 	movw	r3, #56648	; 0xdd48
    fd3c:	f2c0 0301 	movt	r3, #1
    fd40:	2211      	movs	r2, #17
    fd42:	f004 fc67 	bl	14614 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
    fd46:	e7ff      	b.n	fd48 <_ZN3app5chip812render_block17h6c8b81526965606bE+0xa4>
        &mut block
    ).expect("set pixels failed");    
}
    fd48:	b012      	add	sp, #72	; 0x48
    fd4a:	bd70      	pop	{r4, r5, r6, pc}

0000fd4c <_ZN3app5chip813PixelIterator3new17h975cb5db80e10243E>:
    physical_bottom:    u8,
}

impl PixelIterator {
    /// Return a new PixelInterator for the block dimensions
    pub fn new(
    fd4c:	b570      	push	{r4, r5, r6, lr}
    fd4e:	b08a      	sub	sp, #40	; 0x28
    fd50:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    fd54:	469e      	mov	lr, r3
    fd56:	4614      	mov	r4, r2
    fd58:	460d      	mov	r5, r1
    fd5a:	f88d 101c 	strb.w	r1, [sp, #28]
    fd5e:	f88d 201d 	strb.w	r2, [sp, #29]
    fd62:	f88d 301e 	strb.w	r3, [sp, #30]
    fd66:	f88d c01f 	strb.w	ip, [sp, #31]
        block_right:     u8,
        //  End row number for block
        block_bottom:    u8,        
    ) -> PixelIterator {
        let (physical_left, physical_top, physical_right, physical_bottom) = 
            Self::get_bounding_box(block_left, block_top, block_right, block_bottom);
    fd6a:	9005      	str	r0, [sp, #20]
    fd6c:	4608      	mov	r0, r1
    fd6e:	4611      	mov	r1, r2
    fd70:	461a      	mov	r2, r3
    fd72:	4663      	mov	r3, ip
    fd74:	f8cd c010 	str.w	ip, [sp, #16]
    fd78:	f8cd e00c 	str.w	lr, [sp, #12]
    fd7c:	9402      	str	r4, [sp, #8]
    fd7e:	9501      	str	r5, [sp, #4]
    fd80:	f000 f83a 	bl	fdf8 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE>
    fd84:	9008      	str	r0, [sp, #32]
    fd86:	9808      	ldr	r0, [sp, #32]
    fd88:	9006      	str	r0, [sp, #24]
    fd8a:	e7ff      	b.n	fd8c <_ZN3app5chip813PixelIterator3new17h975cb5db80e10243E+0x40>
        let (physical_left, physical_top, physical_right, physical_bottom) = 
    fd8c:	f89d 0018 	ldrb.w	r0, [sp, #24]
    fd90:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    fd94:	f89d 1019 	ldrb.w	r1, [sp, #25]
    fd98:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
    fd9c:	f89d 201a 	ldrb.w	r2, [sp, #26]
    fda0:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
    fda4:	f89d 301b 	ldrb.w	r3, [sp, #27]
    fda8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        PixelIterator {
    fdac:	f8dd c004 	ldr.w	ip, [sp, #4]
    fdb0:	f8dd e014 	ldr.w	lr, [sp, #20]
    fdb4:	f88e c000 	strb.w	ip, [lr]
    fdb8:	9c02      	ldr	r4, [sp, #8]
    fdba:	f88e 4001 	strb.w	r4, [lr, #1]
    fdbe:	2500      	movs	r5, #0
    fdc0:	f88e 5002 	strb.w	r5, [lr, #2]
    fdc4:	f88e 5003 	strb.w	r5, [lr, #3]
    fdc8:	f88e 0004 	strb.w	r0, [lr, #4]
    fdcc:	f88e 1005 	strb.w	r1, [lr, #5]
    fdd0:	f88e c006 	strb.w	ip, [lr, #6]
    fdd4:	9d03      	ldr	r5, [sp, #12]
    fdd6:	f88e 5007 	strb.w	r5, [lr, #7]
    fdda:	f88e 4008 	strb.w	r4, [lr, #8]
    fdde:	9e04      	ldr	r6, [sp, #16]
    fde0:	f88e 6009 	strb.w	r6, [lr, #9]
    fde4:	f88e 000a 	strb.w	r0, [lr, #10]
    fde8:	f88e 200b 	strb.w	r2, [lr, #11]
    fdec:	f88e 100c 	strb.w	r1, [lr, #12]
    fdf0:	f88e 300d 	strb.w	r3, [lr, #13]
            x_physical: physical_left,
            y_physical: physical_top,
            block_left, block_right, block_top, block_bottom,
            physical_left, physical_top, physical_right, physical_bottom
        }
    }
    fdf4:	b00a      	add	sp, #40	; 0x28
    fdf6:	bd70      	pop	{r4, r5, r6, pc}

0000fdf8 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE>:
        ( left, top, right, bottom )
    }

    /// Return Bounding Box of Physical Pixels (left, top, right, bottom) that correspond to the Virtual Pixels
    #[cfg(feature = "chip8_curve")]  //  If we are rendering CHIP8 Emulator as curved surface...
    fn get_bounding_box(virtual_left: u8, virtual_top: u8, virtual_right: u8, virtual_bottom: u8) -> (u8, u8, u8, u8) {
    fdf8:	b5b0      	push	{r4, r5, r7, lr}
    fdfa:	b098      	sub	sp, #96	; 0x60
    fdfc:	469c      	mov	ip, r3
    fdfe:	4696      	mov	lr, r2
    fe00:	460c      	mov	r4, r1
    fe02:	4605      	mov	r5, r0
    fe04:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
    fe08:	f88d 1055 	strb.w	r1, [sp, #85]	; 0x55
    fe0c:	f88d 2056 	strb.w	r2, [sp, #86]	; 0x56
    fe10:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
    fe14:	211f      	movs	r1, #31
        //  One Virtual Pixel may map to multiple Physical Pixels, so we lookup the Physical Bounding Box.
        //  TODO: Handle wide and tall Bounding Boxes
        let left_index = virtual_left.min(VIRTUAL_TO_PHYSICAL_MAP_WIDTH as u8 - 1);
    fe16:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    fe1a:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
    fe1e:	940e      	str	r4, [sp, #56]	; 0x38
    fe20:	950d      	str	r5, [sp, #52]	; 0x34
    fe22:	f004 febc 	bl	14b9e <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
    fe26:	4601      	mov	r1, r0
    fe28:	f88d 0058 	strb.w	r0, [sp, #88]	; 0x58
    fe2c:	910c      	str	r1, [sp, #48]	; 0x30
    fe2e:	e7ff      	b.n	fe30 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x38>
    fe30:	210f      	movs	r1, #15
        let top_index = virtual_top.min(VIRTUAL_TO_PHYSICAL_MAP_HEIGHT as u8 - 1);
    fe32:	980e      	ldr	r0, [sp, #56]	; 0x38
    fe34:	f004 feb3 	bl	14b9e <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
    fe38:	4601      	mov	r1, r0
    fe3a:	f88d 0059 	strb.w	r0, [sp, #89]	; 0x59
    fe3e:	910b      	str	r1, [sp, #44]	; 0x2c
    fe40:	e7ff      	b.n	fe42 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x4a>
    fe42:	211f      	movs	r1, #31
        let right_index = virtual_right.min(VIRTUAL_TO_PHYSICAL_MAP_WIDTH as u8 - 1);
    fe44:	980f      	ldr	r0, [sp, #60]	; 0x3c
    fe46:	f004 feaa 	bl	14b9e <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
    fe4a:	4601      	mov	r1, r0
    fe4c:	f88d 005a 	strb.w	r0, [sp, #90]	; 0x5a
    fe50:	910a      	str	r1, [sp, #40]	; 0x28
    fe52:	e7ff      	b.n	fe54 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x5c>
    fe54:	210f      	movs	r1, #15
        let bottom_index = virtual_bottom.min(VIRTUAL_TO_PHYSICAL_MAP_HEIGHT as u8 - 1);
    fe56:	9810      	ldr	r0, [sp, #64]	; 0x40
    fe58:	f004 fea1 	bl	14b9e <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
    fe5c:	4601      	mov	r1, r0
    fe5e:	f88d 005b 	strb.w	r0, [sp, #91]	; 0x5b
    fe62:	9109      	str	r1, [sp, #36]	; 0x24
    fe64:	e7ff      	b.n	fe66 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x6e>
        
        let physical_left_top = VIRTUAL_TO_PHYSICAL_MAP[top_index as usize][left_index as usize];  //  Returns (left,top,right,bottom)
    fe66:	980b      	ldr	r0, [sp, #44]	; 0x2c
    fe68:	b2c1      	uxtb	r1, r0
    fe6a:	460a      	mov	r2, r1
    fe6c:	290f      	cmp	r1, #15
    fe6e:	9208      	str	r2, [sp, #32]
    fe70:	f200 80ac 	bhi.w	ffcc <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x1d4>
    fe74:	e7ff      	b.n	fe76 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x7e>
    fe76:	980c      	ldr	r0, [sp, #48]	; 0x30
    fe78:	b2c1      	uxtb	r1, r0
    fe7a:	460a      	mov	r2, r1
    fe7c:	291f      	cmp	r1, #31
    fe7e:	9207      	str	r2, [sp, #28]
    fe80:	f200 80ad 	bhi.w	ffde <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x1e6>
    fe84:	e7ff      	b.n	fe86 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x8e>
    fe86:	f244 4044 	movw	r0, #17476	; 0x4444
    fe8a:	f2c0 0002 	movt	r0, #2
    fe8e:	6800      	ldr	r0, [r0, #0]
    fe90:	9908      	ldr	r1, [sp, #32]
    fe92:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
    fe96:	9a07      	ldr	r2, [sp, #28]
    fe98:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    fe9c:	9012      	str	r0, [sp, #72]	; 0x48
        let physical_right_bottom = VIRTUAL_TO_PHYSICAL_MAP[bottom_index as usize][right_index as usize];
    fe9e:	9809      	ldr	r0, [sp, #36]	; 0x24
    fea0:	b2c3      	uxtb	r3, r0
    fea2:	469c      	mov	ip, r3
    fea4:	2b0f      	cmp	r3, #15
    fea6:	f8cd c018 	str.w	ip, [sp, #24]
    feaa:	f200 80a1 	bhi.w	fff0 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x1f8>
    feae:	e7ff      	b.n	feb0 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xb8>
    feb0:	980a      	ldr	r0, [sp, #40]	; 0x28
    feb2:	b2c1      	uxtb	r1, r0
    feb4:	460a      	mov	r2, r1
    feb6:	291f      	cmp	r1, #31
    feb8:	9205      	str	r2, [sp, #20]
    feba:	f200 80a2 	bhi.w	10002 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x20a>
    febe:	e7ff      	b.n	fec0 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xc8>
    fec0:	f244 4044 	movw	r0, #17476	; 0x4444
    fec4:	f2c0 0002 	movt	r0, #2
    fec8:	6800      	ldr	r0, [r0, #0]
    feca:	9906      	ldr	r1, [sp, #24]
    fecc:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
    fed0:	9a05      	ldr	r2, [sp, #20]
    fed2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    fed6:	9013      	str	r0, [sp, #76]	; 0x4c

        let left: u8 = physical_left_top.0;
    fed8:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    fedc:	4603      	mov	r3, r0
    fede:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
        let top: u8 = physical_left_top.1;
    fee2:	f89d 0049 	ldrb.w	r0, [sp, #73]	; 0x49
    fee6:	4684      	mov	ip, r0
    fee8:	f88d 005d 	strb.w	r0, [sp, #93]	; 0x5d
        let right: u8 = physical_right_bottom.2.min(PHYSICAL_WIDTH as u8 - 1);
    feec:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
    fef0:	21ef      	movs	r1, #239	; 0xef
    fef2:	9304      	str	r3, [sp, #16]
    fef4:	f8cd c00c 	str.w	ip, [sp, #12]
    fef8:	f004 fe51 	bl	14b9e <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
    fefc:	4601      	mov	r1, r0
    fefe:	f88d 005e 	strb.w	r0, [sp, #94]	; 0x5e
    ff02:	9102      	str	r1, [sp, #8]
    ff04:	e7ff      	b.n	ff06 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x10e>
        let bottom: u8 = physical_right_bottom.3.min(PHYSICAL_HEIGHT as u8 - 1);
    ff06:	f89d 004f 	ldrb.w	r0, [sp, #79]	; 0x4f
    ff0a:	21c7      	movs	r1, #199	; 0xc7
    ff0c:	f004 fe47 	bl	14b9e <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
    ff10:	4601      	mov	r1, r0
    ff12:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
    ff16:	9101      	str	r1, [sp, #4]
    ff18:	e7ff      	b.n	ff1a <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x122>
        assert!(left < PHYSICAL_WIDTH as u8 && top < PHYSICAL_HEIGHT as u8 && right < PHYSICAL_WIDTH as u8 && bottom < PHYSICAL_HEIGHT as u8, "overflow");
    ff1a:	9804      	ldr	r0, [sp, #16]
    ff1c:	b2c1      	uxtb	r1, r0
    ff1e:	29f0      	cmp	r1, #240	; 0xf0
    ff20:	d32e      	bcc.n	ff80 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x188>
    ff22:	e029      	b.n	ff78 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x180>
    ff24:	2001      	movs	r0, #1
    ff26:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
    ff2a:	e008      	b.n	ff3e <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x146>
    ff2c:	2000      	movs	r0, #0
    ff2e:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
    ff32:	e004      	b.n	ff3e <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x146>
    ff34:	9801      	ldr	r0, [sp, #4]
    ff36:	b2c1      	uxtb	r1, r0
    ff38:	29c8      	cmp	r1, #200	; 0xc8
    ff3a:	d3f3      	bcc.n	ff24 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x12c>
    ff3c:	e7f6      	b.n	ff2c <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x134>
    ff3e:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
    ff42:	07c0      	lsls	r0, r0, #31
    ff44:	2800      	cmp	r0, #0
    ff46:	d035      	beq.n	ffb4 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x1bc>
    ff48:	e025      	b.n	ff96 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x19e>
    ff4a:	2001      	movs	r0, #1
    ff4c:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    ff50:	e008      	b.n	ff64 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x16c>
    ff52:	2000      	movs	r0, #0
    ff54:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    ff58:	e004      	b.n	ff64 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x16c>
    ff5a:	9802      	ldr	r0, [sp, #8]
    ff5c:	b2c1      	uxtb	r1, r0
    ff5e:	29f0      	cmp	r1, #240	; 0xf0
    ff60:	d3f3      	bcc.n	ff4a <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x152>
    ff62:	e7f6      	b.n	ff52 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x15a>
    ff64:	f89d 0052 	ldrb.w	r0, [sp, #82]	; 0x52
    ff68:	07c0      	lsls	r0, r0, #31
    ff6a:	2800      	cmp	r0, #0
    ff6c:	d1e2      	bne.n	ff34 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x13c>
    ff6e:	e7dd      	b.n	ff2c <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x134>
    ff70:	2001      	movs	r0, #1
    ff72:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    ff76:	e008      	b.n	ff8a <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x192>
    ff78:	2000      	movs	r0, #0
    ff7a:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    ff7e:	e004      	b.n	ff8a <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x192>
    ff80:	9803      	ldr	r0, [sp, #12]
    ff82:	b2c1      	uxtb	r1, r0
    ff84:	29c8      	cmp	r1, #200	; 0xc8
    ff86:	d3f3      	bcc.n	ff70 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x178>
    ff88:	e7f6      	b.n	ff78 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x180>
    ff8a:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    ff8e:	07c0      	lsls	r0, r0, #31
    ff90:	2800      	cmp	r0, #0
    ff92:	d1e2      	bne.n	ff5a <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x162>
    ff94:	e7dd      	b.n	ff52 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x15a>
        ( left, top, right, bottom )
    ff96:	9804      	ldr	r0, [sp, #16]
    ff98:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    ff9c:	9903      	ldr	r1, [sp, #12]
    ff9e:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
    ffa2:	9a02      	ldr	r2, [sp, #8]
    ffa4:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
    ffa8:	9b01      	ldr	r3, [sp, #4]
    ffaa:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    }
    ffae:	9811      	ldr	r0, [sp, #68]	; 0x44
    ffb0:	b018      	add	sp, #96	; 0x60
    ffb2:	bdb0      	pop	{r4, r5, r7, pc}
        assert!(left < PHYSICAL_WIDTH as u8 && top < PHYSICAL_HEIGHT as u8 && right < PHYSICAL_WIDTH as u8 && bottom < PHYSICAL_HEIGHT as u8, "overflow");
    ffb4:	f64d 405c 	movw	r0, #56412	; 0xdc5c
    ffb8:	f2c0 0001 	movt	r0, #1
    ffbc:	f64d 5278 	movw	r2, #56696	; 0xdd78
    ffc0:	f2c0 0201 	movt	r2, #1
    ffc4:	2108      	movs	r1, #8
    ffc6:	f005 fb85 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ffca:	defe      	udf	#254	; 0xfe
        let physical_left_top = VIRTUAL_TO_PHYSICAL_MAP[top_index as usize][left_index as usize];  //  Returns (left,top,right,bottom)
    ffcc:	f64d 5058 	movw	r0, #56664	; 0xdd58
    ffd0:	f2c0 0001 	movt	r0, #1
    ffd4:	2210      	movs	r2, #16
    ffd6:	9908      	ldr	r1, [sp, #32]
    ffd8:	f005 fb92 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ffdc:	defe      	udf	#254	; 0xfe
    ffde:	f64d 5058 	movw	r0, #56664	; 0xdd58
    ffe2:	f2c0 0001 	movt	r0, #1
    ffe6:	2220      	movs	r2, #32
    ffe8:	9907      	ldr	r1, [sp, #28]
    ffea:	f005 fb89 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ffee:	defe      	udf	#254	; 0xfe
        let physical_right_bottom = VIRTUAL_TO_PHYSICAL_MAP[bottom_index as usize][right_index as usize];
    fff0:	f64d 5068 	movw	r0, #56680	; 0xdd68
    fff4:	f2c0 0001 	movt	r0, #1
    fff8:	2210      	movs	r2, #16
    fffa:	9906      	ldr	r1, [sp, #24]
    fffc:	f005 fb80 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10000:	defe      	udf	#254	; 0xfe
   10002:	f64d 5068 	movw	r0, #56680	; 0xdd68
   10006:	f2c0 0001 	movt	r0, #1
   1000a:	2220      	movs	r2, #32
   1000c:	9905      	ldr	r1, [sp, #20]
   1000e:	f005 fb77 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10012:	defe      	udf	#254	; 0xfe

00010014 <_ZN3app5chip813PixelIterator10get_window17h111d7a23399766c3E>:

    /// Return window of Physical Pixels (left, top, right, bottom) for this Virtual Block
    pub fn get_window(&self) -> (u8, u8, u8, u8) {
   10014:	b082      	sub	sp, #8
   10016:	9001      	str	r0, [sp, #4]
        ( self.physical_left, self.physical_top, self.physical_right, self.physical_bottom )
   10018:	7a81      	ldrb	r1, [r0, #10]
   1001a:	7ac2      	ldrb	r2, [r0, #11]
   1001c:	7b03      	ldrb	r3, [r0, #12]
   1001e:	7b40      	ldrb	r0, [r0, #13]
   10020:	f88d 1000 	strb.w	r1, [sp]
   10024:	f88d 3001 	strb.w	r3, [sp, #1]
   10028:	f88d 2002 	strb.w	r2, [sp, #2]
   1002c:	f88d 0003 	strb.w	r0, [sp, #3]
    }
   10030:	9800      	ldr	r0, [sp, #0]
   10032:	b002      	add	sp, #8
   10034:	4770      	bx	lr

00010036 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE>:

    /// Return the 16-bit colour of the Virtual Pixel
    fn get_color(&mut self) -> u16 {
   10036:	b580      	push	{r7, lr}
   10038:	b08a      	sub	sp, #40	; 0x28
   1003a:	9007      	str	r0, [sp, #28]
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
   1003c:	7801      	ldrb	r1, [r0, #0]
   1003e:	7842      	ldrb	r2, [r0, #1]
   10040:	0192      	lsls	r2, r2, #6
   10042:	2300      	movs	r3, #0
   10044:	2b00      	cmp	r3, #0
   10046:	9005      	str	r0, [sp, #20]
   10048:	9104      	str	r1, [sp, #16]
   1004a:	9203      	str	r2, [sp, #12]
   1004c:	d155      	bne.n	100fa <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xc4>
   1004e:	e7ff      	b.n	10050 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x1a>
   10050:	9804      	ldr	r0, [sp, #16]
   10052:	9903      	ldr	r1, [sp, #12]
   10054:	1842      	adds	r2, r0, r1
   10056:	4613      	mov	r3, r2
   10058:	4282      	cmp	r2, r0
   1005a:	9302      	str	r3, [sp, #8]
   1005c:	d359      	bcc.n	10112 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xdc>
   1005e:	e7ff      	b.n	10060 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x2a>
   10060:	9802      	ldr	r0, [sp, #8]
   10062:	9008      	str	r0, [sp, #32]
   10064:	2100      	movs	r1, #0
        let color = unsafe { convert_color(SCREEN_BUFFER[i]) };
   10066:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
   1006a:	d15e      	bne.n	1012a <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xf4>
   1006c:	e7ff      	b.n	1006e <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x38>
   1006e:	f244 10b4 	movw	r0, #16820	; 0x41b4
   10072:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10076:	9902      	ldr	r1, [sp, #8]
   10078:	5c40      	ldrb	r0, [r0, r1]
   1007a:	f000 f97c 	bl	10376 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E>
   1007e:	4601      	mov	r1, r0
   10080:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   10084:	9101      	str	r1, [sp, #4]
   10086:	e7ff      	b.n	10088 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x52>
        if self.x_offset == 0 && self.y_offset == 0 {  //  Update colours only once per Virtual Pixel
   10088:	9805      	ldr	r0, [sp, #20]
   1008a:	7881      	ldrb	r1, [r0, #2]
   1008c:	2900      	cmp	r1, #0
   1008e:	d008      	beq.n	100a2 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x6c>
   10090:	e003      	b.n	1009a <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x64>
   10092:	2001      	movs	r0, #1
   10094:	f88d 001b 	strb.w	r0, [sp, #27]
   10098:	e008      	b.n	100ac <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x76>
   1009a:	2000      	movs	r0, #0
   1009c:	f88d 001b 	strb.w	r0, [sp, #27]
   100a0:	e004      	b.n	100ac <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x76>
   100a2:	9805      	ldr	r0, [sp, #20]
   100a4:	78c1      	ldrb	r1, [r0, #3]
   100a6:	2900      	cmp	r1, #0
   100a8:	d0f3      	beq.n	10092 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x5c>
   100aa:	e7f6      	b.n	1009a <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x64>
   100ac:	f89d 001b 	ldrb.w	r0, [sp, #27]
   100b0:	07c0      	lsls	r0, r0, #31
   100b2:	2800      	cmp	r0, #0
   100b4:	d01e      	beq.n	100f4 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xbe>
   100b6:	e7ff      	b.n	100b8 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x82>
   100b8:	2000      	movs	r0, #0
            unsafe { SCREEN_BUFFER[i] = update_color(SCREEN_BUFFER[i]); }  //  Fade to black
   100ba:	9902      	ldr	r1, [sp, #8]
   100bc:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
   100c0:	d13d      	bne.n	1013e <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x108>
   100c2:	e7ff      	b.n	100c4 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x8e>
   100c4:	f244 10b4 	movw	r0, #16820	; 0x41b4
   100c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   100cc:	9902      	ldr	r1, [sp, #8]
   100ce:	5c40      	ldrb	r0, [r0, r1]
   100d0:	f000 f9de 	bl	10490 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E>
   100d4:	9000      	str	r0, [sp, #0]
   100d6:	e7ff      	b.n	100d8 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xa2>
   100d8:	2000      	movs	r0, #0
   100da:	9902      	ldr	r1, [sp, #8]
   100dc:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
   100e0:	d137      	bne.n	10152 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x11c>
   100e2:	e7ff      	b.n	100e4 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xae>
   100e4:	f244 10b4 	movw	r0, #16820	; 0x41b4
   100e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   100ec:	9900      	ldr	r1, [sp, #0]
   100ee:	9a02      	ldr	r2, [sp, #8]
   100f0:	5481      	strb	r1, [r0, r2]
        if self.x_offset == 0 && self.y_offset == 0 {  //  Update colours only once per Virtual Pixel
   100f2:	e7ff      	b.n	100f4 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xbe>
        }
        color
    }    
   100f4:	9801      	ldr	r0, [sp, #4]
   100f6:	b00a      	add	sp, #40	; 0x28
   100f8:	bd80      	pop	{r7, pc}
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
   100fa:	f64d 3090 	movw	r0, #56208	; 0xdb90
   100fe:	f2c0 0001 	movt	r0, #1
   10102:	f64d 5288 	movw	r2, #56712	; 0xdd88
   10106:	f2c0 0201 	movt	r2, #1
   1010a:	2121      	movs	r1, #33	; 0x21
   1010c:	f005 fae2 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10110:	defe      	udf	#254	; 0xfe
   10112:	f64d 30d0 	movw	r0, #56272	; 0xdbd0
   10116:	f2c0 0001 	movt	r0, #1
   1011a:	f64d 5298 	movw	r2, #56728	; 0xdd98
   1011e:	f2c0 0201 	movt	r2, #1
   10122:	211c      	movs	r1, #28
   10124:	f005 fad6 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10128:	defe      	udf	#254	; 0xfe
        let color = unsafe { convert_color(SCREEN_BUFFER[i]) };
   1012a:	f64d 50a8 	movw	r0, #56744	; 0xdda8
   1012e:	f2c0 0001 	movt	r0, #1
   10132:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10136:	9902      	ldr	r1, [sp, #8]
   10138:	f005 fae2 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1013c:	defe      	udf	#254	; 0xfe
            unsafe { SCREEN_BUFFER[i] = update_color(SCREEN_BUFFER[i]); }  //  Fade to black
   1013e:	f64d 50b8 	movw	r0, #56760	; 0xddb8
   10142:	f2c0 0001 	movt	r0, #1
   10146:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1014a:	9902      	ldr	r1, [sp, #8]
   1014c:	f005 fad8 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10150:	defe      	udf	#254	; 0xfe
   10152:	f64d 50c8 	movw	r0, #56776	; 0xddc8
   10156:	f2c0 0001 	movt	r0, #1
   1015a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1015e:	9902      	ldr	r1, [sp, #8]
   10160:	f005 face 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10164:	defe      	udf	#254	; 0xfe

00010166 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE>:
        return Some(color);
    }

    /// Return the next Physical Pixel colour
    #[cfg(feature = "chip8_curve")]  //  If we are rendering CHIP8 Emulator as curved surface...
    fn next(&mut self) -> Option<Self::Item> {
   10166:	b510      	push	{r4, lr}
   10168:	b090      	sub	sp, #64	; 0x40
   1016a:	900d      	str	r0, [sp, #52]	; 0x34
        if self.y_physical > self.physical_bottom { return None; }  //  No more Physical Pixels
   1016c:	7941      	ldrb	r1, [r0, #5]
   1016e:	7b42      	ldrb	r2, [r0, #13]
   10170:	4291      	cmp	r1, r2
   10172:	900a      	str	r0, [sp, #40]	; 0x28
   10174:	d805      	bhi.n	10182 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x1c>
   10176:	e7ff      	b.n	10178 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x12>
        assert!(self.x_physical < SCREEN_WIDTH as u8, "x overflow");
   10178:	980a      	ldr	r0, [sp, #40]	; 0x28
   1017a:	7901      	ldrb	r1, [r0, #4]
   1017c:	293f      	cmp	r1, #63	; 0x3f
   1017e:	d80f      	bhi.n	101a0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x3a>
   10180:	e009      	b.n	10196 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x30>
   10182:	2000      	movs	r0, #0
        if self.y_physical > self.physical_bottom { return None; }  //  No more Physical Pixels
   10184:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
   10188:	e7ff      	b.n	1018a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x24>
            self.y_physical += 1;
        }
        
        //  Return the Physical Pixel color
        return Some(color);
    }    
   1018a:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
   1018e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
   10192:	b010      	add	sp, #64	; 0x40
   10194:	bd10      	pop	{r4, pc}
        assert!(self.y_physical < SCREEN_HEIGHT as u8, "y overflow");
   10196:	980a      	ldr	r0, [sp, #40]	; 0x28
   10198:	7941      	ldrb	r1, [r0, #5]
   1019a:	291f      	cmp	r1, #31
   1019c:	d816      	bhi.n	101cc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x66>
   1019e:	e00b      	b.n	101b8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x52>
        assert!(self.x_physical < SCREEN_WIDTH as u8, "x overflow");
   101a0:	f64d 303c 	movw	r0, #56124	; 0xdb3c
   101a4:	f2c0 0001 	movt	r0, #1
   101a8:	f64d 52d8 	movw	r2, #56792	; 0xddd8
   101ac:	f2c0 0201 	movt	r2, #1
   101b0:	210a      	movs	r1, #10
   101b2:	f005 fa8f 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   101b6:	defe      	udf	#254	; 0xfe
        let x_map = self.x_physical.min(PHYSICAL_TO_VIRTUAL_MAP_WIDTH as u8 - 1);
   101b8:	980a      	ldr	r0, [sp, #40]	; 0x28
   101ba:	7900      	ldrb	r0, [r0, #4]
   101bc:	2177      	movs	r1, #119	; 0x77
   101be:	f004 fcee 	bl	14b9e <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   101c2:	4601      	mov	r1, r0
   101c4:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   101c8:	9109      	str	r1, [sp, #36]	; 0x24
   101ca:	e00b      	b.n	101e4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x7e>
        assert!(self.y_physical < SCREEN_HEIGHT as u8, "y overflow");
   101cc:	f64d 3058 	movw	r0, #56152	; 0xdb58
   101d0:	f2c0 0001 	movt	r0, #1
   101d4:	f64d 52e8 	movw	r2, #56808	; 0xdde8
   101d8:	f2c0 0201 	movt	r2, #1
   101dc:	210a      	movs	r1, #10
   101de:	f005 fa79 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   101e2:	defe      	udf	#254	; 0xfe
        let y_map = self.y_physical.min(PHYSICAL_TO_VIRTUAL_MAP_HEIGHT as u8 - 1);
   101e4:	980a      	ldr	r0, [sp, #40]	; 0x28
   101e6:	7940      	ldrb	r0, [r0, #5]
   101e8:	2163      	movs	r1, #99	; 0x63
   101ea:	f004 fcd8 	bl	14b9e <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   101ee:	4601      	mov	r1, r0
   101f0:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   101f4:	9108      	str	r1, [sp, #32]
   101f6:	e7ff      	b.n	101f8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x92>
        let virtual_pixel = PHYSICAL_TO_VIRTUAL_MAP[y_map as usize][x_map as usize];
   101f8:	9808      	ldr	r0, [sp, #32]
   101fa:	b2c1      	uxtb	r1, r0
   101fc:	460a      	mov	r2, r1
   101fe:	2963      	cmp	r1, #99	; 0x63
   10200:	9207      	str	r2, [sp, #28]
   10202:	f200 8082 	bhi.w	1030a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x1a4>
   10206:	e7ff      	b.n	10208 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xa2>
   10208:	9809      	ldr	r0, [sp, #36]	; 0x24
   1020a:	b2c1      	uxtb	r1, r0
   1020c:	460a      	mov	r2, r1
   1020e:	2977      	cmp	r1, #119	; 0x77
   10210:	9206      	str	r2, [sp, #24]
   10212:	f200 8083 	bhi.w	1031c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x1b6>
   10216:	e7ff      	b.n	10218 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xb2>
   10218:	f643 4040 	movw	r0, #15424	; 0x3c40
   1021c:	f2c0 0002 	movt	r0, #2
   10220:	6800      	ldr	r0, [r0, #0]
   10222:	9907      	ldr	r1, [sp, #28]
   10224:	ebc1 1201 	rsb	r2, r1, r1, lsl #4
   10228:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   1022c:	9a06      	ldr	r2, [sp, #24]
   1022e:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   10232:	f810 0012 	ldrb.w	r0, [r0, r2, lsl #1]
   10236:	4684      	mov	ip, r0
   10238:	785b      	ldrb	r3, [r3, #1]
   1023a:	469e      	mov	lr, r3
   1023c:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
   10240:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
        if self.x == virtual_pixel.0 && self.y == virtual_pixel.1 {
   10244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10246:	781c      	ldrb	r4, [r3, #0]
   10248:	4284      	cmp	r4, r0
   1024a:	f8cd c014 	str.w	ip, [sp, #20]
   1024e:	f8cd e010 	str.w	lr, [sp, #16]
   10252:	d008      	beq.n	10266 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x100>
   10254:	e003      	b.n	1025e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xf8>
   10256:	2001      	movs	r0, #1
   10258:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   1025c:	e00a      	b.n	10274 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x10e>
   1025e:	2000      	movs	r0, #0
   10260:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   10264:	e006      	b.n	10274 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x10e>
   10266:	980a      	ldr	r0, [sp, #40]	; 0x28
   10268:	7841      	ldrb	r1, [r0, #1]
   1026a:	9a04      	ldr	r2, [sp, #16]
   1026c:	b2d3      	uxtb	r3, r2
   1026e:	4299      	cmp	r1, r3
   10270:	d0f1      	beq.n	10256 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xf0>
   10272:	e7f4      	b.n	1025e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xf8>
   10274:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   10278:	07c0      	lsls	r0, r0, #31
   1027a:	2800      	cmp	r0, #0
   1027c:	d109      	bne.n	10292 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x12c>
   1027e:	e7ff      	b.n	10280 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x11a>
            self.x = virtual_pixel.0;
   10280:	9805      	ldr	r0, [sp, #20]
   10282:	990a      	ldr	r1, [sp, #40]	; 0x28
   10284:	7008      	strb	r0, [r1, #0]
            self.y = virtual_pixel.1;
   10286:	9a04      	ldr	r2, [sp, #16]
   10288:	704a      	strb	r2, [r1, #1]
   1028a:	2300      	movs	r3, #0
            self.x_offset = 0;
   1028c:	708b      	strb	r3, [r1, #2]
            self.y_offset = 0;
   1028e:	70cb      	strb	r3, [r1, #3]
        if self.x == virtual_pixel.0 && self.y == virtual_pixel.1 {
   10290:	e00c      	b.n	102ac <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x146>
            self.x_offset += 1;
   10292:	980a      	ldr	r0, [sp, #40]	; 0x28
   10294:	7881      	ldrb	r1, [r0, #2]
   10296:	3101      	adds	r1, #1
   10298:	b2ca      	uxtb	r2, r1
   1029a:	460b      	mov	r3, r1
   1029c:	428a      	cmp	r2, r1
   1029e:	9303      	str	r3, [sp, #12]
   102a0:	d145      	bne.n	1032e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x1c8>
   102a2:	e7ff      	b.n	102a4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x13e>
   102a4:	9803      	ldr	r0, [sp, #12]
   102a6:	990a      	ldr	r1, [sp, #40]	; 0x28
   102a8:	7088      	strb	r0, [r1, #2]
        if self.x == virtual_pixel.0 && self.y == virtual_pixel.1 {
   102aa:	e7ff      	b.n	102ac <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x146>
        let color = self.get_color();
   102ac:	980a      	ldr	r0, [sp, #40]	; 0x28
   102ae:	f7ff fec2 	bl	10036 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE>
   102b2:	4601      	mov	r1, r0
   102b4:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
   102b8:	9102      	str	r1, [sp, #8]
   102ba:	e7ff      	b.n	102bc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x156>
        self.x_physical += 1;
   102bc:	980a      	ldr	r0, [sp, #40]	; 0x28
   102be:	7901      	ldrb	r1, [r0, #4]
   102c0:	3101      	adds	r1, #1
   102c2:	b2ca      	uxtb	r2, r1
   102c4:	460b      	mov	r3, r1
   102c6:	428a      	cmp	r2, r1
   102c8:	9301      	str	r3, [sp, #4]
   102ca:	d13c      	bne.n	10346 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x1e0>
   102cc:	e7ff      	b.n	102ce <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x168>
   102ce:	9801      	ldr	r0, [sp, #4]
   102d0:	990a      	ldr	r1, [sp, #40]	; 0x28
   102d2:	7108      	strb	r0, [r1, #4]
        if self.x_physical > self.physical_right {
   102d4:	790a      	ldrb	r2, [r1, #4]
   102d6:	7acb      	ldrb	r3, [r1, #11]
   102d8:	429a      	cmp	r2, r3
   102da:	d90f      	bls.n	102fc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x196>
   102dc:	e7ff      	b.n	102de <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x178>
            self.x_physical = self.physical_left;
   102de:	980a      	ldr	r0, [sp, #40]	; 0x28
   102e0:	7a81      	ldrb	r1, [r0, #10]
   102e2:	7101      	strb	r1, [r0, #4]
            self.y_physical += 1;
   102e4:	7941      	ldrb	r1, [r0, #5]
   102e6:	3101      	adds	r1, #1
   102e8:	b2ca      	uxtb	r2, r1
   102ea:	460b      	mov	r3, r1
   102ec:	428a      	cmp	r2, r1
   102ee:	9300      	str	r3, [sp, #0]
   102f0:	d135      	bne.n	1035e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x1f8>
   102f2:	e7ff      	b.n	102f4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x18e>
   102f4:	9800      	ldr	r0, [sp, #0]
   102f6:	990a      	ldr	r1, [sp, #40]	; 0x28
   102f8:	7148      	strb	r0, [r1, #5]
        if self.x_physical > self.physical_right {
   102fa:	e7ff      	b.n	102fc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x196>
        return Some(color);
   102fc:	9802      	ldr	r0, [sp, #8]
   102fe:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
   10302:	2101      	movs	r1, #1
   10304:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
   10308:	e73f      	b.n	1018a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x24>
        let virtual_pixel = PHYSICAL_TO_VIRTUAL_MAP[y_map as usize][x_map as usize];
   1030a:	f64d 50f8 	movw	r0, #56824	; 0xddf8
   1030e:	f2c0 0001 	movt	r0, #1
   10312:	2264      	movs	r2, #100	; 0x64
   10314:	9907      	ldr	r1, [sp, #28]
   10316:	f005 f9f3 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1031a:	defe      	udf	#254	; 0xfe
   1031c:	f64d 50f8 	movw	r0, #56824	; 0xddf8
   10320:	f2c0 0001 	movt	r0, #1
   10324:	2278      	movs	r2, #120	; 0x78
   10326:	9906      	ldr	r1, [sp, #24]
   10328:	f005 f9ea 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1032c:	defe      	udf	#254	; 0xfe
            self.x_offset += 1;
   1032e:	f64d 30d0 	movw	r0, #56272	; 0xdbd0
   10332:	f2c0 0001 	movt	r0, #1
   10336:	f64d 6208 	movw	r2, #56840	; 0xde08
   1033a:	f2c0 0201 	movt	r2, #1
   1033e:	211c      	movs	r1, #28
   10340:	f005 f9c8 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10344:	defe      	udf	#254	; 0xfe
        self.x_physical += 1;
   10346:	f64d 30d0 	movw	r0, #56272	; 0xdbd0
   1034a:	f2c0 0001 	movt	r0, #1
   1034e:	f64d 6218 	movw	r2, #56856	; 0xde18
   10352:	f2c0 0201 	movt	r2, #1
   10356:	211c      	movs	r1, #28
   10358:	f005 f9bc 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1035c:	defe      	udf	#254	; 0xfe
            self.y_physical += 1;
   1035e:	f64d 30d0 	movw	r0, #56272	; 0xdbd0
   10362:	f2c0 0001 	movt	r0, #1
   10366:	f64d 6228 	movw	r2, #56872	; 0xde28
   1036a:	f2c0 0201 	movt	r2, #1
   1036e:	211c      	movs	r1, #28
   10370:	f005 f9b0 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10374:	defe      	udf	#254	; 0xfe

00010376 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E>:
}

/// Convert the Virtual Colour (8-bit greyscale) to 16-bit Colour
fn convert_color(grey: u8) -> u16 {
   10376:	b580      	push	{r7, lr}
   10378:	b08a      	sub	sp, #40	; 0x28
   1037a:	b2c1      	uxtb	r1, r0
   1037c:	4602      	mov	r2, r0
   1037e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    match grey {
        250..=255 => Rgb565::from(( grey, grey, grey )).0,  //  White
   10382:	29fa      	cmp	r1, #250	; 0xfa
   10384:	9205      	str	r2, [sp, #20]
   10386:	d304      	bcc.n	10392 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x1c>
   10388:	e7ff      	b.n	1038a <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x14>
   1038a:	2001      	movs	r0, #1
   1038c:	2800      	cmp	r0, #0
   1038e:	d11d      	bne.n	103cc <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x56>
   10390:	e7ff      	b.n	10392 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x1c>
        128..250 => Rgb565::from(( grey - 100, grey, grey - 100 )).0,  //  Greenish
   10392:	9805      	ldr	r0, [sp, #20]
   10394:	b241      	sxtb	r1, r0
   10396:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1039a:	dc05      	bgt.n	103a8 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x32>
   1039c:	e7ff      	b.n	1039e <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x28>
   1039e:	9805      	ldr	r0, [sp, #20]
   103a0:	b2c1      	uxtb	r1, r0
   103a2:	29fa      	cmp	r1, #250	; 0xfa
   103a4:	d327      	bcc.n	103f6 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x80>
   103a6:	e7ff      	b.n	103a8 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x32>
   103a8:	2000      	movs	r0, #0
        0..128   => Rgb565::from(( 0, 0, grey )).0,  //  Dark Blue
   103aa:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   103ae:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
   103b2:	9805      	ldr	r0, [sp, #20]
   103b4:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
   103b8:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
   103bc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   103c0:	ea42 4001 	orr.w	r0, r2, r1, lsl #16
   103c4:	f001 fa32 	bl	1182c <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
   103c8:	9004      	str	r0, [sp, #16]
   103ca:	e041      	b.n	10450 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xda>
        250..=255 => Rgb565::from(( grey, grey, grey )).0,  //  White
   103cc:	9805      	ldr	r0, [sp, #20]
   103ce:	f88d 001c 	strb.w	r0, [sp, #28]
   103d2:	f88d 001d 	strb.w	r0, [sp, #29]
   103d6:	f88d 001e 	strb.w	r0, [sp, #30]
   103da:	f89d 101e 	ldrb.w	r1, [sp, #30]
   103de:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   103e2:	ea42 4001 	orr.w	r0, r2, r1, lsl #16
   103e6:	f001 fa21 	bl	1182c <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
   103ea:	9003      	str	r0, [sp, #12]
   103ec:	e7ff      	b.n	103ee <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x78>
   103ee:	9803      	ldr	r0, [sp, #12]
   103f0:	f8ad 001a 	strh.w	r0, [sp, #26]
    match grey {
   103f4:	e030      	b.n	10458 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xe2>
   103f6:	f06f 0063 	mvn.w	r0, #99	; 0x63
        128..250 => Rgb565::from(( grey - 100, grey, grey - 100 )).0,  //  Greenish
   103fa:	9905      	ldr	r1, [sp, #20]
   103fc:	fa50 f081 	uxtab	r0, r0, r1
   10400:	b2c2      	uxtb	r2, r0
   10402:	4603      	mov	r3, r0
   10404:	4282      	cmp	r2, r0
   10406:	9302      	str	r3, [sp, #8]
   10408:	d12a      	bne.n	10460 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xea>
   1040a:	e7ff      	b.n	1040c <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x96>
   1040c:	f06f 0063 	mvn.w	r0, #99	; 0x63
   10410:	9905      	ldr	r1, [sp, #20]
   10412:	fa50 f081 	uxtab	r0, r0, r1
   10416:	b2c2      	uxtb	r2, r0
   10418:	4603      	mov	r3, r0
   1041a:	4282      	cmp	r2, r0
   1041c:	9301      	str	r3, [sp, #4]
   1041e:	d12b      	bne.n	10478 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x102>
   10420:	e7ff      	b.n	10422 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xac>
   10422:	9802      	ldr	r0, [sp, #8]
   10424:	f88d 0020 	strb.w	r0, [sp, #32]
   10428:	9905      	ldr	r1, [sp, #20]
   1042a:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   1042e:	9a01      	ldr	r2, [sp, #4]
   10430:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   10434:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10438:	f8bd c020 	ldrh.w	ip, [sp, #32]
   1043c:	ea4c 4003 	orr.w	r0, ip, r3, lsl #16
   10440:	f001 f9f4 	bl	1182c <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
   10444:	9000      	str	r0, [sp, #0]
   10446:	e7ff      	b.n	10448 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xd2>
   10448:	9800      	ldr	r0, [sp, #0]
   1044a:	f8ad 001a 	strh.w	r0, [sp, #26]
    match grey {
   1044e:	e003      	b.n	10458 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xe2>
        0..128   => Rgb565::from(( 0, 0, grey )).0,  //  Dark Blue
   10450:	9804      	ldr	r0, [sp, #16]
   10452:	f8ad 001a 	strh.w	r0, [sp, #26]
    match grey {
   10456:	e7ff      	b.n	10458 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xe2>
    }
}
   10458:	f8bd 001a 	ldrh.w	r0, [sp, #26]
   1045c:	b00a      	add	sp, #40	; 0x28
   1045e:	bd80      	pop	{r7, pc}
        128..250 => Rgb565::from(( grey - 100, grey, grey - 100 )).0,  //  Greenish
   10460:	f64d 40b0 	movw	r0, #56496	; 0xdcb0
   10464:	f2c0 0001 	movt	r0, #1
   10468:	f64d 6238 	movw	r2, #56888	; 0xde38
   1046c:	f2c0 0201 	movt	r2, #1
   10470:	2121      	movs	r1, #33	; 0x21
   10472:	f005 f92f 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10476:	defe      	udf	#254	; 0xfe
   10478:	f64d 40b0 	movw	r0, #56496	; 0xdcb0
   1047c:	f2c0 0001 	movt	r0, #1
   10480:	f64d 6248 	movw	r2, #56904	; 0xde48
   10484:	f2c0 0201 	movt	r2, #1
   10488:	2121      	movs	r1, #33	; 0x21
   1048a:	f005 f923 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1048e:	defe      	udf	#254	; 0xfe

00010490 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E>:

/// Fade the Virtual Colour (8-bit greyscale) to black
fn update_color(grey: u8) -> u8 {
   10490:	b084      	sub	sp, #16
   10492:	b2c1      	uxtb	r1, r0
   10494:	4602      	mov	r2, r0
   10496:	f88d 000f 	strb.w	r0, [sp, #15]
    match grey {
        200..=255 => grey - 2,   //  Initial white flash fade to normal white
   1049a:	29c8      	cmp	r1, #200	; 0xc8
   1049c:	9202      	str	r2, [sp, #8]
   1049e:	d304      	bcc.n	104aa <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x1a>
   104a0:	e7ff      	b.n	104a2 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x12>
   104a2:	2001      	movs	r0, #1
   104a4:	2800      	cmp	r0, #0
   104a6:	d110      	bne.n	104ca <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x3a>
   104a8:	e7ff      	b.n	104aa <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x1a>
        128..200 => grey,        //  Normal white stays the same
   104aa:	9802      	ldr	r0, [sp, #8]
   104ac:	b241      	sxtb	r1, r0
   104ae:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   104b2:	dc05      	bgt.n	104c0 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x30>
   104b4:	e7ff      	b.n	104b6 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x26>
   104b6:	9802      	ldr	r0, [sp, #8]
   104b8:	b2c1      	uxtb	r1, r0
   104ba:	29c8      	cmp	r1, #200	; 0xc8
   104bc:	d314      	bcc.n	104e8 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x58>
   104be:	e7ff      	b.n	104c0 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x30>
        0..128   => grey >> 1,   //  Dark fade to black
   104c0:	9802      	ldr	r0, [sp, #8]
   104c2:	b2c1      	uxtb	r1, r0
   104c4:	0849      	lsrs	r1, r1, #1
   104c6:	9101      	str	r1, [sp, #4]
   104c8:	e012      	b.n	104f0 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x60>
   104ca:	f06f 0001 	mvn.w	r0, #1
        200..=255 => grey - 2,   //  Initial white flash fade to normal white
   104ce:	9902      	ldr	r1, [sp, #8]
   104d0:	fa50 f081 	uxtab	r0, r0, r1
   104d4:	b2c2      	uxtb	r2, r0
   104d6:	4603      	mov	r3, r0
   104d8:	4282      	cmp	r2, r0
   104da:	9300      	str	r3, [sp, #0]
   104dc:	d110      	bne.n	10500 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x70>
   104de:	e7ff      	b.n	104e0 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x50>
   104e0:	9800      	ldr	r0, [sp, #0]
   104e2:	f88d 000e 	strb.w	r0, [sp, #14]
    match grey {
   104e6:	e007      	b.n	104f8 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x68>
        128..200 => grey,        //  Normal white stays the same
   104e8:	9802      	ldr	r0, [sp, #8]
   104ea:	f88d 000e 	strb.w	r0, [sp, #14]
    match grey {
   104ee:	e003      	b.n	104f8 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x68>
        0..128   => grey >> 1,   //  Dark fade to black
   104f0:	9801      	ldr	r0, [sp, #4]
   104f2:	f88d 000e 	strb.w	r0, [sp, #14]
    match grey {
   104f6:	e7ff      	b.n	104f8 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x68>
    }
}
   104f8:	f89d 000e 	ldrb.w	r0, [sp, #14]
   104fc:	b004      	add	sp, #16
   104fe:	4770      	bx	lr
        200..=255 => grey - 2,   //  Initial white flash fade to normal white
   10500:	f64d 40b0 	movw	r0, #56496	; 0xdcb0
   10504:	f2c0 0001 	movt	r0, #1
   10508:	f64d 6258 	movw	r2, #56920	; 0xde58
   1050c:	f2c0 0201 	movt	r2, #1
   10510:	2121      	movs	r1, #33	; 0x21
   10512:	f005 f8df 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10516:	defe      	udf	#254	; 0xfe

00010518 <_ZN3app5chip812handle_touch17h09fa961dda8dcb87E>:

/// TODO: Handle touch events to emulate buttons
pub fn handle_touch(_x: u16, _y: u16) { 
   10518:	b580      	push	{r7, lr}
   1051a:	b084      	sub	sp, #16
   1051c:	460a      	mov	r2, r1
   1051e:	4603      	mov	r3, r0
   10520:	f8ad 000c 	strh.w	r0, [sp, #12]
   10524:	f8ad 100e 	strh.w	r1, [sp, #14]
    console::print("CHIP8 touch not handled\n"); console::flush(); 
   10528:	f64d 6068 	movw	r0, #56936	; 0xde68
   1052c:	f2c0 0001 	movt	r0, #1
   10530:	2118      	movs	r1, #24
   10532:	9202      	str	r2, [sp, #8]
   10534:	9301      	str	r3, [sp, #4]
   10536:	f7f8 fddf 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
   1053a:	e7ff      	b.n	1053c <_ZN3app5chip812handle_touch17h09fa961dda8dcb87E+0x24>
   1053c:	f7f8 fe22 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
   10540:	e7ff      	b.n	10542 <_ZN3app5chip812handle_touch17h09fa961dda8dcb87E+0x2a>
}
   10542:	b004      	add	sp, #16
   10544:	bd80      	pop	{r7, pc}

00010546 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE>:
/// ```rust
/// let peripherals = nrf52::Peripherals::take().unwrap();
/// let nfcpins = peripherals.UICR.nfcpins.read().bits();
/// console::print("nfcpins = "); console::printhex(nfcpins as u8); console::print("\n");
/// ```
pub fn start_touch_sensor() -> MynewtResult<()> {
   10546:	b5b0      	push	{r4, r5, r7, lr}
   10548:	b0be      	sub	sp, #248	; 0xf8
    console::print("Rust touch sensor\n");
   1054a:	f244 4048 	movw	r0, #17480	; 0x4448
   1054e:	f2c0 0002 	movt	r0, #2
   10552:	2112      	movs	r1, #18
   10554:	f7f8 fdd0 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
   10558:	e7ff      	b.n	1055a <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x14>

    //  Init GPIO for the Reset Pin
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
   1055a:	f644 10b4 	movw	r0, #18868	; 0x49b4
   1055e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10562:	210a      	movs	r1, #10
   10564:	f003 fe59 	bl	1421a <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
   10568:	9012      	str	r0, [sp, #72]	; 0x48
   1056a:	e7ff      	b.n	1056c <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x26>
   1056c:	9812      	ldr	r0, [sp, #72]	; 0x48
   1056e:	f7f8 fb87 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   10572:	9014      	str	r0, [sp, #80]	; 0x50
   10574:	e7ff      	b.n	10576 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x30>
   10576:	9814      	ldr	r0, [sp, #80]	; 0x50
   10578:	1e41      	subs	r1, r0, #1
   1057a:	bf18      	it	ne
   1057c:	2101      	movne	r1, #1
   1057e:	2801      	cmp	r0, #1
   10580:	d001      	beq.n	10586 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x40>
   10582:	e7ff      	b.n	10584 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x3e>
   10584:	e008      	b.n	10598 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x52>

    //  Reset the touch controller by switching the Reset Pin low then high with pauses. Based on https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L1017-L1167
    unsafe {
        TOUCH_RESET.set_low() ? ;
   10586:	f644 10b4 	movw	r0, #18868	; 0x49b4
   1058a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1058e:	f003 fedd 	bl	1434c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
   10592:	9011      	str	r0, [sp, #68]	; 0x44
   10594:	e00f      	b.n	105b6 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x70>
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
   10596:	defe      	udf	#254	; 0xfe
   10598:	9814      	ldr	r0, [sp, #80]	; 0x50
   1059a:	9036      	str	r0, [sp, #216]	; 0xd8
   1059c:	f002 f83a 	bl	12614 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   105a0:	9010      	str	r0, [sp, #64]	; 0x40
   105a2:	e002      	b.n	105aa <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x64>
    assert_eq!(rc, 0, "IRQ init fail");

    //  Start monitoring for touch controller interrupts
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    Ok(())
}
   105a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
   105a6:	b03e      	add	sp, #248	; 0xf8
   105a8:	bdb0      	pop	{r4, r5, r7, pc}
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
   105aa:	9810      	ldr	r0, [sp, #64]	; 0x40
   105ac:	f7f8 fb5c 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   105b0:	9013      	str	r0, [sp, #76]	; 0x4c
   105b2:	e7ff      	b.n	105b4 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x6e>
   105b4:	e7f6      	b.n	105a4 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x5e>
        TOUCH_RESET.set_low() ? ;
   105b6:	9811      	ldr	r0, [sp, #68]	; 0x44
   105b8:	f7f8 fb62 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   105bc:	9015      	str	r0, [sp, #84]	; 0x54
   105be:	e7ff      	b.n	105c0 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x7a>
   105c0:	9815      	ldr	r0, [sp, #84]	; 0x54
   105c2:	1e41      	subs	r1, r0, #1
   105c4:	bf18      	it	ne
   105c6:	2101      	movne	r1, #1
   105c8:	2801      	cmp	r0, #1
   105ca:	d001      	beq.n	105d0 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x8a>
   105cc:	e7ff      	b.n	105ce <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x88>
   105ce:	e008      	b.n	105e2 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x9c>
        TOUCH_DELAY.delay_ms(20);
   105d0:	f644 10b8 	movw	r0, #18872	; 0x49b8
   105d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   105d8:	2114      	movs	r1, #20
   105da:	f003 fece 	bl	1437a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   105de:	e00d      	b.n	105fc <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xb6>
        TOUCH_RESET.set_low() ? ;
   105e0:	defe      	udf	#254	; 0xfe
   105e2:	9815      	ldr	r0, [sp, #84]	; 0x54
   105e4:	9037      	str	r0, [sp, #220]	; 0xdc
   105e6:	f002 f815 	bl	12614 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   105ea:	900f      	str	r0, [sp, #60]	; 0x3c
   105ec:	e7ff      	b.n	105ee <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xa8>
   105ee:	980f      	ldr	r0, [sp, #60]	; 0x3c
   105f0:	f7f8 fb3a 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   105f4:	9013      	str	r0, [sp, #76]	; 0x4c
   105f6:	e7ff      	b.n	105f8 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xb2>
   105f8:	e7ff      	b.n	105fa <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xb4>
   105fa:	e7d3      	b.n	105a4 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x5e>
        TOUCH_RESET.set_high() ? ;
   105fc:	f644 10b4 	movw	r0, #18868	; 0x49b4
   10600:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10604:	f003 fead 	bl	14362 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
   10608:	900e      	str	r0, [sp, #56]	; 0x38
   1060a:	e7ff      	b.n	1060c <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xc6>
   1060c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1060e:	f7f8 fb37 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   10612:	9016      	str	r0, [sp, #88]	; 0x58
   10614:	e7ff      	b.n	10616 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xd0>
   10616:	9816      	ldr	r0, [sp, #88]	; 0x58
   10618:	1e41      	subs	r1, r0, #1
   1061a:	bf18      	it	ne
   1061c:	2101      	movne	r1, #1
   1061e:	2801      	cmp	r0, #1
   10620:	d001      	beq.n	10626 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xe0>
   10622:	e7ff      	b.n	10624 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xde>
   10624:	e008      	b.n	10638 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xf2>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
   10626:	f644 10b8 	movw	r0, #18872	; 0x49b8
   1062a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1062e:	21c8      	movs	r1, #200	; 0xc8
   10630:	f003 fea3 	bl	1437a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   10634:	e00c      	b.n	10650 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x10a>
        TOUCH_RESET.set_high() ? ;
   10636:	defe      	udf	#254	; 0xfe
   10638:	9816      	ldr	r0, [sp, #88]	; 0x58
   1063a:	9038      	str	r0, [sp, #224]	; 0xe0
   1063c:	f001 ffea 	bl	12614 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   10640:	900d      	str	r0, [sp, #52]	; 0x34
   10642:	e7ff      	b.n	10644 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xfe>
   10644:	980d      	ldr	r0, [sp, #52]	; 0x34
   10646:	f7f8 fb0f 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   1064a:	9013      	str	r0, [sp, #76]	; 0x4c
   1064c:	e7ff      	b.n	1064e <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x108>
   1064e:	e7d4      	b.n	105fa <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xb4>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
   10650:	f644 10b8 	movw	r0, #18872	; 0x49b8
   10654:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10658:	21c8      	movs	r1, #200	; 0xc8
   1065a:	f003 fe8e 	bl	1437a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   1065e:	e7ff      	b.n	10660 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x11a>
    unsafe { TOUCH_EVENT.ev_cb = Some( touch_event_callback ) };
   10660:	f640 0003 	movw	r0, #2051	; 0x803
   10664:	f2c0 0001 	movt	r0, #1
   10668:	9017      	str	r0, [sp, #92]	; 0x5c
   1066a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1066c:	f644 214c 	movw	r1, #19020	; 0x4a4c
   10670:	f2c2 0100 	movt	r1, #8192	; 0x2000
   10674:	6048      	str	r0, [r1, #4]
        Some( touch_interrupt_handler ),  //  Call `touch_interrupt_handler()` upon detecting interrupt
   10676:	f240 70b7 	movw	r0, #1975	; 0x7b7
   1067a:	f2c0 0001 	movt	r0, #1
   1067e:	9019      	str	r0, [sp, #100]	; 0x64
        core::ptr::null_mut(),            //  No arguments for `touch_interrupt_handler()`
   10680:	e7ff      	b.n	10682 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x13c>
    let rc = unsafe { hal::hal_gpio_irq_init(
   10682:	9919      	ldr	r1, [sp, #100]	; 0x64
   10684:	4668      	mov	r0, sp
   10686:	2201      	movs	r2, #1
   10688:	6002      	str	r2, [r0, #0]
   1068a:	201c      	movs	r0, #28
   1068c:	2200      	movs	r2, #0
   1068e:	2302      	movs	r3, #2
   10690:	f007 f8f2 	bl	17878 <hal_gpio_irq_init>
   10694:	9018      	str	r0, [sp, #96]	; 0x60
   10696:	e7ff      	b.n	10698 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x152>
    assert_eq!(rc, 0, "IRQ init fail");
   10698:	f244 4060 	movw	r0, #17504	; 0x4460
   1069c:	f2c0 0002 	movt	r0, #2
   106a0:	6800      	ldr	r0, [r0, #0]
   106a2:	a918      	add	r1, sp, #96	; 0x60
   106a4:	911a      	str	r1, [sp, #104]	; 0x68
   106a6:	901b      	str	r0, [sp, #108]	; 0x6c
   106a8:	981a      	ldr	r0, [sp, #104]	; 0x68
   106aa:	9039      	str	r0, [sp, #228]	; 0xe4
   106ac:	991b      	ldr	r1, [sp, #108]	; 0x6c
   106ae:	913a      	str	r1, [sp, #232]	; 0xe8
   106b0:	6802      	ldr	r2, [r0, #0]
   106b2:	680b      	ldr	r3, [r1, #0]
   106b4:	429a      	cmp	r2, r3
   106b6:	900c      	str	r0, [sp, #48]	; 0x30
   106b8:	910b      	str	r1, [sp, #44]	; 0x2c
   106ba:	d104      	bne.n	106c6 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x180>
   106bc:	e7ff      	b.n	106be <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x178>
   106be:	201c      	movs	r0, #28
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
   106c0:	f007 f916 	bl	178f0 <hal_gpio_irq_enable>
   106c4:	e072      	b.n	107ac <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x266>
    assert_eq!(rc, 0, "IRQ init fail");
   106c6:	f244 40b8 	movw	r0, #17592	; 0x44b8
   106ca:	f2c0 0002 	movt	r0, #2
   106ce:	6801      	ldr	r1, [r0, #0]
   106d0:	980c      	ldr	r0, [sp, #48]	; 0x30
   106d2:	902b      	str	r0, [sp, #172]	; 0xac
   106d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   106d6:	922c      	str	r2, [sp, #176]	; 0xb0
   106d8:	f244 43d4 	movw	r3, #17620	; 0x44d4
   106dc:	f2c0 0302 	movt	r3, #2
   106e0:	681b      	ldr	r3, [r3, #0]
   106e2:	f244 4cd8 	movw	ip, #17624	; 0x44d8
   106e6:	f2c0 0c02 	movt	ip, #2
   106ea:	f8dc c000 	ldr.w	ip, [ip]
   106ee:	46ee      	mov	lr, sp
   106f0:	2400      	movs	r4, #0
   106f2:	f8ce 4000 	str.w	r4, [lr]
   106f6:	a82d      	add	r0, sp, #180	; 0xb4
   106f8:	2201      	movs	r2, #1
   106fa:	910a      	str	r1, [sp, #40]	; 0x28
   106fc:	4619      	mov	r1, r3
   106fe:	4663      	mov	r3, ip
   10700:	f000 fdeb 	bl	112da <_ZN4core3fmt9Arguments6new_v117h745a95d658ce50bcE>
   10704:	e7ff      	b.n	10706 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x1c0>
   10706:	a82b      	add	r0, sp, #172	; 0xac
   10708:	9028      	str	r0, [sp, #160]	; 0xa0
   1070a:	a82c      	add	r0, sp, #176	; 0xb0
   1070c:	9029      	str	r0, [sp, #164]	; 0xa4
   1070e:	a82d      	add	r0, sp, #180	; 0xb4
   10710:	902a      	str	r0, [sp, #168]	; 0xa8
   10712:	9828      	ldr	r0, [sp, #160]	; 0xa0
   10714:	903b      	str	r0, [sp, #236]	; 0xec
   10716:	9929      	ldr	r1, [sp, #164]	; 0xa4
   10718:	913c      	str	r1, [sp, #240]	; 0xf0
   1071a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   1071c:	923d      	str	r2, [sp, #244]	; 0xf4
   1071e:	f241 7391 	movw	r3, #6033	; 0x1791
   10722:	f2c0 0301 	movt	r3, #1
   10726:	9109      	str	r1, [sp, #36]	; 0x24
   10728:	4619      	mov	r1, r3
   1072a:	9208      	str	r2, [sp, #32]
   1072c:	f7f8 fe99 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   10730:	9007      	str	r0, [sp, #28]
   10732:	9106      	str	r1, [sp, #24]
   10734:	e7ff      	b.n	10736 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x1f0>
   10736:	f241 7191 	movw	r1, #6033	; 0x1791
   1073a:	f2c0 0101 	movt	r1, #1
   1073e:	9809      	ldr	r0, [sp, #36]	; 0x24
   10740:	f7f8 fe8f 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   10744:	9005      	str	r0, [sp, #20]
   10746:	9104      	str	r1, [sp, #16]
   10748:	e7ff      	b.n	1074a <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x204>
   1074a:	f645 41a3 	movw	r1, #23715	; 0x5ca3
   1074e:	f2c0 0101 	movt	r1, #1
   10752:	9808      	ldr	r0, [sp, #32]
   10754:	f7f8 fec4 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   10758:	9003      	str	r0, [sp, #12]
   1075a:	9102      	str	r1, [sp, #8]
   1075c:	e7ff      	b.n	1075e <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x218>
   1075e:	9807      	ldr	r0, [sp, #28]
   10760:	9022      	str	r0, [sp, #136]	; 0x88
   10762:	9906      	ldr	r1, [sp, #24]
   10764:	9123      	str	r1, [sp, #140]	; 0x8c
   10766:	9a05      	ldr	r2, [sp, #20]
   10768:	9224      	str	r2, [sp, #144]	; 0x90
   1076a:	9b04      	ldr	r3, [sp, #16]
   1076c:	9325      	str	r3, [sp, #148]	; 0x94
   1076e:	f8dd c00c 	ldr.w	ip, [sp, #12]
   10772:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
   10776:	f8dd e008 	ldr.w	lr, [sp, #8]
   1077a:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
   1077e:	466c      	mov	r4, sp
   10780:	2503      	movs	r5, #3
   10782:	6025      	str	r5, [r4, #0]
   10784:	a81c      	add	r0, sp, #112	; 0x70
   10786:	ab22      	add	r3, sp, #136	; 0x88
   10788:	990a      	ldr	r1, [sp, #40]	; 0x28
   1078a:	462a      	mov	r2, r5
   1078c:	f000 fda5 	bl	112da <_ZN4core3fmt9Arguments6new_v117h745a95d658ce50bcE>
   10790:	e7ff      	b.n	10792 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x24c>
   10792:	f244 40f8 	movw	r0, #17656	; 0x44f8
   10796:	f2c0 0002 	movt	r0, #2
   1079a:	f004 ff94 	bl	156c6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1079e:	9001      	str	r0, [sp, #4]
   107a0:	e7ff      	b.n	107a2 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x25c>
   107a2:	a81c      	add	r0, sp, #112	; 0x70
   107a4:	9901      	ldr	r1, [sp, #4]
   107a6:	f004 ffcb 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   107aa:	defe      	udf	#254	; 0xfe
   107ac:	2000      	movs	r0, #0
    Ok(())
   107ae:	9013      	str	r0, [sp, #76]	; 0x4c
   107b0:	2001      	movs	r0, #1
   107b2:	9013      	str	r0, [sp, #76]	; 0x4c
}
   107b4:	e6f6      	b.n	105a4 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x5e>

000107b6 <_ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E>:

/// Interrupt handler for the touch controller, triggered when a touch is detected
extern "C" fn touch_interrupt_handler(arg: *mut core::ffi::c_void) {
   107b6:	b580      	push	{r7, lr}
   107b8:	b086      	sub	sp, #24
   107ba:	9004      	str	r0, [sp, #16]
    //  We forward a touch event to the Default Event Queue for deferred processing.  Don't do any processing here.
    unsafe { TOUCH_EVENT.ev_arg = arg };
   107bc:	f644 214c 	movw	r1, #19020	; 0x4a4c
   107c0:	f2c2 0100 	movt	r1, #8192	; 0x2000
   107c4:	6088      	str	r0, [r1, #8]
   107c6:	a802      	add	r0, sp, #8
    //  Fetch the Default Event Queue. TODO: Use dedicated Event Queue for higher priority processing.
    let queue = os::eventq_dflt_get()
   107c8:	f7f8 fad6 	bl	8d78 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
   107cc:	e7ff      	b.n	107ce <_ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E+0x18>
   107ce:	f64b 519a 	movw	r1, #48538	; 0xbd9a
   107d2:	f2c0 0101 	movt	r1, #1
   107d6:	f244 5310 	movw	r3, #17680	; 0x4510
   107da:	f2c0 0302 	movt	r3, #2
   107de:	a802      	add	r0, sp, #8
   107e0:	2208      	movs	r2, #8
   107e2:	f7fe fadc 	bl	ed9e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E>
   107e6:	4601      	mov	r1, r0
   107e8:	9005      	str	r0, [sp, #20]
   107ea:	9101      	str	r1, [sp, #4]
   107ec:	e7ff      	b.n	107ee <_ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E+0x38>
        .expect("GET fail");
    unsafe { os::os_eventq_put(queue, &mut TOUCH_EVENT) };  //  Trigger the callback function `touch_event_callback()`
   107ee:	f644 214c 	movw	r1, #19020	; 0x4a4c
   107f2:	f2c2 0100 	movt	r1, #8192	; 0x2000
   107f6:	9801      	ldr	r0, [sp, #4]
   107f8:	f008 f90d 	bl	18a16 <os_eventq_put>
   107fc:	e7ff      	b.n	107fe <_ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E+0x48>
    //console::print("touch\n"); ////
}
   107fe:	b006      	add	sp, #24
   10800:	bd80      	pop	{r7, pc}

00010802 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E>:

/// Callback for the touch event that is triggered when a touch is detected
extern "C" fn touch_event_callback(_event: *mut os_event) {
   10802:	b580      	push	{r7, lr}
   10804:	b094      	sub	sp, #80	; 0x50
   10806:	900e      	str	r0, [sp, #56]	; 0x38
    //  console::printhex(unsafe { os::os_time_get() } as u8); console::print(" touch\n");
    unsafe { 
        //  Fetch the touch data from the touch controller
        read_touchdata(&mut TOUCH_DATA)
   10808:	f644 10b8 	movw	r0, #18872	; 0x49b8
   1080c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10810:	f000 f894 	bl	1093c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E>
   10814:	9006      	str	r0, [sp, #24]
   10816:	e7ff      	b.n	10818 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x16>
   10818:	f244 5120 	movw	r1, #17696	; 0x4520
   1081c:	f2c0 0102 	movt	r1, #2
   10820:	f244 5330 	movw	r3, #17712	; 0x4530
   10824:	f2c0 0302 	movt	r3, #2
   10828:	220e      	movs	r2, #14
   1082a:	9806      	ldr	r0, [sp, #24]
   1082c:	f7f8 f9e9 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   10830:	e7ff      	b.n	10832 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x30>
            .expect("touchdata fail");
        //  Handle each touch data info
        for i in 0..TOUCH_DATA.count as usize {
   10832:	f644 10b8 	movw	r0, #18872	; 0x49b8
   10836:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1083a:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
   1083e:	2100      	movs	r1, #0
   10840:	9107      	str	r1, [sp, #28]
   10842:	9008      	str	r0, [sp, #32]
   10844:	9807      	ldr	r0, [sp, #28]
   10846:	9908      	ldr	r1, [sp, #32]
   10848:	f001 fa6c 	bl	11d24 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   1084c:	9005      	str	r0, [sp, #20]
   1084e:	9104      	str	r1, [sp, #16]
   10850:	e7ff      	b.n	10852 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x50>
   10852:	9805      	ldr	r0, [sp, #20]
   10854:	9009      	str	r0, [sp, #36]	; 0x24
   10856:	9904      	ldr	r1, [sp, #16]
   10858:	910a      	str	r1, [sp, #40]	; 0x28
   1085a:	e7ff      	b.n	1085c <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x5a>
   1085c:	a809      	add	r0, sp, #36	; 0x24
   1085e:	f001 f9d6 	bl	11c0e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   10862:	910c      	str	r1, [sp, #48]	; 0x30
   10864:	900b      	str	r0, [sp, #44]	; 0x2c
   10866:	e7ff      	b.n	10868 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x66>
   10868:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1086a:	2800      	cmp	r0, #0
   1086c:	d001      	beq.n	10872 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x70>
   1086e:	e7ff      	b.n	10870 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x6e>
   10870:	e002      	b.n	10878 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x76>
            console::print(", x: "); console::printint(x as i32); 
            console::print(", y: "); console::printint(y as i32); console::print("\n");
        }
        console::flush();   
    } */
}
   10872:	b014      	add	sp, #80	; 0x50
   10874:	bd80      	pop	{r7, pc}
        for i in 0..TOUCH_DATA.count as usize {
   10876:	defe      	udf	#254	; 0xfe
   10878:	980c      	ldr	r0, [sp, #48]	; 0x30
   1087a:	900f      	str	r0, [sp, #60]	; 0x3c
   1087c:	9010      	str	r0, [sp, #64]	; 0x40
   1087e:	9011      	str	r0, [sp, #68]	; 0x44
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
   10880:	2809      	cmp	r0, #9
   10882:	9003      	str	r0, [sp, #12]
   10884:	d851      	bhi.n	1092a <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x128>
   10886:	e7ff      	b.n	10888 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x86>
   10888:	f644 10b8 	movw	r0, #18872	; 0x49b8
   1088c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10890:	9903      	ldr	r1, [sp, #12]
   10892:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   10896:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
   1089a:	4603      	mov	r3, r0
   1089c:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
   108a0:	f8b2 c002 	ldrh.w	ip, [r2, #2]
   108a4:	46e6      	mov	lr, ip
   108a6:	f8ad c04c 	strh.w	ip, [sp, #76]	; 0x4c
   108aa:	7912      	ldrb	r2, [r2, #4]
   108ac:	4694      	mov	ip, r2
   108ae:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
            if x == 0 && y == 0 { continue; }
   108b2:	2800      	cmp	r0, #0
   108b4:	9302      	str	r3, [sp, #8]
   108b6:	f8cd e004 	str.w	lr, [sp, #4]
   108ba:	f8cd c000 	str.w	ip, [sp]
   108be:	d008      	beq.n	108d2 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xd0>
   108c0:	e003      	b.n	108ca <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xc8>
   108c2:	2001      	movs	r0, #1
   108c4:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
   108c8:	e008      	b.n	108dc <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xda>
   108ca:	2000      	movs	r0, #0
   108cc:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
   108d0:	e004      	b.n	108dc <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xda>
   108d2:	9801      	ldr	r0, [sp, #4]
   108d4:	0401      	lsls	r1, r0, #16
   108d6:	2900      	cmp	r1, #0
   108d8:	d0f3      	beq.n	108c2 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xc0>
   108da:	e7f6      	b.n	108ca <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xc8>
   108dc:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
   108e0:	07c0      	lsls	r0, r0, #31
   108e2:	2800      	cmp	r0, #0
   108e4:	d105      	bne.n	108f2 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xf0>
   108e6:	e7ff      	b.n	108e8 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xe6>
            if action != 0 && action != 2 { continue; }
   108e8:	9800      	ldr	r0, [sp, #0]
   108ea:	0601      	lsls	r1, r0, #24
   108ec:	2900      	cmp	r1, #0
   108ee:	d10a      	bne.n	10906 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x104>
   108f0:	e005      	b.n	108fe <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xfc>
            if x == 0 && y == 0 { continue; }
   108f2:	e7ff      	b.n	108f4 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xf2>
   108f4:	e7b2      	b.n	1085c <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x5a>
   108f6:	2001      	movs	r0, #1
            if action != 0 && action != 2 { continue; }
   108f8:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   108fc:	e008      	b.n	10910 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x10e>
   108fe:	2000      	movs	r0, #0
   10900:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   10904:	e004      	b.n	10910 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x10e>
   10906:	9800      	ldr	r0, [sp, #0]
   10908:	b2c1      	uxtb	r1, r0
   1090a:	2902      	cmp	r1, #2
   1090c:	d1f3      	bne.n	108f6 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xf4>
   1090e:	e7f6      	b.n	108fe <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xfc>
   10910:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   10914:	07c0      	lsls	r0, r0, #31
   10916:	2800      	cmp	r0, #0
   10918:	d105      	bne.n	10926 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x124>
   1091a:	e7ff      	b.n	1091c <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x11a>
            super::handle_touch(x, y);
   1091c:	9802      	ldr	r0, [sp, #8]
   1091e:	9901      	ldr	r1, [sp, #4]
   10920:	f7ff fdfa 	bl	10518 <_ZN3app5chip812handle_touch17h09fa961dda8dcb87E>
   10924:	e000      	b.n	10928 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x126>
            if action != 0 && action != 2 { continue; }
   10926:	e7e5      	b.n	108f4 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xf2>
        for i in 0..TOUCH_DATA.count as usize {
   10928:	e798      	b.n	1085c <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x5a>
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
   1092a:	f244 5040 	movw	r0, #17728	; 0x4540
   1092e:	f2c0 0002 	movt	r0, #2
   10932:	220a      	movs	r2, #10
   10934:	9903      	ldr	r1, [sp, #12]
   10936:	f004 fee3 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1093a:	defe      	udf	#254	; 0xfe

0001093c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E>:
/// Touch data will be populated here
static mut TOUCH_DATA: TouchEventInfo = fill_zero!(TouchEventInfo);

/// Read touch controller data. This only works when the screen has been tapped and the touch controller wakes up.
/// Ported from https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L407-L466
fn read_touchdata(data: &mut TouchEventInfo) -> MynewtResult<()> {
   1093c:	b580      	push	{r7, lr}
   1093e:	b0de      	sub	sp, #376	; 0x178
   10940:	9057      	str	r0, [sp, #348]	; 0x15c
    read_register_range(           //  Read the range of I2C registers...
   10942:	4669      	mov	r1, sp
   10944:	223f      	movs	r2, #63	; 0x3f
   10946:	600a      	str	r2, [r1, #0]
   10948:	f644 230a 	movw	r3, #18954	; 0x4a0a
   1094c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10950:	2115      	movs	r1, #21
   10952:	f04f 0c00 	mov.w	ip, #0
   10956:	9026      	str	r0, [sp, #152]	; 0x98
   10958:	4608      	mov	r0, r1
   1095a:	4661      	mov	r1, ip
   1095c:	f000 fb97 	bl	1108e <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E>
   10960:	9025      	str	r0, [sp, #148]	; 0x94
   10962:	e7ff      	b.n	10964 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x28>
   10964:	f244 5150 	movw	r1, #17744	; 0x4550
   10968:	f2c0 0102 	movt	r1, #2
   1096c:	f244 5364 	movw	r3, #17764	; 0x4564
   10970:	f2c0 0302 	movt	r3, #2
   10974:	2213      	movs	r2, #19
   10976:	9825      	ldr	r0, [sp, #148]	; 0x94
   10978:	f7f8 f943 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1097c:	e7ff      	b.n	1097e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x42>
   1097e:	f10d 00ee 	add.w	r0, sp, #238	; 0xee
   10982:	2152      	movs	r1, #82	; 0x52
        TOUCH_CONTROLLER_ADDRESS,  //  From the touch controller
        0,                         //  Starting from register 0
        POINT_READ_BUF as u8,      //  Number of registers to read
        unsafe { &mut BUF }        //  Save the read data into `buf`
    ).expect("read touchdata fail");
    *data = fill_zero!(TouchEventInfo);
   10984:	9024      	str	r0, [sp, #144]	; 0x90
   10986:	9123      	str	r1, [sp, #140]	; 0x8c
   10988:	f00b f9ac 	bl	1bce4 <__aeabi_memclr>
   1098c:	a827      	add	r0, sp, #156	; 0x9c
   1098e:	9924      	ldr	r1, [sp, #144]	; 0x90
   10990:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   10992:	f00b f9ab 	bl	1bcec <__aeabi_memcpy>
   10996:	e7ff      	b.n	10998 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5c>
   10998:	a927      	add	r1, sp, #156	; 0x9c
   1099a:	2252      	movs	r2, #82	; 0x52
   1099c:	9826      	ldr	r0, [sp, #152]	; 0x98
   1099e:	f00b f9a5 	bl	1bcec <__aeabi_memcpy>
    data.point_num = unsafe { BUF[FT_TOUCH_POINT_NUM] & 0x0F };
   109a2:	f644 210a 	movw	r1, #18954	; 0x4a0a
   109a6:	f2c2 0100 	movt	r1, #8192	; 0x2000
   109aa:	7889      	ldrb	r1, [r1, #2]
   109ac:	f001 010f 	and.w	r1, r1, #15
   109b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   109b2:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
   109b6:	2100      	movs	r1, #0
    data.count     = 0;
   109b8:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50

    //  Populate the first 5 touch points
    for i in 0..CFG_MAX_TOUCH_POINTS {
   109bc:	9150      	str	r1, [sp, #320]	; 0x140
   109be:	2105      	movs	r1, #5
   109c0:	9151      	str	r1, [sp, #324]	; 0x144
   109c2:	9950      	ldr	r1, [sp, #320]	; 0x140
   109c4:	9b51      	ldr	r3, [sp, #324]	; 0x144
   109c6:	9022      	str	r0, [sp, #136]	; 0x88
   109c8:	4608      	mov	r0, r1
   109ca:	4619      	mov	r1, r3
   109cc:	f001 f9aa 	bl	11d24 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   109d0:	9021      	str	r0, [sp, #132]	; 0x84
   109d2:	9120      	str	r1, [sp, #128]	; 0x80
   109d4:	e7ff      	b.n	109d6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x9a>
   109d6:	9821      	ldr	r0, [sp, #132]	; 0x84
   109d8:	9052      	str	r0, [sp, #328]	; 0x148
   109da:	9920      	ldr	r1, [sp, #128]	; 0x80
   109dc:	9153      	str	r1, [sp, #332]	; 0x14c
   109de:	e7ff      	b.n	109e0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xa4>
   109e0:	a852      	add	r0, sp, #328	; 0x148
   109e2:	f001 f914 	bl	11c0e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   109e6:	9155      	str	r1, [sp, #340]	; 0x154
   109e8:	9054      	str	r0, [sp, #336]	; 0x150
   109ea:	e7ff      	b.n	109ec <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xb0>
   109ec:	9854      	ldr	r0, [sp, #336]	; 0x150
   109ee:	2800      	cmp	r0, #0
   109f0:	d001      	beq.n	109f6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xba>
   109f2:	e7ff      	b.n	109f4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xb8>
   109f4:	e001      	b.n	109fa <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xbe>
   109f6:	e00d      	b.n	10a14 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xd8>
   109f8:	defe      	udf	#254	; 0xfe
   109fa:	9855      	ldr	r0, [sp, #340]	; 0x154
   109fc:	9058      	str	r0, [sp, #352]	; 0x160
   109fe:	9059      	str	r0, [sp, #356]	; 0x164
   10a00:	905a      	str	r0, [sp, #360]	; 0x168
   10a02:	2106      	movs	r1, #6
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
   10a04:	fba1 1200 	umull	r1, r2, r1, r0
   10a08:	2a00      	cmp	r2, #0
   10a0a:	901f      	str	r0, [sp, #124]	; 0x7c
   10a0c:	911e      	str	r1, [sp, #120]	; 0x78
   10a0e:	f040 81c1 	bne.w	10d94 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x458>
   10a12:	e002      	b.n	10a1a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xde>
   10a14:	2001      	movs	r0, #1
            && (data.point_num == 0) {
            break;
        }
    }
    Ok(())
}
   10a16:	b05e      	add	sp, #376	; 0x178
   10a18:	bd80      	pop	{r7, pc}
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
   10a1a:	981e      	ldr	r0, [sp, #120]	; 0x78
   10a1c:	1d41      	adds	r1, r0, #5
   10a1e:	460a      	mov	r2, r1
   10a20:	4281      	cmp	r1, r0
   10a22:	921d      	str	r2, [sp, #116]	; 0x74
   10a24:	f0c0 81c2 	bcc.w	10dac <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x470>
   10a28:	e7ff      	b.n	10a2a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xee>
   10a2a:	981d      	ldr	r0, [sp, #116]	; 0x74
   10a2c:	283e      	cmp	r0, #62	; 0x3e
   10a2e:	f200 81c9 	bhi.w	10dc4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x488>
   10a32:	e7ff      	b.n	10a34 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xf8>
   10a34:	f644 200a 	movw	r0, #18954	; 0x4a0a
   10a38:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10a3c:	991d      	ldr	r1, [sp, #116]	; 0x74
   10a3e:	5c40      	ldrb	r0, [r0, r1]
   10a40:	0900      	lsrs	r0, r0, #4
   10a42:	901c      	str	r0, [sp, #112]	; 0x70
   10a44:	e7ff      	b.n	10a46 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x10a>
   10a46:	981c      	ldr	r0, [sp, #112]	; 0x70
   10a48:	f88d 016f 	strb.w	r0, [sp, #367]	; 0x16f
   10a4c:	b2c1      	uxtb	r1, r0
        if pointid >= HYN_MAX_ID { break; }
   10a4e:	290e      	cmp	r1, #14
   10a50:	d80b      	bhi.n	10a6a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x12e>
   10a52:	e7ff      	b.n	10a54 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x118>
        data.count += 1;
   10a54:	9826      	ldr	r0, [sp, #152]	; 0x98
   10a56:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
   10a5a:	3101      	adds	r1, #1
   10a5c:	b2ca      	uxtb	r2, r1
   10a5e:	460b      	mov	r3, r1
   10a60:	428a      	cmp	r2, r1
   10a62:	931b      	str	r3, [sp, #108]	; 0x6c
   10a64:	f040 81b7 	bne.w	10dd6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x49a>
   10a68:	e001      	b.n	10a6e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x132>
        if pointid >= HYN_MAX_ID { break; }
   10a6a:	e7ff      	b.n	10a6c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x130>
   10a6c:	e7d2      	b.n	10a14 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xd8>
        data.count += 1;
   10a6e:	981b      	ldr	r0, [sp, #108]	; 0x6c
   10a70:	9926      	ldr	r1, [sp, #152]	; 0x98
   10a72:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
   10a76:	2206      	movs	r2, #6
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
   10a78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   10a7a:	fba2 2c03 	umull	r2, ip, r2, r3
   10a7e:	f1bc 0f00 	cmp.w	ip, #0
   10a82:	921a      	str	r2, [sp, #104]	; 0x68
   10a84:	f040 81b3 	bne.w	10dee <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x4b2>
   10a88:	e7ff      	b.n	10a8a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x14e>
   10a8a:	981a      	ldr	r0, [sp, #104]	; 0x68
   10a8c:	1cc1      	adds	r1, r0, #3
   10a8e:	460a      	mov	r2, r1
   10a90:	4281      	cmp	r1, r0
   10a92:	9219      	str	r2, [sp, #100]	; 0x64
   10a94:	f0c0 81b7 	bcc.w	10e06 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x4ca>
   10a98:	e7ff      	b.n	10a9a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x15e>
   10a9a:	9819      	ldr	r0, [sp, #100]	; 0x64
   10a9c:	283e      	cmp	r0, #62	; 0x3e
   10a9e:	f200 81be 	bhi.w	10e1e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x4e2>
   10aa2:	e7ff      	b.n	10aa4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x168>
   10aa4:	f644 200a 	movw	r0, #18954	; 0x4a0a
   10aa8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10aac:	9919      	ldr	r1, [sp, #100]	; 0x64
   10aae:	5c40      	ldrb	r0, [r0, r1]
   10ab0:	f000 000f 	and.w	r0, r0, #15
   10ab4:	4602      	mov	r2, r0
   10ab6:	f8ad 0170 	strh.w	r0, [sp, #368]	; 0x170
   10aba:	2006      	movs	r0, #6
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
   10abc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   10abe:	fba0 0c03 	umull	r0, ip, r0, r3
   10ac2:	f1bc 0f00 	cmp.w	ip, #0
   10ac6:	9218      	str	r2, [sp, #96]	; 0x60
   10ac8:	9017      	str	r0, [sp, #92]	; 0x5c
   10aca:	f040 81b1 	bne.w	10e30 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x4f4>
   10ace:	e7ff      	b.n	10ad0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x194>
   10ad0:	9817      	ldr	r0, [sp, #92]	; 0x5c
   10ad2:	1d01      	adds	r1, r0, #4
   10ad4:	460a      	mov	r2, r1
   10ad6:	4281      	cmp	r1, r0
   10ad8:	9216      	str	r2, [sp, #88]	; 0x58
   10ada:	f0c0 81b5 	bcc.w	10e48 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x50c>
   10ade:	e7ff      	b.n	10ae0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1a4>
   10ae0:	9816      	ldr	r0, [sp, #88]	; 0x58
   10ae2:	283e      	cmp	r0, #62	; 0x3e
   10ae4:	f200 81bc 	bhi.w	10e60 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x524>
   10ae8:	e7ff      	b.n	10aea <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1ae>
   10aea:	f644 200a 	movw	r0, #18954	; 0x4a0a
   10aee:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10af2:	9916      	ldr	r1, [sp, #88]	; 0x58
   10af4:	5c40      	ldrb	r0, [r0, r1]
   10af6:	4602      	mov	r2, r0
   10af8:	f8ad 0172 	strh.w	r0, [sp, #370]	; 0x172
        data.touches[i].x  = (x_high << 8) | x_low;
   10afc:	9818      	ldr	r0, [sp, #96]	; 0x60
   10afe:	0203      	lsls	r3, r0, #8
   10b00:	9215      	str	r2, [sp, #84]	; 0x54
   10b02:	9314      	str	r3, [sp, #80]	; 0x50
   10b04:	e7ff      	b.n	10b06 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1ca>
   10b06:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10b08:	2809      	cmp	r0, #9
   10b0a:	f200 81b2 	bhi.w	10e72 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x536>
   10b0e:	e7ff      	b.n	10b10 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1d4>
   10b10:	9814      	ldr	r0, [sp, #80]	; 0x50
   10b12:	9915      	ldr	r1, [sp, #84]	; 0x54
   10b14:	ea40 0201 	orr.w	r2, r0, r1
   10b18:	9b26      	ldr	r3, [sp, #152]	; 0x98
   10b1a:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
   10b1e:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
   10b22:	2206      	movs	r2, #6
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
   10b24:	fba2 2e0c 	umull	r2, lr, r2, ip
   10b28:	f1be 0f00 	cmp.w	lr, #0
   10b2c:	9213      	str	r2, [sp, #76]	; 0x4c
   10b2e:	f040 81a9 	bne.w	10e84 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x548>
   10b32:	e7ff      	b.n	10b34 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1f8>
   10b34:	9813      	ldr	r0, [sp, #76]	; 0x4c
   10b36:	1d41      	adds	r1, r0, #5
   10b38:	460a      	mov	r2, r1
   10b3a:	4281      	cmp	r1, r0
   10b3c:	9212      	str	r2, [sp, #72]	; 0x48
   10b3e:	f0c0 81ad 	bcc.w	10e9c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x560>
   10b42:	e7ff      	b.n	10b44 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x208>
   10b44:	9812      	ldr	r0, [sp, #72]	; 0x48
   10b46:	283e      	cmp	r0, #62	; 0x3e
   10b48:	f200 81b4 	bhi.w	10eb4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x578>
   10b4c:	e7ff      	b.n	10b4e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x212>
   10b4e:	f644 200a 	movw	r0, #18954	; 0x4a0a
   10b52:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10b56:	9912      	ldr	r1, [sp, #72]	; 0x48
   10b58:	5c40      	ldrb	r0, [r0, r1]
   10b5a:	f000 000f 	and.w	r0, r0, #15
   10b5e:	4602      	mov	r2, r0
   10b60:	f8ad 0174 	strh.w	r0, [sp, #372]	; 0x174
   10b64:	2006      	movs	r0, #6
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
   10b66:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   10b68:	fba0 0c03 	umull	r0, ip, r0, r3
   10b6c:	f1bc 0f00 	cmp.w	ip, #0
   10b70:	9211      	str	r2, [sp, #68]	; 0x44
   10b72:	9010      	str	r0, [sp, #64]	; 0x40
   10b74:	f040 81a7 	bne.w	10ec6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x58a>
   10b78:	e7ff      	b.n	10b7a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x23e>
   10b7a:	9810      	ldr	r0, [sp, #64]	; 0x40
   10b7c:	1d81      	adds	r1, r0, #6
   10b7e:	460a      	mov	r2, r1
   10b80:	4281      	cmp	r1, r0
   10b82:	920f      	str	r2, [sp, #60]	; 0x3c
   10b84:	f0c0 81ab 	bcc.w	10ede <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5a2>
   10b88:	e7ff      	b.n	10b8a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x24e>
   10b8a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10b8c:	283e      	cmp	r0, #62	; 0x3e
   10b8e:	f200 81b2 	bhi.w	10ef6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5ba>
   10b92:	e7ff      	b.n	10b94 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x258>
   10b94:	f644 200a 	movw	r0, #18954	; 0x4a0a
   10b98:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10b9c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   10b9e:	5c40      	ldrb	r0, [r0, r1]
   10ba0:	4602      	mov	r2, r0
   10ba2:	f8ad 0176 	strh.w	r0, [sp, #374]	; 0x176
        data.touches[i].y  = (y_high << 8) | y_low;
   10ba6:	9811      	ldr	r0, [sp, #68]	; 0x44
   10ba8:	0203      	lsls	r3, r0, #8
   10baa:	920e      	str	r2, [sp, #56]	; 0x38
   10bac:	930d      	str	r3, [sp, #52]	; 0x34
   10bae:	e7ff      	b.n	10bb0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x274>
   10bb0:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10bb2:	2809      	cmp	r0, #9
   10bb4:	f200 81a8 	bhi.w	10f08 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5cc>
   10bb8:	e7ff      	b.n	10bba <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x27e>
   10bba:	9826      	ldr	r0, [sp, #152]	; 0x98
   10bbc:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10bbe:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   10bc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10bc4:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   10bc8:	ea43 0e0c 	orr.w	lr, r3, ip
   10bcc:	f8a2 e002 	strh.w	lr, [r2, #2]
   10bd0:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
   10bd2:	fba2 2e01 	umull	r2, lr, r2, r1
   10bd6:	f1be 0f00 	cmp.w	lr, #0
   10bda:	920c      	str	r2, [sp, #48]	; 0x30
   10bdc:	f040 819d 	bne.w	10f1a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5de>
   10be0:	e7ff      	b.n	10be2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2a6>
   10be2:	980c      	ldr	r0, [sp, #48]	; 0x30
   10be4:	1cc1      	adds	r1, r0, #3
   10be6:	460a      	mov	r2, r1
   10be8:	4281      	cmp	r1, r0
   10bea:	920b      	str	r2, [sp, #44]	; 0x2c
   10bec:	f0c0 81a1 	bcc.w	10f32 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5f6>
   10bf0:	e7ff      	b.n	10bf2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2b6>
   10bf2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10bf4:	283e      	cmp	r0, #62	; 0x3e
   10bf6:	f200 81a8 	bhi.w	10f4a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x60e>
   10bfa:	e7ff      	b.n	10bfc <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2c0>
   10bfc:	f644 200a 	movw	r0, #18954	; 0x4a0a
   10c00:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10c04:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10c06:	5c40      	ldrb	r0, [r0, r1]
   10c08:	0980      	lsrs	r0, r0, #6
   10c0a:	900a      	str	r0, [sp, #40]	; 0x28
   10c0c:	e7ff      	b.n	10c0e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2d2>
        data.touches[i].action =
   10c0e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10c10:	2809      	cmp	r0, #9
   10c12:	f200 81a3 	bhi.w	10f5c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x620>
   10c16:	e7ff      	b.n	10c18 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2dc>
   10c18:	9826      	ldr	r0, [sp, #152]	; 0x98
   10c1a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10c1c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   10c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10c22:	7113      	strb	r3, [r2, #4]
   10c24:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
   10c26:	fba2 2c01 	umull	r2, ip, r2, r1
   10c2a:	f1bc 0f00 	cmp.w	ip, #0
   10c2e:	9209      	str	r2, [sp, #36]	; 0x24
   10c30:	f040 819d 	bne.w	10f6e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x632>
   10c34:	e7ff      	b.n	10c36 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2fa>
   10c36:	9809      	ldr	r0, [sp, #36]	; 0x24
   10c38:	1d41      	adds	r1, r0, #5
   10c3a:	460a      	mov	r2, r1
   10c3c:	4281      	cmp	r1, r0
   10c3e:	9208      	str	r2, [sp, #32]
   10c40:	f0c0 81a1 	bcc.w	10f86 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x64a>
   10c44:	e7ff      	b.n	10c46 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x30a>
   10c46:	9808      	ldr	r0, [sp, #32]
   10c48:	283e      	cmp	r0, #62	; 0x3e
   10c4a:	f200 81a8 	bhi.w	10f9e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x662>
   10c4e:	e7ff      	b.n	10c50 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x314>
   10c50:	f644 200a 	movw	r0, #18954	; 0x4a0a
   10c54:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10c58:	9908      	ldr	r1, [sp, #32]
   10c5a:	5c40      	ldrb	r0, [r0, r1]
   10c5c:	0900      	lsrs	r0, r0, #4
   10c5e:	9007      	str	r0, [sp, #28]
   10c60:	e7ff      	b.n	10c62 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x326>
        data.touches[i].finger =
   10c62:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10c64:	2809      	cmp	r0, #9
   10c66:	f200 81a3 	bhi.w	10fb0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x674>
   10c6a:	e7ff      	b.n	10c6c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x330>
   10c6c:	9826      	ldr	r0, [sp, #152]	; 0x98
   10c6e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10c70:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   10c74:	9b07      	ldr	r3, [sp, #28]
   10c76:	7153      	strb	r3, [r2, #5]
   10c78:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
   10c7a:	fba2 2c01 	umull	r2, ip, r2, r1
   10c7e:	f1bc 0f00 	cmp.w	ip, #0
   10c82:	9206      	str	r2, [sp, #24]
   10c84:	f040 819d 	bne.w	10fc2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x686>
   10c88:	e7ff      	b.n	10c8a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x34e>
   10c8a:	9806      	ldr	r0, [sp, #24]
   10c8c:	1dc1      	adds	r1, r0, #7
   10c8e:	460a      	mov	r2, r1
   10c90:	4281      	cmp	r1, r0
   10c92:	9205      	str	r2, [sp, #20]
   10c94:	f0c0 81a1 	bcc.w	10fda <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x69e>
   10c98:	e7ff      	b.n	10c9a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x35e>
   10c9a:	9805      	ldr	r0, [sp, #20]
   10c9c:	283e      	cmp	r0, #62	; 0x3e
   10c9e:	f200 81a8 	bhi.w	10ff2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x6b6>
   10ca2:	e7ff      	b.n	10ca4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x368>
   10ca4:	f644 200a 	movw	r0, #18954	; 0x4a0a
   10ca8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10cac:	9905      	ldr	r1, [sp, #20]
   10cae:	5c40      	ldrb	r0, [r0, r1]
        data.touches[i].pressure =
   10cb0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   10cb2:	2a09      	cmp	r2, #9
   10cb4:	9004      	str	r0, [sp, #16]
   10cb6:	f200 81a5 	bhi.w	11004 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x6c8>
   10cba:	e7ff      	b.n	10cbc <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x380>
   10cbc:	9826      	ldr	r0, [sp, #152]	; 0x98
   10cbe:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10cc0:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   10cc4:	9b04      	ldr	r3, [sp, #16]
   10cc6:	7193      	strb	r3, [r2, #6]
   10cc8:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
   10cca:	fba2 2c01 	umull	r2, ip, r2, r1
   10cce:	f1bc 0f00 	cmp.w	ip, #0
   10cd2:	9203      	str	r2, [sp, #12]
   10cd4:	f040 819f 	bne.w	11016 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x6da>
   10cd8:	e7ff      	b.n	10cda <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x39e>
   10cda:	9803      	ldr	r0, [sp, #12]
   10cdc:	f100 0108 	add.w	r1, r0, #8
   10ce0:	460a      	mov	r2, r1
   10ce2:	4281      	cmp	r1, r0
   10ce4:	9202      	str	r2, [sp, #8]
   10ce6:	f0c0 81a2 	bcc.w	1102e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x6f2>
   10cea:	e7ff      	b.n	10cec <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3b0>
   10cec:	9802      	ldr	r0, [sp, #8]
   10cee:	283e      	cmp	r0, #62	; 0x3e
   10cf0:	f200 81a9 	bhi.w	11046 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x70a>
   10cf4:	e7ff      	b.n	10cf6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3ba>
   10cf6:	f644 200a 	movw	r0, #18954	; 0x4a0a
   10cfa:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10cfe:	9902      	ldr	r1, [sp, #8]
   10d00:	5c40      	ldrb	r0, [r0, r1]
   10d02:	0900      	lsrs	r0, r0, #4
   10d04:	9001      	str	r0, [sp, #4]
   10d06:	e7ff      	b.n	10d08 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3cc>
        data.touches[i].area =
   10d08:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10d0a:	2809      	cmp	r0, #9
   10d0c:	f200 81a4 	bhi.w	11058 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x71c>
   10d10:	e7ff      	b.n	10d12 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3d6>
   10d12:	9826      	ldr	r0, [sp, #152]	; 0x98
   10d14:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10d16:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   10d1a:	9b01      	ldr	r3, [sp, #4]
   10d1c:	71d3      	strb	r3, [r2, #7]
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
   10d1e:	290a      	cmp	r1, #10
   10d20:	d326      	bcc.n	10d70 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x434>
   10d22:	e1a2      	b.n	1106a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x72e>
   10d24:	2001      	movs	r0, #1
   10d26:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
   10d2a:	e009      	b.n	10d40 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x404>
   10d2c:	2000      	movs	r0, #0
   10d2e:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
   10d32:	e005      	b.n	10d40 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x404>
            && (data.point_num == 0) {
   10d34:	9826      	ldr	r0, [sp, #152]	; 0x98
   10d36:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
   10d3a:	2900      	cmp	r1, #0
   10d3c:	d0f2      	beq.n	10d24 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3e8>
   10d3e:	e7f5      	b.n	10d2c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3f0>
   10d40:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
   10d44:	07c0      	lsls	r0, r0, #31
   10d46:	2800      	cmp	r0, #0
   10d48:	d123      	bne.n	10d92 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x456>
   10d4a:	e021      	b.n	10d90 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x454>
   10d4c:	2001      	movs	r0, #1
   10d4e:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
   10d52:	e007      	b.n	10d64 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x428>
   10d54:	2000      	movs	r0, #0
   10d56:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
   10d5a:	e003      	b.n	10d64 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x428>
   10d5c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10d5e:	280a      	cmp	r0, #10
   10d60:	d30e      	bcc.n	10d80 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x444>
   10d62:	e18b      	b.n	1107c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x740>
   10d64:	f89d 015b 	ldrb.w	r0, [sp, #347]	; 0x15b
   10d68:	07c0      	lsls	r0, r0, #31
   10d6a:	2800      	cmp	r0, #0
   10d6c:	d1e2      	bne.n	10d34 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3f8>
   10d6e:	e7dd      	b.n	10d2c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3f0>
   10d70:	9826      	ldr	r0, [sp, #152]	; 0x98
   10d72:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10d74:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   10d78:	7912      	ldrb	r2, [r2, #4]
   10d7a:	2a00      	cmp	r2, #0
   10d7c:	d0e6      	beq.n	10d4c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x410>
   10d7e:	e7ed      	b.n	10d5c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x420>
   10d80:	9826      	ldr	r0, [sp, #152]	; 0x98
   10d82:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10d84:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   10d88:	7912      	ldrb	r2, [r2, #4]
   10d8a:	2a02      	cmp	r2, #2
   10d8c:	d0de      	beq.n	10d4c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x410>
   10d8e:	e7e1      	b.n	10d54 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x418>
    for i in 0..CFG_MAX_TOUCH_POINTS {
   10d90:	e626      	b.n	109e0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xa4>
            break;
   10d92:	e66b      	b.n	10a6c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x130>
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
   10d94:	f244 5090 	movw	r0, #17808	; 0x4590
   10d98:	f2c0 0002 	movt	r0, #2
   10d9c:	f244 5274 	movw	r2, #17780	; 0x4574
   10da0:	f2c0 0202 	movt	r2, #2
   10da4:	2121      	movs	r1, #33	; 0x21
   10da6:	f004 fc95 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10daa:	defe      	udf	#254	; 0xfe
   10dac:	f244 50d0 	movw	r0, #17872	; 0x45d0
   10db0:	f2c0 0002 	movt	r0, #2
   10db4:	f244 52b4 	movw	r2, #17844	; 0x45b4
   10db8:	f2c0 0202 	movt	r2, #2
   10dbc:	211c      	movs	r1, #28
   10dbe:	f004 fc89 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10dc2:	defe      	udf	#254	; 0xfe
   10dc4:	f244 50ec 	movw	r0, #17900	; 0x45ec
   10dc8:	f2c0 0002 	movt	r0, #2
   10dcc:	223f      	movs	r2, #63	; 0x3f
   10dce:	991d      	ldr	r1, [sp, #116]	; 0x74
   10dd0:	f004 fc96 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10dd4:	defe      	udf	#254	; 0xfe
        data.count += 1;
   10dd6:	f244 50d0 	movw	r0, #17872	; 0x45d0
   10dda:	f2c0 0002 	movt	r0, #2
   10dde:	f244 52fc 	movw	r2, #17916	; 0x45fc
   10de2:	f2c0 0202 	movt	r2, #2
   10de6:	211c      	movs	r1, #28
   10de8:	f004 fc74 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10dec:	defe      	udf	#254	; 0xfe
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
   10dee:	f244 5090 	movw	r0, #17808	; 0x4590
   10df2:	f2c0 0002 	movt	r0, #2
   10df6:	f244 620c 	movw	r2, #17932	; 0x460c
   10dfa:	f2c0 0202 	movt	r2, #2
   10dfe:	2121      	movs	r1, #33	; 0x21
   10e00:	f004 fc68 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10e04:	defe      	udf	#254	; 0xfe
   10e06:	f244 50d0 	movw	r0, #17872	; 0x45d0
   10e0a:	f2c0 0002 	movt	r0, #2
   10e0e:	f244 621c 	movw	r2, #17948	; 0x461c
   10e12:	f2c0 0202 	movt	r2, #2
   10e16:	211c      	movs	r1, #28
   10e18:	f004 fc5c 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10e1c:	defe      	udf	#254	; 0xfe
   10e1e:	f244 602c 	movw	r0, #17964	; 0x462c
   10e22:	f2c0 0002 	movt	r0, #2
   10e26:	223f      	movs	r2, #63	; 0x3f
   10e28:	9919      	ldr	r1, [sp, #100]	; 0x64
   10e2a:	f004 fc69 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10e2e:	defe      	udf	#254	; 0xfe
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
   10e30:	f244 5090 	movw	r0, #17808	; 0x4590
   10e34:	f2c0 0002 	movt	r0, #2
   10e38:	f244 623c 	movw	r2, #17980	; 0x463c
   10e3c:	f2c0 0202 	movt	r2, #2
   10e40:	2121      	movs	r1, #33	; 0x21
   10e42:	f004 fc47 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10e46:	defe      	udf	#254	; 0xfe
   10e48:	f244 50d0 	movw	r0, #17872	; 0x45d0
   10e4c:	f2c0 0002 	movt	r0, #2
   10e50:	f244 624c 	movw	r2, #17996	; 0x464c
   10e54:	f2c0 0202 	movt	r2, #2
   10e58:	211c      	movs	r1, #28
   10e5a:	f004 fc3b 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10e5e:	defe      	udf	#254	; 0xfe
   10e60:	f244 605c 	movw	r0, #18012	; 0x465c
   10e64:	f2c0 0002 	movt	r0, #2
   10e68:	223f      	movs	r2, #63	; 0x3f
   10e6a:	9916      	ldr	r1, [sp, #88]	; 0x58
   10e6c:	f004 fc48 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10e70:	defe      	udf	#254	; 0xfe
        data.touches[i].x  = (x_high << 8) | x_low;
   10e72:	f244 606c 	movw	r0, #18028	; 0x466c
   10e76:	f2c0 0002 	movt	r0, #2
   10e7a:	220a      	movs	r2, #10
   10e7c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10e7e:	f004 fc3f 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10e82:	defe      	udf	#254	; 0xfe
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
   10e84:	f244 5090 	movw	r0, #17808	; 0x4590
   10e88:	f2c0 0002 	movt	r0, #2
   10e8c:	f244 627c 	movw	r2, #18044	; 0x467c
   10e90:	f2c0 0202 	movt	r2, #2
   10e94:	2121      	movs	r1, #33	; 0x21
   10e96:	f004 fc1d 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10e9a:	defe      	udf	#254	; 0xfe
   10e9c:	f244 50d0 	movw	r0, #17872	; 0x45d0
   10ea0:	f2c0 0002 	movt	r0, #2
   10ea4:	f244 628c 	movw	r2, #18060	; 0x468c
   10ea8:	f2c0 0202 	movt	r2, #2
   10eac:	211c      	movs	r1, #28
   10eae:	f004 fc11 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10eb2:	defe      	udf	#254	; 0xfe
   10eb4:	f244 609c 	movw	r0, #18076	; 0x469c
   10eb8:	f2c0 0002 	movt	r0, #2
   10ebc:	223f      	movs	r2, #63	; 0x3f
   10ebe:	9912      	ldr	r1, [sp, #72]	; 0x48
   10ec0:	f004 fc1e 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10ec4:	defe      	udf	#254	; 0xfe
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
   10ec6:	f244 5090 	movw	r0, #17808	; 0x4590
   10eca:	f2c0 0002 	movt	r0, #2
   10ece:	f244 62ac 	movw	r2, #18092	; 0x46ac
   10ed2:	f2c0 0202 	movt	r2, #2
   10ed6:	2121      	movs	r1, #33	; 0x21
   10ed8:	f004 fbfc 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10edc:	defe      	udf	#254	; 0xfe
   10ede:	f244 50d0 	movw	r0, #17872	; 0x45d0
   10ee2:	f2c0 0002 	movt	r0, #2
   10ee6:	f244 62bc 	movw	r2, #18108	; 0x46bc
   10eea:	f2c0 0202 	movt	r2, #2
   10eee:	211c      	movs	r1, #28
   10ef0:	f004 fbf0 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10ef4:	defe      	udf	#254	; 0xfe
   10ef6:	f244 60cc 	movw	r0, #18124	; 0x46cc
   10efa:	f2c0 0002 	movt	r0, #2
   10efe:	223f      	movs	r2, #63	; 0x3f
   10f00:	990f      	ldr	r1, [sp, #60]	; 0x3c
   10f02:	f004 fbfd 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10f06:	defe      	udf	#254	; 0xfe
        data.touches[i].y  = (y_high << 8) | y_low;
   10f08:	f244 60dc 	movw	r0, #18140	; 0x46dc
   10f0c:	f2c0 0002 	movt	r0, #2
   10f10:	220a      	movs	r2, #10
   10f12:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10f14:	f004 fbf4 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10f18:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
   10f1a:	f244 5090 	movw	r0, #17808	; 0x4590
   10f1e:	f2c0 0002 	movt	r0, #2
   10f22:	f244 62ec 	movw	r2, #18156	; 0x46ec
   10f26:	f2c0 0202 	movt	r2, #2
   10f2a:	2121      	movs	r1, #33	; 0x21
   10f2c:	f004 fbd2 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f30:	defe      	udf	#254	; 0xfe
   10f32:	f244 50d0 	movw	r0, #17872	; 0x45d0
   10f36:	f2c0 0002 	movt	r0, #2
   10f3a:	f244 62fc 	movw	r2, #18172	; 0x46fc
   10f3e:	f2c0 0202 	movt	r2, #2
   10f42:	211c      	movs	r1, #28
   10f44:	f004 fbc6 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f48:	defe      	udf	#254	; 0xfe
   10f4a:	f244 700c 	movw	r0, #18188	; 0x470c
   10f4e:	f2c0 0002 	movt	r0, #2
   10f52:	223f      	movs	r2, #63	; 0x3f
   10f54:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10f56:	f004 fbd3 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10f5a:	defe      	udf	#254	; 0xfe
        data.touches[i].action =
   10f5c:	f244 701c 	movw	r0, #18204	; 0x471c
   10f60:	f2c0 0002 	movt	r0, #2
   10f64:	220a      	movs	r2, #10
   10f66:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10f68:	f004 fbca 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10f6c:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
   10f6e:	f244 5090 	movw	r0, #17808	; 0x4590
   10f72:	f2c0 0002 	movt	r0, #2
   10f76:	f244 722c 	movw	r2, #18220	; 0x472c
   10f7a:	f2c0 0202 	movt	r2, #2
   10f7e:	2121      	movs	r1, #33	; 0x21
   10f80:	f004 fba8 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f84:	defe      	udf	#254	; 0xfe
   10f86:	f244 50d0 	movw	r0, #17872	; 0x45d0
   10f8a:	f2c0 0002 	movt	r0, #2
   10f8e:	f244 723c 	movw	r2, #18236	; 0x473c
   10f92:	f2c0 0202 	movt	r2, #2
   10f96:	211c      	movs	r1, #28
   10f98:	f004 fb9c 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f9c:	defe      	udf	#254	; 0xfe
   10f9e:	f244 704c 	movw	r0, #18252	; 0x474c
   10fa2:	f2c0 0002 	movt	r0, #2
   10fa6:	223f      	movs	r2, #63	; 0x3f
   10fa8:	9908      	ldr	r1, [sp, #32]
   10faa:	f004 fba9 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10fae:	defe      	udf	#254	; 0xfe
        data.touches[i].finger =
   10fb0:	f244 705c 	movw	r0, #18268	; 0x475c
   10fb4:	f2c0 0002 	movt	r0, #2
   10fb8:	220a      	movs	r2, #10
   10fba:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10fbc:	f004 fba0 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10fc0:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
   10fc2:	f244 5090 	movw	r0, #17808	; 0x4590
   10fc6:	f2c0 0002 	movt	r0, #2
   10fca:	f244 726c 	movw	r2, #18284	; 0x476c
   10fce:	f2c0 0202 	movt	r2, #2
   10fd2:	2121      	movs	r1, #33	; 0x21
   10fd4:	f004 fb7e 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10fd8:	defe      	udf	#254	; 0xfe
   10fda:	f244 50d0 	movw	r0, #17872	; 0x45d0
   10fde:	f2c0 0002 	movt	r0, #2
   10fe2:	f244 727c 	movw	r2, #18300	; 0x477c
   10fe6:	f2c0 0202 	movt	r2, #2
   10fea:	211c      	movs	r1, #28
   10fec:	f004 fb72 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10ff0:	defe      	udf	#254	; 0xfe
   10ff2:	f244 708c 	movw	r0, #18316	; 0x478c
   10ff6:	f2c0 0002 	movt	r0, #2
   10ffa:	223f      	movs	r2, #63	; 0x3f
   10ffc:	9905      	ldr	r1, [sp, #20]
   10ffe:	f004 fb7f 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11002:	defe      	udf	#254	; 0xfe
        data.touches[i].pressure =
   11004:	f244 709c 	movw	r0, #18332	; 0x479c
   11008:	f2c0 0002 	movt	r0, #2
   1100c:	220a      	movs	r2, #10
   1100e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11010:	f004 fb76 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11014:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
   11016:	f244 5090 	movw	r0, #17808	; 0x4590
   1101a:	f2c0 0002 	movt	r0, #2
   1101e:	f244 72ac 	movw	r2, #18348	; 0x47ac
   11022:	f2c0 0202 	movt	r2, #2
   11026:	2121      	movs	r1, #33	; 0x21
   11028:	f004 fb54 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1102c:	defe      	udf	#254	; 0xfe
   1102e:	f244 50d0 	movw	r0, #17872	; 0x45d0
   11032:	f2c0 0002 	movt	r0, #2
   11036:	f244 72bc 	movw	r2, #18364	; 0x47bc
   1103a:	f2c0 0202 	movt	r2, #2
   1103e:	211c      	movs	r1, #28
   11040:	f004 fb48 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11044:	defe      	udf	#254	; 0xfe
   11046:	f244 70cc 	movw	r0, #18380	; 0x47cc
   1104a:	f2c0 0002 	movt	r0, #2
   1104e:	223f      	movs	r2, #63	; 0x3f
   11050:	9902      	ldr	r1, [sp, #8]
   11052:	f004 fb55 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11056:	defe      	udf	#254	; 0xfe
        data.touches[i].area =
   11058:	f244 70dc 	movw	r0, #18396	; 0x47dc
   1105c:	f2c0 0002 	movt	r0, #2
   11060:	220a      	movs	r2, #10
   11062:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11064:	f004 fb4c 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11068:	defe      	udf	#254	; 0xfe
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
   1106a:	f244 70ec 	movw	r0, #18412	; 0x47ec
   1106e:	f2c0 0002 	movt	r0, #2
   11072:	220a      	movs	r2, #10
   11074:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11076:	f004 fb43 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1107a:	defe      	udf	#254	; 0xfe
   1107c:	f244 70fc 	movw	r0, #18428	; 0x47fc
   11080:	f2c0 0002 	movt	r0, #2
   11084:	220a      	movs	r2, #10
   11086:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11088:	f004 fb3a 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1108c:	defe      	udf	#254	; 0xfe

0001108e <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E>:

/// Event that will be forwarded to the Event Queue when a touch interrupt is triggered
static mut TOUCH_EVENT: os_event = fill_zero!(os_event);  //  Init all fields to 0 or NULL

/// Read a range of I2C registers from the I2C address `addr` (7-bit address), starting at `start_register` for count `num_registers`. Save into `buffer`.
fn read_register_range(addr: u8, start_register: u8, num_registers: u8, buffer: &mut[u8]) -> MynewtResult<()> {
   1108e:	b5b0      	push	{r4, r5, r7, lr}
   11090:	b094      	sub	sp, #80	; 0x50
   11092:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
   11096:	4696      	mov	lr, r2
   11098:	460c      	mov	r4, r1
   1109a:	4605      	mov	r5, r0
   1109c:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
   110a0:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
   110a4:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
   110a8:	9310      	str	r3, [sp, #64]	; 0x40
   110aa:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
   110ae:	4618      	mov	r0, r3
   110b0:	4661      	mov	r1, ip
   110b2:	930d      	str	r3, [sp, #52]	; 0x34
   110b4:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   110b8:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   110bc:	940a      	str	r4, [sp, #40]	; 0x28
   110be:	9509      	str	r5, [sp, #36]	; 0x24
   110c0:	f000 fe09 	bl	11cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   110c4:	9008      	str	r0, [sp, #32]
   110c6:	e7ff      	b.n	110c8 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x3a>
   110c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   110ca:	b2c1      	uxtb	r1, r0
   110cc:	9a08      	ldr	r2, [sp, #32]
   110ce:	428a      	cmp	r2, r1
   110d0:	d30d      	bcc.n	110ee <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x60>
   110d2:	e7ff      	b.n	110d4 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x46>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
   110d4:	980a      	ldr	r0, [sp, #40]	; 0x28
   110d6:	b2c1      	uxtb	r1, r0
   110d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   110da:	fa51 f182 	uxtab	r1, r1, r2
   110de:	b2cb      	uxtb	r3, r1
   110e0:	468c      	mov	ip, r1
   110e2:	428b      	cmp	r3, r1
   110e4:	f8cd c01c 	str.w	ip, [sp, #28]
   110e8:	f040 8092 	bne.w	11210 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x182>
   110ec:	e00b      	b.n	11106 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x78>
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
   110ee:	f644 000c 	movw	r0, #18444	; 0x480c
   110f2:	f2c0 0002 	movt	r0, #2
   110f6:	f644 0214 	movw	r2, #18452	; 0x4814
   110fa:	f2c0 0202 	movt	r2, #2
   110fe:	2107      	movs	r1, #7
   11100:	f004 fae8 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11104:	defe      	udf	#254	; 0xfe
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
   11106:	9807      	ldr	r0, [sp, #28]
   11108:	b241      	sxtb	r1, r0
   1110a:	2900      	cmp	r1, #0
   1110c:	d411      	bmi.n	11132 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0xa4>
   1110e:	e7ff      	b.n	11110 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x82>
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Write Mode (1 bit, value 0)...
    //    Followed by starting Register Number (8 bits)
    unsafe { 
        I2C_BUFFER[0] = start_register;  //  I2C Packet buffer contains starting Register Number (1 byte)
   11110:	f644 2064 	movw	r0, #19044	; 0x4a64
   11114:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11118:	990a      	ldr	r1, [sp, #40]	; 0x28
   1111a:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;         //  I2C Packet address (7 bits)
   1111c:	f644 225c 	movw	r2, #19036	; 0x4a5c
   11120:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11124:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11126:	7013      	strb	r3, [r2, #0]
   11128:	2101      	movs	r1, #1
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
   1112a:	f000 fdd4 	bl	11cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1112e:	9006      	str	r0, [sp, #24]
   11130:	e00b      	b.n	1114a <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0xbc>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
   11132:	f244 5008 	movw	r0, #17672	; 0x4508
   11136:	f2c0 0002 	movt	r0, #2
   1113a:	f644 0234 	movw	r2, #18484	; 0x4834
   1113e:	f2c0 0202 	movt	r2, #2
   11142:	2108      	movs	r1, #8
   11144:	f004 fac6 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11148:	defe      	udf	#254	; 0xfe
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
   1114a:	f644 205c 	movw	r0, #19036	; 0x4a5c
   1114e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11152:	9906      	ldr	r1, [sp, #24]
   11154:	8041      	strh	r1, [r0, #2]
        I2C_DATA.buffer = I2C_BUFFER.as_mut_ptr();  //  I2C Packet data points to packet buffer
   11156:	f644 2064 	movw	r0, #19044	; 0x4a64
   1115a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1115e:	2101      	movs	r1, #1
   11160:	f000 fda2 	bl	11ca8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   11164:	9005      	str	r0, [sp, #20]
   11166:	e7ff      	b.n	11168 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0xda>
   11168:	f644 205c 	movw	r0, #19036	; 0x4a5c
   1116c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11170:	9905      	ldr	r1, [sp, #20]
   11172:	6041      	str	r1, [r0, #4]
   11174:	2201      	movs	r2, #1
   11176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1117a:	f04f 0c00 	mov.w	ip, #0
    };
    let _rc1 = unsafe { hal::hal_i2c_master_write(1, &mut I2C_DATA, 1000, 0) };  //  No stop yet, must continue even if we hit an error
   1117e:	9004      	str	r0, [sp, #16]
   11180:	4610      	mov	r0, r2
   11182:	9904      	ldr	r1, [sp, #16]
   11184:	461a      	mov	r2, r3
   11186:	4663      	mov	r3, ip
   11188:	f006 fcca 	bl	17b20 <hal_i2c_master_write>
   1118c:	9012      	str	r0, [sp, #72]	; 0x48
   1118e:	e7ff      	b.n	11190 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x102>
    //  Step 3: Prepare to receive the stream of I2C Device Register values...
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Read Mode (1 bit, value 1)
    unsafe { 
        I2C_BUFFER[0] = 0x00;     //  I2C Packet buffer should be empty (provided by caller)
   11190:	f644 2064 	movw	r0, #19044	; 0x4a64
   11194:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11198:	2100      	movs	r1, #0
   1119a:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;  //  I2C Packet address (7 bits)
   1119c:	f644 205c 	movw	r0, #19036	; 0x4a5c
   111a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   111a4:	9909      	ldr	r1, [sp, #36]	; 0x24
   111a6:	7001      	strb	r1, [r0, #0]
        I2C_DATA.len = num_registers as u16;    //  I2C Packet data size is number of Registers to read
   111a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   111aa:	b2d3      	uxtb	r3, r2
   111ac:	8043      	strh	r3, [r0, #2]
        I2C_DATA.buffer = buffer.as_mut_ptr();  //  I2C Packet data points to packet buffer
   111ae:	980d      	ldr	r0, [sp, #52]	; 0x34
   111b0:	990c      	ldr	r1, [sp, #48]	; 0x30
   111b2:	f000 fd79 	bl	11ca8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   111b6:	9003      	str	r0, [sp, #12]
   111b8:	e7ff      	b.n	111ba <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x12c>
   111ba:	f644 205c 	movw	r0, #19036	; 0x4a5c
   111be:	f2c2 0000 	movt	r0, #8192	; 0x2000
   111c2:	9903      	ldr	r1, [sp, #12]
   111c4:	6041      	str	r1, [r0, #4]
   111c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   111ca:	2301      	movs	r3, #1
    };
    //  Step 4: Receive the requested number of Register values from I2C Device (1 byte per register)
    //  Step 5: Send the Stop Condition (Low to High SDA Transition)
    let rc2 = unsafe { hal::hal_i2c_master_read(1, &mut I2C_DATA, 1000, 1) };
   111cc:	9002      	str	r0, [sp, #8]
   111ce:	4618      	mov	r0, r3
   111d0:	9902      	ldr	r1, [sp, #8]
   111d2:	f006 fd39 	bl	17c48 <hal_i2c_master_read>
   111d6:	4601      	mov	r1, r0
   111d8:	9013      	str	r0, [sp, #76]	; 0x4c
   111da:	9101      	str	r1, [sp, #4]
   111dc:	e7ff      	b.n	111de <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x150>
    if rc2 == hal::HAL_I2C_ERR_ADDR_NACK as i32 {
   111de:	9801      	ldr	r0, [sp, #4]
   111e0:	2804      	cmp	r0, #4
   111e2:	d005      	beq.n	111f0 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x162>
   111e4:	e7ff      	b.n	111e6 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x158>
   111e6:	2000      	movs	r0, #0
        ////assert!(false, "i2c fail");  //  I2C read failed
        console::print("i2c fail\n"); ////
        return Ok(());               //  TODO: Return an error
    }
    Ok(())
   111e8:	900e      	str	r0, [sp, #56]	; 0x38
   111ea:	2001      	movs	r0, #1
   111ec:	900e      	str	r0, [sp, #56]	; 0x38
}
   111ee:	e00c      	b.n	1120a <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x17c>
        console::print("i2c fail\n"); ////
   111f0:	f644 0044 	movw	r0, #18500	; 0x4844
   111f4:	f2c0 0002 	movt	r0, #2
   111f8:	2109      	movs	r1, #9
   111fa:	f7f7 ff7d 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
   111fe:	e7ff      	b.n	11200 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x172>
   11200:	2000      	movs	r0, #0
        return Ok(());               //  TODO: Return an error
   11202:	900e      	str	r0, [sp, #56]	; 0x38
   11204:	2001      	movs	r0, #1
   11206:	900e      	str	r0, [sp, #56]	; 0x38
   11208:	e7ff      	b.n	1120a <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x17c>
}
   1120a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1120c:	b014      	add	sp, #80	; 0x50
   1120e:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
   11210:	f244 50d0 	movw	r0, #17872	; 0x45d0
   11214:	f2c0 0002 	movt	r0, #2
   11218:	f644 0224 	movw	r2, #18468	; 0x4824
   1121c:	f2c0 0202 	movt	r2, #2
   11220:	211c      	movs	r1, #28
   11222:	f004 fa57 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11226:	defe      	udf	#254	; 0xfe

00011228 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>:
    fn le(&self, other: &LevelFilter) -> bool {
   11228:	b082      	sub	sp, #8
   1122a:	9000      	str	r0, [sp, #0]
   1122c:	9101      	str	r1, [sp, #4]
        *self as usize <= *other as usize
   1122e:	6800      	ldr	r0, [r0, #0]
   11230:	6809      	ldr	r1, [r1, #0]
   11232:	2200      	movs	r2, #0
   11234:	4288      	cmp	r0, r1
   11236:	bf98      	it	ls
   11238:	2201      	movls	r2, #1
    }
   1123a:	4610      	mov	r0, r2
   1123c:	b002      	add	sp, #8
   1123e:	4770      	bx	lr

00011240 <_ZN22piet_embedded_graphics7display18set_display_pixels17he48c5c43fd96ddebE>:
        item
    ).expect("draw blocks fail");
}

/// Draw the pixel colours to the display at the window from (sx,sy) to (ex,ey)
pub fn set_display_pixels<P: IntoIterator<Item = u16>>(sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
   11240:	b5f0      	push	{r4, r5, r6, r7, lr}
   11242:	b08d      	sub	sp, #52	; 0x34
   11244:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   11248:	469e      	mov	lr, r3
   1124a:	4614      	mov	r4, r2
   1124c:	460d      	mov	r5, r1
   1124e:	4606      	mov	r6, r0
   11250:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
   11254:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
   11258:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
   1125c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    unsafe { DISPLAY.set_pixels(sx, sy, ex, ey, colors) }
   11260:	466f      	mov	r7, sp
   11262:	f8c7 c004 	str.w	ip, [r7, #4]
   11266:	603b      	str	r3, [r7, #0]
   11268:	f240 1348 	movw	r3, #328	; 0x148
   1126c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11270:	900a      	str	r0, [sp, #40]	; 0x28
   11272:	4618      	mov	r0, r3
   11274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11276:	9109      	str	r1, [sp, #36]	; 0x24
   11278:	4619      	mov	r1, r3
   1127a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   1127e:	9208      	str	r2, [sp, #32]
   11280:	4662      	mov	r2, ip
   11282:	9b08      	ldr	r3, [sp, #32]
   11284:	f8cd e01c 	str.w	lr, [sp, #28]
   11288:	9406      	str	r4, [sp, #24]
   1128a:	9505      	str	r5, [sp, #20]
   1128c:	9604      	str	r6, [sp, #16]
   1128e:	f003 fb4c 	bl	1492a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E>
   11292:	9003      	str	r0, [sp, #12]
   11294:	e7ff      	b.n	11296 <_ZN22piet_embedded_graphics7display18set_display_pixels17he48c5c43fd96ddebE+0x56>
}
   11296:	9803      	ldr	r0, [sp, #12]
   11298:	f000 0001 	and.w	r0, r0, #1
   1129c:	b00d      	add	sp, #52	; 0x34
   1129e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000112a0 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>:
   112a0:	b510      	push	{r4, lr}
   112a2:	b088      	sub	sp, #32
   112a4:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   112a8:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
   112ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   112ae:	9102      	str	r1, [sp, #8]
   112b0:	9203      	str	r2, [sp, #12]
   112b2:	9304      	str	r3, [sp, #16]
   112b4:	9405      	str	r4, [sp, #20]
   112b6:	f8cd e018 	str.w	lr, [sp, #24]
   112ba:	f8cd c01c 	str.w	ip, [sp, #28]
   112be:	f8cd e000 	str.w	lr, [sp]
   112c2:	f8cd c004 	str.w	ip, [sp, #4]
   112c6:	6001      	str	r1, [r0, #0]
   112c8:	6042      	str	r2, [r0, #4]
   112ca:	9900      	ldr	r1, [sp, #0]
   112cc:	9a01      	ldr	r2, [sp, #4]
   112ce:	6081      	str	r1, [r0, #8]
   112d0:	60c2      	str	r2, [r0, #12]
   112d2:	6103      	str	r3, [r0, #16]
   112d4:	6144      	str	r4, [r0, #20]
   112d6:	b008      	add	sp, #32
   112d8:	bd10      	pop	{r4, pc}

000112da <_ZN4core3fmt9Arguments6new_v117h745a95d658ce50bcE>:
   112da:	b580      	push	{r7, lr}
   112dc:	b086      	sub	sp, #24
   112de:	f8dd c020 	ldr.w	ip, [sp, #32]
   112e2:	9102      	str	r1, [sp, #8]
   112e4:	9203      	str	r2, [sp, #12]
   112e6:	9304      	str	r3, [sp, #16]
   112e8:	f8cd c014 	str.w	ip, [sp, #20]
   112ec:	f04f 0e00 	mov.w	lr, #0
   112f0:	f8cd e004 	str.w	lr, [sp, #4]
   112f4:	f8cd e000 	str.w	lr, [sp]
   112f8:	f8cd e000 	str.w	lr, [sp]
   112fc:	6001      	str	r1, [r0, #0]
   112fe:	6042      	str	r2, [r0, #4]
   11300:	9900      	ldr	r1, [sp, #0]
   11302:	9a01      	ldr	r2, [sp, #4]
   11304:	6081      	str	r1, [r0, #8]
   11306:	60c2      	str	r2, [r0, #12]
   11308:	6103      	str	r3, [r0, #16]
   1130a:	f8c0 c014 	str.w	ip, [r0, #20]
   1130e:	b006      	add	sp, #24
   11310:	bd80      	pop	{r7, pc}

00011312 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>:
   11312:	b580      	push	{r7, lr}
   11314:	b086      	sub	sp, #24
   11316:	460a      	mov	r2, r1
   11318:	9004      	str	r0, [sp, #16]
   1131a:	f88d 1017 	strb.w	r1, [sp, #23]
   1131e:	9203      	str	r2, [sp, #12]
   11320:	f000 fd5d 	bl	11dde <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   11324:	9002      	str	r0, [sp, #8]
   11326:	e7ff      	b.n	11328 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE+0x16>
   11328:	9802      	ldr	r0, [sp, #8]
   1132a:	9903      	ldr	r1, [sp, #12]
   1132c:	f000 fd70 	bl	11e10 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   11330:	9001      	str	r0, [sp, #4]
   11332:	e7ff      	b.n	11334 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE+0x22>
   11334:	9801      	ldr	r0, [sp, #4]
   11336:	b006      	add	sp, #24
   11338:	bd80      	pop	{r7, pc}

0001133a <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E>:
   1133a:	b580      	push	{r7, lr}
   1133c:	b084      	sub	sp, #16
   1133e:	4601      	mov	r1, r0
   11340:	f88d 000f 	strb.w	r0, [sp, #15]
   11344:	9102      	str	r1, [sp, #8]
   11346:	f003 fc8a 	bl	14c5e <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h8e5f04233c93701aE>
   1134a:	9001      	str	r0, [sp, #4]
   1134c:	e7ff      	b.n	1134e <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E+0x14>
   1134e:	9801      	ldr	r0, [sp, #4]
   11350:	b004      	add	sp, #16
   11352:	bd80      	pop	{r7, pc}

00011354 <_ZN4core3mem4swap17h21afb25e2d195463E>:
   11354:	b580      	push	{r7, lr}
   11356:	b082      	sub	sp, #8
   11358:	9000      	str	r0, [sp, #0]
   1135a:	9101      	str	r1, [sp, #4]
   1135c:	f003 fcb2 	bl	14cc4 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E>
   11360:	e7ff      	b.n	11362 <_ZN4core3mem4swap17h21afb25e2d195463E+0xe>
   11362:	b002      	add	sp, #8
   11364:	bd80      	pop	{r7, pc}

00011366 <_ZN4core3ops8function6FnOnce9call_once17h59e116d6918016e9E>:
   11366:	b580      	push	{r7, lr}
   11368:	b084      	sub	sp, #16
   1136a:	9001      	str	r0, [sp, #4]
   1136c:	9102      	str	r1, [sp, #8]
   1136e:	9801      	ldr	r0, [sp, #4]
   11370:	9902      	ldr	r1, [sp, #8]
   11372:	f000 f8f8 	bl	11566 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE>
   11376:	9000      	str	r0, [sp, #0]
   11378:	e7ff      	b.n	1137a <_ZN4core3ops8function6FnOnce9call_once17h59e116d6918016e9E+0x14>
   1137a:	9800      	ldr	r0, [sp, #0]
   1137c:	b004      	add	sp, #16
   1137e:	bd80      	pop	{r7, pc}

00011380 <_ZN4core3ptr13drop_in_place17h63142b18dacbc787E>:
   11380:	b081      	sub	sp, #4
   11382:	9000      	str	r0, [sp, #0]
   11384:	b001      	add	sp, #4
   11386:	4770      	bx	lr

00011388 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4a745471c1d57141E>:
   11388:	b580      	push	{r7, lr}
   1138a:	b082      	sub	sp, #8
   1138c:	9101      	str	r1, [sp, #4]
   1138e:	f000 f803 	bl	11398 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E>
   11392:	e7ff      	b.n	11394 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4a745471c1d57141E+0xc>
   11394:	b002      	add	sp, #8
   11396:	bd80      	pop	{r7, pc}

00011398 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E>:
   11398:	b580      	push	{r7, lr}
   1139a:	b0a0      	sub	sp, #128	; 0x80
   1139c:	911c      	str	r1, [sp, #112]	; 0x70
   1139e:	9103      	str	r1, [sp, #12]
   113a0:	9002      	str	r0, [sp, #8]
   113a2:	e7ff      	b.n	113a4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xc>
   113a4:	9803      	ldr	r0, [sp, #12]
   113a6:	68c1      	ldr	r1, [r0, #12]
   113a8:	2901      	cmp	r1, #1
   113aa:	d11e      	bne.n	113ea <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x52>
   113ac:	e7ff      	b.n	113ae <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x16>
   113ae:	9803      	ldr	r0, [sp, #12]
   113b0:	f100 0110 	add.w	r1, r0, #16
   113b4:	911e      	str	r1, [sp, #120]	; 0x78
   113b6:	a804      	add	r0, sp, #16
   113b8:	f7fd ff18 	bl	f1ec <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE>
   113bc:	e7ff      	b.n	113be <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x26>
   113be:	9804      	ldr	r0, [sp, #16]
   113c0:	2801      	cmp	r0, #1
   113c2:	d001      	beq.n	113c8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x30>
   113c4:	e7ff      	b.n	113c6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x2e>
   113c6:	e00f      	b.n	113e8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x50>
   113c8:	9804      	ldr	r0, [sp, #16]
   113ca:	9905      	ldr	r1, [sp, #20]
   113cc:	9a06      	ldr	r2, [sp, #24]
   113ce:	9209      	str	r2, [sp, #36]	; 0x24
   113d0:	9108      	str	r1, [sp, #32]
   113d2:	9007      	str	r0, [sp, #28]
   113d4:	9807      	ldr	r0, [sp, #28]
   113d6:	9908      	ldr	r1, [sp, #32]
   113d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   113da:	9b02      	ldr	r3, [sp, #8]
   113dc:	609a      	str	r2, [r3, #8]
   113de:	6059      	str	r1, [r3, #4]
   113e0:	6018      	str	r0, [r3, #0]
   113e2:	e7ff      	b.n	113e4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x4c>
   113e4:	b020      	add	sp, #128	; 0x80
   113e6:	bd80      	pop	{r7, pc}
   113e8:	e7ff      	b.n	113ea <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x52>
   113ea:	a80a      	add	r0, sp, #40	; 0x28
   113ec:	9903      	ldr	r1, [sp, #12]
   113ee:	f7fd fee7 	bl	f1c0 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E>
   113f2:	e7ff      	b.n	113f4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x5c>
   113f4:	980a      	ldr	r0, [sp, #40]	; 0x28
   113f6:	2800      	cmp	r0, #0
   113f8:	d012      	beq.n	11420 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x88>
   113fa:	e7ff      	b.n	113fc <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x64>
   113fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
   113fe:	990c      	ldr	r1, [sp, #48]	; 0x30
   11400:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11402:	9211      	str	r2, [sp, #68]	; 0x44
   11404:	9110      	str	r1, [sp, #64]	; 0x40
   11406:	900f      	str	r0, [sp, #60]	; 0x3c
   11408:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1140a:	9910      	ldr	r1, [sp, #64]	; 0x40
   1140c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1140e:	921b      	str	r2, [sp, #108]	; 0x6c
   11410:	911a      	str	r1, [sp, #104]	; 0x68
   11412:	9019      	str	r0, [sp, #100]	; 0x64
   11414:	a816      	add	r0, sp, #88	; 0x58
   11416:	a919      	add	r1, sp, #100	; 0x64
   11418:	f7fd fecb 	bl	f1b2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfc3726000bdb855aE>
   1141c:	e028      	b.n	11470 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd8>
   1141e:	defe      	udf	#254	; 0xfe
   11420:	9803      	ldr	r0, [sp, #12]
   11422:	301c      	adds	r0, #28
   11424:	f7f7 faae 	bl	8984 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E>
   11428:	9001      	str	r0, [sp, #4]
   1142a:	e7ff      	b.n	1142c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x94>
   1142c:	9801      	ldr	r0, [sp, #4]
   1142e:	f7f7 fae3 	bl	89f8 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdb0154f18aef5e62E>
   11432:	900e      	str	r0, [sp, #56]	; 0x38
   11434:	e7ff      	b.n	11436 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x9e>
   11436:	980e      	ldr	r0, [sp, #56]	; 0x38
   11438:	fab0 f180 	clz	r1, r0
   1143c:	0949      	lsrs	r1, r1, #5
   1143e:	2800      	cmp	r0, #0
   11440:	d101      	bne.n	11446 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xae>
   11442:	e7ff      	b.n	11444 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xac>
   11444:	e009      	b.n	1145a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xc2>
   11446:	980e      	ldr	r0, [sp, #56]	; 0x38
   11448:	901f      	str	r0, [sp, #124]	; 0x7c
   1144a:	9902      	ldr	r1, [sp, #8]
   1144c:	9000      	str	r0, [sp, #0]
   1144e:	4608      	mov	r0, r1
   11450:	9900      	ldr	r1, [sp, #0]
   11452:	f7fd fecb 	bl	f1ec <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE>
   11456:	e00a      	b.n	1146e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd6>
   11458:	defe      	udf	#254	; 0xfe
   1145a:	f002 ffc3 	bl	143e4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>
   1145e:	e7ff      	b.n	11460 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xc8>
   11460:	9802      	ldr	r0, [sp, #8]
   11462:	f7f7 fac4 	bl	89ee <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc4148eaa15af1e8eE>
   11466:	e7ff      	b.n	11468 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd0>
   11468:	e7ff      	b.n	1146a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd2>
   1146a:	e7ff      	b.n	1146c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd4>
   1146c:	e7ba      	b.n	113e4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x4c>
   1146e:	e7fc      	b.n	1146a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd2>
   11470:	9816      	ldr	r0, [sp, #88]	; 0x58
   11472:	9917      	ldr	r1, [sp, #92]	; 0x5c
   11474:	9a18      	ldr	r2, [sp, #96]	; 0x60
   11476:	9215      	str	r2, [sp, #84]	; 0x54
   11478:	9114      	str	r1, [sp, #80]	; 0x50
   1147a:	9013      	str	r0, [sp, #76]	; 0x4c
   1147c:	2001      	movs	r0, #1
   1147e:	9012      	str	r0, [sp, #72]	; 0x48
   11480:	e7ff      	b.n	11482 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xea>
   11482:	9812      	ldr	r0, [sp, #72]	; 0x48
   11484:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11486:	9a14      	ldr	r2, [sp, #80]	; 0x50
   11488:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1148a:	f8dd c00c 	ldr.w	ip, [sp, #12]
   1148e:	f8cc 3018 	str.w	r3, [ip, #24]
   11492:	f8cc 2014 	str.w	r2, [ip, #20]
   11496:	f8cc 1010 	str.w	r1, [ip, #16]
   1149a:	f8cc 000c 	str.w	r0, [ip, #12]
   1149e:	980a      	ldr	r0, [sp, #40]	; 0x28
   114a0:	2801      	cmp	r0, #1
   114a2:	d101      	bne.n	114a8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x110>
   114a4:	e7ff      	b.n	114a6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x10e>
   114a6:	e77d      	b.n	113a4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xc>
   114a8:	e7fd      	b.n	114a6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x10e>

000114aa <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hc4675c1f0b8e1d41E>:
   114aa:	b5b0      	push	{r4, r5, r7, lr}
   114ac:	b090      	sub	sp, #64	; 0x40
   114ae:	680a      	ldr	r2, [r1, #0]
   114b0:	684b      	ldr	r3, [r1, #4]
   114b2:	6889      	ldr	r1, [r1, #8]
   114b4:	910f      	str	r1, [sp, #60]	; 0x3c
   114b6:	930e      	str	r3, [sp, #56]	; 0x38
   114b8:	920d      	str	r2, [sp, #52]	; 0x34
   114ba:	a902      	add	r1, sp, #8
   114bc:	aa0d      	add	r2, sp, #52	; 0x34
   114be:	9001      	str	r0, [sp, #4]
   114c0:	4608      	mov	r0, r1
   114c2:	4611      	mov	r1, r2
   114c4:	f000 f80d 	bl	114e2 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h1051abda59747a6bE>
   114c8:	e7ff      	b.n	114ca <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hc4675c1f0b8e1d41E+0x20>
   114ca:	a802      	add	r0, sp, #8
   114cc:	9901      	ldr	r1, [sp, #4]
   114ce:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
   114d2:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
   114d6:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
   114da:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
   114de:	b010      	add	sp, #64	; 0x40
   114e0:	bdb0      	pop	{r4, r5, r7, pc}

000114e2 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h1051abda59747a6bE>:
   114e2:	b08b      	sub	sp, #44	; 0x2c
   114e4:	680a      	ldr	r2, [r1, #0]
   114e6:	684b      	ldr	r3, [r1, #4]
   114e8:	6889      	ldr	r1, [r1, #8]
   114ea:	9102      	str	r1, [sp, #8]
   114ec:	9301      	str	r3, [sp, #4]
   114ee:	9200      	str	r2, [sp, #0]
   114f0:	2100      	movs	r1, #0
   114f2:	9103      	str	r1, [sp, #12]
   114f4:	9107      	str	r1, [sp, #28]
   114f6:	9900      	ldr	r1, [sp, #0]
   114f8:	9a01      	ldr	r2, [sp, #4]
   114fa:	9b02      	ldr	r3, [sp, #8]
   114fc:	6083      	str	r3, [r0, #8]
   114fe:	6042      	str	r2, [r0, #4]
   11500:	6001      	str	r1, [r0, #0]
   11502:	9903      	ldr	r1, [sp, #12]
   11504:	9a04      	ldr	r2, [sp, #16]
   11506:	9b05      	ldr	r3, [sp, #20]
   11508:	f8dd c018 	ldr.w	ip, [sp, #24]
   1150c:	f8c0 c018 	str.w	ip, [r0, #24]
   11510:	6143      	str	r3, [r0, #20]
   11512:	6102      	str	r2, [r0, #16]
   11514:	60c1      	str	r1, [r0, #12]
   11516:	9907      	ldr	r1, [sp, #28]
   11518:	9a08      	ldr	r2, [sp, #32]
   1151a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1151c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   11520:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
   11524:	6243      	str	r3, [r0, #36]	; 0x24
   11526:	6202      	str	r2, [r0, #32]
   11528:	61c1      	str	r1, [r0, #28]
   1152a:	b00b      	add	sp, #44	; 0x2c
   1152c:	4770      	bx	lr

0001152e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he2e30225e051e80dE>:
   1152e:	b5b0      	push	{r4, r5, r7, lr}
   11530:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
   11534:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
   11538:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   1153c:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   11540:	bdb0      	pop	{r4, r5, r7, pc}

00011542 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h27d5684c70bb37e8E>:
   11542:	b084      	sub	sp, #16
   11544:	9000      	str	r0, [sp, #0]
   11546:	9101      	str	r1, [sp, #4]
   11548:	9102      	str	r1, [sp, #8]
   1154a:	9003      	str	r0, [sp, #12]
   1154c:	6802      	ldr	r2, [r0, #0]
   1154e:	6840      	ldr	r0, [r0, #4]
   11550:	680b      	ldr	r3, [r1, #0]
   11552:	6849      	ldr	r1, [r1, #4]
   11554:	4048      	eors	r0, r1
   11556:	ea82 0103 	eor.w	r1, r2, r3
   1155a:	4308      	orrs	r0, r1
   1155c:	fab0 f080 	clz	r0, r0
   11560:	0940      	lsrs	r0, r0, #5
   11562:	b004      	add	sp, #16
   11564:	4770      	bx	lr

00011566 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE>:
   11566:	b085      	sub	sp, #20
   11568:	9003      	str	r0, [sp, #12]
   1156a:	9104      	str	r1, [sp, #16]
   1156c:	7802      	ldrb	r2, [r0, #0]
   1156e:	780b      	ldrb	r3, [r1, #0]
   11570:	429a      	cmp	r2, r3
   11572:	9101      	str	r1, [sp, #4]
   11574:	9000      	str	r0, [sp, #0]
   11576:	d307      	bcc.n	11588 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x22>
   11578:	e7ff      	b.n	1157a <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x14>
   1157a:	9800      	ldr	r0, [sp, #0]
   1157c:	7801      	ldrb	r1, [r0, #0]
   1157e:	9a01      	ldr	r2, [sp, #4]
   11580:	7813      	ldrb	r3, [r2, #0]
   11582:	4299      	cmp	r1, r3
   11584:	d008      	beq.n	11598 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x32>
   11586:	e003      	b.n	11590 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x2a>
   11588:	20ff      	movs	r0, #255	; 0xff
   1158a:	f88d 000b 	strb.w	r0, [sp, #11]
   1158e:	e008      	b.n	115a2 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x3c>
   11590:	2001      	movs	r0, #1
   11592:	f88d 000b 	strb.w	r0, [sp, #11]
   11596:	e003      	b.n	115a0 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x3a>
   11598:	2000      	movs	r0, #0
   1159a:	f88d 000b 	strb.w	r0, [sp, #11]
   1159e:	e7ff      	b.n	115a0 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x3a>
   115a0:	e7ff      	b.n	115a2 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x3c>
   115a2:	f89d 000b 	ldrb.w	r0, [sp, #11]
   115a6:	b005      	add	sp, #20
   115a8:	4770      	bx	lr

000115aa <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h0340384168a45934E>:
   115aa:	b082      	sub	sp, #8
   115ac:	9000      	str	r0, [sp, #0]
   115ae:	9101      	str	r1, [sp, #4]
   115b0:	7800      	ldrb	r0, [r0, #0]
   115b2:	7809      	ldrb	r1, [r1, #0]
   115b4:	2200      	movs	r2, #0
   115b6:	4288      	cmp	r0, r1
   115b8:	bf38      	it	cc
   115ba:	2201      	movcc	r2, #1
   115bc:	4610      	mov	r0, r2
   115be:	b002      	add	sp, #8
   115c0:	4770      	bx	lr

000115c2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>:
   115c2:	b084      	sub	sp, #16
   115c4:	9001      	str	r0, [sp, #4]
   115c6:	9102      	str	r1, [sp, #8]
   115c8:	4408      	add	r0, r1
   115ca:	9003      	str	r0, [sp, #12]
   115cc:	9803      	ldr	r0, [sp, #12]
   115ce:	9000      	str	r0, [sp, #0]
   115d0:	e7ff      	b.n	115d2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E+0x10>
   115d2:	9800      	ldr	r0, [sp, #0]
   115d4:	b004      	add	sp, #16
   115d6:	4770      	bx	lr

000115d8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>:
   115d8:	b082      	sub	sp, #8
   115da:	9001      	str	r0, [sp, #4]
   115dc:	9000      	str	r0, [sp, #0]
   115de:	e7ff      	b.n	115e0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE+0x8>
   115e0:	9800      	ldr	r0, [sp, #0]
   115e2:	fab0 f180 	clz	r1, r0
   115e6:	0948      	lsrs	r0, r1, #5
   115e8:	b002      	add	sp, #8
   115ea:	4770      	bx	lr

000115ec <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>:
   115ec:	b082      	sub	sp, #8
   115ee:	9001      	str	r0, [sp, #4]
   115f0:	9000      	str	r0, [sp, #0]
   115f2:	9800      	ldr	r0, [sp, #0]
   115f4:	b002      	add	sp, #8
   115f6:	4770      	bx	lr

000115f8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>:
   115f8:	b081      	sub	sp, #4
   115fa:	9000      	str	r0, [sp, #0]
   115fc:	b001      	add	sp, #4
   115fe:	4770      	bx	lr

00011600 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>:
   11600:	b580      	push	{r7, lr}
   11602:	b084      	sub	sp, #16
   11604:	9002      	str	r0, [sp, #8]
   11606:	9103      	str	r1, [sp, #12]
   11608:	f000 f805 	bl	11616 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   1160c:	9001      	str	r0, [sp, #4]
   1160e:	e7ff      	b.n	11610 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E+0x10>
   11610:	9801      	ldr	r0, [sp, #4]
   11612:	b004      	add	sp, #16
   11614:	bd80      	pop	{r7, pc}

00011616 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>:
   11616:	b084      	sub	sp, #16
   11618:	9001      	str	r0, [sp, #4]
   1161a:	9102      	str	r1, [sp, #8]
   1161c:	4408      	add	r0, r1
   1161e:	9003      	str	r0, [sp, #12]
   11620:	9803      	ldr	r0, [sp, #12]
   11622:	9000      	str	r0, [sp, #0]
   11624:	e7ff      	b.n	11626 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E+0x10>
   11626:	9800      	ldr	r0, [sp, #0]
   11628:	b004      	add	sp, #16
   1162a:	4770      	bx	lr

0001162c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>:
   1162c:	b082      	sub	sp, #8
   1162e:	9001      	str	r0, [sp, #4]
   11630:	9000      	str	r0, [sp, #0]
   11632:	e7ff      	b.n	11634 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE+0x8>
   11634:	9800      	ldr	r0, [sp, #0]
   11636:	fab0 f180 	clz	r1, r0
   1163a:	0948      	lsrs	r0, r1, #5
   1163c:	b002      	add	sp, #8
   1163e:	4770      	bx	lr

00011640 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>:
   11640:	b580      	push	{r7, lr}
   11642:	b090      	sub	sp, #64	; 0x40
   11644:	900c      	str	r0, [sp, #48]	; 0x30
   11646:	910d      	str	r1, [sp, #52]	; 0x34
   11648:	9007      	str	r0, [sp, #28]
   1164a:	9106      	str	r1, [sp, #24]
   1164c:	f000 ff6c 	bl	12528 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>
   11650:	4601      	mov	r1, r0
   11652:	900e      	str	r0, [sp, #56]	; 0x38
   11654:	9105      	str	r1, [sp, #20]
   11656:	e7ff      	b.n	11658 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x18>
   11658:	9805      	ldr	r0, [sp, #20]
   1165a:	f7ff ffe7 	bl	1162c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   1165e:	e7ff      	b.n	11660 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x20>
   11660:	e7ff      	b.n	11662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x22>
   11662:	2001      	movs	r0, #1
   11664:	900f      	str	r0, [sp, #60]	; 0x3c
   11666:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11668:	9004      	str	r0, [sp, #16]
   1166a:	e7ff      	b.n	1166c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x2c>
   1166c:	9804      	ldr	r0, [sp, #16]
   1166e:	2800      	cmp	r0, #0
   11670:	d006      	beq.n	11680 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x40>
   11672:	e7ff      	b.n	11674 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x34>
   11674:	9807      	ldr	r0, [sp, #28]
   11676:	9906      	ldr	r1, [sp, #24]
   11678:	f000 ff4e 	bl	12518 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   1167c:	9003      	str	r0, [sp, #12]
   1167e:	e00e      	b.n	1169e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x5e>
   11680:	9807      	ldr	r0, [sp, #28]
   11682:	9906      	ldr	r1, [sp, #24]
   11684:	f000 ff48 	bl	12518 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   11688:	9002      	str	r0, [sp, #8]
   1168a:	e7ff      	b.n	1168c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x4c>
   1168c:	9805      	ldr	r0, [sp, #20]
   1168e:	9902      	ldr	r1, [sp, #8]
   11690:	f7ff ffb6 	bl	11600 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>
   11694:	9001      	str	r0, [sp, #4]
   11696:	e7ff      	b.n	11698 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x58>
   11698:	9801      	ldr	r0, [sp, #4]
   1169a:	900a      	str	r0, [sp, #40]	; 0x28
   1169c:	e006      	b.n	116ac <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   1169e:	9805      	ldr	r0, [sp, #20]
   116a0:	9903      	ldr	r1, [sp, #12]
   116a2:	f000 ff16 	bl	124d2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>
   116a6:	900a      	str	r0, [sp, #40]	; 0x28
   116a8:	e7ff      	b.n	116aa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6a>
   116aa:	e7ff      	b.n	116ac <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   116ac:	9805      	ldr	r0, [sp, #20]
   116ae:	f7ff ff9d 	bl	115ec <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   116b2:	9000      	str	r0, [sp, #0]
   116b4:	e7ff      	b.n	116b6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x76>
   116b6:	980a      	ldr	r0, [sp, #40]	; 0x28
   116b8:	9900      	ldr	r1, [sp, #0]
   116ba:	9108      	str	r1, [sp, #32]
   116bc:	9009      	str	r0, [sp, #36]	; 0x24
   116be:	9808      	ldr	r0, [sp, #32]
   116c0:	9909      	ldr	r1, [sp, #36]	; 0x24
   116c2:	b010      	add	sp, #64	; 0x40
   116c4:	bd80      	pop	{r7, pc}

000116c6 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>:
   116c6:	b081      	sub	sp, #4
   116c8:	b001      	add	sp, #4
   116ca:	4770      	bx	lr

000116cc <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>:
   116cc:	b580      	push	{r7, lr}
   116ce:	b08e      	sub	sp, #56	; 0x38
   116d0:	9007      	str	r0, [sp, #28]
   116d2:	6801      	ldr	r1, [r0, #0]
   116d4:	9005      	str	r0, [sp, #20]
   116d6:	4608      	mov	r0, r1
   116d8:	f7ff ff8e 	bl	115f8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   116dc:	9004      	str	r0, [sp, #16]
   116de:	e7ff      	b.n	116e0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x14>
   116e0:	9804      	ldr	r0, [sp, #16]
   116e2:	f7ff ff79 	bl	115d8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>
   116e6:	e7ff      	b.n	116e8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1c>
   116e8:	e7ff      	b.n	116ea <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1e>
   116ea:	2001      	movs	r0, #1
   116ec:	9008      	str	r0, [sp, #32]
   116ee:	9808      	ldr	r0, [sp, #32]
   116f0:	9003      	str	r0, [sp, #12]
   116f2:	e7ff      	b.n	116f4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x28>
   116f4:	9803      	ldr	r0, [sp, #12]
   116f6:	2800      	cmp	r0, #0
   116f8:	d007      	beq.n	1170a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   116fa:	e7ff      	b.n	116fc <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x30>
   116fc:	9805      	ldr	r0, [sp, #20]
   116fe:	6840      	ldr	r0, [r0, #4]
   11700:	f7ff ff94 	bl	1162c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   11704:	e7ff      	b.n	11706 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3a>
   11706:	e7ff      	b.n	11708 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3c>
   11708:	e7ff      	b.n	1170a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   1170a:	9805      	ldr	r0, [sp, #20]
   1170c:	6800      	ldr	r0, [r0, #0]
   1170e:	f7ff ff73 	bl	115f8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11712:	9002      	str	r0, [sp, #8]
   11714:	e7ff      	b.n	11716 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x4a>
   11716:	9805      	ldr	r0, [sp, #20]
   11718:	6841      	ldr	r1, [r0, #4]
   1171a:	9a02      	ldr	r2, [sp, #8]
   1171c:	428a      	cmp	r2, r1
   1171e:	d02e      	beq.n	1177e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb2>
   11720:	e7ff      	b.n	11722 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x56>
   11722:	9805      	ldr	r0, [sp, #20]
   11724:	900a      	str	r0, [sp, #40]	; 0x28
   11726:	2101      	movs	r1, #1
   11728:	910b      	str	r1, [sp, #44]	; 0x2c
   1172a:	910d      	str	r1, [sp, #52]	; 0x34
   1172c:	990d      	ldr	r1, [sp, #52]	; 0x34
   1172e:	2900      	cmp	r1, #0
   11730:	d015      	beq.n	1175e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x92>
   11732:	e7ff      	b.n	11734 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x68>
   11734:	9805      	ldr	r0, [sp, #20]
   11736:	6800      	ldr	r0, [r0, #0]
   11738:	f7ff ff5e 	bl	115f8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   1173c:	900c      	str	r0, [sp, #48]	; 0x30
   1173e:	9905      	ldr	r1, [sp, #20]
   11740:	680a      	ldr	r2, [r1, #0]
   11742:	9001      	str	r0, [sp, #4]
   11744:	4610      	mov	r0, r2
   11746:	f7ff ff57 	bl	115f8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   1174a:	2101      	movs	r1, #1
   1174c:	f7ff ff39 	bl	115c2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>
   11750:	f7ff ff4c 	bl	115ec <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   11754:	9905      	ldr	r1, [sp, #20]
   11756:	6008      	str	r0, [r1, #0]
   11758:	9801      	ldr	r0, [sp, #4]
   1175a:	9009      	str	r0, [sp, #36]	; 0x24
   1175c:	e00c      	b.n	11778 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   1175e:	9805      	ldr	r0, [sp, #20]
   11760:	6840      	ldr	r0, [r0, #4]
   11762:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11766:	f7ff ff56 	bl	11616 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   1176a:	9905      	ldr	r1, [sp, #20]
   1176c:	6048      	str	r0, [r1, #4]
   1176e:	6808      	ldr	r0, [r1, #0]
   11770:	f7ff ff42 	bl	115f8 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11774:	9009      	str	r0, [sp, #36]	; 0x24
   11776:	e7ff      	b.n	11778 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   11778:	9809      	ldr	r0, [sp, #36]	; 0x24
   1177a:	9000      	str	r0, [sp, #0]
   1177c:	e002      	b.n	11784 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb8>
   1177e:	2000      	movs	r0, #0
   11780:	9006      	str	r0, [sp, #24]
   11782:	e002      	b.n	1178a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   11784:	9800      	ldr	r0, [sp, #0]
   11786:	9006      	str	r0, [sp, #24]
   11788:	e7ff      	b.n	1178a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   1178a:	9806      	ldr	r0, [sp, #24]
   1178c:	b00e      	add	sp, #56	; 0x38
   1178e:	bd80      	pop	{r7, pc}

00011790 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE>:
   11790:	b580      	push	{r7, lr}
   11792:	b084      	sub	sp, #16
   11794:	9002      	str	r0, [sp, #8]
   11796:	9103      	str	r1, [sp, #12]
   11798:	6800      	ldr	r0, [r0, #0]
   1179a:	f000 f807 	bl	117ac <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>
   1179e:	9001      	str	r0, [sp, #4]
   117a0:	e7ff      	b.n	117a2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE+0x12>
   117a2:	9801      	ldr	r0, [sp, #4]
   117a4:	f000 0001 	and.w	r0, r0, #1
   117a8:	b004      	add	sp, #16
   117aa:	bd80      	pop	{r7, pc}

000117ac <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>:
   117ac:	b580      	push	{r7, lr}
   117ae:	b088      	sub	sp, #32
   117b0:	9006      	str	r0, [sp, #24]
   117b2:	9107      	str	r1, [sp, #28]
   117b4:	9004      	str	r0, [sp, #16]
   117b6:	4608      	mov	r0, r1
   117b8:	9103      	str	r1, [sp, #12]
   117ba:	f004 fe2c 	bl	16416 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   117be:	9002      	str	r0, [sp, #8]
   117c0:	e7ff      	b.n	117c2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x16>
   117c2:	9802      	ldr	r0, [sp, #8]
   117c4:	07c1      	lsls	r1, r0, #31
   117c6:	2900      	cmp	r1, #0
   117c8:	d105      	bne.n	117d6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x2a>
   117ca:	e7ff      	b.n	117cc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x20>
   117cc:	9803      	ldr	r0, [sp, #12]
   117ce:	f004 fe26 	bl	1641e <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   117d2:	9001      	str	r0, [sp, #4]
   117d4:	e007      	b.n	117e6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x3a>
   117d6:	9804      	ldr	r0, [sp, #16]
   117d8:	9903      	ldr	r1, [sp, #12]
   117da:	f005 fbe7 	bl	16fac <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   117de:	f88d 0017 	strb.w	r0, [sp, #23]
   117e2:	e7ff      	b.n	117e4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x38>
   117e4:	e015      	b.n	11812 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   117e6:	9801      	ldr	r0, [sp, #4]
   117e8:	07c1      	lsls	r1, r0, #31
   117ea:	2900      	cmp	r1, #0
   117ec:	d107      	bne.n	117fe <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x52>
   117ee:	e7ff      	b.n	117f0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x44>
   117f0:	9804      	ldr	r0, [sp, #16]
   117f2:	9903      	ldr	r1, [sp, #12]
   117f4:	f005 fced 	bl	171d2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   117f8:	f88d 0017 	strb.w	r0, [sp, #23]
   117fc:	e007      	b.n	1180e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x62>
   117fe:	9804      	ldr	r0, [sp, #16]
   11800:	9903      	ldr	r1, [sp, #12]
   11802:	f005 fc3e 	bl	17082 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   11806:	f88d 0017 	strb.w	r0, [sp, #23]
   1180a:	e7ff      	b.n	1180c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x60>
   1180c:	e000      	b.n	11810 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   1180e:	e7ff      	b.n	11810 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   11810:	e7ff      	b.n	11812 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   11812:	f89d 0017 	ldrb.w	r0, [sp, #23]
   11816:	b008      	add	sp, #32
   11818:	bd80      	pop	{r7, pc}

0001181a <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct Coord(pub CoordPart, pub CoordPart);

    impl Coord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: CoordPart, y: CoordPart) -> Self {
   1181a:	b084      	sub	sp, #16
   1181c:	9002      	str	r0, [sp, #8]
   1181e:	9103      	str	r1, [sp, #12]
            Coord(x, y)
   11820:	9000      	str	r0, [sp, #0]
   11822:	9101      	str	r1, [sp, #4]
        }
   11824:	9800      	ldr	r0, [sp, #0]
   11826:	9901      	ldr	r1, [sp, #4]
   11828:	b004      	add	sp, #16
   1182a:	4770      	bx	lr

0001182c <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>:
/// Take a tuple of 8 bit `(red, green, blue)` color values and convert them to a single 16 bit
/// color
///
/// The 2 or 3 (for the green channel) least significant bits are discarded
impl From<(u8, u8, u8)> for Rgb565 {
    fn from((r, g, b): (u8, u8, u8)) -> Self {
   1182c:	b08b      	sub	sp, #44	; 0x2c
   1182e:	4601      	mov	r1, r0
   11830:	f8ad 0020 	strh.w	r0, [sp, #32]
   11834:	0c00      	lsrs	r0, r0, #16
   11836:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   1183a:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   1183e:	f88d 001e 	strb.w	r0, [sp, #30]
   11842:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   11846:	f8ad 001c 	strh.w	r0, [sp, #28]
   1184a:	f89d 001c 	ldrb.w	r0, [sp, #28]
   1184e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   11852:	f89d 201d 	ldrb.w	r2, [sp, #29]
   11856:	4613      	mov	r3, r2
   11858:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   1185c:	f89d 201e 	ldrb.w	r2, [sp, #30]
   11860:	4694      	mov	ip, r2
   11862:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
        let value =
        // Red
        (((r as u16) << 8) & RED_MASK)
   11866:	0200      	lsls	r0, r0, #8
   11868:	9306      	str	r3, [sp, #24]
   1186a:	f8cd c014 	str.w	ip, [sp, #20]
   1186e:	9004      	str	r0, [sp, #16]
   11870:	e7ff      	b.n	11872 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x46>
   11872:	9804      	ldr	r0, [sp, #16]
   11874:	f400 4178 	and.w	r1, r0, #63488	; 0xf800
        // Green
        | (((g as u16) << 3) & GREEN_MASK)
   11878:	9a06      	ldr	r2, [sp, #24]
   1187a:	b2d3      	uxtb	r3, r2
   1187c:	00db      	lsls	r3, r3, #3
   1187e:	9103      	str	r1, [sp, #12]
   11880:	9302      	str	r3, [sp, #8]
   11882:	e7ff      	b.n	11884 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x58>
   11884:	9802      	ldr	r0, [sp, #8]
   11886:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
        (((r as u16) << 8) & RED_MASK)
   1188a:	9a03      	ldr	r2, [sp, #12]
   1188c:	4311      	orrs	r1, r2
        // Blue
        | ((b as u16) >> 3 & BLUE_MASK);
   1188e:	9b05      	ldr	r3, [sp, #20]
   11890:	fa5f fc83 	uxtb.w	ip, r3
   11894:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
   11898:	9101      	str	r1, [sp, #4]
   1189a:	f8cd c000 	str.w	ip, [sp]
   1189e:	e7ff      	b.n	118a0 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x74>
   118a0:	9800      	ldr	r0, [sp, #0]
   118a2:	f000 011f 	and.w	r1, r0, #31
        (((r as u16) << 8) & RED_MASK)
   118a6:	9a01      	ldr	r2, [sp, #4]
   118a8:	4311      	orrs	r1, r2
   118aa:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a

        Self(value)
   118ae:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    }
   118b2:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   118b6:	b00b      	add	sp, #44	; 0x2c
   118b8:	4770      	bx	lr

000118ba <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>:
   118ba:	b580      	push	{r7, lr}
   118bc:	b088      	sub	sp, #32
   118be:	9005      	str	r0, [sp, #20]
   118c0:	9106      	str	r1, [sp, #24]
   118c2:	9003      	str	r0, [sp, #12]
   118c4:	4608      	mov	r0, r1
   118c6:	f000 fa21 	bl	11d0c <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>
   118ca:	9004      	str	r0, [sp, #16]
   118cc:	e7ff      	b.n	118ce <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x14>
   118ce:	9804      	ldr	r0, [sp, #16]
   118d0:	9007      	str	r0, [sp, #28]
   118d2:	9903      	ldr	r1, [sp, #12]
   118d4:	680a      	ldr	r2, [r1, #0]
   118d6:	9002      	str	r0, [sp, #8]
   118d8:	4610      	mov	r0, r2
   118da:	9902      	ldr	r1, [sp, #8]
   118dc:	f000 f837 	bl	1194e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>
   118e0:	9001      	str	r0, [sp, #4]
   118e2:	9100      	str	r1, [sp, #0]
   118e4:	e7ff      	b.n	118e6 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x2c>
   118e6:	9801      	ldr	r0, [sp, #4]
   118e8:	9900      	ldr	r1, [sp, #0]
   118ea:	b008      	add	sp, #32
   118ec:	bd80      	pop	{r7, pc}

000118ee <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>:
   118ee:	b580      	push	{r7, lr}
   118f0:	b084      	sub	sp, #16
   118f2:	9001      	str	r0, [sp, #4]
   118f4:	9102      	str	r1, [sp, #8]
   118f6:	9203      	str	r2, [sp, #12]
   118f8:	9000      	str	r0, [sp, #0]
   118fa:	4608      	mov	r0, r1
   118fc:	9900      	ldr	r1, [sp, #0]
   118fe:	f00a f9f5 	bl	1bcec <__aeabi_memcpy>
   11902:	e7ff      	b.n	11904 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE+0x16>
   11904:	b004      	add	sp, #16
   11906:	bd80      	pop	{r7, pc}

00011908 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>:
   11908:	b580      	push	{r7, lr}
   1190a:	b084      	sub	sp, #16
   1190c:	9001      	str	r0, [sp, #4]
   1190e:	9102      	str	r1, [sp, #8]
   11910:	9203      	str	r2, [sp, #12]
   11912:	0092      	lsls	r2, r2, #2
   11914:	9000      	str	r0, [sp, #0]
   11916:	4608      	mov	r0, r1
   11918:	9900      	ldr	r1, [sp, #0]
   1191a:	f00a f9e7 	bl	1bcec <__aeabi_memcpy>
   1191e:	e7ff      	b.n	11920 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E+0x18>
   11920:	b004      	add	sp, #16
   11922:	bd80      	pop	{r7, pc}

00011924 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>:
   11924:	b082      	sub	sp, #8
   11926:	9000      	str	r0, [sp, #0]
   11928:	9101      	str	r1, [sp, #4]
   1192a:	6800      	ldr	r0, [r0, #0]
   1192c:	6809      	ldr	r1, [r1, #0]
   1192e:	2200      	movs	r2, #0
   11930:	4288      	cmp	r0, r1
   11932:	bf38      	it	cc
   11934:	2201      	movcc	r2, #1
   11936:	4610      	mov	r0, r2
   11938:	b002      	add	sp, #8
   1193a:	4770      	bx	lr

0001193c <_ZN4core3mem4swap17hc4afbec7b5ffb125E>:
   1193c:	b580      	push	{r7, lr}
   1193e:	b082      	sub	sp, #8
   11940:	9000      	str	r0, [sp, #0]
   11942:	9101      	str	r1, [sp, #4]
   11944:	f000 f85f 	bl	11a06 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>
   11948:	e7ff      	b.n	1194a <_ZN4core3mem4swap17hc4afbec7b5ffb125E+0xe>
   1194a:	b002      	add	sp, #8
   1194c:	bd80      	pop	{r7, pc}

0001194e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>:
   1194e:	b580      	push	{r7, lr}
   11950:	b088      	sub	sp, #32
   11952:	9004      	str	r0, [sp, #16]
   11954:	9105      	str	r1, [sp, #20]
   11956:	f000 f819 	bl	1198c <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>
   1195a:	9001      	str	r0, [sp, #4]
   1195c:	9100      	str	r1, [sp, #0]
   1195e:	e7ff      	b.n	11960 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x12>
   11960:	9801      	ldr	r0, [sp, #4]
   11962:	9006      	str	r0, [sp, #24]
   11964:	9900      	ldr	r1, [sp, #0]
   11966:	f001 0201 	and.w	r2, r1, #1
   1196a:	f88d 201f 	strb.w	r2, [sp, #31]
   1196e:	2a00      	cmp	r2, #0
   11970:	d105      	bne.n	1197e <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x30>
   11972:	e7ff      	b.n	11974 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x26>
   11974:	9801      	ldr	r0, [sp, #4]
   11976:	9003      	str	r0, [sp, #12]
   11978:	2101      	movs	r1, #1
   1197a:	9102      	str	r1, [sp, #8]
   1197c:	e002      	b.n	11984 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   1197e:	2000      	movs	r0, #0
   11980:	9002      	str	r0, [sp, #8]
   11982:	e7ff      	b.n	11984 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   11984:	9802      	ldr	r0, [sp, #8]
   11986:	9903      	ldr	r1, [sp, #12]
   11988:	b008      	add	sp, #32
   1198a:	bd80      	pop	{r7, pc}

0001198c <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>:
   1198c:	b08a      	sub	sp, #40	; 0x28
   1198e:	9004      	str	r0, [sp, #16]
   11990:	9105      	str	r1, [sp, #20]
   11992:	1840      	adds	r0, r0, r1
   11994:	f04f 0100 	mov.w	r1, #0
   11998:	f141 0100 	adc.w	r1, r1, #0
   1199c:	9006      	str	r0, [sp, #24]
   1199e:	f88d 101c 	strb.w	r1, [sp, #28]
   119a2:	9806      	ldr	r0, [sp, #24]
   119a4:	f89d 101c 	ldrb.w	r1, [sp, #28]
   119a8:	9001      	str	r0, [sp, #4]
   119aa:	9100      	str	r1, [sp, #0]
   119ac:	e7ff      	b.n	119ae <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE+0x22>
   119ae:	9801      	ldr	r0, [sp, #4]
   119b0:	9008      	str	r0, [sp, #32]
   119b2:	9900      	ldr	r1, [sp, #0]
   119b4:	f001 0201 	and.w	r2, r1, #1
   119b8:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   119bc:	9002      	str	r0, [sp, #8]
   119be:	f88d 200c 	strb.w	r2, [sp, #12]
   119c2:	9802      	ldr	r0, [sp, #8]
   119c4:	f89d 100c 	ldrb.w	r1, [sp, #12]
   119c8:	b00a      	add	sp, #40	; 0x28
   119ca:	4770      	bx	lr

000119cc <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>:
   119cc:	b580      	push	{r7, lr}
   119ce:	b08c      	sub	sp, #48	; 0x30
   119d0:	9005      	str	r0, [sp, #20]
   119d2:	9106      	str	r1, [sp, #24]
   119d4:	9207      	str	r2, [sp, #28]
   119d6:	4603      	mov	r3, r0
   119d8:	9008      	str	r0, [sp, #32]
   119da:	4608      	mov	r0, r1
   119dc:	9109      	str	r1, [sp, #36]	; 0x24
   119de:	2104      	movs	r1, #4
   119e0:	910b      	str	r1, [sp, #44]	; 0x2c
   119e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   119e4:	9204      	str	r2, [sp, #16]
   119e6:	9303      	str	r3, [sp, #12]
   119e8:	9002      	str	r0, [sp, #8]
   119ea:	9101      	str	r1, [sp, #4]
   119ec:	e7ff      	b.n	119ee <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x22>
   119ee:	9801      	ldr	r0, [sp, #4]
   119f0:	9904      	ldr	r1, [sp, #16]
   119f2:	fb00 f201 	mul.w	r2, r0, r1
   119f6:	920a      	str	r2, [sp, #40]	; 0x28
   119f8:	9803      	ldr	r0, [sp, #12]
   119fa:	9902      	ldr	r1, [sp, #8]
   119fc:	f000 f82e 	bl	11a5c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>
   11a00:	e7ff      	b.n	11a02 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x36>
   11a02:	b00c      	add	sp, #48	; 0x30
   11a04:	bd80      	pop	{r7, pc}

00011a06 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>:
   11a06:	b580      	push	{r7, lr}
   11a08:	b088      	sub	sp, #32
   11a0a:	9004      	str	r0, [sp, #16]
   11a0c:	9105      	str	r1, [sp, #20]
   11a0e:	2204      	movs	r2, #4
   11a10:	9207      	str	r2, [sp, #28]
   11a12:	9a07      	ldr	r2, [sp, #28]
   11a14:	9103      	str	r1, [sp, #12]
   11a16:	9002      	str	r0, [sp, #8]
   11a18:	9201      	str	r2, [sp, #4]
   11a1a:	e7ff      	b.n	11a1c <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x16>
   11a1c:	9801      	ldr	r0, [sp, #4]
   11a1e:	2820      	cmp	r0, #32
   11a20:	d306      	bcc.n	11a30 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x2a>
   11a22:	e7ff      	b.n	11a24 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x1e>
   11a24:	2201      	movs	r2, #1
   11a26:	9802      	ldr	r0, [sp, #8]
   11a28:	9903      	ldr	r1, [sp, #12]
   11a2a:	f7ff ffcf 	bl	119cc <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>
   11a2e:	e012      	b.n	11a56 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x50>
   11a30:	9802      	ldr	r0, [sp, #8]
   11a32:	f000 f8a1 	bl	11b78 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>
   11a36:	4601      	mov	r1, r0
   11a38:	9006      	str	r0, [sp, #24]
   11a3a:	9100      	str	r1, [sp, #0]
   11a3c:	e7ff      	b.n	11a3e <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x38>
   11a3e:	2201      	movs	r2, #1
   11a40:	9803      	ldr	r0, [sp, #12]
   11a42:	9902      	ldr	r1, [sp, #8]
   11a44:	f7ff ff60 	bl	11908 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   11a48:	e7ff      	b.n	11a4a <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x44>
   11a4a:	9803      	ldr	r0, [sp, #12]
   11a4c:	9900      	ldr	r1, [sp, #0]
   11a4e:	f000 f8ac 	bl	11baa <_ZN4core3ptr5write17h4a80332de2cee3d3E>
   11a52:	e7ff      	b.n	11a54 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x4e>
   11a54:	e000      	b.n	11a58 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   11a56:	e7ff      	b.n	11a58 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   11a58:	b008      	add	sp, #32
   11a5a:	bd80      	pop	{r7, pc}

00011a5c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>:
   11a5c:	b5d0      	push	{r4, r6, r7, lr}
   11a5e:	af02      	add	r7, sp, #8
   11a60:	b0b4      	sub	sp, #208	; 0xd0
   11a62:	466c      	mov	r4, sp
   11a64:	f36f 0404 	bfc	r4, #0, #5
   11a68:	46a5      	mov	sp, r4
   11a6a:	9024      	str	r0, [sp, #144]	; 0x90
   11a6c:	9125      	str	r1, [sp, #148]	; 0x94
   11a6e:	9226      	str	r2, [sp, #152]	; 0x98
   11a70:	2320      	movs	r3, #32
   11a72:	932f      	str	r3, [sp, #188]	; 0xbc
   11a74:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   11a76:	9327      	str	r3, [sp, #156]	; 0x9c
   11a78:	920e      	str	r2, [sp, #56]	; 0x38
   11a7a:	910d      	str	r1, [sp, #52]	; 0x34
   11a7c:	900c      	str	r0, [sp, #48]	; 0x30
   11a7e:	930b      	str	r3, [sp, #44]	; 0x2c
   11a80:	e7ff      	b.n	11a82 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x26>
   11a82:	2000      	movs	r0, #0
   11a84:	900f      	str	r0, [sp, #60]	; 0x3c
   11a86:	e7ff      	b.n	11a88 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   11a88:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11a8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11a8c:	4408      	add	r0, r1
   11a8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11a90:	4290      	cmp	r0, r2
   11a92:	d905      	bls.n	11aa0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x44>
   11a94:	e7ff      	b.n	11a96 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x3a>
   11a96:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11a98:	990e      	ldr	r1, [sp, #56]	; 0x38
   11a9a:	4288      	cmp	r0, r1
   11a9c:	d334      	bcc.n	11b08 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xac>
   11a9e:	e067      	b.n	11b70 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   11aa0:	e7ff      	b.n	11aa2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x46>
   11aa2:	a810      	add	r0, sp, #64	; 0x40
   11aa4:	9030      	str	r0, [sp, #192]	; 0xc0
   11aa6:	9031      	str	r0, [sp, #196]	; 0xc4
   11aa8:	e7ff      	b.n	11aaa <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x4e>
   11aaa:	a810      	add	r0, sp, #64	; 0x40
   11aac:	4601      	mov	r1, r0
   11aae:	9028      	str	r0, [sp, #160]	; 0xa0
   11ab0:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11ab2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11ab4:	900a      	str	r0, [sp, #40]	; 0x28
   11ab6:	4610      	mov	r0, r2
   11ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11aba:	9109      	str	r1, [sp, #36]	; 0x24
   11abc:	4619      	mov	r1, r3
   11abe:	f000 f87a 	bl	11bb6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11ac2:	4601      	mov	r1, r0
   11ac4:	9029      	str	r0, [sp, #164]	; 0xa4
   11ac6:	9108      	str	r1, [sp, #32]
   11ac8:	e7ff      	b.n	11aca <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x6e>
   11aca:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11acc:	980d      	ldr	r0, [sp, #52]	; 0x34
   11ace:	f000 f872 	bl	11bb6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11ad2:	4601      	mov	r1, r0
   11ad4:	902a      	str	r0, [sp, #168]	; 0xa8
   11ad6:	9107      	str	r1, [sp, #28]
   11ad8:	e7ff      	b.n	11ada <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x7e>
   11ada:	9808      	ldr	r0, [sp, #32]
   11adc:	9909      	ldr	r1, [sp, #36]	; 0x24
   11ade:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11ae0:	f7ff ff05 	bl	118ee <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11ae4:	e7ff      	b.n	11ae6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x8a>
   11ae6:	9807      	ldr	r0, [sp, #28]
   11ae8:	9908      	ldr	r1, [sp, #32]
   11aea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11aec:	f7ff feff 	bl	118ee <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11af0:	e7ff      	b.n	11af2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x96>
   11af2:	9809      	ldr	r0, [sp, #36]	; 0x24
   11af4:	9907      	ldr	r1, [sp, #28]
   11af6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11af8:	f7ff fef9 	bl	118ee <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11afc:	e7ff      	b.n	11afe <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xa2>
   11afe:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11b00:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11b02:	4408      	add	r0, r1
   11b04:	900f      	str	r0, [sp, #60]	; 0x3c
   11b06:	e7bf      	b.n	11a88 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   11b08:	e7ff      	b.n	11b0a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xae>
   11b0a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11b0c:	990e      	ldr	r1, [sp, #56]	; 0x38
   11b0e:	1a08      	subs	r0, r1, r0
   11b10:	4602      	mov	r2, r0
   11b12:	902b      	str	r0, [sp, #172]	; 0xac
   11b14:	a81c      	add	r0, sp, #112	; 0x70
   11b16:	9032      	str	r0, [sp, #200]	; 0xc8
   11b18:	9033      	str	r0, [sp, #204]	; 0xcc
   11b1a:	9206      	str	r2, [sp, #24]
   11b1c:	9005      	str	r0, [sp, #20]
   11b1e:	e7ff      	b.n	11b20 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xc4>
   11b20:	9805      	ldr	r0, [sp, #20]
   11b22:	9905      	ldr	r1, [sp, #20]
   11b24:	912c      	str	r1, [sp, #176]	; 0xb0
   11b26:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11b28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11b2a:	9004      	str	r0, [sp, #16]
   11b2c:	4610      	mov	r0, r2
   11b2e:	f000 f842 	bl	11bb6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11b32:	4601      	mov	r1, r0
   11b34:	902d      	str	r0, [sp, #180]	; 0xb4
   11b36:	9103      	str	r1, [sp, #12]
   11b38:	e7ff      	b.n	11b3a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xde>
   11b3a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11b3c:	980d      	ldr	r0, [sp, #52]	; 0x34
   11b3e:	f000 f83a 	bl	11bb6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11b42:	4601      	mov	r1, r0
   11b44:	902e      	str	r0, [sp, #184]	; 0xb8
   11b46:	9102      	str	r1, [sp, #8]
   11b48:	e7ff      	b.n	11b4a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xee>
   11b4a:	9803      	ldr	r0, [sp, #12]
   11b4c:	9904      	ldr	r1, [sp, #16]
   11b4e:	9a06      	ldr	r2, [sp, #24]
   11b50:	f7ff fecd 	bl	118ee <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11b54:	e7ff      	b.n	11b56 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xfa>
   11b56:	9802      	ldr	r0, [sp, #8]
   11b58:	9903      	ldr	r1, [sp, #12]
   11b5a:	9a06      	ldr	r2, [sp, #24]
   11b5c:	f7ff fec7 	bl	118ee <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11b60:	e7ff      	b.n	11b62 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x106>
   11b62:	9804      	ldr	r0, [sp, #16]
   11b64:	9902      	ldr	r1, [sp, #8]
   11b66:	9a06      	ldr	r2, [sp, #24]
   11b68:	f7ff fec1 	bl	118ee <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11b6c:	e7ff      	b.n	11b6e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x112>
   11b6e:	e7ff      	b.n	11b70 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   11b70:	f1a7 0408 	sub.w	r4, r7, #8
   11b74:	46a5      	mov	sp, r4
   11b76:	bdd0      	pop	{r4, r6, r7, pc}

00011b78 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>:
   11b78:	b580      	push	{r7, lr}
   11b7a:	b08a      	sub	sp, #40	; 0x28
   11b7c:	9004      	str	r0, [sp, #16]
   11b7e:	9905      	ldr	r1, [sp, #20]
   11b80:	9103      	str	r1, [sp, #12]
   11b82:	9002      	str	r0, [sp, #8]
   11b84:	e7ff      	b.n	11b86 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0xe>
   11b86:	a803      	add	r0, sp, #12
   11b88:	9008      	str	r0, [sp, #32]
   11b8a:	9009      	str	r0, [sp, #36]	; 0x24
   11b8c:	e7ff      	b.n	11b8e <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x16>
   11b8e:	a903      	add	r1, sp, #12
   11b90:	2201      	movs	r2, #1
   11b92:	9802      	ldr	r0, [sp, #8]
   11b94:	f7ff feb8 	bl	11908 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   11b98:	e7ff      	b.n	11b9a <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x22>
   11b9a:	9803      	ldr	r0, [sp, #12]
   11b9c:	9006      	str	r0, [sp, #24]
   11b9e:	9007      	str	r0, [sp, #28]
   11ba0:	9001      	str	r0, [sp, #4]
   11ba2:	e7ff      	b.n	11ba4 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x2c>
   11ba4:	9801      	ldr	r0, [sp, #4]
   11ba6:	b00a      	add	sp, #40	; 0x28
   11ba8:	bd80      	pop	{r7, pc}

00011baa <_ZN4core3ptr5write17h4a80332de2cee3d3E>:
   11baa:	b082      	sub	sp, #8
   11bac:	9000      	str	r0, [sp, #0]
   11bae:	9101      	str	r1, [sp, #4]
   11bb0:	6001      	str	r1, [r0, #0]
   11bb2:	b002      	add	sp, #8
   11bb4:	4770      	bx	lr

00011bb6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>:
   11bb6:	b580      	push	{r7, lr}
   11bb8:	b084      	sub	sp, #16
   11bba:	9002      	str	r0, [sp, #8]
   11bbc:	9103      	str	r1, [sp, #12]
   11bbe:	f000 f805 	bl	11bcc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>
   11bc2:	9001      	str	r0, [sp, #4]
   11bc4:	e7ff      	b.n	11bc6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E+0x10>
   11bc6:	9801      	ldr	r0, [sp, #4]
   11bc8:	b004      	add	sp, #16
   11bca:	bd80      	pop	{r7, pc}

00011bcc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>:
   11bcc:	b084      	sub	sp, #16
   11bce:	9001      	str	r0, [sp, #4]
   11bd0:	9102      	str	r1, [sp, #8]
   11bd2:	4408      	add	r0, r1
   11bd4:	9003      	str	r0, [sp, #12]
   11bd6:	9803      	ldr	r0, [sp, #12]
   11bd8:	9000      	str	r0, [sp, #0]
   11bda:	e7ff      	b.n	11bdc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE+0x10>
   11bdc:	9800      	ldr	r0, [sp, #0]
   11bde:	b004      	add	sp, #16
   11be0:	4770      	bx	lr

00011be2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>:
   11be2:	b580      	push	{r7, lr}
   11be4:	b084      	sub	sp, #16
   11be6:	9002      	str	r0, [sp, #8]
   11be8:	9103      	str	r1, [sp, #12]
   11bea:	f000 f805 	bl	11bf8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>
   11bee:	9001      	str	r0, [sp, #4]
   11bf0:	e7ff      	b.n	11bf2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE+0x10>
   11bf2:	9801      	ldr	r0, [sp, #4]
   11bf4:	b004      	add	sp, #16
   11bf6:	bd80      	pop	{r7, pc}

00011bf8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>:
   11bf8:	b084      	sub	sp, #16
   11bfa:	9001      	str	r0, [sp, #4]
   11bfc:	9102      	str	r1, [sp, #8]
   11bfe:	4408      	add	r0, r1
   11c00:	9003      	str	r0, [sp, #12]
   11c02:	9803      	ldr	r0, [sp, #12]
   11c04:	9000      	str	r0, [sp, #0]
   11c06:	e7ff      	b.n	11c08 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE+0x10>
   11c08:	9800      	ldr	r0, [sp, #0]
   11c0a:	b004      	add	sp, #16
   11c0c:	4770      	bx	lr

00011c0e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>:
   11c0e:	b580      	push	{r7, lr}
   11c10:	b08a      	sub	sp, #40	; 0x28
   11c12:	9009      	str	r0, [sp, #36]	; 0x24
   11c14:	2100      	movs	r1, #0
   11c16:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   11c1a:	1d01      	adds	r1, r0, #4
   11c1c:	9002      	str	r0, [sp, #8]
   11c1e:	f7ff fe81 	bl	11924 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>
   11c22:	9001      	str	r0, [sp, #4]
   11c24:	e7ff      	b.n	11c26 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x18>
   11c26:	9801      	ldr	r0, [sp, #4]
   11c28:	07c1      	lsls	r1, r0, #31
   11c2a:	2900      	cmp	r1, #0
   11c2c:	d103      	bne.n	11c36 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x28>
   11c2e:	e7ff      	b.n	11c30 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x22>
   11c30:	2000      	movs	r0, #0
   11c32:	9003      	str	r0, [sp, #12]
   11c34:	e021      	b.n	11c7a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   11c36:	2001      	movs	r0, #1
   11c38:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11c3c:	9902      	ldr	r1, [sp, #8]
   11c3e:	9000      	str	r0, [sp, #0]
   11c40:	4608      	mov	r0, r1
   11c42:	9900      	ldr	r1, [sp, #0]
   11c44:	f7ff fe39 	bl	118ba <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>
   11c48:	9106      	str	r1, [sp, #24]
   11c4a:	9005      	str	r0, [sp, #20]
   11c4c:	e7ff      	b.n	11c4e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x40>
   11c4e:	9805      	ldr	r0, [sp, #20]
   11c50:	2801      	cmp	r0, #1
   11c52:	d003      	beq.n	11c5c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x4e>
   11c54:	e7ff      	b.n	11c56 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x48>
   11c56:	2000      	movs	r0, #0
   11c58:	9003      	str	r0, [sp, #12]
   11c5a:	e021      	b.n	11ca0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   11c5c:	2000      	movs	r0, #0
   11c5e:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11c62:	9806      	ldr	r0, [sp, #24]
   11c64:	9007      	str	r0, [sp, #28]
   11c66:	a807      	add	r0, sp, #28
   11c68:	9902      	ldr	r1, [sp, #8]
   11c6a:	f7ff fe67 	bl	1193c <_ZN4core3mem4swap17hc4afbec7b5ffb125E>
   11c6e:	e7ff      	b.n	11c70 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x62>
   11c70:	9807      	ldr	r0, [sp, #28]
   11c72:	9004      	str	r0, [sp, #16]
   11c74:	2001      	movs	r0, #1
   11c76:	9003      	str	r0, [sp, #12]
   11c78:	e012      	b.n	11ca0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   11c7a:	9803      	ldr	r0, [sp, #12]
   11c7c:	9904      	ldr	r1, [sp, #16]
   11c7e:	b00a      	add	sp, #40	; 0x28
   11c80:	bd80      	pop	{r7, pc}
   11c82:	2000      	movs	r0, #0
   11c84:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11c88:	e7f7      	b.n	11c7a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   11c8a:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   11c8e:	07c0      	lsls	r0, r0, #31
   11c90:	2800      	cmp	r0, #0
   11c92:	d0f6      	beq.n	11c82 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11c94:	e7ff      	b.n	11c96 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x88>
   11c96:	2000      	movs	r0, #0
   11c98:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11c9c:	e7f1      	b.n	11c82 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11c9e:	e7f0      	b.n	11c82 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11ca0:	9805      	ldr	r0, [sp, #20]
   11ca2:	2801      	cmp	r0, #1
   11ca4:	d0f1      	beq.n	11c8a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x7c>
   11ca6:	e7fa      	b.n	11c9e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x90>

00011ca8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>:
   11ca8:	b082      	sub	sp, #8
   11caa:	9000      	str	r0, [sp, #0]
   11cac:	9101      	str	r1, [sp, #4]
   11cae:	b002      	add	sp, #8
   11cb0:	4770      	bx	lr

00011cb2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>:
   11cb2:	b580      	push	{r7, lr}
   11cb4:	b086      	sub	sp, #24
   11cb6:	9003      	str	r0, [sp, #12]
   11cb8:	9104      	str	r1, [sp, #16]
   11cba:	9205      	str	r2, [sp, #20]
   11cbc:	9002      	str	r0, [sp, #8]
   11cbe:	4610      	mov	r0, r2
   11cc0:	9a02      	ldr	r2, [sp, #8]
   11cc2:	9101      	str	r1, [sp, #4]
   11cc4:	4611      	mov	r1, r2
   11cc6:	9a01      	ldr	r2, [sp, #4]
   11cc8:	f000 f846 	bl	11d58 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>
   11ccc:	9000      	str	r0, [sp, #0]
   11cce:	e7ff      	b.n	11cd0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E+0x1e>
   11cd0:	9800      	ldr	r0, [sp, #0]
   11cd2:	b006      	add	sp, #24
   11cd4:	bd80      	pop	{r7, pc}

00011cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>:
   11cd6:	b084      	sub	sp, #16
   11cd8:	9002      	str	r0, [sp, #8]
   11cda:	9103      	str	r1, [sp, #12]
   11cdc:	9000      	str	r0, [sp, #0]
   11cde:	9101      	str	r1, [sp, #4]
   11ce0:	9801      	ldr	r0, [sp, #4]
   11ce2:	b004      	add	sp, #16
   11ce4:	4770      	bx	lr

00011ce6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>:
   11ce6:	b082      	sub	sp, #8
   11ce8:	9000      	str	r0, [sp, #0]
   11cea:	9101      	str	r1, [sp, #4]
   11cec:	b002      	add	sp, #8
   11cee:	4770      	bx	lr

00011cf0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>:
   11cf0:	b081      	sub	sp, #4
   11cf2:	9000      	str	r0, [sp, #0]
   11cf4:	b001      	add	sp, #4
   11cf6:	4770      	bx	lr

00011cf8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>:
   11cf8:	b580      	push	{r7, lr}
   11cfa:	b082      	sub	sp, #8
   11cfc:	9001      	str	r0, [sp, #4]
   11cfe:	f7ff fff7 	bl	11cf0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>
   11d02:	9000      	str	r0, [sp, #0]
   11d04:	e7ff      	b.n	11d06 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE+0xe>
   11d06:	9800      	ldr	r0, [sp, #0]
   11d08:	b002      	add	sp, #8
   11d0a:	bd80      	pop	{r7, pc}

00011d0c <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>:
   11d0c:	b580      	push	{r7, lr}
   11d0e:	b084      	sub	sp, #16
   11d10:	9003      	str	r0, [sp, #12]
   11d12:	f7ff fff1 	bl	11cf8 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>
   11d16:	9001      	str	r0, [sp, #4]
   11d18:	e7ff      	b.n	11d1a <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E+0xe>
   11d1a:	9801      	ldr	r0, [sp, #4]
   11d1c:	9002      	str	r0, [sp, #8]
   11d1e:	9802      	ldr	r0, [sp, #8]
   11d20:	b004      	add	sp, #16
   11d22:	bd80      	pop	{r7, pc}

00011d24 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>:
   11d24:	b082      	sub	sp, #8
   11d26:	9000      	str	r0, [sp, #0]
   11d28:	9101      	str	r1, [sp, #4]
   11d2a:	b002      	add	sp, #8
   11d2c:	4770      	bx	lr

00011d2e <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>:
   11d2e:	b580      	push	{r7, lr}
   11d30:	b086      	sub	sp, #24
   11d32:	9003      	str	r0, [sp, #12]
   11d34:	9104      	str	r1, [sp, #16]
   11d36:	9205      	str	r2, [sp, #20]
   11d38:	9002      	str	r0, [sp, #8]
   11d3a:	4608      	mov	r0, r1
   11d3c:	4611      	mov	r1, r2
   11d3e:	f7ff ffd2 	bl	11ce6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   11d42:	9001      	str	r0, [sp, #4]
   11d44:	e7ff      	b.n	11d46 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x18>
   11d46:	9801      	ldr	r0, [sp, #4]
   11d48:	9902      	ldr	r1, [sp, #8]
   11d4a:	f7ff ff4a 	bl	11be2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>
   11d4e:	9000      	str	r0, [sp, #0]
   11d50:	e7ff      	b.n	11d52 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x24>
   11d52:	9800      	ldr	r0, [sp, #0]
   11d54:	b006      	add	sp, #24
   11d56:	bd80      	pop	{r7, pc}

00011d58 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>:
   11d58:	b580      	push	{r7, lr}
   11d5a:	b086      	sub	sp, #24
   11d5c:	9003      	str	r0, [sp, #12]
   11d5e:	9104      	str	r1, [sp, #16]
   11d60:	9205      	str	r2, [sp, #20]
   11d62:	9002      	str	r0, [sp, #8]
   11d64:	4608      	mov	r0, r1
   11d66:	4611      	mov	r1, r2
   11d68:	f7ff ff9e 	bl	11ca8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   11d6c:	9001      	str	r0, [sp, #4]
   11d6e:	e7ff      	b.n	11d70 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x18>
   11d70:	9801      	ldr	r0, [sp, #4]
   11d72:	9902      	ldr	r1, [sp, #8]
   11d74:	f7ff ff1f 	bl	11bb6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11d78:	9000      	str	r0, [sp, #0]
   11d7a:	e7ff      	b.n	11d7c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x24>
   11d7c:	9800      	ldr	r0, [sp, #0]
   11d7e:	b006      	add	sp, #24
   11d80:	bd80      	pop	{r7, pc}

00011d82 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>:
   11d82:	b081      	sub	sp, #4
   11d84:	b001      	add	sp, #4
   11d86:	4770      	bx	lr

00011d88 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>:
   11d88:	b580      	push	{r7, lr}
   11d8a:	b086      	sub	sp, #24
   11d8c:	f8dd c020 	ldr.w	ip, [sp, #32]
   11d90:	9102      	str	r1, [sp, #8]
   11d92:	9203      	str	r2, [sp, #12]
   11d94:	9304      	str	r3, [sp, #16]
   11d96:	f8cd c014 	str.w	ip, [sp, #20]
   11d9a:	f04f 0e00 	mov.w	lr, #0
   11d9e:	f8cd e004 	str.w	lr, [sp, #4]
   11da2:	f8cd e000 	str.w	lr, [sp]
   11da6:	f8cd e000 	str.w	lr, [sp]
   11daa:	6001      	str	r1, [r0, #0]
   11dac:	6042      	str	r2, [r0, #4]
   11dae:	9900      	ldr	r1, [sp, #0]
   11db0:	9a01      	ldr	r2, [sp, #4]
   11db2:	6081      	str	r1, [r0, #8]
   11db4:	60c2      	str	r2, [r0, #12]
   11db6:	6103      	str	r3, [r0, #16]
   11db8:	f8c0 c014 	str.w	ip, [r0, #20]
   11dbc:	b006      	add	sp, #24
   11dbe:	bd80      	pop	{r7, pc}

00011dc0 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>:
   11dc0:	b580      	push	{r7, lr}
   11dc2:	b084      	sub	sp, #16
   11dc4:	9101      	str	r1, [sp, #4]
   11dc6:	9202      	str	r2, [sp, #8]
   11dc8:	9901      	ldr	r1, [sp, #4]
   11dca:	9a02      	ldr	r2, [sp, #8]
   11dcc:	f000 fa95 	bl	122fa <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>
   11dd0:	e7ff      	b.n	11dd2 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE+0x12>
   11dd2:	b004      	add	sp, #16
   11dd4:	bd80      	pop	{r7, pc}

00011dd6 <_ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE>:
   11dd6:	b081      	sub	sp, #4
   11dd8:	9000      	str	r0, [sp, #0]
   11dda:	b001      	add	sp, #4
   11ddc:	4770      	bx	lr

00011dde <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>:
   11dde:	b081      	sub	sp, #4
   11de0:	9000      	str	r0, [sp, #0]
   11de2:	b001      	add	sp, #4
   11de4:	4770      	bx	lr

00011de6 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>:
   11de6:	b580      	push	{r7, lr}
   11de8:	b086      	sub	sp, #24
   11dea:	460a      	mov	r2, r1
   11dec:	9004      	str	r0, [sp, #16]
   11dee:	f88d 1017 	strb.w	r1, [sp, #23]
   11df2:	9203      	str	r2, [sp, #12]
   11df4:	f7ff fff3 	bl	11dde <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   11df8:	9002      	str	r0, [sp, #8]
   11dfa:	e7ff      	b.n	11dfc <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x16>
   11dfc:	9802      	ldr	r0, [sp, #8]
   11dfe:	9903      	ldr	r1, [sp, #12]
   11e00:	f000 f806 	bl	11e10 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   11e04:	9001      	str	r0, [sp, #4]
   11e06:	e7ff      	b.n	11e08 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x22>
   11e08:	9801      	ldr	r0, [sp, #4]
   11e0a:	b006      	add	sp, #24
   11e0c:	bd80      	pop	{r7, pc}
	...

00011e10 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>:
   11e10:	b086      	sub	sp, #24
   11e12:	460a      	mov	r2, r1
   11e14:	f88d 100f 	strb.w	r1, [sp, #15]
   11e18:	9005      	str	r0, [sp, #20]
   11e1a:	f89d 100f 	ldrb.w	r1, [sp, #15]
   11e1e:	9002      	str	r0, [sp, #8]
   11e20:	9101      	str	r1, [sp, #4]
   11e22:	9901      	ldr	r1, [sp, #4]
   11e24:	e8df f001 	tbb	[pc, r1]
   11e28:	03102317 	.word	0x03102317
   11e2c:	001c      	.short	0x001c
   11e2e:	f644 009d 	movw	r0, #18589	; 0x489d
   11e32:	f2c0 0002 	movt	r0, #2
   11e36:	f644 1218 	movw	r2, #18712	; 0x4918
   11e3a:	f2c0 0202 	movt	r2, #2
   11e3e:	2131      	movs	r1, #49	; 0x31
   11e40:	f003 fc48 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11e44:	defe      	udf	#254	; 0xfe
   11e46:	defe      	udf	#254	; 0xfe
   11e48:	9802      	ldr	r0, [sp, #8]
   11e4a:	6801      	ldr	r1, [r0, #0]
   11e4c:	f3bf 8f5f 	dmb	sy
   11e50:	9104      	str	r1, [sp, #16]
   11e52:	e7ff      	b.n	11e54 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x44>
   11e54:	e017      	b.n	11e86 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   11e56:	9802      	ldr	r0, [sp, #8]
   11e58:	6801      	ldr	r1, [r0, #0]
   11e5a:	9104      	str	r1, [sp, #16]
   11e5c:	e7ff      	b.n	11e5e <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x4e>
   11e5e:	e012      	b.n	11e86 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   11e60:	9802      	ldr	r0, [sp, #8]
   11e62:	6801      	ldr	r1, [r0, #0]
   11e64:	f3bf 8f5f 	dmb	sy
   11e68:	9104      	str	r1, [sp, #16]
   11e6a:	e7ff      	b.n	11e6c <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x5c>
   11e6c:	e00b      	b.n	11e86 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   11e6e:	f644 1028 	movw	r0, #18728	; 0x4928
   11e72:	f2c0 0002 	movt	r0, #2
   11e76:	f644 1218 	movw	r2, #18712	; 0x4918
   11e7a:	f2c0 0202 	movt	r2, #2
   11e7e:	2128      	movs	r1, #40	; 0x28
   11e80:	f003 fc28 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11e84:	defe      	udf	#254	; 0xfe
   11e86:	9804      	ldr	r0, [sp, #16]
   11e88:	b006      	add	sp, #24
   11e8a:	4770      	bx	lr

00011e8c <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>:
   11e8c:	b081      	sub	sp, #4
   11e8e:	9000      	str	r0, [sp, #0]
   11e90:	6800      	ldr	r0, [r0, #0]
   11e92:	b001      	add	sp, #4
   11e94:	4770      	bx	lr

00011e96 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>:
   11e96:	b082      	sub	sp, #8
   11e98:	9001      	str	r0, [sp, #4]
   11e9a:	6801      	ldr	r1, [r0, #0]
   11e9c:	6840      	ldr	r0, [r0, #4]
   11e9e:	9000      	str	r0, [sp, #0]
   11ea0:	4608      	mov	r0, r1
   11ea2:	9900      	ldr	r1, [sp, #0]
   11ea4:	b002      	add	sp, #8
   11ea6:	4770      	bx	lr

00011ea8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>:
   11ea8:	b580      	push	{r7, lr}
   11eaa:	b08c      	sub	sp, #48	; 0x30
   11eac:	9101      	str	r1, [sp, #4]
   11eae:	9202      	str	r2, [sp, #8]
   11eb0:	2100      	movs	r1, #0
   11eb2:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   11eb6:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   11eba:	2101      	movs	r1, #1
   11ebc:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   11ec0:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   11ec4:	9901      	ldr	r1, [sp, #4]
   11ec6:	2900      	cmp	r1, #0
   11ec8:	460a      	mov	r2, r1
   11eca:	bf18      	it	ne
   11ecc:	2201      	movne	r2, #1
   11ece:	2900      	cmp	r1, #0
   11ed0:	9000      	str	r0, [sp, #0]
   11ed2:	d001      	beq.n	11ed8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x30>
   11ed4:	e7ff      	b.n	11ed6 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x2e>
   11ed6:	e008      	b.n	11eea <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x42>
   11ed8:	2000      	movs	r0, #0
   11eda:	9900      	ldr	r1, [sp, #0]
   11edc:	6088      	str	r0, [r1, #8]
   11ede:	6048      	str	r0, [r1, #4]
   11ee0:	6008      	str	r0, [r1, #0]
   11ee2:	2002      	movs	r0, #2
   11ee4:	6008      	str	r0, [r1, #0]
   11ee6:	e021      	b.n	11f2c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   11ee8:	defe      	udf	#254	; 0xfe
   11eea:	2000      	movs	r0, #0
   11eec:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11ef0:	9901      	ldr	r1, [sp, #4]
   11ef2:	9a02      	ldr	r2, [sp, #8]
   11ef4:	910a      	str	r1, [sp, #40]	; 0x28
   11ef6:	920b      	str	r2, [sp, #44]	; 0x2c
   11ef8:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11efc:	9106      	str	r1, [sp, #24]
   11efe:	9207      	str	r2, [sp, #28]
   11f00:	9906      	ldr	r1, [sp, #24]
   11f02:	9a07      	ldr	r2, [sp, #28]
   11f04:	a803      	add	r0, sp, #12
   11f06:	f7ff ff5b 	bl	11dc0 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>
   11f0a:	e7ff      	b.n	11f0c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x64>
   11f0c:	9803      	ldr	r0, [sp, #12]
   11f0e:	9904      	ldr	r1, [sp, #16]
   11f10:	9a05      	ldr	r2, [sp, #20]
   11f12:	9b00      	ldr	r3, [sp, #0]
   11f14:	609a      	str	r2, [r3, #8]
   11f16:	6059      	str	r1, [r3, #4]
   11f18:	6018      	str	r0, [r3, #0]
   11f1a:	e007      	b.n	11f2c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   11f1c:	9801      	ldr	r0, [sp, #4]
   11f1e:	2800      	cmp	r0, #0
   11f20:	d10c      	bne.n	11f3c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x94>
   11f22:	e015      	b.n	11f50 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa8>
   11f24:	2000      	movs	r0, #0
   11f26:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11f2a:	e7f7      	b.n	11f1c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   11f2c:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   11f30:	07c0      	lsls	r0, r0, #31
   11f32:	2800      	cmp	r0, #0
   11f34:	d1f6      	bne.n	11f24 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x7c>
   11f36:	e7f1      	b.n	11f1c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   11f38:	b00c      	add	sp, #48	; 0x30
   11f3a:	bd80      	pop	{r7, pc}
   11f3c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   11f40:	07c0      	lsls	r0, r0, #31
   11f42:	2800      	cmp	r0, #0
   11f44:	d0f8      	beq.n	11f38 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   11f46:	e7ff      	b.n	11f48 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa0>
   11f48:	2000      	movs	r0, #0
   11f4a:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11f4e:	e7f3      	b.n	11f38 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   11f50:	e7f2      	b.n	11f38 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>

00011f52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>:
   11f52:	b081      	sub	sp, #4
   11f54:	b001      	add	sp, #4
   11f56:	4770      	bx	lr

00011f58 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>:
   11f58:	b5b0      	push	{r4, r5, r7, lr}
   11f5a:	b081      	sub	sp, #4
   11f5c:	9100      	str	r1, [sp, #0]
   11f5e:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   11f62:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   11f66:	b001      	add	sp, #4
   11f68:	bdb0      	pop	{r4, r5, r7, pc}

00011f6a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>:
   11f6a:	b580      	push	{r7, lr}
   11f6c:	b088      	sub	sp, #32
   11f6e:	9106      	str	r1, [sp, #24]
   11f70:	680a      	ldr	r2, [r1, #0]
   11f72:	1e93      	subs	r3, r2, #2
   11f74:	bf18      	it	ne
   11f76:	2301      	movne	r3, #1
   11f78:	2a02      	cmp	r2, #2
   11f7a:	9102      	str	r1, [sp, #8]
   11f7c:	9001      	str	r0, [sp, #4]
   11f7e:	d001      	beq.n	11f84 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x1a>
   11f80:	e7ff      	b.n	11f82 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x18>
   11f82:	e008      	b.n	11f96 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x2c>
   11f84:	2000      	movs	r0, #0
   11f86:	9901      	ldr	r1, [sp, #4]
   11f88:	6088      	str	r0, [r1, #8]
   11f8a:	6048      	str	r0, [r1, #4]
   11f8c:	6008      	str	r0, [r1, #0]
   11f8e:	2002      	movs	r0, #2
   11f90:	6008      	str	r0, [r1, #0]
   11f92:	e00f      	b.n	11fb4 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   11f94:	defe      	udf	#254	; 0xfe
   11f96:	9802      	ldr	r0, [sp, #8]
   11f98:	9007      	str	r0, [sp, #28]
   11f9a:	a803      	add	r0, sp, #12
   11f9c:	9902      	ldr	r1, [sp, #8]
   11f9e:	f000 f9b5 	bl	1230c <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>
   11fa2:	e7ff      	b.n	11fa4 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x3a>
   11fa4:	9803      	ldr	r0, [sp, #12]
   11fa6:	9904      	ldr	r1, [sp, #16]
   11fa8:	9a05      	ldr	r2, [sp, #20]
   11faa:	9b01      	ldr	r3, [sp, #4]
   11fac:	609a      	str	r2, [r3, #8]
   11fae:	6059      	str	r1, [r3, #4]
   11fb0:	6018      	str	r0, [r3, #0]
   11fb2:	e7ff      	b.n	11fb4 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   11fb4:	b008      	add	sp, #32
   11fb6:	bd80      	pop	{r7, pc}

00011fb8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>:
   11fb8:	b580      	push	{r7, lr}
   11fba:	b086      	sub	sp, #24
   11fbc:	9004      	str	r0, [sp, #16]
   11fbe:	6801      	ldr	r1, [r0, #0]
   11fc0:	2900      	cmp	r1, #0
   11fc2:	9001      	str	r0, [sp, #4]
   11fc4:	d001      	beq.n	11fca <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x12>
   11fc6:	e7ff      	b.n	11fc8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x10>
   11fc8:	e003      	b.n	11fd2 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x1a>
   11fca:	2000      	movs	r0, #0
   11fcc:	9002      	str	r0, [sp, #8]
   11fce:	e00d      	b.n	11fec <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   11fd0:	defe      	udf	#254	; 0xfe
   11fd2:	9801      	ldr	r0, [sp, #4]
   11fd4:	1d01      	adds	r1, r0, #4
   11fd6:	9105      	str	r1, [sp, #20]
   11fd8:	4608      	mov	r0, r1
   11fda:	f7ff ff57 	bl	11e8c <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>
   11fde:	9000      	str	r0, [sp, #0]
   11fe0:	e7ff      	b.n	11fe2 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x2a>
   11fe2:	9800      	ldr	r0, [sp, #0]
   11fe4:	9003      	str	r0, [sp, #12]
   11fe6:	2101      	movs	r1, #1
   11fe8:	9102      	str	r1, [sp, #8]
   11fea:	e7ff      	b.n	11fec <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   11fec:	9802      	ldr	r0, [sp, #8]
   11fee:	9903      	ldr	r1, [sp, #12]
   11ff0:	b006      	add	sp, #24
   11ff2:	bd80      	pop	{r7, pc}

00011ff4 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>:
    fn clone(&self) -> Level {
   11ff4:	b081      	sub	sp, #4
   11ff6:	9000      	str	r0, [sp, #0]
        *self
   11ff8:	6800      	ldr	r0, [r0, #0]
    }
   11ffa:	b001      	add	sp, #4
   11ffc:	4770      	bx	lr

00011ffe <_ZN3log6Record7builder17hde62ab0132265febE>:
    pub fn builder() -> RecordBuilder<'a> {
   11ffe:	b580      	push	{r7, lr}
        RecordBuilder::new()
   12000:	f000 f802 	bl	12008 <_ZN3log13RecordBuilder3new17haca8312579858419E>
   12004:	e7ff      	b.n	12006 <_ZN3log6Record7builder17hde62ab0132265febE+0x8>
    }
   12006:	bd80      	pop	{r7, pc}

00012008 <_ZN3log13RecordBuilder3new17haca8312579858419E>:
    pub fn new() -> RecordBuilder<'a> {
   12008:	b570      	push	{r4, r5, r6, lr}
   1200a:	b0aa      	sub	sp, #168	; 0xa8
                args: format_args!(""),
   1200c:	f644 1168 	movw	r1, #18792	; 0x4968
   12010:	f2c0 0102 	movt	r1, #2
   12014:	6809      	ldr	r1, [r1, #0]
   12016:	466a      	mov	r2, sp
   12018:	2300      	movs	r3, #0
   1201a:	6013      	str	r3, [r2, #0]
   1201c:	aa16      	add	r2, sp, #88	; 0x58
   1201e:	9004      	str	r0, [sp, #16]
   12020:	4610      	mov	r0, r2
   12022:	9103      	str	r1, [sp, #12]
   12024:	461a      	mov	r2, r3
   12026:	9b03      	ldr	r3, [sp, #12]
   12028:	f7ff feae 	bl	11d88 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>
   1202c:	e7ff      	b.n	1202e <_ZN3log13RecordBuilder3new17haca8312579858419E+0x26>
   1202e:	a81f      	add	r0, sp, #124	; 0x7c
                metadata: Metadata::builder().build(),
   12030:	f000 f891 	bl	12156 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>
   12034:	e7ff      	b.n	12036 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x2e>
   12036:	a81c      	add	r0, sp, #112	; 0x70
   12038:	a91f      	add	r1, sp, #124	; 0x7c
   1203a:	f000 f8a5 	bl	12188 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>
   1203e:	e7ff      	b.n	12040 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x38>
   12040:	2000      	movs	r0, #0
                module_path: None,
   12042:	9024      	str	r0, [sp, #144]	; 0x90
   12044:	9023      	str	r0, [sp, #140]	; 0x8c
   12046:	9022      	str	r0, [sp, #136]	; 0x88
   12048:	2102      	movs	r1, #2
   1204a:	9122      	str	r1, [sp, #136]	; 0x88
                file: None,
   1204c:	9027      	str	r0, [sp, #156]	; 0x9c
   1204e:	9026      	str	r0, [sp, #152]	; 0x98
   12050:	9025      	str	r0, [sp, #148]	; 0x94
   12052:	9125      	str	r1, [sp, #148]	; 0x94
                line: None,
   12054:	9028      	str	r0, [sp, #160]	; 0xa0
            record: Record {
   12056:	981c      	ldr	r0, [sp, #112]	; 0x70
   12058:	991d      	ldr	r1, [sp, #116]	; 0x74
   1205a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1205c:	9207      	str	r2, [sp, #28]
   1205e:	9106      	str	r1, [sp, #24]
   12060:	9005      	str	r0, [sp, #20]
   12062:	a805      	add	r0, sp, #20
   12064:	f100 010c 	add.w	r1, r0, #12
   12068:	aa16      	add	r2, sp, #88	; 0x58
   1206a:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   1206e:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   12072:	9922      	ldr	r1, [sp, #136]	; 0x88
   12074:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   12076:	9b24      	ldr	r3, [sp, #144]	; 0x90
   12078:	9310      	str	r3, [sp, #64]	; 0x40
   1207a:	920f      	str	r2, [sp, #60]	; 0x3c
   1207c:	910e      	str	r1, [sp, #56]	; 0x38
   1207e:	9925      	ldr	r1, [sp, #148]	; 0x94
   12080:	9a26      	ldr	r2, [sp, #152]	; 0x98
   12082:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   12084:	9313      	str	r3, [sp, #76]	; 0x4c
   12086:	9212      	str	r2, [sp, #72]	; 0x48
   12088:	9111      	str	r1, [sp, #68]	; 0x44
   1208a:	9928      	ldr	r1, [sp, #160]	; 0xa0
   1208c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1208e:	9114      	str	r1, [sp, #80]	; 0x50
   12090:	9215      	str	r2, [sp, #84]	; 0x54
   12092:	2244      	movs	r2, #68	; 0x44
        return RecordBuilder {
   12094:	9904      	ldr	r1, [sp, #16]
   12096:	9002      	str	r0, [sp, #8]
   12098:	4608      	mov	r0, r1
   1209a:	9902      	ldr	r1, [sp, #8]
   1209c:	f009 fe26 	bl	1bcec <__aeabi_memcpy>
    }
   120a0:	b02a      	add	sp, #168	; 0xa8
   120a2:	bd70      	pop	{r4, r5, r6, pc}

000120a4 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
   120a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   120a6:	b087      	sub	sp, #28
   120a8:	9006      	str	r0, [sp, #24]
   120aa:	466a      	mov	r2, sp
        self.record.args = args;
   120ac:	4613      	mov	r3, r2
   120ae:	e891 50f0 	ldmia.w	r1, {r4, r5, r6, r7, ip, lr}
   120b2:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
   120b6:	f100 010c 	add.w	r1, r0, #12
   120ba:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   120be:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    }
   120c2:	b007      	add	sp, #28
   120c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000120c6 <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
   120c6:	b082      	sub	sp, #8
   120c8:	9000      	str	r0, [sp, #0]
   120ca:	9101      	str	r1, [sp, #4]
        self.record.metadata.level = level;
   120cc:	6001      	str	r1, [r0, #0]
    }
   120ce:	b002      	add	sp, #8
   120d0:	4770      	bx	lr

000120d2 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
   120d2:	b083      	sub	sp, #12
   120d4:	9000      	str	r0, [sp, #0]
   120d6:	9101      	str	r1, [sp, #4]
   120d8:	9202      	str	r2, [sp, #8]
        self.record.metadata.target = target;
   120da:	6041      	str	r1, [r0, #4]
   120dc:	6082      	str	r2, [r0, #8]
    }
   120de:	b003      	add	sp, #12
   120e0:	4770      	bx	lr

000120e2 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
   120e2:	b580      	push	{r7, lr}
   120e4:	b088      	sub	sp, #32
   120e6:	9005      	str	r0, [sp, #20]
   120e8:	9106      	str	r1, [sp, #24]
   120ea:	9207      	str	r2, [sp, #28]
   120ec:	ab02      	add	r3, sp, #8
        self.record.module_path = path.map(MaybeStaticStr::Static);
   120ee:	9001      	str	r0, [sp, #4]
   120f0:	4618      	mov	r0, r3
   120f2:	f7ff fed9 	bl	11ea8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   120f6:	e7ff      	b.n	120f8 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE+0x16>
   120f8:	9802      	ldr	r0, [sp, #8]
   120fa:	9903      	ldr	r1, [sp, #12]
   120fc:	9a04      	ldr	r2, [sp, #16]
   120fe:	9b01      	ldr	r3, [sp, #4]
   12100:	62da      	str	r2, [r3, #44]	; 0x2c
   12102:	6299      	str	r1, [r3, #40]	; 0x28
   12104:	6258      	str	r0, [r3, #36]	; 0x24
    }
   12106:	4618      	mov	r0, r3
   12108:	b008      	add	sp, #32
   1210a:	bd80      	pop	{r7, pc}

0001210c <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
   1210c:	b580      	push	{r7, lr}
   1210e:	b088      	sub	sp, #32
   12110:	9005      	str	r0, [sp, #20]
   12112:	9106      	str	r1, [sp, #24]
   12114:	9207      	str	r2, [sp, #28]
   12116:	ab02      	add	r3, sp, #8
        self.record.file = file.map(MaybeStaticStr::Static);
   12118:	9001      	str	r0, [sp, #4]
   1211a:	4618      	mov	r0, r3
   1211c:	f7ff fec4 	bl	11ea8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   12120:	e7ff      	b.n	12122 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E+0x16>
   12122:	9802      	ldr	r0, [sp, #8]
   12124:	9903      	ldr	r1, [sp, #12]
   12126:	9a04      	ldr	r2, [sp, #16]
   12128:	9b01      	ldr	r3, [sp, #4]
   1212a:	639a      	str	r2, [r3, #56]	; 0x38
   1212c:	6359      	str	r1, [r3, #52]	; 0x34
   1212e:	6318      	str	r0, [r3, #48]	; 0x30
    }
   12130:	4618      	mov	r0, r3
   12132:	b008      	add	sp, #32
   12134:	bd80      	pop	{r7, pc}

00012136 <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
   12136:	b083      	sub	sp, #12
   12138:	9000      	str	r0, [sp, #0]
   1213a:	9101      	str	r1, [sp, #4]
   1213c:	9202      	str	r2, [sp, #8]
        self.record.line = line;
   1213e:	63c1      	str	r1, [r0, #60]	; 0x3c
   12140:	6402      	str	r2, [r0, #64]	; 0x40
    }
   12142:	b003      	add	sp, #12
   12144:	4770      	bx	lr

00012146 <_ZN3log13RecordBuilder5build17h83529556a009112eE>:
    pub fn build(&self) -> Record<'a> {
   12146:	b580      	push	{r7, lr}
   12148:	b082      	sub	sp, #8
   1214a:	9101      	str	r1, [sp, #4]
        self.record.clone()
   1214c:	f000 f8e8 	bl	12320 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>
   12150:	e7ff      	b.n	12152 <_ZN3log13RecordBuilder5build17h83529556a009112eE+0xc>
    }
   12152:	b002      	add	sp, #8
   12154:	bd80      	pop	{r7, pc}

00012156 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>:
    pub fn builder() -> MetadataBuilder<'a> {
   12156:	b580      	push	{r7, lr}
        MetadataBuilder::new()
   12158:	f000 f802 	bl	12160 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>
   1215c:	e7ff      	b.n	1215e <_ZN3log8Metadata7builder17ha56bd59835d60a3cE+0x8>
    }
   1215e:	bd80      	pop	{r7, pc}

00012160 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>:
    pub fn new() -> MetadataBuilder<'a> {
   12160:	b084      	sub	sp, #16
   12162:	2103      	movs	r1, #3
                level: Level::Info,
   12164:	9103      	str	r1, [sp, #12]
            metadata: Metadata {
   12166:	9903      	ldr	r1, [sp, #12]
   12168:	9100      	str	r1, [sp, #0]
   1216a:	f644 1150 	movw	r1, #18768	; 0x4950
   1216e:	f2c0 0102 	movt	r1, #2
   12172:	9101      	str	r1, [sp, #4]
   12174:	2100      	movs	r1, #0
   12176:	9102      	str	r1, [sp, #8]
        MetadataBuilder {
   12178:	9900      	ldr	r1, [sp, #0]
   1217a:	9a01      	ldr	r2, [sp, #4]
   1217c:	9b02      	ldr	r3, [sp, #8]
   1217e:	6083      	str	r3, [r0, #8]
   12180:	6042      	str	r2, [r0, #4]
   12182:	6001      	str	r1, [r0, #0]
    }
   12184:	b004      	add	sp, #16
   12186:	4770      	bx	lr

00012188 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>:
    pub fn build(&self) -> Metadata<'a> {
   12188:	b580      	push	{r7, lr}
   1218a:	b082      	sub	sp, #8
   1218c:	9101      	str	r1, [sp, #4]
        self.metadata.clone()
   1218e:	f000 f91c 	bl	123ca <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   12192:	e7ff      	b.n	12194 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E+0xc>
    }
   12194:	b002      	add	sp, #8
   12196:	bd80      	pop	{r7, pc}

00012198 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE>:
    fn enabled(&self, _: &Metadata) -> bool {
   12198:	b082      	sub	sp, #8
   1219a:	9000      	str	r0, [sp, #0]
   1219c:	9101      	str	r1, [sp, #4]
   1219e:	2000      	movs	r0, #0
    }
   121a0:	b002      	add	sp, #8
   121a2:	4770      	bx	lr

000121a4 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE>:
    fn log(&self, _: &Record) {}
   121a4:	b082      	sub	sp, #8
   121a6:	9000      	str	r0, [sp, #0]
   121a8:	9101      	str	r1, [sp, #4]
   121aa:	b002      	add	sp, #8
   121ac:	4770      	bx	lr

000121ae <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE>:
    fn flush(&self) {}
   121ae:	b081      	sub	sp, #4
   121b0:	9000      	str	r0, [sp, #0]
   121b2:	b001      	add	sp, #4
   121b4:	4770      	bx	lr

000121b6 <_ZN3log6logger17hf609e7cc1c031552E>:
}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static Log {
   121b6:	b580      	push	{r7, lr}
   121b8:	b084      	sub	sp, #16
   121ba:	2004      	movs	r0, #4
    unsafe {
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   121bc:	f88d 000f 	strb.w	r0, [sp, #15]
   121c0:	f89d 100f 	ldrb.w	r1, [sp, #15]
   121c4:	f644 2068 	movw	r0, #19048	; 0x4a68
   121c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   121cc:	f7ff fe0b 	bl	11de6 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>
   121d0:	9000      	str	r0, [sp, #0]
   121d2:	e7ff      	b.n	121d4 <_ZN3log6logger17hf609e7cc1c031552E+0x1e>
   121d4:	9800      	ldr	r0, [sp, #0]
   121d6:	2802      	cmp	r0, #2
   121d8:	d109      	bne.n	121ee <_ZN3log6logger17hf609e7cc1c031552E+0x38>
   121da:	e7ff      	b.n	121dc <_ZN3log6logger17hf609e7cc1c031552E+0x26>
            static NOP: NopLogger = NopLogger;
            &NOP
        } else {
            LOGGER
   121dc:	f240 00f0 	movw	r0, #240	; 0xf0
   121e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   121e4:	6801      	ldr	r1, [r0, #0]
   121e6:	6840      	ldr	r0, [r0, #4]
   121e8:	9101      	str	r1, [sp, #4]
   121ea:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   121ec:	e00a      	b.n	12204 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
            &NOP
   121ee:	f644 1084 	movw	r0, #18820	; 0x4984
   121f2:	f2c0 0002 	movt	r0, #2
   121f6:	9001      	str	r0, [sp, #4]
   121f8:	f644 106c 	movw	r0, #18796	; 0x496c
   121fc:	f2c0 0002 	movt	r0, #2
   12200:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   12202:	e7ff      	b.n	12204 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
   12204:	9801      	ldr	r0, [sp, #4]
   12206:	9902      	ldr	r1, [sp, #8]
        }
    }
}
   12208:	b004      	add	sp, #16
   1220a:	bd80      	pop	{r7, pc}

0001220c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
   1220c:	b570      	push	{r4, r5, r6, lr}
   1220e:	b0ca      	sub	sp, #296	; 0x128
   12210:	9141      	str	r1, [sp, #260]	; 0x104
   12212:	9242      	str	r2, [sp, #264]	; 0x108
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
   12214:	6813      	ldr	r3, [r2, #0]
   12216:	f8d2 c004 	ldr.w	ip, [r2, #4]
   1221a:	9343      	str	r3, [sp, #268]	; 0x10c
   1221c:	f8cd c110 	str.w	ip, [sp, #272]	; 0x110
   12220:	f8d2 e008 	ldr.w	lr, [r2, #8]
   12224:	68d4      	ldr	r4, [r2, #12]
   12226:	f8cd e114 	str.w	lr, [sp, #276]	; 0x114
   1222a:	9446      	str	r4, [sp, #280]	; 0x118
   1222c:	6915      	ldr	r5, [r2, #16]
   1222e:	6956      	ldr	r6, [r2, #20]
   12230:	9547      	str	r5, [sp, #284]	; 0x11c
   12232:	9648      	str	r6, [sp, #288]	; 0x120
   12234:	6992      	ldr	r2, [r2, #24]
   12236:	9249      	str	r2, [sp, #292]	; 0x124
) {
    logger().log(
   12238:	9112      	str	r1, [sp, #72]	; 0x48
   1223a:	9011      	str	r0, [sp, #68]	; 0x44
   1223c:	9310      	str	r3, [sp, #64]	; 0x40
   1223e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   12242:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   12246:	940d      	str	r4, [sp, #52]	; 0x34
   12248:	950c      	str	r5, [sp, #48]	; 0x30
   1224a:	960b      	str	r6, [sp, #44]	; 0x2c
   1224c:	920a      	str	r2, [sp, #40]	; 0x28
   1224e:	f7ff ffb2 	bl	121b6 <_ZN3log6logger17hf609e7cc1c031552E>
   12252:	9009      	str	r0, [sp, #36]	; 0x24
   12254:	9108      	str	r1, [sp, #32]
   12256:	e7ff      	b.n	12258 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x4c>
   12258:	a824      	add	r0, sp, #144	; 0x90
        &Record::builder()
   1225a:	f7ff fed0 	bl	11ffe <_ZN3log6Record7builder17hde62ab0132265febE>
   1225e:	e7ff      	b.n	12260 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x54>
   12260:	a835      	add	r0, sp, #212	; 0xd4
            .args(args)
   12262:	4601      	mov	r1, r0
   12264:	9a11      	ldr	r2, [sp, #68]	; 0x44
   12266:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   1226a:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   1226e:	a924      	add	r1, sp, #144	; 0x90
        &Record::builder()
   12270:	9007      	str	r0, [sp, #28]
   12272:	4608      	mov	r0, r1
   12274:	9907      	ldr	r1, [sp, #28]
   12276:	f7ff ff15 	bl	120a4 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>
   1227a:	9006      	str	r0, [sp, #24]
   1227c:	e7ff      	b.n	1227e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x72>
   1227e:	9806      	ldr	r0, [sp, #24]
   12280:	9912      	ldr	r1, [sp, #72]	; 0x48
   12282:	f7ff ff20 	bl	120c6 <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>
   12286:	9005      	str	r0, [sp, #20]
   12288:	e7ff      	b.n	1228a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x7e>
   1228a:	9805      	ldr	r0, [sp, #20]
   1228c:	9910      	ldr	r1, [sp, #64]	; 0x40
   1228e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12290:	f7ff ff1f 	bl	120d2 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>
   12294:	9004      	str	r0, [sp, #16]
   12296:	e7ff      	b.n	12298 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x8c>
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
   12298:	980e      	ldr	r0, [sp, #56]	; 0x38
   1229a:	903b      	str	r0, [sp, #236]	; 0xec
   1229c:	990d      	ldr	r1, [sp, #52]	; 0x34
   1229e:	913c      	str	r1, [sp, #240]	; 0xf0
        &Record::builder()
   122a0:	993b      	ldr	r1, [sp, #236]	; 0xec
   122a2:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   122a4:	9804      	ldr	r0, [sp, #16]
   122a6:	f7ff ff1c 	bl	120e2 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>
   122aa:	9003      	str	r0, [sp, #12]
   122ac:	e7ff      	b.n	122ae <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xa2>
            .file_static(Some(file))
   122ae:	980c      	ldr	r0, [sp, #48]	; 0x30
   122b0:	903d      	str	r0, [sp, #244]	; 0xf4
   122b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   122b4:	913e      	str	r1, [sp, #248]	; 0xf8
        &Record::builder()
   122b6:	993d      	ldr	r1, [sp, #244]	; 0xf4
   122b8:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
   122ba:	9803      	ldr	r0, [sp, #12]
   122bc:	f7ff ff26 	bl	1210c <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>
   122c0:	9002      	str	r0, [sp, #8]
   122c2:	e7ff      	b.n	122c4 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xb8>
            .line(Some(line))
   122c4:	980a      	ldr	r0, [sp, #40]	; 0x28
   122c6:	9040      	str	r0, [sp, #256]	; 0x100
   122c8:	2101      	movs	r1, #1
   122ca:	913f      	str	r1, [sp, #252]	; 0xfc
        &Record::builder()
   122cc:	993f      	ldr	r1, [sp, #252]	; 0xfc
   122ce:	9a40      	ldr	r2, [sp, #256]	; 0x100
   122d0:	9802      	ldr	r0, [sp, #8]
   122d2:	f7ff ff30 	bl	12136 <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>
   122d6:	9001      	str	r0, [sp, #4]
   122d8:	e7ff      	b.n	122da <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xce>
   122da:	a813      	add	r0, sp, #76	; 0x4c
   122dc:	9901      	ldr	r1, [sp, #4]
   122de:	f7ff ff32 	bl	12146 <_ZN3log13RecordBuilder5build17h83529556a009112eE>
   122e2:	e7ff      	b.n	122e4 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xd8>
    logger().log(
   122e4:	9808      	ldr	r0, [sp, #32]
   122e6:	6901      	ldr	r1, [r0, #16]
   122e8:	aa13      	add	r2, sp, #76	; 0x4c
   122ea:	9809      	ldr	r0, [sp, #36]	; 0x24
   122ec:	9100      	str	r1, [sp, #0]
   122ee:	4611      	mov	r1, r2
   122f0:	9a00      	ldr	r2, [sp, #0]
   122f2:	4790      	blx	r2
   122f4:	e7ff      	b.n	122f6 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xea>
            .build(),
    );
}
   122f6:	b04a      	add	sp, #296	; 0x128
   122f8:	bd70      	pop	{r4, r5, r6, pc}

000122fa <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>:
    Static(&'static str),
   122fa:	b082      	sub	sp, #8
   122fc:	9100      	str	r1, [sp, #0]
   122fe:	9201      	str	r2, [sp, #4]
   12300:	6041      	str	r1, [r0, #4]
   12302:	6082      	str	r2, [r0, #8]
   12304:	2100      	movs	r1, #0
   12306:	6001      	str	r1, [r0, #0]
   12308:	b002      	add	sp, #8
   1230a:	4770      	bx	lr

0001230c <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   1230c:	b081      	sub	sp, #4
   1230e:	9100      	str	r1, [sp, #0]
   12310:	680a      	ldr	r2, [r1, #0]
   12312:	684b      	ldr	r3, [r1, #4]
   12314:	6889      	ldr	r1, [r1, #8]
   12316:	6081      	str	r1, [r0, #8]
   12318:	6043      	str	r3, [r0, #4]
   1231a:	6002      	str	r2, [r0, #0]
   1231c:	b001      	add	sp, #4
   1231e:	4770      	bx	lr

00012320 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>:
#[derive(Clone, Debug)]
   12320:	b570      	push	{r4, r5, r6, lr}
   12322:	b09c      	sub	sp, #112	; 0x70
   12324:	9116      	str	r1, [sp, #88]	; 0x58
    metadata: Metadata<'a>,
   12326:	9117      	str	r1, [sp, #92]	; 0x5c
    args: fmt::Arguments<'a>,
   12328:	f101 020c 	add.w	r2, r1, #12
   1232c:	4613      	mov	r3, r2
   1232e:	9218      	str	r2, [sp, #96]	; 0x60
    module_path: Option<MaybeStaticStr<'a>>,
   12330:	f101 0224 	add.w	r2, r1, #36	; 0x24
   12334:	4694      	mov	ip, r2
   12336:	9219      	str	r2, [sp, #100]	; 0x64
    file: Option<MaybeStaticStr<'a>>,
   12338:	f101 0230 	add.w	r2, r1, #48	; 0x30
   1233c:	4696      	mov	lr, r2
   1233e:	921a      	str	r2, [sp, #104]	; 0x68
    line: Option<u32>,
   12340:	f101 023c 	add.w	r2, r1, #60	; 0x3c
   12344:	4614      	mov	r4, r2
   12346:	921b      	str	r2, [sp, #108]	; 0x6c
   12348:	aa07      	add	r2, sp, #28
    metadata: Metadata<'a>,
   1234a:	9006      	str	r0, [sp, #24]
   1234c:	4610      	mov	r0, r2
   1234e:	9305      	str	r3, [sp, #20]
   12350:	f8cd c010 	str.w	ip, [sp, #16]
   12354:	f8cd e00c 	str.w	lr, [sp, #12]
   12358:	9402      	str	r4, [sp, #8]
   1235a:	f000 f836 	bl	123ca <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   1235e:	e7ff      	b.n	12360 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x40>
   12360:	a80a      	add	r0, sp, #40	; 0x28
    args: fmt::Arguments<'a>,
   12362:	9905      	ldr	r1, [sp, #20]
   12364:	f7ff fdf8 	bl	11f58 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>
   12368:	e7ff      	b.n	1236a <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x4a>
   1236a:	a810      	add	r0, sp, #64	; 0x40
    module_path: Option<MaybeStaticStr<'a>>,
   1236c:	9904      	ldr	r1, [sp, #16]
   1236e:	f7ff fdfc 	bl	11f6a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   12372:	e7ff      	b.n	12374 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x54>
   12374:	a813      	add	r0, sp, #76	; 0x4c
    file: Option<MaybeStaticStr<'a>>,
   12376:	9903      	ldr	r1, [sp, #12]
   12378:	f7ff fdf7 	bl	11f6a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   1237c:	e7ff      	b.n	1237e <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x5e>
    line: Option<u32>,
   1237e:	9802      	ldr	r0, [sp, #8]
   12380:	f7ff fe1a 	bl	11fb8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>
   12384:	9001      	str	r0, [sp, #4]
   12386:	9100      	str	r1, [sp, #0]
   12388:	e7ff      	b.n	1238a <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x6a>
#[derive(Clone, Debug)]
   1238a:	9807      	ldr	r0, [sp, #28]
   1238c:	9908      	ldr	r1, [sp, #32]
   1238e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12390:	9b06      	ldr	r3, [sp, #24]
   12392:	609a      	str	r2, [r3, #8]
   12394:	6059      	str	r1, [r3, #4]
   12396:	6018      	str	r0, [r3, #0]
   12398:	f103 000c 	add.w	r0, r3, #12
   1239c:	a90a      	add	r1, sp, #40	; 0x28
   1239e:	e891 5074 	ldmia.w	r1, {r2, r4, r5, r6, ip, lr}
   123a2:	e880 5074 	stmia.w	r0, {r2, r4, r5, r6, ip, lr}
   123a6:	9810      	ldr	r0, [sp, #64]	; 0x40
   123a8:	9911      	ldr	r1, [sp, #68]	; 0x44
   123aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   123ac:	62da      	str	r2, [r3, #44]	; 0x2c
   123ae:	6299      	str	r1, [r3, #40]	; 0x28
   123b0:	6258      	str	r0, [r3, #36]	; 0x24
   123b2:	9813      	ldr	r0, [sp, #76]	; 0x4c
   123b4:	9914      	ldr	r1, [sp, #80]	; 0x50
   123b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
   123b8:	639a      	str	r2, [r3, #56]	; 0x38
   123ba:	6359      	str	r1, [r3, #52]	; 0x34
   123bc:	6318      	str	r0, [r3, #48]	; 0x30
   123be:	9801      	ldr	r0, [sp, #4]
   123c0:	63d8      	str	r0, [r3, #60]	; 0x3c
   123c2:	9900      	ldr	r1, [sp, #0]
   123c4:	6419      	str	r1, [r3, #64]	; 0x40
   123c6:	b01c      	add	sp, #112	; 0x70
   123c8:	bd70      	pop	{r4, r5, r6, pc}

000123ca <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   123ca:	b580      	push	{r7, lr}
   123cc:	b088      	sub	sp, #32
   123ce:	9105      	str	r1, [sp, #20]
    level: Level,
   123d0:	9106      	str	r1, [sp, #24]
    target: &'a str,
   123d2:	1d0a      	adds	r2, r1, #4
   123d4:	4613      	mov	r3, r2
   123d6:	9207      	str	r2, [sp, #28]
    level: Level,
   123d8:	9004      	str	r0, [sp, #16]
   123da:	4608      	mov	r0, r1
   123dc:	9303      	str	r3, [sp, #12]
   123de:	f7ff fe09 	bl	11ff4 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>
   123e2:	9002      	str	r0, [sp, #8]
   123e4:	e7ff      	b.n	123e6 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x1c>
    target: &'a str,
   123e6:	9803      	ldr	r0, [sp, #12]
   123e8:	f7ff fd55 	bl	11e96 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>
   123ec:	9001      	str	r0, [sp, #4]
   123ee:	9100      	str	r1, [sp, #0]
   123f0:	e7ff      	b.n	123f2 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x28>
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   123f2:	9802      	ldr	r0, [sp, #8]
   123f4:	9904      	ldr	r1, [sp, #16]
   123f6:	6008      	str	r0, [r1, #0]
   123f8:	9a01      	ldr	r2, [sp, #4]
   123fa:	604a      	str	r2, [r1, #4]
   123fc:	9b00      	ldr	r3, [sp, #0]
   123fe:	608b      	str	r3, [r1, #8]
   12400:	b008      	add	sp, #32
   12402:	bd80      	pop	{r7, pc}

00012404 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E>:
   12404:	b580      	push	{r7, lr}
   12406:	b084      	sub	sp, #16
   12408:	9002      	str	r0, [sp, #8]
   1240a:	9103      	str	r1, [sp, #12]
   1240c:	6800      	ldr	r0, [r0, #0]
   1240e:	f000 f81c 	bl	1244a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>
   12412:	9001      	str	r0, [sp, #4]
   12414:	e7ff      	b.n	12416 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E+0x12>
   12416:	9801      	ldr	r0, [sp, #4]
   12418:	f000 0001 	and.w	r0, r0, #1
   1241c:	b004      	add	sp, #16
   1241e:	bd80      	pop	{r7, pc}

00012420 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>:
   12420:	b089      	sub	sp, #36	; 0x24
   12422:	9005      	str	r0, [sp, #20]
   12424:	9106      	str	r1, [sp, #24]
   12426:	9107      	str	r1, [sp, #28]
   12428:	9907      	ldr	r1, [sp, #28]
   1242a:	9002      	str	r0, [sp, #8]
   1242c:	9101      	str	r1, [sp, #4]
   1242e:	e7ff      	b.n	12430 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x10>
   12430:	9802      	ldr	r0, [sp, #8]
   12432:	9008      	str	r0, [sp, #32]
   12434:	9908      	ldr	r1, [sp, #32]
   12436:	9100      	str	r1, [sp, #0]
   12438:	e7ff      	b.n	1243a <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x1a>
   1243a:	9800      	ldr	r0, [sp, #0]
   1243c:	9003      	str	r0, [sp, #12]
   1243e:	9901      	ldr	r1, [sp, #4]
   12440:	9104      	str	r1, [sp, #16]
   12442:	9803      	ldr	r0, [sp, #12]
   12444:	9904      	ldr	r1, [sp, #16]
   12446:	b009      	add	sp, #36	; 0x24
   12448:	4770      	bx	lr

0001244a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>:
   1244a:	b580      	push	{r7, lr}
   1244c:	b088      	sub	sp, #32
   1244e:	9006      	str	r0, [sp, #24]
   12450:	9107      	str	r1, [sp, #28]
   12452:	9004      	str	r0, [sp, #16]
   12454:	4608      	mov	r0, r1
   12456:	9103      	str	r1, [sp, #12]
   12458:	f003 ffdd 	bl	16416 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1245c:	9002      	str	r0, [sp, #8]
   1245e:	e7ff      	b.n	12460 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x16>
   12460:	9802      	ldr	r0, [sp, #8]
   12462:	07c1      	lsls	r1, r0, #31
   12464:	2900      	cmp	r1, #0
   12466:	d105      	bne.n	12474 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x2a>
   12468:	e7ff      	b.n	1246a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x20>
   1246a:	9803      	ldr	r0, [sp, #12]
   1246c:	f003 ffd7 	bl	1641e <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   12470:	9001      	str	r0, [sp, #4]
   12472:	e007      	b.n	12484 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x3a>
   12474:	9804      	ldr	r0, [sp, #16]
   12476:	9903      	ldr	r1, [sp, #12]
   12478:	f004 fd98 	bl	16fac <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   1247c:	f88d 0017 	strb.w	r0, [sp, #23]
   12480:	e7ff      	b.n	12482 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x38>
   12482:	e015      	b.n	124b0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   12484:	9801      	ldr	r0, [sp, #4]
   12486:	07c1      	lsls	r1, r0, #31
   12488:	2900      	cmp	r1, #0
   1248a:	d107      	bne.n	1249c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x52>
   1248c:	e7ff      	b.n	1248e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x44>
   1248e:	9804      	ldr	r0, [sp, #16]
   12490:	9903      	ldr	r1, [sp, #12]
   12492:	f004 ff18 	bl	172c6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   12496:	f88d 0017 	strb.w	r0, [sp, #23]
   1249a:	e007      	b.n	124ac <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x62>
   1249c:	9804      	ldr	r0, [sp, #16]
   1249e:	9903      	ldr	r1, [sp, #12]
   124a0:	f004 fdef 	bl	17082 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   124a4:	f88d 0017 	strb.w	r0, [sp, #23]
   124a8:	e7ff      	b.n	124aa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x60>
   124aa:	e000      	b.n	124ae <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   124ac:	e7ff      	b.n	124ae <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   124ae:	e7ff      	b.n	124b0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   124b0:	f89d 0017 	ldrb.w	r0, [sp, #23]
   124b4:	b008      	add	sp, #32
   124b6:	bd80      	pop	{r7, pc}

000124b8 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>:
   124b8:	b086      	sub	sp, #24
   124ba:	9004      	str	r0, [sp, #16]
   124bc:	9105      	str	r1, [sp, #20]
   124be:	9002      	str	r0, [sp, #8]
   124c0:	9103      	str	r1, [sp, #12]
   124c2:	9802      	ldr	r0, [sp, #8]
   124c4:	9903      	ldr	r1, [sp, #12]
   124c6:	9000      	str	r0, [sp, #0]
   124c8:	9101      	str	r1, [sp, #4]
   124ca:	9800      	ldr	r0, [sp, #0]
   124cc:	9901      	ldr	r1, [sp, #4]
   124ce:	b006      	add	sp, #24
   124d0:	4770      	bx	lr

000124d2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>:
   124d2:	b580      	push	{r7, lr}
   124d4:	b084      	sub	sp, #16
   124d6:	9002      	str	r0, [sp, #8]
   124d8:	9103      	str	r1, [sp, #12]
   124da:	f000 f805 	bl	124e8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>
   124de:	9001      	str	r0, [sp, #4]
   124e0:	e7ff      	b.n	124e2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE+0x10>
   124e2:	9801      	ldr	r0, [sp, #4]
   124e4:	b004      	add	sp, #16
   124e6:	bd80      	pop	{r7, pc}

000124e8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>:
   124e8:	b084      	sub	sp, #16
   124ea:	9001      	str	r0, [sp, #4]
   124ec:	9102      	str	r1, [sp, #8]
   124ee:	4408      	add	r0, r1
   124f0:	9003      	str	r0, [sp, #12]
   124f2:	9803      	ldr	r0, [sp, #12]
   124f4:	9000      	str	r0, [sp, #0]
   124f6:	e7ff      	b.n	124f8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E+0x10>
   124f8:	9800      	ldr	r0, [sp, #0]
   124fa:	b004      	add	sp, #16
   124fc:	4770      	bx	lr

000124fe <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>:
   124fe:	b580      	push	{r7, lr}
   12500:	b084      	sub	sp, #16
   12502:	9002      	str	r0, [sp, #8]
   12504:	9103      	str	r1, [sp, #12]
   12506:	f7ff ffd7 	bl	124b8 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>
   1250a:	9001      	str	r0, [sp, #4]
   1250c:	9100      	str	r1, [sp, #0]
   1250e:	e7ff      	b.n	12510 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E+0x12>
   12510:	9801      	ldr	r0, [sp, #4]
   12512:	9900      	ldr	r1, [sp, #0]
   12514:	b004      	add	sp, #16
   12516:	bd80      	pop	{r7, pc}

00012518 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>:
   12518:	b084      	sub	sp, #16
   1251a:	9002      	str	r0, [sp, #8]
   1251c:	9103      	str	r1, [sp, #12]
   1251e:	9000      	str	r0, [sp, #0]
   12520:	9101      	str	r1, [sp, #4]
   12522:	9801      	ldr	r0, [sp, #4]
   12524:	b004      	add	sp, #16
   12526:	4770      	bx	lr

00012528 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>:
   12528:	b082      	sub	sp, #8
   1252a:	9000      	str	r0, [sp, #0]
   1252c:	9101      	str	r1, [sp, #4]
   1252e:	b002      	add	sp, #8
   12530:	4770      	bx	lr

00012532 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>:
        fn from(num: i32) -> Self {
   12532:	b083      	sub	sp, #12
   12534:	9001      	str	r0, [sp, #4]
                ::core::mem::transmute::
   12536:	9002      	str	r0, [sp, #8]
   12538:	9802      	ldr	r0, [sp, #8]
   1253a:	9000      	str	r0, [sp, #0]
   1253c:	e7ff      	b.n	1253e <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E+0xc>
        }
   1253e:	9800      	ldr	r0, [sp, #0]
   12540:	b003      	add	sp, #12
   12542:	4770      	bx	lr

00012544 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>:
        fn from(_: ()) -> Self {
   12544:	b081      	sub	sp, #4
   12546:	f06f 000c 	mvn.w	r0, #12
        }
   1254a:	b001      	add	sp, #4
   1254c:	4770      	bx	lr

0001254e <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E>:
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
   1254e:	b082      	sub	sp, #8
   12550:	9000      	str	r0, [sp, #0]
   12552:	9101      	str	r1, [sp, #4]
   12554:	2000      	movs	r0, #0
        }
   12556:	b002      	add	sp, #8
   12558:	4770      	bx	lr

0001255a <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>:
   1255a:	b082      	sub	sp, #8
   1255c:	9000      	str	r0, [sp, #0]
   1255e:	9101      	str	r1, [sp, #4]
   12560:	7800      	ldrb	r0, [r0, #0]
   12562:	7809      	ldrb	r1, [r1, #0]
   12564:	1a40      	subs	r0, r0, r1
   12566:	fab0 f080 	clz	r0, r0
   1256a:	0940      	lsrs	r0, r0, #5
   1256c:	b002      	add	sp, #8
   1256e:	4770      	bx	lr

00012570 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>:
where
    N: ArrayLength<T>,
{
    type Target = [T];

    fn deref(&self) -> &[T] {
   12570:	b580      	push	{r7, lr}
   12572:	b084      	sub	sp, #16
   12574:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   12576:	f002 fd1e 	bl	14fb6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>
   1257a:	9002      	str	r0, [sp, #8]
   1257c:	9101      	str	r1, [sp, #4]
   1257e:	e7ff      	b.n	12580 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E+0x10>
    }
   12580:	9802      	ldr	r0, [sp, #8]
   12582:	9901      	ldr	r1, [sp, #4]
   12584:	b004      	add	sp, #16
   12586:	bd80      	pop	{r7, pc}

00012588 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>:
    fn deref(&self) -> &[T] {
   12588:	b580      	push	{r7, lr}
   1258a:	b084      	sub	sp, #16
   1258c:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   1258e:	f002 fd27 	bl	14fe0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>
   12592:	9002      	str	r0, [sp, #8]
   12594:	9101      	str	r1, [sp, #4]
   12596:	e7ff      	b.n	12598 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE+0x10>
    }
   12598:	9802      	ldr	r0, [sp, #8]
   1259a:	9901      	ldr	r1, [sp, #4]
   1259c:	b004      	add	sp, #16
   1259e:	bd80      	pop	{r7, pc}

000125a0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   125a0:	b580      	push	{r7, lr}
   125a2:	b084      	sub	sp, #16
   125a4:	9001      	str	r0, [sp, #4]
   125a6:	9102      	str	r1, [sp, #8]
   125a8:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   125aa:	f002 fc66 	bl	14e7a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>
   125ae:	9000      	str	r0, [sp, #0]
   125b0:	e7ff      	b.n	125b2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E+0x12>
    }
   125b2:	9800      	ldr	r0, [sp, #0]
   125b4:	f000 0001 	and.w	r0, r0, #1
   125b8:	b004      	add	sp, #16
   125ba:	bd80      	pop	{r7, pc}

000125bc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   125bc:	b580      	push	{r7, lr}
   125be:	b086      	sub	sp, #24
   125c0:	460a      	mov	r2, r1
   125c2:	9004      	str	r0, [sp, #16]
   125c4:	f88d 1017 	strb.w	r1, [sp, #23]
        self.0.push(item)
   125c8:	9203      	str	r2, [sp, #12]
   125ca:	f002 fcb9 	bl	14f40 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>
   125ce:	9002      	str	r0, [sp, #8]
   125d0:	9101      	str	r1, [sp, #4]
   125d2:	e7ff      	b.n	125d4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E+0x18>
    }
   125d4:	9802      	ldr	r0, [sp, #8]
   125d6:	f000 0001 	and.w	r0, r0, #1
   125da:	9901      	ldr	r1, [sp, #4]
   125dc:	b006      	add	sp, #24
   125de:	bd80      	pop	{r7, pc}

000125e0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>:
    pub fn clear(&mut self) {
   125e0:	b580      	push	{r7, lr}
   125e2:	b082      	sub	sp, #8
   125e4:	9001      	str	r0, [sp, #4]
        self.0.clear()
   125e6:	f002 fcd4 	bl	14f92 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>
   125ea:	e7ff      	b.n	125ec <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E+0xc>
    }
   125ec:	b002      	add	sp, #8
   125ee:	bd80      	pop	{r7, pc}

000125f0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>:
    pub fn clear(&mut self) {
   125f0:	b580      	push	{r7, lr}
   125f2:	b082      	sub	sp, #8
   125f4:	9001      	str	r0, [sp, #4]
        self.0.clear()
   125f6:	f002 fcd5 	bl	14fa4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>
   125fa:	e7ff      	b.n	125fc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E+0xc>
    }
   125fc:	b002      	add	sp, #8
   125fe:	bd80      	pop	{r7, pc}

00012600 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>:
    pub fn capacity(&self) -> usize {
   12600:	b580      	push	{r7, lr}
   12602:	b082      	sub	sp, #8
   12604:	9001      	str	r0, [sp, #4]
        self.0.capacity()
   12606:	f002 fd0a 	bl	1501e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   1260a:	9000      	str	r0, [sp, #0]
   1260c:	e7ff      	b.n	1260e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E+0xe>
    }
   1260e:	9800      	ldr	r0, [sp, #0]
   12610:	b002      	add	sp, #8
   12612:	bd80      	pop	{r7, pc}

00012614 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>:
   12614:	b081      	sub	sp, #4
   12616:	9000      	str	r0, [sp, #0]
   12618:	b001      	add	sp, #4
   1261a:	4770      	bx	lr

0001261c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>:
   1261c:	b580      	push	{r7, lr}
   1261e:	b088      	sub	sp, #32
   12620:	9006      	str	r0, [sp, #24]
   12622:	9107      	str	r1, [sp, #28]
   12624:	9004      	str	r0, [sp, #16]
   12626:	4608      	mov	r0, r1
   12628:	9103      	str	r1, [sp, #12]
   1262a:	f003 fef4 	bl	16416 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1262e:	9002      	str	r0, [sp, #8]
   12630:	e7ff      	b.n	12632 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x16>
   12632:	9802      	ldr	r0, [sp, #8]
   12634:	07c1      	lsls	r1, r0, #31
   12636:	2900      	cmp	r1, #0
   12638:	d105      	bne.n	12646 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x2a>
   1263a:	e7ff      	b.n	1263c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x20>
   1263c:	9803      	ldr	r0, [sp, #12]
   1263e:	f003 feee 	bl	1641e <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   12642:	9001      	str	r0, [sp, #4]
   12644:	e007      	b.n	12656 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x3a>
   12646:	9804      	ldr	r0, [sp, #16]
   12648:	9903      	ldr	r1, [sp, #12]
   1264a:	f004 fbf2 	bl	16e32 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>
   1264e:	f88d 0017 	strb.w	r0, [sp, #23]
   12652:	e7ff      	b.n	12654 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x38>
   12654:	e015      	b.n	12682 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   12656:	9801      	ldr	r0, [sp, #4]
   12658:	07c1      	lsls	r1, r0, #31
   1265a:	2900      	cmp	r1, #0
   1265c:	d107      	bne.n	1266e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x52>
   1265e:	e7ff      	b.n	12660 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x44>
   12660:	9804      	ldr	r0, [sp, #16]
   12662:	9903      	ldr	r1, [sp, #12]
   12664:	f004 fd78 	bl	17158 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>
   12668:	f88d 0017 	strb.w	r0, [sp, #23]
   1266c:	e007      	b.n	1267e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x62>
   1266e:	9804      	ldr	r0, [sp, #16]
   12670:	9903      	ldr	r1, [sp, #12]
   12672:	f004 fc0d 	bl	16e90 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>
   12676:	f88d 0017 	strb.w	r0, [sp, #23]
   1267a:	e7ff      	b.n	1267c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x60>
   1267c:	e000      	b.n	12680 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   1267e:	e7ff      	b.n	12680 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   12680:	e7ff      	b.n	12682 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   12682:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12686:	b008      	add	sp, #32
   12688:	bd80      	pop	{r7, pc}

0001268a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>:
   1268a:	b580      	push	{r7, lr}
   1268c:	b088      	sub	sp, #32
   1268e:	9006      	str	r0, [sp, #24]
   12690:	9107      	str	r1, [sp, #28]
   12692:	9004      	str	r0, [sp, #16]
   12694:	4608      	mov	r0, r1
   12696:	9103      	str	r1, [sp, #12]
   12698:	f003 febd 	bl	16416 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1269c:	9002      	str	r0, [sp, #8]
   1269e:	e7ff      	b.n	126a0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x16>
   126a0:	9802      	ldr	r0, [sp, #8]
   126a2:	07c1      	lsls	r1, r0, #31
   126a4:	2900      	cmp	r1, #0
   126a6:	d105      	bne.n	126b4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x2a>
   126a8:	e7ff      	b.n	126aa <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x20>
   126aa:	9803      	ldr	r0, [sp, #12]
   126ac:	f003 feb7 	bl	1641e <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   126b0:	9001      	str	r0, [sp, #4]
   126b2:	e007      	b.n	126c4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x3a>
   126b4:	9804      	ldr	r0, [sp, #16]
   126b6:	9903      	ldr	r1, [sp, #12]
   126b8:	f004 fc78 	bl	16fac <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   126bc:	f88d 0017 	strb.w	r0, [sp, #23]
   126c0:	e7ff      	b.n	126c2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x38>
   126c2:	e015      	b.n	126f0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   126c4:	9801      	ldr	r0, [sp, #4]
   126c6:	07c1      	lsls	r1, r0, #31
   126c8:	2900      	cmp	r1, #0
   126ca:	d107      	bne.n	126dc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x52>
   126cc:	e7ff      	b.n	126ce <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x44>
   126ce:	9804      	ldr	r0, [sp, #16]
   126d0:	9903      	ldr	r1, [sp, #12]
   126d2:	f004 fd7e 	bl	171d2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   126d6:	f88d 0017 	strb.w	r0, [sp, #23]
   126da:	e007      	b.n	126ec <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x62>
   126dc:	9804      	ldr	r0, [sp, #16]
   126de:	9903      	ldr	r1, [sp, #12]
   126e0:	f004 fccf 	bl	17082 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   126e4:	f88d 0017 	strb.w	r0, [sp, #23]
   126e8:	e7ff      	b.n	126ea <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x60>
   126ea:	e000      	b.n	126ee <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   126ec:	e7ff      	b.n	126ee <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   126ee:	e7ff      	b.n	126f0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   126f0:	f89d 0017 	ldrb.w	r0, [sp, #23]
   126f4:	b008      	add	sp, #32
   126f6:	bd80      	pop	{r7, pc}

000126f8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>:
   126f8:	b580      	push	{r7, lr}
   126fa:	b088      	sub	sp, #32
   126fc:	9006      	str	r0, [sp, #24]
   126fe:	9107      	str	r1, [sp, #28]
   12700:	9004      	str	r0, [sp, #16]
   12702:	4608      	mov	r0, r1
   12704:	9103      	str	r1, [sp, #12]
   12706:	f003 fe86 	bl	16416 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1270a:	9002      	str	r0, [sp, #8]
   1270c:	e7ff      	b.n	1270e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x16>
   1270e:	9802      	ldr	r0, [sp, #8]
   12710:	07c1      	lsls	r1, r0, #31
   12712:	2900      	cmp	r1, #0
   12714:	d105      	bne.n	12722 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x2a>
   12716:	e7ff      	b.n	12718 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x20>
   12718:	9803      	ldr	r0, [sp, #12]
   1271a:	f003 fe80 	bl	1641e <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1271e:	9001      	str	r0, [sp, #4]
   12720:	e007      	b.n	12732 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x3a>
   12722:	9804      	ldr	r0, [sp, #16]
   12724:	9903      	ldr	r1, [sp, #12]
   12726:	f004 fc41 	bl	16fac <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   1272a:	f88d 0017 	strb.w	r0, [sp, #23]
   1272e:	e7ff      	b.n	12730 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x38>
   12730:	e015      	b.n	1275e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   12732:	9801      	ldr	r0, [sp, #4]
   12734:	07c1      	lsls	r1, r0, #31
   12736:	2900      	cmp	r1, #0
   12738:	d107      	bne.n	1274a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x52>
   1273a:	e7ff      	b.n	1273c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x44>
   1273c:	9804      	ldr	r0, [sp, #16]
   1273e:	9903      	ldr	r1, [sp, #12]
   12740:	f004 fdc1 	bl	172c6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   12744:	f88d 0017 	strb.w	r0, [sp, #23]
   12748:	e007      	b.n	1275a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x62>
   1274a:	9804      	ldr	r0, [sp, #16]
   1274c:	9903      	ldr	r1, [sp, #12]
   1274e:	f004 fc98 	bl	17082 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   12752:	f88d 0017 	strb.w	r0, [sp, #23]
   12756:	e7ff      	b.n	12758 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x60>
   12758:	e000      	b.n	1275c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   1275a:	e7ff      	b.n	1275c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   1275c:	e7ff      	b.n	1275e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   1275e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12762:	b008      	add	sp, #32
   12764:	bd80      	pop	{r7, pc}

00012766 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>:
   12766:	b580      	push	{r7, lr}
   12768:	b084      	sub	sp, #16
   1276a:	9002      	str	r0, [sp, #8]
   1276c:	9103      	str	r1, [sp, #12]
   1276e:	6800      	ldr	r0, [r0, #0]
   12770:	6809      	ldr	r1, [r1, #0]
   12772:	f7ff fef2 	bl	1255a <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>
   12776:	9001      	str	r0, [sp, #4]
   12778:	e7ff      	b.n	1277a <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E+0x14>
   1277a:	9801      	ldr	r0, [sp, #4]
   1277c:	f000 0001 	and.w	r0, r0, #1
   12780:	b004      	add	sp, #16
   12782:	bd80      	pop	{r7, pc}

00012784 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>:

/// Non-blocking SPI transfer callback values (not used)
static mut SPI_CALLBACK: SpiCallback = SpiCallback {};

/// Init non-blocking SPI transfer
pub fn spi_noblock_init() -> MynewtResult<()> {
   12784:	b5b0      	push	{r4, r5, r7, lr}
   12786:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
   1278a:	2000      	movs	r0, #0
    //  Disable SPI port
    unsafe { hal::hal_spi_disable(SPI_NUM) };
   1278c:	f005 fc7c 	bl	18088 <hal_spi_disable>
   12790:	e7ff      	b.n	12792 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xe>

    //  Configure SPI port for non-blocking SPI
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   12792:	f240 01f8 	movw	r1, #248	; 0xf8
   12796:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1279a:	2000      	movs	r0, #0
   1279c:	f005 fc32 	bl	18004 <hal_spi_config>
   127a0:	906a      	str	r0, [sp, #424]	; 0x1a8
   127a2:	e7ff      	b.n	127a4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x20>
   127a4:	f644 1088 	movw	r0, #18824	; 0x4988
   127a8:	f2c0 0002 	movt	r0, #2
   127ac:	6800      	ldr	r0, [r0, #0]
   127ae:	a96a      	add	r1, sp, #424	; 0x1a8
   127b0:	916b      	str	r1, [sp, #428]	; 0x1ac
   127b2:	906c      	str	r0, [sp, #432]	; 0x1b0
   127b4:	986b      	ldr	r0, [sp, #428]	; 0x1ac
   127b6:	f8cd 04fc 	str.w	r0, [sp, #1276]	; 0x4fc
   127ba:	996c      	ldr	r1, [sp, #432]	; 0x1b0
   127bc:	f8cd 1500 	str.w	r1, [sp, #1280]	; 0x500
   127c0:	6802      	ldr	r2, [r0, #0]
   127c2:	680b      	ldr	r3, [r1, #0]
   127c4:	429a      	cmp	r2, r3
   127c6:	9068      	str	r0, [sp, #416]	; 0x1a0
   127c8:	9167      	str	r1, [sp, #412]	; 0x19c
   127ca:	d10c      	bne.n	127e6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x62>
   127cc:	e7ff      	b.n	127ce <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4a>
    let arg = unsafe { core::mem::transmute(&mut SPI_CALLBACK) };
   127ce:	f646 7004 	movw	r0, #28420	; 0x6f04
   127d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   127d6:	f8cd 0510 	str.w	r0, [sp, #1296]	; 0x510
   127da:	f8dd 0510 	ldr.w	r0, [sp, #1296]	; 0x510
   127de:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
   127e2:	9066      	str	r0, [sp, #408]	; 0x198
   127e4:	e075      	b.n	128d2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x14e>
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   127e6:	f644 10e0 	movw	r0, #18912	; 0x49e0
   127ea:	f2c0 0002 	movt	r0, #2
   127ee:	6801      	ldr	r1, [r0, #0]
   127f0:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   127f2:	907c      	str	r0, [sp, #496]	; 0x1f0
   127f4:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   127f6:	927d      	str	r2, [sp, #500]	; 0x1f4
   127f8:	f644 13fc 	movw	r3, #18940	; 0x49fc
   127fc:	f2c0 0302 	movt	r3, #2
   12800:	681b      	ldr	r3, [r3, #0]
   12802:	f644 2c00 	movw	ip, #18944	; 0x4a00
   12806:	f2c0 0c02 	movt	ip, #2
   1280a:	f8dc c000 	ldr.w	ip, [ip]
   1280e:	46ee      	mov	lr, sp
   12810:	2400      	movs	r4, #0
   12812:	f8ce 4000 	str.w	r4, [lr]
   12816:	a87e      	add	r0, sp, #504	; 0x1f8
   12818:	2201      	movs	r2, #1
   1281a:	9165      	str	r1, [sp, #404]	; 0x194
   1281c:	4619      	mov	r1, r3
   1281e:	4663      	mov	r3, ip
   12820:	f7f6 f9c0 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12824:	e7ff      	b.n	12826 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2>
   12826:	a87c      	add	r0, sp, #496	; 0x1f0
   12828:	9079      	str	r0, [sp, #484]	; 0x1e4
   1282a:	a87d      	add	r0, sp, #500	; 0x1f4
   1282c:	907a      	str	r0, [sp, #488]	; 0x1e8
   1282e:	a87e      	add	r0, sp, #504	; 0x1f8
   12830:	907b      	str	r0, [sp, #492]	; 0x1ec
   12832:	9879      	ldr	r0, [sp, #484]	; 0x1e4
   12834:	f8cd 0504 	str.w	r0, [sp, #1284]	; 0x504
   12838:	997a      	ldr	r1, [sp, #488]	; 0x1e8
   1283a:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
   1283e:	9a7b      	ldr	r2, [sp, #492]	; 0x1ec
   12840:	f8cd 250c 	str.w	r2, [sp, #1292]	; 0x50c
   12844:	f249 33f3 	movw	r3, #37875	; 0x93f3
   12848:	f2c0 0300 	movt	r3, #0
   1284c:	9164      	str	r1, [sp, #400]	; 0x190
   1284e:	4619      	mov	r1, r3
   12850:	9263      	str	r2, [sp, #396]	; 0x18c
   12852:	f7f6 fe06 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12856:	9062      	str	r0, [sp, #392]	; 0x188
   12858:	9161      	str	r1, [sp, #388]	; 0x184
   1285a:	e7ff      	b.n	1285c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xd8>
   1285c:	f249 31f3 	movw	r1, #37875	; 0x93f3
   12860:	f2c0 0100 	movt	r1, #0
   12864:	9864      	ldr	r0, [sp, #400]	; 0x190
   12866:	f7f6 fdfc 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1286a:	9060      	str	r0, [sp, #384]	; 0x180
   1286c:	915f      	str	r1, [sp, #380]	; 0x17c
   1286e:	e7ff      	b.n	12870 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xec>
   12870:	f645 41a3 	movw	r1, #23715	; 0x5ca3
   12874:	f2c0 0101 	movt	r1, #1
   12878:	9863      	ldr	r0, [sp, #396]	; 0x18c
   1287a:	f7f6 fe31 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1287e:	905e      	str	r0, [sp, #376]	; 0x178
   12880:	915d      	str	r1, [sp, #372]	; 0x174
   12882:	e7ff      	b.n	12884 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x100>
   12884:	9862      	ldr	r0, [sp, #392]	; 0x188
   12886:	9073      	str	r0, [sp, #460]	; 0x1cc
   12888:	9961      	ldr	r1, [sp, #388]	; 0x184
   1288a:	9174      	str	r1, [sp, #464]	; 0x1d0
   1288c:	9a60      	ldr	r2, [sp, #384]	; 0x180
   1288e:	9275      	str	r2, [sp, #468]	; 0x1d4
   12890:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   12892:	9376      	str	r3, [sp, #472]	; 0x1d8
   12894:	f8dd c178 	ldr.w	ip, [sp, #376]	; 0x178
   12898:	f8cd c1dc 	str.w	ip, [sp, #476]	; 0x1dc
   1289c:	f8dd e174 	ldr.w	lr, [sp, #372]	; 0x174
   128a0:	f8cd e1e0 	str.w	lr, [sp, #480]	; 0x1e0
   128a4:	466c      	mov	r4, sp
   128a6:	2503      	movs	r5, #3
   128a8:	6025      	str	r5, [r4, #0]
   128aa:	a86d      	add	r0, sp, #436	; 0x1b4
   128ac:	ab73      	add	r3, sp, #460	; 0x1cc
   128ae:	9965      	ldr	r1, [sp, #404]	; 0x194
   128b0:	462a      	mov	r2, r5
   128b2:	f7f6 f977 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   128b6:	e7ff      	b.n	128b8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x134>
   128b8:	f644 201c 	movw	r0, #18972	; 0x4a1c
   128bc:	f2c0 0002 	movt	r0, #2
   128c0:	f002 ff01 	bl	156c6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   128c4:	905c      	str	r0, [sp, #368]	; 0x170
   128c6:	e7ff      	b.n	128c8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x144>
   128c8:	a86d      	add	r0, sp, #436	; 0x1b4
   128ca:	995c      	ldr	r1, [sp, #368]	; 0x170
   128cc:	f002 ff38 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   128d0:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
        SPI_NUM, 
        Some(spi_noblock_handler), 
   128d2:	f643 501f 	movw	r0, #15647	; 0x3d1f
   128d6:	f2c0 0001 	movt	r0, #1
   128da:	9085      	str	r0, [sp, #532]	; 0x214
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
   128dc:	9985      	ldr	r1, [sp, #532]	; 0x214
   128de:	2000      	movs	r0, #0
   128e0:	9a66      	ldr	r2, [sp, #408]	; 0x198
   128e2:	f005 fc35 	bl	18150 <hal_spi_set_txrx_cb>
   128e6:	9084      	str	r0, [sp, #528]	; 0x210
   128e8:	e7ff      	b.n	128ea <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x166>
        arg
    ) };
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   128ea:	f644 1088 	movw	r0, #18824	; 0x4988
   128ee:	f2c0 0002 	movt	r0, #2
   128f2:	6800      	ldr	r0, [r0, #0]
   128f4:	a984      	add	r1, sp, #528	; 0x210
   128f6:	9186      	str	r1, [sp, #536]	; 0x218
   128f8:	9087      	str	r0, [sp, #540]	; 0x21c
   128fa:	9886      	ldr	r0, [sp, #536]	; 0x218
   128fc:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
   12900:	9987      	ldr	r1, [sp, #540]	; 0x21c
   12902:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
   12906:	6802      	ldr	r2, [r0, #0]
   12908:	680b      	ldr	r3, [r1, #0]
   1290a:	429a      	cmp	r2, r3
   1290c:	905b      	str	r0, [sp, #364]	; 0x16c
   1290e:	915a      	str	r1, [sp, #360]	; 0x168
   12910:	d105      	bne.n	1291e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x19a>
   12912:	e7ff      	b.n	12914 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x190>
   12914:	2000      	movs	r0, #0

    //  Enable SPI port and set SS to high to disable SPI device
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12916:	f005 fb91 	bl	1803c <hal_spi_enable>
   1291a:	909f      	str	r0, [sp, #636]	; 0x27c
   1291c:	e075      	b.n	12a0a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x286>
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   1291e:	f644 10e0 	movw	r0, #18912	; 0x49e0
   12922:	f2c0 0002 	movt	r0, #2
   12926:	6801      	ldr	r1, [r0, #0]
   12928:	985b      	ldr	r0, [sp, #364]	; 0x16c
   1292a:	9097      	str	r0, [sp, #604]	; 0x25c
   1292c:	9a5a      	ldr	r2, [sp, #360]	; 0x168
   1292e:	9298      	str	r2, [sp, #608]	; 0x260
   12930:	f644 2340 	movw	r3, #19008	; 0x4a40
   12934:	f2c0 0302 	movt	r3, #2
   12938:	681b      	ldr	r3, [r3, #0]
   1293a:	f644 2c00 	movw	ip, #18944	; 0x4a00
   1293e:	f2c0 0c02 	movt	ip, #2
   12942:	f8dc c000 	ldr.w	ip, [ip]
   12946:	46ee      	mov	lr, sp
   12948:	2400      	movs	r4, #0
   1294a:	f8ce 4000 	str.w	r4, [lr]
   1294e:	a899      	add	r0, sp, #612	; 0x264
   12950:	2201      	movs	r2, #1
   12952:	9159      	str	r1, [sp, #356]	; 0x164
   12954:	4619      	mov	r1, r3
   12956:	4663      	mov	r3, ip
   12958:	f7f6 f924 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1295c:	e7ff      	b.n	1295e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x1da>
   1295e:	a897      	add	r0, sp, #604	; 0x25c
   12960:	9094      	str	r0, [sp, #592]	; 0x250
   12962:	a898      	add	r0, sp, #608	; 0x260
   12964:	9095      	str	r0, [sp, #596]	; 0x254
   12966:	a899      	add	r0, sp, #612	; 0x264
   12968:	9096      	str	r0, [sp, #600]	; 0x258
   1296a:	9894      	ldr	r0, [sp, #592]	; 0x250
   1296c:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
   12970:	9995      	ldr	r1, [sp, #596]	; 0x254
   12972:	f8cd 1524 	str.w	r1, [sp, #1316]	; 0x524
   12976:	9a96      	ldr	r2, [sp, #600]	; 0x258
   12978:	f8cd 2528 	str.w	r2, [sp, #1320]	; 0x528
   1297c:	f249 33f3 	movw	r3, #37875	; 0x93f3
   12980:	f2c0 0300 	movt	r3, #0
   12984:	9158      	str	r1, [sp, #352]	; 0x160
   12986:	4619      	mov	r1, r3
   12988:	9257      	str	r2, [sp, #348]	; 0x15c
   1298a:	f7f6 fd6a 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1298e:	9056      	str	r0, [sp, #344]	; 0x158
   12990:	9155      	str	r1, [sp, #340]	; 0x154
   12992:	e7ff      	b.n	12994 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x210>
   12994:	f249 31f3 	movw	r1, #37875	; 0x93f3
   12998:	f2c0 0100 	movt	r1, #0
   1299c:	9858      	ldr	r0, [sp, #352]	; 0x160
   1299e:	f7f6 fd60 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   129a2:	9054      	str	r0, [sp, #336]	; 0x150
   129a4:	9153      	str	r1, [sp, #332]	; 0x14c
   129a6:	e7ff      	b.n	129a8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x224>
   129a8:	f645 41a3 	movw	r1, #23715	; 0x5ca3
   129ac:	f2c0 0101 	movt	r1, #1
   129b0:	9857      	ldr	r0, [sp, #348]	; 0x15c
   129b2:	f7f6 fd95 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   129b6:	9052      	str	r0, [sp, #328]	; 0x148
   129b8:	9151      	str	r1, [sp, #324]	; 0x144
   129ba:	e7ff      	b.n	129bc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x238>
   129bc:	9856      	ldr	r0, [sp, #344]	; 0x158
   129be:	908e      	str	r0, [sp, #568]	; 0x238
   129c0:	9955      	ldr	r1, [sp, #340]	; 0x154
   129c2:	918f      	str	r1, [sp, #572]	; 0x23c
   129c4:	9a54      	ldr	r2, [sp, #336]	; 0x150
   129c6:	9290      	str	r2, [sp, #576]	; 0x240
   129c8:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   129ca:	9391      	str	r3, [sp, #580]	; 0x244
   129cc:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
   129d0:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
   129d4:	f8dd e144 	ldr.w	lr, [sp, #324]	; 0x144
   129d8:	f8cd e24c 	str.w	lr, [sp, #588]	; 0x24c
   129dc:	466c      	mov	r4, sp
   129de:	2503      	movs	r5, #3
   129e0:	6025      	str	r5, [r4, #0]
   129e2:	a888      	add	r0, sp, #544	; 0x220
   129e4:	ab8e      	add	r3, sp, #568	; 0x238
   129e6:	9959      	ldr	r1, [sp, #356]	; 0x164
   129e8:	462a      	mov	r2, r5
   129ea:	f7f6 f8db 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   129ee:	e7ff      	b.n	129f0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x26c>
   129f0:	f644 2044 	movw	r0, #19012	; 0x4a44
   129f4:	f2c0 0002 	movt	r0, #2
   129f8:	f002 fe65 	bl	156c6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   129fc:	9050      	str	r0, [sp, #320]	; 0x140
   129fe:	e7ff      	b.n	12a00 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x27c>
   12a00:	a888      	add	r0, sp, #544	; 0x220
   12a02:	9950      	ldr	r1, [sp, #320]	; 0x140
   12a04:	f002 fe9c 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12a08:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12a0a:	f644 1088 	movw	r0, #18824	; 0x4988
   12a0e:	f2c0 0002 	movt	r0, #2
   12a12:	6800      	ldr	r0, [r0, #0]
   12a14:	a99f      	add	r1, sp, #636	; 0x27c
   12a16:	91a0      	str	r1, [sp, #640]	; 0x280
   12a18:	90a1      	str	r0, [sp, #644]	; 0x284
   12a1a:	98a0      	ldr	r0, [sp, #640]	; 0x280
   12a1c:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
   12a20:	99a1      	ldr	r1, [sp, #644]	; 0x284
   12a22:	f8cd 1530 	str.w	r1, [sp, #1328]	; 0x530
   12a26:	6802      	ldr	r2, [r0, #0]
   12a28:	680b      	ldr	r3, [r1, #0]
   12a2a:	429a      	cmp	r2, r3
   12a2c:	904f      	str	r0, [sp, #316]	; 0x13c
   12a2e:	914e      	str	r1, [sp, #312]	; 0x138
   12a30:	d106      	bne.n	12a40 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2bc>
   12a32:	e7ff      	b.n	12a34 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2b0>
   12a34:	2019      	movs	r0, #25
   12a36:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12a38:	f004 fed6 	bl	177e8 <hal_gpio_init_out>
   12a3c:	90b9      	str	r0, [sp, #740]	; 0x2e4
   12a3e:	e075      	b.n	12b2c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3a8>
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12a40:	f644 10e0 	movw	r0, #18912	; 0x49e0
   12a44:	f2c0 0002 	movt	r0, #2
   12a48:	6801      	ldr	r1, [r0, #0]
   12a4a:	984f      	ldr	r0, [sp, #316]	; 0x13c
   12a4c:	90b1      	str	r0, [sp, #708]	; 0x2c4
   12a4e:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   12a50:	92b2      	str	r2, [sp, #712]	; 0x2c8
   12a52:	f644 236c 	movw	r3, #19052	; 0x4a6c
   12a56:	f2c0 0302 	movt	r3, #2
   12a5a:	681b      	ldr	r3, [r3, #0]
   12a5c:	f644 2c00 	movw	ip, #18944	; 0x4a00
   12a60:	f2c0 0c02 	movt	ip, #2
   12a64:	f8dc c000 	ldr.w	ip, [ip]
   12a68:	46ee      	mov	lr, sp
   12a6a:	2400      	movs	r4, #0
   12a6c:	f8ce 4000 	str.w	r4, [lr]
   12a70:	a8b3      	add	r0, sp, #716	; 0x2cc
   12a72:	2201      	movs	r2, #1
   12a74:	914d      	str	r1, [sp, #308]	; 0x134
   12a76:	4619      	mov	r1, r3
   12a78:	4663      	mov	r3, ip
   12a7a:	f7f6 f893 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12a7e:	e7ff      	b.n	12a80 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2fc>
   12a80:	a8b1      	add	r0, sp, #708	; 0x2c4
   12a82:	90ae      	str	r0, [sp, #696]	; 0x2b8
   12a84:	a8b2      	add	r0, sp, #712	; 0x2c8
   12a86:	90af      	str	r0, [sp, #700]	; 0x2bc
   12a88:	a8b3      	add	r0, sp, #716	; 0x2cc
   12a8a:	90b0      	str	r0, [sp, #704]	; 0x2c0
   12a8c:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
   12a8e:	f8cd 0534 	str.w	r0, [sp, #1332]	; 0x534
   12a92:	99af      	ldr	r1, [sp, #700]	; 0x2bc
   12a94:	f8cd 1538 	str.w	r1, [sp, #1336]	; 0x538
   12a98:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
   12a9a:	f8cd 253c 	str.w	r2, [sp, #1340]	; 0x53c
   12a9e:	f249 33f3 	movw	r3, #37875	; 0x93f3
   12aa2:	f2c0 0300 	movt	r3, #0
   12aa6:	914c      	str	r1, [sp, #304]	; 0x130
   12aa8:	4619      	mov	r1, r3
   12aaa:	924b      	str	r2, [sp, #300]	; 0x12c
   12aac:	f7f6 fcd9 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12ab0:	904a      	str	r0, [sp, #296]	; 0x128
   12ab2:	9149      	str	r1, [sp, #292]	; 0x124
   12ab4:	e7ff      	b.n	12ab6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x332>
   12ab6:	f249 31f3 	movw	r1, #37875	; 0x93f3
   12aba:	f2c0 0100 	movt	r1, #0
   12abe:	984c      	ldr	r0, [sp, #304]	; 0x130
   12ac0:	f7f6 fccf 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12ac4:	9048      	str	r0, [sp, #288]	; 0x120
   12ac6:	9147      	str	r1, [sp, #284]	; 0x11c
   12ac8:	e7ff      	b.n	12aca <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x346>
   12aca:	f645 41a3 	movw	r1, #23715	; 0x5ca3
   12ace:	f2c0 0101 	movt	r1, #1
   12ad2:	984b      	ldr	r0, [sp, #300]	; 0x12c
   12ad4:	f7f6 fd04 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12ad8:	9046      	str	r0, [sp, #280]	; 0x118
   12ada:	9145      	str	r1, [sp, #276]	; 0x114
   12adc:	e7ff      	b.n	12ade <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x35a>
   12ade:	984a      	ldr	r0, [sp, #296]	; 0x128
   12ae0:	90a8      	str	r0, [sp, #672]	; 0x2a0
   12ae2:	9949      	ldr	r1, [sp, #292]	; 0x124
   12ae4:	91a9      	str	r1, [sp, #676]	; 0x2a4
   12ae6:	9a48      	ldr	r2, [sp, #288]	; 0x120
   12ae8:	92aa      	str	r2, [sp, #680]	; 0x2a8
   12aea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   12aec:	93ab      	str	r3, [sp, #684]	; 0x2ac
   12aee:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   12af2:	f8cd c2b0 	str.w	ip, [sp, #688]	; 0x2b0
   12af6:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
   12afa:	f8cd e2b4 	str.w	lr, [sp, #692]	; 0x2b4
   12afe:	466c      	mov	r4, sp
   12b00:	2503      	movs	r5, #3
   12b02:	6025      	str	r5, [r4, #0]
   12b04:	a8a2      	add	r0, sp, #648	; 0x288
   12b06:	aba8      	add	r3, sp, #672	; 0x2a0
   12b08:	994d      	ldr	r1, [sp, #308]	; 0x134
   12b0a:	462a      	mov	r2, r5
   12b0c:	f7f6 f84a 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12b10:	e7ff      	b.n	12b12 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x38e>
   12b12:	f644 2070 	movw	r0, #19056	; 0x4a70
   12b16:	f2c0 0002 	movt	r0, #2
   12b1a:	f002 fdd4 	bl	156c6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12b1e:	9044      	str	r0, [sp, #272]	; 0x110
   12b20:	e7ff      	b.n	12b22 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x39e>
   12b22:	a8a2      	add	r0, sp, #648	; 0x288
   12b24:	9944      	ldr	r1, [sp, #272]	; 0x110
   12b26:	f002 fe0b 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12b2a:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12b2c:	f644 1088 	movw	r0, #18824	; 0x4988
   12b30:	f2c0 0002 	movt	r0, #2
   12b34:	6800      	ldr	r0, [r0, #0]
   12b36:	a9b9      	add	r1, sp, #740	; 0x2e4
   12b38:	91ba      	str	r1, [sp, #744]	; 0x2e8
   12b3a:	90bb      	str	r0, [sp, #748]	; 0x2ec
   12b3c:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
   12b3e:	f8cd 0540 	str.w	r0, [sp, #1344]	; 0x540
   12b42:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
   12b44:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
   12b48:	6802      	ldr	r2, [r0, #0]
   12b4a:	680b      	ldr	r3, [r1, #0]
   12b4c:	429a      	cmp	r2, r3
   12b4e:	9043      	str	r0, [sp, #268]	; 0x10c
   12b50:	9142      	str	r1, [sp, #264]	; 0x108
   12b52:	d106      	bne.n	12b62 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3de>
   12b54:	e7ff      	b.n	12b56 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3d2>
   12b56:	2012      	movs	r0, #18
   12b58:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12b5a:	f004 fe45 	bl	177e8 <hal_gpio_init_out>
   12b5e:	90d3      	str	r0, [sp, #844]	; 0x34c
   12b60:	e075      	b.n	12c4e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4ca>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12b62:	f644 10e0 	movw	r0, #18912	; 0x49e0
   12b66:	f2c0 0002 	movt	r0, #2
   12b6a:	6801      	ldr	r1, [r0, #0]
   12b6c:	9843      	ldr	r0, [sp, #268]	; 0x10c
   12b6e:	90cb      	str	r0, [sp, #812]	; 0x32c
   12b70:	9a42      	ldr	r2, [sp, #264]	; 0x108
   12b72:	92cc      	str	r2, [sp, #816]	; 0x330
   12b74:	f644 2394 	movw	r3, #19092	; 0x4a94
   12b78:	f2c0 0302 	movt	r3, #2
   12b7c:	681b      	ldr	r3, [r3, #0]
   12b7e:	f644 2c00 	movw	ip, #18944	; 0x4a00
   12b82:	f2c0 0c02 	movt	ip, #2
   12b86:	f8dc c000 	ldr.w	ip, [ip]
   12b8a:	46ee      	mov	lr, sp
   12b8c:	2400      	movs	r4, #0
   12b8e:	f8ce 4000 	str.w	r4, [lr]
   12b92:	a8cd      	add	r0, sp, #820	; 0x334
   12b94:	2201      	movs	r2, #1
   12b96:	9141      	str	r1, [sp, #260]	; 0x104
   12b98:	4619      	mov	r1, r3
   12b9a:	4663      	mov	r3, ip
   12b9c:	f7f6 f802 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12ba0:	e7ff      	b.n	12ba2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x41e>
   12ba2:	a8cb      	add	r0, sp, #812	; 0x32c
   12ba4:	90c8      	str	r0, [sp, #800]	; 0x320
   12ba6:	a8cc      	add	r0, sp, #816	; 0x330
   12ba8:	90c9      	str	r0, [sp, #804]	; 0x324
   12baa:	a8cd      	add	r0, sp, #820	; 0x334
   12bac:	90ca      	str	r0, [sp, #808]	; 0x328
   12bae:	98c8      	ldr	r0, [sp, #800]	; 0x320
   12bb0:	f8cd 0548 	str.w	r0, [sp, #1352]	; 0x548
   12bb4:	99c9      	ldr	r1, [sp, #804]	; 0x324
   12bb6:	f8cd 154c 	str.w	r1, [sp, #1356]	; 0x54c
   12bba:	9aca      	ldr	r2, [sp, #808]	; 0x328
   12bbc:	f8cd 2550 	str.w	r2, [sp, #1360]	; 0x550
   12bc0:	f249 33f3 	movw	r3, #37875	; 0x93f3
   12bc4:	f2c0 0300 	movt	r3, #0
   12bc8:	9140      	str	r1, [sp, #256]	; 0x100
   12bca:	4619      	mov	r1, r3
   12bcc:	923f      	str	r2, [sp, #252]	; 0xfc
   12bce:	f7f6 fc48 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12bd2:	903e      	str	r0, [sp, #248]	; 0xf8
   12bd4:	913d      	str	r1, [sp, #244]	; 0xf4
   12bd6:	e7ff      	b.n	12bd8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x454>
   12bd8:	f249 31f3 	movw	r1, #37875	; 0x93f3
   12bdc:	f2c0 0100 	movt	r1, #0
   12be0:	9840      	ldr	r0, [sp, #256]	; 0x100
   12be2:	f7f6 fc3e 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12be6:	903c      	str	r0, [sp, #240]	; 0xf0
   12be8:	913b      	str	r1, [sp, #236]	; 0xec
   12bea:	e7ff      	b.n	12bec <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x468>
   12bec:	f645 41a3 	movw	r1, #23715	; 0x5ca3
   12bf0:	f2c0 0101 	movt	r1, #1
   12bf4:	983f      	ldr	r0, [sp, #252]	; 0xfc
   12bf6:	f7f6 fc73 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12bfa:	903a      	str	r0, [sp, #232]	; 0xe8
   12bfc:	9139      	str	r1, [sp, #228]	; 0xe4
   12bfe:	e7ff      	b.n	12c00 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x47c>
   12c00:	983e      	ldr	r0, [sp, #248]	; 0xf8
   12c02:	90c2      	str	r0, [sp, #776]	; 0x308
   12c04:	993d      	ldr	r1, [sp, #244]	; 0xf4
   12c06:	91c3      	str	r1, [sp, #780]	; 0x30c
   12c08:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   12c0a:	92c4      	str	r2, [sp, #784]	; 0x310
   12c0c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   12c0e:	93c5      	str	r3, [sp, #788]	; 0x314
   12c10:	f8dd c0e8 	ldr.w	ip, [sp, #232]	; 0xe8
   12c14:	f8cd c318 	str.w	ip, [sp, #792]	; 0x318
   12c18:	f8dd e0e4 	ldr.w	lr, [sp, #228]	; 0xe4
   12c1c:	f8cd e31c 	str.w	lr, [sp, #796]	; 0x31c
   12c20:	466c      	mov	r4, sp
   12c22:	2503      	movs	r5, #3
   12c24:	6025      	str	r5, [r4, #0]
   12c26:	a8bc      	add	r0, sp, #752	; 0x2f0
   12c28:	abc2      	add	r3, sp, #776	; 0x308
   12c2a:	9941      	ldr	r1, [sp, #260]	; 0x104
   12c2c:	462a      	mov	r2, r5
   12c2e:	f7f5 ffb9 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12c32:	e7ff      	b.n	12c34 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4b0>
   12c34:	f644 2098 	movw	r0, #19096	; 0x4a98
   12c38:	f2c0 0002 	movt	r0, #2
   12c3c:	f002 fd43 	bl	156c6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12c40:	9038      	str	r0, [sp, #224]	; 0xe0
   12c42:	e7ff      	b.n	12c44 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4c0>
   12c44:	a8bc      	add	r0, sp, #752	; 0x2f0
   12c46:	9938      	ldr	r1, [sp, #224]	; 0xe0
   12c48:	f002 fd7a 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12c4c:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12c4e:	f644 1088 	movw	r0, #18824	; 0x4988
   12c52:	f2c0 0002 	movt	r0, #2
   12c56:	6800      	ldr	r0, [r0, #0]
   12c58:	a9d3      	add	r1, sp, #844	; 0x34c
   12c5a:	91d4      	str	r1, [sp, #848]	; 0x350
   12c5c:	90d5      	str	r0, [sp, #852]	; 0x354
   12c5e:	98d4      	ldr	r0, [sp, #848]	; 0x350
   12c60:	f8cd 0554 	str.w	r0, [sp, #1364]	; 0x554
   12c64:	99d5      	ldr	r1, [sp, #852]	; 0x354
   12c66:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
   12c6a:	6802      	ldr	r2, [r0, #0]
   12c6c:	680b      	ldr	r3, [r1, #0]
   12c6e:	429a      	cmp	r2, r3
   12c70:	9037      	str	r0, [sp, #220]	; 0xdc
   12c72:	9136      	str	r1, [sp, #216]	; 0xd8
   12c74:	d107      	bne.n	12c86 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x502>
   12c76:	e7ff      	b.n	12c78 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4f4>

    //  Create Event Queue and Mbuf (Data) Queue that will store the SPI requests
    unsafe { os::os_eventq_init(&mut SPI_EVENT_QUEUE) };
   12c78:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   12c7c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12c80:	f005 febc 	bl	189fc <os_eventq_init>
   12c84:	e075      	b.n	12d72 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5ee>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12c86:	f644 10e0 	movw	r0, #18912	; 0x49e0
   12c8a:	f2c0 0002 	movt	r0, #2
   12c8e:	6801      	ldr	r1, [r0, #0]
   12c90:	9837      	ldr	r0, [sp, #220]	; 0xdc
   12c92:	90e5      	str	r0, [sp, #916]	; 0x394
   12c94:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   12c96:	92e6      	str	r2, [sp, #920]	; 0x398
   12c98:	f644 2394 	movw	r3, #19092	; 0x4a94
   12c9c:	f2c0 0302 	movt	r3, #2
   12ca0:	681b      	ldr	r3, [r3, #0]
   12ca2:	f644 2c00 	movw	ip, #18944	; 0x4a00
   12ca6:	f2c0 0c02 	movt	ip, #2
   12caa:	f8dc c000 	ldr.w	ip, [ip]
   12cae:	46ee      	mov	lr, sp
   12cb0:	2400      	movs	r4, #0
   12cb2:	f8ce 4000 	str.w	r4, [lr]
   12cb6:	a8e7      	add	r0, sp, #924	; 0x39c
   12cb8:	2201      	movs	r2, #1
   12cba:	9135      	str	r1, [sp, #212]	; 0xd4
   12cbc:	4619      	mov	r1, r3
   12cbe:	4663      	mov	r3, ip
   12cc0:	f7f5 ff70 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12cc4:	e7ff      	b.n	12cc6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x542>
   12cc6:	a8e5      	add	r0, sp, #916	; 0x394
   12cc8:	90e2      	str	r0, [sp, #904]	; 0x388
   12cca:	a8e6      	add	r0, sp, #920	; 0x398
   12ccc:	90e3      	str	r0, [sp, #908]	; 0x38c
   12cce:	a8e7      	add	r0, sp, #924	; 0x39c
   12cd0:	90e4      	str	r0, [sp, #912]	; 0x390
   12cd2:	98e2      	ldr	r0, [sp, #904]	; 0x388
   12cd4:	f8cd 055c 	str.w	r0, [sp, #1372]	; 0x55c
   12cd8:	99e3      	ldr	r1, [sp, #908]	; 0x38c
   12cda:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560
   12cde:	9ae4      	ldr	r2, [sp, #912]	; 0x390
   12ce0:	f8cd 2564 	str.w	r2, [sp, #1380]	; 0x564
   12ce4:	f249 33f3 	movw	r3, #37875	; 0x93f3
   12ce8:	f2c0 0300 	movt	r3, #0
   12cec:	9134      	str	r1, [sp, #208]	; 0xd0
   12cee:	4619      	mov	r1, r3
   12cf0:	9233      	str	r2, [sp, #204]	; 0xcc
   12cf2:	f7f6 fbb6 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12cf6:	9032      	str	r0, [sp, #200]	; 0xc8
   12cf8:	9131      	str	r1, [sp, #196]	; 0xc4
   12cfa:	e7ff      	b.n	12cfc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x578>
   12cfc:	f249 31f3 	movw	r1, #37875	; 0x93f3
   12d00:	f2c0 0100 	movt	r1, #0
   12d04:	9834      	ldr	r0, [sp, #208]	; 0xd0
   12d06:	f7f6 fbac 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12d0a:	9030      	str	r0, [sp, #192]	; 0xc0
   12d0c:	912f      	str	r1, [sp, #188]	; 0xbc
   12d0e:	e7ff      	b.n	12d10 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x58c>
   12d10:	f645 41a3 	movw	r1, #23715	; 0x5ca3
   12d14:	f2c0 0101 	movt	r1, #1
   12d18:	9833      	ldr	r0, [sp, #204]	; 0xcc
   12d1a:	f7f6 fbe1 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12d1e:	902e      	str	r0, [sp, #184]	; 0xb8
   12d20:	912d      	str	r1, [sp, #180]	; 0xb4
   12d22:	e7ff      	b.n	12d24 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5a0>
   12d24:	9832      	ldr	r0, [sp, #200]	; 0xc8
   12d26:	90dc      	str	r0, [sp, #880]	; 0x370
   12d28:	9931      	ldr	r1, [sp, #196]	; 0xc4
   12d2a:	91dd      	str	r1, [sp, #884]	; 0x374
   12d2c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   12d2e:	92de      	str	r2, [sp, #888]	; 0x378
   12d30:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   12d32:	93df      	str	r3, [sp, #892]	; 0x37c
   12d34:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
   12d38:	f8cd c380 	str.w	ip, [sp, #896]	; 0x380
   12d3c:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
   12d40:	f8cd e384 	str.w	lr, [sp, #900]	; 0x384
   12d44:	466c      	mov	r4, sp
   12d46:	2503      	movs	r5, #3
   12d48:	6025      	str	r5, [r4, #0]
   12d4a:	a8d6      	add	r0, sp, #856	; 0x358
   12d4c:	abdc      	add	r3, sp, #880	; 0x370
   12d4e:	9935      	ldr	r1, [sp, #212]	; 0xd4
   12d50:	462a      	mov	r2, r5
   12d52:	f7f5 ff27 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12d56:	e7ff      	b.n	12d58 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5d4>
   12d58:	f644 20a8 	movw	r0, #19112	; 0x4aa8
   12d5c:	f2c0 0002 	movt	r0, #2
   12d60:	f002 fcb1 	bl	156c6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12d64:	902c      	str	r0, [sp, #176]	; 0xb0
   12d66:	e7ff      	b.n	12d68 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5e4>
   12d68:	a8d6      	add	r0, sp, #856	; 0x358
   12d6a:	992c      	ldr	r1, [sp, #176]	; 0xb0
   12d6c:	f002 fce8 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12d70:	defe      	udf	#254	; 0xfe
    let rc = unsafe { os::os_mqueue_init(
        &mut SPI_DATA_QUEUE, 
        Some(spi_event_callback), 
   12d72:	f243 7001 	movw	r0, #14081	; 0x3701
   12d76:	f2c0 0001 	movt	r0, #1
   12d7a:	90ee      	str	r0, [sp, #952]	; 0x3b8
    let rc = unsafe { os::os_mqueue_init(
   12d7c:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
   12d7e:	f646 208c 	movw	r0, #27276	; 0x6a8c
   12d82:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12d86:	2200      	movs	r2, #0
   12d88:	f005 fee6 	bl	18b58 <os_mqueue_init>
   12d8c:	90ed      	str	r0, [sp, #948]	; 0x3b4
   12d8e:	e7ff      	b.n	12d90 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x60c>
        NULL
    ) };
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   12d90:	f644 1088 	movw	r0, #18824	; 0x4988
   12d94:	f2c0 0002 	movt	r0, #2
   12d98:	6800      	ldr	r0, [r0, #0]
   12d9a:	a9ed      	add	r1, sp, #948	; 0x3b4
   12d9c:	91ef      	str	r1, [sp, #956]	; 0x3bc
   12d9e:	90f0      	str	r0, [sp, #960]	; 0x3c0
   12da0:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
   12da2:	f8cd 0568 	str.w	r0, [sp, #1384]	; 0x568
   12da6:	99f0      	ldr	r1, [sp, #960]	; 0x3c0
   12da8:	f8cd 156c 	str.w	r1, [sp, #1388]	; 0x56c
   12dac:	6802      	ldr	r2, [r0, #0]
   12dae:	680b      	ldr	r3, [r1, #0]
   12db0:	429a      	cmp	r2, r3
   12db2:	902b      	str	r0, [sp, #172]	; 0xac
   12db4:	912a      	str	r1, [sp, #168]	; 0xa8
   12db6:	d10a      	bne.n	12dce <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x64a>
   12db8:	e7ff      	b.n	12dba <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x636>

    //  Create the Semaphore that will signal whether the SPI request has completed
    let rc = unsafe { os::os_sem_init(&mut SPI_SEM, 0) };  //  Init to 0 tokens, so caller will block until SPI request is completed.
   12dba:	f646 207c 	movw	r0, #27260	; 0x6a7c
   12dbe:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12dc2:	2100      	movs	r1, #0
   12dc4:	f006 fbc2 	bl	1954c <os_sem_init>
   12dc8:	f8cd 0420 	str.w	r0, [sp, #1056]	; 0x420
   12dcc:	e07b      	b.n	12ec6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x742>
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   12dce:	f644 10e0 	movw	r0, #18912	; 0x49e0
   12dd2:	f2c0 0002 	movt	r0, #2
   12dd6:	6801      	ldr	r1, [r0, #0]
   12dd8:	982b      	ldr	r0, [sp, #172]	; 0xac
   12dda:	f8cd 0400 	str.w	r0, [sp, #1024]	; 0x400
   12dde:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   12de0:	f8cd 2404 	str.w	r2, [sp, #1028]	; 0x404
   12de4:	f644 23cc 	movw	r3, #19148	; 0x4acc
   12de8:	f2c0 0302 	movt	r3, #2
   12dec:	681b      	ldr	r3, [r3, #0]
   12dee:	f644 2c00 	movw	ip, #18944	; 0x4a00
   12df2:	f2c0 0c02 	movt	ip, #2
   12df6:	f8dc c000 	ldr.w	ip, [ip]
   12dfa:	46ee      	mov	lr, sp
   12dfc:	2400      	movs	r4, #0
   12dfe:	f8ce 4000 	str.w	r4, [lr]
   12e02:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   12e06:	2201      	movs	r2, #1
   12e08:	9129      	str	r1, [sp, #164]	; 0xa4
   12e0a:	4619      	mov	r1, r3
   12e0c:	4663      	mov	r3, ip
   12e0e:	f7f5 fec9 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12e12:	e7ff      	b.n	12e14 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x690>
   12e14:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
   12e18:	90fd      	str	r0, [sp, #1012]	; 0x3f4
   12e1a:	f20d 4004 	addw	r0, sp, #1028	; 0x404
   12e1e:	90fe      	str	r0, [sp, #1016]	; 0x3f8
   12e20:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   12e24:	90ff      	str	r0, [sp, #1020]	; 0x3fc
   12e26:	98fd      	ldr	r0, [sp, #1012]	; 0x3f4
   12e28:	f8cd 0570 	str.w	r0, [sp, #1392]	; 0x570
   12e2c:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
   12e2e:	f8cd 1574 	str.w	r1, [sp, #1396]	; 0x574
   12e32:	9aff      	ldr	r2, [sp, #1020]	; 0x3fc
   12e34:	f8cd 2578 	str.w	r2, [sp, #1400]	; 0x578
   12e38:	f249 33f3 	movw	r3, #37875	; 0x93f3
   12e3c:	f2c0 0300 	movt	r3, #0
   12e40:	9128      	str	r1, [sp, #160]	; 0xa0
   12e42:	4619      	mov	r1, r3
   12e44:	9227      	str	r2, [sp, #156]	; 0x9c
   12e46:	f7f6 fb0c 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12e4a:	9026      	str	r0, [sp, #152]	; 0x98
   12e4c:	9125      	str	r1, [sp, #148]	; 0x94
   12e4e:	e7ff      	b.n	12e50 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6cc>
   12e50:	f249 31f3 	movw	r1, #37875	; 0x93f3
   12e54:	f2c0 0100 	movt	r1, #0
   12e58:	9828      	ldr	r0, [sp, #160]	; 0xa0
   12e5a:	f7f6 fb02 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12e5e:	9024      	str	r0, [sp, #144]	; 0x90
   12e60:	9123      	str	r1, [sp, #140]	; 0x8c
   12e62:	e7ff      	b.n	12e64 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6e0>
   12e64:	f645 41a3 	movw	r1, #23715	; 0x5ca3
   12e68:	f2c0 0101 	movt	r1, #1
   12e6c:	9827      	ldr	r0, [sp, #156]	; 0x9c
   12e6e:	f7f6 fb37 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12e72:	9022      	str	r0, [sp, #136]	; 0x88
   12e74:	9121      	str	r1, [sp, #132]	; 0x84
   12e76:	e7ff      	b.n	12e78 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6f4>
   12e78:	9826      	ldr	r0, [sp, #152]	; 0x98
   12e7a:	90f7      	str	r0, [sp, #988]	; 0x3dc
   12e7c:	9925      	ldr	r1, [sp, #148]	; 0x94
   12e7e:	91f8      	str	r1, [sp, #992]	; 0x3e0
   12e80:	9a24      	ldr	r2, [sp, #144]	; 0x90
   12e82:	92f9      	str	r2, [sp, #996]	; 0x3e4
   12e84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   12e86:	93fa      	str	r3, [sp, #1000]	; 0x3e8
   12e88:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
   12e8c:	f8cd c3ec 	str.w	ip, [sp, #1004]	; 0x3ec
   12e90:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
   12e94:	f8cd e3f0 	str.w	lr, [sp, #1008]	; 0x3f0
   12e98:	466c      	mov	r4, sp
   12e9a:	2503      	movs	r5, #3
   12e9c:	6025      	str	r5, [r4, #0]
   12e9e:	a8f1      	add	r0, sp, #964	; 0x3c4
   12ea0:	abf7      	add	r3, sp, #988	; 0x3dc
   12ea2:	9929      	ldr	r1, [sp, #164]	; 0xa4
   12ea4:	462a      	mov	r2, r5
   12ea6:	f7f5 fe7d 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12eaa:	e7ff      	b.n	12eac <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x728>
   12eac:	f644 20d0 	movw	r0, #19152	; 0x4ad0
   12eb0:	f2c0 0002 	movt	r0, #2
   12eb4:	f002 fc07 	bl	156c6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12eb8:	9020      	str	r0, [sp, #128]	; 0x80
   12eba:	e7ff      	b.n	12ebc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x738>
   12ebc:	a8f1      	add	r0, sp, #964	; 0x3c4
   12ebe:	9920      	ldr	r1, [sp, #128]	; 0x80
   12ec0:	f002 fc3e 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12ec4:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   12ec6:	f644 1088 	movw	r0, #18824	; 0x4988
   12eca:	f2c0 0002 	movt	r0, #2
   12ece:	6800      	ldr	r0, [r0, #0]
   12ed0:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
   12ed4:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
   12ed8:	f8cd 0428 	str.w	r0, [sp, #1064]	; 0x428
   12edc:	f8dd 0424 	ldr.w	r0, [sp, #1060]	; 0x424
   12ee0:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
   12ee4:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   12ee8:	f8cd 1580 	str.w	r1, [sp, #1408]	; 0x580
   12eec:	6802      	ldr	r2, [r0, #0]
   12eee:	680b      	ldr	r3, [r1, #0]
   12ef0:	429a      	cmp	r2, r3
   12ef2:	901f      	str	r0, [sp, #124]	; 0x7c
   12ef4:	911e      	str	r1, [sp, #120]	; 0x78
   12ef6:	d10a      	bne.n	12f0e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x78a>
   12ef8:	e7ff      	b.n	12efa <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x776>

    //  Create the Semaphore that will throttle the number of queued SPI requests
    let rc = unsafe { os::os_sem_init(&mut SPI_THROTTLE_SEM, 2) };  //  Only max 2 requests queued, the next request will block
   12efa:	f646 2084 	movw	r0, #27268	; 0x6a84
   12efe:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12f02:	2102      	movs	r1, #2
   12f04:	f006 fb22 	bl	1954c <os_sem_init>
   12f08:	f8cd 0488 	str.w	r0, [sp, #1160]	; 0x488
   12f0c:	e088      	b.n	13020 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x89c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   12f0e:	f644 10e0 	movw	r0, #18912	; 0x49e0
   12f12:	f2c0 0002 	movt	r0, #2
   12f16:	6801      	ldr	r1, [r0, #0]
   12f18:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12f1a:	f8cd 0468 	str.w	r0, [sp, #1128]	; 0x468
   12f1e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   12f20:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
   12f24:	f644 23f8 	movw	r3, #19192	; 0x4af8
   12f28:	f2c0 0302 	movt	r3, #2
   12f2c:	681b      	ldr	r3, [r3, #0]
   12f2e:	f644 2c00 	movw	ip, #18944	; 0x4a00
   12f32:	f2c0 0c02 	movt	ip, #2
   12f36:	f8dc c000 	ldr.w	ip, [ip]
   12f3a:	46ee      	mov	lr, sp
   12f3c:	2400      	movs	r4, #0
   12f3e:	f8ce 4000 	str.w	r4, [lr]
   12f42:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   12f46:	2201      	movs	r2, #1
   12f48:	911d      	str	r1, [sp, #116]	; 0x74
   12f4a:	4619      	mov	r1, r3
   12f4c:	4663      	mov	r3, ip
   12f4e:	f7f5 fe29 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12f52:	e7ff      	b.n	12f54 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x7d0>
   12f54:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
   12f58:	f8cd 045c 	str.w	r0, [sp, #1116]	; 0x45c
   12f5c:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
   12f60:	f8cd 0460 	str.w	r0, [sp, #1120]	; 0x460
   12f64:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   12f68:	f8cd 0464 	str.w	r0, [sp, #1124]	; 0x464
   12f6c:	f8dd 045c 	ldr.w	r0, [sp, #1116]	; 0x45c
   12f70:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
   12f74:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   12f78:	f8cd 1588 	str.w	r1, [sp, #1416]	; 0x588
   12f7c:	f8dd 2464 	ldr.w	r2, [sp, #1124]	; 0x464
   12f80:	f8cd 258c 	str.w	r2, [sp, #1420]	; 0x58c
   12f84:	f249 4347 	movw	r3, #37959	; 0x9447
   12f88:	f2c0 0300 	movt	r3, #0
   12f8c:	911c      	str	r1, [sp, #112]	; 0x70
   12f8e:	4619      	mov	r1, r3
   12f90:	921b      	str	r2, [sp, #108]	; 0x6c
   12f92:	f7f6 fa90 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   12f96:	901a      	str	r0, [sp, #104]	; 0x68
   12f98:	9119      	str	r1, [sp, #100]	; 0x64
   12f9a:	e7ff      	b.n	12f9c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x818>
   12f9c:	f249 4147 	movw	r1, #37959	; 0x9447
   12fa0:	f2c0 0100 	movt	r1, #0
   12fa4:	981c      	ldr	r0, [sp, #112]	; 0x70
   12fa6:	f7f6 fa86 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   12faa:	9018      	str	r0, [sp, #96]	; 0x60
   12fac:	9117      	str	r1, [sp, #92]	; 0x5c
   12fae:	e7ff      	b.n	12fb0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x82c>
   12fb0:	f645 41a3 	movw	r1, #23715	; 0x5ca3
   12fb4:	f2c0 0101 	movt	r1, #1
   12fb8:	981b      	ldr	r0, [sp, #108]	; 0x6c
   12fba:	f7f6 fa91 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12fbe:	9016      	str	r0, [sp, #88]	; 0x58
   12fc0:	9115      	str	r1, [sp, #84]	; 0x54
   12fc2:	e7ff      	b.n	12fc4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x840>
   12fc4:	981a      	ldr	r0, [sp, #104]	; 0x68
   12fc6:	f8cd 0444 	str.w	r0, [sp, #1092]	; 0x444
   12fca:	9919      	ldr	r1, [sp, #100]	; 0x64
   12fcc:	f8cd 1448 	str.w	r1, [sp, #1096]	; 0x448
   12fd0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   12fd2:	f8cd 244c 	str.w	r2, [sp, #1100]	; 0x44c
   12fd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12fd8:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
   12fdc:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
   12fe0:	f8cd c454 	str.w	ip, [sp, #1108]	; 0x454
   12fe4:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
   12fe8:	f8cd e458 	str.w	lr, [sp, #1112]	; 0x458
   12fec:	466c      	mov	r4, sp
   12fee:	2503      	movs	r5, #3
   12ff0:	6025      	str	r5, [r4, #0]
   12ff2:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   12ff6:	f20d 4344 	addw	r3, sp, #1092	; 0x444
   12ffa:	991d      	ldr	r1, [sp, #116]	; 0x74
   12ffc:	462a      	mov	r2, r5
   12ffe:	f7f5 fdd1 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13002:	e7ff      	b.n	13004 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x880>
   13004:	f644 20fc 	movw	r0, #19196	; 0x4afc
   13008:	f2c0 0002 	movt	r0, #2
   1300c:	f002 fb5b 	bl	156c6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13010:	9014      	str	r0, [sp, #80]	; 0x50
   13012:	e7ff      	b.n	13014 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x890>
   13014:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   13018:	9914      	ldr	r1, [sp, #80]	; 0x50
   1301a:	f002 fb91 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1301e:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13020:	f644 1088 	movw	r0, #18824	; 0x4988
   13024:	f2c0 0002 	movt	r0, #2
   13028:	6800      	ldr	r0, [r0, #0]
   1302a:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   1302e:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
   13032:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
   13036:	f8dd 048c 	ldr.w	r0, [sp, #1164]	; 0x48c
   1303a:	f8cd 0590 	str.w	r0, [sp, #1424]	; 0x590
   1303e:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   13042:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
   13046:	6802      	ldr	r2, [r0, #0]
   13048:	680b      	ldr	r3, [r1, #0]
   1304a:	429a      	cmp	r2, r3
   1304c:	9013      	str	r0, [sp, #76]	; 0x4c
   1304e:	9112      	str	r1, [sp, #72]	; 0x48
   13050:	d125      	bne.n	1309e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x91a>
   13052:	e7ff      	b.n	13054 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x8d0>
    
    //  Create a task to send SPI requests sequentially from the SPI Event Queue and Mbuf Queue
    os::task_init(                //  Create a new task and start it...
        unsafe { &mut SPI_TASK }, //  Task object will be saved here
        &init_strn!( "spi" ),     //  Name of task
   13054:	f644 3028 	movw	r0, #19240	; 0x4b28
   13058:	f2c0 0002 	movt	r0, #2
   1305c:	6801      	ldr	r1, [r0, #0]
        Some( spi_task_func ),    //  Function to execute when task starts
   1305e:	f243 10ff 	movw	r0, #12799	; 0x31ff
   13062:	f2c0 0001 	movt	r0, #1
   13066:	f8cd 04f4 	str.w	r0, [sp, #1268]	; 0x4f4
    os::task_init(                //  Create a new task and start it...
   1306a:	f8dd 24f4 	ldr.w	r2, [sp, #1268]	; 0x4f4
   1306e:	4668      	mov	r0, sp
   13070:	f44f 7380 	mov.w	r3, #256	; 0x100
   13074:	6103      	str	r3, [r0, #16]
   13076:	60c3      	str	r3, [r0, #12]
   13078:	f646 3304 	movw	r3, #27396	; 0x6b04
   1307c:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13080:	6083      	str	r3, [r0, #8]
   13082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13086:	6043      	str	r3, [r0, #4]
   13088:	230a      	movs	r3, #10
   1308a:	6003      	str	r3, [r0, #0]
   1308c:	f646 20b4 	movw	r0, #27316	; 0x6ab4
   13090:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13094:	2300      	movs	r3, #0
   13096:	f7f5 fe7f 	bl	8d98 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
   1309a:	9011      	str	r0, [sp, #68]	; 0x44
   1309c:	e088      	b.n	131b0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   1309e:	f644 10e0 	movw	r0, #18912	; 0x49e0
   130a2:	f2c0 0002 	movt	r0, #2
   130a6:	6801      	ldr	r1, [r0, #0]
   130a8:	9813      	ldr	r0, [sp, #76]	; 0x4c
   130aa:	f8cd 04d0 	str.w	r0, [sp, #1232]	; 0x4d0
   130ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
   130b0:	f8cd 24d4 	str.w	r2, [sp, #1236]	; 0x4d4
   130b4:	f644 23f8 	movw	r3, #19192	; 0x4af8
   130b8:	f2c0 0302 	movt	r3, #2
   130bc:	681b      	ldr	r3, [r3, #0]
   130be:	f644 2c00 	movw	ip, #18944	; 0x4a00
   130c2:	f2c0 0c02 	movt	ip, #2
   130c6:	f8dc c000 	ldr.w	ip, [ip]
   130ca:	46ee      	mov	lr, sp
   130cc:	2400      	movs	r4, #0
   130ce:	f8ce 4000 	str.w	r4, [lr]
   130d2:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   130d6:	2201      	movs	r2, #1
   130d8:	9110      	str	r1, [sp, #64]	; 0x40
   130da:	4619      	mov	r1, r3
   130dc:	4663      	mov	r3, ip
   130de:	f7f5 fd61 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   130e2:	e7ff      	b.n	130e4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x960>
   130e4:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   130e8:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
   130ec:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
   130f0:	f8cd 04c8 	str.w	r0, [sp, #1224]	; 0x4c8
   130f4:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   130f8:	f8cd 04cc 	str.w	r0, [sp, #1228]	; 0x4cc
   130fc:	f8dd 04c4 	ldr.w	r0, [sp, #1220]	; 0x4c4
   13100:	f8cd 0598 	str.w	r0, [sp, #1432]	; 0x598
   13104:	f8dd 14c8 	ldr.w	r1, [sp, #1224]	; 0x4c8
   13108:	f8cd 159c 	str.w	r1, [sp, #1436]	; 0x59c
   1310c:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
   13110:	f8cd 25a0 	str.w	r2, [sp, #1440]	; 0x5a0
   13114:	f249 4347 	movw	r3, #37959	; 0x9447
   13118:	f2c0 0300 	movt	r3, #0
   1311c:	910f      	str	r1, [sp, #60]	; 0x3c
   1311e:	4619      	mov	r1, r3
   13120:	920e      	str	r2, [sp, #56]	; 0x38
   13122:	f7f6 f9c8 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13126:	900d      	str	r0, [sp, #52]	; 0x34
   13128:	910c      	str	r1, [sp, #48]	; 0x30
   1312a:	e7ff      	b.n	1312c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9a8>
   1312c:	f249 4147 	movw	r1, #37959	; 0x9447
   13130:	f2c0 0100 	movt	r1, #0
   13134:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13136:	f7f6 f9be 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   1313a:	900b      	str	r0, [sp, #44]	; 0x2c
   1313c:	910a      	str	r1, [sp, #40]	; 0x28
   1313e:	e7ff      	b.n	13140 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9bc>
   13140:	f645 41a3 	movw	r1, #23715	; 0x5ca3
   13144:	f2c0 0101 	movt	r1, #1
   13148:	980e      	ldr	r0, [sp, #56]	; 0x38
   1314a:	f7f6 f9c9 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1314e:	9009      	str	r0, [sp, #36]	; 0x24
   13150:	9108      	str	r1, [sp, #32]
   13152:	e7ff      	b.n	13154 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9d0>
   13154:	980d      	ldr	r0, [sp, #52]	; 0x34
   13156:	f8cd 04ac 	str.w	r0, [sp, #1196]	; 0x4ac
   1315a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1315c:	f8cd 14b0 	str.w	r1, [sp, #1200]	; 0x4b0
   13160:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13162:	f8cd 24b4 	str.w	r2, [sp, #1204]	; 0x4b4
   13166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13168:	f8cd 34b8 	str.w	r3, [sp, #1208]	; 0x4b8
   1316c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   13170:	f8cd c4bc 	str.w	ip, [sp, #1212]	; 0x4bc
   13174:	f8dd e020 	ldr.w	lr, [sp, #32]
   13178:	f8cd e4c0 	str.w	lr, [sp, #1216]	; 0x4c0
   1317c:	466c      	mov	r4, sp
   1317e:	2503      	movs	r5, #3
   13180:	6025      	str	r5, [r4, #0]
   13182:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13186:	f20d 43ac 	addw	r3, sp, #1196	; 0x4ac
   1318a:	9910      	ldr	r1, [sp, #64]	; 0x40
   1318c:	462a      	mov	r2, r5
   1318e:	f7f5 fd09 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13192:	e7ff      	b.n	13194 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa10>
   13194:	f644 300c 	movw	r0, #19212	; 0x4b0c
   13198:	f2c0 0002 	movt	r0, #2
   1319c:	f002 fa93 	bl	156c6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   131a0:	9007      	str	r0, [sp, #28]
   131a2:	e7ff      	b.n	131a4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa20>
   131a4:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   131a8:	9907      	ldr	r1, [sp, #28]
   131aa:	f002 fac9 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   131ae:	defe      	udf	#254	; 0xfe
    os::task_init(                //  Create a new task and start it...
   131b0:	9811      	ldr	r0, [sp, #68]	; 0x44
   131b2:	f7f5 fd65 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   131b6:	f8cd 04f0 	str.w	r0, [sp, #1264]	; 0x4f0
   131ba:	e7ff      	b.n	131bc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa38>
        NULL,  //  Argument to be passed to above function
        10,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut SPI_TASK_STACK }, //  Stack space for the task
        SPI_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
   131bc:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   131c0:	1e41      	subs	r1, r0, #1
   131c2:	bf18      	it	ne
   131c4:	2101      	movne	r1, #1
   131c6:	2801      	cmp	r0, #1
   131c8:	d001      	beq.n	131ce <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa4a>
   131ca:	e7ff      	b.n	131cc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa48>
   131cc:	e005      	b.n	131da <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa56>
   131ce:	2000      	movs	r0, #0
    Ok(())
   131d0:	9069      	str	r0, [sp, #420]	; 0x1a4
   131d2:	2001      	movs	r0, #1
   131d4:	9069      	str	r0, [sp, #420]	; 0x1a4
}
   131d6:	e008      	b.n	131ea <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>
    os::task_init(                //  Create a new task and start it...
   131d8:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
   131da:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   131de:	f8cd 05a4 	str.w	r0, [sp, #1444]	; 0x5a4
   131e2:	f7ff fa17 	bl	12614 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   131e6:	9006      	str	r0, [sp, #24]
   131e8:	e003      	b.n	131f2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa6e>
}
   131ea:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   131ec:	f50d 6db5 	add.w	sp, sp, #1448	; 0x5a8
   131f0:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;                               //  `?` means check for error
   131f2:	9806      	ldr	r0, [sp, #24]
   131f4:	f7f5 fd38 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   131f8:	9069      	str	r0, [sp, #420]	; 0x1a4
   131fa:	e7ff      	b.n	131fc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa78>
   131fc:	e7f5      	b.n	131ea <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>

000131fe <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E>:

/// SPI Task Function.  Execute sequentially each SPI request posted to our Event Queue.  When there are no requests to process, block until one arrives.
extern "C" fn spi_task_func(_arg: Ptr) {
   131fe:	b580      	push	{r7, lr}
   13200:	b082      	sub	sp, #8
   13202:	9001      	str	r0, [sp, #4]
    loop {
   13204:	e7ff      	b.n	13206 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>
        //  Forever read SPI requests and execute them. Will call spi_event_callback().
        os::eventq_run(
   13206:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   1320a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1320e:	f7f5 fdaa 	bl	8d66 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
   13212:	9000      	str	r0, [sp, #0]
   13214:	e7ff      	b.n	13216 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x18>
   13216:	f644 312c 	movw	r1, #19244	; 0x4b2c
   1321a:	f2c0 0102 	movt	r1, #2
   1321e:	f644 3338 	movw	r3, #19256	; 0x4b38
   13222:	f2c0 0302 	movt	r3, #2
   13226:	220b      	movs	r2, #11
   13228:	9800      	ldr	r0, [sp, #0]
   1322a:	f7f5 fcea 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1322e:	e7ff      	b.n	13230 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x32>
            unsafe { &mut SPI_EVENT_QUEUE }
        ).expect("eventq fail");

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
   13230:	f005 f8c6 	bl	183c0 <hal_watchdog_tickle>
   13234:	e7ff      	b.n	13236 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x38>
    loop {
   13236:	e7e6      	b.n	13206 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>

00013238 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>:
    }
}

/// Set pending request for non-blocking SPI write for Command Byte. Returns without waiting for write to complete.
pub fn spi_noblock_write_command(cmd: u8) -> MynewtResult<()> {
   13238:	b580      	push	{r7, lr}
   1323a:	b08c      	sub	sp, #48	; 0x30
   1323c:	4601      	mov	r1, r0
   1323e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    //  If there is a pending Command Byte, enqueue it.
    spi_noblock_write_flush() ? ;
   13242:	9104      	str	r1, [sp, #16]
   13244:	f000 f8d4 	bl	133f0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   13248:	9003      	str	r0, [sp, #12]
   1324a:	e7ff      	b.n	1324c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x14>
   1324c:	9803      	ldr	r0, [sp, #12]
   1324e:	f7f5 fd17 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   13252:	9006      	str	r0, [sp, #24]
   13254:	e7ff      	b.n	13256 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x1e>
   13256:	9806      	ldr	r0, [sp, #24]
   13258:	1e41      	subs	r1, r0, #1
   1325a:	bf18      	it	ne
   1325c:	2101      	movne	r1, #1
   1325e:	2801      	cmp	r0, #1
   13260:	d001      	beq.n	13266 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2e>
   13262:	e7ff      	b.n	13264 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2c>
   13264:	e00c      	b.n	13280 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x48>
    //  Set the pending Command Byte.
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   13266:	f644 2070 	movw	r0, #19056	; 0x4a70
   1326a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1326e:	9904      	ldr	r1, [sp, #16]
   13270:	f7ff f9a4 	bl	125bc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>
   13274:	f88d 101d 	strb.w	r1, [sp, #29]
   13278:	f88d 001c 	strb.w	r0, [sp, #28]
   1327c:	e00f      	b.n	1329e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x66>
    spi_noblock_write_flush() ? ;
   1327e:	defe      	udf	#254	; 0xfe
   13280:	9806      	ldr	r0, [sp, #24]
   13282:	900b      	str	r0, [sp, #44]	; 0x2c
   13284:	f7ff f9c6 	bl	12614 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   13288:	9002      	str	r0, [sp, #8]
   1328a:	e002      	b.n	13292 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x5a>
        return Err(MynewtError::SYS_EINVAL);
    }
    Ok(())
}
   1328c:	9805      	ldr	r0, [sp, #20]
   1328e:	b00c      	add	sp, #48	; 0x30
   13290:	bd80      	pop	{r7, pc}
    spi_noblock_write_flush() ? ;
   13292:	9802      	ldr	r0, [sp, #8]
   13294:	f7f5 fce8 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13298:	9005      	str	r0, [sp, #20]
   1329a:	e7ff      	b.n	1329c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x64>
   1329c:	e7f6      	b.n	1328c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   1329e:	a807      	add	r0, sp, #28
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   132a0:	f7f5 fcd6 	bl	8c50 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>
   132a4:	9001      	str	r0, [sp, #4]
   132a6:	e7ff      	b.n	132a8 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x70>
   132a8:	9801      	ldr	r0, [sp, #4]
   132aa:	07c1      	lsls	r1, r0, #31
   132ac:	2900      	cmp	r1, #0
   132ae:	d105      	bne.n	132bc <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x84>
   132b0:	e7ff      	b.n	132b2 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x7a>
   132b2:	2000      	movs	r0, #0
    Ok(())
   132b4:	9005      	str	r0, [sp, #20]
   132b6:	2001      	movs	r0, #1
   132b8:	9005      	str	r0, [sp, #20]
}
   132ba:	e7e7      	b.n	1328c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   132bc:	f06f 0001 	mvn.w	r0, #1
        return Err(MynewtError::SYS_EINVAL);
   132c0:	9008      	str	r0, [sp, #32]
   132c2:	9808      	ldr	r0, [sp, #32]
   132c4:	9005      	str	r0, [sp, #20]
   132c6:	e7e1      	b.n	1328c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>

000132c8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>:

/// Set pending request for non-blocking SPI write for Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_data(data: &[u8]) -> MynewtResult<()> {
   132c8:	b580      	push	{r7, lr}
   132ca:	b094      	sub	sp, #80	; 0x50
   132cc:	9010      	str	r0, [sp, #64]	; 0x40
   132ce:	9111      	str	r1, [sp, #68]	; 0x44
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   132d0:	f644 2270 	movw	r2, #19056	; 0x4a70
   132d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   132d8:	900d      	str	r0, [sp, #52]	; 0x34
   132da:	4610      	mov	r0, r2
   132dc:	910c      	str	r1, [sp, #48]	; 0x30
   132de:	f7ff f953 	bl	12588 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   132e2:	900b      	str	r0, [sp, #44]	; 0x2c
   132e4:	910a      	str	r1, [sp, #40]	; 0x28
   132e6:	e7ff      	b.n	132e8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x20>
   132e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   132ea:	990a      	ldr	r1, [sp, #40]	; 0x28
   132ec:	f7fe fcf3 	bl	11cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   132f0:	9009      	str	r0, [sp, #36]	; 0x24
   132f2:	e7ff      	b.n	132f4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x2c>
   132f4:	9809      	ldr	r0, [sp, #36]	; 0x24
   132f6:	2800      	cmp	r0, #0
   132f8:	d009      	beq.n	1330e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x46>
   132fa:	e7ff      	b.n	132fc <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x34>
    //  if unsafe { PENDING_DATA.len() + data.len() > PENDING_DATA.capacity() } { cortex_m::asm::bkpt(); } ////
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   132fc:	f644 2078 	movw	r0, #19064	; 0x4a78
   13300:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13304:	f7ff f934 	bl	12570 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   13308:	9008      	str	r0, [sp, #32]
   1330a:	9107      	str	r1, [sp, #28]
   1330c:	e00b      	b.n	13326 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x5e>
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   1330e:	f644 3048 	movw	r0, #19272	; 0x4b48
   13312:	f2c0 0002 	movt	r0, #2
   13316:	f644 3254 	movw	r2, #19284	; 0x4b54
   1331a:	f2c0 0202 	movt	r2, #2
   1331e:	210b      	movs	r1, #11
   13320:	f002 f9d8 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13324:	defe      	udf	#254	; 0xfe
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   13326:	9808      	ldr	r0, [sp, #32]
   13328:	9907      	ldr	r1, [sp, #28]
   1332a:	f7fe fcd4 	bl	11cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1332e:	9006      	str	r0, [sp, #24]
   13330:	e7ff      	b.n	13332 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x6a>
   13332:	980d      	ldr	r0, [sp, #52]	; 0x34
   13334:	990c      	ldr	r1, [sp, #48]	; 0x30
   13336:	f7fe fcce 	bl	11cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1333a:	9005      	str	r0, [sp, #20]
   1333c:	e7ff      	b.n	1333e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x76>
   1333e:	9806      	ldr	r0, [sp, #24]
   13340:	9905      	ldr	r1, [sp, #20]
   13342:	1842      	adds	r2, r0, r1
   13344:	4613      	mov	r3, r2
   13346:	4282      	cmp	r2, r0
   13348:	9304      	str	r3, [sp, #16]
   1334a:	d345      	bcc.n	133d8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x110>
   1334c:	e7ff      	b.n	1334e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x86>
   1334e:	f644 2078 	movw	r0, #19064	; 0x4a78
   13352:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13356:	f7ff f953 	bl	12600 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>
   1335a:	9003      	str	r0, [sp, #12]
   1335c:	e7ff      	b.n	1335e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x96>
   1335e:	9804      	ldr	r0, [sp, #16]
   13360:	9903      	ldr	r1, [sp, #12]
   13362:	4288      	cmp	r0, r1
   13364:	d80a      	bhi.n	1337c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xb4>
   13366:	e7ff      	b.n	13368 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa0>
    //  Append Data Bytes to Pending Data Bytes.
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13368:	f644 2078 	movw	r0, #19064	; 0x4a78
   1336c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13370:	990d      	ldr	r1, [sp, #52]	; 0x34
   13372:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13374:	f7ff f914 	bl	125a0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>
   13378:	9002      	str	r0, [sp, #8]
   1337a:	e00b      	b.n	13394 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xcc>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   1337c:	f644 309c 	movw	r0, #19356	; 0x4b9c
   13380:	f2c0 0002 	movt	r0, #2
   13384:	f644 32a8 	movw	r2, #19368	; 0x4ba8
   13388:	f2c0 0202 	movt	r2, #2
   1338c:	210c      	movs	r1, #12
   1338e:	f002 f9a1 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13392:	defe      	udf	#254	; 0xfe
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13394:	9802      	ldr	r0, [sp, #8]
   13396:	f000 0001 	and.w	r0, r0, #1
   1339a:	f7f5 fc6b 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1339e:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   133a2:	e7ff      	b.n	133a4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xdc>
   133a4:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   133a8:	07c1      	lsls	r1, r0, #31
   133aa:	2900      	cmp	r1, #0
   133ac:	d001      	beq.n	133b2 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xea>
   133ae:	e7ff      	b.n	133b0 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xe8>
   133b0:	e005      	b.n	133be <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xf6>
   133b2:	2000      	movs	r0, #0
    Ok(())
   133b4:	900e      	str	r0, [sp, #56]	; 0x38
   133b6:	2001      	movs	r0, #1
   133b8:	900e      	str	r0, [sp, #56]	; 0x38
}
   133ba:	e004      	b.n	133c6 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   133bc:	defe      	udf	#254	; 0xfe
   133be:	f7ff f8c1 	bl	12544 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   133c2:	9001      	str	r0, [sp, #4]
   133c4:	e002      	b.n	133cc <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x104>
}
   133c6:	980e      	ldr	r0, [sp, #56]	; 0x38
   133c8:	b014      	add	sp, #80	; 0x50
   133ca:	bd80      	pop	{r7, pc}
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   133cc:	9801      	ldr	r0, [sp, #4]
   133ce:	f7f5 fc4b 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   133d2:	900e      	str	r0, [sp, #56]	; 0x38
   133d4:	e7ff      	b.n	133d6 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x10e>
   133d6:	e7f6      	b.n	133c6 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   133d8:	f644 3080 	movw	r0, #19328	; 0x4b80
   133dc:	f2c0 0002 	movt	r0, #2
   133e0:	f644 3264 	movw	r2, #19300	; 0x4b64
   133e4:	f2c0 0202 	movt	r2, #2
   133e8:	211c      	movs	r1, #28
   133ea:	f002 f973 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   133ee:	defe      	udf	#254	; 0xfe

000133f0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>:

/// Enqueue any pending request for non-blocking SPI write for Command Byte and Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_flush() -> MynewtResult<()> {
   133f0:	b580      	push	{r7, lr}
   133f2:	b090      	sub	sp, #64	; 0x40
    //  If no pending request, quit.
    if unsafe { PENDING_CMD.len() } == 0 &&
   133f4:	f644 2070 	movw	r0, #19056	; 0x4a70
   133f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   133fc:	f7ff f8c4 	bl	12588 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   13400:	900b      	str	r0, [sp, #44]	; 0x2c
   13402:	910a      	str	r1, [sp, #40]	; 0x28
   13404:	e016      	b.n	13434 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x44>
   13406:	2001      	movs	r0, #1
   13408:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   1340c:	e00c      	b.n	13428 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
   1340e:	2000      	movs	r0, #0
   13410:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   13414:	e008      	b.n	13428 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
        unsafe { PENDING_DATA.len() } == 0 {
   13416:	f644 2078 	movw	r0, #19064	; 0x4a78
   1341a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1341e:	f7ff f8a7 	bl	12570 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   13422:	9009      	str	r0, [sp, #36]	; 0x24
   13424:	9108      	str	r1, [sp, #32]
   13426:	e00f      	b.n	13448 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x58>
    if unsafe { PENDING_CMD.len() } == 0 &&
   13428:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   1342c:	07c0      	lsls	r0, r0, #31
   1342e:	2800      	cmp	r0, #0
   13430:	d11d      	bne.n	1346e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x7e>
   13432:	e013      	b.n	1345c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x6c>
   13434:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13436:	990a      	ldr	r1, [sp, #40]	; 0x28
   13438:	f7fe fc4d 	bl	11cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1343c:	9007      	str	r0, [sp, #28]
   1343e:	e7ff      	b.n	13440 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x50>
   13440:	9807      	ldr	r0, [sp, #28]
   13442:	2800      	cmp	r0, #0
   13444:	d0e7      	beq.n	13416 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x26>
   13446:	e7e2      	b.n	1340e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        unsafe { PENDING_DATA.len() } == 0 {
   13448:	9809      	ldr	r0, [sp, #36]	; 0x24
   1344a:	9908      	ldr	r1, [sp, #32]
   1344c:	f7fe fc43 	bl	11cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13450:	9006      	str	r0, [sp, #24]
   13452:	e7ff      	b.n	13454 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x64>
    if unsafe { PENDING_CMD.len() } == 0 &&
   13454:	9806      	ldr	r0, [sp, #24]
   13456:	2800      	cmp	r0, #0
   13458:	d0d5      	beq.n	13406 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x16>
   1345a:	e7d8      	b.n	1340e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        return Ok(());
    }
    //  Enqueue the pending SPI request into the Mbuf Queue
    if let Err(e) = spi_noblock_write(
        unsafe { PENDING_CMD[0] },  //  Command Byte
   1345c:	f644 2070 	movw	r0, #19056	; 0x4a70
   13460:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13464:	f7ff f890 	bl	12588 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   13468:	9005      	str	r0, [sp, #20]
   1346a:	9104      	str	r1, [sp, #16]
   1346c:	e007      	b.n	1347e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x8e>
   1346e:	2000      	movs	r0, #0
        return Ok(());
   13470:	900c      	str	r0, [sp, #48]	; 0x30
   13472:	2001      	movs	r0, #1
   13474:	900c      	str	r0, [sp, #48]	; 0x30
   13476:	e7ff      	b.n	13478 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    }
    //  Else clear the pending request and return Ok.
    unsafe { PENDING_CMD.clear() };
    unsafe { PENDING_DATA.clear() };
    Ok(())
}
   13478:	980c      	ldr	r0, [sp, #48]	; 0x30
   1347a:	b010      	add	sp, #64	; 0x40
   1347c:	bd80      	pop	{r7, pc}
        unsafe { PENDING_CMD[0] },  //  Command Byte
   1347e:	9804      	ldr	r0, [sp, #16]
   13480:	2800      	cmp	r0, #0
   13482:	d03f      	beq.n	13504 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x114>
   13484:	e7ff      	b.n	13486 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x96>
   13486:	9805      	ldr	r0, [sp, #20]
   13488:	7801      	ldrb	r1, [r0, #0]
        unsafe { &PENDING_DATA }    //  Data Bytes
   1348a:	f644 2078 	movw	r0, #19064	; 0x4a78
   1348e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13492:	9103      	str	r1, [sp, #12]
   13494:	f7ff f86c 	bl	12570 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   13498:	9002      	str	r0, [sp, #8]
   1349a:	9101      	str	r1, [sp, #4]
   1349c:	e7ff      	b.n	1349e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xae>
    if let Err(e) = spi_noblock_write(
   1349e:	9803      	ldr	r0, [sp, #12]
   134a0:	9902      	ldr	r1, [sp, #8]
   134a2:	9a01      	ldr	r2, [sp, #4]
   134a4:	f000 f837 	bl	13516 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>
   134a8:	900e      	str	r0, [sp, #56]	; 0x38
   134aa:	e7ff      	b.n	134ac <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xbc>
   134ac:	980e      	ldr	r0, [sp, #56]	; 0x38
   134ae:	2801      	cmp	r0, #1
   134b0:	d107      	bne.n	134c2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xd2>
   134b2:	e7ff      	b.n	134b4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xc4>
    unsafe { PENDING_CMD.clear() };
   134b4:	f644 2070 	movw	r0, #19056	; 0x4a70
   134b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   134bc:	f7ff f890 	bl	125e0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   134c0:	e014      	b.n	134ec <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xfc>
    if let Err(e) = spi_noblock_write(
   134c2:	980e      	ldr	r0, [sp, #56]	; 0x38
   134c4:	900f      	str	r0, [sp, #60]	; 0x3c
        unsafe { PENDING_CMD.clear() };
   134c6:	f644 2170 	movw	r1, #19056	; 0x4a70
   134ca:	f2c2 0100 	movt	r1, #8192	; 0x2000
   134ce:	9000      	str	r0, [sp, #0]
   134d0:	4608      	mov	r0, r1
   134d2:	f7ff f885 	bl	125e0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   134d6:	e7ff      	b.n	134d8 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xe8>
        unsafe { PENDING_DATA.clear() };    
   134d8:	f644 2078 	movw	r0, #19064	; 0x4a78
   134dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   134e0:	f7ff f886 	bl	125f0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   134e4:	e7ff      	b.n	134e6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xf6>
        return Err(e);
   134e6:	9800      	ldr	r0, [sp, #0]
   134e8:	900c      	str	r0, [sp, #48]	; 0x30
   134ea:	e7c5      	b.n	13478 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    unsafe { PENDING_DATA.clear() };
   134ec:	f644 2078 	movw	r0, #19064	; 0x4a78
   134f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   134f4:	f7ff f87c 	bl	125f0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   134f8:	e7ff      	b.n	134fa <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x10a>
   134fa:	2000      	movs	r0, #0
    Ok(())
   134fc:	900c      	str	r0, [sp, #48]	; 0x30
   134fe:	2001      	movs	r0, #1
   13500:	900c      	str	r0, [sp, #48]	; 0x30
}
   13502:	e7b9      	b.n	13478 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
        unsafe { PENDING_CMD[0] },  //  Command Byte
   13504:	f644 30b8 	movw	r0, #19384	; 0x4bb8
   13508:	f2c0 0002 	movt	r0, #2
   1350c:	2100      	movs	r1, #0
   1350e:	9a04      	ldr	r2, [sp, #16]
   13510:	f002 f8f6 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   13514:	defe      	udf	#254	; 0xfe

00013516 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>:

/// Enqueue request for non-blocking SPI write. Returns without waiting for write to complete.
/// Request must have a Command Byte, followed by optional Data Bytes.
fn spi_noblock_write(cmd: u8, data: &[u8]) -> MynewtResult<()> {
   13516:	b580      	push	{r7, lr}
   13518:	b0a0      	sub	sp, #128	; 0x80
   1351a:	4603      	mov	r3, r0
   1351c:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   13520:	9116      	str	r1, [sp, #88]	; 0x58
   13522:	9217      	str	r2, [sp, #92]	; 0x5c
   13524:	f247 5030 	movw	r0, #30000	; 0x7530
    console::print("spi data "); ////
    console::dump(data.as_ptr(), data.len() as u32); console::print("\n"); ////
    console::flush(); */

    //  Throttle the number of queued SPI requests.
    let timeout = 30_000;
   13528:	9018      	str	r0, [sp, #96]	; 0x60
   1352a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   1352e:	fba0 0c0c 	umull	r0, ip, r0, ip
   13532:	f1bc 0f00 	cmp.w	ip, #0
   13536:	920f      	str	r2, [sp, #60]	; 0x3c
   13538:	910e      	str	r1, [sp, #56]	; 0x38
   1353a:	900d      	str	r0, [sp, #52]	; 0x34
   1353c:	f040 80c8 	bne.w	136d0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ba>
   13540:	e7ff      	b.n	13542 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x2c>
   13542:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13546:	f2c1 0062 	movt	r0, #4194	; 0x1062
   1354a:	990d      	ldr	r1, [sp, #52]	; 0x34
   1354c:	fba1 0200 	umull	r0, r2, r1, r0
   13550:	0991      	lsrs	r1, r2, #6
   13552:	f646 2284 	movw	r2, #27268	; 0x6a84
   13556:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1355a:	900c      	str	r0, [sp, #48]	; 0x30
   1355c:	4610      	mov	r0, r2
   1355e:	f006 f82f 	bl	195c0 <os_sem_pend>
   13562:	e7ff      	b.n	13564 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x4e>

    //  Allocate a new mbuf chain to copy the data to be sent.
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   13564:	980e      	ldr	r0, [sp, #56]	; 0x38
   13566:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13568:	f7fe fbb5 	bl	11cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1356c:	900b      	str	r0, [sp, #44]	; 0x2c
   1356e:	e7ff      	b.n	13570 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x5a>
   13570:	2001      	movs	r0, #1
   13572:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13574:	fa10 f081 	uxtah	r0, r0, r1
   13578:	b282      	uxth	r2, r0
   1357a:	4603      	mov	r3, r0
   1357c:	4282      	cmp	r2, r0
   1357e:	930a      	str	r3, [sp, #40]	; 0x28
   13580:	f040 80b2 	bne.w	136e8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1d2>
   13584:	e7ff      	b.n	13586 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x70>
   13586:	980a      	ldr	r0, [sp, #40]	; 0x28
   13588:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    let mbuf = unsafe { os::os_msys_get_pkthdr(len, 0) };
   1358c:	b280      	uxth	r0, r0
   1358e:	2100      	movs	r1, #0
   13590:	f005 fd24 	bl	18fdc <os_msys_get_pkthdr>
   13594:	4601      	mov	r1, r0
   13596:	901a      	str	r0, [sp, #104]	; 0x68
   13598:	9109      	str	r1, [sp, #36]	; 0x24
   1359a:	e7ff      	b.n	1359c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x86>
    if mbuf.is_null() {  //  If out of memory, quit.
   1359c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1359e:	f000 ff17 	bl	143d0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   135a2:	9008      	str	r0, [sp, #32]
   135a4:	e7ff      	b.n	135a6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x90>
   135a6:	9808      	ldr	r0, [sp, #32]
   135a8:	07c1      	lsls	r1, r0, #31
   135aa:	2900      	cmp	r1, #0
   135ac:	d106      	bne.n	135bc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xa6>
   135ae:	e7ff      	b.n	135b0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x9a>
   135b0:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    }

    //  Append the Command Byte to the mbuf chain.
    let rc = unsafe { os::os_mbuf_append(
        mbuf, 
        core::mem::transmute(&cmd), 
   135b4:	901b      	str	r0, [sp, #108]	; 0x6c
   135b6:	991b      	ldr	r1, [sp, #108]	; 0x6c
   135b8:	9107      	str	r1, [sp, #28]
   135ba:	e010      	b.n	135de <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc8>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   135bc:	f646 2084 	movw	r0, #27268	; 0x6a84
   135c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   135c4:	f005 ffca 	bl	1955c <os_sem_release>
   135c8:	e7ff      	b.n	135ca <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xb4>
   135ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   135ce:	9012      	str	r0, [sp, #72]	; 0x48
   135d0:	9812      	ldr	r0, [sp, #72]	; 0x48
   135d2:	9011      	str	r0, [sp, #68]	; 0x44
   135d4:	e002      	b.n	135dc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
        return Err(MynewtError::SYS_EUNKNOWN); 
    }
    Ok(())
}
   135d6:	9811      	ldr	r0, [sp, #68]	; 0x44
   135d8:	b020      	add	sp, #128	; 0x80
   135da:	bd80      	pop	{r7, pc}
        return Err(MynewtError::SYS_ENOMEM); 
   135dc:	e7fb      	b.n	135d6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
   135de:	2201      	movs	r2, #1
    let rc = unsafe { os::os_mbuf_append(
   135e0:	9809      	ldr	r0, [sp, #36]	; 0x24
   135e2:	9907      	ldr	r1, [sp, #28]
   135e4:	f005 fb52 	bl	18c8c <os_mbuf_append>
   135e8:	4601      	mov	r1, r0
   135ea:	901c      	str	r0, [sp, #112]	; 0x70
   135ec:	9106      	str	r1, [sp, #24]
   135ee:	e7ff      	b.n	135f0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xda>
    if rc != 0 {  //  If out of memory, quit.
   135f0:	9806      	ldr	r0, [sp, #24]
   135f2:	2800      	cmp	r0, #0
   135f4:	d106      	bne.n	13604 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xee>
   135f6:	e7ff      	b.n	135f8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xe2>
        core::mem::transmute(data.as_ptr()), 
   135f8:	980e      	ldr	r0, [sp, #56]	; 0x38
   135fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
   135fc:	f7fe fb73 	bl	11ce6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   13600:	9005      	str	r0, [sp, #20]
   13602:	e011      	b.n	13628 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x112>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   13604:	9809      	ldr	r0, [sp, #36]	; 0x24
   13606:	f005 fb25 	bl	18c54 <os_mbuf_free_chain>
   1360a:	e7ff      	b.n	1360c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xf6>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   1360c:	f646 2084 	movw	r0, #27268	; 0x6a84
   13610:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13614:	f005 ffa2 	bl	1955c <os_sem_release>
   13618:	e7ff      	b.n	1361a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x104>
   1361a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   1361e:	9013      	str	r0, [sp, #76]	; 0x4c
   13620:	9813      	ldr	r0, [sp, #76]	; 0x4c
   13622:	9011      	str	r0, [sp, #68]	; 0x44
   13624:	e7ff      	b.n	13626 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
   13626:	e7d9      	b.n	135dc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        core::mem::transmute(data.as_ptr()), 
   13628:	9805      	ldr	r0, [sp, #20]
   1362a:	901d      	str	r0, [sp, #116]	; 0x74
   1362c:	991d      	ldr	r1, [sp, #116]	; 0x74
   1362e:	9104      	str	r1, [sp, #16]
   13630:	e7ff      	b.n	13632 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x11c>
        data.len() as u16
   13632:	980e      	ldr	r0, [sp, #56]	; 0x38
   13634:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13636:	f7fe fb4e 	bl	11cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1363a:	9003      	str	r0, [sp, #12]
   1363c:	e7ff      	b.n	1363e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x128>
    let rc = unsafe { os::os_mbuf_append(
   1363e:	9803      	ldr	r0, [sp, #12]
   13640:	b282      	uxth	r2, r0
   13642:	9809      	ldr	r0, [sp, #36]	; 0x24
   13644:	9904      	ldr	r1, [sp, #16]
   13646:	f005 fb21 	bl	18c8c <os_mbuf_append>
   1364a:	4601      	mov	r1, r0
   1364c:	901e      	str	r0, [sp, #120]	; 0x78
   1364e:	9102      	str	r1, [sp, #8]
   13650:	e7ff      	b.n	13652 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x13c>
    if rc != 0 {  //  If out of memory, quit.
   13652:	9802      	ldr	r0, [sp, #8]
   13654:	2800      	cmp	r0, #0
   13656:	d10f      	bne.n	13678 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x162>
   13658:	e7ff      	b.n	1365a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x144>
    let rc = unsafe { os::os_mqueue_put(
   1365a:	f646 208c 	movw	r0, #27276	; 0x6a8c
   1365e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13662:	f646 21a4 	movw	r1, #27300	; 0x6aa4
   13666:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1366a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1366c:	f005 fa90 	bl	18b90 <os_mqueue_put>
   13670:	4601      	mov	r1, r0
   13672:	901f      	str	r0, [sp, #124]	; 0x7c
   13674:	9101      	str	r1, [sp, #4]
   13676:	e011      	b.n	1369c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x186>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   13678:	9809      	ldr	r0, [sp, #36]	; 0x24
   1367a:	f005 faeb 	bl	18c54 <os_mbuf_free_chain>
   1367e:	e7ff      	b.n	13680 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x16a>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   13680:	f646 2084 	movw	r0, #27268	; 0x6a84
   13684:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13688:	f005 ff68 	bl	1955c <os_sem_release>
   1368c:	e7ff      	b.n	1368e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x178>
   1368e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   13692:	9014      	str	r0, [sp, #80]	; 0x50
   13694:	9814      	ldr	r0, [sp, #80]	; 0x50
   13696:	9011      	str	r0, [sp, #68]	; 0x44
   13698:	e7ff      	b.n	1369a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
   1369a:	e7c4      	b.n	13626 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
    if rc != 0 {  //  If out of memory, quit.
   1369c:	9801      	ldr	r0, [sp, #4]
   1369e:	2800      	cmp	r0, #0
   136a0:	d105      	bne.n	136ae <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x198>
   136a2:	e7ff      	b.n	136a4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x18e>
   136a4:	2000      	movs	r0, #0
    Ok(())
   136a6:	9011      	str	r0, [sp, #68]	; 0x44
   136a8:	2001      	movs	r0, #1
   136aa:	9011      	str	r0, [sp, #68]	; 0x44
}
   136ac:	e793      	b.n	135d6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   136ae:	9809      	ldr	r0, [sp, #36]	; 0x24
   136b0:	f005 fad0 	bl	18c54 <os_mbuf_free_chain>
   136b4:	e7ff      	b.n	136b6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1a0>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   136b6:	f646 2084 	movw	r0, #27268	; 0x6a84
   136ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
   136be:	f005 ff4d 	bl	1955c <os_sem_release>
   136c2:	e7ff      	b.n	136c4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ae>
   136c4:	f06f 000c 	mvn.w	r0, #12
        return Err(MynewtError::SYS_EUNKNOWN); 
   136c8:	9015      	str	r0, [sp, #84]	; 0x54
   136ca:	9815      	ldr	r0, [sp, #84]	; 0x54
   136cc:	9011      	str	r0, [sp, #68]	; 0x44
   136ce:	e7e4      	b.n	1369a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   136d0:	f644 30e0 	movw	r0, #19424	; 0x4be0
   136d4:	f2c0 0002 	movt	r0, #2
   136d8:	f644 32c8 	movw	r2, #19400	; 0x4bc8
   136dc:	f2c0 0202 	movt	r2, #2
   136e0:	2121      	movs	r1, #33	; 0x21
   136e2:	f001 fff7 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   136e6:	defe      	udf	#254	; 0xfe
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   136e8:	f644 3080 	movw	r0, #19328	; 0x4b80
   136ec:	f2c0 0002 	movt	r0, #2
   136f0:	f644 4204 	movw	r2, #19460	; 0x4c04
   136f4:	f2c0 0202 	movt	r2, #2
   136f8:	211c      	movs	r1, #28
   136fa:	f001 ffeb 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   136fe:	defe      	udf	#254	; 0xfe

00013700 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E>:

/// Callback for the event that is triggered when an SPI request is added to the queue.
extern "C" fn spi_event_callback(_event: *mut os::os_event) {    
   13700:	b5b0      	push	{r4, r5, r7, lr}
   13702:	b0c4      	sub	sp, #272	; 0x110
   13704:	9038      	str	r0, [sp, #224]	; 0xe0
   13706:	e7ff      	b.n	13708 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
    loop {  //  For each mbuf chain found...
        //  Get the next SPI request, stored as an mbuf chain.
        let om = unsafe { os::os_mqueue_get(&mut SPI_DATA_QUEUE) };
   13708:	f646 208c 	movw	r0, #27276	; 0x6a8c
   1370c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13710:	f005 fa2b 	bl	18b6a <os_mqueue_get>
   13714:	4601      	mov	r1, r0
   13716:	9039      	str	r0, [sp, #228]	; 0xe4
   13718:	911b      	str	r1, [sp, #108]	; 0x6c
   1371a:	e7ff      	b.n	1371c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c>
        if om.is_null() { break; }
   1371c:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1371e:	f000 fe57 	bl	143d0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   13722:	901a      	str	r0, [sp, #104]	; 0x68
   13724:	e7ff      	b.n	13726 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26>
   13726:	981a      	ldr	r0, [sp, #104]	; 0x68
   13728:	07c1      	lsls	r1, r0, #31
   1372a:	2900      	cmp	r1, #0
   1372c:	d106      	bne.n	1373c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x3c>
   1372e:	e7ff      	b.n	13730 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x30>

        //  Send the mbuf chain.
        let mut m = om;
   13730:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13732:	901c      	str	r0, [sp, #112]	; 0x70
   13734:	2101      	movs	r1, #1
        let mut first_byte = true;
   13736:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
        while !m.is_null() {  //  For each mbuf in the chain...
   1373a:	e001      	b.n	13740 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>

        //  Release the throttle semaphore to allow next request to be queued.
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
        assert_eq!(rc, 0, "sem fail");    
    }
}
   1373c:	b044      	add	sp, #272	; 0x110
   1373e:	bdb0      	pop	{r4, r5, r7, pc}
        while !m.is_null() {  //  For each mbuf in the chain...
   13740:	981c      	ldr	r0, [sp, #112]	; 0x70
   13742:	f000 fe45 	bl	143d0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   13746:	9019      	str	r0, [sp, #100]	; 0x64
   13748:	e7ff      	b.n	1374a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x4a>
   1374a:	9819      	ldr	r0, [sp, #100]	; 0x64
   1374c:	07c1      	lsls	r1, r0, #31
   1374e:	2900      	cmp	r1, #0
   13750:	d004      	beq.n	1375c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x5c>
   13752:	e7ff      	b.n	13754 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x54>
        unsafe { os::os_mbuf_free_chain(om) };
   13754:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13756:	f005 fa7d 	bl	18c54 <os_mbuf_free_chain>
   1375a:	e0aa      	b.n	138b2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1b2>
            let data = unsafe { (*m).om_data };  //  Fetch the data
   1375c:	981c      	ldr	r0, [sp, #112]	; 0x70
   1375e:	6800      	ldr	r0, [r0, #0]
   13760:	903a      	str	r0, [sp, #232]	; 0xe8
            let len = unsafe { (*m).om_len };    //  Fetch the length
   13762:	991c      	ldr	r1, [sp, #112]	; 0x70
   13764:	88c9      	ldrh	r1, [r1, #6]
   13766:	460a      	mov	r2, r1
   13768:	f8ad 10ee 	strh.w	r1, [sp, #238]	; 0xee
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   1376c:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
   13770:	07c9      	lsls	r1, r1, #31
   13772:	2900      	cmp	r1, #0
   13774:	9018      	str	r0, [sp, #96]	; 0x60
   13776:	9217      	str	r2, [sp, #92]	; 0x5c
   13778:	d105      	bne.n	13786 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x86>
   1377a:	e7ff      	b.n	1377c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x7c>
                    unsafe { core::mem::transmute(data) }, 
   1377c:	9818      	ldr	r0, [sp, #96]	; 0x60
   1377e:	903e      	str	r0, [sp, #248]	; 0xf8
   13780:	983e      	ldr	r0, [sp, #248]	; 0xf8
   13782:	9016      	str	r0, [sp, #88]	; 0x58
   13784:	e07b      	b.n	1387e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17e>
   13786:	2000      	movs	r0, #0
                first_byte = false;
   13788:	f88d 0075 	strb.w	r0, [sp, #117]	; 0x75
                    unsafe { core::mem::transmute(data) }, 
   1378c:	9818      	ldr	r0, [sp, #96]	; 0x60
   1378e:	903c      	str	r0, [sp, #240]	; 0xf0
   13790:	983c      	ldr	r0, [sp, #240]	; 0xf0
   13792:	9015      	str	r0, [sp, #84]	; 0x54
   13794:	e7ff      	b.n	13796 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x96>
   13796:	2001      	movs	r0, #1
                internal_spi_noblock_write(
   13798:	9915      	ldr	r1, [sp, #84]	; 0x54
   1379a:	9014      	str	r0, [sp, #80]	; 0x50
   1379c:	4608      	mov	r0, r1
   1379e:	9914      	ldr	r1, [sp, #80]	; 0x50
   137a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   137a2:	f000 f921 	bl	139e8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   137a6:	9013      	str	r0, [sp, #76]	; 0x4c
   137a8:	e7ff      	b.n	137aa <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xaa>
   137aa:	f644 4114 	movw	r1, #19476	; 0x4c14
   137ae:	f2c0 0102 	movt	r1, #2
   137b2:	f644 4320 	movw	r3, #19488	; 0x4c20
   137b6:	f2c0 0302 	movt	r3, #2
   137ba:	220c      	movs	r2, #12
   137bc:	9813      	ldr	r0, [sp, #76]	; 0x4c
   137be:	f7f5 fa20 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   137c2:	e7ff      	b.n	137c4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xc4>
                if  unsafe { *data } == 0x01 || //  SWRESET
   137c4:	9818      	ldr	r0, [sp, #96]	; 0x60
   137c6:	7801      	ldrb	r1, [r0, #0]
   137c8:	2901      	cmp	r1, #1
   137ca:	d013      	beq.n	137f4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   137cc:	e01a      	b.n	13804 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x104>
   137ce:	2001      	movs	r0, #1
   137d0:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   137d4:	e008      	b.n	137e8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
   137d6:	2000      	movs	r0, #0
   137d8:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   137dc:	e004      	b.n	137e8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
                    unsafe { *data } == 0x29 {  //  DISPON
   137de:	9818      	ldr	r0, [sp, #96]	; 0x60
   137e0:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   137e2:	2929      	cmp	r1, #41	; 0x29
   137e4:	d0f3      	beq.n	137ce <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   137e6:	e7f6      	b.n	137d6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xd6>
   137e8:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
   137ec:	07c0      	lsls	r0, r0, #31
   137ee:	2800      	cmp	r0, #0
   137f0:	d113      	bne.n	1381a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x11a>
   137f2:	e017      	b.n	13824 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   137f4:	2001      	movs	r0, #1
   137f6:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   137fa:	e008      	b.n	1380e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
   137fc:	2000      	movs	r0, #0
   137fe:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   13802:	e004      	b.n	1380e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
                    unsafe { *data } == 0x11 || //  SLPOUT
   13804:	9818      	ldr	r0, [sp, #96]	; 0x60
   13806:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   13808:	2911      	cmp	r1, #17
   1380a:	d0f3      	beq.n	137f4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   1380c:	e7f6      	b.n	137fc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xfc>
   1380e:	f89d 0077 	ldrb.w	r0, [sp, #119]	; 0x77
   13812:	07c0      	lsls	r0, r0, #31
   13814:	2800      	cmp	r0, #0
   13816:	d1da      	bne.n	137ce <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   13818:	e7e1      	b.n	137de <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xde>
   1381a:	20c8      	movs	r0, #200	; 0xc8
                    delay_ms(200);
   1381c:	f000 fb13 	bl	13e46 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>
   13820:	e7ff      	b.n	13822 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x122>
                if  unsafe { *data } == 0x01 || //  SWRESET
   13822:	e7ff      	b.n	13824 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   13824:	2101      	movs	r1, #1
                    unsafe { core::mem::transmute(data.add(1)) }, 
   13826:	9818      	ldr	r0, [sp, #96]	; 0x60
   13828:	f7fe f9c5 	bl	11bb6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1382c:	9012      	str	r0, [sp, #72]	; 0x48
   1382e:	e7ff      	b.n	13830 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x130>
   13830:	9812      	ldr	r0, [sp, #72]	; 0x48
   13832:	903d      	str	r0, [sp, #244]	; 0xf4
   13834:	983d      	ldr	r0, [sp, #244]	; 0xf4
   13836:	9011      	str	r0, [sp, #68]	; 0x44
   13838:	e7ff      	b.n	1383a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x13a>
   1383a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   1383e:	9917      	ldr	r1, [sp, #92]	; 0x5c
   13840:	fa10 f081 	uxtah	r0, r0, r1
   13844:	b282      	uxth	r2, r0
   13846:	4603      	mov	r3, r0
   13848:	4282      	cmp	r2, r0
   1384a:	9310      	str	r3, [sp, #64]	; 0x40
   1384c:	f040 80c0 	bne.w	139d0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2d0>
   13850:	e7ff      	b.n	13852 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x152>
   13852:	9810      	ldr	r0, [sp, #64]	; 0x40
   13854:	b281      	uxth	r1, r0
   13856:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   13858:	9811      	ldr	r0, [sp, #68]	; 0x44
   1385a:	f000 f8c5 	bl	139e8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   1385e:	900f      	str	r0, [sp, #60]	; 0x3c
   13860:	e7ff      	b.n	13862 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x162>
   13862:	f644 4114 	movw	r1, #19476	; 0x4c14
   13866:	f2c0 0102 	movt	r1, #2
   1386a:	f644 4364 	movw	r3, #19556	; 0x4c64
   1386e:	f2c0 0302 	movt	r3, #2
   13872:	220c      	movs	r2, #12
   13874:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13876:	f7f5 f9c4 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1387a:	e7ff      	b.n	1387c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17c>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   1387c:	e015      	b.n	138aa <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
                    len as i32,  //  Write all Data Bytes
   1387e:	9817      	ldr	r0, [sp, #92]	; 0x5c
   13880:	b281      	uxth	r1, r0
   13882:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   13884:	9816      	ldr	r0, [sp, #88]	; 0x58
   13886:	f000 f8af 	bl	139e8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   1388a:	900e      	str	r0, [sp, #56]	; 0x38
   1388c:	e7ff      	b.n	1388e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x18e>
   1388e:	f644 4114 	movw	r1, #19476	; 0x4c14
   13892:	f2c0 0102 	movt	r1, #2
   13896:	f644 4374 	movw	r3, #19572	; 0x4c74
   1389a:	f2c0 0302 	movt	r3, #2
   1389e:	220c      	movs	r2, #12
   138a0:	980e      	ldr	r0, [sp, #56]	; 0x38
   138a2:	f7f5 f9ae 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   138a6:	e7ff      	b.n	138a8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1a8>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   138a8:	e7ff      	b.n	138aa <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
            m = unsafe { (*m).om_next.sle_next };  //  Fetch next mbuf in the chain.
   138aa:	981c      	ldr	r0, [sp, #112]	; 0x70
   138ac:	68c0      	ldr	r0, [r0, #12]
   138ae:	901c      	str	r0, [sp, #112]	; 0x70
        while !m.is_null() {  //  For each mbuf in the chain...
   138b0:	e746      	b.n	13740 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
   138b2:	f646 2084 	movw	r0, #27268	; 0x6a84
   138b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   138ba:	f005 fe4f 	bl	1955c <os_sem_release>
   138be:	901e      	str	r0, [sp, #120]	; 0x78
   138c0:	e7ff      	b.n	138c2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c2>
        assert_eq!(rc, 0, "sem fail");    
   138c2:	f644 1088 	movw	r0, #18824	; 0x4988
   138c6:	f2c0 0002 	movt	r0, #2
   138ca:	6800      	ldr	r0, [r0, #0]
   138cc:	a91e      	add	r1, sp, #120	; 0x78
   138ce:	911f      	str	r1, [sp, #124]	; 0x7c
   138d0:	9020      	str	r0, [sp, #128]	; 0x80
   138d2:	981f      	ldr	r0, [sp, #124]	; 0x7c
   138d4:	903f      	str	r0, [sp, #252]	; 0xfc
   138d6:	9920      	ldr	r1, [sp, #128]	; 0x80
   138d8:	9140      	str	r1, [sp, #256]	; 0x100
   138da:	6802      	ldr	r2, [r0, #0]
   138dc:	680b      	ldr	r3, [r1, #0]
   138de:	429a      	cmp	r2, r3
   138e0:	900d      	str	r0, [sp, #52]	; 0x34
   138e2:	910c      	str	r1, [sp, #48]	; 0x30
   138e4:	d101      	bne.n	138ea <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1ea>
   138e6:	e7ff      	b.n	138e8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1e8>
    loop {  //  For each mbuf chain found...
   138e8:	e70e      	b.n	13708 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
        assert_eq!(rc, 0, "sem fail");    
   138ea:	f644 10e0 	movw	r0, #18912	; 0x49e0
   138ee:	f2c0 0002 	movt	r0, #2
   138f2:	6801      	ldr	r1, [r0, #0]
   138f4:	980d      	ldr	r0, [sp, #52]	; 0x34
   138f6:	9030      	str	r0, [sp, #192]	; 0xc0
   138f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   138fa:	9231      	str	r2, [sp, #196]	; 0xc4
   138fc:	f644 23f8 	movw	r3, #19192	; 0x4af8
   13900:	f2c0 0302 	movt	r3, #2
   13904:	681b      	ldr	r3, [r3, #0]
   13906:	f644 2c00 	movw	ip, #18944	; 0x4a00
   1390a:	f2c0 0c02 	movt	ip, #2
   1390e:	f8dc c000 	ldr.w	ip, [ip]
   13912:	46ee      	mov	lr, sp
   13914:	2400      	movs	r4, #0
   13916:	f8ce 4000 	str.w	r4, [lr]
   1391a:	a832      	add	r0, sp, #200	; 0xc8
   1391c:	2201      	movs	r2, #1
   1391e:	910b      	str	r1, [sp, #44]	; 0x2c
   13920:	4619      	mov	r1, r3
   13922:	4663      	mov	r3, ip
   13924:	f7f5 f93e 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13928:	e7ff      	b.n	1392a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x22a>
   1392a:	a830      	add	r0, sp, #192	; 0xc0
   1392c:	902d      	str	r0, [sp, #180]	; 0xb4
   1392e:	a831      	add	r0, sp, #196	; 0xc4
   13930:	902e      	str	r0, [sp, #184]	; 0xb8
   13932:	a832      	add	r0, sp, #200	; 0xc8
   13934:	902f      	str	r0, [sp, #188]	; 0xbc
   13936:	982d      	ldr	r0, [sp, #180]	; 0xb4
   13938:	9041      	str	r0, [sp, #260]	; 0x104
   1393a:	992e      	ldr	r1, [sp, #184]	; 0xb8
   1393c:	9142      	str	r1, [sp, #264]	; 0x108
   1393e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   13940:	9243      	str	r2, [sp, #268]	; 0x10c
   13942:	f249 4347 	movw	r3, #37959	; 0x9447
   13946:	f2c0 0300 	movt	r3, #0
   1394a:	910a      	str	r1, [sp, #40]	; 0x28
   1394c:	4619      	mov	r1, r3
   1394e:	9209      	str	r2, [sp, #36]	; 0x24
   13950:	f7f5 fdb1 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13954:	9008      	str	r0, [sp, #32]
   13956:	9107      	str	r1, [sp, #28]
   13958:	e7ff      	b.n	1395a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x25a>
   1395a:	f249 4147 	movw	r1, #37959	; 0x9447
   1395e:	f2c0 0100 	movt	r1, #0
   13962:	980a      	ldr	r0, [sp, #40]	; 0x28
   13964:	f7f5 fda7 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13968:	9006      	str	r0, [sp, #24]
   1396a:	9105      	str	r1, [sp, #20]
   1396c:	e7ff      	b.n	1396e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26e>
   1396e:	f645 41a3 	movw	r1, #23715	; 0x5ca3
   13972:	f2c0 0101 	movt	r1, #1
   13976:	9809      	ldr	r0, [sp, #36]	; 0x24
   13978:	f7f5 fdb2 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1397c:	9004      	str	r0, [sp, #16]
   1397e:	9103      	str	r1, [sp, #12]
   13980:	e7ff      	b.n	13982 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x282>
   13982:	9808      	ldr	r0, [sp, #32]
   13984:	9027      	str	r0, [sp, #156]	; 0x9c
   13986:	9907      	ldr	r1, [sp, #28]
   13988:	9128      	str	r1, [sp, #160]	; 0xa0
   1398a:	9a06      	ldr	r2, [sp, #24]
   1398c:	9229      	str	r2, [sp, #164]	; 0xa4
   1398e:	9b05      	ldr	r3, [sp, #20]
   13990:	932a      	str	r3, [sp, #168]	; 0xa8
   13992:	f8dd c010 	ldr.w	ip, [sp, #16]
   13996:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
   1399a:	f8dd e00c 	ldr.w	lr, [sp, #12]
   1399e:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
   139a2:	466c      	mov	r4, sp
   139a4:	2503      	movs	r5, #3
   139a6:	6025      	str	r5, [r4, #0]
   139a8:	a821      	add	r0, sp, #132	; 0x84
   139aa:	ab27      	add	r3, sp, #156	; 0x9c
   139ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
   139ae:	462a      	mov	r2, r5
   139b0:	f7f5 f8f8 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   139b4:	e7ff      	b.n	139b6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2b6>
   139b6:	f644 4084 	movw	r0, #19588	; 0x4c84
   139ba:	f2c0 0002 	movt	r0, #2
   139be:	f001 fe82 	bl	156c6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   139c2:	9002      	str	r0, [sp, #8]
   139c4:	e7ff      	b.n	139c6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2c6>
   139c6:	a821      	add	r0, sp, #132	; 0x84
   139c8:	9902      	ldr	r1, [sp, #8]
   139ca:	f001 feb9 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   139ce:	defe      	udf	#254	; 0xfe
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   139d0:	f644 4040 	movw	r0, #19520	; 0x4c40
   139d4:	f2c0 0002 	movt	r0, #2
   139d8:	f644 4230 	movw	r2, #19504	; 0x4c30
   139dc:	f2c0 0202 	movt	r2, #2
   139e0:	2121      	movs	r1, #33	; 0x21
   139e2:	f001 fe77 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   139e6:	defe      	udf	#254	; 0xfe

000139e8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>:

/// Perform non-blocking SPI write in Mynewt OS.  Blocks until SPI write completes.
fn internal_spi_noblock_write(buf: &'static u8, len: i32, is_command: bool) -> MynewtResult<()> {
   139e8:	b5b0      	push	{r4, r5, r7, lr}
   139ea:	b0e8      	sub	sp, #416	; 0x1a0
   139ec:	4613      	mov	r3, r2
   139ee:	9058      	str	r0, [sp, #352]	; 0x160
   139f0:	9159      	str	r1, [sp, #356]	; 0x164
   139f2:	f88d 216b 	strb.w	r2, [sp, #363]	; 0x16b
    if len == 0 { return Ok(()); }
   139f6:	2900      	cmp	r1, #0
   139f8:	9121      	str	r1, [sp, #132]	; 0x84
   139fa:	9020      	str	r0, [sp, #128]	; 0x80
   139fc:	931f      	str	r3, [sp, #124]	; 0x7c
   139fe:	d004      	beq.n	13a0a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x22>
   13a00:	e7ff      	b.n	13a02 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a>
    assert!(len > 0, "bad spi len");
   13a02:	9821      	ldr	r0, [sp, #132]	; 0x84
   13a04:	2801      	cmp	r0, #1
   13a06:	db0d      	blt.n	13a24 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x3c>
   13a08:	e007      	b.n	13a1a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x32>
   13a0a:	2000      	movs	r0, #0
    if len == 0 { return Ok(()); }
   13a0c:	9022      	str	r0, [sp, #136]	; 0x88
   13a0e:	2001      	movs	r0, #1
   13a10:	9022      	str	r0, [sp, #136]	; 0x88
   13a12:	e7ff      	b.n	13a14 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
    }

    //  Set SS Pin to high to stop the transfer.
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
    Ok(())
}
   13a14:	9822      	ldr	r0, [sp, #136]	; 0x88
   13a16:	b068      	add	sp, #416	; 0x1a0
   13a18:	bdb0      	pop	{r4, r5, r7, pc}
        if is_command { 0 }
   13a1a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13a1c:	07c1      	lsls	r1, r0, #31
   13a1e:	2900      	cmp	r1, #0
   13a20:	d10f      	bne.n	13a42 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x5a>
   13a22:	e00b      	b.n	13a3c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x54>
    assert!(len > 0, "bad spi len");
   13a24:	f644 4094 	movw	r0, #19604	; 0x4c94
   13a28:	f2c0 0002 	movt	r0, #2
   13a2c:	f644 42a0 	movw	r2, #19616	; 0x4ca0
   13a30:	f2c0 0202 	movt	r2, #2
   13a34:	210b      	movs	r1, #11
   13a36:	f001 fe4d 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13a3a:	defe      	udf	#254	; 0xfe
   13a3c:	2001      	movs	r0, #1
        else { 1 }
   13a3e:	9023      	str	r0, [sp, #140]	; 0x8c
        if is_command { 0 }
   13a40:	e002      	b.n	13a48 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
   13a42:	2000      	movs	r0, #0
   13a44:	9023      	str	r0, [sp, #140]	; 0x8c
   13a46:	e7ff      	b.n	13a48 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
    unsafe { hal::hal_gpio_write(
   13a48:	9923      	ldr	r1, [sp, #140]	; 0x8c
   13a4a:	2012      	movs	r0, #18
   13a4c:	f003 fee8 	bl	17820 <hal_gpio_write>
   13a50:	e7ff      	b.n	13a52 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x6a>
   13a52:	2019      	movs	r0, #25
   13a54:	2100      	movs	r1, #0
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 0) };
   13a56:	f003 fee3 	bl	17820 <hal_gpio_write>
   13a5a:	e7ff      	b.n	13a5c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x74>
    if len == 1 {  //  If writing only 1 byte...
   13a5c:	9821      	ldr	r0, [sp, #132]	; 0x84
   13a5e:	2801      	cmp	r0, #1
   13a60:	d005      	beq.n	13a6e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x86>
   13a62:	e7ff      	b.n	13a64 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x7c>
            core::mem::transmute(buf), //  TX Buffer
   13a64:	9820      	ldr	r0, [sp, #128]	; 0x80
   13a66:	9061      	str	r0, [sp, #388]	; 0x184
   13a68:	9961      	ldr	r1, [sp, #388]	; 0x184
   13a6a:	911e      	str	r1, [sp, #120]	; 0x78
   13a6c:	e094      	b.n	13b98 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1b0>
            core::mem::transmute(buf), //  TX Buffer
   13a6e:	9820      	ldr	r0, [sp, #128]	; 0x80
   13a70:	905b      	str	r0, [sp, #364]	; 0x16c
   13a72:	995b      	ldr	r1, [sp, #364]	; 0x16c
   13a74:	911d      	str	r1, [sp, #116]	; 0x74
   13a76:	e7ff      	b.n	13a78 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x90>
   13a78:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx(
   13a7a:	901c      	str	r0, [sp, #112]	; 0x70
   13a7c:	991d      	ldr	r1, [sp, #116]	; 0x74
   13a7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   13a80:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13a82:	f004 fb7b 	bl	1817c <hal_spi_txrx>
   13a86:	9024      	str	r0, [sp, #144]	; 0x90
   13a88:	e7ff      	b.n	13a8a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xa2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13a8a:	f644 1088 	movw	r0, #18824	; 0x4988
   13a8e:	f2c0 0002 	movt	r0, #2
   13a92:	6800      	ldr	r0, [r0, #0]
   13a94:	a924      	add	r1, sp, #144	; 0x90
   13a96:	9125      	str	r1, [sp, #148]	; 0x94
   13a98:	9026      	str	r0, [sp, #152]	; 0x98
   13a9a:	9825      	ldr	r0, [sp, #148]	; 0x94
   13a9c:	905c      	str	r0, [sp, #368]	; 0x170
   13a9e:	9926      	ldr	r1, [sp, #152]	; 0x98
   13aa0:	915d      	str	r1, [sp, #372]	; 0x174
   13aa2:	6802      	ldr	r2, [r0, #0]
   13aa4:	680b      	ldr	r3, [r1, #0]
   13aa6:	429a      	cmp	r2, r3
   13aa8:	901b      	str	r0, [sp, #108]	; 0x6c
   13aaa:	911a      	str	r1, [sp, #104]	; 0x68
   13aac:	d101      	bne.n	13ab2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xca>
   13aae:	e7ff      	b.n	13ab0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xc8>
    if len == 1 {  //  If writing only 1 byte...
   13ab0:	e11f      	b.n	13cf2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13ab2:	f644 10e0 	movw	r0, #18912	; 0x49e0
   13ab6:	f2c0 0002 	movt	r0, #2
   13aba:	6801      	ldr	r1, [r0, #0]
   13abc:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13abe:	9036      	str	r0, [sp, #216]	; 0xd8
   13ac0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13ac2:	9237      	str	r2, [sp, #220]	; 0xdc
   13ac4:	f644 43b8 	movw	r3, #19640	; 0x4cb8
   13ac8:	f2c0 0302 	movt	r3, #2
   13acc:	681b      	ldr	r3, [r3, #0]
   13ace:	f644 2c00 	movw	ip, #18944	; 0x4a00
   13ad2:	f2c0 0c02 	movt	ip, #2
   13ad6:	f8dc c000 	ldr.w	ip, [ip]
   13ada:	46ee      	mov	lr, sp
   13adc:	2400      	movs	r4, #0
   13ade:	f8ce 4000 	str.w	r4, [lr]
   13ae2:	a838      	add	r0, sp, #224	; 0xe0
   13ae4:	2201      	movs	r2, #1
   13ae6:	9119      	str	r1, [sp, #100]	; 0x64
   13ae8:	4619      	mov	r1, r3
   13aea:	4663      	mov	r3, ip
   13aec:	f7f5 f85a 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13af0:	e7ff      	b.n	13af2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x10a>
   13af2:	a836      	add	r0, sp, #216	; 0xd8
   13af4:	9033      	str	r0, [sp, #204]	; 0xcc
   13af6:	a837      	add	r0, sp, #220	; 0xdc
   13af8:	9034      	str	r0, [sp, #208]	; 0xd0
   13afa:	a838      	add	r0, sp, #224	; 0xe0
   13afc:	9035      	str	r0, [sp, #212]	; 0xd4
   13afe:	9833      	ldr	r0, [sp, #204]	; 0xcc
   13b00:	905e      	str	r0, [sp, #376]	; 0x178
   13b02:	9934      	ldr	r1, [sp, #208]	; 0xd0
   13b04:	915f      	str	r1, [sp, #380]	; 0x17c
   13b06:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   13b08:	9260      	str	r2, [sp, #384]	; 0x180
   13b0a:	f249 33f3 	movw	r3, #37875	; 0x93f3
   13b0e:	f2c0 0300 	movt	r3, #0
   13b12:	9118      	str	r1, [sp, #96]	; 0x60
   13b14:	4619      	mov	r1, r3
   13b16:	9217      	str	r2, [sp, #92]	; 0x5c
   13b18:	f7f5 fca3 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13b1c:	9016      	str	r0, [sp, #88]	; 0x58
   13b1e:	9115      	str	r1, [sp, #84]	; 0x54
   13b20:	e7ff      	b.n	13b22 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x13a>
   13b22:	f249 31f3 	movw	r1, #37875	; 0x93f3
   13b26:	f2c0 0100 	movt	r1, #0
   13b2a:	9818      	ldr	r0, [sp, #96]	; 0x60
   13b2c:	f7f5 fc99 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13b30:	9014      	str	r0, [sp, #80]	; 0x50
   13b32:	9113      	str	r1, [sp, #76]	; 0x4c
   13b34:	e7ff      	b.n	13b36 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x14e>
   13b36:	f645 41a3 	movw	r1, #23715	; 0x5ca3
   13b3a:	f2c0 0101 	movt	r1, #1
   13b3e:	9817      	ldr	r0, [sp, #92]	; 0x5c
   13b40:	f7f5 fcce 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13b44:	9012      	str	r0, [sp, #72]	; 0x48
   13b46:	9111      	str	r1, [sp, #68]	; 0x44
   13b48:	e7ff      	b.n	13b4a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x162>
   13b4a:	9816      	ldr	r0, [sp, #88]	; 0x58
   13b4c:	902d      	str	r0, [sp, #180]	; 0xb4
   13b4e:	9915      	ldr	r1, [sp, #84]	; 0x54
   13b50:	912e      	str	r1, [sp, #184]	; 0xb8
   13b52:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13b54:	922f      	str	r2, [sp, #188]	; 0xbc
   13b56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13b58:	9330      	str	r3, [sp, #192]	; 0xc0
   13b5a:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   13b5e:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
   13b62:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
   13b66:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
   13b6a:	466c      	mov	r4, sp
   13b6c:	2503      	movs	r5, #3
   13b6e:	6025      	str	r5, [r4, #0]
   13b70:	a827      	add	r0, sp, #156	; 0x9c
   13b72:	ab2d      	add	r3, sp, #180	; 0xb4
   13b74:	9919      	ldr	r1, [sp, #100]	; 0x64
   13b76:	462a      	mov	r2, r5
   13b78:	f7f5 f814 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13b7c:	e7ff      	b.n	13b7e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x196>
   13b7e:	f644 40bc 	movw	r0, #19644	; 0x4cbc
   13b82:	f2c0 0002 	movt	r0, #2
   13b86:	f001 fd9e 	bl	156c6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13b8a:	9010      	str	r0, [sp, #64]	; 0x40
   13b8c:	e7ff      	b.n	13b8e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a6>
   13b8e:	a827      	add	r0, sp, #156	; 0x9c
   13b90:	9910      	ldr	r1, [sp, #64]	; 0x40
   13b92:	f001 fdd5 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13b96:	defe      	udf	#254	; 0xfe
   13b98:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx_noblock(
   13b9a:	900f      	str	r0, [sp, #60]	; 0x3c
   13b9c:	991e      	ldr	r1, [sp, #120]	; 0x78
   13b9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   13ba0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13ba2:	f004 fb41 	bl	18228 <hal_spi_txrx_noblock>
   13ba6:	903e      	str	r0, [sp, #248]	; 0xf8
   13ba8:	e7ff      	b.n	13baa <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1c2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13baa:	f644 1088 	movw	r0, #18824	; 0x4988
   13bae:	f2c0 0002 	movt	r0, #2
   13bb2:	6800      	ldr	r0, [r0, #0]
   13bb4:	a93e      	add	r1, sp, #248	; 0xf8
   13bb6:	913f      	str	r1, [sp, #252]	; 0xfc
   13bb8:	9040      	str	r0, [sp, #256]	; 0x100
   13bba:	983f      	ldr	r0, [sp, #252]	; 0xfc
   13bbc:	9062      	str	r0, [sp, #392]	; 0x188
   13bbe:	9940      	ldr	r1, [sp, #256]	; 0x100
   13bc0:	9163      	str	r1, [sp, #396]	; 0x18c
   13bc2:	6802      	ldr	r2, [r0, #0]
   13bc4:	680b      	ldr	r3, [r1, #0]
   13bc6:	429a      	cmp	r2, r3
   13bc8:	900e      	str	r0, [sp, #56]	; 0x38
   13bca:	910d      	str	r1, [sp, #52]	; 0x34
   13bcc:	d10c      	bne.n	13be8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x200>
   13bce:	e7ff      	b.n	13bd0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1e8>
   13bd0:	f247 5030 	movw	r0, #30000	; 0x7530
        let timeout = 30_000;
   13bd4:	9067      	str	r0, [sp, #412]	; 0x19c
   13bd6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13bda:	fba0 0101 	umull	r0, r1, r0, r1
   13bde:	2900      	cmp	r1, #0
   13be0:	900c      	str	r0, [sp, #48]	; 0x30
   13be2:	f040 8090 	bne.w	13d06 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x31e>
   13be6:	e072      	b.n	13cce <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2e6>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13be8:	f644 10e0 	movw	r0, #18912	; 0x49e0
   13bec:	f2c0 0002 	movt	r0, #2
   13bf0:	6801      	ldr	r1, [r0, #0]
   13bf2:	980e      	ldr	r0, [sp, #56]	; 0x38
   13bf4:	9050      	str	r0, [sp, #320]	; 0x140
   13bf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13bf8:	9251      	str	r2, [sp, #324]	; 0x144
   13bfa:	f644 43b8 	movw	r3, #19640	; 0x4cb8
   13bfe:	f2c0 0302 	movt	r3, #2
   13c02:	681b      	ldr	r3, [r3, #0]
   13c04:	f644 2c00 	movw	ip, #18944	; 0x4a00
   13c08:	f2c0 0c02 	movt	ip, #2
   13c0c:	f8dc c000 	ldr.w	ip, [ip]
   13c10:	46ee      	mov	lr, sp
   13c12:	2400      	movs	r4, #0
   13c14:	f8ce 4000 	str.w	r4, [lr]
   13c18:	a852      	add	r0, sp, #328	; 0x148
   13c1a:	2201      	movs	r2, #1
   13c1c:	910b      	str	r1, [sp, #44]	; 0x2c
   13c1e:	4619      	mov	r1, r3
   13c20:	4663      	mov	r3, ip
   13c22:	f7f4 ffbf 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13c26:	e7ff      	b.n	13c28 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x240>
   13c28:	a850      	add	r0, sp, #320	; 0x140
   13c2a:	904d      	str	r0, [sp, #308]	; 0x134
   13c2c:	a851      	add	r0, sp, #324	; 0x144
   13c2e:	904e      	str	r0, [sp, #312]	; 0x138
   13c30:	a852      	add	r0, sp, #328	; 0x148
   13c32:	904f      	str	r0, [sp, #316]	; 0x13c
   13c34:	984d      	ldr	r0, [sp, #308]	; 0x134
   13c36:	9064      	str	r0, [sp, #400]	; 0x190
   13c38:	994e      	ldr	r1, [sp, #312]	; 0x138
   13c3a:	9165      	str	r1, [sp, #404]	; 0x194
   13c3c:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
   13c3e:	9266      	str	r2, [sp, #408]	; 0x198
   13c40:	f249 33f3 	movw	r3, #37875	; 0x93f3
   13c44:	f2c0 0300 	movt	r3, #0
   13c48:	910a      	str	r1, [sp, #40]	; 0x28
   13c4a:	4619      	mov	r1, r3
   13c4c:	9209      	str	r2, [sp, #36]	; 0x24
   13c4e:	f7f5 fc08 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13c52:	9008      	str	r0, [sp, #32]
   13c54:	9107      	str	r1, [sp, #28]
   13c56:	e7ff      	b.n	13c58 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x270>
   13c58:	f249 31f3 	movw	r1, #37875	; 0x93f3
   13c5c:	f2c0 0100 	movt	r1, #0
   13c60:	980a      	ldr	r0, [sp, #40]	; 0x28
   13c62:	f7f5 fbfe 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13c66:	9006      	str	r0, [sp, #24]
   13c68:	9105      	str	r1, [sp, #20]
   13c6a:	e7ff      	b.n	13c6c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x284>
   13c6c:	f645 41a3 	movw	r1, #23715	; 0x5ca3
   13c70:	f2c0 0101 	movt	r1, #1
   13c74:	9809      	ldr	r0, [sp, #36]	; 0x24
   13c76:	f7f5 fc33 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13c7a:	9004      	str	r0, [sp, #16]
   13c7c:	9103      	str	r1, [sp, #12]
   13c7e:	e7ff      	b.n	13c80 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x298>
   13c80:	9808      	ldr	r0, [sp, #32]
   13c82:	9047      	str	r0, [sp, #284]	; 0x11c
   13c84:	9907      	ldr	r1, [sp, #28]
   13c86:	9148      	str	r1, [sp, #288]	; 0x120
   13c88:	9a06      	ldr	r2, [sp, #24]
   13c8a:	9249      	str	r2, [sp, #292]	; 0x124
   13c8c:	9b05      	ldr	r3, [sp, #20]
   13c8e:	934a      	str	r3, [sp, #296]	; 0x128
   13c90:	f8dd c010 	ldr.w	ip, [sp, #16]
   13c94:	f8cd c12c 	str.w	ip, [sp, #300]	; 0x12c
   13c98:	f8dd e00c 	ldr.w	lr, [sp, #12]
   13c9c:	f8cd e130 	str.w	lr, [sp, #304]	; 0x130
   13ca0:	466c      	mov	r4, sp
   13ca2:	2503      	movs	r5, #3
   13ca4:	6025      	str	r5, [r4, #0]
   13ca6:	a841      	add	r0, sp, #260	; 0x104
   13ca8:	ab47      	add	r3, sp, #284	; 0x11c
   13caa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13cac:	462a      	mov	r2, r5
   13cae:	f7f4 ff79 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13cb2:	e7ff      	b.n	13cb4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2cc>
   13cb4:	f644 40cc 	movw	r0, #19660	; 0x4ccc
   13cb8:	f2c0 0002 	movt	r0, #2
   13cbc:	f001 fd03 	bl	156c6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13cc0:	9002      	str	r0, [sp, #8]
   13cc2:	e7ff      	b.n	13cc4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2dc>
   13cc4:	a841      	add	r0, sp, #260	; 0x104
   13cc6:	9902      	ldr	r1, [sp, #8]
   13cc8:	f001 fd3a 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13ccc:	defe      	udf	#254	; 0xfe
   13cce:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13cd2:	f2c1 0062 	movt	r0, #4194	; 0x1062
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13cd6:	990c      	ldr	r1, [sp, #48]	; 0x30
   13cd8:	fba1 0200 	umull	r0, r2, r1, r0
   13cdc:	0991      	lsrs	r1, r2, #6
   13cde:	f646 227c 	movw	r2, #27260	; 0x6a7c
   13ce2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13ce6:	9001      	str	r0, [sp, #4]
   13ce8:	4610      	mov	r0, r2
   13cea:	f005 fc69 	bl	195c0 <os_sem_pend>
   13cee:	e7ff      	b.n	13cf0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x308>
    if len == 1 {  //  If writing only 1 byte...
   13cf0:	e7ff      	b.n	13cf2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
   13cf2:	2019      	movs	r0, #25
   13cf4:	2101      	movs	r1, #1
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
   13cf6:	f003 fd93 	bl	17820 <hal_gpio_write>
   13cfa:	e7ff      	b.n	13cfc <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x314>
   13cfc:	2000      	movs	r0, #0
    Ok(())
   13cfe:	9022      	str	r0, [sp, #136]	; 0x88
   13d00:	2001      	movs	r0, #1
   13d02:	9022      	str	r0, [sp, #136]	; 0x88
}
   13d04:	e686      	b.n	13a14 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13d06:	f644 30e0 	movw	r0, #19424	; 0x4be0
   13d0a:	f2c0 0002 	movt	r0, #2
   13d0e:	f644 42dc 	movw	r2, #19676	; 0x4cdc
   13d12:	f2c0 0202 	movt	r2, #2
   13d16:	2121      	movs	r1, #33	; 0x21
   13d18:	f001 fcdc 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13d1c:	defe      	udf	#254	; 0xfe

00013d1e <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E>:

/// Called by interrupt handler after Non-blocking SPI transfer has completed
extern "C" fn spi_noblock_handler(_arg: Ptr, _len: i32) {
   13d1e:	b5b0      	push	{r4, r5, r7, lr}
   13d20:	b0ae      	sub	sp, #184	; 0xb8
   13d22:	9027      	str	r0, [sp, #156]	; 0x9c
   13d24:	9128      	str	r1, [sp, #160]	; 0xa0
    //  Signal to internal_spi_noblock_write() that SPI request has been completed.
    let rc = unsafe { os::os_sem_release(&mut SPI_SEM) };
   13d26:	f646 207c 	movw	r0, #27260	; 0x6a7c
   13d2a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13d2e:	f005 fc15 	bl	1955c <os_sem_release>
   13d32:	900d      	str	r0, [sp, #52]	; 0x34
   13d34:	e7ff      	b.n	13d36 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x18>
    assert_eq!(rc, 0, "sem fail");
   13d36:	f644 1088 	movw	r0, #18824	; 0x4988
   13d3a:	f2c0 0002 	movt	r0, #2
   13d3e:	6800      	ldr	r0, [r0, #0]
   13d40:	a90d      	add	r1, sp, #52	; 0x34
   13d42:	910e      	str	r1, [sp, #56]	; 0x38
   13d44:	900f      	str	r0, [sp, #60]	; 0x3c
   13d46:	980e      	ldr	r0, [sp, #56]	; 0x38
   13d48:	9029      	str	r0, [sp, #164]	; 0xa4
   13d4a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13d4c:	912a      	str	r1, [sp, #168]	; 0xa8
   13d4e:	6802      	ldr	r2, [r0, #0]
   13d50:	680b      	ldr	r3, [r1, #0]
   13d52:	429a      	cmp	r2, r3
   13d54:	900c      	str	r0, [sp, #48]	; 0x30
   13d56:	910b      	str	r1, [sp, #44]	; 0x2c
   13d58:	d102      	bne.n	13d60 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x42>
   13d5a:	e7ff      	b.n	13d5c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x3e>
}
   13d5c:	b02e      	add	sp, #184	; 0xb8
   13d5e:	bdb0      	pop	{r4, r5, r7, pc}
    assert_eq!(rc, 0, "sem fail");
   13d60:	f644 10e0 	movw	r0, #18912	; 0x49e0
   13d64:	f2c0 0002 	movt	r0, #2
   13d68:	6801      	ldr	r1, [r0, #0]
   13d6a:	980c      	ldr	r0, [sp, #48]	; 0x30
   13d6c:	901f      	str	r0, [sp, #124]	; 0x7c
   13d6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13d70:	9220      	str	r2, [sp, #128]	; 0x80
   13d72:	f644 23f8 	movw	r3, #19192	; 0x4af8
   13d76:	f2c0 0302 	movt	r3, #2
   13d7a:	681b      	ldr	r3, [r3, #0]
   13d7c:	f644 2c00 	movw	ip, #18944	; 0x4a00
   13d80:	f2c0 0c02 	movt	ip, #2
   13d84:	f8dc c000 	ldr.w	ip, [ip]
   13d88:	46ee      	mov	lr, sp
   13d8a:	2400      	movs	r4, #0
   13d8c:	f8ce 4000 	str.w	r4, [lr]
   13d90:	a821      	add	r0, sp, #132	; 0x84
   13d92:	2201      	movs	r2, #1
   13d94:	910a      	str	r1, [sp, #40]	; 0x28
   13d96:	4619      	mov	r1, r3
   13d98:	4663      	mov	r3, ip
   13d9a:	f7f4 ff03 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13d9e:	e7ff      	b.n	13da0 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x82>
   13da0:	a81f      	add	r0, sp, #124	; 0x7c
   13da2:	901c      	str	r0, [sp, #112]	; 0x70
   13da4:	a820      	add	r0, sp, #128	; 0x80
   13da6:	901d      	str	r0, [sp, #116]	; 0x74
   13da8:	a821      	add	r0, sp, #132	; 0x84
   13daa:	901e      	str	r0, [sp, #120]	; 0x78
   13dac:	981c      	ldr	r0, [sp, #112]	; 0x70
   13dae:	902b      	str	r0, [sp, #172]	; 0xac
   13db0:	991d      	ldr	r1, [sp, #116]	; 0x74
   13db2:	912c      	str	r1, [sp, #176]	; 0xb0
   13db4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13db6:	922d      	str	r2, [sp, #180]	; 0xb4
   13db8:	f249 4347 	movw	r3, #37959	; 0x9447
   13dbc:	f2c0 0300 	movt	r3, #0
   13dc0:	9109      	str	r1, [sp, #36]	; 0x24
   13dc2:	4619      	mov	r1, r3
   13dc4:	9208      	str	r2, [sp, #32]
   13dc6:	f7f5 fb76 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13dca:	9007      	str	r0, [sp, #28]
   13dcc:	9106      	str	r1, [sp, #24]
   13dce:	e7ff      	b.n	13dd0 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xb2>
   13dd0:	f249 4147 	movw	r1, #37959	; 0x9447
   13dd4:	f2c0 0100 	movt	r1, #0
   13dd8:	9809      	ldr	r0, [sp, #36]	; 0x24
   13dda:	f7f5 fb6c 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13dde:	9005      	str	r0, [sp, #20]
   13de0:	9104      	str	r1, [sp, #16]
   13de2:	e7ff      	b.n	13de4 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xc6>
   13de4:	f645 41a3 	movw	r1, #23715	; 0x5ca3
   13de8:	f2c0 0101 	movt	r1, #1
   13dec:	9808      	ldr	r0, [sp, #32]
   13dee:	f7f5 fb77 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13df2:	9003      	str	r0, [sp, #12]
   13df4:	9102      	str	r1, [sp, #8]
   13df6:	e7ff      	b.n	13df8 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xda>
   13df8:	9807      	ldr	r0, [sp, #28]
   13dfa:	9016      	str	r0, [sp, #88]	; 0x58
   13dfc:	9906      	ldr	r1, [sp, #24]
   13dfe:	9117      	str	r1, [sp, #92]	; 0x5c
   13e00:	9a05      	ldr	r2, [sp, #20]
   13e02:	9218      	str	r2, [sp, #96]	; 0x60
   13e04:	9b04      	ldr	r3, [sp, #16]
   13e06:	9319      	str	r3, [sp, #100]	; 0x64
   13e08:	f8dd c00c 	ldr.w	ip, [sp, #12]
   13e0c:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
   13e10:	f8dd e008 	ldr.w	lr, [sp, #8]
   13e14:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
   13e18:	466c      	mov	r4, sp
   13e1a:	2503      	movs	r5, #3
   13e1c:	6025      	str	r5, [r4, #0]
   13e1e:	a810      	add	r0, sp, #64	; 0x40
   13e20:	ab16      	add	r3, sp, #88	; 0x58
   13e22:	990a      	ldr	r1, [sp, #40]	; 0x28
   13e24:	462a      	mov	r2, r5
   13e26:	f7f4 febd 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13e2a:	e7ff      	b.n	13e2c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x10e>
   13e2c:	f644 40ec 	movw	r0, #19692	; 0x4cec
   13e30:	f2c0 0002 	movt	r0, #2
   13e34:	f001 fc47 	bl	156c6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13e38:	9001      	str	r0, [sp, #4]
   13e3a:	e7ff      	b.n	13e3c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x11e>
   13e3c:	a810      	add	r0, sp, #64	; 0x40
   13e3e:	9901      	ldr	r1, [sp, #4]
   13e40:	f001 fc7e 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13e44:	defe      	udf	#254	; 0xfe

00013e46 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>:

/// Sleep for the specified number of milliseconds
fn delay_ms(ms: u8) {
   13e46:	b580      	push	{r7, lr}
   13e48:	b084      	sub	sp, #16
   13e4a:	4601      	mov	r1, r0
   13e4c:	f88d 000b 	strb.w	r0, [sp, #11]
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   13e50:	b2c0      	uxtb	r0, r0
   13e52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13e56:	fba0 0202 	umull	r0, r2, r0, r2
   13e5a:	2a00      	cmp	r2, #0
   13e5c:	9001      	str	r0, [sp, #4]
   13e5e:	d110      	bne.n	13e82 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x3c>
   13e60:	e7ff      	b.n	13e62 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x1c>
   13e62:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13e66:	f2c1 0062 	movt	r0, #4194	; 0x1062
   13e6a:	9901      	ldr	r1, [sp, #4]
   13e6c:	fba1 0200 	umull	r0, r2, r1, r0
   13e70:	0992      	lsrs	r2, r2, #6
   13e72:	9203      	str	r2, [sp, #12]
    unsafe { os::os_time_delay(delay_ticks) };
   13e74:	9000      	str	r0, [sp, #0]
   13e76:	4610      	mov	r0, r2
   13e78:	f005 fcf0 	bl	1985c <os_time_delay>
   13e7c:	e7ff      	b.n	13e7e <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x38>
}
   13e7e:	b004      	add	sp, #16
   13e80:	bd80      	pop	{r7, pc}
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   13e82:	f644 30e0 	movw	r0, #19424	; 0x4be0
   13e86:	f2c0 0002 	movt	r0, #2
   13e8a:	f644 42fc 	movw	r2, #19708	; 0x4cfc
   13e8e:	f2c0 0202 	movt	r2, #2
   13e92:	2121      	movs	r1, #33	; 0x21
   13e94:	f001 fc1e 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13e98:	defe      	udf	#254	; 0xfe

00013e9a <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>:
};

/// Rust Embedded HAL interface for Mynewt SPI
impl SPI {
    /// Create a new SPI port
    pub fn new() -> Self {
   13e9a:	b082      	sub	sp, #8
   13e9c:	2000      	movs	r0, #0
        SPI {
   13e9e:	9000      	str	r0, [sp, #0]
   13ea0:	9001      	str	r0, [sp, #4]
            spi_num: 0,
            cs_pin:  0,
        }
    }
   13ea2:	9800      	ldr	r0, [sp, #0]
   13ea4:	9901      	ldr	r1, [sp, #4]
   13ea6:	b002      	add	sp, #8
   13ea8:	4770      	bx	lr

00013eaa <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>:

    /// Initiaise the SPI port
    pub fn init(&mut self, spi_num: i32, cs_pin: i32, spi_settings: *mut hal::hal_spi_settings) 
   13eaa:	b5b0      	push	{r4, r5, r7, lr}
   13eac:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
   13eb0:	9077      	str	r0, [sp, #476]	; 0x1dc
   13eb2:	9178      	str	r1, [sp, #480]	; 0x1e0
   13eb4:	9279      	str	r2, [sp, #484]	; 0x1e4
   13eb6:	937a      	str	r3, [sp, #488]	; 0x1e8
        -> MynewtResult<()> {
        let rc = unsafe { hal::hal_spi_config(spi_num, spi_settings) };
   13eb8:	9028      	str	r0, [sp, #160]	; 0xa0
   13eba:	4608      	mov	r0, r1
   13ebc:	9127      	str	r1, [sp, #156]	; 0x9c
   13ebe:	4619      	mov	r1, r3
   13ec0:	9226      	str	r2, [sp, #152]	; 0x98
   13ec2:	f004 f89f 	bl	18004 <hal_spi_config>
   13ec6:	9029      	str	r0, [sp, #164]	; 0xa4
   13ec8:	e7ff      	b.n	13eca <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x20>
        assert_eq!(rc, 0, "spi config fail");
   13eca:	f644 500c 	movw	r0, #19724	; 0x4d0c
   13ece:	f2c0 0002 	movt	r0, #2
   13ed2:	6800      	ldr	r0, [r0, #0]
   13ed4:	a929      	add	r1, sp, #164	; 0xa4
   13ed6:	912a      	str	r1, [sp, #168]	; 0xa8
   13ed8:	902b      	str	r0, [sp, #172]	; 0xac
   13eda:	982a      	ldr	r0, [sp, #168]	; 0xa8
   13edc:	907b      	str	r0, [sp, #492]	; 0x1ec
   13ede:	992b      	ldr	r1, [sp, #172]	; 0xac
   13ee0:	917c      	str	r1, [sp, #496]	; 0x1f0
   13ee2:	6802      	ldr	r2, [r0, #0]
   13ee4:	680b      	ldr	r3, [r1, #0]
   13ee6:	429a      	cmp	r2, r3
   13ee8:	9025      	str	r0, [sp, #148]	; 0x94
   13eea:	9124      	str	r1, [sp, #144]	; 0x90
   13eec:	d105      	bne.n	13efa <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x50>
   13eee:	e7ff      	b.n	13ef0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x46>

        let rc = unsafe { hal::hal_spi_enable(spi_num) };
   13ef0:	9827      	ldr	r0, [sp, #156]	; 0x9c
   13ef2:	f004 f8a3 	bl	1803c <hal_spi_enable>
   13ef6:	9043      	str	r0, [sp, #268]	; 0x10c
   13ef8:	e072      	b.n	13fe0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x136>
        assert_eq!(rc, 0, "spi config fail");
   13efa:	f644 5064 	movw	r0, #19812	; 0x4d64
   13efe:	f2c0 0002 	movt	r0, #2
   13f02:	6801      	ldr	r1, [r0, #0]
   13f04:	9825      	ldr	r0, [sp, #148]	; 0x94
   13f06:	903b      	str	r0, [sp, #236]	; 0xec
   13f08:	9a24      	ldr	r2, [sp, #144]	; 0x90
   13f0a:	923c      	str	r2, [sp, #240]	; 0xf0
   13f0c:	f644 5380 	movw	r3, #19840	; 0x4d80
   13f10:	f2c0 0302 	movt	r3, #2
   13f14:	681b      	ldr	r3, [r3, #0]
   13f16:	f644 5c84 	movw	ip, #19844	; 0x4d84
   13f1a:	f2c0 0c02 	movt	ip, #2
   13f1e:	f8dc c000 	ldr.w	ip, [ip]
   13f22:	46ee      	mov	lr, sp
   13f24:	2400      	movs	r4, #0
   13f26:	f8ce 4000 	str.w	r4, [lr]
   13f2a:	a83d      	add	r0, sp, #244	; 0xf4
   13f2c:	2201      	movs	r2, #1
   13f2e:	9123      	str	r1, [sp, #140]	; 0x8c
   13f30:	4619      	mov	r1, r3
   13f32:	4663      	mov	r3, ip
   13f34:	f7f4 fe36 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13f38:	e7ff      	b.n	13f3a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x90>
   13f3a:	a83b      	add	r0, sp, #236	; 0xec
   13f3c:	9038      	str	r0, [sp, #224]	; 0xe0
   13f3e:	a83c      	add	r0, sp, #240	; 0xf0
   13f40:	9039      	str	r0, [sp, #228]	; 0xe4
   13f42:	a83d      	add	r0, sp, #244	; 0xf4
   13f44:	903a      	str	r0, [sp, #232]	; 0xe8
   13f46:	9838      	ldr	r0, [sp, #224]	; 0xe0
   13f48:	907d      	str	r0, [sp, #500]	; 0x1f4
   13f4a:	9939      	ldr	r1, [sp, #228]	; 0xe4
   13f4c:	917e      	str	r1, [sp, #504]	; 0x1f8
   13f4e:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   13f50:	927f      	str	r2, [sp, #508]	; 0x1fc
   13f52:	f249 33f3 	movw	r3, #37875	; 0x93f3
   13f56:	f2c0 0300 	movt	r3, #0
   13f5a:	9122      	str	r1, [sp, #136]	; 0x88
   13f5c:	4619      	mov	r1, r3
   13f5e:	9221      	str	r2, [sp, #132]	; 0x84
   13f60:	f7f5 fa7f 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13f64:	9020      	str	r0, [sp, #128]	; 0x80
   13f66:	911f      	str	r1, [sp, #124]	; 0x7c
   13f68:	e7ff      	b.n	13f6a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xc0>
   13f6a:	f249 31f3 	movw	r1, #37875	; 0x93f3
   13f6e:	f2c0 0100 	movt	r1, #0
   13f72:	9822      	ldr	r0, [sp, #136]	; 0x88
   13f74:	f7f5 fa75 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13f78:	901e      	str	r0, [sp, #120]	; 0x78
   13f7a:	911d      	str	r1, [sp, #116]	; 0x74
   13f7c:	e7ff      	b.n	13f7e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xd4>
   13f7e:	f645 41a3 	movw	r1, #23715	; 0x5ca3
   13f82:	f2c0 0101 	movt	r1, #1
   13f86:	9821      	ldr	r0, [sp, #132]	; 0x84
   13f88:	f7f5 faaa 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13f8c:	901c      	str	r0, [sp, #112]	; 0x70
   13f8e:	911b      	str	r1, [sp, #108]	; 0x6c
   13f90:	e7ff      	b.n	13f92 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xe8>
   13f92:	9820      	ldr	r0, [sp, #128]	; 0x80
   13f94:	9032      	str	r0, [sp, #200]	; 0xc8
   13f96:	991f      	ldr	r1, [sp, #124]	; 0x7c
   13f98:	9133      	str	r1, [sp, #204]	; 0xcc
   13f9a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13f9c:	9234      	str	r2, [sp, #208]	; 0xd0
   13f9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   13fa0:	9335      	str	r3, [sp, #212]	; 0xd4
   13fa2:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
   13fa6:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
   13faa:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
   13fae:	f8cd e0dc 	str.w	lr, [sp, #220]	; 0xdc
   13fb2:	466c      	mov	r4, sp
   13fb4:	2503      	movs	r5, #3
   13fb6:	6025      	str	r5, [r4, #0]
   13fb8:	a82c      	add	r0, sp, #176	; 0xb0
   13fba:	ab32      	add	r3, sp, #200	; 0xc8
   13fbc:	9923      	ldr	r1, [sp, #140]	; 0x8c
   13fbe:	462a      	mov	r2, r5
   13fc0:	f7f4 fdf0 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13fc4:	e7ff      	b.n	13fc6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x11c>
   13fc6:	f644 50a0 	movw	r0, #19872	; 0x4da0
   13fca:	f2c0 0002 	movt	r0, #2
   13fce:	f001 fb7a 	bl	156c6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13fd2:	901a      	str	r0, [sp, #104]	; 0x68
   13fd4:	e7ff      	b.n	13fd6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x12c>
   13fd6:	a82c      	add	r0, sp, #176	; 0xb0
   13fd8:	991a      	ldr	r1, [sp, #104]	; 0x68
   13fda:	f001 fbb1 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13fde:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi enable fail");
   13fe0:	f644 500c 	movw	r0, #19724	; 0x4d0c
   13fe4:	f2c0 0002 	movt	r0, #2
   13fe8:	6800      	ldr	r0, [r0, #0]
   13fea:	a943      	add	r1, sp, #268	; 0x10c
   13fec:	9144      	str	r1, [sp, #272]	; 0x110
   13fee:	9045      	str	r0, [sp, #276]	; 0x114
   13ff0:	9844      	ldr	r0, [sp, #272]	; 0x110
   13ff2:	9080      	str	r0, [sp, #512]	; 0x200
   13ff4:	9945      	ldr	r1, [sp, #276]	; 0x114
   13ff6:	9181      	str	r1, [sp, #516]	; 0x204
   13ff8:	6802      	ldr	r2, [r0, #0]
   13ffa:	680b      	ldr	r3, [r1, #0]
   13ffc:	429a      	cmp	r2, r3
   13ffe:	9019      	str	r0, [sp, #100]	; 0x64
   14000:	9118      	str	r1, [sp, #96]	; 0x60
   14002:	d106      	bne.n	14012 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x168>
   14004:	e7ff      	b.n	14006 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x15c>
   14006:	2101      	movs	r1, #1

        let rc = unsafe { hal::hal_gpio_init_out(cs_pin, 1) };
   14008:	9826      	ldr	r0, [sp, #152]	; 0x98
   1400a:	f003 fbed 	bl	177e8 <hal_gpio_init_out>
   1400e:	905d      	str	r0, [sp, #372]	; 0x174
   14010:	e072      	b.n	140f8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x24e>
        assert_eq!(rc, 0, "spi enable fail");
   14012:	f644 5064 	movw	r0, #19812	; 0x4d64
   14016:	f2c0 0002 	movt	r0, #2
   1401a:	6801      	ldr	r1, [r0, #0]
   1401c:	9819      	ldr	r0, [sp, #100]	; 0x64
   1401e:	9055      	str	r0, [sp, #340]	; 0x154
   14020:	9a18      	ldr	r2, [sp, #96]	; 0x60
   14022:	9256      	str	r2, [sp, #344]	; 0x158
   14024:	f644 53c8 	movw	r3, #19912	; 0x4dc8
   14028:	f2c0 0302 	movt	r3, #2
   1402c:	681b      	ldr	r3, [r3, #0]
   1402e:	f644 5c84 	movw	ip, #19844	; 0x4d84
   14032:	f2c0 0c02 	movt	ip, #2
   14036:	f8dc c000 	ldr.w	ip, [ip]
   1403a:	46ee      	mov	lr, sp
   1403c:	2400      	movs	r4, #0
   1403e:	f8ce 4000 	str.w	r4, [lr]
   14042:	a857      	add	r0, sp, #348	; 0x15c
   14044:	2201      	movs	r2, #1
   14046:	9117      	str	r1, [sp, #92]	; 0x5c
   14048:	4619      	mov	r1, r3
   1404a:	4663      	mov	r3, ip
   1404c:	f7f4 fdaa 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14050:	e7ff      	b.n	14052 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1a8>
   14052:	a855      	add	r0, sp, #340	; 0x154
   14054:	9052      	str	r0, [sp, #328]	; 0x148
   14056:	a856      	add	r0, sp, #344	; 0x158
   14058:	9053      	str	r0, [sp, #332]	; 0x14c
   1405a:	a857      	add	r0, sp, #348	; 0x15c
   1405c:	9054      	str	r0, [sp, #336]	; 0x150
   1405e:	9852      	ldr	r0, [sp, #328]	; 0x148
   14060:	9082      	str	r0, [sp, #520]	; 0x208
   14062:	9953      	ldr	r1, [sp, #332]	; 0x14c
   14064:	9183      	str	r1, [sp, #524]	; 0x20c
   14066:	9a54      	ldr	r2, [sp, #336]	; 0x150
   14068:	9284      	str	r2, [sp, #528]	; 0x210
   1406a:	f249 33f3 	movw	r3, #37875	; 0x93f3
   1406e:	f2c0 0300 	movt	r3, #0
   14072:	9116      	str	r1, [sp, #88]	; 0x58
   14074:	4619      	mov	r1, r3
   14076:	9215      	str	r2, [sp, #84]	; 0x54
   14078:	f7f5 f9f3 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1407c:	9014      	str	r0, [sp, #80]	; 0x50
   1407e:	9113      	str	r1, [sp, #76]	; 0x4c
   14080:	e7ff      	b.n	14082 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1d8>
   14082:	f249 31f3 	movw	r1, #37875	; 0x93f3
   14086:	f2c0 0100 	movt	r1, #0
   1408a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1408c:	f7f5 f9e9 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14090:	9012      	str	r0, [sp, #72]	; 0x48
   14092:	9111      	str	r1, [sp, #68]	; 0x44
   14094:	e7ff      	b.n	14096 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1ec>
   14096:	f645 41a3 	movw	r1, #23715	; 0x5ca3
   1409a:	f2c0 0101 	movt	r1, #1
   1409e:	9815      	ldr	r0, [sp, #84]	; 0x54
   140a0:	f7f5 fa1e 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   140a4:	9010      	str	r0, [sp, #64]	; 0x40
   140a6:	910f      	str	r1, [sp, #60]	; 0x3c
   140a8:	e7ff      	b.n	140aa <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x200>
   140aa:	9814      	ldr	r0, [sp, #80]	; 0x50
   140ac:	904c      	str	r0, [sp, #304]	; 0x130
   140ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
   140b0:	914d      	str	r1, [sp, #308]	; 0x134
   140b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   140b4:	924e      	str	r2, [sp, #312]	; 0x138
   140b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   140b8:	934f      	str	r3, [sp, #316]	; 0x13c
   140ba:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   140be:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
   140c2:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   140c6:	f8cd e144 	str.w	lr, [sp, #324]	; 0x144
   140ca:	466c      	mov	r4, sp
   140cc:	2503      	movs	r5, #3
   140ce:	6025      	str	r5, [r4, #0]
   140d0:	a846      	add	r0, sp, #280	; 0x118
   140d2:	ab4c      	add	r3, sp, #304	; 0x130
   140d4:	9917      	ldr	r1, [sp, #92]	; 0x5c
   140d6:	462a      	mov	r2, r5
   140d8:	f7f4 fd64 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   140dc:	e7ff      	b.n	140de <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x234>
   140de:	f644 50cc 	movw	r0, #19916	; 0x4dcc
   140e2:	f2c0 0002 	movt	r0, #2
   140e6:	f001 faee 	bl	156c6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   140ea:	900e      	str	r0, [sp, #56]	; 0x38
   140ec:	e7ff      	b.n	140ee <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x244>
   140ee:	a846      	add	r0, sp, #280	; 0x118
   140f0:	990e      	ldr	r1, [sp, #56]	; 0x38
   140f2:	f001 fb25 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   140f6:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi init fail");
   140f8:	f644 500c 	movw	r0, #19724	; 0x4d0c
   140fc:	f2c0 0002 	movt	r0, #2
   14100:	6800      	ldr	r0, [r0, #0]
   14102:	a95d      	add	r1, sp, #372	; 0x174
   14104:	915e      	str	r1, [sp, #376]	; 0x178
   14106:	905f      	str	r0, [sp, #380]	; 0x17c
   14108:	985e      	ldr	r0, [sp, #376]	; 0x178
   1410a:	9085      	str	r0, [sp, #532]	; 0x214
   1410c:	995f      	ldr	r1, [sp, #380]	; 0x17c
   1410e:	9186      	str	r1, [sp, #536]	; 0x218
   14110:	6802      	ldr	r2, [r0, #0]
   14112:	680b      	ldr	r3, [r1, #0]
   14114:	429a      	cmp	r2, r3
   14116:	900d      	str	r0, [sp, #52]	; 0x34
   14118:	910c      	str	r1, [sp, #48]	; 0x30
   1411a:	d109      	bne.n	14130 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x286>
   1411c:	e7ff      	b.n	1411e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x274>
        self.spi_num = spi_num;
   1411e:	9827      	ldr	r0, [sp, #156]	; 0x9c
   14120:	9928      	ldr	r1, [sp, #160]	; 0xa0
   14122:	6008      	str	r0, [r1, #0]
        self.cs_pin  = cs_pin;
   14124:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14126:	604a      	str	r2, [r1, #4]
   14128:	2001      	movs	r0, #1
        Ok(())
    }
   1412a:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
   1412e:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "spi init fail");
   14130:	f644 5064 	movw	r0, #19812	; 0x4d64
   14134:	f2c0 0002 	movt	r0, #2
   14138:	6801      	ldr	r1, [r0, #0]
   1413a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1413c:	906f      	str	r0, [sp, #444]	; 0x1bc
   1413e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14140:	9270      	str	r2, [sp, #448]	; 0x1c0
   14142:	f644 53f4 	movw	r3, #19956	; 0x4df4
   14146:	f2c0 0302 	movt	r3, #2
   1414a:	681b      	ldr	r3, [r3, #0]
   1414c:	f644 5c84 	movw	ip, #19844	; 0x4d84
   14150:	f2c0 0c02 	movt	ip, #2
   14154:	f8dc c000 	ldr.w	ip, [ip]
   14158:	46ee      	mov	lr, sp
   1415a:	2400      	movs	r4, #0
   1415c:	f8ce 4000 	str.w	r4, [lr]
   14160:	a871      	add	r0, sp, #452	; 0x1c4
   14162:	2201      	movs	r2, #1
   14164:	910b      	str	r1, [sp, #44]	; 0x2c
   14166:	4619      	mov	r1, r3
   14168:	4663      	mov	r3, ip
   1416a:	f7f4 fd1b 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1416e:	e7ff      	b.n	14170 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2c6>
   14170:	a86f      	add	r0, sp, #444	; 0x1bc
   14172:	906c      	str	r0, [sp, #432]	; 0x1b0
   14174:	a870      	add	r0, sp, #448	; 0x1c0
   14176:	906d      	str	r0, [sp, #436]	; 0x1b4
   14178:	a871      	add	r0, sp, #452	; 0x1c4
   1417a:	906e      	str	r0, [sp, #440]	; 0x1b8
   1417c:	986c      	ldr	r0, [sp, #432]	; 0x1b0
   1417e:	9087      	str	r0, [sp, #540]	; 0x21c
   14180:	996d      	ldr	r1, [sp, #436]	; 0x1b4
   14182:	9188      	str	r1, [sp, #544]	; 0x220
   14184:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
   14186:	9289      	str	r2, [sp, #548]	; 0x224
   14188:	f249 33f3 	movw	r3, #37875	; 0x93f3
   1418c:	f2c0 0300 	movt	r3, #0
   14190:	910a      	str	r1, [sp, #40]	; 0x28
   14192:	4619      	mov	r1, r3
   14194:	9209      	str	r2, [sp, #36]	; 0x24
   14196:	f7f5 f964 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1419a:	9008      	str	r0, [sp, #32]
   1419c:	9107      	str	r1, [sp, #28]
   1419e:	e7ff      	b.n	141a0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2f6>
   141a0:	f249 31f3 	movw	r1, #37875	; 0x93f3
   141a4:	f2c0 0100 	movt	r1, #0
   141a8:	980a      	ldr	r0, [sp, #40]	; 0x28
   141aa:	f7f5 f95a 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   141ae:	9006      	str	r0, [sp, #24]
   141b0:	9105      	str	r1, [sp, #20]
   141b2:	e7ff      	b.n	141b4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x30a>
   141b4:	f645 41a3 	movw	r1, #23715	; 0x5ca3
   141b8:	f2c0 0101 	movt	r1, #1
   141bc:	9809      	ldr	r0, [sp, #36]	; 0x24
   141be:	f7f5 f98f 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   141c2:	9004      	str	r0, [sp, #16]
   141c4:	9103      	str	r1, [sp, #12]
   141c6:	e7ff      	b.n	141c8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x31e>
   141c8:	9808      	ldr	r0, [sp, #32]
   141ca:	9066      	str	r0, [sp, #408]	; 0x198
   141cc:	9907      	ldr	r1, [sp, #28]
   141ce:	9167      	str	r1, [sp, #412]	; 0x19c
   141d0:	9a06      	ldr	r2, [sp, #24]
   141d2:	9268      	str	r2, [sp, #416]	; 0x1a0
   141d4:	9b05      	ldr	r3, [sp, #20]
   141d6:	9369      	str	r3, [sp, #420]	; 0x1a4
   141d8:	f8dd c010 	ldr.w	ip, [sp, #16]
   141dc:	f8cd c1a8 	str.w	ip, [sp, #424]	; 0x1a8
   141e0:	f8dd e00c 	ldr.w	lr, [sp, #12]
   141e4:	f8cd e1ac 	str.w	lr, [sp, #428]	; 0x1ac
   141e8:	466c      	mov	r4, sp
   141ea:	2503      	movs	r5, #3
   141ec:	6025      	str	r5, [r4, #0]
   141ee:	a860      	add	r0, sp, #384	; 0x180
   141f0:	ab66      	add	r3, sp, #408	; 0x198
   141f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   141f4:	462a      	mov	r2, r5
   141f6:	f7f4 fcd5 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   141fa:	e7ff      	b.n	141fc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x352>
   141fc:	f644 50f8 	movw	r0, #19960	; 0x4df8
   14200:	f2c0 0002 	movt	r0, #2
   14204:	f001 fa5f 	bl	156c6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14208:	9002      	str	r0, [sp, #8]
   1420a:	e7ff      	b.n	1420c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x362>
   1420c:	a860      	add	r0, sp, #384	; 0x180
   1420e:	9902      	ldr	r1, [sp, #8]
   14210:	f001 fa96 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14214:	defe      	udf	#254	; 0xfe

00014216 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl GPIO {
    /// Create a new output GPIO pin
    pub fn new() -> Self {
   14216:	2000      	movs	r0, #0
        GPIO {
            pin: 0,
        }
    }
   14218:	4770      	bx	lr

0001421a <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>:

    /// Initialise the output GPIO pin
    pub fn init(&mut self, pin: i32) -> MynewtResult<()> {
   1421a:	b5b0      	push	{r4, r5, r7, lr}
   1421c:	b0b0      	sub	sp, #192	; 0xc0
   1421e:	9029      	str	r0, [sp, #164]	; 0xa4
   14220:	912a      	str	r1, [sp, #168]	; 0xa8
   14222:	2200      	movs	r2, #0
        //  TODO: let dc = pins.d0.into_push_pull_output(&mut pins.port);
        //  TODO: let rst = pins.d1.into_push_pull_output(&mut pins.port);
        let rc = unsafe { hal::hal_gpio_init_out(pin, 0) };
   14224:	900e      	str	r0, [sp, #56]	; 0x38
   14226:	4608      	mov	r0, r1
   14228:	910d      	str	r1, [sp, #52]	; 0x34
   1422a:	4611      	mov	r1, r2
   1422c:	f003 fadc 	bl	177e8 <hal_gpio_init_out>
   14230:	900f      	str	r0, [sp, #60]	; 0x3c
   14232:	e7ff      	b.n	14234 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x1a>
        assert_eq!(rc, 0, "gpio fail");
   14234:	f644 500c 	movw	r0, #19724	; 0x4d0c
   14238:	f2c0 0002 	movt	r0, #2
   1423c:	6800      	ldr	r0, [r0, #0]
   1423e:	a90f      	add	r1, sp, #60	; 0x3c
   14240:	9110      	str	r1, [sp, #64]	; 0x40
   14242:	9011      	str	r0, [sp, #68]	; 0x44
   14244:	9810      	ldr	r0, [sp, #64]	; 0x40
   14246:	902b      	str	r0, [sp, #172]	; 0xac
   14248:	9911      	ldr	r1, [sp, #68]	; 0x44
   1424a:	912c      	str	r1, [sp, #176]	; 0xb0
   1424c:	6802      	ldr	r2, [r0, #0]
   1424e:	680b      	ldr	r3, [r1, #0]
   14250:	429a      	cmp	r2, r3
   14252:	900c      	str	r0, [sp, #48]	; 0x30
   14254:	910b      	str	r1, [sp, #44]	; 0x2c
   14256:	d106      	bne.n	14266 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x4c>
   14258:	e7ff      	b.n	1425a <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x40>
        self.pin = pin;
   1425a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1425c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1425e:	6008      	str	r0, [r1, #0]
   14260:	2001      	movs	r0, #1
        Ok(())
    }
   14262:	b030      	add	sp, #192	; 0xc0
   14264:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "gpio fail");
   14266:	f644 5064 	movw	r0, #19812	; 0x4d64
   1426a:	f2c0 0002 	movt	r0, #2
   1426e:	6801      	ldr	r1, [r0, #0]
   14270:	980c      	ldr	r0, [sp, #48]	; 0x30
   14272:	9021      	str	r0, [sp, #132]	; 0x84
   14274:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14276:	9222      	str	r2, [sp, #136]	; 0x88
   14278:	f644 631c 	movw	r3, #19996	; 0x4e1c
   1427c:	f2c0 0302 	movt	r3, #2
   14280:	681b      	ldr	r3, [r3, #0]
   14282:	f644 5c84 	movw	ip, #19844	; 0x4d84
   14286:	f2c0 0c02 	movt	ip, #2
   1428a:	f8dc c000 	ldr.w	ip, [ip]
   1428e:	46ee      	mov	lr, sp
   14290:	2400      	movs	r4, #0
   14292:	f8ce 4000 	str.w	r4, [lr]
   14296:	a823      	add	r0, sp, #140	; 0x8c
   14298:	2201      	movs	r2, #1
   1429a:	910a      	str	r1, [sp, #40]	; 0x28
   1429c:	4619      	mov	r1, r3
   1429e:	4663      	mov	r3, ip
   142a0:	f7f4 fc80 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   142a4:	e7ff      	b.n	142a6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x8c>
   142a6:	a821      	add	r0, sp, #132	; 0x84
   142a8:	901e      	str	r0, [sp, #120]	; 0x78
   142aa:	a822      	add	r0, sp, #136	; 0x88
   142ac:	901f      	str	r0, [sp, #124]	; 0x7c
   142ae:	a823      	add	r0, sp, #140	; 0x8c
   142b0:	9020      	str	r0, [sp, #128]	; 0x80
   142b2:	981e      	ldr	r0, [sp, #120]	; 0x78
   142b4:	902d      	str	r0, [sp, #180]	; 0xb4
   142b6:	991f      	ldr	r1, [sp, #124]	; 0x7c
   142b8:	912e      	str	r1, [sp, #184]	; 0xb8
   142ba:	9a20      	ldr	r2, [sp, #128]	; 0x80
   142bc:	922f      	str	r2, [sp, #188]	; 0xbc
   142be:	f249 33f3 	movw	r3, #37875	; 0x93f3
   142c2:	f2c0 0300 	movt	r3, #0
   142c6:	9109      	str	r1, [sp, #36]	; 0x24
   142c8:	4619      	mov	r1, r3
   142ca:	9208      	str	r2, [sp, #32]
   142cc:	f7f5 f8c9 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   142d0:	9007      	str	r0, [sp, #28]
   142d2:	9106      	str	r1, [sp, #24]
   142d4:	e7ff      	b.n	142d6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xbc>
   142d6:	f249 31f3 	movw	r1, #37875	; 0x93f3
   142da:	f2c0 0100 	movt	r1, #0
   142de:	9809      	ldr	r0, [sp, #36]	; 0x24
   142e0:	f7f5 f8bf 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   142e4:	9005      	str	r0, [sp, #20]
   142e6:	9104      	str	r1, [sp, #16]
   142e8:	e7ff      	b.n	142ea <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xd0>
   142ea:	f645 41a3 	movw	r1, #23715	; 0x5ca3
   142ee:	f2c0 0101 	movt	r1, #1
   142f2:	9808      	ldr	r0, [sp, #32]
   142f4:	f7f5 f8f4 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   142f8:	9003      	str	r0, [sp, #12]
   142fa:	9102      	str	r1, [sp, #8]
   142fc:	e7ff      	b.n	142fe <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xe4>
   142fe:	9807      	ldr	r0, [sp, #28]
   14300:	9018      	str	r0, [sp, #96]	; 0x60
   14302:	9906      	ldr	r1, [sp, #24]
   14304:	9119      	str	r1, [sp, #100]	; 0x64
   14306:	9a05      	ldr	r2, [sp, #20]
   14308:	921a      	str	r2, [sp, #104]	; 0x68
   1430a:	9b04      	ldr	r3, [sp, #16]
   1430c:	931b      	str	r3, [sp, #108]	; 0x6c
   1430e:	f8dd c00c 	ldr.w	ip, [sp, #12]
   14312:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
   14316:	f8dd e008 	ldr.w	lr, [sp, #8]
   1431a:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
   1431e:	466c      	mov	r4, sp
   14320:	2503      	movs	r5, #3
   14322:	6025      	str	r5, [r4, #0]
   14324:	a812      	add	r0, sp, #72	; 0x48
   14326:	ab18      	add	r3, sp, #96	; 0x60
   14328:	990a      	ldr	r1, [sp, #40]	; 0x28
   1432a:	462a      	mov	r2, r5
   1432c:	f7f4 fc3a 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14330:	e7ff      	b.n	14332 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x118>
   14332:	f644 6020 	movw	r0, #20000	; 0x4e20
   14336:	f2c0 0002 	movt	r0, #2
   1433a:	f001 f9c4 	bl	156c6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1433e:	9001      	str	r0, [sp, #4]
   14340:	e7ff      	b.n	14342 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x128>
   14342:	a812      	add	r0, sp, #72	; 0x48
   14344:	9901      	ldr	r1, [sp, #4]
   14346:	f001 f9fb 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1434a:	defe      	udf	#254	; 0xfe

0001434c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl embedded_hal::digital::v2::OutputPin for GPIO {
    /// Set the GPIO pin to low
    fn set_low(&mut self) -> Result<(), Self::Error> {
   1434c:	b580      	push	{r7, lr}
   1434e:	b082      	sub	sp, #8
   14350:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 0) };
   14352:	6800      	ldr	r0, [r0, #0]
   14354:	2100      	movs	r1, #0
   14356:	f003 fa63 	bl	17820 <hal_gpio_write>
   1435a:	e7ff      	b.n	1435c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E+0x10>
   1435c:	2001      	movs	r0, #1
        Ok(())
    }
   1435e:	b002      	add	sp, #8
   14360:	bd80      	pop	{r7, pc}

00014362 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>:

    /// Set the GPIO pin to high
    fn set_high(&mut self) -> Result<(), Self::Error> {
   14362:	b580      	push	{r7, lr}
   14364:	b082      	sub	sp, #8
   14366:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 1) };
   14368:	6800      	ldr	r0, [r0, #0]
   1436a:	2101      	movs	r1, #1
   1436c:	f003 fa58 	bl	17820 <hal_gpio_write>
   14370:	e7ff      	b.n	14372 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE+0x10>
   14372:	2001      	movs	r0, #1
        Ok(())
    }
   14374:	b002      	add	sp, #8
   14376:	bd80      	pop	{r7, pc}

00014378 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>:
impl Delay {
    /// Create a new delay
    pub fn new() -> Self {
        Delay {
        }
    }
   14378:	4770      	bx	lr

0001437a <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>:
}

/// Rust Embedded HAL interface for Mynewt Delay
impl embedded_hal::blocking::delay::DelayMs<u8> for Delay {
    /// Sleep for the specified number of milliseconds
    fn delay_ms(&mut self, ms: u8) {
   1437a:	b580      	push	{r7, lr}
   1437c:	b086      	sub	sp, #24
   1437e:	460a      	mov	r2, r1
   14380:	9003      	str	r0, [sp, #12]
   14382:	f88d 1013 	strb.w	r1, [sp, #19]
        //  TODO: Get this constant from Mynewt
        const OS_TICKS_PER_SEC: u32 = 1000;
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14386:	b2c8      	uxtb	r0, r1
   14388:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1438c:	fba0 0101 	umull	r0, r1, r0, r1
   14390:	2900      	cmp	r1, #0
   14392:	9002      	str	r0, [sp, #8]
   14394:	d110      	bne.n	143b8 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3e>
   14396:	e7ff      	b.n	14398 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x1e>
   14398:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   1439c:	f2c1 0062 	movt	r0, #4194	; 0x1062
   143a0:	9902      	ldr	r1, [sp, #8]
   143a2:	fba1 0200 	umull	r0, r2, r1, r0
   143a6:	0992      	lsrs	r2, r2, #6
   143a8:	9205      	str	r2, [sp, #20]
        unsafe { os::os_time_delay(delay_ticks) };
   143aa:	9001      	str	r0, [sp, #4]
   143ac:	4610      	mov	r0, r2
   143ae:	f005 fa55 	bl	1985c <os_time_delay>
   143b2:	e7ff      	b.n	143b4 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3a>
    }
   143b4:	b006      	add	sp, #24
   143b6:	bd80      	pop	{r7, pc}
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   143b8:	f644 6040 	movw	r0, #20032	; 0x4e40
   143bc:	f2c0 0002 	movt	r0, #2
   143c0:	f644 6230 	movw	r2, #20016	; 0x4e30
   143c4:	f2c0 0202 	movt	r2, #2
   143c8:	2121      	movs	r1, #33	; 0x21
   143ca:	f001 f983 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   143ce:	defe      	udf	#254	; 0xfe

000143d0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>:
   143d0:	b082      	sub	sp, #8
   143d2:	9001      	str	r0, [sp, #4]
   143d4:	9000      	str	r0, [sp, #0]
   143d6:	e7ff      	b.n	143d8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E+0x8>
   143d8:	9800      	ldr	r0, [sp, #0]
   143da:	fab0 f180 	clz	r1, r0
   143de:	0948      	lsrs	r0, r1, #5
   143e0:	b002      	add	sp, #8
   143e2:	4770      	bx	lr

000143e4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>:
   143e4:	b081      	sub	sp, #4
   143e6:	b001      	add	sp, #4
   143e8:	4770      	bx	lr

000143ea <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>:

macro_rules! impl_to_primitive_uint_to_uint {
    ($SrcT:ident : $( $(#[$cfg:meta])* fn $method:ident -> $DstT:ident ; )*) => {$(
        #[inline]
        $(#[$cfg])*
        fn $method(&self) -> Option<$DstT> {
   143ea:	b08a      	sub	sp, #40	; 0x28
   143ec:	9005      	str	r0, [sp, #20]
   143ee:	2100      	movs	r1, #0
            let max = $DstT::MAX as $SrcT;
   143f0:	9107      	str	r1, [sp, #28]
   143f2:	21ff      	movs	r1, #255	; 0xff
   143f4:	9106      	str	r1, [sp, #24]
   143f6:	2108      	movs	r1, #8
   143f8:	9108      	str	r1, [sp, #32]
   143fa:	9908      	ldr	r1, [sp, #32]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   143fc:	9003      	str	r0, [sp, #12]
   143fe:	9102      	str	r1, [sp, #8]
   14400:	e016      	b.n	14430 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x46>
   14402:	2001      	movs	r0, #1
   14404:	f88d 0013 	strb.w	r0, [sp, #19]
   14408:	e00c      	b.n	14424 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   1440a:	2000      	movs	r0, #0
   1440c:	f88d 0013 	strb.w	r0, [sp, #19]
   14410:	e008      	b.n	14424 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   14412:	9803      	ldr	r0, [sp, #12]
   14414:	6801      	ldr	r1, [r0, #0]
   14416:	6842      	ldr	r2, [r0, #4]
   14418:	f5b1 7180 	subs.w	r1, r1, #256	; 0x100
   1441c:	f172 0200 	sbcs.w	r2, r2, #0
   14420:	d3ef      	bcc.n	14402 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   14422:	e7f2      	b.n	1440a <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x20>
   14424:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14428:	07c0      	lsls	r0, r0, #31
   1442a:	2800      	cmp	r0, #0
   1442c:	d10e      	bne.n	1444c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x62>
   1442e:	e009      	b.n	14444 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x5a>
   14430:	2001      	movs	r0, #1
   14432:	9009      	str	r0, [sp, #36]	; 0x24
   14434:	9809      	ldr	r0, [sp, #36]	; 0x24
   14436:	9001      	str	r0, [sp, #4]
   14438:	e7ff      	b.n	1443a <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x50>
   1443a:	9802      	ldr	r0, [sp, #8]
   1443c:	9901      	ldr	r1, [sp, #4]
   1443e:	4288      	cmp	r0, r1
   14440:	d9df      	bls.n	14402 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   14442:	e7e6      	b.n	14412 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x28>
   14444:	2000      	movs	r0, #0
                Some(*self as $DstT)
            } else {
                None
   14446:	f88d 0010 	strb.w	r0, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   1444a:	e007      	b.n	1445c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
                Some(*self as $DstT)
   1444c:	9803      	ldr	r0, [sp, #12]
   1444e:	7801      	ldrb	r1, [r0, #0]
   14450:	f88d 1011 	strb.w	r1, [sp, #17]
   14454:	2101      	movs	r1, #1
   14456:	f88d 1010 	strb.w	r1, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   1445a:	e7ff      	b.n	1445c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
            }
        }
   1445c:	f89d 0010 	ldrb.w	r0, [sp, #16]
   14460:	f89d 1011 	ldrb.w	r1, [sp, #17]
   14464:	b00a      	add	sp, #40	; 0x28
   14466:	4770      	bx	lr

00014468 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>:
   14468:	b084      	sub	sp, #16
   1446a:	9002      	str	r0, [sp, #8]
   1446c:	6801      	ldr	r1, [r0, #0]
   1446e:	2900      	cmp	r1, #0
   14470:	9000      	str	r0, [sp, #0]
   14472:	d001      	beq.n	14478 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x10>
   14474:	e7ff      	b.n	14476 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0xe>
   14476:	e003      	b.n	14480 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x18>
   14478:	2000      	movs	r0, #0
   1447a:	9001      	str	r0, [sp, #4]
   1447c:	e006      	b.n	1448c <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   1447e:	defe      	udf	#254	; 0xfe
   14480:	9800      	ldr	r0, [sp, #0]
   14482:	f100 0108 	add.w	r1, r0, #8
   14486:	9103      	str	r1, [sp, #12]
   14488:	9101      	str	r1, [sp, #4]
   1448a:	e7ff      	b.n	1448c <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   1448c:	9801      	ldr	r0, [sp, #4]
   1448e:	b004      	add	sp, #16
   14490:	4770      	bx	lr

00014492 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>:
   14492:	b084      	sub	sp, #16
   14494:	460b      	mov	r3, r1
   14496:	4684      	mov	ip, r0
   14498:	f88d 000c 	strb.w	r0, [sp, #12]
   1449c:	f88d 100d 	strb.w	r1, [sp, #13]
   144a0:	f89d 000c 	ldrb.w	r0, [sp, #12]
   144a4:	07c1      	lsls	r1, r0, #31
   144a6:	2900      	cmp	r1, #0
   144a8:	9202      	str	r2, [sp, #8]
   144aa:	d001      	beq.n	144b0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1e>
   144ac:	e7ff      	b.n	144ae <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1c>
   144ae:	e009      	b.n	144c4 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x32>
   144b0:	f644 6061 	movw	r0, #20065	; 0x4e61
   144b4:	f2c0 0002 	movt	r0, #2
   144b8:	212b      	movs	r1, #43	; 0x2b
   144ba:	9a02      	ldr	r2, [sp, #8]
   144bc:	f001 f90a 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   144c0:	defe      	udf	#254	; 0xfe
   144c2:	defe      	udf	#254	; 0xfe
   144c4:	f89d 000d 	ldrb.w	r0, [sp, #13]
   144c8:	4601      	mov	r1, r0
   144ca:	f88d 000f 	strb.w	r0, [sp, #15]
   144ce:	f89d 000c 	ldrb.w	r0, [sp, #12]
   144d2:	07c0      	lsls	r0, r0, #31
   144d4:	2800      	cmp	r0, #0
   144d6:	9101      	str	r1, [sp, #4]
   144d8:	d003      	beq.n	144e2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x50>
   144da:	e7ff      	b.n	144dc <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>
   144dc:	9801      	ldr	r0, [sp, #4]
   144de:	b004      	add	sp, #16
   144e0:	4770      	bx	lr
   144e2:	e7fb      	b.n	144dc <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>

000144e4 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>:
   144e4:	b088      	sub	sp, #32
   144e6:	9004      	str	r0, [sp, #16]
   144e8:	9105      	str	r1, [sp, #20]
   144ea:	9804      	ldr	r0, [sp, #16]
   144ec:	2800      	cmp	r0, #0
   144ee:	4601      	mov	r1, r0
   144f0:	bf18      	it	ne
   144f2:	2101      	movne	r1, #1
   144f4:	2800      	cmp	r0, #0
   144f6:	9203      	str	r2, [sp, #12]
   144f8:	d001      	beq.n	144fe <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x1a>
   144fa:	e7ff      	b.n	144fc <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x18>
   144fc:	e009      	b.n	14512 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x2e>
   144fe:	f644 6061 	movw	r0, #20065	; 0x4e61
   14502:	f2c0 0002 	movt	r0, #2
   14506:	212b      	movs	r1, #43	; 0x2b
   14508:	9a03      	ldr	r2, [sp, #12]
   1450a:	f001 f8e3 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1450e:	defe      	udf	#254	; 0xfe
   14510:	defe      	udf	#254	; 0xfe
   14512:	9804      	ldr	r0, [sp, #16]
   14514:	9905      	ldr	r1, [sp, #20]
   14516:	9006      	str	r0, [sp, #24]
   14518:	9107      	str	r1, [sp, #28]
   1451a:	9a04      	ldr	r2, [sp, #16]
   1451c:	2a00      	cmp	r2, #0
   1451e:	9002      	str	r0, [sp, #8]
   14520:	9101      	str	r1, [sp, #4]
   14522:	d004      	beq.n	1452e <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x4a>
   14524:	e7ff      	b.n	14526 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>
   14526:	9802      	ldr	r0, [sp, #8]
   14528:	9901      	ldr	r1, [sp, #4]
   1452a:	b008      	add	sp, #32
   1452c:	4770      	bx	lr
   1452e:	e7fa      	b.n	14526 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>

00014530 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>:
   14530:	b082      	sub	sp, #8
   14532:	9001      	str	r0, [sp, #4]
   14534:	6800      	ldr	r0, [r0, #0]
   14536:	2800      	cmp	r0, #0
   14538:	d104      	bne.n	14544 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x14>
   1453a:	e7ff      	b.n	1453c <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0xc>
   1453c:	2000      	movs	r0, #0
   1453e:	f88d 0003 	strb.w	r0, [sp, #3]
   14542:	e003      	b.n	1454c <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14544:	2001      	movs	r0, #1
   14546:	f88d 0003 	strb.w	r0, [sp, #3]
   1454a:	e7ff      	b.n	1454c <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   1454c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14550:	b002      	add	sp, #8
   14552:	4770      	bx	lr

00014554 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>:
   14554:	b580      	push	{r7, lr}
   14556:	b086      	sub	sp, #24
   14558:	9000      	str	r0, [sp, #0]
   1455a:	2000      	movs	r0, #0
   1455c:	f88d 000f 	strb.w	r0, [sp, #15]
   14560:	f88d 000e 	strb.w	r0, [sp, #14]
   14564:	2001      	movs	r0, #1
   14566:	f88d 000f 	strb.w	r0, [sp, #15]
   1456a:	f88d 000e 	strb.w	r0, [sp, #14]
   1456e:	9800      	ldr	r0, [sp, #0]
   14570:	2800      	cmp	r0, #0
   14572:	4601      	mov	r1, r0
   14574:	bf18      	it	ne
   14576:	2101      	movne	r1, #1
   14578:	2800      	cmp	r0, #0
   1457a:	d001      	beq.n	14580 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2c>
   1457c:	e7ff      	b.n	1457e <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2a>
   1457e:	e004      	b.n	1458a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x36>
   14580:	2000      	movs	r0, #0
   14582:	f88d 0004 	strb.w	r0, [sp, #4]
   14586:	e019      	b.n	145bc <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14588:	defe      	udf	#254	; 0xfe
   1458a:	2000      	movs	r0, #0
   1458c:	f88d 000f 	strb.w	r0, [sp, #15]
   14590:	9900      	ldr	r1, [sp, #0]
   14592:	9105      	str	r1, [sp, #20]
   14594:	f88d 000e 	strb.w	r0, [sp, #14]
   14598:	9102      	str	r1, [sp, #8]
   1459a:	9802      	ldr	r0, [sp, #8]
   1459c:	f7f5 ffea 	bl	a574 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>
   145a0:	f88d 1005 	strb.w	r1, [sp, #5]
   145a4:	f88d 0004 	strb.w	r0, [sp, #4]
   145a8:	e7ff      	b.n	145aa <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x56>
   145aa:	e007      	b.n	145bc <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   145ac:	9800      	ldr	r0, [sp, #0]
   145ae:	2800      	cmp	r0, #0
   145b0:	d110      	bne.n	145d4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x80>
   145b2:	e019      	b.n	145e8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x94>
   145b4:	2000      	movs	r0, #0
   145b6:	f88d 000e 	strb.w	r0, [sp, #14]
   145ba:	e7f7      	b.n	145ac <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   145bc:	f89d 000e 	ldrb.w	r0, [sp, #14]
   145c0:	07c0      	lsls	r0, r0, #31
   145c2:	2800      	cmp	r0, #0
   145c4:	d1f6      	bne.n	145b4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x60>
   145c6:	e7f1      	b.n	145ac <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   145c8:	f89d 0004 	ldrb.w	r0, [sp, #4]
   145cc:	f89d 1005 	ldrb.w	r1, [sp, #5]
   145d0:	b006      	add	sp, #24
   145d2:	bd80      	pop	{r7, pc}
   145d4:	f89d 000f 	ldrb.w	r0, [sp, #15]
   145d8:	07c0      	lsls	r0, r0, #31
   145da:	2800      	cmp	r0, #0
   145dc:	d0f4      	beq.n	145c8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   145de:	e7ff      	b.n	145e0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x8c>
   145e0:	2000      	movs	r0, #0
   145e2:	f88d 000f 	strb.w	r0, [sp, #15]
   145e6:	e7ef      	b.n	145c8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   145e8:	e7ee      	b.n	145c8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>

000145ea <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE>:
   145ea:	b580      	push	{r7, lr}
   145ec:	b084      	sub	sp, #16
   145ee:	9002      	str	r0, [sp, #8]
   145f0:	9103      	str	r1, [sp, #12]
   145f2:	f644 608c 	movw	r0, #20108	; 0x4e8c
   145f6:	f2c0 0002 	movt	r0, #2
   145fa:	2202      	movs	r2, #2
   145fc:	9001      	str	r0, [sp, #4]
   145fe:	4608      	mov	r0, r1
   14600:	9901      	ldr	r1, [sp, #4]
   14602:	f001 fd87 	bl	16114 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
   14606:	9000      	str	r0, [sp, #0]
   14608:	e7ff      	b.n	1460a <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE+0x20>
   1460a:	9800      	ldr	r0, [sp, #0]
   1460c:	f000 0001 	and.w	r0, r0, #1
   14610:	b004      	add	sp, #16
   14612:	bd80      	pop	{r7, pc}

00014614 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>:
   14614:	b580      	push	{r7, lr}
   14616:	b08a      	sub	sp, #40	; 0x28
   14618:	4684      	mov	ip, r0
   1461a:	f88d 0017 	strb.w	r0, [sp, #23]
   1461e:	9107      	str	r1, [sp, #28]
   14620:	9208      	str	r2, [sp, #32]
   14622:	f89d 0017 	ldrb.w	r0, [sp, #23]
   14626:	ea4f 7ec0 	mov.w	lr, r0, lsl #31
   1462a:	f1be 0f00 	cmp.w	lr, #0
   1462e:	9304      	str	r3, [sp, #16]
   14630:	9203      	str	r2, [sp, #12]
   14632:	9102      	str	r1, [sp, #8]
   14634:	d00e      	beq.n	14654 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x40>
   14636:	e7ff      	b.n	14638 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x24>
   14638:	4668      	mov	r0, sp
   1463a:	9904      	ldr	r1, [sp, #16]
   1463c:	6001      	str	r1, [r0, #0]
   1463e:	f644 6390 	movw	r3, #20112	; 0x4e90
   14642:	f2c0 0302 	movt	r3, #2
   14646:	aa06      	add	r2, sp, #24
   14648:	9802      	ldr	r0, [sp, #8]
   1464a:	9903      	ldr	r1, [sp, #12]
   1464c:	f001 f814 	bl	15678 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   14650:	defe      	udf	#254	; 0xfe
   14652:	defe      	udf	#254	; 0xfe
   14654:	f89d 0017 	ldrb.w	r0, [sp, #23]
   14658:	07c0      	lsls	r0, r0, #31
   1465a:	2800      	cmp	r0, #0
   1465c:	d102      	bne.n	14664 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x50>
   1465e:	e7ff      	b.n	14660 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>
   14660:	b00a      	add	sp, #40	; 0x28
   14662:	bd80      	pop	{r7, pc}
   14664:	e7fc      	b.n	14660 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>

00014666 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>:
   14666:	b580      	push	{r7, lr}
   14668:	b088      	sub	sp, #32
   1466a:	9001      	str	r0, [sp, #4]
   1466c:	2000      	movs	r0, #0
   1466e:	f88d 0013 	strb.w	r0, [sp, #19]
   14672:	f88d 0011 	strb.w	r0, [sp, #17]
   14676:	f88d 0012 	strb.w	r0, [sp, #18]
   1467a:	2001      	movs	r0, #1
   1467c:	f88d 0012 	strb.w	r0, [sp, #18]
   14680:	f88d 0013 	strb.w	r0, [sp, #19]
   14684:	f88d 0011 	strb.w	r0, [sp, #17]
   14688:	9801      	ldr	r0, [sp, #4]
   1468a:	1e41      	subs	r1, r0, #1
   1468c:	bf18      	it	ne
   1468e:	2101      	movne	r1, #1
   14690:	2801      	cmp	r0, #1
   14692:	d00d      	beq.n	146b0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x4a>
   14694:	e7ff      	b.n	14696 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x30>
   14696:	2000      	movs	r0, #0
   14698:	f88d 0013 	strb.w	r0, [sp, #19]
   1469c:	9901      	ldr	r1, [sp, #4]
   1469e:	9107      	str	r1, [sp, #28]
   146a0:	f88d 0011 	strb.w	r0, [sp, #17]
   146a4:	9103      	str	r1, [sp, #12]
   146a6:	9803      	ldr	r0, [sp, #12]
   146a8:	f7f5 f924 	bl	98f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>
   146ac:	e006      	b.n	146bc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x56>
   146ae:	defe      	udf	#254	; 0xfe
   146b0:	2000      	movs	r0, #0
   146b2:	f88d 0012 	strb.w	r0, [sp, #18]
   146b6:	f88d 000b 	strb.w	r0, [sp, #11]
   146ba:	e003      	b.n	146c4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   146bc:	2001      	movs	r0, #1
   146be:	f88d 000b 	strb.w	r0, [sp, #11]
   146c2:	e7ff      	b.n	146c4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   146c4:	f89d 0011 	ldrb.w	r0, [sp, #17]
   146c8:	07c0      	lsls	r0, r0, #31
   146ca:	2800      	cmp	r0, #0
   146cc:	d104      	bne.n	146d8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x72>
   146ce:	e7ff      	b.n	146d0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   146d0:	9801      	ldr	r0, [sp, #4]
   146d2:	2801      	cmp	r0, #1
   146d4:	d008      	beq.n	146e8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x82>
   146d6:	e011      	b.n	146fc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x96>
   146d8:	2000      	movs	r0, #0
   146da:	f88d 0011 	strb.w	r0, [sp, #17]
   146de:	e7f7      	b.n	146d0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   146e0:	f89d 000b 	ldrb.w	r0, [sp, #11]
   146e4:	b008      	add	sp, #32
   146e6:	bd80      	pop	{r7, pc}
   146e8:	f89d 0012 	ldrb.w	r0, [sp, #18]
   146ec:	07c0      	lsls	r0, r0, #31
   146ee:	2800      	cmp	r0, #0
   146f0:	d0f6      	beq.n	146e0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   146f2:	e7ff      	b.n	146f4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x8e>
   146f4:	2000      	movs	r0, #0
   146f6:	f88d 0012 	strb.w	r0, [sp, #18]
   146fa:	e7f1      	b.n	146e0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   146fc:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14700:	07c0      	lsls	r0, r0, #31
   14702:	2800      	cmp	r0, #0
   14704:	d0ec      	beq.n	146e0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   14706:	e7ff      	b.n	14708 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0xa2>
   14708:	2000      	movs	r0, #0
   1470a:	f88d 0013 	strb.w	r0, [sp, #19]
   1470e:	e7e7      	b.n	146e0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>

00014710 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>:
   14710:	b580      	push	{r7, lr}
   14712:	b088      	sub	sp, #32
   14714:	9001      	str	r0, [sp, #4]
   14716:	2000      	movs	r0, #0
   14718:	f88d 0013 	strb.w	r0, [sp, #19]
   1471c:	f88d 0011 	strb.w	r0, [sp, #17]
   14720:	f88d 0012 	strb.w	r0, [sp, #18]
   14724:	2001      	movs	r0, #1
   14726:	f88d 0012 	strb.w	r0, [sp, #18]
   1472a:	f88d 0013 	strb.w	r0, [sp, #19]
   1472e:	f88d 0011 	strb.w	r0, [sp, #17]
   14732:	9801      	ldr	r0, [sp, #4]
   14734:	1e41      	subs	r1, r0, #1
   14736:	bf18      	it	ne
   14738:	2101      	movne	r1, #1
   1473a:	2801      	cmp	r0, #1
   1473c:	d00d      	beq.n	1475a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x4a>
   1473e:	e7ff      	b.n	14740 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x30>
   14740:	2000      	movs	r0, #0
   14742:	f88d 0013 	strb.w	r0, [sp, #19]
   14746:	9901      	ldr	r1, [sp, #4]
   14748:	9107      	str	r1, [sp, #28]
   1474a:	f88d 0011 	strb.w	r0, [sp, #17]
   1474e:	9103      	str	r1, [sp, #12]
   14750:	9803      	ldr	r0, [sp, #12]
   14752:	f7f5 f8c5 	bl	98e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>
   14756:	e006      	b.n	14766 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x56>
   14758:	defe      	udf	#254	; 0xfe
   1475a:	2000      	movs	r0, #0
   1475c:	f88d 0012 	strb.w	r0, [sp, #18]
   14760:	f88d 000b 	strb.w	r0, [sp, #11]
   14764:	e003      	b.n	1476e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   14766:	2001      	movs	r0, #1
   14768:	f88d 000b 	strb.w	r0, [sp, #11]
   1476c:	e7ff      	b.n	1476e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   1476e:	f89d 0011 	ldrb.w	r0, [sp, #17]
   14772:	07c0      	lsls	r0, r0, #31
   14774:	2800      	cmp	r0, #0
   14776:	d104      	bne.n	14782 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x72>
   14778:	e7ff      	b.n	1477a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   1477a:	9801      	ldr	r0, [sp, #4]
   1477c:	2801      	cmp	r0, #1
   1477e:	d008      	beq.n	14792 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x82>
   14780:	e011      	b.n	147a6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x96>
   14782:	2000      	movs	r0, #0
   14784:	f88d 0011 	strb.w	r0, [sp, #17]
   14788:	e7f7      	b.n	1477a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   1478a:	f89d 000b 	ldrb.w	r0, [sp, #11]
   1478e:	b008      	add	sp, #32
   14790:	bd80      	pop	{r7, pc}
   14792:	f89d 0012 	ldrb.w	r0, [sp, #18]
   14796:	07c0      	lsls	r0, r0, #31
   14798:	2800      	cmp	r0, #0
   1479a:	d0f6      	beq.n	1478a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   1479c:	e7ff      	b.n	1479e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x8e>
   1479e:	2000      	movs	r0, #0
   147a0:	f88d 0012 	strb.w	r0, [sp, #18]
   147a4:	e7f1      	b.n	1478a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   147a6:	f89d 0013 	ldrb.w	r0, [sp, #19]
   147aa:	07c0      	lsls	r0, r0, #31
   147ac:	2800      	cmp	r0, #0
   147ae:	d0ec      	beq.n	1478a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   147b0:	e7ff      	b.n	147b2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0xa2>
   147b2:	2000      	movs	r0, #0
   147b4:	f88d 0013 	strb.w	r0, [sp, #19]
   147b8:	e7e7      	b.n	1478a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>

000147ba <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>:
   147ba:	b580      	push	{r7, lr}
   147bc:	b088      	sub	sp, #32
   147be:	9001      	str	r0, [sp, #4]
   147c0:	2000      	movs	r0, #0
   147c2:	f88d 0013 	strb.w	r0, [sp, #19]
   147c6:	f88d 0011 	strb.w	r0, [sp, #17]
   147ca:	f88d 0012 	strb.w	r0, [sp, #18]
   147ce:	2001      	movs	r0, #1
   147d0:	f88d 0012 	strb.w	r0, [sp, #18]
   147d4:	f88d 0013 	strb.w	r0, [sp, #19]
   147d8:	f88d 0011 	strb.w	r0, [sp, #17]
   147dc:	9801      	ldr	r0, [sp, #4]
   147de:	1e41      	subs	r1, r0, #1
   147e0:	bf18      	it	ne
   147e2:	2101      	movne	r1, #1
   147e4:	2801      	cmp	r0, #1
   147e6:	d00d      	beq.n	14804 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x4a>
   147e8:	e7ff      	b.n	147ea <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x30>
   147ea:	2000      	movs	r0, #0
   147ec:	f88d 0013 	strb.w	r0, [sp, #19]
   147f0:	9901      	ldr	r1, [sp, #4]
   147f2:	9107      	str	r1, [sp, #28]
   147f4:	f88d 0011 	strb.w	r0, [sp, #17]
   147f8:	9103      	str	r1, [sp, #12]
   147fa:	9803      	ldr	r0, [sp, #12]
   147fc:	f7f5 f875 	bl	98ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>
   14800:	e006      	b.n	14810 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x56>
   14802:	defe      	udf	#254	; 0xfe
   14804:	2000      	movs	r0, #0
   14806:	f88d 0012 	strb.w	r0, [sp, #18]
   1480a:	f88d 000b 	strb.w	r0, [sp, #11]
   1480e:	e003      	b.n	14818 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   14810:	2001      	movs	r0, #1
   14812:	f88d 000b 	strb.w	r0, [sp, #11]
   14816:	e7ff      	b.n	14818 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   14818:	f89d 0011 	ldrb.w	r0, [sp, #17]
   1481c:	07c0      	lsls	r0, r0, #31
   1481e:	2800      	cmp	r0, #0
   14820:	d104      	bne.n	1482c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x72>
   14822:	e7ff      	b.n	14824 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   14824:	9801      	ldr	r0, [sp, #4]
   14826:	2801      	cmp	r0, #1
   14828:	d008      	beq.n	1483c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x82>
   1482a:	e011      	b.n	14850 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x96>
   1482c:	2000      	movs	r0, #0
   1482e:	f88d 0011 	strb.w	r0, [sp, #17]
   14832:	e7f7      	b.n	14824 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   14834:	f89d 000b 	ldrb.w	r0, [sp, #11]
   14838:	b008      	add	sp, #32
   1483a:	bd80      	pop	{r7, pc}
   1483c:	f89d 0012 	ldrb.w	r0, [sp, #18]
   14840:	07c0      	lsls	r0, r0, #31
   14842:	2800      	cmp	r0, #0
   14844:	d0f6      	beq.n	14834 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   14846:	e7ff      	b.n	14848 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x8e>
   14848:	2000      	movs	r0, #0
   1484a:	f88d 0012 	strb.w	r0, [sp, #18]
   1484e:	e7f1      	b.n	14834 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   14850:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14854:	07c0      	lsls	r0, r0, #31
   14856:	2800      	cmp	r0, #0
   14858:	d0ec      	beq.n	14834 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   1485a:	e7ff      	b.n	1485c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0xa2>
   1485c:	2000      	movs	r0, #0
   1485e:	f88d 0013 	strb.w	r0, [sp, #19]
   14862:	e7e7      	b.n	14834 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>

00014864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>:
   14864:	b082      	sub	sp, #8
   14866:	2001      	movs	r0, #1
   14868:	f88d 0003 	strb.w	r0, [sp, #3]
   1486c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14870:	b002      	add	sp, #8
   14872:	4770      	bx	lr

00014874 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>:
        self.style.stroke_width = width;

        self
    }

    fn fill(mut self, color: Option<C>) -> Self {
   14874:	b5b0      	push	{r4, r5, r7, lr}
   14876:	b081      	sub	sp, #4
   14878:	469c      	mov	ip, r3
   1487a:	4696      	mov	lr, r2
   1487c:	f8ad 2000 	strh.w	r2, [sp]
   14880:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
   14884:	820a      	strh	r2, [r1, #16]
   14886:	824b      	strh	r3, [r1, #18]

        self
   14888:	c91c      	ldmia	r1!, {r2, r3, r4}
   1488a:	c01c      	stmia	r0!, {r2, r3, r4}
   1488c:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
   14890:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
   14894:	b001      	add	sp, #4
   14896:	bdb0      	pop	{r4, r5, r7, pc}

00014898 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>:
    pub fn new(top_left: Coord, bottom_right: Coord) -> Self {
   14898:	b510      	push	{r4, lr}
   1489a:	b08c      	sub	sp, #48	; 0x30
   1489c:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   148a0:	9108      	str	r1, [sp, #32]
   148a2:	9209      	str	r2, [sp, #36]	; 0x24
   148a4:	930a      	str	r3, [sp, #40]	; 0x28
   148a6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   148aa:	f10d 0e14 	add.w	lr, sp, #20
            style: Style::default(),
   148ae:	9004      	str	r0, [sp, #16]
   148b0:	4670      	mov	r0, lr
   148b2:	9303      	str	r3, [sp, #12]
   148b4:	9202      	str	r2, [sp, #8]
   148b6:	9101      	str	r1, [sp, #4]
   148b8:	f8cd c000 	str.w	ip, [sp]
   148bc:	f000 f818 	bl	148f0 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
   148c0:	e7ff      	b.n	148c2 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E+0x2a>
        Rectangle {
   148c2:	9801      	ldr	r0, [sp, #4]
   148c4:	9904      	ldr	r1, [sp, #16]
   148c6:	6008      	str	r0, [r1, #0]
   148c8:	9a02      	ldr	r2, [sp, #8]
   148ca:	604a      	str	r2, [r1, #4]
   148cc:	9b03      	ldr	r3, [sp, #12]
   148ce:	608b      	str	r3, [r1, #8]
   148d0:	f8dd c000 	ldr.w	ip, [sp]
   148d4:	f8c1 c00c 	str.w	ip, [r1, #12]
   148d8:	f8bd e01c 	ldrh.w	lr, [sp, #28]
   148dc:	f8a1 e018 	strh.w	lr, [r1, #24]
   148e0:	f8dd e014 	ldr.w	lr, [sp, #20]
   148e4:	9c06      	ldr	r4, [sp, #24]
   148e6:	614c      	str	r4, [r1, #20]
   148e8:	f8c1 e010 	str.w	lr, [r1, #16]
    }
   148ec:	b00c      	add	sp, #48	; 0x30
   148ee:	bd10      	pop	{r4, pc}

000148f0 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>:

impl<P> Default for Style<P>
where
    P: PixelColor,
{
    fn default() -> Self {
   148f0:	b082      	sub	sp, #8
   148f2:	2100      	movs	r1, #0
        Self {
            fill_color: None,
   148f4:	f8ad 1000 	strh.w	r1, [sp]
            stroke_color: None,
   148f8:	f8ad 1004 	strh.w	r1, [sp, #4]
        Self {
   148fc:	f8bd 1000 	ldrh.w	r1, [sp]
   14900:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   14904:	8001      	strh	r1, [r0, #0]
   14906:	8042      	strh	r2, [r0, #2]
   14908:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1490c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   14910:	8081      	strh	r1, [r0, #4]
   14912:	80c2      	strh	r2, [r0, #6]
   14914:	2101      	movs	r1, #1
   14916:	7201      	strb	r1, [r0, #8]
            stroke_width: 1,
        }
    }
   14918:	b002      	add	sp, #8
   1491a:	4770      	bx	lr

0001491c <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>:
   1491c:	b084      	sub	sp, #16
   1491e:	460a      	mov	r2, r1
   14920:	4603      	mov	r3, r0
   14922:	9103      	str	r1, [sp, #12]
   14924:	9002      	str	r0, [sp, #8]
   14926:	b004      	add	sp, #16
   14928:	4770      	bx	lr

0001492a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E>:
            .expect("spi flush fail");
        Ok(())
    }

    /// Sets pixel colors at the given drawing window
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
   1492a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1492c:	b091      	sub	sp, #68	; 0x44
   1492e:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
   14932:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
   14936:	461c      	mov	r4, r3
   14938:	4615      	mov	r5, r2
   1493a:	460e      	mov	r6, r1
   1493c:	900a      	str	r0, [sp, #40]	; 0x28
   1493e:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
   14942:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
   14946:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   1494a:	f8ad e032 	strh.w	lr, [sp, #50]	; 0x32
   1494e:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
   14950:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
   14954:	2701      	movs	r7, #1
   14956:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
   1495a:	466f      	mov	r7, sp
   1495c:	f8c7 e000 	str.w	lr, [r7]
   14960:	9008      	str	r0, [sp, #32]
   14962:	f8cd c01c 	str.w	ip, [sp, #28]
   14966:	9406      	str	r4, [sp, #24]
   14968:	9505      	str	r5, [sp, #20]
   1496a:	9604      	str	r6, [sp, #16]
   1496c:	f7f5 f8f1 	bl	9b52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
   14970:	9003      	str	r0, [sp, #12]
   14972:	e7ff      	b.n	14974 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x4a>
   14974:	9803      	ldr	r0, [sp, #12]
   14976:	f000 0001 	and.w	r0, r0, #1
   1497a:	f7f4 f97b 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1497e:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
   14982:	e7ff      	b.n	14984 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x5a>
   14984:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
   14988:	07c1      	lsls	r1, r0, #31
   1498a:	2900      	cmp	r1, #0
   1498c:	d001      	beq.n	14992 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x68>
   1498e:	e7ff      	b.n	14990 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x66>
   14990:	e009      	b.n	149a6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x7c>
   14992:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
   14994:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   14998:	9808      	ldr	r0, [sp, #32]
   1499a:	9907      	ldr	r1, [sp, #28]
   1499c:	f000 f848 	bl	14a30 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E>
   149a0:	9002      	str	r0, [sp, #8]
   149a2:	e00d      	b.n	149c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x96>
        self.set_address_window(sx, sy, ex, ey)?;
   149a4:	defe      	udf	#254	; 0xfe
   149a6:	f7fd fad4 	bl	11f52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
   149aa:	e003      	b.n	149b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x8a>

        #[cfg(feature = "noblock_spi")]         //  If non-blocking SPI is enabled...
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }
   149ac:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   149b0:	b011      	add	sp, #68	; 0x44
   149b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
   149b4:	f7ff ff56 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   149b8:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   149bc:	e7ff      	b.n	149be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x94>
   149be:	e031      	b.n	14a24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xfa>
        self.write_pixels(colors) ? ;
   149c0:	9802      	ldr	r0, [sp, #8]
   149c2:	f000 0001 	and.w	r0, r0, #1
   149c6:	f7f4 f955 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   149ca:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
   149ce:	e7ff      	b.n	149d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xa6>
   149d0:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   149d4:	07c1      	lsls	r1, r0, #31
   149d6:	2900      	cmp	r1, #0
   149d8:	d001      	beq.n	149de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xb4>
   149da:	e7ff      	b.n	149dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xb2>
   149dc:	e004      	b.n	149e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xbe>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   149de:	f7fe fd07 	bl	133f0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   149e2:	9001      	str	r0, [sp, #4]
   149e4:	e009      	b.n	149fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xd0>
        self.write_pixels(colors) ? ;
   149e6:	defe      	udf	#254	; 0xfe
   149e8:	f7fd fab3 	bl	11f52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
   149ec:	e7ff      	b.n	149ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xc4>
   149ee:	f7ff ff39 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   149f2:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   149f6:	e7ff      	b.n	149f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xce>
   149f8:	e014      	b.n	14a24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xfa>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   149fa:	f644 61a0 	movw	r1, #20128	; 0x4ea0
   149fe:	f2c0 0102 	movt	r1, #2
   14a02:	f644 63fc 	movw	r3, #20220	; 0x4efc
   14a06:	f2c0 0302 	movt	r3, #2
   14a0a:	220e      	movs	r2, #14
   14a0c:	9801      	ldr	r0, [sp, #4]
   14a0e:	f7f4 f8f8 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   14a12:	e7ff      	b.n	14a14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xea>
   14a14:	2000      	movs	r0, #0
        Ok(())
   14a16:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    }
   14a1a:	e7c7      	b.n	149ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x82>
   14a1c:	2000      	movs	r0, #0
   14a1e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   14a22:	e7c3      	b.n	149ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x82>
   14a24:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   14a28:	07c0      	lsls	r0, r0, #31
   14a2a:	2800      	cmp	r0, #0
   14a2c:	d1f6      	bne.n	14a1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xf2>
   14a2e:	e7bd      	b.n	149ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x82>

00014a30 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
   14a30:	b580      	push	{r7, lr}
   14a32:	b094      	sub	sp, #80	; 0x50
   14a34:	900d      	str	r0, [sp, #52]	; 0x34
   14a36:	910e      	str	r1, [sp, #56]	; 0x38
   14a38:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
   14a3a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   14a3e:	2301      	movs	r3, #1
   14a40:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   14a44:	232c      	movs	r3, #44	; 0x2c
   14a46:	f88d 301f 	strb.w	r3, [sp, #31]
   14a4a:	9209      	str	r2, [sp, #36]	; 0x24
   14a4c:	9208      	str	r2, [sp, #32]
   14a4e:	9208      	str	r2, [sp, #32]
   14a50:	9a08      	ldr	r2, [sp, #32]
   14a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14a54:	f89d c01f 	ldrb.w	ip, [sp, #31]
   14a58:	9006      	str	r0, [sp, #24]
   14a5a:	9105      	str	r1, [sp, #20]
   14a5c:	4661      	mov	r1, ip
   14a5e:	f7f4 ff87 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   14a62:	9004      	str	r0, [sp, #16]
   14a64:	e7ff      	b.n	14a66 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x36>
   14a66:	9804      	ldr	r0, [sp, #16]
   14a68:	f000 0001 	and.w	r0, r0, #1
   14a6c:	f7f4 f902 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   14a70:	f88d 001e 	strb.w	r0, [sp, #30]
   14a74:	e7ff      	b.n	14a76 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x46>
   14a76:	f89d 001e 	ldrb.w	r0, [sp, #30]
   14a7a:	07c1      	lsls	r1, r0, #31
   14a7c:	2900      	cmp	r1, #0
   14a7e:	d001      	beq.n	14a84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x54>
   14a80:	e7ff      	b.n	14a82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x52>
   14a82:	e008      	b.n	14a96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x66>
   14a84:	2000      	movs	r0, #0
        for color in colors {
   14a86:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   14a8a:	9805      	ldr	r0, [sp, #20]
   14a8c:	f000 f8ee 	bl	14c6c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h48c974e346f24094E>
   14a90:	9003      	str	r0, [sp, #12]
   14a92:	e00d      	b.n	14ab0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x80>
        self.write_command(Instruction::RAMWR, None)?;
   14a94:	defe      	udf	#254	; 0xfe
   14a96:	f7fd fa5c 	bl	11f52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
   14a9a:	e003      	b.n	14aa4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x74>
    }
   14a9c:	f89d 001d 	ldrb.w	r0, [sp, #29]
   14aa0:	b014      	add	sp, #80	; 0x50
   14aa2:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
   14aa4:	f7ff fede 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   14aa8:	f88d 001d 	strb.w	r0, [sp, #29]
   14aac:	e7ff      	b.n	14aae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x7e>
   14aae:	e057      	b.n	14b60 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x130>
        for color in colors {
   14ab0:	9803      	ldr	r0, [sp, #12]
   14ab2:	900a      	str	r0, [sp, #40]	; 0x28
   14ab4:	e7ff      	b.n	14ab6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x86>
   14ab6:	a80a      	add	r0, sp, #40	; 0x28
   14ab8:	f000 f8dc 	bl	14c74 <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3601a500030acd5E>
   14abc:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
   14ac0:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
   14ac4:	e7ff      	b.n	14ac6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x96>
   14ac6:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
   14aca:	4601      	mov	r1, r0
   14acc:	2800      	cmp	r0, #0
   14ace:	d001      	beq.n	14ad4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xa4>
   14ad0:	e7ff      	b.n	14ad2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xa2>
   14ad2:	e001      	b.n	14ad8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xa8>
        }
   14ad4:	e02b      	b.n	14b2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xfe>
        for color in colors {
   14ad6:	defe      	udf	#254	; 0xfe
   14ad8:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
   14adc:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
   14ae0:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
   14ae4:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
            self.write_word(color)?;
   14ae8:	9906      	ldr	r1, [sp, #24]
   14aea:	9002      	str	r0, [sp, #8]
   14aec:	4608      	mov	r0, r1
   14aee:	9902      	ldr	r1, [sp, #8]
   14af0:	f7f4 ff20 	bl	9934 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   14af4:	9001      	str	r0, [sp, #4]
   14af6:	e7ff      	b.n	14af8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xc8>
   14af8:	9801      	ldr	r0, [sp, #4]
   14afa:	f000 0001 	and.w	r0, r0, #1
   14afe:	f7f4 f8b9 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   14b02:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   14b06:	e7ff      	b.n	14b08 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xd8>
   14b08:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
   14b0c:	07c1      	lsls	r1, r0, #31
   14b0e:	2900      	cmp	r1, #0
   14b10:	d001      	beq.n	14b16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xe6>
   14b12:	e7ff      	b.n	14b14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xe4>
   14b14:	e001      	b.n	14b1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xea>
        for color in colors {
   14b16:	e7ce      	b.n	14ab6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x86>
            self.write_word(color)?;
   14b18:	defe      	udf	#254	; 0xfe
   14b1a:	f7fd fa1a 	bl	11f52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
   14b1e:	e7ff      	b.n	14b20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xf0>
   14b20:	f7ff fea0 	bl	14864 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   14b24:	f88d 001d 	strb.w	r0, [sp, #29]
   14b28:	e7ff      	b.n	14b2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xfa>
        }
   14b2a:	e7ff      	b.n	14b2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xfc>
    }
   14b2c:	e018      	b.n	14b60 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x130>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   14b2e:	f7fe fc5f 	bl	133f0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   14b32:	9000      	str	r0, [sp, #0]
   14b34:	e7ff      	b.n	14b36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x106>
   14b36:	f644 61a0 	movw	r1, #20128	; 0x4ea0
   14b3a:	f2c0 0102 	movt	r1, #2
   14b3e:	f644 730c 	movw	r3, #20236	; 0x4f0c
   14b42:	f2c0 0302 	movt	r3, #2
   14b46:	220e      	movs	r2, #14
   14b48:	9800      	ldr	r0, [sp, #0]
   14b4a:	f7f4 f85a 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   14b4e:	e7ff      	b.n	14b50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x120>
   14b50:	2000      	movs	r0, #0
        Ok(())
   14b52:	f88d 001d 	strb.w	r0, [sp, #29]
    }
   14b56:	e7a1      	b.n	14a9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x6c>
   14b58:	2000      	movs	r0, #0
   14b5a:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   14b5e:	e79d      	b.n	14a9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x6c>
   14b60:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   14b64:	07c0      	lsls	r0, r0, #31
   14b66:	2800      	cmp	r0, #0
   14b68:	d1f6      	bne.n	14b58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x128>
   14b6a:	e797      	b.n	14a9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x6c>

00014b6c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE>:
   14b6c:	b083      	sub	sp, #12
   14b6e:	9002      	str	r0, [sp, #8]
   14b70:	9000      	str	r0, [sp, #0]
   14b72:	e7ff      	b.n	14b74 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x8>
   14b74:	9800      	ldr	r0, [sp, #0]
   14b76:	28ff      	cmp	r0, #255	; 0xff
   14b78:	d807      	bhi.n	14b8a <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x1e>
   14b7a:	e7ff      	b.n	14b7c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x10>
   14b7c:	9800      	ldr	r0, [sp, #0]
   14b7e:	f88d 0005 	strb.w	r0, [sp, #5]
   14b82:	2100      	movs	r1, #0
   14b84:	f88d 1004 	strb.w	r1, [sp, #4]
   14b88:	e003      	b.n	14b92 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x26>
   14b8a:	2001      	movs	r0, #1
   14b8c:	f88d 0004 	strb.w	r0, [sp, #4]
   14b90:	e7ff      	b.n	14b92 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x26>
   14b92:	f89d 0004 	ldrb.w	r0, [sp, #4]
   14b96:	f89d 1005 	ldrb.w	r1, [sp, #5]
   14b9a:	b003      	add	sp, #12
   14b9c:	4770      	bx	lr

00014b9e <_ZN4core3cmp3Ord3min17hc89b724701767be9E>:
   14b9e:	b580      	push	{r7, lr}
   14ba0:	b084      	sub	sp, #16
   14ba2:	460a      	mov	r2, r1
   14ba4:	4603      	mov	r3, r0
   14ba6:	f88d 000e 	strb.w	r0, [sp, #14]
   14baa:	f88d 100f 	strb.w	r1, [sp, #15]
   14bae:	9202      	str	r2, [sp, #8]
   14bb0:	9301      	str	r3, [sp, #4]
   14bb2:	f000 f805 	bl	14bc0 <_ZN4core3cmp6min_by17hbd80813895a56a69E>
   14bb6:	9000      	str	r0, [sp, #0]
   14bb8:	e7ff      	b.n	14bba <_ZN4core3cmp3Ord3min17hc89b724701767be9E+0x1c>
   14bba:	9800      	ldr	r0, [sp, #0]
   14bbc:	b004      	add	sp, #16
   14bbe:	bd80      	pop	{r7, pc}

00014bc0 <_ZN4core3cmp6min_by17hbd80813895a56a69E>:
   14bc0:	b580      	push	{r7, lr}
   14bc2:	b088      	sub	sp, #32
   14bc4:	460a      	mov	r2, r1
   14bc6:	4603      	mov	r3, r0
   14bc8:	f88d 000c 	strb.w	r0, [sp, #12]
   14bcc:	f88d 100d 	strb.w	r1, [sp, #13]
   14bd0:	2000      	movs	r0, #0
   14bd2:	f88d 001b 	strb.w	r0, [sp, #27]
   14bd6:	f88d 001a 	strb.w	r0, [sp, #26]
   14bda:	2001      	movs	r0, #1
   14bdc:	f88d 001b 	strb.w	r0, [sp, #27]
   14be0:	f88d 001a 	strb.w	r0, [sp, #26]
   14be4:	a803      	add	r0, sp, #12
   14be6:	9004      	str	r0, [sp, #16]
   14be8:	f10d 000d 	add.w	r0, sp, #13
   14bec:	9005      	str	r0, [sp, #20]
   14bee:	9804      	ldr	r0, [sp, #16]
   14bf0:	9905      	ldr	r1, [sp, #20]
   14bf2:	9202      	str	r2, [sp, #8]
   14bf4:	9301      	str	r3, [sp, #4]
   14bf6:	f7fc fbb6 	bl	11366 <_ZN4core3ops8function6FnOnce9call_once17h59e116d6918016e9E>
   14bfa:	f88d 000f 	strb.w	r0, [sp, #15]
   14bfe:	e7ff      	b.n	14c00 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x40>
   14c00:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   14c04:	1c41      	adds	r1, r0, #1
   14c06:	2902      	cmp	r1, #2
   14c08:	d309      	bcc.n	14c1e <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x5e>
   14c0a:	e7ff      	b.n	14c0c <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x4c>
   14c0c:	2000      	movs	r0, #0
   14c0e:	f88d 001a 	strb.w	r0, [sp, #26]
   14c12:	f89d 000d 	ldrb.w	r0, [sp, #13]
   14c16:	f88d 000e 	strb.w	r0, [sp, #14]
   14c1a:	e008      	b.n	14c2e <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x6e>
   14c1c:	defe      	udf	#254	; 0xfe
   14c1e:	2000      	movs	r0, #0
   14c20:	f88d 001b 	strb.w	r0, [sp, #27]
   14c24:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14c28:	f88d 000e 	strb.w	r0, [sp, #14]
   14c2c:	e7ff      	b.n	14c2e <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x6e>
   14c2e:	f89d 001a 	ldrb.w	r0, [sp, #26]
   14c32:	07c0      	lsls	r0, r0, #31
   14c34:	2800      	cmp	r0, #0
   14c36:	d10a      	bne.n	14c4e <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x8e>
   14c38:	e7ff      	b.n	14c3a <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x7a>
   14c3a:	f89d 001b 	ldrb.w	r0, [sp, #27]
   14c3e:	07c0      	lsls	r0, r0, #31
   14c40:	2800      	cmp	r0, #0
   14c42:	d108      	bne.n	14c56 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x96>
   14c44:	e7ff      	b.n	14c46 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x86>
   14c46:	f89d 000e 	ldrb.w	r0, [sp, #14]
   14c4a:	b008      	add	sp, #32
   14c4c:	bd80      	pop	{r7, pc}
   14c4e:	2000      	movs	r0, #0
   14c50:	f88d 001a 	strb.w	r0, [sp, #26]
   14c54:	e7f1      	b.n	14c3a <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x7a>
   14c56:	2000      	movs	r0, #0
   14c58:	f88d 001b 	strb.w	r0, [sp, #27]
   14c5c:	e7f3      	b.n	14c46 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x86>

00014c5e <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h8e5f04233c93701aE>:
   14c5e:	b081      	sub	sp, #4
   14c60:	4601      	mov	r1, r0
   14c62:	f88d 0003 	strb.w	r0, [sp, #3]
   14c66:	b2c0      	uxtb	r0, r0
   14c68:	b001      	add	sp, #4
   14c6a:	4770      	bx	lr

00014c6c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h48c974e346f24094E>:
   14c6c:	b081      	sub	sp, #4
   14c6e:	9000      	str	r0, [sp, #0]
   14c70:	b001      	add	sp, #4
   14c72:	4770      	bx	lr

00014c74 <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3601a500030acd5E>:
   14c74:	b580      	push	{r7, lr}
   14c76:	b084      	sub	sp, #16
   14c78:	9003      	str	r0, [sp, #12]
   14c7a:	6800      	ldr	r0, [r0, #0]
   14c7c:	f7fb fa73 	bl	10166 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE>
   14c80:	9002      	str	r0, [sp, #8]
   14c82:	9101      	str	r1, [sp, #4]
   14c84:	e7ff      	b.n	14c86 <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3601a500030acd5E+0x12>
   14c86:	9802      	ldr	r0, [sp, #8]
   14c88:	9901      	ldr	r1, [sp, #4]
   14c8a:	b004      	add	sp, #16
   14c8c:	bd80      	pop	{r7, pc}

00014c8e <_ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E>:
   14c8e:	b580      	push	{r7, lr}
   14c90:	b08c      	sub	sp, #48	; 0x30
   14c92:	9005      	str	r0, [sp, #20]
   14c94:	9106      	str	r1, [sp, #24]
   14c96:	9207      	str	r2, [sp, #28]
   14c98:	9008      	str	r0, [sp, #32]
   14c9a:	9109      	str	r1, [sp, #36]	; 0x24
   14c9c:	2301      	movs	r3, #1
   14c9e:	930b      	str	r3, [sp, #44]	; 0x2c
   14ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14ca2:	9204      	str	r2, [sp, #16]
   14ca4:	9103      	str	r1, [sp, #12]
   14ca6:	9002      	str	r0, [sp, #8]
   14ca8:	9301      	str	r3, [sp, #4]
   14caa:	e7ff      	b.n	14cac <_ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E+0x1e>
   14cac:	9801      	ldr	r0, [sp, #4]
   14cae:	9904      	ldr	r1, [sp, #16]
   14cb0:	fb00 f201 	mul.w	r2, r0, r1
   14cb4:	920a      	str	r2, [sp, #40]	; 0x28
   14cb6:	9802      	ldr	r0, [sp, #8]
   14cb8:	9903      	ldr	r1, [sp, #12]
   14cba:	f000 fb87 	bl	153cc <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E>
   14cbe:	e7ff      	b.n	14cc0 <_ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E+0x32>
   14cc0:	b00c      	add	sp, #48	; 0x30
   14cc2:	bd80      	pop	{r7, pc}

00014cc4 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E>:
   14cc4:	b580      	push	{r7, lr}
   14cc6:	b088      	sub	sp, #32
   14cc8:	9004      	str	r0, [sp, #16]
   14cca:	9105      	str	r1, [sp, #20]
   14ccc:	2201      	movs	r2, #1
   14cce:	9207      	str	r2, [sp, #28]
   14cd0:	9a07      	ldr	r2, [sp, #28]
   14cd2:	9103      	str	r1, [sp, #12]
   14cd4:	9002      	str	r0, [sp, #8]
   14cd6:	9201      	str	r2, [sp, #4]
   14cd8:	e7ff      	b.n	14cda <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x16>
   14cda:	9801      	ldr	r0, [sp, #4]
   14cdc:	2820      	cmp	r0, #32
   14cde:	d306      	bcc.n	14cee <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x2a>
   14ce0:	e7ff      	b.n	14ce2 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x1e>
   14ce2:	2201      	movs	r2, #1
   14ce4:	9802      	ldr	r0, [sp, #8]
   14ce6:	9903      	ldr	r1, [sp, #12]
   14ce8:	f7ff ffd1 	bl	14c8e <_ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E>
   14cec:	e013      	b.n	14d16 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x52>
   14cee:	9802      	ldr	r0, [sp, #8]
   14cf0:	f000 f814 	bl	14d1c <_ZN4core3ptr4read17h9c6a8e2989f962ccE>
   14cf4:	4601      	mov	r1, r0
   14cf6:	f88d 001b 	strb.w	r0, [sp, #27]
   14cfa:	9100      	str	r1, [sp, #0]
   14cfc:	e7ff      	b.n	14cfe <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x3a>
   14cfe:	2201      	movs	r2, #1
   14d00:	9803      	ldr	r0, [sp, #12]
   14d02:	9902      	ldr	r1, [sp, #8]
   14d04:	f7fc fdf3 	bl	118ee <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14d08:	e7ff      	b.n	14d0a <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x46>
   14d0a:	9803      	ldr	r0, [sp, #12]
   14d0c:	9900      	ldr	r1, [sp, #0]
   14d0e:	f7f4 fa4b 	bl	91a8 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   14d12:	e7ff      	b.n	14d14 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x50>
   14d14:	e000      	b.n	14d18 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x54>
   14d16:	e7ff      	b.n	14d18 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x54>
   14d18:	b008      	add	sp, #32
   14d1a:	bd80      	pop	{r7, pc}

00014d1c <_ZN4core3ptr4read17h9c6a8e2989f962ccE>:
   14d1c:	b580      	push	{r7, lr}
   14d1e:	b088      	sub	sp, #32
   14d20:	9004      	str	r0, [sp, #16]
   14d22:	f89d 1015 	ldrb.w	r1, [sp, #21]
   14d26:	f88d 100f 	strb.w	r1, [sp, #15]
   14d2a:	9002      	str	r0, [sp, #8]
   14d2c:	e7ff      	b.n	14d2e <_ZN4core3ptr4read17h9c6a8e2989f962ccE+0x12>
   14d2e:	f10d 000f 	add.w	r0, sp, #15
   14d32:	9006      	str	r0, [sp, #24]
   14d34:	9007      	str	r0, [sp, #28]
   14d36:	e7ff      	b.n	14d38 <_ZN4core3ptr4read17h9c6a8e2989f962ccE+0x1c>
   14d38:	f10d 010f 	add.w	r1, sp, #15
   14d3c:	2201      	movs	r2, #1
   14d3e:	9802      	ldr	r0, [sp, #8]
   14d40:	f7fc fdd5 	bl	118ee <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14d44:	e7ff      	b.n	14d46 <_ZN4core3ptr4read17h9c6a8e2989f962ccE+0x2a>
   14d46:	f89d 000f 	ldrb.w	r0, [sp, #15]
   14d4a:	4601      	mov	r1, r0
   14d4c:	f88d 0016 	strb.w	r0, [sp, #22]
   14d50:	f88d 0017 	strb.w	r0, [sp, #23]
   14d54:	9101      	str	r1, [sp, #4]
   14d56:	e7ff      	b.n	14d58 <_ZN4core3ptr4read17h9c6a8e2989f962ccE+0x3c>
   14d58:	9801      	ldr	r0, [sp, #4]
   14d5a:	b008      	add	sp, #32
   14d5c:	bd80      	pop	{r7, pc}

00014d5e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   14d5e:	b580      	push	{r7, lr}
   14d60:	b088      	sub	sp, #32
   14d62:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   14d64:	1d01      	adds	r1, r0, #4
   14d66:	9106      	str	r1, [sp, #24]
   14d68:	9107      	str	r1, [sp, #28]
   14d6a:	9004      	str	r0, [sp, #16]
   14d6c:	9103      	str	r1, [sp, #12]
   14d6e:	e7ff      	b.n	14d70 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x12>
   14d70:	9804      	ldr	r0, [sp, #16]
   14d72:	6801      	ldr	r1, [r0, #0]
   14d74:	9803      	ldr	r0, [sp, #12]
   14d76:	f7f4 f871 	bl	8e5c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   14d7a:	9002      	str	r0, [sp, #8]
   14d7c:	9101      	str	r1, [sp, #4]
   14d7e:	e7ff      	b.n	14d80 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x22>
    }
   14d80:	9802      	ldr	r0, [sp, #8]
   14d82:	9901      	ldr	r1, [sp, #4]
   14d84:	b008      	add	sp, #32
   14d86:	bd80      	pop	{r7, pc}

00014d88 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   14d88:	b580      	push	{r7, lr}
   14d8a:	b088      	sub	sp, #32
   14d8c:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   14d8e:	1d01      	adds	r1, r0, #4
   14d90:	9106      	str	r1, [sp, #24]
   14d92:	9107      	str	r1, [sp, #28]
   14d94:	9004      	str	r0, [sp, #16]
   14d96:	9103      	str	r1, [sp, #12]
   14d98:	e7ff      	b.n	14d9a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x12>
   14d9a:	9804      	ldr	r0, [sp, #16]
   14d9c:	6801      	ldr	r1, [r0, #0]
   14d9e:	9803      	ldr	r0, [sp, #12]
   14da0:	f7f4 f85c 	bl	8e5c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   14da4:	9002      	str	r0, [sp, #8]
   14da6:	9101      	str	r1, [sp, #4]
   14da8:	e7ff      	b.n	14daa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x22>
    }
   14daa:	9802      	ldr	r0, [sp, #8]
   14dac:	9901      	ldr	r1, [sp, #4]
   14dae:	b008      	add	sp, #32
   14db0:	bd80      	pop	{r7, pc}

00014db2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   14db2:	b580      	push	{r7, lr}
   14db4:	b08a      	sub	sp, #40	; 0x28
   14db6:	460a      	mov	r2, r1
   14db8:	9006      	str	r0, [sp, #24]
   14dba:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   14dbe:	1d01      	adds	r1, r0, #4
   14dc0:	9108      	str	r1, [sp, #32]
   14dc2:	9109      	str	r1, [sp, #36]	; 0x24
   14dc4:	9005      	str	r0, [sp, #20]
   14dc6:	9204      	str	r2, [sp, #16]
   14dc8:	9103      	str	r1, [sp, #12]
   14dca:	e7ff      	b.n	14dcc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x1a>
            .add(self.len)
   14dcc:	9805      	ldr	r0, [sp, #20]
   14dce:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   14dd0:	9803      	ldr	r0, [sp, #12]
   14dd2:	f7fc fef0 	bl	11bb6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   14dd6:	9002      	str	r0, [sp, #8]
   14dd8:	e7ff      	b.n	14dda <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x28>
   14dda:	9802      	ldr	r0, [sp, #8]
   14ddc:	9904      	ldr	r1, [sp, #16]
   14dde:	f000 f994 	bl	1510a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   14de2:	e7ff      	b.n	14de4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x32>
        self.len += 1;
   14de4:	9805      	ldr	r0, [sp, #20]
   14de6:	6801      	ldr	r1, [r0, #0]
   14de8:	1c4a      	adds	r2, r1, #1
   14dea:	4613      	mov	r3, r2
   14dec:	428a      	cmp	r2, r1
   14dee:	9301      	str	r3, [sp, #4]
   14df0:	d305      	bcc.n	14dfe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x4c>
   14df2:	e7ff      	b.n	14df4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x42>
   14df4:	9801      	ldr	r0, [sp, #4]
   14df6:	9905      	ldr	r1, [sp, #20]
   14df8:	6008      	str	r0, [r1, #0]
    }
   14dfa:	b00a      	add	sp, #40	; 0x28
   14dfc:	bd80      	pop	{r7, pc}
        self.len += 1;
   14dfe:	f644 7090 	movw	r0, #20368	; 0x4f90
   14e02:	f2c0 0002 	movt	r0, #2
   14e06:	f644 7274 	movw	r2, #20340	; 0x4f74
   14e0a:	f2c0 0202 	movt	r2, #2
   14e0e:	211c      	movs	r1, #28
   14e10:	f000 fc60 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14e14:	defe      	udf	#254	; 0xfe

00014e16 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   14e16:	b580      	push	{r7, lr}
   14e18:	b08a      	sub	sp, #40	; 0x28
   14e1a:	460a      	mov	r2, r1
   14e1c:	9006      	str	r0, [sp, #24]
   14e1e:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   14e22:	1d01      	adds	r1, r0, #4
   14e24:	9108      	str	r1, [sp, #32]
   14e26:	9109      	str	r1, [sp, #36]	; 0x24
   14e28:	9005      	str	r0, [sp, #20]
   14e2a:	9204      	str	r2, [sp, #16]
   14e2c:	9103      	str	r1, [sp, #12]
   14e2e:	e7ff      	b.n	14e30 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x1a>
            .add(self.len)
   14e30:	9805      	ldr	r0, [sp, #20]
   14e32:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   14e34:	9803      	ldr	r0, [sp, #12]
   14e36:	f7fc febe 	bl	11bb6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   14e3a:	9002      	str	r0, [sp, #8]
   14e3c:	e7ff      	b.n	14e3e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x28>
   14e3e:	9802      	ldr	r0, [sp, #8]
   14e40:	9904      	ldr	r1, [sp, #16]
   14e42:	f000 f962 	bl	1510a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   14e46:	e7ff      	b.n	14e48 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x32>
        self.len += 1;
   14e48:	9805      	ldr	r0, [sp, #20]
   14e4a:	6801      	ldr	r1, [r0, #0]
   14e4c:	1c4a      	adds	r2, r1, #1
   14e4e:	4613      	mov	r3, r2
   14e50:	428a      	cmp	r2, r1
   14e52:	9301      	str	r3, [sp, #4]
   14e54:	d305      	bcc.n	14e62 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x4c>
   14e56:	e7ff      	b.n	14e58 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x42>
   14e58:	9801      	ldr	r0, [sp, #4]
   14e5a:	9905      	ldr	r1, [sp, #20]
   14e5c:	6008      	str	r0, [r1, #0]
    }
   14e5e:	b00a      	add	sp, #40	; 0x28
   14e60:	bd80      	pop	{r7, pc}
        self.len += 1;
   14e62:	f644 7090 	movw	r0, #20368	; 0x4f90
   14e66:	f2c0 0002 	movt	r0, #2
   14e6a:	f644 7274 	movw	r2, #20340	; 0x4f74
   14e6e:	f2c0 0202 	movt	r2, #2
   14e72:	211c      	movs	r1, #28
   14e74:	f000 fc2e 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14e78:	defe      	udf	#254	; 0xfe

00014e7a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14e7a:	b580      	push	{r7, lr}
   14e7c:	b094      	sub	sp, #80	; 0x50
   14e7e:	900e      	str	r0, [sp, #56]	; 0x38
   14e80:	910f      	str	r1, [sp, #60]	; 0x3c
   14e82:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   14e84:	6803      	ldr	r3, [r0, #0]
   14e86:	9009      	str	r0, [sp, #36]	; 0x24
   14e88:	4608      	mov	r0, r1
   14e8a:	9108      	str	r1, [sp, #32]
   14e8c:	4611      	mov	r1, r2
   14e8e:	9207      	str	r2, [sp, #28]
   14e90:	9306      	str	r3, [sp, #24]
   14e92:	f7fc ff20 	bl	11cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   14e96:	9005      	str	r0, [sp, #20]
   14e98:	e7ff      	b.n	14e9a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x20>
   14e9a:	9806      	ldr	r0, [sp, #24]
   14e9c:	9905      	ldr	r1, [sp, #20]
   14e9e:	1842      	adds	r2, r0, r1
   14ea0:	4613      	mov	r3, r2
   14ea2:	4282      	cmp	r2, r0
   14ea4:	9304      	str	r3, [sp, #16]
   14ea6:	d33f      	bcc.n	14f28 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xae>
   14ea8:	e7ff      	b.n	14eaa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x30>
   14eaa:	9809      	ldr	r0, [sp, #36]	; 0x24
   14eac:	f000 f8b7 	bl	1501e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   14eb0:	9003      	str	r0, [sp, #12]
   14eb2:	e7ff      	b.n	14eb4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x3a>
   14eb4:	9804      	ldr	r0, [sp, #16]
   14eb6:	9903      	ldr	r1, [sp, #12]
   14eb8:	4288      	cmp	r0, r1
   14eba:	d807      	bhi.n	14ecc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x52>
   14ebc:	e7ff      	b.n	14ebe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x44>
            for elem in other {
   14ebe:	9808      	ldr	r0, [sp, #32]
   14ec0:	9907      	ldr	r1, [sp, #28]
   14ec2:	f7f4 f8e9 	bl	9098 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>
   14ec6:	9002      	str	r0, [sp, #8]
   14ec8:	9101      	str	r1, [sp, #4]
   14eca:	e003      	b.n	14ed4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x5a>
   14ecc:	2001      	movs	r0, #1
            Err(())
   14ece:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14ed2:	e025      	b.n	14f20 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   14ed4:	9802      	ldr	r0, [sp, #8]
   14ed6:	900b      	str	r0, [sp, #44]	; 0x2c
   14ed8:	9901      	ldr	r1, [sp, #4]
   14eda:	910c      	str	r1, [sp, #48]	; 0x30
   14edc:	e7ff      	b.n	14ede <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
   14ede:	a80b      	add	r0, sp, #44	; 0x2c
   14ee0:	f7fc fbf4 	bl	116cc <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>
   14ee4:	900d      	str	r0, [sp, #52]	; 0x34
   14ee6:	e7ff      	b.n	14ee8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x6e>
   14ee8:	980d      	ldr	r0, [sp, #52]	; 0x34
   14eea:	2800      	cmp	r0, #0
   14eec:	4601      	mov	r1, r0
   14eee:	bf18      	it	ne
   14ef0:	2101      	movne	r1, #1
   14ef2:	2800      	cmp	r0, #0
   14ef4:	d001      	beq.n	14efa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x80>
   14ef6:	e7ff      	b.n	14ef8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x7e>
   14ef8:	e004      	b.n	14f04 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x8a>
   14efa:	2000      	movs	r0, #0
            Ok(())
   14efc:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14f00:	e00e      	b.n	14f20 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   14f02:	defe      	udf	#254	; 0xfe
   14f04:	980d      	ldr	r0, [sp, #52]	; 0x34
   14f06:	9011      	str	r0, [sp, #68]	; 0x44
   14f08:	9012      	str	r0, [sp, #72]	; 0x48
   14f0a:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   14f0c:	f000 f909 	bl	15122 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>
   14f10:	9000      	str	r0, [sp, #0]
   14f12:	e7ff      	b.n	14f14 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x9a>
   14f14:	9809      	ldr	r0, [sp, #36]	; 0x24
   14f16:	9900      	ldr	r1, [sp, #0]
   14f18:	f7ff ff7d 	bl	14e16 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>
   14f1c:	e7ff      	b.n	14f1e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa4>
            for elem in other {
   14f1e:	e7de      	b.n	14ede <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
    }
   14f20:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   14f24:	b014      	add	sp, #80	; 0x50
   14f26:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   14f28:	f644 7090 	movw	r0, #20368	; 0x4f90
   14f2c:	f2c0 0002 	movt	r0, #2
   14f30:	f644 72ac 	movw	r2, #20396	; 0x4fac
   14f34:	f2c0 0202 	movt	r2, #2
   14f38:	211c      	movs	r1, #28
   14f3a:	f000 fbcb 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14f3e:	defe      	udf	#254	; 0xfe

00014f40 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   14f40:	b580      	push	{r7, lr}
   14f42:	b088      	sub	sp, #32
   14f44:	460a      	mov	r2, r1
   14f46:	9006      	str	r0, [sp, #24]
   14f48:	f88d 101f 	strb.w	r1, [sp, #31]
        if self.len < self.capacity() {
   14f4c:	6801      	ldr	r1, [r0, #0]
   14f4e:	9004      	str	r0, [sp, #16]
   14f50:	9203      	str	r2, [sp, #12]
   14f52:	9102      	str	r1, [sp, #8]
   14f54:	f000 f859 	bl	1500a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>
   14f58:	9001      	str	r0, [sp, #4]
   14f5a:	e7ff      	b.n	14f5c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x1c>
   14f5c:	9802      	ldr	r0, [sp, #8]
   14f5e:	9901      	ldr	r1, [sp, #4]
   14f60:	4288      	cmp	r0, r1
   14f62:	d307      	bcc.n	14f74 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x34>
   14f64:	e7ff      	b.n	14f66 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x26>
            Err(item)
   14f66:	9803      	ldr	r0, [sp, #12]
   14f68:	f88d 0015 	strb.w	r0, [sp, #21]
   14f6c:	2101      	movs	r1, #1
   14f6e:	f88d 1014 	strb.w	r1, [sp, #20]
        if self.len < self.capacity() {
   14f72:	e008      	b.n	14f86 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
            unsafe { self.push_unchecked(item) }
   14f74:	9804      	ldr	r0, [sp, #16]
   14f76:	9903      	ldr	r1, [sp, #12]
   14f78:	f7ff ff1b 	bl	14db2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>
   14f7c:	e7ff      	b.n	14f7e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x3e>
   14f7e:	2000      	movs	r0, #0
            Ok(())
   14f80:	f88d 0014 	strb.w	r0, [sp, #20]
        if self.len < self.capacity() {
   14f84:	e7ff      	b.n	14f86 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
    }
   14f86:	f89d 0014 	ldrb.w	r0, [sp, #20]
   14f8a:	f89d 1015 	ldrb.w	r1, [sp, #21]
   14f8e:	b008      	add	sp, #32
   14f90:	bd80      	pop	{r7, pc}

00014f92 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>:
    pub(crate) fn clear(&mut self) {
   14f92:	b580      	push	{r7, lr}
   14f94:	b082      	sub	sp, #8
   14f96:	9001      	str	r0, [sp, #4]
   14f98:	2100      	movs	r1, #0
        self.truncate(0);
   14f9a:	f000 f880 	bl	1509e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>
   14f9e:	e7ff      	b.n	14fa0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E+0xe>
    }
   14fa0:	b002      	add	sp, #8
   14fa2:	bd80      	pop	{r7, pc}

00014fa4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>:
    pub(crate) fn clear(&mut self) {
   14fa4:	b580      	push	{r7, lr}
   14fa6:	b082      	sub	sp, #8
   14fa8:	9001      	str	r0, [sp, #4]
   14faa:	2100      	movs	r1, #0
        self.truncate(0);
   14fac:	f000 f841 	bl	15032 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>
   14fb0:	e7ff      	b.n	14fb2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E+0xe>
    }
   14fb2:	b002      	add	sp, #8
   14fb4:	bd80      	pop	{r7, pc}

00014fb6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   14fb6:	b580      	push	{r7, lr}
   14fb8:	b088      	sub	sp, #32
   14fba:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   14fbc:	1d01      	adds	r1, r0, #4
   14fbe:	9106      	str	r1, [sp, #24]
   14fc0:	9107      	str	r1, [sp, #28]
   14fc2:	9004      	str	r0, [sp, #16]
   14fc4:	9103      	str	r1, [sp, #12]
   14fc6:	e7ff      	b.n	14fc8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x12>
   14fc8:	9804      	ldr	r0, [sp, #16]
   14fca:	6801      	ldr	r1, [r0, #0]
   14fcc:	9803      	ldr	r0, [sp, #12]
   14fce:	f7fd fa96 	bl	124fe <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   14fd2:	9002      	str	r0, [sp, #8]
   14fd4:	9101      	str	r1, [sp, #4]
   14fd6:	e7ff      	b.n	14fd8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x22>
    }
   14fd8:	9802      	ldr	r0, [sp, #8]
   14fda:	9901      	ldr	r1, [sp, #4]
   14fdc:	b008      	add	sp, #32
   14fde:	bd80      	pop	{r7, pc}

00014fe0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   14fe0:	b580      	push	{r7, lr}
   14fe2:	b088      	sub	sp, #32
   14fe4:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   14fe6:	1d01      	adds	r1, r0, #4
   14fe8:	9106      	str	r1, [sp, #24]
   14fea:	9107      	str	r1, [sp, #28]
   14fec:	9004      	str	r0, [sp, #16]
   14fee:	9103      	str	r1, [sp, #12]
   14ff0:	e7ff      	b.n	14ff2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x12>
   14ff2:	9804      	ldr	r0, [sp, #16]
   14ff4:	6801      	ldr	r1, [r0, #0]
   14ff6:	9803      	ldr	r0, [sp, #12]
   14ff8:	f7fd fa81 	bl	124fe <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   14ffc:	9002      	str	r0, [sp, #8]
   14ffe:	9101      	str	r1, [sp, #4]
   15000:	e7ff      	b.n	15002 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x22>
    }
   15002:	9802      	ldr	r0, [sp, #8]
   15004:	9901      	ldr	r1, [sp, #4]
   15006:	b008      	add	sp, #32
   15008:	bd80      	pop	{r7, pc}

0001500a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>:
    pub(crate) fn capacity(&self) -> usize {
   1500a:	b580      	push	{r7, lr}
   1500c:	b082      	sub	sp, #8
   1500e:	9001      	str	r0, [sp, #4]
        N::to_usize()
   15010:	f000 f964 	bl	152dc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   15014:	9000      	str	r0, [sp, #0]
   15016:	e7ff      	b.n	15018 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E+0xe>
    }
   15018:	9800      	ldr	r0, [sp, #0]
   1501a:	b002      	add	sp, #8
   1501c:	bd80      	pop	{r7, pc}

0001501e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>:
    pub(crate) fn capacity(&self) -> usize {
   1501e:	b580      	push	{r7, lr}
   15020:	b082      	sub	sp, #8
   15022:	9001      	str	r0, [sp, #4]
        N::to_usize()
   15024:	f000 f8b2 	bl	1518c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>
   15028:	9000      	str	r0, [sp, #0]
   1502a:	e7ff      	b.n	1502c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE+0xe>
    }
   1502c:	9800      	ldr	r0, [sp, #0]
   1502e:	b002      	add	sp, #8
   15030:	bd80      	pop	{r7, pc}

00015032 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   15032:	b580      	push	{r7, lr}
   15034:	b08a      	sub	sp, #40	; 0x28
   15036:	9007      	str	r0, [sp, #28]
   15038:	9108      	str	r1, [sp, #32]
   1503a:	9106      	str	r1, [sp, #24]
   1503c:	9005      	str	r0, [sp, #20]
   1503e:	e7ff      	b.n	15040 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
            while len < self.len {
   15040:	9805      	ldr	r0, [sp, #20]
   15042:	6801      	ldr	r1, [r0, #0]
   15044:	9a06      	ldr	r2, [sp, #24]
   15046:	428a      	cmp	r2, r1
   15048:	d302      	bcc.n	15050 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1e>
   1504a:	e7ff      	b.n	1504c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1a>
    }
   1504c:	b00a      	add	sp, #40	; 0x28
   1504e:	bd80      	pop	{r7, pc}
                self.len -= 1;
   15050:	9805      	ldr	r0, [sp, #20]
   15052:	6801      	ldr	r1, [r0, #0]
   15054:	1e4a      	subs	r2, r1, #1
   15056:	2901      	cmp	r1, #1
   15058:	9204      	str	r2, [sp, #16]
   1505a:	d314      	bcc.n	15086 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x54>
   1505c:	e7ff      	b.n	1505e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x2c>
   1505e:	9804      	ldr	r0, [sp, #16]
   15060:	9905      	ldr	r1, [sp, #20]
   15062:	6008      	str	r0, [r1, #0]
                let len = self.len;
   15064:	680a      	ldr	r2, [r1, #0]
   15066:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   15068:	4608      	mov	r0, r1
   1506a:	9203      	str	r2, [sp, #12]
   1506c:	f7ff fe8c 	bl	14d88 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>
   15070:	9002      	str	r0, [sp, #8]
   15072:	9101      	str	r1, [sp, #4]
   15074:	e7ff      	b.n	15076 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x44>
   15076:	9802      	ldr	r0, [sp, #8]
   15078:	9901      	ldr	r1, [sp, #4]
   1507a:	9a03      	ldr	r2, [sp, #12]
   1507c:	f7fc fe19 	bl	11cb2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   15080:	e7ff      	b.n	15082 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x50>
   15082:	e7ff      	b.n	15084 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x52>
            while len < self.len {
   15084:	e7dc      	b.n	15040 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
                self.len -= 1;
   15086:	f644 70d0 	movw	r0, #20432	; 0x4fd0
   1508a:	f2c0 0002 	movt	r0, #2
   1508e:	f644 72bc 	movw	r2, #20412	; 0x4fbc
   15092:	f2c0 0202 	movt	r2, #2
   15096:	2121      	movs	r1, #33	; 0x21
   15098:	f000 fb1c 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1509c:	defe      	udf	#254	; 0xfe

0001509e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   1509e:	b580      	push	{r7, lr}
   150a0:	b08a      	sub	sp, #40	; 0x28
   150a2:	9007      	str	r0, [sp, #28]
   150a4:	9108      	str	r1, [sp, #32]
   150a6:	9106      	str	r1, [sp, #24]
   150a8:	9005      	str	r0, [sp, #20]
   150aa:	e7ff      	b.n	150ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
            while len < self.len {
   150ac:	9805      	ldr	r0, [sp, #20]
   150ae:	6801      	ldr	r1, [r0, #0]
   150b0:	9a06      	ldr	r2, [sp, #24]
   150b2:	428a      	cmp	r2, r1
   150b4:	d302      	bcc.n	150bc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1e>
   150b6:	e7ff      	b.n	150b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1a>
    }
   150b8:	b00a      	add	sp, #40	; 0x28
   150ba:	bd80      	pop	{r7, pc}
                self.len -= 1;
   150bc:	9805      	ldr	r0, [sp, #20]
   150be:	6801      	ldr	r1, [r0, #0]
   150c0:	1e4a      	subs	r2, r1, #1
   150c2:	2901      	cmp	r1, #1
   150c4:	9204      	str	r2, [sp, #16]
   150c6:	d314      	bcc.n	150f2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x54>
   150c8:	e7ff      	b.n	150ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x2c>
   150ca:	9804      	ldr	r0, [sp, #16]
   150cc:	9905      	ldr	r1, [sp, #20]
   150ce:	6008      	str	r0, [r1, #0]
                let len = self.len;
   150d0:	680a      	ldr	r2, [r1, #0]
   150d2:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   150d4:	4608      	mov	r0, r1
   150d6:	9203      	str	r2, [sp, #12]
   150d8:	f7ff fe41 	bl	14d5e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>
   150dc:	9002      	str	r0, [sp, #8]
   150de:	9101      	str	r1, [sp, #4]
   150e0:	e7ff      	b.n	150e2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x44>
   150e2:	9802      	ldr	r0, [sp, #8]
   150e4:	9901      	ldr	r1, [sp, #4]
   150e6:	9a03      	ldr	r2, [sp, #12]
   150e8:	f7fc fde3 	bl	11cb2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   150ec:	e7ff      	b.n	150ee <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x50>
   150ee:	e7ff      	b.n	150f0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x52>
            while len < self.len {
   150f0:	e7dc      	b.n	150ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
                self.len -= 1;
   150f2:	f644 70d0 	movw	r0, #20432	; 0x4fd0
   150f6:	f2c0 0002 	movt	r0, #2
   150fa:	f644 72bc 	movw	r2, #20412	; 0x4fbc
   150fe:	f2c0 0202 	movt	r2, #2
   15102:	2121      	movs	r1, #33	; 0x21
   15104:	f000 fae6 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15108:	defe      	udf	#254	; 0xfe

0001510a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>:
   1510a:	b580      	push	{r7, lr}
   1510c:	b084      	sub	sp, #16
   1510e:	460a      	mov	r2, r1
   15110:	9002      	str	r0, [sp, #8]
   15112:	f88d 100f 	strb.w	r1, [sp, #15]
   15116:	9201      	str	r2, [sp, #4]
   15118:	f7f4 f846 	bl	91a8 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   1511c:	e7ff      	b.n	1511e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE+0x14>
   1511e:	b004      	add	sp, #16
   15120:	bd80      	pop	{r7, pc}

00015122 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>:
   15122:	b081      	sub	sp, #4
   15124:	9000      	str	r0, [sp, #0]
   15126:	7800      	ldrb	r0, [r0, #0]
   15128:	b001      	add	sp, #4
   1512a:	4770      	bx	lr

0001512c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>:
    #[inline]
    fn to_u128() -> u128 {
        u128::from(B::to_u8()) | U::to_u128() << 1
    }
    #[inline]
    fn to_usize() -> usize {
   1512c:	b580      	push	{r7, lr}
   1512e:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15130:	f000 f9da 	bl	154e8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15134:	9003      	str	r0, [sp, #12]
   15136:	e7ff      	b.n	15138 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0xc>
   15138:	9803      	ldr	r0, [sp, #12]
   1513a:	f000 f9db 	bl	154f4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1513e:	9002      	str	r0, [sp, #8]
   15140:	e7ff      	b.n	15142 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x16>
   15142:	f000 f8cb 	bl	152dc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   15146:	9001      	str	r0, [sp, #4]
   15148:	e7ff      	b.n	1514a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x1e>
   1514a:	9801      	ldr	r0, [sp, #4]
   1514c:	0041      	lsls	r1, r0, #1
   1514e:	9100      	str	r1, [sp, #0]
   15150:	e7ff      	b.n	15152 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x26>
   15152:	9802      	ldr	r0, [sp, #8]
   15154:	9900      	ldr	r1, [sp, #0]
   15156:	4308      	orrs	r0, r1
    }
   15158:	b004      	add	sp, #16
   1515a:	bd80      	pop	{r7, pc}

0001515c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>:
    fn to_usize() -> usize {
   1515c:	b580      	push	{r7, lr}
   1515e:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15160:	f000 f9c2 	bl	154e8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15164:	9003      	str	r0, [sp, #12]
   15166:	e7ff      	b.n	15168 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0xc>
   15168:	9803      	ldr	r0, [sp, #12]
   1516a:	f000 f9c3 	bl	154f4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1516e:	9002      	str	r0, [sp, #8]
   15170:	e7ff      	b.n	15172 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x16>
   15172:	f000 f86b 	bl	1524c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>
   15176:	9001      	str	r0, [sp, #4]
   15178:	e7ff      	b.n	1517a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x1e>
   1517a:	9801      	ldr	r0, [sp, #4]
   1517c:	0041      	lsls	r1, r0, #1
   1517e:	9100      	str	r1, [sp, #0]
   15180:	e7ff      	b.n	15182 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x26>
   15182:	9802      	ldr	r0, [sp, #8]
   15184:	9900      	ldr	r1, [sp, #0]
   15186:	4308      	orrs	r0, r1
    }
   15188:	b004      	add	sp, #16
   1518a:	bd80      	pop	{r7, pc}

0001518c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>:
    fn to_usize() -> usize {
   1518c:	b580      	push	{r7, lr}
   1518e:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15190:	f000 f9aa 	bl	154e8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15194:	9003      	str	r0, [sp, #12]
   15196:	e7ff      	b.n	15198 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0xc>
   15198:	9803      	ldr	r0, [sp, #12]
   1519a:	f000 f9ab 	bl	154f4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1519e:	9002      	str	r0, [sp, #8]
   151a0:	e7ff      	b.n	151a2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x16>
   151a2:	f000 f8fb 	bl	1539c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>
   151a6:	9001      	str	r0, [sp, #4]
   151a8:	e7ff      	b.n	151aa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x1e>
   151aa:	9801      	ldr	r0, [sp, #4]
   151ac:	0041      	lsls	r1, r0, #1
   151ae:	9100      	str	r1, [sp, #0]
   151b0:	e7ff      	b.n	151b2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x26>
   151b2:	9802      	ldr	r0, [sp, #8]
   151b4:	9900      	ldr	r1, [sp, #0]
   151b6:	4308      	orrs	r0, r1
    }
   151b8:	b004      	add	sp, #16
   151ba:	bd80      	pop	{r7, pc}

000151bc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>:
    fn to_usize() -> usize {
   151bc:	b580      	push	{r7, lr}
   151be:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   151c0:	f000 f992 	bl	154e8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   151c4:	9003      	str	r0, [sp, #12]
   151c6:	e7ff      	b.n	151c8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0xc>
   151c8:	9803      	ldr	r0, [sp, #12]
   151ca:	f000 f993 	bl	154f4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   151ce:	9002      	str	r0, [sp, #8]
   151d0:	e7ff      	b.n	151d2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x16>
   151d2:	f000 f80b 	bl	151ec <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>
   151d6:	9001      	str	r0, [sp, #4]
   151d8:	e7ff      	b.n	151da <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x1e>
   151da:	9801      	ldr	r0, [sp, #4]
   151dc:	0041      	lsls	r1, r0, #1
   151de:	9100      	str	r1, [sp, #0]
   151e0:	e7ff      	b.n	151e2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x26>
   151e2:	9802      	ldr	r0, [sp, #8]
   151e4:	9900      	ldr	r1, [sp, #0]
   151e6:	4308      	orrs	r0, r1
    }
   151e8:	b004      	add	sp, #16
   151ea:	bd80      	pop	{r7, pc}

000151ec <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>:
    fn to_usize() -> usize {
   151ec:	b580      	push	{r7, lr}
   151ee:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   151f0:	f000 f97a 	bl	154e8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   151f4:	9003      	str	r0, [sp, #12]
   151f6:	e7ff      	b.n	151f8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0xc>
   151f8:	9803      	ldr	r0, [sp, #12]
   151fa:	f000 f97b 	bl	154f4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   151fe:	9002      	str	r0, [sp, #8]
   15200:	e7ff      	b.n	15202 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x16>
   15202:	f000 f89b 	bl	1533c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>
   15206:	9001      	str	r0, [sp, #4]
   15208:	e7ff      	b.n	1520a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x1e>
   1520a:	9801      	ldr	r0, [sp, #4]
   1520c:	0041      	lsls	r1, r0, #1
   1520e:	9100      	str	r1, [sp, #0]
   15210:	e7ff      	b.n	15212 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x26>
   15212:	9802      	ldr	r0, [sp, #8]
   15214:	9900      	ldr	r1, [sp, #0]
   15216:	4308      	orrs	r0, r1
    }
   15218:	b004      	add	sp, #16
   1521a:	bd80      	pop	{r7, pc}

0001521c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>:
    fn to_usize() -> usize {
   1521c:	b580      	push	{r7, lr}
   1521e:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15220:	f000 f962 	bl	154e8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15224:	9003      	str	r0, [sp, #12]
   15226:	e7ff      	b.n	15228 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0xc>
   15228:	9803      	ldr	r0, [sp, #12]
   1522a:	f000 f963 	bl	154f4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1522e:	9002      	str	r0, [sp, #8]
   15230:	e7ff      	b.n	15232 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x16>
   15232:	f7ff ff7b 	bl	1512c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>
   15236:	9001      	str	r0, [sp, #4]
   15238:	e7ff      	b.n	1523a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x1e>
   1523a:	9801      	ldr	r0, [sp, #4]
   1523c:	0041      	lsls	r1, r0, #1
   1523e:	9100      	str	r1, [sp, #0]
   15240:	e7ff      	b.n	15242 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x26>
   15242:	9802      	ldr	r0, [sp, #8]
   15244:	9900      	ldr	r1, [sp, #0]
   15246:	4308      	orrs	r0, r1
    }
   15248:	b004      	add	sp, #16
   1524a:	bd80      	pop	{r7, pc}

0001524c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>:
    fn to_usize() -> usize {
   1524c:	b580      	push	{r7, lr}
   1524e:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15250:	f000 f94a 	bl	154e8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15254:	9003      	str	r0, [sp, #12]
   15256:	e7ff      	b.n	15258 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0xc>
   15258:	9803      	ldr	r0, [sp, #12]
   1525a:	f000 f94b 	bl	154f4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1525e:	9002      	str	r0, [sp, #8]
   15260:	e7ff      	b.n	15262 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x16>
   15262:	f000 f823 	bl	152ac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>
   15266:	9001      	str	r0, [sp, #4]
   15268:	e7ff      	b.n	1526a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x1e>
   1526a:	9801      	ldr	r0, [sp, #4]
   1526c:	0041      	lsls	r1, r0, #1
   1526e:	9100      	str	r1, [sp, #0]
   15270:	e7ff      	b.n	15272 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x26>
   15272:	9802      	ldr	r0, [sp, #8]
   15274:	9900      	ldr	r1, [sp, #0]
   15276:	4308      	orrs	r0, r1
    }
   15278:	b004      	add	sp, #16
   1527a:	bd80      	pop	{r7, pc}

0001527c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>:
    fn to_usize() -> usize {
   1527c:	b580      	push	{r7, lr}
   1527e:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15280:	f000 f932 	bl	154e8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15284:	9003      	str	r0, [sp, #12]
   15286:	e7ff      	b.n	15288 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0xc>
   15288:	9803      	ldr	r0, [sp, #12]
   1528a:	f000 f933 	bl	154f4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1528e:	9002      	str	r0, [sp, #8]
   15290:	e7ff      	b.n	15292 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x16>
   15292:	f000 f86b 	bl	1536c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>
   15296:	9001      	str	r0, [sp, #4]
   15298:	e7ff      	b.n	1529a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x1e>
   1529a:	9801      	ldr	r0, [sp, #4]
   1529c:	0041      	lsls	r1, r0, #1
   1529e:	9100      	str	r1, [sp, #0]
   152a0:	e7ff      	b.n	152a2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x26>
   152a2:	9802      	ldr	r0, [sp, #8]
   152a4:	9900      	ldr	r1, [sp, #0]
   152a6:	4308      	orrs	r0, r1
    }
   152a8:	b004      	add	sp, #16
   152aa:	bd80      	pop	{r7, pc}

000152ac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>:
    fn to_usize() -> usize {
   152ac:	b580      	push	{r7, lr}
   152ae:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   152b0:	f000 f91a 	bl	154e8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   152b4:	9003      	str	r0, [sp, #12]
   152b6:	e7ff      	b.n	152b8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0xc>
   152b8:	9803      	ldr	r0, [sp, #12]
   152ba:	f000 f91b 	bl	154f4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   152be:	9002      	str	r0, [sp, #8]
   152c0:	e7ff      	b.n	152c2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x16>
   152c2:	f000 f823 	bl	1530c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>
   152c6:	9001      	str	r0, [sp, #4]
   152c8:	e7ff      	b.n	152ca <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x1e>
   152ca:	9801      	ldr	r0, [sp, #4]
   152cc:	0041      	lsls	r1, r0, #1
   152ce:	9100      	str	r1, [sp, #0]
   152d0:	e7ff      	b.n	152d2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x26>
   152d2:	9802      	ldr	r0, [sp, #8]
   152d4:	9900      	ldr	r1, [sp, #0]
   152d6:	4308      	orrs	r0, r1
    }
   152d8:	b004      	add	sp, #16
   152da:	bd80      	pop	{r7, pc}

000152dc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>:
    fn to_usize() -> usize {
   152dc:	b580      	push	{r7, lr}
   152de:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   152e0:	f000 f904 	bl	154ec <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>
   152e4:	9003      	str	r0, [sp, #12]
   152e6:	e7ff      	b.n	152e8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0xc>
   152e8:	9803      	ldr	r0, [sp, #12]
   152ea:	f000 f903 	bl	154f4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   152ee:	9002      	str	r0, [sp, #8]
   152f0:	e7ff      	b.n	152f2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x16>
   152f2:	f000 f8fd 	bl	154f0 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>
   152f6:	9001      	str	r0, [sp, #4]
   152f8:	e7ff      	b.n	152fa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x1e>
   152fa:	9801      	ldr	r0, [sp, #4]
   152fc:	0041      	lsls	r1, r0, #1
   152fe:	9100      	str	r1, [sp, #0]
   15300:	e7ff      	b.n	15302 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x26>
   15302:	9802      	ldr	r0, [sp, #8]
   15304:	9900      	ldr	r1, [sp, #0]
   15306:	4308      	orrs	r0, r1
    }
   15308:	b004      	add	sp, #16
   1530a:	bd80      	pop	{r7, pc}

0001530c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>:
    fn to_usize() -> usize {
   1530c:	b580      	push	{r7, lr}
   1530e:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15310:	f000 f8ea 	bl	154e8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15314:	9003      	str	r0, [sp, #12]
   15316:	e7ff      	b.n	15318 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0xc>
   15318:	9803      	ldr	r0, [sp, #12]
   1531a:	f000 f8eb 	bl	154f4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1531e:	9002      	str	r0, [sp, #8]
   15320:	e7ff      	b.n	15322 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x16>
   15322:	f7ff ff7b 	bl	1521c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>
   15326:	9001      	str	r0, [sp, #4]
   15328:	e7ff      	b.n	1532a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x1e>
   1532a:	9801      	ldr	r0, [sp, #4]
   1532c:	0041      	lsls	r1, r0, #1
   1532e:	9100      	str	r1, [sp, #0]
   15330:	e7ff      	b.n	15332 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x26>
   15332:	9802      	ldr	r0, [sp, #8]
   15334:	9900      	ldr	r1, [sp, #0]
   15336:	4308      	orrs	r0, r1
    }
   15338:	b004      	add	sp, #16
   1533a:	bd80      	pop	{r7, pc}

0001533c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>:
    fn to_usize() -> usize {
   1533c:	b580      	push	{r7, lr}
   1533e:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15340:	f000 f8d2 	bl	154e8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15344:	9003      	str	r0, [sp, #12]
   15346:	e7ff      	b.n	15348 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0xc>
   15348:	9803      	ldr	r0, [sp, #12]
   1534a:	f000 f8d3 	bl	154f4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1534e:	9002      	str	r0, [sp, #8]
   15350:	e7ff      	b.n	15352 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x16>
   15352:	f7ff ff03 	bl	1515c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>
   15356:	9001      	str	r0, [sp, #4]
   15358:	e7ff      	b.n	1535a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x1e>
   1535a:	9801      	ldr	r0, [sp, #4]
   1535c:	0041      	lsls	r1, r0, #1
   1535e:	9100      	str	r1, [sp, #0]
   15360:	e7ff      	b.n	15362 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x26>
   15362:	9802      	ldr	r0, [sp, #8]
   15364:	9900      	ldr	r1, [sp, #0]
   15366:	4308      	orrs	r0, r1
    }
   15368:	b004      	add	sp, #16
   1536a:	bd80      	pop	{r7, pc}

0001536c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>:
    fn to_usize() -> usize {
   1536c:	b580      	push	{r7, lr}
   1536e:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15370:	f000 f8ba 	bl	154e8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15374:	9003      	str	r0, [sp, #12]
   15376:	e7ff      	b.n	15378 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0xc>
   15378:	9803      	ldr	r0, [sp, #12]
   1537a:	f000 f8bb 	bl	154f4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1537e:	9002      	str	r0, [sp, #8]
   15380:	e7ff      	b.n	15382 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x16>
   15382:	f7ff ff1b 	bl	151bc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>
   15386:	9001      	str	r0, [sp, #4]
   15388:	e7ff      	b.n	1538a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x1e>
   1538a:	9801      	ldr	r0, [sp, #4]
   1538c:	0041      	lsls	r1, r0, #1
   1538e:	9100      	str	r1, [sp, #0]
   15390:	e7ff      	b.n	15392 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x26>
   15392:	9802      	ldr	r0, [sp, #8]
   15394:	9900      	ldr	r1, [sp, #0]
   15396:	4308      	orrs	r0, r1
    }
   15398:	b004      	add	sp, #16
   1539a:	bd80      	pop	{r7, pc}

0001539c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>:
    fn to_usize() -> usize {
   1539c:	b580      	push	{r7, lr}
   1539e:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   153a0:	f000 f8a2 	bl	154e8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   153a4:	9003      	str	r0, [sp, #12]
   153a6:	e7ff      	b.n	153a8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0xc>
   153a8:	9803      	ldr	r0, [sp, #12]
   153aa:	f000 f8a3 	bl	154f4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   153ae:	9002      	str	r0, [sp, #8]
   153b0:	e7ff      	b.n	153b2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x16>
   153b2:	f7ff ff63 	bl	1527c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>
   153b6:	9001      	str	r0, [sp, #4]
   153b8:	e7ff      	b.n	153ba <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x1e>
   153ba:	9801      	ldr	r0, [sp, #4]
   153bc:	0041      	lsls	r1, r0, #1
   153be:	9100      	str	r1, [sp, #0]
   153c0:	e7ff      	b.n	153c2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x26>
   153c2:	9802      	ldr	r0, [sp, #8]
   153c4:	9900      	ldr	r1, [sp, #0]
   153c6:	4308      	orrs	r0, r1
    }
   153c8:	b004      	add	sp, #16
   153ca:	bd80      	pop	{r7, pc}

000153cc <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E>:
   153cc:	b5d0      	push	{r4, r6, r7, lr}
   153ce:	af02      	add	r7, sp, #8
   153d0:	b0b4      	sub	sp, #208	; 0xd0
   153d2:	466c      	mov	r4, sp
   153d4:	f36f 0404 	bfc	r4, #0, #5
   153d8:	46a5      	mov	sp, r4
   153da:	9024      	str	r0, [sp, #144]	; 0x90
   153dc:	9125      	str	r1, [sp, #148]	; 0x94
   153de:	9226      	str	r2, [sp, #152]	; 0x98
   153e0:	2320      	movs	r3, #32
   153e2:	932f      	str	r3, [sp, #188]	; 0xbc
   153e4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   153e6:	9327      	str	r3, [sp, #156]	; 0x9c
   153e8:	920e      	str	r2, [sp, #56]	; 0x38
   153ea:	910d      	str	r1, [sp, #52]	; 0x34
   153ec:	900c      	str	r0, [sp, #48]	; 0x30
   153ee:	930b      	str	r3, [sp, #44]	; 0x2c
   153f0:	e7ff      	b.n	153f2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x26>
   153f2:	2000      	movs	r0, #0
   153f4:	900f      	str	r0, [sp, #60]	; 0x3c
   153f6:	e7ff      	b.n	153f8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x2c>
   153f8:	980f      	ldr	r0, [sp, #60]	; 0x3c
   153fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   153fc:	4408      	add	r0, r1
   153fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15400:	4290      	cmp	r0, r2
   15402:	d905      	bls.n	15410 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x44>
   15404:	e7ff      	b.n	15406 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x3a>
   15406:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15408:	990e      	ldr	r1, [sp, #56]	; 0x38
   1540a:	4288      	cmp	r0, r1
   1540c:	d334      	bcc.n	15478 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xac>
   1540e:	e067      	b.n	154e0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x114>
   15410:	e7ff      	b.n	15412 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x46>
   15412:	a810      	add	r0, sp, #64	; 0x40
   15414:	9032      	str	r0, [sp, #200]	; 0xc8
   15416:	9033      	str	r0, [sp, #204]	; 0xcc
   15418:	e7ff      	b.n	1541a <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x4e>
   1541a:	a810      	add	r0, sp, #64	; 0x40
   1541c:	4601      	mov	r1, r0
   1541e:	9028      	str	r0, [sp, #160]	; 0xa0
   15420:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15422:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15424:	900a      	str	r0, [sp, #40]	; 0x28
   15426:	4610      	mov	r0, r2
   15428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1542a:	9109      	str	r1, [sp, #36]	; 0x24
   1542c:	4619      	mov	r1, r3
   1542e:	f7fc fbc2 	bl	11bb6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   15432:	4601      	mov	r1, r0
   15434:	9029      	str	r0, [sp, #164]	; 0xa4
   15436:	9108      	str	r1, [sp, #32]
   15438:	e7ff      	b.n	1543a <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x6e>
   1543a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1543c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1543e:	f7fc fbba 	bl	11bb6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   15442:	4601      	mov	r1, r0
   15444:	902a      	str	r0, [sp, #168]	; 0xa8
   15446:	9107      	str	r1, [sp, #28]
   15448:	e7ff      	b.n	1544a <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x7e>
   1544a:	9808      	ldr	r0, [sp, #32]
   1544c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1544e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15450:	f7fc fa4d 	bl	118ee <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15454:	e7ff      	b.n	15456 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x8a>
   15456:	9807      	ldr	r0, [sp, #28]
   15458:	9908      	ldr	r1, [sp, #32]
   1545a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1545c:	f7fc fa47 	bl	118ee <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15460:	e7ff      	b.n	15462 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x96>
   15462:	9809      	ldr	r0, [sp, #36]	; 0x24
   15464:	9907      	ldr	r1, [sp, #28]
   15466:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15468:	f7fc fa41 	bl	118ee <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1546c:	e7ff      	b.n	1546e <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xa2>
   1546e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15470:	990b      	ldr	r1, [sp, #44]	; 0x2c
   15472:	4408      	add	r0, r1
   15474:	900f      	str	r0, [sp, #60]	; 0x3c
   15476:	e7bf      	b.n	153f8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x2c>
   15478:	e7ff      	b.n	1547a <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xae>
   1547a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1547c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1547e:	1a08      	subs	r0, r1, r0
   15480:	4602      	mov	r2, r0
   15482:	902b      	str	r0, [sp, #172]	; 0xac
   15484:	a81c      	add	r0, sp, #112	; 0x70
   15486:	9030      	str	r0, [sp, #192]	; 0xc0
   15488:	9031      	str	r0, [sp, #196]	; 0xc4
   1548a:	9206      	str	r2, [sp, #24]
   1548c:	9005      	str	r0, [sp, #20]
   1548e:	e7ff      	b.n	15490 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xc4>
   15490:	9805      	ldr	r0, [sp, #20]
   15492:	9905      	ldr	r1, [sp, #20]
   15494:	912c      	str	r1, [sp, #176]	; 0xb0
   15496:	990f      	ldr	r1, [sp, #60]	; 0x3c
   15498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1549a:	9004      	str	r0, [sp, #16]
   1549c:	4610      	mov	r0, r2
   1549e:	f7fc fb8a 	bl	11bb6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   154a2:	4601      	mov	r1, r0
   154a4:	902d      	str	r0, [sp, #180]	; 0xb4
   154a6:	9103      	str	r1, [sp, #12]
   154a8:	e7ff      	b.n	154aa <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xde>
   154aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
   154ac:	980d      	ldr	r0, [sp, #52]	; 0x34
   154ae:	f7fc fb82 	bl	11bb6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   154b2:	4601      	mov	r1, r0
   154b4:	902e      	str	r0, [sp, #184]	; 0xb8
   154b6:	9102      	str	r1, [sp, #8]
   154b8:	e7ff      	b.n	154ba <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xee>
   154ba:	9803      	ldr	r0, [sp, #12]
   154bc:	9904      	ldr	r1, [sp, #16]
   154be:	9a06      	ldr	r2, [sp, #24]
   154c0:	f7fc fa15 	bl	118ee <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   154c4:	e7ff      	b.n	154c6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xfa>
   154c6:	9802      	ldr	r0, [sp, #8]
   154c8:	9903      	ldr	r1, [sp, #12]
   154ca:	9a06      	ldr	r2, [sp, #24]
   154cc:	f7fc fa0f 	bl	118ee <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   154d0:	e7ff      	b.n	154d2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x106>
   154d2:	9804      	ldr	r0, [sp, #16]
   154d4:	9902      	ldr	r1, [sp, #8]
   154d6:	9a06      	ldr	r2, [sp, #24]
   154d8:	f7fc fa09 	bl	118ee <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   154dc:	e7ff      	b.n	154de <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x112>
   154de:	e7ff      	b.n	154e0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x114>
   154e0:	f1a7 0408 	sub.w	r4, r7, #8
   154e4:	46a5      	mov	sp, r4
   154e6:	bdd0      	pop	{r4, r6, r7, pc}

000154e8 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>:
impl Bit for B0 {
    const U8: u8 = 0;
    const BOOL: bool = false;

    #[inline]
    fn to_u8() -> u8 {
   154e8:	2000      	movs	r0, #0
        0
    }
   154ea:	4770      	bx	lr

000154ec <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>:
impl Bit for B1 {
    const U8: u8 = 1;
    const BOOL: bool = true;

    #[inline]
    fn to_u8() -> u8 {
   154ec:	2001      	movs	r0, #1
        1
    }
   154ee:	4770      	bx	lr

000154f0 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>:
    fn to_usize() -> usize {
   154f0:	2000      	movs	r0, #0
    }
   154f2:	4770      	bx	lr

000154f4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>:
   154f4:	b081      	sub	sp, #4
   154f6:	4601      	mov	r1, r0
   154f8:	f88d 0003 	strb.w	r0, [sp, #3]
   154fc:	b2c0      	uxtb	r0, r0
   154fe:	b001      	add	sp, #4
   15500:	4770      	bx	lr

00015502 <_ZN4core3ptr13drop_in_place17h000c7c147ade2111E>:
   15502:	4770      	bx	lr

00015504 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE>:
   15504:	b5b0      	push	{r4, r5, r7, lr}
   15506:	b086      	sub	sp, #24
   15508:	460c      	mov	r4, r1
   1550a:	4605      	mov	r5, r0
   1550c:	f001 fb6b 	bl	16be6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>
   15510:	b9a8      	cbnz	r0, 1553e <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x3a>
   15512:	f644 73f4 	movw	r3, #20468	; 0x4ff4
   15516:	2200      	movs	r2, #0
   15518:	f2c0 0302 	movt	r3, #2
   1551c:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   15520:	9205      	str	r2, [sp, #20]
   15522:	9304      	str	r3, [sp, #16]
   15524:	e9cd 2202 	strd	r2, r2, [sp, #8]
   15528:	2201      	movs	r2, #1
   1552a:	9201      	str	r2, [sp, #4]
   1552c:	f245 02b8 	movw	r2, #20664	; 0x50b8
   15530:	f2c0 0202 	movt	r2, #2
   15534:	9200      	str	r2, [sp, #0]
   15536:	466a      	mov	r2, sp
   15538:	f000 fbc4 	bl	15cc4 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   1553c:	b110      	cbz	r0, 15544 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x40>
   1553e:	2001      	movs	r0, #1
   15540:	b006      	add	sp, #24
   15542:	bdb0      	pop	{r4, r5, r7, pc}
   15544:	1d28      	adds	r0, r5, #4
   15546:	4621      	mov	r1, r4
   15548:	b006      	add	sp, #24
   1554a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
   1554e:	f001 bb4a 	b.w	16be6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>

00015552 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE>:
   15552:	f642 20e1 	movw	r0, #10977	; 0x2ae1
   15556:	f243 6134 	movw	r1, #13876	; 0x3634
   1555a:	f6c9 405d 	movt	r0, #40029	; 0x9c5d
   1555e:	f6cd 0131 	movt	r1, #55345	; 0xd831
   15562:	4770      	bx	lr

00015564 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>:
   15564:	b570      	push	{r4, r5, r6, lr}
   15566:	460e      	mov	r6, r1
   15568:	3909      	subs	r1, #9
   1556a:	4604      	mov	r4, r0
   1556c:	291e      	cmp	r1, #30
   1556e:	d818      	bhi.n	155a2 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x3e>
   15570:	2002      	movs	r0, #2
   15572:	2574      	movs	r5, #116	; 0x74
   15574:	e8df f001 	tbb	[pc, r1]
   15578:	1c1c1019 	.word	0x1c1c1019
   1557c:	1c1c1c29 	.word	0x1c1c1c29
   15580:	1c1c1c1c 	.word	0x1c1c1c1c
   15584:	1c1c1c1c 	.word	0x1c1c1c1c
   15588:	1c1c1c1c 	.word	0x1c1c1c1c
   1558c:	1c1c1c1c 	.word	0x1c1c1c1c
   15590:	1c1c171c 	.word	0x1c1c171c
   15594:	00171c1c 	.word	0x00171c1c
   15598:	2002      	movs	r0, #2
   1559a:	256e      	movs	r5, #110	; 0x6e
   1559c:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   155a0:	bd70      	pop	{r4, r5, r6, pc}
   155a2:	2e5c      	cmp	r6, #92	; 0x5c
   155a4:	d104      	bne.n	155b0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x4c>
   155a6:	2002      	movs	r0, #2
   155a8:	4635      	mov	r5, r6
   155aa:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   155ae:	bd70      	pop	{r4, r5, r6, pc}
   155b0:	2a00      	cmp	r2, #0
   155b2:	d040      	beq.n	15636 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   155b4:	f3c6 1083 	ubfx	r0, r6, #6, #4
   155b8:	0ab1      	lsrs	r1, r6, #10
   155ba:	f5b6 3ff6 	cmp.w	r6, #125952	; 0x1ec00
   155be:	d309      	bcc.n	155d4 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x70>
   155c0:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
   155c4:	d137      	bne.n	15636 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   155c6:	211e      	movs	r1, #30
   155c8:	e00b      	b.n	155e2 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x7e>
   155ca:	2002      	movs	r0, #2
   155cc:	2572      	movs	r5, #114	; 0x72
   155ce:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   155d2:	bd70      	pop	{r4, r5, r6, pc}
   155d4:	f645 3224 	movw	r2, #23332	; 0x5b24
   155d8:	f2c0 0202 	movt	r2, #2
   155dc:	5c51      	ldrb	r1, [r2, r1]
   155de:	291e      	cmp	r1, #30
   155e0:	d842      	bhi.n	15668 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x104>
   155e2:	f645 329f 	movw	r2, #23455	; 0x5b9f
   155e6:	f2c0 0202 	movt	r2, #2
   155ea:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   155ee:	5c09      	ldrb	r1, [r1, r0]
   155f0:	298b      	cmp	r1, #139	; 0x8b
   155f2:	d231      	bcs.n	15658 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xf4>
   155f4:	f645 5090 	movw	r0, #23952	; 0x5d90
   155f8:	2301      	movs	r3, #1
   155fa:	f2c0 0002 	movt	r0, #2
   155fe:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   15602:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
   15606:	f006 013f 	and.w	r1, r6, #63	; 0x3f
   1560a:	f8d2 c004 	ldr.w	ip, [r2, #4]
   1560e:	fa03 f501 	lsl.w	r5, r3, r1
   15612:	f1b1 0220 	subs.w	r2, r1, #32
   15616:	f1c1 0120 	rsb	r1, r1, #32
   1561a:	bf58      	it	pl
   1561c:	2500      	movpl	r5, #0
   1561e:	2a00      	cmp	r2, #0
   15620:	ea00 0005 	and.w	r0, r0, r5
   15624:	fa23 f101 	lsr.w	r1, r3, r1
   15628:	bf58      	it	pl
   1562a:	fa03 f102 	lslpl.w	r1, r3, r2
   1562e:	ea01 010c 	and.w	r1, r1, ip
   15632:	4308      	orrs	r0, r1
   15634:	d105      	bne.n	15642 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   15636:	4630      	mov	r0, r6
   15638:	f001 f989 	bl	1694e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>
   1563c:	b108      	cbz	r0, 15642 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   1563e:	2001      	movs	r0, #1
   15640:	e7b2      	b.n	155a8 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   15642:	f046 0001 	orr.w	r0, r6, #1
   15646:	2107      	movs	r1, #7
   15648:	fab0 f080 	clz	r0, r0
   1564c:	f04f 0e05 	mov.w	lr, #5
   15650:	ea81 0c90 	eor.w	ip, r1, r0, lsr #2
   15654:	2003      	movs	r0, #3
   15656:	e7a7      	b.n	155a8 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   15658:	f645 3014 	movw	r0, #23316	; 0x5b14
   1565c:	228b      	movs	r2, #139	; 0x8b
   1565e:	f2c0 0002 	movt	r0, #2
   15662:	f000 f84d 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   15666:	defe      	udf	#254	; 0xfe
   15668:	f645 3004 	movw	r0, #23300	; 0x5b04
   1566c:	221f      	movs	r2, #31
   1566e:	f2c0 0002 	movt	r0, #2
   15672:	f000 f845 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   15676:	defe      	udf	#254	; 0xfe

00015678 <_ZN4core6option18expect_none_failed17h54d938081af97677E>:
   15678:	b08e      	sub	sp, #56	; 0x38
   1567a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   1567e:	2002      	movs	r0, #2
   15680:	a90a      	add	r1, sp, #40	; 0x28
   15682:	9009      	str	r0, [sp, #36]	; 0x24
   15684:	9108      	str	r1, [sp, #32]
   15686:	2100      	movs	r1, #0
   15688:	9107      	str	r1, [sp, #28]
   1568a:	e9cd 0105 	strd	r0, r1, [sp, #20]
   1568e:	f245 10c0 	movw	r0, #20928	; 0x51c0
   15692:	f2c0 0002 	movt	r0, #2
   15696:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   1569a:	9004      	str	r0, [sp, #16]
   1569c:	f247 30ab 	movw	r0, #29611	; 0x73ab
   156a0:	f2c0 0001 	movt	r0, #1
   156a4:	900d      	str	r0, [sp, #52]	; 0x34
   156a6:	a802      	add	r0, sp, #8
   156a8:	900c      	str	r0, [sp, #48]	; 0x30
   156aa:	f247 30b5 	movw	r0, #29621	; 0x73b5
   156ae:	f2c0 0001 	movt	r0, #1
   156b2:	4661      	mov	r1, ip
   156b4:	900b      	str	r0, [sp, #44]	; 0x2c
   156b6:	4668      	mov	r0, sp
   156b8:	900a      	str	r0, [sp, #40]	; 0x28
   156ba:	a804      	add	r0, sp, #16
   156bc:	f000 f840 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   156c0:	defe      	udf	#254	; 0xfe

000156c2 <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>:
   156c2:	68c0      	ldr	r0, [r0, #12]
   156c4:	4770      	bx	lr

000156c6 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>:
   156c6:	4770      	bx	lr

000156c8 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>:
   156c8:	e9d0 2100 	ldrd	r2, r1, [r0]
   156cc:	4610      	mov	r0, r2
   156ce:	4770      	bx	lr

000156d0 <_ZN4core5panic8Location4line17h650a566d9637c91dE>:
   156d0:	6880      	ldr	r0, [r0, #8]
   156d2:	4770      	bx	lr

000156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>:
   156d4:	b088      	sub	sp, #32
   156d6:	4694      	mov	ip, r2
   156d8:	f644 72f4 	movw	r2, #20468	; 0x4ff4
   156dc:	2300      	movs	r3, #0
   156de:	f2c0 0202 	movt	r2, #2
   156e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   156e6:	4668      	mov	r0, sp
   156e8:	9305      	str	r3, [sp, #20]
   156ea:	4661      	mov	r1, ip
   156ec:	9204      	str	r2, [sp, #16]
   156ee:	2201      	movs	r2, #1
   156f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
   156f4:	9201      	str	r2, [sp, #4]
   156f6:	aa06      	add	r2, sp, #24
   156f8:	9200      	str	r2, [sp, #0]
   156fa:	f000 f821 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   156fe:	defe      	udf	#254	; 0xfe

00015700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>:
   15700:	b08c      	sub	sp, #48	; 0x30
   15702:	4603      	mov	r3, r0
   15704:	e9cd 1200 	strd	r1, r2, [sp]
   15708:	2002      	movs	r0, #2
   1570a:	a908      	add	r1, sp, #32
   1570c:	9007      	str	r0, [sp, #28]
   1570e:	9106      	str	r1, [sp, #24]
   15710:	2100      	movs	r1, #0
   15712:	9105      	str	r1, [sp, #20]
   15714:	e9cd 0103 	strd	r0, r1, [sp, #12]
   15718:	f245 10f4 	movw	r0, #20980	; 0x51f4
   1571c:	f2c0 0002 	movt	r0, #2
   15720:	4669      	mov	r1, sp
   15722:	9002      	str	r0, [sp, #8]
   15724:	f247 20c7 	movw	r0, #29383	; 0x72c7
   15728:	f2c0 0001 	movt	r0, #1
   1572c:	900b      	str	r0, [sp, #44]	; 0x2c
   1572e:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   15732:	a801      	add	r0, sp, #4
   15734:	9008      	str	r0, [sp, #32]
   15736:	a802      	add	r0, sp, #8
   15738:	4619      	mov	r1, r3
   1573a:	f000 f801 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1573e:	defe      	udf	#254	; 0xfe

00015740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>:
   15740:	b084      	sub	sp, #16
   15742:	e9cd 0102 	strd	r0, r1, [sp, #8]
   15746:	f245 10d0 	movw	r0, #20944	; 0x51d0
   1574a:	f2c0 0002 	movt	r0, #2
   1574e:	9001      	str	r0, [sp, #4]
   15750:	f644 70f4 	movw	r0, #20468	; 0x4ff4
   15754:	f2c0 0002 	movt	r0, #2
   15758:	9000      	str	r0, [sp, #0]
   1575a:	4668      	mov	r0, sp
   1575c:	f7f2 ffb8 	bl	86d0 <rust_begin_unwind>
   15760:	defe      	udf	#254	; 0xfe

00015762 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>:
   15762:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15766:	b081      	sub	sp, #4
   15768:	2a00      	cmp	r2, #0
   1576a:	f000 80fe 	beq.w	1596a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   1576e:	4690      	mov	r8, r2
   15770:	468a      	mov	sl, r1
   15772:	4681      	mov	r9, r0
   15774:	f8d9 0008 	ldr.w	r0, [r9, #8]
   15778:	7800      	ldrb	r0, [r0, #0]
   1577a:	b948      	cbnz	r0, 15790 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x2e>
   1577c:	e014      	b.n	157a8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   1577e:	44da      	add	sl, fp
   15780:	2c00      	cmp	r4, #0
   15782:	46a0      	mov	r8, r4
   15784:	f000 80f1 	beq.w	1596a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   15788:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1578c:	7800      	ldrb	r0, [r0, #0]
   1578e:	b158      	cbz	r0, 157a8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   15790:	e9d9 0100 	ldrd	r0, r1, [r9]
   15794:	2204      	movs	r2, #4
   15796:	68cb      	ldr	r3, [r1, #12]
   15798:	f245 1114 	movw	r1, #20756	; 0x5114
   1579c:	f2c0 0102 	movt	r1, #2
   157a0:	4798      	blx	r3
   157a2:	2800      	cmp	r0, #0
   157a4:	f040 80e5 	bne.w	15972 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   157a8:	f04f 0b00 	mov.w	fp, #0
   157ac:	4641      	mov	r1, r8
   157ae:	e008      	b.n	157c2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x60>
   157b0:	ebb8 010b 	subs.w	r1, r8, fp
   157b4:	f04f 0000 	mov.w	r0, #0
   157b8:	bf38      	it	cc
   157ba:	4601      	movcc	r1, r0
   157bc:	45c3      	cmp	fp, r8
   157be:	f200 80a5 	bhi.w	1590c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1aa>
   157c2:	eb0a 0e0b 	add.w	lr, sl, fp
   157c6:	2000      	movs	r0, #0
   157c8:	f01e 0203 	ands.w	r2, lr, #3
   157cc:	bf18      	it	ne
   157ce:	f1d2 0c04 	rsbsne	ip, r2, #4
   157d2:	d120      	bne.n	15816 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xb4>
   157d4:	2908      	cmp	r1, #8
   157d6:	d357      	bcc.n	15888 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   157d8:	f1a1 0208 	sub.w	r2, r1, #8
   157dc:	4290      	cmp	r0, r2
   157de:	d853      	bhi.n	15888 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   157e0:	f85e 3000 	ldr.w	r3, [lr, r0]
   157e4:	eb0e 0700 	add.w	r7, lr, r0
   157e8:	687f      	ldr	r7, [r7, #4]
   157ea:	f083 360a 	eor.w	r6, r3, #168430090	; 0xa0a0a0a
   157ee:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   157f2:	ea26 0303 	bic.w	r3, r6, r3
   157f6:	f087 360a 	eor.w	r6, r7, #168430090	; 0xa0a0a0a
   157fa:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   157fe:	ea26 0707 	bic.w	r7, r6, r7
   15802:	433b      	orrs	r3, r7
   15804:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   15808:	d102      	bne.n	15810 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xae>
   1580a:	3008      	adds	r0, #8
   1580c:	4290      	cmp	r0, r2
   1580e:	d9e7      	bls.n	157e0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x7e>
   15810:	4288      	cmp	r0, r1
   15812:	d939      	bls.n	15888 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   15814:	e0b1      	b.n	1597a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x218>
   15816:	458c      	cmp	ip, r1
   15818:	bf88      	it	hi
   1581a:	468c      	movhi	ip, r1
   1581c:	eb0e 060c 	add.w	r6, lr, ip
   15820:	2000      	movs	r0, #0
   15822:	4663      	mov	r3, ip
   15824:	4677      	mov	r7, lr
   15826:	b363      	cbz	r3, 15882 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   15828:	463a      	mov	r2, r7
   1582a:	f812 4b01 	ldrb.w	r4, [r2], #1
   1582e:	f1b4 050a 	subs.w	r5, r4, #10
   15832:	bf18      	it	ne
   15834:	2501      	movne	r5, #1
   15836:	4428      	add	r0, r5
   15838:	2c0a      	cmp	r4, #10
   1583a:	d059      	beq.n	158f0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   1583c:	42b2      	cmp	r2, r6
   1583e:	d020      	beq.n	15882 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   15840:	787a      	ldrb	r2, [r7, #1]
   15842:	f1b2 040a 	subs.w	r4, r2, #10
   15846:	bf18      	it	ne
   15848:	2401      	movne	r4, #1
   1584a:	4420      	add	r0, r4
   1584c:	2a0a      	cmp	r2, #10
   1584e:	d04f      	beq.n	158f0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   15850:	1cba      	adds	r2, r7, #2
   15852:	42b2      	cmp	r2, r6
   15854:	d015      	beq.n	15882 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   15856:	78ba      	ldrb	r2, [r7, #2]
   15858:	f1b2 040a 	subs.w	r4, r2, #10
   1585c:	bf18      	it	ne
   1585e:	2401      	movne	r4, #1
   15860:	4420      	add	r0, r4
   15862:	2a0a      	cmp	r2, #10
   15864:	d044      	beq.n	158f0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   15866:	1cfa      	adds	r2, r7, #3
   15868:	42b2      	cmp	r2, r6
   1586a:	d00a      	beq.n	15882 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   1586c:	78fa      	ldrb	r2, [r7, #3]
   1586e:	3b04      	subs	r3, #4
   15870:	3704      	adds	r7, #4
   15872:	f1b2 040a 	subs.w	r4, r2, #10
   15876:	bf18      	it	ne
   15878:	2401      	movne	r4, #1
   1587a:	4420      	add	r0, r4
   1587c:	2a0a      	cmp	r2, #10
   1587e:	d1d2      	bne.n	15826 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xc4>
   15880:	e036      	b.n	158f0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   15882:	4660      	mov	r0, ip
   15884:	2908      	cmp	r1, #8
   15886:	d2a7      	bcs.n	157d8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x76>
   15888:	eb0e 0700 	add.w	r7, lr, r0
   1588c:	eb0e 0201 	add.w	r2, lr, r1
   15890:	1a0e      	subs	r6, r1, r0
   15892:	2100      	movs	r1, #0
   15894:	b3ce      	cbz	r6, 1590a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   15896:	463b      	mov	r3, r7
   15898:	f813 5b01 	ldrb.w	r5, [r3], #1
   1589c:	f1b5 040a 	subs.w	r4, r5, #10
   158a0:	bf18      	it	ne
   158a2:	2401      	movne	r4, #1
   158a4:	4421      	add	r1, r4
   158a6:	2d0a      	cmp	r5, #10
   158a8:	d021      	beq.n	158ee <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   158aa:	4293      	cmp	r3, r2
   158ac:	d02d      	beq.n	1590a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   158ae:	787b      	ldrb	r3, [r7, #1]
   158b0:	f1b3 050a 	subs.w	r5, r3, #10
   158b4:	bf18      	it	ne
   158b6:	2501      	movne	r5, #1
   158b8:	4429      	add	r1, r5
   158ba:	2b0a      	cmp	r3, #10
   158bc:	d017      	beq.n	158ee <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   158be:	1cbb      	adds	r3, r7, #2
   158c0:	4293      	cmp	r3, r2
   158c2:	d022      	beq.n	1590a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   158c4:	78bb      	ldrb	r3, [r7, #2]
   158c6:	f1b3 050a 	subs.w	r5, r3, #10
   158ca:	bf18      	it	ne
   158cc:	2501      	movne	r5, #1
   158ce:	4429      	add	r1, r5
   158d0:	2b0a      	cmp	r3, #10
   158d2:	d00c      	beq.n	158ee <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   158d4:	1cfb      	adds	r3, r7, #3
   158d6:	4293      	cmp	r3, r2
   158d8:	d017      	beq.n	1590a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   158da:	78fb      	ldrb	r3, [r7, #3]
   158dc:	3e04      	subs	r6, #4
   158de:	3704      	adds	r7, #4
   158e0:	f1b3 050a 	subs.w	r5, r3, #10
   158e4:	bf18      	it	ne
   158e6:	2501      	movne	r5, #1
   158e8:	4429      	add	r1, r5
   158ea:	2b0a      	cmp	r3, #10
   158ec:	d1d2      	bne.n	15894 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x132>
   158ee:	4408      	add	r0, r1
   158f0:	4458      	add	r0, fp
   158f2:	f100 0b01 	add.w	fp, r0, #1
   158f6:	4540      	cmp	r0, r8
   158f8:	f4bf af5a 	bcs.w	157b0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   158fc:	f81a 0000 	ldrb.w	r0, [sl, r0]
   15900:	280a      	cmp	r0, #10
   15902:	f47f af55 	bne.w	157b0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   15906:	2001      	movs	r0, #1
   15908:	e001      	b.n	1590e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1ac>
   1590a:	2000      	movs	r0, #0
   1590c:	46c3      	mov	fp, r8
   1590e:	f8d9 1008 	ldr.w	r1, [r9, #8]
   15912:	eba8 040b 	sub.w	r4, r8, fp
   15916:	7008      	strb	r0, [r1, #0]
   15918:	fab4 f084 	clz	r0, r4
   1591c:	0942      	lsrs	r2, r0, #5
   1591e:	fabb f08b 	clz	r0, fp
   15922:	0943      	lsrs	r3, r0, #5
   15924:	e9d9 0100 	ldrd	r0, r1, [r9]
   15928:	ea53 0602 	orrs.w	r6, r3, r2
   1592c:	d106      	bne.n	1593c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1da>
   1592e:	45d8      	cmp	r8, fp
   15930:	d926      	bls.n	15980 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   15932:	f91a 200b 	ldrsb.w	r2, [sl, fp]
   15936:	f112 0f41 	cmn.w	r2, #65	; 0x41
   1593a:	dd21      	ble.n	15980 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   1593c:	68cb      	ldr	r3, [r1, #12]
   1593e:	4651      	mov	r1, sl
   15940:	465a      	mov	r2, fp
   15942:	4798      	blx	r3
   15944:	b9a8      	cbnz	r0, 15972 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   15946:	2e00      	cmp	r6, #0
   15948:	f47f af19 	bne.w	1577e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   1594c:	45d8      	cmp	r8, fp
   1594e:	d905      	bls.n	1595c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1fa>
   15950:	f91a 000b 	ldrsb.w	r0, [sl, fp]
   15954:	f110 0f41 	cmn.w	r0, #65	; 0x41
   15958:	f73f af11 	bgt.w	1577e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   1595c:	4650      	mov	r0, sl
   1595e:	4641      	mov	r1, r8
   15960:	465a      	mov	r2, fp
   15962:	4643      	mov	r3, r8
   15964:	f000 fe4d 	bl	16602 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   15968:	defe      	udf	#254	; 0xfe
   1596a:	2000      	movs	r0, #0
   1596c:	b001      	add	sp, #4
   1596e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15972:	2001      	movs	r0, #1
   15974:	b001      	add	sp, #4
   15976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1597a:	f000 fe20 	bl	165be <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1597e:	defe      	udf	#254	; 0xfe
   15980:	4650      	mov	r0, sl
   15982:	4641      	mov	r1, r8
   15984:	2200      	movs	r2, #0
   15986:	465b      	mov	r3, fp
   15988:	f000 fe3b 	bl	16602 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   1598c:	defe      	udf	#254	; 0xfe

0001598e <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>:
   1598e:	b5f0      	push	{r4, r5, r6, r7, lr}
   15990:	b08d      	sub	sp, #52	; 0x34
   15992:	4604      	mov	r4, r0
   15994:	7a00      	ldrb	r0, [r0, #8]
   15996:	b138      	cbz	r0, 159a8 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x1a>
   15998:	2001      	movs	r0, #1
   1599a:	6861      	ldr	r1, [r4, #4]
   1599c:	7220      	strb	r0, [r4, #8]
   1599e:	1c48      	adds	r0, r1, #1
   159a0:	6060      	str	r0, [r4, #4]
   159a2:	4620      	mov	r0, r4
   159a4:	b00d      	add	sp, #52	; 0x34
   159a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   159a8:	4616      	mov	r6, r2
   159aa:	460d      	mov	r5, r1
   159ac:	e9d4 1200 	ldrd	r1, r2, [r4]
   159b0:	7808      	ldrb	r0, [r1, #0]
   159b2:	0740      	lsls	r0, r0, #29
   159b4:	d419      	bmi.n	159ea <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x5c>
   159b6:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
   159ba:	f245 211e 	movw	r1, #21022	; 0x521e
   159be:	f245 2c22 	movw	ip, #21026	; 0x5222
   159c2:	f2c0 0102 	movt	r1, #2
   159c6:	2a00      	cmp	r2, #0
   159c8:	f2c0 0c02 	movt	ip, #2
   159cc:	bf08      	it	eq
   159ce:	4661      	moveq	r1, ip
   159d0:	68db      	ldr	r3, [r3, #12]
   159d2:	f04f 0202 	mov.w	r2, #2
   159d6:	bf08      	it	eq
   159d8:	2201      	moveq	r2, #1
   159da:	4798      	blx	r3
   159dc:	2800      	cmp	r0, #0
   159de:	d1db      	bne.n	15998 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   159e0:	68f2      	ldr	r2, [r6, #12]
   159e2:	4628      	mov	r0, r5
   159e4:	6821      	ldr	r1, [r4, #0]
   159e6:	4790      	blx	r2
   159e8:	e7d7      	b.n	1599a <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>
   159ea:	b95a      	cbnz	r2, 15a04 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x76>
   159ec:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   159f0:	2202      	movs	r2, #2
   159f2:	68cb      	ldr	r3, [r1, #12]
   159f4:	f245 2120 	movw	r1, #21024	; 0x5220
   159f8:	f2c0 0102 	movt	r1, #2
   159fc:	4798      	blx	r3
   159fe:	2800      	cmp	r0, #0
   15a00:	d1ca      	bne.n	15998 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   15a02:	6821      	ldr	r1, [r4, #0]
   15a04:	2001      	movs	r0, #1
   15a06:	f10d 030f 	add.w	r3, sp, #15
   15a0a:	f88d 000f 	strb.w	r0, [sp, #15]
   15a0e:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
   15a12:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
   15a16:	e891 5005 	ldmia.w	r1, {r0, r2, ip, lr}
   15a1a:	e9d1 3704 	ldrd	r3, r7, [r1, #16]
   15a1e:	f891 1020 	ldrb.w	r1, [r1, #32]
   15a22:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   15a26:	a904      	add	r1, sp, #16
   15a28:	e9cd 0204 	strd	r0, r2, [sp, #16]
   15a2c:	f245 2004 	movw	r0, #20996	; 0x5204
   15a30:	f2c0 0002 	movt	r0, #2
   15a34:	68f2      	ldr	r2, [r6, #12]
   15a36:	900b      	str	r0, [sp, #44]	; 0x2c
   15a38:	4668      	mov	r0, sp
   15a3a:	900a      	str	r0, [sp, #40]	; 0x28
   15a3c:	4628      	mov	r0, r5
   15a3e:	e9cd 3708 	strd	r3, r7, [sp, #32]
   15a42:	e9cd ce06 	strd	ip, lr, [sp, #24]
   15a46:	4790      	blx	r2
   15a48:	2800      	cmp	r0, #0
   15a4a:	d1a5      	bne.n	15998 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   15a4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   15a50:	2202      	movs	r2, #2
   15a52:	68cb      	ldr	r3, [r1, #12]
   15a54:	f245 211c 	movw	r1, #21020	; 0x521c
   15a58:	f2c0 0102 	movt	r1, #2
   15a5c:	4798      	blx	r3
   15a5e:	e79c      	b.n	1599a <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>

00015a60 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>:
   15a60:	b5b0      	push	{r4, r5, r7, lr}
   15a62:	4604      	mov	r4, r0
   15a64:	7a05      	ldrb	r5, [r0, #8]
   15a66:	6840      	ldr	r0, [r0, #4]
   15a68:	b308      	cbz	r0, 15aae <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4e>
   15a6a:	b10d      	cbz	r5, 15a70 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x10>
   15a6c:	2501      	movs	r5, #1
   15a6e:	e01d      	b.n	15aac <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   15a70:	2801      	cmp	r0, #1
   15a72:	d110      	bne.n	15a96 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   15a74:	7a60      	ldrb	r0, [r4, #9]
   15a76:	b170      	cbz	r0, 15a96 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   15a78:	6821      	ldr	r1, [r4, #0]
   15a7a:	7808      	ldrb	r0, [r1, #0]
   15a7c:	0740      	lsls	r0, r0, #29
   15a7e:	d40a      	bmi.n	15a96 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   15a80:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   15a84:	2201      	movs	r2, #1
   15a86:	68cb      	ldr	r3, [r1, #12]
   15a88:	f245 2123 	movw	r1, #21027	; 0x5223
   15a8c:	f2c0 0102 	movt	r1, #2
   15a90:	2501      	movs	r5, #1
   15a92:	4798      	blx	r3
   15a94:	b950      	cbnz	r0, 15aac <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   15a96:	6821      	ldr	r1, [r4, #0]
   15a98:	2201      	movs	r2, #1
   15a9a:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   15a9e:	68cb      	ldr	r3, [r1, #12]
   15aa0:	f245 2124 	movw	r1, #21028	; 0x5224
   15aa4:	f2c0 0102 	movt	r1, #2
   15aa8:	4798      	blx	r3
   15aaa:	4605      	mov	r5, r0
   15aac:	7225      	strb	r5, [r4, #8]
   15aae:	2d00      	cmp	r5, #0
   15ab0:	bf18      	it	ne
   15ab2:	2501      	movne	r5, #1
   15ab4:	4628      	mov	r0, r5
   15ab6:	bdb0      	pop	{r4, r5, r7, pc}

00015ab8 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>:
   15ab8:	b580      	push	{r7, lr}
   15aba:	b082      	sub	sp, #8
   15abc:	468c      	mov	ip, r1
   15abe:	2100      	movs	r1, #0
   15ac0:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   15ac4:	9101      	str	r1, [sp, #4]
   15ac6:	d207      	bcs.n	15ad8 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x20>
   15ac8:	f88d c004 	strb.w	ip, [sp, #4]
   15acc:	a901      	add	r1, sp, #4
   15ace:	2201      	movs	r2, #1
   15ad0:	f7ff fe47 	bl	15762 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   15ad4:	b002      	add	sp, #8
   15ad6:	bd80      	pop	{r7, pc}
   15ad8:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
   15adc:	d210      	bcs.n	15b00 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x48>
   15ade:	ea4f 119c 	mov.w	r1, ip, lsr #6
   15ae2:	2306      	movs	r3, #6
   15ae4:	2202      	movs	r2, #2
   15ae6:	f363 115f 	bfi	r1, r3, #5, #27
   15aea:	f362 1c9f 	bfi	ip, r2, #6, #26
   15aee:	f88d c005 	strb.w	ip, [sp, #5]
   15af2:	f88d 1004 	strb.w	r1, [sp, #4]
   15af6:	a901      	add	r1, sp, #4
   15af8:	f7ff fe33 	bl	15762 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   15afc:	b002      	add	sp, #8
   15afe:	bd80      	pop	{r7, pc}
   15b00:	2202      	movs	r2, #2
   15b02:	4663      	mov	r3, ip
   15b04:	a901      	add	r1, sp, #4
   15b06:	f362 139f 	bfi	r3, r2, #6, #26
   15b0a:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   15b0e:	d213      	bcs.n	15b38 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x80>
   15b10:	f88d 3006 	strb.w	r3, [sp, #6]
   15b14:	ea4f 139c 	mov.w	r3, ip, lsr #6
   15b18:	f362 139f 	bfi	r3, r2, #6, #26
   15b1c:	f88d 3005 	strb.w	r3, [sp, #5]
   15b20:	ea4f 321c 	mov.w	r2, ip, lsr #12
   15b24:	230e      	movs	r3, #14
   15b26:	f363 121f 	bfi	r2, r3, #4, #28
   15b2a:	f88d 2004 	strb.w	r2, [sp, #4]
   15b2e:	2203      	movs	r2, #3
   15b30:	f7ff fe17 	bl	15762 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   15b34:	b002      	add	sp, #8
   15b36:	bd80      	pop	{r7, pc}
   15b38:	f88d 3007 	strb.w	r3, [sp, #7]
   15b3c:	ea4f 139c 	mov.w	r3, ip, lsr #6
   15b40:	f362 139f 	bfi	r3, r2, #6, #26
   15b44:	f88d 3006 	strb.w	r3, [sp, #6]
   15b48:	ea4f 331c 	mov.w	r3, ip, lsr #12
   15b4c:	f362 139f 	bfi	r3, r2, #6, #26
   15b50:	22f0      	movs	r2, #240	; 0xf0
   15b52:	ea42 429c 	orr.w	r2, r2, ip, lsr #18
   15b56:	f88d 3005 	strb.w	r3, [sp, #5]
   15b5a:	f88d 2004 	strb.w	r2, [sp, #4]
   15b5e:	2204      	movs	r2, #4
   15b60:	f7ff fdff 	bl	15762 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   15b64:	b002      	add	sp, #8
   15b66:	bd80      	pop	{r7, pc}

00015b68 <_ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE>:
   15b68:	b570      	push	{r4, r5, r6, lr}
   15b6a:	b088      	sub	sp, #32
   15b6c:	9001      	str	r0, [sp, #4]
   15b6e:	aa02      	add	r2, sp, #8
   15b70:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   15b74:	f245 21f0 	movw	r1, #21232	; 0x52f0
   15b78:	4610      	mov	r0, r2
   15b7a:	f2c0 0102 	movt	r1, #2
   15b7e:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   15b82:	a801      	add	r0, sp, #4
   15b84:	f000 f89e 	bl	15cc4 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   15b88:	b008      	add	sp, #32
   15b8a:	bd70      	pop	{r4, r5, r6, pc}

00015b8c <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E>:
   15b8c:	6800      	ldr	r0, [r0, #0]
   15b8e:	f7ff bde8 	b.w	15762 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>

00015b92 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE>:
   15b92:	6800      	ldr	r0, [r0, #0]
   15b94:	f7ff bf90 	b.w	15ab8 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>

00015b98 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE>:
   15b98:	b570      	push	{r4, r5, r6, lr}
   15b9a:	b088      	sub	sp, #32
   15b9c:	6800      	ldr	r0, [r0, #0]
   15b9e:	aa02      	add	r2, sp, #8
   15ba0:	9001      	str	r0, [sp, #4]
   15ba2:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   15ba6:	4610      	mov	r0, r2
   15ba8:	f245 21f0 	movw	r1, #21232	; 0x52f0
   15bac:	f2c0 0102 	movt	r1, #2
   15bb0:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   15bb4:	a801      	add	r0, sp, #4
   15bb6:	f000 f885 	bl	15cc4 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   15bba:	b008      	add	sp, #32
   15bbc:	bd70      	pop	{r4, r5, r6, pc}

00015bbe <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE>:
   15bbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bc2:	b08d      	sub	sp, #52	; 0x34
   15bc4:	468c      	mov	ip, r1
   15bc6:	6801      	ldr	r1, [r0, #0]
   15bc8:	f248 5e1f 	movw	lr, #34079	; 0x851f
   15bcc:	f245 2027 	movw	r0, #21031	; 0x5227
   15bd0:	f242 7810 	movw	r8, #10000	; 0x2710
   15bd4:	4541      	cmp	r1, r8
   15bd6:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   15bda:	f2c0 0002 	movt	r0, #2
   15bde:	d337      	bcc.n	15c50 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x92>
   15be0:	f241 7959 	movw	r9, #5977	; 0x1759
   15be4:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   15be8:	f10d 0b0c 	add.w	fp, sp, #12
   15bec:	2300      	movs	r3, #0
   15bee:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   15bf2:	f04f 0a64 	mov.w	sl, #100	; 0x64
   15bf6:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   15bfa:	fba1 2409 	umull	r2, r4, r1, r9
   15bfe:	42b9      	cmp	r1, r7
   15c00:	ea4f 3254 	mov.w	r2, r4, lsr #13
   15c04:	fb02 1418 	mls	r4, r2, r8, r1
   15c08:	4611      	mov	r1, r2
   15c0a:	b2a5      	uxth	r5, r4
   15c0c:	fba5 560e 	umull	r5, r6, r5, lr
   15c10:	ea4f 1556 	mov.w	r5, r6, lsr #5
   15c14:	eb0b 0603 	add.w	r6, fp, r3
   15c18:	fb05 441a 	mls	r4, r5, sl, r4
   15c1c:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   15c20:	f1a3 0304 	sub.w	r3, r3, #4
   15c24:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   15c28:	b2a4      	uxth	r4, r4
   15c2a:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   15c2e:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   15c32:	d8e2      	bhi.n	15bfa <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x3c>
   15c34:	f103 0427 	add.w	r4, r3, #39	; 0x27
   15c38:	4611      	mov	r1, r2
   15c3a:	2963      	cmp	r1, #99	; 0x63
   15c3c:	dc0b      	bgt.n	15c56 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x98>
   15c3e:	460b      	mov	r3, r1
   15c40:	2b0a      	cmp	r3, #10
   15c42:	db17      	blt.n	15c74 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xb6>
   15c44:	1ea1      	subs	r1, r4, #2
   15c46:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   15c4a:	aa03      	add	r2, sp, #12
   15c4c:	5250      	strh	r0, [r2, r1]
   15c4e:	e016      	b.n	15c7e <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xc0>
   15c50:	2427      	movs	r4, #39	; 0x27
   15c52:	2963      	cmp	r1, #99	; 0x63
   15c54:	ddf3      	ble.n	15c3e <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x80>
   15c56:	b28a      	uxth	r2, r1
   15c58:	3c02      	subs	r4, #2
   15c5a:	fba2 230e 	umull	r2, r3, r2, lr
   15c5e:	2264      	movs	r2, #100	; 0x64
   15c60:	095b      	lsrs	r3, r3, #5
   15c62:	fb03 1112 	mls	r1, r3, r2, r1
   15c66:	aa03      	add	r2, sp, #12
   15c68:	b289      	uxth	r1, r1
   15c6a:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   15c6e:	5311      	strh	r1, [r2, r4]
   15c70:	2b0a      	cmp	r3, #10
   15c72:	dae7      	bge.n	15c44 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x86>
   15c74:	1e61      	subs	r1, r4, #1
   15c76:	aa03      	add	r2, sp, #12
   15c78:	f103 0030 	add.w	r0, r3, #48	; 0x30
   15c7c:	5450      	strb	r0, [r2, r1]
   15c7e:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   15c82:	aa03      	add	r2, sp, #12
   15c84:	4411      	add	r1, r2
   15c86:	f644 72f4 	movw	r2, #20468	; 0x4ff4
   15c8a:	e9cd 1000 	strd	r1, r0, [sp]
   15c8e:	f2c0 0202 	movt	r2, #2
   15c92:	4660      	mov	r0, ip
   15c94:	2101      	movs	r1, #1
   15c96:	2300      	movs	r3, #0
   15c98:	f000 f8f4 	bl	15e84 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   15c9c:	b00d      	add	sp, #52	; 0x34
   15c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015ca2 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E>:
   15ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ca6:	b086      	sub	sp, #24
   15ca8:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
   15cac:	466a      	mov	r2, sp
   15cae:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
   15cb2:	4613      	mov	r3, r2
   15cb4:	4660      	mov	r0, ip
   15cb6:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
   15cba:	f000 f803 	bl	15cc4 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   15cbe:	b006      	add	sp, #24
   15cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015cc4 <_ZN4core3fmt5write17hd95ac78ed22a2252E>:
   15cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cc8:	b08b      	sub	sp, #44	; 0x2c
   15cca:	2303      	movs	r3, #3
   15ccc:	6897      	ldr	r7, [r2, #8]
   15cce:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   15cd2:	2320      	movs	r3, #32
   15cd4:	9303      	str	r3, [sp, #12]
   15cd6:	2300      	movs	r3, #0
   15cd8:	2f00      	cmp	r7, #0
   15cda:	9302      	str	r3, [sp, #8]
   15cdc:	e9cd 0108 	strd	r0, r1, [sp, #32]
   15ce0:	9306      	str	r3, [sp, #24]
   15ce2:	9304      	str	r3, [sp, #16]
   15ce4:	d07c      	beq.n	15de0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x11c>
   15ce6:	f8d2 b00c 	ldr.w	fp, [r2, #12]
   15cea:	e9d2 9400 	ldrd	r9, r4, [r2]
   15cee:	45a3      	cmp	fp, r4
   15cf0:	bf88      	it	hi
   15cf2:	46a3      	movhi	fp, r4
   15cf4:	f1bb 0f00 	cmp.w	fp, #0
   15cf8:	f000 809b 	beq.w	15e32 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   15cfc:	e9d2 6204 	ldrd	r6, r2, [r2, #16]
   15d00:	68cd      	ldr	r5, [r1, #12]
   15d02:	9201      	str	r2, [sp, #4]
   15d04:	e9d9 3200 	ldrd	r3, r2, [r9]
   15d08:	4619      	mov	r1, r3
   15d0a:	47a8      	blx	r5
   15d0c:	2800      	cmp	r0, #0
   15d0e:	f040 809e 	bne.w	15e4e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15d12:	464d      	mov	r5, r9
   15d14:	f04f 0a01 	mov.w	sl, #1
   15d18:	f04f 0800 	mov.w	r8, #0
   15d1c:	f04f 0910 	mov.w	r9, #16
   15d20:	eb07 0088 	add.w	r0, r7, r8, lsl #2
   15d24:	6841      	ldr	r1, [r0, #4]
   15d26:	9103      	str	r1, [sp, #12]
   15d28:	7f01      	ldrb	r1, [r0, #28]
   15d2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   15d2e:	6881      	ldr	r1, [r0, #8]
   15d30:	9102      	str	r1, [sp, #8]
   15d32:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   15d36:	b18a      	cbz	r2, 15d5c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x98>
   15d38:	2a02      	cmp	r2, #2
   15d3a:	d011      	beq.n	15d60 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   15d3c:	9a01      	ldr	r2, [sp, #4]
   15d3e:	4291      	cmp	r1, r2
   15d40:	f080 8098 	bcs.w	15e74 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   15d44:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
   15d48:	f645 33bf 	movw	r3, #23487	; 0x5bbf
   15d4c:	f2c0 0301 	movt	r3, #1
   15d50:	6852      	ldr	r2, [r2, #4]
   15d52:	429a      	cmp	r2, r3
   15d54:	d104      	bne.n	15d60 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   15d56:	f856 1031 	ldr.w	r1, [r6, r1, lsl #3]
   15d5a:	6809      	ldr	r1, [r1, #0]
   15d5c:	2201      	movs	r2, #1
   15d5e:	e000      	b.n	15d62 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9e>
   15d60:	2200      	movs	r2, #0
   15d62:	e9cd 2104 	strd	r2, r1, [sp, #16]
   15d66:	f857 1009 	ldr.w	r1, [r7, r9]
   15d6a:	68c0      	ldr	r0, [r0, #12]
   15d6c:	b180      	cbz	r0, 15d90 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xcc>
   15d6e:	2802      	cmp	r0, #2
   15d70:	d010      	beq.n	15d94 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   15d72:	9801      	ldr	r0, [sp, #4]
   15d74:	4281      	cmp	r1, r0
   15d76:	d27d      	bcs.n	15e74 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   15d78:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   15d7c:	f645 32bf 	movw	r2, #23487	; 0x5bbf
   15d80:	f2c0 0201 	movt	r2, #1
   15d84:	6840      	ldr	r0, [r0, #4]
   15d86:	4290      	cmp	r0, r2
   15d88:	d104      	bne.n	15d94 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   15d8a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   15d8e:	6801      	ldr	r1, [r0, #0]
   15d90:	2001      	movs	r0, #1
   15d92:	e000      	b.n	15d96 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd2>
   15d94:	2000      	movs	r0, #0
   15d96:	eb07 0209 	add.w	r2, r7, r9
   15d9a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   15d9e:	9801      	ldr	r0, [sp, #4]
   15da0:	f852 1c10 	ldr.w	r1, [r2, #-16]
   15da4:	4281      	cmp	r1, r0
   15da6:	d25d      	bcs.n	15e64 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1a0>
   15da8:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   15dac:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   15db0:	684a      	ldr	r2, [r1, #4]
   15db2:	a902      	add	r1, sp, #8
   15db4:	4790      	blx	r2
   15db6:	2800      	cmp	r0, #0
   15db8:	d149      	bne.n	15e4e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15dba:	45da      	cmp	sl, fp
   15dbc:	d24b      	bcs.n	15e56 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x192>
   15dbe:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   15dc2:	eb05 0208 	add.w	r2, r5, r8
   15dc6:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   15dca:	68db      	ldr	r3, [r3, #12]
   15dcc:	4798      	blx	r3
   15dce:	f109 0920 	add.w	r9, r9, #32
   15dd2:	f108 0808 	add.w	r8, r8, #8
   15dd6:	f10a 0a01 	add.w	sl, sl, #1
   15dda:	2800      	cmp	r0, #0
   15ddc:	d0a0      	beq.n	15d20 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x5c>
   15dde:	e036      	b.n	15e4e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15de0:	6956      	ldr	r6, [r2, #20]
   15de2:	e9d2 9400 	ldrd	r9, r4, [r2]
   15de6:	42a6      	cmp	r6, r4
   15de8:	bf88      	it	hi
   15dea:	4626      	movhi	r6, r4
   15dec:	b30e      	cbz	r6, 15e32 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   15dee:	6917      	ldr	r7, [r2, #16]
   15df0:	e9d9 3200 	ldrd	r3, r2, [r9]
   15df4:	68cd      	ldr	r5, [r1, #12]
   15df6:	4619      	mov	r1, r3
   15df8:	47a8      	blx	r5
   15dfa:	bb40      	cbnz	r0, 15e4e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15dfc:	f10d 0808 	add.w	r8, sp, #8
   15e00:	2500      	movs	r5, #0
   15e02:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   15e06:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   15e0a:	684a      	ldr	r2, [r1, #4]
   15e0c:	4641      	mov	r1, r8
   15e0e:	4790      	blx	r2
   15e10:	b9e8      	cbnz	r0, 15e4e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15e12:	f105 0a01 	add.w	sl, r5, #1
   15e16:	45b2      	cmp	sl, r6
   15e18:	d20d      	bcs.n	15e36 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x172>
   15e1a:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   15e1e:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
   15e22:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   15e26:	68db      	ldr	r3, [r3, #12]
   15e28:	4798      	blx	r3
   15e2a:	2800      	cmp	r0, #0
   15e2c:	4655      	mov	r5, sl
   15e2e:	d0e8      	beq.n	15e02 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x13e>
   15e30:	e00d      	b.n	15e4e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15e32:	f04f 0a00 	mov.w	sl, #0
   15e36:	4554      	cmp	r4, sl
   15e38:	d910      	bls.n	15e5c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   15e3a:	eb09 02ca 	add.w	r2, r9, sl, lsl #3
   15e3e:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   15e42:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
   15e46:	6852      	ldr	r2, [r2, #4]
   15e48:	68db      	ldr	r3, [r3, #12]
   15e4a:	4798      	blx	r3
   15e4c:	b130      	cbz	r0, 15e5c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   15e4e:	2001      	movs	r0, #1
   15e50:	b00b      	add	sp, #44	; 0x2c
   15e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e56:	46a9      	mov	r9, r5
   15e58:	4554      	cmp	r4, sl
   15e5a:	d8ee      	bhi.n	15e3a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x176>
   15e5c:	2000      	movs	r0, #0
   15e5e:	b00b      	add	sp, #44	; 0x2c
   15e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e64:	f245 3020 	movw	r0, #21280	; 0x5320
   15e68:	f2c0 0002 	movt	r0, #2
   15e6c:	9a01      	ldr	r2, [sp, #4]
   15e6e:	f7ff fc47 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   15e72:	defe      	udf	#254	; 0xfe
   15e74:	f245 3030 	movw	r0, #21296	; 0x5330
   15e78:	f2c0 0002 	movt	r0, #2
   15e7c:	9a01      	ldr	r2, [sp, #4]
   15e7e:	f7ff fc3f 	bl	15700 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   15e82:	defe      	udf	#254	; 0xfe

00015e84 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>:
   15e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e88:	b083      	sub	sp, #12
   15e8a:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
   15e8e:	469a      	mov	sl, r3
   15e90:	4604      	mov	r4, r0
   15e92:	b1e1      	cbz	r1, 15ece <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x4a>
   15e94:	f8d4 e000 	ldr.w	lr, [r4]
   15e98:	f04f 082b 	mov.w	r8, #43	; 0x2b
   15e9c:	f01e 0101 	ands.w	r1, lr, #1
   15ea0:	bf08      	it	eq
   15ea2:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
   15ea6:	eb01 0907 	add.w	r9, r1, r7
   15eaa:	ea5f 714e 	movs.w	r1, lr, lsl #29
   15eae:	d517      	bpl.n	15ee0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x5c>
   15eb0:	f1ba 0f00 	cmp.w	sl, #0
   15eb4:	d033      	beq.n	15f1e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9a>
   15eb6:	f1aa 0101 	sub.w	r1, sl, #1
   15eba:	f00a 0c03 	and.w	ip, sl, #3
   15ebe:	2903      	cmp	r1, #3
   15ec0:	d22f      	bcs.n	15f22 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9e>
   15ec2:	2100      	movs	r1, #0
   15ec4:	4613      	mov	r3, r2
   15ec6:	f1bc 0f00 	cmp.w	ip, #0
   15eca:	d152      	bne.n	15f72 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xee>
   15ecc:	e069      	b.n	15fa2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   15ece:	f8d4 e000 	ldr.w	lr, [r4]
   15ed2:	f107 0901 	add.w	r9, r7, #1
   15ed6:	f04f 082d 	mov.w	r8, #45	; 0x2d
   15eda:	ea5f 714e 	movs.w	r1, lr, lsl #29
   15ede:	d4e7      	bmi.n	15eb0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x2c>
   15ee0:	f04f 0a00 	mov.w	sl, #0
   15ee4:	2200      	movs	r2, #0
   15ee6:	68a0      	ldr	r0, [r4, #8]
   15ee8:	2801      	cmp	r0, #1
   15eea:	d161      	bne.n	15fb0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   15eec:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   15ef0:	45cb      	cmp	fp, r9
   15ef2:	d95d      	bls.n	15fb0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   15ef4:	ea5f 700e 	movs.w	r0, lr, lsl #28
   15ef8:	d46e      	bmi.n	15fd8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x154>
   15efa:	9202      	str	r2, [sp, #8]
   15efc:	ebab 0109 	sub.w	r1, fp, r9
   15f00:	f894 2020 	ldrb.w	r2, [r4, #32]
   15f04:	2000      	movs	r0, #0
   15f06:	46a9      	mov	r9, r5
   15f08:	460e      	mov	r6, r1
   15f0a:	2a03      	cmp	r2, #3
   15f0c:	bf08      	it	eq
   15f0e:	2201      	moveq	r2, #1
   15f10:	e8df f002 	tbb	[pc, r2]
   15f14:	02840287 	.word	0x02840287
   15f18:	2600      	movs	r6, #0
   15f1a:	4608      	mov	r0, r1
   15f1c:	e081      	b.n	16022 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x19e>
   15f1e:	2100      	movs	r1, #0
   15f20:	e03f      	b.n	15fa2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   15f22:	ebac 060a 	sub.w	r6, ip, sl
   15f26:	2100      	movs	r1, #0
   15f28:	4693      	mov	fp, r2
   15f2a:	4613      	mov	r3, r2
   15f2c:	e9cd 7501 	strd	r7, r5, [sp, #4]
   15f30:	781a      	ldrb	r2, [r3, #0]
   15f32:	785d      	ldrb	r5, [r3, #1]
   15f34:	7898      	ldrb	r0, [r3, #2]
   15f36:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   15f3a:	78df      	ldrb	r7, [r3, #3]
   15f3c:	2a80      	cmp	r2, #128	; 0x80
   15f3e:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
   15f42:	bf08      	it	eq
   15f44:	3101      	addeq	r1, #1
   15f46:	2a80      	cmp	r2, #128	; 0x80
   15f48:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15f4c:	bf08      	it	eq
   15f4e:	3101      	addeq	r1, #1
   15f50:	2880      	cmp	r0, #128	; 0x80
   15f52:	f007 00c0 	and.w	r0, r7, #192	; 0xc0
   15f56:	bf08      	it	eq
   15f58:	3101      	addeq	r1, #1
   15f5a:	2880      	cmp	r0, #128	; 0x80
   15f5c:	bf08      	it	eq
   15f5e:	3101      	addeq	r1, #1
   15f60:	3304      	adds	r3, #4
   15f62:	3604      	adds	r6, #4
   15f64:	d1e4      	bne.n	15f30 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xac>
   15f66:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   15f6a:	465a      	mov	r2, fp
   15f6c:	f1bc 0f00 	cmp.w	ip, #0
   15f70:	d017      	beq.n	15fa2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   15f72:	7818      	ldrb	r0, [r3, #0]
   15f74:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15f78:	2880      	cmp	r0, #128	; 0x80
   15f7a:	bf08      	it	eq
   15f7c:	3101      	addeq	r1, #1
   15f7e:	f1bc 0f01 	cmp.w	ip, #1
   15f82:	d00e      	beq.n	15fa2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   15f84:	7858      	ldrb	r0, [r3, #1]
   15f86:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15f8a:	2880      	cmp	r0, #128	; 0x80
   15f8c:	bf08      	it	eq
   15f8e:	3101      	addeq	r1, #1
   15f90:	f1bc 0f02 	cmp.w	ip, #2
   15f94:	d005      	beq.n	15fa2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   15f96:	7898      	ldrb	r0, [r3, #2]
   15f98:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15f9c:	2880      	cmp	r0, #128	; 0x80
   15f9e:	bf08      	it	eq
   15fa0:	3101      	addeq	r1, #1
   15fa2:	eb09 000a 	add.w	r0, r9, sl
   15fa6:	eba0 0901 	sub.w	r9, r0, r1
   15faa:	68a0      	ldr	r0, [r4, #8]
   15fac:	2801      	cmp	r0, #1
   15fae:	d09d      	beq.n	15eec <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x68>
   15fb0:	4620      	mov	r0, r4
   15fb2:	4641      	mov	r1, r8
   15fb4:	4653      	mov	r3, sl
   15fb6:	f000 f893 	bl	160e0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   15fba:	b120      	cbz	r0, 15fc6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x142>
   15fbc:	2601      	movs	r6, #1
   15fbe:	4630      	mov	r0, r6
   15fc0:	b003      	add	sp, #12
   15fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fc6:	69e1      	ldr	r1, [r4, #28]
   15fc8:	463a      	mov	r2, r7
   15fca:	69a0      	ldr	r0, [r4, #24]
   15fcc:	68cb      	ldr	r3, [r1, #12]
   15fce:	4629      	mov	r1, r5
   15fd0:	b003      	add	sp, #12
   15fd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fd6:	4718      	bx	r3
   15fd8:	6860      	ldr	r0, [r4, #4]
   15fda:	2601      	movs	r6, #1
   15fdc:	9002      	str	r0, [sp, #8]
   15fde:	2030      	movs	r0, #48	; 0x30
   15fe0:	f894 1020 	ldrb.w	r1, [r4, #32]
   15fe4:	4653      	mov	r3, sl
   15fe6:	6060      	str	r0, [r4, #4]
   15fe8:	4620      	mov	r0, r4
   15fea:	9101      	str	r1, [sp, #4]
   15fec:	4641      	mov	r1, r8
   15fee:	f884 6020 	strb.w	r6, [r4, #32]
   15ff2:	f000 f875 	bl	160e0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   15ff6:	2800      	cmp	r0, #0
   15ff8:	d1e1      	bne.n	15fbe <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   15ffa:	f894 2020 	ldrb.w	r2, [r4, #32]
   15ffe:	ebab 0109 	sub.w	r1, fp, r9
   16002:	2000      	movs	r0, #0
   16004:	46a9      	mov	r9, r5
   16006:	2a03      	cmp	r2, #3
   16008:	bf08      	it	eq
   1600a:	2201      	moveq	r2, #1
   1600c:	460e      	mov	r6, r1
   1600e:	e8df f002 	tbb	[pc, r2]
   16012:	0235      	.short	0x0235
   16014:	0232      	.short	0x0232
   16016:	2600      	movs	r6, #0
   16018:	4608      	mov	r0, r1
   1601a:	e02f      	b.n	1607c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1f8>
   1601c:	0848      	lsrs	r0, r1, #1
   1601e:	3101      	adds	r1, #1
   16020:	084e      	lsrs	r6, r1, #1
   16022:	1c45      	adds	r5, r0, #1
   16024:	3d01      	subs	r5, #1
   16026:	d007      	beq.n	16038 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1b4>
   16028:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   1602c:	6861      	ldr	r1, [r4, #4]
   1602e:	6912      	ldr	r2, [r2, #16]
   16030:	4790      	blx	r2
   16032:	2800      	cmp	r0, #0
   16034:	d0f6      	beq.n	16024 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1a0>
   16036:	e7c1      	b.n	15fbc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   16038:	9a02      	ldr	r2, [sp, #8]
   1603a:	4620      	mov	r0, r4
   1603c:	4641      	mov	r1, r8
   1603e:	4653      	mov	r3, sl
   16040:	f8d4 b004 	ldr.w	fp, [r4, #4]
   16044:	f000 f84c 	bl	160e0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   16048:	2800      	cmp	r0, #0
   1604a:	d1b7      	bne.n	15fbc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   1604c:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   16050:	463a      	mov	r2, r7
   16052:	68cb      	ldr	r3, [r1, #12]
   16054:	4649      	mov	r1, r9
   16056:	4798      	blx	r3
   16058:	2800      	cmp	r0, #0
   1605a:	d1af      	bne.n	15fbc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   1605c:	e9d4 5406 	ldrd	r5, r4, [r4, #24]
   16060:	1c77      	adds	r7, r6, #1
   16062:	2601      	movs	r6, #1
   16064:	3f01      	subs	r7, #1
   16066:	d02c      	beq.n	160c2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x23e>
   16068:	6922      	ldr	r2, [r4, #16]
   1606a:	4628      	mov	r0, r5
   1606c:	4659      	mov	r1, fp
   1606e:	4790      	blx	r2
   16070:	2800      	cmp	r0, #0
   16072:	d0f7      	beq.n	16064 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1e0>
   16074:	e7a3      	b.n	15fbe <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   16076:	0848      	lsrs	r0, r1, #1
   16078:	3101      	adds	r1, #1
   1607a:	084e      	lsrs	r6, r1, #1
   1607c:	1c45      	adds	r5, r0, #1
   1607e:	3d01      	subs	r5, #1
   16080:	d007      	beq.n	16092 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x20e>
   16082:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   16086:	6861      	ldr	r1, [r4, #4]
   16088:	6912      	ldr	r2, [r2, #16]
   1608a:	4790      	blx	r2
   1608c:	2800      	cmp	r0, #0
   1608e:	d0f6      	beq.n	1607e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1fa>
   16090:	e794      	b.n	15fbc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   16092:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   16096:	463a      	mov	r2, r7
   16098:	68cb      	ldr	r3, [r1, #12]
   1609a:	4649      	mov	r1, r9
   1609c:	f8d4 8004 	ldr.w	r8, [r4, #4]
   160a0:	4798      	blx	r3
   160a2:	2800      	cmp	r0, #0
   160a4:	f47f af8a 	bne.w	15fbc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   160a8:	e9d4 9506 	ldrd	r9, r5, [r4, #24]
   160ac:	1c77      	adds	r7, r6, #1
   160ae:	2601      	movs	r6, #1
   160b0:	3f01      	subs	r7, #1
   160b2:	d00b      	beq.n	160cc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x248>
   160b4:	692a      	ldr	r2, [r5, #16]
   160b6:	4648      	mov	r0, r9
   160b8:	4641      	mov	r1, r8
   160ba:	4790      	blx	r2
   160bc:	2800      	cmp	r0, #0
   160be:	d0f7      	beq.n	160b0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x22c>
   160c0:	e77d      	b.n	15fbe <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   160c2:	2600      	movs	r6, #0
   160c4:	4630      	mov	r0, r6
   160c6:	b003      	add	sp, #12
   160c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160cc:	9801      	ldr	r0, [sp, #4]
   160ce:	2600      	movs	r6, #0
   160d0:	f884 0020 	strb.w	r0, [r4, #32]
   160d4:	9802      	ldr	r0, [sp, #8]
   160d6:	6060      	str	r0, [r4, #4]
   160d8:	4630      	mov	r0, r6
   160da:	b003      	add	sp, #12
   160dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000160e0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>:
   160e0:	b570      	push	{r4, r5, r6, lr}
   160e2:	461c      	mov	r4, r3
   160e4:	4615      	mov	r5, r2
   160e6:	4606      	mov	r6, r0
   160e8:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   160ec:	d006      	beq.n	160fc <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   160ee:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
   160f2:	6912      	ldr	r2, [r2, #16]
   160f4:	4790      	blx	r2
   160f6:	b108      	cbz	r0, 160fc <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   160f8:	2001      	movs	r0, #1
   160fa:	bd70      	pop	{r4, r5, r6, pc}
   160fc:	b13d      	cbz	r5, 1610e <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x2e>
   160fe:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
   16102:	4622      	mov	r2, r4
   16104:	68cb      	ldr	r3, [r1, #12]
   16106:	4629      	mov	r1, r5
   16108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1610c:	4718      	bx	r3
   1610e:	2000      	movs	r0, #0
   16110:	bd70      	pop	{r4, r5, r6, pc}
	...

00016114 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>:
   16114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16118:	b081      	sub	sp, #4
   1611a:	f8d0 e008 	ldr.w	lr, [r0, #8]
   1611e:	4682      	mov	sl, r0
   16120:	6900      	ldr	r0, [r0, #16]
   16122:	4691      	mov	r9, r2
   16124:	4688      	mov	r8, r1
   16126:	f1be 0f01 	cmp.w	lr, #1
   1612a:	d111      	bne.n	16150 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x3c>
   1612c:	2801      	cmp	r0, #1
   1612e:	d012      	beq.n	16156 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x42>
   16130:	f1b9 0f00 	cmp.w	r9, #0
   16134:	f000 80c5 	beq.w	162c2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1ae>
   16138:	f1a9 0101 	sub.w	r1, r9, #1
   1613c:	f009 0003 	and.w	r0, r9, #3
   16140:	2903      	cmp	r1, #3
   16142:	d267      	bcs.n	16214 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x100>
   16144:	2100      	movs	r1, #0
   16146:	4642      	mov	r2, r8
   16148:	2800      	cmp	r0, #0
   1614a:	f040 8083 	bne.w	16254 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x140>
   1614e:	e097      	b.n	16280 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   16150:	2801      	cmp	r0, #1
   16152:	f040 80bd 	bne.w	162d0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   16156:	f1b9 0f00 	cmp.w	r9, #0
   1615a:	d054      	beq.n	16206 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xf2>
   1615c:	f8da 0014 	ldr.w	r0, [sl, #20]
   16160:	eb08 0109 	add.w	r1, r8, r9
   16164:	2200      	movs	r2, #0
   16166:	4647      	mov	r7, r8
   16168:	1c43      	adds	r3, r0, #1
   1616a:	4646      	mov	r6, r8
   1616c:	463c      	mov	r4, r7
   1616e:	f914 5b01 	ldrsb.w	r5, [r4], #1
   16172:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   16176:	b2e8      	uxtb	r0, r5
   16178:	dc2e      	bgt.n	161d8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   1617a:	428c      	cmp	r4, r1
   1617c:	d01a      	beq.n	161b4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xa0>
   1617e:	787d      	ldrb	r5, [r7, #1]
   16180:	1cbc      	adds	r4, r7, #2
   16182:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   16186:	4627      	mov	r7, r4
   16188:	f000 0b1f 	and.w	fp, r0, #31
   1618c:	28df      	cmp	r0, #223	; 0xdf
   1618e:	d917      	bls.n	161c0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xac>
   16190:	428f      	cmp	r7, r1
   16192:	d018      	beq.n	161c6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xb2>
   16194:	f817 4b01 	ldrb.w	r4, [r7], #1
   16198:	f004 0c3f 	and.w	ip, r4, #63	; 0x3f
   1619c:	463c      	mov	r4, r7
   1619e:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   161a2:	28f0      	cmp	r0, #240	; 0xf0
   161a4:	d316      	bcc.n	161d4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc0>
   161a6:	428f      	cmp	r7, r1
   161a8:	d020      	beq.n	161ec <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xd8>
   161aa:	f817 0b01 	ldrb.w	r0, [r7], #1
   161ae:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   161b2:	e01d      	b.n	161f0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xdc>
   161b4:	2500      	movs	r5, #0
   161b6:	460f      	mov	r7, r1
   161b8:	f000 0b1f 	and.w	fp, r0, #31
   161bc:	28df      	cmp	r0, #223	; 0xdf
   161be:	d8e7      	bhi.n	16190 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x7c>
   161c0:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
   161c4:	e008      	b.n	161d8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   161c6:	f04f 0c00 	mov.w	ip, #0
   161ca:	460f      	mov	r7, r1
   161cc:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   161d0:	28f0      	cmp	r0, #240	; 0xf0
   161d2:	d2e8      	bcs.n	161a6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x92>
   161d4:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
   161d8:	4627      	mov	r7, r4
   161da:	3b01      	subs	r3, #1
   161dc:	d065      	beq.n	162aa <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x196>
   161de:	1b90      	subs	r0, r2, r6
   161e0:	42b9      	cmp	r1, r7
   161e2:	eb00 0207 	add.w	r2, r0, r7
   161e6:	463e      	mov	r6, r7
   161e8:	d1c0      	bne.n	1616c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x58>
   161ea:	e061      	b.n	162b0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   161ec:	2000      	movs	r0, #0
   161ee:	4627      	mov	r7, r4
   161f0:	f44f 14e0 	mov.w	r4, #1835008	; 0x1c0000
   161f4:	ea04 448b 	and.w	r4, r4, fp, lsl #18
   161f8:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   161fc:	4428      	add	r0, r5
   161fe:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   16202:	d1ea      	bne.n	161da <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc6>
   16204:	e054      	b.n	162b0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   16206:	2200      	movs	r2, #0
   16208:	f1be 0f01 	cmp.w	lr, #1
   1620c:	d054      	beq.n	162b8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   1620e:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   16212:	e062      	b.n	162da <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1c6>
   16214:	eba0 0309 	sub.w	r3, r0, r9
   16218:	2100      	movs	r1, #0
   1621a:	4642      	mov	r2, r8
   1621c:	7817      	ldrb	r7, [r2, #0]
   1621e:	7856      	ldrb	r6, [r2, #1]
   16220:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
   16224:	7895      	ldrb	r5, [r2, #2]
   16226:	78d4      	ldrb	r4, [r2, #3]
   16228:	2f80      	cmp	r7, #128	; 0x80
   1622a:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
   1622e:	bf08      	it	eq
   16230:	3101      	addeq	r1, #1
   16232:	2f80      	cmp	r7, #128	; 0x80
   16234:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
   16238:	bf08      	it	eq
   1623a:	3101      	addeq	r1, #1
   1623c:	2f80      	cmp	r7, #128	; 0x80
   1623e:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   16242:	bf08      	it	eq
   16244:	3101      	addeq	r1, #1
   16246:	2f80      	cmp	r7, #128	; 0x80
   16248:	bf08      	it	eq
   1624a:	3101      	addeq	r1, #1
   1624c:	3204      	adds	r2, #4
   1624e:	3304      	adds	r3, #4
   16250:	d1e4      	bne.n	1621c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x108>
   16252:	b1a8      	cbz	r0, 16280 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   16254:	7813      	ldrb	r3, [r2, #0]
   16256:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1625a:	2b80      	cmp	r3, #128	; 0x80
   1625c:	bf08      	it	eq
   1625e:	3101      	addeq	r1, #1
   16260:	2801      	cmp	r0, #1
   16262:	d00d      	beq.n	16280 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   16264:	7853      	ldrb	r3, [r2, #1]
   16266:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1626a:	2b80      	cmp	r3, #128	; 0x80
   1626c:	bf08      	it	eq
   1626e:	3101      	addeq	r1, #1
   16270:	2802      	cmp	r0, #2
   16272:	d005      	beq.n	16280 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   16274:	7890      	ldrb	r0, [r2, #2]
   16276:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   1627a:	2880      	cmp	r0, #128	; 0x80
   1627c:	bf08      	it	eq
   1627e:	3101      	addeq	r1, #1
   16280:	f8da 000c 	ldr.w	r0, [sl, #12]
   16284:	eba9 0101 	sub.w	r1, r9, r1
   16288:	4281      	cmp	r1, r0
   1628a:	d221      	bcs.n	162d0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   1628c:	f1b9 0f00 	cmp.w	r9, #0
   16290:	d029      	beq.n	162e6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d2>
   16292:	f1a9 0101 	sub.w	r1, r9, #1
   16296:	f009 0c03 	and.w	ip, r9, #3
   1629a:	2903      	cmp	r1, #3
   1629c:	d225      	bcs.n	162ea <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d6>
   1629e:	2100      	movs	r1, #0
   162a0:	4643      	mov	r3, r8
   162a2:	f1bc 0f00 	cmp.w	ip, #0
   162a6:	d142      	bne.n	1632e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x21a>
   162a8:	e059      	b.n	1635e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   162aa:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   162ae:	d167      	bne.n	16380 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x26c>
   162b0:	464a      	mov	r2, r9
   162b2:	f1be 0f01 	cmp.w	lr, #1
   162b6:	d1aa      	bne.n	1620e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   162b8:	4691      	mov	r9, r2
   162ba:	f1b9 0f00 	cmp.w	r9, #0
   162be:	f47f af3b 	bne.w	16138 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24>
   162c2:	2100      	movs	r1, #0
   162c4:	f8da 000c 	ldr.w	r0, [sl, #12]
   162c8:	eba9 0101 	sub.w	r1, r9, r1
   162cc:	4281      	cmp	r1, r0
   162ce:	d3dd      	bcc.n	1628c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x178>
   162d0:	f8da 101c 	ldr.w	r1, [sl, #28]
   162d4:	464a      	mov	r2, r9
   162d6:	f8da 0018 	ldr.w	r0, [sl, #24]
   162da:	68cb      	ldr	r3, [r1, #12]
   162dc:	4641      	mov	r1, r8
   162de:	b001      	add	sp, #4
   162e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162e4:	4718      	bx	r3
   162e6:	2100      	movs	r1, #0
   162e8:	e039      	b.n	1635e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   162ea:	ebac 0709 	sub.w	r7, ip, r9
   162ee:	2100      	movs	r1, #0
   162f0:	4643      	mov	r3, r8
   162f2:	781e      	ldrb	r6, [r3, #0]
   162f4:	785d      	ldrb	r5, [r3, #1]
   162f6:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
   162fa:	789c      	ldrb	r4, [r3, #2]
   162fc:	78da      	ldrb	r2, [r3, #3]
   162fe:	2e80      	cmp	r6, #128	; 0x80
   16300:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   16304:	bf08      	it	eq
   16306:	3101      	addeq	r1, #1
   16308:	2e80      	cmp	r6, #128	; 0x80
   1630a:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
   1630e:	bf08      	it	eq
   16310:	3101      	addeq	r1, #1
   16312:	2e80      	cmp	r6, #128	; 0x80
   16314:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   16318:	bf08      	it	eq
   1631a:	3101      	addeq	r1, #1
   1631c:	2a80      	cmp	r2, #128	; 0x80
   1631e:	bf08      	it	eq
   16320:	3101      	addeq	r1, #1
   16322:	3304      	adds	r3, #4
   16324:	3704      	adds	r7, #4
   16326:	d1e4      	bne.n	162f2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1de>
   16328:	f1bc 0f00 	cmp.w	ip, #0
   1632c:	d017      	beq.n	1635e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   1632e:	781a      	ldrb	r2, [r3, #0]
   16330:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   16334:	2a80      	cmp	r2, #128	; 0x80
   16336:	bf08      	it	eq
   16338:	3101      	addeq	r1, #1
   1633a:	f1bc 0f01 	cmp.w	ip, #1
   1633e:	d00e      	beq.n	1635e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   16340:	785a      	ldrb	r2, [r3, #1]
   16342:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   16346:	2a80      	cmp	r2, #128	; 0x80
   16348:	bf08      	it	eq
   1634a:	3101      	addeq	r1, #1
   1634c:	f1bc 0f02 	cmp.w	ip, #2
   16350:	d005      	beq.n	1635e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   16352:	789a      	ldrb	r2, [r3, #2]
   16354:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   16358:	2a80      	cmp	r2, #128	; 0x80
   1635a:	bf08      	it	eq
   1635c:	3101      	addeq	r1, #1
   1635e:	f89a 3020 	ldrb.w	r3, [sl, #32]
   16362:	eba1 0109 	sub.w	r1, r1, r9
   16366:	4401      	add	r1, r0
   16368:	2000      	movs	r0, #0
   1636a:	1eda      	subs	r2, r3, #3
   1636c:	bf18      	it	ne
   1636e:	461a      	movne	r2, r3
   16370:	460e      	mov	r6, r1
   16372:	e8df f002 	tbb	[pc, r2]
   16376:	0216      	.short	0x0216
   16378:	0213      	.short	0x0213
   1637a:	2600      	movs	r6, #0
   1637c:	4608      	mov	r0, r1
   1637e:	e010      	b.n	163a2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x28e>
   16380:	2a00      	cmp	r2, #0
   16382:	bf18      	it	ne
   16384:	454a      	cmpne	r2, r9
   16386:	d134      	bne.n	163f2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2de>
   16388:	4640      	mov	r0, r8
   1638a:	2800      	cmp	r0, #0
   1638c:	bf0c      	ite	eq
   1638e:	464a      	moveq	r2, r9
   16390:	4680      	movne	r8, r0
   16392:	f1be 0f01 	cmp.w	lr, #1
   16396:	f43f af8f 	beq.w	162b8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   1639a:	e738      	b.n	1620e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   1639c:	0848      	lsrs	r0, r1, #1
   1639e:	3101      	adds	r1, #1
   163a0:	084e      	lsrs	r6, r1, #1
   163a2:	1c44      	adds	r4, r0, #1
   163a4:	3c01      	subs	r4, #1
   163a6:	d008      	beq.n	163ba <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2a6>
   163a8:	e9da 0206 	ldrd	r0, r2, [sl, #24]
   163ac:	f8da 1004 	ldr.w	r1, [sl, #4]
   163b0:	6912      	ldr	r2, [r2, #16]
   163b2:	4790      	blx	r2
   163b4:	2800      	cmp	r0, #0
   163b6:	d0f5      	beq.n	163a4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x290>
   163b8:	e013      	b.n	163e2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   163ba:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   163be:	464a      	mov	r2, r9
   163c0:	68cb      	ldr	r3, [r1, #12]
   163c2:	4641      	mov	r1, r8
   163c4:	f8da 7004 	ldr.w	r7, [sl, #4]
   163c8:	4798      	blx	r3
   163ca:	b950      	cbnz	r0, 163e2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   163cc:	e9da 4506 	ldrd	r4, r5, [sl, #24]
   163d0:	3601      	adds	r6, #1
   163d2:	3e01      	subs	r6, #1
   163d4:	d009      	beq.n	163ea <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2d6>
   163d6:	692a      	ldr	r2, [r5, #16]
   163d8:	4620      	mov	r0, r4
   163da:	4639      	mov	r1, r7
   163dc:	4790      	blx	r2
   163de:	2800      	cmp	r0, #0
   163e0:	d0f7      	beq.n	163d2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2be>
   163e2:	2001      	movs	r0, #1
   163e4:	b001      	add	sp, #4
   163e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163ea:	2000      	movs	r0, #0
   163ec:	b001      	add	sp, #4
   163ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163f2:	454a      	cmp	r2, r9
   163f4:	d204      	bcs.n	16400 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ec>
   163f6:	f918 0002 	ldrsb.w	r0, [r8, r2]
   163fa:	f110 0f40 	cmn.w	r0, #64	; 0x40
   163fe:	dac3      	bge.n	16388 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x274>
   16400:	2000      	movs	r0, #0
   16402:	2200      	movs	r2, #0
   16404:	2800      	cmp	r0, #0
   16406:	bf0c      	ite	eq
   16408:	464a      	moveq	r2, r9
   1640a:	4680      	movne	r8, r0
   1640c:	f1be 0f01 	cmp.w	lr, #1
   16410:	f43f af52 	beq.w	162b8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   16414:	e6fb      	b.n	1620e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>

00016416 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>:
   16416:	7800      	ldrb	r0, [r0, #0]
   16418:	f3c0 1000 	ubfx	r0, r0, #4, #1
   1641c:	4770      	bx	lr

0001641e <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>:
   1641e:	7800      	ldrb	r0, [r0, #0]
   16420:	f3c0 1040 	ubfx	r0, r0, #5, #1
   16424:	4770      	bx	lr

00016426 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>:
   16426:	b570      	push	{r4, r5, r6, lr}
   16428:	460d      	mov	r5, r1
   1642a:	4606      	mov	r6, r0
   1642c:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16430:	461c      	mov	r4, r3
   16432:	68cb      	ldr	r3, [r1, #12]
   16434:	4611      	mov	r1, r2
   16436:	4622      	mov	r2, r4
   16438:	4798      	blx	r3
   1643a:	7230      	strb	r0, [r6, #8]
   1643c:	fab4 f084 	clz	r0, r4
   16440:	0940      	lsrs	r0, r0, #5
   16442:	7270      	strb	r0, [r6, #9]
   16444:	2000      	movs	r0, #0
   16446:	e9c6 5000 	strd	r5, r0, [r6]
   1644a:	bd70      	pop	{r4, r5, r6, pc}

0001644c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E>:
   1644c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16450:	b085      	sub	sp, #20
   16452:	460c      	mov	r4, r1
   16454:	4605      	mov	r5, r0
   16456:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   1645a:	690a      	ldr	r2, [r1, #16]
   1645c:	2127      	movs	r1, #39	; 0x27
   1645e:	4790      	blx	r2
   16460:	b118      	cbz	r0, 1646a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x1e>
   16462:	2001      	movs	r0, #1
   16464:	b005      	add	sp, #20
   16466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1646a:	6829      	ldr	r1, [r5, #0]
   1646c:	a801      	add	r0, sp, #4
   1646e:	2201      	movs	r2, #1
   16470:	f7ff f878 	bl	15564 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>
   16474:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   16478:	f04f 091c 	mov.w	r9, #28
   1647c:	f8dd 800c 	ldr.w	r8, [sp, #12]
   16480:	f5b5 1f88 	cmp.w	r5, #1114112	; 0x110000
   16484:	f89d 6010 	ldrb.w	r6, [sp, #16]
   16488:	d139      	bne.n	164fe <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xb2>
   1648a:	f44f 1588 	mov.w	r5, #1114112	; 0x110000
   1648e:	2f02      	cmp	r7, #2
   16490:	f0c0 806b 	bcc.w	1656a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x11e>
   16494:	d00c      	beq.n	164b0 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x64>
   16496:	b2f0      	uxtb	r0, r6
   16498:	2604      	movs	r6, #4
   1649a:	2703      	movs	r7, #3
   1649c:	215c      	movs	r1, #92	; 0x5c
   1649e:	e8df f000 	tbb	[pc, r0]
   164a2:	0364      	.short	0x0364
   164a4:	09242010 	.word	0x09242010
   164a8:	2600      	movs	r6, #0
   164aa:	2703      	movs	r7, #3
   164ac:	217d      	movs	r1, #125	; 0x7d
   164ae:	e001      	b.n	164b4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   164b0:	2701      	movs	r7, #1
   164b2:	215c      	movs	r1, #92	; 0x5c
   164b4:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   164b8:	6912      	ldr	r2, [r2, #16]
   164ba:	4790      	blx	r2
   164bc:	2800      	cmp	r0, #0
   164be:	d0e6      	beq.n	1648e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x42>
   164c0:	e7cf      	b.n	16462 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   164c2:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   164c6:	2602      	movs	r6, #2
   164c8:	2703      	movs	r7, #3
   164ca:	f1b8 0f00 	cmp.w	r8, #0
   164ce:	fa25 f100 	lsr.w	r1, r5, r0
   164d2:	bf08      	it	eq
   164d4:	2601      	moveq	r6, #1
   164d6:	bf18      	it	ne
   164d8:	f1a8 0801 	subne.w	r8, r8, #1
   164dc:	f367 111f 	bfi	r1, r7, #4, #28
   164e0:	e7e8      	b.n	164b4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   164e2:	2602      	movs	r6, #2
   164e4:	2703      	movs	r7, #3
   164e6:	217b      	movs	r1, #123	; 0x7b
   164e8:	e7e4      	b.n	164b4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   164ea:	2703      	movs	r7, #3
   164ec:	2175      	movs	r1, #117	; 0x75
   164ee:	2603      	movs	r6, #3
   164f0:	e7e0      	b.n	164b4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   164f2:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   164f6:	6912      	ldr	r2, [r2, #16]
   164f8:	4790      	blx	r2
   164fa:	2800      	cmp	r0, #0
   164fc:	d1b1      	bne.n	16462 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   164fe:	4638      	mov	r0, r7
   16500:	2701      	movs	r7, #1
   16502:	215c      	movs	r1, #92	; 0x5c
   16504:	e8df f000 	tbb	[pc, r0]
   16508:	06020331 	.word	0x06020331
   1650c:	e7f1      	b.n	164f2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1650e:	2700      	movs	r7, #0
   16510:	4629      	mov	r1, r5
   16512:	e7ee      	b.n	164f2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   16514:	b2f0      	uxtb	r0, r6
   16516:	2604      	movs	r6, #4
   16518:	2703      	movs	r7, #3
   1651a:	215c      	movs	r1, #92	; 0x5c
   1651c:	e8df f000 	tbb	[pc, r0]
   16520:	1d080425 	.word	0x1d080425
   16524:	0321      	.short	0x0321
   16526:	e7e4      	b.n	164f2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   16528:	2600      	movs	r6, #0
   1652a:	2703      	movs	r7, #3
   1652c:	217d      	movs	r1, #125	; 0x7d
   1652e:	e7e0      	b.n	164f2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   16530:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   16534:	2602      	movs	r6, #2
   16536:	2703      	movs	r7, #3
   16538:	fa25 f000 	lsr.w	r0, r5, r0
   1653c:	f000 000f 	and.w	r0, r0, #15
   16540:	f100 0157 	add.w	r1, r0, #87	; 0x57
   16544:	280a      	cmp	r0, #10
   16546:	bf38      	it	cc
   16548:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   1654c:	f1b8 0f00 	cmp.w	r8, #0
   16550:	bf0c      	ite	eq
   16552:	2601      	moveq	r6, #1
   16554:	f1a8 0801 	subne.w	r8, r8, #1
   16558:	e7cb      	b.n	164f2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1655a:	2602      	movs	r6, #2
   1655c:	2703      	movs	r7, #3
   1655e:	217b      	movs	r1, #123	; 0x7b
   16560:	e7c7      	b.n	164f2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   16562:	2703      	movs	r7, #3
   16564:	2175      	movs	r1, #117	; 0x75
   16566:	2603      	movs	r6, #3
   16568:	e7c3      	b.n	164f2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1656a:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   1656e:	690a      	ldr	r2, [r1, #16]
   16570:	2127      	movs	r1, #39	; 0x27
   16572:	b005      	add	sp, #20
   16574:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16578:	4710      	bx	r2

0001657a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>:
   1657a:	b08c      	sub	sp, #48	; 0x30
   1657c:	e9cd 0100 	strd	r0, r1, [sp]
   16580:	2002      	movs	r0, #2
   16582:	a908      	add	r1, sp, #32
   16584:	9007      	str	r0, [sp, #28]
   16586:	9106      	str	r1, [sp, #24]
   16588:	2100      	movs	r1, #0
   1658a:	9105      	str	r1, [sp, #20]
   1658c:	e9cd 0103 	strd	r0, r1, [sp, #12]
   16590:	f245 3080 	movw	r0, #21376	; 0x5380
   16594:	f2c0 0002 	movt	r0, #2
   16598:	a901      	add	r1, sp, #4
   1659a:	9002      	str	r0, [sp, #8]
   1659c:	f247 20c7 	movw	r0, #29383	; 0x72c7
   165a0:	f2c0 0001 	movt	r0, #1
   165a4:	900b      	str	r0, [sp, #44]	; 0x2c
   165a6:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   165aa:	4668      	mov	r0, sp
   165ac:	f245 3190 	movw	r1, #21392	; 0x5390
   165b0:	9008      	str	r0, [sp, #32]
   165b2:	a802      	add	r0, sp, #8
   165b4:	f2c0 0102 	movt	r1, #2
   165b8:	f7ff f8c2 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   165bc:	defe      	udf	#254	; 0xfe

000165be <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>:
   165be:	b08c      	sub	sp, #48	; 0x30
   165c0:	e9cd 0100 	strd	r0, r1, [sp]
   165c4:	2002      	movs	r0, #2
   165c6:	a908      	add	r1, sp, #32
   165c8:	9007      	str	r0, [sp, #28]
   165ca:	9106      	str	r1, [sp, #24]
   165cc:	2100      	movs	r1, #0
   165ce:	9105      	str	r1, [sp, #20]
   165d0:	e9cd 0103 	strd	r0, r1, [sp, #12]
   165d4:	f245 30c4 	movw	r0, #21444	; 0x53c4
   165d8:	f2c0 0002 	movt	r0, #2
   165dc:	a901      	add	r1, sp, #4
   165de:	9002      	str	r0, [sp, #8]
   165e0:	f247 20c7 	movw	r0, #29383	; 0x72c7
   165e4:	f2c0 0001 	movt	r0, #1
   165e8:	900b      	str	r0, [sp, #44]	; 0x2c
   165ea:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   165ee:	4668      	mov	r0, sp
   165f0:	f245 31d4 	movw	r1, #21460	; 0x53d4
   165f4:	9008      	str	r0, [sp, #32]
   165f6:	a802      	add	r0, sp, #8
   165f8:	f2c0 0102 	movt	r1, #2
   165fc:	f7ff f8a0 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16600:	defe      	udf	#254	; 0xfe

00016602 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>:
   16602:	b09a      	sub	sp, #104	; 0x68
   16604:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   16608:	e9cd 2300 	strd	r2, r3, [sp]
   1660c:	d802      	bhi.n	16614 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12>
   1660e:	2501      	movs	r5, #1
   16610:	468c      	mov	ip, r1
   16612:	e03e      	b.n	16692 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   16614:	f1c1 0e00 	rsb	lr, r1, #0
   16618:	f44f 7c80 	mov.w	ip, #256	; 0x100
   1661c:	458c      	cmp	ip, r1
   1661e:	d205      	bcs.n	1662c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2a>
   16620:	f910 400c 	ldrsb.w	r4, [r0, ip]
   16624:	f114 0f41 	cmn.w	r4, #65	; 0x41
   16628:	f300 8108 	bgt.w	1683c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23a>
   1662c:	eb0e 040c 	add.w	r4, lr, ip
   16630:	f1ac 0601 	sub.w	r6, ip, #1
   16634:	2c01      	cmp	r4, #1
   16636:	d02a      	beq.n	1668e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16638:	428e      	cmp	r6, r1
   1663a:	d206      	bcs.n	1664a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x48>
   1663c:	eb00 050c 	add.w	r5, r0, ip
   16640:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
   16644:	f115 0f41 	cmn.w	r5, #65	; 0x41
   16648:	dc21      	bgt.n	1668e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1664a:	f1ac 0602 	sub.w	r6, ip, #2
   1664e:	2c02      	cmp	r4, #2
   16650:	d01d      	beq.n	1668e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16652:	428e      	cmp	r6, r1
   16654:	d206      	bcs.n	16664 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x62>
   16656:	eb00 050c 	add.w	r5, r0, ip
   1665a:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
   1665e:	f115 0f41 	cmn.w	r5, #65	; 0x41
   16662:	dc14      	bgt.n	1668e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16664:	f1ac 0603 	sub.w	r6, ip, #3
   16668:	2c03      	cmp	r4, #3
   1666a:	d010      	beq.n	1668e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1666c:	428e      	cmp	r6, r1
   1666e:	d206      	bcs.n	1667e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x7c>
   16670:	eb00 050c 	add.w	r5, r0, ip
   16674:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
   16678:	f115 0f41 	cmn.w	r5, #65	; 0x41
   1667c:	dc07      	bgt.n	1668e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1667e:	f1bc 0c04 	subs.w	ip, ip, #4
   16682:	f04f 0500 	mov.w	r5, #0
   16686:	d004      	beq.n	16692 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   16688:	2c04      	cmp	r4, #4
   1668a:	d1c7      	bne.n	1661c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1a>
   1668c:	e001      	b.n	16692 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   1668e:	2500      	movs	r5, #0
   16690:	46b4      	mov	ip, r6
   16692:	2605      	movs	r6, #5
   16694:	2d00      	cmp	r5, #0
   16696:	f245 45a2 	movw	r5, #21666	; 0x54a2
   1669a:	e9cd 0c02 	strd	r0, ip, [sp, #8]
   1669e:	bf18      	it	ne
   166a0:	2600      	movne	r6, #0
   166a2:	9605      	str	r6, [sp, #20]
   166a4:	f644 76f4 	movw	r6, #20468	; 0x4ff4
   166a8:	f2c0 0502 	movt	r5, #2
   166ac:	f2c0 0602 	movt	r6, #2
   166b0:	bf18      	it	ne
   166b2:	4635      	movne	r5, r6
   166b4:	428a      	cmp	r2, r1
   166b6:	9504      	str	r5, [sp, #16]
   166b8:	bf98      	it	ls
   166ba:	428b      	cmpls	r3, r1
   166bc:	d92a      	bls.n	16714 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x112>
   166be:	428a      	cmp	r2, r1
   166c0:	f04f 0003 	mov.w	r0, #3
   166c4:	a910      	add	r1, sp, #64	; 0x40
   166c6:	bf88      	it	hi
   166c8:	4613      	movhi	r3, r2
   166ca:	900f      	str	r0, [sp, #60]	; 0x3c
   166cc:	910e      	str	r1, [sp, #56]	; 0x38
   166ce:	2100      	movs	r1, #0
   166d0:	910d      	str	r1, [sp, #52]	; 0x34
   166d2:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   166d6:	f245 40c8 	movw	r0, #21704	; 0x54c8
   166da:	f2c0 0002 	movt	r0, #2
   166de:	a904      	add	r1, sp, #16
   166e0:	900a      	str	r0, [sp, #40]	; 0x28
   166e2:	f247 30b5 	movw	r0, #29621	; 0x73b5
   166e6:	f2c0 0001 	movt	r0, #1
   166ea:	9308      	str	r3, [sp, #32]
   166ec:	9015      	str	r0, [sp, #84]	; 0x54
   166ee:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
   166f2:	a802      	add	r0, sp, #8
   166f4:	f245 41e0 	movw	r1, #21728	; 0x54e0
   166f8:	9012      	str	r0, [sp, #72]	; 0x48
   166fa:	f247 20c7 	movw	r0, #29383	; 0x72c7
   166fe:	f2c0 0102 	movt	r1, #2
   16702:	f2c0 0001 	movt	r0, #1
   16706:	9011      	str	r0, [sp, #68]	; 0x44
   16708:	a808      	add	r0, sp, #32
   1670a:	9010      	str	r0, [sp, #64]	; 0x40
   1670c:	a80a      	add	r0, sp, #40	; 0x28
   1670e:	f7ff f817 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16712:	defe      	udf	#254	; 0xfe
   16714:	429a      	cmp	r2, r3
   16716:	f200 80f1 	bhi.w	168fc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2fa>
   1671a:	2a00      	cmp	r2, #0
   1671c:	bf18      	it	ne
   1671e:	4291      	cmpne	r1, r2
   16720:	d109      	bne.n	16736 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x134>
   16722:	461a      	mov	r2, r3
   16724:	2a00      	cmp	r2, #0
   16726:	9206      	str	r2, [sp, #24]
   16728:	bf18      	it	ne
   1672a:	428a      	cmpne	r2, r1
   1672c:	d10e      	bne.n	1674c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x14a>
   1672e:	4613      	mov	r3, r2
   16730:	428b      	cmp	r3, r1
   16732:	d047      	beq.n	167c4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   16734:	e052      	b.n	167dc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   16736:	d9f5      	bls.n	16724 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x122>
   16738:	5686      	ldrsb	r6, [r0, r2]
   1673a:	f116 0f40 	cmn.w	r6, #64	; 0x40
   1673e:	bfa8      	it	ge
   16740:	461a      	movge	r2, r3
   16742:	2a00      	cmp	r2, #0
   16744:	9206      	str	r2, [sp, #24]
   16746:	bf18      	it	ne
   16748:	428a      	cmpne	r2, r1
   1674a:	d0f0      	beq.n	1672e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   1674c:	f1a0 0c01 	sub.w	ip, r0, #1
   16750:	f101 0e02 	add.w	lr, r1, #2
   16754:	1ccc      	adds	r4, r1, #3
   16756:	1c4d      	adds	r5, r1, #1
   16758:	1d0e      	adds	r6, r1, #4
   1675a:	428a      	cmp	r2, r1
   1675c:	d206      	bcs.n	1676c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x16a>
   1675e:	eb0c 0302 	add.w	r3, ip, r2
   16762:	f993 3001 	ldrsb.w	r3, [r3, #1]
   16766:	f113 0f41 	cmn.w	r3, #65	; 0x41
   1676a:	dce0      	bgt.n	1672e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   1676c:	1e53      	subs	r3, r2, #1
   1676e:	bf18      	it	ne
   16770:	4295      	cmpne	r5, r2
   16772:	d025      	beq.n	167c0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   16774:	428b      	cmp	r3, r1
   16776:	d204      	bcs.n	16782 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x180>
   16778:	f91c 7002 	ldrsb.w	r7, [ip, r2]
   1677c:	f117 0f41 	cmn.w	r7, #65	; 0x41
   16780:	dc1e      	bgt.n	167c0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   16782:	1e93      	subs	r3, r2, #2
   16784:	bf18      	it	ne
   16786:	4596      	cmpne	lr, r2
   16788:	d01a      	beq.n	167c0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   1678a:	428b      	cmp	r3, r1
   1678c:	d206      	bcs.n	1679c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x19a>
   1678e:	eb0c 0702 	add.w	r7, ip, r2
   16792:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
   16796:	f117 0f41 	cmn.w	r7, #65	; 0x41
   1679a:	dc11      	bgt.n	167c0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   1679c:	1ed3      	subs	r3, r2, #3
   1679e:	bf18      	it	ne
   167a0:	4294      	cmpne	r4, r2
   167a2:	d00d      	beq.n	167c0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   167a4:	428b      	cmp	r3, r1
   167a6:	d206      	bcs.n	167b6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1b4>
   167a8:	eb0c 0702 	add.w	r7, ip, r2
   167ac:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
   167b0:	f117 0f41 	cmn.w	r7, #65	; 0x41
   167b4:	dc04      	bgt.n	167c0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   167b6:	1f13      	subs	r3, r2, #4
   167b8:	d002      	beq.n	167c0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   167ba:	4296      	cmp	r6, r2
   167bc:	461a      	mov	r2, r3
   167be:	d1cc      	bne.n	1675a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x158>
   167c0:	428b      	cmp	r3, r1
   167c2:	d10b      	bne.n	167dc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   167c4:	f245 1090 	movw	r0, #20880	; 0x5190
   167c8:	f245 5230 	movw	r2, #21808	; 0x5530
   167cc:	f2c0 0002 	movt	r0, #2
   167d0:	f2c0 0202 	movt	r2, #2
   167d4:	212b      	movs	r1, #43	; 0x2b
   167d6:	f7fe ff7d 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   167da:	defe      	udf	#254	; 0xfe
   167dc:	18c5      	adds	r5, r0, r3
   167de:	462e      	mov	r6, r5
   167e0:	f916 4b01 	ldrsb.w	r4, [r6], #1
   167e4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   167e8:	b2e2      	uxtb	r2, r4
   167ea:	dd02      	ble.n	167f2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1f0>
   167ec:	9207      	str	r2, [sp, #28]
   167ee:	2101      	movs	r1, #1
   167f0:	e04d      	b.n	1688e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   167f2:	4408      	add	r0, r1
   167f4:	4286      	cmp	r6, r0
   167f6:	d10b      	bne.n	16810 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x20e>
   167f8:	2500      	movs	r5, #0
   167fa:	4606      	mov	r6, r0
   167fc:	f002 011f 	and.w	r1, r2, #31
   16800:	2adf      	cmp	r2, #223	; 0xdf
   16802:	d80d      	bhi.n	16820 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x21e>
   16804:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
   16808:	2880      	cmp	r0, #128	; 0x80
   1680a:	9007      	str	r0, [sp, #28]
   1680c:	d333      	bcc.n	16876 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   1680e:	e034      	b.n	1687a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   16810:	7869      	ldrb	r1, [r5, #1]
   16812:	1cae      	adds	r6, r5, #2
   16814:	f001 053f 	and.w	r5, r1, #63	; 0x3f
   16818:	f002 011f 	and.w	r1, r2, #31
   1681c:	2adf      	cmp	r2, #223	; 0xdf
   1681e:	d9f1      	bls.n	16804 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x202>
   16820:	4286      	cmp	r6, r0
   16822:	d10d      	bne.n	16840 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23e>
   16824:	2400      	movs	r4, #0
   16826:	4606      	mov	r6, r0
   16828:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   1682c:	2af0      	cmp	r2, #240	; 0xf0
   1682e:	d20f      	bcs.n	16850 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x24e>
   16830:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
   16834:	2880      	cmp	r0, #128	; 0x80
   16836:	9007      	str	r0, [sp, #28]
   16838:	d31d      	bcc.n	16876 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   1683a:	e01e      	b.n	1687a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   1683c:	2500      	movs	r5, #0
   1683e:	e728      	b.n	16692 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   16840:	f816 4b01 	ldrb.w	r4, [r6], #1
   16844:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   16848:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   1684c:	2af0      	cmp	r2, #240	; 0xf0
   1684e:	d3ef      	bcc.n	16830 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x22e>
   16850:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   16854:	ea02 4181 	and.w	r1, r2, r1, lsl #18
   16858:	4286      	cmp	r6, r0
   1685a:	bf1a      	itte	ne
   1685c:	7830      	ldrbne	r0, [r6, #0]
   1685e:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
   16862:	2000      	moveq	r0, #0
   16864:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
   16868:	4408      	add	r0, r1
   1686a:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   1686e:	d0a9      	beq.n	167c4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   16870:	2880      	cmp	r0, #128	; 0x80
   16872:	9007      	str	r0, [sp, #28]
   16874:	d201      	bcs.n	1687a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   16876:	2101      	movs	r1, #1
   16878:	e009      	b.n	1688e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   1687a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   1687e:	d201      	bcs.n	16884 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x282>
   16880:	2102      	movs	r1, #2
   16882:	e004      	b.n	1688e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   16884:	2104      	movs	r1, #4
   16886:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   1688a:	bf38      	it	cc
   1688c:	2103      	movcc	r1, #3
   1688e:	4419      	add	r1, r3
   16890:	aa10      	add	r2, sp, #64	; 0x40
   16892:	a808      	add	r0, sp, #32
   16894:	e9cd 3108 	strd	r3, r1, [sp, #32]
   16898:	2105      	movs	r1, #5
   1689a:	910f      	str	r1, [sp, #60]	; 0x3c
   1689c:	920e      	str	r2, [sp, #56]	; 0x38
   1689e:	2200      	movs	r2, #0
   168a0:	920d      	str	r2, [sp, #52]	; 0x34
   168a2:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
   168a6:	f245 516c 	movw	r1, #21868	; 0x556c
   168aa:	f2c0 0102 	movt	r1, #2
   168ae:	aa04      	add	r2, sp, #16
   168b0:	910a      	str	r1, [sp, #40]	; 0x28
   168b2:	f247 31b5 	movw	r1, #29621	; 0x73b5
   168b6:	f2c0 0101 	movt	r1, #1
   168ba:	9119      	str	r1, [sp, #100]	; 0x64
   168bc:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
   168c0:	a902      	add	r1, sp, #8
   168c2:	9116      	str	r1, [sp, #88]	; 0x58
   168c4:	f245 5105 	movw	r1, #21765	; 0x5505
   168c8:	f2c0 0101 	movt	r1, #1
   168cc:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   168d0:	f246 404d 	movw	r0, #25677	; 0x644d
   168d4:	f2c0 0001 	movt	r0, #1
   168d8:	f245 5194 	movw	r1, #21908	; 0x5594
   168dc:	9013      	str	r0, [sp, #76]	; 0x4c
   168de:	a807      	add	r0, sp, #28
   168e0:	9012      	str	r0, [sp, #72]	; 0x48
   168e2:	f247 20c7 	movw	r0, #29383	; 0x72c7
   168e6:	f2c0 0001 	movt	r0, #1
   168ea:	f2c0 0102 	movt	r1, #2
   168ee:	9011      	str	r0, [sp, #68]	; 0x44
   168f0:	a806      	add	r0, sp, #24
   168f2:	9010      	str	r0, [sp, #64]	; 0x40
   168f4:	a80a      	add	r0, sp, #40	; 0x28
   168f6:	f7fe ff23 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   168fa:	defe      	udf	#254	; 0xfe
   168fc:	2004      	movs	r0, #4
   168fe:	a910      	add	r1, sp, #64	; 0x40
   16900:	900f      	str	r0, [sp, #60]	; 0x3c
   16902:	910e      	str	r1, [sp, #56]	; 0x38
   16904:	2100      	movs	r1, #0
   16906:	910d      	str	r1, [sp, #52]	; 0x34
   16908:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   1690c:	f245 5000 	movw	r0, #21760	; 0x5500
   16910:	f2c0 0002 	movt	r0, #2
   16914:	a904      	add	r1, sp, #16
   16916:	900a      	str	r0, [sp, #40]	; 0x28
   16918:	f247 30b5 	movw	r0, #29621	; 0x73b5
   1691c:	f2c0 0001 	movt	r0, #1
   16920:	9017      	str	r0, [sp, #92]	; 0x5c
   16922:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
   16926:	a802      	add	r0, sp, #8
   16928:	9014      	str	r0, [sp, #80]	; 0x50
   1692a:	f247 20c7 	movw	r0, #29383	; 0x72c7
   1692e:	a901      	add	r1, sp, #4
   16930:	f2c0 0001 	movt	r0, #1
   16934:	9013      	str	r0, [sp, #76]	; 0x4c
   16936:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
   1693a:	f245 5120 	movw	r1, #21792	; 0x5520
   1693e:	4668      	mov	r0, sp
   16940:	f2c0 0102 	movt	r1, #2
   16944:	9010      	str	r0, [sp, #64]	; 0x40
   16946:	a80a      	add	r0, sp, #40	; 0x28
   16948:	f7fe fefa 	bl	15740 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1694c:	defe      	udf	#254	; 0xfe

0001694e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>:
   1694e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16952:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   16956:	d270      	bcs.n	16a3a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xec>
   16958:	f245 5eb4 	movw	lr, #21940	; 0x55b4
   1695c:	f245 6806 	movw	r8, #22022	; 0x5606
   16960:	fa1f f980 	uxth.w	r9, r0
   16964:	f2c0 0e02 	movt	lr, #2
   16968:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   1696c:	f04f 0a00 	mov.w	sl, #0
   16970:	f2c0 0802 	movt	r8, #2
   16974:	4675      	mov	r5, lr
   16976:	786e      	ldrb	r6, [r5, #1]
   16978:	4652      	mov	r2, sl
   1697a:	782b      	ldrb	r3, [r5, #0]
   1697c:	3502      	adds	r5, #2
   1697e:	44b2      	add	sl, r6
   16980:	4563      	cmp	r3, ip
   16982:	d129      	bne.n	169d8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x8a>
   16984:	4592      	cmp	sl, r2
   16986:	f0c0 8112 	bcc.w	16bae <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   1698a:	ea4f 035a 	mov.w	r3, sl, lsr #1
   1698e:	2b92      	cmp	r3, #146	; 0x92
   16990:	f200 8112 	bhi.w	16bb8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x26a>
   16994:	eb08 0302 	add.w	r3, r8, r2
   16998:	199a      	adds	r2, r3, r6
   1699a:	b31e      	cbz	r6, 169e4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   1699c:	461f      	mov	r7, r3
   1699e:	b2c4      	uxtb	r4, r0
   169a0:	f817 1b01 	ldrb.w	r1, [r7], #1
   169a4:	42a1      	cmp	r1, r4
   169a6:	f000 80b6 	beq.w	16b16 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   169aa:	4297      	cmp	r7, r2
   169ac:	d01a      	beq.n	169e4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   169ae:	7859      	ldrb	r1, [r3, #1]
   169b0:	42a1      	cmp	r1, r4
   169b2:	f000 80b0 	beq.w	16b16 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   169b6:	1c99      	adds	r1, r3, #2
   169b8:	4291      	cmp	r1, r2
   169ba:	d013      	beq.n	169e4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   169bc:	7899      	ldrb	r1, [r3, #2]
   169be:	42a1      	cmp	r1, r4
   169c0:	f000 80a9 	beq.w	16b16 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   169c4:	1cd9      	adds	r1, r3, #3
   169c6:	4291      	cmp	r1, r2
   169c8:	d00c      	beq.n	169e4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   169ca:	1d19      	adds	r1, r3, #4
   169cc:	78db      	ldrb	r3, [r3, #3]
   169ce:	3e04      	subs	r6, #4
   169d0:	42a3      	cmp	r3, r4
   169d2:	460b      	mov	r3, r1
   169d4:	d1e1      	bne.n	1699a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x4c>
   169d6:	e09e      	b.n	16b16 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   169d8:	d808      	bhi.n	169ec <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   169da:	f10e 0252 	add.w	r2, lr, #82	; 0x52
   169de:	4295      	cmp	r5, r2
   169e0:	d1c9      	bne.n	16976 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   169e2:	e003      	b.n	169ec <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   169e4:	f10e 0152 	add.w	r1, lr, #82	; 0x52
   169e8:	428d      	cmp	r5, r1
   169ea:	d1c4      	bne.n	16976 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   169ec:	f245 752b 	movw	r5, #22315	; 0x572b
   169f0:	2101      	movs	r1, #1
   169f2:	f2c0 0502 	movt	r5, #2
   169f6:	4628      	mov	r0, r5
   169f8:	4602      	mov	r2, r0
   169fa:	f812 7b01 	ldrb.w	r7, [r2], #1
   169fe:	b27e      	sxtb	r6, r7
   16a00:	2e00      	cmp	r6, #0
   16a02:	d404      	bmi.n	16a0e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xc0>
   16a04:	4610      	mov	r0, r2
   16a06:	ebb9 0907 	subs.w	r9, r9, r7
   16a0a:	d50f      	bpl.n	16a2c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xde>
   16a0c:	e0bd      	b.n	16b8a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16a0e:	f505 739d 	add.w	r3, r5, #314	; 0x13a
   16a12:	429a      	cmp	r2, r3
   16a14:	f000 80db 	beq.w	16bce <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   16a18:	7842      	ldrb	r2, [r0, #1]
   16a1a:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   16a1e:	3002      	adds	r0, #2
   16a20:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   16a24:	ebb9 0907 	subs.w	r9, r9, r7
   16a28:	f100 80af 	bmi.w	16b8a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16a2c:	f505 729d 	add.w	r2, r5, #314	; 0x13a
   16a30:	f081 0101 	eor.w	r1, r1, #1
   16a34:	4290      	cmp	r0, r2
   16a36:	d1df      	bne.n	169f8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xaa>
   16a38:	e0a7      	b.n	16b8a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16a3a:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
   16a3e:	d26f      	bcs.n	16b20 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1d2>
   16a40:	f645 0e65 	movw	lr, #22629	; 0x5865
   16a44:	f645 08ab 	movw	r8, #22699	; 0x58ab
   16a48:	fa1f f980 	uxth.w	r9, r0
   16a4c:	f2c0 0e02 	movt	lr, #2
   16a50:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   16a54:	f04f 0a00 	mov.w	sl, #0
   16a58:	f2c0 0802 	movt	r8, #2
   16a5c:	4675      	mov	r5, lr
   16a5e:	786e      	ldrb	r6, [r5, #1]
   16a60:	4652      	mov	r2, sl
   16a62:	782b      	ldrb	r3, [r5, #0]
   16a64:	3502      	adds	r5, #2
   16a66:	44b2      	add	sl, r6
   16a68:	4563      	cmp	r3, ip
   16a6a:	d125      	bne.n	16ab8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x16a>
   16a6c:	4592      	cmp	sl, r2
   16a6e:	f0c0 809e 	bcc.w	16bae <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   16a72:	f1ba 0fa6 	cmp.w	sl, #166	; 0xa6
   16a76:	f200 80a5 	bhi.w	16bc4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x276>
   16a7a:	eb08 0302 	add.w	r3, r8, r2
   16a7e:	199a      	adds	r2, r3, r6
   16a80:	b306      	cbz	r6, 16ac4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   16a82:	461f      	mov	r7, r3
   16a84:	b2c4      	uxtb	r4, r0
   16a86:	f817 1b01 	ldrb.w	r1, [r7], #1
   16a8a:	42a1      	cmp	r1, r4
   16a8c:	d043      	beq.n	16b16 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   16a8e:	4297      	cmp	r7, r2
   16a90:	d018      	beq.n	16ac4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   16a92:	7859      	ldrb	r1, [r3, #1]
   16a94:	42a1      	cmp	r1, r4
   16a96:	d03e      	beq.n	16b16 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   16a98:	1c99      	adds	r1, r3, #2
   16a9a:	4291      	cmp	r1, r2
   16a9c:	d012      	beq.n	16ac4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   16a9e:	7899      	ldrb	r1, [r3, #2]
   16aa0:	42a1      	cmp	r1, r4
   16aa2:	d038      	beq.n	16b16 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   16aa4:	1cd9      	adds	r1, r3, #3
   16aa6:	4291      	cmp	r1, r2
   16aa8:	d00c      	beq.n	16ac4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   16aaa:	1d19      	adds	r1, r3, #4
   16aac:	78db      	ldrb	r3, [r3, #3]
   16aae:	3e04      	subs	r6, #4
   16ab0:	42a3      	cmp	r3, r4
   16ab2:	460b      	mov	r3, r1
   16ab4:	d1e4      	bne.n	16a80 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x132>
   16ab6:	e02e      	b.n	16b16 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   16ab8:	d808      	bhi.n	16acc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   16aba:	f10e 0246 	add.w	r2, lr, #70	; 0x46
   16abe:	4295      	cmp	r5, r2
   16ac0:	d1cd      	bne.n	16a5e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   16ac2:	e003      	b.n	16acc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   16ac4:	f10e 0146 	add.w	r1, lr, #70	; 0x46
   16ac8:	428d      	cmp	r5, r1
   16aca:	d1c8      	bne.n	16a5e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   16acc:	f645 1551 	movw	r5, #22865	; 0x5951
   16ad0:	2101      	movs	r1, #1
   16ad2:	f2c0 0502 	movt	r5, #2
   16ad6:	4628      	mov	r0, r5
   16ad8:	4602      	mov	r2, r0
   16ada:	f812 7b01 	ldrb.w	r7, [r2], #1
   16ade:	b27e      	sxtb	r6, r7
   16ae0:	2e00      	cmp	r6, #0
   16ae2:	d40a      	bmi.n	16afa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1ac>
   16ae4:	4610      	mov	r0, r2
   16ae6:	ebb9 0907 	subs.w	r9, r9, r7
   16aea:	d44e      	bmi.n	16b8a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16aec:	f505 72cc 	add.w	r2, r5, #408	; 0x198
   16af0:	f081 0101 	eor.w	r1, r1, #1
   16af4:	4290      	cmp	r0, r2
   16af6:	d1ef      	bne.n	16ad8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x18a>
   16af8:	e047      	b.n	16b8a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16afa:	f505 73cc 	add.w	r3, r5, #408	; 0x198
   16afe:	429a      	cmp	r2, r3
   16b00:	d065      	beq.n	16bce <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   16b02:	7842      	ldrb	r2, [r0, #1]
   16b04:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   16b08:	3002      	adds	r0, #2
   16b0a:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   16b0e:	ebb9 0907 	subs.w	r9, r9, r7
   16b12:	d5eb      	bpl.n	16aec <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x19e>
   16b14:	e039      	b.n	16b8a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16b16:	2100      	movs	r1, #0
   16b18:	f001 0001 	and.w	r0, r1, #1
   16b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16b20:	f240 51e2 	movw	r1, #1506	; 0x5e2
   16b24:	f240 63e2 	movw	r3, #1762	; 0x6e2
   16b28:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
   16b2c:	1842      	adds	r2, r0, r1
   16b2e:	f2c0 030b 	movt	r3, #11
   16b32:	2100      	movs	r1, #0
   16b34:	429a      	cmp	r2, r3
   16b36:	d328      	bcc.n	16b8a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16b38:	f241 421f 	movw	r2, #5151	; 0x141f
   16b3c:	f640 431f 	movw	r3, #3103	; 0xc1f
   16b40:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   16b44:	4402      	add	r2, r0
   16b46:	429a      	cmp	r2, r3
   16b48:	bf21      	itttt	cs
   16b4a:	f243 125e 	movwcs	r2, #12638	; 0x315e
   16b4e:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   16b52:	4402      	addcs	r2, r0
   16b54:	2a0e      	cmpcs	r2, #14
   16b56:	d318      	bcc.n	16b8a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16b58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   16b5c:	f64b 031e 	movw	r3, #47134	; 0xb81e
   16b60:	f2c0 021f 	movt	r2, #31
   16b64:	f2c0 0302 	movt	r3, #2
   16b68:	4002      	ands	r2, r0
   16b6a:	429a      	cmp	r2, r3
   16b6c:	d00d      	beq.n	16b8a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16b6e:	f645 1229 	movw	r2, #22825	; 0x5929
   16b72:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   16b76:	4402      	add	r2, r0
   16b78:	2a29      	cmp	r2, #41	; 0x29
   16b7a:	bf21      	itttt	cs
   16b7c:	f644 02cb 	movwcs	r2, #18635	; 0x48cb
   16b80:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   16b84:	4402      	addcs	r2, r0
   16b86:	2a0b      	cmpcs	r2, #11
   16b88:	d203      	bcs.n	16b92 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x244>
   16b8a:	f001 0001 	and.w	r0, r1, #1
   16b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16b92:	f5a0 2060 	sub.w	r0, r0, #917504	; 0xe0000
   16b96:	f64f 620f 	movw	r2, #65039	; 0xfe0f
   16b9a:	f5a0 71f8 	sub.w	r1, r0, #496	; 0x1f0
   16b9e:	2000      	movs	r0, #0
   16ba0:	f2c0 0202 	movt	r2, #2
   16ba4:	4291      	cmp	r1, r2
   16ba6:	bf88      	it	hi
   16ba8:	2001      	movhi	r0, #1
   16baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16bae:	4610      	mov	r0, r2
   16bb0:	4651      	mov	r1, sl
   16bb2:	f7ff fd04 	bl	165be <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16bb6:	defe      	udf	#254	; 0xfe
   16bb8:	4650      	mov	r0, sl
   16bba:	f240 1125 	movw	r1, #293	; 0x125
   16bbe:	f7ff fcdc 	bl	1657a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   16bc2:	defe      	udf	#254	; 0xfe
   16bc4:	4650      	mov	r0, sl
   16bc6:	21a6      	movs	r1, #166	; 0xa6
   16bc8:	f7ff fcd7 	bl	1657a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   16bcc:	defe      	udf	#254	; 0xfe
   16bce:	f245 1090 	movw	r0, #20880	; 0x5190
   16bd2:	f245 52a4 	movw	r2, #21924	; 0x55a4
   16bd6:	f2c0 0002 	movt	r0, #2
   16bda:	f2c0 0202 	movt	r2, #2
   16bde:	212b      	movs	r1, #43	; 0x2b
   16be0:	f7fe fd78 	bl	156d4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16be4:	defe      	udf	#254	; 0xfe

00016be6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>:
   16be6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bea:	b0a3      	sub	sp, #140	; 0x8c
   16bec:	468c      	mov	ip, r1
   16bee:	6809      	ldr	r1, [r1, #0]
   16bf0:	06ca      	lsls	r2, r1, #27
   16bf2:	d44a      	bmi.n	16c8a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xa4>
   16bf4:	6804      	ldr	r4, [r0, #0]
   16bf6:	0688      	lsls	r0, r1, #26
   16bf8:	f100 8089 	bmi.w	16d0e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x128>
   16bfc:	f248 5e1f 	movw	lr, #34079	; 0x851f
   16c00:	f245 2227 	movw	r2, #21031	; 0x5227
   16c04:	f242 7810 	movw	r8, #10000	; 0x2710
   16c08:	4544      	cmp	r4, r8
   16c0a:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   16c0e:	f2c0 0202 	movt	r2, #2
   16c12:	f0c0 80e3 	bcc.w	16ddc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1f6>
   16c16:	f241 7959 	movw	r9, #5977	; 0x1759
   16c1a:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   16c1e:	f10d 0b0c 	add.w	fp, sp, #12
   16c22:	2300      	movs	r3, #0
   16c24:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   16c28:	f04f 0a64 	mov.w	sl, #100	; 0x64
   16c2c:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   16c30:	fba4 0109 	umull	r0, r1, r4, r9
   16c34:	42bc      	cmp	r4, r7
   16c36:	ea4f 3051 	mov.w	r0, r1, lsr #13
   16c3a:	fb00 4118 	mls	r1, r0, r8, r4
   16c3e:	4604      	mov	r4, r0
   16c40:	b28d      	uxth	r5, r1
   16c42:	fba5 560e 	umull	r5, r6, r5, lr
   16c46:	ea4f 1556 	mov.w	r5, r6, lsr #5
   16c4a:	eb0b 0603 	add.w	r6, fp, r3
   16c4e:	fb05 111a 	mls	r1, r5, sl, r1
   16c52:	f832 5015 	ldrh.w	r5, [r2, r5, lsl #1]
   16c56:	f1a3 0304 	sub.w	r3, r3, #4
   16c5a:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   16c5e:	b289      	uxth	r1, r1
   16c60:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   16c64:	f8a6 1025 	strh.w	r1, [r6, #37]	; 0x25
   16c68:	d8e2      	bhi.n	16c30 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x4a>
   16c6a:	f103 0127 	add.w	r1, r3, #39	; 0x27
   16c6e:	4604      	mov	r4, r0
   16c70:	2c63      	cmp	r4, #99	; 0x63
   16c72:	f300 80b7 	bgt.w	16de4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1fe>
   16c76:	4623      	mov	r3, r4
   16c78:	2b0a      	cmp	r3, #10
   16c7a:	f2c0 80c3 	blt.w	16e04 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x21e>
   16c7e:	1e88      	subs	r0, r1, #2
   16c80:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   16c84:	aa03      	add	r2, sp, #12
   16c86:	5211      	strh	r1, [r2, r0]
   16c88:	e0c1      	b.n	16e0e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x228>
   16c8a:	6800      	ldr	r0, [r0, #0]
   16c8c:	f10d 0e0c 	add.w	lr, sp, #12
   16c90:	2381      	movs	r3, #129	; 0x81
   16c92:	2100      	movs	r1, #0
   16c94:	f000 020f 	and.w	r2, r0, #15
   16c98:	f102 0457 	add.w	r4, r2, #87	; 0x57
   16c9c:	2a0a      	cmp	r2, #10
   16c9e:	bf38      	it	cc
   16ca0:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   16ca4:	eb0e 0203 	add.w	r2, lr, r3
   16ca8:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   16cac:	f802 4c02 	strb.w	r4, [r2, #-2]
   16cb0:	d071      	beq.n	16d96 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   16cb2:	0904      	lsrs	r4, r0, #4
   16cb4:	f004 040f 	and.w	r4, r4, #15
   16cb8:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16cbc:	2c0a      	cmp	r4, #10
   16cbe:	bf38      	it	cc
   16cc0:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16cc4:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   16cc8:	f802 5c03 	strb.w	r5, [r2, #-3]
   16ccc:	d079      	beq.n	16dc2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   16cce:	0a04      	lsrs	r4, r0, #8
   16cd0:	f004 040f 	and.w	r4, r4, #15
   16cd4:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16cd8:	2c0a      	cmp	r4, #10
   16cda:	bf38      	it	cc
   16cdc:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16ce0:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   16ce4:	f802 5c04 	strb.w	r5, [r2, #-4]
   16ce8:	d073      	beq.n	16dd2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   16cea:	0b04      	lsrs	r4, r0, #12
   16cec:	3b04      	subs	r3, #4
   16cee:	f004 040f 	and.w	r4, r4, #15
   16cf2:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16cf6:	2c0a      	cmp	r4, #10
   16cf8:	bf38      	it	cc
   16cfa:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16cfe:	f802 5c05 	strb.w	r5, [r2, #-5]
   16d02:	0c02      	lsrs	r2, r0, #16
   16d04:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   16d08:	4610      	mov	r0, r2
   16d0a:	d1c3      	bne.n	16c94 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xae>
   16d0c:	e03f      	b.n	16d8e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1a8>
   16d0e:	f10d 0e0c 	add.w	lr, sp, #12
   16d12:	2381      	movs	r3, #129	; 0x81
   16d14:	2100      	movs	r1, #0
   16d16:	f004 000f 	and.w	r0, r4, #15
   16d1a:	eb0e 0203 	add.w	r2, lr, r3
   16d1e:	f100 0537 	add.w	r5, r0, #55	; 0x37
   16d22:	280a      	cmp	r0, #10
   16d24:	bf38      	it	cc
   16d26:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   16d2a:	ebb1 1f14 	cmp.w	r1, r4, lsr #4
   16d2e:	f802 5c02 	strb.w	r5, [r2, #-2]
   16d32:	d030      	beq.n	16d96 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   16d34:	0920      	lsrs	r0, r4, #4
   16d36:	f000 000f 	and.w	r0, r0, #15
   16d3a:	f100 0537 	add.w	r5, r0, #55	; 0x37
   16d3e:	280a      	cmp	r0, #10
   16d40:	bf38      	it	cc
   16d42:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   16d46:	ebb1 2f14 	cmp.w	r1, r4, lsr #8
   16d4a:	f802 5c03 	strb.w	r5, [r2, #-3]
   16d4e:	d038      	beq.n	16dc2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   16d50:	0a20      	lsrs	r0, r4, #8
   16d52:	f000 000f 	and.w	r0, r0, #15
   16d56:	f100 0537 	add.w	r5, r0, #55	; 0x37
   16d5a:	280a      	cmp	r0, #10
   16d5c:	bf38      	it	cc
   16d5e:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   16d62:	ebb1 3f14 	cmp.w	r1, r4, lsr #12
   16d66:	f802 5c04 	strb.w	r5, [r2, #-4]
   16d6a:	d032      	beq.n	16dd2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   16d6c:	0b20      	lsrs	r0, r4, #12
   16d6e:	3b04      	subs	r3, #4
   16d70:	f000 000f 	and.w	r0, r0, #15
   16d74:	f100 0537 	add.w	r5, r0, #55	; 0x37
   16d78:	280a      	cmp	r0, #10
   16d7a:	bf38      	it	cc
   16d7c:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   16d80:	0c20      	lsrs	r0, r4, #16
   16d82:	ebb1 4f14 	cmp.w	r1, r4, lsr #16
   16d86:	4604      	mov	r4, r0
   16d88:	f802 5c05 	strb.w	r5, [r2, #-5]
   16d8c:	d1c3      	bne.n	16d16 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x130>
   16d8e:	1e58      	subs	r0, r3, #1
   16d90:	2881      	cmp	r0, #129	; 0x81
   16d92:	d305      	bcc.n	16da0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   16d94:	e019      	b.n	16dca <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   16d96:	1e59      	subs	r1, r3, #1
   16d98:	1e98      	subs	r0, r3, #2
   16d9a:	460b      	mov	r3, r1
   16d9c:	2881      	cmp	r0, #129	; 0x81
   16d9e:	d214      	bcs.n	16dca <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   16da0:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   16da4:	f245 2225 	movw	r2, #21029	; 0x5225
   16da8:	4470      	add	r0, lr
   16daa:	f2c0 0202 	movt	r2, #2
   16dae:	e9cd 0100 	strd	r0, r1, [sp]
   16db2:	4660      	mov	r0, ip
   16db4:	2101      	movs	r1, #1
   16db6:	2302      	movs	r3, #2
   16db8:	f7ff f864 	bl	15e84 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16dbc:	b023      	add	sp, #140	; 0x8c
   16dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dc2:	1ed8      	subs	r0, r3, #3
   16dc4:	3b02      	subs	r3, #2
   16dc6:	2881      	cmp	r0, #129	; 0x81
   16dc8:	d3ea      	bcc.n	16da0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   16dca:	2180      	movs	r1, #128	; 0x80
   16dcc:	f7ff fbf7 	bl	165be <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16dd0:	defe      	udf	#254	; 0xfe
   16dd2:	1f18      	subs	r0, r3, #4
   16dd4:	3b03      	subs	r3, #3
   16dd6:	2881      	cmp	r0, #129	; 0x81
   16dd8:	d3e2      	bcc.n	16da0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   16dda:	e7f6      	b.n	16dca <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   16ddc:	2127      	movs	r1, #39	; 0x27
   16dde:	2c63      	cmp	r4, #99	; 0x63
   16de0:	f77f af49 	ble.w	16c76 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x90>
   16de4:	b2a0      	uxth	r0, r4
   16de6:	3902      	subs	r1, #2
   16de8:	fba0 030e 	umull	r0, r3, r0, lr
   16dec:	af03      	add	r7, sp, #12
   16dee:	2064      	movs	r0, #100	; 0x64
   16df0:	095b      	lsrs	r3, r3, #5
   16df2:	fb03 4010 	mls	r0, r3, r0, r4
   16df6:	b280      	uxth	r0, r0
   16df8:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   16dfc:	5278      	strh	r0, [r7, r1]
   16dfe:	2b0a      	cmp	r3, #10
   16e00:	f6bf af3d 	bge.w	16c7e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x98>
   16e04:	1e48      	subs	r0, r1, #1
   16e06:	aa03      	add	r2, sp, #12
   16e08:	f103 0130 	add.w	r1, r3, #48	; 0x30
   16e0c:	5411      	strb	r1, [r2, r0]
   16e0e:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   16e12:	aa03      	add	r2, sp, #12
   16e14:	4410      	add	r0, r2
   16e16:	f644 72f4 	movw	r2, #20468	; 0x4ff4
   16e1a:	e9cd 0100 	strd	r0, r1, [sp]
   16e1e:	f2c0 0202 	movt	r2, #2
   16e22:	4660      	mov	r0, ip
   16e24:	2101      	movs	r1, #1
   16e26:	2300      	movs	r3, #0
   16e28:	f7ff f82c 	bl	15e84 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16e2c:	b023      	add	sp, #140	; 0x8c
   16e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016e32 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>:
   16e32:	b580      	push	{r7, lr}
   16e34:	b0a2      	sub	sp, #136	; 0x88
   16e36:	7802      	ldrb	r2, [r0, #0]
   16e38:	468c      	mov	ip, r1
   16e3a:	f002 030f 	and.w	r3, r2, #15
   16e3e:	f103 0057 	add.w	r0, r3, #87	; 0x57
   16e42:	2b0a      	cmp	r3, #10
   16e44:	bf38      	it	cc
   16e46:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   16e4a:	2300      	movs	r3, #0
   16e4c:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   16e50:	d00b      	beq.n	16e6a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x38>
   16e52:	0913      	lsrs	r3, r2, #4
   16e54:	f103 0157 	add.w	r1, r3, #87	; 0x57
   16e58:	2aa0      	cmp	r2, #160	; 0xa0
   16e5a:	bf38      	it	cc
   16e5c:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   16e60:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   16e64:	227e      	movs	r2, #126	; 0x7e
   16e66:	2302      	movs	r3, #2
   16e68:	e001      	b.n	16e6e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x3c>
   16e6a:	227f      	movs	r2, #127	; 0x7f
   16e6c:	2301      	movs	r3, #1
   16e6e:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   16e72:	a802      	add	r0, sp, #8
   16e74:	4410      	add	r0, r2
   16e76:	f245 2225 	movw	r2, #21029	; 0x5225
   16e7a:	e9cd 0300 	strd	r0, r3, [sp]
   16e7e:	f2c0 0202 	movt	r2, #2
   16e82:	4660      	mov	r0, ip
   16e84:	2101      	movs	r1, #1
   16e86:	2302      	movs	r3, #2
   16e88:	f7fe fffc 	bl	15e84 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16e8c:	b022      	add	sp, #136	; 0x88
   16e8e:	bd80      	pop	{r7, pc}

00016e90 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>:
   16e90:	b580      	push	{r7, lr}
   16e92:	b0a2      	sub	sp, #136	; 0x88
   16e94:	7802      	ldrb	r2, [r0, #0]
   16e96:	468c      	mov	ip, r1
   16e98:	f002 030f 	and.w	r3, r2, #15
   16e9c:	f103 0037 	add.w	r0, r3, #55	; 0x37
   16ea0:	2b0a      	cmp	r3, #10
   16ea2:	bf38      	it	cc
   16ea4:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   16ea8:	2300      	movs	r3, #0
   16eaa:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   16eae:	d00b      	beq.n	16ec8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x38>
   16eb0:	0913      	lsrs	r3, r2, #4
   16eb2:	f103 0137 	add.w	r1, r3, #55	; 0x37
   16eb6:	2aa0      	cmp	r2, #160	; 0xa0
   16eb8:	bf38      	it	cc
   16eba:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   16ebe:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   16ec2:	227e      	movs	r2, #126	; 0x7e
   16ec4:	2302      	movs	r3, #2
   16ec6:	e001      	b.n	16ecc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x3c>
   16ec8:	227f      	movs	r2, #127	; 0x7f
   16eca:	2301      	movs	r3, #1
   16ecc:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   16ed0:	a802      	add	r0, sp, #8
   16ed2:	4410      	add	r0, r2
   16ed4:	f245 2225 	movw	r2, #21029	; 0x5225
   16ed8:	e9cd 0300 	strd	r0, r3, [sp]
   16edc:	f2c0 0202 	movt	r2, #2
   16ee0:	4660      	mov	r0, ip
   16ee2:	2101      	movs	r1, #1
   16ee4:	2302      	movs	r3, #2
   16ee6:	f7fe ffcd 	bl	15e84 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16eea:	b022      	add	sp, #136	; 0x88
   16eec:	bd80      	pop	{r7, pc}

00016eee <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>:
   16eee:	b580      	push	{r7, lr}
   16ef0:	b0a2      	sub	sp, #136	; 0x88
   16ef2:	8800      	ldrh	r0, [r0, #0]
   16ef4:	468c      	mov	ip, r1
   16ef6:	f000 020f 	and.w	r2, r0, #15
   16efa:	f102 0357 	add.w	r3, r2, #87	; 0x57
   16efe:	2a0a      	cmp	r2, #10
   16f00:	bf38      	it	cc
   16f02:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   16f06:	2200      	movs	r2, #0
   16f08:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   16f0c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   16f10:	d02a      	beq.n	16f68 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x7a>
   16f12:	0903      	lsrs	r3, r0, #4
   16f14:	f003 030f 	and.w	r3, r3, #15
   16f18:	f103 0157 	add.w	r1, r3, #87	; 0x57
   16f1c:	2b0a      	cmp	r3, #10
   16f1e:	bf38      	it	cc
   16f20:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   16f24:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   16f28:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   16f2c:	d031      	beq.n	16f92 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xa4>
   16f2e:	0a01      	lsrs	r1, r0, #8
   16f30:	f001 010f 	and.w	r1, r1, #15
   16f34:	f101 0257 	add.w	r2, r1, #87	; 0x57
   16f38:	290a      	cmp	r1, #10
   16f3a:	bf38      	it	cc
   16f3c:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   16f40:	2100      	movs	r1, #0
   16f42:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   16f46:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   16f4a:	d027      	beq.n	16f9c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xae>
   16f4c:	0b00      	lsrs	r0, r0, #12
   16f4e:	f100 0157 	add.w	r1, r0, #87	; 0x57
   16f52:	280a      	cmp	r0, #10
   16f54:	bf38      	it	cc
   16f56:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   16f5a:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   16f5e:	227d      	movs	r2, #125	; 0x7d
   16f60:	207c      	movs	r0, #124	; 0x7c
   16f62:	2881      	cmp	r0, #129	; 0x81
   16f64:	d304      	bcc.n	16f70 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   16f66:	e01d      	b.n	16fa4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   16f68:	2280      	movs	r2, #128	; 0x80
   16f6a:	207f      	movs	r0, #127	; 0x7f
   16f6c:	2881      	cmp	r0, #129	; 0x81
   16f6e:	d219      	bcs.n	16fa4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   16f70:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   16f74:	ab02      	add	r3, sp, #8
   16f76:	4418      	add	r0, r3
   16f78:	2101      	movs	r1, #1
   16f7a:	e9cd 0200 	strd	r0, r2, [sp]
   16f7e:	f245 2225 	movw	r2, #21029	; 0x5225
   16f82:	f2c0 0202 	movt	r2, #2
   16f86:	4660      	mov	r0, ip
   16f88:	2302      	movs	r3, #2
   16f8a:	f7fe ff7b 	bl	15e84 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16f8e:	b022      	add	sp, #136	; 0x88
   16f90:	bd80      	pop	{r7, pc}
   16f92:	207e      	movs	r0, #126	; 0x7e
   16f94:	227f      	movs	r2, #127	; 0x7f
   16f96:	2881      	cmp	r0, #129	; 0x81
   16f98:	d3ea      	bcc.n	16f70 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   16f9a:	e003      	b.n	16fa4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   16f9c:	207d      	movs	r0, #125	; 0x7d
   16f9e:	227e      	movs	r2, #126	; 0x7e
   16fa0:	2881      	cmp	r0, #129	; 0x81
   16fa2:	d3e5      	bcc.n	16f70 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   16fa4:	2180      	movs	r1, #128	; 0x80
   16fa6:	f7ff fb0a 	bl	165be <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16faa:	defe      	udf	#254	; 0xfe

00016fac <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>:
   16fac:	b5b0      	push	{r4, r5, r7, lr}
   16fae:	b0a2      	sub	sp, #136	; 0x88
   16fb0:	6800      	ldr	r0, [r0, #0]
   16fb2:	f10d 0e08 	add.w	lr, sp, #8
   16fb6:	468c      	mov	ip, r1
   16fb8:	2381      	movs	r3, #129	; 0x81
   16fba:	2100      	movs	r1, #0
   16fbc:	f000 020f 	and.w	r2, r0, #15
   16fc0:	f102 0457 	add.w	r4, r2, #87	; 0x57
   16fc4:	2a0a      	cmp	r2, #10
   16fc6:	bf38      	it	cc
   16fc8:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   16fcc:	eb0e 0203 	add.w	r2, lr, r3
   16fd0:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   16fd4:	f802 4c02 	strb.w	r4, [r2, #-2]
   16fd8:	d030      	beq.n	1703c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x90>
   16fda:	0904      	lsrs	r4, r0, #4
   16fdc:	f004 040f 	and.w	r4, r4, #15
   16fe0:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16fe4:	2c0a      	cmp	r4, #10
   16fe6:	bf38      	it	cc
   16fe8:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16fec:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   16ff0:	f802 5c03 	strb.w	r5, [r2, #-3]
   16ff4:	d028      	beq.n	17048 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x9c>
   16ff6:	0a04      	lsrs	r4, r0, #8
   16ff8:	f004 040f 	and.w	r4, r4, #15
   16ffc:	f104 0557 	add.w	r5, r4, #87	; 0x57
   17000:	2c0a      	cmp	r4, #10
   17002:	bf38      	it	cc
   17004:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   17008:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   1700c:	f802 5c04 	strb.w	r5, [r2, #-4]
   17010:	d01f      	beq.n	17052 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xa6>
   17012:	0b04      	lsrs	r4, r0, #12
   17014:	3b04      	subs	r3, #4
   17016:	f004 040f 	and.w	r4, r4, #15
   1701a:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1701e:	2c0a      	cmp	r4, #10
   17020:	bf38      	it	cc
   17022:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   17026:	f802 5c05 	strb.w	r5, [r2, #-5]
   1702a:	0c02      	lsrs	r2, r0, #16
   1702c:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   17030:	4610      	mov	r0, r2
   17032:	d1c3      	bne.n	16fbc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x10>
   17034:	1e58      	subs	r0, r3, #1
   17036:	2881      	cmp	r0, #129	; 0x81
   17038:	d30f      	bcc.n	1705a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   1703a:	e01e      	b.n	1707a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   1703c:	1e59      	subs	r1, r3, #1
   1703e:	1e98      	subs	r0, r3, #2
   17040:	460b      	mov	r3, r1
   17042:	2881      	cmp	r0, #129	; 0x81
   17044:	d309      	bcc.n	1705a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   17046:	e018      	b.n	1707a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   17048:	1ed8      	subs	r0, r3, #3
   1704a:	3b02      	subs	r3, #2
   1704c:	2881      	cmp	r0, #129	; 0x81
   1704e:	d304      	bcc.n	1705a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   17050:	e013      	b.n	1707a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   17052:	1f18      	subs	r0, r3, #4
   17054:	3b03      	subs	r3, #3
   17056:	2881      	cmp	r0, #129	; 0x81
   17058:	d20f      	bcs.n	1707a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   1705a:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   1705e:	f245 2225 	movw	r2, #21029	; 0x5225
   17062:	4470      	add	r0, lr
   17064:	f2c0 0202 	movt	r2, #2
   17068:	e9cd 0100 	strd	r0, r1, [sp]
   1706c:	4660      	mov	r0, ip
   1706e:	2101      	movs	r1, #1
   17070:	2302      	movs	r3, #2
   17072:	f7fe ff07 	bl	15e84 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   17076:	b022      	add	sp, #136	; 0x88
   17078:	bdb0      	pop	{r4, r5, r7, pc}
   1707a:	2180      	movs	r1, #128	; 0x80
   1707c:	f7ff fa9f 	bl	165be <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   17080:	defe      	udf	#254	; 0xfe

00017082 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>:
   17082:	b5b0      	push	{r4, r5, r7, lr}
   17084:	b0a2      	sub	sp, #136	; 0x88
   17086:	6800      	ldr	r0, [r0, #0]
   17088:	f10d 0e08 	add.w	lr, sp, #8
   1708c:	468c      	mov	ip, r1
   1708e:	2381      	movs	r3, #129	; 0x81
   17090:	2100      	movs	r1, #0
   17092:	f000 020f 	and.w	r2, r0, #15
   17096:	f102 0437 	add.w	r4, r2, #55	; 0x37
   1709a:	2a0a      	cmp	r2, #10
   1709c:	bf38      	it	cc
   1709e:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   170a2:	eb0e 0203 	add.w	r2, lr, r3
   170a6:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   170aa:	f802 4c02 	strb.w	r4, [r2, #-2]
   170ae:	d030      	beq.n	17112 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x90>
   170b0:	0904      	lsrs	r4, r0, #4
   170b2:	f004 040f 	and.w	r4, r4, #15
   170b6:	f104 0537 	add.w	r5, r4, #55	; 0x37
   170ba:	2c0a      	cmp	r4, #10
   170bc:	bf38      	it	cc
   170be:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   170c2:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   170c6:	f802 5c03 	strb.w	r5, [r2, #-3]
   170ca:	d028      	beq.n	1711e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x9c>
   170cc:	0a04      	lsrs	r4, r0, #8
   170ce:	f004 040f 	and.w	r4, r4, #15
   170d2:	f104 0537 	add.w	r5, r4, #55	; 0x37
   170d6:	2c0a      	cmp	r4, #10
   170d8:	bf38      	it	cc
   170da:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   170de:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   170e2:	f802 5c04 	strb.w	r5, [r2, #-4]
   170e6:	d01f      	beq.n	17128 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xa6>
   170e8:	0b04      	lsrs	r4, r0, #12
   170ea:	3b04      	subs	r3, #4
   170ec:	f004 040f 	and.w	r4, r4, #15
   170f0:	f104 0537 	add.w	r5, r4, #55	; 0x37
   170f4:	2c0a      	cmp	r4, #10
   170f6:	bf38      	it	cc
   170f8:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   170fc:	f802 5c05 	strb.w	r5, [r2, #-5]
   17100:	0c02      	lsrs	r2, r0, #16
   17102:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   17106:	4610      	mov	r0, r2
   17108:	d1c3      	bne.n	17092 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x10>
   1710a:	1e58      	subs	r0, r3, #1
   1710c:	2881      	cmp	r0, #129	; 0x81
   1710e:	d30f      	bcc.n	17130 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   17110:	e01e      	b.n	17150 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   17112:	1e59      	subs	r1, r3, #1
   17114:	1e98      	subs	r0, r3, #2
   17116:	460b      	mov	r3, r1
   17118:	2881      	cmp	r0, #129	; 0x81
   1711a:	d309      	bcc.n	17130 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   1711c:	e018      	b.n	17150 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   1711e:	1ed8      	subs	r0, r3, #3
   17120:	3b02      	subs	r3, #2
   17122:	2881      	cmp	r0, #129	; 0x81
   17124:	d304      	bcc.n	17130 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   17126:	e013      	b.n	17150 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   17128:	1f18      	subs	r0, r3, #4
   1712a:	3b03      	subs	r3, #3
   1712c:	2881      	cmp	r0, #129	; 0x81
   1712e:	d20f      	bcs.n	17150 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   17130:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   17134:	f245 2225 	movw	r2, #21029	; 0x5225
   17138:	4470      	add	r0, lr
   1713a:	f2c0 0202 	movt	r2, #2
   1713e:	e9cd 0100 	strd	r0, r1, [sp]
   17142:	4660      	mov	r0, ip
   17144:	2101      	movs	r1, #1
   17146:	2302      	movs	r3, #2
   17148:	f7fe fe9c 	bl	15e84 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1714c:	b022      	add	sp, #136	; 0x88
   1714e:	bdb0      	pop	{r4, r5, r7, pc}
   17150:	2180      	movs	r1, #128	; 0x80
   17152:	f7ff fa34 	bl	165be <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   17156:	defe      	udf	#254	; 0xfe

00017158 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>:
   17158:	b580      	push	{r7, lr}
   1715a:	b08c      	sub	sp, #48	; 0x30
   1715c:	7802      	ldrb	r2, [r0, #0]
   1715e:	2a64      	cmp	r2, #100	; 0x64
   17160:	d314      	bcc.n	1718c <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x34>
   17162:	f248 501f 	movw	r0, #34079	; 0x851f
   17166:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
   1716a:	fba2 0300 	umull	r0, r3, r2, r0
   1716e:	2064      	movs	r0, #100	; 0x64
   17170:	095b      	lsrs	r3, r3, #5
   17172:	fb03 2010 	mls	r0, r3, r0, r2
   17176:	f245 2227 	movw	r2, #21031	; 0x5227
   1717a:	f2c0 0202 	movt	r2, #2
   1717e:	b2c0      	uxtb	r0, r0
   17180:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   17184:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   17188:	2024      	movs	r0, #36	; 0x24
   1718a:	e003      	b.n	17194 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x3c>
   1718c:	2a0a      	cmp	r2, #10
   1718e:	d206      	bcs.n	1719e <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x46>
   17190:	2026      	movs	r0, #38	; 0x26
   17192:	4613      	mov	r3, r2
   17194:	f103 0230 	add.w	r2, r3, #48	; 0x30
   17198:	ab02      	add	r3, sp, #8
   1719a:	541a      	strb	r2, [r3, r0]
   1719c:	e008      	b.n	171b0 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x58>
   1719e:	f245 2027 	movw	r0, #21031	; 0x5227
   171a2:	f2c0 0002 	movt	r0, #2
   171a6:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   171aa:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   171ae:	2025      	movs	r0, #37	; 0x25
   171b0:	f1c0 0227 	rsb	r2, r0, #39	; 0x27
   171b4:	ab02      	add	r3, sp, #8
   171b6:	4418      	add	r0, r3
   171b8:	2300      	movs	r3, #0
   171ba:	e9cd 0200 	strd	r0, r2, [sp]
   171be:	f644 72f4 	movw	r2, #20468	; 0x4ff4
   171c2:	4608      	mov	r0, r1
   171c4:	f2c0 0202 	movt	r2, #2
   171c8:	2101      	movs	r1, #1
   171ca:	f7fe fe5b 	bl	15e84 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   171ce:	b00c      	add	sp, #48	; 0x30
   171d0:	bd80      	pop	{r7, pc}

000171d2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>:
   171d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171d6:	b08f      	sub	sp, #60	; 0x3c
   171d8:	6805      	ldr	r5, [r0, #0]
   171da:	f248 581f 	movw	r8, #34079	; 0x851f
   171de:	460e      	mov	r6, r1
   171e0:	f245 2127 	movw	r1, #21031	; 0x5227
   171e4:	2d00      	cmp	r5, #0
   171e6:	f242 7910 	movw	r9, #10000	; 0x2710
   171ea:	462b      	mov	r3, r5
   171ec:	f2c5 18eb 	movt	r8, #20971	; 0x51eb
   171f0:	bf48      	it	mi
   171f2:	426b      	negmi	r3, r5
   171f4:	454b      	cmp	r3, r9
   171f6:	f2c0 0102 	movt	r1, #2
   171fa:	d33a      	bcc.n	17272 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa0>
   171fc:	f241 7a59 	movw	sl, #5977	; 0x1759
   17200:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
   17204:	f10d 0e14 	add.w	lr, sp, #20
   17208:	2400      	movs	r4, #0
   1720a:	f2cd 1ab7 	movt	sl, #53687	; 0xd1b7
   1720e:	f04f 0b64 	mov.w	fp, #100	; 0x64
   17212:	f2c0 50f5 	movt	r0, #1525	; 0x5f5
   17216:	e9cd 5603 	strd	r5, r6, [sp, #12]
   1721a:	fba3 250a 	umull	r2, r5, r3, sl
   1721e:	eb0e 0704 	add.w	r7, lr, r4
   17222:	3c04      	subs	r4, #4
   17224:	4283      	cmp	r3, r0
   17226:	ea4f 3255 	mov.w	r2, r5, lsr #13
   1722a:	fb02 3519 	mls	r5, r2, r9, r3
   1722e:	4613      	mov	r3, r2
   17230:	b2ae      	uxth	r6, r5
   17232:	fba6 6c08 	umull	r6, ip, r6, r8
   17236:	ea4f 165c 	mov.w	r6, ip, lsr #5
   1723a:	fb06 551b 	mls	r5, r6, fp, r5
   1723e:	f831 6016 	ldrh.w	r6, [r1, r6, lsl #1]
   17242:	f8a7 6023 	strh.w	r6, [r7, #35]	; 0x23
   17246:	b2ad      	uxth	r5, r5
   17248:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   1724c:	f8a7 5025 	strh.w	r5, [r7, #37]	; 0x25
   17250:	d8e3      	bhi.n	1721a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x48>
   17252:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
   17256:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1725a:	4613      	mov	r3, r2
   1725c:	2b63      	cmp	r3, #99	; 0x63
   1725e:	dc0b      	bgt.n	17278 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa6>
   17260:	461a      	mov	r2, r3
   17262:	2a0a      	cmp	r2, #10
   17264:	db17      	blt.n	17296 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xc4>
   17266:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   1726a:	3802      	subs	r0, #2
   1726c:	aa05      	add	r2, sp, #20
   1726e:	5211      	strh	r1, [r2, r0]
   17270:	e016      	b.n	172a0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xce>
   17272:	2027      	movs	r0, #39	; 0x27
   17274:	2b63      	cmp	r3, #99	; 0x63
   17276:	ddf3      	ble.n	17260 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x8e>
   17278:	b29a      	uxth	r2, r3
   1727a:	3802      	subs	r0, #2
   1727c:	fba2 2708 	umull	r2, r7, r2, r8
   17280:	097a      	lsrs	r2, r7, #5
   17282:	2764      	movs	r7, #100	; 0x64
   17284:	fb02 3317 	mls	r3, r2, r7, r3
   17288:	af05      	add	r7, sp, #20
   1728a:	b29b      	uxth	r3, r3
   1728c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   17290:	523b      	strh	r3, [r7, r0]
   17292:	2a0a      	cmp	r2, #10
   17294:	dae7      	bge.n	17266 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x94>
   17296:	3801      	subs	r0, #1
   17298:	f102 0130 	add.w	r1, r2, #48	; 0x30
   1729c:	aa05      	add	r2, sp, #20
   1729e:	5411      	strb	r1, [r2, r0]
   172a0:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   172a4:	aa05      	add	r2, sp, #20
   172a6:	4410      	add	r0, r2
   172a8:	f644 72f4 	movw	r2, #20468	; 0x4ff4
   172ac:	e9cd 0100 	strd	r0, r1, [sp]
   172b0:	43e8      	mvns	r0, r5
   172b2:	0fc1      	lsrs	r1, r0, #31
   172b4:	f2c0 0202 	movt	r2, #2
   172b8:	4630      	mov	r0, r6
   172ba:	2300      	movs	r3, #0
   172bc:	f7fe fde2 	bl	15e84 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   172c0:	b00f      	add	sp, #60	; 0x3c
   172c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000172c6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>:
   172c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172ca:	b08d      	sub	sp, #52	; 0x34
   172cc:	468c      	mov	ip, r1
   172ce:	6801      	ldr	r1, [r0, #0]
   172d0:	f248 5e1f 	movw	lr, #34079	; 0x851f
   172d4:	f245 2027 	movw	r0, #21031	; 0x5227
   172d8:	f242 7810 	movw	r8, #10000	; 0x2710
   172dc:	4541      	cmp	r1, r8
   172de:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   172e2:	f2c0 0002 	movt	r0, #2
   172e6:	d337      	bcc.n	17358 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x92>
   172e8:	f241 7959 	movw	r9, #5977	; 0x1759
   172ec:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   172f0:	f10d 0b0c 	add.w	fp, sp, #12
   172f4:	2300      	movs	r3, #0
   172f6:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   172fa:	f04f 0a64 	mov.w	sl, #100	; 0x64
   172fe:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   17302:	fba1 2409 	umull	r2, r4, r1, r9
   17306:	42b9      	cmp	r1, r7
   17308:	ea4f 3254 	mov.w	r2, r4, lsr #13
   1730c:	fb02 1418 	mls	r4, r2, r8, r1
   17310:	4611      	mov	r1, r2
   17312:	b2a5      	uxth	r5, r4
   17314:	fba5 560e 	umull	r5, r6, r5, lr
   17318:	ea4f 1556 	mov.w	r5, r6, lsr #5
   1731c:	eb0b 0603 	add.w	r6, fp, r3
   17320:	fb05 441a 	mls	r4, r5, sl, r4
   17324:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   17328:	f1a3 0304 	sub.w	r3, r3, #4
   1732c:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   17330:	b2a4      	uxth	r4, r4
   17332:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   17336:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   1733a:	d8e2      	bhi.n	17302 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x3c>
   1733c:	f103 0427 	add.w	r4, r3, #39	; 0x27
   17340:	4611      	mov	r1, r2
   17342:	2963      	cmp	r1, #99	; 0x63
   17344:	dc0b      	bgt.n	1735e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x98>
   17346:	460b      	mov	r3, r1
   17348:	2b0a      	cmp	r3, #10
   1734a:	db17      	blt.n	1737c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xb6>
   1734c:	1ea1      	subs	r1, r4, #2
   1734e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   17352:	aa03      	add	r2, sp, #12
   17354:	5250      	strh	r0, [r2, r1]
   17356:	e016      	b.n	17386 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xc0>
   17358:	2427      	movs	r4, #39	; 0x27
   1735a:	2963      	cmp	r1, #99	; 0x63
   1735c:	ddf3      	ble.n	17346 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x80>
   1735e:	b28a      	uxth	r2, r1
   17360:	3c02      	subs	r4, #2
   17362:	fba2 230e 	umull	r2, r3, r2, lr
   17366:	2264      	movs	r2, #100	; 0x64
   17368:	095b      	lsrs	r3, r3, #5
   1736a:	fb03 1112 	mls	r1, r3, r2, r1
   1736e:	aa03      	add	r2, sp, #12
   17370:	b289      	uxth	r1, r1
   17372:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   17376:	5311      	strh	r1, [r2, r4]
   17378:	2b0a      	cmp	r3, #10
   1737a:	dae7      	bge.n	1734c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x86>
   1737c:	1e61      	subs	r1, r4, #1
   1737e:	aa03      	add	r2, sp, #12
   17380:	f103 0030 	add.w	r0, r3, #48	; 0x30
   17384:	5450      	strb	r0, [r2, r1]
   17386:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   1738a:	aa03      	add	r2, sp, #12
   1738c:	4411      	add	r1, r2
   1738e:	f644 72f4 	movw	r2, #20468	; 0x4ff4
   17392:	e9cd 1000 	strd	r1, r0, [sp]
   17396:	f2c0 0202 	movt	r2, #2
   1739a:	4660      	mov	r0, ip
   1739c:	2101      	movs	r1, #1
   1739e:	2300      	movs	r3, #0
   173a0:	f7fe fd70 	bl	15e84 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   173a4:	b00d      	add	sp, #52	; 0x34
   173a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000173aa <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E>:
   173aa:	e9d0 2000 	ldrd	r2, r0, [r0]
   173ae:	68c3      	ldr	r3, [r0, #12]
   173b0:	4610      	mov	r0, r2
   173b2:	4718      	bx	r3

000173b4 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E>:
   173b4:	460b      	mov	r3, r1
   173b6:	e9d0 1200 	ldrd	r1, r2, [r0]
   173ba:	4618      	mov	r0, r3
   173bc:	f7fe beaa 	b.w	16114 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>

000173c0 <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
   173c0:	4b07      	ldr	r3, [pc, #28]	; (173e0 <__semihost+0x20>)
   173c2:	781b      	ldrb	r3, [r3, #0]
   173c4:	b14b      	cbz	r3, 173da <__semihost+0x1a>
static int __semihost(int command, void* message) {
   173c6:	b410      	push	{r4}
   173c8:	4602      	mov	r2, r0
   173ca:	460c      	mov	r4, r1
    __asm( 
   173cc:	4610      	mov	r0, r2
   173ce:	4621      	mov	r1, r4
   173d0:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
   173d2:	2000      	movs	r0, #0
}
   173d4:	f85d 4b04 	ldr.w	r4, [sp], #4
   173d8:	4770      	bx	lr
    if (!log_enabled) return -1;
   173da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   173de:	4770      	bx	lr
   173e0:	20000100 	.word	0x20000100

000173e4 <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   173e4:	4b02      	ldr	r3, [pc, #8]	; (173f0 <debugger_connected+0xc>)
   173e6:	6818      	ldr	r0, [r3, #0]
}
   173e8:	f000 0001 	and.w	r0, r0, #1
   173ec:	4770      	bx	lr
   173ee:	bf00      	nop
   173f0:	e000edf0 	.word	0xe000edf0

000173f4 <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
   173f4:	b570      	push	{r4, r5, r6, lr}
   173f6:	b084      	sub	sp, #16
   173f8:	4606      	mov	r6, r0
   173fa:	460d      	mov	r5, r1
   173fc:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
   173fe:	f7ff fff1 	bl	173e4 <debugger_connected>
   17402:	4603      	mov	r3, r0
   17404:	b108      	cbz	r0, 1740a <semihost_write+0x16>
    if (length == 0) { return 0; }
   17406:	b91c      	cbnz	r4, 17410 <semihost_write+0x1c>
   17408:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
   1740a:	4618      	mov	r0, r3
   1740c:	b004      	add	sp, #16
   1740e:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
   17410:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
   17412:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
   17414:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
   17416:	a901      	add	r1, sp, #4
   17418:	2005      	movs	r0, #5
   1741a:	f7ff ffd1 	bl	173c0 <__semihost>
   1741e:	4603      	mov	r3, r0
   17420:	e7f3      	b.n	1740a <semihost_write+0x16>
	...

00017424 <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
   17424:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
   17426:	4b0e      	ldr	r3, [pc, #56]	; (17460 <console_flush+0x3c>)
   17428:	781b      	ldrb	r3, [r3, #0]
   1742a:	b1bb      	cbz	r3, 1745c <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
   1742c:	4b0d      	ldr	r3, [pc, #52]	; (17464 <console_flush+0x40>)
   1742e:	681d      	ldr	r5, [r3, #0]
   17430:	b1a5      	cbz	r5, 1745c <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   17432:	4b0d      	ldr	r3, [pc, #52]	; (17468 <console_flush+0x44>)
   17434:	685b      	ldr	r3, [r3, #4]
   17436:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
   1743a:	b97b      	cbnz	r3, 1745c <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
   1743c:	4b09      	ldr	r3, [pc, #36]	; (17464 <console_flush+0x40>)
   1743e:	2200      	movs	r2, #0
   17440:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
   17442:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
   17444:	e005      	b.n	17452 <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
   17446:	88e2      	ldrh	r2, [r4, #6]
   17448:	6821      	ldr	r1, [r4, #0]
   1744a:	2002      	movs	r0, #2
   1744c:	f7ff ffd2 	bl	173f4 <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
   17450:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
   17452:	2c00      	cmp	r4, #0
   17454:	d1f7      	bne.n	17446 <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
   17456:	4628      	mov	r0, r5
   17458:	f001 fbfc 	bl	18c54 <os_mbuf_free_chain>
}
   1745c:	bd38      	pop	{r3, r4, r5, pc}
   1745e:	bf00      	nop
   17460:	20000100 	.word	0x20000100
   17464:	20006f04 	.word	0x20006f04
   17468:	e000ed00 	.word	0xe000ed00

0001746c <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
   1746c:	b508      	push	{r3, lr}
   1746e:	f7ff ffd9 	bl	17424 <console_flush>
   17472:	bd08      	pop	{r3, pc}

00017474 <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
   17474:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
   17476:	4b12      	ldr	r3, [pc, #72]	; (174c0 <console_buffer+0x4c>)
   17478:	781b      	ldrb	r3, [r3, #0]
   1747a:	b903      	cbnz	r3, 1747e <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
   1747c:	bd38      	pop	{r3, r4, r5, pc}
   1747e:	460d      	mov	r5, r1
   17480:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
   17482:	f7ff ffaf 	bl	173e4 <debugger_connected>
   17486:	2800      	cmp	r0, #0
   17488:	d0f8      	beq.n	1747c <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
   1748a:	4b0e      	ldr	r3, [pc, #56]	; (174c4 <console_buffer+0x50>)
   1748c:	681b      	ldr	r3, [r3, #0]
   1748e:	b173      	cbz	r3, 174ae <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
   17490:	4b0c      	ldr	r3, [pc, #48]	; (174c4 <console_buffer+0x50>)
   17492:	6818      	ldr	r0, [r3, #0]
   17494:	f001 fbf0 	bl	18c78 <os_mbuf_len>
   17498:	4428      	add	r0, r5
   1749a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   1749e:	d2ed      	bcs.n	1747c <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
   174a0:	b2aa      	uxth	r2, r5
   174a2:	4621      	mov	r1, r4
   174a4:	4b07      	ldr	r3, [pc, #28]	; (174c4 <console_buffer+0x50>)
   174a6:	6818      	ldr	r0, [r3, #0]
   174a8:	f001 fbf0 	bl	18c8c <os_mbuf_append>
   174ac:	e7e6      	b.n	1747c <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
   174ae:	2100      	movs	r1, #0
   174b0:	b2a8      	uxth	r0, r5
   174b2:	f001 fd93 	bl	18fdc <os_msys_get_pkthdr>
   174b6:	4b03      	ldr	r3, [pc, #12]	; (174c4 <console_buffer+0x50>)
   174b8:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
   174ba:	2800      	cmp	r0, #0
   174bc:	d1e8      	bne.n	17490 <console_buffer+0x1c>
   174be:	e7dd      	b.n	1747c <console_buffer+0x8>
   174c0:	20000100 	.word	0x20000100
   174c4:	20006f04 	.word	0x20006f04

000174c8 <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
   174c8:	b500      	push	{lr}
   174ca:	b083      	sub	sp, #12
   174cc:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
   174d0:	280d      	cmp	r0, #13
   174d2:	d004      	beq.n	174de <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
   174d4:	2101      	movs	r1, #1
   174d6:	f10d 0007 	add.w	r0, sp, #7
   174da:	f7ff ffcb 	bl	17474 <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
   174de:	b003      	add	sp, #12
   174e0:	f85d fb04 	ldr.w	pc, [sp], #4

000174e4 <console_printhex>:
void console_printhex(uint8_t v) {
   174e4:	b510      	push	{r4, lr}
   174e6:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   174e8:	2310      	movs	r3, #16
    int length = 0;
   174ea:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   174ec:	e005      	b.n	174fa <console_printhex+0x16>
        v = v % divisor;
   174ee:	fbb0 f1f3 	udiv	r1, r0, r3
   174f2:	fb03 0011 	mls	r0, r3, r1, r0
   174f6:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   174f8:	091b      	lsrs	r3, r3, #4
   174fa:	b18b      	cbz	r3, 17520 <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
   174fc:	fbb0 f4f3 	udiv	r4, r0, r3
   17500:	f104 0130 	add.w	r1, r4, #48	; 0x30
   17504:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
   17506:	2939      	cmp	r1, #57	; 0x39
   17508:	d902      	bls.n	17510 <console_printhex+0x2c>
   1750a:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1750e:	b2c9      	uxtb	r1, r1
            if (length < size) {
   17510:	2a02      	cmp	r2, #2
   17512:	dcec      	bgt.n	174ee <console_printhex+0xa>
                buffer[length++] = digit;
   17514:	ac02      	add	r4, sp, #8
   17516:	4414      	add	r4, r2
   17518:	f804 1c04 	strb.w	r1, [r4, #-4]
   1751c:	3201      	adds	r2, #1
   1751e:	e7e6      	b.n	174ee <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
   17520:	b92a      	cbnz	r2, 1752e <console_printhex+0x4a>
   17522:	ab02      	add	r3, sp, #8
   17524:	4413      	add	r3, r2
   17526:	2130      	movs	r1, #48	; 0x30
   17528:	f803 1c04 	strb.w	r1, [r3, #-4]
   1752c:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
   1752e:	2a02      	cmp	r2, #2
   17530:	dc04      	bgt.n	1753c <console_printhex+0x58>
   17532:	ab02      	add	r3, sp, #8
   17534:	441a      	add	r2, r3
   17536:	2300      	movs	r3, #0
   17538:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
   1753c:	2300      	movs	r3, #0
   1753e:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
   17542:	a801      	add	r0, sp, #4
   17544:	f002 fb73 	bl	19c2e <strlen>
   17548:	4601      	mov	r1, r0
   1754a:	a801      	add	r0, sp, #4
   1754c:	f7ff ff92 	bl	17474 <console_buffer>
}
   17550:	b002      	add	sp, #8
   17552:	bd10      	pop	{r4, pc}

00017554 <console_printint>:
void console_printint(int i) {
   17554:	b508      	push	{r3, lr}
    console_printf("%d", i);
   17556:	4601      	mov	r1, r0
   17558:	4801      	ldr	r0, [pc, #4]	; (17560 <console_printint+0xc>)
   1755a:	f000 f873 	bl	17644 <console_printf>
}
   1755e:	bd08      	pop	{r3, pc}
   17560:	000261ec 	.word	0x000261ec

00017564 <console_dump>:
    if (buffer == NULL || len == 0) { return; }
   17564:	b180      	cbz	r0, 17588 <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
   17566:	b570      	push	{r4, r5, r6, lr}
   17568:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
   1756a:	b161      	cbz	r1, 17586 <console_dump+0x22>
   1756c:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
   1756e:	2400      	movs	r4, #0
   17570:	e007      	b.n	17582 <console_dump+0x1e>
   17572:	5d30      	ldrb	r0, [r6, r4]
   17574:	f7ff ffb6 	bl	174e4 <console_printhex>
   17578:	2101      	movs	r1, #1
   1757a:	4804      	ldr	r0, [pc, #16]	; (1758c <console_dump+0x28>)
   1757c:	f7ff ff7a 	bl	17474 <console_buffer>
   17580:	3401      	adds	r4, #1
   17582:	42ac      	cmp	r4, r5
   17584:	d3f5      	bcc.n	17572 <console_dump+0xe>
}
   17586:	bd70      	pop	{r4, r5, r6, pc}
   17588:	4770      	bx	lr
   1758a:	bf00      	nop
   1758c:	000261e8 	.word	0x000261e8

00017590 <console_out_nolock>:

int console_out_nolock(int character) {
   17590:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   17592:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
   17594:	4b0b      	ldr	r3, [pc, #44]	; (175c4 <console_out_nolock+0x34>)
   17596:	781b      	ldrb	r3, [r3, #0]
   17598:	b953      	cbnz	r3, 175b0 <console_out_nolock+0x20>
   1759a:	4604      	mov	r4, r0
    if ('\n' == c) {
   1759c:	2d0a      	cmp	r5, #10
   1759e:	d009      	beq.n	175b4 <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
   175a0:	4b09      	ldr	r3, [pc, #36]	; (175c8 <console_out_nolock+0x38>)
   175a2:	2201      	movs	r2, #1
   175a4:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
   175a6:	4628      	mov	r0, r5
   175a8:	f7ff ff8e 	bl	174c8 <semihosting_console_write_ch>
    return character;
   175ac:	4620      	mov	r0, r4
}
   175ae:	bd38      	pop	{r3, r4, r5, pc}
   175b0:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
   175b2:	e7fc      	b.n	175ae <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
   175b4:	200d      	movs	r0, #13
   175b6:	f7ff ff87 	bl	174c8 <semihosting_console_write_ch>
        console_is_midline = 0;
   175ba:	4b03      	ldr	r3, [pc, #12]	; (175c8 <console_out_nolock+0x38>)
   175bc:	2200      	movs	r2, #0
   175be:	601a      	str	r2, [r3, #0]
   175c0:	e7f1      	b.n	175a6 <console_out_nolock+0x16>
   175c2:	bf00      	nop
   175c4:	2000ddb4 	.word	0x2000ddb4
   175c8:	2000ddb8 	.word	0x2000ddb8

000175cc <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
   175cc:	2000      	movs	r0, #0
   175ce:	4770      	bx	lr

000175d0 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
   175d0:	b570      	push	{r4, r5, r6, lr}
   175d2:	4606      	mov	r6, r0
   175d4:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
   175d6:	2400      	movs	r4, #0
   175d8:	42ac      	cmp	r4, r5
   175da:	da07      	bge.n	175ec <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
   175dc:	5d30      	ldrb	r0, [r6, r4]
   175de:	f7ff ffd7 	bl	17590 <console_out_nolock>
   175e2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   175e6:	d001      	beq.n	175ec <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
   175e8:	3401      	adds	r4, #1
   175ea:	e7f5      	b.n	175d8 <console_write+0x8>
    }
}
   175ec:	bd70      	pop	{r4, r5, r6, pc}

000175ee <console_blocking_mode>:

void console_blocking_mode(void) {
   175ee:	b508      	push	{r3, lr}
    disable_buffer();
   175f0:	f7ff ff3c 	bl	1746c <disable_buffer>
}
   175f4:	bd08      	pop	{r3, pc}
	...

000175f8 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
   175f8:	b510      	push	{r4, lr}
   175fa:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   175fc:	4b0d      	ldr	r3, [pc, #52]	; (17634 <console_pkg_init+0x3c>)
   175fe:	781b      	ldrb	r3, [r3, #0]
   17600:	b193      	cbz	r3, 17628 <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
   17602:	480d      	ldr	r0, [pc, #52]	; (17638 <console_pkg_init+0x40>)
   17604:	f001 f9fa 	bl	189fc <os_eventq_init>
    os_mutex_init(&console_write_lock);
   17608:	480c      	ldr	r0, [pc, #48]	; (1763c <console_pkg_init+0x44>)
   1760a:	f001 fd15 	bl	19038 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
   1760e:	f7ff ffdd 	bl	175cc <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   17612:	b138      	cbz	r0, 17624 <console_pkg_init+0x2c>
   17614:	2000      	movs	r0, #0
   17616:	9000      	str	r0, [sp, #0]
   17618:	4b09      	ldr	r3, [pc, #36]	; (17640 <console_pkg_init+0x48>)
   1761a:	681c      	ldr	r4, [r3, #0]
   1761c:	4603      	mov	r3, r0
   1761e:	4602      	mov	r2, r0
   17620:	4601      	mov	r1, r0
   17622:	47a0      	blx	r4
}
   17624:	b002      	add	sp, #8
   17626:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   17628:	461a      	mov	r2, r3
   1762a:	4619      	mov	r1, r3
   1762c:	4618      	mov	r0, r3
   1762e:	f000 fed1 	bl	183d4 <__assert_func>
   17632:	bf00      	nop
   17634:	2000ddbc 	.word	0x2000ddbc
   17638:	20006f08 	.word	0x20006f08
   1763c:	20006f18 	.word	0x20006f18
   17640:	20000104 	.word	0x20000104

00017644 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   17644:	b40f      	push	{r0, r1, r2, r3}
   17646:	b510      	push	{r4, lr}
   17648:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   1764a:	f000 f81f 	bl	1768c <console_get_ticks>
   1764e:	b160      	cbz	r0, 1766a <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   17650:	4b0c      	ldr	r3, [pc, #48]	; (17684 <console_printf+0x40>)
   17652:	681b      	ldr	r3, [r3, #0]
   17654:	b10b      	cbz	r3, 1765a <console_printf+0x16>
    num_chars = 0;
   17656:	2400      	movs	r4, #0
   17658:	e008      	b.n	1766c <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   1765a:	f002 f8d9 	bl	19810 <os_time_get>
   1765e:	4601      	mov	r1, r0
   17660:	4809      	ldr	r0, [pc, #36]	; (17688 <console_printf+0x44>)
   17662:	f002 fd97 	bl	1a194 <printf>
   17666:	4604      	mov	r4, r0
   17668:	e000      	b.n	1766c <console_printf+0x28>
    num_chars = 0;
   1766a:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
   1766c:	a905      	add	r1, sp, #20
   1766e:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
   17670:	9804      	ldr	r0, [sp, #16]
   17672:	f002 fdbf 	bl	1a1f4 <vprintf>
    va_end(args);

    return num_chars;
}
   17676:	4420      	add	r0, r4
   17678:	b002      	add	sp, #8
   1767a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1767e:	b004      	add	sp, #16
   17680:	4770      	bx	lr
   17682:	bf00      	nop
   17684:	2000ddb8 	.word	0x2000ddb8
   17688:	000261f0 	.word	0x000261f0

0001768c <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   1768c:	4b01      	ldr	r3, [pc, #4]	; (17694 <console_get_ticks+0x8>)
   1768e:	7818      	ldrb	r0, [r3, #0]
   17690:	4770      	bx	lr
   17692:	bf00      	nop
   17694:	20006f24 	.word	0x20006f24

00017698 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   17698:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   1769a:	f000 fe9b 	bl	183d4 <__assert_func>
	...

000176a0 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   176a0:	4b01      	ldr	r3, [pc, #4]	; (176a8 <sysinit_start+0x8>)
   176a2:	2201      	movs	r2, #1
   176a4:	701a      	strb	r2, [r3, #0]
}
   176a6:	4770      	bx	lr
   176a8:	2000ddbc 	.word	0x2000ddbc

000176ac <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   176ac:	4b01      	ldr	r3, [pc, #4]	; (176b4 <sysinit_end+0x8>)
   176ae:	2200      	movs	r2, #0
   176b0:	701a      	strb	r2, [r3, #0]
}
   176b2:	4770      	bx	lr
   176b4:	2000ddbc 	.word	0x2000ddbc

000176b8 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   176b8:	4a09      	ldr	r2, [pc, #36]	; (176e0 <NVIC_Relocate+0x28>)
   176ba:	4b0a      	ldr	r3, [pc, #40]	; (176e4 <NVIC_Relocate+0x2c>)
   176bc:	429a      	cmp	r2, r3
   176be:	d00a      	beq.n	176d6 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   176c0:	2300      	movs	r3, #0
   176c2:	e006      	b.n	176d2 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
   176c4:	4a07      	ldr	r2, [pc, #28]	; (176e4 <NVIC_Relocate+0x2c>)
   176c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   176ca:	4a05      	ldr	r2, [pc, #20]	; (176e0 <NVIC_Relocate+0x28>)
   176cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   176d0:	3301      	adds	r3, #1
   176d2:	2b35      	cmp	r3, #53	; 0x35
   176d4:	ddf6      	ble.n	176c4 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   176d6:	4a02      	ldr	r2, [pc, #8]	; (176e0 <NVIC_Relocate+0x28>)
   176d8:	4b03      	ldr	r3, [pc, #12]	; (176e8 <NVIC_Relocate+0x30>)
   176da:	609a      	str	r2, [r3, #8]
#endif
}
   176dc:	4770      	bx	lr
   176de:	bf00      	nop
   176e0:	20000000 	.word	0x20000000
   176e4:	00008020 	.word	0x00008020
   176e8:	e000ed00 	.word	0xe000ed00

000176ec <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
   176ec:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   176ee:	2400      	movs	r4, #0
   176f0:	e000      	b.n	176f4 <hal_gpio_irq_handler+0x8>
   176f2:	3401      	adds	r4, #1
   176f4:	2c07      	cmp	r4, #7
   176f6:	dc1c      	bgt.n	17732 <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
   176f8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   176fc:	4a0d      	ldr	r2, [pc, #52]	; (17734 <hal_gpio_irq_handler+0x48>)
   176fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17702:	2b00      	cmp	r3, #0
   17704:	d0f5      	beq.n	176f2 <hal_gpio_irq_handler+0x6>
   17706:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1770a:	2301      	movs	r3, #1
   1770c:	40a3      	lsls	r3, r4
   1770e:	421a      	tst	r2, r3
   17710:	d0ef      	beq.n	176f2 <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
   17712:	f104 0340 	add.w	r3, r4, #64	; 0x40
   17716:	4a07      	ldr	r2, [pc, #28]	; (17734 <hal_gpio_irq_handler+0x48>)
   17718:	2100      	movs	r1, #0
   1771a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
   1771e:	4b06      	ldr	r3, [pc, #24]	; (17738 <hal_gpio_irq_handler+0x4c>)
   17720:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   17724:	2a00      	cmp	r2, #0
   17726:	d0e4      	beq.n	176f2 <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
   17728:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1772c:	6858      	ldr	r0, [r3, #4]
   1772e:	4790      	blx	r2
   17730:	e7df      	b.n	176f2 <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
   17732:	bd10      	pop	{r4, pc}
   17734:	40006000 	.word	0x40006000
   17738:	20006f28 	.word	0x20006f28

0001773c <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
   1773c:	4b06      	ldr	r3, [pc, #24]	; (17758 <hal_gpio_irq_setup+0x1c>)
   1773e:	781b      	ldrb	r3, [r3, #0]
   17740:	b94b      	cbnz	r3, 17756 <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   17742:	4b06      	ldr	r3, [pc, #24]	; (1775c <hal_gpio_irq_setup+0x20>)
   17744:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   17746:	4a06      	ldr	r2, [pc, #24]	; (17760 <hal_gpio_irq_setup+0x24>)
   17748:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1774a:	4b06      	ldr	r3, [pc, #24]	; (17764 <hal_gpio_irq_setup+0x28>)
   1774c:	2240      	movs	r2, #64	; 0x40
   1774e:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
   17750:	4b01      	ldr	r3, [pc, #4]	; (17758 <hal_gpio_irq_setup+0x1c>)
   17752:	2201      	movs	r2, #1
   17754:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
   17756:	4770      	bx	lr
   17758:	20006f68 	.word	0x20006f68
   1775c:	e000ed00 	.word	0xe000ed00
   17760:	000176ed 	.word	0x000176ed
   17764:	e000e100 	.word	0xe000e100

00017768 <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   17768:	2000      	movs	r0, #0
   1776a:	2807      	cmp	r0, #7
   1776c:	dc05      	bgt.n	1777a <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
   1776e:	4b04      	ldr	r3, [pc, #16]	; (17780 <hal_gpio_find_empty_slot+0x18>)
   17770:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   17774:	b11b      	cbz	r3, 1777e <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   17776:	3001      	adds	r0, #1
   17778:	e7f7      	b.n	1776a <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
   1777a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1777e:	4770      	bx	lr
   17780:	20006f28 	.word	0x20006f28

00017784 <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
   17784:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   17786:	2000      	movs	r0, #0
   17788:	e000      	b.n	1778c <hal_gpio_find_pin+0x8>
   1778a:	3001      	adds	r0, #1
   1778c:	2807      	cmp	r0, #7
   1778e:	dc0e      	bgt.n	177ae <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
   17790:	4b08      	ldr	r3, [pc, #32]	; (177b4 <hal_gpio_find_pin+0x30>)
   17792:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   17796:	2b00      	cmp	r3, #0
   17798:	d0f7      	beq.n	1778a <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
   1779a:	f500 73a2 	add.w	r3, r0, #324	; 0x144
   1779e:	4a06      	ldr	r2, [pc, #24]	; (177b8 <hal_gpio_find_pin+0x34>)
   177a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   177a4:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
   177a8:	428b      	cmp	r3, r1
   177aa:	d1ee      	bne.n	1778a <hal_gpio_find_pin+0x6>
   177ac:	e001      	b.n	177b2 <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
   177ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   177b2:	4770      	bx	lr
   177b4:	20006f28 	.word	0x20006f28
   177b8:	40006000 	.word	0x40006000

000177bc <hal_gpio_init_in>:
    switch (pull) {
   177bc:	2901      	cmp	r1, #1
   177be:	d003      	beq.n	177c8 <hal_gpio_init_in+0xc>
   177c0:	2902      	cmp	r1, #2
   177c2:	d00f      	beq.n	177e4 <hal_gpio_init_in+0x28>
        conf = 0;
   177c4:	2100      	movs	r1, #0
        break;
   177c6:	e000      	b.n	177ca <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
   177c8:	210c      	movs	r1, #12
    port->PIN_CNF[pin_index] = conf;
   177ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   177ce:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   177d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
   177d6:	2301      	movs	r3, #1
   177d8:	fa03 f000 	lsl.w	r0, r3, r0
   177dc:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
   177e0:	2000      	movs	r0, #0
   177e2:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
   177e4:	2104      	movs	r1, #4
   177e6:	e7f0      	b.n	177ca <hal_gpio_init_in+0xe>

000177e8 <hal_gpio_init_out>:
    if (val) {
   177e8:	b999      	cbnz	r1, 17812 <hal_gpio_init_out+0x2a>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   177ea:	2301      	movs	r3, #1
   177ec:	4083      	lsls	r3, r0
   177ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   177f2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   177f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   177fa:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   177fe:	2103      	movs	r1, #3
   17800:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
   17804:	2301      	movs	r3, #1
   17806:	fa03 f000 	lsl.w	r0, r3, r0
   1780a:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
   1780e:	2000      	movs	r0, #0
   17810:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   17812:	2301      	movs	r3, #1
   17814:	4083      	lsls	r3, r0
   17816:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1781a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1781e:	e7ea      	b.n	177f6 <hal_gpio_init_out+0xe>

00017820 <hal_gpio_write>:
    if (val) {
   17820:	b939      	cbnz	r1, 17832 <hal_gpio_write+0x12>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   17822:	2301      	movs	r3, #1
   17824:	fa03 f000 	lsl.w	r0, r3, r0
   17828:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1782c:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   17830:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   17832:	2301      	movs	r3, #1
   17834:	fa03 f000 	lsl.w	r0, r3, r0
   17838:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1783c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   17840:	4770      	bx	lr

00017842 <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
   17842:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17846:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
   1784a:	2301      	movs	r3, #1
   1784c:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   1784e:	421a      	tst	r2, r3
   17850:	d108      	bne.n	17864 <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   17852:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17856:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   1785a:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   1785e:	f000 0001 	and.w	r0, r0, #1
}
   17862:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   17864:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17868:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   1786c:	fa23 f000 	lsr.w	r0, r3, r0
   17870:	f000 0001 	and.w	r0, r0, #1
   17874:	4770      	bx	lr
	...

00017878 <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
   17878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1787c:	4680      	mov	r8, r0
   1787e:	460f      	mov	r7, r1
   17880:	4616      	mov	r6, r2
   17882:	461c      	mov	r4, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
   17884:	f7ff ff5a 	bl	1773c <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
   17888:	f7ff ff6e 	bl	17768 <hal_gpio_find_empty_slot>
    if (i < 0) {
   1788c:	1e05      	subs	r5, r0, #0
   1788e:	db27      	blt.n	178e0 <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
   17890:	f89d 1018 	ldrb.w	r1, [sp, #24]
   17894:	4640      	mov	r0, r8
   17896:	f7ff ff91 	bl	177bc <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
   1789a:	2c02      	cmp	r4, #2
   1789c:	d01d      	beq.n	178da <hal_gpio_irq_init+0x62>
   1789e:	2c03      	cmp	r4, #3
   178a0:	d018      	beq.n	178d4 <hal_gpio_irq_init+0x5c>
   178a2:	2c01      	cmp	r4, #1
   178a4:	d002      	beq.n	178ac <hal_gpio_irq_init+0x34>
        break;
    case HAL_GPIO_TRIG_BOTH:
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
        break;
    default:
        return -1;
   178a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   178aa:	e011      	b.n	178d0 <hal_gpio_irq_init+0x58>
        conf = GPIOTE_CONFIG_POLARITY_LoToHi << GPIOTE_CONFIG_POLARITY_Pos;
   178ac:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
   178b0:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
   178b4:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
   178b8:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   178bc:	4b0a      	ldr	r3, [pc, #40]	; (178e8 <hal_gpio_irq_init+0x70>)
   178be:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
   178c2:	4b0a      	ldr	r3, [pc, #40]	; (178ec <hal_gpio_irq_init+0x74>)
   178c4:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
   178c8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   178cc:	605e      	str	r6, [r3, #4]

    return 0;
   178ce:	2000      	movs	r0, #0
}
   178d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
   178d4:	f44f 3040 	mov.w	r0, #196608	; 0x30000
        break;
   178d8:	e7ea      	b.n	178b0 <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
   178da:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   178de:	e7e7      	b.n	178b0 <hal_gpio_irq_init+0x38>
        return -1;
   178e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   178e4:	e7f4      	b.n	178d0 <hal_gpio_irq_init+0x58>
   178e6:	bf00      	nop
   178e8:	40006000 	.word	0x40006000
   178ec:	20006f28 	.word	0x20006f28

000178f0 <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
   178f0:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
   178f2:	f7ff ff47 	bl	17784 <hal_gpio_find_pin>
    if (i < 0) {
   178f6:	2800      	cmp	r0, #0
   178f8:	db0a      	blt.n	17910 <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
   178fa:	4a06      	ldr	r2, [pc, #24]	; (17914 <hal_gpio_irq_enable+0x24>)
   178fc:	f100 0340 	add.w	r3, r0, #64	; 0x40
   17900:	2100      	movs	r1, #0
   17902:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
   17906:	2301      	movs	r3, #1
   17908:	fa03 f000 	lsl.w	r0, r3, r0
   1790c:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
   17910:	bd08      	pop	{r3, pc}
   17912:	bf00      	nop
   17914:	40006000 	.word	0x40006000

00017918 <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   17918:	3801      	subs	r0, #1
   1791a:	bf00      	nop
   1791c:	bf00      	nop
   1791e:	bf00      	nop
   17920:	bf00      	nop
   17922:	bf00      	nop
   17924:	bf00      	nop
   17926:	bf00      	nop
   17928:	bf00      	nop
   1792a:	bf00      	nop
   1792c:	bf00      	nop
   1792e:	bf00      	nop
   17930:	bf00      	nop
   17932:	bf00      	nop
   17934:	bf00      	nop
   17936:	bf00      	nop
   17938:	bf00      	nop
   1793a:	bf00      	nop
   1793c:	bf00      	nop
   1793e:	bf00      	nop
   17940:	bf00      	nop
   17942:	bf00      	nop
   17944:	bf00      	nop
   17946:	bf00      	nop
   17948:	bf00      	nop
   1794a:	bf00      	nop
   1794c:	bf00      	nop
   1794e:	bf00      	nop
   17950:	bf00      	nop
   17952:	bf00      	nop
   17954:	bf00      	nop
   17956:	bf00      	nop
   17958:	bf00      	nop
   1795a:	bf00      	nop
   1795c:	bf00      	nop
   1795e:	bf00      	nop
   17960:	bf00      	nop
   17962:	bf00      	nop
   17964:	bf00      	nop
   17966:	bf00      	nop
   17968:	bf00      	nop
   1796a:	bf00      	nop
   1796c:	bf00      	nop
   1796e:	bf00      	nop
   17970:	bf00      	nop
   17972:	bf00      	nop
   17974:	bf00      	nop
   17976:	bf00      	nop
   17978:	bf00      	nop
   1797a:	bf00      	nop
   1797c:	bf00      	nop
   1797e:	bf00      	nop
   17980:	bf00      	nop
   17982:	bf00      	nop
   17984:	bf00      	nop
   17986:	bf00      	nop
   17988:	bf00      	nop
   1798a:	bf00      	nop
   1798c:	bf00      	nop
   1798e:	d1c3      	bne.n	17918 <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   17990:	4770      	bx	lr
	...

00017994 <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   17994:	2801      	cmp	r0, #1
   17996:	d806      	bhi.n	179a6 <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   17998:	4b06      	ldr	r3, [pc, #24]	; (179b4 <hal_i2c_resolve+0x20>)
   1799a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1799e:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   179a0:	b12b      	cbz	r3, 179ae <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   179a2:	2000      	movs	r0, #0
}
   179a4:	4770      	bx	lr
        *out_i2c = NULL;
   179a6:	2300      	movs	r3, #0
   179a8:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   179aa:	2002      	movs	r0, #2
   179ac:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   179ae:	2002      	movs	r0, #2
   179b0:	4770      	bx	lr
   179b2:	bf00      	nop
   179b4:	000261f8 	.word	0x000261f8

000179b8 <hal_i2c_convert_status>:
 * Converts an nRF SDK I2C status to a HAL I2C error code.
 */
static int
hal_i2c_convert_status(int nrf_status)
{
    if (nrf_status == 0) {
   179b8:	b148      	cbz	r0, 179ce <hal_i2c_convert_status+0x16>
        return 0;
    } else if (nrf_status & NRF_TWIM_ERROR_DATA_NACK) {
   179ba:	f010 0f04 	tst.w	r0, #4
   179be:	d107      	bne.n	179d0 <hal_i2c_convert_status+0x18>
        return HAL_I2C_ERR_DATA_NACK;
    } else if (nrf_status & NRF_TWIM_ERROR_ADDRESS_NACK) {
   179c0:	f010 0f02 	tst.w	r0, #2
   179c4:	d101      	bne.n	179ca <hal_i2c_convert_status+0x12>
        return HAL_I2C_ERR_ADDR_NACK;
    } else {
        return HAL_I2C_ERR_UNKNOWN;
   179c6:	2001      	movs	r0, #1
    }
}
   179c8:	4770      	bx	lr
        return HAL_I2C_ERR_ADDR_NACK;
   179ca:	2004      	movs	r0, #4
   179cc:	4770      	bx	lr
   179ce:	4770      	bx	lr
        return HAL_I2C_ERR_DATA_NACK;
   179d0:	2005      	movs	r0, #5
   179d2:	4770      	bx	lr

000179d4 <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   179d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   179d8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   179dc:	fa23 f000 	lsr.w	r0, r3, r0
}
   179e0:	f000 0001 	and.w	r0, r0, #1
   179e4:	4770      	bx	lr

000179e6 <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   179e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   179ea:	4605      	mov	r5, r0
   179ec:	460e      	mov	r6, r1
    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(scl_pin);
    sda_port = HAL_GPIO_PORT(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   179ee:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   179f2:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   179f6:	f240 630c 	movw	r3, #1548	; 0x60c
   179fa:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   179fe:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   17a02:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   17a06:	2101      	movs	r1, #1
   17a08:	f7ff ff0a 	bl	17820 <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   17a0c:	2101      	movs	r1, #1
   17a0e:	4630      	mov	r0, r6
   17a10:	f7ff ff06 	bl	17820 <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF_CLR;
   17a14:	f240 630d 	movw	r3, #1549	; 0x60d
   17a18:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF_CLR;
   17a1c:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   17a20:	2004      	movs	r0, #4
   17a22:	f7ff ff79 	bl	17918 <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   17a26:	2400      	movs	r4, #0
   17a28:	2c08      	cmp	r4, #8
   17a2a:	dc14      	bgt.n	17a56 <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   17a2c:	4630      	mov	r0, r6
   17a2e:	f7ff ffd1 	bl	179d4 <read_gpio_inbuffer>
   17a32:	b978      	cbnz	r0, 17a54 <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   17a34:	2100      	movs	r1, #0
   17a36:	4628      	mov	r0, r5
   17a38:	f7ff fef2 	bl	17820 <hal_gpio_write>
        hal_i2c_delay_us(4);
   17a3c:	2004      	movs	r0, #4
   17a3e:	f7ff ff6b 	bl	17918 <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   17a42:	2101      	movs	r1, #1
   17a44:	4628      	mov	r0, r5
   17a46:	f7ff feeb 	bl	17820 <hal_gpio_write>
        hal_i2c_delay_us(4);
   17a4a:	2004      	movs	r0, #4
   17a4c:	f7ff ff64 	bl	17918 <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   17a50:	3401      	adds	r4, #1
   17a52:	e7e9      	b.n	17a28 <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   17a54:	b154      	cbz	r4, 17a6c <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   17a56:	2100      	movs	r1, #0
   17a58:	4630      	mov	r0, r6
   17a5a:	f7ff fee1 	bl	17820 <hal_gpio_write>
    hal_i2c_delay_us(4);
   17a5e:	2004      	movs	r0, #4
   17a60:	f7ff ff5a 	bl	17918 <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   17a64:	2101      	movs	r1, #1
   17a66:	4630      	mov	r0, r6
   17a68:	f7ff feda 	bl	17820 <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   17a6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17a70:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   17a74:	f240 620c 	movw	r2, #1548	; 0x60c
   17a78:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   17a7c:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   17a80:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   17a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017a88 <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   17a88:	b5f0      	push	{r4, r5, r6, r7, lr}
   17a8a:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   17a8c:	b1a1      	cbz	r1, 17ab8 <hal_i2c_init+0x30>
   17a8e:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   17a90:	a901      	add	r1, sp, #4
   17a92:	f7ff ff7f 	bl	17994 <hal_i2c_resolve>
    if (rc != 0) {
   17a96:	4606      	mov	r6, r0
   17a98:	bba8      	cbnz	r0, 17b06 <hal_i2c_init+0x7e>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   17a9a:	9b01      	ldr	r3, [sp, #4]
   17a9c:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   17a9e:	68a3      	ldr	r3, [r4, #8]
   17aa0:	2bfa      	cmp	r3, #250	; 0xfa
   17aa2:	d035      	beq.n	17b10 <hal_i2c_init+0x88>
   17aa4:	d90e      	bls.n	17ac4 <hal_i2c_init+0x3c>
   17aa6:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   17aaa:	d02f      	beq.n	17b0c <hal_i2c_init+0x84>
   17aac:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   17ab0:	d131      	bne.n	17b16 <hal_i2c_init+0x8e>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   17ab2:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   17ab6:	e009      	b.n	17acc <hal_i2c_init+0x44>
    assert(usercfg != NULL);
   17ab8:	2300      	movs	r3, #0
   17aba:	461a      	mov	r2, r3
   17abc:	4619      	mov	r1, r3
   17abe:	4618      	mov	r0, r3
   17ac0:	f000 fc88 	bl	183d4 <__assert_func>
    switch (cfg->i2c_frequency) {
   17ac4:	2b64      	cmp	r3, #100	; 0x64
   17ac6:	d126      	bne.n	17b16 <hal_i2c_init+0x8e>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   17ac8:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   17acc:	6861      	ldr	r1, [r4, #4]
   17ace:	6820      	ldr	r0, [r4, #0]
   17ad0:	f7ff ff89 	bl	179e6 <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   17ad4:	6823      	ldr	r3, [r4, #0]
   17ad6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   17ada:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17ade:	f240 610c 	movw	r1, #1548	; 0x60c
   17ae2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   17ae6:	6863      	ldr	r3, [r4, #4]
   17ae8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17aec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   17af0:	6823      	ldr	r3, [r4, #0]
   17af2:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   17af6:	6863      	ldr	r3, [r4, #4]
   17af8:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   17afc:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   17b00:	2305      	movs	r3, #5
   17b02:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   17b06:	4630      	mov	r0, r6
   17b08:	b003      	add	sp, #12
   17b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   17b0c:	4f03      	ldr	r7, [pc, #12]	; (17b1c <hal_i2c_init+0x94>)
        break;
   17b0e:	e7dd      	b.n	17acc <hal_i2c_init+0x44>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   17b10:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   17b14:	e7da      	b.n	17acc <hal_i2c_init+0x44>
        rc = HAL_I2C_ERR_INVAL;
   17b16:	2602      	movs	r6, #2
   17b18:	e7f5      	b.n	17b06 <hal_i2c_init+0x7e>
   17b1a:	bf00      	nop
   17b1c:	06147ae9 	.word	0x06147ae9

00017b20 <hal_i2c_master_write>:
}

int
hal_i2c_master_write(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                     uint32_t timo, uint8_t last_op)
{
   17b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b24:	b083      	sub	sp, #12
   17b26:	4688      	mov	r8, r1
   17b28:	4615      	mov	r5, r2
   17b2a:	469a      	mov	sl, r3
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   17b2c:	a901      	add	r1, sp, #4
   17b2e:	f7ff ff31 	bl	17994 <hal_i2c_resolve>
    if (rc != 0) {
   17b32:	4681      	mov	r9, r0
   17b34:	b118      	cbz	r0, 17b3e <hal_i2c_master_write+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   17b36:	4648      	mov	r0, r9
   17b38:	b003      	add	sp, #12
   17b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   17b3e:	9b01      	ldr	r3, [sp, #4]
   17b40:	681c      	ldr	r4, [r3, #0]
    regs->ADDRESS = pdata->address;
   17b42:	f898 3000 	ldrb.w	r3, [r8]
   17b46:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    regs->EVENTS_ERROR = 0;
   17b4a:	2300      	movs	r3, #0
   17b4c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   17b50:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   17b54:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->SHORTS = 0;
   17b58:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTTX);
   17b5c:	f104 0708 	add.w	r7, r4, #8
    int retry = 2;
   17b60:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   17b64:	2300      	movs	r3, #0
   17b66:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   17b6a:	2301      	movs	r3, #1
   17b6c:	603b      	str	r3, [r7, #0]
        end_ticks = os_cputime_get32() +
   17b6e:	f000 fe61 	bl	18834 <os_cputime_get32>
   17b72:	f100 0664 	add.w	r6, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   17b76:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   17b7a:	f7ff fe62 	bl	17842 <hal_gpio_read>
   17b7e:	b1b0      	cbz	r0, 17bae <hal_i2c_master_write+0x8e>
   17b80:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   17b84:	b99b      	cbnz	r3, 17bae <hal_i2c_master_write+0x8e>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   17b86:	f000 fe55 	bl	18834 <os_cputime_get32>
   17b8a:	1b80      	subs	r0, r0, r6
   17b8c:	2800      	cmp	r0, #0
   17b8e:	dbf2      	blt.n	17b76 <hal_i2c_master_write+0x56>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   17b90:	2300      	movs	r3, #0
   17b92:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   17b96:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   17b9a:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   17b9e:	f7ff ff22 	bl	179e6 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   17ba2:	2305      	movs	r3, #5
   17ba4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   17ba8:	f1bb 0b01 	subs.w	fp, fp, #1
   17bac:	d1da      	bne.n	17b64 <hal_i2c_master_write+0x44>
    start = os_time_get();
   17bae:	f001 fe2f 	bl	19810 <os_time_get>
   17bb2:	4606      	mov	r6, r0
    for (i = 0; i < pdata->len; i++) {
   17bb4:	464f      	mov	r7, r9
   17bb6:	e003      	b.n	17bc0 <hal_i2c_master_write+0xa0>
        if (regs->EVENTS_ERROR) {
   17bb8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17bbc:	b9db      	cbnz	r3, 17bf6 <hal_i2c_master_write+0xd6>
    for (i = 0; i < pdata->len; i++) {
   17bbe:	3701      	adds	r7, #1
   17bc0:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   17bc4:	42bb      	cmp	r3, r7
   17bc6:	dd24      	ble.n	17c12 <hal_i2c_master_write+0xf2>
        regs->EVENTS_TXDSENT = 0;
   17bc8:	2300      	movs	r3, #0
   17bca:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        regs->TXD = pdata->buffer[i];
   17bce:	f8d8 3004 	ldr.w	r3, [r8, #4]
   17bd2:	5ddb      	ldrb	r3, [r3, r7]
   17bd4:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        while (!regs->EVENTS_TXDSENT && !regs->EVENTS_ERROR) {
   17bd8:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   17bdc:	2b00      	cmp	r3, #0
   17bde:	d1eb      	bne.n	17bb8 <hal_i2c_master_write+0x98>
   17be0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17be4:	2b00      	cmp	r3, #0
   17be6:	d1e7      	bne.n	17bb8 <hal_i2c_master_write+0x98>
            if (os_time_get() - start > timo) {
   17be8:	f001 fe12 	bl	19810 <os_time_get>
   17bec:	1b80      	subs	r0, r0, r6
   17bee:	42a8      	cmp	r0, r5
   17bf0:	d9f2      	bls.n	17bd8 <hal_i2c_master_write+0xb8>
                rc = HAL_I2C_ERR_TIMEOUT;
   17bf2:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   17bf6:	2301      	movs	r3, #1
   17bf8:	6163      	str	r3, [r4, #20]
    if (regs->EVENTS_ERROR) {
   17bfa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17bfe:	2b00      	cmp	r3, #0
   17c00:	d099      	beq.n	17b36 <hal_i2c_master_write+0x16>
        nrf_status = regs->ERRORSRC;
   17c02:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   17c06:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   17c0a:	f7ff fed5 	bl	179b8 <hal_i2c_convert_status>
   17c0e:	4681      	mov	r9, r0
   17c10:	e791      	b.n	17b36 <hal_i2c_master_write+0x16>
    if (last_op) {
   17c12:	f1ba 0f00 	cmp.w	sl, #0
   17c16:	d08e      	beq.n	17b36 <hal_i2c_master_write+0x16>
        regs->EVENTS_STOPPED = 0;
   17c18:	2300      	movs	r3, #0
   17c1a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        regs->TASKS_STOP = 1;
   17c1e:	2301      	movs	r3, #1
   17c20:	6163      	str	r3, [r4, #20]
        while (!regs->EVENTS_STOPPED && !regs->EVENTS_ERROR) {
   17c22:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   17c26:	b953      	cbnz	r3, 17c3e <hal_i2c_master_write+0x11e>
   17c28:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17c2c:	b93b      	cbnz	r3, 17c3e <hal_i2c_master_write+0x11e>
            if (os_time_get() - start > timo) {
   17c2e:	f001 fdef 	bl	19810 <os_time_get>
   17c32:	1b80      	subs	r0, r0, r6
   17c34:	42a8      	cmp	r0, r5
   17c36:	d9f4      	bls.n	17c22 <hal_i2c_master_write+0x102>
                rc = HAL_I2C_ERR_TIMEOUT;
   17c38:	f04f 0903 	mov.w	r9, #3
   17c3c:	e7db      	b.n	17bf6 <hal_i2c_master_write+0xd6>
        if (regs->EVENTS_ERROR) {
   17c3e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17c42:	2b00      	cmp	r3, #0
   17c44:	d1d7      	bne.n	17bf6 <hal_i2c_master_write+0xd6>
   17c46:	e776      	b.n	17b36 <hal_i2c_master_write+0x16>

00017c48 <hal_i2c_master_read>:

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timo, uint8_t last_op)
{
   17c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c4c:	b085      	sub	sp, #20
   17c4e:	460f      	mov	r7, r1
   17c50:	4615      	mov	r5, r2
   17c52:	9301      	str	r3, [sp, #4]
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   17c54:	a903      	add	r1, sp, #12
   17c56:	f7ff fe9d 	bl	17994 <hal_i2c_resolve>
    if (rc != 0) {
   17c5a:	4681      	mov	r9, r0
   17c5c:	b118      	cbz	r0, 17c66 <hal_i2c_master_read+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   17c5e:	4648      	mov	r0, r9
   17c60:	b005      	add	sp, #20
   17c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   17c66:	9b03      	ldr	r3, [sp, #12]
   17c68:	681c      	ldr	r4, [r3, #0]
    start = os_time_get();
   17c6a:	f001 fdd1 	bl	19810 <os_time_get>
   17c6e:	4606      	mov	r6, r0
    if (regs->EVENTS_RXDREADY) {
   17c70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17c74:	b11b      	cbz	r3, 17c7e <hal_i2c_master_read+0x36>
        (void)regs->RXD;
   17c76:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
        (void)regs->RXD;
   17c7a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    regs->EVENTS_ERROR = 0;
   17c7e:	2300      	movs	r3, #0
   17c80:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   17c84:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   17c88:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->EVENTS_RXDREADY = 0;
   17c8c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    regs->ADDRESS = pdata->address;
   17c90:	783b      	ldrb	r3, [r7, #0]
   17c92:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (pdata->len == 1 && last_op) {
   17c96:	887b      	ldrh	r3, [r7, #2]
   17c98:	2b01      	cmp	r3, #1
   17c9a:	d02e      	beq.n	17cfa <hal_i2c_master_read+0xb2>
        regs->SHORTS = TWI_SHORTS_BB_SUSPEND_Msk;
   17c9c:	2301      	movs	r3, #1
   17c9e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTRX);
   17ca2:	46a2      	mov	sl, r4
    int retry = 2;
   17ca4:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   17ca8:	2300      	movs	r3, #0
   17caa:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   17cae:	2301      	movs	r3, #1
   17cb0:	f8ca 3000 	str.w	r3, [sl]
        end_ticks = os_cputime_get32() +
   17cb4:	f000 fdbe 	bl	18834 <os_cputime_get32>
   17cb8:	f100 0864 	add.w	r8, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   17cbc:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   17cc0:	f7ff fdbf 	bl	17842 <hal_gpio_read>
   17cc4:	b1b8      	cbz	r0, 17cf6 <hal_i2c_master_read+0xae>
   17cc6:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   17cca:	b9a3      	cbnz	r3, 17cf6 <hal_i2c_master_read+0xae>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   17ccc:	f000 fdb2 	bl	18834 <os_cputime_get32>
   17cd0:	eba0 0008 	sub.w	r0, r0, r8
   17cd4:	2800      	cmp	r0, #0
   17cd6:	dbf1      	blt.n	17cbc <hal_i2c_master_read+0x74>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   17cd8:	2300      	movs	r3, #0
   17cda:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   17cde:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   17ce2:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   17ce6:	f7ff fe7e 	bl	179e6 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   17cea:	2305      	movs	r3, #5
   17cec:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   17cf0:	f1bb 0b01 	subs.w	fp, fp, #1
   17cf4:	d1d8      	bne.n	17ca8 <hal_i2c_master_read+0x60>
    int retry = 2;
   17cf6:	46c8      	mov	r8, r9
   17cf8:	e017      	b.n	17d2a <hal_i2c_master_read+0xe2>
    if (pdata->len == 1 && last_op) {
   17cfa:	9b01      	ldr	r3, [sp, #4]
   17cfc:	2b00      	cmp	r3, #0
   17cfe:	d0cd      	beq.n	17c9c <hal_i2c_master_read+0x54>
        regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   17d00:	2302      	movs	r3, #2
   17d02:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   17d06:	e7cc      	b.n	17ca2 <hal_i2c_master_read+0x5a>
        if (regs->EVENTS_ERROR) {
   17d08:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17d0c:	bb0b      	cbnz	r3, 17d52 <hal_i2c_master_read+0x10a>
        pdata->buffer[i] = regs->RXD;
   17d0e:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
   17d12:	687b      	ldr	r3, [r7, #4]
   17d14:	f803 2008 	strb.w	r2, [r3, r8]
        if (i == pdata->len - 2) {
   17d18:	887b      	ldrh	r3, [r7, #2]
   17d1a:	3b02      	subs	r3, #2
   17d1c:	4543      	cmp	r3, r8
   17d1e:	d02a      	beq.n	17d76 <hal_i2c_master_read+0x12e>
        regs->EVENTS_RXDREADY = 0;
   17d20:	2300      	movs	r3, #0
   17d22:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    for (i = 0; i < pdata->len; i++) {
   17d26:	f108 0801 	add.w	r8, r8, #1
   17d2a:	887b      	ldrh	r3, [r7, #2]
   17d2c:	4543      	cmp	r3, r8
   17d2e:	dd96      	ble.n	17c5e <hal_i2c_master_read+0x16>
        regs->TASKS_RESUME = 1;
   17d30:	2301      	movs	r3, #1
   17d32:	6223      	str	r3, [r4, #32]
        while (!regs->EVENTS_RXDREADY && !regs->EVENTS_ERROR) {
   17d34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17d38:	2b00      	cmp	r3, #0
   17d3a:	d1e5      	bne.n	17d08 <hal_i2c_master_read+0xc0>
   17d3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17d40:	2b00      	cmp	r3, #0
   17d42:	d1e1      	bne.n	17d08 <hal_i2c_master_read+0xc0>
            if (os_time_get() - start > timo) {
   17d44:	f001 fd64 	bl	19810 <os_time_get>
   17d48:	1b80      	subs	r0, r0, r6
   17d4a:	42a8      	cmp	r0, r5
   17d4c:	d9f2      	bls.n	17d34 <hal_i2c_master_read+0xec>
                rc = HAL_I2C_ERR_TIMEOUT;
   17d4e:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   17d52:	2301      	movs	r3, #1
   17d54:	6163      	str	r3, [r4, #20]
    regs->SHORTS = 0;
   17d56:	2300      	movs	r3, #0
   17d58:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (regs->EVENTS_ERROR) {
   17d5c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17d60:	2b00      	cmp	r3, #0
   17d62:	f43f af7c 	beq.w	17c5e <hal_i2c_master_read+0x16>
        nrf_status = regs->ERRORSRC;
   17d66:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   17d6a:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   17d6e:	f7ff fe23 	bl	179b8 <hal_i2c_convert_status>
   17d72:	4681      	mov	r9, r0
   17d74:	e773      	b.n	17c5e <hal_i2c_master_read+0x16>
            if (last_op) {
   17d76:	9b01      	ldr	r3, [sp, #4]
   17d78:	2b00      	cmp	r3, #0
   17d7a:	d0d1      	beq.n	17d20 <hal_i2c_master_read+0xd8>
                regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   17d7c:	2302      	movs	r3, #2
   17d7e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   17d82:	e7cd      	b.n	17d20 <hal_i2c_master_read+0xd8>

00017d84 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   17d84:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   17d86:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   17d88:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   17d8c:	b32b      	cbz	r3, 17dda <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   17d8e:	2300      	movs	r3, #0
   17d90:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   17d94:	7843      	ldrb	r3, [r0, #1]
   17d96:	b303      	cbz	r3, 17dda <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   17d98:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   17d9c:	88c3      	ldrh	r3, [r0, #6]
   17d9e:	fa13 f382 	uxtah	r3, r3, r2
   17da2:	b29b      	uxth	r3, r3
   17da4:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   17da6:	8881      	ldrh	r1, [r0, #4]
   17da8:	428b      	cmp	r3, r1
   17daa:	d217      	bcs.n	17ddc <nrf52_irqm_handler+0x58>
   17dac:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   17dae:	6984      	ldr	r4, [r0, #24]
   17db0:	4414      	add	r4, r2
   17db2:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   17db4:	1acb      	subs	r3, r1, r3
   17db6:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   17db8:	2bff      	cmp	r3, #255	; 0xff
   17dba:	bf28      	it	cs
   17dbc:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   17dbe:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   17dc2:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   17dc6:	69c1      	ldr	r1, [r0, #28]
   17dc8:	b129      	cbz	r1, 17dd6 <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   17dca:	440a      	add	r2, r1
   17dcc:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   17dce:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   17dd2:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   17dd6:	2301      	movs	r3, #1
   17dd8:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   17dda:	bd38      	pop	{r3, r4, r5, pc}
   17ddc:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   17dde:	6a03      	ldr	r3, [r0, #32]
   17de0:	b10b      	cbz	r3, 17de6 <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   17de2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   17de4:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   17de6:	2300      	movs	r3, #0
   17de8:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   17dea:	2340      	movs	r3, #64	; 0x40
   17dec:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   17df0:	e7f3      	b.n	17dda <nrf52_irqm_handler+0x56>
	...

00017df4 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   17df4:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   17df6:	4b04      	ldr	r3, [pc, #16]	; (17e08 <nrf52_spi0_irq_handler+0x14>)
   17df8:	781b      	ldrb	r3, [r3, #0]
   17dfa:	b103      	cbz	r3, 17dfe <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   17dfc:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   17dfe:	4802      	ldr	r0, [pc, #8]	; (17e08 <nrf52_spi0_irq_handler+0x14>)
   17e00:	f7ff ffc0 	bl	17d84 <nrf52_irqm_handler>
}
   17e04:	e7fa      	b.n	17dfc <nrf52_spi0_irq_handler+0x8>
   17e06:	bf00      	nop
   17e08:	2000ddc0 	.word	0x2000ddc0

00017e0c <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   17e0c:	2301      	movs	r3, #1
   17e0e:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   17e10:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   17e14:	2b00      	cmp	r3, #0
   17e16:	d0fb      	beq.n	17e10 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   17e18:	2300      	movs	r3, #0
   17e1a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   17e1e:	4770      	bx	lr

00017e20 <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   17e20:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   17e22:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   17e24:	780b      	ldrb	r3, [r1, #0]
   17e26:	2b03      	cmp	r3, #3
   17e28:	d80c      	bhi.n	17e44 <hal_spi_config_slave+0x24>
   17e2a:	e8df f003 	tbb	[pc, r3]
   17e2e:	0e02      	.short	0x0e02
   17e30:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   17e32:	2300      	movs	r3, #0
    rc = 0;
   17e34:	4618      	mov	r0, r3
   17e36:	e00a      	b.n	17e4e <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   17e38:	2304      	movs	r3, #4
    rc = 0;
   17e3a:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   17e3c:	e007      	b.n	17e4e <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   17e3e:	2306      	movs	r3, #6
    rc = 0;
   17e40:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   17e42:	e004      	b.n	17e4e <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   17e44:	2300      	movs	r3, #0
            rc = EINVAL;
   17e46:	2016      	movs	r0, #22
            break;
   17e48:	e001      	b.n	17e4e <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   17e4a:	2302      	movs	r3, #2
    rc = 0;
   17e4c:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   17e4e:	784c      	ldrb	r4, [r1, #1]
   17e50:	2c01      	cmp	r4, #1
   17e52:	d006      	beq.n	17e62 <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   17e54:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   17e58:	788b      	ldrb	r3, [r1, #2]
   17e5a:	b92b      	cbnz	r3, 17e68 <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   17e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
   17e60:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   17e62:	f043 0301 	orr.w	r3, r3, #1
   17e66:	e7f5      	b.n	17e54 <hal_spi_config_slave+0x34>
            rc = EINVAL;
   17e68:	2016      	movs	r0, #22
    return rc;
   17e6a:	e7f7      	b.n	17e5c <hal_spi_config_slave+0x3c>

00017e6c <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   17e6c:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   17e6e:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   17e70:	2501      	movs	r5, #1
   17e72:	409d      	lsls	r5, r3
   17e74:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   17e78:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   17e7c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17e80:	2503      	movs	r5, #3
   17e82:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   17e86:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   17e88:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17e8c:	2500      	movs	r5, #0
   17e8e:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   17e92:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   17e94:	780c      	ldrb	r4, [r1, #0]
   17e96:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   17e9a:	784c      	ldrb	r4, [r1, #1]
   17e9c:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   17ea0:	7889      	ldrb	r1, [r1, #2]
   17ea2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   17ea6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17eaa:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   17eae:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   17eb2:	4919      	ldr	r1, [pc, #100]	; (17f18 <hal_spi_init_master+0xac>)
   17eb4:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   17eb6:	3310      	adds	r3, #16
   17eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   17ebc:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   17ec0:	42ab      	cmp	r3, r5
   17ec2:	db22      	blt.n	17f0a <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17ec4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   17ec8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   17ecc:	22e0      	movs	r2, #224	; 0xe0
   17ece:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   17ed2:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   17ed6:	2b00      	cmp	r3, #0
   17ed8:	db08      	blt.n	17eec <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17eda:	f003 011f 	and.w	r1, r3, #31
   17ede:	095b      	lsrs	r3, r3, #5
   17ee0:	2201      	movs	r2, #1
   17ee2:	408a      	lsls	r2, r1
   17ee4:	3360      	adds	r3, #96	; 0x60
   17ee6:	490d      	ldr	r1, [pc, #52]	; (17f1c <hal_spi_init_master+0xb0>)
   17ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   17eec:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   17ef0:	2b00      	cmp	r3, #0
   17ef2:	db07      	blt.n	17f04 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17ef4:	f003 011f 	and.w	r1, r3, #31
   17ef8:	095b      	lsrs	r3, r3, #5
   17efa:	2201      	movs	r2, #1
   17efc:	408a      	lsls	r2, r1
   17efe:	4907      	ldr	r1, [pc, #28]	; (17f1c <hal_spi_init_master+0xb0>)
   17f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   17f04:	2000      	movs	r0, #0
   17f06:	bc30      	pop	{r4, r5}
   17f08:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17f0a:	f003 030f 	and.w	r3, r3, #15
   17f0e:	4a04      	ldr	r2, [pc, #16]	; (17f20 <hal_spi_init_master+0xb4>)
   17f10:	441a      	add	r2, r3
   17f12:	23e0      	movs	r3, #224	; 0xe0
   17f14:	7613      	strb	r3, [r2, #24]
   17f16:	e7dc      	b.n	17ed2 <hal_spi_init_master+0x66>
   17f18:	e000ed00 	.word	0xe000ed00
   17f1c:	e000e100 	.word	0xe000e100
   17f20:	e000ecfc 	.word	0xe000ecfc

00017f24 <hal_spi_config_master>:
{
   17f24:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   17f26:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   17f28:	680c      	ldr	r4, [r1, #0]
   17f2a:	684b      	ldr	r3, [r1, #4]
   17f2c:	6084      	str	r4, [r0, #8]
   17f2e:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   17f30:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   17f34:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   17f38:	7808      	ldrb	r0, [r1, #0]
   17f3a:	2801      	cmp	r0, #1
   17f3c:	d916      	bls.n	17f6c <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   17f3e:	2001      	movs	r0, #1
   17f40:	4098      	lsls	r0, r3
   17f42:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   17f46:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   17f4a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17f4e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   17f52:	2403      	movs	r4, #3
   17f54:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   17f58:	788b      	ldrb	r3, [r1, #2]
   17f5a:	b973      	cbnz	r3, 17f7a <hal_spi_config_master+0x56>
    rc = 0;
   17f5c:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   17f5e:	780b      	ldrb	r3, [r1, #0]
   17f60:	2b03      	cmp	r3, #3
   17f62:	d812      	bhi.n	17f8a <hal_spi_config_master+0x66>
   17f64:	e8df f003 	tbb	[pc, r3]
   17f68:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   17f6c:	2001      	movs	r0, #1
   17f6e:	4098      	lsls	r0, r3
   17f70:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   17f74:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   17f78:	e7e7      	b.n	17f4a <hal_spi_config_master+0x26>
            rc = EINVAL;
   17f7a:	2016      	movs	r0, #22
   17f7c:	e7ef      	b.n	17f5e <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   17f7e:	2300      	movs	r3, #0
   17f80:	e007      	b.n	17f92 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   17f82:	2304      	movs	r3, #4
            break;
   17f84:	e005      	b.n	17f92 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   17f86:	2306      	movs	r3, #6
            break;
   17f88:	e003      	b.n	17f92 <hal_spi_config_master+0x6e>
            nrf_config = 0;
   17f8a:	2300      	movs	r3, #0
            rc = EINVAL;
   17f8c:	2016      	movs	r0, #22
            break;
   17f8e:	e000      	b.n	17f92 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   17f90:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   17f92:	784c      	ldrb	r4, [r1, #1]
   17f94:	2c01      	cmp	r4, #1
   17f96:	d010      	beq.n	17fba <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   17f98:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   17f9c:	684b      	ldr	r3, [r1, #4]
   17f9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   17fa2:	d023      	beq.n	17fec <hal_spi_config_master+0xc8>
   17fa4:	d80c      	bhi.n	17fc0 <hal_spi_config_master+0x9c>
   17fa6:	2bfa      	cmp	r3, #250	; 0xfa
   17fa8:	d029      	beq.n	17ffe <hal_spi_config_master+0xda>
   17faa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   17fae:	d01a      	beq.n	17fe6 <hal_spi_config_master+0xc2>
   17fb0:	2b7d      	cmp	r3, #125	; 0x7d
   17fb2:	d011      	beq.n	17fd8 <hal_spi_config_master+0xb4>
            frequency = 0;
   17fb4:	2300      	movs	r3, #0
            rc = EINVAL;
   17fb6:	2016      	movs	r0, #22
            break;
   17fb8:	e010      	b.n	17fdc <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   17fba:	f043 0301 	orr.w	r3, r3, #1
   17fbe:	e7eb      	b.n	17f98 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   17fc0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   17fc4:	d015      	beq.n	17ff2 <hal_spi_config_master+0xce>
   17fc6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   17fca:	d015      	beq.n	17ff8 <hal_spi_config_master+0xd4>
   17fcc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   17fd0:	d1f0      	bne.n	17fb4 <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   17fd2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   17fd6:	e001      	b.n	17fdc <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   17fd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   17fdc:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   17fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
   17fe4:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   17fe6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   17fea:	e7f7      	b.n	17fdc <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   17fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   17ff0:	e7f4      	b.n	17fdc <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   17ff2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   17ff6:	e7f1      	b.n	17fdc <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   17ff8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   17ffc:	e7ee      	b.n	17fdc <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   17ffe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   18002:	e7eb      	b.n	17fdc <hal_spi_config_master+0xb8>

00018004 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18004:	2802      	cmp	r0, #2
   18006:	dc10      	bgt.n	1802a <hal_spi_config+0x26>
{
   18008:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1800a:	4b0b      	ldr	r3, [pc, #44]	; (18038 <hal_spi_config+0x34>)
   1800c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   18010:	b168      	cbz	r0, 1802e <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   18012:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   18014:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   18018:	b95b      	cbnz	r3, 18032 <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1801a:	7803      	ldrb	r3, [r0, #0]
   1801c:	b113      	cbz	r3, 18024 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   1801e:	f7ff feff 	bl	17e20 <hal_spi_config_slave>
    }

err:
    return (rc);
}
   18022:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   18024:	f7ff ff7e 	bl	17f24 <hal_spi_config_master>
   18028:	e7fb      	b.n	18022 <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1802a:	2016      	movs	r0, #22
}
   1802c:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1802e:	2016      	movs	r0, #22
   18030:	e7f7      	b.n	18022 <hal_spi_config+0x1e>
        return -1;
   18032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18036:	e7f4      	b.n	18022 <hal_spi_config+0x1e>
   18038:	00026200 	.word	0x00026200

0001803c <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1803c:	2802      	cmp	r0, #2
   1803e:	dc1b      	bgt.n	18078 <hal_spi_enable+0x3c>
   18040:	4b10      	ldr	r3, [pc, #64]	; (18084 <hal_spi_enable+0x48>)
   18042:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   18046:	b1cb      	cbz	r3, 1807c <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   18048:	781a      	ldrb	r2, [r3, #0]
   1804a:	b17a      	cbz	r2, 1806c <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   1804c:	6a1a      	ldr	r2, [r3, #32]
   1804e:	b1ba      	cbz	r2, 18080 <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   18050:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   18052:	2000      	movs	r0, #0
   18054:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   18058:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   1805c:	f240 4202 	movw	r2, #1026	; 0x402
   18060:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   18064:	2202      	movs	r2, #2
   18066:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1806a:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   1806c:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1806e:	2201      	movs	r2, #1
   18070:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   18074:	2000      	movs	r0, #0
   18076:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18078:	2016      	movs	r0, #22
   1807a:	4770      	bx	lr
   1807c:	2016      	movs	r0, #22
   1807e:	4770      	bx	lr
            rc = EINVAL;
   18080:	2016      	movs	r0, #22

err:
    return rc;
}
   18082:	4770      	bx	lr
   18084:	00026200 	.word	0x00026200

00018088 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18088:	2802      	cmp	r0, #2
   1808a:	dc2a      	bgt.n	180e2 <hal_spi_disable+0x5a>
{
   1808c:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1808e:	4b17      	ldr	r3, [pc, #92]	; (180ec <hal_spi_disable+0x64>)
   18090:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   18094:	b33c      	cbz	r4, 180e6 <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   18096:	7823      	ldrb	r3, [r4, #0]
   18098:	b9ab      	cbnz	r3, 180c6 <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   1809a:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1809c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   180a0:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   180a4:	7863      	ldrb	r3, [r4, #1]
   180a6:	b943      	cbnz	r3, 180ba <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   180a8:	2300      	movs	r3, #0
   180aa:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   180ae:	2000      	movs	r0, #0
   180b0:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   180b2:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   180b4:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   180b6:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   180b8:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   180ba:	4628      	mov	r0, r5
   180bc:	f7ff fea6 	bl	17e0c <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   180c0:	2300      	movs	r3, #0
   180c2:	7063      	strb	r3, [r4, #1]
   180c4:	e7f0      	b.n	180a8 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   180c6:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   180c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   180cc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   180d0:	2300      	movs	r3, #0
   180d2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   180d6:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   180da:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   180de:	70e3      	strb	r3, [r4, #3]
   180e0:	e7e5      	b.n	180ae <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   180e2:	2016      	movs	r0, #22
}
   180e4:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   180e6:	2016      	movs	r0, #22
    return rc;
   180e8:	e7e6      	b.n	180b8 <hal_spi_disable+0x30>
   180ea:	bf00      	nop
   180ec:	00026200 	.word	0x00026200

000180f0 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   180f0:	2802      	cmp	r0, #2
   180f2:	dc1d      	bgt.n	18130 <hal_spi_init+0x40>
{
   180f4:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   180f6:	4b13      	ldr	r3, [pc, #76]	; (18144 <hal_spi_init+0x54>)
   180f8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   180fc:	b1d4      	cbz	r4, 18134 <hal_spi_init+0x44>
    if (cfg == NULL) {
   180fe:	b1d9      	cbz	r1, 18138 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   18100:	2a01      	cmp	r2, #1
   18102:	d81b      	bhi.n	1813c <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   18104:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   18106:	b9d8      	cbnz	r0, 18140 <hal_spi_init+0x50>
   18108:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   1810a:	2303      	movs	r3, #3
   1810c:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   1810e:	b94a      	cbnz	r2, 18124 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   18110:	4b0d      	ldr	r3, [pc, #52]	; (18148 <hal_spi_init+0x58>)
   18112:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   18114:	f7ff ffb8 	bl	18088 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   18118:	4a0c      	ldr	r2, [pc, #48]	; (1814c <hal_spi_init+0x5c>)
   1811a:	4629      	mov	r1, r5
   1811c:	4620      	mov	r0, r4
   1811e:	f7ff fea5 	bl	17e6c <hal_spi_init_master>
   18122:	e00c      	b.n	1813e <hal_spi_init+0x4e>
            assert(0);
   18124:	2300      	movs	r3, #0
   18126:	461a      	mov	r2, r3
   18128:	4619      	mov	r1, r3
   1812a:	4618      	mov	r0, r3
   1812c:	f000 f952 	bl	183d4 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18130:	2016      	movs	r0, #22
}
   18132:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18134:	2016      	movs	r0, #22
   18136:	e002      	b.n	1813e <hal_spi_init+0x4e>
    rc = EINVAL;
   18138:	2016      	movs	r0, #22
   1813a:	e000      	b.n	1813e <hal_spi_init+0x4e>
   1813c:	2016      	movs	r0, #22
}
   1813e:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   18140:	2016      	movs	r0, #22
    return (rc);
   18142:	e7fc      	b.n	1813e <hal_spi_init+0x4e>
   18144:	00026200 	.word	0x00026200
   18148:	40003000 	.word	0x40003000
   1814c:	00017df5 	.word	0x00017df5

00018150 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18150:	2802      	cmp	r0, #2
   18152:	dc0a      	bgt.n	1816a <hal_spi_set_txrx_cb+0x1a>
   18154:	4b08      	ldr	r3, [pc, #32]	; (18178 <hal_spi_set_txrx_cb+0x28>)
   18156:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1815a:	b143      	cbz	r3, 1816e <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1815c:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   1815e:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   18162:	b930      	cbnz	r0, 18172 <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   18164:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   18166:	625a      	str	r2, [r3, #36]	; 0x24
   18168:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1816a:	2016      	movs	r0, #22
   1816c:	4770      	bx	lr
   1816e:	2016      	movs	r0, #22
   18170:	4770      	bx	lr
        rc = -1;
   18172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   18176:	4770      	bx	lr
   18178:	00026200 	.word	0x00026200

0001817c <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   1817c:	2b00      	cmp	r3, #0
   1817e:	d046      	beq.n	1820e <hal_spi_txrx+0x92>
{
   18180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18182:	460d      	mov	r5, r1
   18184:	4617      	mov	r7, r2
   18186:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   18188:	2802      	cmp	r0, #2
   1818a:	dc42      	bgt.n	18212 <hal_spi_txrx+0x96>
   1818c:	4b25      	ldr	r3, [pc, #148]	; (18224 <hal_spi_txrx+0xa8>)
   1818e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   18192:	2b00      	cmp	r3, #0
   18194:	d03f      	beq.n	18216 <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   18196:	781a      	ldrb	r2, [r3, #0]
   18198:	2a00      	cmp	r2, #0
   1819a:	d13e      	bne.n	1821a <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1819c:	2900      	cmp	r1, #0
   1819e:	d03e      	beq.n	1821e <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   181a0:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   181a2:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   181a6:	2b07      	cmp	r3, #7
   181a8:	d004      	beq.n	181b4 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   181aa:	b95b      	cbnz	r3, 181c4 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   181ac:	2301      	movs	r3, #1
   181ae:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   181b2:	e007      	b.n	181c4 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   181b4:	f7ff ff68 	bl	18088 <hal_spi_disable>
   181b8:	e7f8      	b.n	181ac <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   181ba:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   181be:	2300      	movs	r3, #0
   181c0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   181c4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   181c8:	2b00      	cmp	r3, #0
   181ca:	d1f6      	bne.n	181ba <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   181cc:	782b      	ldrb	r3, [r5, #0]
   181ce:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   181d2:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   181d4:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   181d6:	2200      	movs	r2, #0
   181d8:	e00d      	b.n	181f6 <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   181da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   181de:	2b00      	cmp	r3, #0
   181e0:	d0fb      	beq.n	181da <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   181e2:	2300      	movs	r3, #0
   181e4:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   181e8:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   181ec:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   181ee:	b10f      	cbz	r7, 181f4 <hal_spi_txrx+0x78>
                *rxd = rxval;
   181f0:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   181f4:	3201      	adds	r2, #1
   181f6:	42b2      	cmp	r2, r6
   181f8:	da07      	bge.n	1820a <hal_spi_txrx+0x8e>
            if (txcnt) {
   181fa:	2900      	cmp	r1, #0
   181fc:	d0ed      	beq.n	181da <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   181fe:	786b      	ldrb	r3, [r5, #1]
   18200:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   18204:	3901      	subs	r1, #1
                ++txd;
   18206:	3501      	adds	r5, #1
   18208:	e7e7      	b.n	181da <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   1820a:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   1820c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   1820e:	2016      	movs	r0, #22
}
   18210:	4770      	bx	lr
    return rc;
   18212:	2016      	movs	r0, #22
   18214:	e7fa      	b.n	1820c <hal_spi_txrx+0x90>
   18216:	2016      	movs	r0, #22
   18218:	e7f8      	b.n	1820c <hal_spi_txrx+0x90>
   1821a:	2016      	movs	r0, #22
   1821c:	e7f6      	b.n	1820c <hal_spi_txrx+0x90>
   1821e:	2016      	movs	r0, #22
   18220:	e7f4      	b.n	1820c <hal_spi_txrx+0x90>
   18222:	bf00      	nop
   18224:	00026200 	.word	0x00026200

00018228 <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18228:	2802      	cmp	r0, #2
   1822a:	dc57      	bgt.n	182dc <hal_spi_txrx_noblock+0xb4>
{
   1822c:	b430      	push	{r4, r5}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1822e:	4c35      	ldr	r4, [pc, #212]	; (18304 <hal_spi_txrx_noblock+0xdc>)
   18230:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   18234:	2800      	cmp	r0, #0
   18236:	d053      	beq.n	182e0 <hal_spi_txrx_noblock+0xb8>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   18238:	6a04      	ldr	r4, [r0, #32]
   1823a:	2c00      	cmp	r4, #0
   1823c:	d052      	beq.n	182e4 <hal_spi_txrx_noblock+0xbc>
   1823e:	2b00      	cmp	r3, #0
   18240:	d052      	beq.n	182e8 <hal_spi_txrx_noblock+0xc0>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   18242:	7804      	ldrb	r4, [r0, #0]
   18244:	2c00      	cmp	r4, #0
   18246:	d137      	bne.n	182b8 <hal_spi_txrx_noblock+0x90>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   18248:	2900      	cmp	r1, #0
   1824a:	d050      	beq.n	182ee <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   1824c:	7844      	ldrb	r4, [r0, #1]
   1824e:	2c00      	cmp	r4, #0
   18250:	d14f      	bne.n	182f2 <hal_spi_txrx_noblock+0xca>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   18252:	6904      	ldr	r4, [r0, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   18254:	2540      	movs	r5, #64	; 0x40
   18256:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   1825a:	2501      	movs	r5, #1
   1825c:	7045      	strb	r5, [r0, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   1825e:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
   18262:	2d07      	cmp	r5, #7
   18264:	d005      	beq.n	18272 <hal_spi_txrx_noblock+0x4a>
            spim->ENABLE = 0;
   18266:	2500      	movs	r5, #0
   18268:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1826c:	2507      	movs	r5, #7
   1826e:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   18272:	2500      	movs	r5, #0
   18274:	80c5      	strh	r5, [r0, #6]
        spi->nhs_buflen = len;
   18276:	8083      	strh	r3, [r0, #4]
        spi->nhs_txbuf = txbuf;
   18278:	6181      	str	r1, [r0, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   1827a:	2bff      	cmp	r3, #255	; 0xff
   1827c:	bfa8      	it	ge
   1827e:	23ff      	movge	r3, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   18280:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   18284:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   18288:	61c2      	str	r2, [r0, #28]
        if (rxbuf == NULL) {
   1828a:	b172      	cbz	r2, 182aa <hal_spi_txrx_noblock+0x82>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   1828c:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   18290:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   18294:	2000      	movs	r0, #0
   18296:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   1829a:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        spim->TASKS_START = 1;
   1829e:	2301      	movs	r3, #1
   182a0:	6123      	str	r3, [r4, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   182a2:	2340      	movs	r3, #64	; 0x40
   182a4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   182a8:	e01f      	b.n	182ea <hal_spi_txrx_noblock+0xc2>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   182aa:	3002      	adds	r0, #2
   182ac:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   182b0:	2301      	movs	r3, #1
   182b2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
   182b6:	e7ed      	b.n	18294 <hal_spi_txrx_noblock+0x6c>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   182b8:	b161      	cbz	r1, 182d4 <hal_spi_txrx_noblock+0xac>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   182ba:	2bff      	cmp	r3, #255	; 0xff
   182bc:	dc1c      	bgt.n	182f8 <hal_spi_txrx_noblock+0xd0>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   182be:	78c4      	ldrb	r4, [r0, #3]
   182c0:	b9e4      	cbnz	r4, 182fc <hal_spi_txrx_noblock+0xd4>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   182c2:	61c2      	str	r2, [r0, #28]
        spi->nhs_txbuf = txbuf;
   182c4:	6181      	str	r1, [r0, #24]
        spi->nhs_buflen = len;
   182c6:	8083      	strh	r3, [r0, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   182c8:	2301      	movs	r3, #1
   182ca:	70c3      	strb	r3, [r0, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   182cc:	6902      	ldr	r2, [r0, #16]
   182ce:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   182d0:	2000      	movs	r0, #0
   182d2:	e00a      	b.n	182ea <hal_spi_txrx_noblock+0xc2>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   182d4:	2a00      	cmp	r2, #0
   182d6:	d1f0      	bne.n	182ba <hal_spi_txrx_noblock+0x92>
    rc = EINVAL;
   182d8:	2016      	movs	r0, #22
   182da:	e006      	b.n	182ea <hal_spi_txrx_noblock+0xc2>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   182dc:	2016      	movs	r0, #22

err:
    return rc;
}
   182de:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   182e0:	2016      	movs	r0, #22
   182e2:	e002      	b.n	182ea <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   182e4:	2016      	movs	r0, #22
   182e6:	e000      	b.n	182ea <hal_spi_txrx_noblock+0xc2>
   182e8:	2016      	movs	r0, #22
}
   182ea:	bc30      	pop	{r4, r5}
   182ec:	4770      	bx	lr
    rc = EINVAL;
   182ee:	2016      	movs	r0, #22
   182f0:	e7fb      	b.n	182ea <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   182f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   182f6:	e7f8      	b.n	182ea <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   182f8:	2016      	movs	r0, #22
   182fa:	e7f6      	b.n	182ea <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   182fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18300:	e7f3      	b.n	182ea <hal_spi_txrx_noblock+0xc2>
   18302:	bf00      	nop
   18304:	00026200 	.word	0x00026200

00018308 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   18308:	b508      	push	{r3, lr}
    assert(0);
   1830a:	2300      	movs	r3, #0
   1830c:	461a      	mov	r2, r3
   1830e:	4619      	mov	r1, r3
   18310:	4618      	mov	r0, r3
   18312:	f000 f85f 	bl	183d4 <__assert_func>
	...

00018318 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   18318:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   1831a:	4b06      	ldr	r3, [pc, #24]	; (18334 <nrf52_wdt_irq_handler+0x1c>)
   1831c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   18320:	f013 0f01 	tst.w	r3, #1
   18324:	d100      	bne.n	18328 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   18326:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   18328:	4b02      	ldr	r3, [pc, #8]	; (18334 <nrf52_wdt_irq_handler+0x1c>)
   1832a:	2200      	movs	r2, #0
   1832c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   18330:	f7ff ffea 	bl	18308 <nrf52_hal_wdt_default_handler>
   18334:	40010000 	.word	0x40010000

00018338 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   18338:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   1833a:	4b17      	ldr	r3, [pc, #92]	; (18398 <hal_watchdog_init+0x60>)
   1833c:	2201      	movs	r2, #1
   1833e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   18342:	4b16      	ldr	r3, [pc, #88]	; (1839c <hal_watchdog_init+0x64>)
   18344:	4298      	cmp	r0, r3
   18346:	d821      	bhi.n	1838c <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   18348:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1834c:	0153      	lsls	r3, r2, #5
   1834e:	4a14      	ldr	r2, [pc, #80]	; (183a0 <hal_watchdog_init+0x68>)
   18350:	fba2 2303 	umull	r2, r3, r2, r3
   18354:	08db      	lsrs	r3, r3, #3
   18356:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1835a:	4b0f      	ldr	r3, [pc, #60]	; (18398 <hal_watchdog_init+0x60>)
   1835c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   18360:	4a10      	ldr	r2, [pc, #64]	; (183a4 <hal_watchdog_init+0x6c>)
   18362:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18364:	4910      	ldr	r1, [pc, #64]	; (183a8 <hal_watchdog_init+0x70>)
   18366:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1836a:	4a10      	ldr	r2, [pc, #64]	; (183ac <hal_watchdog_init+0x74>)
   1836c:	21e0      	movs	r1, #224	; 0xe0
   1836e:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18372:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   18376:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1837a:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   1837c:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   18380:	f042 0201 	orr.w	r2, r2, #1
   18384:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   18388:	2000      	movs	r0, #0
   1838a:	bd08      	pop	{r3, pc}
        assert(0);
   1838c:	2300      	movs	r3, #0
   1838e:	461a      	mov	r2, r3
   18390:	4619      	mov	r1, r3
   18392:	4618      	mov	r0, r3
   18394:	f000 f81e 	bl	183d4 <__assert_func>
   18398:	40010000 	.word	0x40010000
   1839c:	02aaaaaa 	.word	0x02aaaaaa
   183a0:	10624dd3 	.word	0x10624dd3
   183a4:	e000ed00 	.word	0xe000ed00
   183a8:	00018319 	.word	0x00018319
   183ac:	e000e100 	.word	0xe000e100

000183b0 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   183b0:	4b02      	ldr	r3, [pc, #8]	; (183bc <hal_watchdog_enable+0xc>)
   183b2:	2201      	movs	r2, #1
   183b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   183b8:	601a      	str	r2, [r3, #0]
}
   183ba:	4770      	bx	lr
   183bc:	40010000 	.word	0x40010000

000183c0 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   183c0:	4b02      	ldr	r3, [pc, #8]	; (183cc <hal_watchdog_tickle+0xc>)
   183c2:	4a03      	ldr	r2, [pc, #12]	; (183d0 <hal_watchdog_tickle+0x10>)
   183c4:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   183c8:	4770      	bx	lr
   183ca:	bf00      	nop
   183cc:	40010000 	.word	0x40010000
   183d0:	6e524635 	.word	0x6e524635

000183d4 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   183d4:	b508      	push	{r3, lr}
   183d6:	4675      	mov	r5, lr
   183d8:	4604      	mov	r4, r0
   183da:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   183dc:	f001 fa90 	bl	19900 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   183e0:	f7ff f905 	bl	175ee <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   183e4:	b18c      	cbz	r4, 1840a <__assert_func+0x36>
   183e6:	4633      	mov	r3, r6
   183e8:	4622      	mov	r2, r4
   183ea:	4629      	mov	r1, r5
   183ec:	4809      	ldr	r0, [pc, #36]	; (18414 <__assert_func+0x40>)
   183ee:	f7ff f929 	bl	17644 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
   183f2:	f7ef fec7 	bl	8184 <hal_debugger_connected>
   183f6:	b100      	cbz	r0, 183fa <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
   183f8:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   183fa:	4b07      	ldr	r3, [pc, #28]	; (18418 <__assert_func+0x44>)
   183fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   18400:	605a      	str	r2, [r3, #4]
    asm("isb");
   18402:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   18406:	f7ef fec5 	bl	8194 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   1840a:	4629      	mov	r1, r5
   1840c:	4803      	ldr	r0, [pc, #12]	; (1841c <__assert_func+0x48>)
   1840e:	f7ff f919 	bl	17644 <console_printf>
   18412:	e7ee      	b.n	183f2 <__assert_func+0x1e>
   18414:	0002621c 	.word	0x0002621c
   18418:	e000ed00 	.word	0xe000ed00
   1841c:	0002620c 	.word	0x0002620c

00018420 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   18420:	b500      	push	{lr}
   18422:	b083      	sub	sp, #12
   18424:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   18426:	f7ff f8e2 	bl	175ee <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   1842a:	4d1b      	ldr	r5, [pc, #108]	; (18498 <os_default_irq+0x78>)
   1842c:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   1842e:	6822      	ldr	r2, [r4, #0]
   18430:	f3c1 0108 	ubfx	r1, r1, #0, #9
   18434:	4819      	ldr	r0, [pc, #100]	; (1849c <os_default_irq+0x7c>)
   18436:	f7ff f905 	bl	17644 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   1843a:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   1843c:	6883      	ldr	r3, [r0, #8]
   1843e:	6842      	ldr	r2, [r0, #4]
   18440:	6801      	ldr	r1, [r0, #0]
   18442:	68c0      	ldr	r0, [r0, #12]
   18444:	9000      	str	r0, [sp, #0]
   18446:	4816      	ldr	r0, [pc, #88]	; (184a0 <os_default_irq+0x80>)
   18448:	f7ff f8fc 	bl	17644 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   1844c:	6923      	ldr	r3, [r4, #16]
   1844e:	9300      	str	r3, [sp, #0]
   18450:	68e3      	ldr	r3, [r4, #12]
   18452:	68a2      	ldr	r2, [r4, #8]
   18454:	6861      	ldr	r1, [r4, #4]
   18456:	4813      	ldr	r0, [pc, #76]	; (184a4 <os_default_irq+0x84>)
   18458:	f7ff f8f4 	bl	17644 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   1845c:	6a23      	ldr	r3, [r4, #32]
   1845e:	9300      	str	r3, [sp, #0]
   18460:	69e3      	ldr	r3, [r4, #28]
   18462:	69a2      	ldr	r2, [r4, #24]
   18464:	6961      	ldr	r1, [r4, #20]
   18466:	4810      	ldr	r0, [pc, #64]	; (184a8 <os_default_irq+0x88>)
   18468:	f7ff f8ec 	bl	17644 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   1846c:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   1846e:	6983      	ldr	r3, [r0, #24]
   18470:	6942      	ldr	r2, [r0, #20]
   18472:	6901      	ldr	r1, [r0, #16]
   18474:	69c0      	ldr	r0, [r0, #28]
   18476:	9000      	str	r0, [sp, #0]
   18478:	480c      	ldr	r0, [pc, #48]	; (184ac <os_default_irq+0x8c>)
   1847a:	f7ff f8e3 	bl	17644 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   1847e:	6869      	ldr	r1, [r5, #4]
   18480:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   18482:	6aab      	ldr	r3, [r5, #40]	; 0x28
   18484:	480a      	ldr	r0, [pc, #40]	; (184b0 <os_default_irq+0x90>)
   18486:	f7ff f8dd 	bl	17644 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   1848a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   1848c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   1848e:	4809      	ldr	r0, [pc, #36]	; (184b4 <os_default_irq+0x94>)
   18490:	f7ff f8d8 	bl	17644 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   18494:	f7ef fe7e 	bl	8194 <hal_system_reset>
   18498:	e000ed00 	.word	0xe000ed00
   1849c:	00026234 	.word	0x00026234
   184a0:	00026268 	.word	0x00026268
   184a4:	0002629c 	.word	0x0002629c
   184a8:	000262d0 	.word	0x000262d0
   184ac:	00026304 	.word	0x00026304
   184b0:	00026338 	.word	0x00026338
   184b4:	00026360 	.word	0x00026360

000184b8 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   184b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
   184ba:	f7ff ff81 	bl	183c0 <hal_watchdog_tickle>
    sanity_last = 0;
   184be:	2500      	movs	r5, #0
   184c0:	e00b      	b.n	184da <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   184c2:	f000 fec7 	bl	19254 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   184c6:	f7ff ff7b 	bl	183c0 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
   184ca:	4625      	mov	r5, r4
   184cc:	e011      	b.n	184f2 <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   184ce:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   184d0:	f002 f842 	bl	1a558 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   184d4:	4638      	mov	r0, r7
   184d6:	f001 fa19 	bl	1990c <os_arch_restore_sr>
        ++g_os_idle_ctr;
   184da:	4a14      	ldr	r2, [pc, #80]	; (1852c <os_idle_task+0x74>)
   184dc:	6813      	ldr	r3, [r2, #0]
   184de:	3301      	adds	r3, #1
   184e0:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   184e2:	f001 f995 	bl	19810 <os_time_get>
   184e6:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
   184e8:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   184ec:	1ac3      	subs	r3, r0, r3
   184ee:	2b00      	cmp	r3, #0
   184f0:	dce7      	bgt.n	184c2 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   184f2:	f001 fa05 	bl	19900 <os_arch_save_sr>
   184f6:	4607      	mov	r7, r0
        now = os_time_get();
   184f8:	f001 f98a 	bl	19810 <os_time_get>
   184fc:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
   184fe:	f000 ffd7 	bl	194b0 <os_sched_wakeup_ticks>
   18502:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   18504:	4630      	mov	r0, r6
   18506:	f000 f975 	bl	187f4 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   1850a:	42a0      	cmp	r0, r4
   1850c:	bf28      	it	cs
   1850e:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
   18510:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   18514:	1b9b      	subs	r3, r3, r6
   18516:	4298      	cmp	r0, r3
   18518:	bf28      	it	cs
   1851a:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
   1851c:	280b      	cmp	r0, #11
   1851e:	d9d6      	bls.n	184ce <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
   18520:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   18524:	d9d4      	bls.n	184d0 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
   18526:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   1852a:	e7d1      	b.n	184d0 <os_idle_task+0x18>
   1852c:	2000de8c 	.word	0x2000de8c

00018530 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   18530:	b508      	push	{r3, lr}
   18532:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   18534:	2100      	movs	r1, #0
   18536:	4608      	mov	r0, r1
   18538:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   1853a:	2300      	movs	r3, #0
   1853c:	461a      	mov	r2, r3
   1853e:	4619      	mov	r1, r3
   18540:	4618      	mov	r0, r3
   18542:	f7ff ff47 	bl	183d4 <__assert_func>
	...

00018548 <os_started>:
}
   18548:	4b01      	ldr	r3, [pc, #4]	; (18550 <os_started+0x8>)
   1854a:	6818      	ldr	r0, [r3, #0]
   1854c:	4770      	bx	lr
   1854e:	bf00      	nop
   18550:	2000de88 	.word	0x2000de88

00018554 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   18554:	b500      	push	{lr}
   18556:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   18558:	2340      	movs	r3, #64	; 0x40
   1855a:	9303      	str	r3, [sp, #12]
   1855c:	4b15      	ldr	r3, [pc, #84]	; (185b4 <os_init_idle_task+0x60>)
   1855e:	9302      	str	r3, [sp, #8]
   18560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18564:	9301      	str	r3, [sp, #4]
   18566:	23ff      	movs	r3, #255	; 0xff
   18568:	9300      	str	r3, [sp, #0]
   1856a:	2300      	movs	r3, #0
   1856c:	4a12      	ldr	r2, [pc, #72]	; (185b8 <os_init_idle_task+0x64>)
   1856e:	4913      	ldr	r1, [pc, #76]	; (185bc <os_init_idle_task+0x68>)
   18570:	4813      	ldr	r0, [pc, #76]	; (185c0 <os_init_idle_task+0x6c>)
   18572:	f001 f88d 	bl	19690 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   18576:	b950      	cbnz	r0, 1858e <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   18578:	f000 fea2 	bl	192c0 <os_sanity_init>
    assert(rc == 0);
   1857c:	b968      	cbnz	r0, 1859a <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   1857e:	f247 5030 	movw	r0, #30000	; 0x7530
   18582:	f7ff fed9 	bl	18338 <hal_watchdog_init>
    assert(rc == 0);
   18586:	b970      	cbnz	r0, 185a6 <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
   18588:	b005      	add	sp, #20
   1858a:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   1858e:	2300      	movs	r3, #0
   18590:	461a      	mov	r2, r3
   18592:	4619      	mov	r1, r3
   18594:	4618      	mov	r0, r3
   18596:	f7ff ff1d 	bl	183d4 <__assert_func>
    assert(rc == 0);
   1859a:	2300      	movs	r3, #0
   1859c:	461a      	mov	r2, r3
   1859e:	4619      	mov	r1, r3
   185a0:	4618      	mov	r0, r3
   185a2:	f7ff ff17 	bl	183d4 <__assert_func>
    assert(rc == 0);
   185a6:	2300      	movs	r3, #0
   185a8:	461a      	mov	r2, r3
   185aa:	4619      	mov	r1, r3
   185ac:	4618      	mov	r0, r3
   185ae:	f7ff ff11 	bl	183d4 <__assert_func>
   185b2:	bf00      	nop
   185b4:	20006f70 	.word	0x20006f70
   185b8:	000184b9 	.word	0x000184b9
   185bc:	00026384 	.word	0x00026384
   185c0:	2000dde8 	.word	0x2000dde8

000185c4 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   185c4:	b510      	push	{r4, lr}
   185c6:	b084      	sub	sp, #16
   185c8:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   185ca:	4b24      	ldr	r3, [pc, #144]	; (1865c <os_init+0x98>)
   185cc:	2200      	movs	r2, #0
   185ce:	601a      	str	r2, [r3, #0]
   185d0:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   185d2:	4b23      	ldr	r3, [pc, #140]	; (18660 <os_init+0x9c>)
   185d4:	601a      	str	r2, [r3, #0]
   185d6:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   185d8:	f000 faba 	bl	18b50 <os_eventq_dflt_get>
   185dc:	f000 fa0e 	bl	189fc <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   185e0:	f000 fa04 	bl	189ec <os_dev_reset>

    err = os_arch_os_init();
   185e4:	f001 f9c6 	bl	19974 <os_arch_os_init>
    assert(err == OS_OK);
   185e8:	bb00      	cbnz	r0, 1862c <os_init+0x68>

    if (main_fn) {
   185ea:	b18c      	cbz	r4, 18610 <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   185ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
   185f0:	9303      	str	r3, [sp, #12]
   185f2:	4b1c      	ldr	r3, [pc, #112]	; (18664 <os_init+0xa0>)
   185f4:	9302      	str	r3, [sp, #8]
   185f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   185fa:	9301      	str	r3, [sp, #4]
   185fc:	237f      	movs	r3, #127	; 0x7f
   185fe:	9300      	str	r3, [sp, #0]
   18600:	4623      	mov	r3, r4
   18602:	4a19      	ldr	r2, [pc, #100]	; (18668 <os_init+0xa4>)
   18604:	4919      	ldr	r1, [pc, #100]	; (1866c <os_init+0xa8>)
   18606:	481a      	ldr	r0, [pc, #104]	; (18670 <os_init+0xac>)
   18608:	f001 f842 	bl	19690 <os_task_init>
   1860c:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   1860e:	b998      	cbnz	r0, 18638 <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   18610:	f001 fe72 	bl	1a2f8 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   18614:	2001      	movs	r0, #1
   18616:	f000 f985 	bl	18924 <os_dev_initialize_all>
   1861a:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1861c:	b990      	cbnz	r0, 18644 <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   1861e:	2002      	movs	r0, #2
   18620:	f000 f980 	bl	18924 <os_dev_initialize_all>
   18624:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   18626:	b998      	cbnz	r0, 18650 <os_init+0x8c>
}
   18628:	b004      	add	sp, #16
   1862a:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   1862c:	2300      	movs	r3, #0
   1862e:	461a      	mov	r2, r3
   18630:	4619      	mov	r1, r3
   18632:	4618      	mov	r0, r3
   18634:	f7ff fece 	bl	183d4 <__assert_func>
        assert(err == 0);
   18638:	2300      	movs	r3, #0
   1863a:	461a      	mov	r2, r3
   1863c:	4619      	mov	r1, r3
   1863e:	4618      	mov	r0, r3
   18640:	f7ff fec8 	bl	183d4 <__assert_func>
    assert(err == OS_OK);
   18644:	2300      	movs	r3, #0
   18646:	461a      	mov	r2, r3
   18648:	4619      	mov	r1, r3
   1864a:	4618      	mov	r0, r3
   1864c:	f7ff fec2 	bl	183d4 <__assert_func>
    assert(err == OS_OK);
   18650:	2300      	movs	r3, #0
   18652:	461a      	mov	r2, r3
   18654:	4619      	mov	r1, r3
   18656:	4618      	mov	r0, r3
   18658:	f7ff febc 	bl	183d4 <__assert_func>
   1865c:	2000de90 	.word	0x2000de90
   18660:	2000deb8 	.word	0x2000deb8
   18664:	20007070 	.word	0x20007070
   18668:	00018531 	.word	0x00018531
   1866c:	0002637c 	.word	0x0002637c
   18670:	2000de38 	.word	0x2000de38

00018674 <os_start>:

void
os_start(void)
{
   18674:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   18676:	f7ff fe9b 	bl	183b0 <hal_watchdog_enable>

    err = os_arch_os_start();
   1867a:	f001 f9db 	bl	19a34 <os_arch_os_start>
    assert(err == OS_OK);
   1867e:	b900      	cbnz	r0, 18682 <os_start+0xe>
#else
    assert(0);
#endif
}
   18680:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   18682:	2300      	movs	r3, #0
   18684:	461a      	mov	r2, r3
   18686:	4619      	mov	r1, r3
   18688:	4618      	mov	r0, r3
   1868a:	f7ff fea3 	bl	183d4 <__assert_func>
	...

00018690 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   18690:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   18692:	4b0c      	ldr	r3, [pc, #48]	; (186c4 <os_pkg_init+0x34>)
   18694:	781b      	ldrb	r3, [r3, #0]
   18696:	b14b      	cbz	r3, 186ac <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   18698:	2003      	movs	r0, #3
   1869a:	f000 f943 	bl	18924 <os_dev_initialize_all>
   1869e:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   186a0:	b948      	cbnz	r0, 186b6 <os_pkg_init+0x26>

    os_mempool_module_init();
   186a2:	f000 fc25 	bl	18ef0 <os_mempool_module_init>
    os_msys_init();
   186a6:	f000 fcad 	bl	19004 <os_msys_init>
}
   186aa:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   186ac:	461a      	mov	r2, r3
   186ae:	4619      	mov	r1, r3
   186b0:	4618      	mov	r0, r3
   186b2:	f7ff fe8f 	bl	183d4 <__assert_func>
    assert(err == OS_OK);
   186b6:	2300      	movs	r3, #0
   186b8:	461a      	mov	r2, r3
   186ba:	4619      	mov	r1, r3
   186bc:	4618      	mov	r0, r3
   186be:	f7ff fe89 	bl	183d4 <__assert_func>
   186c2:	bf00      	nop
   186c4:	2000ddbc 	.word	0x2000ddbc

000186c8 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   186c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   186ca:	4604      	mov	r4, r0
   186cc:	460d      	mov	r5, r1
   186ce:	4617      	mov	r7, r2
   186d0:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   186d2:	2220      	movs	r2, #32
   186d4:	2100      	movs	r1, #0
   186d6:	f001 fa80 	bl	19bda <memset>
    c->c_ev.ev_cb = ev_cb;
   186da:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   186dc:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   186de:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   186e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000186e4 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   186e4:	b538      	push	{r3, r4, r5, lr}
   186e6:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   186e8:	f001 f90a 	bl	19900 <os_arch_save_sr>
   186ec:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   186ee:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   186f0:	b13b      	cbz	r3, 18702 <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   186f2:	69a2      	ldr	r2, [r4, #24]
   186f4:	b172      	cbz	r2, 18714 <os_callout_stop+0x30>
   186f6:	61d3      	str	r3, [r2, #28]
   186f8:	69e3      	ldr	r3, [r4, #28]
   186fa:	69a2      	ldr	r2, [r4, #24]
   186fc:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   186fe:	2300      	movs	r3, #0
   18700:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   18702:	6920      	ldr	r0, [r4, #16]
   18704:	b110      	cbz	r0, 1870c <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   18706:	4621      	mov	r1, r4
   18708:	f000 fa02 	bl	18b10 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   1870c:	4628      	mov	r0, r5
   1870e:	f001 f8fd 	bl	1990c <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   18712:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   18714:	4a01      	ldr	r2, [pc, #4]	; (1871c <os_callout_stop+0x38>)
   18716:	6053      	str	r3, [r2, #4]
   18718:	e7ee      	b.n	186f8 <os_callout_stop+0x14>
   1871a:	bf00      	nop
   1871c:	2000de90 	.word	0x2000de90

00018720 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   18720:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   18722:	6903      	ldr	r3, [r0, #16]
   18724:	b1c3      	cbz	r3, 18758 <os_callout_reset+0x38>
   18726:	4605      	mov	r5, r0
   18728:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   1872a:	2900      	cmp	r1, #0
   1872c:	db2f      	blt.n	1878e <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   1872e:	f001 f8e7 	bl	19900 <os_arch_save_sr>
   18732:	4606      	mov	r6, r0

    os_callout_stop(c);
   18734:	4628      	mov	r0, r5
   18736:	f7ff ffd5 	bl	186e4 <os_callout_stop>

    if (ticks == 0) {
   1873a:	b904      	cbnz	r4, 1873e <os_callout_reset+0x1e>
        ticks = 1;
   1873c:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
   1873e:	f001 f867 	bl	19810 <os_time_get>
   18742:	4420      	add	r0, r4
   18744:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   18746:	4b13      	ldr	r3, [pc, #76]	; (18794 <os_callout_reset+0x74>)
   18748:	681b      	ldr	r3, [r3, #0]
   1874a:	b153      	cbz	r3, 18762 <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   1874c:	695a      	ldr	r2, [r3, #20]
   1874e:	1a82      	subs	r2, r0, r2
   18750:	2a00      	cmp	r2, #0
   18752:	db06      	blt.n	18762 <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   18754:	699b      	ldr	r3, [r3, #24]
   18756:	e7f8      	b.n	1874a <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   18758:	461a      	mov	r2, r3
   1875a:	4619      	mov	r1, r3
   1875c:	4618      	mov	r0, r3
   1875e:	f7ff fe39 	bl	183d4 <__assert_func>
            break;
        }
    }

    if (entry) {
   18762:	b15b      	cbz	r3, 1877c <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   18764:	69da      	ldr	r2, [r3, #28]
   18766:	61ea      	str	r2, [r5, #28]
   18768:	61ab      	str	r3, [r5, #24]
   1876a:	69da      	ldr	r2, [r3, #28]
   1876c:	6015      	str	r5, [r2, #0]
   1876e:	3518      	adds	r5, #24
   18770:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   18772:	4630      	mov	r0, r6
   18774:	f001 f8ca 	bl	1990c <os_arch_restore_sr>

    ret = OS_OK;
   18778:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   1877a:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   1877c:	2300      	movs	r3, #0
   1877e:	61ab      	str	r3, [r5, #24]
   18780:	4b04      	ldr	r3, [pc, #16]	; (18794 <os_callout_reset+0x74>)
   18782:	685a      	ldr	r2, [r3, #4]
   18784:	61ea      	str	r2, [r5, #28]
   18786:	6015      	str	r5, [r2, #0]
   18788:	3518      	adds	r5, #24
   1878a:	605d      	str	r5, [r3, #4]
   1878c:	e7f1      	b.n	18772 <os_callout_reset+0x52>
        ret = OS_EINVAL;
   1878e:	2002      	movs	r0, #2
    return ret;
   18790:	e7f3      	b.n	1877a <os_callout_reset+0x5a>
   18792:	bf00      	nop
   18794:	2000de90 	.word	0x2000de90

00018798 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   18798:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   1879a:	f001 f839 	bl	19810 <os_time_get>
   1879e:	4605      	mov	r5, r0
   187a0:	e00f      	b.n	187c2 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   187a2:	69e2      	ldr	r2, [r4, #28]
   187a4:	4b12      	ldr	r3, [pc, #72]	; (187f0 <os_callout_tick+0x58>)
   187a6:	605a      	str	r2, [r3, #4]
   187a8:	69e3      	ldr	r3, [r4, #28]
   187aa:	69a2      	ldr	r2, [r4, #24]
   187ac:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   187ae:	2300      	movs	r3, #0
   187b0:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   187b2:	f001 f8ab 	bl	1990c <os_arch_restore_sr>

        if (c) {
   187b6:	b1d4      	cbz	r4, 187ee <os_callout_tick+0x56>
            if (c->c_evq) {
   187b8:	6920      	ldr	r0, [r4, #16]
   187ba:	b9a0      	cbnz	r0, 187e6 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   187bc:	6863      	ldr	r3, [r4, #4]
   187be:	4620      	mov	r0, r4
   187c0:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
   187c2:	f001 f89d 	bl	19900 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   187c6:	4b0a      	ldr	r3, [pc, #40]	; (187f0 <os_callout_tick+0x58>)
   187c8:	681c      	ldr	r4, [r3, #0]
        if (c) {
   187ca:	2c00      	cmp	r4, #0
   187cc:	d0f1      	beq.n	187b2 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   187ce:	6963      	ldr	r3, [r4, #20]
   187d0:	1aeb      	subs	r3, r5, r3
   187d2:	2b00      	cmp	r3, #0
   187d4:	db05      	blt.n	187e2 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   187d6:	69a3      	ldr	r3, [r4, #24]
   187d8:	2b00      	cmp	r3, #0
   187da:	d0e2      	beq.n	187a2 <os_callout_tick+0xa>
   187dc:	69e2      	ldr	r2, [r4, #28]
   187de:	61da      	str	r2, [r3, #28]
   187e0:	e7e2      	b.n	187a8 <os_callout_tick+0x10>
                c = NULL;
   187e2:	2400      	movs	r4, #0
   187e4:	e7e5      	b.n	187b2 <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
   187e6:	4621      	mov	r1, r4
   187e8:	f000 f915 	bl	18a16 <os_eventq_put>
   187ec:	e7e9      	b.n	187c2 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   187ee:	bd38      	pop	{r3, r4, r5, pc}
   187f0:	2000de90 	.word	0x2000de90

000187f4 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   187f4:	b510      	push	{r4, lr}
   187f6:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   187f8:	f001 f88b 	bl	19912 <os_arch_in_critical>
   187fc:	b130      	cbz	r0, 1880c <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   187fe:	4b09      	ldr	r3, [pc, #36]	; (18824 <os_callout_wakeup_ticks+0x30>)
   18800:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   18802:	b15b      	cbz	r3, 1881c <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   18804:	6958      	ldr	r0, [r3, #20]
   18806:	1b00      	subs	r0, r0, r4
   18808:	d406      	bmi.n	18818 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   1880a:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1880c:	2300      	movs	r3, #0
   1880e:	461a      	mov	r2, r3
   18810:	4619      	mov	r1, r3
   18812:	4618      	mov	r0, r3
   18814:	f7ff fdde 	bl	183d4 <__assert_func>
            rt = 0;     /* callout time is in the past */
   18818:	2000      	movs	r0, #0
   1881a:	e7f6      	b.n	1880a <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   1881c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   18820:	e7f3      	b.n	1880a <os_callout_wakeup_ticks+0x16>
   18822:	bf00      	nop
   18824:	2000de90 	.word	0x2000de90

00018828 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   18828:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   1882a:	4601      	mov	r1, r0
   1882c:	2000      	movs	r0, #0
   1882e:	f002 f84d 	bl	1a8cc <hal_timer_config>
    return rc;
}
   18832:	bd08      	pop	{r3, pc}

00018834 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
   18834:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   18836:	2000      	movs	r0, #0
   18838:	f002 f8c4 	bl	1a9c4 <hal_timer_read>
    return cpu_time;
}
   1883c:	bd08      	pop	{r3, pc}
	...

00018840 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   18840:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   18842:	4b15      	ldr	r3, [pc, #84]	; (18898 <os_dev_add+0x58>)
   18844:	681d      	ldr	r5, [r3, #0]
   18846:	b115      	cbz	r5, 1884e <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   18848:	462b      	mov	r3, r5
    prev_dev = NULL;
   1884a:	2400      	movs	r4, #0
   1884c:	e008      	b.n	18860 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1884e:	4603      	mov	r3, r0
   18850:	f843 5f20 	str.w	r5, [r3, #32]!
   18854:	4a10      	ldr	r2, [pc, #64]	; (18898 <os_dev_add+0x58>)
   18856:	6053      	str	r3, [r2, #4]
   18858:	6010      	str	r0, [r2, #0]
        return (0);
   1885a:	e010      	b.n	1887e <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   1885c:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   1885e:	6a1b      	ldr	r3, [r3, #32]
   18860:	b143      	cbz	r3, 18874 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
   18862:	7e01      	ldrb	r1, [r0, #24]
   18864:	7e1a      	ldrb	r2, [r3, #24]
   18866:	4291      	cmp	r1, r2
   18868:	d304      	bcc.n	18874 <os_dev_add+0x34>
   1886a:	d1f7      	bne.n	1885c <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
   1886c:	7e41      	ldrb	r1, [r0, #25]
   1886e:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
   18870:	4291      	cmp	r1, r2
   18872:	d2f3      	bcs.n	1885c <os_dev_add+0x1c>
    }

    if (prev_dev) {
   18874:	b15c      	cbz	r4, 1888e <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   18876:	6a23      	ldr	r3, [r4, #32]
   18878:	6203      	str	r3, [r0, #32]
   1887a:	b11b      	cbz	r3, 18884 <os_dev_add+0x44>
   1887c:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   1887e:	2000      	movs	r0, #0
   18880:	bc30      	pop	{r4, r5}
   18882:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   18884:	f100 0320 	add.w	r3, r0, #32
   18888:	4a03      	ldr	r2, [pc, #12]	; (18898 <os_dev_add+0x58>)
   1888a:	6053      	str	r3, [r2, #4]
   1888c:	e7f6      	b.n	1887c <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1888e:	6205      	str	r5, [r0, #32]
   18890:	4b01      	ldr	r3, [pc, #4]	; (18898 <os_dev_add+0x58>)
   18892:	6018      	str	r0, [r3, #0]
   18894:	e7f3      	b.n	1887e <os_dev_add+0x3e>
   18896:	bf00      	nop
   18898:	20009070 	.word	0x20009070

0001889c <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   1889c:	b510      	push	{r4, lr}
   1889e:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   188a0:	6903      	ldr	r3, [r0, #16]
   188a2:	6941      	ldr	r1, [r0, #20]
   188a4:	4798      	blx	r3
    if (rc != 0) {
   188a6:	4603      	mov	r3, r0
   188a8:	b128      	cbz	r0, 188b6 <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   188aa:	7ee2      	ldrb	r2, [r4, #27]
   188ac:	f012 0f08 	tst.w	r2, #8
   188b0:	d105      	bne.n	188be <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   188b2:	2300      	movs	r3, #0
   188b4:	e003      	b.n	188be <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   188b6:	7ee2      	ldrb	r2, [r4, #27]
   188b8:	f042 0201 	orr.w	r2, r2, #1
   188bc:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
   188be:	4618      	mov	r0, r3
   188c0:	bd10      	pop	{r4, pc}

000188c2 <os_dev_init>:
    dev->od_name = name;
   188c2:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   188c4:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   188c6:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   188c8:	2300      	movs	r3, #0
   188ca:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
   188cc:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
   188ce:	9a00      	ldr	r2, [sp, #0]
   188d0:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
   188d2:	9a01      	ldr	r2, [sp, #4]
   188d4:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   188d6:	6003      	str	r3, [r0, #0]
   188d8:	6043      	str	r3, [r0, #4]
   188da:	6083      	str	r3, [r0, #8]
   188dc:	60c3      	str	r3, [r0, #12]
}
   188de:	4618      	mov	r0, r3
   188e0:	4770      	bx	lr
	...

000188e4 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   188e4:	b530      	push	{r4, r5, lr}
   188e6:	b083      	sub	sp, #12
   188e8:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   188ea:	9c07      	ldr	r4, [sp, #28]
   188ec:	9401      	str	r4, [sp, #4]
   188ee:	9c06      	ldr	r4, [sp, #24]
   188f0:	9400      	str	r4, [sp, #0]
   188f2:	f7ff ffe6 	bl	188c2 <os_dev_init>
    if (rc != 0) {
   188f6:	4603      	mov	r3, r0
   188f8:	b110      	cbz	r0, 18900 <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   188fa:	4618      	mov	r0, r3
   188fc:	b003      	add	sp, #12
   188fe:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   18900:	4628      	mov	r0, r5
   18902:	f7ff ff9d 	bl	18840 <os_dev_add>
    if (rc != 0) {
   18906:	4603      	mov	r3, r0
   18908:	2800      	cmp	r0, #0
   1890a:	d1f6      	bne.n	188fa <os_dev_create+0x16>
    if (g_os_started) {
   1890c:	4a04      	ldr	r2, [pc, #16]	; (18920 <os_dev_create+0x3c>)
   1890e:	6812      	ldr	r2, [r2, #0]
   18910:	2a00      	cmp	r2, #0
   18912:	d0f2      	beq.n	188fa <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
   18914:	4628      	mov	r0, r5
   18916:	f7ff ffc1 	bl	1889c <os_dev_initialize>
   1891a:	4603      	mov	r3, r0
    return (rc);
   1891c:	e7ed      	b.n	188fa <os_dev_create+0x16>
   1891e:	bf00      	nop
   18920:	2000de88 	.word	0x2000de88

00018924 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   18924:	b538      	push	{r3, r4, r5, lr}
   18926:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   18928:	4b08      	ldr	r3, [pc, #32]	; (1894c <os_dev_initialize_all+0x28>)
   1892a:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   1892c:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1892e:	e000      	b.n	18932 <os_dev_initialize_all+0xe>
   18930:	6a24      	ldr	r4, [r4, #32]
   18932:	b144      	cbz	r4, 18946 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   18934:	7e23      	ldrb	r3, [r4, #24]
   18936:	42ab      	cmp	r3, r5
   18938:	d1fa      	bne.n	18930 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   1893a:	4620      	mov	r0, r4
   1893c:	f7ff ffae 	bl	1889c <os_dev_initialize>
            if (rc) {
   18940:	4602      	mov	r2, r0
   18942:	2800      	cmp	r0, #0
   18944:	d0f4      	beq.n	18930 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   18946:	4610      	mov	r0, r2
   18948:	bd38      	pop	{r3, r4, r5, pc}
   1894a:	bf00      	nop
   1894c:	20009070 	.word	0x20009070

00018950 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   18950:	b538      	push	{r3, r4, r5, lr}
   18952:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   18954:	4b05      	ldr	r3, [pc, #20]	; (1896c <os_dev_lookup+0x1c>)
   18956:	681c      	ldr	r4, [r3, #0]
   18958:	b134      	cbz	r4, 18968 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   1895a:	4629      	mov	r1, r5
   1895c:	69e0      	ldr	r0, [r4, #28]
   1895e:	f001 f958 	bl	19c12 <strcmp>
   18962:	b108      	cbz	r0, 18968 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   18964:	6a24      	ldr	r4, [r4, #32]
   18966:	e7f7      	b.n	18958 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   18968:	4620      	mov	r0, r4
   1896a:	bd38      	pop	{r3, r4, r5, pc}
   1896c:	20009070 	.word	0x20009070

00018970 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   18970:	b570      	push	{r4, r5, r6, lr}
   18972:	460d      	mov	r5, r1
   18974:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   18976:	f7ff ffeb 	bl	18950 <os_dev_lookup>
    if (dev == NULL) {
   1897a:	4604      	mov	r4, r0
   1897c:	b1a0      	cbz	r0, 189a8 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   1897e:	7ec3      	ldrb	r3, [r0, #27]
   18980:	f013 0f01 	tst.w	r3, #1
   18984:	d012      	beq.n	189ac <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   18986:	6803      	ldr	r3, [r0, #0]
   18988:	b11b      	cbz	r3, 18992 <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   1898a:	4632      	mov	r2, r6
   1898c:	4629      	mov	r1, r5
   1898e:	4798      	blx	r3
        if (rc != 0) {
   18990:	b970      	cbnz	r0, 189b0 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   18992:	f000 ffb5 	bl	19900 <os_arch_save_sr>
    ++dev->od_open_ref;
   18996:	7ea3      	ldrb	r3, [r4, #26]
   18998:	3301      	adds	r3, #1
   1899a:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   1899c:	7ee3      	ldrb	r3, [r4, #27]
   1899e:	f043 0302 	orr.w	r3, r3, #2
   189a2:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   189a4:	f000 ffb2 	bl	1990c <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   189a8:	4620      	mov	r0, r4
   189aa:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   189ac:	2400      	movs	r4, #0
   189ae:	e7fb      	b.n	189a8 <os_dev_open+0x38>
    return (NULL);
   189b0:	2400      	movs	r4, #0
   189b2:	e7f9      	b.n	189a8 <os_dev_open+0x38>

000189b4 <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
   189b4:	b1b0      	cbz	r0, 189e4 <os_dev_close+0x30>
{
   189b6:	b510      	push	{r4, lr}
   189b8:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
   189ba:	68c3      	ldr	r3, [r0, #12]
   189bc:	b113      	cbz	r3, 189c4 <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
   189be:	4798      	blx	r3
        if (rc != 0) {
   189c0:	4603      	mov	r3, r0
   189c2:	b968      	cbnz	r0, 189e0 <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   189c4:	f000 ff9c 	bl	19900 <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
   189c8:	7ea3      	ldrb	r3, [r4, #26]
   189ca:	3b01      	subs	r3, #1
   189cc:	b2db      	uxtb	r3, r3
   189ce:	76a3      	strb	r3, [r4, #26]
   189d0:	b91b      	cbnz	r3, 189da <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
   189d2:	7ee3      	ldrb	r3, [r4, #27]
   189d4:	f023 0306 	bic.w	r3, r3, #6
   189d8:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
   189da:	f000 ff97 	bl	1990c <os_arch_restore_sr>

    return (0);
   189de:	2300      	movs	r3, #0
err:
    return (rc);
}
   189e0:	4618      	mov	r0, r3
   189e2:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
   189e4:	2302      	movs	r3, #2
}
   189e6:	4618      	mov	r0, r3
   189e8:	4770      	bx	lr
	...

000189ec <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   189ec:	4b02      	ldr	r3, [pc, #8]	; (189f8 <os_dev_reset+0xc>)
   189ee:	2200      	movs	r2, #0
   189f0:	601a      	str	r2, [r3, #0]
   189f2:	605b      	str	r3, [r3, #4]
}
   189f4:	4770      	bx	lr
   189f6:	bf00      	nop
   189f8:	20009070 	.word	0x20009070

000189fc <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   189fc:	2200      	movs	r2, #0
   189fe:	6002      	str	r2, [r0, #0]
   18a00:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   18a02:	4603      	mov	r3, r0
   18a04:	f843 2f08 	str.w	r2, [r3, #8]!
   18a08:	60c3      	str	r3, [r0, #12]
}
   18a0a:	4770      	bx	lr

00018a0c <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   18a0c:	68c0      	ldr	r0, [r0, #12]
}
   18a0e:	3000      	adds	r0, #0
   18a10:	bf18      	it	ne
   18a12:	2001      	movne	r0, #1
   18a14:	4770      	bx	lr

00018a16 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   18a16:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   18a18:	b1f0      	cbz	r0, 18a58 <os_eventq_put+0x42>
   18a1a:	460c      	mov	r4, r1
   18a1c:	4605      	mov	r5, r0
   18a1e:	f7ff fff5 	bl	18a0c <os_eventq_inited>
   18a22:	b1c8      	cbz	r0, 18a58 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   18a24:	f000 ff6c 	bl	19900 <os_arch_save_sr>
   18a28:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   18a2a:	7823      	ldrb	r3, [r4, #0]
   18a2c:	b9d3      	cbnz	r3, 18a64 <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   18a2e:	2301      	movs	r3, #1
   18a30:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   18a32:	2300      	movs	r3, #0
   18a34:	60e3      	str	r3, [r4, #12]
   18a36:	68eb      	ldr	r3, [r5, #12]
   18a38:	601c      	str	r4, [r3, #0]
   18a3a:	340c      	adds	r4, #12
   18a3c:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
   18a3e:	6868      	ldr	r0, [r5, #4]
   18a40:	b1b8      	cbz	r0, 18a72 <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   18a42:	7b03      	ldrb	r3, [r0, #12]
   18a44:	2b02      	cmp	r3, #2
   18a46:	d010      	beq.n	18a6a <os_eventq_put+0x54>
    resched = 0;
   18a48:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   18a4a:	2300      	movs	r3, #0
   18a4c:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   18a4e:	4630      	mov	r0, r6
   18a50:	f000 ff5c 	bl	1990c <os_arch_restore_sr>

    if (resched) {
   18a54:	b97c      	cbnz	r4, 18a76 <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   18a56:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   18a58:	2300      	movs	r3, #0
   18a5a:	461a      	mov	r2, r3
   18a5c:	4619      	mov	r1, r3
   18a5e:	4618      	mov	r0, r3
   18a60:	f7ff fcb8 	bl	183d4 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   18a64:	f000 ff52 	bl	1990c <os_arch_restore_sr>
   18a68:	e7f5      	b.n	18a56 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   18a6a:	f000 fcc7 	bl	193fc <os_sched_wakeup>
            resched = 1;
   18a6e:	2401      	movs	r4, #1
   18a70:	e7eb      	b.n	18a4a <os_eventq_put+0x34>
    resched = 0;
   18a72:	2400      	movs	r4, #0
   18a74:	e7eb      	b.n	18a4e <os_eventq_put+0x38>
        os_sched(NULL);
   18a76:	2000      	movs	r0, #0
   18a78:	f000 fd40 	bl	194fc <os_sched>
   18a7c:	e7eb      	b.n	18a56 <os_eventq_put+0x40>

00018a7e <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   18a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a80:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   18a82:	f000 fc67 	bl	19354 <os_sched_get_current_task>
   18a86:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   18a88:	682b      	ldr	r3, [r5, #0]
   18a8a:	4283      	cmp	r3, r0
   18a8c:	d001      	beq.n	18a92 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   18a8e:	b9db      	cbnz	r3, 18ac8 <os_eventq_get+0x4a>
            evq->evq_owner = t;
   18a90:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   18a92:	f000 ff35 	bl	19900 <os_arch_save_sr>
   18a96:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   18a98:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
   18a9a:	b9de      	cbnz	r6, 18ad4 <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   18a9c:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   18a9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18aa2:	4620      	mov	r0, r4
   18aa4:	f000 fc62 	bl	1936c <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   18aa8:	7b63      	ldrb	r3, [r4, #13]
   18aaa:	f043 0308 	orr.w	r3, r3, #8
   18aae:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   18ab0:	4638      	mov	r0, r7
   18ab2:	f000 ff2b 	bl	1990c <os_arch_restore_sr>

        os_sched(NULL);
   18ab6:	2000      	movs	r0, #0
   18ab8:	f000 fd20 	bl	194fc <os_sched>

        OS_ENTER_CRITICAL(sr);
   18abc:	f000 ff20 	bl	19900 <os_arch_save_sr>
   18ac0:	4607      	mov	r7, r0
        evq->evq_task = NULL;
   18ac2:	2300      	movs	r3, #0
   18ac4:	606b      	str	r3, [r5, #4]
        goto pull_one;
   18ac6:	e7e7      	b.n	18a98 <os_eventq_get+0x1a>
            assert(0);
   18ac8:	2300      	movs	r3, #0
   18aca:	461a      	mov	r2, r3
   18acc:	4619      	mov	r1, r3
   18ace:	4618      	mov	r0, r3
   18ad0:	f7ff fc80 	bl	183d4 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   18ad4:	68f3      	ldr	r3, [r6, #12]
   18ad6:	60ab      	str	r3, [r5, #8]
   18ad8:	b153      	cbz	r3, 18af0 <os_eventq_get+0x72>
        ev->ev_queued = 0;
   18ada:	2300      	movs	r3, #0
   18adc:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   18ade:	7b63      	ldrb	r3, [r4, #13]
   18ae0:	f023 0308 	bic.w	r3, r3, #8
   18ae4:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   18ae6:	4638      	mov	r0, r7
   18ae8:	f000 ff10 	bl	1990c <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   18aec:	4630      	mov	r0, r6
   18aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   18af0:	f105 0308 	add.w	r3, r5, #8
   18af4:	60eb      	str	r3, [r5, #12]
   18af6:	e7f0      	b.n	18ada <os_eventq_get+0x5c>

00018af8 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   18af8:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   18afa:	f7ff ffc0 	bl	18a7e <os_eventq_get>
    assert(ev->ev_cb != NULL);
   18afe:	6843      	ldr	r3, [r0, #4]
   18b00:	b10b      	cbz	r3, 18b06 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   18b02:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   18b04:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   18b06:	461a      	mov	r2, r3
   18b08:	4619      	mov	r1, r3
   18b0a:	4618      	mov	r0, r3
   18b0c:	f7ff fc62 	bl	183d4 <__assert_func>

00018b10 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   18b10:	b538      	push	{r3, r4, r5, lr}
   18b12:	4605      	mov	r5, r0
   18b14:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   18b16:	f000 fef3 	bl	19900 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   18b1a:	7823      	ldrb	r3, [r4, #0]
   18b1c:	b183      	cbz	r3, 18b40 <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   18b1e:	68aa      	ldr	r2, [r5, #8]
   18b20:	42a2      	cmp	r2, r4
   18b22:	d107      	bne.n	18b34 <os_eventq_remove+0x24>
   18b24:	68d3      	ldr	r3, [r2, #12]
   18b26:	60ab      	str	r3, [r5, #8]
   18b28:	b953      	cbnz	r3, 18b40 <os_eventq_remove+0x30>
   18b2a:	f105 0308 	add.w	r3, r5, #8
   18b2e:	60eb      	str	r3, [r5, #12]
   18b30:	e006      	b.n	18b40 <os_eventq_remove+0x30>
   18b32:	461a      	mov	r2, r3
   18b34:	68d3      	ldr	r3, [r2, #12]
   18b36:	42a3      	cmp	r3, r4
   18b38:	d1fb      	bne.n	18b32 <os_eventq_remove+0x22>
   18b3a:	68db      	ldr	r3, [r3, #12]
   18b3c:	60d3      	str	r3, [r2, #12]
   18b3e:	b123      	cbz	r3, 18b4a <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
   18b40:	2300      	movs	r3, #0
   18b42:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   18b44:	f000 fee2 	bl	1990c <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   18b48:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   18b4a:	320c      	adds	r2, #12
   18b4c:	60ea      	str	r2, [r5, #12]
   18b4e:	e7f7      	b.n	18b40 <os_eventq_remove+0x30>

00018b50 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   18b50:	4800      	ldr	r0, [pc, #0]	; (18b54 <os_eventq_dflt_get+0x4>)
   18b52:	4770      	bx	lr
   18b54:	20009078 	.word	0x20009078

00018b58 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   18b58:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   18b5a:	2000      	movs	r0, #0
   18b5c:	6018      	str	r0, [r3, #0]
   18b5e:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   18b60:	6098      	str	r0, [r3, #8]
   18b62:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   18b64:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   18b66:	611a      	str	r2, [r3, #16]

    return (0);
}
   18b68:	4770      	bx	lr

00018b6a <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   18b6a:	b538      	push	{r3, r4, r5, lr}
   18b6c:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   18b6e:	f000 fec7 	bl	19900 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   18b72:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   18b74:	b114      	cbz	r4, 18b7c <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   18b76:	6863      	ldr	r3, [r4, #4]
   18b78:	602b      	str	r3, [r5, #0]
   18b7a:	b12b      	cbz	r3, 18b88 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   18b7c:	f000 fec6 	bl	1990c <os_arch_restore_sr>

    if (mp) {
   18b80:	b124      	cbz	r4, 18b8c <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   18b82:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   18b86:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   18b88:	606d      	str	r5, [r5, #4]
   18b8a:	e7f7      	b.n	18b7c <os_mqueue_get+0x12>
        m = NULL;
   18b8c:	2000      	movs	r0, #0
    return (m);
   18b8e:	e7fa      	b.n	18b86 <os_mqueue_get+0x1c>

00018b90 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   18b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   18b92:	7953      	ldrb	r3, [r2, #5]
   18b94:	2b07      	cmp	r3, #7
   18b96:	d916      	bls.n	18bc6 <os_mqueue_put+0x36>
   18b98:	4614      	mov	r4, r2
   18b9a:	460e      	mov	r6, r1
   18b9c:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   18b9e:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   18ba2:	f000 fead 	bl	19900 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   18ba6:	2300      	movs	r3, #0
   18ba8:	f844 3f14 	str.w	r3, [r4, #20]!
   18bac:	686b      	ldr	r3, [r5, #4]
   18bae:	601f      	str	r7, [r3, #0]
   18bb0:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   18bb2:	f000 feab 	bl	1990c <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   18bb6:	b146      	cbz	r6, 18bca <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   18bb8:	f105 0108 	add.w	r1, r5, #8
   18bbc:	4630      	mov	r0, r6
   18bbe:	f7ff ff2a 	bl	18a16 <os_eventq_put>
    }

    return (0);
   18bc2:	2000      	movs	r0, #0
   18bc4:	e000      	b.n	18bc8 <os_mqueue_put+0x38>
err:
    return (rc);
   18bc6:	2002      	movs	r0, #2
}
   18bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   18bca:	2000      	movs	r0, #0
   18bcc:	e7fc      	b.n	18bc8 <os_mqueue_put+0x38>

00018bce <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   18bce:	3a10      	subs	r2, #16
   18bd0:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   18bd2:	6041      	str	r1, [r0, #4]

    return (0);
}
   18bd4:	2000      	movs	r0, #0
   18bd6:	4770      	bx	lr

00018bd8 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   18bd8:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   18bda:	8803      	ldrh	r3, [r0, #0]
   18bdc:	428b      	cmp	r3, r1
   18bde:	d312      	bcc.n	18c06 <os_mbuf_get+0x2e>
   18be0:	460d      	mov	r5, r1
   18be2:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   18be4:	6840      	ldr	r0, [r0, #4]
   18be6:	f000 f947 	bl	18e78 <os_memblock_get>
    if (!om) {
   18bea:	4603      	mov	r3, r0
   18bec:	b148      	cbz	r0, 18c02 <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   18bee:	2200      	movs	r2, #0
   18bf0:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
   18bf2:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
   18bf4:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
   18bf6:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   18bf8:	f100 0110 	add.w	r1, r0, #16
   18bfc:	4429      	add	r1, r5
   18bfe:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
   18c00:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   18c02:	4618      	mov	r0, r3
   18c04:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   18c06:	2300      	movs	r3, #0
    return om;
   18c08:	e7fb      	b.n	18c02 <os_mbuf_get+0x2a>

00018c0a <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   18c0a:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   18c0c:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   18c10:	8803      	ldrh	r3, [r0, #0]
   18c12:	42ab      	cmp	r3, r5
   18c14:	d310      	bcc.n	18c38 <os_mbuf_get_pkthdr+0x2e>
   18c16:	2dff      	cmp	r5, #255	; 0xff
   18c18:	d810      	bhi.n	18c3c <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   18c1a:	2100      	movs	r1, #0
   18c1c:	f7ff ffdc 	bl	18bd8 <os_mbuf_get>
    if (om) {
   18c20:	4603      	mov	r3, r0
   18c22:	b138      	cbz	r0, 18c34 <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
   18c24:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
   18c26:	6802      	ldr	r2, [r0, #0]
   18c28:	4415      	add	r5, r2
   18c2a:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   18c2c:	2200      	movs	r2, #0
   18c2e:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
   18c30:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   18c32:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   18c34:	4618      	mov	r0, r3
   18c36:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   18c38:	2300      	movs	r3, #0
   18c3a:	e7fb      	b.n	18c34 <os_mbuf_get_pkthdr+0x2a>
   18c3c:	2300      	movs	r3, #0
    return om;
   18c3e:	e7f9      	b.n	18c34 <os_mbuf_get_pkthdr+0x2a>

00018c40 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   18c40:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   18c42:	6883      	ldr	r3, [r0, #8]
   18c44:	b123      	cbz	r3, 18c50 <os_mbuf_free+0x10>
   18c46:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   18c48:	6858      	ldr	r0, [r3, #4]
   18c4a:	f000 f93d 	bl	18ec8 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   18c4e:	bd08      	pop	{r3, pc}
    rc = 0;
   18c50:	2000      	movs	r0, #0
    return (rc);
   18c52:	e7fc      	b.n	18c4e <os_mbuf_free+0xe>

00018c54 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
   18c54:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   18c56:	b160      	cbz	r0, 18c72 <os_mbuf_free_chain+0x1e>
{
   18c58:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   18c5a:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
   18c5c:	4618      	mov	r0, r3
   18c5e:	f7ff ffef 	bl	18c40 <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
   18c62:	4623      	mov	r3, r4
        if (rc != 0) {
   18c64:	4602      	mov	r2, r0
   18c66:	b910      	cbnz	r0, 18c6e <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
   18c68:	2c00      	cmp	r4, #0
   18c6a:	d1f6      	bne.n	18c5a <os_mbuf_free_chain+0x6>
    }

    rc = 0;
   18c6c:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   18c6e:	4610      	mov	r0, r2
   18c70:	bd10      	pop	{r4, pc}
    rc = 0;
   18c72:	2200      	movs	r2, #0
}
   18c74:	4610      	mov	r0, r2
   18c76:	4770      	bx	lr

00018c78 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
   18c78:	2300      	movs	r3, #0
    while (om != NULL) {
   18c7a:	e003      	b.n	18c84 <os_mbuf_len+0xc>
        len += om->om_len;
   18c7c:	88c2      	ldrh	r2, [r0, #6]
   18c7e:	4413      	add	r3, r2
   18c80:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
   18c82:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
   18c84:	2800      	cmp	r0, #0
   18c86:	d1f9      	bne.n	18c7c <os_mbuf_len+0x4>
    }

    return len;
}
   18c88:	4618      	mov	r0, r3
   18c8a:	4770      	bx	lr

00018c8c <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   18c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   18c90:	2800      	cmp	r0, #0
   18c92:	d04d      	beq.n	18d30 <os_mbuf_append+0xa4>
   18c94:	460f      	mov	r7, r1
   18c96:	4691      	mov	r9, r2
   18c98:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   18c9a:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   18c9e:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   18ca0:	e000      	b.n	18ca4 <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
   18ca2:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   18ca4:	68eb      	ldr	r3, [r5, #12]
   18ca6:	2b00      	cmp	r3, #0
   18ca8:	d1fb      	bne.n	18ca2 <os_mbuf_append+0x16>
    }

    remainder = len;
   18caa:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   18cac:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   18cae:	f105 0410 	add.w	r4, r5, #16
   18cb2:	881b      	ldrh	r3, [r3, #0]
   18cb4:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   18cb6:	6828      	ldr	r0, [r5, #0]
   18cb8:	88eb      	ldrh	r3, [r5, #6]
   18cba:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   18cbc:	1a24      	subs	r4, r4, r0
   18cbe:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   18cc0:	b164      	cbz	r4, 18cdc <os_mbuf_append+0x50>
        if (space > remainder) {
   18cc2:	454c      	cmp	r4, r9
   18cc4:	dd00      	ble.n	18cc8 <os_mbuf_append+0x3c>
            space = remainder;
   18cc6:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   18cc8:	4622      	mov	r2, r4
   18cca:	4639      	mov	r1, r7
   18ccc:	f000 ff78 	bl	19bc0 <memcpy>

        last->om_len += space;
   18cd0:	88eb      	ldrh	r3, [r5, #6]
   18cd2:	4423      	add	r3, r4
   18cd4:	80eb      	strh	r3, [r5, #6]
        data += space;
   18cd6:	4427      	add	r7, r4
        remainder -= space;
   18cd8:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   18cdc:	2e00      	cmp	r6, #0
   18cde:	dd16      	ble.n	18d0e <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
   18ce0:	2100      	movs	r1, #0
   18ce2:	4640      	mov	r0, r8
   18ce4:	f7ff ff78 	bl	18bd8 <os_mbuf_get>
        if (!new) {
   18ce8:	4604      	mov	r4, r0
   18cea:	b180      	cbz	r0, 18d0e <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   18cec:	f8b8 2000 	ldrh.w	r2, [r8]
   18cf0:	42b2      	cmp	r2, r6
   18cf2:	bfa8      	it	ge
   18cf4:	4632      	movge	r2, r6
   18cf6:	b292      	uxth	r2, r2
   18cf8:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   18cfa:	4639      	mov	r1, r7
   18cfc:	6800      	ldr	r0, [r0, #0]
   18cfe:	f000 ff5f 	bl	19bc0 <memcpy>
        data += new->om_len;
   18d02:	88e3      	ldrh	r3, [r4, #6]
   18d04:	441f      	add	r7, r3
        remainder -= new->om_len;
   18d06:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
   18d08:	60ec      	str	r4, [r5, #12]
        last = new;
   18d0a:	4625      	mov	r5, r4
   18d0c:	e7e6      	b.n	18cdc <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   18d0e:	f89a 3005 	ldrb.w	r3, [sl, #5]
   18d12:	2b07      	cmp	r3, #7
   18d14:	d907      	bls.n	18d26 <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   18d16:	eba9 0906 	sub.w	r9, r9, r6
   18d1a:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   18d1e:	fa13 f989 	uxtah	r9, r3, r9
   18d22:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   18d26:	b106      	cbz	r6, 18d2a <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
   18d28:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
   18d2a:	4630      	mov	r0, r6
   18d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   18d30:	2602      	movs	r6, #2
   18d32:	e7fa      	b.n	18d2a <os_mbuf_append+0x9e>

00018d34 <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
   18d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18d38:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
   18d3a:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
   18d3e:	2700      	movs	r7, #0
    head = NULL;
   18d40:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   18d42:	e017      	b.n	18d74 <os_mbuf_dup+0x40>
    startoff = 0;
   18d44:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   18d46:	4623      	mov	r3, r4
   18d48:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   18d4c:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   18d4e:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
   18d50:	b299      	uxth	r1, r3
   18d52:	4640      	mov	r0, r8
   18d54:	f7ff ff40 	bl	18bd8 <os_mbuf_get>
   18d58:	4605      	mov	r5, r0
   18d5a:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
   18d5c:	b188      	cbz	r0, 18d82 <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
   18d5e:	7923      	ldrb	r3, [r4, #4]
   18d60:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
   18d62:	88e3      	ldrh	r3, [r4, #6]
   18d64:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
   18d66:	88e2      	ldrh	r2, [r4, #6]
   18d68:	6821      	ldr	r1, [r4, #0]
   18d6a:	6828      	ldr	r0, [r5, #0]
   18d6c:	f000 ff28 	bl	19bc0 <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   18d70:	68e4      	ldr	r4, [r4, #12]
   18d72:	462f      	mov	r7, r5
   18d74:	b14c      	cbz	r4, 18d8a <os_mbuf_dup+0x56>
        if (head) {
   18d76:	b15e      	cbz	r6, 18d90 <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   18d78:	7963      	ldrb	r3, [r4, #5]
   18d7a:	2b07      	cmp	r3, #7
   18d7c:	d9e2      	bls.n	18d44 <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
   18d7e:	b299      	uxth	r1, r3
   18d80:	e7e1      	b.n	18d46 <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
   18d82:	4630      	mov	r0, r6
   18d84:	f7ff ff66 	bl	18c54 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
   18d88:	462e      	mov	r6, r5
}
   18d8a:	4630      	mov	r0, r6
   18d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   18d90:	7963      	ldrb	r3, [r4, #5]
   18d92:	2b07      	cmp	r3, #7
   18d94:	d911      	bls.n	18dba <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
   18d96:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   18d98:	4623      	mov	r3, r4
   18d9a:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   18d9e:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   18da0:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
   18da2:	b299      	uxth	r1, r3
   18da4:	4640      	mov	r0, r8
   18da6:	f7ff ff17 	bl	18bd8 <os_mbuf_get>
            if (!head) {
   18daa:	4606      	mov	r6, r0
   18dac:	2800      	cmp	r0, #0
   18dae:	d0ec      	beq.n	18d8a <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
   18db0:	7963      	ldrb	r3, [r4, #5]
   18db2:	2b07      	cmp	r3, #7
   18db4:	d803      	bhi.n	18dbe <os_mbuf_dup+0x8a>
            copy = head;
   18db6:	4605      	mov	r5, r0
   18db8:	e7d1      	b.n	18d5e <os_mbuf_dup+0x2a>
    startoff = 0;
   18dba:	2100      	movs	r1, #0
   18dbc:	e7ec      	b.n	18d98 <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
   18dbe:	88c3      	ldrh	r3, [r0, #6]
   18dc0:	b973      	cbnz	r3, 18de0 <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   18dc2:	f100 0510 	add.w	r5, r0, #16
   18dc6:	7962      	ldrb	r2, [r4, #5]
   18dc8:	f104 0110 	add.w	r1, r4, #16
   18dcc:	4628      	mov	r0, r5
   18dce:	f000 fef7 	bl	19bc0 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   18dd2:	7963      	ldrb	r3, [r4, #5]
   18dd4:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   18dd6:	7963      	ldrb	r3, [r4, #5]
   18dd8:	441d      	add	r5, r3
   18dda:	6035      	str	r5, [r6, #0]
            copy = head;
   18ddc:	4635      	mov	r5, r6
   18dde:	e7be      	b.n	18d5e <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
   18de0:	2300      	movs	r3, #0
   18de2:	461a      	mov	r2, r3
   18de4:	4619      	mov	r1, r3
   18de6:	4618      	mov	r0, r3
   18de8:	f7ff faf4 	bl	183d4 <__assert_func>

00018dec <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   18dec:	2800      	cmp	r0, #0
   18dee:	d031      	beq.n	18e54 <os_mempool_init_internal+0x68>
{
   18df0:	b430      	push	{r4, r5}
   18df2:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   18df4:	2a00      	cmp	r2, #0
   18df6:	d02f      	beq.n	18e58 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   18df8:	b1bb      	cbz	r3, 18e2a <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   18dfa:	b113      	cbz	r3, 18e02 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   18dfc:	f013 0f03 	tst.w	r3, #3
   18e00:	d12c      	bne.n	18e5c <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   18e02:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   18e04:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   18e06:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   18e08:	f89d 000c 	ldrb.w	r0, [sp, #12]
   18e0c:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   18e0e:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   18e10:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   18e12:	9802      	ldr	r0, [sp, #8]
   18e14:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   18e16:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   18e18:	b199      	cbz	r1, 18e42 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   18e1a:	f012 0f03 	tst.w	r2, #3
   18e1e:	d002      	beq.n	18e26 <os_mempool_init_internal+0x3a>
   18e20:	f022 0203 	bic.w	r2, r2, #3
   18e24:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   18e26:	2001      	movs	r0, #1
   18e28:	e007      	b.n	18e3a <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   18e2a:	2900      	cmp	r1, #0
   18e2c:	d0e5      	beq.n	18dfa <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   18e2e:	2003      	movs	r0, #3
   18e30:	e00e      	b.n	18e50 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   18e32:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   18e34:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   18e36:	3001      	adds	r0, #1
            block_addr += true_block_size;
   18e38:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   18e3a:	4281      	cmp	r1, r0
   18e3c:	dcf9      	bgt.n	18e32 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   18e3e:	2200      	movs	r2, #0
   18e40:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   18e42:	2000      	movs	r0, #0
   18e44:	6120      	str	r0, [r4, #16]
   18e46:	4b06      	ldr	r3, [pc, #24]	; (18e60 <os_mempool_init_internal+0x74>)
   18e48:	685a      	ldr	r2, [r3, #4]
   18e4a:	6014      	str	r4, [r2, #0]
   18e4c:	3410      	adds	r4, #16
   18e4e:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   18e50:	bc30      	pop	{r4, r5}
   18e52:	4770      	bx	lr
        return OS_INVALID_PARM;
   18e54:	2003      	movs	r0, #3
}
   18e56:	4770      	bx	lr
        return OS_INVALID_PARM;
   18e58:	2003      	movs	r0, #3
   18e5a:	e7f9      	b.n	18e50 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   18e5c:	2004      	movs	r0, #4
   18e5e:	e7f7      	b.n	18e50 <os_mempool_init_internal+0x64>
   18e60:	2000de98 	.word	0x2000de98

00018e64 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   18e64:	b510      	push	{r4, lr}
   18e66:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   18e68:	2400      	movs	r4, #0
   18e6a:	9401      	str	r4, [sp, #4]
   18e6c:	9c04      	ldr	r4, [sp, #16]
   18e6e:	9400      	str	r4, [sp, #0]
   18e70:	f7ff ffbc 	bl	18dec <os_mempool_init_internal>
}
   18e74:	b002      	add	sp, #8
   18e76:	bd10      	pop	{r4, pc}

00018e78 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   18e78:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   18e7a:	b1a0      	cbz	r0, 18ea6 <os_memblock_get+0x2e>
   18e7c:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   18e7e:	f000 fd3f 	bl	19900 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   18e82:	88e3      	ldrh	r3, [r4, #6]
   18e84:	b153      	cbz	r3, 18e9c <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   18e86:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   18e88:	682a      	ldr	r2, [r5, #0]
   18e8a:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   18e8c:	3b01      	subs	r3, #1
   18e8e:	b29b      	uxth	r3, r3
   18e90:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   18e92:	8922      	ldrh	r2, [r4, #8]
   18e94:	4293      	cmp	r3, r2
   18e96:	d202      	bcs.n	18e9e <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   18e98:	8123      	strh	r3, [r4, #8]
   18e9a:	e000      	b.n	18e9e <os_memblock_get+0x26>
    block = NULL;
   18e9c:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   18e9e:	f000 fd35 	bl	1990c <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   18ea2:	4628      	mov	r0, r5
   18ea4:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   18ea6:	2500      	movs	r5, #0
    return (void *)block;
   18ea8:	e7fb      	b.n	18ea2 <os_memblock_get+0x2a>

00018eaa <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   18eaa:	b538      	push	{r3, r4, r5, lr}
   18eac:	4604      	mov	r4, r0
   18eae:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   18eb0:	f000 fd26 	bl	19900 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   18eb4:	6963      	ldr	r3, [r4, #20]
   18eb6:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   18eb8:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   18eba:	88e3      	ldrh	r3, [r4, #6]
   18ebc:	3301      	adds	r3, #1
   18ebe:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   18ec0:	f000 fd24 	bl	1990c <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   18ec4:	2000      	movs	r0, #0
   18ec6:	bd38      	pop	{r3, r4, r5, pc}

00018ec8 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   18ec8:	b168      	cbz	r0, 18ee6 <os_memblock_put+0x1e>
{
   18eca:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
   18ecc:	b169      	cbz	r1, 18eea <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   18ece:	7a83      	ldrb	r3, [r0, #10]
   18ed0:	f013 0f01 	tst.w	r3, #1
   18ed4:	d004      	beq.n	18ee0 <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   18ed6:	69c3      	ldr	r3, [r0, #28]
   18ed8:	b113      	cbz	r3, 18ee0 <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   18eda:	6a02      	ldr	r2, [r0, #32]
   18edc:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   18ede:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
   18ee0:	f7ff ffe3 	bl	18eaa <os_memblock_put_from_cb>
   18ee4:	e7fb      	b.n	18ede <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
   18ee6:	2003      	movs	r0, #3
}
   18ee8:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   18eea:	2003      	movs	r0, #3
   18eec:	e7f7      	b.n	18ede <os_memblock_put+0x16>
	...

00018ef0 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   18ef0:	4b02      	ldr	r3, [pc, #8]	; (18efc <os_mempool_module_init+0xc>)
   18ef2:	2200      	movs	r2, #0
   18ef4:	601a      	str	r2, [r3, #0]
   18ef6:	605b      	str	r3, [r3, #4]
}
   18ef8:	4770      	bx	lr
   18efa:	bf00      	nop
   18efc:	2000de98 	.word	0x2000de98

00018f00 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   18f00:	4b02      	ldr	r3, [pc, #8]	; (18f0c <os_msys_find_biggest_pool+0xc>)
   18f02:	6818      	ldr	r0, [r3, #0]
   18f04:	b108      	cbz	r0, 18f0a <os_msys_find_biggest_pool+0xa>
   18f06:	6858      	ldr	r0, [r3, #4]
   18f08:	3808      	subs	r0, #8
}
   18f0a:	4770      	bx	lr
   18f0c:	2000010c 	.word	0x2000010c

00018f10 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   18f10:	4b09      	ldr	r3, [pc, #36]	; (18f38 <os_msys_find_pool+0x28>)
   18f12:	6819      	ldr	r1, [r3, #0]
   18f14:	460b      	mov	r3, r1
   18f16:	b123      	cbz	r3, 18f22 <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
   18f18:	881a      	ldrh	r2, [r3, #0]
   18f1a:	4282      	cmp	r2, r0
   18f1c:	d201      	bcs.n	18f22 <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   18f1e:	689b      	ldr	r3, [r3, #8]
   18f20:	e7f9      	b.n	18f16 <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
   18f22:	b10b      	cbz	r3, 18f28 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   18f24:	4618      	mov	r0, r3
   18f26:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   18f28:	b119      	cbz	r1, 18f32 <os_msys_find_pool+0x22>
   18f2a:	4b03      	ldr	r3, [pc, #12]	; (18f38 <os_msys_find_pool+0x28>)
   18f2c:	685b      	ldr	r3, [r3, #4]
   18f2e:	3b08      	subs	r3, #8
   18f30:	e7f8      	b.n	18f24 <os_msys_find_pool+0x14>
   18f32:	460b      	mov	r3, r1
    return (pool);
   18f34:	e7f6      	b.n	18f24 <os_msys_find_pool+0x14>
   18f36:	bf00      	nop
   18f38:	2000010c 	.word	0x2000010c

00018f3c <os_msys_register>:
{
   18f3c:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   18f3e:	4b11      	ldr	r3, [pc, #68]	; (18f84 <os_msys_register+0x48>)
   18f40:	681d      	ldr	r5, [r3, #0]
   18f42:	462b      	mov	r3, r5
    prev = NULL;
   18f44:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   18f46:	b133      	cbz	r3, 18f56 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   18f48:	8801      	ldrh	r1, [r0, #0]
   18f4a:	881a      	ldrh	r2, [r3, #0]
   18f4c:	4291      	cmp	r1, r2
   18f4e:	d302      	bcc.n	18f56 <os_msys_register+0x1a>
        prev = pool;
   18f50:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   18f52:	689b      	ldr	r3, [r3, #8]
   18f54:	e7f7      	b.n	18f46 <os_msys_register+0xa>
    if (prev) {
   18f56:	b15c      	cbz	r4, 18f70 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   18f58:	68a3      	ldr	r3, [r4, #8]
   18f5a:	6083      	str	r3, [r0, #8]
   18f5c:	b11b      	cbz	r3, 18f66 <os_msys_register+0x2a>
   18f5e:	60a0      	str	r0, [r4, #8]
}
   18f60:	2000      	movs	r0, #0
   18f62:	bc30      	pop	{r4, r5}
   18f64:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   18f66:	f100 0308 	add.w	r3, r0, #8
   18f6a:	4a06      	ldr	r2, [pc, #24]	; (18f84 <os_msys_register+0x48>)
   18f6c:	6053      	str	r3, [r2, #4]
   18f6e:	e7f6      	b.n	18f5e <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   18f70:	6085      	str	r5, [r0, #8]
   18f72:	b115      	cbz	r5, 18f7a <os_msys_register+0x3e>
   18f74:	4b03      	ldr	r3, [pc, #12]	; (18f84 <os_msys_register+0x48>)
   18f76:	6018      	str	r0, [r3, #0]
   18f78:	e7f2      	b.n	18f60 <os_msys_register+0x24>
   18f7a:	f100 0308 	add.w	r3, r0, #8
   18f7e:	4a01      	ldr	r2, [pc, #4]	; (18f84 <os_msys_register+0x48>)
   18f80:	6053      	str	r3, [r2, #4]
   18f82:	e7f7      	b.n	18f74 <os_msys_register+0x38>
   18f84:	2000010c 	.word	0x2000010c

00018f88 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   18f88:	b530      	push	{r4, r5, lr}
   18f8a:	b083      	sub	sp, #12
   18f8c:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   18f8e:	9d07      	ldr	r5, [sp, #28]
   18f90:	9501      	str	r5, [sp, #4]
   18f92:	9d06      	ldr	r5, [sp, #24]
   18f94:	9500      	str	r5, [sp, #0]
   18f96:	f001 f96d 	bl	1a274 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   18f9a:	b138      	cbz	r0, 18fac <os_msys_init_once+0x24>
   18f9c:	2000      	movs	r0, #0
   18f9e:	9000      	str	r0, [sp, #0]
   18fa0:	4b09      	ldr	r3, [pc, #36]	; (18fc8 <os_msys_init_once+0x40>)
   18fa2:	681d      	ldr	r5, [r3, #0]
   18fa4:	4603      	mov	r3, r0
   18fa6:	4602      	mov	r2, r0
   18fa8:	4601      	mov	r1, r0
   18faa:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
   18fac:	4620      	mov	r0, r4
   18fae:	f7ff ffc5 	bl	18f3c <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   18fb2:	b138      	cbz	r0, 18fc4 <os_msys_init_once+0x3c>
   18fb4:	2000      	movs	r0, #0
   18fb6:	9000      	str	r0, [sp, #0]
   18fb8:	4b03      	ldr	r3, [pc, #12]	; (18fc8 <os_msys_init_once+0x40>)
   18fba:	681c      	ldr	r4, [r3, #0]
   18fbc:	4603      	mov	r3, r0
   18fbe:	4602      	mov	r2, r0
   18fc0:	4601      	mov	r1, r0
   18fc2:	47a0      	blx	r4
}
   18fc4:	b003      	add	sp, #12
   18fc6:	bd30      	pop	{r4, r5, pc}
   18fc8:	20000104 	.word	0x20000104

00018fcc <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   18fcc:	4b02      	ldr	r3, [pc, #8]	; (18fd8 <os_msys_reset+0xc>)
   18fce:	2200      	movs	r2, #0
   18fd0:	601a      	str	r2, [r3, #0]
   18fd2:	605b      	str	r3, [r3, #4]
}
   18fd4:	4770      	bx	lr
   18fd6:	bf00      	nop
   18fd8:	2000010c 	.word	0x2000010c

00018fdc <os_msys_get_pkthdr>:
{
   18fdc:	b510      	push	{r4, lr}
   18fde:	460c      	mov	r4, r1
    if (dsize == 0) {
   18fe0:	b930      	cbnz	r0, 18ff0 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   18fe2:	f7ff ff8d 	bl	18f00 <os_msys_find_biggest_pool>
    if (!pool) {
   18fe6:	b158      	cbz	r0, 19000 <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   18fe8:	b2e1      	uxtb	r1, r4
   18fea:	f7ff fe0e 	bl	18c0a <os_mbuf_get_pkthdr>
}
   18fee:	bd10      	pop	{r4, pc}
   18ff0:	f101 0308 	add.w	r3, r1, #8
   18ff4:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   18ff6:	4403      	add	r3, r0
   18ff8:	b298      	uxth	r0, r3
   18ffa:	f7ff ff89 	bl	18f10 <os_msys_find_pool>
   18ffe:	e7f2      	b.n	18fe6 <os_msys_get_pkthdr+0xa>
    return (NULL);
   19000:	2000      	movs	r0, #0
   19002:	e7f4      	b.n	18fee <os_msys_get_pkthdr+0x12>

00019004 <os_msys_init>:

void
os_msys_init(void)
{
   19004:	b500      	push	{lr}
   19006:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   19008:	f7ff ffe0 	bl	18fcc <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   1900c:	4b06      	ldr	r3, [pc, #24]	; (19028 <os_msys_init+0x24>)
   1900e:	9301      	str	r3, [sp, #4]
   19010:	f44f 7392 	mov.w	r3, #292	; 0x124
   19014:	9300      	str	r3, [sp, #0]
   19016:	2340      	movs	r3, #64	; 0x40
   19018:	4a04      	ldr	r2, [pc, #16]	; (1902c <os_msys_init+0x28>)
   1901a:	4905      	ldr	r1, [pc, #20]	; (19030 <os_msys_init+0x2c>)
   1901c:	4805      	ldr	r0, [pc, #20]	; (19034 <os_msys_init+0x30>)
   1901e:	f7ff ffb3 	bl	18f88 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   19022:	b003      	add	sp, #12
   19024:	f85d fb04 	ldr.w	pc, [sp], #4
   19028:	0002638c 	.word	0x0002638c
   1902c:	2000d988 	.word	0x2000d988
   19030:	2000d994 	.word	0x2000d994
   19034:	20009088 	.word	0x20009088

00019038 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   19038:	4603      	mov	r3, r0
   1903a:	b128      	cbz	r0, 19048 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   1903c:	2000      	movs	r0, #0
   1903e:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   19040:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   19042:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   19044:	6018      	str	r0, [r3, #0]
   19046:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   19048:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   1904a:	4770      	bx	lr

0001904c <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   1904c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   1904e:	4b2c      	ldr	r3, [pc, #176]	; (19100 <os_mutex_release+0xb4>)
   19050:	681b      	ldr	r3, [r3, #0]
   19052:	2b00      	cmp	r3, #0
   19054:	d04d      	beq.n	190f2 <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   19056:	2800      	cmp	r0, #0
   19058:	d04d      	beq.n	190f6 <os_mutex_release+0xaa>
   1905a:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   1905c:	f000 f97a 	bl	19354 <os_sched_get_current_task>
   19060:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   19062:	88e3      	ldrh	r3, [r4, #6]
   19064:	2b00      	cmp	r3, #0
   19066:	d048      	beq.n	190fa <os_mutex_release+0xae>
   19068:	68a2      	ldr	r2, [r4, #8]
   1906a:	4282      	cmp	r2, r0
   1906c:	d001      	beq.n	19072 <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
   1906e:	2005      	movs	r0, #5
   19070:	e040      	b.n	190f4 <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   19072:	2b01      	cmp	r3, #1
   19074:	d003      	beq.n	1907e <os_mutex_release+0x32>
        --mu->mu_level;
   19076:	3b01      	subs	r3, #1
   19078:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1907a:	2000      	movs	r0, #0
        goto done;
   1907c:	e03a      	b.n	190f4 <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
   1907e:	f000 fc3f 	bl	19900 <os_arch_save_sr>
   19082:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   19084:	88e3      	ldrh	r3, [r4, #6]
   19086:	3b01      	subs	r3, #1
   19088:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   1908a:	7aea      	ldrb	r2, [r5, #11]
   1908c:	7963      	ldrb	r3, [r4, #5]
   1908e:	429a      	cmp	r2, r3
   19090:	d11e      	bne.n	190d0 <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   19092:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   19094:	b146      	cbz	r6, 190a8 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   19096:	69f3      	ldr	r3, [r6, #28]
   19098:	b1fb      	cbz	r3, 190da <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
   1909a:	4630      	mov	r0, r6
   1909c:	f000 f9ae 	bl	193fc <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   190a0:	2301      	movs	r3, #1
   190a2:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   190a4:	7af3      	ldrb	r3, [r6, #11]
   190a6:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   190a8:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   190aa:	b116      	cbz	r6, 190b2 <os_mutex_release+0x66>
        rdy->t_lockcnt++;
   190ac:	7bb3      	ldrb	r3, [r6, #14]
   190ae:	3301      	adds	r3, #1
   190b0:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   190b2:	7bab      	ldrb	r3, [r5, #14]
   190b4:	3b01      	subs	r3, #1
   190b6:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   190b8:	f000 fa1a 	bl	194f0 <os_sched_next_task>
   190bc:	4604      	mov	r4, r0
    if (rdy != current) {
   190be:	4285      	cmp	r5, r0
   190c0:	d010      	beq.n	190e4 <os_mutex_release+0x98>
        resched = 1;
   190c2:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   190c4:	4638      	mov	r0, r7
   190c6:	f000 fc21 	bl	1990c <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   190ca:	b96d      	cbnz	r5, 190e8 <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
   190cc:	2000      	movs	r0, #0
   190ce:	e011      	b.n	190f4 <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
   190d0:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   190d2:	4628      	mov	r0, r5
   190d4:	f000 fa24 	bl	19520 <os_sched_resort>
   190d8:	e7db      	b.n	19092 <os_mutex_release+0x46>
        assert(rdy->t_obj);
   190da:	461a      	mov	r2, r3
   190dc:	4619      	mov	r1, r3
   190de:	4618      	mov	r0, r3
   190e0:	f7ff f978 	bl	183d4 <__assert_func>
    resched = 0;
   190e4:	2500      	movs	r5, #0
   190e6:	e7ed      	b.n	190c4 <os_mutex_release+0x78>
        os_sched(rdy);
   190e8:	4620      	mov	r0, r4
   190ea:	f000 fa07 	bl	194fc <os_sched>
    ret = OS_OK;
   190ee:	2000      	movs	r0, #0
   190f0:	e000      	b.n	190f4 <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
   190f2:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   190f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   190f6:	2003      	movs	r0, #3
   190f8:	e7fc      	b.n	190f4 <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
   190fa:	2005      	movs	r0, #5
   190fc:	e7fa      	b.n	190f4 <os_mutex_release+0xa8>
   190fe:	bf00      	nop
   19100:	2000de88 	.word	0x2000de88

00019104 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   19104:	4b36      	ldr	r3, [pc, #216]	; (191e0 <os_mutex_pend+0xdc>)
   19106:	681b      	ldr	r3, [r3, #0]
   19108:	2b00      	cmp	r3, #0
   1910a:	d065      	beq.n	191d8 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1910c:	2800      	cmp	r0, #0
   1910e:	d065      	beq.n	191dc <os_mutex_pend+0xd8>
{
   19110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19114:	460f      	mov	r7, r1
   19116:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   19118:	f000 fbf2 	bl	19900 <os_arch_save_sr>
   1911c:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   1911e:	f000 f919 	bl	19354 <os_sched_get_current_task>
   19122:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
   19124:	88e3      	ldrh	r3, [r4, #6]
   19126:	b19b      	cbz	r3, 19150 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   19128:	68a2      	ldr	r2, [r4, #8]
   1912a:	4282      	cmp	r2, r0
   1912c:	d01e      	beq.n	1916c <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   1912e:	b327      	cbz	r7, 1917a <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   19130:	7ad1      	ldrb	r1, [r2, #11]
   19132:	7ac3      	ldrb	r3, [r0, #11]
   19134:	4299      	cmp	r1, r3
   19136:	d825      	bhi.n	19184 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   19138:	6821      	ldr	r1, [r4, #0]
   1913a:	b369      	cbz	r1, 19198 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1913c:	460b      	mov	r3, r1
    last = NULL;
   1913e:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   19140:	b32b      	cbz	r3, 1918e <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
   19142:	7ae8      	ldrb	r0, [r5, #11]
   19144:	7ada      	ldrb	r2, [r3, #11]
   19146:	4290      	cmp	r0, r2
   19148:	d321      	bcc.n	1918e <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
   1914a:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1914c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1914e:	e7f7      	b.n	19140 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   19150:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
   19152:	7ac3      	ldrb	r3, [r0, #11]
   19154:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
   19156:	7b83      	ldrb	r3, [r0, #14]
   19158:	3301      	adds	r3, #1
   1915a:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   1915c:	2301      	movs	r3, #1
   1915e:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   19160:	4640      	mov	r0, r8
   19162:	f000 fbd3 	bl	1990c <os_arch_restore_sr>
        ret = OS_OK;
   19166:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   19168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
   1916c:	3301      	adds	r3, #1
   1916e:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   19170:	4640      	mov	r0, r8
   19172:	f000 fbcb 	bl	1990c <os_arch_restore_sr>
        ret = OS_OK;
   19176:	2000      	movs	r0, #0
        goto done;
   19178:	e7f6      	b.n	19168 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
   1917a:	4640      	mov	r0, r8
   1917c:	f000 fbc6 	bl	1990c <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   19180:	2006      	movs	r0, #6
        goto done;
   19182:	e7f1      	b.n	19168 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
   19184:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
   19186:	68a0      	ldr	r0, [r4, #8]
   19188:	f000 f9ca 	bl	19520 <os_sched_resort>
   1918c:	e7d4      	b.n	19138 <os_mutex_pend+0x34>
    if (last) {
   1918e:	b11e      	cbz	r6, 19198 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   19190:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   19192:	64eb      	str	r3, [r5, #76]	; 0x4c
   19194:	64f5      	str	r5, [r6, #76]	; 0x4c
   19196:	e001      	b.n	1919c <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   19198:	64e9      	str	r1, [r5, #76]	; 0x4c
   1919a:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
   1919c:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   1919e:	7b6b      	ldrb	r3, [r5, #13]
   191a0:	f043 0304 	orr.w	r3, r3, #4
   191a4:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
   191a6:	4639      	mov	r1, r7
   191a8:	4628      	mov	r0, r5
   191aa:	f000 f8df 	bl	1936c <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   191ae:	4640      	mov	r0, r8
   191b0:	f000 fbac 	bl	1990c <os_arch_restore_sr>
    os_sched(NULL);
   191b4:	2000      	movs	r0, #0
   191b6:	f000 f9a1 	bl	194fc <os_sched>
    OS_ENTER_CRITICAL(sr);
   191ba:	f000 fba1 	bl	19900 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   191be:	7b6b      	ldrb	r3, [r5, #13]
   191c0:	f023 0304 	bic.w	r3, r3, #4
   191c4:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
   191c6:	f000 fba1 	bl	1990c <os_arch_restore_sr>
    if (mu->mu_owner == current) {
   191ca:	68a3      	ldr	r3, [r4, #8]
   191cc:	42ab      	cmp	r3, r5
   191ce:	d001      	beq.n	191d4 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
   191d0:	2006      	movs	r0, #6
   191d2:	e7c9      	b.n	19168 <os_mutex_pend+0x64>
        ret = OS_OK;
   191d4:	2000      	movs	r0, #0
   191d6:	e7c7      	b.n	19168 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
   191d8:	2009      	movs	r0, #9
   191da:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   191dc:	2003      	movs	r0, #3
}
   191de:	4770      	bx	lr
   191e0:	2000de88 	.word	0x2000de88

000191e4 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   191e4:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   191e6:	4b05      	ldr	r3, [pc, #20]	; (191fc <os_sanity_check_list_lock+0x18>)
   191e8:	6818      	ldr	r0, [r3, #0]
   191ea:	b900      	cbnz	r0, 191ee <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   191ec:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   191ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   191f2:	4803      	ldr	r0, [pc, #12]	; (19200 <os_sanity_check_list_lock+0x1c>)
   191f4:	f7ff ff86 	bl	19104 <os_mutex_pend>
err:
   191f8:	e7f8      	b.n	191ec <os_sanity_check_list_lock+0x8>
   191fa:	bf00      	nop
   191fc:	2000de88 	.word	0x2000de88
   19200:	2000dea0 	.word	0x2000dea0

00019204 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   19204:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   19206:	4b04      	ldr	r3, [pc, #16]	; (19218 <os_sanity_check_list_unlock+0x14>)
   19208:	6818      	ldr	r0, [r3, #0]
   1920a:	b900      	cbnz	r0, 1920e <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1920c:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   1920e:	4803      	ldr	r0, [pc, #12]	; (1921c <os_sanity_check_list_unlock+0x18>)
   19210:	f7ff ff1c 	bl	1904c <os_mutex_release>
err:
   19214:	e7fa      	b.n	1920c <os_sanity_check_list_unlock+0x8>
   19216:	bf00      	nop
   19218:	2000de88 	.word	0x2000de88
   1921c:	2000dea0 	.word	0x2000dea0

00019220 <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
   19220:	2300      	movs	r3, #0
   19222:	6003      	str	r3, [r0, #0]
   19224:	6043      	str	r3, [r0, #4]
   19226:	6083      	str	r3, [r0, #8]
   19228:	60c3      	str	r3, [r0, #12]
   1922a:	6103      	str	r3, [r0, #16]
}
   1922c:	4618      	mov	r0, r3
   1922e:	4770      	bx	lr

00019230 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   19230:	b510      	push	{r4, lr}
   19232:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   19234:	f7ff ffd6 	bl	191e4 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   19238:	4603      	mov	r3, r0
   1923a:	b108      	cbz	r0, 19240 <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
   1923c:	4618      	mov	r0, r3
   1923e:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   19240:	4b03      	ldr	r3, [pc, #12]	; (19250 <os_sanity_check_register+0x20>)
   19242:	681a      	ldr	r2, [r3, #0]
   19244:	6122      	str	r2, [r4, #16]
   19246:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   19248:	f7ff ffdc 	bl	19204 <os_sanity_check_list_unlock>
   1924c:	4603      	mov	r3, r0
err:
   1924e:	e7f5      	b.n	1923c <os_sanity_check_register+0xc>
   19250:	2000d9b0 	.word	0x2000d9b0

00019254 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   19254:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   19256:	f7ff ffc5 	bl	191e4 <os_sanity_check_list_lock>
    if (rc != 0) {
   1925a:	b910      	cbnz	r0, 19262 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1925c:	4b17      	ldr	r3, [pc, #92]	; (192bc <os_sanity_run+0x68>)
   1925e:	681c      	ldr	r4, [r3, #0]
   19260:	e00e      	b.n	19280 <os_sanity_run+0x2c>
        assert(0);
   19262:	2300      	movs	r3, #0
   19264:	461a      	mov	r2, r3
   19266:	4619      	mov	r1, r3
   19268:	4618      	mov	r0, r3
   1926a:	f7ff f8b3 	bl	183d4 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   1926e:	f000 facf 	bl	19810 <os_time_get>
   19272:	6823      	ldr	r3, [r4, #0]
   19274:	6862      	ldr	r2, [r4, #4]
   19276:	4413      	add	r3, r2
   19278:	1ac3      	subs	r3, r0, r3
   1927a:	2b00      	cmp	r3, #0
   1927c:	dc0d      	bgt.n	1929a <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1927e:	6924      	ldr	r4, [r4, #16]
   19280:	b18c      	cbz	r4, 192a6 <os_sanity_run+0x52>
        if (sc->sc_func) {
   19282:	68a3      	ldr	r3, [r4, #8]
   19284:	2b00      	cmp	r3, #0
   19286:	d0f2      	beq.n	1926e <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
   19288:	68e1      	ldr	r1, [r4, #12]
   1928a:	4620      	mov	r0, r4
   1928c:	4798      	blx	r3
            if (rc == OS_OK) {
   1928e:	2800      	cmp	r0, #0
   19290:	d1ed      	bne.n	1926e <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
   19292:	f000 fabd 	bl	19810 <os_time_get>
   19296:	6020      	str	r0, [r4, #0]
                continue;
   19298:	e7f1      	b.n	1927e <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   1929a:	2300      	movs	r3, #0
   1929c:	461a      	mov	r2, r3
   1929e:	4619      	mov	r1, r3
   192a0:	4618      	mov	r0, r3
   192a2:	f7ff f897 	bl	183d4 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   192a6:	f7ff ffad 	bl	19204 <os_sanity_check_list_unlock>
    if (rc != 0) {
   192aa:	b900      	cbnz	r0, 192ae <os_sanity_run+0x5a>
        assert(0);
    }
}
   192ac:	bd10      	pop	{r4, pc}
        assert(0);
   192ae:	2300      	movs	r3, #0
   192b0:	461a      	mov	r2, r3
   192b2:	4619      	mov	r1, r3
   192b4:	4618      	mov	r0, r3
   192b6:	f7ff f88d 	bl	183d4 <__assert_func>
   192ba:	bf00      	nop
   192bc:	2000d9b0 	.word	0x2000d9b0

000192c0 <os_sanity_init>:

int
os_sanity_init(void)
{
   192c0:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   192c2:	4802      	ldr	r0, [pc, #8]	; (192cc <os_sanity_init+0xc>)
   192c4:	f7ff feb8 	bl	19038 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   192c8:	bd08      	pop	{r3, pc}
   192ca:	bf00      	nop
   192cc:	2000dea0 	.word	0x2000dea0

000192d0 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   192d0:	7b03      	ldrb	r3, [r0, #12]
   192d2:	2b01      	cmp	r3, #1
   192d4:	d001      	beq.n	192da <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   192d6:	2002      	movs	r0, #2
}
   192d8:	4770      	bx	lr
{
   192da:	b510      	push	{r4, lr}
   192dc:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   192de:	f000 fb0f 	bl	19900 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   192e2:	4b0f      	ldr	r3, [pc, #60]	; (19320 <os_sched_insert+0x50>)
   192e4:	681b      	ldr	r3, [r3, #0]
   192e6:	b12b      	cbz	r3, 192f4 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   192e8:	7ae1      	ldrb	r1, [r4, #11]
   192ea:	7ada      	ldrb	r2, [r3, #11]
   192ec:	4291      	cmp	r1, r2
   192ee:	d301      	bcc.n	192f4 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   192f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   192f2:	e7f8      	b.n	192e6 <os_sched_insert+0x16>
    if (entry) {
   192f4:	b153      	cbz	r3, 1930c <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   192f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   192f8:	64a2      	str	r2, [r4, #72]	; 0x48
   192fa:	6463      	str	r3, [r4, #68]	; 0x44
   192fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   192fe:	6014      	str	r4, [r2, #0]
   19300:	3444      	adds	r4, #68	; 0x44
   19302:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   19304:	f000 fb02 	bl	1990c <os_arch_restore_sr>
    return (0);
   19308:	2000      	movs	r0, #0
}
   1930a:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   1930c:	2300      	movs	r3, #0
   1930e:	6463      	str	r3, [r4, #68]	; 0x44
   19310:	4b03      	ldr	r3, [pc, #12]	; (19320 <os_sched_insert+0x50>)
   19312:	685a      	ldr	r2, [r3, #4]
   19314:	64a2      	str	r2, [r4, #72]	; 0x48
   19316:	6014      	str	r4, [r2, #0]
   19318:	3444      	adds	r4, #68	; 0x44
   1931a:	605c      	str	r4, [r3, #4]
   1931c:	e7f2      	b.n	19304 <os_sched_insert+0x34>
   1931e:	bf00      	nop
   19320:	20000114 	.word	0x20000114

00019324 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   19324:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   19326:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   19328:	3301      	adds	r3, #1
   1932a:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
   1932c:	4b06      	ldr	r3, [pc, #24]	; (19348 <os_sched_ctx_sw_hook+0x24>)
   1932e:	681c      	ldr	r4, [r3, #0]
   19330:	4b06      	ldr	r3, [pc, #24]	; (1934c <os_sched_ctx_sw_hook+0x28>)
   19332:	6818      	ldr	r0, [r3, #0]
   19334:	4906      	ldr	r1, [pc, #24]	; (19350 <os_sched_ctx_sw_hook+0x2c>)
   19336:	680b      	ldr	r3, [r1, #0]
   19338:	1ac2      	subs	r2, r0, r3
   1933a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1933c:	4413      	add	r3, r2
   1933e:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
   19340:	6008      	str	r0, [r1, #0]
}
   19342:	f85d 4b04 	ldr.w	r4, [sp], #4
   19346:	4770      	bx	lr
   19348:	2000deb0 	.word	0x2000deb0
   1934c:	2000dec0 	.word	0x2000dec0
   19350:	2000deac 	.word	0x2000deac

00019354 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   19354:	4b01      	ldr	r3, [pc, #4]	; (1935c <os_sched_get_current_task+0x8>)
   19356:	6818      	ldr	r0, [r3, #0]
   19358:	4770      	bx	lr
   1935a:	bf00      	nop
   1935c:	2000deb0 	.word	0x2000deb0

00019360 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   19360:	4b01      	ldr	r3, [pc, #4]	; (19368 <os_sched_set_current_task+0x8>)
   19362:	6018      	str	r0, [r3, #0]
}
   19364:	4770      	bx	lr
   19366:	bf00      	nop
   19368:	2000deb0 	.word	0x2000deb0

0001936c <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   1936c:	b538      	push	{r3, r4, r5, lr}
   1936e:	4604      	mov	r4, r0
   19370:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   19372:	6c43      	ldr	r3, [r0, #68]	; 0x44
   19374:	b1d3      	cbz	r3, 193ac <os_sched_sleep+0x40>
   19376:	6c82      	ldr	r2, [r0, #72]	; 0x48
   19378:	649a      	str	r2, [r3, #72]	; 0x48
   1937a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1937c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1937e:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   19380:	2302      	movs	r3, #2
   19382:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   19384:	f000 fa44 	bl	19810 <os_time_get>
   19388:	4428      	add	r0, r5
   1938a:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   1938c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   19390:	d010      	beq.n	193b4 <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   19392:	4b18      	ldr	r3, [pc, #96]	; (193f4 <os_sched_sleep+0x88>)
   19394:	681b      	ldr	r3, [r3, #0]
   19396:	b1d3      	cbz	r3, 193ce <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   19398:	7b5a      	ldrb	r2, [r3, #13]
   1939a:	f012 0f01 	tst.w	r2, #1
   1939e:	d116      	bne.n	193ce <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   193a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   193a2:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   193a4:	2a00      	cmp	r2, #0
   193a6:	dc12      	bgt.n	193ce <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   193a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   193aa:	e7f4      	b.n	19396 <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   193ac:	6c82      	ldr	r2, [r0, #72]	; 0x48
   193ae:	4b12      	ldr	r3, [pc, #72]	; (193f8 <os_sched_sleep+0x8c>)
   193b0:	605a      	str	r2, [r3, #4]
   193b2:	e7e2      	b.n	1937a <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   193b4:	7b63      	ldrb	r3, [r4, #13]
   193b6:	f043 0301 	orr.w	r3, r3, #1
   193ba:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   193bc:	2300      	movs	r3, #0
   193be:	6463      	str	r3, [r4, #68]	; 0x44
   193c0:	4b0c      	ldr	r3, [pc, #48]	; (193f4 <os_sched_sleep+0x88>)
   193c2:	685a      	ldr	r2, [r3, #4]
   193c4:	64a2      	str	r2, [r4, #72]	; 0x48
   193c6:	6014      	str	r4, [r2, #0]
   193c8:	3444      	adds	r4, #68	; 0x44
   193ca:	605c      	str	r4, [r3, #4]
   193cc:	e007      	b.n	193de <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
   193ce:	b143      	cbz	r3, 193e2 <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   193d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   193d2:	64a2      	str	r2, [r4, #72]	; 0x48
   193d4:	6463      	str	r3, [r4, #68]	; 0x44
   193d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   193d8:	6014      	str	r4, [r2, #0]
   193da:	3444      	adds	r4, #68	; 0x44
   193dc:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   193de:	2000      	movs	r0, #0
   193e0:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   193e2:	2300      	movs	r3, #0
   193e4:	6463      	str	r3, [r4, #68]	; 0x44
   193e6:	4b03      	ldr	r3, [pc, #12]	; (193f4 <os_sched_sleep+0x88>)
   193e8:	685a      	ldr	r2, [r3, #4]
   193ea:	64a2      	str	r2, [r4, #72]	; 0x48
   193ec:	6014      	str	r4, [r2, #0]
   193ee:	3444      	adds	r4, #68	; 0x44
   193f0:	605c      	str	r4, [r3, #4]
   193f2:	e7f4      	b.n	193de <os_sched_sleep+0x72>
   193f4:	2000011c 	.word	0x2000011c
   193f8:	20000114 	.word	0x20000114

000193fc <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   193fc:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   193fe:	7b03      	ldrb	r3, [r0, #12]
   19400:	2b02      	cmp	r3, #2
   19402:	d108      	bne.n	19416 <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   19404:	69c3      	ldr	r3, [r0, #28]
   19406:	b1db      	cbz	r3, 19440 <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   19408:	681a      	ldr	r2, [r3, #0]
   1940a:	b152      	cbz	r2, 19422 <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1940c:	4282      	cmp	r2, r0
   1940e:	d10f      	bne.n	19430 <os_sched_wakeup+0x34>
   19410:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   19412:	601a      	str	r2, [r3, #0]
   19414:	e011      	b.n	1943a <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
   19416:	2300      	movs	r3, #0
   19418:	461a      	mov	r2, r3
   1941a:	4619      	mov	r1, r3
   1941c:	4618      	mov	r0, r3
   1941e:	f7fe ffd9 	bl	183d4 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   19422:	2300      	movs	r3, #0
   19424:	461a      	mov	r2, r3
   19426:	4619      	mov	r1, r3
   19428:	4618      	mov	r0, r3
   1942a:	f7fe ffd3 	bl	183d4 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1942e:	461a      	mov	r2, r3
   19430:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   19432:	4283      	cmp	r3, r0
   19434:	d1fb      	bne.n	1942e <os_sched_wakeup+0x32>
   19436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   19438:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   1943a:	2300      	movs	r3, #0
   1943c:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   1943e:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   19440:	2301      	movs	r3, #1
   19442:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   19444:	2300      	movs	r3, #0
   19446:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   19448:	7b43      	ldrb	r3, [r0, #13]
   1944a:	f023 0301 	bic.w	r3, r3, #1
   1944e:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   19450:	6c43      	ldr	r3, [r0, #68]	; 0x44
   19452:	b143      	cbz	r3, 19466 <os_sched_wakeup+0x6a>
   19454:	6c82      	ldr	r2, [r0, #72]	; 0x48
   19456:	649a      	str	r2, [r3, #72]	; 0x48
   19458:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1945a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1945c:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   1945e:	f7ff ff37 	bl	192d0 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   19462:	2000      	movs	r0, #0
   19464:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   19466:	6c82      	ldr	r2, [r0, #72]	; 0x48
   19468:	4b01      	ldr	r3, [pc, #4]	; (19470 <os_sched_wakeup+0x74>)
   1946a:	605a      	str	r2, [r3, #4]
   1946c:	e7f4      	b.n	19458 <os_sched_wakeup+0x5c>
   1946e:	bf00      	nop
   19470:	2000011c 	.word	0x2000011c

00019474 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   19474:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   19476:	f000 f9cb 	bl	19810 <os_time_get>
   1947a:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   1947c:	f000 fa40 	bl	19900 <os_arch_save_sr>
   19480:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   19482:	4b0a      	ldr	r3, [pc, #40]	; (194ac <os_sched_os_timer_exp+0x38>)
   19484:	6818      	ldr	r0, [r3, #0]
    while (t) {
   19486:	b160      	cbz	r0, 194a2 <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   19488:	7b43      	ldrb	r3, [r0, #13]
   1948a:	f013 0f01 	tst.w	r3, #1
   1948e:	d108      	bne.n	194a2 <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
   19490:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   19492:	6b43      	ldr	r3, [r0, #52]	; 0x34
   19494:	1aeb      	subs	r3, r5, r3
   19496:	2b00      	cmp	r3, #0
   19498:	db03      	blt.n	194a2 <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
   1949a:	f7ff ffaf 	bl	193fc <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   1949e:	4620      	mov	r0, r4
   194a0:	e7f1      	b.n	19486 <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
   194a2:	4630      	mov	r0, r6
   194a4:	f000 fa32 	bl	1990c <os_arch_restore_sr>
}
   194a8:	bd70      	pop	{r4, r5, r6, pc}
   194aa:	bf00      	nop
   194ac:	2000011c 	.word	0x2000011c

000194b0 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   194b0:	b510      	push	{r4, lr}
   194b2:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   194b4:	f000 fa2d 	bl	19912 <os_arch_in_critical>
   194b8:	b150      	cbz	r0, 194d0 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   194ba:	4b0c      	ldr	r3, [pc, #48]	; (194ec <os_sched_wakeup_ticks+0x3c>)
   194bc:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   194be:	b17b      	cbz	r3, 194e0 <os_sched_wakeup_ticks+0x30>
   194c0:	7b5a      	ldrb	r2, [r3, #13]
   194c2:	f012 0f01 	tst.w	r2, #1
   194c6:	d10e      	bne.n	194e6 <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   194c8:	6b58      	ldr	r0, [r3, #52]	; 0x34
   194ca:	1b00      	subs	r0, r0, r4
   194cc:	d406      	bmi.n	194dc <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   194ce:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   194d0:	2300      	movs	r3, #0
   194d2:	461a      	mov	r2, r3
   194d4:	4619      	mov	r1, r3
   194d6:	4618      	mov	r0, r3
   194d8:	f7fe ff7c 	bl	183d4 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   194dc:	2000      	movs	r0, #0
   194de:	e7f6      	b.n	194ce <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   194e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   194e4:	e7f3      	b.n	194ce <os_sched_wakeup_ticks+0x1e>
   194e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   194ea:	e7f0      	b.n	194ce <os_sched_wakeup_ticks+0x1e>
   194ec:	2000011c 	.word	0x2000011c

000194f0 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   194f0:	4b01      	ldr	r3, [pc, #4]	; (194f8 <os_sched_next_task+0x8>)
   194f2:	6818      	ldr	r0, [r3, #0]
   194f4:	4770      	bx	lr
   194f6:	bf00      	nop
   194f8:	20000114 	.word	0x20000114

000194fc <os_sched>:
{
   194fc:	b538      	push	{r3, r4, r5, lr}
   194fe:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   19500:	f000 f9fe 	bl	19900 <os_arch_save_sr>
   19504:	4605      	mov	r5, r0
    if (!next_t) {
   19506:	b134      	cbz	r4, 19516 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   19508:	4620      	mov	r0, r4
   1950a:	f000 f9ef 	bl	198ec <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   1950e:	4628      	mov	r0, r5
   19510:	f000 f9fc 	bl	1990c <os_arch_restore_sr>
}
   19514:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   19516:	f7ff ffeb 	bl	194f0 <os_sched_next_task>
   1951a:	4604      	mov	r4, r0
   1951c:	e7f4      	b.n	19508 <os_sched+0xc>
	...

00019520 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   19520:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   19522:	7b03      	ldrb	r3, [r0, #12]
   19524:	2b01      	cmp	r3, #1
   19526:	d000      	beq.n	1952a <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   19528:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1952a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1952c:	b13b      	cbz	r3, 1953e <os_sched_resort+0x1e>
   1952e:	6c82      	ldr	r2, [r0, #72]	; 0x48
   19530:	649a      	str	r2, [r3, #72]	; 0x48
   19532:	6c83      	ldr	r3, [r0, #72]	; 0x48
   19534:	6c42      	ldr	r2, [r0, #68]	; 0x44
   19536:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   19538:	f7ff feca 	bl	192d0 <os_sched_insert>
}
   1953c:	e7f4      	b.n	19528 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1953e:	6c82      	ldr	r2, [r0, #72]	; 0x48
   19540:	4b01      	ldr	r3, [pc, #4]	; (19548 <os_sched_resort+0x28>)
   19542:	605a      	str	r2, [r3, #4]
   19544:	e7f5      	b.n	19532 <os_sched_resort+0x12>
   19546:	bf00      	nop
   19548:	20000114 	.word	0x20000114

0001954c <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   1954c:	4603      	mov	r3, r0
   1954e:	b118      	cbz	r0, 19558 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   19550:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   19552:	2000      	movs	r0, #0
   19554:	6018      	str	r0, [r3, #0]
   19556:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   19558:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   1955a:	4770      	bx	lr

0001955c <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   1955c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   1955e:	4b17      	ldr	r3, [pc, #92]	; (195bc <os_sem_release+0x60>)
   19560:	681b      	ldr	r3, [r3, #0]
   19562:	b33b      	cbz	r3, 195b4 <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   19564:	b340      	cbz	r0, 195b8 <os_sem_release+0x5c>
   19566:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   19568:	f7ff fef4 	bl	19354 <os_sched_get_current_task>
   1956c:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   1956e:	f000 f9c7 	bl	19900 <os_arch_save_sr>
   19572:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   19574:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   19576:	b165      	cbz	r5, 19592 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   19578:	7b6b      	ldrb	r3, [r5, #13]
   1957a:	f023 0302 	bic.w	r3, r3, #2
   1957e:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   19580:	4628      	mov	r0, r5
   19582:	f7ff ff3b 	bl	193fc <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   19586:	7afa      	ldrb	r2, [r7, #11]
   19588:	7aeb      	ldrb	r3, [r5, #11]
   1958a:	429a      	cmp	r2, r3
   1958c:	d80b      	bhi.n	195a6 <os_sem_release+0x4a>
    resched = 0;
   1958e:	2400      	movs	r4, #0
   19590:	e003      	b.n	1959a <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   19592:	88e3      	ldrh	r3, [r4, #6]
   19594:	3301      	adds	r3, #1
   19596:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   19598:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   1959a:	4630      	mov	r0, r6
   1959c:	f000 f9b6 	bl	1990c <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   195a0:	b91c      	cbnz	r4, 195aa <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   195a2:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   195a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   195a6:	2401      	movs	r4, #1
   195a8:	e7f7      	b.n	1959a <os_sem_release+0x3e>
        os_sched(rdy);
   195aa:	4628      	mov	r0, r5
   195ac:	f7ff ffa6 	bl	194fc <os_sched>
    ret = OS_OK;
   195b0:	2000      	movs	r0, #0
   195b2:	e7f7      	b.n	195a4 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   195b4:	2009      	movs	r0, #9
   195b6:	e7f5      	b.n	195a4 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   195b8:	2003      	movs	r0, #3
   195ba:	e7f3      	b.n	195a4 <os_sem_release+0x48>
   195bc:	2000de88 	.word	0x2000de88

000195c0 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   195c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   195c2:	4b2c      	ldr	r3, [pc, #176]	; (19674 <os_sem_pend+0xb4>)
   195c4:	681b      	ldr	r3, [r3, #0]
   195c6:	2b00      	cmp	r3, #0
   195c8:	d04f      	beq.n	1966a <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   195ca:	2800      	cmp	r0, #0
   195cc:	d04f      	beq.n	1966e <os_sem_pend+0xae>
   195ce:	460d      	mov	r5, r1
   195d0:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   195d2:	f7ff febf 	bl	19354 <os_sched_get_current_task>
   195d6:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   195d8:	f000 f992 	bl	19900 <os_arch_save_sr>
   195dc:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   195de:	88e3      	ldrh	r3, [r4, #6]
   195e0:	b14b      	cbz	r3, 195f6 <os_sem_pend+0x36>
        sem->sem_tokens--;
   195e2:	3b01      	subs	r3, #1
   195e4:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   195e6:	2400      	movs	r4, #0
    sched = 0;
   195e8:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   195ea:	4638      	mov	r0, r7
   195ec:	f000 f98e 	bl	1990c <os_arch_restore_sr>

    if (sched) {
   195f0:	bb45      	cbnz	r5, 19644 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   195f2:	4620      	mov	r0, r4
   195f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   195f6:	b315      	cbz	r5, 1963e <os_sem_pend+0x7e>
        current->t_obj = sem;
   195f8:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   195fa:	7b73      	ldrb	r3, [r6, #13]
   195fc:	f043 0302 	orr.w	r3, r3, #2
   19600:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   19602:	f8d4 c000 	ldr.w	ip, [r4]
   19606:	f1bc 0f00 	cmp.w	ip, #0
   1960a:	d00e      	beq.n	1962a <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1960c:	4663      	mov	r3, ip
        last = NULL;
   1960e:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   19610:	b133      	cbz	r3, 19620 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   19612:	7af1      	ldrb	r1, [r6, #11]
   19614:	7ada      	ldrb	r2, [r3, #11]
   19616:	4291      	cmp	r1, r2
   19618:	d302      	bcc.n	19620 <os_sem_pend+0x60>
                last = entry;
   1961a:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1961c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1961e:	e7f7      	b.n	19610 <os_sem_pend+0x50>
        if (last) {
   19620:	b118      	cbz	r0, 1962a <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   19622:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   19624:	64f3      	str	r3, [r6, #76]	; 0x4c
   19626:	64c6      	str	r6, [r0, #76]	; 0x4c
   19628:	e002      	b.n	19630 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   1962a:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   1962e:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   19630:	4629      	mov	r1, r5
   19632:	4630      	mov	r0, r6
   19634:	f7ff fe9a 	bl	1936c <os_sched_sleep>
        ret = OS_OK;
   19638:	2400      	movs	r4, #0
        sched = 1;
   1963a:	2501      	movs	r5, #1
   1963c:	e7d5      	b.n	195ea <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   1963e:	2406      	movs	r4, #6
    sched = 0;
   19640:	2500      	movs	r5, #0
   19642:	e7d2      	b.n	195ea <os_sem_pend+0x2a>
        os_sched(NULL);
   19644:	2000      	movs	r0, #0
   19646:	f7ff ff59 	bl	194fc <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   1964a:	7b73      	ldrb	r3, [r6, #13]
   1964c:	f013 0f02 	tst.w	r3, #2
   19650:	d101      	bne.n	19656 <os_sem_pend+0x96>
            ret = OS_OK;
   19652:	2400      	movs	r4, #0
   19654:	e7cd      	b.n	195f2 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   19656:	f000 f953 	bl	19900 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1965a:	7b73      	ldrb	r3, [r6, #13]
   1965c:	f023 0302 	bic.w	r3, r3, #2
   19660:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   19662:	f000 f953 	bl	1990c <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   19666:	2406      	movs	r4, #6
   19668:	e7c3      	b.n	195f2 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   1966a:	2409      	movs	r4, #9
   1966c:	e7c1      	b.n	195f2 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   1966e:	2403      	movs	r4, #3
   19670:	e7bf      	b.n	195f2 <os_sem_pend+0x32>
   19672:	bf00      	nop
   19674:	2000de88 	.word	0x2000de88

00019678 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   19678:	2300      	movs	r3, #0
   1967a:	e003      	b.n	19684 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
   1967c:	4a03      	ldr	r2, [pc, #12]	; (1968c <_clear_stack+0x14>)
   1967e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   19682:	3301      	adds	r3, #1
   19684:	428b      	cmp	r3, r1
   19686:	dbf9      	blt.n	1967c <_clear_stack+0x4>
    }
}
   19688:	4770      	bx	lr
   1968a:	bf00      	nop
   1968c:	deadbeef 	.word	0xdeadbeef

00019690 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
   19690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19694:	4604      	mov	r4, r0
   19696:	460f      	mov	r7, r1
   19698:	4690      	mov	r8, r2
   1969a:	461d      	mov	r5, r3
   1969c:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
   196a0:	2250      	movs	r2, #80	; 0x50
   196a2:	2100      	movs	r1, #0
   196a4:	f000 fa99 	bl	19bda <memset>

    t->t_func = func;
   196a8:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
   196ac:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   196ae:	f000 f927 	bl	19900 <os_arch_save_sr>
    rc = g_task_id;
   196b2:	4b2b      	ldr	r3, [pc, #172]	; (19760 <os_task_init+0xd0>)
   196b4:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
   196b6:	1c6a      	adds	r2, r5, #1
   196b8:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   196ba:	f000 f927 	bl	1990c <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
   196be:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
   196c0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   196c4:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
   196c6:	2301      	movs	r3, #1
   196c8:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   196ca:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
   196cc:	2300      	movs	r3, #0
   196ce:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
   196d0:	f104 0720 	add.w	r7, r4, #32
   196d4:	4638      	mov	r0, r7
   196d6:	f7ff fda3 	bl	19220 <os_sanity_check_init>
    if (rc != OS_OK) {
   196da:	4605      	mov	r5, r0
   196dc:	2800      	cmp	r0, #0
   196de:	d132      	bne.n	19746 <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
   196e0:	9b07      	ldr	r3, [sp, #28]
   196e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   196e6:	d005      	beq.n	196f4 <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
   196e8:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
   196ea:	4638      	mov	r0, r7
   196ec:	f7ff fda0 	bl	19230 <os_sanity_check_register>
        if (rc != OS_OK) {
   196f0:	4605      	mov	r5, r0
   196f2:	bb40      	cbnz	r0, 19746 <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
   196f4:	4631      	mov	r1, r6
   196f6:	9808      	ldr	r0, [sp, #32]
   196f8:	f7ff ffbe 	bl	19678 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
   196fc:	9b08      	ldr	r3, [sp, #32]
   196fe:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   19702:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
   19704:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
   19706:	4632      	mov	r2, r6
   19708:	4620      	mov	r0, r4
   1970a:	f000 f907 	bl	1991c <os_arch_task_stack_init>
   1970e:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   19710:	4b14      	ldr	r3, [pc, #80]	; (19764 <os_task_init+0xd4>)
   19712:	681b      	ldr	r3, [r3, #0]
   19714:	b15b      	cbz	r3, 1972e <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
   19716:	7ae1      	ldrb	r1, [r4, #11]
   19718:	7ada      	ldrb	r2, [r3, #11]
   1971a:	4291      	cmp	r1, r2
   1971c:	d001      	beq.n	19722 <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1971e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19720:	e7f8      	b.n	19714 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
   19722:	2300      	movs	r3, #0
   19724:	461a      	mov	r2, r3
   19726:	4619      	mov	r1, r3
   19728:	4618      	mov	r0, r3
   1972a:	f7fe fe53 	bl	183d4 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1972e:	6423      	str	r3, [r4, #64]	; 0x40
   19730:	4b0c      	ldr	r3, [pc, #48]	; (19764 <os_task_init+0xd4>)
   19732:	685a      	ldr	r2, [r3, #4]
   19734:	6014      	str	r4, [r2, #0]
   19736:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1973a:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
   1973c:	4620      	mov	r0, r4
   1973e:	f7ff fdc7 	bl	192d0 <os_sched_insert>
   19742:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   19744:	b110      	cbz	r0, 1974c <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
   19746:	4628      	mov	r0, r5
   19748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
   1974c:	f7fe fefc 	bl	18548 <os_started>
   19750:	b908      	cbnz	r0, 19756 <os_task_init+0xc6>
    return (0);
   19752:	4605      	mov	r5, r0
   19754:	e7f7      	b.n	19746 <os_task_init+0xb6>
        os_sched(NULL);
   19756:	2000      	movs	r0, #0
   19758:	f7ff fed0 	bl	194fc <os_sched>
   1975c:	e7f3      	b.n	19746 <os_task_init+0xb6>
   1975e:	bf00      	nop
   19760:	2000deb4 	.word	0x2000deb4
   19764:	2000deb8 	.word	0x2000deb8

00019768 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   19768:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   1976c:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   1976e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   19772:	e9d1 4500 	ldrd	r4, r5, [r1]
   19776:	eb14 0b03 	adds.w	fp, r4, r3
   1977a:	f145 0c00 	adc.w	ip, r5, #0
   1977e:	e9c2 bc00 	strd	fp, ip, [r2]
   19782:	688b      	ldr	r3, [r1, #8]
   19784:	f641 6184 	movw	r1, #7812	; 0x1e84
   19788:	fb01 3000 	mla	r0, r1, r0, r3
   1978c:	6090      	str	r0, [r2, #8]
   1978e:	4b08      	ldr	r3, [pc, #32]	; (197b0 <os_deltatime+0x48>)
   19790:	4298      	cmp	r0, r3
   19792:	dd0a      	ble.n	197aa <os_deltatime+0x42>
   19794:	f11b 0401 	adds.w	r4, fp, #1
   19798:	f14c 0500 	adc.w	r5, ip, #0
   1979c:	e9c2 4500 	strd	r4, r5, [r2]
   197a0:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   197a4:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   197a8:	6090      	str	r0, [r2, #8]
}
   197aa:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   197ae:	4770      	bx	lr
   197b0:	000f423f 	.word	0x000f423f

000197b4 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   197b4:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   197b6:	1e04      	subs	r4, r0, #0
   197b8:	db0d      	blt.n	197d6 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   197ba:	f000 f8a1 	bl	19900 <os_arch_save_sr>
   197be:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   197c0:	4a11      	ldr	r2, [pc, #68]	; (19808 <os_time_tick+0x54>)
   197c2:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
   197c4:	18e0      	adds	r0, r4, r3
   197c6:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   197c8:	ea90 0f03 	teq	r0, r3
   197cc:	d409      	bmi.n	197e2 <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   197ce:	4628      	mov	r0, r5
   197d0:	f000 f89c 	bl	1990c <os_arch_restore_sr>
}
   197d4:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   197d6:	2300      	movs	r3, #0
   197d8:	461a      	mov	r2, r3
   197da:	4619      	mov	r1, r3
   197dc:	4618      	mov	r0, r3
   197de:	f7fe fdf9 	bl	183d4 <__assert_func>
        delta = g_os_time - basetod.ostime;
   197e2:	4e0a      	ldr	r6, [pc, #40]	; (1980c <os_time_tick+0x58>)
   197e4:	4631      	mov	r1, r6
   197e6:	f851 4b08 	ldr.w	r4, [r1], #8
   197ea:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   197ec:	460a      	mov	r2, r1
   197ee:	4620      	mov	r0, r4
   197f0:	f7ff ffba 	bl	19768 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   197f4:	f106 0118 	add.w	r1, r6, #24
   197f8:	460a      	mov	r2, r1
   197fa:	4620      	mov	r0, r4
   197fc:	f7ff ffb4 	bl	19768 <os_deltatime>
        basetod.ostime = g_os_time;
   19800:	4b01      	ldr	r3, [pc, #4]	; (19808 <os_time_tick+0x54>)
   19802:	681b      	ldr	r3, [r3, #0]
   19804:	6033      	str	r3, [r6, #0]
   19806:	e7e2      	b.n	197ce <os_time_tick+0x1a>
   19808:	2000dec0 	.word	0x2000dec0
   1980c:	2000d9b8 	.word	0x2000d9b8

00019810 <os_time_get>:
}
   19810:	4b01      	ldr	r3, [pc, #4]	; (19818 <os_time_get+0x8>)
   19812:	6818      	ldr	r0, [r3, #0]
   19814:	4770      	bx	lr
   19816:	bf00      	nop
   19818:	2000dec0 	.word	0x2000dec0

0001981c <os_time_advance>:

void
os_time_advance(int ticks)
{
   1981c:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   1981e:	1e04      	subs	r4, r0, #0
   19820:	db09      	blt.n	19836 <os_time_advance+0x1a>

    if (ticks > 0) {
   19822:	2c00      	cmp	r4, #0
   19824:	dd06      	ble.n	19834 <os_time_advance+0x18>
        if (!os_started()) {
   19826:	f7fe fe8f 	bl	18548 <os_started>
   1982a:	b950      	cbnz	r0, 19842 <os_time_advance+0x26>
            g_os_time += ticks;
   1982c:	4a0a      	ldr	r2, [pc, #40]	; (19858 <os_time_advance+0x3c>)
   1982e:	6813      	ldr	r3, [r2, #0]
   19830:	441c      	add	r4, r3
   19832:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   19834:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   19836:	2300      	movs	r3, #0
   19838:	461a      	mov	r2, r3
   1983a:	4619      	mov	r1, r3
   1983c:	4618      	mov	r0, r3
   1983e:	f7fe fdc9 	bl	183d4 <__assert_func>
            os_time_tick(ticks);
   19842:	4620      	mov	r0, r4
   19844:	f7ff ffb6 	bl	197b4 <os_time_tick>
            os_callout_tick();
   19848:	f7fe ffa6 	bl	18798 <os_callout_tick>
            os_sched_os_timer_exp();
   1984c:	f7ff fe12 	bl	19474 <os_sched_os_timer_exp>
            os_sched(NULL);
   19850:	2000      	movs	r0, #0
   19852:	f7ff fe53 	bl	194fc <os_sched>
}
   19856:	e7ed      	b.n	19834 <os_time_advance+0x18>
   19858:	2000dec0 	.word	0x2000dec0

0001985c <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   1985c:	b900      	cbnz	r0, 19860 <os_time_delay+0x4>
   1985e:	4770      	bx	lr
{
   19860:	b538      	push	{r3, r4, r5, lr}
   19862:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   19864:	f000 f84c 	bl	19900 <os_arch_save_sr>
   19868:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   1986a:	f7ff fd73 	bl	19354 <os_sched_get_current_task>
   1986e:	4621      	mov	r1, r4
   19870:	f7ff fd7c 	bl	1936c <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   19874:	4628      	mov	r0, r5
   19876:	f000 f849 	bl	1990c <os_arch_restore_sr>
        os_sched(NULL);
   1987a:	2000      	movs	r0, #0
   1987c:	f7ff fe3e 	bl	194fc <os_sched>
    }
}
   19880:	bd38      	pop	{r3, r4, r5, pc}
	...

00019884 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   19884:	b570      	push	{r4, r5, r6, lr}
   19886:	4605      	mov	r5, r0
   19888:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   1988a:	f000 f839 	bl	19900 <os_arch_save_sr>
   1988e:	4606      	mov	r6, r0
    if (tv != NULL) {
   19890:	b145      	cbz	r5, 198a4 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   19892:	f7ff ffbd 	bl	19810 <os_time_get>
   19896:	4908      	ldr	r1, [pc, #32]	; (198b8 <os_gettimeofday+0x34>)
   19898:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   1989c:	462a      	mov	r2, r5
   1989e:	1ac0      	subs	r0, r0, r3
   198a0:	f7ff ff62 	bl	19768 <os_deltatime>
    }

    if (tz != NULL) {
   198a4:	b114      	cbz	r4, 198ac <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   198a6:	4b04      	ldr	r3, [pc, #16]	; (198b8 <os_gettimeofday+0x34>)
   198a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
   198aa:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   198ac:	4630      	mov	r0, r6
   198ae:	f000 f82d 	bl	1990c <os_arch_restore_sr>

    return (0);
}
   198b2:	2000      	movs	r0, #0
   198b4:	bd70      	pop	{r4, r5, r6, pc}
   198b6:	bf00      	nop
   198b8:	2000d9b8 	.word	0x2000d9b8

000198bc <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   198bc:	b538      	push	{r3, r4, r5, lr}
   198be:	4604      	mov	r4, r0
   198c0:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   198c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   198c6:	2300      	movs	r3, #0
   198c8:	01c0      	lsls	r0, r0, #7
   198ca:	0e61      	lsrs	r1, r4, #25
   198cc:	f002 f88a 	bl	1b9e4 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   198d0:	2901      	cmp	r1, #1
   198d2:	bf08      	it	eq
   198d4:	2800      	cmpeq	r0, #0
   198d6:	d202      	bcs.n	198de <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   198d8:	6028      	str	r0, [r5, #0]
    return 0;
   198da:	2000      	movs	r0, #0
}
   198dc:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   198de:	2002      	movs	r0, #2
   198e0:	e7fc      	b.n	198dc <os_time_ms_to_ticks+0x20>

000198e2 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
   198e2:	b508      	push	{r3, lr}
    os_time_advance(1);
   198e4:	2001      	movs	r0, #1
   198e6:	f7ff ff99 	bl	1981c <os_time_advance>
}
   198ea:	bd08      	pop	{r3, pc}

000198ec <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
   198ec:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   198ee:	f7ff fd19 	bl	19324 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   198f2:	4b02      	ldr	r3, [pc, #8]	; (198fc <os_arch_ctx_sw+0x10>)
   198f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   198f8:	605a      	str	r2, [r3, #4]
}
   198fa:	bd08      	pop	{r3, pc}
   198fc:	e000ed00 	.word	0xe000ed00

00019900 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   19900:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   19904:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
   19906:	f000 0001 	and.w	r0, r0, #1
   1990a:	4770      	bx	lr

0001990c <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
   1990c:	b900      	cbnz	r0, 19910 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   1990e:	b662      	cpsie	i
        __enable_irq();
    }
}
   19910:	4770      	bx	lr

00019912 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   19912:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
   19916:	f000 0001 	and.w	r0, r0, #1
   1991a:	4770      	bx	lr

0001991c <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   1991c:	b570      	push	{r4, r5, r6, lr}
   1991e:	4606      	mov	r6, r0
   19920:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   19922:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
   19926:	2309      	movs	r3, #9
   19928:	e003      	b.n	19932 <os_arch_task_stack_init+0x16>
        s[i] = 0;
   1992a:	2200      	movs	r2, #0
   1992c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
   19930:	3301      	adds	r3, #1
   19932:	2b0d      	cmp	r3, #13
   19934:	ddf9      	ble.n	1992a <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   19936:	4620      	mov	r0, r4
   19938:	f000 f8b6 	bl	19aa8 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   1993c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   19940:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
   19944:	6973      	ldr	r3, [r6, #20]
   19946:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   1994a:	69b3      	ldr	r3, [r6, #24]
   1994c:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
   19950:	f06f 0302 	mvn.w	r3, #2
   19954:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
   19958:	4620      	mov	r0, r4
   1995a:	bd70      	pop	{r4, r5, r6, pc}

0001995c <os_arch_init>:

void
os_arch_init(void)
{
   1995c:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1995e:	4a04      	ldr	r2, [pc, #16]	; (19970 <os_arch_init+0x14>)
   19960:	6953      	ldr	r3, [r2, #20]
   19962:	f043 0310 	orr.w	r3, r3, #16
   19966:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   19968:	f7fe fdf4 	bl	18554 <os_init_idle_task>
}
   1996c:	bd08      	pop	{r3, pc}
   1996e:	bf00      	nop
   19970:	e000ed00 	.word	0xe000ed00

00019974 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   19974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   19976:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1997a:	b90c      	cbnz	r4, 19980 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1997c:	2400      	movs	r4, #0
   1997e:	e009      	b.n	19994 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   19980:	2007      	movs	r0, #7
   19982:	e02e      	b.n	199e2 <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   19984:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   19988:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   1998c:	26ff      	movs	r6, #255	; 0xff
   1998e:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   19992:	3401      	adds	r4, #1
   19994:	2cef      	cmp	r4, #239	; 0xef
   19996:	d9f5      	bls.n	19984 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   19998:	f06f 040d 	mvn.w	r4, #13
   1999c:	e007      	b.n	199ae <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   1999e:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   199a0:	4e12      	ldr	r6, [pc, #72]	; (199ec <os_arch_os_init+0x78>)
   199a2:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   199a4:	3510      	adds	r5, #16
   199a6:	4f12      	ldr	r7, [pc, #72]	; (199f0 <os_arch_os_init+0x7c>)
   199a8:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   199ac:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   199ae:	2c25      	cmp	r4, #37	; 0x25
   199b0:	ddf5      	ble.n	1999e <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   199b2:	4c0e      	ldr	r4, [pc, #56]	; (199ec <os_arch_os_init+0x78>)
   199b4:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   199b6:	4e0f      	ldr	r6, [pc, #60]	; (199f4 <os_arch_os_init+0x80>)
   199b8:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   199ba:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   199bc:	4e0e      	ldr	r6, [pc, #56]	; (199f8 <os_arch_os_init+0x84>)
   199be:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   199c0:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   199c2:	4e0e      	ldr	r6, [pc, #56]	; (199fc <os_arch_os_init+0x88>)
   199c4:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   199c6:	25e0      	movs	r5, #224	; 0xe0
   199c8:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   199cc:	2520      	movs	r5, #32
   199ce:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   199d0:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   199d4:	f014 0f01 	tst.w	r4, #1
   199d8:	d004      	beq.n	199e4 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   199da:	f8df c024 	ldr.w	ip, [pc, #36]	; 19a00 <os_arch_os_init+0x8c>
   199de:	df00      	svc	0
        err = OS_OK;
   199e0:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   199e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   199e4:	f7ff ffba 	bl	1995c <os_arch_init>
        err = OS_OK;
   199e8:	2000      	movs	r0, #0
   199ea:	e7fa      	b.n	199e2 <os_arch_os_init+0x6e>
   199ec:	e000ed00 	.word	0xe000ed00
   199f0:	00019b47 	.word	0x00019b47
   199f4:	00019aaf 	.word	0x00019aaf
   199f8:	00019af5 	.word	0x00019af5
   199fc:	00019b3b 	.word	0x00019b3b
   19a00:	0001995d 	.word	0x0001995d

00019a04 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   19a04:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   19a06:	f7ff fd73 	bl	194f0 <os_sched_next_task>
   19a0a:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   19a0c:	f7ff fca8 	bl	19360 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   19a10:	6823      	ldr	r3, [r4, #0]
   19a12:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   19a14:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   19a18:	2106      	movs	r1, #6
   19a1a:	2080      	movs	r0, #128	; 0x80
   19a1c:	f000 fde8 	bl	1a5f0 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   19a20:	4b03      	ldr	r3, [pc, #12]	; (19a30 <os_arch_start+0x2c>)
   19a22:	2201      	movs	r2, #1
   19a24:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   19a26:	4620      	mov	r0, r4
   19a28:	f7ff ff60 	bl	198ec <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   19a2c:	69a0      	ldr	r0, [r4, #24]
   19a2e:	bd10      	pop	{r4, pc}
   19a30:	2000de88 	.word	0x2000de88

00019a34 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   19a34:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   19a36:	4814      	ldr	r0, [pc, #80]	; (19a88 <os_arch_os_start+0x54>)
   19a38:	6800      	ldr	r0, [r0, #0]
   19a3a:	3804      	subs	r0, #4
   19a3c:	f000 f82a 	bl	19a94 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   19a40:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   19a44:	b9d4      	cbnz	r4, 19a7c <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   19a46:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   19a4a:	f004 0403 	and.w	r4, r4, #3
   19a4e:	2c03      	cmp	r4, #3
   19a50:	d808      	bhi.n	19a64 <os_arch_os_start+0x30>
   19a52:	e8df f004 	tbb	[pc, r4]
   19a56:	1515      	.short	0x1515
   19a58:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   19a5a:	4c0c      	ldr	r4, [pc, #48]	; (19a8c <os_arch_os_start+0x58>)
   19a5c:	6824      	ldr	r4, [r4, #0]
   19a5e:	f014 0f01 	tst.w	r4, #1
   19a62:	d10f      	bne.n	19a84 <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
   19a64:	f8df c028 	ldr.w	ip, [pc, #40]	; 19a90 <os_arch_os_start+0x5c>
   19a68:	df00      	svc	0
   19a6a:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
   19a6c:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   19a6e:	4c07      	ldr	r4, [pc, #28]	; (19a8c <os_arch_os_start+0x58>)
   19a70:	6824      	ldr	r4, [r4, #0]
   19a72:	f014 0f01 	tst.w	r4, #1
   19a76:	d1f5      	bne.n	19a64 <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
   19a78:	2008      	movs	r0, #8
   19a7a:	e7f7      	b.n	19a6c <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
   19a7c:	2007      	movs	r0, #7
   19a7e:	e7f5      	b.n	19a6c <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
   19a80:	2008      	movs	r0, #8
   19a82:	e7f3      	b.n	19a6c <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
   19a84:	2008      	movs	r0, #8
   19a86:	e7f1      	b.n	19a6c <os_arch_os_start+0x38>
   19a88:	2000dde8 	.word	0x2000dde8
   19a8c:	2000d9e8 	.word	0x2000d9e8
   19a90:	00019a05 	.word	0x00019a05

00019a94 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   19a94:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   19a98:	4832      	ldr	r0, [pc, #200]	; (19b64 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   19a9a:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   19a9c:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   19a9e:	f380 8814 	msr	CONTROL, r0
        ISB
   19aa2:	f3bf 8f6f 	isb	sy
        BX      LR
   19aa6:	4770      	bx	lr

00019aa8 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   19aa8:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   19aac:	4770      	bx	lr

00019aae <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   19aae:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   19ab2:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   19ab4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   19ab8:	b951      	cbnz	r1, 19ad0 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   19aba:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   19abe:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   19ac0:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   19ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   19ac6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   19aca:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   19ace:	4770      	bx	lr

00019ad0 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   19ad0:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   19ad2:	4a25      	ldr	r2, [pc, #148]	; (19b68 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   19ad4:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   19ad6:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   19ad8:	d809      	bhi.n	19aee <SVC_Done>

        LDR     R4,=SVC_Table-4
   19ada:	4c24      	ldr	r4, [pc, #144]	; (19b6c <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   19adc:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   19ae0:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   19ae4:	47a0      	blx	r4

        MRS     R12,PSP
   19ae6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   19aea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

00019aee <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   19aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   19af2:	4770      	bx	lr

00019af4 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   19af4:	4b1e      	ldr	r3, [pc, #120]	; (19b70 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   19af6:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   19af8:	4b1e      	ldr	r3, [pc, #120]	; (19b74 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   19afa:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   19afc:	4291      	cmp	r1, r2
        IT      EQ
   19afe:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   19b00:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   19b02:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
   19b06:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
   19b0a:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
   19b0c:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
   19b10:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   19b14:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   19b18:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   19b1a:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
   19b1e:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
   19b22:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
   19b26:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
   19b28:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
   19b2c:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
   19b30:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
   19b34:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   19b38:	4770      	bx	lr

00019b3a <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   19b3a:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   19b3c:	f7ff fed1 	bl	198e2 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   19b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   19b44:	4770      	bx	lr

00019b46 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   19b46:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   19b4a:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   19b4c:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   19b50:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   19b54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   19b58:	4668      	mov	r0, sp
        BL      os_default_irq
   19b5a:	f7fe fc61 	bl	18420 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   19b5e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   19b62:	4770      	bx	lr
        LDR     R0,=os_flags
   19b64:	2000d9e8 	.word	0x2000d9e8
        LDR     R2,=SVC_Count
   19b68:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   19b6c:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   19b70:	20000114 	.word	0x20000114
        LDR     R3,=g_current_task      /* Get current task */
   19b74:	2000deb0 	.word	0x2000deb0

00019b78 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   19b78:	b470      	push	{r4, r5, r6}
   19b7a:	f04f 0500 	mov.w	r5, #0
   19b7e:	f022 0603 	bic.w	r6, r2, #3
   19b82:	e005      	b.n	19b90 <test1>

00019b84 <loop1>:
   19b84:	5943      	ldr	r3, [r0, r5]
   19b86:	594c      	ldr	r4, [r1, r5]
   19b88:	42a3      	cmp	r3, r4
   19b8a:	d104      	bne.n	19b96 <res1>
   19b8c:	f105 0504 	add.w	r5, r5, #4

00019b90 <test1>:
   19b90:	42b5      	cmp	r5, r6
   19b92:	d1f7      	bne.n	19b84 <loop1>
   19b94:	e00d      	b.n	19bb2 <test2>

00019b96 <res1>:
   19b96:	ba1b      	rev	r3, r3
   19b98:	ba24      	rev	r4, r4
   19b9a:	1b1b      	subs	r3, r3, r4
   19b9c:	bf8c      	ite	hi
   19b9e:	2301      	movhi	r3, #1
   19ba0:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   19ba4:	e009      	b.n	19bba <done>

00019ba6 <loop2>:
   19ba6:	5d43      	ldrb	r3, [r0, r5]
   19ba8:	5d4c      	ldrb	r4, [r1, r5]
   19baa:	1b1b      	subs	r3, r3, r4
   19bac:	d105      	bne.n	19bba <done>
   19bae:	f105 0501 	add.w	r5, r5, #1

00019bb2 <test2>:
   19bb2:	4295      	cmp	r5, r2
   19bb4:	d1f7      	bne.n	19ba6 <loop2>
   19bb6:	f04f 0300 	mov.w	r3, #0

00019bba <done>:
   19bba:	4618      	mov	r0, r3
   19bbc:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   19bbe:	4770      	bx	lr

00019bc0 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   19bc0:	e001      	b.n	19bc6 <test1>

00019bc2 <loop1>:
   19bc2:	588b      	ldr	r3, [r1, r2]
   19bc4:	5083      	str	r3, [r0, r2]

00019bc6 <test1>:
   19bc6:	3a04      	subs	r2, #4
   19bc8:	d5fb      	bpl.n	19bc2 <loop1>
   19bca:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   19bce:	e001      	b.n	19bd4 <test2>

00019bd0 <loop2>:
   19bd0:	5c8b      	ldrb	r3, [r1, r2]
   19bd2:	5483      	strb	r3, [r0, r2]

00019bd4 <test2>:
   19bd4:	3a01      	subs	r2, #1
   19bd6:	d5fb      	bpl.n	19bd0 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   19bd8:	4770      	bx	lr

00019bda <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   19bda:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   19bdc:	4605      	mov	r5, r0
   19bde:	b2c9      	uxtb	r1, r1
   19be0:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   19be4:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   19be8:	18ab      	adds	r3, r5, r2
   19bea:	2403      	movs	r4, #3
   19bec:	4023      	ands	r3, r4
   19bee:	1ad3      	subs	r3, r2, r3
   19bf0:	d40b      	bmi.n	19c0a <memset+0x30>
   19bf2:	e001      	b.n	19bf8 <memset+0x1e>
   19bf4:	3a01      	subs	r2, #1
   19bf6:	54a9      	strb	r1, [r5, r2]
   19bf8:	429a      	cmp	r2, r3
   19bfa:	d1fb      	bne.n	19bf4 <memset+0x1a>
   19bfc:	e000      	b.n	19c00 <memset+0x26>
   19bfe:	50a9      	str	r1, [r5, r2]
   19c00:	3a04      	subs	r2, #4
   19c02:	d5fc      	bpl.n	19bfe <memset+0x24>
   19c04:	3204      	adds	r2, #4
   19c06:	e000      	b.n	19c0a <memset+0x30>
   19c08:	54a9      	strb	r1, [r5, r2]
   19c0a:	3a01      	subs	r2, #1
   19c0c:	d5fc      	bpl.n	19c08 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   19c0e:	bc30      	pop	{r4, r5}
   19c10:	4770      	bx	lr

00019c12 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   19c12:	b430      	push	{r4, r5}
   19c14:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   19c16:	1c55      	adds	r5, r2, #1
   19c18:	7813      	ldrb	r3, [r2, #0]
   19c1a:	1c4c      	adds	r4, r1, #1
   19c1c:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
   19c1e:	1a18      	subs	r0, r3, r0
   19c20:	d103      	bne.n	19c2a <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
   19c22:	462a      	mov	r2, r5
   19c24:	4621      	mov	r1, r4
		if (d || !ch)
   19c26:	2b00      	cmp	r3, #0
   19c28:	d1f5      	bne.n	19c16 <strcmp+0x4>
			break;
	}

	return d;
}
   19c2a:	bc30      	pop	{r4, r5}
   19c2c:	4770      	bx	lr

00019c2e <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   19c2e:	4603      	mov	r3, r0
	while (*ss)
   19c30:	e000      	b.n	19c34 <strlen+0x6>
		ss++;
   19c32:	3301      	adds	r3, #1
	while (*ss)
   19c34:	781a      	ldrb	r2, [r3, #0]
   19c36:	2a00      	cmp	r2, #0
   19c38:	d1fb      	bne.n	19c32 <strlen+0x4>
	return ss - s;
}
   19c3a:	1a18      	subs	r0, r3, r0
   19c3c:	4770      	bx	lr

00019c3e <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   19c3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19c42:	b082      	sub	sp, #8
   19c44:	e9cd 0100 	strd	r0, r1, [sp]
   19c48:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   19c4a:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   19c4e:	2401      	movs	r4, #1
   19c50:	2500      	movs	r5, #0
    while (num / d >= p->base)
   19c52:	e004      	b.n	19c5e <ui2a+0x20>
        d *= p->base;
   19c54:	fb06 f305 	mul.w	r3, r6, r5
   19c58:	fba4 4506 	umull	r4, r5, r4, r6
   19c5c:	441d      	add	r5, r3
    while (num / d >= p->base)
   19c5e:	4622      	mov	r2, r4
   19c60:	462b      	mov	r3, r5
   19c62:	e9dd 0100 	ldrd	r0, r1, [sp]
   19c66:	f001 febd 	bl	1b9e4 <__aeabi_uldivmod>
   19c6a:	f899 6003 	ldrb.w	r6, [r9, #3]
   19c6e:	2700      	movs	r7, #0
   19c70:	42b9      	cmp	r1, r7
   19c72:	bf08      	it	eq
   19c74:	42b0      	cmpeq	r0, r6
   19c76:	d2ed      	bcs.n	19c54 <ui2a+0x16>
    int n = 0;
   19c78:	f04f 0a00 	mov.w	sl, #0
   19c7c:	e007      	b.n	19c8e <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   19c7e:	2330      	movs	r3, #48	; 0x30
   19c80:	441e      	add	r6, r3
   19c82:	f888 6000 	strb.w	r6, [r8]
            ++n;
   19c86:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   19c8a:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   19c8e:	ea54 0305 	orrs.w	r3, r4, r5
   19c92:	d02e      	beq.n	19cf2 <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   19c94:	4622      	mov	r2, r4
   19c96:	462b      	mov	r3, r5
   19c98:	e9dd 0100 	ldrd	r0, r1, [sp]
   19c9c:	f001 fea2 	bl	1b9e4 <__aeabi_uldivmod>
   19ca0:	4606      	mov	r6, r0
   19ca2:	460f      	mov	r7, r1
        num %= d;
   19ca4:	4622      	mov	r2, r4
   19ca6:	462b      	mov	r3, r5
   19ca8:	e9dd 0100 	ldrd	r0, r1, [sp]
   19cac:	f001 fe9a 	bl	1b9e4 <__aeabi_uldivmod>
   19cb0:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   19cb4:	f899 2003 	ldrb.w	r2, [r9, #3]
   19cb8:	2300      	movs	r3, #0
   19cba:	4620      	mov	r0, r4
   19cbc:	4629      	mov	r1, r5
   19cbe:	f001 fe91 	bl	1b9e4 <__aeabi_uldivmod>
   19cc2:	4604      	mov	r4, r0
   19cc4:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   19cc6:	f1ba 0f00 	cmp.w	sl, #0
   19cca:	d105      	bne.n	19cd8 <ui2a+0x9a>
   19ccc:	ea56 0307 	orrs.w	r3, r6, r7
   19cd0:	d102      	bne.n	19cd8 <ui2a+0x9a>
   19cd2:	ea54 0305 	orrs.w	r3, r4, r5
   19cd6:	d1da      	bne.n	19c8e <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   19cd8:	2f00      	cmp	r7, #0
   19cda:	bf08      	it	eq
   19cdc:	2e0a      	cmpeq	r6, #10
   19cde:	d3ce      	bcc.n	19c7e <ui2a+0x40>
   19ce0:	f899 3002 	ldrb.w	r3, [r9, #2]
   19ce4:	f013 0f04 	tst.w	r3, #4
   19ce8:	d001      	beq.n	19cee <ui2a+0xb0>
   19cea:	2337      	movs	r3, #55	; 0x37
   19cec:	e7c8      	b.n	19c80 <ui2a+0x42>
   19cee:	2357      	movs	r3, #87	; 0x57
   19cf0:	e7c6      	b.n	19c80 <ui2a+0x42>
        }
    }
    *bf = 0;
   19cf2:	2300      	movs	r3, #0
   19cf4:	f888 3000 	strb.w	r3, [r8]
}
   19cf8:	b002      	add	sp, #8
   19cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00019cfe <i2a>:

static void i2a(long long int num, struct param *p)
{
   19cfe:	b508      	push	{r3, lr}
    if (num < 0) {
   19d00:	2800      	cmp	r0, #0
   19d02:	f171 0300 	sbcs.w	r3, r1, #0
   19d06:	db02      	blt.n	19d0e <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   19d08:	f7ff ff99 	bl	19c3e <ui2a>
}
   19d0c:	bd08      	pop	{r3, pc}
        num = -num;
   19d0e:	4240      	negs	r0, r0
   19d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   19d14:	7893      	ldrb	r3, [r2, #2]
   19d16:	f043 0301 	orr.w	r3, r3, #1
   19d1a:	7093      	strb	r3, [r2, #2]
   19d1c:	e7f4      	b.n	19d08 <i2a+0xa>

00019d1e <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   19d1e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   19d22:	b2db      	uxtb	r3, r3
   19d24:	2b09      	cmp	r3, #9
   19d26:	d90b      	bls.n	19d40 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   19d28:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   19d2c:	b2db      	uxtb	r3, r3
   19d2e:	2b05      	cmp	r3, #5
   19d30:	d908      	bls.n	19d44 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   19d32:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   19d36:	b2db      	uxtb	r3, r3
   19d38:	2b05      	cmp	r3, #5
   19d3a:	d805      	bhi.n	19d48 <a2d+0x2a>
        return ch - 'A' + 10;
   19d3c:	3837      	subs	r0, #55	; 0x37
   19d3e:	4770      	bx	lr
        return ch - '0';
   19d40:	3830      	subs	r0, #48	; 0x30
   19d42:	4770      	bx	lr
        return ch - 'a' + 10;
   19d44:	3857      	subs	r0, #87	; 0x57
   19d46:	4770      	bx	lr
    else
        return -1;
   19d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19d4c:	4770      	bx	lr

00019d4e <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   19d4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19d52:	4605      	mov	r5, r0
   19d54:	4688      	mov	r8, r1
   19d56:	4617      	mov	r7, r2
   19d58:	4699      	mov	r9, r3
    const char *p = *src;
   19d5a:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   19d5c:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   19d5e:	4628      	mov	r0, r5
   19d60:	f7ff ffdd 	bl	19d1e <a2d>
   19d64:	2800      	cmp	r0, #0
   19d66:	db06      	blt.n	19d76 <a2i+0x28>
        if (digit > base)
   19d68:	42b8      	cmp	r0, r7
   19d6a:	dc04      	bgt.n	19d76 <a2i+0x28>
            break;
        num = num * base + digit;
   19d6c:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   19d70:	7825      	ldrb	r5, [r4, #0]
   19d72:	3401      	adds	r4, #1
   19d74:	e7f3      	b.n	19d5e <a2i+0x10>
    }
    *src = p;
   19d76:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   19d7a:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   19d7e:	4628      	mov	r0, r5
   19d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00019d84 <putf>:

static int putf(FILE *putp, char c)
{
   19d84:	b500      	push	{lr}
   19d86:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   19d88:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   19d8c:	6803      	ldr	r3, [r0, #0]
   19d8e:	681b      	ldr	r3, [r3, #0]
   19d90:	b14b      	cbz	r3, 19da6 <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   19d92:	2201      	movs	r2, #1
   19d94:	f10d 0107 	add.w	r1, sp, #7
   19d98:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   19d9a:	2801      	cmp	r0, #1
   19d9c:	d005      	beq.n	19daa <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   19d9e:	2000      	movs	r0, #0
    else
        return 1;
}
   19da0:	b003      	add	sp, #12
   19da2:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   19da6:	2000      	movs	r0, #0
   19da8:	e7fa      	b.n	19da0 <putf+0x1c>
        return 1;
   19daa:	2001      	movs	r0, #1
   19dac:	e7f8      	b.n	19da0 <putf+0x1c>
	...

00019db0 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   19db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19db4:	4606      	mov	r6, r0
   19db6:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   19db8:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   19dba:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   19dbc:	e001      	b.n	19dc2 <putchw+0x12>
        n--;
   19dbe:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   19dc0:	4613      	mov	r3, r2
   19dc2:	1c5a      	adds	r2, r3, #1
   19dc4:	781b      	ldrb	r3, [r3, #0]
   19dc6:	b10b      	cbz	r3, 19dcc <putchw+0x1c>
   19dc8:	2c00      	cmp	r4, #0
   19dca:	dcf8      	bgt.n	19dbe <putchw+0xe>
    if (p->sign)
   19dcc:	78bb      	ldrb	r3, [r7, #2]
   19dce:	f013 0f01 	tst.w	r3, #1
   19dd2:	d000      	beq.n	19dd6 <putchw+0x26>
        n--;
   19dd4:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   19dd6:	887b      	ldrh	r3, [r7, #2]
   19dd8:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   19ddc:	b29b      	uxth	r3, r3
   19dde:	f241 0202 	movw	r2, #4098	; 0x1002
   19de2:	4293      	cmp	r3, r2
   19de4:	d01c      	beq.n	19e20 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   19de6:	f640 0202 	movw	r2, #2050	; 0x802
   19dea:	4293      	cmp	r3, r2
   19dec:	d01a      	beq.n	19e24 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   19dee:	683b      	ldr	r3, [r7, #0]
   19df0:	4d35      	ldr	r5, [pc, #212]	; (19ec8 <putchw+0x118>)
   19df2:	401d      	ands	r5, r3
   19df4:	b1f5      	cbz	r5, 19e34 <putchw+0x84>
    unsigned written = 0;
   19df6:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   19df8:	78bb      	ldrb	r3, [r7, #2]
   19dfa:	f013 0f01 	tst.w	r3, #1
   19dfe:	d11f      	bne.n	19e40 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   19e00:	887b      	ldrh	r3, [r7, #2]
   19e02:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   19e06:	b29b      	uxth	r3, r3
   19e08:	f241 0202 	movw	r2, #4098	; 0x1002
   19e0c:	4293      	cmp	r3, r2
   19e0e:	d01d      	beq.n	19e4c <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   19e10:	f640 0202 	movw	r2, #2050	; 0x802
   19e14:	4293      	cmp	r3, r2
   19e16:	d02a      	beq.n	19e6e <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   19e18:	787b      	ldrb	r3, [r7, #1]
   19e1a:	bba3      	cbnz	r3, 19e86 <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   19e1c:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   19e1e:	e03d      	b.n	19e9c <putchw+0xec>
        n -= 2;
   19e20:	3c02      	subs	r4, #2
   19e22:	e7e4      	b.n	19dee <putchw+0x3e>
        n--;
   19e24:	3c01      	subs	r4, #1
   19e26:	e7e2      	b.n	19dee <putchw+0x3e>
            written += putf(putp, ' ');
   19e28:	2120      	movs	r1, #32
   19e2a:	4630      	mov	r0, r6
   19e2c:	f7ff ffaa 	bl	19d84 <putf>
   19e30:	4405      	add	r5, r0
        while (n-- > 0)
   19e32:	4644      	mov	r4, r8
   19e34:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   19e38:	2c00      	cmp	r4, #0
   19e3a:	dcf5      	bgt.n	19e28 <putchw+0x78>
   19e3c:	4644      	mov	r4, r8
   19e3e:	e7db      	b.n	19df8 <putchw+0x48>
        written += putf(putp, '-');
   19e40:	212d      	movs	r1, #45	; 0x2d
   19e42:	4630      	mov	r0, r6
   19e44:	f7ff ff9e 	bl	19d84 <putf>
   19e48:	4405      	add	r5, r0
   19e4a:	e7d9      	b.n	19e00 <putchw+0x50>
        written += putf(putp, '0');
   19e4c:	2130      	movs	r1, #48	; 0x30
   19e4e:	4630      	mov	r0, r6
   19e50:	f7ff ff98 	bl	19d84 <putf>
   19e54:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   19e56:	78bb      	ldrb	r3, [r7, #2]
   19e58:	f013 0f04 	tst.w	r3, #4
   19e5c:	d005      	beq.n	19e6a <putchw+0xba>
   19e5e:	2158      	movs	r1, #88	; 0x58
   19e60:	4630      	mov	r0, r6
   19e62:	f7ff ff8f 	bl	19d84 <putf>
   19e66:	4405      	add	r5, r0
   19e68:	e7d6      	b.n	19e18 <putchw+0x68>
   19e6a:	2178      	movs	r1, #120	; 0x78
   19e6c:	e7f8      	b.n	19e60 <putchw+0xb0>
        written += putf(putp, '0');
   19e6e:	2130      	movs	r1, #48	; 0x30
   19e70:	4630      	mov	r0, r6
   19e72:	f7ff ff87 	bl	19d84 <putf>
   19e76:	4405      	add	r5, r0
   19e78:	e7ce      	b.n	19e18 <putchw+0x68>
            written += putf(putp, '0');
   19e7a:	2130      	movs	r1, #48	; 0x30
   19e7c:	4630      	mov	r0, r6
   19e7e:	f7ff ff81 	bl	19d84 <putf>
   19e82:	4405      	add	r5, r0
        while (n-- > 0)
   19e84:	4644      	mov	r4, r8
   19e86:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   19e8a:	2c00      	cmp	r4, #0
   19e8c:	dcf5      	bgt.n	19e7a <putchw+0xca>
   19e8e:	4644      	mov	r4, r8
   19e90:	e7c4      	b.n	19e1c <putchw+0x6c>
        written += putf(putp, ch);
   19e92:	4630      	mov	r0, r6
   19e94:	f7ff ff76 	bl	19d84 <putf>
   19e98:	4405      	add	r5, r0
    while ((ch = *bf++))
   19e9a:	4643      	mov	r3, r8
   19e9c:	f103 0801 	add.w	r8, r3, #1
   19ea0:	7819      	ldrb	r1, [r3, #0]
   19ea2:	2900      	cmp	r1, #0
   19ea4:	d1f5      	bne.n	19e92 <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   19ea6:	78bb      	ldrb	r3, [r7, #2]
   19ea8:	f013 0f08 	tst.w	r3, #8
   19eac:	d106      	bne.n	19ebc <putchw+0x10c>
   19eae:	e008      	b.n	19ec2 <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   19eb0:	2120      	movs	r1, #32
   19eb2:	4630      	mov	r0, r6
   19eb4:	f7ff ff66 	bl	19d84 <putf>
   19eb8:	4405      	add	r5, r0
        while (n-- > 0)
   19eba:	463c      	mov	r4, r7
   19ebc:	1e67      	subs	r7, r4, #1
   19ebe:	2c00      	cmp	r4, #0
   19ec0:	dcf6      	bgt.n	19eb0 <putchw+0x100>
    }
    
    return written;
}
   19ec2:	4628      	mov	r0, r5
   19ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19ec8:	0008ff00 	.word	0x0008ff00

00019ecc <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   19ecc:	b160      	cbz	r0, 19ee8 <intarg+0x1c>
   19ece:	2801      	cmp	r0, #1
   19ed0:	d017      	beq.n	19f02 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   19ed2:	bb19      	cbnz	r1, 19f1c <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   19ed4:	6813      	ldr	r3, [r2, #0]
   19ed6:	3307      	adds	r3, #7
   19ed8:	f023 0307 	bic.w	r3, r3, #7
   19edc:	f103 0108 	add.w	r1, r3, #8
   19ee0:	6011      	str	r1, [r2, #0]
   19ee2:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   19ee6:	4770      	bx	lr
        if (sign) {
   19ee8:	b129      	cbz	r1, 19ef6 <intarg+0x2a>
            val = va_arg(*va, int);
   19eea:	6813      	ldr	r3, [r2, #0]
   19eec:	1d19      	adds	r1, r3, #4
   19eee:	6011      	str	r1, [r2, #0]
   19ef0:	6818      	ldr	r0, [r3, #0]
   19ef2:	17c1      	asrs	r1, r0, #31
   19ef4:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   19ef6:	6813      	ldr	r3, [r2, #0]
   19ef8:	1d19      	adds	r1, r3, #4
   19efa:	6011      	str	r1, [r2, #0]
   19efc:	6818      	ldr	r0, [r3, #0]
   19efe:	2100      	movs	r1, #0
   19f00:	4770      	bx	lr
        if (sign) {
   19f02:	b129      	cbz	r1, 19f10 <intarg+0x44>
            val = va_arg(*va, long);
   19f04:	6813      	ldr	r3, [r2, #0]
   19f06:	1d19      	adds	r1, r3, #4
   19f08:	6011      	str	r1, [r2, #0]
   19f0a:	6818      	ldr	r0, [r3, #0]
   19f0c:	17c1      	asrs	r1, r0, #31
   19f0e:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   19f10:	6813      	ldr	r3, [r2, #0]
   19f12:	1d19      	adds	r1, r3, #4
   19f14:	6011      	str	r1, [r2, #0]
   19f16:	6818      	ldr	r0, [r3, #0]
   19f18:	2100      	movs	r1, #0
   19f1a:	4770      	bx	lr
            val = va_arg(*va, long long);
   19f1c:	6813      	ldr	r3, [r2, #0]
   19f1e:	3307      	adds	r3, #7
   19f20:	f023 0307 	bic.w	r3, r3, #7
   19f24:	f103 0108 	add.w	r1, r3, #8
   19f28:	6011      	str	r1, [r2, #0]
   19f2a:	e9d3 0100 	ldrd	r0, r1, [r3]
   19f2e:	4770      	bx	lr

00019f30 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   19f30:	b570      	push	{r4, r5, r6, lr}
   19f32:	b08a      	sub	sp, #40	; 0x28
   19f34:	4605      	mov	r5, r0
   19f36:	9101      	str	r1, [sp, #4]
   19f38:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   19f3a:	ab02      	add	r3, sp, #8
   19f3c:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   19f3e:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   19f40:	9b01      	ldr	r3, [sp, #4]
   19f42:	1c5a      	adds	r2, r3, #1
   19f44:	9201      	str	r2, [sp, #4]
   19f46:	7819      	ldrb	r1, [r3, #0]
   19f48:	2900      	cmp	r1, #0
   19f4a:	f000 811c 	beq.w	1a186 <tfp_format+0x256>
        if (ch != '%') {
   19f4e:	2925      	cmp	r1, #37	; 0x25
   19f50:	d004      	beq.n	19f5c <tfp_format+0x2c>
            written += putf(putp, ch);
   19f52:	4628      	mov	r0, r5
   19f54:	f7ff ff16 	bl	19d84 <putf>
   19f58:	4404      	add	r4, r0
   19f5a:	e7f1      	b.n	19f40 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   19f5c:	2200      	movs	r2, #0
   19f5e:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   19f62:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   19f66:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   19f6a:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   19f6e:	f362 0382 	bfi	r3, r2, #2, #1
   19f72:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   19f76:	9b01      	ldr	r3, [sp, #4]
   19f78:	1c5a      	adds	r2, r3, #1
   19f7a:	9201      	str	r2, [sp, #4]
   19f7c:	7818      	ldrb	r0, [r3, #0]
   19f7e:	b128      	cbz	r0, 19f8c <tfp_format+0x5c>
                switch (ch) {
   19f80:	282d      	cmp	r0, #45	; 0x2d
   19f82:	d04e      	beq.n	1a022 <tfp_format+0xf2>
   19f84:	2830      	cmp	r0, #48	; 0x30
   19f86:	d03c      	beq.n	1a002 <tfp_format+0xd2>
   19f88:	2823      	cmp	r0, #35	; 0x23
   19f8a:	d043      	beq.n	1a014 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   19f8c:	282a      	cmp	r0, #42	; 0x2a
   19f8e:	d052      	beq.n	1a036 <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   19f90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   19f94:	b2db      	uxtb	r3, r3
   19f96:	2b09      	cmp	r3, #9
   19f98:	d961      	bls.n	1a05e <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   19f9a:	286c      	cmp	r0, #108	; 0x6c
   19f9c:	d065      	beq.n	1a06a <tfp_format+0x13a>
            lng = 0;
   19f9e:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   19fa0:	287a      	cmp	r0, #122	; 0x7a
   19fa2:	d06f      	beq.n	1a084 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   19fa4:	2869      	cmp	r0, #105	; 0x69
   19fa6:	f000 808e 	beq.w	1a0c6 <tfp_format+0x196>
   19faa:	d970      	bls.n	1a08e <tfp_format+0x15e>
   19fac:	2873      	cmp	r0, #115	; 0x73
   19fae:	f000 80dd 	beq.w	1a16c <tfp_format+0x23c>
   19fb2:	f200 8099 	bhi.w	1a0e8 <tfp_format+0x1b8>
   19fb6:	286f      	cmp	r0, #111	; 0x6f
   19fb8:	f000 80c7 	beq.w	1a14a <tfp_format+0x21a>
   19fbc:	2870      	cmp	r0, #112	; 0x70
   19fbe:	d1bf      	bne.n	19f40 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   19fc0:	9b00      	ldr	r3, [sp, #0]
   19fc2:	1d1a      	adds	r2, r3, #4
   19fc4:	9200      	str	r2, [sp, #0]
   19fc6:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   19fc8:	2310      	movs	r3, #16
   19fca:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   19fce:	aa08      	add	r2, sp, #32
   19fd0:	2100      	movs	r1, #0
   19fd2:	f7ff fe34 	bl	19c3e <ui2a>
                p.width = 2 * sizeof(void*);
   19fd6:	2308      	movs	r3, #8
   19fd8:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   19fdc:	2301      	movs	r3, #1
   19fde:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   19fe2:	2130      	movs	r1, #48	; 0x30
   19fe4:	4628      	mov	r0, r5
   19fe6:	f7ff fecd 	bl	19d84 <putf>
   19fea:	4404      	add	r4, r0
                written += putf(putp, 'x');
   19fec:	2178      	movs	r1, #120	; 0x78
   19fee:	4628      	mov	r0, r5
   19ff0:	f7ff fec8 	bl	19d84 <putf>
   19ff4:	4404      	add	r4, r0
                written += putchw(putp, &p);
   19ff6:	a908      	add	r1, sp, #32
   19ff8:	4628      	mov	r0, r5
   19ffa:	f7ff fed9 	bl	19db0 <putchw>
   19ffe:	4404      	add	r4, r0
                break;
   1a000:	e79e      	b.n	19f40 <tfp_format+0x10>
                    if (!p.left) {
   1a002:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1a006:	f013 0f08 	tst.w	r3, #8
   1a00a:	d1b4      	bne.n	19f76 <tfp_format+0x46>
                        p.lz = 1;
   1a00c:	2301      	movs	r3, #1
   1a00e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1a012:	e7b0      	b.n	19f76 <tfp_format+0x46>
                    p.alt = 1;
   1a014:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1a018:	f043 0302 	orr.w	r3, r3, #2
   1a01c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   1a020:	e7a9      	b.n	19f76 <tfp_format+0x46>
                    p.left = 1;
   1a022:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1a026:	f043 0308 	orr.w	r3, r3, #8
   1a02a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   1a02e:	2300      	movs	r3, #0
   1a030:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1a034:	e79f      	b.n	19f76 <tfp_format+0x46>
                i = intarg(0, 1, &va);
   1a036:	466a      	mov	r2, sp
   1a038:	2101      	movs	r1, #1
   1a03a:	2000      	movs	r0, #0
   1a03c:	f7ff ff46 	bl	19ecc <intarg>
                if (i > UCHAR_MAX) {
   1a040:	28ff      	cmp	r0, #255	; 0xff
   1a042:	dd07      	ble.n	1a054 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   1a044:	23ff      	movs	r3, #255	; 0xff
   1a046:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   1a04a:	9b01      	ldr	r3, [sp, #4]
   1a04c:	1c5a      	adds	r2, r3, #1
   1a04e:	9201      	str	r2, [sp, #4]
   1a050:	7818      	ldrb	r0, [r3, #0]
   1a052:	e7a2      	b.n	19f9a <tfp_format+0x6a>
                } else if (i > 0) {
   1a054:	2800      	cmp	r0, #0
   1a056:	ddf8      	ble.n	1a04a <tfp_format+0x11a>
                    p.width = i;
   1a058:	f88d 0020 	strb.w	r0, [sp, #32]
   1a05c:	e7f5      	b.n	1a04a <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   1a05e:	ab08      	add	r3, sp, #32
   1a060:	220a      	movs	r2, #10
   1a062:	a901      	add	r1, sp, #4
   1a064:	f7ff fe73 	bl	19d4e <a2i>
   1a068:	e797      	b.n	19f9a <tfp_format+0x6a>
                ch = *(fmt++);
   1a06a:	9b01      	ldr	r3, [sp, #4]
   1a06c:	1c5a      	adds	r2, r3, #1
   1a06e:	9201      	str	r2, [sp, #4]
   1a070:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   1a072:	286c      	cmp	r0, #108	; 0x6c
   1a074:	d001      	beq.n	1a07a <tfp_format+0x14a>
                lng = 1;
   1a076:	2601      	movs	r6, #1
   1a078:	e792      	b.n	19fa0 <tfp_format+0x70>
                    ch = *(fmt++);
   1a07a:	1c9a      	adds	r2, r3, #2
   1a07c:	9201      	str	r2, [sp, #4]
   1a07e:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   1a080:	2602      	movs	r6, #2
   1a082:	e78d      	b.n	19fa0 <tfp_format+0x70>
                ch = *(fmt++);
   1a084:	9b01      	ldr	r3, [sp, #4]
   1a086:	1c5a      	adds	r2, r3, #1
   1a088:	9201      	str	r2, [sp, #4]
   1a08a:	7818      	ldrb	r0, [r3, #0]
   1a08c:	e78a      	b.n	19fa4 <tfp_format+0x74>
            switch (ch) {
   1a08e:	2858      	cmp	r0, #88	; 0x58
   1a090:	d040      	beq.n	1a114 <tfp_format+0x1e4>
   1a092:	d80a      	bhi.n	1a0aa <tfp_format+0x17a>
   1a094:	2800      	cmp	r0, #0
   1a096:	d076      	beq.n	1a186 <tfp_format+0x256>
   1a098:	2825      	cmp	r0, #37	; 0x25
   1a09a:	f47f af51 	bne.w	19f40 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   1a09e:	4601      	mov	r1, r0
   1a0a0:	4628      	mov	r0, r5
   1a0a2:	f7ff fe6f 	bl	19d84 <putf>
   1a0a6:	4404      	add	r4, r0
                break;
   1a0a8:	e74a      	b.n	19f40 <tfp_format+0x10>
            switch (ch) {
   1a0aa:	2863      	cmp	r0, #99	; 0x63
   1a0ac:	d108      	bne.n	1a0c0 <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   1a0ae:	9b00      	ldr	r3, [sp, #0]
   1a0b0:	1d1a      	adds	r2, r3, #4
   1a0b2:	9200      	str	r2, [sp, #0]
   1a0b4:	7819      	ldrb	r1, [r3, #0]
   1a0b6:	4628      	mov	r0, r5
   1a0b8:	f7ff fe64 	bl	19d84 <putf>
   1a0bc:	4404      	add	r4, r0
                break;
   1a0be:	e73f      	b.n	19f40 <tfp_format+0x10>
            switch (ch) {
   1a0c0:	2864      	cmp	r0, #100	; 0x64
   1a0c2:	f47f af3d 	bne.w	19f40 <tfp_format+0x10>
                p.base = 10;
   1a0c6:	230a      	movs	r3, #10
   1a0c8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   1a0cc:	466a      	mov	r2, sp
   1a0ce:	2101      	movs	r1, #1
   1a0d0:	4630      	mov	r0, r6
   1a0d2:	f7ff fefb 	bl	19ecc <intarg>
   1a0d6:	aa08      	add	r2, sp, #32
   1a0d8:	f7ff fe11 	bl	19cfe <i2a>
                written += putchw(putp, &p);
   1a0dc:	a908      	add	r1, sp, #32
   1a0de:	4628      	mov	r0, r5
   1a0e0:	f7ff fe66 	bl	19db0 <putchw>
   1a0e4:	4404      	add	r4, r0
                break;
   1a0e6:	e72b      	b.n	19f40 <tfp_format+0x10>
            switch (ch) {
   1a0e8:	2875      	cmp	r0, #117	; 0x75
   1a0ea:	d110      	bne.n	1a10e <tfp_format+0x1de>
                p.base = 10;
   1a0ec:	230a      	movs	r3, #10
   1a0ee:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1a0f2:	466a      	mov	r2, sp
   1a0f4:	2100      	movs	r1, #0
   1a0f6:	4630      	mov	r0, r6
   1a0f8:	f7ff fee8 	bl	19ecc <intarg>
   1a0fc:	aa08      	add	r2, sp, #32
   1a0fe:	f7ff fd9e 	bl	19c3e <ui2a>
                written += putchw(putp, &p);
   1a102:	a908      	add	r1, sp, #32
   1a104:	4628      	mov	r0, r5
   1a106:	f7ff fe53 	bl	19db0 <putchw>
   1a10a:	4404      	add	r4, r0
                break;
   1a10c:	e718      	b.n	19f40 <tfp_format+0x10>
            switch (ch) {
   1a10e:	2878      	cmp	r0, #120	; 0x78
   1a110:	f47f af16 	bne.w	19f40 <tfp_format+0x10>
                p.base = 16;
   1a114:	2310      	movs	r3, #16
   1a116:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   1a11a:	2858      	cmp	r0, #88	; 0x58
   1a11c:	bf14      	ite	ne
   1a11e:	2300      	movne	r3, #0
   1a120:	2301      	moveq	r3, #1
   1a122:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1a126:	f363 0282 	bfi	r2, r3, #2, #1
   1a12a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   1a12e:	466a      	mov	r2, sp
   1a130:	2100      	movs	r1, #0
   1a132:	4630      	mov	r0, r6
   1a134:	f7ff feca 	bl	19ecc <intarg>
   1a138:	aa08      	add	r2, sp, #32
   1a13a:	f7ff fd80 	bl	19c3e <ui2a>
                written += putchw(putp, &p);
   1a13e:	a908      	add	r1, sp, #32
   1a140:	4628      	mov	r0, r5
   1a142:	f7ff fe35 	bl	19db0 <putchw>
   1a146:	4404      	add	r4, r0
                break;
   1a148:	e6fa      	b.n	19f40 <tfp_format+0x10>
                p.base = 8;
   1a14a:	2308      	movs	r3, #8
   1a14c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1a150:	466a      	mov	r2, sp
   1a152:	2100      	movs	r1, #0
   1a154:	4630      	mov	r0, r6
   1a156:	f7ff feb9 	bl	19ecc <intarg>
   1a15a:	aa08      	add	r2, sp, #32
   1a15c:	f7ff fd6f 	bl	19c3e <ui2a>
                written += putchw(putp, &p);
   1a160:	a908      	add	r1, sp, #32
   1a162:	4628      	mov	r0, r5
   1a164:	f7ff fe24 	bl	19db0 <putchw>
   1a168:	4404      	add	r4, r0
                break;
   1a16a:	e6e9      	b.n	19f40 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   1a16c:	9b00      	ldr	r3, [sp, #0]
   1a16e:	1d1a      	adds	r2, r3, #4
   1a170:	9200      	str	r2, [sp, #0]
   1a172:	681b      	ldr	r3, [r3, #0]
   1a174:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   1a176:	a908      	add	r1, sp, #32
   1a178:	4628      	mov	r0, r5
   1a17a:	f7ff fe19 	bl	19db0 <putchw>
   1a17e:	4404      	add	r4, r0
                p.bf = bf;
   1a180:	ab02      	add	r3, sp, #8
   1a182:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   1a184:	e6dc      	b.n	19f40 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   1a186:	4620      	mov	r0, r4
   1a188:	b00a      	add	sp, #40	; 0x28
   1a18a:	bd70      	pop	{r4, r5, r6, pc}

0001a18c <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   1a18c:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   1a18e:	f7ff fecf 	bl	19f30 <tfp_format>
}
   1a192:	bd08      	pop	{r3, pc}

0001a194 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   1a194:	b40f      	push	{r0, r1, r2, r3}
   1a196:	b500      	push	{lr}
   1a198:	b083      	sub	sp, #12
   1a19a:	aa04      	add	r2, sp, #16
   1a19c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1a1a0:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   1a1a2:	4b04      	ldr	r3, [pc, #16]	; (1a1b4 <printf+0x20>)
   1a1a4:	6818      	ldr	r0, [r3, #0]
   1a1a6:	f7ff fff1 	bl	1a18c <vfprintf>
    va_end(va);
    return rv;
}
   1a1aa:	b003      	add	sp, #12
   1a1ac:	f85d eb04 	ldr.w	lr, [sp], #4
   1a1b0:	b004      	add	sp, #16
   1a1b2:	4770      	bx	lr
   1a1b4:	0002639c 	.word	0x0002639c

0001a1b8 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   1a1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a1ba:	b085      	sub	sp, #20
   1a1bc:	4605      	mov	r5, r0
   1a1be:	460c      	mov	r4, r1
   1a1c0:	4616      	mov	r6, r2
   1a1c2:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   1a1c4:	460a      	mov	r2, r1
   1a1c6:	4601      	mov	r1, r0
   1a1c8:	4668      	mov	r0, sp
   1a1ca:	f000 f835 	bl	1a238 <fmemopen_w>
    tfp_format(f, fmt, va);
   1a1ce:	463a      	mov	r2, r7
   1a1d0:	4631      	mov	r1, r6
   1a1d2:	f7ff fead 	bl	19f30 <tfp_format>
    if (size > 0) {
   1a1d6:	b12c      	cbz	r4, 1a1e4 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   1a1d8:	9b02      	ldr	r3, [sp, #8]
   1a1da:	42a3      	cmp	r3, r4
   1a1dc:	d305      	bcc.n	1a1ea <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   1a1de:	3c01      	subs	r4, #1
   1a1e0:	2300      	movs	r3, #0
   1a1e2:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   1a1e4:	9802      	ldr	r0, [sp, #8]
   1a1e6:	b005      	add	sp, #20
   1a1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   1a1ea:	9b01      	ldr	r3, [sp, #4]
   1a1ec:	2200      	movs	r2, #0
   1a1ee:	701a      	strb	r2, [r3, #0]
   1a1f0:	e7f8      	b.n	1a1e4 <vsnprintf+0x2c>
	...

0001a1f4 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   1a1f4:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   1a1f6:	460a      	mov	r2, r1
   1a1f8:	4601      	mov	r1, r0
   1a1fa:	4b02      	ldr	r3, [pc, #8]	; (1a204 <vprintf+0x10>)
   1a1fc:	6818      	ldr	r0, [r3, #0]
   1a1fe:	f7ff ffc5 	bl	1a18c <vfprintf>
}
   1a202:	bd08      	pop	{r3, pc}
   1a204:	0002639c 	.word	0x0002639c

0001a208 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   1a208:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   1a20a:	2500      	movs	r5, #0
    
    while (n--)
   1a20c:	e000      	b.n	1a210 <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   1a20e:	4622      	mov	r2, r4
    while (n--)
   1a210:	1e54      	subs	r4, r2, #1
   1a212:	b16a      	cbz	r2, 1a230 <memfile_write+0x28>
        f->bytes_written++;
   1a214:	6883      	ldr	r3, [r0, #8]
   1a216:	3301      	adds	r3, #1
   1a218:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   1a21a:	68c2      	ldr	r2, [r0, #12]
   1a21c:	4293      	cmp	r3, r2
   1a21e:	d8f6      	bhi.n	1a20e <memfile_write+0x6>
            *f->buffer++ = *bp++;
   1a220:	6843      	ldr	r3, [r0, #4]
   1a222:	1c5a      	adds	r2, r3, #1
   1a224:	6042      	str	r2, [r0, #4]
   1a226:	780a      	ldrb	r2, [r1, #0]
   1a228:	701a      	strb	r2, [r3, #0]
            i++;
   1a22a:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   1a22c:	3101      	adds	r1, #1
   1a22e:	e7ee      	b.n	1a20e <memfile_write+0x6>
        }
    }
    
    return i;
}
   1a230:	4628      	mov	r0, r5
   1a232:	bc30      	pop	{r4, r5}
   1a234:	4770      	bx	lr
	...

0001a238 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   1a238:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   1a23a:	4c04      	ldr	r4, [pc, #16]	; (1a24c <fmemopen_w+0x14>)
   1a23c:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   1a23e:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   1a240:	2100      	movs	r1, #0
   1a242:	6081      	str	r1, [r0, #8]
    storage->size = size;
   1a244:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   1a246:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a24a:	4770      	bx	lr
   1a24c:	00026394 	.word	0x00026394

0001a250 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   1a250:	2000      	movs	r0, #0
   1a252:	4770      	bx	lr

0001a254 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   1a254:	b510      	push	{r4, lr}
   1a256:	4608      	mov	r0, r1
   1a258:	4614      	mov	r4, r2
    console_write(bp, n);
   1a25a:	4611      	mov	r1, r2
   1a25c:	f7fd f9b8 	bl	175d0 <console_write>
    return n;
}
   1a260:	4620      	mov	r0, r4
   1a262:	bd10      	pop	{r4, pc}

0001a264 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
   1a264:	b508      	push	{r3, lr}
    sysinit();
   1a266:	f7fd fa1b 	bl	176a0 <sysinit_start>
   1a26a:	f000 f81b 	bl	1a2a4 <sysinit_app>
   1a26e:	f7fd fa1d 	bl	176ac <sysinit_end>
}
   1a272:	bd08      	pop	{r3, pc}

0001a274 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1a274:	b570      	push	{r4, r5, r6, lr}
   1a276:	b082      	sub	sp, #8
   1a278:	460c      	mov	r4, r1
   1a27a:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   1a27c:	b29d      	uxth	r5, r3
   1a27e:	9b07      	ldr	r3, [sp, #28]
   1a280:	9300      	str	r3, [sp, #0]
   1a282:	4603      	mov	r3, r0
   1a284:	9a06      	ldr	r2, [sp, #24]
   1a286:	4629      	mov	r1, r5
   1a288:	4620      	mov	r0, r4
   1a28a:	f7fe fdeb 	bl	18e64 <os_mempool_init>
    if (rc != 0) {
   1a28e:	b108      	cbz	r0, 1a294 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1a290:	b002      	add	sp, #8
   1a292:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1a294:	462b      	mov	r3, r5
   1a296:	9a06      	ldr	r2, [sp, #24]
   1a298:	b292      	uxth	r2, r2
   1a29a:	4621      	mov	r1, r4
   1a29c:	4630      	mov	r0, r6
   1a29e:	f7fe fc96 	bl	18bce <os_mbuf_pool_init>
   1a2a2:	e7f5      	b.n	1a290 <mem_init_mbuf_pool+0x1c>

0001a2a4 <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
   1a2a4:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1a2a6:	f7fe f9f3 	bl	18690 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   1a2aa:	f001 f985 	bl	1b5b8 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   1a2ae:	f7fd f9a3 	bl	175f8 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
   1a2b2:	f001 fac7 	bl	1b844 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   1a2b6:	f001 f9b7 	bl	1b628 <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   1a2ba:	f001 f8e1 	bl	1b480 <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
   1a2be:	f001 f8f1 	bl	1b4a4 <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   1a2c2:	f001 f8f0 	bl	1b4a6 <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   1a2c6:	f001 f8ef 	bl	1b4a8 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
   1a2ca:	f001 f8ee 	bl	1b4aa <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
   1a2ce:	f001 f8ed 	bl	1b4ac <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   1a2d2:	f000 fbd1 	bl	1aa78 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   1a2d6:	f000 fd1f 	bl	1ad18 <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   1a2da:	f000 ff3d 	bl	1b158 <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   1a2de:	f000 feb3 	bl	1b048 <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   1a2e2:	f000 fe3d 	bl	1af60 <init_sensor_coap>
}
   1a2e6:	bd08      	pop	{r3, pc}

0001a2e8 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   1a2e8:	b908      	cbnz	r0, 1a2ee <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   1a2ea:	4802      	ldr	r0, [pc, #8]	; (1a2f4 <hal_bsp_flash_dev+0xc>)
   1a2ec:	4770      	bx	lr
    }

    return NULL;
   1a2ee:	2000      	movs	r0, #0
}
   1a2f0:	4770      	bx	lr
   1a2f2:	bf00      	nop
   1a2f4:	000263a0 	.word	0x000263a0

0001a2f8 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   1a2f8:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   1a2fa:	f7ed ff61 	bl	81c0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   1a2fe:	f000 fbb3 	bl	1aa68 <nrf52_periph_create>
}
   1a302:	bd08      	pop	{r3, pc}

0001a304 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   1a304:	2300      	movs	r3, #0
   1a306:	4a07      	ldr	r2, [pc, #28]	; (1a324 <nrf52k_flash_wait_ready+0x20>)
   1a308:	4293      	cmp	r3, r2
   1a30a:	dc06      	bgt.n	1a31a <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1a30c:	4a06      	ldr	r2, [pc, #24]	; (1a328 <nrf52k_flash_wait_ready+0x24>)
   1a30e:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1a312:	2a01      	cmp	r2, #1
   1a314:	d004      	beq.n	1a320 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1a316:	3301      	adds	r3, #1
   1a318:	e7f5      	b.n	1a306 <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1a31a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a31e:	4770      	bx	lr
            return 0;
   1a320:	2000      	movs	r0, #0
}
   1a322:	4770      	bx	lr
   1a324:	0001869f 	.word	0x0001869f
   1a328:	4001e000 	.word	0x4001e000

0001a32c <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1a32c:	b538      	push	{r3, r4, r5, lr}
   1a32e:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1a330:	f7ff ffe8 	bl	1a304 <nrf52k_flash_wait_ready>
   1a334:	b9f0      	cbnz	r0, 1a374 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a336:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a33a:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1a33c:	4b0f      	ldr	r3, [pc, #60]	; (1a37c <nrf52k_flash_erase_sector+0x50>)
   1a33e:	2202      	movs	r2, #2
   1a340:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1a344:	f7ff ffde 	bl	1a304 <nrf52k_flash_wait_ready>
   1a348:	b148      	cbz	r0, 1a35e <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   1a34a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1a34e:	4a0b      	ldr	r2, [pc, #44]	; (1a37c <nrf52k_flash_erase_sector+0x50>)
   1a350:	2100      	movs	r1, #0
   1a352:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1a356:	b904      	cbnz	r4, 1a35a <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1a358:	b662      	cpsie	i
    return rc;
}
   1a35a:	4618      	mov	r0, r3
   1a35c:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   1a35e:	4b07      	ldr	r3, [pc, #28]	; (1a37c <nrf52k_flash_erase_sector+0x50>)
   1a360:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1a364:	f7ff ffce 	bl	1a304 <nrf52k_flash_wait_ready>
   1a368:	4603      	mov	r3, r0
   1a36a:	2800      	cmp	r0, #0
   1a36c:	d0ef      	beq.n	1a34e <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1a36e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a372:	e7ec      	b.n	1a34e <nrf52k_flash_erase_sector+0x22>
        return -1;
   1a374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a378:	e7ef      	b.n	1a35a <nrf52k_flash_erase_sector+0x2e>
   1a37a:	bf00      	nop
   1a37c:	4001e000 	.word	0x4001e000

0001a380 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1a380:	2000      	movs	r0, #0
   1a382:	4770      	bx	lr

0001a384 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1a384:	297f      	cmp	r1, #127	; 0x7f
   1a386:	dc06      	bgt.n	1a396 <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1a388:	0309      	lsls	r1, r1, #12
   1a38a:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1a38c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1a390:	601a      	str	r2, [r3, #0]
}
   1a392:	2000      	movs	r0, #0
   1a394:	4770      	bx	lr
{
   1a396:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1a398:	2300      	movs	r3, #0
   1a39a:	461a      	mov	r2, r3
   1a39c:	4619      	mov	r1, r3
   1a39e:	4618      	mov	r0, r3
   1a3a0:	f7fe f818 	bl	183d4 <__assert_func>

0001a3a4 <nrf52k_flash_write>:
{
   1a3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a3a8:	b082      	sub	sp, #8
   1a3aa:	460d      	mov	r5, r1
   1a3ac:	4616      	mov	r6, r2
   1a3ae:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   1a3b0:	f7ff ffa8 	bl	1a304 <nrf52k_flash_wait_ready>
   1a3b4:	2800      	cmp	r0, #0
   1a3b6:	d158      	bne.n	1a46a <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a3b8:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a3bc:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1a3be:	4b2c      	ldr	r3, [pc, #176]	; (1a470 <nrf52k_flash_write+0xcc>)
   1a3c0:	2201      	movs	r2, #1
   1a3c2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1a3c6:	f015 0803 	ands.w	r8, r5, #3
   1a3ca:	d10b      	bne.n	1a3e4 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   1a3cc:	2c03      	cmp	r4, #3
   1a3ce:	d925      	bls.n	1a41c <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   1a3d0:	f7ff ff98 	bl	1a304 <nrf52k_flash_wait_ready>
   1a3d4:	2800      	cmp	r0, #0
   1a3d6:	d139      	bne.n	1a44c <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   1a3d8:	f856 3b04 	ldr.w	r3, [r6], #4
   1a3dc:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1a3e0:	3c04      	subs	r4, #4
   1a3e2:	e7f3      	b.n	1a3cc <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   1a3e4:	f7ff ff8e 	bl	1a304 <nrf52k_flash_wait_ready>
   1a3e8:	bb68      	cbnz	r0, 1a446 <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   1a3ea:	f025 0a03 	bic.w	sl, r5, #3
   1a3ee:	f8da 3000 	ldr.w	r3, [sl]
   1a3f2:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   1a3f4:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   1a3f8:	45a1      	cmp	r9, r4
   1a3fa:	d900      	bls.n	1a3fe <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   1a3fc:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1a3fe:	464a      	mov	r2, r9
   1a400:	4631      	mov	r1, r6
   1a402:	ab01      	add	r3, sp, #4
   1a404:	eb03 0008 	add.w	r0, r3, r8
   1a408:	f7ff fbda 	bl	19bc0 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1a40c:	9b01      	ldr	r3, [sp, #4]
   1a40e:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   1a412:	444d      	add	r5, r9
        num_bytes -= cnt;
   1a414:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   1a418:	444e      	add	r6, r9
   1a41a:	e7d7      	b.n	1a3cc <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1a41c:	b164      	cbz	r4, 1a438 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   1a41e:	682b      	ldr	r3, [r5, #0]
   1a420:	a802      	add	r0, sp, #8
   1a422:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   1a426:	4622      	mov	r2, r4
   1a428:	4631      	mov	r1, r6
   1a42a:	f7ff fbc9 	bl	19bc0 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1a42e:	f7ff ff69 	bl	1a304 <nrf52k_flash_wait_ready>
   1a432:	b9b8      	cbnz	r0, 1a464 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   1a434:	9b01      	ldr	r3, [sp, #4]
   1a436:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   1a438:	f7ff ff64 	bl	1a304 <nrf52k_flash_wait_ready>
   1a43c:	4603      	mov	r3, r0
   1a43e:	b138      	cbz	r0, 1a450 <nrf52k_flash_write+0xac>
        rc = -1;
   1a440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a444:	e004      	b.n	1a450 <nrf52k_flash_write+0xac>
    int rc = -1;
   1a446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a44a:	e001      	b.n	1a450 <nrf52k_flash_write+0xac>
   1a44c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1a450:	4a07      	ldr	r2, [pc, #28]	; (1a470 <nrf52k_flash_write+0xcc>)
   1a452:	2100      	movs	r1, #0
   1a454:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1a458:	b907      	cbnz	r7, 1a45c <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   1a45a:	b662      	cpsie	i
}
   1a45c:	4618      	mov	r0, r3
   1a45e:	b002      	add	sp, #8
   1a460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1a464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a468:	e7f2      	b.n	1a450 <nrf52k_flash_write+0xac>
        return -1;
   1a46a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a46e:	e7f5      	b.n	1a45c <nrf52k_flash_write+0xb8>
   1a470:	4001e000 	.word	0x4001e000

0001a474 <nrf52k_flash_read>:
{
   1a474:	b508      	push	{r3, lr}
   1a476:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1a478:	461a      	mov	r2, r3
   1a47a:	f7ff fba1 	bl	19bc0 <memcpy>
}
   1a47e:	2000      	movs	r0, #0
   1a480:	bd08      	pop	{r3, pc}
	...

0001a484 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   1a484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1a486:	f7ff fa3b 	bl	19900 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   1a48a:	4b31      	ldr	r3, [pc, #196]	; (1a550 <nrf52_timer_handler+0xcc>)
   1a48c:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1a490:	4b30      	ldr	r3, [pc, #192]	; (1a554 <nrf52_timer_handler+0xd0>)
   1a492:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   1a494:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   1a498:	d225      	bcs.n	1a4e6 <nrf52_timer_handler+0x62>
   1a49a:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   1a49c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1a4a0:	d227      	bcs.n	1a4f2 <nrf52_timer_handler+0x6e>
    result = x - y;
   1a4a2:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   1a4a4:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   1a4a8:	d129      	bne.n	1a4fe <nrf52_timer_handler+0x7a>
        return (result & 0x007fffff);
   1a4aa:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1a4ae:	4f29      	ldr	r7, [pc, #164]	; (1a554 <nrf52_timer_handler+0xd0>)
   1a4b0:	683c      	ldr	r4, [r7, #0]
   1a4b2:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   1a4b6:	4628      	mov	r0, r5
   1a4b8:	f7ff f9b0 	bl	1981c <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1a4bc:	4b24      	ldr	r3, [pc, #144]	; (1a550 <nrf52_timer_handler+0xcc>)
   1a4be:	2200      	movs	r2, #0
   1a4c0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1a4c4:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1a4c6:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1a4c8:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1a4cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1a4d0:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1a4d2:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   1a4d4:	f7ff fa1d 	bl	19912 <os_arch_in_critical>
   1a4d8:	bb28      	cbnz	r0, 1a526 <nrf52_timer_handler+0xa2>
   1a4da:	2300      	movs	r3, #0
   1a4dc:	461a      	mov	r2, r3
   1a4de:	4619      	mov	r1, r3
   1a4e0:	4618      	mov	r0, r3
   1a4e2:	f7fd ff77 	bl	183d4 <__assert_func>
    assert(x <= 0xffffff);
   1a4e6:	2300      	movs	r3, #0
   1a4e8:	461a      	mov	r2, r3
   1a4ea:	4619      	mov	r1, r3
   1a4ec:	4618      	mov	r0, r3
   1a4ee:	f7fd ff71 	bl	183d4 <__assert_func>
    assert(y <= 0xffffff);
   1a4f2:	2300      	movs	r3, #0
   1a4f4:	461a      	mov	r2, r3
   1a4f6:	4619      	mov	r1, r3
   1a4f8:	4618      	mov	r0, r3
   1a4fa:	f7fd ff6b 	bl	183d4 <__assert_func>
        return (result | 0xff800000);
   1a4fe:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   1a502:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   1a506:	e7d2      	b.n	1a4ae <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   1a508:	2300      	movs	r3, #0
   1a50a:	461a      	mov	r2, r3
   1a50c:	4619      	mov	r1, r3
   1a50e:	4618      	mov	r0, r3
   1a510:	f7fd ff60 	bl	183d4 <__assert_func>
        return (result | 0xff800000);
   1a514:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   1a518:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   1a51c:	2a02      	cmp	r2, #2
   1a51e:	dc13      	bgt.n	1a548 <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1a520:	4a0c      	ldr	r2, [pc, #48]	; (1a554 <nrf52_timer_handler+0xd0>)
   1a522:	6814      	ldr	r4, [r2, #0]
   1a524:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   1a526:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1a52a:	4a09      	ldr	r2, [pc, #36]	; (1a550 <nrf52_timer_handler+0xcc>)
   1a52c:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1a530:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   1a534:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1a538:	d2e6      	bcs.n	1a508 <nrf52_timer_handler+0x84>
    result = x - y;
   1a53a:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   1a53c:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1a540:	d1e8      	bne.n	1a514 <nrf52_timer_handler+0x90>
        return (result & 0x007fffff);
   1a542:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1a546:	e7e9      	b.n	1a51c <nrf52_timer_handler+0x98>

    OS_EXIT_CRITICAL(sr);
   1a548:	4630      	mov	r0, r6
   1a54a:	f7ff f9df 	bl	1990c <os_arch_restore_sr>
    os_trace_isr_exit();
}
   1a54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a550:	40011000 	.word	0x40011000
   1a554:	2000dec4 	.word	0x2000dec4

0001a558 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1a558:	b538      	push	{r3, r4, r5, lr}
   1a55a:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1a55c:	f7ff f9d9 	bl	19912 <os_arch_in_critical>
   1a560:	b1a0      	cbz	r0, 1a58c <os_tick_idle+0x34>

    if (ticks > 0) {
   1a562:	2d00      	cmp	r5, #0
   1a564:	d038      	beq.n	1a5d8 <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1a566:	4b20      	ldr	r3, [pc, #128]	; (1a5e8 <os_tick_idle+0x90>)
   1a568:	685b      	ldr	r3, [r3, #4]
   1a56a:	42ab      	cmp	r3, r5
   1a56c:	d200      	bcs.n	1a570 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   1a56e:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1a570:	4b1d      	ldr	r3, [pc, #116]	; (1a5e8 <os_tick_idle+0x90>)
   1a572:	689c      	ldr	r4, [r3, #8]
   1a574:	681a      	ldr	r2, [r3, #0]
   1a576:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   1a57a:	f7ff f9ca 	bl	19912 <os_arch_in_critical>
   1a57e:	b9d0      	cbnz	r0, 1a5b6 <os_tick_idle+0x5e>
   1a580:	2300      	movs	r3, #0
   1a582:	461a      	mov	r2, r3
   1a584:	4619      	mov	r1, r3
   1a586:	4618      	mov	r0, r3
   1a588:	f7fd ff24 	bl	183d4 <__assert_func>
    OS_ASSERT_CRITICAL();
   1a58c:	2300      	movs	r3, #0
   1a58e:	461a      	mov	r2, r3
   1a590:	4619      	mov	r1, r3
   1a592:	4618      	mov	r0, r3
   1a594:	f7fd ff1e 	bl	183d4 <__assert_func>
    assert(y <= 0xffffff);
   1a598:	2300      	movs	r3, #0
   1a59a:	461a      	mov	r2, r3
   1a59c:	4619      	mov	r1, r3
   1a59e:	4618      	mov	r0, r3
   1a5a0:	f7fd ff18 	bl	183d4 <__assert_func>
        return (result | 0xff800000);
   1a5a4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1a5a8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   1a5ac:	2b02      	cmp	r3, #2
   1a5ae:	dc13      	bgt.n	1a5d8 <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1a5b0:	4b0d      	ldr	r3, [pc, #52]	; (1a5e8 <os_tick_idle+0x90>)
   1a5b2:	681c      	ldr	r4, [r3, #0]
   1a5b4:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1a5b6:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1a5ba:	4b0c      	ldr	r3, [pc, #48]	; (1a5ec <os_tick_idle+0x94>)
   1a5bc:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1a5c0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1a5c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1a5c8:	d2e6      	bcs.n	1a598 <os_tick_idle+0x40>
    result = x - y;
   1a5ca:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1a5cc:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1a5d0:	d1e8      	bne.n	1a5a4 <os_tick_idle+0x4c>
        return (result & 0x007fffff);
   1a5d2:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1a5d6:	e7e9      	b.n	1a5ac <os_tick_idle+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
   1a5d8:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1a5dc:	bf30      	wfi

    if (ticks > 0) {
   1a5de:	b905      	cbnz	r5, 1a5e2 <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1a5e0:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1a5e2:	f7ff ff4f 	bl	1a484 <nrf52_timer_handler>
}
   1a5e6:	e7fb      	b.n	1a5e0 <os_tick_idle+0x88>
   1a5e8:	2000dec4 	.word	0x2000dec4
   1a5ec:	40011000 	.word	0x40011000

0001a5f0 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1a5f0:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1a5f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a5f6:	fbb3 f3f0 	udiv	r3, r3, r0
   1a5fa:	fb00 f303 	mul.w	r3, r0, r3
   1a5fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1a602:	d136      	bne.n	1a672 <os_tick_init+0x82>
   1a604:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1a606:	4d1e      	ldr	r5, [pc, #120]	; (1a680 <os_tick_init+0x90>)
   1a608:	2600      	movs	r6, #0
   1a60a:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1a60c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a610:	fbb3 f0f0 	udiv	r0, r3, r0
   1a614:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1a616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1a61a:	fbb3 f0f0 	udiv	r0, r3, r0
   1a61e:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1a620:	f7ff f96e 	bl	19900 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a624:	0164      	lsls	r4, r4, #5
   1a626:	b2e4      	uxtb	r4, r4
   1a628:	4b16      	ldr	r3, [pc, #88]	; (1a684 <os_tick_init+0x94>)
   1a62a:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a62e:	4a16      	ldr	r2, [pc, #88]	; (1a688 <os_tick_init+0x98>)
   1a630:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a632:	4916      	ldr	r1, [pc, #88]	; (1a68c <os_tick_init+0x9c>)
   1a634:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a638:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1a63c:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1a63e:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1a642:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1a646:	2201      	movs	r2, #1
   1a648:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1a64a:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1a64c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a650:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1a654:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1a658:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1a65c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1a660:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1a664:	6829      	ldr	r1, [r5, #0]
   1a666:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1a66a:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1a66c:	f7ff f94e 	bl	1990c <os_arch_restore_sr>
}
   1a670:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1a672:	2300      	movs	r3, #0
   1a674:	461a      	mov	r2, r3
   1a676:	4619      	mov	r1, r3
   1a678:	4618      	mov	r0, r3
   1a67a:	f7fd feab 	bl	183d4 <__assert_func>
   1a67e:	bf00      	nop
   1a680:	2000dec4 	.word	0x2000dec4
   1a684:	e000e100 	.word	0xe000e100
   1a688:	e000ed00 	.word	0xe000ed00
   1a68c:	0001a485 	.word	0x0001a485

0001a690 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1a690:	2301      	movs	r3, #1
   1a692:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1a694:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1a698:	4770      	bx	lr
	...

0001a69c <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1a69c:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1a69e:	7883      	ldrb	r3, [r0, #2]
   1a6a0:	b393      	cbz	r3, 1a708 <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1a6a2:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1a6a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1a6a8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1a6ac:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1a6ae:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1a6b2:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1a6b6:	b11d      	cbz	r5, 1a6c0 <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
   1a6b8:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1a6bc:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1a6c0:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1a6c2:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1a6c4:	2b02      	cmp	r3, #2
   1a6c6:	dc0e      	bgt.n	1a6e6 <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1a6c8:	7842      	ldrb	r2, [r0, #1]
   1a6ca:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1a6cc:	2b00      	cmp	r3, #0
   1a6ce:	db15      	blt.n	1a6fc <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a6d0:	f002 021f 	and.w	r2, r2, #31
   1a6d4:	095b      	lsrs	r3, r3, #5
   1a6d6:	2101      	movs	r1, #1
   1a6d8:	fa01 f202 	lsl.w	r2, r1, r2
   1a6dc:	3340      	adds	r3, #64	; 0x40
   1a6de:	491b      	ldr	r1, [pc, #108]	; (1a74c <nrf_timer_set_ocmp+0xb0>)
   1a6e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1a6e4:	e00a      	b.n	1a6fc <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
   1a6e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1a6ea:	d208      	bcs.n	1a6fe <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1a6ec:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1a6f0:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1a6f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1a6f8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1a6fc:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1a6fe:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1a702:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1a706:	e7f5      	b.n	1a6f4 <nrf_timer_set_ocmp+0x58>
   1a708:	460d      	mov	r5, r1
   1a70a:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1a70c:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1a70e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1a712:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1a716:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1a71a:	2200      	movs	r2, #0
   1a71c:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1a720:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1a724:	f7ff ffb4 	bl	1a690 <nrf_read_timer_cntr>
   1a728:	1b40      	subs	r0, r0, r5
   1a72a:	2800      	cmp	r0, #0
   1a72c:	dbe6      	blt.n	1a6fc <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1a72e:	7862      	ldrb	r2, [r4, #1]
   1a730:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1a732:	2b00      	cmp	r3, #0
   1a734:	dbe2      	blt.n	1a6fc <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a736:	f002 021f 	and.w	r2, r2, #31
   1a73a:	095b      	lsrs	r3, r3, #5
   1a73c:	2101      	movs	r1, #1
   1a73e:	fa01 f202 	lsl.w	r2, r1, r2
   1a742:	3340      	adds	r3, #64	; 0x40
   1a744:	4901      	ldr	r1, [pc, #4]	; (1a74c <nrf_timer_set_ocmp+0xb0>)
   1a746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1a74a:	e7d7      	b.n	1a6fc <nrf_timer_set_ocmp+0x60>
   1a74c:	e000e100 	.word	0xe000e100

0001a750 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1a750:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1a754:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1a758:	4770      	bx	lr

0001a75a <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1a75a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1a75e:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1a762:	4770      	bx	lr

0001a764 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1a764:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1a766:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a768:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a76c:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1a76e:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1a770:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1a774:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1a778:	b1ad      	cbz	r5, 1a7a6 <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1a77a:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1a77e:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1a780:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1a784:	2500      	movs	r5, #0
   1a786:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1a78a:	7840      	ldrb	r0, [r0, #1]
   1a78c:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1a78e:	42aa      	cmp	r2, r5
   1a790:	db09      	blt.n	1a7a6 <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a792:	f000 001f 	and.w	r0, r0, #31
   1a796:	0952      	lsrs	r2, r2, #5
   1a798:	2501      	movs	r5, #1
   1a79a:	fa05 f000 	lsl.w	r0, r5, r0
   1a79e:	3240      	adds	r2, #64	; 0x40
   1a7a0:	4d04      	ldr	r5, [pc, #16]	; (1a7b4 <hal_timer_read_bsptimer+0x50>)
   1a7a2:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1a7a6:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1a7aa:	b904      	cbnz	r4, 1a7ae <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1a7ac:	b662      	cpsie	i

    return tcntr;
}
   1a7ae:	bc30      	pop	{r4, r5}
   1a7b0:	4770      	bx	lr
   1a7b2:	bf00      	nop
   1a7b4:	e000e100 	.word	0xe000e100

0001a7b8 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1a7b8:	b570      	push	{r4, r5, r6, lr}
   1a7ba:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a7bc:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a7c0:	b672      	cpsid	i
   1a7c2:	e013      	b.n	1a7ec <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1a7c4:	6928      	ldr	r0, [r5, #16]
   1a7c6:	f7ff ff63 	bl	1a690 <nrf_read_timer_cntr>
            delta = 0;
   1a7ca:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1a7cc:	68e3      	ldr	r3, [r4, #12]
   1a7ce:	1ac0      	subs	r0, r0, r3
   1a7d0:	4290      	cmp	r0, r2
   1a7d2:	db19      	blt.n	1a808 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1a7d4:	6923      	ldr	r3, [r4, #16]
   1a7d6:	b1a3      	cbz	r3, 1a802 <hal_timer_chk_queue+0x4a>
   1a7d8:	6962      	ldr	r2, [r4, #20]
   1a7da:	615a      	str	r2, [r3, #20]
   1a7dc:	6963      	ldr	r3, [r4, #20]
   1a7de:	6922      	ldr	r2, [r4, #16]
   1a7e0:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1a7e2:	2300      	movs	r3, #0
   1a7e4:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1a7e6:	6863      	ldr	r3, [r4, #4]
   1a7e8:	68a0      	ldr	r0, [r4, #8]
   1a7ea:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1a7ec:	696c      	ldr	r4, [r5, #20]
   1a7ee:	b15c      	cbz	r4, 1a808 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1a7f0:	78ab      	ldrb	r3, [r5, #2]
   1a7f2:	2b00      	cmp	r3, #0
   1a7f4:	d0e6      	beq.n	1a7c4 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1a7f6:	4628      	mov	r0, r5
   1a7f8:	f7ff ffb4 	bl	1a764 <hal_timer_read_bsptimer>
            delta = -3;
   1a7fc:	f06f 0202 	mvn.w	r2, #2
   1a800:	e7e4      	b.n	1a7cc <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1a802:	6963      	ldr	r3, [r4, #20]
   1a804:	61ab      	str	r3, [r5, #24]
   1a806:	e7e9      	b.n	1a7dc <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1a808:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1a80a:	b133      	cbz	r3, 1a81a <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1a80c:	68d9      	ldr	r1, [r3, #12]
   1a80e:	4628      	mov	r0, r5
   1a810:	f7ff ff44 	bl	1a69c <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1a814:	b906      	cbnz	r6, 1a818 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1a816:	b662      	cpsie	i
}
   1a818:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1a81a:	78ab      	ldrb	r3, [r5, #2]
   1a81c:	b11b      	cbz	r3, 1a826 <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1a81e:	6928      	ldr	r0, [r5, #16]
   1a820:	f7ff ff9b 	bl	1a75a <nrf_rtc_disable_ocmp>
   1a824:	e7f6      	b.n	1a814 <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1a826:	6928      	ldr	r0, [r5, #16]
   1a828:	f7ff ff92 	bl	1a750 <nrf_timer_disable_ocmp>
   1a82c:	e7f2      	b.n	1a814 <hal_timer_chk_queue+0x5c>

0001a82e <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1a82e:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1a830:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1a832:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1a836:	b113      	cbz	r3, 1a83e <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1a838:	2300      	movs	r3, #0
   1a83a:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1a83e:	6883      	ldr	r3, [r0, #8]
   1a840:	3301      	adds	r3, #1
   1a842:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1a844:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1a848:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1a84c:	d100      	bne.n	1a850 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1a84e:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1a850:	f7ff ffb2 	bl	1a7b8 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1a854:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1a858:	e7f9      	b.n	1a84e <hal_timer_irq_handler+0x20>
	...

0001a85c <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1a85c:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1a85e:	4802      	ldr	r0, [pc, #8]	; (1a868 <nrf52_timer0_irq_handler+0xc>)
   1a860:	f7ff ffe5 	bl	1a82e <hal_timer_irq_handler>
}
   1a864:	bd08      	pop	{r3, pc}
   1a866:	bf00      	nop
   1a868:	2000ded0 	.word	0x2000ded0

0001a86c <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1a86c:	2805      	cmp	r0, #5
   1a86e:	dc1c      	bgt.n	1a8aa <hal_timer_init+0x3e>
   1a870:	4b12      	ldr	r3, [pc, #72]	; (1a8bc <hal_timer_init+0x50>)
   1a872:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1a876:	b1d3      	cbz	r3, 1a8ae <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1a878:	781a      	ldrb	r2, [r3, #0]
   1a87a:	b9d2      	cbnz	r2, 1a8b2 <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1a87c:	b9d8      	cbnz	r0, 1a8b6 <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1a87e:	4a10      	ldr	r2, [pc, #64]	; (1a8c0 <hal_timer_init+0x54>)
   1a880:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1a882:	2208      	movs	r2, #8
   1a884:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a886:	4b0f      	ldr	r3, [pc, #60]	; (1a8c4 <hal_timer_init+0x58>)
   1a888:	f44f 7280 	mov.w	r2, #256	; 0x100
   1a88c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1a890:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1a894:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a898:	22e0      	movs	r2, #224	; 0xe0
   1a89a:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a89e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1a8a2:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a8a4:	4a08      	ldr	r2, [pc, #32]	; (1a8c8 <hal_timer_init+0x5c>)
   1a8a6:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1a8a8:	4770      	bx	lr

err:
    return rc;
   1a8aa:	2016      	movs	r0, #22
   1a8ac:	4770      	bx	lr
   1a8ae:	2016      	movs	r0, #22
   1a8b0:	4770      	bx	lr
   1a8b2:	2016      	movs	r0, #22
   1a8b4:	4770      	bx	lr
   1a8b6:	2016      	movs	r0, #22
}
   1a8b8:	4770      	bx	lr
   1a8ba:	bf00      	nop
   1a8bc:	000263d4 	.word	0x000263d4
   1a8c0:	40008000 	.word	0x40008000
   1a8c4:	e000e100 	.word	0xe000e100
   1a8c8:	0001a85d 	.word	0x0001a85d

0001a8cc <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1a8cc:	2805      	cmp	r0, #5
   1a8ce:	dc65      	bgt.n	1a99c <hal_timer_config+0xd0>
   1a8d0:	4b39      	ldr	r3, [pc, #228]	; (1a9b8 <hal_timer_config+0xec>)
   1a8d2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a8d6:	2800      	cmp	r0, #0
   1a8d8:	d062      	beq.n	1a9a0 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1a8da:	4b38      	ldr	r3, [pc, #224]	; (1a9bc <hal_timer_config+0xf0>)
   1a8dc:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1a8e0:	7803      	ldrb	r3, [r0, #0]
   1a8e2:	2b00      	cmp	r3, #0
   1a8e4:	d15e      	bne.n	1a9a4 <hal_timer_config+0xd8>
   1a8e6:	2900      	cmp	r1, #0
   1a8e8:	d05e      	beq.n	1a9a8 <hal_timer_config+0xdc>
   1a8ea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1a8ee:	d85d      	bhi.n	1a9ac <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
   1a8f0:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1a8f2:	2a00      	cmp	r2, #0
   1a8f4:	d05c      	beq.n	1a9b0 <hal_timer_config+0xe4>
{
   1a8f6:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1a8f8:	2901      	cmp	r1, #1
   1a8fa:	d013      	beq.n	1a924 <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1a8fc:	2301      	movs	r3, #1
   1a8fe:	2b09      	cmp	r3, #9
   1a900:	d810      	bhi.n	1a924 <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
   1a902:	2201      	movs	r2, #1
   1a904:	409a      	lsls	r2, r3
   1a906:	428a      	cmp	r2, r1
   1a908:	d202      	bcs.n	1a910 <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1a90a:	3301      	adds	r3, #1
   1a90c:	b2db      	uxtb	r3, r3
   1a90e:	e7f6      	b.n	1a8fe <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
   1a910:	1e5c      	subs	r4, r3, #1
   1a912:	2501      	movs	r5, #1
   1a914:	fa05 f404 	lsl.w	r4, r5, r4
   1a918:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
   1a91a:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1a91c:	428c      	cmp	r4, r1
   1a91e:	d201      	bcs.n	1a924 <hal_timer_config+0x58>
                    prescaler -= 1;
   1a920:	3b01      	subs	r3, #1
   1a922:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1a924:	4a25      	ldr	r2, [pc, #148]	; (1a9bc <hal_timer_config+0xf0>)
   1a926:	411a      	asrs	r2, r3
   1a928:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
   1a92a:	2201      	movs	r2, #1
   1a92c:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a92e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a932:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1a934:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a938:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1a93c:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1a940:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1a944:	d00c      	beq.n	1a960 <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1a946:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a94a:	2100      	movs	r1, #0
   1a94c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1a950:	2101      	movs	r1, #1
   1a952:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1a954:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a958:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1a95c:	2a00      	cmp	r2, #0
   1a95e:	d0f9      	beq.n	1a954 <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1a960:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1a962:	2101      	movs	r1, #1
   1a964:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1a966:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1a968:	2500      	movs	r5, #0
   1a96a:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1a96e:	2503      	movs	r5, #3
   1a970:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1a974:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1a978:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1a97a:	7842      	ldrb	r2, [r0, #1]
   1a97c:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1a97e:	2b00      	cmp	r3, #0
   1a980:	db07      	blt.n	1a992 <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a982:	f002 021f 	and.w	r2, r2, #31
   1a986:	095b      	lsrs	r3, r3, #5
   1a988:	fa01 f202 	lsl.w	r2, r1, r2
   1a98c:	490c      	ldr	r1, [pc, #48]	; (1a9c0 <hal_timer_config+0xf4>)
   1a98e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1a992:	b97c      	cbnz	r4, 1a9b4 <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
   1a994:	b662      	cpsie	i

    return 0;
   1a996:	2000      	movs	r0, #0

err:
    return rc;
}
   1a998:	bc30      	pop	{r4, r5}
   1a99a:	4770      	bx	lr
    return rc;
   1a99c:	2016      	movs	r0, #22
   1a99e:	4770      	bx	lr
   1a9a0:	2016      	movs	r0, #22
   1a9a2:	4770      	bx	lr
   1a9a4:	2016      	movs	r0, #22
   1a9a6:	4770      	bx	lr
   1a9a8:	2016      	movs	r0, #22
   1a9aa:	4770      	bx	lr
   1a9ac:	2016      	movs	r0, #22
   1a9ae:	4770      	bx	lr
   1a9b0:	2016      	movs	r0, #22
}
   1a9b2:	4770      	bx	lr
    return 0;
   1a9b4:	2000      	movs	r0, #0
   1a9b6:	e7ef      	b.n	1a998 <hal_timer_config+0xcc>
   1a9b8:	000263d4 	.word	0x000263d4
   1a9bc:	00f42400 	.word	0x00f42400
   1a9c0:	e000e100 	.word	0xe000e100

0001a9c4 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1a9c4:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1a9c6:	2805      	cmp	r0, #5
   1a9c8:	dc0c      	bgt.n	1a9e4 <hal_timer_read+0x20>
   1a9ca:	4b09      	ldr	r3, [pc, #36]	; (1a9f0 <hal_timer_read+0x2c>)
   1a9cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a9d0:	b140      	cbz	r0, 1a9e4 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1a9d2:	7883      	ldrb	r3, [r0, #2]
   1a9d4:	b91b      	cbnz	r3, 1a9de <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1a9d6:	6900      	ldr	r0, [r0, #16]
   1a9d8:	f7ff fe5a 	bl	1a690 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1a9dc:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1a9de:	f7ff fec1 	bl	1a764 <hal_timer_read_bsptimer>
   1a9e2:	e7fb      	b.n	1a9dc <hal_timer_read+0x18>
    assert(0);
   1a9e4:	2300      	movs	r3, #0
   1a9e6:	461a      	mov	r2, r3
   1a9e8:	4619      	mov	r1, r3
   1a9ea:	4618      	mov	r0, r3
   1a9ec:	f7fd fcf2 	bl	183d4 <__assert_func>
   1a9f0:	000263d4 	.word	0x000263d4

0001a9f4 <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
   1a9f4:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1a9f6:	2100      	movs	r1, #0
   1a9f8:	4608      	mov	r0, r1
   1a9fa:	f7ff ff37 	bl	1a86c <hal_timer_init>
    assert(rc == 0);
   1a9fe:	b920      	cbnz	r0, 1aa0a <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1aa00:	4808      	ldr	r0, [pc, #32]	; (1aa24 <nrf52_periph_create_timers+0x30>)
   1aa02:	f7fd ff11 	bl	18828 <os_cputime_init>
    assert(rc == 0);
   1aa06:	b930      	cbnz	r0, 1aa16 <nrf52_periph_create_timers+0x22>
#endif
}
   1aa08:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1aa0a:	2300      	movs	r3, #0
   1aa0c:	461a      	mov	r2, r3
   1aa0e:	4619      	mov	r1, r3
   1aa10:	4618      	mov	r0, r3
   1aa12:	f7fd fcdf 	bl	183d4 <__assert_func>
    assert(rc == 0);
   1aa16:	2300      	movs	r3, #0
   1aa18:	461a      	mov	r2, r3
   1aa1a:	4619      	mov	r1, r3
   1aa1c:	4618      	mov	r0, r3
   1aa1e:	f7fd fcd9 	bl	183d4 <__assert_func>
   1aa22:	bf00      	nop
   1aa24:	000f4240 	.word	0x000f4240

0001aa28 <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   1aa28:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   1aa2a:	4906      	ldr	r1, [pc, #24]	; (1aa44 <nrf52_periph_create_i2c+0x1c>)
   1aa2c:	2001      	movs	r0, #1
   1aa2e:	f7fd f82b 	bl	17a88 <hal_i2c_init>
    assert(rc == 0);
   1aa32:	b900      	cbnz	r0, 1aa36 <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   1aa34:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1aa36:	2300      	movs	r3, #0
   1aa38:	461a      	mov	r2, r3
   1aa3a:	4619      	mov	r1, r3
   1aa3c:	4618      	mov	r0, r3
   1aa3e:	f7fd fcc9 	bl	183d4 <__assert_func>
   1aa42:	bf00      	nop
   1aa44:	000263ec 	.word	0x000263ec

0001aa48 <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   1aa48:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1aa4a:	2200      	movs	r2, #0
   1aa4c:	4905      	ldr	r1, [pc, #20]	; (1aa64 <nrf52_periph_create_spi+0x1c>)
   1aa4e:	4610      	mov	r0, r2
   1aa50:	f7fd fb4e 	bl	180f0 <hal_spi_init>
    assert(rc == 0);
   1aa54:	b900      	cbnz	r0, 1aa58 <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
   1aa56:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1aa58:	2300      	movs	r3, #0
   1aa5a:	461a      	mov	r2, r3
   1aa5c:	4619      	mov	r1, r3
   1aa5e:	4618      	mov	r0, r3
   1aa60:	f7fd fcb8 	bl	183d4 <__assert_func>
   1aa64:	000263f8 	.word	0x000263f8

0001aa68 <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1aa68:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1aa6a:	f7ff ffc3 	bl	1a9f4 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1aa6e:	f7ff ffdb 	bl	1aa28 <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1aa72:	f7ff ffe9 	bl	1aa48 <nrf52_periph_create_spi>
}
   1aa76:	bd08      	pop	{r3, pc}

0001aa78 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1aa78:	4770      	bx	lr
	...

0001aa7c <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   1aa7c:	4b08      	ldr	r3, [pc, #32]	; (1aaa0 <sensor_mgr_remove+0x24>)
   1aa7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1aa80:	4282      	cmp	r2, r0
   1aa82:	d104      	bne.n	1aa8e <sensor_mgr_remove+0x12>
   1aa84:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   1aa88:	631a      	str	r2, [r3, #48]	; 0x30
   1aa8a:	4770      	bx	lr
   1aa8c:	461a      	mov	r2, r3
   1aa8e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1aa92:	4283      	cmp	r3, r0
   1aa94:	d1fa      	bne.n	1aa8c <sensor_mgr_remove+0x10>
   1aa96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1aa9a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1aa9e:	4770      	bx	lr
   1aaa0:	2000def0 	.word	0x2000def0

0001aaa4 <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   1aaa4:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   1aaa6:	6a03      	ldr	r3, [r0, #32]
   1aaa8:	b993      	cbnz	r3, 1aad0 <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1aaaa:	4b15      	ldr	r3, [pc, #84]	; (1ab00 <sensor_mgr_insert+0x5c>)
   1aaac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1aaae:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1aab0:	e002      	b.n	1aab8 <sensor_mgr_insert+0x14>
            prev = cursor;
   1aab2:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1aab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1aab8:	2b00      	cmp	r3, #0
   1aaba:	d1fa      	bne.n	1aab2 <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   1aabc:	b1c9      	cbz	r1, 1aaf2 <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1aabe:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1aac2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   1aac6:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   1aaca:	f85d 4b04 	ldr.w	r4, [sp], #4
   1aace:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1aad0:	4b0b      	ldr	r3, [pc, #44]	; (1ab00 <sensor_mgr_insert+0x5c>)
   1aad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1aad4:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1aad6:	2b00      	cmp	r3, #0
   1aad8:	d0f0      	beq.n	1aabc <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   1aada:	6a1a      	ldr	r2, [r3, #32]
   1aadc:	2a00      	cmp	r2, #0
   1aade:	d0ed      	beq.n	1aabc <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   1aae0:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1aae2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1aae4:	1b12      	subs	r2, r2, r4
   1aae6:	2a00      	cmp	r2, #0
   1aae8:	dbe8      	blt.n	1aabc <sensor_mgr_insert+0x18>
        prev = cursor;
   1aaea:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1aaec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1aaf0:	e7f1      	b.n	1aad6 <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   1aaf2:	4b03      	ldr	r3, [pc, #12]	; (1ab00 <sensor_mgr_insert+0x5c>)
   1aaf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1aaf6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   1aafa:	6318      	str	r0, [r3, #48]	; 0x30
   1aafc:	e7e5      	b.n	1aaca <sensor_mgr_insert+0x26>
   1aafe:	bf00      	nop
   1ab00:	2000def0 	.word	0x2000def0

0001ab04 <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   1ab04:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   1ab06:	fab0 f080 	clz	r0, r0
   1ab0a:	0940      	lsrs	r0, r0, #5
   1ab0c:	4770      	bx	lr
	...

0001ab10 <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   1ab10:	4b01      	ldr	r3, [pc, #4]	; (1ab18 <sensor_mgr_evq_set+0x8>)
   1ab12:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   1ab14:	4770      	bx	lr
   1ab16:	bf00      	nop
   1ab18:	2000def0 	.word	0x2000def0

0001ab1c <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   1ab1c:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   1ab20:	e9d1 2300 	ldrd	r2, r3, [r1]
   1ab24:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1ab28:	ea02 0b04 	and.w	fp, r2, r4
   1ab2c:	ea03 0c05 	and.w	ip, r3, r5
   1ab30:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   1ab34:	ea0b 0200 	and.w	r2, fp, r0
   1ab38:	ea0c 0301 	and.w	r3, ip, r1
   1ab3c:	4313      	orrs	r3, r2
}
   1ab3e:	bf14      	ite	ne
   1ab40:	2001      	movne	r0, #1
   1ab42:	2000      	moveq	r0, #0
   1ab44:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1ab48:	4770      	bx	lr

0001ab4a <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   1ab4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ab4e:	b083      	sub	sp, #12
   1ab50:	4605      	mov	r5, r0
   1ab52:	4689      	mov	r9, r1
   1ab54:	4690      	mov	r8, r2
   1ab56:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   1ab5a:	790b      	ldrb	r3, [r1, #4]
   1ab5c:	2b01      	cmp	r3, #1
   1ab5e:	d013      	beq.n	1ab88 <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1ab60:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1ab62:	e000      	b.n	1ab66 <sensor_read_data_func+0x1c>
   1ab64:	6924      	ldr	r4, [r4, #16]
   1ab66:	b17c      	cbz	r4, 1ab88 <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   1ab68:	e9d4 0100 	ldrd	r0, r1, [r4]
   1ab6c:	ea00 0206 	and.w	r2, r0, r6
   1ab70:	ea01 0307 	and.w	r3, r1, r7
   1ab74:	4313      	orrs	r3, r2
   1ab76:	d0f5      	beq.n	1ab64 <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   1ab78:	68a3      	ldr	r3, [r4, #8]
   1ab7a:	68e1      	ldr	r1, [r4, #12]
   1ab7c:	e9cd 6700 	strd	r6, r7, [sp]
   1ab80:	4642      	mov	r2, r8
   1ab82:	4628      	mov	r0, r5
   1ab84:	4798      	blx	r3
   1ab86:	e7ed      	b.n	1ab64 <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   1ab88:	f8d9 3000 	ldr.w	r3, [r9]
   1ab8c:	b14b      	cbz	r3, 1aba2 <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1ab8e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1ab92:	e9cd 6700 	strd	r6, r7, [sp]
   1ab96:	4642      	mov	r2, r8
   1ab98:	4628      	mov	r0, r5
   1ab9a:	4798      	blx	r3
    }

    return (0);
}
   1ab9c:	b003      	add	sp, #12
   1ab9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1aba2:	2000      	movs	r0, #0
   1aba4:	e7fa      	b.n	1ab9c <sensor_read_data_func+0x52>
	...

0001aba8 <sensor_base_ts_update_event>:
{
   1aba8:	b530      	push	{r4, r5, lr}
   1abaa:	b087      	sub	sp, #28
    ticks = os_time_get();
   1abac:	f7fe fe30 	bl	19810 <os_time_get>
   1abb0:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1abb2:	a901      	add	r1, sp, #4
   1abb4:	a802      	add	r0, sp, #8
   1abb6:	f7fe fe65 	bl	19884 <os_gettimeofday>
    if (rc) {
   1abba:	b138      	cbz	r0, 1abcc <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   1abbc:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1abc0:	4621      	mov	r1, r4
   1abc2:	4809      	ldr	r0, [pc, #36]	; (1abe8 <sensor_base_ts_update_event+0x40>)
   1abc4:	f7fd fdac 	bl	18720 <os_callout_reset>
}
   1abc8:	b007      	add	sp, #28
   1abca:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   1abcc:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   1abd0:	4d06      	ldr	r5, [pc, #24]	; (1abec <sensor_base_ts_update_event+0x44>)
   1abd2:	ab06      	add	r3, sp, #24
   1abd4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1abd8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1abdc:	9b01      	ldr	r3, [sp, #4]
   1abde:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1abe0:	f7fd fe28 	bl	18834 <os_cputime_get32>
   1abe4:	6168      	str	r0, [r5, #20]
   1abe6:	e7eb      	b.n	1abc0 <sensor_base_ts_update_event+0x18>
   1abe8:	2000df24 	.word	0x2000df24
   1abec:	2000df48 	.word	0x2000df48

0001abf0 <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   1abf0:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1abf4:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   1abf6:	f7fd fe1d 	bl	18834 <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   1abfa:	4a0e      	ldr	r2, [pc, #56]	; (1ac34 <sensor_up_timestamp+0x44>)
   1abfc:	6955      	ldr	r5, [r2, #20]
   1abfe:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   1ac00:	6460      	str	r0, [r4, #68]	; 0x44
   1ac02:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1ac04:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1ac08:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1ac0a:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1ac0c:	4b0a      	ldr	r3, [pc, #40]	; (1ac38 <sensor_up_timestamp+0x48>)
   1ac0e:	fba3 c305 	umull	ip, r3, r3, r5
   1ac12:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1ac14:	eb10 0b03 	adds.w	fp, r0, r3
   1ac18:	f141 0c00 	adc.w	ip, r1, #0
   1ac1c:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   1ac20:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   1ac24:	4905      	ldr	r1, [pc, #20]	; (1ac3c <sensor_up_timestamp+0x4c>)
   1ac26:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
   1ac2a:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1ac2c:	63a1      	str	r1, [r4, #56]	; 0x38

}
   1ac2e:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1ac32:	bf00      	nop
   1ac34:	2000df48 	.word	0x2000df48
   1ac38:	431bde83 	.word	0x431bde83
   1ac3c:	000f4240 	.word	0x000f4240

0001ac40 <sensor_mgr_lock>:
{
   1ac40:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1ac42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ac46:	4804      	ldr	r0, [pc, #16]	; (1ac58 <sensor_mgr_lock+0x18>)
   1ac48:	f7fe fa5c 	bl	19104 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1ac4c:	b108      	cbz	r0, 1ac52 <sensor_mgr_lock+0x12>
   1ac4e:	2809      	cmp	r0, #9
   1ac50:	d000      	beq.n	1ac54 <sensor_mgr_lock+0x14>
}
   1ac52:	bd08      	pop	{r3, pc}
        return (0);
   1ac54:	2000      	movs	r0, #0
   1ac56:	e7fc      	b.n	1ac52 <sensor_mgr_lock+0x12>
   1ac58:	2000def0 	.word	0x2000def0

0001ac5c <sensor_mgr_unlock>:
{
   1ac5c:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1ac5e:	4802      	ldr	r0, [pc, #8]	; (1ac68 <sensor_mgr_unlock+0xc>)
   1ac60:	f7fe f9f4 	bl	1904c <os_mutex_release>
}
   1ac64:	bd08      	pop	{r3, pc}
   1ac66:	bf00      	nop
   1ac68:	2000def0 	.word	0x2000def0

0001ac6c <sensor_mgr_evq_get>:
}
   1ac6c:	4b01      	ldr	r3, [pc, #4]	; (1ac74 <sensor_mgr_evq_get+0x8>)
   1ac6e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1ac70:	4770      	bx	lr
   1ac72:	bf00      	nop
   1ac74:	2000def0 	.word	0x2000def0

0001ac78 <sensor_mgr_init>:
{
   1ac78:	b570      	push	{r4, r5, r6, lr}
   1ac7a:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1ac7c:	f7fd ff68 	bl	18b50 <os_eventq_dflt_get>
   1ac80:	f7ff ff46 	bl	1ab10 <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   1ac84:	4b1c      	ldr	r3, [pc, #112]	; (1acf8 <sensor_mgr_init+0x80>)
   1ac86:	9300      	str	r3, [sp, #0]
   1ac88:	4b1c      	ldr	r3, [pc, #112]	; (1acfc <sensor_mgr_init+0x84>)
   1ac8a:	2218      	movs	r2, #24
   1ac8c:	2105      	movs	r1, #5
   1ac8e:	481c      	ldr	r0, [pc, #112]	; (1ad00 <sensor_mgr_init+0x88>)
   1ac90:	f7fe f8e8 	bl	18e64 <os_mempool_init>
    assert(rc == OS_OK);
   1ac94:	bb50      	cbnz	r0, 1acec <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   1ac96:	f7ff ffe9 	bl	1ac6c <sensor_mgr_evq_get>
   1ac9a:	4e1a      	ldr	r6, [pc, #104]	; (1ad04 <sensor_mgr_init+0x8c>)
   1ac9c:	2300      	movs	r3, #0
   1ac9e:	4a1a      	ldr	r2, [pc, #104]	; (1ad08 <sensor_mgr_init+0x90>)
   1aca0:	4601      	mov	r1, r0
   1aca2:	4630      	mov	r0, r6
   1aca4:	f7fd fd10 	bl	186c8 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   1aca8:	ad04      	add	r5, sp, #16
   1acaa:	a903      	add	r1, sp, #12
   1acac:	4628      	mov	r0, r5
   1acae:	f7fe fde9 	bl	19884 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1acb2:	4c16      	ldr	r4, [pc, #88]	; (1ad0c <sensor_mgr_init+0x94>)
   1acb4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1acb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1acbc:	9b03      	ldr	r3, [sp, #12]
   1acbe:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1acc0:	f7fd fdb8 	bl	18834 <os_cputime_get32>
   1acc4:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   1acc6:	f7ff ffd1 	bl	1ac6c <sensor_mgr_evq_get>
   1acca:	4c11      	ldr	r4, [pc, #68]	; (1ad10 <sensor_mgr_init+0x98>)
   1accc:	2300      	movs	r3, #0
   1acce:	4a11      	ldr	r2, [pc, #68]	; (1ad14 <sensor_mgr_init+0x9c>)
   1acd0:	4601      	mov	r1, r0
   1acd2:	4620      	mov	r0, r4
   1acd4:	f7fd fcf8 	bl	186c8 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   1acd8:	2180      	movs	r1, #128	; 0x80
   1acda:	4620      	mov	r0, r4
   1acdc:	f7fd fd20 	bl	18720 <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   1ace0:	f1a6 000c 	sub.w	r0, r6, #12
   1ace4:	f7fe f9a8 	bl	19038 <os_mutex_init>
}
   1ace8:	b008      	add	sp, #32
   1acea:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   1acec:	2300      	movs	r3, #0
   1acee:	461a      	mov	r2, r3
   1acf0:	4619      	mov	r1, r3
   1acf2:	4618      	mov	r0, r3
   1acf4:	f7fd fb6e 	bl	183d4 <__assert_func>
   1acf8:	000263fc 	.word	0x000263fc
   1acfc:	2000d9ec 	.word	0x2000d9ec
   1ad00:	2000da64 	.word	0x2000da64
   1ad04:	2000defc 	.word	0x2000defc
   1ad08:	0001aee5 	.word	0x0001aee5
   1ad0c:	2000df48 	.word	0x2000df48
   1ad10:	2000df24 	.word	0x2000df24
   1ad14:	0001aba9 	.word	0x0001aba9

0001ad18 <sensor_pkg_init>:
{
   1ad18:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1ad1a:	f7ff ffad 	bl	1ac78 <sensor_mgr_init>
}
   1ad1e:	bd08      	pop	{r3, pc}

0001ad20 <sensor_lock>:
{
   1ad20:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   1ad22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ad26:	3004      	adds	r0, #4
   1ad28:	f7fe f9ec 	bl	19104 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1ad2c:	b108      	cbz	r0, 1ad32 <sensor_lock+0x12>
   1ad2e:	2809      	cmp	r0, #9
   1ad30:	d000      	beq.n	1ad34 <sensor_lock+0x14>
}
   1ad32:	bd08      	pop	{r3, pc}
        return (0);
   1ad34:	2000      	movs	r0, #0
   1ad36:	e7fc      	b.n	1ad32 <sensor_lock+0x12>

0001ad38 <sensor_unlock>:
{
   1ad38:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1ad3a:	3004      	adds	r0, #4
   1ad3c:	f7fe f986 	bl	1904c <os_mutex_release>
}
   1ad40:	bd08      	pop	{r3, pc}

0001ad42 <sensor_update_nextrun>:
{
   1ad42:	b530      	push	{r4, r5, lr}
   1ad44:	b083      	sub	sp, #12
   1ad46:	4604      	mov	r4, r0
   1ad48:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1ad4a:	a901      	add	r1, sp, #4
   1ad4c:	6a00      	ldr	r0, [r0, #32]
   1ad4e:	f7fe fdb5 	bl	198bc <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1ad52:	4620      	mov	r0, r4
   1ad54:	f7ff ffe4 	bl	1ad20 <sensor_lock>
    sensor_mgr_remove(sensor);
   1ad58:	4620      	mov	r0, r4
   1ad5a:	f7ff fe8f 	bl	1aa7c <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1ad5e:	9b01      	ldr	r3, [sp, #4]
   1ad60:	441d      	add	r5, r3
   1ad62:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   1ad64:	4620      	mov	r0, r4
   1ad66:	f7ff fe9d 	bl	1aaa4 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1ad6a:	4620      	mov	r0, r4
   1ad6c:	f7ff ffe4 	bl	1ad38 <sensor_unlock>
}
   1ad70:	b003      	add	sp, #12
   1ad72:	bd30      	pop	{r4, r5, pc}

0001ad74 <sensor_calc_nextrun_delta>:
{
   1ad74:	b538      	push	{r3, r4, r5, lr}
   1ad76:	4605      	mov	r5, r0
   1ad78:	460c      	mov	r4, r1
    sensor_lock(sensor);
   1ad7a:	f7ff ffd1 	bl	1ad20 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1ad7e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1ad80:	1b0c      	subs	r4, r1, r4
   1ad82:	d404      	bmi.n	1ad8e <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   1ad84:	4628      	mov	r0, r5
   1ad86:	f7ff ffd7 	bl	1ad38 <sensor_unlock>
}
   1ad8a:	4620      	mov	r0, r4
   1ad8c:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1ad8e:	2400      	movs	r4, #0
   1ad90:	e7f8      	b.n	1ad84 <sensor_calc_nextrun_delta+0x10>
	...

0001ad94 <sensor_find_min_nextrun_sensor>:
{
   1ad94:	b570      	push	{r4, r5, r6, lr}
   1ad96:	4606      	mov	r6, r0
   1ad98:	460d      	mov	r5, r1
    sensor_mgr_lock();
   1ad9a:	f7ff ff51 	bl	1ac40 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1ad9e:	4b05      	ldr	r3, [pc, #20]	; (1adb4 <sensor_find_min_nextrun_sensor+0x20>)
   1ada0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1ada2:	4631      	mov	r1, r6
   1ada4:	4620      	mov	r0, r4
   1ada6:	f7ff ffe5 	bl	1ad74 <sensor_calc_nextrun_delta>
   1adaa:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   1adac:	f7ff ff56 	bl	1ac5c <sensor_mgr_unlock>
}
   1adb0:	4620      	mov	r0, r4
   1adb2:	bd70      	pop	{r4, r5, r6, pc}
   1adb4:	2000def0 	.word	0x2000def0

0001adb8 <sensor_mgr_register>:
{
   1adb8:	b538      	push	{r3, r4, r5, lr}
   1adba:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   1adbc:	f7ff ff40 	bl	1ac40 <sensor_mgr_lock>
    if (rc != 0) {
   1adc0:	4604      	mov	r4, r0
   1adc2:	b108      	cbz	r0, 1adc8 <sensor_mgr_register+0x10>
}
   1adc4:	4620      	mov	r0, r4
   1adc6:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   1adc8:	4628      	mov	r0, r5
   1adca:	f7ff ffa9 	bl	1ad20 <sensor_lock>
    if (rc != 0) {
   1adce:	4604      	mov	r4, r0
   1add0:	2800      	cmp	r0, #0
   1add2:	d1f7      	bne.n	1adc4 <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1add4:	4628      	mov	r0, r5
   1add6:	f7ff fe65 	bl	1aaa4 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1adda:	4628      	mov	r0, r5
   1addc:	f7ff ffac 	bl	1ad38 <sensor_unlock>
    sensor_mgr_unlock();
   1ade0:	f7ff ff3c 	bl	1ac5c <sensor_mgr_unlock>
    return (0);
   1ade4:	e7ee      	b.n	1adc4 <sensor_mgr_register+0xc>

0001ade6 <sensor_init>:
{
   1ade6:	b538      	push	{r3, r4, r5, lr}
   1ade8:	4604      	mov	r4, r0
   1adea:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   1adec:	2288      	movs	r2, #136	; 0x88
   1adee:	2100      	movs	r1, #0
   1adf0:	f7fe fef3 	bl	19bda <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1adf4:	1d20      	adds	r0, r4, #4
   1adf6:	f7fe f91f 	bl	19038 <os_mutex_init>
    if (rc != 0) {
   1adfa:	4603      	mov	r3, r0
   1adfc:	b900      	cbnz	r0, 1ae00 <sensor_init+0x1a>
    sensor->s_dev = dev;
   1adfe:	6025      	str	r5, [r4, #0]
}
   1ae00:	4618      	mov	r0, r3
   1ae02:	bd38      	pop	{r3, r4, r5, pc}

0001ae04 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   1ae04:	b530      	push	{r4, r5, lr}
   1ae06:	b089      	sub	sp, #36	; 0x24
   1ae08:	4604      	mov	r4, r0
   1ae0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   1ae0e:	f7ff ff87 	bl	1ad20 <sensor_lock>
    if (rc) {
   1ae12:	4605      	mov	r5, r0
   1ae14:	b9f8      	cbnz	r0, 1ae56 <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   1ae16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ae18:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   1ae1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ae1c:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   1ae1e:	a904      	add	r1, sp, #16
   1ae20:	4620      	mov	r0, r4
   1ae22:	f7ff fe7b 	bl	1ab1c <sensor_mgr_match_bytype>
   1ae26:	b1e0      	cbz	r0, 1ae62 <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   1ae28:	4620      	mov	r0, r4
   1ae2a:	f7ff fee1 	bl	1abf0 <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1ae2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ae30:	6819      	ldr	r1, [r3, #0]
   1ae32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ae34:	9302      	str	r3, [sp, #8]
   1ae36:	ab06      	add	r3, sp, #24
   1ae38:	9301      	str	r3, [sp, #4]
   1ae3a:	4b0b      	ldr	r3, [pc, #44]	; (1ae68 <sensor_read+0x64>)
   1ae3c:	9300      	str	r3, [sp, #0]
   1ae3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ae42:	4620      	mov	r0, r4
   1ae44:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1ae46:	4605      	mov	r5, r0
   1ae48:	b128      	cbz	r0, 1ae56 <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   1ae4a:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1ae4c:	b11b      	cbz	r3, 1ae56 <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1ae4e:	4602      	mov	r2, r0
   1ae50:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1ae52:	4620      	mov	r0, r4
   1ae54:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1ae56:	4620      	mov	r0, r4
   1ae58:	f7ff ff6e 	bl	1ad38 <sensor_unlock>
    return (rc);
}
   1ae5c:	4628      	mov	r0, r5
   1ae5e:	b009      	add	sp, #36	; 0x24
   1ae60:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1ae62:	f06f 0503 	mvn.w	r5, #3
   1ae66:	e7f6      	b.n	1ae56 <sensor_read+0x52>
   1ae68:	0001ab4b 	.word	0x0001ab4b

0001ae6c <sensor_mgr_poll_bytype>:
{
   1ae6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ae6e:	b085      	sub	sp, #20
   1ae70:	4616      	mov	r6, r2
   1ae72:	461f      	mov	r7, r3
   1ae74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1ae76:	b10c      	cbz	r4, 1ae7c <sensor_mgr_poll_bytype+0x10>
   1ae78:	8aa3      	ldrh	r3, [r4, #20]
   1ae7a:	b9cb      	cbnz	r3, 1aeb0 <sensor_mgr_poll_bytype+0x44>
   1ae7c:	4632      	mov	r2, r6
   1ae7e:	463b      	mov	r3, r7
   1ae80:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1ae82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ae86:	9102      	str	r1, [sp, #8]
   1ae88:	2100      	movs	r1, #0
   1ae8a:	9101      	str	r1, [sp, #4]
   1ae8c:	9100      	str	r1, [sp, #0]
   1ae8e:	f7ff ffb9 	bl	1ae04 <sensor_read>
        sensor_lock(sensor);
   1ae92:	4628      	mov	r0, r5
   1ae94:	f7ff ff44 	bl	1ad20 <sensor_lock>
        if (stt) {
   1ae98:	b12c      	cbz	r4, 1aea6 <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   1ae9a:	8aa3      	ldrh	r3, [r4, #20]
   1ae9c:	b91b      	cbnz	r3, 1aea6 <sensor_mgr_poll_bytype+0x3a>
   1ae9e:	8a63      	ldrh	r3, [r4, #18]
   1aea0:	b10b      	cbz	r3, 1aea6 <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1aea2:	3b01      	subs	r3, #1
   1aea4:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1aea6:	4628      	mov	r0, r5
   1aea8:	f7ff ff46 	bl	1ad38 <sensor_unlock>
}
   1aeac:	b005      	add	sp, #20
   1aeae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1aeb0:	3b01      	subs	r3, #1
   1aeb2:	82a3      	strh	r3, [r4, #20]
}
   1aeb4:	e7fa      	b.n	1aeac <sensor_mgr_poll_bytype+0x40>

0001aeb6 <sensor_poll_per_type_trait>:
{
   1aeb6:	b570      	push	{r4, r5, r6, lr}
   1aeb8:	b082      	sub	sp, #8
   1aeba:	4605      	mov	r5, r0
   1aebc:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1aebe:	f7ff ff2f 	bl	1ad20 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1aec2:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1aec4:	e007      	b.n	1aed6 <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1aec6:	e9d4 2300 	ldrd	r2, r3, [r4]
   1aeca:	9601      	str	r6, [sp, #4]
   1aecc:	9400      	str	r4, [sp, #0]
   1aece:	4628      	mov	r0, r5
   1aed0:	f7ff ffcc 	bl	1ae6c <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1aed4:	6a24      	ldr	r4, [r4, #32]
   1aed6:	2c00      	cmp	r4, #0
   1aed8:	d1f5      	bne.n	1aec6 <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   1aeda:	4628      	mov	r0, r5
   1aedc:	f7ff ff2c 	bl	1ad38 <sensor_unlock>
}
   1aee0:	b002      	add	sp, #8
   1aee2:	bd70      	pop	{r4, r5, r6, pc}

0001aee4 <sensor_mgr_wakeup_event>:
{
   1aee4:	b570      	push	{r4, r5, r6, lr}
   1aee6:	b084      	sub	sp, #16
    now = os_time_get();
   1aee8:	f7fe fc92 	bl	19810 <os_time_get>
   1aeec:	4605      	mov	r5, r0
    sensor_mgr_lock();
   1aeee:	f7ff fea7 	bl	1ac40 <sensor_mgr_lock>
   1aef2:	e012      	b.n	1af1a <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   1aef4:	4620      	mov	r0, r4
   1aef6:	f7ff ff1f 	bl	1ad38 <sensor_unlock>
            sensor_mgr_unlock();
   1aefa:	f7ff feaf 	bl	1ac5c <sensor_mgr_unlock>
}
   1aefe:	b004      	add	sp, #16
   1af00:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   1af02:	4632      	mov	r2, r6
   1af04:	4629      	mov	r1, r5
   1af06:	4620      	mov	r0, r4
   1af08:	f7ff ffd5 	bl	1aeb6 <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   1af0c:	4629      	mov	r1, r5
   1af0e:	4620      	mov	r0, r4
   1af10:	f7ff ff17 	bl	1ad42 <sensor_update_nextrun>
        sensor_unlock(cursor);
   1af14:	4620      	mov	r0, r4
   1af16:	f7ff ff0f 	bl	1ad38 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1af1a:	a903      	add	r1, sp, #12
   1af1c:	4628      	mov	r0, r5
   1af1e:	f7ff ff39 	bl	1ad94 <sensor_find_min_nextrun_sensor>
   1af22:	4604      	mov	r4, r0
        sensor_lock(cursor);
   1af24:	f7ff fefc 	bl	1ad20 <sensor_lock>
        if (!cursor->s_poll_rate) {
   1af28:	6a23      	ldr	r3, [r4, #32]
   1af2a:	2b00      	cmp	r3, #0
   1af2c:	d0e2      	beq.n	1aef4 <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1af2e:	9e03      	ldr	r6, [sp, #12]
   1af30:	b96e      	cbnz	r6, 1af4e <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1af32:	4620      	mov	r0, r4
   1af34:	f7ff fde6 	bl	1ab04 <sensor_type_traits_empty>
   1af38:	2800      	cmp	r0, #0
   1af3a:	d0e2      	beq.n	1af02 <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   1af3c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1af40:	9501      	str	r5, [sp, #4]
   1af42:	2100      	movs	r1, #0
   1af44:	9100      	str	r1, [sp, #0]
   1af46:	4620      	mov	r0, r4
   1af48:	f7ff ff90 	bl	1ae6c <sensor_mgr_poll_bytype>
   1af4c:	e7de      	b.n	1af0c <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1af4e:	f7ff fe85 	bl	1ac5c <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1af52:	9903      	ldr	r1, [sp, #12]
   1af54:	4801      	ldr	r0, [pc, #4]	; (1af5c <sensor_mgr_wakeup_event+0x78>)
   1af56:	f7fd fbe3 	bl	18720 <os_callout_reset>
   1af5a:	e7d0      	b.n	1aefe <sensor_mgr_wakeup_event+0x1a>
   1af5c:	2000defc 	.word	0x2000defc

0001af60 <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1af60:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1af62:	2101      	movs	r1, #1
   1af64:	4806      	ldr	r0, [pc, #24]	; (1af80 <init_sensor_coap+0x20>)
   1af66:	f7fe faf1 	bl	1954c <os_sem_init>
    assert(rc == OS_OK);
   1af6a:	b918      	cbnz	r0, 1af74 <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   1af6c:	4b05      	ldr	r3, [pc, #20]	; (1af84 <init_sensor_coap+0x24>)
   1af6e:	2201      	movs	r2, #1
   1af70:	701a      	strb	r2, [r3, #0]
}
   1af72:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   1af74:	2300      	movs	r3, #0
   1af76:	461a      	mov	r2, r3
   1af78:	4619      	mov	r1, r3
   1af7a:	4618      	mov	r0, r3
   1af7c:	f7fd fa2a 	bl	183d4 <__assert_func>
   1af80:	2000da80 	.word	0x2000da80
   1af84:	2000da88 	.word	0x2000da88

0001af88 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1af88:	4b04      	ldr	r3, [pc, #16]	; (1af9c <is_sensor_node+0x14>)
   1af8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1af8e:	4313      	orrs	r3, r2
   1af90:	d101      	bne.n	1af96 <is_sensor_node+0xe>
    return false;
   1af92:	2000      	movs	r0, #0
}
   1af94:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1af96:	2001      	movs	r0, #1
   1af98:	4770      	bx	lr
   1af9a:	bf00      	nop
   1af9c:	2000daa0 	.word	0x2000daa0

0001afa0 <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1afa0:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1afa2:	4b16      	ldr	r3, [pc, #88]	; (1affc <get_hardware_id+0x5c>)
   1afa4:	681b      	ldr	r3, [r3, #0]
   1afa6:	b10b      	cbz	r3, 1afac <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   1afa8:	4815      	ldr	r0, [pc, #84]	; (1b000 <get_hardware_id+0x60>)
   1afaa:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   1afac:	f000 fcee 	bl	1b98c <hal_bsp_hw_id_len>
   1afb0:	4b12      	ldr	r3, [pc, #72]	; (1affc <get_hardware_id+0x5c>)
   1afb2:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1afb4:	280b      	cmp	r0, #11
   1afb6:	d914      	bls.n	1afe2 <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1afb8:	210c      	movs	r1, #12
   1afba:	4811      	ldr	r0, [pc, #68]	; (1b000 <get_hardware_id+0x60>)
   1afbc:	f000 fce8 	bl	1b990 <hal_bsp_hw_id>
   1afc0:	4b0e      	ldr	r3, [pc, #56]	; (1affc <get_hardware_id+0x5c>)
   1afc2:	6018      	str	r0, [r3, #0]
   1afc4:	2800      	cmp	r0, #0
   1afc6:	dd12      	ble.n	1afee <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   1afc8:	490e      	ldr	r1, [pc, #56]	; (1b004 <get_hardware_id+0x64>)
   1afca:	480f      	ldr	r0, [pc, #60]	; (1b008 <get_hardware_id+0x68>)
   1afcc:	f7fc fb3a 	bl	17644 <console_printf>
   1afd0:	4b0a      	ldr	r3, [pc, #40]	; (1affc <get_hardware_id+0x5c>)
   1afd2:	6819      	ldr	r1, [r3, #0]
   1afd4:	480a      	ldr	r0, [pc, #40]	; (1b000 <get_hardware_id+0x60>)
   1afd6:	f7fc fac5 	bl	17564 <console_dump>
   1afda:	480c      	ldr	r0, [pc, #48]	; (1b00c <get_hardware_id+0x6c>)
   1afdc:	f7fc fb32 	bl	17644 <console_printf>
   1afe0:	e7e2      	b.n	1afa8 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1afe2:	2300      	movs	r3, #0
   1afe4:	461a      	mov	r2, r3
   1afe6:	4619      	mov	r1, r3
   1afe8:	4618      	mov	r0, r3
   1afea:	f7fd f9f3 	bl	183d4 <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1afee:	2300      	movs	r3, #0
   1aff0:	461a      	mov	r2, r3
   1aff2:	4619      	mov	r1, r3
   1aff4:	4618      	mov	r0, r3
   1aff6:	f7fd f9ed 	bl	183d4 <__assert_func>
   1affa:	bf00      	nop
   1affc:	2000da98 	.word	0x2000da98
   1b000:	2000da8c 	.word	0x2000da8c
   1b004:	000264a0 	.word	0x000264a0
   1b008:	00026458 	.word	0x00026458
   1b00c:	000265b8 	.word	0x000265b8

0001b010 <is_collector_node>:
bool is_collector_node(void) {
   1b010:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   1b012:	f7ff ffc5 	bl	1afa0 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1b016:	220c      	movs	r2, #12
   1b018:	4903      	ldr	r1, [pc, #12]	; (1b028 <is_collector_node+0x18>)
   1b01a:	f7fe fdad 	bl	19b78 <memcmp>
   1b01e:	b108      	cbz	r0, 1b024 <is_collector_node+0x14>
    return false; 
   1b020:	2000      	movs	r0, #0
}
   1b022:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1b024:	2001      	movs	r0, #1
   1b026:	e7fc      	b.n	1b022 <is_collector_node+0x12>
   1b028:	00026410 	.word	0x00026410

0001b02c <is_standalone_node>:
bool is_standalone_node(void) {
   1b02c:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1b02e:	f7ff ffef 	bl	1b010 <is_collector_node>
   1b032:	b928      	cbnz	r0, 1b040 <is_standalone_node+0x14>
   1b034:	4604      	mov	r4, r0
   1b036:	f7ff ffa7 	bl	1af88 <is_sensor_node>
   1b03a:	b910      	cbnz	r0, 1b042 <is_standalone_node+0x16>
   1b03c:	2401      	movs	r4, #1
   1b03e:	e000      	b.n	1b042 <is_standalone_node+0x16>
    return false;
   1b040:	2400      	movs	r4, #0
}
   1b042:	4620      	mov	r0, r4
   1b044:	bd10      	pop	{r4, pc}
	...

0001b048 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   1b048:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1b04a:	2400      	movs	r4, #0
   1b04c:	2c04      	cmp	r4, #4
   1b04e:	dc15      	bgt.n	1b07c <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1b050:	4b23      	ldr	r3, [pc, #140]	; (1b0e0 <sensor_network_init+0x98>)
   1b052:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1b056:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b05a:	4922      	ldr	r1, [pc, #136]	; (1b0e4 <sensor_network_init+0x9c>)
   1b05c:	4822      	ldr	r0, [pc, #136]	; (1b0e8 <sensor_network_init+0xa0>)
   1b05e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1b062:	f000 fcaf 	bl	1b9c4 <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1b066:	3001      	adds	r0, #1
   1b068:	280b      	cmp	r0, #11
   1b06a:	dc01      	bgt.n	1b070 <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1b06c:	3401      	adds	r4, #1
   1b06e:	e7ed      	b.n	1b04c <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1b070:	2300      	movs	r3, #0
   1b072:	461a      	mov	r2, r3
   1b074:	4619      	mov	r1, r3
   1b076:	4618      	mov	r0, r3
   1b078:	f7fd f9ac 	bl	183d4 <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   1b07c:	f7ff ff90 	bl	1afa0 <get_hardware_id>
   1b080:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1b082:	2400      	movs	r4, #0
   1b084:	2c04      	cmp	r4, #4
   1b086:	dc19      	bgt.n	1b0bc <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   1b088:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b08c:	0093      	lsls	r3, r2, #2
   1b08e:	220c      	movs	r2, #12
   1b090:	4916      	ldr	r1, [pc, #88]	; (1b0ec <sensor_network_init+0xa4>)
   1b092:	4419      	add	r1, r3
   1b094:	4628      	mov	r0, r5
   1b096:	f7fe fd6f 	bl	19b78 <memcmp>
   1b09a:	b108      	cbz	r0, 1b0a0 <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1b09c:	3401      	adds	r4, #1
   1b09e:	e7f1      	b.n	1b084 <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
   1b0a0:	4b0f      	ldr	r3, [pc, #60]	; (1b0e0 <sensor_network_init+0x98>)
   1b0a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1b0a6:	e9d3 0100 	ldrd	r0, r1, [r3]
   1b0aa:	4b11      	ldr	r3, [pc, #68]	; (1b0f0 <sensor_network_init+0xa8>)
   1b0ac:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1b0b0:	1c63      	adds	r3, r4, #1
   1b0b2:	4a10      	ldr	r2, [pc, #64]	; (1b0f4 <sensor_network_init+0xac>)
   1b0b4:	4910      	ldr	r1, [pc, #64]	; (1b0f8 <sensor_network_init+0xb0>)
   1b0b6:	4811      	ldr	r0, [pc, #68]	; (1b0fc <sensor_network_init+0xb4>)
   1b0b8:	f7fc fac4 	bl	17644 <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1b0bc:	f7ff ffa8 	bl	1b010 <is_collector_node>
   1b0c0:	b940      	cbnz	r0, 1b0d4 <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1b0c2:	f7ff ffb3 	bl	1b02c <is_standalone_node>
   1b0c6:	b150      	cbz	r0, 1b0de <sensor_network_init+0x96>
   1b0c8:	4a0a      	ldr	r2, [pc, #40]	; (1b0f4 <sensor_network_init+0xac>)
   1b0ca:	490b      	ldr	r1, [pc, #44]	; (1b0f8 <sensor_network_init+0xb0>)
   1b0cc:	480c      	ldr	r0, [pc, #48]	; (1b100 <sensor_network_init+0xb8>)
   1b0ce:	f7fc fab9 	bl	17644 <console_printf>
}
   1b0d2:	e004      	b.n	1b0de <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1b0d4:	4a07      	ldr	r2, [pc, #28]	; (1b0f4 <sensor_network_init+0xac>)
   1b0d6:	4908      	ldr	r1, [pc, #32]	; (1b0f8 <sensor_network_init+0xb0>)
   1b0d8:	480a      	ldr	r0, [pc, #40]	; (1b104 <sensor_network_init+0xbc>)
   1b0da:	f7fc fab3 	bl	17644 <console_printf>
}
   1b0de:	bd38      	pop	{r3, r4, r5, pc}
   1b0e0:	000264b8 	.word	0x000264b8
   1b0e4:	00026460 	.word	0x00026460
   1b0e8:	20000130 	.word	0x20000130
   1b0ec:	0002641c 	.word	0x0002641c
   1b0f0:	2000daa0 	.word	0x2000daa0
   1b0f4:	00026468 	.word	0x00026468
   1b0f8:	000264a0 	.word	0x000264a0
   1b0fc:	00026470 	.word	0x00026470
   1b100:	00026490 	.word	0x00026490
   1b104:	00026480 	.word	0x00026480

0001b108 <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1b108:	b530      	push	{r4, r5, lr}
   1b10a:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1b10c:	2200      	movs	r2, #0
   1b10e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b112:	4810      	ldr	r0, [pc, #64]	; (1b154 <config_device+0x4c>)
   1b114:	f7fd fc2c 	bl	18970 <os_dev_open>
    assert(dev != NULL);
   1b118:	b178      	cbz	r0, 1b13a <config_device+0x32>
   1b11a:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1b11c:	4668      	mov	r0, sp
   1b11e:	f000 f86c 	bl	1b1fa <temp_stub_default_cfg>
    assert(rc == 0);
   1b122:	b980      	cbnz	r0, 1b146 <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1b124:	4669      	mov	r1, sp
   1b126:	4620      	mov	r0, r4
   1b128:	f000 f900 	bl	1b32c <temp_stub_config>
   1b12c:	4605      	mov	r5, r0
    os_dev_close(dev);
   1b12e:	4620      	mov	r0, r4
   1b130:	f7fd fc40 	bl	189b4 <os_dev_close>
    return rc;
}
   1b134:	4628      	mov	r0, r5
   1b136:	b003      	add	sp, #12
   1b138:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1b13a:	2300      	movs	r3, #0
   1b13c:	461a      	mov	r2, r3
   1b13e:	4619      	mov	r1, r3
   1b140:	4618      	mov	r0, r3
   1b142:	f7fd f947 	bl	183d4 <__assert_func>
    assert(rc == 0);
   1b146:	2300      	movs	r3, #0
   1b148:	461a      	mov	r2, r3
   1b14a:	4619      	mov	r1, r3
   1b14c:	4618      	mov	r0, r3
   1b14e:	f7fd f941 	bl	183d4 <__assert_func>
   1b152:	bf00      	nop
   1b154:	000264e0 	.word	0x000264e0

0001b158 <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1b158:	b510      	push	{r4, lr}
   1b15a:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1b15c:	4c10      	ldr	r4, [pc, #64]	; (1b1a0 <temp_stub_create+0x48>)
   1b15e:	4621      	mov	r1, r4
   1b160:	4810      	ldr	r0, [pc, #64]	; (1b1a4 <temp_stub_create+0x4c>)
   1b162:	f7fc fa6f 	bl	17644 <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1b166:	4b10      	ldr	r3, [pc, #64]	; (1b1a8 <temp_stub_create+0x50>)
   1b168:	9301      	str	r3, [sp, #4]
   1b16a:	4b10      	ldr	r3, [pc, #64]	; (1b1ac <temp_stub_create+0x54>)
   1b16c:	9300      	str	r3, [sp, #0]
   1b16e:	2300      	movs	r3, #0
   1b170:	2201      	movs	r2, #1
   1b172:	4621      	mov	r1, r4
   1b174:	480e      	ldr	r0, [pc, #56]	; (1b1b0 <temp_stub_create+0x58>)
   1b176:	f7fd fbb5 	bl	188e4 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1b17a:	b920      	cbnz	r0, 1b186 <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1b17c:	f7ff ffc4 	bl	1b108 <config_device>
    assert(rc == 0);
   1b180:	b938      	cbnz	r0, 1b192 <temp_stub_create+0x3a>
}
   1b182:	b002      	add	sp, #8
   1b184:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1b186:	2300      	movs	r3, #0
   1b188:	461a      	mov	r2, r3
   1b18a:	4619      	mov	r1, r3
   1b18c:	4618      	mov	r0, r3
   1b18e:	f7fd f921 	bl	183d4 <__assert_func>
    assert(rc == 0);
   1b192:	2300      	movs	r3, #0
   1b194:	461a      	mov	r2, r3
   1b196:	4619      	mov	r1, r3
   1b198:	4618      	mov	r0, r3
   1b19a:	f7fd f91b 	bl	183d4 <__assert_func>
   1b19e:	bf00      	nop
   1b1a0:	000264e0 	.word	0x000264e0
   1b1a4:	000264ec 	.word	0x000264ec
   1b1a8:	2000dae0 	.word	0x2000dae0
   1b1ac:	0001b209 	.word	0x0001b209
   1b1b0:	2000daf8 	.word	0x2000daf8

0001b1b4 <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1b1b4:	2000      	movs	r0, #0
   1b1b6:	4770      	bx	lr

0001b1b8 <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1b1b8:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1b1bc:	2100      	movs	r1, #0
   1b1be:	ea50 0301 	orrs.w	r3, r0, r1
   1b1c2:	d004      	beq.n	1b1ce <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1b1c4:	9b00      	ldr	r3, [sp, #0]
   1b1c6:	2201      	movs	r2, #1
   1b1c8:	701a      	strb	r2, [r3, #0]
    return (0);
   1b1ca:	2000      	movs	r0, #0
   1b1cc:	4770      	bx	lr
err:
    return (rc);
   1b1ce:	f06f 0001 	mvn.w	r0, #1
}
   1b1d2:	4770      	bx	lr

0001b1d4 <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1b1d4:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1b1d6:	b120      	cbz	r0, 1b1e2 <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1b1d8:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1b1dc:	d007      	beq.n	1b1ee <temp_stub_open+0x1a>
}
   1b1de:	2000      	movs	r0, #0
   1b1e0:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1b1e2:	2300      	movs	r3, #0
   1b1e4:	461a      	mov	r2, r3
   1b1e6:	4619      	mov	r1, r3
   1b1e8:	4618      	mov	r0, r3
   1b1ea:	f7fd f8f3 	bl	183d4 <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1b1ee:	2300      	movs	r3, #0
   1b1f0:	461a      	mov	r2, r3
   1b1f2:	4619      	mov	r1, r3
   1b1f4:	4618      	mov	r0, r3
   1b1f6:	f7fd f8ed 	bl	183d4 <__assert_func>

0001b1fa <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1b1fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b1fe:	2300      	movs	r3, #0
   1b200:	e9c0 2300 	strd	r2, r3, [r0]
}
   1b204:	2000      	movs	r0, #0
   1b206:	4770      	bx	lr

0001b208 <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1b208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1b20a:	b379      	cbz	r1, 1b26c <temp_stub_init+0x64>
   1b20c:	460d      	mov	r5, r1
   1b20e:	b380      	cbz	r0, 1b272 <temp_stub_init+0x6a>
   1b210:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1b212:	30b0      	adds	r0, #176	; 0xb0
   1b214:	f7ff fff1 	bl	1b1fa <temp_stub_default_cfg>
    if (rc) { goto err; }
   1b218:	4603      	mov	r3, r0
   1b21a:	b108      	cbz	r0, 1b220 <temp_stub_init+0x18>
}
   1b21c:	4618      	mov	r0, r3
   1b21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1b220:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1b224:	4621      	mov	r1, r4
   1b226:	4630      	mov	r0, r6
   1b228:	f7ff fddd 	bl	1ade6 <sensor_init>
    if (rc != 0) { goto err; }
   1b22c:	4603      	mov	r3, r0
   1b22e:	2800      	cmp	r0, #0
   1b230:	d1f4      	bne.n	1b21c <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1b232:	4b11      	ldr	r3, [pc, #68]	; (1b278 <temp_stub_init+0x70>)
   1b234:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1b236:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1b23a:	2300      	movs	r3, #0
   1b23c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1b240:	682a      	ldr	r2, [r5, #0]
   1b242:	686f      	ldr	r7, [r5, #4]
   1b244:	68a8      	ldr	r0, [r5, #8]
   1b246:	68e9      	ldr	r1, [r5, #12]
   1b248:	6722      	str	r2, [r4, #112]	; 0x70
   1b24a:	6767      	str	r7, [r4, #116]	; 0x74
   1b24c:	67a0      	str	r0, [r4, #120]	; 0x78
   1b24e:	67e1      	str	r1, [r4, #124]	; 0x7c
   1b250:	692a      	ldr	r2, [r5, #16]
   1b252:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1b256:	4630      	mov	r0, r6
   1b258:	f7ff fdae 	bl	1adb8 <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1b25c:	4603      	mov	r3, r0
   1b25e:	2800      	cmp	r0, #0
   1b260:	d1dc      	bne.n	1b21c <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1b262:	4a06      	ldr	r2, [pc, #24]	; (1b27c <temp_stub_init+0x74>)
   1b264:	6022      	str	r2, [r4, #0]
   1b266:	4a06      	ldr	r2, [pc, #24]	; (1b280 <temp_stub_init+0x78>)
   1b268:	60e2      	str	r2, [r4, #12]
    return (0);
   1b26a:	e7d7      	b.n	1b21c <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1b26c:	f06f 0308 	mvn.w	r3, #8
   1b270:	e7d4      	b.n	1b21c <temp_stub_init+0x14>
   1b272:	f06f 0308 	mvn.w	r3, #8
   1b276:	e7d1      	b.n	1b21c <temp_stub_init+0x14>
   1b278:	000264fc 	.word	0x000264fc
   1b27c:	0001b1d5 	.word	0x0001b1d5
   1b280:	0001b1b5 	.word	0x0001b1b5

0001b284 <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1b284:	b538      	push	{r3, r4, r5, lr}
   1b286:	460d      	mov	r5, r1
   1b288:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1b28a:	4808      	ldr	r0, [pc, #32]	; (1b2ac <temp_stub_get_raw_temperature+0x28>)
   1b28c:	f7fc f9da 	bl	17644 <console_printf>
    assert(temp_sum);
   1b290:	b134      	cbz	r4, 1b2a0 <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1b292:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1b296:	fb01 f105 	mul.w	r1, r1, r5
   1b29a:	6021      	str	r1, [r4, #0]
}
   1b29c:	2000      	movs	r0, #0
   1b29e:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1b2a0:	2300      	movs	r3, #0
   1b2a2:	461a      	mov	r2, r3
   1b2a4:	4619      	mov	r1, r3
   1b2a6:	4618      	mov	r0, r3
   1b2a8:	f7fd f894 	bl	183d4 <__assert_func>
   1b2ac:	00026524 	.word	0x00026524

0001b2b0 <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1b2b0:	b530      	push	{r4, r5, lr}
   1b2b2:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1b2b4:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1b2b8:	2500      	movs	r5, #0
   1b2ba:	ea54 0305 	orrs.w	r3, r4, r5
   1b2be:	d032      	beq.n	1b326 <temp_stub_sensor_read+0x76>
   1b2c0:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1b2c2:	6805      	ldr	r5, [r0, #0]
   1b2c4:	b165      	cbz	r5, 1b2e0 <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1b2c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b2ca:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1b2cc:	2200      	movs	r2, #0
   1b2ce:	4611      	mov	r1, r2
   1b2d0:	4628      	mov	r0, r5
   1b2d2:	f7ff ff7f 	bl	1b1d4 <temp_stub_open>
        if (rc) { goto err; }
   1b2d6:	4603      	mov	r3, r0
   1b2d8:	b140      	cbz	r0, 1b2ec <temp_stub_sensor_read+0x3c>
}
   1b2da:	4618      	mov	r0, r3
   1b2dc:	b007      	add	sp, #28
   1b2de:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1b2e0:	2300      	movs	r3, #0
   1b2e2:	461a      	mov	r2, r3
   1b2e4:	4619      	mov	r1, r3
   1b2e6:	4618      	mov	r0, r3
   1b2e8:	f7fd f874 	bl	183d4 <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1b2ec:	2300      	movs	r3, #0
   1b2ee:	aa03      	add	r2, sp, #12
   1b2f0:	2101      	movs	r1, #1
   1b2f2:	4628      	mov	r0, r5
   1b2f4:	f7ff ffc6 	bl	1b284 <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1b2f8:	4603      	mov	r3, r0
   1b2fa:	2800      	cmp	r0, #0
   1b2fc:	d1ed      	bne.n	1b2da <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1b2fe:	9a03      	ldr	r2, [sp, #12]
   1b300:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1b302:	2201      	movs	r2, #1
   1b304:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1b308:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b30a:	2a00      	cmp	r2, #0
   1b30c:	d0e5      	beq.n	1b2da <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1b30e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1b312:	2300      	movs	r3, #0
   1b314:	e9cd 2300 	strd	r2, r3, [sp]
   1b318:	aa04      	add	r2, sp, #16
   1b31a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1b31c:	4620      	mov	r0, r4
   1b31e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b320:	4798      	blx	r3
   1b322:	4603      	mov	r3, r0
   1b324:	e7d9      	b.n	1b2da <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1b326:	f06f 0301 	mvn.w	r3, #1
   1b32a:	e7d6      	b.n	1b2da <temp_stub_sensor_read+0x2a>

0001b32c <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1b32c:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1b32e:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1b332:	d009      	beq.n	1b348 <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1b334:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1b338:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1b33c:	e9d1 2300 	ldrd	r2, r3, [r1]
   1b340:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1b344:	2000      	movs	r0, #0
   1b346:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1b348:	2300      	movs	r3, #0
   1b34a:	461a      	mov	r2, r3
   1b34c:	4619      	mov	r1, r3
   1b34e:	4618      	mov	r0, r3
   1b350:	f7fd f840 	bl	183d4 <__assert_func>

0001b354 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   1b354:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1b356:	e002      	b.n	1b35e <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   1b358:	4618      	mov	r0, r3
   1b35a:	f000 f85b 	bl	1b414 <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1b35e:	4808      	ldr	r0, [pc, #32]	; (1b380 <oc_buffer_tx+0x2c>)
   1b360:	f7fd fc03 	bl	18b6a <os_mqueue_get>
   1b364:	4603      	mov	r3, r0
   1b366:	b148      	cbz	r0, 1b37c <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   1b368:	2200      	movs	r2, #0
   1b36a:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   1b36c:	7e1a      	ldrb	r2, [r3, #24]
   1b36e:	f012 0f08 	tst.w	r2, #8
   1b372:	d0f1      	beq.n	1b358 <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   1b374:	4618      	mov	r0, r3
   1b376:	f000 f85d 	bl	1b434 <oc_send_multicast_message>
   1b37a:	e7f0      	b.n	1b35e <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   1b37c:	bd08      	pop	{r3, pc}
   1b37e:	bf00      	nop
   1b380:	2000dbd0 	.word	0x2000dbd0

0001b384 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   1b384:	b500      	push	{lr}
   1b386:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   1b388:	4808      	ldr	r0, [pc, #32]	; (1b3ac <oc_buffer_rx+0x28>)
   1b38a:	f7fd fbee 	bl	18b6a <os_mqueue_get>
   1b38e:	9001      	str	r0, [sp, #4]
   1b390:	b140      	cbz	r0, 1b3a4 <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   1b392:	a801      	add	r0, sp, #4
   1b394:	f000 faa2 	bl	1b8dc <__wrap_coap_receive>
#endif
        if (m) {
   1b398:	9801      	ldr	r0, [sp, #4]
   1b39a:	2800      	cmp	r0, #0
   1b39c:	d0f4      	beq.n	1b388 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   1b39e:	f7fd fc59 	bl	18c54 <os_mbuf_free_chain>
   1b3a2:	e7f1      	b.n	1b388 <oc_buffer_rx+0x4>
        }
    }
}
   1b3a4:	b003      	add	sp, #12
   1b3a6:	f85d fb04 	ldr.w	pc, [sp], #4
   1b3aa:	bf00      	nop
   1b3ac:	2000dbb8 	.word	0x2000dbb8

0001b3b0 <oc_buffer_init>:

void
oc_buffer_init(void)
{
   1b3b0:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   1b3b2:	2200      	movs	r2, #0
   1b3b4:	4904      	ldr	r1, [pc, #16]	; (1b3c8 <oc_buffer_init+0x18>)
   1b3b6:	4805      	ldr	r0, [pc, #20]	; (1b3cc <oc_buffer_init+0x1c>)
   1b3b8:	f7fd fbce 	bl	18b58 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   1b3bc:	2200      	movs	r2, #0
   1b3be:	4904      	ldr	r1, [pc, #16]	; (1b3d0 <oc_buffer_init+0x20>)
   1b3c0:	4804      	ldr	r0, [pc, #16]	; (1b3d4 <oc_buffer_init+0x24>)
   1b3c2:	f7fd fbc9 	bl	18b58 <os_mqueue_init>
}
   1b3c6:	bd08      	pop	{r3, pc}
   1b3c8:	0001b385 	.word	0x0001b385
   1b3cc:	2000dbb8 	.word	0x2000dbb8
   1b3d0:	0001b355 	.word	0x0001b355
   1b3d4:	2000dbd0 	.word	0x2000dbd0

0001b3d8 <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   1b3d8:	b500      	push	{lr}
   1b3da:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   1b3dc:	4b07      	ldr	r3, [pc, #28]	; (1b3fc <oc_ri_mem_init+0x24>)
   1b3de:	9300      	str	r3, [sp, #0]
   1b3e0:	4b07      	ldr	r3, [pc, #28]	; (1b400 <oc_ri_mem_init+0x28>)
   1b3e2:	2264      	movs	r2, #100	; 0x64
   1b3e4:	2102      	movs	r1, #2
   1b3e6:	4807      	ldr	r0, [pc, #28]	; (1b404 <oc_ri_mem_init+0x2c>)
   1b3e8:	f7fd fd3c 	bl	18e64 <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   1b3ec:	f000 f860 	bl	1b4b0 <oc_rep_init>
#endif
    oc_buffer_init();
   1b3f0:	f7ff ffde 	bl	1b3b0 <oc_buffer_init>
}
   1b3f4:	b003      	add	sp, #12
   1b3f6:	f85d fb04 	ldr.w	pc, [sp], #4
   1b3fa:	bf00      	nop
   1b3fc:	0002653c 	.word	0x0002653c
   1b400:	2000dbe8 	.word	0x2000dbe8
   1b404:	2000dcb0 	.word	0x2000dcb0

0001b408 <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   1b408:	4b01      	ldr	r3, [pc, #4]	; (1b410 <oc_evq_set+0x8>)
   1b40a:	6018      	str	r0, [r3, #0]
}
   1b40c:	4770      	bx	lr
   1b40e:	bf00      	nop
   1b410:	2000dccc 	.word	0x2000dccc

0001b414 <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   1b414:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   1b416:	7e03      	ldrb	r3, [r0, #24]
   1b418:	f003 0307 	and.w	r3, r3, #7
   1b41c:	4a04      	ldr	r2, [pc, #16]	; (1b430 <oc_send_buffer+0x1c>)
   1b41e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   1b422:	b113      	cbz	r3, 1b42a <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   1b424:	68db      	ldr	r3, [r3, #12]
   1b426:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   1b428:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   1b42a:	f7fd fc13 	bl	18c54 <os_mbuf_free_chain>
}
   1b42e:	e7fb      	b.n	1b428 <oc_send_buffer+0x14>
   1b430:	2000df60 	.word	0x2000df60

0001b434 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   1b434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b438:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1b43a:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   1b43c:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1b43e:	e002      	b.n	1b446 <oc_send_multicast_message+0x12>
   1b440:	4635      	mov	r5, r6
   1b442:	3401      	adds	r4, #1
   1b444:	462e      	mov	r6, r5
   1b446:	2c07      	cmp	r4, #7
   1b448:	dc12      	bgt.n	1b470 <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   1b44a:	4b0c      	ldr	r3, [pc, #48]	; (1b47c <oc_send_multicast_message+0x48>)
   1b44c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1b450:	2d00      	cmp	r5, #0
   1b452:	d0f5      	beq.n	1b440 <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   1b454:	2e00      	cmp	r6, #0
   1b456:	d0f4      	beq.n	1b442 <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   1b458:	4638      	mov	r0, r7
   1b45a:	f7fd fc6b 	bl	18d34 <os_mbuf_dup>
   1b45e:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   1b460:	6933      	ldr	r3, [r6, #16]
   1b462:	4638      	mov	r0, r7
   1b464:	4798      	blx	r3
            if (!n) {
   1b466:	f1b8 0f00 	cmp.w	r8, #0
   1b46a:	d005      	beq.n	1b478 <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   1b46c:	4647      	mov	r7, r8
   1b46e:	e7e8      	b.n	1b442 <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   1b470:	b116      	cbz	r6, 1b478 <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   1b472:	6933      	ldr	r3, [r6, #16]
   1b474:	4638      	mov	r0, r7
   1b476:	4798      	blx	r3
    }
}
   1b478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b47c:	2000df60 	.word	0x2000df60

0001b480 <oc_init>:
    return rc;
}

void
oc_init(void)
{
   1b480:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1b482:	4b07      	ldr	r3, [pc, #28]	; (1b4a0 <oc_init+0x20>)
   1b484:	781b      	ldrb	r3, [r3, #0]
   1b486:	b133      	cbz	r3, 1b496 <oc_init+0x16>
    oc_ri_mem_init();
   1b488:	f7ff ffa6 	bl	1b3d8 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   1b48c:	f7fd fb60 	bl	18b50 <os_eventq_dflt_get>
   1b490:	f7ff ffba 	bl	1b408 <oc_evq_set>
}
   1b494:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1b496:	461a      	mov	r2, r3
   1b498:	4619      	mov	r1, r3
   1b49a:	4618      	mov	r0, r3
   1b49c:	f7fc ff9a 	bl	183d4 <__assert_func>
   1b4a0:	2000ddbc 	.word	0x2000ddbc

0001b4a4 <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1b4a4:	4770      	bx	lr

0001b4a6 <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1b4a6:	4770      	bx	lr

0001b4a8 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1b4a8:	4770      	bx	lr

0001b4aa <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1b4aa:	4770      	bx	lr

0001b4ac <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1b4ac:	4770      	bx	lr
	...

0001b4b0 <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   1b4b0:	b500      	push	{lr}
   1b4b2:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   1b4b4:	4b05      	ldr	r3, [pc, #20]	; (1b4cc <oc_rep_init+0x1c>)
   1b4b6:	9300      	str	r3, [sp, #0]
   1b4b8:	4b05      	ldr	r3, [pc, #20]	; (1b4d0 <oc_rep_init+0x20>)
   1b4ba:	2218      	movs	r2, #24
   1b4bc:	2102      	movs	r1, #2
   1b4be:	4805      	ldr	r0, [pc, #20]	; (1b4d4 <oc_rep_init+0x24>)
   1b4c0:	f7fd fcd0 	bl	18e64 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   1b4c4:	b003      	add	sp, #12
   1b4c6:	f85d fb04 	ldr.w	pc, [sp], #4
   1b4ca:	bf00      	nop
   1b4cc:	00026548 	.word	0x00026548
   1b4d0:	2000dcec 	.word	0x2000dcec
   1b4d4:	2000dcd0 	.word	0x2000dcd0

0001b4d8 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1b4d8:	b570      	push	{r4, r5, r6, lr}
   1b4da:	b086      	sub	sp, #24
   1b4dc:	4605      	mov	r5, r0
   1b4de:	460e      	mov	r6, r1
   1b4e0:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1b4e2:	2300      	movs	r3, #0
   1b4e4:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1b4e6:	f000 f9ad 	bl	1b844 <mfg_init>

    mfg_open(&reader);
   1b4ea:	a801      	add	r0, sp, #4
   1b4ec:	f000 f9c6 	bl	1b87c <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1b4f0:	6823      	ldr	r3, [r4, #0]
   1b4f2:	42ab      	cmp	r3, r5
   1b4f4:	da29      	bge.n	1b54a <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1b4f6:	2102      	movs	r1, #2
   1b4f8:	a801      	add	r0, sp, #4
   1b4fa:	f000 f98c 	bl	1b816 <mfg_seek_next_with_type>
   1b4fe:	4603      	mov	r3, r0
        switch (rc) {
   1b500:	f110 0f0f 	cmn.w	r0, #15
   1b504:	d003      	beq.n	1b50e <flash_map_read_mfg+0x36>
   1b506:	b120      	cbz	r0, 1b512 <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
   1b508:	4618      	mov	r0, r3
   1b50a:	b006      	add	sp, #24
   1b50c:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   1b50e:	2300      	movs	r3, #0
   1b510:	e7fa      	b.n	1b508 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1b512:	a903      	add	r1, sp, #12
   1b514:	a801      	add	r0, sp, #4
   1b516:	f000 f98b 	bl	1b830 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1b51a:	4603      	mov	r3, r0
   1b51c:	2800      	cmp	r0, #0
   1b51e:	d1f3      	bne.n	1b508 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   1b520:	6823      	ldr	r3, [r4, #0]
   1b522:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b526:	009a      	lsls	r2, r3, #2
   1b528:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   1b52a:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1b52e:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   1b530:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1b534:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   1b536:	f8dd 200e 	ldr.w	r2, [sp, #14]
   1b53a:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   1b53c:	f8dd 2012 	ldr.w	r2, [sp, #18]
   1b540:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   1b542:	6823      	ldr	r3, [r4, #0]
   1b544:	3301      	adds	r3, #1
   1b546:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1b548:	e7d2      	b.n	1b4f0 <flash_map_read_mfg+0x18>
            return -1;
   1b54a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b54e:	e7db      	b.n	1b508 <flash_map_read_mfg+0x30>

0001b550 <flash_area_open>:
{
   1b550:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1b552:	4b0d      	ldr	r3, [pc, #52]	; (1b588 <flash_area_open+0x38>)
   1b554:	681d      	ldr	r5, [r3, #0]
   1b556:	b1a5      	cbz	r5, 1b582 <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
   1b558:	2300      	movs	r3, #0
   1b55a:	4a0c      	ldr	r2, [pc, #48]	; (1b58c <flash_area_open+0x3c>)
   1b55c:	6812      	ldr	r2, [r2, #0]
   1b55e:	429a      	cmp	r2, r3
   1b560:	dd0b      	ble.n	1b57a <flash_area_open+0x2a>
        area = flash_map + i;
   1b562:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1b566:	00a2      	lsls	r2, r4, #2
   1b568:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
   1b56a:	5caa      	ldrb	r2, [r5, r2]
   1b56c:	4282      	cmp	r2, r0
   1b56e:	d001      	beq.n	1b574 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
   1b570:	3301      	adds	r3, #1
   1b572:	e7f2      	b.n	1b55a <flash_area_open+0xa>
            *fap = area;
   1b574:	600c      	str	r4, [r1, #0]
            return 0;
   1b576:	2000      	movs	r0, #0
   1b578:	e001      	b.n	1b57e <flash_area_open+0x2e>
    return SYS_ENOENT;
   1b57a:	f06f 0003 	mvn.w	r0, #3
}
   1b57e:	bc30      	pop	{r4, r5}
   1b580:	4770      	bx	lr
        return SYS_EACCES;
   1b582:	f06f 0006 	mvn.w	r0, #6
   1b586:	e7fa      	b.n	1b57e <flash_area_open+0x2e>
   1b588:	2000df84 	.word	0x2000df84
   1b58c:	2000df80 	.word	0x2000df80

0001b590 <flash_area_read>:
{
   1b590:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1b592:	6884      	ldr	r4, [r0, #8]
   1b594:	428c      	cmp	r4, r1
   1b596:	d308      	bcc.n	1b5aa <flash_area_read+0x1a>
   1b598:	18cd      	adds	r5, r1, r3
   1b59a:	42ac      	cmp	r4, r5
   1b59c:	d308      	bcc.n	1b5b0 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1b59e:	6844      	ldr	r4, [r0, #4]
   1b5a0:	4421      	add	r1, r4
   1b5a2:	7840      	ldrb	r0, [r0, #1]
   1b5a4:	f000 f9c8 	bl	1b938 <hal_flash_read>
}
   1b5a8:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   1b5aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b5ae:	e7fb      	b.n	1b5a8 <flash_area_read+0x18>
   1b5b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b5b4:	e7f8      	b.n	1b5a8 <flash_area_read+0x18>
	...

0001b5b8 <flash_map_init>:

void
flash_map_init(void)
{
   1b5b8:	b510      	push	{r4, lr}
   1b5ba:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1b5bc:	4b14      	ldr	r3, [pc, #80]	; (1b610 <flash_map_init+0x58>)
   1b5be:	781b      	ldrb	r3, [r3, #0]
   1b5c0:	b303      	cbz	r3, 1b604 <flash_map_init+0x4c>

    rc = hal_flash_init();
   1b5c2:	f000 f9a5 	bl	1b910 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1b5c6:	b138      	cbz	r0, 1b5d8 <flash_map_init+0x20>
   1b5c8:	2000      	movs	r0, #0
   1b5ca:	9000      	str	r0, [sp, #0]
   1b5cc:	4b11      	ldr	r3, [pc, #68]	; (1b614 <flash_map_init+0x5c>)
   1b5ce:	681c      	ldr	r4, [r3, #0]
   1b5d0:	4603      	mov	r3, r0
   1b5d2:	4602      	mov	r2, r0
   1b5d4:	4601      	mov	r1, r0
   1b5d6:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1b5d8:	4b0f      	ldr	r3, [pc, #60]	; (1b618 <flash_map_init+0x60>)
   1b5da:	4a10      	ldr	r2, [pc, #64]	; (1b61c <flash_map_init+0x64>)
   1b5dc:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1b5de:	4b10      	ldr	r3, [pc, #64]	; (1b620 <flash_map_init+0x68>)
   1b5e0:	2206      	movs	r2, #6
   1b5e2:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1b5e4:	aa03      	add	r2, sp, #12
   1b5e6:	490f      	ldr	r1, [pc, #60]	; (1b624 <flash_map_init+0x6c>)
   1b5e8:	200a      	movs	r0, #10
   1b5ea:	f7ff ff75 	bl	1b4d8 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1b5ee:	b938      	cbnz	r0, 1b600 <flash_map_init+0x48>
   1b5f0:	9b03      	ldr	r3, [sp, #12]
   1b5f2:	2b00      	cmp	r3, #0
   1b5f4:	dd04      	ble.n	1b600 <flash_map_init+0x48>
        flash_map = mfg_areas;
   1b5f6:	4a08      	ldr	r2, [pc, #32]	; (1b618 <flash_map_init+0x60>)
   1b5f8:	490a      	ldr	r1, [pc, #40]	; (1b624 <flash_map_init+0x6c>)
   1b5fa:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1b5fc:	4a08      	ldr	r2, [pc, #32]	; (1b620 <flash_map_init+0x68>)
   1b5fe:	6013      	str	r3, [r2, #0]
    }
}
   1b600:	b004      	add	sp, #16
   1b602:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1b604:	461a      	mov	r2, r3
   1b606:	4619      	mov	r1, r3
   1b608:	4618      	mov	r0, r3
   1b60a:	f7fc fee3 	bl	183d4 <__assert_func>
   1b60e:	bf00      	nop
   1b610:	2000ddbc 	.word	0x2000ddbc
   1b614:	20000104 	.word	0x20000104
   1b618:	2000df84 	.word	0x2000df84
   1b61c:	00026554 	.word	0x00026554
   1b620:	2000df80 	.word	0x2000df80
   1b624:	2000dd1c 	.word	0x2000dd1c

0001b628 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   1b628:	4770      	bx	lr
	...

0001b62c <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1b62c:	b530      	push	{r4, r5, lr}
   1b62e:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1b630:	7885      	ldrb	r5, [r0, #2]
   1b632:	4b21      	ldr	r3, [pc, #132]	; (1b6b8 <mfg_seek_next_aux+0x8c>)
   1b634:	681b      	ldr	r3, [r3, #0]
   1b636:	429d      	cmp	r5, r3
   1b638:	da32      	bge.n	1b6a0 <mfg_seek_next_aux+0x74>
   1b63a:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1b63c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1b640:	0093      	lsls	r3, r2, #2
   1b642:	a901      	add	r1, sp, #4
   1b644:	4a1d      	ldr	r2, [pc, #116]	; (1b6bc <mfg_seek_next_aux+0x90>)
   1b646:	5cd0      	ldrb	r0, [r2, r3]
   1b648:	f7ff ff82 	bl	1b550 <flash_area_open>
    if (rc != 0) {
   1b64c:	bb58      	cbnz	r0, 1b6a6 <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1b64e:	6862      	ldr	r2, [r4, #4]
   1b650:	b9c2      	cbnz	r2, 1b684 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1b652:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1b656:	00aa      	lsls	r2, r5, #2
   1b658:	4b18      	ldr	r3, [pc, #96]	; (1b6bc <mfg_seek_next_aux+0x90>)
   1b65a:	4413      	add	r3, r2
   1b65c:	685b      	ldr	r3, [r3, #4]
   1b65e:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1b660:	6861      	ldr	r1, [r4, #4]
   1b662:	9801      	ldr	r0, [sp, #4]
   1b664:	6883      	ldr	r3, [r0, #8]
   1b666:	3b08      	subs	r3, #8
   1b668:	4299      	cmp	r1, r3
   1b66a:	d310      	bcc.n	1b68e <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1b66c:	78a3      	ldrb	r3, [r4, #2]
   1b66e:	1c59      	adds	r1, r3, #1
   1b670:	4a11      	ldr	r2, [pc, #68]	; (1b6b8 <mfg_seek_next_aux+0x8c>)
   1b672:	6812      	ldr	r2, [r2, #0]
   1b674:	4291      	cmp	r1, r2
   1b676:	da19      	bge.n	1b6ac <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1b678:	2200      	movs	r2, #0
   1b67a:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1b67c:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1b67e:	f06f 0305 	mvn.w	r3, #5
   1b682:	e015      	b.n	1b6b0 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1b684:	7863      	ldrb	r3, [r4, #1]
   1b686:	4413      	add	r3, r2
   1b688:	3302      	adds	r3, #2
   1b68a:	6063      	str	r3, [r4, #4]
   1b68c:	e7e8      	b.n	1b660 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1b68e:	2302      	movs	r3, #2
   1b690:	4622      	mov	r2, r4
   1b692:	f7ff ff7d 	bl	1b590 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1b696:	4603      	mov	r3, r0
   1b698:	b150      	cbz	r0, 1b6b0 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   1b69a:	f06f 0304 	mvn.w	r3, #4
   1b69e:	e007      	b.n	1b6b0 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   1b6a0:	f06f 0301 	mvn.w	r3, #1
   1b6a4:	e004      	b.n	1b6b0 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   1b6a6:	f06f 0304 	mvn.w	r3, #4
   1b6aa:	e001      	b.n	1b6b0 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   1b6ac:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   1b6b0:	4618      	mov	r0, r3
   1b6b2:	b003      	add	sp, #12
   1b6b4:	bd30      	pop	{r4, r5, pc}
   1b6b6:	bf00      	nop
   1b6b8:	2000ddb0 	.word	0x2000ddb0
   1b6bc:	2000dd98 	.word	0x2000dd98

0001b6c0 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1b6c0:	b530      	push	{r4, r5, lr}
   1b6c2:	b085      	sub	sp, #20
   1b6c4:	4605      	mov	r5, r0
   1b6c6:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1b6c8:	a903      	add	r1, sp, #12
   1b6ca:	f7ff ff41 	bl	1b550 <flash_area_open>
    if (rc != 0) {
   1b6ce:	b9e8      	cbnz	r0, 1b70c <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1b6d0:	9803      	ldr	r0, [sp, #12]
   1b6d2:	6881      	ldr	r1, [r0, #8]
   1b6d4:	2308      	movs	r3, #8
   1b6d6:	aa01      	add	r2, sp, #4
   1b6d8:	3908      	subs	r1, #8
   1b6da:	f7ff ff59 	bl	1b590 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1b6de:	4601      	mov	r1, r0
   1b6e0:	b9b8      	cbnz	r0, 1b712 <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1b6e2:	9a02      	ldr	r2, [sp, #8]
   1b6e4:	4b11      	ldr	r3, [pc, #68]	; (1b72c <mfg_read_mmr+0x6c>)
   1b6e6:	429a      	cmp	r2, r3
   1b6e8:	d116      	bne.n	1b718 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1b6ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1b6ee:	2b02      	cmp	r3, #2
   1b6f0:	d115      	bne.n	1b71e <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1b6f2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1b6f6:	9b03      	ldr	r3, [sp, #12]
   1b6f8:	689b      	ldr	r3, [r3, #8]
   1b6fa:	429a      	cmp	r2, r3
   1b6fc:	d812      	bhi.n	1b724 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1b6fe:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1b700:	7025      	strb	r5, [r4, #0]
   1b702:	6063      	str	r3, [r4, #4]
   1b704:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1b706:	4608      	mov	r0, r1
   1b708:	b005      	add	sp, #20
   1b70a:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1b70c:	f06f 0104 	mvn.w	r1, #4
   1b710:	e7f9      	b.n	1b706 <mfg_read_mmr+0x46>
        return SYS_EIO;
   1b712:	f06f 0104 	mvn.w	r1, #4
   1b716:	e7f6      	b.n	1b706 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1b718:	f06f 0108 	mvn.w	r1, #8
   1b71c:	e7f3      	b.n	1b706 <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   1b71e:	f06f 010b 	mvn.w	r1, #11
   1b722:	e7f0      	b.n	1b706 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1b724:	f06f 0108 	mvn.w	r1, #8
   1b728:	e7ed      	b.n	1b706 <mfg_read_mmr+0x46>
   1b72a:	bf00      	nop
   1b72c:	3bb2a269 	.word	0x3bb2a269

0001b730 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1b730:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1b732:	2300      	movs	r3, #0
   1b734:	4a11      	ldr	r2, [pc, #68]	; (1b77c <mfg_read_next_mmr+0x4c>)
   1b736:	6812      	ldr	r2, [r2, #0]
   1b738:	429a      	cmp	r2, r3
   1b73a:	dd08      	ble.n	1b74e <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   1b73c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1b740:	008a      	lsls	r2, r1, #2
   1b742:	490f      	ldr	r1, [pc, #60]	; (1b780 <mfg_read_next_mmr+0x50>)
   1b744:	5c8a      	ldrb	r2, [r1, r2]
   1b746:	4282      	cmp	r2, r0
   1b748:	d011      	beq.n	1b76e <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1b74a:	3301      	adds	r3, #1
   1b74c:	e7f2      	b.n	1b734 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1b74e:	2a01      	cmp	r2, #1
   1b750:	dc11      	bgt.n	1b776 <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1b752:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1b756:	0093      	lsls	r3, r2, #2
   1b758:	4909      	ldr	r1, [pc, #36]	; (1b780 <mfg_read_next_mmr+0x50>)
   1b75a:	4419      	add	r1, r3
   1b75c:	f7ff ffb0 	bl	1b6c0 <mfg_read_mmr>
    if (rc != 0) {
   1b760:	4603      	mov	r3, r0
   1b762:	b930      	cbnz	r0, 1b772 <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   1b764:	4905      	ldr	r1, [pc, #20]	; (1b77c <mfg_read_next_mmr+0x4c>)
   1b766:	680a      	ldr	r2, [r1, #0]
   1b768:	3201      	adds	r2, #1
   1b76a:	600a      	str	r2, [r1, #0]
    return 0;
   1b76c:	e001      	b.n	1b772 <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   1b76e:	f06f 030a 	mvn.w	r3, #10
}
   1b772:	4618      	mov	r0, r3
   1b774:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1b776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b77a:	e7fa      	b.n	1b772 <mfg_read_next_mmr+0x42>
   1b77c:	2000ddb0 	.word	0x2000ddb0
   1b780:	2000dd98 	.word	0x2000dd98

0001b784 <mfg_open_flash_area>:
{
   1b784:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1b786:	7883      	ldrb	r3, [r0, #2]
   1b788:	4a0b      	ldr	r2, [pc, #44]	; (1b7b8 <mfg_open_flash_area+0x34>)
   1b78a:	6812      	ldr	r2, [r2, #0]
   1b78c:	4293      	cmp	r3, r2
   1b78e:	da0a      	bge.n	1b7a6 <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   1b790:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b794:	009a      	lsls	r2, r3, #2
   1b796:	4b09      	ldr	r3, [pc, #36]	; (1b7bc <mfg_open_flash_area+0x38>)
   1b798:	5c98      	ldrb	r0, [r3, r2]
   1b79a:	f7ff fed9 	bl	1b550 <flash_area_open>
    if (rc != 0) {
   1b79e:	4603      	mov	r3, r0
   1b7a0:	b938      	cbnz	r0, 1b7b2 <mfg_open_flash_area+0x2e>
}
   1b7a2:	4618      	mov	r0, r3
   1b7a4:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1b7a6:	2300      	movs	r3, #0
   1b7a8:	461a      	mov	r2, r3
   1b7aa:	4619      	mov	r1, r3
   1b7ac:	4618      	mov	r0, r3
   1b7ae:	f7fc fe11 	bl	183d4 <__assert_func>
        return SYS_EIO;
   1b7b2:	f06f 0304 	mvn.w	r3, #4
   1b7b6:	e7f4      	b.n	1b7a2 <mfg_open_flash_area+0x1e>
   1b7b8:	2000ddb0 	.word	0x2000ddb0
   1b7bc:	2000dd98 	.word	0x2000dd98

0001b7c0 <mfg_read_tlv_body>:
{
   1b7c0:	b570      	push	{r4, r5, r6, lr}
   1b7c2:	b082      	sub	sp, #8
   1b7c4:	4606      	mov	r6, r0
   1b7c6:	460c      	mov	r4, r1
   1b7c8:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1b7ca:	a901      	add	r1, sp, #4
   1b7cc:	f7ff ffda 	bl	1b784 <mfg_open_flash_area>
    if (rc != 0) {
   1b7d0:	4603      	mov	r3, r0
   1b7d2:	b110      	cbz	r0, 1b7da <mfg_read_tlv_body+0x1a>
}
   1b7d4:	4618      	mov	r0, r3
   1b7d6:	b002      	add	sp, #8
   1b7d8:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1b7da:	462a      	mov	r2, r5
   1b7dc:	2100      	movs	r1, #0
   1b7de:	4620      	mov	r0, r4
   1b7e0:	f7fe f9fb 	bl	19bda <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1b7e4:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1b7e6:	6871      	ldr	r1, [r6, #4]
   1b7e8:	42ab      	cmp	r3, r5
   1b7ea:	bfa8      	it	ge
   1b7ec:	462b      	movge	r3, r5
   1b7ee:	4622      	mov	r2, r4
   1b7f0:	3102      	adds	r1, #2
   1b7f2:	9801      	ldr	r0, [sp, #4]
   1b7f4:	f7ff fecc 	bl	1b590 <flash_area_read>
    if (rc != 0) {
   1b7f8:	4603      	mov	r3, r0
   1b7fa:	2800      	cmp	r0, #0
   1b7fc:	d0ea      	beq.n	1b7d4 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   1b7fe:	f06f 0304 	mvn.w	r3, #4
   1b802:	e7e7      	b.n	1b7d4 <mfg_read_tlv_body+0x14>

0001b804 <mfg_seek_next>:
{
   1b804:	b510      	push	{r4, lr}
   1b806:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1b808:	4620      	mov	r0, r4
   1b80a:	f7ff ff0f 	bl	1b62c <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1b80e:	f110 0f06 	cmn.w	r0, #6
   1b812:	d0f9      	beq.n	1b808 <mfg_seek_next+0x4>
}
   1b814:	bd10      	pop	{r4, pc}

0001b816 <mfg_seek_next_with_type>:
{
   1b816:	b538      	push	{r3, r4, r5, lr}
   1b818:	4604      	mov	r4, r0
   1b81a:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1b81c:	4620      	mov	r0, r4
   1b81e:	f7ff fff1 	bl	1b804 <mfg_seek_next>
        if (rc != 0) {
   1b822:	4602      	mov	r2, r0
   1b824:	b910      	cbnz	r0, 1b82c <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1b826:	7823      	ldrb	r3, [r4, #0]
   1b828:	42ab      	cmp	r3, r5
   1b82a:	d1f7      	bne.n	1b81c <mfg_seek_next_with_type+0x6>
}
   1b82c:	4610      	mov	r0, r2
   1b82e:	bd38      	pop	{r3, r4, r5, pc}

0001b830 <mfg_read_tlv_flash_area>:
{
   1b830:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1b832:	220a      	movs	r2, #10
   1b834:	f7ff ffc4 	bl	1b7c0 <mfg_read_tlv_body>
}
   1b838:	bd08      	pop	{r3, pc}

0001b83a <mfg_read_tlv_mmr_ref>:
{
   1b83a:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1b83c:	2201      	movs	r2, #1
   1b83e:	f7ff ffbf 	bl	1b7c0 <mfg_read_tlv_body>
}
   1b842:	bd08      	pop	{r3, pc}

0001b844 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1b844:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1b846:	4b0b      	ldr	r3, [pc, #44]	; (1b874 <mfg_init+0x30>)
   1b848:	781b      	ldrb	r3, [r3, #0]
   1b84a:	b94b      	cbnz	r3, 1b860 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   1b84c:	4b09      	ldr	r3, [pc, #36]	; (1b874 <mfg_init+0x30>)
   1b84e:	2201      	movs	r2, #1
   1b850:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1b852:	4b09      	ldr	r3, [pc, #36]	; (1b878 <mfg_init+0x34>)
   1b854:	781b      	ldrb	r3, [r3, #0]
   1b856:	b123      	cbz	r3, 1b862 <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1b858:	2000      	movs	r0, #0
   1b85a:	f7ff ff69 	bl	1b730 <mfg_read_next_mmr>
    if (rc != 0) {
   1b85e:	b128      	cbz	r0, 1b86c <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
   1b860:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1b862:	461a      	mov	r2, r3
   1b864:	4619      	mov	r1, r3
   1b866:	4618      	mov	r0, r3
   1b868:	f7fc fdb4 	bl	183d4 <__assert_func>
    rc = mfg_read_mmr_refs();
   1b86c:	f000 f80e 	bl	1b88c <mfg_read_mmr_refs>
err:
   1b870:	e7f6      	b.n	1b860 <mfg_init+0x1c>
   1b872:	bf00      	nop
   1b874:	2000dd94 	.word	0x2000dd94
   1b878:	2000ddbc 	.word	0x2000ddbc

0001b87c <mfg_open>:
{
   1b87c:	b510      	push	{r4, lr}
   1b87e:	4604      	mov	r4, r0
    mfg_init();
   1b880:	f7ff ffe0 	bl	1b844 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1b884:	2300      	movs	r3, #0
   1b886:	6023      	str	r3, [r4, #0]
   1b888:	6063      	str	r3, [r4, #4]
}
   1b88a:	bd10      	pop	{r4, pc}

0001b88c <mfg_read_mmr_refs>:
{
   1b88c:	b500      	push	{lr}
   1b88e:	b085      	sub	sp, #20
    mfg_open(&reader);
   1b890:	a801      	add	r0, sp, #4
   1b892:	f7ff fff3 	bl	1b87c <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1b896:	2104      	movs	r1, #4
   1b898:	eb0d 0001 	add.w	r0, sp, r1
   1b89c:	f7ff ffbb 	bl	1b816 <mfg_seek_next_with_type>
   1b8a0:	4603      	mov	r3, r0
        switch (rc) {
   1b8a2:	f110 0f0f 	cmn.w	r0, #15
   1b8a6:	d004      	beq.n	1b8b2 <mfg_read_mmr_refs+0x26>
   1b8a8:	b128      	cbz	r0, 1b8b6 <mfg_read_mmr_refs+0x2a>
}
   1b8aa:	4618      	mov	r0, r3
   1b8ac:	b005      	add	sp, #20
   1b8ae:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   1b8b2:	2300      	movs	r3, #0
   1b8b4:	e7f9      	b.n	1b8aa <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1b8b6:	a903      	add	r1, sp, #12
   1b8b8:	a801      	add	r0, sp, #4
   1b8ba:	f7ff ffbe 	bl	1b83a <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1b8be:	4603      	mov	r3, r0
   1b8c0:	2800      	cmp	r0, #0
   1b8c2:	d1f2      	bne.n	1b8aa <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1b8c4:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1b8c8:	f7ff ff32 	bl	1b730 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1b8cc:	4603      	mov	r3, r0
   1b8ce:	2800      	cmp	r0, #0
   1b8d0:	d0e1      	beq.n	1b896 <mfg_read_mmr_refs+0xa>
   1b8d2:	f110 0f0b 	cmn.w	r0, #11
   1b8d6:	d0de      	beq.n	1b896 <mfg_read_mmr_refs+0xa>
   1b8d8:	e7e7      	b.n	1b8aa <mfg_read_mmr_refs+0x1e>
	...

0001b8dc <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   1b8dc:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   1b8de:	4803      	ldr	r0, [pc, #12]	; (1b8ec <__wrap_coap_receive+0x10>)
   1b8e0:	f7fb feb0 	bl	17644 <console_printf>
    return -1;
}
   1b8e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b8e8:	bd08      	pop	{r3, pc}
   1b8ea:	bf00      	nop
   1b8ec:	0002659c 	.word	0x0002659c

0001b8f0 <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   1b8f0:	4770      	bx	lr

0001b8f2 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1b8f2:	6843      	ldr	r3, [r0, #4]
   1b8f4:	428b      	cmp	r3, r1
   1b8f6:	d808      	bhi.n	1b90a <hal_flash_check_addr+0x18>
   1b8f8:	6882      	ldr	r2, [r0, #8]
   1b8fa:	4413      	add	r3, r2
   1b8fc:	428b      	cmp	r3, r1
   1b8fe:	d301      	bcc.n	1b904 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1b900:	2000      	movs	r0, #0
}
   1b902:	4770      	bx	lr
        return SYS_EINVAL;
   1b904:	f06f 0001 	mvn.w	r0, #1
   1b908:	4770      	bx	lr
   1b90a:	f06f 0001 	mvn.w	r0, #1
   1b90e:	4770      	bx	lr

0001b910 <hal_flash_init>:
{
   1b910:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1b912:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1b914:	462c      	mov	r4, r5
   1b916:	e001      	b.n	1b91c <hal_flash_init+0xc>
   1b918:	3401      	adds	r4, #1
   1b91a:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1b91c:	4620      	mov	r0, r4
   1b91e:	f7fe fce3 	bl	1a2e8 <hal_bsp_flash_dev>
        if (!hf) {
   1b922:	b138      	cbz	r0, 1b934 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1b924:	6802      	ldr	r2, [r0, #0]
   1b926:	6952      	ldr	r2, [r2, #20]
   1b928:	4790      	blx	r2
   1b92a:	2800      	cmp	r0, #0
   1b92c:	d0f4      	beq.n	1b918 <hal_flash_init+0x8>
            rc = SYS_EIO;
   1b92e:	f06f 0504 	mvn.w	r5, #4
   1b932:	e7f1      	b.n	1b918 <hal_flash_init+0x8>
}
   1b934:	4628      	mov	r0, r5
   1b936:	bd38      	pop	{r3, r4, r5, pc}

0001b938 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1b938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b93c:	460d      	mov	r5, r1
   1b93e:	4690      	mov	r8, r2
   1b940:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1b942:	f7fe fcd1 	bl	1a2e8 <hal_bsp_flash_dev>
    if (!hf) {
   1b946:	b1c0      	cbz	r0, 1b97a <hal_flash_read+0x42>
   1b948:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1b94a:	4629      	mov	r1, r5
   1b94c:	f7ff ffd1 	bl	1b8f2 <hal_flash_check_addr>
   1b950:	b9b0      	cbnz	r0, 1b980 <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1b952:	19a9      	adds	r1, r5, r6
   1b954:	4620      	mov	r0, r4
   1b956:	f7ff ffcc 	bl	1b8f2 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1b95a:	b9a0      	cbnz	r0, 1b986 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1b95c:	6823      	ldr	r3, [r4, #0]
   1b95e:	681f      	ldr	r7, [r3, #0]
   1b960:	4633      	mov	r3, r6
   1b962:	4642      	mov	r2, r8
   1b964:	4629      	mov	r1, r5
   1b966:	4620      	mov	r0, r4
   1b968:	47b8      	blx	r7
    if (rc != 0) {
   1b96a:	4603      	mov	r3, r0
   1b96c:	b910      	cbnz	r0, 1b974 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1b96e:	4618      	mov	r0, r3
   1b970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1b974:	f06f 0304 	mvn.w	r3, #4
   1b978:	e7f9      	b.n	1b96e <hal_flash_read+0x36>
        return SYS_EINVAL;
   1b97a:	f06f 0301 	mvn.w	r3, #1
   1b97e:	e7f6      	b.n	1b96e <hal_flash_read+0x36>
        return SYS_EINVAL;
   1b980:	f06f 0301 	mvn.w	r3, #1
   1b984:	e7f3      	b.n	1b96e <hal_flash_read+0x36>
   1b986:	f06f 0301 	mvn.w	r3, #1
   1b98a:	e7f0      	b.n	1b96e <hal_flash_read+0x36>

0001b98c <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   1b98c:	2010      	movs	r0, #16
   1b98e:	4770      	bx	lr

0001b990 <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   1b990:	b570      	push	{r4, r5, r6, lr}
   1b992:	4606      	mov	r6, r0
   1b994:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   1b996:	460d      	mov	r5, r1
   1b998:	2908      	cmp	r1, #8
   1b99a:	bf28      	it	cs
   1b99c:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   1b99e:	462a      	mov	r2, r5
   1b9a0:	4906      	ldr	r1, [pc, #24]	; (1b9bc <hal_bsp_hw_id+0x2c>)
   1b9a2:	f7fe f90d 	bl	19bc0 <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   1b9a6:	1b64      	subs	r4, r4, r5
   1b9a8:	2c08      	cmp	r4, #8
   1b9aa:	bf28      	it	cs
   1b9ac:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   1b9ae:	4622      	mov	r2, r4
   1b9b0:	4903      	ldr	r1, [pc, #12]	; (1b9c0 <hal_bsp_hw_id+0x30>)
   1b9b2:	1970      	adds	r0, r6, r5
   1b9b4:	f7fe f904 	bl	19bc0 <memcpy>

    return len + cnt;
}
   1b9b8:	1928      	adds	r0, r5, r4
   1b9ba:	bd70      	pop	{r4, r5, r6, pc}
   1b9bc:	10000060 	.word	0x10000060
   1b9c0:	100000a4 	.word	0x100000a4

0001b9c4 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1b9c4:	b40e      	push	{r1, r2, r3}
   1b9c6:	b500      	push	{lr}
   1b9c8:	b082      	sub	sp, #8
   1b9ca:	ab03      	add	r3, sp, #12
   1b9cc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1b9d0:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1b9d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b9d6:	f7fe fbef 	bl	1a1b8 <vsnprintf>
	va_end(ap);

	return rv;
}
   1b9da:	b002      	add	sp, #8
   1b9dc:	f85d eb04 	ldr.w	lr, [sp], #4
   1b9e0:	b003      	add	sp, #12
   1b9e2:	4770      	bx	lr

0001b9e4 <__aeabi_uldivmod>:
   1b9e4:	b953      	cbnz	r3, 1b9fc <__aeabi_uldivmod+0x18>
   1b9e6:	b94a      	cbnz	r2, 1b9fc <__aeabi_uldivmod+0x18>
   1b9e8:	2900      	cmp	r1, #0
   1b9ea:	bf08      	it	eq
   1b9ec:	2800      	cmpeq	r0, #0
   1b9ee:	bf1c      	itt	ne
   1b9f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1b9f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1b9f8:	f000 b972 	b.w	1bce0 <__aeabi_idiv0>
   1b9fc:	f1ad 0c08 	sub.w	ip, sp, #8
   1ba00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1ba04:	f000 f806 	bl	1ba14 <__udivmoddi4>
   1ba08:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ba0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ba10:	b004      	add	sp, #16
   1ba12:	4770      	bx	lr

0001ba14 <__udivmoddi4>:
   1ba14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ba18:	9e08      	ldr	r6, [sp, #32]
   1ba1a:	4604      	mov	r4, r0
   1ba1c:	4688      	mov	r8, r1
   1ba1e:	2b00      	cmp	r3, #0
   1ba20:	d14b      	bne.n	1baba <__udivmoddi4+0xa6>
   1ba22:	428a      	cmp	r2, r1
   1ba24:	4615      	mov	r5, r2
   1ba26:	d967      	bls.n	1baf8 <__udivmoddi4+0xe4>
   1ba28:	fab2 f282 	clz	r2, r2
   1ba2c:	b14a      	cbz	r2, 1ba42 <__udivmoddi4+0x2e>
   1ba2e:	f1c2 0720 	rsb	r7, r2, #32
   1ba32:	fa01 f302 	lsl.w	r3, r1, r2
   1ba36:	fa20 f707 	lsr.w	r7, r0, r7
   1ba3a:	4095      	lsls	r5, r2
   1ba3c:	ea47 0803 	orr.w	r8, r7, r3
   1ba40:	4094      	lsls	r4, r2
   1ba42:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1ba46:	0c23      	lsrs	r3, r4, #16
   1ba48:	fbb8 f7fe 	udiv	r7, r8, lr
   1ba4c:	fa1f fc85 	uxth.w	ip, r5
   1ba50:	fb0e 8817 	mls	r8, lr, r7, r8
   1ba54:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   1ba58:	fb07 f10c 	mul.w	r1, r7, ip
   1ba5c:	4299      	cmp	r1, r3
   1ba5e:	d909      	bls.n	1ba74 <__udivmoddi4+0x60>
   1ba60:	18eb      	adds	r3, r5, r3
   1ba62:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1ba66:	f080 811b 	bcs.w	1bca0 <__udivmoddi4+0x28c>
   1ba6a:	4299      	cmp	r1, r3
   1ba6c:	f240 8118 	bls.w	1bca0 <__udivmoddi4+0x28c>
   1ba70:	3f02      	subs	r7, #2
   1ba72:	442b      	add	r3, r5
   1ba74:	1a5b      	subs	r3, r3, r1
   1ba76:	b2a4      	uxth	r4, r4
   1ba78:	fbb3 f0fe 	udiv	r0, r3, lr
   1ba7c:	fb0e 3310 	mls	r3, lr, r0, r3
   1ba80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1ba84:	fb00 fc0c 	mul.w	ip, r0, ip
   1ba88:	45a4      	cmp	ip, r4
   1ba8a:	d909      	bls.n	1baa0 <__udivmoddi4+0x8c>
   1ba8c:	192c      	adds	r4, r5, r4
   1ba8e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1ba92:	f080 8107 	bcs.w	1bca4 <__udivmoddi4+0x290>
   1ba96:	45a4      	cmp	ip, r4
   1ba98:	f240 8104 	bls.w	1bca4 <__udivmoddi4+0x290>
   1ba9c:	3802      	subs	r0, #2
   1ba9e:	442c      	add	r4, r5
   1baa0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1baa4:	eba4 040c 	sub.w	r4, r4, ip
   1baa8:	2700      	movs	r7, #0
   1baaa:	b11e      	cbz	r6, 1bab4 <__udivmoddi4+0xa0>
   1baac:	40d4      	lsrs	r4, r2
   1baae:	2300      	movs	r3, #0
   1bab0:	e9c6 4300 	strd	r4, r3, [r6]
   1bab4:	4639      	mov	r1, r7
   1bab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1baba:	428b      	cmp	r3, r1
   1babc:	d909      	bls.n	1bad2 <__udivmoddi4+0xbe>
   1babe:	2e00      	cmp	r6, #0
   1bac0:	f000 80eb 	beq.w	1bc9a <__udivmoddi4+0x286>
   1bac4:	2700      	movs	r7, #0
   1bac6:	e9c6 0100 	strd	r0, r1, [r6]
   1baca:	4638      	mov	r0, r7
   1bacc:	4639      	mov	r1, r7
   1bace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bad2:	fab3 f783 	clz	r7, r3
   1bad6:	2f00      	cmp	r7, #0
   1bad8:	d147      	bne.n	1bb6a <__udivmoddi4+0x156>
   1bada:	428b      	cmp	r3, r1
   1badc:	d302      	bcc.n	1bae4 <__udivmoddi4+0xd0>
   1bade:	4282      	cmp	r2, r0
   1bae0:	f200 80fa 	bhi.w	1bcd8 <__udivmoddi4+0x2c4>
   1bae4:	1a84      	subs	r4, r0, r2
   1bae6:	eb61 0303 	sbc.w	r3, r1, r3
   1baea:	2001      	movs	r0, #1
   1baec:	4698      	mov	r8, r3
   1baee:	2e00      	cmp	r6, #0
   1baf0:	d0e0      	beq.n	1bab4 <__udivmoddi4+0xa0>
   1baf2:	e9c6 4800 	strd	r4, r8, [r6]
   1baf6:	e7dd      	b.n	1bab4 <__udivmoddi4+0xa0>
   1baf8:	b902      	cbnz	r2, 1bafc <__udivmoddi4+0xe8>
   1bafa:	deff      	udf	#255	; 0xff
   1bafc:	fab2 f282 	clz	r2, r2
   1bb00:	2a00      	cmp	r2, #0
   1bb02:	f040 808f 	bne.w	1bc24 <__udivmoddi4+0x210>
   1bb06:	1b49      	subs	r1, r1, r5
   1bb08:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1bb0c:	fa1f f885 	uxth.w	r8, r5
   1bb10:	2701      	movs	r7, #1
   1bb12:	fbb1 fcfe 	udiv	ip, r1, lr
   1bb16:	0c23      	lsrs	r3, r4, #16
   1bb18:	fb0e 111c 	mls	r1, lr, ip, r1
   1bb1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1bb20:	fb08 f10c 	mul.w	r1, r8, ip
   1bb24:	4299      	cmp	r1, r3
   1bb26:	d907      	bls.n	1bb38 <__udivmoddi4+0x124>
   1bb28:	18eb      	adds	r3, r5, r3
   1bb2a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1bb2e:	d202      	bcs.n	1bb36 <__udivmoddi4+0x122>
   1bb30:	4299      	cmp	r1, r3
   1bb32:	f200 80cd 	bhi.w	1bcd0 <__udivmoddi4+0x2bc>
   1bb36:	4684      	mov	ip, r0
   1bb38:	1a59      	subs	r1, r3, r1
   1bb3a:	b2a3      	uxth	r3, r4
   1bb3c:	fbb1 f0fe 	udiv	r0, r1, lr
   1bb40:	fb0e 1410 	mls	r4, lr, r0, r1
   1bb44:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   1bb48:	fb08 f800 	mul.w	r8, r8, r0
   1bb4c:	45a0      	cmp	r8, r4
   1bb4e:	d907      	bls.n	1bb60 <__udivmoddi4+0x14c>
   1bb50:	192c      	adds	r4, r5, r4
   1bb52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1bb56:	d202      	bcs.n	1bb5e <__udivmoddi4+0x14a>
   1bb58:	45a0      	cmp	r8, r4
   1bb5a:	f200 80b6 	bhi.w	1bcca <__udivmoddi4+0x2b6>
   1bb5e:	4618      	mov	r0, r3
   1bb60:	eba4 0408 	sub.w	r4, r4, r8
   1bb64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1bb68:	e79f      	b.n	1baaa <__udivmoddi4+0x96>
   1bb6a:	f1c7 0c20 	rsb	ip, r7, #32
   1bb6e:	40bb      	lsls	r3, r7
   1bb70:	fa22 fe0c 	lsr.w	lr, r2, ip
   1bb74:	ea4e 0e03 	orr.w	lr, lr, r3
   1bb78:	fa01 f407 	lsl.w	r4, r1, r7
   1bb7c:	fa20 f50c 	lsr.w	r5, r0, ip
   1bb80:	fa21 f30c 	lsr.w	r3, r1, ip
   1bb84:	ea4f 481e 	mov.w	r8, lr, lsr #16
   1bb88:	4325      	orrs	r5, r4
   1bb8a:	fbb3 f9f8 	udiv	r9, r3, r8
   1bb8e:	0c2c      	lsrs	r4, r5, #16
   1bb90:	fb08 3319 	mls	r3, r8, r9, r3
   1bb94:	fa1f fa8e 	uxth.w	sl, lr
   1bb98:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1bb9c:	fb09 f40a 	mul.w	r4, r9, sl
   1bba0:	429c      	cmp	r4, r3
   1bba2:	fa02 f207 	lsl.w	r2, r2, r7
   1bba6:	fa00 f107 	lsl.w	r1, r0, r7
   1bbaa:	d90b      	bls.n	1bbc4 <__udivmoddi4+0x1b0>
   1bbac:	eb1e 0303 	adds.w	r3, lr, r3
   1bbb0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1bbb4:	f080 8087 	bcs.w	1bcc6 <__udivmoddi4+0x2b2>
   1bbb8:	429c      	cmp	r4, r3
   1bbba:	f240 8084 	bls.w	1bcc6 <__udivmoddi4+0x2b2>
   1bbbe:	f1a9 0902 	sub.w	r9, r9, #2
   1bbc2:	4473      	add	r3, lr
   1bbc4:	1b1b      	subs	r3, r3, r4
   1bbc6:	b2ad      	uxth	r5, r5
   1bbc8:	fbb3 f0f8 	udiv	r0, r3, r8
   1bbcc:	fb08 3310 	mls	r3, r8, r0, r3
   1bbd0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1bbd4:	fb00 fa0a 	mul.w	sl, r0, sl
   1bbd8:	45a2      	cmp	sl, r4
   1bbda:	d908      	bls.n	1bbee <__udivmoddi4+0x1da>
   1bbdc:	eb1e 0404 	adds.w	r4, lr, r4
   1bbe0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1bbe4:	d26b      	bcs.n	1bcbe <__udivmoddi4+0x2aa>
   1bbe6:	45a2      	cmp	sl, r4
   1bbe8:	d969      	bls.n	1bcbe <__udivmoddi4+0x2aa>
   1bbea:	3802      	subs	r0, #2
   1bbec:	4474      	add	r4, lr
   1bbee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1bbf2:	fba0 8902 	umull	r8, r9, r0, r2
   1bbf6:	eba4 040a 	sub.w	r4, r4, sl
   1bbfa:	454c      	cmp	r4, r9
   1bbfc:	46c2      	mov	sl, r8
   1bbfe:	464b      	mov	r3, r9
   1bc00:	d354      	bcc.n	1bcac <__udivmoddi4+0x298>
   1bc02:	d051      	beq.n	1bca8 <__udivmoddi4+0x294>
   1bc04:	2e00      	cmp	r6, #0
   1bc06:	d069      	beq.n	1bcdc <__udivmoddi4+0x2c8>
   1bc08:	ebb1 050a 	subs.w	r5, r1, sl
   1bc0c:	eb64 0403 	sbc.w	r4, r4, r3
   1bc10:	fa04 fc0c 	lsl.w	ip, r4, ip
   1bc14:	40fd      	lsrs	r5, r7
   1bc16:	40fc      	lsrs	r4, r7
   1bc18:	ea4c 0505 	orr.w	r5, ip, r5
   1bc1c:	e9c6 5400 	strd	r5, r4, [r6]
   1bc20:	2700      	movs	r7, #0
   1bc22:	e747      	b.n	1bab4 <__udivmoddi4+0xa0>
   1bc24:	f1c2 0320 	rsb	r3, r2, #32
   1bc28:	fa20 f703 	lsr.w	r7, r0, r3
   1bc2c:	4095      	lsls	r5, r2
   1bc2e:	fa01 f002 	lsl.w	r0, r1, r2
   1bc32:	fa21 f303 	lsr.w	r3, r1, r3
   1bc36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1bc3a:	4338      	orrs	r0, r7
   1bc3c:	0c01      	lsrs	r1, r0, #16
   1bc3e:	fbb3 f7fe 	udiv	r7, r3, lr
   1bc42:	fa1f f885 	uxth.w	r8, r5
   1bc46:	fb0e 3317 	mls	r3, lr, r7, r3
   1bc4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1bc4e:	fb07 f308 	mul.w	r3, r7, r8
   1bc52:	428b      	cmp	r3, r1
   1bc54:	fa04 f402 	lsl.w	r4, r4, r2
   1bc58:	d907      	bls.n	1bc6a <__udivmoddi4+0x256>
   1bc5a:	1869      	adds	r1, r5, r1
   1bc5c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   1bc60:	d22f      	bcs.n	1bcc2 <__udivmoddi4+0x2ae>
   1bc62:	428b      	cmp	r3, r1
   1bc64:	d92d      	bls.n	1bcc2 <__udivmoddi4+0x2ae>
   1bc66:	3f02      	subs	r7, #2
   1bc68:	4429      	add	r1, r5
   1bc6a:	1acb      	subs	r3, r1, r3
   1bc6c:	b281      	uxth	r1, r0
   1bc6e:	fbb3 f0fe 	udiv	r0, r3, lr
   1bc72:	fb0e 3310 	mls	r3, lr, r0, r3
   1bc76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1bc7a:	fb00 f308 	mul.w	r3, r0, r8
   1bc7e:	428b      	cmp	r3, r1
   1bc80:	d907      	bls.n	1bc92 <__udivmoddi4+0x27e>
   1bc82:	1869      	adds	r1, r5, r1
   1bc84:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1bc88:	d217      	bcs.n	1bcba <__udivmoddi4+0x2a6>
   1bc8a:	428b      	cmp	r3, r1
   1bc8c:	d915      	bls.n	1bcba <__udivmoddi4+0x2a6>
   1bc8e:	3802      	subs	r0, #2
   1bc90:	4429      	add	r1, r5
   1bc92:	1ac9      	subs	r1, r1, r3
   1bc94:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   1bc98:	e73b      	b.n	1bb12 <__udivmoddi4+0xfe>
   1bc9a:	4637      	mov	r7, r6
   1bc9c:	4630      	mov	r0, r6
   1bc9e:	e709      	b.n	1bab4 <__udivmoddi4+0xa0>
   1bca0:	4607      	mov	r7, r0
   1bca2:	e6e7      	b.n	1ba74 <__udivmoddi4+0x60>
   1bca4:	4618      	mov	r0, r3
   1bca6:	e6fb      	b.n	1baa0 <__udivmoddi4+0x8c>
   1bca8:	4541      	cmp	r1, r8
   1bcaa:	d2ab      	bcs.n	1bc04 <__udivmoddi4+0x1f0>
   1bcac:	ebb8 0a02 	subs.w	sl, r8, r2
   1bcb0:	eb69 020e 	sbc.w	r2, r9, lr
   1bcb4:	3801      	subs	r0, #1
   1bcb6:	4613      	mov	r3, r2
   1bcb8:	e7a4      	b.n	1bc04 <__udivmoddi4+0x1f0>
   1bcba:	4660      	mov	r0, ip
   1bcbc:	e7e9      	b.n	1bc92 <__udivmoddi4+0x27e>
   1bcbe:	4618      	mov	r0, r3
   1bcc0:	e795      	b.n	1bbee <__udivmoddi4+0x1da>
   1bcc2:	4667      	mov	r7, ip
   1bcc4:	e7d1      	b.n	1bc6a <__udivmoddi4+0x256>
   1bcc6:	4681      	mov	r9, r0
   1bcc8:	e77c      	b.n	1bbc4 <__udivmoddi4+0x1b0>
   1bcca:	3802      	subs	r0, #2
   1bccc:	442c      	add	r4, r5
   1bcce:	e747      	b.n	1bb60 <__udivmoddi4+0x14c>
   1bcd0:	f1ac 0c02 	sub.w	ip, ip, #2
   1bcd4:	442b      	add	r3, r5
   1bcd6:	e72f      	b.n	1bb38 <__udivmoddi4+0x124>
   1bcd8:	4638      	mov	r0, r7
   1bcda:	e708      	b.n	1baee <__udivmoddi4+0xda>
   1bcdc:	4637      	mov	r7, r6
   1bcde:	e6e9      	b.n	1bab4 <__udivmoddi4+0xa0>

0001bce0 <__aeabi_idiv0>:
   1bce0:	4770      	bx	lr
   1bce2:	bf00      	nop

0001bce4 <__aeabi_memclr>:
   1bce4:	2200      	movs	r2, #0
   1bce6:	f000 b803 	b.w	1bcf0 <__aeabi_memset>
   1bcea:	bf00      	nop

0001bcec <__aeabi_memcpy>:
   1bcec:	f7fd bf68 	b.w	19bc0 <memcpy>

0001bcf0 <__aeabi_memset>:
   1bcf0:	b470      	push	{r4, r5, r6}
   1bcf2:	0784      	lsls	r4, r0, #30
   1bcf4:	d046      	beq.n	1bd84 <__aeabi_memset+0x94>
   1bcf6:	1e4c      	subs	r4, r1, #1
   1bcf8:	2900      	cmp	r1, #0
   1bcfa:	d041      	beq.n	1bd80 <__aeabi_memset+0x90>
   1bcfc:	b2d5      	uxtb	r5, r2
   1bcfe:	4603      	mov	r3, r0
   1bd00:	e002      	b.n	1bd08 <__aeabi_memset+0x18>
   1bd02:	1e61      	subs	r1, r4, #1
   1bd04:	b3e4      	cbz	r4, 1bd80 <__aeabi_memset+0x90>
   1bd06:	460c      	mov	r4, r1
   1bd08:	f803 5b01 	strb.w	r5, [r3], #1
   1bd0c:	0799      	lsls	r1, r3, #30
   1bd0e:	d1f8      	bne.n	1bd02 <__aeabi_memset+0x12>
   1bd10:	2c03      	cmp	r4, #3
   1bd12:	d92e      	bls.n	1bd72 <__aeabi_memset+0x82>
   1bd14:	b2d5      	uxtb	r5, r2
   1bd16:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1bd1a:	2c0f      	cmp	r4, #15
   1bd1c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1bd20:	d919      	bls.n	1bd56 <__aeabi_memset+0x66>
   1bd22:	4626      	mov	r6, r4
   1bd24:	f103 0110 	add.w	r1, r3, #16
   1bd28:	3e10      	subs	r6, #16
   1bd2a:	2e0f      	cmp	r6, #15
   1bd2c:	f841 5c10 	str.w	r5, [r1, #-16]
   1bd30:	f841 5c0c 	str.w	r5, [r1, #-12]
   1bd34:	f841 5c08 	str.w	r5, [r1, #-8]
   1bd38:	f841 5c04 	str.w	r5, [r1, #-4]
   1bd3c:	f101 0110 	add.w	r1, r1, #16
   1bd40:	d8f2      	bhi.n	1bd28 <__aeabi_memset+0x38>
   1bd42:	f1a4 0110 	sub.w	r1, r4, #16
   1bd46:	f021 010f 	bic.w	r1, r1, #15
   1bd4a:	f004 040f 	and.w	r4, r4, #15
   1bd4e:	3110      	adds	r1, #16
   1bd50:	2c03      	cmp	r4, #3
   1bd52:	440b      	add	r3, r1
   1bd54:	d90d      	bls.n	1bd72 <__aeabi_memset+0x82>
   1bd56:	461e      	mov	r6, r3
   1bd58:	4621      	mov	r1, r4
   1bd5a:	3904      	subs	r1, #4
   1bd5c:	2903      	cmp	r1, #3
   1bd5e:	f846 5b04 	str.w	r5, [r6], #4
   1bd62:	d8fa      	bhi.n	1bd5a <__aeabi_memset+0x6a>
   1bd64:	1f21      	subs	r1, r4, #4
   1bd66:	f021 0103 	bic.w	r1, r1, #3
   1bd6a:	3104      	adds	r1, #4
   1bd6c:	440b      	add	r3, r1
   1bd6e:	f004 0403 	and.w	r4, r4, #3
   1bd72:	b12c      	cbz	r4, 1bd80 <__aeabi_memset+0x90>
   1bd74:	b2d2      	uxtb	r2, r2
   1bd76:	441c      	add	r4, r3
   1bd78:	f803 2b01 	strb.w	r2, [r3], #1
   1bd7c:	42a3      	cmp	r3, r4
   1bd7e:	d1fb      	bne.n	1bd78 <__aeabi_memset+0x88>
   1bd80:	bc70      	pop	{r4, r5, r6}
   1bd82:	4770      	bx	lr
   1bd84:	460c      	mov	r4, r1
   1bd86:	4603      	mov	r3, r0
   1bd88:	e7c2      	b.n	1bd10 <__aeabi_memset+0x20>
   1bd8a:	5344      	.short	0x5344
   1bd8c:	61662050 	.word	0x61662050
   1bd90:	43546c69 	.word	0x43546c69
   1bd94:	61662048 	.word	0x61662048
   1bd98:	45476c69 	.word	0x45476c69
   1bd9c:	61662054 	.word	0x61662054
   1bda0:	55526c69 	.word	0x55526c69
   1bda4:	6166204e 	.word	0x6166204e
   1bda8:	6c69      	.short	0x6c69
   1bdaa:	7572      	.short	0x7572
   1bdac:	612f7473 	.word	0x612f7473
   1bdb0:	732f7070 	.word	0x732f7070
   1bdb4:	6c2f6372 	.word	0x6c2f6372
   1bdb8:	722e6269 	.word	0x722e6269
   1bdbc:	00000073 	.word	0x00000073
   1bdc0:	0001bdaa 	.word	0x0001bdaa
   1bdc4:	00000013 	.word	0x00000013
   1bdc8:	0000005c 	.word	0x0000005c
   1bdcc:	00000005 	.word	0x00000005
   1bdd0:	0001bdaa 	.word	0x0001bdaa
   1bdd4:	00000013 	.word	0x00000013
   1bdd8:	00000065 	.word	0x00000065
   1bddc:	00000005 	.word	0x00000005
   1bde0:	50494843 	.word	0x50494843
   1bde4:	61662038 	.word	0x61662038
   1bde8:	00006c69 	.word	0x00006c69
   1bdec:	0001bdaa 	.word	0x0001bdaa
   1bdf0:	00000013 	.word	0x00000013
   1bdf4:	00000077 	.word	0x00000077
   1bdf8:	00000005 	.word	0x00000005
   1bdfc:	0001bdaa 	.word	0x0001bdaa
   1be00:	00000013 	.word	0x00000013
   1be04:	0000007d 	.word	0x0000007d
   1be08:	0000000d 	.word	0x0000000d
   1be0c:	0001bdaa 	.word	0x0001bdaa
   1be10:	00000013 	.word	0x00000013
   1be14:	0000007c 	.word	0x0000007c
   1be18:	00000009 	.word	0x00000009
   1be1c:	696e6170 	.word	0x696e6170
   1be20:	2063      	.short	0x2063
   1be22:	6f6e      	.short	0x6f6e
   1be24:	636f6c20 	.word	0x636f6c20
   1be28:	0a          	.byte	0x0a
   1be29:	61          	.byte	0x61
   1be2a:	2074      	.short	0x2074
   1be2c:	6e696c20 	.word	0x6e696c20
   1be30:	2065      	.short	0x2065
   1be32:	000a      	.short	0x000a
   1be34:	0001bdaa 	.word	0x0001bdaa
   1be38:	00000013 	.word	0x00000013
   1be3c:	00000095 	.word	0x00000095
   1be40:	00000014 	.word	0x00000014
   1be44:	6c6c6163 	.word	0x6c6c6163
   1be48:	60206465 	.word	0x60206465
   1be4c:	6974704f 	.word	0x6974704f
   1be50:	3a3a6e6f 	.word	0x3a3a6e6f
   1be54:	72776e75 	.word	0x72776e75
   1be58:	29287061 	.word	0x29287061
   1be5c:	6e6f2060 	.word	0x6e6f2060
   1be60:	60206120 	.word	0x60206120
   1be64:	656e6f4e 	.word	0x656e6f4e
   1be68:	61762060 	.word	0x61762060
   1be6c:	756c      	.short	0x756c
   1be6e:	65          	.byte	0x65
   1be6f:	00          	.byte	0x00
   1be70:	0001be6f 	.word	0x0001be6f
   1be74:	0001be70 	.word	0x0001be70
   1be78:	65737361 	.word	0x65737361
   1be7c:	6f697472 	.word	0x6f697472
   1be80:	6166206e 	.word	0x6166206e
   1be84:	64656c69 	.word	0x64656c69
   1be88:	2860203a 	.word	0x2860203a
   1be8c:	7466656c 	.word	0x7466656c
   1be90:	203d3d20 	.word	0x203d3d20
   1be94:	68676972 	.word	0x68676972
   1be98:	0a602974 	.word	0x0a602974
   1be9c:	656c2020 	.word	0x656c2020
   1bea0:	203a7466 	.word	0x203a7466
   1bea4:	60          	.byte	0x60
   1bea5:	60          	.byte	0x60
   1bea6:	0a2c      	.short	0x0a2c
   1bea8:	67697220 	.word	0x67697220
   1beac:	203a7468 	.word	0x203a7468
   1beb0:	60          	.byte	0x60
   1beb1:	60          	.byte	0x60
   1beb2:	203a      	.short	0x203a
   1beb4:	0001be78 	.word	0x0001be78
   1beb8:	0000002d 	.word	0x0000002d
   1bebc:	0001bea5 	.word	0x0001bea5
   1bec0:	0000000c 	.word	0x0000000c
   1bec4:	0001beb1 	.word	0x0001beb1
   1bec8:	00000003 	.word	0x00000003
   1becc:	0001beb4 	.word	0x0001beb4
   1bed0:	6e206f6e 	.word	0x6e206f6e
   1bed4:	006c6c75 	.word	0x006c6c75
   1bed8:	0001bed0 	.word	0x0001bed0
   1bedc:	00000007 	.word	0x00000007
   1bee0:	0001bed8 	.word	0x0001bed8
   1bee4:	0001bee4 	.word	0x0001bee4
   1bee8:	74737572 	.word	0x74737572
   1beec:	6e796d2f 	.word	0x6e796d2f
   1bef0:	2f747765 	.word	0x2f747765
   1bef4:	2f637273 	.word	0x2f637273
   1bef8:	2e62696c 	.word	0x2e62696c
   1befc:	00007372 	.word	0x00007372
   1bf00:	0001bee8 	.word	0x0001bee8
   1bf04:	00000016 	.word	0x00000016
   1bf08:	000000db 	.word	0x000000db
   1bf0c:	00000011 	.word	0x00000011
   1bf10:	00008e55 	.word	0x00008e55
   1bf14:	00000004 	.word	0x00000004
   1bf18:	00000004 	.word	0x00000004
   1bf1c:	0001254f 	.word	0x0001254f
   1bf20:	65737361 	.word	0x65737361
   1bf24:	6f697472 	.word	0x6f697472
   1bf28:	6166206e 	.word	0x6166206e
   1bf2c:	64656c69 	.word	0x64656c69
   1bf30:	2860203a 	.word	0x2860203a
   1bf34:	7466656c 	.word	0x7466656c
   1bf38:	203d3d20 	.word	0x203d3d20
   1bf3c:	68676972 	.word	0x68676972
   1bf40:	0a602974 	.word	0x0a602974
   1bf44:	656c2020 	.word	0x656c2020
   1bf48:	203a7466 	.word	0x203a7466
   1bf4c:	60          	.byte	0x60
   1bf4d:	60          	.byte	0x60
   1bf4e:	0a2c      	.short	0x0a2c
   1bf50:	67697220 	.word	0x67697220
   1bf54:	203a7468 	.word	0x203a7468
   1bf58:	60          	.byte	0x60
   1bf59:	60          	.byte	0x60
   1bf5a:	203a      	.short	0x203a
   1bf5c:	0001bf20 	.word	0x0001bf20
   1bf60:	0000002d 	.word	0x0000002d
   1bf64:	0001bf4d 	.word	0x0001bf4d
   1bf68:	0000000c 	.word	0x0000000c
   1bf6c:	0001bf59 	.word	0x0001bf59
   1bf70:	00000003 	.word	0x00000003
   1bf74:	0001bf5c 	.word	0x0001bf5c
   1bf78:	74736564 	.word	0x74736564
   1bf7c:	74616e69 	.word	0x74616e69
   1bf80:	206e6f69 	.word	0x206e6f69
   1bf84:	20646e61 	.word	0x20646e61
   1bf88:	72756f73 	.word	0x72756f73
   1bf8c:	73206563 	.word	0x73206563
   1bf90:	6563696c 	.word	0x6563696c
   1bf94:	61682073 	.word	0x61682073
   1bf98:	64206576 	.word	0x64206576
   1bf9c:	65666669 	.word	0x65666669
   1bfa0:	746e6572 	.word	0x746e6572
   1bfa4:	6e656c20 	.word	0x6e656c20
   1bfa8:	73687467 	.word	0x73687467
   1bfac:	0001bf78 	.word	0x0001bf78
   1bfb0:	00000034 	.word	0x00000034
   1bfb4:	0001bfac 	.word	0x0001bfac
   1bfb8:	0001bfb8 	.word	0x0001bfb8
   1bfbc:	7375722f 	.word	0x7375722f
   1bfc0:	352f6374 	.word	0x352f6374
   1bfc4:	66613765 	.word	0x66613765
   1bfc8:	39363634 	.word	0x39363634
   1bfcc:	65303866 	.word	0x65303866
   1bfd0:	38366635 	.word	0x38366635
   1bfd4:	31343132 	.word	0x31343132
   1bfd8:	30353066 	.word	0x30353066
   1bfdc:	61333931 	.word	0x61333931
   1bfe0:	39373662 	.word	0x39373662
   1bfe4:	62646661 	.word	0x62646661
   1bfe8:	2f316234 	.word	0x2f316234
   1bfec:	2f637273 	.word	0x2f637273
   1bff0:	6362696c 	.word	0x6362696c
   1bff4:	2f65726f 	.word	0x2f65726f
   1bff8:	7263616d 	.word	0x7263616d
   1bffc:	6d2f736f 	.word	0x6d2f736f
   1c000:	722e646f 	.word	0x722e646f
   1c004:	00000073 	.word	0x00000073
   1c008:	0001bfbc 	.word	0x0001bfbc
   1c00c:	00000049 	.word	0x00000049
   1c010:	00000012 	.word	0x00000012
   1c014:	0000000d 	.word	0x0000000d
   1c018:	656d6f53 	.word	0x656d6f53
   1c01c:	656e6f4e 	.word	0x656e6f4e
   1c020:	00008e4d 	.word	0x00008e4d
   1c024:	00000004 	.word	0x00000004
   1c028:	00000004 	.word	0x00000004
   1c02c:	0000942b 	.word	0x0000942b
   1c030:	00000060 	.word	0x00000060
   1c034:	0001c030 	.word	0x0001c030
   1c038:	20697073 	.word	0x20697073
   1c03c:	73756c66 	.word	0x73756c66
   1c040:	61662068 	.word	0x61662068
   1c044:	6c69      	.short	0x6c69
   1c046:	552f      	.short	0x552f
   1c048:	73726573 	.word	0x73726573
   1c04c:	70754c2f 	.word	0x70754c2f
   1c050:	502f7970 	.word	0x502f7970
   1c054:	54656e69 	.word	0x54656e69
   1c058:	2f656d69 	.word	0x2f656d69
   1c05c:	656e6970 	.word	0x656e6970
   1c060:	656d6974 	.word	0x656d6974
   1c064:	7375722d 	.word	0x7375722d
   1c068:	796d2d74 	.word	0x796d2d74
   1c06c:	7477656e 	.word	0x7477656e
   1c070:	7375722f 	.word	0x7375722f
   1c074:	74732f74 	.word	0x74732f74
   1c078:	35333737 	.word	0x35333737
   1c07c:	64636c2d 	.word	0x64636c2d
   1c080:	7461622d 	.word	0x7461622d
   1c084:	722d6863 	.word	0x722d6863
   1c088:	72732f73 	.word	0x72732f73
   1c08c:	696c2f63 	.word	0x696c2f63
   1c090:	73722e62 	.word	0x73722e62
   1c094:	20697073 	.word	0x20697073
   1c098:	61746164 	.word	0x61746164
   1c09c:	69616620 	.word	0x69616620
   1c0a0:	0000006c 	.word	0x0000006c
   1c0a4:	0001c046 	.word	0x0001c046
   1c0a8:	0000004e 	.word	0x0000004e
   1c0ac:	000000b0 	.word	0x000000b0
   1c0b0:	00000009 	.word	0x00000009
   1c0b4:	0001c046 	.word	0x0001c046
   1c0b8:	0000004e 	.word	0x0000004e
   1c0bc:	00000098 	.word	0x00000098
   1c0c0:	0000000d 	.word	0x0000000d
   1c0c4:	20697073 	.word	0x20697073
   1c0c8:	20646d63 	.word	0x20646d63
   1c0cc:	6c696166 	.word	0x6c696166
   1c0d0:	0001c046 	.word	0x0001c046
   1c0d4:	0000004e 	.word	0x0000004e
   1c0d8:	00000097 	.word	0x00000097
   1c0dc:	00000009 	.word	0x00000009
   1c0e0:	0001c046 	.word	0x0001c046
   1c0e4:	0000004e 	.word	0x0000004e
   1c0e8:	0000009d 	.word	0x0000009d
   1c0ec:	00000011 	.word	0x00000011
   1c0f0:	0001c046 	.word	0x0001c046
   1c0f4:	0000004e 	.word	0x0000004e
   1c0f8:	0000009c 	.word	0x0000009c
   1c0fc:	0000000d 	.word	0x0000000d
   1c100:	0001c046 	.word	0x0001c046
   1c104:	0000004e 	.word	0x0000004e
   1c108:	000000c5 	.word	0x000000c5
   1c10c:	0000002d 	.word	0x0000002d
   1c110:	0001c046 	.word	0x0001c046
   1c114:	0000004e 	.word	0x0000004e
   1c118:	000000c9 	.word	0x000000c9
   1c11c:	0000002d 	.word	0x0000002d
   1c120:	0001c046 	.word	0x0001c046
   1c124:	0000004e 	.word	0x0000004e
   1c128:	000000d8 	.word	0x000000d8
   1c12c:	00000019 	.word	0x00000019

0001c130 <str.0>:
   1c130:	65747461 2074706d 61206f74 77206464     attempt to add w
   1c140:	20687469 7265766f 776f6c66 0001c046     ith overflowF...
   1c150:	0000004e 000000d9 00000019 0001c046     N...........F...
   1c160:	0000004e 000000db 00000019 0001c046     N...........F...
   1c170:	0000004e 000000dc 00000019 20697073     N...........spi 
   1c180:	74696e69 69616620 0000006c 0001c046     init fail...F...
   1c190:	0000004e 00000066 00000009 002d2c01     N...f........,-.
   1c1a0:	0001c19c 012d2c01 00002d2c 0001c1a4     .....,-.,-......
   1c1b0:	00000007 0001c1b0 008402a2 0001c1b8     ................
   1c1c0:	000000c5 0001c1c0 0000000a 0001c1c8     ................
   1c1d0:	00002a8a 0001c1d0 0000ee8a 0001c1d8     .*..............
   1c1e0:	0000000e 0001c1e0 00000000 0001c1e8     ................
   1c1f0:	00000008 0001c1f0 00000005 0001c1f8     ................
   1c200:	0001c046 0000004e 00000088 00000009     F...N...........
   1c210:	6573552f 4c2f7372 79707075 61632e2f     /Users/Luppy/.ca
   1c220:	2f6f6772 69676572 79727473 6372732f     rgo/registry/src
   1c230:	7469672f 2e627568 2d6d6f63 63636531     /github.com-1ecc
   1c240:	39393236 65396264 33323863 62696c2f     6299db9ec823/lib
   1c250:	70696863 2e302d38 2f322e31 2f637273     chip8-0.1.2/src/
   1c260:	2e62696c 00007372 0001c210 00000056     lib.rs......V...
   1c270:	0000009d 00000014 0001c210 00000056     ............V...
   1c280:	000000d4 00000011 0001c210 00000056     ............V...
   1c290:	000000d5 0000001a 00000000 00000000     ................

0001c2a0 <str.0>:
   1c2a0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1c2b0:	20687469 7265766f 776f6c66 0001c210     ith overflow....
   1c2c0:	00000056 000000d5 00000011 00000005     V...............
   1c2d0:	0001c2cc 4c205d5b 78562044 495b202c     ....[] LD Vx, [I
   1c2e0:	0000005d 0001c2d4 00000001 0001c2d5     ]...............
   1c2f0:	0000000c 0001c2e4 00000000 00000020     ............ ...
   1c300:	00000008 00000002 00000000 00000000     ................
   1c310:	00000004 00000003 0001c2f8 6362696c     ............libc
   1c320:	38706968 4b53205d 78562050 504a205d     hip8] SKP Vx] JP
   1c330:	6e6e6e20 00000040 00000020 0001c31c      nnn@... .......
   1c340:	00000008 0001c31c 00000008 0001c210     ................
   1c350:	00000056 000001a1 0001c33c 0001c210     V.......<.......
   1c360:	00000056 000001a3 0000001d 0001c210     V...............
   1c370:	00000056 000001a4 0000002a 0001c210     V.......*.......
   1c380:	00000056 000001a4 00000021 0001c210     V.......!.......
   1c390:	00000056 000001a4 00000015 444c205d     V...........] LD
   1c3a0:	5d495b20 7856202c 0001c2d4 00000001      [I], Vx........
   1c3b0:	0001c39c 0000000c 0001c3a8 0001c31c     ................
   1c3c0:	00000008 0001c31c 00000008 0001c210     ................
   1c3d0:	00000056 0000019a 0001c3bc 0001c210     V...............
   1c3e0:	00000056 0000019c 0000001d 0001c210     V...............
   1c3f0:	00000056 0000019d 00000035 0001c210     V.......5.......
   1c400:	00000056 0000019d 0000001e 0001c210     V...............
   1c410:	00000056 0000019d 00000015 444c205d     V...........] LD
   1c420:	202c4220 00007856 0001c2d4 00000001      B, Vx..........
   1c430:	0001c41c 0000000a 0001c428 0001c31c     ........(.......
   1c440:	00000008 0001c31c 00000008 0001c210     ................
   1c450:	00000056 00000193 0001c43c 0001c210     V.......<.......
   1c460:	00000056 00000194 0000001b 0001c210     V...............
   1c470:	00000056 00000195 00000011 0001c210     V...............
   1c480:	00000056 00000196 0000001a 0001c210     V...............
   1c490:	00000056 00000196 00000011 0001c210     V...............
   1c4a0:	00000056 00000197 0000001a 0001c210     V...............
   1c4b0:	00000056 00000197 00000011 444c205d     V...........] LD
   1c4c0:	202c4620 00007856 0001c2d4 00000001      F, Vx..........
   1c4d0:	0001c4bc 0000000a 0001c4c8 0001c31c     ................
   1c4e0:	00000008 0001c31c 00000008 0001c210     ................
   1c4f0:	00000056 0000018f 0001c4dc 0001c210     V...............
   1c500:	00000056 00000190 0000001b 0001c210     V...............
   1c510:	00000056 00000190 0000001a 00000000     V...............

0001c520 <str.1>:
   1c520:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1c530:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1c540:	41205d77 49204444 7856202c 0001c2d4     w] ADD I, Vx....
   1c550:	00000001 0001c541 0000000b 0001c54c     ....A.......L...
   1c560:	0001c31c 00000008 0001c31c 00000008     ................
   1c570:	0001c210 00000056 0000018b 0001c560     ....V.......`...
   1c580:	0001c210 00000056 0000018c 0000002e     ....V...........
   1c590:	444c205d 2c545320 00785620 0001c2d4     ] LD ST, Vx.....
   1c5a0:	00000001 0001c590 0000000b 0001c59c     ................
   1c5b0:	0001c31c 00000008 0001c31c 00000008     ................
   1c5c0:	0001c210 00000056 00000187 0001c5b0     ....V...........
   1c5d0:	0001c210 00000056 00000188 0000001b     ....V...........
   1c5e0:	444c205d 2c544420 00785620 0001c2d4     ] LD DT, Vx.....
   1c5f0:	00000001 0001c5e0 0000000b 0001c5ec     ................
   1c600:	0001c31c 00000008 0001c31c 00000008     ................
   1c610:	0001c210 00000056 00000183 0001c600     ....V...........
   1c620:	0001c210 00000056 00000184 0000001b     ....V...........
   1c630:	444c205d 2c785620 00004b20 0001c2d4     ] LD Vx, K......
   1c640:	00000001 0001c630 0000000a 0001c63c     ....0.......<...
   1c650:	0001c31c 00000008 0001c31c 00000008     ................
   1c660:	0001c210 00000056 0000017f 0001c650     ....V.......P...
   1c670:	0001c210 00000056 00000180 00000011     ....V...........
   1c680:	444c205d 2c785620 00544420 0001c2d4     ] LD Vx, DT.....
   1c690:	00000001 0001c680 0000000b 0001c68c     ................
   1c6a0:	0001c31c 00000008 0001c31c 00000008     ................
   1c6b0:	0001c210 00000056 0000017b 0001c6a0     ....V...{.......
   1c6c0:	0001c210 00000056 0000017c 00000011     ....V...|.......
   1c6d0:	4b53205d 5620504e 00000078 0001c2d4     ] SKNP Vx.......
   1c6e0:	00000001 0001c6d0 00000009 0001c6dc     ................
   1c6f0:	0001c31c 00000008 0001c31c 00000008     ................
   1c700:	0001c210 00000056 00000175 0001c6f0     ....V...u.......
   1c710:	0001c210 00000056 00000176 00000021     ....V...v...!...
   1c720:	0001c2d4 00000001 0001c324 00000008     ........$.......
   1c730:	0001c720 0001c31c 00000008 0001c31c      ...............
   1c740:	00000008 0001c210 00000056 0000016f     ........V...o...
   1c750:	0001c734 0001c210 00000056 00000170     4.......V...p...
   1c760:	00000020 5244205d 78562057 7956202c      ...] DRW Vx, Vy
   1c770:	006e202c 0001c2d4 00000001 0001c764     , n.........d...
   1c780:	0000000f 0001c774 0001c31c 00000008     ....t...........
   1c790:	0001c31c 00000008 0001c210 00000056     ............V...
   1c7a0:	00000156 0001c788 0001c210 00000056     V...........V...
   1c7b0:	00000157 0000001d 0001c210 00000056     W...........V...
   1c7c0:	00000158 0000001d 0001c210 00000056     X...........V...
   1c7d0:	0000015e 00000026 0001c210 00000056     ^...&.......V...
   1c7e0:	0000015e 0000001d 0001c210 00000056     ^...........V...
   1c7f0:	00000160 00000021 00000000 00000000     `...!...........

0001c800 <str.2>:
   1c800:	65747461 2074706d 63206f74 75636c61     attempt to calcu
   1c810:	6574616c 65687420 6d657220 646e6961     late the remaind
   1c820:	77207265 20687469 69642061 6f736976     er with a diviso
   1c830:	666f2072 72657a20 0000006f 0001c210     r of zero.......
   1c840:	00000056 00000163 00000025 0001c210     V...c...%.......
   1c850:	00000056 00000165 0000002d 00000000     V...e...-.......

0001c860 <str.3>:
   1c860:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1c870:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1c880:	00000077 0001c210 00000056 00000165     w.......V...e...
   1c890:	00000028 00000000 00000000 00000000     (...............

0001c8a0 <str.4>:
   1c8a0:	65747461 2074706d 73206f74 74666968     attempt to shift
   1c8b0:	66656c20 69772074 6f206874 66726576      left with overf
   1c8c0:	5d776f6c 444e5220 2c785620 006b6b20     low] RND Vx, kk.
   1c8d0:	0001c2d4 00000001 0001c8c3 0000000c     ................
   1c8e0:	0001c8d0 0001c31c 00000008 0001c31c     ................
   1c8f0:	00000008 0001c210 00000056 00000152     ........V...R...
   1c900:	0001c8e4 0001c210 00000056 00000153     ........V...S...
   1c910:	00000011 504a205d 2c305620 6e6e6e20     ....] JP V0, nnn
   1c920:	0001c2d4 00000001 0001c914 0000000c     ................
   1c930:	0001c920 0001c31c 00000008 0001c31c      ...............
   1c940:	00000008 0001c210 00000056 0000014e     ........V...N...
   1c950:	0001c934 444c205d 202c4920 006e6e6e     4...] LD I, nnn.
   1c960:	0001c2d4 00000001 0001c954 0000000b     ........T.......
   1c970:	0001c960 0001c31c 00000008 0001c31c     `...............
   1c980:	00000008 0001c210 00000056 0000014a     ........V...J...
   1c990:	0001c974 4e53205d 78562045 7956202c     t...] SNE Vx, Vy
   1c9a0:	0001c2d4 00000001 0001c994 0000000c     ................
   1c9b0:	0001c9a0 0001c31c 00000008 0001c31c     ................
   1c9c0:	00000008 0001c210 00000056 00000144     ........V...D...
   1c9d0:	0001c9b4 0001c210 00000056 00000145     ........V...E...
   1c9e0:	00000014 0001c210 00000056 00000145     ........V...E...
   1c9f0:	00000021 4853205d 7856204c 7956202c     !...] SHL Vx, Vy
   1ca00:	0001c2d4 00000001 0001c9f4 0000000c     ................
   1ca10:	0001ca00 0001c31c 00000008 0001c31c     ................
   1ca20:	00000008 0001c210 00000056 0000013f     ........V...?...
   1ca30:	0001ca14 0001c210 00000056 00000140     ........V...@...
   1ca40:	00000020 0001c210 00000056 00000141      .......V...A...
   1ca50:	0000001d 0001c210 00000056 00000141     ........V...A...
   1ca60:	00000011 5553205d 56204e42 56202c78     ....] SUBN Vx, V
   1ca70:	00000079 0001c2d4 00000001 0001ca64     y...........d...
   1ca80:	0000000d 0001ca74 0001c31c 00000008     ....t...........
   1ca90:	0001c31c 00000008 0001c210 00000056     ............V...
   1caa0:	00000139 0001ca88 0001c210 00000056     9...........V...
   1cab0:	0000013a 0000001e 0001c210 00000056     :...........V...
   1cac0:	0000013a 00000038 0001c210 00000056     :...8.......V...
   1cad0:	0000013b 00000011 4853205d 78562052     ;.......] SHR Vx
   1cae0:	7956202c 0001c2d4 00000001 0001cad8     , Vy............
   1caf0:	0000000c 0001cae4 0001c31c 00000008     ................
   1cb00:	0001c31c 00000008 0001c210 00000056     ............V...
   1cb10:	00000134 0001caf8 0001c210 00000056     4...........V...
   1cb20:	00000135 0000001f 0001c210 00000056     5...........V...
   1cb30:	00000136 0000001d 0001c210 00000056     6...........V...
   1cb40:	00000136 00000011 5553205d 78562042     6.......] SUB Vx
   1cb50:	7956202c 0001c2d4 00000001 0001cb48     , Vy........H...
   1cb60:	0000000c 0001cb54 0001c31c 00000008     ....T...........
   1cb70:	0001c31c 00000008 0001c210 00000056     ............V...
   1cb80:	0000012e 0001cb68 0001c210 00000056     ....h.......V...
   1cb90:	0000012f 0000001e 0001c210 00000056     /...........V...
   1cba0:	0000012f 00000038 0001c210 00000056     /...8.......V...
   1cbb0:	00000130 00000011 4441205d 78562044     0.......] ADD Vx
   1cbc0:	7956202c 0001c2d4 00000001 0001cbb8     , Vy............
   1cbd0:	0000000c 0001cbc4 0001c31c 00000008     ................
   1cbe0:	0001c31c 00000008 0001c210 00000056     ............V...
   1cbf0:	00000128 0001cbd8 0001c210 00000056     (...........V...
   1cc00:	00000129 0000001e 0001c210 00000056     )...........V...
   1cc10:	00000129 00000038 0001c210 00000056     )...8.......V...
   1cc20:	0000012a 00000011 4f58205d 78562052     *.......] XOR Vx
   1cc30:	7956202c 0001c2d4 00000001 0001cc28     , Vy........(...
   1cc40:	0000000c 0001cc34 0001c31c 00000008     ....4...........
   1cc50:	0001c31c 00000008 0001c210 00000056     ............V...
   1cc60:	00000124 0001cc48 0001c210 00000056     $...H.......V...
   1cc70:	00000125 0000001e 0001c210 00000056     %...........V...
   1cc80:	00000125 00000011 4e41205d 78562044     %.......] AND Vx
   1cc90:	7956202c 0001c2d4 00000001 0001cc88     , Vy............
   1cca0:	0000000c 0001cc94 0001c31c 00000008     ................
   1ccb0:	0001c31c 00000008 0001c210 00000056     ............V...
   1ccc0:	00000120 0001cca8 0001c210 00000056      ...........V...
   1ccd0:	00000121 0000001e 0001c210 00000056     !...........V...
   1cce0:	00000121 00000011 524f205d 2c785620     !.......] OR Vx,
   1ccf0:	00795620 0001c2d4 00000001 0001cce8      Vy.............
   1cd00:	0000000b 0001ccf4 0001c31c 00000008     ................
   1cd10:	0001c31c 00000008 0001c210 00000056     ............V...
   1cd20:	0000011c 0001cd08 0001c210 00000056     ............V...
   1cd30:	0000011d 0000001e 0001c210 00000056     ............V...
   1cd40:	0000011d 00000011 444c205d 2c785620     ........] LD Vx,
   1cd50:	00795620 0001c2d4 00000001 0001cd48      Vy.........H...
   1cd60:	0000000b 0001cd54 0001c31c 00000008     ....T...........
   1cd70:	0001c31c 00000008 0001c210 00000056     ............V...
   1cd80:	00000118 0001cd68 0001c210 00000056     ....h.......V...
   1cd90:	00000119 0000001d 0001c210 00000056     ............V...
   1cda0:	00000119 00000011 4441205d 78562044     ........] ADD Vx
   1cdb0:	6b6b202c 0001c2d4 00000001 0001cda8     , kk............
   1cdc0:	0000000c 0001cdb4 0001c31c 00000008     ................
   1cdd0:	0001c31c 00000008 0001c210 00000056     ............V...
   1cde0:	00000114 0001cdc8 0001c210 00000056     ............V...
   1cdf0:	00000115 0000001d 0001c210 00000056     ............V...
   1ce00:	00000115 00000011 444c205d 2c785620     ........] LD Vx,
   1ce10:	006b6b20 0001c2d4 00000001 0001ce08      kk.............
   1ce20:	0000000b 0001ce14 0001c31c 00000008     ................
   1ce30:	0001c31c 00000008 0001c210 00000056     ............V...
   1ce40:	00000110 0001ce28 0001c210 00000056     ....(.......V...
   1ce50:	00000111 00000011 6e49205d 696c6176     ........] Invali
   1ce60:	706f2064 0000203a 0001c2d4 00000001     d op: ..........
   1ce70:	0001ce58 0000000e 0001ce68 00000000     X.......h.......
   1ce80:	00000020 00000008 00000002 00000000      ...............
   1ce90:	00000000 00000004 00000003 00000001     ................
   1cea0:	00000020 00000008 00000002 00000000      ...............
   1ceb0:	00000000 00000004 00000003 0001ce7c     ............|...
   1cec0:	633a3a3c 3a65726f 63616d3a 3a736f72     <::core::macros:
   1ced0:	6e61703a 6d206369 6f726361 00003e73     :panic macros>..
   1cee0:	0001cec0 0000001e 00000005 00000032     ............2...
   1cef0:	4553205d 2c785620 00795620 0001c2d4     ] SE Vx, Vy.....
   1cf00:	00000001 0001cef0 0000000b 0001cefc     ................
   1cf10:	0001c31c 00000008 0001c31c 00000008     ................
   1cf20:	0001c210 00000056 0000010a 0001cf10     ....V...........
   1cf30:	0001c210 00000056 0000010b 00000014     ....V...........
   1cf40:	0001c210 00000056 0000010b 00000021     ....V.......!...
   1cf50:	4e53205d 78562045 6b6b202c 0001c2d4     ] SNE Vx, kk....
   1cf60:	00000001 0001cf50 0000000c 0001cf5c     ....P.......\...
   1cf70:	0001c31c 00000008 0001c31c 00000008     ................
   1cf80:	0001c210 00000056 00000104 0001cf70     ....V.......p...
   1cf90:	0001c210 00000056 00000105 00000014     ....V...........
   1cfa0:	4553205d 20785620 00006b6b 0001c2d4     ] SE Vx kk......
   1cfb0:	00000001 0001cfa0 0000000a 0001cfac     ................
   1cfc0:	0001c31c 00000008 0001c31c 00000008     ................
   1cfd0:	0001c210 00000056 000000fe 0001cfc0     ....V...........
   1cfe0:	0001c210 00000056 000000ff 00000014     ....V...........
   1cff0:	4143205d 6e204c4c 00006e6e 0001c2d4     ] CALL nnn......
   1d000:	00000001 0001cff0 0000000a 0001cffc     ................
   1d010:	0001c31c 00000008 0001c31c 00000008     ................
   1d020:	0001c210 00000056 000000f9 0001d010     ....V...........
   1d030:	0001c2d4 00000001 0001c32c 00000008     ........,.......
   1d040:	0001d030 0001c31c 00000008 0001c31c     0...............
   1d050:	00000008 0001c210 00000056 000000f5     ........V.......
   1d060:	0001d044 5953205d 6e6e2053 0000006e     D...] SYS nnn...
   1d070:	0001c2d4 00000001 0001d064 00000009     ........d.......
   1d080:	0001d070 0001c31c 00000008 0001c31c     p...............
   1d090:	00000008 0001c210 00000056 000000f1     ........V.......
   1d0a0:	0001d084 20746f6e 6c706d69 6e656d65     ....not implemen
   1d0b0:	00646574 0001cec0 0000001e 00000002     ted.............
   1d0c0:	00000002 4552205d 00000054 0001c2d4     ....] RET.......
   1d0d0:	00000001 0001d0c4 00000005 0001d0cc     ................
   1d0e0:	0001c31c 00000008 0001c31c 00000008     ................
   1d0f0:	0001c210 00000056 000000ec 0001d0e0     ....V...........
   1d100:	4c43205d 00000053 0001c2d4 00000001     ] CLS...........
   1d110:	0001d100 00000005 0001d108 0001c31c     ................
   1d120:	00000008 0001c31c 00000008 0001c210     ................
   1d130:	00000056 000000e5 0001d11c 0001c210     V...............
   1d140:	00000056 00000093 0000001b 0001c210     V...............
   1d150:	00000056 00000097 00000009 0001c210     V...............
   1d160:	00000056 000000bb 0000000d 0001c210     V...............
   1d170:	00000056 000000be 0000000d 00011381     V...............
   1d180:	00000004 00000004 0001254f 74737552     ........O%..Rust
   1d190:	49484320 630a3850 38706968 00000000      CHIP8.chip8....
   1d1a0:	00000000 0001d197 00000006 0001d1a0     ................
   1d1b0:	50494843 74732038 65747261 1a120a64     CHIP8 started...
   1d1c0:	30302e32 202e4320 62656745 20677265     2.00 C. Egeberg 
   1d1d0:	382f3831 3139272d 13810380 55f1c8a8     18/8-'91.......U
   1d1e0:	cca80560 738755f0 72276386 9427e000     `....U.s.c'r..'.
   1d1f0:	e287406e e187276e 0c691a68 006b386a     n@..n'..h.i.j8k.
   1d200:	1a6d026c eda85027 d4dcb4da 003ed023     l.m.'P......#.>.
   1d210:	cca87c12 008565f0 5284ffc4 ffc4f624     .|...e.....R$...
   1d220:	1e265284 a1e00160 f736d627 608e4e12     .R&.`...'.6..N.`
   1d230:	646e7a28 d6277a28 07f02a12 10130040     (znd(z'..*..@...
   1d240:	06808080 0681a081 00401580 01409a12     ..........@...@.
   1d250:	ff409a12 c8129a12 06809080 0681b081     ..@.............
   1d260:	00401580 0140b212 ff40b212 c812b212     ..@...@...@.....
   1d270:	b4daeda8 006b386a f36eb4da 046ee287     ....j8k...n...n.
   1d280:	326ee187 80807a28 c0810680 15800681     ..n2(z..........
   1d290:	e0120040 e0120140 e012ff40 90805412     @...@...@....T..
   1d2a0:	d0810680 15800681 f8120040 f8120140     ........@...@...
   1d2b0:	f812ff40 eda85412 026cd4dc d4dc1a6d     @....T....l.m...
   1d2c0:	e287cf6e e187206e 7a28196e 3f605412     n...n ..n.(z.T`?
   1d2d0:	5027a828 b4daeda8 406ed4dc 7080e387     (.'P......n@...p
   1d2e0:	0030e280 608e3212 8a287a28 1166e000     ..0..2.`(z(...f.
   1d2f0:	caa80a67 1166e627 c8a81067 0064e627     g...'.f.g...'.d.
   1d300:	00660865 19ab0f67 22ab69d4 036069d5     e.f.g....i.".i`.
   1d310:	003ea828 19abc613 22ab69d4 027469d5     (.>......i.".it.
   1d320:	30340275 19ab4813 22ab69d4 036069d5     u.40.H...i.".i`.
   1d330:	003ea828 19abc613 22ab69d4 027669d5     (.>......i.".iv.
   1d340:	68131636 69d419ab 69d522ab a8280360     6..h...i.".i`.(.
   1d350:	c613003e 69d419ab 69d522ab fe75fe74     >......i.".it.u.
   1d360:	86130034 69d419ab 69d522ab a8280360     4......i.".i`.(.
   1d370:	c613003e 69d419ab 69d522ab 0036fe76     >......i.".iv.6.
   1d380:	4813a613 69d522ab 69d52bab 70831a12     ...H.".i.+.i...p
   1d390:	e283036e 90858084 a1ee066e 036e3214     n.......n....2n.
   1d3a0:	4a14a1ee a1ee086e 076e6214 7a14a1ee     ...Jn....bn....z
   1d3b0:	02750343 fe750043 02740243 fe740143     C.u.C.u.C.t.C.t.
   1d3c0:	50814080 0082ba27 e280086e 92140030     .@.P'...n...0...
   1d3d0:	2080076e 0542e282 06429a14 0742b214     n.. ..B...B...B.
   1d3e0:	5027ec14 e287fc6e 40883187 50175089     ..'Pn....1.@.P.P
   1d3f0:	50814080 ba270271 086e0082 0030e280     .@.Pq.'...n...0.
   1d400:	0363f213 0e140275 50814080 ba27fe71     ..c.u....@.Pq.'.
   1d410:	086e0082 0030e280 0063f213 0e14fe75     ..n...0...c.u...
   1d420:	50814080 ba270270 086e0082 0030e280     .@.Pp.'...n...0.
   1d430:	0263f213 0e140274 50814080 ba27fe70     ..c.t....@.Pp.'.
   1d440:	086e0082 0030e280 0163f213 0e14fe74     ..n...0...c.t...
   1d450:	94d85027 ee00f08e e280f06e 55f03180     'P......n....1.U
   1d460:	54d4f1a8 05610176 004007f0 241418f1     ...Tv.a...@....$
   1d470:	e280f06e 55f03180 54d4f5a8 a0800476     n....1.U...Tv...
   1d480:	ba27b081 e280f06e d2140030 e3870c6e     ..'.n...0...n...
   1d490:	d081c080 f06eba27 0030e280 306ee414     ....'.n...0...n0
   1d4a0:	ff60e387 15f018f0 01432414 02433a64     ..`......$C.d:C.
   1d4b0:	24140064 70837082 e2820c6e b081a080     d..$.p.pn.......
   1d4c0:	eda8ba27 e280f06e 24150030 0c42b4da     '...n...0..$..B.
   1d4d0:	0042027b 0842fe7b 0442027a b4dafe7a     {.B.{.B.z.B.z...
   1d4e0:	806eee00 003107f1 0034d415 0081d415     ..n...1...4.....
   1d4f0:	003f0e83 90835615 004fb583 00338c15     ..?..V....O...3.
   1d500:	e3877415 a5838083 bc15004f a4150033     .t......O...3...
   1d510:	d415e387 a5838083 bc15004f a4150033     ........O...3...
   1d520:	9083e387 004fb583 00338c15 e3877415     ......O...3..t..
   1d530:	4063d415 00413281 b4dad415 b4da027b     ..c@.2A.....{...
   1d540:	e287f36e 21870c62 1063ee00 00413281     n...b..!..c..2A.
   1d550:	b4dad415 b4dafe7b e287f36e 21870062     ....{...n...b..!
   1d560:	2063ee00 00413281 b4dad415 b4da027a     ..c .2A.....z...
   1d570:	e287f36e 21870862 8063ee00 00413281     n...b..!..c..2A.
   1d580:	b4dad415 b4dafe7a e287f36e 21870462     ....z...n...b..!
   1d590:	f0c1ee00 00301280 0c6ee415 e382e387     ......0...n.....
   1d5a0:	b4da0e15 004f0e80 0462f215 1416fe7a     ......O...b.z...
   1d5b0:	004f0e80 0c62fe15 1416027b 004f0e80     ..O...b.{.....O.
   1d5c0:	08620a16 1416027a 004f0e80 0062dc15     ..b.z.....O...b.
   1d5d0:	b4dafe7b e287f36e ee002187 70837082     {...n....!...p.p
   1d5e0:	e282306e d081c080 eda8ba27 e280f06e     n0......'...n...
   1d5f0:	4c160030 3042d4dc 0042027d 2042fe7d     0..L..B0}.B.}.B 
   1d600:	1042027c d4dcfe7c 806eee00 003107f1     |.B.|.....n...1.
   1d610:	00340417 00810417 004f0e83 90837e16     ..4.......O..~..
   1d620:	004fd583 0033b616 e3879c16 c5838083     ..O...3.........
   1d630:	ea16004f d0160033 0417e387 c5838083     O...3...........
   1d640:	ea16004f d0160033 9083e387 004fd583     O...3.........O.
   1d650:	0033b616 e3879c16 40630417 00413281     ..3.......c@.2A.
   1d660:	d4dc0417 d4dc027d cf6ee387 3062e287     ....}.....n...b0
   1d670:	ee002187 32811063 04170041 fe7dd4dc     .!..c..2A.....}.
   1d680:	e387d4dc e287cf6e 21870062 2063ee00     ....n...b..!..c 
   1d690:	00413281 d4dc0417 d4dc027c cf6ee387     .2A.....|.....n.
   1d6a0:	2062e287 ee002187 32818063 04170041     ..b .!..c..2A...
   1d6b0:	fe7cd4dc e387d4dc e287cf6e 21871062     ..|.....n...b..!
   1d6c0:	f0c1ee00 00301280 e3871617 e387306e     ......0.....n0..
   1d6d0:	3616e382 0e80d4dc 2417004f fe7c9062     ...6....O..$b.|.
   1d6e0:	0e804617 3017004f 027d3062 0e804617     .F..O..0b0}..F..
   1d6f0:	3c17004f 027ca062 0e804617 0c17004f     O..<b.|..F..O...
   1d700:	fe7d0062 4f6ed4dc 2187e287 7080ee00     b.}...nO...!...p
   1d710:	e280036e 80810e80 026e9481 0041e281     n.........n...A.
   1d720:	0e800170 cda80e80 94d81ef0 ee00f08e     p...............
   1d730:	19a9006e 1efe1efe 1efe1efe 34ab65f3     n............e.4
   1d740:	1efe1efe 1efe1efe 017e55f3 7417803e     .........U~.>..t
   1d750:	2382ee00 0f6e3383 30812080 e280be27     ...#.3n.. .0'...
   1d760:	f9a80e80 32d21ef0 40320272 23829a17     .......2r.2@...#
   1d770:	20430273 9a17ee00 02710270 06810680     s.C ....p.q.....
   1d780:	0e810e81 0e810e81 1ef134ab 1ef01ef1     .........4......
   1d790:	ee0065f0 65f0cca8 55f00680 a1e00160     .e.....e...U`...
   1d7a0:	ee00e017 016e65f1 00824384 10651083     .....en..C....e.
   1d7b0:	004f5583 004fe582 27650c18 004f5582     .UO...O...e'.UO.
   1d7c0:	20800c18 e4843081 29f4f017 067675d6     ... .0.....).uv.
   1d7d0:	00824384 e8651083 004f5583 004fe582     .C....e..UO...O.
   1d7e0:	03653418 004f5582 20803418 e4843081     .4e..UO..4. .0..
   1d7f0:	29f41818 067675d6 00824384 64651083     ...).uv..C....ed
   1d800:	004f5583 004fe582 20805418 e4843081     .UO...O..T. .0..
   1d810:	29f44018 067675d6 00824384 0a651083     .@.).uv..C....e.
   1d820:	004f5583 30816e18 6018e484 75d629f4     .UO..n.0...`.).u
   1d830:	29f10676 ee0075d6 65f1c8a8 003fe481     v..).u.....e..?.
   1d840:	c8a80170 ee0055f1 65f3c8a8 258e008e     p....U.....e...%
   1d850:	ee00004f a218003e 358e108e ee00004f     O...>......5O...
   1d860:	55f1caa8 e38eee00 ff630f62 a1e21061     ...U....b.c.a...
   1d870:	3481c418 b0180031 34801061 b0180030     ...41...a..40...
   1d880:	016eee00 0000ee00 00050000 00207050     ..n.........Pp .
   1d890:	00207050 00603060 00603060 00306030     Pp .`0`.`0`.0`0.
   1d8a0:	00306030 00507020 00507020 00707020     0`0. pP. pP. pp.
   1d8b0:	00002000 00000000 00000000 00000000     . ..............
   1d8c0:	00008000 c0000000 80000000 c0000080     ................
   1d8d0:	c0808080 0c008000 08080808 08080808     ................
   1d8e0:	08080808 0c0d0808 08080808 08080808     ................
   1d8f0:	08080808 0a0d0808 05050565 0505e505     ........e.......
   1d900:	050505e5 0a0ac505 05050565 0505e505     ........e.......
   1d910:	050505e5 0a0ac505 08080c05 0d0c050f     ................
   1d920:	08080805 0f0e050d 08080c05 0d0c050f     ................
   1d930:	08080805 0a0a050d 06650a05 0a0a9505     ..........e.....
   1d940:	c5050535 0505350a 05650a95 0a0a9505     5....5....e.....
   1d950:	c5060535 0a0a050a 08050f05 08080808     5...............
   1d960:	050f080c 08080808 08050f08 08080c08     ................
   1d970:	050f0808 0a0a050f 05b50575 c5050505     ........u.......
   1d980:	b505650a 0505e505 05b505e5 05650ac5     .e............e.
   1d990:	b5050505 0a0ad505 08080c05 050d0808     ................
   1d9a0:	080c050f 0f08050f 0d080805 0c050f05     ................
   1d9b0:	08080808 0f0a050d 05650f05 350ac505     ..........e....5
   1d9c0:	650a95e5 0505b005 0ac505b5 0a95e535     ...e........5...
   1d9d0:	c5050565 070f050f 08d50574 0f0e050f     e.......t.......
   1d9e0:	050f0805 0808080c 08050d08 0f08050f     ................
   1d9f0:	750f0805 0a07d405 05350a05 0505f505     ...u......5.....
   1da00:	d50505b5 0c0d0808 05750f08 0505b505     ..........u.....
   1da10:	950505f5 0a0a050a 08080805 080c050d     ................
   1da20:	350d0808 0a0ac505 0c950565 0d080808     ...5....e.......
   1da30:	08080c05 0a0a050f c5060575 0808050a     ........u.......
   1da40:	08080808 0f08050f 08080805 0f080808     ................
   1da50:	06650a05 0a0ad505 050d0c05 0505350a     ..e..........5..
   1da60:	05e50505 0505f505 e50505f5 05050505     ................
   1da70:	0c050a95 0a0a050d 050f0805 08080808     ................
   1da80:	0c050f08 0f08050d 050d0c05 08080808     ................
   1da90:	08050f08 0a0a050f b5050535 05050505     ........5.......
   1daa0:	0a950505 0505350a 350a0a95 05050505     .....5.....5....
   1dab0:	05b50505 080a9505 08080808 08080808     ................
   1dac0:	0f080808 08080808 08080f08 08080808     ................
   1dad0:	08080808 3c0f0808 42999942 0f10013c     .......<B..B<...
   1dae0:	32328478 10007884 fefc78e0 007884fe     x.22.x...x....x.
   1daf0:	4843e010 20385049 656e6f64 4948430a     ..CHIP8 done.CHI
   1db00:	73203850 6c756f68 6f6e2064 6e652074     P8 should not en
   1db10:	73757264 70612f74 72732f70 68632f63     drust/app/src/ch
   1db20:	2e387069 00007372 0001db11 00000015     ip8.rs..........
   1db30:	0000005f 00000005 0a79656b 766f2078     _.......key.x ov
   1db40:	6c667265 0000776f 0001db11 00000015     erflow..........
   1db50:	000000aa 00000009 766f2079 6c667265     ........y overfl
   1db60:	0000776f 0001db11 00000015 000000ab     ow..............
   1db70:	00000009 0001db11 00000015 000000ac     ................
   1db80:	00000015 00000000 00000000 00000000     ................

0001db90 <str.0>:
   1db90:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1dba0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1dbb0:	00000077 0001db11 00000015 000000ac     w...............
   1dbc0:	00000011 00000000 00000000 00000000     ................

0001dbd0 <str.1>:
   1dbd0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1dbe0:	20687469 7265766f 776f6c66 0001db11     ith overflow....
   1dbf0:	00000015 000000ad 00000012 0001db11     ................
   1dc00:	00000015 000000c9 00000009 0001db11     ................
   1dc10:	00000015 000000ca 00000009 0001db11     ................
   1dc20:	00000015 000000cb 00000015 0001db11     ................
   1dc30:	00000015 000000cb 00000011 0001db11     ................
   1dc40:	00000015 000000cc 00000012 20646162     ............bad 
   1dc50:	657a6973 73746573 20657a69 7265766f     sizesetsize over
   1dc60:	776f6c66 666f5f78 74657366 666f5f79     flowx_offsety_of
   1dc70:	74657366 0001db11 00000015 000000d2     fset............
   1dc80:	00000009 000a202c 0001db11 00000015     ...., ..........
   1dc90:	000000dd 00000012 0001db11 00000015     ................
   1dca0:	0000010f 00000011 00000000 00000000     ................

0001dcb0 <str.2>:
   1dcb0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1dcc0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1dcd0:	00000077 0001db11 00000015 00000110     w...............
   1dce0:	00000012 0001db11 00000015 00000112     ................
   1dcf0:	00000008 0001db11 00000015 00000119     ................
   1dd00:	0000001f 0001db11 00000015 0000011a     ................
   1dd10:	00000020 0001db11 00000015 0000011f      ...............
   1dd20:	0000000d 0001db11 00000015 00000122     ............"...
   1dd30:	00000011 20746573 65786970 6620736c     ....set pixels f
   1dd40:	656c6961 00000064 0001db11 00000015     ailed...........
   1dd50:	00000133 00000005 0001db11 00000015     3...............
   1dd60:	00000193 00000021 0001db11 00000015     ....!...........
   1dd70:	00000194 00000025 0001db11 00000015     ....%...........
   1dd80:	0000019a 00000009 0001db11 00000015     ................
   1dd90:	000001a5 00000023 0001db11 00000015     ....#...........
   1dda0:	000001a5 00000011 0001db11 00000015     ................
   1ddb0:	000001a6 0000002c 0001db11 00000015     ....,...........
   1ddc0:	000001a8 00000036 0001db11 00000015     ....6...........
   1ddd0:	000001a8 00000016 0001db11 00000015     ................
   1dde0:	000001e3 00000009 0001db11 00000015     ................
   1ddf0:	000001e4 00000009 0001db11 00000015     ................
   1de00:	000001e9 0000001d 0001db11 00000015     ................
   1de10:	000001ed 0000000d 0001db11 00000015     ................
   1de20:	000001fa 00000009 0001db11 00000015     ................
   1de30:	000001fe 0000000d 0001db11 00000015     ................
   1de40:	0000020a 00000024 0001db11 00000015     ....$...........
   1de50:	0000020a 00000036 0001db11 00000015     ....6...........
   1de60:	00000212 00000016 50494843 6f742038     ........CHIP8 to
   1de70:	20686375 20746f6e 646e6168 0a64656c     uch not handled.
	...
   1de88:	00010000 00010001 00020001 00020002     ................
   1de98:	00030002 00030003 00040003 00040004     ................
   1dea8:	00050004 00050005 00060005 00060006     ................
   1deb8:	00070006 00070007 00080007 00080008     ................
   1dec8:	00090009 00090009 000a000a 000a000a     ................
   1ded8:	000b000b 000c000b 000c000c 000d000c     ................
   1dee8:	000d000d 000e000e 000e000e 000f000f     ................
   1def8:	0010000f 00100010 00110011 00110011     ................
   1df08:	00120012 00130012 00130013 00140014     ................
   1df18:	00140014 00150015 00160015 00160016     ................
   1df28:	00170017 00170017 00180018 00190018     ................
   1df38:	00190019 001a0019 001a001a 001b001b     ................
   1df48:	001c001b 001c001c 001d001c 001d001d     ................
   1df58:	001e001e 001f001e 001f001f 0020001f     .............. .
   1df68:	00200020 00200020 00000000 00000000      . . . .........
   1df78:	00010000 00010001 00020001 00020002     ................
   1df88:	00030002 00030003 00040003 00040004     ................
   1df98:	00050004 00050005 00060005 00060006     ................
   1dfa8:	00070006 00070007 00080007 00080008     ................
   1dfb8:	00090009 00090009 000a000a 000a000a     ................
   1dfc8:	000b000b 000b000b 000c000c 000d000c     ................
   1dfd8:	000d000d 000e000d 000e000e 000f000e     ................
   1dfe8:	000f000f 00100010 00100010 00110011     ................
   1dff8:	00120011 00120012 00130012 00130013     ................
   1e008:	00140013 00140014 00150015 00160015     ................
   1e018:	00160016 00170016 00170017 00180018     ................
   1e028:	00190018 00190019 001a001a 001b001a     ................
   1e038:	001b001b 001c001c 001d001c 001d001d     ................
   1e048:	001e001e 001e001e 001f001f 0020001f     .............. .
   1e058:	00200020 00200020 00000000 00000000      . . . .........
   1e068:	00010000 00010001 00020001 00020002     ................
   1e078:	00030002 00030003 00040003 00040004     ................
   1e088:	00050004 00050005 00060005 00060006     ................
   1e098:	00070006 00070007 00080007 00080008     ................
   1e0a8:	00090009 00090009 000a000a 000a000a     ................
   1e0b8:	000b000b 000b000b 000c000c 000d000c     ................
   1e0c8:	000d000d 000e000d 000e000e 000f000f     ................
   1e0d8:	000f000f 00100010 00100010 00110011     ................
   1e0e8:	00120011 00120012 00130012 00130013     ................
   1e0f8:	00140013 00140014 00150015 00160015     ................
   1e108:	00160016 00170016 00170017 00180018     ................
   1e118:	00190018 00190019 001a001a 001b001a     ................
   1e128:	001b001b 001c001c 001d001c 001d001d     ................
   1e138:	001e001e 001e001e 001f001f 0020001f     .............. .
   1e148:	00200020 00200020 00000000 00000000      . . . .........
   1e158:	00010000 00010001 00020001 00020002     ................
   1e168:	00030002 00030003 00040003 00040004     ................
   1e178:	00050004 00050005 00060005 00060006     ................
   1e188:	00070006 00070007 00080008 00080008     ................
   1e198:	00090009 00090009 000a000a 000a000a     ................
   1e1a8:	000b000b 000b000b 000c000c 000d000c     ................
   1e1b8:	000d000d 000e000d 000e000e 000f000f     ................
   1e1c8:	000f000f 00100010 00100010 00110011     ................
   1e1d8:	00120011 00120012 00130012 00130013     ................
   1e1e8:	00140014 00140014 00150015 00160015     ................
   1e1f8:	00160016 00170017 00170017 00180018     ................
   1e208:	00190018 00190019 001a001a 001b001a     ................
   1e218:	001b001b 001c001c 001d001c 001d001d     ................
   1e228:	001e001e 001e001e 001f001f 0020001f     .............. .
   1e238:	00200020 00200020 00000000 00000000      . . . .........
   1e248:	00010000 00010001 00020001 00020002     ................
   1e258:	00030002 00030003 00040003 00040004     ................
   1e268:	00050004 00050005 00060005 00060006     ................
   1e278:	00070006 00070007 00080008 00080008     ................
   1e288:	00090009 00090009 000a000a 000a000a     ................
   1e298:	000b000b 000b000b 000c000c 000d000c     ................
   1e2a8:	000d000d 000e000d 000e000e 000f000f     ................
   1e2b8:	000f000f 00100010 00100010 00110011     ................
   1e2c8:	00120011 00120012 00130012 00130013     ................
   1e2d8:	00140014 00140014 00150015 00160015     ................
   1e2e8:	00160016 00170017 00170017 00180018     ................
   1e2f8:	00190018 00190019 001a001a 001b001a     ................
   1e308:	001b001b 001c001c 001d001c 001d001d     ................
   1e318:	001e001e 001f001e 001f001f 0020001f     .............. .
   1e328:	00200020 00200020 00000000 00000000      . . . .........
   1e338:	00010000 00010001 00020001 00020002     ................
   1e348:	00030002 00030003 00040003 00040004     ................
   1e358:	00050004 00050005 00060005 00060006     ................
   1e368:	00070006 00070007 00080008 00080008     ................
   1e378:	00090009 00090009 000a000a 000a000a     ................
   1e388:	000b000b 000c000b 000c000c 000d000c     ................
   1e398:	000d000d 000e000d 000e000e 000f000f     ................
   1e3a8:	000f000f 00100010 00110010 00110011     ................
   1e3b8:	00120011 00120012 00130012 00130013     ................
   1e3c8:	00140014 00140014 00150015 00160015     ................
   1e3d8:	00160016 00170017 00170017 00180018     ................
   1e3e8:	00190018 00190019 001a001a 001b001a     ................
   1e3f8:	001b001b 011c001c 011d011c 011d011d     ................
   1e408:	011e011e 011f011e 011f011f 0120011f     .............. .
   1e418:	01200120 01200120 00000000 00000000      . . . .........
   1e428:	00010000 00010001 00020001 00020002     ................
   1e438:	00030002 00030003 00040003 00040004     ................
   1e448:	00050004 00050005 00060005 00060006     ................
   1e458:	00070007 00070007 00080008 00080008     ................
   1e468:	00090009 00090009 000a000a 000a000a     ................
   1e478:	000b000b 000c000b 000c000c 000d000c     ................
   1e488:	000d000d 000e000d 000e000e 000f000f     ................
   1e498:	000f000f 00100010 00110010 00110011     ................
   1e4a8:	00120011 00120012 00130012 00130013     ................
   1e4b8:	00140014 00140014 00150015 00160015     ................
   1e4c8:	01160116 01170117 01180117 01180118     ................
   1e4d8:	01190118 01190119 011a011a 011b011a     ................
   1e4e8:	011b011b 011c011c 011d011c 011d011d     ................
   1e4f8:	011e011e 011f011e 011f011f 0120011f     .............. .
   1e508:	01200120 01200120 01000100 01000100      . . . .........
   1e518:	01010100 01010101 01020101 01020102     ................
   1e528:	01030102 01030103 01040103 01040104     ................
   1e538:	01050104 01050105 01060105 01060106     ................
   1e548:	01070107 01070107 01080108 01080108     ................
   1e558:	01090109 01090109 010a010a 010a010a     ................
   1e568:	010b010b 010c010b 010c010c 010d010c     ................
   1e578:	010d010d 010e010d 010e010e 010f010f     ................
   1e588:	010f010f 01100110 01110110 01110111     ................
   1e598:	01120111 01120112 01130112 01130113     ................
   1e5a8:	01140114 01140114 01150115 01160115     ................
   1e5b8:	01160116 01170117 01180117 01180118     ................
   1e5c8:	01190118 01190119 011a011a 011b011a     ................
   1e5d8:	011b011b 011c011c 011d011c 011d011d     ................
   1e5e8:	011e011e 011f011e 011f011f 01200120     ............ . .
   1e5f8:	01200120 01200120 01000100 01000100      . . . .........
   1e608:	01010100 01010101 01020101 01020102     ................
   1e618:	01030102 01030103 01040103 01040104     ................
   1e628:	01050104 01050105 01060105 01060106     ................
   1e638:	01070107 01070107 01080108 01080108     ................
   1e648:	01090109 01090109 010a010a 010a010a     ................
   1e658:	010b010b 010c010b 010c010c 010d010c     ................
   1e668:	010d010d 010e010e 010e010e 010f010f     ................
   1e678:	010f010f 01100110 01110110 01110111     ................
   1e688:	01120111 01120112 01130113 01130113     ................
   1e698:	01140114 01140114 01150115 01160115     ................
   1e6a8:	01160116 01170117 01180117 01180118     ................
   1e6b8:	01190119 01190119 011a011a 011b011a     ................
   1e6c8:	011b011b 011c011c 011d011c 011d011d     ................
   1e6d8:	011e011e 011f011e 011f011f 01200120     ............ . .
   1e6e8:	01200120 01200120 01000100 01000100      . . . .........
   1e6f8:	01010100 01010101 01020101 01020102     ................
   1e708:	01030102 01030103 01040103 01040104     ................
   1e718:	01050104 01050105 01060106 01060106     ................
   1e728:	01070107 01070107 01080108 01080108     ................
   1e738:	01090109 01090109 010a010a 010a010a     ................
   1e748:	010b010b 010c010b 010c010c 010d010c     ................
   1e758:	010d010d 010e010e 010e010e 010f010f     ................
   1e768:	010f010f 01100110 01110110 01110111     ................
   1e778:	01120111 01120112 01130113 01130113     ................
   1e788:	01140114 01140114 01150115 01160115     ................
   1e798:	01160116 01170117 01180117 01180118     ................
   1e7a8:	01190119 01190119 011a011a 011b011a     ................
   1e7b8:	011b011b 011c011c 011d011c 011d011d     ................
   1e7c8:	011e011e 011f011e 011f011f 01200120     ............ . .
   1e7d8:	01200120 01200120 01000100 01000100      . . . .........
   1e7e8:	01010100 01010101 01020101 01020102     ................
   1e7f8:	01030102 01030103 01040103 01040104     ................
   1e808:	01050104 01050105 01060106 01060106     ................
   1e818:	01070107 01070107 01080108 01080108     ................
   1e828:	01090109 01090109 010a010a 010a010a     ................
   1e838:	010b010b 010c010b 010c010c 010d010c     ................
   1e848:	010d010d 010e010e 010e010e 010f010f     ................
   1e858:	010f010f 01100110 01110110 01110111     ................
   1e868:	01120111 01120112 01130113 01130113     ................
   1e878:	01140114 01150114 01150115 01160115     ................
   1e888:	01160116 01170117 01180117 01180118     ................
   1e898:	01190119 011a0119 011a011a 011b011a     ................
   1e8a8:	021b021b 021c021c 021d021c 021d021d     ................
   1e8b8:	021e021e 021f021e 021f021f 02200220     ............ . .
   1e8c8:	02200220 02200220 01000100 01000100      . . . .........
   1e8d8:	01010100 01010101 01020101 01020102     ................
   1e8e8:	01030102 01030103 01040103 01040104     ................
   1e8f8:	01050104 01050105 01060106 01060106     ................
   1e908:	01070107 01070107 01080108 01080108     ................
   1e918:	01090109 01090109 010a010a 010b010a     ................
   1e928:	010b010b 010c010b 010c010c 010d010c     ................
   1e938:	010d010d 010e010e 010e010e 010f010f     ................
   1e948:	0110010f 01100110 01110110 01110111     ................
   1e958:	01120111 01120112 01130113 01130113     ................
   1e968:	01140114 01150114 01150115 01160115     ................
   1e978:	01160116 02170117 02180217 02180218     ................
   1e988:	02190219 021a0219 021a021a 021b021a     ................
   1e998:	021b021b 021c021c 021d021c 021d021d     ................
   1e9a8:	021e021e 021f021e 021f021f 02200220     ............ . .
   1e9b8:	02200220 02200220 01000100 01000100      . . . .........
   1e9c8:	01010100 01010101 01020101 01020102     ................
   1e9d8:	01030102 01030103 01040103 01040104     ................
   1e9e8:	01050104 01050105 01060106 01060106     ................
   1e9f8:	01070107 01070107 01080108 01080108     ................
   1ea08:	01090109 01090109 010a010a 010b010a     ................
   1ea18:	010b010b 010c010b 010c010c 010d010c     ................
   1ea28:	020d010d 020e020e 020e020e 020f020f     ................
   1ea38:	0210020f 02100210 02110210 02110211     ................
   1ea48:	02120211 02120212 02130213 02130213     ................
   1ea58:	02140214 02150214 02150215 02160215     ................
   1ea68:	02160216 02170217 02180217 02180218     ................
   1ea78:	02190219 021a0219 021a021a 021b021a     ................
   1ea88:	021b021b 021c021c 021d021c 021d021d     ................
   1ea98:	021e021e 021f021e 021f021f 02200220     ............ . .
   1eaa8:	02200220 02200220 02000200 02000200      . . . .........
   1eab8:	02010200 02010201 02020201 02020202     ................
   1eac8:	02030202 02030203 02040203 02040204     ................
   1ead8:	02050204 02050205 02060206 02060206     ................
   1eae8:	02070207 02070207 02080208 02080208     ................
   1eaf8:	02090209 02090209 020a020a 020b020a     ................
   1eb08:	020b020b 020c020b 020c020c 020d020c     ................
   1eb18:	020d020d 020e020e 020e020e 020f020f     ................
   1eb28:	0210020f 02100210 02110210 02110211     ................
   1eb38:	02120211 02120212 02130213 02130213     ................
   1eb48:	02140214 02150214 02150215 02160215     ................
   1eb58:	02160216 02170217 02180217 02180218     ................
   1eb68:	02190219 021a0219 021a021a 021b021b     ................
   1eb78:	021b021b 021c021c 021d021c 021d021d     ................
   1eb88:	021e021e 021f021e 021f021f 02200220     ............ . .
   1eb98:	02200220 02200220 02000200 02000200      . . . .........
   1eba8:	02010200 02010201 02020201 02020202     ................
   1ebb8:	02030202 02030203 02040203 02040204     ................
   1ebc8:	02050204 02050205 02060206 02060206     ................
   1ebd8:	02070207 02070207 02080208 02080208     ................
   1ebe8:	02090209 02090209 020a020a 020b020a     ................
   1ebf8:	020b020b 020c020b 020c020c 020d020c     ................
   1ec08:	020d020d 020e020e 020e020e 020f020f     ................
   1ec18:	0210020f 02100210 02110210 02110211     ................
   1ec28:	02120212 02120212 02130213 02130213     ................
   1ec38:	02140214 02150214 02150215 02160215     ................
   1ec48:	02160216 02170217 02180217 02180218     ................
   1ec58:	02190219 021a0219 021a021a 021b021b     ................
   1ec68:	021b021b 021c021c 021d021c 021d021d     ................
   1ec78:	021e021e 031f021e 031f031f 03200320     ............ . .
   1ec88:	03200320 02200320 02000200 02000200      . . . .........
   1ec98:	02010200 02010201 02020201 02020202     ................
   1eca8:	02030202 02030203 02040203 02040204     ................
   1ecb8:	02050205 02050205 02060206 02060206     ................
   1ecc8:	02070207 02070207 02080208 02080208     ................
   1ecd8:	02090209 020a0209 020a020a 020b020a     ................
   1ece8:	020b020b 020c020b 020c020c 020d020d     ................
   1ecf8:	020d020d 020e020e 020e020e 020f020f     ................
   1ed08:	0210020f 02100210 02110210 02110211     ................
   1ed18:	02120212 02120212 02130213 02130213     ................
   1ed28:	02140214 02150214 02150215 02160216     ................
   1ed38:	02160216 02170217 02180217 02180218     ................
   1ed48:	02190219 021a0219 021a021a 031b021b     ................
   1ed58:	031b031b 031c031c 031d031c 031d031d     ................
   1ed68:	031e031e 031f031e 031f031f 03200320     ............ . .
   1ed78:	03200320 03200320 02000200 02000200      . . . .........
   1ed88:	02010200 02010201 02020201 02020202     ................
   1ed98:	02030202 02030203 02040203 02040204     ................
   1eda8:	02050205 02050205 02060206 02060206     ................
   1edb8:	02070207 02070207 02080208 02080208     ................
   1edc8:	02090209 020a0209 020a020a 020b020a     ................
   1edd8:	020b020b 020c020b 020c020c 020d020d     ................
   1ede8:	020d020d 020e020e 020e020e 020f020f     ................
   1edf8:	0210020f 02100210 02110210 02110211     ................
   1ee08:	02120212 02120212 02130213 02130213     ................
   1ee18:	02140214 02150214 02150215 02160216     ................
   1ee28:	02160216 02170217 03180217 03180318     ................
   1ee38:	03190319 031a0319 031a031a 031b031b     ................
   1ee48:	031c031b 031c031c 031d031c 031d031d     ................
   1ee58:	031e031e 031f031e 031f031f 03200320     ............ . .
   1ee68:	03200320 03200320 02000200 02000200      . . . .........
   1ee78:	02010200 02010201 02020201 02020202     ................
   1ee88:	02030202 02030203 02040203 02040204     ................
   1ee98:	02050205 02050205 02060206 02060206     ................
   1eea8:	02070207 02070207 02080208 02080208     ................
   1eeb8:	02090209 020a0209 020a020a 020b020a     ................
   1eec8:	020b020b 020c020b 020c020c 020d020d     ................
   1eed8:	020d020d 020e020e 020e020e 020f020f     ................
   1eee8:	0210020f 02100210 02110210 02110211     ................
   1eef8:	02120212 02120212 02130213 02140213     ................
   1ef08:	02140214 03150314 03150315 03160316     ................
   1ef18:	03160316 03170317 03180317 03180318     ................
   1ef28:	03190319 031a0319 031a031a 031b031b     ................
   1ef38:	031c031b 031c031c 031d031c 031d031d     ................
   1ef48:	031e031e 031f031e 031f031f 03200320     ............ . .
   1ef58:	03200320 03200320 02000200 02000200      . . . .........
   1ef68:	02010200 02010201 02020201 02020202     ................
   1ef78:	02030202 02030203 02040203 02040204     ................
   1ef88:	02050205 02050205 02060206 02060206     ................
   1ef98:	02070207 02070207 02080208 02080208     ................
   1efa8:	02090209 020a0209 020a020a 020b020a     ................
   1efb8:	020b020b 020c020b 020c020c 020d020d     ................
   1efc8:	030d030d 030e030e 030f030e 030f030f     ................
   1efd8:	0310030f 03100310 03110310 03110311     ................
   1efe8:	03120312 03120312 03130313 03140313     ................
   1eff8:	03140314 03150314 03150315 03160316     ................
   1f008:	03160316 03170317 03180317 03180318     ................
   1f018:	03190319 031a0319 031a031a 031b031b     ................
   1f028:	031c031b 031c031c 031d031c 031d031d     ................
   1f038:	031e031e 031f031e 031f031f 03200320     ............ . .
   1f048:	03200320 03200320 02000200 02000200      . . . .........
   1f058:	03010200 03010301 03020301 03020302     ................
   1f068:	03030302 03030303 03040303 03040304     ................
   1f078:	03050305 03050305 03060306 03060306     ................
   1f088:	03070307 03070307 03080308 03090308     ................
   1f098:	03090309 030a0309 030a030a 030b030a     ................
   1f0a8:	030b030b 030c030b 030c030c 030d030d     ................
   1f0b8:	030d030d 030e030e 030f030e 030f030f     ................
   1f0c8:	0310030f 03100310 03110310 03110311     ................
   1f0d8:	03120312 03120312 03130313 03140313     ................
   1f0e8:	03140314 03150314 03150315 03160316     ................
   1f0f8:	03170316 03170317 03180317 03180318     ................
   1f108:	03190319 031a0319 031a031a 031b031b     ................
   1f118:	031c031b 031c031c 031d031d 031d031d     ................
   1f128:	041e041e 041f041e 041f041f 04200420     ............ . .
   1f138:	04200420 04200420 03000300 03000300      . . . .........
   1f148:	03010300 03010301 03020301 03020302     ................
   1f158:	03030302 03030303 03040303 03040304     ................
   1f168:	03050305 03050305 03060306 03060306     ................
   1f178:	03070307 03070307 03080308 03090308     ................
   1f188:	03090309 030a0309 030a030a 030b030a     ................
   1f198:	030b030b 030c030b 030c030c 030d030d     ................
   1f1a8:	030d030d 030e030e 030f030e 030f030f     ................
   1f1b8:	0310030f 03100310 03110311 03110311     ................
   1f1c8:	03120312 03120312 03130313 03140313     ................
   1f1d8:	03140314 03150314 03150315 03160316     ................
   1f1e8:	03170316 03170317 03180317 03180318     ................
   1f1f8:	03190319 031a0319 031a031a 041b031b     ................
   1f208:	041c041b 041c041c 041d041d 041d041d     ................
   1f218:	041e041e 041f041e 041f041f 04200420     ............ . .
   1f228:	04200420 04200420 03000300 03000300      . . . .........
   1f238:	03010300 03010301 03020301 03020302     ................
   1f248:	03030302 03030303 03040303 03040304     ................
   1f258:	03050305 03050305 03060306 03060306     ................
   1f268:	03070307 03070307 03080308 03090308     ................
   1f278:	03090309 030a0309 030a030a 030b030a     ................
   1f288:	030b030b 030c030c 030c030c 030d030d     ................
   1f298:	030d030d 030e030e 030f030e 030f030f     ................
   1f2a8:	0310030f 03100310 03110311 03110311     ................
   1f2b8:	03120312 03120312 03130313 03140313     ................
   1f2c8:	03140314 03150314 03150315 03160316     ................
   1f2d8:	03170316 03170317 03180318 04180418     ................
   1f2e8:	04190419 041a0419 041a041a 041b041b     ................
   1f2f8:	041c041b 041c041c 041d041d 041e041d     ................
   1f308:	041e041e 041f041e 041f041f 04200420     ............ . .
   1f318:	04200420 04200420 03000300 03000300      . . . .........
   1f328:	03010300 03010301 03020301 03020302     ................
   1f338:	03030302 03030303 03040303 03040304     ................
   1f348:	03050305 03050305 03060306 03060306     ................
   1f358:	03070307 03070307 03080308 03090308     ................
   1f368:	03090309 030a0309 030a030a 030b030a     ................
   1f378:	030b030b 030c030c 030c030c 030d030d     ................
   1f388:	030d030d 030e030e 030f030e 030f030f     ................
   1f398:	0310030f 03100310 03110311 03110311     ................
   1f3a8:	03120312 03120312 03130313 03140313     ................
   1f3b8:	03140314 03150314 03150315 04160316     ................
   1f3c8:	04170416 04170417 04180418 04190418     ................
   1f3d8:	04190419 041a0419 041a041a 041b041b     ................
   1f3e8:	041c041b 041c041c 041d041d 041e041d     ................
   1f3f8:	041e041e 041f041e 041f041f 04200420     ............ . .
   1f408:	04200420 04200420 03000300 03000300      . . . .........
   1f418:	03010300 03010301 03020301 03020302     ................
   1f428:	03030302 03030303 03040303 03040304     ................
   1f438:	03050305 03050305 03060306 03060306     ................
   1f448:	03070307 03070307 03080308 03090308     ................
   1f458:	03090309 030a0309 030a030a 030b030a     ................
   1f468:	030b030b 030c030c 030c030c 030d030d     ................
   1f478:	030d030d 030e030e 030f030e 030f030f     ................
   1f488:	0310030f 03100310 03110311 03110311     ................
   1f498:	04120412 04130412 04130413 04140413     ................
   1f4a8:	04140414 04150414 04150415 04160416     ................
   1f4b8:	04170416 04170417 04180418 04190418     ................
   1f4c8:	04190419 041a041a 041a041a 041b041b     ................
   1f4d8:	041c041b 041c041c 041d041d 041e041d     ................
   1f4e8:	041e041e 041f041e 041f041f 04200420     ............ . .
   1f4f8:	04200420 04200420 03000300 03000300      . . . .........
   1f508:	03010300 03010301 03020301 03020302     ................
   1f518:	03030302 03030303 03040304 03040304     ................
   1f528:	03050305 03050305 03060306 03060306     ................
   1f538:	03070307 03080307 03080308 03090308     ................
   1f548:	03090309 030a0309 030a030a 030b030a     ................
   1f558:	030b030b 030c030c 030c030c 030d030d     ................
   1f568:	040e040d 040e040e 040f040e 040f040f     ................
   1f578:	0410040f 04100410 04110411 04110411     ................
   1f588:	04120412 04130412 04130413 04140413     ................
   1f598:	04140414 04150414 04150415 04160416     ................
   1f5a8:	04170416 04170417 04180418 04190418     ................
   1f5b8:	04190419 041a041a 041b041a 041b041b     ................
   1f5c8:	041c041b 041c041c 041d041d 051e051d     ................
   1f5d8:	051e051e 051f051f 051f051f 05200520     ............ . .
   1f5e8:	05200520 05200520 03000300 03000300      . . . .........
   1f5f8:	03010300 03010301 03020301 03020302     ................
   1f608:	03030302 03030303 03040304 03040304     ................
   1f618:	03050305 03050305 04060306 04060406     ................
   1f628:	04070407 04080407 04080408 04090408     ................
   1f638:	04090409 040a0409 040a040a 040b040a     ................
   1f648:	040b040b 040c040c 040c040c 040d040d     ................
   1f658:	040e040d 040e040e 040f040e 040f040f     ................
   1f668:	0410040f 04100410 04110411 04110411     ................
   1f678:	04120412 04130412 04130413 04140413     ................
   1f688:	04140414 04150415 04150415 04160416     ................
   1f698:	04170416 04170417 04180418 04190418     ................
   1f6a8:	04190419 041a041a 041b041a 051b051b     ................
   1f6b8:	051c051c 051c051c 051d051d 051e051d     ................
   1f6c8:	051e051e 051f051f 051f051f 05200520     ............ . .
   1f6d8:	05200520 05200520 04000400 04000400      . . . .........
   1f6e8:	04010400 04010401 04020401 04020402     ................
   1f6f8:	04030402 04030403 04040404 04040404     ................
   1f708:	04050405 04050405 04060406 04060406     ................
   1f718:	04070407 04080407 04080408 04090408     ................
   1f728:	04090409 040a0409 040a040a 040b040a     ................
   1f738:	040b040b 040c040c 040c040c 040d040d     ................
   1f748:	040e040d 040e040e 040f040e 040f040f     ................
   1f758:	04100410 04100410 04110411 04110411     ................
   1f768:	04120412 04130412 04130413 04140413     ................
   1f778:	04140414 04150415 04150415 04160416     ................
   1f788:	04170416 04170417 04180418 05190418     ................
   1f798:	05190519 051a051a 051b051a 051b051b     ................
   1f7a8:	051c051c 051c051c 051d051d 051e051d     ................
   1f7b8:	051e051e 051f051f 0520051f 05200520     .......... . . .
   1f7c8:	05200520 05200520 04000400 04000400      . . . .........
   1f7d8:	04010400 04010401 04020401 04020402     ................
   1f7e8:	04030402 04030403 04040404 04040404     ................
   1f7f8:	04050405 04050405 04060406 04060406     ................
   1f808:	04070407 04080407 04080408 04090408     ................
   1f818:	04090409 040a0409 040a040a 040b040b     ................
   1f828:	040b040b 040c040c 040c040c 040d040d     ................
   1f838:	040e040d 040e040e 040f040e 040f040f     ................
   1f848:	04100410 04100410 04110411 04110411     ................
   1f858:	04120412 04130412 04130413 04140413     ................
   1f868:	04140414 04150415 04150415 04160416     ................
   1f878:	05170516 05170517 05180518 05190518     ................
   1f888:	05190519 051a051a 051b051a 051b051b     ................
   1f898:	051c051c 051d051c 051d051d 051e051d     ................
   1f8a8:	051e051e 051f051f 0520051f 05200520     .......... . . .
   1f8b8:	05200520 05200520 04000400 04000400      . . . .........
   1f8c8:	04010400 04010401 04020401 04020402     ................
   1f8d8:	04030402 04030403 04040404 04040404     ................
   1f8e8:	04050405 04050405 04060406 04060406     ................
   1f8f8:	04070407 04080407 04080408 04090408     ................
   1f908:	04090409 040a0409 040a040a 040b040b     ................
   1f918:	040b040b 040c040c 040c040c 040d040d     ................
   1f928:	040e040d 040e040e 040f040e 040f040f     ................
   1f938:	04100410 04100410 04110411 04120411     ................
   1f948:	04120412 04130412 04130413 04140413     ................
   1f958:	05140414 05150515 05150515 05160516     ................
   1f968:	05170516 05170517 05180518 05190518     ................
   1f978:	05190519 051a051a 051b051a 051b051b     ................
   1f988:	051c051c 051d051c 051d051d 051e051e     ................
   1f998:	051e051e 051f051f 0520061f 05200520     .......... . . .
   1f9a8:	05200520 05200520 04000400 04000400      . . . .........
   1f9b8:	04010400 04010401 04020401 04020402     ................
   1f9c8:	04030402 04030403 04040404 04040404     ................
   1f9d8:	04050405 04050405 04060406 04070406     ................
   1f9e8:	04070407 04080407 04080408 04090408     ................
   1f9f8:	04090409 040a0409 040a040a 040b040b     ................
   1fa08:	040b040b 040c040c 040d040c 040d040d     ................
   1fa18:	040e040d 040e040e 040f040e 040f040f     ................
   1fa28:	04100410 04100410 04110411 05120511     ................
   1fa38:	05120512 05130512 05130513 05140513     ................
   1fa48:	05140514 05150515 05160515 05160516     ................
   1fa58:	05170517 05180517 05180518 05190519     ................
   1fa68:	051a0519 051a051a 051b051a 051b051b     ................
   1fa78:	051c051c 051d051c 061d061d 061e061e     ................
   1fa88:	061f061e 061f061f 06200620 06200620     ........ . . . .
   1fa98:	05200620 05200520 04000400 04000400      . . . .........
   1faa8:	04010400 04010401 04020401 04020402     ................
   1fab8:	04030402 04030403 04040404 04040404     ................
   1fac8:	04050405 04050405 04060406 04070406     ................
   1fad8:	04070407 04080407 04080408 04090408     ................
   1fae8:	04090409 040a0409 040a040a 040b040b     ................
   1faf8:	040b040b 040c040c 040d040c 040d040d     ................
   1fb08:	050e040d 050e050e 050f050f 050f050f     ................
   1fb18:	05100510 05100510 05110511 05120511     ................
   1fb28:	05120512 05130512 05130513 05140514     ................
   1fb38:	05140514 05150515 05160515 05160516     ................
   1fb48:	05170517 05180517 05180518 05190519     ................
   1fb58:	051a0519 051a051a 061b051b 061b061b     ................
   1fb68:	061c061c 061d061c 061d061d 061e061e     ................
   1fb78:	061f061e 061f061f 06200620 06200620     ........ . . . .
   1fb88:	06200620 06200620 04000400 04000400      . . . .........
   1fb98:	04010400 04010401 04020401 04020402     ................
   1fba8:	04030402 04030403 04040404 04040404     ................
   1fbb8:	04050405 04050405 04060406 04070406     ................
   1fbc8:	04070407 04080407 04080408 04090408     ................
   1fbd8:	04090409 050a0509 050a050a 050b050b     ................
   1fbe8:	050b050b 050c050c 050d050c 050d050d     ................
   1fbf8:	050e050d 050e050e 050f050f 050f050f     ................
   1fc08:	05100510 05110510 05110511 05120511     ................
   1fc18:	05120512 05130512 05130513 05140514     ................
   1fc28:	05140514 05150515 05160515 05160516     ................
   1fc38:	05170517 05180517 05180518 06190519     ................
   1fc48:	061a0619 061a061a 061b061b 061c061b     ................
   1fc58:	061c061c 061d061d 061d061d 061e061e     ................
   1fc68:	061f061e 061f061f 06200620 06200620     ........ . . . .
   1fc78:	06200620 06200620 05000500 05000500      . . . .........
   1fc88:	05010500 05010501 05020501 05020502     ................
   1fc98:	05030502 05030503 05040504 05040504     ................
   1fca8:	05050505 05050505 05060506 05070506     ................
   1fcb8:	05070507 05080507 05080508 05090508     ................
   1fcc8:	05090509 050a0509 050a050a 050b050b     ................
   1fcd8:	050b050b 050c050c 050d050c 050d050d     ................
   1fce8:	050e050d 050e050e 050f050f 050f050f     ................
   1fcf8:	05100510 05110510 05110511 05120511     ................
   1fd08:	05120512 05130512 05130513 05140514     ................
   1fd18:	05140514 05150515 05160515 05160516     ................
   1fd28:	06170517 06180617 06180618 06190619     ................
   1fd38:	061a0619 061a061a 061b061b 061c061b     ................
   1fd48:	061c061c 061d061d 061e061d 061e061e     ................
   1fd58:	061f061f 0620061f 06200620 06200620     ...... . . . . .
   1fd68:	06200620 06200620 05000500 05000500      . . . .........
   1fd78:	05010500 05010501 05020501 05020502     ................
   1fd88:	05030503 05030503 05040504 05040504     ................
   1fd98:	05050505 05050505 05060506 05070506     ................
   1fda8:	05070507 05080507 05080508 05090508     ................
   1fdb8:	05090509 050a050a 050a050a 050b050b     ................
   1fdc8:	050b050b 050c050c 050d050c 050d050d     ................
   1fdd8:	050e050d 050e050e 050f050f 050f050f     ................
   1fde8:	05100510 05110510 05110511 05120511     ................
   1fdf8:	05120512 05130513 05130513 05140514     ................
   1fe08:	05140514 05150515 06160515 06160616     ................
   1fe18:	06170617 06180617 06180618 06190619     ................
   1fe28:	061a0619 061a061a 061b061b 061c061b     ................
   1fe38:	061c061c 061d061d 061e061d 061e061e     ................
   1fe48:	061f061f 0720071f 06200620 06200620     ...... . . . . .
   1fe58:	06200620 06200620 05000500 05000500      . . . .........
   1fe68:	05010500 05010501 05020501 05020502     ................
   1fe78:	05030503 05030503 05040504 05040504     ................
   1fe88:	05050505 05060505 05060506 05070506     ................
   1fe98:	05070507 05080507 05080508 05090508     ................
   1fea8:	05090509 050a050a 050a050a 050b050b     ................
   1feb8:	050c050b 050c050c 050d050c 050d050d     ................
   1fec8:	050e050e 050e050e 050f050f 050f050f     ................
   1fed8:	05100510 05110510 05110511 05120511     ................
   1fee8:	05120512 05130513 05130513 05140514     ................
   1fef8:	06150514 06150615 06160616 06170616     ................
   1ff08:	06170617 06180618 06190618 06190619     ................
   1ff18:	061a061a 061b061a 061b061b 061c061b     ................
   1ff28:	061c061c 071d061d 071e071d 071e071e     ................
   1ff38:	071f071f 0720071f 07200720 06200720     ...... . . . . .
   1ff48:	06200620 06200620 05000500 05000500      . . . .........
   1ff58:	05010500 05010501 05020501 05020502     ................
   1ff68:	05030503 05030503 05040504 05040504     ................
   1ff78:	05050505 05060505 05060506 05070506     ................
   1ff88:	05070507 05080507 05080508 05090509     ................
   1ff98:	05090509 050a050a 050a050a 050b050b     ................
   1ffa8:	050c050b 050c050c 050d050c 050d050d     ................
   1ffb8:	050e050e 050e050e 050f050f 0510050f     ................
   1ffc8:	05100510 05110510 05110511 06120511     ................
   1ffd8:	06120612 06130613 06130613 06140614     ................
   1ffe8:	06150614 06150615 06160616 06170616     ................
   1fff8:	06170617 06180618 06190618 06190619     ................
   20008:	061a061a 061b061a 071b071b 071c071c     ................
   20018:	071d071c 071d071d 071e071e 071f071e     ................
   20028:	071f071f 0720071f 07200720 07200720     ...... . . . . .
   20038:	07200720 06200720 05000500 05000500      . . . .........
   20048:	05010500 05010501 05020501 05020502     ................
   20058:	05030503 05030503 05040504 05040504     ................
   20068:	05050505 05060505 05060506 05070506     ................
   20078:	05070507 05080507 05080508 05090509     ................
   20088:	05090509 050a050a 050a050a 050b050b     ................
   20098:	050c050b 050c050c 050d050c 050d050d     ................
   200a8:	050e050e 060e060e 060f060f 0610060f     ................
   200b8:	06100610 06110610 06110611 06120612     ................
   200c8:	06120612 06130613 06140613 06140614     ................
   200d8:	06150614 06150615 06160616 06170616     ................
   200e8:	06170617 06180618 06190618 07190619     ................
   200f8:	071a071a 071b071a 071b071b 071c071c     ................
   20108:	071d071c 071d071d 071e071e 071f071e     ................
   20118:	071f071f 07200720 07200720 07200720     .... . . . . . .
   20128:	07200720 07200720 05000500 05000500      . . . .........
   20138:	05010500 05010501 05020501 05020502     ................
   20148:	05030503 05030503 05040504 05040504     ................
   20158:	05050505 05060505 05060506 05070506     ................
   20168:	05070507 05080507 05080508 05090509     ................
   20178:	06090509 060a060a 060a060a 060b060b     ................
   20188:	060c060b 060c060c 060d060c 060d060d     ................
   20198:	060e060e 060e060e 060f060f 0610060f     ................
   201a8:	06100610 06110610 06110611 06120612     ................
   201b8:	06120612 06130613 06140613 06140614     ................
   201c8:	06150614 06150615 06160616 06170616     ................
   201d8:	06170617 07180618 07190718 07190719     ................
   201e8:	071a071a 071b071a 071b071b 071c071c     ................
   201f8:	071d071c 071d071d 071e071e 071f071e     ................
   20208:	071f071f 07200720 07200720 07200720     .... . . . . . .
   20218:	07200720 07200720 06000600 06000600      . . . .........
   20228:	06010600 06010601 06020601 06020602     ................
   20238:	06030603 06030603 06040604 06040604     ................
   20248:	06050605 06060605 06060606 06070606     ................
   20258:	06070607 06080607 06080608 06090609     ................
   20268:	06090609 060a060a 060b060a 060b060b     ................
   20278:	060c060b 060c060c 060d060d 060d060d     ................
   20288:	060e060e 060e060e 060f060f 0610060f     ................
   20298:	06100610 06110610 06110611 06120612     ................
   202a8:	06120612 06130613 06140613 06140614     ................
   202b8:	06150615 06150615 06160616 06170616     ................
   202c8:	07170717 07180718 07190719 071a0719     ................
   202d8:	071a071a 071b071b 071c071b 071c071c     ................
   202e8:	071d071d 071e071d 071e071e 071f071e     ................
   202f8:	081f081f 07200820 07200720 07200720     .... . . . . . .
   20308:	07200720 07200720 06000600 06000600      . . . .........
   20318:	06010600 06010601 06020601 06020602     ................
   20328:	06030603 06030603 06040604 06040604     ................
   20338:	06050605 06060605 06060606 06070606     ................
   20348:	06070607 06080608 06080608 06090609     ................
   20358:	06090609 060a060a 060b060a 060b060b     ................
   20368:	060c060b 060c060c 060d060d 060d060d     ................
   20378:	060e060e 060f060e 060f060f 0610060f     ................
   20388:	06100610 06110611 06110611 06120612     ................
   20398:	06130612 06130613 06140613 06140614     ................
   203a8:	06150615 06160615 07160616 07170717     ................
   203b8:	07180717 07180718 07190719 071a0719     ................
   203c8:	071a071a 071b071b 071c071b 071c071c     ................
   203d8:	081d071d 081e081d 081e081e 081f081f     ................
   203e8:	0820081f 08200820 08200820 07200720     .. . . . . . . .
   203f8:	07200720 07200720 06000600 06000600      . . . .........
   20408:	06010600 06010601 06020601 06020602     ................
   20418:	06030603 06030603 06040604 06050604     ................
   20428:	06050605 06060605 06060606 06070606     ................
   20438:	06070607 06080608 06080608 06090609     ................
   20448:	06090609 060a060a 060b060a 060b060b     ................
   20458:	060c060b 060c060c 060d060d 060d060d     ................
   20468:	060e060e 060f060e 060f060f 0610060f     ................
   20478:	06100610 06110611 06110611 06120612     ................
   20488:	06130612 06130613 06140613 06140614     ................
   20498:	07150615 07160715 07160716 07170717     ................
   204a8:	07180717 07180718 07190719 071a0719     ................
   204b8:	071a071a 071b071b 081c081b 081c081c     ................
   204c8:	081d081d 081e081d 081e081e 081f081f     ................
   204d8:	0820081f 08200820 08200820 08200820     .. . . . . . . .
   204e8:	07200820 07200720 06000600 06000600      . . . .........
   204f8:	06010600 06010601 06020601 06020602     ................
   20508:	06030603 06030603 06040604 06050604     ................
   20518:	06050605 06060605 06060606 06070606     ................
   20528:	06070607 06080608 06080608 06090609     ................
   20538:	060a0609 060a060a 060b060a 060b060b     ................
   20548:	060c060b 060c060c 060d060d 060d060d     ................
   20558:	060e060e 060f060e 060f060f 0610060f     ................
   20568:	06100610 06110611 06110611 06120612     ................
   20578:	06130612 07130713 07140713 07140714     ................
   20588:	07150715 07160715 07160716 07170717     ................
   20598:	07180717 07180718 07190719 071a0719     ................
   205a8:	081a071a 081b081b 081c081b 081c081c     ................
   205b8:	081d081d 081e081d 081e081e 081f081f     ................
   205c8:	0820081f 08200820 08200820 08200820     .. . . . . . . .
   205d8:	08200820 08200820 06000600 06000600      . . . .........
   205e8:	06010600 06010601 06020601 06020602     ................
   205f8:	06030603 06030603 06040604 06050604     ................
   20608:	06050605 06060605 06060606 06070606     ................
   20618:	06070607 06080608 06080608 06090609     ................
   20628:	060a0609 060a060a 060b060a 060b060b     ................
   20638:	060c060c 060c060c 060d060d 060e060d     ................
   20648:	060e060e 060f060e 070f060f 07100710     ................
   20658:	07100710 07110711 07120711 07120712     ................
   20668:	07130712 07130713 07140714 07140714     ................
   20678:	07150715 07160715 07160716 07170717     ................
   20688:	07180717 07180718 08190719 081a0819     ................
   20698:	081b081a 081b081b 081c081c 081d081c     ................
   206a8:	081d081d 081e081e 081f081e 081f081f     ................
   206b8:	08200820 08200820 08200820 08200820      . . . . . . . .
   206c8:	08200820 08200820 06000600 06000600      . . . .........
   206d8:	06010600 06010601 06020601 06020602     ................
   206e8:	06030603 06030603 06040604 06050604     ................
   206f8:	06050605 06060605 06060606 06070607     ................
   20708:	06070607 06080608 07080608 07090709     ................
   20718:	070a0709 070a070a 070b070a 070b070b     ................
   20728:	070c070c 070c070c 070d070d 070e070d     ................
   20738:	070e070e 070f070e 070f070f 07100710     ................
   20748:	07100710 07110711 07120711 07120712     ................
   20758:	07130712 07130713 07140714 07150714     ................
   20768:	07150715 07160715 07160716 07170717     ................
   20778:	07180717 08190818 08190819 081a081a     ................
   20788:	081b081a 081b081b 081c081c 081d081c     ................
   20798:	081d081d 081e081e 091f081e 091f091f     ................
   207a8:	09200920 08200820 08200820 08200820      . . . . . . . .
   207b8:	08200820 08200820 06000600 06000600      . . . .........
   207c8:	07010600 07010701 07020701 07020702     ................
   207d8:	07030703 07030703 07040704 07050704     ................
   207e8:	07050705 07060705 07060706 07070707     ................
   207f8:	07070707 07080708 07090708 07090709     ................
   20808:	070a0709 070a070a 070b070a 070b070b     ................
   20818:	070c070c 070c070c 070d070d 070e070d     ................
   20828:	070e070e 070f070e 070f070f 07100710     ................
   20838:	07100710 07110711 07120711 07120712     ................
   20848:	07130712 07130713 07140714 07150714     ................
   20858:	07150715 07160716 07170716 08170717     ................
   20868:	08180818 08190818 08190819 081a081a     ................
   20878:	081b081a 081b081b 081c081c 081d081c     ................
   20888:	091d081d 091e091e 091f091e 091f091f     ................
   20898:	09200920 09200920 08200920 08200820      . . . . . . . .
   208a8:	08200820 08200820 07000700 07000700      . . . .........
   208b8:	07010700 07010701 07020702 07020702     ................
   208c8:	07030703 07030703 07040704 07050704     ................
   208d8:	07050705 07060705 07060706 07070707     ................
   208e8:	07070707 07080708 07090708 07090709     ................
   208f8:	070a0709 070a070a 070b070b 070b070b     ................
   20908:	070c070c 070d070c 070d070d 070e070d     ................
   20918:	070e070e 070f070f 070f070f 07100710     ................
   20928:	07110710 07110711 07120711 07120712     ................
   20938:	07130713 07130713 07140714 07150714     ................
   20948:	07150715 07160716 08170716 08170817     ................
   20958:	08180818 08190818 08190819 081a081a     ................
   20968:	081b081a 081b081b 091c081c 091d091c     ................
   20978:	091e091d 091e091e 091f091f 0920091f     .............. .
   20988:	09200920 09200920 09200920 09200920      . . . . . . . .
   20998:	08200820 08200820 07000700 07000700      . . . .........
   209a8:	07010700 07010701 07020702 07020702     ................
   209b8:	07030703 07030703 07040704 07050704     ................
   209c8:	07050705 07060705 07060706 07070707     ................
   209d8:	07070707 07080708 07090708 07090709     ................
   209e8:	070a0709 070a070a 070b070b 070b070b     ................
   209f8:	070c070c 070d070c 070d070d 070e070d     ................
   20a08:	070e070e 070f070f 070f070f 07100710     ................
   20a18:	07110710 07110711 07120711 07120712     ................
   20a28:	07130713 07130713 07140714 07150714     ................
   20a38:	08150715 08160816 08170816 08170817     ................
   20a48:	08180818 08190818 08190819 081a081a     ................
   20a58:	081b081b 091c091b 091c091c 091d091d     ................
   20a68:	091e091d 091e091e 091f091f 0920091f     .............. .
   20a78:	09200920 09200920 09200920 09200920      . . . . . . . .
   20a88:	09200920 08200920 07000700 07000700      . . . .........
   20a98:	07010700 07010701 07020702 07020702     ................
   20aa8:	07030703 07040703 07040704 07050704     ................
   20ab8:	07050705 07060705 07060706 07070707     ................
   20ac8:	07070707 07080708 07090708 07090709     ................
   20ad8:	070a0709 070a070a 070b070b 070b070b     ................
   20ae8:	070c070c 070d070c 070d070d 070e070d     ................
   20af8:	070e070e 070f070f 070f070f 07100710     ................
   20b08:	07110710 07110711 07120711 07120712     ................
   20b18:	07130713 07140713 08140814 08150814     ................
   20b28:	08150815 08160816 08170816 08170817     ................
   20b38:	08180818 08190818 081a0819 091a081a     ................
   20b48:	091b091b 091c091b 091c091c 091d091d     ................
   20b58:	091e091d 091e091e 091f091f 0920091f     .............. .
   20b68:	09200920 09200920 09200920 09200920      . . . . . . . .
   20b78:	09200920 09200920 07000700 07000700      . . . .........
   20b88:	07010700 07010701 07020702 07020702     ................
   20b98:	07030703 07040703 07040704 07050704     ................
   20ba8:	07050705 07060706 07060706 07070707     ................
   20bb8:	07070707 07080708 07090708 07090709     ................
   20bc8:	070a0709 070a070a 070b070b 070b070b     ................
   20bd8:	070c070c 070d070c 070d070d 070e070d     ................
   20be8:	070e070e 070f070f 0710070f 07100710     ................
   20bf8:	08110810 08110811 08120812 08120812     ................
   20c08:	08130813 08140813 08140814 08150814     ................
   20c18:	08150815 08160816 08170816 08170817     ................
   20c28:	08180818 08190819 091a0919 091a091a     ................
   20c38:	091b091b 091c091b 091c091c 091d091d     ................
   20c48:	091e091d 091e091e 0a1f0a1f 0a200a1f     .............. .
   20c58:	09200920 09200920 09200920 09200920      . . . . . . . .
   20c68:	09200920 09200920 07000700 07000700      . . . .........
   20c78:	07010700 07010701 07020702 07020702     ................
   20c88:	07030703 07040703 07040704 07050704     ................
   20c98:	07050705 07060706 07060706 07070707     ................
   20ca8:	07080707 08080808 08090808 08090809     ................
   20cb8:	080a080a 080a080a 080b080b 080c080b     ................
   20cc8:	080c080c 080d080c 080d080d 080e080e     ................
   20cd8:	080e080e 080f080f 0810080f 08100810     ................
   20ce8:	08110810 08110811 08120812 08120812     ................
   20cf8:	08130813 08140813 08140814 08150815     ................
   20d08:	08150815 08160816 08170816 08180817     ................
   20d18:	09180818 09190919 091a0919 091a091a     ................
   20d28:	091b091b 091c091b 091d091c 091d091d     ................
   20d38:	0a1e0a1e 0a1f0a1e 0a1f0a1f 0a200a20     ............ . .
   20d48:	0a200a20 0a200a20 09200920 09200920      . . . . . . . .
   20d58:	09200920 09200920 07000700 07000700      . . . .........
   20d68:	07010700 07010701 08020802 08020802     ................
   20d78:	08030803 08040803 08040804 08050804     ................
   20d88:	08050805 08060806 08060806 08070807     ................
   20d98:	08080807 08080808 08090808 08090809     ................
   20da8:	080a080a 080a080a 080b080b 080c080b     ................
   20db8:	080c080c 080d080c 080d080d 080e080e     ................
   20dc8:	080e080e 080f080f 0810080f 08100810     ................
   20dd8:	08110810 08110811 08120812 08120812     ................
   20de8:	08130813 08140813 08140814 08150815     ................
   20df8:	08160815 08160816 08170817 09180817     ................
   20e08:	09180918 09190919 091a0919 091b091a     ................
   20e18:	091b091b 091c091c 0a1d091c 0a1d0a1d     ................
   20e28:	0a1e0a1e 0a1f0a1e 0a1f0a1f 0a200a20     ............ . .
   20e38:	0a200a20 0a200a20 0a200a20 09200a20      . . . . . . . .
   20e48:	09200920 09200920 08000800 08000800      . . . .........
   20e58:	08010800 08010801 08020802 08020802     ................
   20e68:	08030803 08040803 08040804 08050804     ................
   20e78:	08050805 08060806 08060806 08070807     ................
   20e88:	08080807 08080808 08090808 08090809     ................
   20e98:	080a080a 080a080a 080b080b 080c080b     ................
   20ea8:	080c080c 080d080c 080d080d 080e080e     ................
   20eb8:	080e080e 080f080f 0810080f 08100810     ................
   20ec8:	08110810 08110811 08120812 08130812     ................
   20ed8:	08130813 08140813 08140814 08150815     ................
   20ee8:	08160815 08160816 09170917 09180917     ................
   20ef8:	09180918 09190919 091a091a 091b091a     ................
   20f08:	091b091b 0a1c0a1c 0a1d0a1c 0a1d0a1d     ................
   20f18:	0a1e0a1e 0a1f0a1e 0a1f0a1f 0a200a20     ............ . .
   20f28:	0a200a20 0a200a20 0a200a20 0a200a20      . . . . . . . .
   20f38:	0a200a20 09200920 08000800 08000800      . . . .........
   20f48:	08010800 08010801 08020802 08020802     ................
   20f58:	08030803 08040803 08040804 08050804     ................
   20f68:	08050805 08060806 08060806 08070807     ................
   20f78:	08080807 08080808 08090808 08090809     ................
   20f88:	080a080a 080a080a 080b080b 080c080b     ................
   20f98:	080c080c 080d080c 080d080d 080e080e     ................
   20fa8:	080f080e 080f080f 0810080f 08100810     ................
   20fb8:	08110811 08110811 08120812 08130812     ................
   20fc8:	08130813 08140813 08140814 08150815     ................
   20fd8:	08160815 09160916 09170917 09180917     ................
   20fe8:	09190918 09190919 091a091a 0a1b091a     ................
   20ff8:	0a1b0a1b 0a1c0a1c 0a1d0a1c 0a1e0a1d     ................
   21008:	0a1e0a1e 0a1f0a1f 0a200a1f 0a200a20     .......... . . .
   21018:	0a200a20 0a200a20 0a200a20 0a200a20      . . . . . . . .
   21028:	0a200a20 0a200a20 08000800 08000800      . . . .........
   21038:	08010800 08010801 08020802 08020802     ................
   21048:	08030803 08040803 08040804 08050804     ................
   21058:	08050805 08060806 08060806 08070807     ................
   21068:	08080807 08080808 08090808 08090809     ................
   21078:	080a080a 080b080a 080b080b 080c080b     ................
   21088:	080c080c 080d080d 080d080d 080e080e     ................
   21098:	080f080e 080f080f 0810080f 08100810     ................
   210a8:	08110811 08110811 08120812 08130812     ................
   210b8:	08130813 08140813 08140814 09150915     ................
   210c8:	09160915 09160916 09170917 09180917     ................
   210d8:	09190918 09190919 0a1a091a 0a1b0a1a     ................
   210e8:	0a1c0a1b 0a1c0a1c 0a1d0a1d 0a1e0a1d     ................
   210f8:	0a1e0a1e 0b1f0a1f 0b200b1f 0a200a20     .......... . . .
   21108:	0a200a20 0a200a20 0a200a20 0a200a20      . . . . . . . .
   21118:	0a200a20 0a200a20 08000800 08000800      . . . .........
   21128:	08010800 08010801 08020802 08020802     ................
   21138:	08030803 08040803 08040804 08050804     ................
   21148:	08050805 08060806 08070806 08070807     ................
   21158:	08080807 08080808 08090809 08090809     ................
   21168:	080a080a 080b080a 080b080b 080c080b     ................
   21178:	080c080c 080d080d 080d080d 080e080e     ................
   21188:	080f080e 080f080f 0810080f 08100810     ................
   21198:	08110811 08110811 09120812 09130912     ................
   211a8:	09130913 09140914 09140914 09150915     ................
   211b8:	09160915 09160916 09170917 09180918     ................
   211c8:	09190918 0a190a19 0a1a0a1a 0a1b0a1b     ................
   211d8:	0a1c0a1b 0a1c0a1c 0a1d0a1d 0a1e0a1d     ................
   211e8:	0b1e0b1e 0b1f0b1f 0b200b20 0b200b20     ........ . . . .
   211f8:	0a200b20 0a200a20 0a200a20 0a200a20      . . . . . . . .
   21208:	0a200a20 0a200a20 08000800 08000800      . . . .........
   21218:	08010800 08010801 08020802 08020802     ................
   21228:	08030803 08040803 08040804 08050804     ................
   21238:	08050805 08060806 08070806 08070807     ................
   21248:	09080807 09080908 09090909 09090909     ................
   21258:	090a090a 090b090a 090b090b 090c090b     ................
   21268:	090c090c 090d090d 090e090d 090e090e     ................
   21278:	090f090e 090f090f 09100910 09100910     ................
   21288:	09110911 09120911 09120912 09130912     ................
   21298:	09130913 09140914 09150914 09150915     ................
   212a8:	09160915 09170916 09170917 09180918     ................
   212b8:	0a190a18 0a1a0a19 0a1a0a1a 0a1b0a1b     ................
   212c8:	0a1c0a1b 0a1c0a1c 0b1d0a1d 0b1e0b1e     ................
   212d8:	0b1f0b1e 0b1f0b1f 0b200b20 0b200b20     ........ . . . .
   212e8:	0b200b20 0a200b20 0a200a20 0a200a20      . . . . . . . .
   212f8:	0a200a20 0a200a20 08000800 08000800      . . . .........
   21308:	08010800 08010801 08020802 09020902     ................
   21318:	09030903 09040903 09040904 09050905     ................
   21328:	09050905 09060906 09070906 09070907     ................
   21338:	09080907 09080908 09090909 09090909     ................
   21348:	090a090a 090b090a 090b090b 090c090b     ................
   21358:	090c090c 090d090d 090e090d 090e090e     ................
   21368:	090f090e 090f090f 09100910 09100910     ................
   21378:	09110911 09120911 09120912 09130912     ................
   21388:	09130913 09140914 09150914 09150915     ................
   21398:	09160916 09170916 09170917 0a180a18     ................
   213a8:	0a190a19 0a1a0a19 0a1a0a1a 0a1b0a1b     ................
   213b8:	0a1c0a1b 0b1d0b1c 0b1d0b1d 0b1e0b1e     ................
   213c8:	0b1f0b1e 0b200b1f 0b200b20 0b200b20     ...... . . . . .
   213d8:	0b200b20 0b200b20 0a200b20 0a200a20      . . . . . . . .
   213e8:	0a200a20 0a200a20 09000900 09000900      . . . .........
   213f8:	09010900 09010901 09020902 09020902     ................
   21408:	09030903 09040903 09040904 09050905     ................
   21418:	09050905 09060906 09070906 09070907     ................
   21428:	09080907 09080908 09090909 09090909     ................
   21438:	090a090a 090b090a 090b090b 090c090c     ................
   21448:	090c090c 090d090d 090e090d 090e090e     ................
   21458:	090f090e 090f090f 09100910 09110910     ................
   21468:	09110911 09120911 09120912 09130913     ................
   21478:	09130913 09140914 09150914 09150915     ................
   21488:	09160916 09170916 0a170a17 0a180a18     ................
   21498:	0a190a19 0a1a0a19 0a1a0a1a 0b1b0a1b     ................
   214a8:	0b1c0b1c 0b1d0b1c 0b1d0b1d 0b1e0b1e     ................
   214b8:	0b1f0b1f 0b200b1f 0b200b20 0b200b20     ...... . . . . .
   214c8:	0b200b20 0b200b20 0b200b20 0b200b20      . . . . . . . .
   214d8:	0a200a20 0a200a20 09000900 09000900      . . . .........
   214e8:	09010900 09010901 09020902 09020902     ................
   214f8:	09030903 09040903 09040904 09050905     ................
   21508:	09050905 09060906 09070906 09070907     ................
   21518:	09080907 09080908 09090909 090a0909     ................
   21528:	090a090a 090b090a 090b090b 090c090c     ................
   21538:	090c090c 090d090d 090e090d 090e090e     ................
   21548:	090f090f 090f090f 09100910 09110910     ................
   21558:	09110911 09120911 09120912 09130913     ................
   21568:	09130913 09140914 09150914 09150915     ................
   21578:	09160916 0a170a16 0a180a17 0a180a18     ................
   21588:	0a190a19 0a1a0a19 0b1b0a1a 0b1b0b1b     ................
   21598:	0b1c0b1c 0b1d0b1c 0b1e0b1d 0b1e0b1e     ................
   215a8:	0c1f0b1f 0c200c1f 0b200c20 0b200b20     ...... . . . . .
   215b8:	0b200b20 0b200b20 0b200b20 0b200b20      . . . . . . . .
   215c8:	0b200b20 0a200a20 09000900 09000900      . . . .........
   215d8:	09010900 09010901 09020902 09020902     ................
   215e8:	09030903 09040903 09040904 09050905     ................
   215f8:	09050905 09060906 09070906 09070907     ................
   21608:	09080908 09080908 09090909 090a0909     ................
   21618:	090a090a 090b090a 090b090b 090c090c     ................
   21628:	090d090c 090d090d 090e090d 090e090e     ................
   21638:	090f090f 090f090f 09100910 09110910     ................
   21648:	09110911 09120911 09120912 09130913     ................
   21658:	09130913 09140914 09150914 09150915     ................
   21668:	0a160a16 0a170a16 0a180a17 0a180a18     ................
   21678:	0a190a19 0b1a0b1a 0b1b0b1a 0b1b0b1b     ................
   21688:	0b1c0b1c 0b1d0b1d 0b1e0b1d 0c1e0c1e     ................
   21698:	0c1f0c1f 0c200c20 0c200c20 0b200c20     .... . . . . . .
   216a8:	0b200b20 0b200b20 0b200b20 0b200b20      . . . . . . . .
   216b8:	0b200b20 0b200b20 09000900 09000900      . . . .........
   216c8:	09010900 09010901 09020902 09020902     ................
   216d8:	09030903 09040903 09040904 09050905     ................
   216e8:	09050905 09060906 09070906 09070907     ................
   216f8:	09080908 09080908 09090909 090a0909     ................
   21708:	090a090a 090b090a 090b090b 090c090c     ................
   21718:	090d090c 090d090d 090e090d 090e090e     ................
   21728:	090f090f 0a100a0f 0a100a10 0a110a10     ................
   21738:	0a110a11 0a120a12 09120912 09130913     ................
   21748:	09140913 09140914 0a150a14 0a150a15     ................
   21758:	0a160a16 0a170a17 0a180a17 0a190a18     ................
   21768:	0b190b19 0b1a0b1a 0b1b0b1a 0b1c0b1b     ................
   21778:	0b1c0b1c 0c1d0b1d 0c1e0c1e 0c1f0c1e     ................
   21788:	0c1f0c1f 0c200c20 0c200c20 0c200c20     .... . . . . . .
   21798:	0b200c20 0b200b20 0b200b20 0b200b20      . . . . . . . .
   217a8:	0b200b20 0b200b20 09000900 09000900      . . . .........
   217b8:	09010900 09010901 09020902 09030902     ................
   217c8:	09030903 09040903 09040904 09050905     ................
   217d8:	09060905 09060906 09070906 0a070907     ................
   217e8:	0a080a08 0a080a08 0a090a09 0a0a0a09     ................
   217f8:	0a0a0a0a 0a0b0a0b 0a0b0a0b 0a0c0a0c     ................
   21808:	0a0d0a0c 0a0d0a0d 0a0e0a0e 0a0e0a0e     ................
   21818:	0a0f0a0f 0a100a0f 0a100a10 0a110a10     ................
   21828:	0a110a11 0a120a12 0a120a12 0a130a13     ................
   21838:	0a140a13 0a140a14 0a150a14 0a150a15     ................
   21848:	0a160a16 0a170a17 0a180a17 0b190b18     ................
   21858:	0b190b19 0b1a0b1a 0b1b0b1b 0b1c0b1b     ................
   21868:	0c1d0b1c 0c1d0c1d 0c1e0c1e 0c1f0c1e     ................
   21878:	0c200c1f 0c200c20 0c200c20 0c200c20     .. . . . . . . .
   21888:	0c200c20 0c200c20 0b200b20 0b200b20      . . . . . . . .
   21898:	0b200b20 0b200b20 09000900 09000900      . . . .........
   218a8:	09010900 09010901 09020902 0a030902     ................
   218b8:	0a030a03 0a040a03 0a040a04 0a050a05     ................
   218c8:	0a060a05 0a060a06 0a070a06 0a070a07     ................
   218d8:	0a080a08 0a080a08 0a090a09 0a0a0a09     ................
   218e8:	0a0a0a0a 0a0b0a0b 0a0b0a0b 0a0c0a0c     ................
   218f8:	0a0d0a0c 0a0d0a0d 0a0e0a0e 0a0f0a0e     ................
   21908:	0a0f0a0f 0a100a0f 0a100a10 0a110a11     ................
   21918:	0a110a11 0a120a12 0a130a12 0a130a13     ................
   21928:	0a140a13 0a140a14 0a150a14 0a160a15     ................
   21938:	0a160a16 0a170a17 0b180b18 0b190b18     ................
   21948:	0b1a0b19 0b1a0b1a 0b1b0b1b 0c1c0c1b     ................
   21958:	0c1d0c1c 0c1d0c1d 0c1e0c1e 0c1f0c1f     ................
   21968:	0c200c1f 0c200c20 0c200c20 0c200c20     .. . . . . . . .
   21978:	0c200c20 0c200c20 0c200c20 0b200b20      . . . . . . . .
   21988:	0b200b20 0b200b20 0a000a00 0a000a00      . . . .........
   21998:	0a010a00 0a010a01 0a020a02 0a030a02     ................
   219a8:	0a030a03 0a040a03 0a040a04 0a050a05     ................
   219b8:	0a060a05 0a060a06 0a070a06 0a070a07     ................
   219c8:	0a080a08 0a090a08 0a090a09 0a0a0a09     ................
   219d8:	0a0a0a0a 0a0b0a0b 0a0c0a0b 0a0c0a0c     ................
   219e8:	0a0d0a0c 0a0d0a0d 0a0e0a0e 0a0f0a0e     ................
   219f8:	0a0f0a0f 0a100a0f 0a100a10 0a110a11     ................
   21a08:	0a110a11 0a120a12 0a130a12 0a130a13     ................
   21a18:	0a140a13 0a140a14 0a150a15 0a160a15     ................
   21a28:	0a160a16 0b170b17 0b180b18 0b190b18     ................
   21a38:	0b1a0b19 0b1a0b1a 0c1b0c1b 0c1c0c1c     ................
   21a48:	0c1d0c1c 0c1e0c1d 0c1e0c1e 0d1f0d1f     ................
   21a58:	0d200d20 0c200d20 0c200c20 0c200c20      . . . . . . . .
   21a68:	0c200c20 0c200c20 0c200c20 0c200c20      . . . . . . . .
   21a78:	0b200b20 0b200b20 0a000a00 0a000a00      . . . .........
   21a88:	0a010a00 0a010a01 0a020a02 0a030a02     ................
   21a98:	0a030a03 0a040a03 0a040a04 0a050a05     ................
   21aa8:	0a060a05 0a060a06 0a070a06 0a070a07     ................
   21ab8:	0a080a08 0a090a08 0a090a09 0a0a0a09     ................
   21ac8:	0a0a0a0a 0a0b0a0b 0a0c0a0b 0a0c0a0c     ................
   21ad8:	0a0d0a0d 0a0d0a0d 0a0e0a0e 0a0f0a0e     ................
   21ae8:	0a0f0a0f 0a100a10 0a100a10 0a110a11     ................
   21af8:	0a120a11 0a120a12 0a130a12 0a130a13     ................
   21b08:	0a140a14 0a140a14 0a150a15 0a160a15     ................
   21b18:	0b170a16 0b170b17 0b180b18 0b190b19     ................
   21b28:	0b1a0b19 0c1b0c1a 0c1b0c1b 0c1c0c1c     ................
   21b38:	0c1d0c1d 0c1e0c1d 0d1f0d1e 0d1f0d1f     ................
   21b48:	0d200d20 0d200d20 0d200d20 0c200c20      . . . . . . . .
   21b58:	0c200c20 0c200c20 0c200c20 0c200c20      . . . . . . . .
   21b68:	0c200c20 0b200c20 0a000a00 0a000a00      . . . .........
   21b78:	0a010a00 0a010a01 0a020a02 0a030a02     ................
   21b88:	0a030a03 0a040a03 0a040a04 0a050a05     ................
   21b98:	0a060a05 0a060a06 0a070a07 0a070a07     ................
   21ba8:	0a080a08 0a090a08 0a090a09 0a0a0a09     ................
   21bb8:	0a0a0a0a 0a0b0a0b 0a0c0a0b 0a0c0a0c     ................
   21bc8:	0a0d0a0d 0a0e0a0d 0a0e0a0e 0a0f0a0e     ................
   21bd8:	0a0f0a0f 0a100a10 0a110a10 0a110a11     ................
   21be8:	0a120a11 0a120a12 0a130a12 0a130a13     ................
   21bf8:	0a140a14 0a140a14 0a150a15 0b160a15     ................
   21c08:	0b170b16 0b170b17 0b180b18 0b190b19     ................
   21c18:	0c1a0c1a 0c1b0c1a 0c1c0c1b 0c1c0c1c     ................
   21c28:	0d1d0c1d 0d1e0d1e 0d1f0d1e 0d200d1f     .............. .
   21c38:	0d200d20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   21c48:	0c200c20 0c200c20 0c200c20 0c200c20      . . . . . . . .
   21c58:	0c200c20 0c200c20 0a000a00 0a000a00      . . . .........
   21c68:	0a010a00 0a010a01 0a020a02 0a030a02     ................
   21c78:	0a030a03 0a040a04 0a040a04 0a050a05     ................
   21c88:	0a060a05 0a060a06 0a070a07 0a070a07     ................
   21c98:	0a080a08 0a090a08 0a090a09 0a0a0a0a     ................
   21ca8:	0a0a0a0a 0b0b0b0b 0b0c0b0b 0b0c0b0c     ................
   21cb8:	0b0d0b0d 0b0e0b0d 0b0e0b0e 0b0f0b0f     ................
   21cc8:	0b0f0b0f 0b100b10 0b110b10 0b110b11     ................
   21cd8:	0b120b11 0b120b12 0b130b13 0b130b13     ................
   21ce8:	0b140b14 0b150b14 0b150b15 0b160b16     ................
   21cf8:	0b170b16 0b180b17 0c180b18 0c190c19     ................
   21d08:	0c1a0c1a 0c1b0c1a 0c1c0c1b 0d1c0c1c     ................
   21d18:	0d1d0d1d 0d1e0d1e 0d1f0d1e 0d200d1f     .............. .
   21d28:	0d200d20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   21d38:	0d200d20 0c200c20 0c200c20 0c200c20      . . . . . . . .
   21d48:	0c200c20 0c200c20 0a000a00 0a000a00      . . . .........
   21d58:	0a010a00 0a010a01 0a020a02 0a030a02     ................
   21d68:	0a030a03 0a040a04 0a040a04 0a050a05     ................
   21d78:	0a060a05 0b060b06 0b070b07 0b080b07     ................
   21d88:	0b080b08 0b090b08 0b090b09 0b0a0b0a     ................
   21d98:	0b0b0b0a 0b0b0b0b 0b0c0b0c 0b0c0b0c     ................
   21da8:	0b0d0b0d 0b0e0b0d 0b0e0b0e 0b0f0b0f     ................
   21db8:	0b100b0f 0b100b10 0b110b10 0b110b11     ................
   21dc8:	0b120b12 0b120b12 0b130b13 0b140b13     ................
   21dd8:	0b140b14 0b150b14 0b150b15 0b160b16     ................
   21de8:	0b170b17 0c180b17 0c190c18 0c190c19     ................
   21df8:	0c1a0c1a 0c1b0c1b 0d1c0c1b 0d1d0d1c     ................
   21e08:	0d1d0d1d 0d1e0d1e 0d1f0d1f 0d200e1f     .............. .
   21e18:	0d200d20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   21e28:	0d200d20 0d200d20 0c200c20 0c200c20      . . . . . . . .
   21e38:	0c200c20 0c200c20 0a000a00 0a000a00      . . . .........
   21e48:	0a010a00 0a010a01 0b020a02 0b030b02     ................
   21e58:	0b030b03 0b040b04 0b040b04 0b050b05     ................
   21e68:	0b060b05 0b060b06 0b070b07 0b080b07     ................
   21e78:	0b080b08 0b090b08 0b090b09 0b0a0b0a     ................
   21e88:	0b0b0b0a 0b0b0b0b 0b0c0b0c 0b0d0b0c     ................
   21e98:	0b0d0b0d 0b0e0b0d 0b0e0b0e 0b0f0b0f     ................
   21ea8:	0b100b0f 0b100b10 0b110b11 0b110b11     ................
   21eb8:	0b120b12 0b130b12 0b130b13 0b140b13     ................
   21ec8:	0b140b14 0b150b15 0b160b15 0b160b16     ................
   21ed8:	0c170b17 0c180c18 0c190c18 0c1a0c19     ................
   21ee8:	0c1a0c1a 0d1b0d1b 0d1c0d1c 0d1d0d1c     ................
   21ef8:	0d1e0d1d 0d1e0d1e 0e1f0e1f 0e200e20     ............ . .
   21f08:	0e200e20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   21f18:	0d200d20 0d200d20 0d200d20 0c200d20      . . . . . . . .
   21f28:	0c200c20 0c200c20 0b000b00 0b000b00      . . . .........
   21f38:	0b010b00 0b010b01 0b020b02 0b030b02     ................
   21f48:	0b030b03 0b040b04 0b050b04 0b050b05     ................
   21f58:	0b060b05 0b060b06 0b070b07 0b080b07     ................
   21f68:	0b080b08 0b090b09 0b090b09 0b0a0b0a     ................
   21f78:	0b0b0b0a 0b0b0b0b 0b0c0b0c 0b0d0b0c     ................
   21f88:	0b0d0b0d 0b0e0b0e 0b0e0b0e 0b0f0b0f     ................
   21f98:	0b100b0f 0b100b10 0b110b11 0b110b11     ................
   21fa8:	0b120b12 0b130b12 0b130b13 0b140b13     ................
   21fb8:	0b140b14 0b150b15 0b160b15 0c170c16     ................
   21fc8:	0c170c17 0c180c18 0c190c19 0c1a0c19     ................
   21fd8:	0d1b0d1a 0d1b0d1b 0d1c0d1c 0d1d0d1d     ................
   21fe8:	0e1e0d1d 0e1f0e1e 0e1f0e1f 0e200e20     ............ . .
   21ff8:	0e200e20 0e200e20 0d200d20 0d200d20      . . . . . . . .
   22008:	0d200d20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   22018:	0c200d20 0c200c20 0b000b00 0b000b00      . . . .........
   22028:	0b010b00 0b010b01 0b020b02 0b030b02     ................
   22038:	0b030b03 0b040b04 0b050b04 0b050b05     ................
   22048:	0b060b05 0b060b06 0b070b07 0b080b07     ................
   22058:	0b080b08 0b090b09 0b0a0b09 0b0a0b0a     ................
   22068:	0b0b0b0a 0b0b0b0b 0b0c0b0c 0b0d0b0c     ................
   22078:	0b0d0b0d 0b0e0b0e 0b0f0b0e 0b0f0b0f     ................
   22088:	0b100b10 0b100b10 0b110b11 0b120b11     ................
   22098:	0b120b12 0b130b12 0b130b13 0b140b14     ................
   220a8:	0c150b14 0c150c15 0c160c16 0c170c16     ................
   220b8:	0c180c17 0c180c18 0d190c19 0d1a0d1a     ................
   220c8:	0d1b0d1a 0d1c0d1b 0d1c0d1c 0e1d0d1d     ................
   220d8:	0e1e0e1e 0e1f0e1e 0e200e1f 0e200e20     .......... . . .
   220e8:	0e200e20 0e200e20 0e200e20 0d200d20      . . . . . . . .
   220f8:	0d200d20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   22108:	0d200d20 0c200d20 0b000b00 0b000b00      . . . .........
   22118:	0b010b00 0b010b01 0b020b02 0b030b02     ................
   22128:	0b030b03 0b040b04 0b050b04 0b050b05     ................
   22138:	0b060b06 0b060b06 0b070b07 0b080b07     ................
   22148:	0b080b08 0b090b09 0b0a0b09 0b0a0b0a     ................
   22158:	0b0b0b0b 0c0c0b0b 0c0c0c0c 0c0d0c0c     ................
   22168:	0c0d0c0d 0c0e0c0e 0c0f0c0e 0c0f0c0f     ................
   22178:	0c100c10 0c110c10 0c110c11 0c120c11     ................
   22188:	0c120c12 0c130c13 0c130c13 0c140c14     ................
   22198:	0c150c14 0c150c15 0c160c16 0c170c17     ................
   221a8:	0c180c17 0d190c18 0d190d19 0d1a0d1a     ................
   221b8:	0d1b0d1b 0d1c0d1b 0e1d0e1c 0e1d0e1d     ................
   221c8:	0e1e0e1e 0e1f0e1f 0e200e1f 0e200e20     .......... . . .
   221d8:	0e200e20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   221e8:	0d200e20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   221f8:	0d200d20 0d200d20 0b000b00 0b000b00      . . . .........
   22208:	0b010b00 0b010b01 0b020b02 0b030b02     ................
   22218:	0b030b03 0b040b04 0b050b04 0b050b05     ................
   22228:	0b060b06 0b070b06 0b070b07 0b080b07     ................
   22238:	0c080b08 0c090c09 0c0a0c09 0c0a0c0a     ................
   22248:	0c0b0c0b 0c0c0c0b 0c0c0c0c 0c0d0c0d     ................
   22258:	0c0e0c0d 0c0e0c0e 0c0f0c0e 0c0f0c0f     ................
   22268:	0c100c10 0c110c10 0c110c11 0c120c12     ................
   22278:	0c120c12 0c130c13 0c140c13 0c140c14     ................
   22288:	0c150c15 0c160c15 0c160c16 0c170c17     ................
   22298:	0d180d18 0d190d18 0d1a0d19 0d1a0d1a     ................
   222a8:	0d1b0d1b 0e1c0e1c 0e1d0e1c 0e1e0e1d     ................
   222b8:	0e1e0e1e 0f1f0e1f 0f200f20 0e200e20     ........ . . . .
   222c8:	0e200e20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   222d8:	0e200e20 0d200e20 0d200d20 0d200d20      . . . . . . . .
   222e8:	0d200d20 0d200d20 0b000b00 0b000b00      . . . .........
   222f8:	0b010b01 0b010b01 0b020b02 0b030b02     ................
   22308:	0b030b03 0c040c04 0c050c04 0c050c05     ................
   22318:	0c060c06 0c070c06 0c070c07 0c080c08     ................
   22328:	0c080c08 0c090c09 0c0a0c09 0c0a0c0a     ................
   22338:	0c0b0c0b 0c0c0c0b 0c0c0c0c 0c0d0c0d     ................
   22348:	0c0e0c0d 0c0e0c0e 0c0f0c0f 0c100c0f     ................
   22358:	0c100c10 0c110c10 0c110c11 0c120c12     ................
   22368:	0c130c12 0c130c13 0c140c13 0c140c14     ................
   22378:	0c150c15 0c160c15 0d170c16 0d170d17     ................
   22388:	0d180d18 0d190d19 0d1a0d19 0e1b0d1a     ................
   22398:	0e1b0e1b 0e1c0e1c 0e1d0e1d 0e1e0e1d     ................
   223a8:	0f1f0e1e 0f1f0f1f 0f200f20 0f200f20     ........ . . . .
   223b8:	0e200e20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   223c8:	0e200e20 0e200e20 0d200e20 0d200d20      . . . . . . . .
   223d8:	0d200d20 0d200d20 0c000c00 0c000c00      . . . .........
   223e8:	0c010c01 0c010c01 0c020c02 0c030c02     ................
   223f8:	0c030c03 0c040c04 0c050c04 0c050c05     ................
   22408:	0c060c06 0c070c06 0c070c07 0c080c08     ................
   22418:	0c090c08 0c090c09 0c0a0c09 0c0a0c0a     ................
   22428:	0c0b0c0b 0c0c0c0b 0c0c0c0c 0c0d0c0d     ................
   22438:	0c0e0c0d 0c0e0c0e 0c0f0c0f 0c100c0f     ................
   22448:	0c100c10 0c110c11 0c110c11 0c120c12     ................
   22458:	0c130c12 0c130c13 0c140c14 0c150c14     ................
   22468:	0d150c15 0d160d16 0d170d16 0d180d17     ................
   22478:	0d180d18 0d190d19 0e1a0e19 0e1b0e1a     ................
   22488:	0e1b0e1b 0e1c0e1c 0e1d0e1d 0f1e0f1d     ................
   22498:	0f1f0f1e 0f1f0f1f 0f200f20 0f200f20     ........ . . . .
   224a8:	0f200f20 0e200f20 0e200e20 0e200e20      . . . . . . . .
   224b8:	0e200e20 0e200e20 0e200e20 0d200e20      . . . . . . . .
   224c8:	0d200d20 0d200d20 0c000c00 0c000c00      . . . .........
   224d8:	0c010c01 0c020c01 0c020c02 0c030c02     ................
   224e8:	0c030c03 0c040c04 0c050c04 0c050c05     ................
   224f8:	0c060c06 0c070c06 0c070c07 0c080c08     ................
   22508:	0c090c08 0c090c09 0c0a0c0a 0c0b0c0a     ................
   22518:	0c0b0c0b 0c0c0c0c 0c0d0c0c 0c0d0c0d     ................
   22528:	0c0e0c0e 0c0e0c0e 0c0f0c0f 0c100c0f     ................
   22538:	0d100c10 0d110d11 0d120d11 0d120d12     ................
   22548:	0d130d13 0d130d13 0d140d14 0d150d14     ................
   22558:	0d150d15 0d160d16 0d170d17 0d180d17     ................
   22568:	0d180d18 0e190e19 0e1a0e1a 0e1b0e1a     ................
   22578:	0e1c0e1b 0e1c0e1c 0f1d0f1d 0f1e0f1e     ................
   22588:	0f1f0f1e 0f200f1f 0f200f20 0f200f20     ...... . . . . .
   22598:	0f200f20 0f200f20 0e200f20 0e200e20      . . . . . . . .
   225a8:	0e200e20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   225b8:	0e200e20 0d200d20 0c000c00 0c000c00      . . . .........
   225c8:	0c010c01 0c020c01 0c020c02 0c030c02     ................
   225d8:	0c030c03 0c040c04 0c050c04 0c050c05     ................
   225e8:	0c060c06 0c070c06 0c070c07 0c080c08     ................
   225f8:	0c090c08 0c090c09 0c0a0c0a 0c0b0c0a     ................
   22608:	0c0b0c0b 0c0c0c0c 0d0d0d0c 0d0d0d0d     ................
   22618:	0d0e0d0e 0d0f0d0e 0d0f0d0f 0d100d10     ................
   22628:	0d100d10 0d110d11 0d120d11 0d120d12     ................
   22638:	0d130d13 0d140d13 0d140d14 0d150d15     ................
   22648:	0d160d15 0d160d16 0d170d17 0e180d17     ................
   22658:	0e190e18 0e190e19 0e1a0e1a 0e1b0e1b     ................
   22668:	0f1c0e1b 0f1d0f1c 0f1d0f1d 0f1e0f1e     ................
   22678:	0f1f0f1f 0f200f1f 0f200f20 0f200f20     ...... . . . . .
   22688:	0f200f20 0f200f20 0f200f20 0e200f20      . . . . . . . .
   22698:	0e200e20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   226a8:	0e200e20 0e200e20 0c000c00 0c000c00      . . . .........
   226b8:	0c010c01 0c020c01 0c020c02 0c030c03     ................
   226c8:	0c040c03 0c040c04 0c050c04 0c050c05     ................
   226d8:	0c060c06 0c070c06 0c070c07 0c080c08     ................
   226e8:	0c090c08 0c090c09 0d0a0d0a 0d0b0d0a     ................
   226f8:	0d0b0d0b 0d0c0d0c 0d0d0d0c 0d0d0d0d     ................
   22708:	0d0e0d0e 0d0f0d0e 0d0f0d0f 0d100d10     ................
   22718:	0d110d10 0d110d11 0d120d12 0d120d12     ................
   22728:	0d130d13 0d140d13 0d140d14 0d150d15     ................
   22738:	0d160d15 0d160d16 0e170e17 0e180e18     ................
   22748:	0e190e18 0e1a0e19 0e1a0e1a 0f1b0f1b     ................
   22758:	0f1c0f1c 0f1d0f1c 0f1e0f1d 0f1e0f1e     ................
   22768:	101f101f 1020101f 0f200f20 0f200f20     ...... . . . . .
   22778:	0f200f20 0f200f20 0f200f20 0f200f20      . . . . . . . .
   22788:	0e200f20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   22798:	0e200e20 0e200e20 0c000c00 0c000c00      . . . .........
   227a8:	0c010c01 0c020c01 0c020c02 0c030c03     ................
   227b8:	0c040c03 0c040c04 0c050c05 0d060c05     ................
   227c8:	0d060d06 0d070d06 0d070d07 0d080d08     ................
   227d8:	0d090d08 0d090d09 0d0a0d0a 0d0b0d0a     ................
   227e8:	0d0b0d0b 0d0c0d0c 0d0d0d0c 0d0d0d0d     ................
   227f8:	0d0e0d0e 0d0f0d0e 0d0f0d0f 0d100d10     ................
   22808:	0d110d10 0d110d11 0d120d12 0d130d12     ................
   22818:	0d130d13 0d140d14 0d150d14 0d150d15     ................
   22828:	0e160d16 0e170e16 0e170e17 0e180e18     ................
   22838:	0e190e19 0e1a0e19 0f1b0f1a 0f1b0f1b     ................
   22848:	0f1c0f1c 0f1d0f1d 0f1e0f1d 101e101e     ................
   22858:	101f101f 1020101f 10201020 0f201020     ...... . . . . .
   22868:	0f200f20 0f200f20 0f200f20 0f200f20      . . . . . . . .
   22878:	0f200f20 0f200f20 0e200e20 0e200e20      . . . . . . . .
   22888:	0e200e20 0e200e20 0c000c00 0d000c00      . . . .........
   22898:	0d010d01 0d020d01 0d020d02 0d030d03     ................
   228a8:	0d040d03 0d040d04 0d050d05 0d060d05     ................
   228b8:	0d060d06 0d070d07 0d080d07 0d080d08     ................
   228c8:	0d090d08 0d090d09 0d0a0d0a 0d0b0d0a     ................
   228d8:	0d0b0d0b 0d0c0d0c 0d0d0d0d 0d0e0d0d     ................
   228e8:	0d0e0d0e 0d0f0d0f 0d100d0f 0d100d10     ................
   228f8:	0d110d11 0d110d11 0d120d12 0d130d12     ................
   22908:	0d130d13 0d140d14 0e150e14 0e150e15     ................
   22918:	0e160e16 0e170e16 0e180e17 0e180e18     ................
   22928:	0f190e19 0f1a0f1a 0f1b0f1a 0f1c0f1b     ................
   22938:	0f1c0f1c 101d0f1d 101e101d 101e101e     ................
   22948:	101f101f 101f101f 10201020 10201020     ........ . . . .
   22958:	0f201020 0f200f20 0f200f20 0f200f20      . . . . . . . .
   22968:	0f200f20 0f200f20 0f200f20 0e200e20      . . . . . . . .
   22978:	0e200e20 0e200e20 0d000d00 0d000d00      . . . .........
   22988:	0d010d01 0d020d01 0d020d02 0d030d03     ................
   22998:	0d040d03 0d040d04 0d050d05 0d060d05     ................
   229a8:	0d060d06 0d070d07 0d080d07 0d080d08     ................
   229b8:	0d090d09 0d0a0d09 0d0a0d0a 0d0b0d0b     ................
   229c8:	0d0c0d0b 0d0c0d0c 0d0d0d0d 0d0e0d0d     ................
   229d8:	0d0e0d0e 0d0f0d0f 0d100d0f 0e100e10     ................
   229e8:	0e110e11 0e120e11 0e120e12 0e130e13     ................
   229f8:	0e140e13 0e140e14 0e150e14 0e160e15     ................
   22a08:	0e160e16 0e170e17 0e180e17 0f190f18     ................
   22a18:	0f190f19 0f1a0f1a 0f1b0f1b 0f1c0f1b     ................
   22a28:	101c101c 101d101d 101e101d 101e101e     ................
   22a38:	101f101e 101f101f 10201020 10201020     ........ . . . .
   22a48:	10201020 0f201020 0f200f20 0f200f20      . . . . . . . .
   22a58:	0f200f20 0f200f20 0f200f20 0f200f20      . . . . . . . .
   22a68:	0e200e20 0e200e20 0d000d00 0d000d00      . . . .........
   22a78:	0d010d01 0d020d01 0d020d02 0d030d03     ................
   22a88:	0d040d03 0d040d04 0d050d05 0d060d05     ................
   22a98:	0d060d06 0d070d07 0d080d07 0d080d08     ................
   22aa8:	0d090d09 0d0a0d09 0d0a0d0a 0d0b0d0b     ................
   22ab8:	0d0c0d0b 0d0c0d0c 0e0d0d0d 0e0e0e0d     ................
   22ac8:	0e0e0e0e 0e0f0e0f 0e100e0f 0e100e10     ................
   22ad8:	0e110e11 0e120e11 0e120e12 0e130e13     ................
   22ae8:	0e140e13 0e140e14 0e150e15 0e160e15     ................
   22af8:	0e160e16 0f170e17 0f180f18 0f190f18     ................
   22b08:	0f1a0f19 0f1a0f1a 101b0f1b 101c101b     ................
   22b18:	101c101c 101d101d 101e101d 101e101e     ................
   22b28:	101f101e 101f101f 10201020 10201020     ........ . . . .
   22b38:	10201020 10201020 10201020 0f200f20      . . . . . . . .
   22b48:	0f200f20 0f200f20 0f200f20 0f200f20      . . . . . . . .
   22b58:	0f200f20 0e200e20 0d000d00 0d000d00      . . . .........
   22b68:	0d010d01 0d020d01 0d020d02 0d030d03     ................
   22b78:	0d040d03 0d040d04 0d050d05 0d060d05     ................
   22b88:	0d060d06 0d070d07 0d080d07 0d080d08     ................
   22b98:	0d090d09 0d0a0d09 0d0a0d0a 0e0b0d0b     ................
   22ba8:	0e0c0e0b 0e0c0e0c 0e0d0e0d 0e0e0e0d     ................
   22bb8:	0e0e0e0e 0e0f0e0f 0e100e0f 0e110e10     ................
   22bc8:	0e110e11 0e120e12 0e120e12 0e130e13     ................
   22bd8:	0e140e13 0e140e14 0e150e15 0e160e15     ................
   22be8:	0f170e16 0f170f17 0f180f18 0f190f19     ................
   22bf8:	0f1a0f19 101b0f1a 101b101b 101c101b     ................
   22c08:	101c101c 101d101d 101d101d 101e101e     ................
   22c18:	101f101e 101f101f 1020101f 10201020     .......... . . .
   22c28:	10201020 10201020 10201020 10201020      . . . . . . . .
   22c38:	0f200f20 0f200f20 0f200f20 0f200f20      . . . . . . . .
   22c48:	0f200f20 0f200f20 0d000d00 0d000d00      . . . .........
   22c58:	0d010d01 0d020d01 0d020d02 0d030d03     ................
   22c68:	0d040d03 0d040d04 0d050d05 0d060d05     ................
   22c78:	0d060d06 0e070d07 0e080e07 0e080e08     ................
   22c88:	0e090e09 0e0a0e09 0e0a0e0a 0e0b0e0b     ................
   22c98:	0e0c0e0b 0e0c0e0c 0e0d0e0d 0e0e0e0e     ................
   22ca8:	0e0f0e0e 0e0f0e0f 0e100e10 0e110e10     ................
   22cb8:	0e110e11 0e120e12 0e130e12 0e130e13     ................
   22cc8:	0e140e14 0e150e14 0f150e15 0f160f16     ................
   22cd8:	0f170f16 0f180f17 0f180f18 0f190f19     ................
   22ce8:	101a101a 101a101a 101b101b 101c101b     ................
   22cf8:	101c101c 101d101c 101d101d 101e101e     ................
   22d08:	101e101e 101f101f 1020101f 10201020     .......... . . .
   22d18:	10201020 10201020 10201020 10201020      . . . . . . . .
   22d28:	10201020 0f200f20 0f200f20 0f200f20      . . . . . . . .
   22d38:	0f200f20 0f200f20 0d000d00 0d000d00      . . . .........
   22d48:	0d010d01 0e020d01 0e020e02 0e030e03     ................
   22d58:	0e040e03 0e040e04 0e050e05 0e060e05     ................
   22d68:	0e060e06 0e070e07 0e080e07 0e080e08     ................
   22d78:	0e090e09 0e0a0e09 0e0a0e0a 0e0b0e0b     ................
   22d88:	0e0c0e0b 0e0d0e0c 0e0d0e0d 0e0e0e0e     ................
   22d98:	0e0f0e0e 0e0f0e0f 0e100e10 0e110e10     ................
   22da8:	0e110e11 0e120e12 0f130e12 0f130f13     ................
   22db8:	0f140f14 0f150f14 0f150f15 0f160f16     ................
   22dc8:	0f170f17 0f180f17 10190f18 10191019     ................
   22dd8:	101a1019 101a101a 101b101b 101b101b     ................
   22de8:	101c101c 101d101c 101d101d 101e101d     ................
   22df8:	101e101e 101f101f 1020101f 10201020     .......... . . .
   22e08:	10201020 10201020 10201020 10201020      . . . . . . . .
   22e18:	10201020 10201020 0f200f20 0f200f20      . . . . . . . .
   22e28:	0f200f20 0f200f20 0e000e00 0e000e00      . . . .........
   22e38:	0e010e01 0e020e01 0e020e02 0e030e03     ................
   22e48:	0e040e03 0e040e04 0e050e05 0e060e05     ................
   22e58:	0e060e06 0e070e07 0e080e07 0e090e08     ................
   22e68:	0e090e09 0e0a0e0a 0e0b0e0a 0e0b0e0b     ................
   22e78:	0e0c0e0c 0e0d0e0c 0e0d0e0d 0e0e0e0e     ................
   22e88:	0e0f0e0e 0e0f0e0f 0f100e10 0f110f10     ................
   22e98:	0f110f11 0f120f12 0f130f13 0f140f13     ................
   22ea8:	0f140f14 0f150f15 0f160f15 0f160f16     ................
   22eb8:	0f170f17 10180f18 10181018 10191019     ................
   22ec8:	101a1019 101a101a 101b101a 101b101b     ................
   22ed8:	101c101c 101d101c 101d101d 101e101d     ................
   22ee8:	101e101e 101f101f 101f101f 10201020     ............ . .
   22ef8:	10201020 10201020 10201020 10201020      . . . . . . . .
   22f08:	10201020 10201020 10201020 0f201020      . . . . . . . .
   22f18:	0f200f20 0f200f20 0e000e00 0e000e00      . . . .........
   22f28:	0e010e01 0e020e01 0e020e02 0e030e03     ................
   22f38:	0e040e03 0e040e04 0e050e05 0e060e05     ................
   22f48:	0e070e06 0e070e07 0e080e08 0e090e08     ................
   22f58:	0e090e09 0e0a0e0a 0e0b0e0a 0e0b0e0b     ................
   22f68:	0e0c0e0c 0e0d0e0c 0e0d0e0d 0f0e0e0e     ................
   22f78:	0f0f0f0e 0f100f0f 0f100f10 0f110f11     ................
   22f88:	0f120f11 0f120f12 0f130f13 0f140f13     ................
   22f98:	0f140f14 0f150f15 0f160f15 0f170f16     ................
   22fa8:	10171017 10181017 10181018 10191019     ................
   22fb8:	10191019 101a101a 101b101a 101b101b     ................
   22fc8:	101c101c 101c101c 101d101d 101e101d     ................
   22fd8:	101e101e 101f101e 101f101f 10201020     ............ . .
   22fe8:	10201020 10201020 10201020 10201020      . . . . . . . .
   22ff8:	10201020 10201020 10201020 10201020      . . . . . . . .
   23008:	0f201020 0f200f20 0e000e00 0e000e00      . . . .........
   23018:	0e010e01 0e020e01 0e020e02 0e030e03     ................
   23028:	0e040e03 0e040e04 0e050e05 0e060e06     ................
   23038:	0e070e06 0e070e07 0e080e08 0e090e08     ................
   23048:	0e090e09 0e0a0e0a 0e0b0e0a 0e0b0e0b     ................
   23058:	0f0c0f0c 0f0d0f0c 0f0d0f0d 0f0e0f0e     ................
   23068:	0f0f0f0f 0f100f0f 0f100f10 0f110f11     ................
   23078:	0f120f11 0f120f12 0f130f13 0f140f13     ................
   23088:	0f140f14 0f150f15 10160f16 10161016     ................
   23098:	10171017 10181017 10181018 10191019     ................
   230a8:	10191019 101a101a 101b101a 101b101b     ................
   230b8:	101c101b 101c101c 101d101d 101d101d     ................
   230c8:	101e101e 101f101e 101f101f 1020101f     .............. .
   230d8:	10201020 10201020 10201020 10201020      . . . . . . . .
   230e8:	10201020 10201020 10201020 10201020      . . . . . . . .
   230f8:	10201020 0f201020 0e000e00 0e000e00      . . . .........
   23108:	0e010e01 0e020e01 0e020e02 0e030e03     ................
   23118:	0e040e03 0e040e04 0e050e05 0e060e06     ................
   23128:	0e070e06 0e070e07 0e080e08 0e090e08     ................
   23138:	0f090f09 0f0a0f0a 0f0b0f0a 0f0b0f0b     ................
   23148:	0f0c0f0c 0f0d0f0c 0f0e0f0d 0f0e0f0e     ................
   23158:	0f0f0f0f 0f100f0f 0f100f10 0f110f11     ................
   23168:	0f120f11 0f120f12 0f130f13 0f140f14     ................
   23178:	0f150f14 10151015 10161016 10161016     ................
   23188:	10171017 10181017 10181018 10191018     ................
   23198:	10191019 101a101a 101a101a 101b101b     ................
   231a8:	101c101b 101c101c 101d101c 101d101d     ................
   231b8:	101e101e 101f101e 101f101f 1020101f     .............. .
   231c8:	10201020 10201020 10201020 10201020      . . . . . . . .
   231d8:	10201020 10201020 10201020 10201020      . . . . . . . .
   231e8:	10201020 10201020 0e000e00 0e000e00      . . . .........
   231f8:	0e010e01 0e020e01 0e020e02 0f030e03     ................
   23208:	0f040f03 0f050f04 0f050f05 0f060f06     ................
   23218:	0f070f06 0f070f07 0f080f08 0f090f08     ................
   23228:	0f090f09 0f0a0f0a 0f0b0f0a 0f0c0f0b     ................
   23238:	0f0c0f0c 0f0d0f0d 0f0e0f0d 0f0e0f0e     ................
   23248:	0f0f0f0f 0f100f0f 0f100f10 0f110f11     ................
   23258:	0f120f11 0f130f12 10131013 10141014     ................
   23268:	10151014 10151015 10161015 10161016     ................
   23278:	10171017 10171017 10181018 10191018     ................
   23288:	10191019 101a1019 101a101a 101b101b     ................
   23298:	101c101b 101c101c 101d101c 101d101d     ................
   232a8:	101e101e 101e101e 101f101f 1020101f     .............. .
   232b8:	10201020 10201020 10201020 10201020      . . . . . . . .
   232c8:	10201020 10201020 10201020 10201020      . . . . . . . .
   232d8:	10201020 10201020 0f000f00 0f000f00      . . . .........
   232e8:	0f010f01 0f020f01 0f020f02 0f030f03     ................
   232f8:	0f040f03 0f050f04 0f050f05 0f060f06     ................
   23308:	0f070f06 0f070f07 0f080f08 0f090f08     ................
   23318:	0f090f09 0f0a0f0a 0f0b0f0b 0f0c0f0b     ................
   23328:	0f0c0f0c 0f0d0f0d 0f0e0f0d 0f0e0f0e     ................
   23338:	0f0f0f0f 0f100f0f 0f110f10 10111011     ................
   23348:	10121012 10131012 10131013 10141014     ................
   23358:	10141014 10151015 10161015 10161016     ................
   23368:	10171016 10171017 10181018 10181018     ................
   23378:	10191019 101a1019 101a101a 101b101b     ................
   23388:	101b101b 101c101c 101d101c 101d101d     ................
   23398:	101e101d 101e101e 101f101f 101f101f     ................
   233a8:	10201020 10201020 10201020 10201020      . . . . . . . .
   233b8:	10201020 10201020 10201020 10201020      . . . . . . . .
   233c8:	10201020 10201020 0f000f00 0f000f00      . . . .........
   233d8:	0f010f01 0f020f01 0f020f02 0f030f03     ................
   233e8:	0f040f03 0f050f04 0f050f05 0f060f06     ................
   233f8:	0f070f06 0f070f07 0f080f08 0f090f08     ................
   23408:	0f0a0f09 0f0a0f0a 0f0b0f0b 0f0c0f0b     ................
   23418:	0f0c0f0c 0f0d0f0d 0f0e0f0d 0f0e0f0e     ................
   23428:	100f100f 1010100f 10101010 10111011     ................
   23438:	10121011 10121012 10131013 10141013     ................
   23448:	10141014 10151015 10151015 10161016     ................
   23458:	10171016 10171017 10181018 10181018     ................
   23468:	10191019 101a1019 101a101a 101b101a     ................
   23478:	101b101b 101c101c 101c101c 101d101d     ................
   23488:	101e101d 101e101e 101f101e 101f101f     ................
   23498:	10201020 10201020 10201020 10201020      . . . . . . . .
   234a8:	10201020 10201020 10201020 10201020      . . . . . . . .
   234b8:	10201020 10201020 0f000f00 0f000f00      . . . .........
   234c8:	0f010f01 0f020f01 0f020f02 0f030f03     ................
   234d8:	0f040f03 0f050f04 0f050f05 0f060f06     ................
   234e8:	0f070f06 0f070f07 0f080f08 0f090f09     ................
   234f8:	0f0a0f09 0f0a0f0a 0f0b0f0b 0f0c0f0b     ................
   23508:	0f0c0f0c 100d100d 100e100d 100e100e     ................
   23518:	100f100f 1010100f 10101010 10111011     ................
   23528:	10121011 10121012 10131013 10141013     ................
   23538:	10141014 10151015 10151015 10161016     ................
   23548:	10171016 10171017 10181017 10181018     ................
   23558:	10191019 10191019 101a101a 101b101a     ................
   23568:	101b101b 101c101b 101c101c 101d101d     ................
   23578:	101e101d 101e101e 101f101e 101f101f     ................
   23588:	10201020 10201020 10201020 10201020      . . . . . . . .
   23598:	10201020 10201020 10201020 10201020      . . . . . . . .
   235a8:	10201020 10201020 0f000f00 0f000f00      . . . .........
   235b8:	0f010f01 0f020f01 0f020f02 0f030f03     ................
   235c8:	0f040f03 0f050f04 0f050f05 0f060f06     ................
   235d8:	0f070f06 0f070f07 0f080f08 0f090f09     ................
   235e8:	0f0a0f09 0f0a0f0a 100b100b 100c100b     ................
   235f8:	100c100c 100d100d 100e100d 100e100e     ................
   23608:	100f100f 1010100f 10101010 10111011     ................
   23618:	10121011 10121012 10131013 10141013     ................
   23628:	10141014 10151015 10151015 10161016     ................
   23638:	10161016 10171017 10181017 10181018     ................
   23648:	10191018 10191019 101a101a 101a101a     ................
   23658:	101b101b 101c101b 101c101c 101d101d     ................
   23668:	101d101d 101e101e 101f101e 101f101f     ................
   23678:	1020101f 10201020 10201020 10201020     .. . . . . . . .
   23688:	10201020 10201020 10201020 10201020      . . . . . . . .
   23698:	10201020 10201020 0f000f00 0f000f00      . . . .........
   236a8:	0f010f01 0f020f01 0f020f02 0f030f03     ................
   236b8:	0f040f03 0f050f04 10051005 10061006     ................
   236c8:	10071006 10071007 10081008 10091009     ................
   236d8:	100a1009 100a100a 100b100b 100c100b     ................
   236e8:	100c100c 100d100d 100e100d 100e100e     ................
   236f8:	100f100f 1010100f 10101010 10111011     ................
   23708:	10121011 10121012 10131013 10141013     ................
   23718:	10141014 10151015 10151015 10161015     ................
   23728:	10161016 10171017 10171017 10181018     ................
   23738:	10191018 10191019 101a101a 101a101a     ................
   23748:	101b101b 101c101b 101c101c 101d101c     ................
   23758:	101d101d 101e101e 101e101e 101f101f     ................
   23768:	1020101f 10201020 10201020 10201020     .. . . . . . . .
   23778:	10201020 10201020 10201020 10201020      . . . . . . . .
   23788:	10201020 10201020 10001000 10001000      . . . .........
   23798:	10011001 10021001 10021002 10031003     ................
   237a8:	10041003 10051004 10051005 10061006     ................
   237b8:	10071006 10071007 10081008 10091009     ................
   237c8:	100a1009 100a100a 100b100b 100c100b     ................
   237d8:	100c100c 100d100d 100e100d 100e100e     ................
   237e8:	100f100f 1010100f 10101010 10111011     ................
   237f8:	10121011 10121012 10131013 10141013     ................
   23808:	10141014 10151015 10151015 10161015     ................
   23818:	10161016 10171017 10171017 10181018     ................
   23828:	10191018 10191019 101a1019 101a101a     ................
   23838:	101b101b 101b101b 101c101c 101d101c     ................
   23848:	101d101d 101e101d 101e101e 101f101f     ................
   23858:	1020101f 10201020 10201020 10201020     .. . . . . . . .
   23868:	10201020 10201020 10201020 10201020      . . . . . . . .
   23878:	10201020 10201020 10001000 10001000      . . . .........
   23888:	10011001 10021001 10021002 10031003     ................
   23898:	10041003 10051004 10051005 10061006     ................
   238a8:	10071006 10071007 10081008 10091009     ................
   238b8:	100a1009 100a100a 100b100b 100c100b     ................
   238c8:	100c100c 100d100d 100e100d 100e100e     ................
   238d8:	100f100f 1010100f 10101010 10111011     ................
   238e8:	10121011 10121012 10131013 10141013     ................
   238f8:	10141014 10151015 10151015 10161015     ................
   23908:	10161016 10171016 10171017 10181018     ................
   23918:	10181018 10191019 101a1019 101a101a     ................
   23928:	101b101a 101b101b 101c101c 101d101c     ................
   23938:	101d101d 101e101d 101e101e 101f101f     ................
   23948:	101f101f 10201020 10201020 10201020     .... . . . . . .
   23958:	10201020 10201020 10201020 10201020      . . . . . . . .
   23968:	10201020 10201020 10001000 10001000      . . . .........
   23978:	10011001 10021001 10021002 10031003     ................
   23988:	10041003 10051004 10051005 10061006     ................
   23998:	10071006 10071007 10081008 10091009     ................
   239a8:	100a1009 100a100a 100b100b 100c100b     ................
   239b8:	100c100c 100d100c 100d100d 100e100e     ................
   239c8:	100f100e 100f100f 10101010 10111010     ................
   239d8:	10111011 10121012 10131012 10131013     ................
   239e8:	10141014 10151014 10151015 10151015     ................
   239f8:	10161016 10171016 10171017 10181017     ................
   23a08:	10181018 10191019 10191019 101a101a     ................
   23a18:	101b101a 101b101b 101c101c 101c101c     ................
   23a28:	101d101d 101e101d 101e101e 101f101e     ................
   23a38:	101f101f 10201020 10201020 10201020     .... . . . . . .
   23a48:	10201020 10201020 10201020 10201020      . . . . . . . .
   23a58:	10201020 10201020 10001000 10001000      . . . .........
   23a68:	10011001 10021001 10021002 10031003     ................
   23a78:	10041003 10051004 10051005 10061006     ................
   23a88:	10071006 10071007 10081008 10091008     ................
   23a98:	100a1009 100a100a 100b100a 100b100b     ................
   23aa8:	100c100c 100d100c 100d100d 100e100e     ................
   23ab8:	100f100e 100f100f 10101010 10111010     ................
   23ac8:	10111011 10121012 10131012 10131013     ................
   23ad8:	10141014 10151014 10151015 10151015     ................
   23ae8:	10161016 10161016 10171017 10181017     ................
   23af8:	10181018 10191019 10191019 101a101a     ................
   23b08:	101b101a 101b101b 101c101b 101c101c     ................
   23b18:	101d101d 101d101d 101e101e 101f101e     ................
   23b28:	101f101f 1020101f 10201020 10201020     ...... . . . . .
   23b38:	10201020 10201020 10201020 10201020      . . . . . . . .
   23b48:	10201020 10201020 10001000 10001000      . . . .........
   23b58:	10011000 10021001 10021002 10031003     ................
   23b68:	10041003 10041004 10051005 10061006     ................
   23b78:	10071006 10071007 10081008 10091008     ................
   23b88:	100a1009 100a100a 100b100a 100b100b     ................
   23b98:	100c100c 100d100c 100d100d 100e100e     ................
   23ba8:	100f100e 100f100f 10101010 10111010     ................
   23bb8:	10111011 10121012 10131012 10131013     ................
   23bc8:	10141014 10151014 10151015 10151015     ................
   23bd8:	10161015 10161016 10171017 10181017     ................
   23be8:	10181018 10191018 10191019 101a101a     ................
   23bf8:	101a101a 101b101b 101c101b 101c101c     ................
   23c08:	101d101c 101d101d 101e101e 101f101e     ................
   23c18:	101f101f 1020101f 10201020 10201020     ...... . . . . .
   23c28:	10201020 10201020 10201020 10201020      . . . . . . . .
   23c38:	10201020 10201020                        . . . .

00023c40 <_ZN3app5chip823PHYSICAL_TO_VIRTUAL_MAP17h5b1a7b084f35e873E>:
   23c40:	0001de80 06040000 06080005 060c0009     ................
   23c50:	0610000d 06150011 06190016 061d001a     ................
   23c60:	0621001d 06240021 06280025 062d002a     ..!.!.$.%.(.*.-.
   23c70:	0631002e 06340031 06380035 063c0038     ..1.1.4.5.8.8.<.
   23c80:	0640003c 06440040 06470043 064b0047     <.@.@.D.C.G.G.K.
   23c90:	064f004a 0652004d 06560051 065a0055     J.O.M.R.Q.V.U.Z.
   23ca0:	055d0058 0560005c 0563005f 05660063     X.].\.`._.c.c.f.
   23cb0:	056a0066 056d006a 0470006e 04740071     f.j.j.m.n.p.q.t.
   23cc0:	04770074 0c040700 0c080705 0c0c0709     t.w.............
   23cd0:	0c10070d 0c150711 0c190716 0c1c0719     ................
   23ce0:	0c20071d 0c240721 0c280725 0c2d072a     .. .!.$.%.(.*.-.
   23cf0:	0c30072d 0c340731 0c380735 0b3b0738     -.0.1.4.5.8.8.;.
   23d00:	0b40073c 0b430740 0b470744 0b4b0748     <.@.@.C.D.G.H.K.
   23d10:	0b4e074b 0b52074f 0b560752 0b590657     K.N.O.R.R.V.W.Y.
   23d20:	0b5c065a 0a60065d 0a630660 0a660663     Z.\.].`.`.c.c.f.
   23d30:	0a6a0667 096d056b 0970056e 09730571     g.j.k.m.n.p.q.s.
   23d40:	09770574 13040d00 12080d05 120c0d09     t.w.............
   23d50:	12100d0d 12150d11 12180d15 121c0d19     ................
   23d60:	12200d1d 12240d21 12280d25 122c0d28     .. .!.$.%.(.(.,.
   23d70:	12300d2d 12340d31 12370c34 113b0c38     -.0.1.4.4.7.8.;.
   23d80:	113f0c3c 11430c40 11470c44 114a0c47     <.?.@.C.D.G.G.J.
   23d90:	114e0c4b 11510c4e 10560c52 10590c56     K.N.N.Q.R.V.V.Y.
   23da0:	105c0b5a 0f5f0b5d 0f620b60 0f660b63     Z.\.]._.`.b.c.f.
   23db0:	0f6a0a66 0e6d0a6b 0e700a6e 0e730a71     f.j.k.m.n.p.q.s.
   23dc0:	0d760a74 1a041500 1a081305 1a0c1309     t.v.............
   23dd0:	1a10130d 1a131310 1a181315 1a1c1319     ................
   23de0:	1920131d 19231320 19271324 192c1328     .. . .#.$.'.(.,.
   23df0:	1930132d 19331330 19371234 183a1238     -.0.0.3.4.7.8.:.
   23e00:	183f123b 18431240 18461243 174a1247     ;.?.@.C.C.F.G.J.
   23e10:	174d124b 1751114e 17551152 17591156     K.M.N.Q.R.U.V.Y.
   23e20:	165c1159 165f105c 15621060 15651063     Y.\.\._.`.b.c.e.
   23e30:	156a0f66 136d0f6a 13700f6d 12730f71     f.j.j.m.m.p.q.s.
   23e40:	12760e74 20041b00 20081b05 200c1b09     t.v.... ... ... 
   23e50:	200f1b0d 20131b10 20181b15 201c1a19     ... ... ... ... 
   23e60:	201f1a1c 20231a20 20271a24 1f2c1a28     ...  .# $.' (.,.
   23e70:	1f2f1a2c 1f331a30 1f361933 1e3a1937     ,./.0.3.3.6.7.:.
   23e80:	1e3f193b 1e42193f 1e461943 1d491846     ;.?.?.B.C.F.F.I.
   23e90:	1d4d184a 1d51184e 1c551851 1c581756     J.M.N.Q.Q.U.V.X.
   23ea0:	1b5b1759 1b5f165c 1a62165f 1a651662     Y.[.\._._.b.b.e.
   23eb0:	1a691565 196c156a 1970156d 18731370     e.i.j.l.m.p.p.s.
   23ec0:	18761374 26042100 26082105 260c2109     t.v..!.&.!.&.!.&
   23ed0:	260f210c 26132110 26182115 261b2118     .!.&.!.&.!.&.!.&
   23ee0:	261f211c 26232120 26272023 252b2027     .!.& !#&# '&' +%
   23ef0:	252f202c 2532202f 25362033 25391f36     , /%/ 2%3 6%6.9%
   23f00:	243d1f3a 24421f3d 24451e42 23491e46     :.=$=.B$B.E$F.I#
   23f10:	234d1e49 23501d4d 22551d51 21581c55     I.M#M.P#Q.U"U.X!
   23f20:	215b1c58 205e1c5b 20611b5e 1f641b61     X.[![.^ ^.a a.d.
   23f30:	1f671a64 1e6c1a69 1e6f196c 1d72196f     d.g.i.l.l.o.o.r.
   23f40:	1d761973 2e042700 2d082705 2d0b2709     s.v..'...'.-.'.-
   23f50:	2d0f270c 2d132710 2d172713 2d1b2718     .'.-.'.-.'.-.'.-
   23f60:	2d1f271b 2d22271f 2c262623 2c2b2626     .'.-.'"-#&&,&&+,
   23f70:	2c2e262b 2c32262e 2c352632 2c392535     +&.,.&2,2&5,5%9,
   23f80:	2c3c2539 2b41253d 2b442541 2b482445     9%<,=%A+A%D+E$H+
   23f90:	2b4c2448 2a4f244c 2a52234f 28572252     H$L+L$O*O#R*R"W(
   23fa0:	275a2157 265d215a 2560205d 24632060     W!Z'Z!]&] `%` c$
   23fb0:	24671f63 236b1f67 236e1e6b 22711e6e     c.g$g.k#k.n#n.q"
   23fc0:	22751d71 34042f00 34082e05 330b2e08     q.u"./.4...4...3
   23fd0:	330f2e0c 33122e0f 33172e13 331a2e17     ...3...3...3...3
   23fe0:	331e2e1b 33222d1e 32252d22 322a2d26     ...3.-"3"-%2&-*2
   23ff0:	322d2d2a 32312d2e 32342d31 32382d35     *--2.-121-425-82
   24000:	323b2c38 32402c3b 31432c40 31472c44     8,;2;,@2@,C1D,G1
   24010:	314b2b47 314e2b4a 30512a4e 2f552851     G+K1J+N1N*Q0Q(U/
   24020:	2e592755 2d5c2659 2c5f255c 2b62255f     U'Y.Y&\-\%_,_%b+
   24030:	2a652462 28692465 286d2369 2770236c     b$e*e$i(i#m(l#p'
   24040:	27732270 3a043500 3a073505 3a0b3408     p"s'.5.:.5.:.4.:
   24050:	390e340c 3912340f 39163413 391a3417     .4.9.4.9.4.9.4.9
   24060:	391d341a 3821331e 38243321 38283325     .4.9.3!8!3$8%3(8
   24070:	382c3328 3830332d 38333330 38373334     (3,8-30803384378
   24080:	383a3337 383f323b 3842323f 38463243     73:8;2?8?2B8C2F8
   24090:	37493246 374d314a 3650304d 36543050     F2I7J1M7M0P6P0T6
   240a0:	34572e54 335a2d57 325e2c5a 31612b5d     T.W4W-Z3Z,^2]+a1
   240b0:	30642a60 2f672a64 2e6b2867 2d6e286b     `*d0d*g/g(k.k(n-
   240c0:	2c72276e 41043b00 41073b05 410b3a08     n'r,.;.A.;.A.:.A
   240d0:	400e3a0b 40113a0f 40163a12 40193a16     .:.@.:.@.:.@.:.@
   240e0:	401d3a1a 3f20391d 3f243921 3f273924     .:.@.9 ?!9$?$9'?
   240f0:	3f2c3928 3f2f392c 3f32392f 3f363933     (9,?,9/?/92?396?
   24100:	3f393936 3d3d393a 3d41393d 3f453842     699?:9===9A=B8E?
   24110:	3f483845 3f4c3848 3d4f374c 3c52364f     E8H?H8L?L7O=O6R<
   24120:	3b563552 39593356 385c3259 375f315c     R5V;V3Y9Y2\8\1_7
   24130:	3562305f 34662f62 336a2e65 326d2e6a     _0b5b/f4e.j3j.m2
   24140:	31702d6d 47044200 47074205 470a4208     m-p1.B.G.B.G.B.G
   24150:	460e410b 4611410e 46154112 46194116     .A.F.A.F.A.F.A.F
   24160:	451c4019 4520401d 45234020 45264023     .@.E.@ E @#E#@&E
   24170:	442b4027 442e402b 4431402e 44354031     '@+D+@.D.@1D1@5D
   24180:	44383f35 443c3f38 44403f3b 44443f40     5?8D8?<D;?@D@?DD
   24190:	44474044 444b3f47 444e3f4b 43513c4e     D@GDG?KDK?NDN<QC
   241a0:	41553b51 40583955 3f5b3857 3c5e375b     Q;UAU9X@W8[?[7^<
   241b0:	3b61365e 3a643561 39673464 386b3367     ^6a;a5d:d4g9g3k8
   241c0:	376f326b 4c044800 4c074804 4c0a4708     k2o7.H.L.H.L.G.L
   241d0:	4c0d470b 4b11470e 4b154711 4b184615     .G.L.G.K.G.K.F.K
   241e0:	4b1b4618 4b1f461c 4a22461f 4a254622     .F.K.F.K.F"J"F%J
   241f0:	4a2a4525 492d452a 4930452d 49334530     %E*J*E-I-E0I0E3I
   24200:	49374533 493a4536 493f453a 4942453d     3E7I6E:I:E?I=EBI
   24210:	49464542 49494545 484c4549 484f444c     BEFIEEIIIELHLDOH
   24220:	4752424f 45564052 44593f56 435c3d59     OBRGR@VEV?YDY=\C
   24230:	415f3b5c 40623a5f 3f653962 3d6a3865     \;_A_:b@b9e?e8j=
   24240:	3c6d3769 52034d00 51074d04 510a4d07     i7m<.M.R.M.Q.M.Q
   24250:	510d4d0a 51104c0d 51134c10 50174c15     .M.Q.L.Q.L.Q.L.P
   24260:	501a4c18 501e4b1b 50214b1e 4f244b21     .L.P.K.P.K!P!K$O
   24270:	4f274b24 4f2c4a27 4e2f4a2b 4e324a2e     $K'O'J,O+J/N.J2N
   24280:	4e354a32 4e384a35 4d3c4a38 4d404a3c     2J5N5J8N8J<M<J@M
   24290:	4d444a40 4d474a43 4d4a4946 4c4d484a     @JDMCJGMFIJMJHML
   242a0:	4b50474d 4a554550 49574554 485a4357     MGPKPEUJTEWIWCZH
   242b0:	465e415a 4560415d 44633f60 43673d63     ZA^F]A`E`?cDc=gC
   242c0:	416b3c66 58035200 58065204 57095207     f<kA.R.X.R.X.R.W
   242d0:	570c520a 570f520d 57125210 57175113     .R.W.R.W.R.W.Q.W
   242e0:	571a5117 561d511a 5620511d 56235020     .Q.W.Q.V.Q V P#V
   242f0:	56265023 552a4f26 552d4f2a 54304f2d     #P&V&O*U*O-U-O0T
   24300:	54334f30 54374e33 523a4e36 523d4e3a     0O3T3N7T6N:R:N=R
   24310:	52424e3d 52454e41 51484d44 514b4d47     =NBRANERDMHQGMKQ
   24320:	4f4e4c4b 4e514b4e 4d554951 4c584855     KLNONKQNQIUMUHXL
   24330:	4b5b4758 4a5f455b 4961445e 47644361     XG[K[E_J^DaIaCdG
   24340:	46674264 5d035900 5d065904 5d095807     dBgF.Y.].Y.].X.]
   24350:	5d0c580a 5c0f580d 5c125810 5c165812     .X.].X.\.X.\.X.\
   24360:	5c195716 5c1c5719 5c1f571c 5b22571f     .W.\.W.\.W.\.W"[
   24370:	5b255622 5a285625 5a2c5528 5a2f552c     "V%[%V(Z(U,Z,U/Z
   24380:	5932552f 59355432 58385435 583b5438     /U2Y2T5Y5T8X8T;X
   24390:	573f543b 5743523f 57465242 56495146     ;T?W?RCWBRFWFQIV
   243a0:	554c5049 544f4f4c 52544d4f 51564d52     IPLULOOTOMTRRMVQ
   243b0:	4f594c56 4e5c4a59 4d5f495c 4c62485f     VLYOYJ\N\I_M_HbL
   243c0:	4b664662 62035e00 62065e04 62095e07     bFfK.^.b.^.b.^.b
   243d0:	620c5d0a 620e5d0d 62115d0f 61155d12     .].b.].b.].b.].a
   243e0:	61185d16 611b5d19 611e5c1b 61215c1e     .].a.].a.\.a.\!a
   243f0:	60245c21 60275b24 5f2b5b27 5f2e5a2b     !\$`$['`'[+_+Z._
   24400:	5e305a2e 5e345931 5e375933 5d395937     .Z0^1Y4^3Y7^7Y9]
   24410:	5d3d5839 5c41583c 5c445740 5b475743     9X=]<XA\@WD\CWG[
   24420:	5a4a5546 594d5449 5750524d 56545150     FUJZITMYMRPWPQTV
   24430:	55575054 545a4f57 525e4d5a 51604d5d     TPWUWOZTZM^R]M`Q
   24440:	4f634b60                                `KcO

00024444 <_ZN3app5chip823VIRTUAL_TO_PHYSICAL_MAP17h0c964d4301637332E>:
   24444:	00023c44 74737552 756f7420 73206863     D<..Rust touch s
   24454:	6f736e65 00000a72 00000000 0002445c     ensor.......\D..
   24464:	65737361 6f697472 6166206e 64656c69     assertion failed
   24474:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   24484:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   24494:	67697220 203a7468 203a6060 00024464      right: ``: dD..
   244a4:	0000002d 00024491 0000000c 0002449d     -....D.......D..
   244b4:	00000003 000244a0 20515249 74696e69     .....D..IRQ init
   244c4:	69616620 0000006c 000244bc 0000000d      fail....D......
   244d4:	000244cc 000244d8 74737572 7070612f     .D...D..rust/app
   244e4:	6372732f 756f742f 735f6863 6f736e65     /src/touch_senso
   244f4:	73722e72 000244dc 0000001c 0000003f     r.rs.D......?...
   24504:	00000005 20633269 72646461 000244dc     ....i2c addr.D..
   24514:	0000001c 0000004b 00000011 63756f74     ....K.......touc
   24524:	74616468 61662061 00006c69 000244dc     hdata fail...D..
   24534:	0000001c 00000056 00000009 000244dc     ....V........D..
   24544:	0000001c 0000005a 00000031 64616572     ....Z...1...read
   24554:	756f7420 61646863 66206174 006c6961      touchdata fail.
   24564:	000244dc 0000001c 00000089 00000005     .D..............
   24574:	000244dc 0000001c 00000095 00000037     .D..........7...
	...

00024590 <str.0>:
   24590:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   245a0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   245b0:	00000077 000244dc 0000001c 00000095     w....D..........
   245c0:	00000024 00000000 00000000 00000000     $...............

000245d0 <str.1>:
   245d0:	65747461 2074706d 61206f74 77206464     attempt to add w
   245e0:	20687469 7265766f 776f6c66 000244dc     ith overflow.D..
   245f0:	0000001c 00000095 00000020 000244dc     ........ ....D..
   24600:	0000001c 00000099 00000009 000244dc     .............D..
   24610:	0000001c 0000009a 00000037 000244dc     ........7....D..
   24620:	0000001c 0000009a 00000023 000244dc     ........#....D..
   24630:	0000001c 0000009a 0000001f 000244dc     .............D..
   24640:	0000001c 0000009b 00000037 000244dc     ........7....D..
   24650:	0000001c 0000009b 00000023 000244dc     ........#....D..
   24660:	0000001c 0000009b 0000001f 000244dc     .............D..
   24670:	0000001c 0000009c 00000009 000244dc     .............D..
   24680:	0000001c 0000009e 00000037 000244dc     ........7....D..
   24690:	0000001c 0000009e 00000023 000244dc     ........#....D..
   246a0:	0000001c 0000009e 0000001f 000244dc     .............D..
   246b0:	0000001c 0000009f 00000037 000244dc     ........7....D..
   246c0:	0000001c 0000009f 00000023 000244dc     ........#....D..
   246d0:	0000001c 0000009f 0000001f 000244dc     .............D..
   246e0:	0000001c 000000a0 00000009 000244dc     .............D..
   246f0:	0000001c 000000a4 00000030 000244dc     ........0....D..
   24700:	0000001c 000000a4 0000001a 000244dc     .............D..
   24710:	0000001c 000000a4 00000016 000244dc     .............D..
   24720:	0000001c 000000a3 00000009 000244dc     .............D..
   24730:	0000001c 000000a6 00000030 000244dc     ........0....D..
   24740:	0000001c 000000a6 0000001a 000244dc     .............D..
   24750:	0000001c 000000a6 00000016 000244dc     .............D..
   24760:	0000001c 000000a5 00000009 000244dc     .............D..
   24770:	0000001c 000000aa 0000002d 000244dc     ........-....D..
   24780:	0000001c 000000aa 0000001a 000244dc     .............D..
   24790:	0000001c 000000aa 00000016 000244dc     .............D..
   247a0:	0000001c 000000a9 00000009 000244dc     .............D..
   247b0:	0000001c 000000ac 0000002d 000244dc     ........-....D..
   247c0:	0000001c 000000ac 0000001a 000244dc     .............D..
   247d0:	0000001c 000000ac 00000016 000244dc     .............D..
   247e0:	0000001c 000000ab 00000009 000244dc     .............D..
   247f0:	0000001c 000000af 0000000d 000244dc     .............D..
   24800:	0000001c 000000af 0000002c 20633269     ........,...i2c 
   24810:	00667562 000244dc 0000001c 000000f1     buf..D..........
   24820:	00000005 000244dc 0000001c 000000f2     .....D..........
   24830:	0000000d 000244dc 0000001c 000000f2     .....D..........
   24840:	00000005 20633269 6c696166               ....i2c fail.

0002484d <_ZN8libchip87CHARBUF17h227c6d0d7e24574cE>:
   2484d:	909090f0 206020f0 10f07020 f0f080f0     ..... `  p......
   2485d:	f010f010 10f09090 f080f010 80f0f010     ................
   2486d:	f0f090f0 40402010 90f090f0 f090f0f0     ..... @@........
   2487d:	90f0f010 e09090f0 e090e090 808080f0     ................
   2488d:	9090e0f0 80f0e090 f0f080f0 8080f080     ................
   2489d:	72656874 73692065 206f6e20 68637573     there is no such
   248ad:	69687420 6120676e 6e612073 71636120      thing as an acq
   248bd:	65726975 6c65722f 65736165 616f6c20     uire/release loa
   248cd:	75722f64 2f637473 61376535 36363466     d/rustc/5e7af466
   248dd:	30386639 36663565 34313238 35306631     9f80e5f682141f05
   248ed:	33393130 37366261 64666139 31623462     0193ab679afdb4b1
   248fd:	6372732f 62696c2f 65726f63 63616d2f     /src/libcore/mac
   2490d:	2f736f72 2e646f6d ce007372 49000248     ros/mod.rs..H..I
   2491d:	0a000000 09000000 74000000 65726568     ...........there
   2492d:	20736920 73206f6e 20686375 6e696874      is no such thin
   2493d:	73612067 72206120 61656c65 6c206573     g as a release l
   2494d:	d764616f 0000011d 01000000 99000000     oad.............
   2495d:	a5000121 af000121 50000121 d7000249     !...!...!..PI...
   2496d:	0000011d 01000000 99000000 a5000121     ............!...
   2497d:	af000121                                 !...!..

00024984 <_ZN3log6logger3NOP17h5a3de47970f20990E>:
   24984:	00697073 0002445c 65737361 6f697472     spi.\D..assertio
   24994:	6166206e 64656c69 2860203a 7466656c     n failed: `(left
   249a4:	203d3d20 68676972 0a602974 656c2020      == right)`.  le
   249b4:	203a7466 0a2c6060 67697220 203a7468     ft: ``,. right: 
   249c4:	203a6060 0002498c 0000002d 000249b9     ``: .I..-....I..
   249d4:	0000000c 000249c5 00000003 000249c8     .....I.......I..
   249e4:	20697073 666e6f63 66206769 006c6961     spi config fail.
   249f4:	000249e4 0000000f 000249f4 00024a00     .I.......I...J..
   24a04:	74737572 6e796d2f 2f747765 2f637273     rust/mynewt/src/
   24a14:	2e697073 00007372 00024a04 00000016     spi.rs...J......
   24a24:	00000050 0000004a 20697073 66206263     P...J...spi cb f
   24a34:	006c6961 00024a2c 0000000b 00024a38     ail.,J......8J..
   24a44:	00024a04 00000016 00000057 00000005     .J......W.......
   24a54:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   24a64:	00024a54 0000000f 00024a64 00024a04     TJ......dJ...J..
   24a74:	00000016 0000005a 00000037 6f697067     ....Z...7...gpio
   24a84:	69616620 0000006c 00024a80 00000009      fail....J......
   24a94:	00024a8c 00024a04 00000016 0000005b     .J...J......[...
   24aa4:	00000040 00024a04 00000016 0000005c     @....J......\...
   24ab4:	00000040 6575716d 66206575 006c6961     @...mqueue fail.
   24ac4:	00024ab8 0000000b 00024ac4 00024a04     .J.......J...J..
   24ad4:	00000016 00000065 00000005 206d6573     ....e.......sem 
   24ae4:	6c696166 20697073 6c696166 00024ae0     failspi fail.J..
   24af4:	00000008 00024af0 00024a04 00000016     .....J...J......
   24b04:	00000069 00000005 00024a04 00000016     i........J......
   24b14:	0000006d 00000005 00000000 00024984     m............I..
   24b24:	00000004 00024b1c 6e657665 66207174     .....K..eventq f
   24b34:	006c6961 00024a04 00000016 00000081     ail..J..........
   24b44:	00000009 63206f6e 6220646d 00657479     ....no cmd byte.
   24b54:	00024a04 00000016 00000097 00000005     .J..............
   24b64:	00024a04 00000016 00000099 00000016     .J..............
	...

00024b80 <str.0>:
   24b80:	65747461 2074706d 61206f74 77206464     attempt to add w
   24b90:	20687469 7265766f 776f6c66 20697073     ith overflowspi 
   24ba0:	7265766f 776f6c66 00024a04 00000016     overflow.J......
   24bb0:	00000099 00000005 00024a04 00000016     .........J......
   24bc0:	000000a8 00000012 00024a04 00000016     .........J......
   24bd0:	000000c1 00000035 00000000 00000000     ....5...........

00024be0 <str.1>:
   24be0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   24bf0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   24c00:	00000077 00024a04 00000016 000000c4     w....J..........
   24c10:	0000000f 20746e69 20697073 6c696166     ....int spi fail
   24c20:	00024a04 00000016 00000101 00000011     .J..............
   24c30:	00024a04 00000016 00000111 00000015     .J..............

00024c40 <str.2>:
   24c40:	65747461 2074706d 73206f74 72746275     attempt to subtr
   24c50:	20746361 68746977 65766f20 6f6c6672     act with overflo
   24c60:	00000077 00024a04 00000016 0000010f     w....J..........
   24c70:	00000011 00024a04 00000016 00000117     .....J..........
   24c80:	00000011 00024a04 00000016 00000124     .....J......$...
   24c90:	00000009 20646162 20697073 006e656c     ....bad spi len.
   24ca0:	00024a04 00000016 0000012b 00000005     .J......+.......
   24cb0:	00024ae8 00000008 00024cb0 00024a04     .J.......L...J..
   24cc0:	00000016 00000141 00000009 00024a04     ....A........J..
   24cd0:	00000016 0000014a 00000009 00024a04     ....J........J..
   24ce0:	00000016 0000014e 00000030 00024a04     ....N...0....J..
   24cf0:	00000016 0000015a 00000005 00024a04     ....Z........J..
   24d00:	00000016 0000015f 00000017 0002445c     ...._.......\D..
   24d10:	65737361 6f697472 6166206e 64656c69     assertion failed
   24d20:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   24d30:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   24d40:	67697220 203a7468 203a6060 00024d10      right: ``: .M..
   24d50:	0000002d 00024d3d 0000000c 00024d49     -...=M......IM..
   24d60:	00000003 00024d4c 20697073 666e6f63     ....LM..spi conf
   24d70:	66206769 006c6961 00024d68 0000000f     ig fail.hM......
   24d80:	00024d78 00024d84 74737572 6e796d2f     xM...M..rust/myn
   24d90:	2f747765 2f637273 2e6c6168 00007372     ewt/src/hal.rs..
   24da0:	00024d88 00000016 00000016 00000009     .M..............
   24db0:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   24dc0:	00024db0 0000000f 00024dc0 00024d88     .M.......M...M..
   24dd0:	00000016 00000019 00000009 20697073     ............spi 
   24de0:	74696e69 69616620 0000006c 00024ddc     init fail....M..
   24df0:	0000000d 00024dec 00024d88 00000016     .....M...M......
   24e00:	0000001c 00000009 6f697067 69616620     ........gpio fai
   24e10:	0000006c 00024e08 00000009 00024e14     l....N.......N..
   24e20:	00024d88 00000016 00000045 00000009     .M......E.......
   24e30:	00024d88 00000016 0000006c 0000001b     .M......l.......

00024e40 <str.0>:
   24e40:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   24e50:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   24e60:	6c616377 2064656c 74704f60 3a6e6f69     wcalled `Option:
   24e70:	776e753a 28706172 6f206029 2061206e     :unwrap()` on a 
   24e80:	6e6f4e60 76206065 65756c61 00002928     `None` value()..
   24e90:	0000a593 00000000 00000001 000145eb     .............E..
   24ea0:	20697073 73756c66 61662068 552f6c69     spi flush fail/U
   24eb0:	73726573 70754c2f 502f7970 54656e69     sers/Luppy/PineT
   24ec0:	2f656d69 656e6970 656d6974 7375722d     ime/pinetime-rus
   24ed0:	796d2d74 7477656e 7375722f 74732f74     t-mynewt/rust/st
   24ee0:	35333737 64636c2d 7461622d 722d6863     7735-lcd-batch-r
   24ef0:	72732f73 696c2f63 73722e62 00024eae     s/src/lib.rs.N..
   24f00:	0000004e 000000fe 00000009 00024eae     N............N..
   24f10:	0000004e 000000f3 00000009 6573552f     N.........../Use
   24f20:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   24f30:	69676572 79727473 6372732f 7469672f     registry/src/git
   24f40:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   24f50:	65396264 33323863 6165682f 73656c70     db9ec823/heaples
   24f60:	2e302d73 2f312e35 2f637273 2e636576     s-0.5.1/src/vec.
   24f70:	00007372 00024f1c 00000056 00000066     rs...O..V...f...
   24f80:	00000009 00000000 00000000 00000000     ................

00024f90 <str.0>:
   24f90:	65747461 2074706d 61206f74 77206464     attempt to add w
   24fa0:	20687469 7265766f 776f6c66 00024f1c     ith overflow.O..
   24fb0:	00000056 0000003e 0000000c 00024f1c     V...>........O..
   24fc0:	00000056 0000007e 00000011 00000000     V...~...........

00024fd0 <str.1>:
   24fd0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   24fe0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   24ff0:	00000077 2f637273 6362696c 2f65726f     w...src/libcore/
   25000:	2f6d756e 32636564 2f746c66 66776172     num/dec2flt/rawf
   25010:	73722e70 65646e69 756f2078 666f2074     p.rsindex out of
   25020:	756f6220 3a73646e 65687420 6e656c20      bounds: the len
   25030:	20736920 00000000 00000020 00000008      is .... .......
   25040:	00000002 00000000 00000000 00000002     ................
   25050:	00000003 2f637273 6362696c 2f65726f     ....src/libcore/
   25060:	63696e75 2f65646f 6e697270 6c626174     unicode/printabl
   25070:	73722e65 00000000 00000020 00000004     e.rs.... .......
   25080:	00000002 00000000 00000002 00000000     ................
   25090:	00000003 00000000 00000020 00000008     ........ .......
   250a0:	00000002 00000000 00000001 00000001     ................
   250b0:	00000003 002e2e60 000250b5 00000002     ....`....P......
   250c0:	65726c61 20796461 72726f62 6465776f     already borrowed
   250d0:	68772029 73206e65 6963696c 6020676e     ) when slicing `
   250e0:	72616843 46797254 456d6f72 726f7272     CharTryFromError
   250f0:	6f636544 74556564 45363166 726f7272     DecodeUtf16Error

00025100 <_ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE>:
   25100:	00010201 00000000 00000000 00000000     ................
   25110:	72657469 20202020 2e2e202c 65757274     iter    , ..true
   25120:	72657449 203d3c20 61746164 646e696b     Iter <= datakind
   25130:	746e616d 73756c70 6f72655a 79706f43     mantplusZeroCopy
   25140:	7373654c 65646f63 65707954 656e6f44     LesscodeTypeDone
   25150:	72616843 6b636142 68746f42 6d657449     CharBackBothItem
   25160:	656c6966 656e696c 7466654c 6c696174     filelineLefttail
   25170:	656b6177 706f7264 32783875 32783869     wakedropu8x2i8x2
   25180:	34783875 34783869 38783875 38783869     u8x4i8x4u8x8i8x8
   25190:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   251a0:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   251b0:	656e6f4e 61762060 3a65756c 00000020     None` value: ...
   251c0:	00024ff4 00000000 000251bb 00000002     .O.......Q......
   251d0:	00015503 00000000 00000001 00015553     .U..........SU..
   251e0:	74756220 65687420 646e6920 69207865      but the index i
   251f0:	00002073 00025014 00000020 000251e0     s ...P.. ....Q..
   25200:	00000012 00015503 0000000c 00000004     .....U..........
   25210:	00015763 00015ab9 00015b69 202c0a2c     cW...Z..i[..,., 
   25220:	2c280a28 30783029 30313030 30333032     (.(,)0x000102030
   25230:	30353034 30373036 31393038 31313130     4050607080910111
   25240:	31333132 31353134 31373136 32393138     2131415161718192
   25250:	32313230 32333232 32353234 32373236     0212223242526272
   25260:	33393238 33313330 33333332 33353334     8293031323334353
   25270:	33373336 34393338 34313430 34333432     6373839404142434
   25280:	34353434 34373436 35393438 35313530     4454647484950515
   25290:	35333532 35353534 35373536 36393538     2535455565758596
   252a0:	36313630 36333632 36353634 36373636     0616263646566676
   252b0:	37393638 37313730 37333732 37353734     8697071727374757
   252c0:	37373736 38393738 38313830 38333832     6777879808182838
   252d0:	38353834 38373836 39393838 39313930     4858687888990919
   252e0:	39333932 39353934 39373936 00393938     293949596979899.
   252f0:	00015503 00000004 00000004 00015b8d     .U...........[..
   25300:	00015b93 00015b99 2f637273 6362696c     .[...[..src/libc
   25310:	2f65726f 2f746d66 2e646f6d 00007372     ore/fmt/mod.rs..
   25320:	00025308 00000016 0000043b 00000011     .S......;.......
   25330:	00025308 00000016 00000445 00000024     .S......E...$...
   25340:	2f637273 6362696c 2f65726f 63696c73     src/libcore/slic
   25350:	6f6d2f65 73722e64 65646e69 6f202078     e/mod.rsindex  o
   25360:	6f207475 61722066 2065676e 20726f66     ut of range for 
   25370:	63696c73 666f2065 6e656c20 20687467     slice of length 
   25380:	00025358 00000006 0002535e 00000022     XS......^S.."...
   25390:	00025340 00000018 00000a72 00000005     @S......r.......
   253a0:	63696c73 6e692065 20786564 72617473     slice index star
   253b0:	61207374 62202074 65207475 2073646e     ts at  but ends 
   253c0:	00207461 000253a0 00000016 000253b6     at ..S.......S..
   253d0:	0000000d 00025340 00000018 00000a78     ....@S......x...
   253e0:	00000005 696e6966 64656873 73796168     ....finishedhays
   253f0:	6b636174 79622820 20736574 6167654e     tack (bytes Nega
   25400:	65766974 69736f50 65766974 65746e69     tivePositiveinte
   25410:	6c617267 61706e55 64656b63 69666e49     gralUnpackedInfi
   25420:	6574696e 756e694d 77615273 7265764f     niteMinusRawOver
   25430:	776f6c66 6b636162 72657469 6f746e49     flowbackiterInto
   25440:	72657449 61636f6c 6e6f6974 61636f4c     IterlocationLoca
   25450:	6e6f6974 72616573 72656863 69736f70     tionsearcherposi
   25460:	6e6f6974 74697263 736f705f 656e694c     tioncrit_posLine
   25470:	796e4173 57776152 72656b61 6f6c6c41     sAnyRawWakerAllo
   25480:	72724563 38746e69 745f3478 2f637273     cErrint8x4_tsrc/
   25490:	6362696c 2f65726f 2f727473 2e646f6d     libcore/str/mod.
   254a0:	2e5b7372 625d2e2e 20657479 65646e69     rs[...]byte inde
   254b0:	69202078 756f2073 666f2074 756f6220     x  is out of bou
   254c0:	2073646e 6020666f 000254a7 0000000b     nds of `.T......
   254d0:	000254b2 00000016 000250b4 00000001     .T.......P......
   254e0:	0002548c 00000016 00000853 00000009     .T......S.......
   254f0:	69676562 3d3c206e 646e6520 00002820     begin <= end (..
   25500:	000254f0 0000000e 00025124 00000004     .T......$Q......
   25510:	000250d0 00000010 000250b4 00000001     .P.......P......
   25520:	0002548c 00000016 00000857 00000005     .T......W.......
   25530:	0002548c 00000016 00000868 0000000e     .T......h.......
   25540:	20736920 20746f6e 68632061 62207261      is not a char b
   25550:	646e756f 3b797261 20746920 69207369     oundary; it is i
   25560:	6469736e 20292065 6020666f 000254a7     nside ) of `.T..
   25570:	0000000b 00025540 00000026 000253f4     ....@U..&....S..
   25580:	00000008 00025566 00000006 000250b4     ....fU.......P..
   25590:	00000001 0002548c 00000016 0000086a     .....T......j...
   255a0:	00000005 00025054 00000020 0000001a     ....TP.. .......
   255b0:	00000028 05030100 03060605 08080607     (...............
   255c0:	1c0a1109 140c190b 0d0e120d 0310040f     ................
   255d0:	09131212 05170116 03190218 021c071a     ................
   255e0:	161f011d 042b0320 0b2d022c 0330012e     .... .+.,.-...0.
   255f0:	01320231 02a902a7 08ab04aa 05fb02fa     1.2.............
   25600:	03fe04fd 78ad09ff a28d8b79 8b585730     .......xy...0WX.
   25610:	1d1c908c 4b0f0edd 2efcfb4c 5d5c3f2f     .......KL.../?\]
   25620:	84e2b55f 92918e8d bbbab1a9 cac9c6c5     _...............
   25630:	ffe5e4de 12110400 37343129 493d3b3a     ........)147:;=I
   25640:	8e845d4a b4b1a992 cac6bbba e5e4cfce     J]..............
   25650:	0e0d0400 31291211 453b3a34 5e4a4946     ......)14:;EFIJ^
   25660:	91846564 cec99d9b 29110dcf 64574945     de.........)EIWd
   25670:	a9918d65 c5bbbab4 e5e4dfc9 110d04f0     e...............
   25680:	65644945 b2848180 d5bfbebc 83f1f0d7     EIde............
   25690:	a6a48b85 c7c5bfbe dbdacfce cdbd9848     ............H...
   256a0:	49cfcec6 59574f4e 8e895f5e b7b6b18f     ...INOWY^_......
   256b0:	c7c6c1bf 171611d7 f7f65c5b 0d80fffe     ........[\......
   256c0:	dfde716d 6e1f0f0e 5f1d1c6f afae7e7d     mq.....no.._}~..
   256d0:	16fabcbb 461f1e17 584f4e47 7e5e5c5a     .......FGNOXZ\^~
   256e0:	d4c5b57f f1f0dcd5 8f7372f5 97967574     .........rs.tu..
   256f0:	2e265f2f b7afa72f d7cfc7bf 97409adf     /_&./.........@.
   25700:	1f8f3098 ffcec1c0 5b5a4f4e 100f0807     .0......NOZ[....
   25710:	efee2f27 3d376f6e 9045423f 53fffe91     '/..no7=?BE....S
   25720:	c9c87567 d9d8d1d0 00fffee7 82225f20     gu.......... _".
   25730:	448204df 06041b08 0eac8111 1e35ab80     ...D..........5.
   25740:	03e08015 04010819 0434042f 07010307     ......../.4.....
   25750:	0a110706 07120f50 04020855 03090a1c     ....P...U.......
   25760:	03070308 03030302 0305040c 0e01060b     ................
   25770:	033a0515 05060711 07570710 0d150702     ..:.......W.....
   25780:	03430450 0401032d 0c0f0611 251d043a     P.C.-.......:..%
   25790:	046d205f c880256a 03b08205 fd82061a     _ m.j%..........
   257a0:	15075903 1409170b 6a0c140c 1a060a06     .Y.........j....
   257b0:	2b075906 2c0a4605 01040c04 2c0b3103     .Y.+.F.,.....1.,
   257c0:	0b061a04 06ac8003 411f060a 032d044c     ...........AL.-.
   257d0:	033c0874 073c030f 052b0838 1811ff82     t.<...<.8.+.....
   257e0:	2d112f08 21102003 048c800f 0b199782     ./.-. .!........
   257f0:	05948815 073b052f 09180e02 7430b080     ..../.;.......0t
   25800:	1ad6800c ff80050c 05b68005 c69b0c24     ............$...
   25810:	1030d20a 37038d84 145c8109 8008b880     ..0....7..\.....
   25820:	043530c7 0838060a 060c0846 031e0b74     .05...8.F...t...
   25830:	0959045a 1c188380 4809160a 068a8008     Z.Y........H....
   25840:	170ca4ab 04a13104 0726da81 8005050c     .....1....&.....
   25850:	6d8111a5 2a287810 80044c06 be80048d     ...m.x(*.L......
   25860:	0f031b03 0106000d 04010301 09080802     ................
   25870:	0b050a02 11011002 13051204 15021411     ................
   25880:	19021702 1d051c04 6a012408 bc026b03     .........$.j.k..
   25890:	d402d102 d609d50c da02d702 e105e001     ................
   258a0:	ee02e802 f904f020 0c02fa06 4e3e3b27     .... .......';>N
   258b0:	9e9e8f4f 0907069f 563e3d36 04d1d0f3     O.......6=>V....
   258c0:	37361814 35bd5756 12e0cfce 9e8e8987     ..67VW.5........
   258d0:	110e0d04 34312912 4946453a 644f4e4a     .....)14:EFIJNOd
   258e0:	b65c5a65 a81c1bb7 09d9d8a9 a8919037     eZ\.........7...
   258f0:	3e3b0a07 928f6966 efee5f6f 9b9a625a     ..;>fi..o_..Zb..
   25900:	9d552827 a4a3a1a0 baada8a7 0b06c4bc     '(U.............
   25910:	3a1d150c a651453f a0cdcca7 221a1907     ...:?EQ........"
   25920:	c53f3e25 232004c6 33282625 4a483a38     %>?... #%&(38:HJ
   25930:	5553504c 5c5a5856 6563605e 78736b66     LPSUVXZ\^`cefksx
   25940:	a48a7f7d c0b0afaa a3720cd0 6ecccba4     }.........r....n
   25950:	7b225e6f 2d040305 01046503 82802e2f     o^"{...-.e../...
   25960:	0f31031d 0924041c 052b051e 2a0e0444     ..1...$...+.D..*
   25970:	2406aa80 28042404 010b3408 37819080     ...$.$.(.4.....7
   25980:	080a1609 03399880 30090863 03210516     ......9.c..0..!.
   25990:	4001051b 054b0438 070a042f 20400709     ...@8.K./.....@ 
   259a0:	090c0427 053a0336 0c04071a 37495007     '...6.:......PI7
   259b0:	07330d33 810a082e 81801f26 802a0828     3.3.....&...(.*.
   259c0:	4e091786 430f1e04 0a07190e 27094706     ...N...C.....G.'
   259d0:	3f0b7509 3b062a41 51060a05 10050106     .u.?A*.;...Q....
   259e0:	8b800503 08482060 5ea6800a 0a0b4522     ....` H....^"E..
   259f0:	39130d06 2c360a07 c0801004 0c53643c     ...9..6,....<dS.
   25a00:	45a08001 5308481b 0781391d 031d0a46     ...E.H.S.9..F...
   25a10:	03374947 060a080e 810a0739 c7801936     GI7.....9...6...
   25a20:	9b830d32 800b7566 84bc8ac4 82d18f2f     2...fu....../...
   25a30:	82b9a147 042a0739 0a266002 05280a46     G...9.*..`&.F.(.
   25a40:	5bb08213 39044b65 04401107 08f8971c     ...[eK.9..@.....
   25a50:	0da5f382 03311f81 81080411 6b04898c     ......1........k
   25a60:	09030d05 60931007 730af680 46176e08     .......`...s.n.F
   25a70:	0c149a80 80190957 03478187 150f4285     ....W.....G..B..
   25a80:	802b5085 1a032dd5 70810204 8501053a     .P+..-.....p:...
   25a90:	29d78000 040a044c 44118302 c2803d4c     ...)L......DL=..
   25aa0:	0401063c 341b0555 2c0e8102 560c6404     <...U..4...,.d.V
   25ab0:	5d030d0a 1d393d03 09042c0d 060e0207     ...].=9..,......
   25ac0:	d6839a80 0b030d0a 590c7405 0c140c07     .........t.Y....
   25ad0:	0a083804 1e082806 31037752 0ca68003     .8...(..Rw.1....
   25ae0:	05030414 85060d03 6372736a 62696c2f     ........jsrc/lib
   25af0:	65726f63 696e752f 65646f63 646f6d2f     core/unicode/mod
   25b00:	0073722e 00025ae9 0000001a 00000038     .rs..Z......8...
   25b10:	0000000f 00025ae9 0000001a 00000039     .....Z......9...
   25b20:	00000010                                ....

00025b24 <_ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E>:
   25b24:	1b150f04 17120319 0e000011 00000016     ................
	...
   25b4c:	00130600 00000000 00000000 00000000     ................
   25b5c:	00000000 07020000 0c08000a 1a181c1d     ................
	...
   25b7c:	01050000 00000000 00000000 00000000     ................
   25b8c:	00000000 10000000 00000000 0009000b     ................
   25b9c:	                                         ...

00025b9f <_ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E>:
	...
   25bbb:	00120f00 00000000 00000000 00000000     ................
   25bcb:	0000001f 00000000 00000000 00000000     ................
   25bdb:	1d664649 00000000 00000000 00000000     IFf.............
   25beb:	00003e8a 00000000 00000000 4b000000     .>.............K
   25bfb:	00000053 00000000 00000000 42236700     S............g#B
	...
   25c17:	0000003d 00230000 00000000 00000000     =.....#.........
   25c27:	2d000075 00000000 00000000 00000000     u..-............
   25c37:	003c4e82 00000000 00000000 63000000     .N<............c
   25c47:	25000000 00005a00 00000000 00368100     ...%.Z........6.
   25c57:	00000300 00000000 00000000 0000002f     ............/...
   25c67:	00000000 00001000 13000000 00000800     ................
	...
   25c7f:	43000000 89007200 00000000 00000000     ...C.r..........
   25c8f:	00070000 057d0000 37003f18 64400987     ......}..?.7..@d
   25c9f:	00210000 00000000 00000000 00000000     ..!.............
   25caf:	4100000a 00000000 00000000 00000000     ...A............
   25cbf:	0030000c 0000005c 00717719 44354760     ..0.\....wq.`G5D
   25ccf:	7400002e 2c651139 507f5e51 34000000     ...t9.e,Q^.P...4
   25cdf:	00000031 00000053 3a000000 00000000     1...S......:....
   25cef:	88001a38 696b2b5f 845d4f5d 14682a80     8..._+ki]O]..*h.
   25cff:	0017003b 00000000 00000000 00000000     ;...............
   25d0f:	57000055 83000000 00000000 00000000     U..W............
   25d1f:	00000059 26000000 00161b6e 00000000     Y......&n.......
   25d2f:	001c4a6d 00000000 00000000 00002400     mJ...........$..
   25d3f:	0052007c 0015067b 48000000 00000000     |.R.{......H....
   25d4f:	2776287e 2200296c 0d610e5b 04627056     ~(v'l)."[.a.Vpb.
   25d5f:	02782085 1e7a0000 00540179 00000033     . x...z.y.T.3...
   25d6f:	00587386 0b6f454d 3200006a 00004c6c     .sX.MEo.j..2lL..
   25d7f:	00008a89 3e8a8a8a 00000000 00000000     .......>........
	...

00025d90 <_ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E>:
	...
   25d98:	00000001 00000000 0000000d 00000000     ................
   25da8:	0000001c 00000000 00000040 00000000     ........@.......
   25db8:	000000b6 00000000 000000bf 00000000     ................
   25dc8:	000003f8 00000000 000007f0 00000000     ................
   25dd8:	000007ff 00000000 00001000 00000000     ................
   25de8:	00001e00 00000000 00003800 00000000     .........8......
   25df8:	00003f00 00000000 00007f80 00000000     .?..............
   25e08:	00008000 00000000 0001ffc0 00000000     ................
   25e18:	0003ff80 00000000 00078000 00000000     ................
   25e28:	007f0000 00000000 00802001 00000000     ......... ......
   25e38:	00a30000 00000000 037ffc00 00000000     ................
   25e48:	06000000 00000000 07ff0000 00000000     ................
   25e58:	09800000 00000000 0e000000 00000000     ................
   25e68:	0e7e0080 00000000 20002064 00000000     ..~.....d . ....
   25e78:	200ffe40 00000000 30000001 00000000     @.. .......0....
   25e88:	40000000 00000000 4000005c 00000000     ...@....\..@....
   25e98:	60000000 00000000 805c8400 00000000     ...`......\.....
   25ea8:	c0000000 00000000 e0000000 00000000     ................
   25eb8:	00000000 00000001 0cf00000 00000001     ................
   25ec8:	00603044 0000000c 00603dc1 0000000c     D0`......=`.....
   25ed8:	0080201e 0000000c 00c0201e 0000000c     . ....... ......
   25ee8:	00fe21fe 0000000c 00000000 00000020     .!.......... ...
   25ef8:	00000000 00000060 00000844 00000060     ....`...D...`...
   25f08:	00000000 000000f0 00000060 00000200     ........`.......
   25f18:	f9ffff7f 000007db 80000000 000007f8     ................
   25f28:	e0000000 00000fbc 00000000 00002120     ............ !..
   25f38:	00000003 00003b3c 00000fe7 00003c00     ....<;.......<..
   25f48:	9fc00000 00003d9f fbc00000 00003eef     .....=.......>..
   25f58:	00000000 00003fc0 00000000 0000f000     .....?..........
   25f68:	00000000 0000fc00 f8000010 0000fffe     ................
   25f78:	0000ffff 0000ffff ffffffff 0000ffff     ................
   25f88:	fffff800 00010000 00000000 0001ffc0     ................
   25f98:	ffff0000 0001ffff 00000000 00030000     ................
   25fa8:	00000000 00038000 00000000 0003a340     ............@...
   25fb8:	00000000 00080000 000c0000 000c0000     ................
   25fc8:	00000004 000ff800 00000000 00180000     ................
   25fd8:	001c0000 001c0000 c3000000 001e0001     ................
   25fe8:	00000000 001f0000 00800001 001f1fc0     ................
   25ff8:	00000007 001fef80 ffffffff 00201fff     .............. .
   26008:	00023986 00230000 00000002 00403000     .9....#......0@.
   26018:	00000000 00667e00 fffc0000 006dfcff     .....~f.......m.
   26028:	00000000 007f0000 00000000 00bf2800     .............(..
   26038:	00000000 00cff000 03000000 02a00000     ................
   26048:	fff70000 031021fd 00000003 06780000     .....!........x.
   26058:	00000000 06ff8000 00000000 07c00000     ................
   26068:	00000000 07f20000 00000000 0e040187     ................
   26078:	00000006 10000000 00001008 10000000     ................
   26088:	00000007 14000000 0000000f 17f00000     ................
   26098:	00000000 1ff20000 feffe0df 1fffffff     ................
   260a8:	00000000 20000000 00000000 200ff800     ....... ....... 
   260b8:	00000007 33c80000 00000000 3fb00000     .......3.......?
   260c8:	00000000 3ff78000 00000004 40000000     .......?.......@
   260d8:	0080201e 4000000c 00000000 40d38000     . .....@.......@
   260e8:	00000002 50000000 00000003 58000000     .......P.......X
   260f8:	00000000 66fde000 000007fe 79f80000     .......f.......y
   26108:	00000003 7fc00000 00000000 7ffe0000     ................
   26118:	00000000 7fff0000 00000000 80000000     ................
   26128:	0000007f 80000000 00000030 8003ffff     ........0.......
   26138:	0000f06e 87000000 00000002 90000000     n...............
   26148:	7f400000 9ff81fe5 00000000 a5f90000     ..@.............
   26158:	00000000 a7f80000 00000000 b03c8000     ..............<.
   26168:	00000000 b47e0000 00000000 bf7f0000     ......~.........
   26178:	fffe0000 bfffffff 00000011 c0000000     ................
   26188:	00000000 c19d0000 00000002 d0000000     ................
   26198:	00000000 f807c3a0 ffffffff f87fffff     ................
   261a8:	ffffffff fbffffff 000021be fc00000c     .........!......
   261b8:	00000000 ff000000 00000002 ff000000     ................
   261c8:	00020000 ffff0000 fff80000 fffffffb     ................
   261d8:	00000000 ffffffff ffffffff ffffffff     ................
   261e8:	00000020 00006425 6c363025 00002075      ...%d..%06lu ..

000261f8 <nrf52_hal_i2cs>:
   261f8:	00000000 20000108                       ....... 

00026200 <nrf52_hal_spis>:
   26200:	2000ddc0 00000000 00000000 65737341     ... ........Asse
   26210:	40207472 25783020 00000a78 65737341     rt @ 0x%x...Asse
   26220:	40207472 25783020 202d2078 253a7325     rt @ 0x%x - %s:%
   26230:	00000a64 61686e55 656c646e 6e692064     d...Unhandled in
   26240:	72726574 20747075 646c2528 65202c29     terrupt (%ld), e
   26250:	70656378 6e6f6974 20707320 30257830     xception sp 0x%0
   26260:	0a786c38 00000000 3a307220 30257830     8lx..... r0:0x%0
   26270:	20786c38 3a317220 30257830 20786c38     8lx  r1:0x%08lx 
   26280:	3a327220 30257830 20786c38 3a337220      r2:0x%08lx  r3:
   26290:	30257830 0a786c38 00000000 3a347220     0x%08lx..... r4:
   262a0:	30257830 20786c38 3a357220 30257830     0x%08lx  r5:0x%0
   262b0:	20786c38 3a367220 30257830 20786c38     8lx  r6:0x%08lx 
   262c0:	3a377220 30257830 0a786c38 00000000      r7:0x%08lx.....
   262d0:	3a387220 30257830 20786c38 3a397220      r8:0x%08lx  r9:
   262e0:	30257830 20786c38 3a303172 30257830     0x%08lx r10:0x%0
   262f0:	20786c38 3a313172 30257830 0a786c38     8lx r11:0x%08lx.
   26300:	00000000 3a323172 30257830 20786c38     ....r12:0x%08lx 
   26310:	3a726c20 30257830 20786c38 3a637020      lr:0x%08lx  pc:
   26320:	30257830 20786c38 3a727370 30257830     0x%08lx psr:0x%0
   26330:	0a786c38 00000000 52534349 2578303a     8lx.....ICSR:0x%
   26340:	786c3830 53464820 78303a52 6c383025     08lx HFSR:0x%08l
   26350:	46432078 303a5253 38302578 000a786c     x CFSR:0x%08lx..
   26360:	52414642 2578303a 786c3830 464d4d20     BFAR:0x%08lx MMF
   26370:	303a5241 38302578 000a786c 6e69616d     AR:0x%08lx..main
   26380:	00000000 656c6469 00000000 7379736d     ....idle....msys
   26390:	0000315f                                _1..

00026394 <MemFile_methods>:
   26394:	0001a209 00000000                       ........

0002639c <stdout>:
   2639c:	20000124                                $.. 

000263a0 <nrf52k_flash_dev>:
   263a0:	000263b8 00000000 00080000 00000080     .c..............
   263b0:	00000001 000000ff                       ........

000263b8 <nrf52k_flash_funcs>:
   263b8:	0001a475 0001a3a5 0001a32d 0001a385     u.......-.......
   263c8:	00000000 0001a381 00000000              ............

000263d4 <nrf52_hal_timers>:
   263d4:	2000ded0 00000000 00000000 00000000     ... ............
	...

000263ec <hal_i2c1_cfg>:
   263ec:	00000007 00000006 00000064              ........d...

000263f8 <os_bsp_spi0m_cfg>:
   263f8:	001d0302 736e6573 6e5f726f 6669746f     ....sensor_notif
   26408:	7476655f 00000073                       _evts...

00026410 <COLLECTOR_NODE_HW_ID>:
   26410:	066aff57 50547878 67242949              W.j.xxTPI)$g

0002641c <SENSOR_NODE_HW_IDS>:
   2641c:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   2642c:	08070605 020b0a09 04030201 08070605     ................
   2643c:	030b0a09 04030201 08070605 040b0a09     ................
   2644c:	04030201 08070605 050b0a09 77687325     ............%shw
   2645c:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   2646c:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   2647c:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   2648c:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   2649c:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   264ac:	0a732520 00000000 00000000               %s.........

000264b8 <sensor_node_addresses>:
   264b8:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   264c8:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   264d8:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   264e8:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   264f8:	00000a73                                s...

000264fc <g_temp_stub_sensor_driver>:
   264fc:	0001b2b1 0001b1b9 00000000 00000000     ................
	...
   26524:	20425453 64616572 6d657420 65732070     STB read temp se
   26534:	726f736e 0000000a 635f636f 62635f6c     nsor....oc_cl_cb
   26544:	00000073 725f636f 6f5f7065 00000000     s...oc_rep_o....

00026554 <sysflash_map_dflt>:
	...
   2655c:	00004000 00000001 00008000 00073c00     .@...........<..
   2656c:	00000002 0007bc00 00000400 00000003     ................
   2657c:	0007c000 00001000 00000010 00004000     .............@..
   2658c:	00004000 00000011 0007d000 00003000     .@...........0..
   2659c:	70616f63 6365725f 65766965 544f4e20     coap_receive NOT
   265ac:	504d4920 454d454c 4445544e 0000000a      IMPLEMENTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 124340	    108	  57144	 181592	  2c558	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
