
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x00022524 vaddr 0x00022524 paddr 0x00022524 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0002253c memsz 0x0002253c flags rwx
    LOAD off    0x000300d8 vaddr 0x200000d8 paddr 0x0002253c align 2**16
         filesz 0x0000006c memsz 0x0000006c flags rw-
    LOAD off    0x00030148 vaddr 0x20000148 paddr 0x000225a8 align 2**16
         filesz 0x00000000 memsz 0x0000de40 flags rw-
    LOAD off    0x00040000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              0001a504  00008020  00008020  00008020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  00022524  00022524  00030144  2**0  CONTENTS
  3 .ARM.exidx         00000018  00022524  00022524  00022524  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  00030144  2**0  CONTENTS
  6 .data              0000006c  200000d8  0002253c  000300d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20000144  20000144  00030144  2**0  CONTENTS
  8 .bss               0000de40  20000148  000225a8  00030148  2**3  ALLOC
  9 .stack_dummy       000001b0  2000df88  2000df88  00030148  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  000302f8  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  00030333  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000303b2  2**0  CONTENTS, READONLY
 13 .debug_line        0004ae77  00000000  00000000  000303b6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        0008a808  00000000  00000000  0007b22d  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0000ee82  00000000  00000000  00105a35  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00005ef0  00000000  00000000  001148b8  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         000618a7  00000000  00000000  0011a7a8  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00013534  00000000  00000000  0017c04f  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      0001a398  00000000  00000000  0018f583  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000f5b8  00000000  00000000  001a991c  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_macinfo     00000063  00000000  00000000  001b8ed4  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubnames    00019c37  00000000  00000000  001b8f37  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes    0003bb53  00000000  00000000  001d2b6e  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
00022524 l    d  .ARM.extab	00000000 .ARM.extab
00022524 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000144 l    d  .bssnz	00000000 .bssnz
20000148 l    d  .bss	00000000 .bss
2000df88 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000820c l     F .text	0000003c errata_16
00008248 l     F .text	0000004c errata_31
00008294 l     F .text	0000003c errata_32
000082d0 l     F .text	0000004c errata_36
0000831c l     F .text	0000003c errata_37
00008358 l     F .text	0000003c errata_57
00008394 l     F .text	0000003c errata_66
000083d0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 3592ao74dt466zwu
00000d09 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4c8 l       .debug_str	00000000 
0001f4bc l       .debug_str	00000000 
00034446 l       .debug_str	00000000 
0005a0d2 l       .debug_str	00000000 
0005a839 l       .debug_str	00000000 
00059b06 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
00034473 l       .debug_str	00000000 
00034465 l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00000e0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0005cd2b l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
0005bbb4 l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
00003ee3 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00034432 l       .debug_str	00000000 
0005f7ec l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394ec l       .debug_str	00000000 
0005cbd5 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a847 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cz1tg82iqprprj5
00001118 l       .debug_str	00000000 
0000126a l       .debug_str	00000000 
000012aa l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00016985 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0004260a l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4c7 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00059f0c l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00060302 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
0005d851 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
0003e620 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 40zocxwjz4ckzrhd
000012fa l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000132a l       .debug_str	00000000 
0000133d l       .debug_str	00000000 
0000136d l       .debug_str	00000000 
00001398 l       .debug_str	00000000 
000013a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5k460cii92qewjl
000012f5 l       .debug_str	00000000 
00001433 l       .debug_str	00000000 
0000146f l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
00001478 l       .debug_str	00000000 
0001a55a l       .debug_str	00000000 
000014a3 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00034432 l       .debug_str	00000000 
00001501 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00010a77 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00001412 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001f430 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001425 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16zjnp1vbo7kc1gp
00000c82 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394ec l       .debug_str	00000000 
0005cbd5 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a847 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4c8 l       .debug_str	00000000 
0001f4bc l       .debug_str	00000000 
0000165b l       .debug_str	00000000 
00012647 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005d002 l       .debug_str	00000000 
000612f5 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00003d16 l       .debug_str	00000000 
00061200 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005feeb l       .debug_str	00000000 
00001521 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00060ebf l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
000221bd l       .debug_str	00000000 
00015ac0 l       .debug_str	00000000 
00001536 l       .debug_str	00000000 
000017dc l       .debug_str	00000000 
0000153e l       .debug_str	00000000 
000015c3 l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
0005cd34 l       .debug_str	00000000 
00001600 l       .debug_str	00000000 
0003f910 l       .debug_str	00000000 
00001628 l       .debug_str	00000000 
00001656 l       .debug_str	00000000 
00001660 l       .debug_str	00000000 
0000168b l       .debug_str	00000000 
00001692 l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
00061280 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
000016e7 l       .debug_str	00000000 
00001713 l       .debug_str	00000000 
0000171b l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
00001783 l       .debug_str	00000000 
0000178c l       .debug_str	00000000 
000017c2 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000017d3 l       .debug_str	00000000 
0000165a l       .debug_str	00000000 
00059c53 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
000017fa l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1oq54qwymghnfn7s
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000182a l       .debug_str	00000000 
0005c079 l       .debug_str	00000000 
000018af l       .debug_str	00000000 
0000191c l       .debug_str	00000000 
0000198e l       .debug_str	00000000 
0005ae55 l       .debug_str	00000000 
0005e9d9 l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000019ec l       .debug_str	00000000 
0004ea30 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2d0u1dup22f6p5uq
00000d12 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4c8 l       .debug_str	00000000 
00001a09 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000394ec l       .debug_str	00000000 
0005cbd5 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a847 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2q7rzzztqsy7quqz
00003138 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
00003651 l       .debug_str	00000000 
00003691 l       .debug_str	00000000 
000036df l       .debug_str	00000000 
0000371f l       .debug_str	00000000 
00003746 l       .debug_str	00000000 
00003786 l       .debug_str	00000000 
00003794 l       .debug_str	00000000 
00003803 l       .debug_str	00000000 
0000382e l       .debug_str	00000000 
0000389e l       .debug_str	00000000 
000038b1 l       .debug_str	00000000 
00003921 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000394d l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00016985 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003e620 l       .debug_str	00000000 
0000395c l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0005abf9 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
00001a42 l       .debug_str	00000000 
00001d90 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0004260a l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d96 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4c7 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00059f0c l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00060302 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
0004f5af l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
00001de0 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0005ffb5 l       .debug_str	00000000 
00001de8 l       .debug_str	00000000 
00001df4 l       .debug_str	00000000 
00001dff l       .debug_str	00000000 
00001e07 l       .debug_str	00000000 
0000b1d7 l       .debug_str	00000000 
0000b702 l       .debug_str	00000000 
00001e0f l       .debug_str	00000000 
00001f0b l       .debug_str	00000000 
0000200f l       .debug_str	00000000 
0000201d l       .debug_str	00000000 
00002028 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002055 l       .debug_str	00000000 
00002032 l       .debug_str	00000000 
00002060 l       .debug_str	00000000 
000020db l       .debug_str	00000000 
0000215e l       .debug_str	00000000 
0000216c l       .debug_str	00000000 
000021cb l       .debug_str	00000000 
00002232 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
00002258 l       .debug_str	00000000 
0005e7eb l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00002267 l       .debug_str	00000000 
00024c2e l       .debug_str	00000000 
0000226d l       .debug_str	00000000 
00002273 l       .debug_str	00000000 
00002279 l       .debug_str	00000000 
00002285 l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
0000228d l       .debug_str	00000000 
00002295 l       .debug_str	00000000 
0000229b l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000022be l       .debug_str	00000000 
000022f1 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
0005e378 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0000237f l       .debug_str	00000000 
00002385 l       .debug_str	00000000 
000023ae l       .debug_str	00000000 
0000238b l       .debug_str	00000000 
000023c0 l       .debug_str	00000000 
00002402 l       .debug_str	00000000 
0005e261 l       .debug_str	00000000 
0000244c l       .debug_str	00000000 
00002452 l       .debug_str	00000000 
00002458 l       .debug_str	00000000 
00002481 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002493 l       .debug_str	00000000 
000024d5 l       .debug_str	00000000 
0005d725 l       .debug_str	00000000 
0000251f l       .debug_str	00000000 
00002525 l       .debug_str	00000000 
0000252b l       .debug_str	00000000 
00002531 l       .debug_str	00000000 
0000255a l       .debug_str	00000000 
00002537 l       .debug_str	00000000 
0000256b l       .debug_str	00000000 
000025ac l       .debug_str	00000000 
000025f5 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
0005e5af l       .debug_str	00000000 
000025ff l       .debug_str	00000000 
00002605 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002634 l       .debug_str	00000000 
00002611 l       .debug_str	00000000 
00002645 l       .debug_str	00000000 
00002686 l       .debug_str	00000000 
0005d7dd l       .debug_str	00000000 
000026cf l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
000026d8 l       .debug_str	00000000 
0000270c l       .debug_str	00000000 
0000274d l       .debug_str	00000000 
00002796 l       .debug_str	00000000 
0005e783 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027a4 l       .debug_str	00000000 
000027ab l       .debug_str	00000000 
000027d6 l       .debug_str	00000000 
000027b3 l       .debug_str	00000000 
000027e8 l       .debug_str	00000000 
0000282a l       .debug_str	00000000 
0005e44b l       .debug_str	00000000 
00002874 l       .debug_str	00000000 
0000287a l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
00002886 l       .debug_str	00000000 
0000288c l       .debug_str	00000000 
00002894 l       .debug_str	00000000 
000028a2 l       .debug_str	00000000 
000028b1 l       .debug_str	00000000 
000028c2 l       .debug_str	00000000 
000028cd l       .debug_str	00000000 
000028d8 l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028ea l       .debug_str	00000000 
00002930 l       .debug_str	00000000 
0000290d l       .debug_str	00000000 
00002942 l       .debug_str	00000000 
00002984 l       .debug_str	00000000 
0005d8e0 l       .debug_str	00000000 
000029ce l       .debug_str	00000000 
000029fb l       .debug_str	00000000 
000029d8 l       .debug_str	00000000 
00002a0d l       .debug_str	00000000 
00002a4f l       .debug_str	00000000 
00002a99 l       .debug_str	00000000 
00002a9e l       .debug_str	00000000 
00002acb l       .debug_str	00000000 
00002aa8 l       .debug_str	00000000 
00002add l       .debug_str	00000000 
00002b1f l       .debug_str	00000000 
00002b69 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00002be8 l       .debug_str	00000000 
00002b7d l       .debug_str	00000000 
00002b8d l       .debug_str	00000000 
00002b96 l       .debug_str	00000000 
00002ba1 l       .debug_str	00000000 
00002bb0 l       .debug_str	00000000 
00002bc5 l       .debug_str	00000000 
00002bf6 l       .debug_str	00000000 
00002c93 l       .debug_str	00000000 
00002d38 l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d4c l       .debug_str	00000000 
00002d90 l       .debug_str	00000000 
00002d6d l       .debug_str	00000000 
00002da3 l       .debug_str	00000000 
00002e26 l       .debug_str	00000000 
00002eb1 l       .debug_str	00000000 
00002ecd l       .debug_str	00000000 
00002f19 l       .debug_str	00000000 
00002f6d l       .debug_str	00000000 
00002f8a l       .debug_str	00000000 
00002f9e l       .debug_str	00000000 
00002fea l       .debug_str	00000000 
0000303e l       .debug_str	00000000 
00003054 l       .debug_str	00000000 
00003068 l       .debug_str	00000000 
000030af l       .debug_str	00000000 
000030fe l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003107 l       .debug_str	00000000 
0000313e l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003155 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
00033f31 l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003df8 l       .debug_str	00000000 
00003177 l       .debug_str	00000000 
00003182 l       .debug_str	00000000 
00003193 l       .debug_str	00000000 
00003199 l       .debug_str	00000000 
000031a1 l       .debug_str	00000000 
000031a8 l       .debug_str	00000000 
000031b2 l       .debug_str	00000000 
000031ba l       .debug_str	00000000 
000031c2 l       .debug_str	00000000 
000031e4 l       .debug_str	00000000 
000031ef l       .debug_str	00000000 
000031fb l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
0000320c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00003217 l       .debug_str	00000000 
00003222 l       .debug_str	00000000 
0000322d l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d851 l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
0000323d l       .debug_str	00000000 
0000324d l       .debug_str	00000000 
0000325c l       .debug_str	00000000 
00003264 l       .debug_str	00000000 
0000326b l       .debug_str	00000000 
00003273 l       .debug_str	00000000 
000032b4 l       .debug_str	00000000 
00003291 l       .debug_str	00000000 
000032c4 l       .debug_str	00000000 
000032d9 l       .debug_str	00000000 
000032e2 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
000033ae l       .debug_str	00000000 
000033be l       .debug_str	00000000 
000033d3 l       .debug_str	00000000 
000033db l       .debug_str	00000000 
0000343f l       .debug_str	00000000 
000034ab l       .debug_str	00000000 
000034b2 l       .debug_str	00000000 
000034ba l       .debug_str	00000000 
000034fb l       .debug_str	00000000 
000034d8 l       .debug_str	00000000 
0000350b l       .debug_str	00000000 
00003520 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
0000354f l       .debug_str	00000000 
00003564 l       .debug_str	00000000 
0000358e l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003605 l       .debug_str	00000000 
00003644 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vuqh37eag1b6y30
00003b45 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005d002 l       .debug_str	00000000 
000612f5 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00003d16 l       .debug_str	00000000 
000229ea l       .debug_str	00000000 
00003aba l       .debug_str	00000000 
00003b1d l       .debug_str	00000000 
00003bc3 l       .debug_str	00000000 
00003c53 l       .debug_str	00000000 
00003c69 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00003cf0 l       .debug_str	00000000 
00003cff l       .debug_str	00000000 
0005a6ba l       .debug_str	00000000 
00003d21 l       .debug_str	00000000 
00016223 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00012647 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00003979 l       .debug_str	00000000 
00003a03 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0005ab5f l       .debug_str	00000000 
00003a1b l       .debug_str	00000000 
00003ab0 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f4e6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3l5pa7f4r4pjxp5p
000049f0 l       .debug_str	00000000 
00004a1d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00004a3c l       .debug_str	00000000 
00004a70 l       .debug_str	00000000 
00004a57 l       .debug_str	00000000 
00004a78 l       .debug_str	00000000 
00004a8e l       .debug_str	00000000 
00004af6 l       .debug_str	00000000 
00004b6e l       .debug_str	00000000 
00004b9b l       .debug_str	00000000 
00004bb3 l       .debug_str	00000000 
00004c1d l       .debug_str	00000000 
00004c25 l       .debug_str	00000000 
00004c2b l       .debug_str	00000000 
00004c35 l       .debug_str	00000000 
00004caf l       .debug_str	00000000 
00004d1b l       .debug_str	00000000 
00004d94 l       .debug_str	00000000 
00004e0d l       .debug_str	00000000 
00004e78 l       .debug_str	00000000 
00004ee7 l       .debug_str	00000000 
00004eee l       .debug_str	00000000 
00004ef9 l       .debug_str	00000000 
00004f21 l       .debug_str	00000000 
00004f96 l       .debug_str	00000000 
00005013 l       .debug_str	00000000 
00004f12 l       .debug_str	00000000 
0000501f l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
00005096 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
0004f5af l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
000050ff l       .debug_str	00000000 
0000517d l       .debug_str	00000000 
000051ed l       .debug_str	00000000 
00005267 l       .debug_str	00000000 
00005281 l       .debug_str	00000000 
000052ed l       .debug_str	00000000 
000052f6 l       .debug_str	00000000 
00005302 l       .debug_str	00000000 
00005378 l       .debug_str	00000000 
000053ee l       .debug_str	00000000 
00005464 l       .debug_str	00000000 
000054cc l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
0000553b l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
000055a8 l       .debug_str	00000000 
0000561d l       .debug_str	00000000 
00005632 l       .debug_str	00000000 
00005699 l       .debug_str	00000000 
000056a2 l       .debug_str	00000000 
000056ad l       .debug_str	00000000 
000056b4 l       .debug_str	00000000 
0005bbbc l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
0003e620 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
000056e9 l       .debug_str	00000000 
0005b5f5 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
00005723 l       .debug_str	00000000 
0005b49c l       .debug_str	00000000 
00060933 l       .debug_str	00000000 
00005756 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00005763 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00060ebf l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
000221bd l       .debug_str	00000000 
00015ac0 l       .debug_str	00000000 
00001536 l       .debug_str	00000000 
000017dc l       .debug_str	00000000 
000017d3 l       .debug_str	00000000 
00005784 l       .debug_str	00000000 
00005789 l       .debug_str	00000000 
0000578e l       .debug_str	00000000 
00005793 l       .debug_str	00000000 
00005798 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
000057a8 l       .debug_str	00000000 
000057b3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0004260a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003d2b l       .debug_str	00000000 
00013646 l       .debug_str	00000000 
00003d9f l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003dab l       .debug_str	00000000 
00003dd1 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
00033f31 l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003df8 l       .debug_str	00000000 
00003ddd l       .debug_str	00000000 
00003e04 l       .debug_str	00000000 
00003e0f l       .debug_str	00000000 
00003e1a l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
00003ed4 l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00003eb2 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00003eb9 l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00003ee8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00003f45 l       .debug_str	00000000 
00003faa l       .debug_str	00000000 
00003fb2 l       .debug_str	00000000 
00003fd4 l       .debug_str	00000000 
00003fbb l       .debug_str	00000000 
00003fec l       .debug_str	00000000 
00004012 l       .debug_str	00000000 
0000408a l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d851 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
00004101 l       .debug_str	00000000 
0000416a l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
000041e2 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4c7 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00059f0c l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00060302 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
0000424c l       .debug_str	00000000 
000042c5 l       .debug_str	00000000 
00060931 l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
000042ca l       .debug_str	00000000 
00000aa4 l       .debug_str	00000000 
000042f0 l       .debug_str	00000000 
000042d7 l       .debug_str	00000000 
000042d2 l       .debug_str	00000000 
000042fb l       .debug_str	00000000 
00004314 l       .debug_str	00000000 
0000437f l       .debug_str	00000000 
00000896 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
000043ef l       .debug_str	00000000 
000043ff l       .debug_str	00000000 
00004477 l       .debug_str	00000000 
0005b14c l       .debug_str	00000000 
0005aea6 l       .debug_str	00000000 
00004481 l       .debug_str	00000000 
00004488 l       .debug_str	00000000 
000044ab l       .debug_str	00000000 
00004492 l       .debug_str	00000000 
0000448d l       .debug_str	00000000 
000044b5 l       .debug_str	00000000 
000044cd l       .debug_str	00000000 
00004537 l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
000045ac l       .debug_str	00000000 
00004613 l       .debug_str	00000000 
0000468e l       .debug_str	00000000 
0000469e l       .debug_str	00000000 
000046a7 l       .debug_str	00000000 
000046b5 l       .debug_str	00000000 
000046c3 l       .debug_str	00000000 
000046cf l       .debug_str	00000000 
000048dd l       .debug_str	00000000 
000046db l       .debug_str	00000000 
000046ea l       .debug_str	00000000 
000046f2 l       .debug_str	00000000 
0000470b l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
0000471c l       .debug_str	00000000 
00004724 l       .debug_str	00000000 
00004757 l       .debug_str	00000000 
0000473e l       .debug_str	00000000 
00004763 l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00004795 l       .debug_str	00000000 
0000477c l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047c2 l       .debug_str	00000000 
000047a9 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047ea l       .debug_str	00000000 
00004857 l       .debug_str	00000000 
000048d4 l       .debug_str	00000000 
000048dc l       .debug_str	00000000 
00004b8c l       .debug_str	00000000 
00004b73 l       .debug_str	00000000 
000048e6 l       .debug_str	00000000 
00004903 l       .debug_str	00000000 
00004972 l       .debug_str	00000000 
000049e8 l       .debug_str	00000000 
000049f9 l       .debug_str	00000000 
00004a07 l       .debug_str	00000000 
00004a0e l       .debug_str	00000000 
00004a15 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 413mqmtb04w1hzsl
000077a3 l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
00030dd3 l       .debug_str	00000000 
0002192b l       .debug_str	00000000 
0000a289 l       .debug_str	00000000 
0000a2b9 l       .debug_str	00000000 
0000a517 l       .debug_str	00000000 
0000136d l       .debug_str	00000000 
0000a547 l       .debug_str	00000000 
0000a551 l       .debug_str	00000000 
0000a5aa l       .debug_str	00000000 
000013a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000057b8 l       .debug_str	00000000 
000057e8 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006014d l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c26b l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035945 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac4e l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
0005ab5f l       .debug_str	00000000 
00030d5f l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00021b7f l       .debug_str	00000000 
00005a2d l       .debug_str	00000000 
00005a5d l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n7qec2sa6vjglqv
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a847 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4c8 l       .debug_str	00000000 
0001f4bc l       .debug_str	00000000 
0005a68b l       .debug_str	00000000 
0005ae55 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
00061200 l       .debug_str	00000000 
0000ac10 l       .debug_str	00000000 
0000ac19 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000a7fe l       .debug_str	00000000 
0000b122 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
0000a835 l       .debug_str	00000000 
0000a888 l       .debug_str	00000000 
000229ea l       .debug_str	00000000 
0000a89c l       .debug_str	00000000 
0000a8e2 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
0000a8f0 l       .debug_str	00000000 
0000a937 l       .debug_str	00000000 
0000a940 l       .debug_str	00000000 
0000a989 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
00003d21 l       .debug_str	00000000 
0000a995 l       .debug_str	00000000 
0000aa11 l       .debug_str	00000000 
000612f5 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00003cf0 l       .debug_str	00000000 
0000aa3b l       .debug_str	00000000 
0000aab7 l       .debug_str	00000000 
0000aae6 l       .debug_str	00000000 
0000ab6c l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0003578b l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013636 l       .debug_str	00000000 
0000ab94 l       .debug_str	00000000 
0000abf6 l       .debug_str	00000000 
0005c26b l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000221bd l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000160fe l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000abfe l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394ec l       .debug_str	00000000 
0005cbd5 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4oqy1cznfkuv6rc
0005d017 l       .debug_str	00000000 
0000ae2c l       .debug_str	00000000 
00059bcd l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
00061645 l       .debug_str	00000000 
00061644 l       .debug_str	00000000 
00060ebf l       .debug_str	00000000 
0000152e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000221bd l       .debug_str	00000000 
00015ac0 l       .debug_str	00000000 
00001536 l       .debug_str	00000000 
000017dc l       .debug_str	00000000 
000017d3 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00024c2e l       .debug_str	00000000 
00024c33 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000ac20 l       .debug_str	00000000 
00059af0 l       .debug_str	00000000 
0000ac24 l       .debug_str	00000000 
0000ac55 l       .debug_str	00000000 
0000ac5b l       .debug_str	00000000 
0000ac9c l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000acb1 l       .debug_str	00000000 
0000ace8 l       .debug_str	00000000 
0000acf3 l       .debug_str	00000000 
0006014d l       .debug_str	00000000 
0000ad25 l       .debug_str	00000000 
00059c34 l       .debug_str	00000000 
0000ad59 l       .debug_str	00000000 
00059c23 l       .debug_str	00000000 
0000ad8d l       .debug_str	00000000 
00059bdb l       .debug_str	00000000 
0000adc4 l       .debug_str	00000000 
00059c6d l       .debug_str	00000000 
0000adfc l       .debug_str	00000000 
00059a9e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4qlpitlm4hs8kdcv
00003df8 l       .debug_str	00000000 
0000b173 l       .debug_str	00000000 
0000b19a l       .debug_str	00000000 
0000b1a5 l       .debug_str	00000000 
0000b1cc l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000b1d7 l       .debug_str	00000000 
0000b1d6 l       .debug_str	00000000 
0001f37b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0005abdc l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
0005c26b l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
0005db2c l       .debug_str	00000000 
0005ae36 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000ae5d l       .debug_str	00000000 
0000ae86 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0000ae93 l       .debug_str	00000000 
0000aea5 l       .debug_str	00000000 
0000aeb6 l       .debug_str	00000000 
0000af02 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
0000af0e l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005abf9 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
00001a42 l       .debug_str	00000000 
00001d90 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0004260a l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d96 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4c7 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00059f0c l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00060302 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
0004f5af l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
00001de0 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0005ffb5 l       .debug_str	00000000 
00001de8 l       .debug_str	00000000 
00001df4 l       .debug_str	00000000 
00001dff l       .debug_str	00000000 
00001e07 l       .debug_str	00000000 
0000af12 l       .debug_str	00000000 
0000b702 l       .debug_str	00000000 
00001e0f l       .debug_str	00000000 
00001f0b l       .debug_str	00000000 
0000200f l       .debug_str	00000000 
0000201d l       .debug_str	00000000 
00002028 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002055 l       .debug_str	00000000 
00002032 l       .debug_str	00000000 
00002060 l       .debug_str	00000000 
000020db l       .debug_str	00000000 
0000215e l       .debug_str	00000000 
0000216c l       .debug_str	00000000 
000021cb l       .debug_str	00000000 
00002232 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
00002258 l       .debug_str	00000000 
0005e7eb l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00002267 l       .debug_str	00000000 
00024c2e l       .debug_str	00000000 
0000226d l       .debug_str	00000000 
00002273 l       .debug_str	00000000 
00002279 l       .debug_str	00000000 
00002285 l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
0000228d l       .debug_str	00000000 
00002295 l       .debug_str	00000000 
0000229b l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000022be l       .debug_str	00000000 
000022f1 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
0005e378 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0000237f l       .debug_str	00000000 
00002385 l       .debug_str	00000000 
000023ae l       .debug_str	00000000 
0000238b l       .debug_str	00000000 
000023c0 l       .debug_str	00000000 
00002402 l       .debug_str	00000000 
0005e261 l       .debug_str	00000000 
0000244c l       .debug_str	00000000 
00002452 l       .debug_str	00000000 
00002458 l       .debug_str	00000000 
00002481 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002493 l       .debug_str	00000000 
000024d5 l       .debug_str	00000000 
0005d725 l       .debug_str	00000000 
0000251f l       .debug_str	00000000 
00002525 l       .debug_str	00000000 
0000252b l       .debug_str	00000000 
00002531 l       .debug_str	00000000 
0000255a l       .debug_str	00000000 
00002537 l       .debug_str	00000000 
0000256b l       .debug_str	00000000 
000025ac l       .debug_str	00000000 
000025f5 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
0005e5af l       .debug_str	00000000 
000025ff l       .debug_str	00000000 
00002605 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002634 l       .debug_str	00000000 
00002611 l       .debug_str	00000000 
00002645 l       .debug_str	00000000 
00002686 l       .debug_str	00000000 
0005d7dd l       .debug_str	00000000 
000026cf l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
000026d8 l       .debug_str	00000000 
0000270c l       .debug_str	00000000 
0000274d l       .debug_str	00000000 
00002796 l       .debug_str	00000000 
0005e783 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027a4 l       .debug_str	00000000 
000027ab l       .debug_str	00000000 
000027d6 l       .debug_str	00000000 
000027b3 l       .debug_str	00000000 
000027e8 l       .debug_str	00000000 
0000282a l       .debug_str	00000000 
0005e44b l       .debug_str	00000000 
00002874 l       .debug_str	00000000 
0000287a l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
00002886 l       .debug_str	00000000 
0000288c l       .debug_str	00000000 
00002894 l       .debug_str	00000000 
000028a2 l       .debug_str	00000000 
000028b1 l       .debug_str	00000000 
000028c2 l       .debug_str	00000000 
000028cd l       .debug_str	00000000 
000028d8 l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028ea l       .debug_str	00000000 
00002930 l       .debug_str	00000000 
0000290d l       .debug_str	00000000 
00002942 l       .debug_str	00000000 
00002984 l       .debug_str	00000000 
0005d8e0 l       .debug_str	00000000 
000029ce l       .debug_str	00000000 
000029fb l       .debug_str	00000000 
000029d8 l       .debug_str	00000000 
00002a0d l       .debug_str	00000000 
00002a4f l       .debug_str	00000000 
00002a99 l       .debug_str	00000000 
00002a9e l       .debug_str	00000000 
00002acb l       .debug_str	00000000 
00002aa8 l       .debug_str	00000000 
00002add l       .debug_str	00000000 
00002b1f l       .debug_str	00000000 
00002b69 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00002be8 l       .debug_str	00000000 
00002b7d l       .debug_str	00000000 
00002b8d l       .debug_str	00000000 
00002b96 l       .debug_str	00000000 
00002ba1 l       .debug_str	00000000 
00002bb0 l       .debug_str	00000000 
00002bc5 l       .debug_str	00000000 
00002bf6 l       .debug_str	00000000 
00002c93 l       .debug_str	00000000 
00002d38 l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d4c l       .debug_str	00000000 
00002d90 l       .debug_str	00000000 
00002d6d l       .debug_str	00000000 
00002da3 l       .debug_str	00000000 
00002e26 l       .debug_str	00000000 
00002eb1 l       .debug_str	00000000 
00002ecd l       .debug_str	00000000 
00002f19 l       .debug_str	00000000 
00002f6d l       .debug_str	00000000 
00002f8a l       .debug_str	00000000 
00002f9e l       .debug_str	00000000 
00002fea l       .debug_str	00000000 
0000303e l       .debug_str	00000000 
00003054 l       .debug_str	00000000 
00003068 l       .debug_str	00000000 
000030af l       .debug_str	00000000 
000030fe l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003107 l       .debug_str	00000000 
00003138 l       .debug_str	00000000 
0000313e l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
00003155 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
00033f31 l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003177 l       .debug_str	00000000 
00003182 l       .debug_str	00000000 
00003193 l       .debug_str	00000000 
00003199 l       .debug_str	00000000 
000031a1 l       .debug_str	00000000 
000031a8 l       .debug_str	00000000 
000031b2 l       .debug_str	00000000 
000031ba l       .debug_str	00000000 
000031c2 l       .debug_str	00000000 
000031e4 l       .debug_str	00000000 
000031ef l       .debug_str	00000000 
000031fb l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
0000320c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00003217 l       .debug_str	00000000 
00003222 l       .debug_str	00000000 
0000322d l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d851 l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
0000323d l       .debug_str	00000000 
0000324d l       .debug_str	00000000 
0000325c l       .debug_str	00000000 
00003264 l       .debug_str	00000000 
0000326b l       .debug_str	00000000 
00003273 l       .debug_str	00000000 
000032b4 l       .debug_str	00000000 
00003291 l       .debug_str	00000000 
000032c4 l       .debug_str	00000000 
000032d9 l       .debug_str	00000000 
000032e2 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
000033ae l       .debug_str	00000000 
000033be l       .debug_str	00000000 
000033d3 l       .debug_str	00000000 
000033db l       .debug_str	00000000 
0000343f l       .debug_str	00000000 
000034ab l       .debug_str	00000000 
000034b2 l       .debug_str	00000000 
000034ba l       .debug_str	00000000 
000034fb l       .debug_str	00000000 
000034d8 l       .debug_str	00000000 
0000350b l       .debug_str	00000000 
00003520 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
0000354f l       .debug_str	00000000 
00003564 l       .debug_str	00000000 
0005ab5f l       .debug_str	00000000 
0005ac4e l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0005a959 l       .debug_str	00000000 
0000af1f l       .debug_str	00000000 
0000afd7 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
0000b03b l       .debug_str	00000000 
0000b071 l       .debug_str	00000000 
0000b08a l       .debug_str	00000000 
0000b0c4 l       .debug_str	00000000 
0000b0e1 l       .debug_str	00000000 
0000b11c l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
0000b139 l       .debug_str	00000000 
0000b143 l       .debug_str	00000000 
0000b169 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z8krxbvbr97ayck
0005f685 l       .debug_str	00000000 
0000b29d l       .debug_str	00000000 
0000b2d9 l       .debug_str	00000000 
0000168b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000b253 l       .debug_str	00000000 
0000b294 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
000221bd l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 54b6z89c74d8bdz1
00003155 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0005ae55 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
000116a0 l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0000b6ea l       .debug_str	00000000 
0000b6f3 l       .debug_str	00000000 
0001f37b l       .debug_str	00000000 
0000b786 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0000b796 l       .debug_str	00000000 
0000b1d6 l       .debug_str	00000000 
0000b7a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
0000b318 l       .debug_str	00000000 
0000b360 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
0003e620 l       .debug_str	00000000 
0000b37f l       .debug_str	00000000 
0000b3ba l       .debug_str	00000000 
0000b3df l       .debug_str	00000000 
0000b406 l       .debug_str	00000000 
0000b466 l       .debug_str	00000000 
0000b46f l       .debug_str	00000000 
0000b4da l       .debug_str	00000000 
0000b4ea l       .debug_str	00000000 
0000b556 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005abf9 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
00001a42 l       .debug_str	00000000 
00001d90 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0004260a l       .debug_str	00000000 
00001a4b l       .debug_str	00000000 
00001a57 l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00001a5f l       .debug_str	00000000 
00001ab9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b6d l       .debug_str	00000000 
00001bbc l       .debug_str	00000000 
00001bc6 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c48 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c61 l       .debug_str	00000000 
00001c69 l       .debug_str	00000000 
00001cbe l       .debug_str	00000000 
00001d1b l       .debug_str	00000000 
00001d27 l       .debug_str	00000000 
00001d30 l       .debug_str	00000000 
00001d3c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
00001d8f l       .debug_str	00000000 
00001d76 l       .debug_str	00000000 
00001d96 l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4c7 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00059f0c l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00060302 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001daf l       .debug_str	00000000 
0004f5af l       .debug_str	00000000 
00001dc6 l       .debug_str	00000000 
00001dce l       .debug_str	00000000 
00001dd7 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
00001de0 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0005ffb5 l       .debug_str	00000000 
00001de8 l       .debug_str	00000000 
00001df4 l       .debug_str	00000000 
00001dff l       .debug_str	00000000 
00001e07 l       .debug_str	00000000 
0000b702 l       .debug_str	00000000 
00001e0f l       .debug_str	00000000 
00001f0b l       .debug_str	00000000 
0000200f l       .debug_str	00000000 
0000201d l       .debug_str	00000000 
00002028 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002055 l       .debug_str	00000000 
00002032 l       .debug_str	00000000 
00002060 l       .debug_str	00000000 
000020db l       .debug_str	00000000 
0000215e l       .debug_str	00000000 
0000216c l       .debug_str	00000000 
000021cb l       .debug_str	00000000 
00002232 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
00002258 l       .debug_str	00000000 
0005e7eb l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00002267 l       .debug_str	00000000 
00024c2e l       .debug_str	00000000 
0000226d l       .debug_str	00000000 
00002273 l       .debug_str	00000000 
00002279 l       .debug_str	00000000 
00002285 l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
0000228d l       .debug_str	00000000 
00002295 l       .debug_str	00000000 
0000229b l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000022be l       .debug_str	00000000 
000022f1 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
0005e378 l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
0000237f l       .debug_str	00000000 
00002385 l       .debug_str	00000000 
000023ae l       .debug_str	00000000 
0000238b l       .debug_str	00000000 
000023c0 l       .debug_str	00000000 
00002402 l       .debug_str	00000000 
0005e261 l       .debug_str	00000000 
0000244c l       .debug_str	00000000 
00002452 l       .debug_str	00000000 
00002458 l       .debug_str	00000000 
00002481 l       .debug_str	00000000 
0000245e l       .debug_str	00000000 
00002493 l       .debug_str	00000000 
000024d5 l       .debug_str	00000000 
0005d725 l       .debug_str	00000000 
0000251f l       .debug_str	00000000 
00002525 l       .debug_str	00000000 
0000252b l       .debug_str	00000000 
00002531 l       .debug_str	00000000 
0000255a l       .debug_str	00000000 
00002537 l       .debug_str	00000000 
0000256b l       .debug_str	00000000 
000025ac l       .debug_str	00000000 
000025f5 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
0005e5af l       .debug_str	00000000 
000025ff l       .debug_str	00000000 
00002605 l       .debug_str	00000000 
0000260b l       .debug_str	00000000 
00002634 l       .debug_str	00000000 
00002611 l       .debug_str	00000000 
00002645 l       .debug_str	00000000 
00002686 l       .debug_str	00000000 
0005d7dd l       .debug_str	00000000 
000026cf l       .debug_str	00000000 
000026fb l       .debug_str	00000000 
000026d8 l       .debug_str	00000000 
0000270c l       .debug_str	00000000 
0000274d l       .debug_str	00000000 
00002796 l       .debug_str	00000000 
0005e783 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027a4 l       .debug_str	00000000 
000027ab l       .debug_str	00000000 
000027d6 l       .debug_str	00000000 
000027b3 l       .debug_str	00000000 
000027e8 l       .debug_str	00000000 
0000282a l       .debug_str	00000000 
0005e44b l       .debug_str	00000000 
00002874 l       .debug_str	00000000 
0000287a l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
00002886 l       .debug_str	00000000 
0000288c l       .debug_str	00000000 
00002894 l       .debug_str	00000000 
000028a2 l       .debug_str	00000000 
000028b1 l       .debug_str	00000000 
000028c2 l       .debug_str	00000000 
000028cd l       .debug_str	00000000 
000028d8 l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028ea l       .debug_str	00000000 
00002930 l       .debug_str	00000000 
0000290d l       .debug_str	00000000 
00002942 l       .debug_str	00000000 
00002984 l       .debug_str	00000000 
0005d8e0 l       .debug_str	00000000 
000029ce l       .debug_str	00000000 
000029fb l       .debug_str	00000000 
000029d8 l       .debug_str	00000000 
00002a0d l       .debug_str	00000000 
00002a4f l       .debug_str	00000000 
00002a99 l       .debug_str	00000000 
00002a9e l       .debug_str	00000000 
00002acb l       .debug_str	00000000 
00002aa8 l       .debug_str	00000000 
00002add l       .debug_str	00000000 
00002b1f l       .debug_str	00000000 
00002b69 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00002be8 l       .debug_str	00000000 
00002b7d l       .debug_str	00000000 
00002b8d l       .debug_str	00000000 
00002b96 l       .debug_str	00000000 
00002ba1 l       .debug_str	00000000 
00002bb0 l       .debug_str	00000000 
00002bc5 l       .debug_str	00000000 
00002bf6 l       .debug_str	00000000 
00002c93 l       .debug_str	00000000 
00002d38 l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d4c l       .debug_str	00000000 
00002d90 l       .debug_str	00000000 
00002d6d l       .debug_str	00000000 
00002da3 l       .debug_str	00000000 
00002e26 l       .debug_str	00000000 
00002eb1 l       .debug_str	00000000 
00002ecd l       .debug_str	00000000 
00002f19 l       .debug_str	00000000 
00002f6d l       .debug_str	00000000 
00002f8a l       .debug_str	00000000 
00002f9e l       .debug_str	00000000 
00002fea l       .debug_str	00000000 
0000303e l       .debug_str	00000000 
00003054 l       .debug_str	00000000 
00003068 l       .debug_str	00000000 
000030af l       .debug_str	00000000 
000030fe l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003107 l       .debug_str	00000000 
00003138 l       .debug_str	00000000 
0000313e l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314d l       .debug_str	00000000 
00003dc6 l       .debug_str	00000000 
0000315d l       .debug_str	00000000 
00033f31 l       .debug_str	00000000 
0000316c l       .debug_str	00000000 
00003df8 l       .debug_str	00000000 
00003177 l       .debug_str	00000000 
00003182 l       .debug_str	00000000 
00003193 l       .debug_str	00000000 
00003199 l       .debug_str	00000000 
000031a1 l       .debug_str	00000000 
000031a8 l       .debug_str	00000000 
000031b2 l       .debug_str	00000000 
000031ba l       .debug_str	00000000 
000031c2 l       .debug_str	00000000 
000031e4 l       .debug_str	00000000 
000031ef l       .debug_str	00000000 
000031fb l       .debug_str	00000000 
00003203 l       .debug_str	00000000 
0000320c l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00003217 l       .debug_str	00000000 
00003222 l       .debug_str	00000000 
0000322d l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d851 l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
0000323d l       .debug_str	00000000 
0000324d l       .debug_str	00000000 
0000325c l       .debug_str	00000000 
00003264 l       .debug_str	00000000 
0000326b l       .debug_str	00000000 
00003273 l       .debug_str	00000000 
000032b4 l       .debug_str	00000000 
00003291 l       .debug_str	00000000 
000032c4 l       .debug_str	00000000 
000032d9 l       .debug_str	00000000 
000032e2 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
000033a4 l       .debug_str	00000000 
000033ae l       .debug_str	00000000 
000033be l       .debug_str	00000000 
000033d3 l       .debug_str	00000000 
000033db l       .debug_str	00000000 
0000343f l       .debug_str	00000000 
000034ab l       .debug_str	00000000 
000034b2 l       .debug_str	00000000 
000034ba l       .debug_str	00000000 
000034fb l       .debug_str	00000000 
000034d8 l       .debug_str	00000000 
0000350b l       .debug_str	00000000 
00003520 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
0000354f l       .debug_str	00000000 
00003564 l       .debug_str	00000000 
0000b1d7 l       .debug_str	00000000 
0000b569 l       .debug_str	00000000 
0000b5cc l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
0000b64c l       .debug_str	00000000 
0000b6af l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000017fa l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 57lqf44sdwu8qayr
00000c71 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4c8 l       .debug_str	00000000 
0000ba46 l       .debug_str	00000000 
0000ba77 l       .debug_str	00000000 
0000bd0a l       .debug_str	00000000 
0000ba91 l       .debug_str	00000000 
0000bac2 l       .debug_str	00000000 
0000bb40 l       .debug_str	00000000 
0000baf2 l       .debug_str	00000000 
0000bb23 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
0000bb33 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
0000bb3f l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0000bb45 l       .debug_str	00000000 
0000bb97 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
0000bbea l       .debug_str	00000000 
0000bc53 l       .debug_str	00000000 
0001f4bc l       .debug_str	00000000 
0000bca6 l       .debug_str	00000000 
0000bd09 l       .debug_str	00000000 
0000bd35 l       .debug_str	00000000 
0000bdae l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005feeb l       .debug_str	00000000 
00001521 l       .debug_str	00000000 
00000e2c l       .debug_str	00000000 
0000b7ab l       .debug_str	00000000 
0000bd2b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
0000b7ba l       .debug_str	00000000 
0000b802 l       .debug_str	00000000 
0000b80b l       .debug_str	00000000 
0000b853 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000b85b l       .debug_str	00000000 
0000b466 l       .debug_str	00000000 
0000b8a3 l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000b8f4 l       .debug_str	00000000 
0000b93c l       .debug_str	00000000 
0000b945 l       .debug_str	00000000 
0000b976 l       .debug_str	00000000 
00018bd1 l       .debug_str	00000000 
0000b97f l       .debug_str	00000000 
0000b9b0 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
000017fa l       .debug_str	00000000 
0000b9ba l       .debug_str	00000000 
0000b9eb l       .debug_str	00000000 
00018be5 l       .debug_str	00000000 
0000ba0b l       .debug_str	00000000 
0000ba3c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394ec l       .debug_str	00000000 
0005cbd5 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a847 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dmg7ylzo67ab86f
0000bf55 l       .debug_str	00000000 
0000be52 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
0000beab l       .debug_str	00000000 
0000beb7 l       .debug_str	00000000 
0000befe l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
0000bf0a l       .debug_str	00000000 
0000bf65 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005e9d9 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000be01 l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f4e6 l       .debug_str	00000000 
00009440 l     F .text	00000044 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E
00000000 l    df *ABS*	00000000 2zydbnxo7qpu1b5q
0000c225 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c95 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025455 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00034a91 l       .debug_str	00000000 
0002f242 l       .debug_str	00000000 
0000c27e l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
00018d79 l       .debug_str	00000000 
0000c28e l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00018db4 l       .debug_str	00000000 
0000c2ce l       .debug_str	00000000 
0000c33d l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
00018bdb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
000163f2 l       .debug_str	00000000 
0000bfc3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005abf9 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000bfd4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000bfde l       .debug_str	00000000 
0000bfe9 l       .debug_str	00000000 
0000bff3 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00022a02 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
0000c042 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0005d5e6 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
000229e8 l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
0005aa19 l       .debug_str	00000000 
00022a2b l       .debug_str	00000000 
000604c1 l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
0005f8fd l       .debug_str	00000000 
0000c06e l       .debug_str	00000000 
0005ef55 l       .debug_str	00000000 
0000e5f2 l       .debug_str	00000000 
0000c071 l       .debug_str	00000000 
0000c0b1 l       .debug_str	00000000 
0000c0c0 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0000c108 l       .debug_str	00000000 
0000c14f l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003e620 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
0000c15d l       .debug_str	00000000 
0000c1a1 l       .debug_str	00000000 
0000c1ac l       .debug_str	00000000 
0000c1b5 l       .debug_str	00000000 
0000c1bd l       .debug_str	00000000 
0005c7fe l       .debug_str	00000000 
0000e660 l       .debug_str	00000000 
0005ae55 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
0000c1cc l       .debug_str	00000000 
0000c1d5 l       .debug_str	00000000 
0000c1e2 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
00043b8d l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c1e5 l       .debug_str	00000000 
0000c1fc l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
0005ab5f l       .debug_str	00000000 
00010428 l       .debug_str	00000000 
0000c212 l       .debug_str	00000000 
0000c218 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c21f l       .debug_str	00000000 
0001631a l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00018c4a l       .debug_str	00000000 
0005fd7e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
200000e8 l     O .data	00000008 _ZN22piet_embedded_graphics7display12SPI_SETTINGS17h78a64d1040fbeee1E
20000160 l     O .bss	00000004 _ZN22piet_embedded_graphics7display14BACKLIGHT_HIGH17hd6bdc29c96588211E
00000000 l    df *ABS*	00000000 3eyht9wxrw4fbo0o
0000e260 l       .debug_str	00000000 
0000e1c4 l       .debug_str	00000000 
0000e20a l       .debug_str	00000000 
0000e2a9 l       .debug_str	00000000 
0000e2ef l       .debug_str	00000000 
0000e660 l       .debug_str	00000000 
00010add l       .debug_str	00000000 
0000e329 l       .debug_str	00000000 
0000e370 l       .debug_str	00000000 
0000e3be l       .debug_str	00000000 
0000e40a l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c21f l       .debug_str	00000000 
0000c225 l       .debug_str	00000000 
0001631a l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00018c4a l       .debug_str	00000000 
0005fd7e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c95 l       .debug_str	00000000 
00025455 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
0002f242 l       .debug_str	00000000 
0000c27e l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
00018d79 l       .debug_str	00000000 
0000c28e l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00018db4 l       .debug_str	00000000 
0000c2ce l       .debug_str	00000000 
0000e44a l       .debug_str	00000000 
0000e4f6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e5c8 l       .debug_str	00000000 
0000e5e1 l       .debug_str	00000000 
0005ae55 l       .debug_str	00000000 
0001f404 l       .debug_str	00000000 
000117aa l       .debug_str	00000000 
0001cef3 l       .debug_str	00000000 
0000e631 l       .debug_str	00000000 
00040d47 l       .debug_str	00000000 
00019e64 l       .debug_str	00000000 
0003d8f7 l       .debug_str	00000000 
0000e634 l       .debug_str	00000000 
000221bd l       .debug_str	00000000 
000168e4 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00012647 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0002799b l       .debug_str	00000000 
00061200 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
00022504 l       .debug_str	00000000 
0000e63b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0002549a l       .debug_str	00000000 
0000e642 l       .debug_str	00000000 
0005d5e7 l       .debug_str	00000000 
0000c05e l       .debug_str	00000000 
000163f2 l       .debug_str	00000000 
0005c7fe l       .debug_str	00000000 
0000e64e l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000e666 l       .debug_str	00000000 
0000e672 l       .debug_str	00000000 
0000e67e l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000e68b l       .debug_str	00000000 
0006176d l       .debug_str	00000000 
0000e698 l       .debug_str	00000000 
0000e70f l       .debug_str	00000000 
0000e718 l       .debug_str	00000000 
0000e726 l       .debug_str	00000000 
00018cfb l       .debug_str	00000000 
0000e73e l       .debug_str	00000000 
0000e773 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c344 l       .debug_str	00000000 
0000c34d l       .debug_str	00000000 
0000c357 l       .debug_str	00000000 
0000c367 l       .debug_str	00000000 
0000e5d5 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0000c388 l       .debug_str	00000000 
0000c390 l       .debug_str	00000000 
0000c396 l       .debug_str	00000000 
0000c39c l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a9 l       .debug_str	00000000 
0000c3af l       .debug_str	00000000 
0000c3b5 l       .debug_str	00000000 
0000c3bc l       .debug_str	00000000 
0000c3c2 l       .debug_str	00000000 
0000c3ca l       .debug_str	00000000 
0000c3d1 l       .debug_str	00000000 
0000c3d7 l       .debug_str	00000000 
0000c3dd l       .debug_str	00000000 
0000c3e3 l       .debug_str	00000000 
0000c3e9 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c3f6 l       .debug_str	00000000 
0000c3fd l       .debug_str	00000000 
0000c405 l       .debug_str	00000000 
0000c40d l       .debug_str	00000000 
0000c415 l       .debug_str	00000000 
0000c41c l       .debug_str	00000000 
0000c424 l       .debug_str	00000000 
0000c42b l       .debug_str	00000000 
0000c432 l       .debug_str	00000000 
0000c439 l       .debug_str	00000000 
0000c440 l       .debug_str	00000000 
0000c447 l       .debug_str	00000000 
0000c44e l       .debug_str	00000000 
0000c454 l       .debug_str	00000000 
0000c45a l       .debug_str	00000000 
0000c460 l       .debug_str	00000000 
0000c466 l       .debug_str	00000000 
0000c46d l       .debug_str	00000000 
0000c475 l       .debug_str	00000000 
0000e801 l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
0005ee5a l       .debug_str	00000000 
0000c488 l       .debug_str	00000000 
0005d5e6 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
000229e8 l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
0005aa19 l       .debug_str	00000000 
00022a2b l       .debug_str	00000000 
000604c1 l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
0005f8fd l       .debug_str	00000000 
0000c06e l       .debug_str	00000000 
0005ef55 l       .debug_str	00000000 
0000e5f2 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000c494 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0000c4a4 l       .debug_str	00000000 
0000c4e0 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
0000c4ff l       .debug_str	00000000 
0000c54d l       .debug_str	00000000 
0000c58e l       .debug_str	00000000 
0000c5fa l       .debug_str	00000000 
0000c63c l       .debug_str	00000000 
0000c6a8 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006014d l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c26b l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035945 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac4e l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
0005ab5f l       .debug_str	00000000 
0002b9cc l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027857 l       .debug_str	00000000 
00034a91 l       .debug_str	00000000 
0000dc1e l       .debug_str	00000000 
0000dc6c l       .debug_str	00000000 
0000ddec l       .debug_str	00000000 
0000de3a l       .debug_str	00000000 
0000de7b l       .debug_str	00000000 
0000dec9 l       .debug_str	00000000 
0000df0a l       .debug_str	00000000 
0000df5a l       .debug_str	00000000 
0000e0dc l       .debug_str	00000000 
0000e12d l       .debug_str	00000000 
0000e171 l       .debug_str	00000000 
0001e5d0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3sr9zgbizuzi7j5h
0000c488 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e7e7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0000c388 l       .debug_str	00000000 
0000c390 l       .debug_str	00000000 
0000c396 l       .debug_str	00000000 
0000c39c l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a9 l       .debug_str	00000000 
0000c3af l       .debug_str	00000000 
0000c3b5 l       .debug_str	00000000 
0000c3bc l       .debug_str	00000000 
0000c3c2 l       .debug_str	00000000 
0000c3ca l       .debug_str	00000000 
0000c3d1 l       .debug_str	00000000 
0000c3d7 l       .debug_str	00000000 
0000c3dd l       .debug_str	00000000 
0000c3e3 l       .debug_str	00000000 
0000c3e9 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c3f6 l       .debug_str	00000000 
0000c3fd l       .debug_str	00000000 
0000c405 l       .debug_str	00000000 
0000c40d l       .debug_str	00000000 
0000c415 l       .debug_str	00000000 
0000c41c l       .debug_str	00000000 
0000c424 l       .debug_str	00000000 
0000c42b l       .debug_str	00000000 
0000c432 l       .debug_str	00000000 
0000c439 l       .debug_str	00000000 
0000c440 l       .debug_str	00000000 
0000c447 l       .debug_str	00000000 
0000c44e l       .debug_str	00000000 
0000c454 l       .debug_str	00000000 
0000c45a l       .debug_str	00000000 
0000c460 l       .debug_str	00000000 
0000c466 l       .debug_str	00000000 
0000c46d l       .debug_str	00000000 
0000c475 l       .debug_str	00000000 
0000e801 l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
0005ee5a l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0000e77f l       .debug_str	00000000 
0000e7bb l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44cnu8660c26myi6
0000e85c l       .debug_str	00000000 
0000e851 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
0000e89a l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005e9d9 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000e80d l       .debug_str	00000000 
0000a6ae l     F .text	0000001e _ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E
00000000 l    df *ABS*	00000000 469um0xjm96v8cgk
0000f305 l       .debug_str	00000000 
0000f929 l       .debug_str	00000000 
0000fa7c l       .debug_str	00000000 
0000faac l       .debug_str	00000000 
0000c1cc l       .debug_str	00000000 
0000c1d5 l       .debug_str	00000000 
0000c1e2 l       .debug_str	00000000 
00043b8d l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c1e5 l       .debug_str	00000000 
0000c1fc l       .debug_str	00000000 
00010428 l       .debug_str	00000000 
0001040b l       .debug_str	00000000 
0000fbd3 l       .debug_str	00000000 
0000fc03 l       .debug_str	00000000 
000104af l       .debug_str	00000000 
00010451 l       .debug_str	00000000 
0000fc45 l       .debug_str	00000000 
0000fc75 l       .debug_str	00000000 
0000fcc4 l       .debug_str	00000000 
0000fcf4 l       .debug_str	00000000 
0000fd06 l       .debug_str	00000000 
0000fd36 l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
0000fd78 l       .debug_str	00000000 
0000fda5 l       .debug_str	00000000 
0000fde8 l       .debug_str	00000000 
0000fdfe l       .debug_str	00000000 
0000ff42 l       .debug_str	00000000 
0000ffde l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
000100c1 l       .debug_str	00000000 
000101a0 l       .debug_str	00000000 
000102e9 l       .debug_str	00000000 
00010406 l       .debug_str	00000000 
0001043e l       .debug_str	00000000 
00010483 l       .debug_str	00000000 
0001048b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
0000e8a7 l       .debug_str	00000000 
0000e8ac l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0000e8d1 l       .debug_str	00000000 
0000e8d8 l       .debug_str	00000000 
0000e8dd l       .debug_str	00000000 
0000e918 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
0000e94f l       .debug_str	00000000 
0000e97f l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
0000e992 l       .debug_str	00000000 
0000e998 l       .debug_str	00000000 
0000e99f l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000e634 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006014d l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c26b l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035945 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac4e l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000e9a7 l       .debug_str	00000000 
0000eab9 l       .debug_str	00000000 
0000ebe8 l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
0005ab5f l       .debug_str	00000000 
0002b894 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002773a l       .debug_str	00000000 
0000fd9c l       .debug_str	00000000 
0000ed16 l       .debug_str	00000000 
0000ed46 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000fdb8 l       .debug_str	00000000 
0000ed7d l       .debug_str	00000000 
0000edad l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
00015d26 l       .debug_str	00000000 
0000edfa l       .debug_str	00000000 
0000ee2a l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0002b9cc l       .debug_str	00000000 
00027857 l       .debug_str	00000000 
0000ee4a l       .debug_str	00000000 
0000ee7a l       .debug_str	00000000 
0000e778 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
0000efdd l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00018c4a l       .debug_str	00000000 
0000efe6 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c95 l       .debug_str	00000000 
00025455 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00034a91 l       .debug_str	00000000 
0002f242 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002f1d6 l       .debug_str	00000000 
0000eff3 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
0002dcb8 l       .debug_str	00000000 
0000efff l       .debug_str	00000000 
0000f02f l       .debug_str	00000000 
0000f0d5 l       .debug_str	00000000 
0000f0da l       .debug_str	00000000 
0000f0e0 l       .debug_str	00000000 
0000f0e9 l       .debug_str	00000000 
0005d25f l       .debug_str	00000000 
0002dd5f l       .debug_str	00000000 
0000f0f3 l       .debug_str	00000000 
0000f123 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea9d l       .debug_str	00000000 
00024c33 l       .debug_str	00000000 
0002566c l       .debug_str	00000000 
0000f1fd l       .debug_str	00000000 
0000f22d l       .debug_str	00000000 
0000f250 l       .debug_str	00000000 
0000f27d l       .debug_str	00000000 
0000f29e l       .debug_str	00000000 
0000f3a5 l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0000f47f l       .debug_str	00000000 
0000f4f6 l       .debug_str	00000000 
0000f57a l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
0000f693 l       .debug_str	00000000 
0000f73e l       .debug_str	00000000 
00028da6 l       .debug_str	00000000 
000284dd l       .debug_str	00000000 
00028814 l       .debug_str	00000000 
0002b79a l       .debug_str	00000000 
00027402 l       .debug_str	00000000 
0000f7e0 l       .debug_str	00000000 
0000f810 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0002799b l       .debug_str	00000000 
0000f8f9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 49htiubyezwzqodr
0005a7be l       .debug_str	00000000 
000104ba l       .debug_str	00000000 
000104eb l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00018bdb l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
000104f4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1vm1jsf9206jqt1a
00013366 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010658 l       .debug_str	00000000 
00010664 l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
0002543a l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e7e7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010546 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0000c388 l       .debug_str	00000000 
0000c390 l       .debug_str	00000000 
0000c396 l       .debug_str	00000000 
0000c39c l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a9 l       .debug_str	00000000 
0000c3af l       .debug_str	00000000 
0000c3b5 l       .debug_str	00000000 
0000c3bc l       .debug_str	00000000 
0000c3c2 l       .debug_str	00000000 
0000c3ca l       .debug_str	00000000 
0000c3d1 l       .debug_str	00000000 
0000c3d7 l       .debug_str	00000000 
0000c3dd l       .debug_str	00000000 
0000c3e3 l       .debug_str	00000000 
0000c3e9 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c3f6 l       .debug_str	00000000 
0000c3fd l       .debug_str	00000000 
0000c405 l       .debug_str	00000000 
0000c40d l       .debug_str	00000000 
0000c415 l       .debug_str	00000000 
0000c41c l       .debug_str	00000000 
0000c424 l       .debug_str	00000000 
0000c42b l       .debug_str	00000000 
0000c432 l       .debug_str	00000000 
0000c439 l       .debug_str	00000000 
0000c440 l       .debug_str	00000000 
0000c447 l       .debug_str	00000000 
0000c44e l       .debug_str	00000000 
0000c454 l       .debug_str	00000000 
0000c45a l       .debug_str	00000000 
0000c460 l       .debug_str	00000000 
0000c466 l       .debug_str	00000000 
0000c46d l       .debug_str	00000000 
0000c475 l       .debug_str	00000000 
0000e801 l       .debug_str	00000000 
0001056a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010590 l       .debug_str	00000000 
00010651 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3on1efjgx1q5grpf
0002543a l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e5c8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010546 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c344 l       .debug_str	00000000 
0000c34d l       .debug_str	00000000 
0000c357 l       .debug_str	00000000 
0000c367 l       .debug_str	00000000 
0000e5d5 l       .debug_str	00000000 
0001072c l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010752 l       .debug_str	00000000 
00010651 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010658 l       .debug_str	00000000 
000107f9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dxw5xp80tje79rx
000012f5 l       .debug_str	00000000 
000108f0 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010546 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010658 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
0001056a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
000117aa l       .debug_str	00000000 
0005f748 l       .debug_str	00000000 
000108a0 l       .debug_str	00000000 
000108d9 l       .debug_str	00000000 
0002543a l       .debug_str	00000000 
0001072c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2y6wwi1wx5h1fq
0000237d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010546 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c378 l       .debug_str	00000000 
0001056a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
00010929 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
000117aa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1ai0eloc31rxz52x
00010a89 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00010a14 l       .debug_str	00000000 
00033cbf l       .debug_str	00000000 
0000e8a7 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00010a77 l       .debug_str	00000000 
00010a6b l       .debug_str	00000000 
0001f37b l       .debug_str	00000000 
00010a7e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1v17h907p30pylh6
00000d77 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4c8 l       .debug_str	00000000 
0001f4bc l       .debug_str	00000000 
00060023 l       .debug_str	00000000 
0005d4de l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4c7 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00059f0c l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00060302 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
0005e62e l       .debug_str	00000000 
00012647 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005d002 l       .debug_str	00000000 
000612f5 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016223 l       .debug_str	00000000 
00061200 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0005c26b l       .debug_str	00000000 
00010e2d l       .debug_str	00000000 
00010e54 l       .debug_str	00000000 
00010e5c l       .debug_str	00000000 
00010e63 l       .debug_str	00000000 
00010e69 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005d018 l       .debug_str	00000000 
00010e76 l       .debug_str	00000000 
00010e85 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00010e93 l       .debug_str	00000000 
00010e98 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005cd2b l       .debug_str	00000000 
00010cd4 l       .debug_str	00000000 
00010a94 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0005aa19 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00022a2b l       .debug_str	00000000 
00010aa0 l       .debug_str	00000000 
00010ad7 l       .debug_str	00000000 
0000e660 l       .debug_str	00000000 
00010ae3 l       .debug_str	00000000 
00010b1a l       .debug_str	00000000 
00010b25 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00010b2d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00010b34 l       .debug_str	00000000 
00010b3b l       .debug_str	00000000 
000603a0 l       .debug_str	00000000 
00010b44 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005abdc l       .debug_str	00000000 
00010b4e l       .debug_str	00000000 
00010e45 l       .debug_str	00000000 
00010b58 l       .debug_str	00000000 
0001a03d l       .debug_str	00000000 
00010b8e l       .debug_str	00000000 
00010bbc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0004260a l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d851 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
00010bc8 l       .debug_str	00000000 
00010bff l       .debug_str	00000000 
0005abf9 l       .debug_str	00000000 
0005fed4 l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
0006014d l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00010c08 l       .debug_str	00000000 
00010c1c l       .debug_str	00000000 
00010c4f l       .debug_str	00000000 
00010c5a l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010c90 l       .debug_str	00000000 
00010cce l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
0003e620 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
00010ce1 l       .debug_str	00000000 
00010d24 l       .debug_str	00000000 
00010d3c l       .debug_str	00000000 
00010d7c l       .debug_str	00000000 
00010d91 l       .debug_str	00000000 
00010dcb l       .debug_str	00000000 
00010dda l       .debug_str	00000000 
00010e19 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
0005ae55 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00018bd1 l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394ec l       .debug_str	00000000 
0005cbd5 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a847 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
20000214 l     O .bss	00000001 _ZN3app12touch_sensor10I2C_BUFFER17h8c3d62e53c42ce39E
20000168 l     O .bss	00000052 _ZN3app12touch_sensor10TOUCH_DATA17h1dd6b74134f2575dE
20000168 l     O .bss	00000000 _ZN3app12touch_sensor11TOUCH_DELAY17h6bb1c96a489889baE
200001fc l     O .bss	00000010 _ZN3app12touch_sensor11TOUCH_EVENT17hb169e5084280c5b1E
20000164 l     O .bss	00000004 _ZN3app12touch_sensor11TOUCH_RESET17h950734ac5f86de57E
0000b1f4 l     F .text	00000752 _ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E
0000b946 l     F .text	0000019a _ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E
0000b0ba l     F .text	0000013a _ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E
0000b06e l     F .text	0000004c _ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE
200001ba l     O .bss	0000003f _ZN3app12touch_sensor3BUF17h9edf4dcfe692b5b1E
2000020c l     O .bss	00000008 _ZN3app12touch_sensor8I2C_DATA17hb66b2debc1d16188E
0001e7f0 l     O .text	00000021 str.0
0001e830 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 25jm3tkgfnhczjfh
000114f8 l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
0003e620 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
00011020 l       .debug_str	00000000 
000224aa l       .debug_str	00000000 
0001104c l       .debug_str	00000000 
0003f910 l       .debug_str	00000000 
0001107b l       .debug_str	00000000 
0005a8d8 l       .debug_str	00000000 
000110d5 l       .debug_str	00000000 
0003d8f6 l       .debug_str	00000000 
0001112e l       .debug_str	00000000 
0001118c l       .debug_str	00000000 
00011195 l       .debug_str	00000000 
000111f3 l       .debug_str	00000000 
000111fc l       .debug_str	00000000 
0001125f l       .debug_str	00000000 
0001126c l       .debug_str	00000000 
000112cb l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000112d5 l       .debug_str	00000000 
000112e4 l       .debug_str	00000000 
0001133f l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00011345 l       .debug_str	00000000 
0001139f l       .debug_str	00000000 
000113a4 l       .debug_str	00000000 
0005bb9b l       .debug_str	00000000 
000113ff l       .debug_str	00000000 
00011430 l       .debug_str	00000000 
0001143e l       .debug_str	00000000 
0001146e l       .debug_str	00000000 
0001147b l       .debug_str	00000000 
000114b0 l       .debug_str	00000000 
000114ed l       .debug_str	00000000 
000114fc l       .debug_str	00000000 
00011500 l       .debug_str	00000000 
00011511 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00011584 l       .debug_str	00000000 
00011590 l       .debug_str	00000000 
000115c0 l       .debug_str	00000000 
000115cd l       .debug_str	00000000 
00011629 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
0000efdd l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00018c4a l       .debug_str	00000000 
0000efe6 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c95 l       .debug_str	00000000 
00025455 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00034a91 l       .debug_str	00000000 
0002f242 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002f16b l       .debug_str	00000000 
0005ae55 l       .debug_str	00000000 
00060022 l       .debug_str	00000000 
00011634 l       .debug_str	00000000 
0001163d l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00011646 l       .debug_str	00000000 
00012c3b l       .debug_str	00000000 
00011649 l       .debug_str	00000000 
0004cc82 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0005b694 l       .debug_str	00000000 
0005ffad l       .debug_str	00000000 
0002543a l       .debug_str	00000000 
0001164c l       .debug_str	00000000 
0005abf9 l       .debug_str	00000000 
0001260c l       .debug_str	00000000 
0005c07a l       .debug_str	00000000 
00011654 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00011660 l       .debug_str	00000000 
0003d8f5 l       .debug_str	00000000 
00010a7c l       .debug_str	00000000 
00046830 l       .debug_str	00000000 
0005bef2 l       .debug_str	00000000 
00010f6c l       .debug_str	00000000 
00010f77 l       .debug_str	00000000 
00010f84 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0001167a l       .debug_str	00000000 
00011475 l       .debug_str	00000000 
00011681 l       .debug_str	00000000 
00011f51 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
0000237c l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0001169c l       .debug_str	00000000 
000116a7 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
000116b3 l       .debug_str	00000000 
000116be l       .debug_str	00000000 
000116c9 l       .debug_str	00000000 
000116d4 l       .debug_str	00000000 
000116df l       .debug_str	00000000 
000116ea l       .debug_str	00000000 
000116f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005cd2b l       .debug_str	00000000 
00011640 l       .debug_str	00000000 
00010e9c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0004260a l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4c7 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00059f0c l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00060302 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
00010ea7 l       .debug_str	00000000 
00010ed5 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00010ee6 l       .debug_str	00000000 
00010f1a l       .debug_str	00000000 
00010f28 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00010f59 l       .debug_str	00000000 
00010f65 l       .debug_str	00000000 
00010f70 l       .debug_str	00000000 
00010f7d l       .debug_str	00000000 
00010f8b l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
00010f9a l       .debug_str	00000000 
00011671 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00010fac l       .debug_str	00000000 
00010fb5 l       .debug_str	00000000 
00010fbe l       .debug_str	00000000 
00010fc9 l       .debug_str	00000000 
00010fd5 l       .debug_str	00000000 
00010fdf l       .debug_str	00000000 
00011f62 l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
00010fec l       .debug_str	00000000 
00011017 l       .debug_str	00000000 
20000218 l     O .bss	00000050 _ZN3app5chip810CHIP8_TASK17hdc3e015a60662be5E
0000c564 l     F .text	000000a8 _ZN3app5chip812render_block17hf14dcded684223a2E
0000c642 l     F .text	00000364 _ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE
0000c60c l     F .text	00000036 _ZN3app5chip813PixelIterator3new17h822e2c1da3bbcd7bE
20004268 l     O .bss	00000800 _ZN3app5chip813SCREEN_BUFFER17hf6360141ad32453fE
0000c262 l     F .text	00000302 _ZN3app5chip813render_region17h63a2f42595e40485E
20000268 l     O .bss	00004000 _ZN3app5chip816CHIP8_TASK_STACK17hb31f2a0cca07481dE
0000bccc l     F .text	00000010 _ZN3app5chip88Hardware3new17h7d277b7134505907E
0000bc16 l     F .text	000000b6 _ZN3app5chip89task_func17h385831a0096277b5E
0001f090 l     O .text	00000021 str.0
0001f0d0 l     O .text	0000001c str.1
0001f1b0 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 2c6bdy6rt6z3zh1y
00011900 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
0003e620 l       .debug_str	00000000 
000118c5 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00011969 l       .debug_str	00000000 
000119d4 l       .debug_str	00000000 
00011a10 l       .debug_str	00000000 
00011a5d l       .debug_str	00000000 
00011a99 l       .debug_str	00000000 
00011aa7 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
00011b2d l       .debug_str	00000000 
00011b99 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0005ae55 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00011bf0 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
00012647 l       .debug_str	00000000 
00011700 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005d002 l       .debug_str	00000000 
000612f5 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016223 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0001163d l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
000117aa l       .debug_str	00000000 
000229ea l       .debug_str	00000000 
0005f748 l       .debug_str	00000000 
00011724 l       .debug_str	00000000 
00011709 l       .debug_str	00000000 
00011753 l       .debug_str	00000000 
00011c03 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001f430 l       .debug_str	00000000 
00001425 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000112d5 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
000117a5 l       .debug_str	00000000 
000117b4 l       .debug_str	00000000 
000117ed l       .debug_str	00000000 
00011816 l       .debug_str	00000000 
000160fe l       .debug_str	00000000 
0001182d l       .debug_str	00000000 
00011866 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xbkmlpi4vyn2qbv
0003d8f7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
000163f2 l       .debug_str	00000000 
0000e634 l       .debug_str	00000000 
0005cd2b l       .debug_str	00000000 
00011640 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00010fac l       .debug_str	00000000 
00010fb5 l       .debug_str	00000000 
00010fbe l       .debug_str	00000000 
00010fc9 l       .debug_str	00000000 
00010fd5 l       .debug_str	00000000 
00010fdf l       .debug_str	00000000 
00011f62 l       .debug_str	00000000 
00011f51 l       .debug_str	00000000 
00034a91 l       .debug_str	00000000 
00011c50 l       .debug_str	00000000 
00011c9c l       .debug_str	00000000 
0000e631 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00040d47 l       .debug_str	00000000 
00019e64 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 36ol61x1a5do2305
00011dcd l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000e5e1 l       .debug_str	00000000 
0000e631 l       .debug_str	00000000 
00040d47 l       .debug_str	00000000 
00019e64 l       .debug_str	00000000 
0003d8f7 l       .debug_str	00000000 
0000e634 l       .debug_str	00000000 
0005ae55 l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
00012647 l       .debug_str	00000000 
00061200 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0005d5e6 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
000229e8 l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
0005aa19 l       .debug_str	00000000 
00022a2b l       .debug_str	00000000 
000604c1 l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
0005f8fd l       .debug_str	00000000 
0000c06e l       .debug_str	00000000 
0005ef55 l       .debug_str	00000000 
0000e5f2 l       .debug_str	00000000 
0005cd2b l       .debug_str	00000000 
00011640 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00010fac l       .debug_str	00000000 
00010fb5 l       .debug_str	00000000 
00010fbe l       .debug_str	00000000 
00010fc9 l       .debug_str	00000000 
00010fd5 l       .debug_str	00000000 
00010fdf l       .debug_str	00000000 
00011f62 l       .debug_str	00000000 
00011f51 l       .debug_str	00000000 
00034a91 l       .debug_str	00000000 
00011ccf l       .debug_str	00000000 
00011d1d l       .debug_str	00000000 
00011d7d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4ae8jurj2cyz895o
000002a2 l       .debug_str	00000000 
00011f2c l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011584 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00011f4c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00012647 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00011e2f l       .debug_str	00000000 
0005cd2b l       .debug_str	00000000 
00011640 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00010fac l       .debug_str	00000000 
00010fb5 l       .debug_str	00000000 
00010fbe l       .debug_str	00000000 
00010fc9 l       .debug_str	00000000 
00010fd5 l       .debug_str	00000000 
00010fdf l       .debug_str	00000000 
00011f62 l       .debug_str	00000000 
00011f51 l       .debug_str	00000000 
000229ea l       .debug_str	00000000 
00011e38 l       .debug_str	00000000 
00011e9b l       .debug_str	00000000 
00011ec5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4vqyywb7xxbk2fnk
000122a0 l       .debug_str	00000000 
00043b8d l       .debug_str	00000000 
00012631 l       .debug_str	00000000 
00002450 l       .debug_str	00000000 
0001262d l       .debug_str	00000000 
00012628 l       .debug_str	00000000 
000221bd l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c07a l       .debug_str	00000000 
000117aa l       .debug_str	00000000 
0005f748 l       .debug_str	00000000 
00011fb7 l       .debug_str	00000000 
00012043 l       .debug_str	00000000 
00012647 l       .debug_str	00000000 
00011700 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005d002 l       .debug_str	00000000 
000612f5 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016223 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
000229ea l       .debug_str	00000000 
00011724 l       .debug_str	00000000 
00012060 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000112d5 l       .debug_str	00000000 
000120ec l       .debug_str	00000000 
00012121 l       .debug_str	00000000 
0001213b l       .debug_str	00000000 
00012170 l       .debug_str	00000000 
000125fd l       .debug_str	00000000 
0005a847 l       .debug_str	00000000 
000117a5 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001218a l       .debug_str	00000000 
000125de l       .debug_str	00000000 
000125a4 l       .debug_str	00000000 
000121bf l       .debug_str	00000000 
00012586 l       .debug_str	00000000 
000121d9 l       .debug_str	00000000 
0001220f l       .debug_str	00000000 
0001254d l       .debug_str	00000000 
00012531 l       .debug_str	00000000 
0001222a l       .debug_str	00000000 
000124fa l       .debug_str	00000000 
000124de l       .debug_str	00000000 
000124a7 l       .debug_str	00000000 
0001248c l       .debug_str	00000000 
00012456 l       .debug_str	00000000 
0001243b l       .debug_str	00000000 
00012405 l       .debug_str	00000000 
000123ea l       .debug_str	00000000 
000123b4 l       .debug_str	00000000 
00012399 l       .debug_str	00000000 
00012363 l       .debug_str	00000000 
00012348 l       .debug_str	00000000 
00012312 l       .debug_str	00000000 
0001227e l       .debug_str	00000000 
000132b2 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0001266f l       .debug_str	00000000 
0001266b l       .debug_str	00000000 
0005ae36 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00059b32 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00011f70 l       .debug_str	00000000 
00015d26 l       .debug_str	00000000 
00011f74 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
000343fe l       .debug_str	00000000 
00011f79 l       .debug_str	00000000 
0001f612 l       .debug_str	00000000 
0001f467 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00033353 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0001163d l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00011646 l       .debug_str	00000000 
00012c3b l       .debug_str	00000000 
00011649 l       .debug_str	00000000 
0004cc82 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0005b694 l       .debug_str	00000000 
0005ffad l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00012665 l       .debug_str	00000000 
0001265f l       .debug_str	00000000 
00012659 l       .debug_str	00000000 
00012653 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005d018 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00061200 l       .debug_str	00000000 
00002535 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00018bdb l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
00012650 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002543a l       .debug_str	00000000 
0001164c l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
0005abf9 l       .debug_str	00000000 
0005cd2b l       .debug_str	00000000 
0005a6ba l       .debug_str	00000000 
00011640 l       .debug_str	00000000 
00010f59 l       .debug_str	00000000 
00010f65 l       .debug_str	00000000 
00010f70 l       .debug_str	00000000 
00010f7d l       .debug_str	00000000 
00010f8b l       .debug_str	00000000 
00010f9a l       .debug_str	00000000 
00011671 l       .debug_str	00000000 
0001260c l       .debug_str	00000000 
00011f7f l       .debug_str	00000000 
00011fa5 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00011faf l       .debug_str	00000000 
0005ab5f l       .debug_str	00000000 
000160fe l       .debug_str	00000000 
0001264c l       .debug_str	00000000 
0005b7cc l       .debug_str	00000000 
00012a96 l       .debug_str	00000000 
00012b08 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00012643 l       .debug_str	00000000 
00011c03 l       .debug_str	00000000 
00012639 l       .debug_str	00000000 
0001f4c0 l     O .text	0000001c str.0
0001f740 l     O .text	00000021 str.1
0001fa20 l     O .text	00000039 str.2
0001fa80 l     O .text	00000021 str.3
0001fac0 l     O .text	00000023 str.4
00000000 l    df *ABS*	00000000 5amxpeuxwufgc2g7
00012822 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000112d5 l       .debug_str	00000000 
00011816 l       .debug_str	00000000 
0001278e l       .debug_str	00000000 
0001286b l       .debug_str	00000000 
000128b5 l       .debug_str	00000000 
00012908 l       .debug_str	00000000 
00012997 l       .debug_str	00000000 
000129fa l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00012a72 l       .debug_str	00000000 
00012ae4 l       .debug_str	00000000 
00012ba2 l       .debug_str	00000000 
0005ae55 l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
00011709 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00012647 l       .debug_str	00000000 
00011700 l       .debug_str	00000000 
00012631 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00043b8d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005d002 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
000612f5 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016223 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0001163d l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000160fe l       .debug_str	00000000 
000117aa l       .debug_str	00000000 
000229ea l       .debug_str	00000000 
0005f748 l       .debug_str	00000000 
00011724 l       .debug_str	00000000 
00012639 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00011c03 l       .debug_str	00000000 
00012643 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00012b08 l       .debug_str	00000000 
00012a96 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00012674 l       .debug_str	00000000 
000126fe l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5eukf9ymd90dvsi0
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00012ba6 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00012bff l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00012bae l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5fcitodfeuns782f
00012c7e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00012c0c l       .debug_str	00000000 
00012c11 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00012c18 l       .debug_str	00000000 
00012c20 l       .debug_str	00000000 
0000bfe3 l       .debug_str	00000000 
00012c28 l       .debug_str	00000000 
00012c30 l       .debug_str	00000000 
00012c37 l       .debug_str	00000000 
000165e7 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00012c3e l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001f4ff l       .debug_str	00000000 
00012c93 l       .debug_str	00000000 
00012c43 l       .debug_str	00000000 
00033da5 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 tdisvxegs4w5usn
00012d9f l       .debug_str	00000000 
00012643 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00012b08 l       .debug_str	00000000 
00012a96 l       .debug_str	00000000 
00012d30 l       .debug_str	00000000 
00012d71 l       .debug_str	00000000 
00012de0 l       .debug_str	00000000 
00012e43 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000112d5 l       .debug_str	00000000 
0005ac4e l       .debug_str	00000000 
00012e93 l       .debug_str	00000000 
00012f13 l       .debug_str	00000000 
00011816 l       .debug_str	00000000 
00012f51 l       .debug_str	00000000 
00012fd1 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00011709 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00012647 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00011e2f l       .debug_str	00000000 
00036605 l       .debug_str	00000000 
00011700 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005d002 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
000612f5 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016223 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0001163d l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000117aa l       .debug_str	00000000 
000229ea l       .debug_str	00000000 
0005f748 l       .debug_str	00000000 
00011724 l       .debug_str	00000000 
000160fe l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
00012c9f l       .debug_str	00000000 
00012ce2 l       .debug_str	00000000 
00012631 l       .debug_str	00000000 
00043b8d l       .debug_str	00000000 
00012639 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00011c03 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 u3mfxzl87iwp64s
000130e3 l       .debug_str	00000000 
0005ac4e l       .debug_str	00000000 
000160fe l       .debug_str	00000000 
00013122 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000112d5 l       .debug_str	00000000 
00013195 l       .debug_str	00000000 
000131d4 l       .debug_str	00000000 
000132b2 l       .debug_str	00000000 
00013211 l       .debug_str	00000000 
00013274 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001329b l       .debug_str	00000000 
0005a6ba l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00012647 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00011e2f l       .debug_str	00000000 
00036605 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0005ab5f l       .debug_str	00000000 
00013045 l       .debug_str	00000000 
000130da l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005d002 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
000612f5 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016223 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
00011700 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0001163d l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
000117aa l       .debug_str	00000000 
000229ea l       .debug_str	00000000 
0005f748 l       .debug_str	00000000 
00011724 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.8j8txwjh-cgu.0
00014912 l       .debug_str	00000000 
00013903 l       .debug_str	00000000 
0001392d l       .debug_str	00000000 
0001397b l       .debug_str	00000000 
00013983 l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
000139d0 l       .debug_str	00000000 
00013a2a l       .debug_str	00000000 
00013a38 l       .debug_str	00000000 
00013a8b l       .debug_str	00000000 
00013a93 l       .debug_str	00000000 
00013ae8 l       .debug_str	00000000 
00013af2 l       .debug_str	00000000 
00013b30 l       .debug_str	00000000 
00013b4b l       .debug_str	00000000 
00013baa l       .debug_str	00000000 
00012ba3 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
00013c0f l       .debug_str	00000000 
00013c40 l       .debug_str	00000000 
00013c4b l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
00013c7d l       .debug_str	00000000 
00013cab l       .debug_str	00000000 
00013cbd l       .debug_str	00000000 
00013ce3 l       .debug_str	00000000 
00013cef l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
00013d36 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
0000bf65 l       .debug_str	00000000 
00013d81 l       .debug_str	00000000 
0005ab5f l       .debug_str	00000000 
00013d87 l       .debug_str	00000000 
00013e13 l       .debug_str	00000000 
00013e2e l       .debug_str	00000000 
00013e5e l       .debug_str	00000000 
00013e93 l       .debug_str	00000000 
00013ec3 l       .debug_str	00000000 
00013ed9 l       .debug_str	00000000 
00013f0f l       .debug_str	00000000 
00013f2a l       .debug_str	00000000 
00013f64 l       .debug_str	00000000 
00013f83 l       .debug_str	00000000 
00013fbf l       .debug_str	00000000 
00013fe5 l       .debug_str	00000000 
00013ff1 l       .debug_str	00000000 
00014018 l       .debug_str	00000000 
00014025 l       .debug_str	00000000 
00014232 l       .debug_str	00000000 
00014073 l       .debug_str	00000000 
000142a2 l       .debug_str	00000000 
000140c4 l       .debug_str	00000000 
00014116 l       .debug_str	00000000 
00014122 l       .debug_str	00000000 
0001416d l       .debug_str	00000000 
0001417f l       .debug_str	00000000 
000141c2 l       .debug_str	00000000 
000141cd l       .debug_str	00000000 
00014229 l       .debug_str	00000000 
0001423a l       .debug_str	00000000 
00014299 l       .debug_str	00000000 
000142ad l       .debug_str	00000000 
00014303 l       .debug_str	00000000 
00014398 l       .debug_str	00000000 
000143a4 l       .debug_str	00000000 
0001443e l       .debug_str	00000000 
0001444f l       .debug_str	00000000 
00014474 l       .debug_str	00000000 
0001451d l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0005ac4e l       .debug_str	00000000 
0001452e l       .debug_str	00000000 
000145b6 l       .debug_str	00000000 
0001456d l       .debug_str	00000000 
000145b1 l       .debug_str	00000000 
000145fb l       .debug_str	00000000 
0001463c l       .debug_str	00000000 
00014661 l       .debug_str	00000000 
000146b2 l       .debug_str	00000000 
000146f7 l       .debug_str	00000000 
0001474a l       .debug_str	00000000 
000147ab l       .debug_str	00000000 
00014812 l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
00014859 l       .debug_str	00000000 
000148a4 l       .debug_str	00000000 
000148b1 l       .debug_str	00000000 
0001498b l       .debug_str	00000000 
00014983 l       .debug_str	00000000 
00014993 l       .debug_str	00000000 
00003cf0 l       .debug_str	00000000 
000149af l       .debug_str	00000000 
00014a24 l       .debug_str	00000000 
00014a4f l       .debug_str	00000000 
00014ac8 l       .debug_str	00000000 
00014ad2 l       .debug_str	00000000 
00014af8 l       .debug_str	00000000 
00014b31 l       .debug_str	00000000 
000117a5 l       .debug_str	00000000 
00014b49 l       .debug_str	00000000 
00014b82 l       .debug_str	00000000 
00014bba l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
00014bf3 l       .debug_str	00000000 
00014c2e l       .debug_str	00000000 
00014c72 l       .debug_str	00000000 
00014cb8 l       .debug_str	00000000 
00014cf4 l       .debug_str	00000000 
00014d1c l       .debug_str	00000000 
00014d58 l       .debug_str	00000000 
00014d7c l       .debug_str	00000000 
00014dd9 l       .debug_str	00000000 
00014ded l       .debug_str	00000000 
00014e3e l       .debug_str	00000000 
00015d26 l       .debug_str	00000000 
00014e4a l       .debug_str	00000000 
00014e9b l       .debug_str	00000000 
00014eb2 l       .debug_str	00000000 
00014f03 l       .debug_str	00000000 
00014f21 l       .debug_str	00000000 
00014f72 l       .debug_str	00000000 
00014f84 l       .debug_str	00000000 
00014fdc l       .debug_str	00000000 
00014ff2 l       .debug_str	00000000 
00015055 l       .debug_str	00000000 
00015080 l       .debug_str	00000000 
000150e3 l       .debug_str	00000000 
00015158 l       .debug_str	00000000 
000151bc l       .debug_str	00000000 
000151c6 l       .debug_str	00000000 
00015231 l       .debug_str	00000000 
00015240 l       .debug_str	00000000 
000152ac l       .debug_str	00000000 
000152de l       .debug_str	00000000 
00015304 l       .debug_str	00000000 
00015373 l       .debug_str	00000000 
00015393 l       .debug_str	00000000 
00015403 l       .debug_str	00000000 
00015424 l       .debug_str	00000000 
000130da l       .debug_str	00000000 
00015498 l       .debug_str	00000000 
00015518 l       .debug_str	00000000 
0001555e l       .debug_str	00000000 
00015587 l       .debug_str	00000000 
0001558e l       .debug_str	00000000 
000155c6 l       .debug_str	00000000 
00015605 l       .debug_str	00000000 
0001560c l       .debug_str	00000000 
00015685 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0001571c l       .debug_str	00000000 
0001579a l       .debug_str	00000000 
000157a4 l       .debug_str	00000000 
00015832 l       .debug_str	00000000 
000158de l       .debug_str	00000000 
00015925 l       .debug_str	00000000 
00015932 l       .debug_str	00000000 
0001597f l       .debug_str	00000000 
00015992 l       .debug_str	00000000 
000159e4 l       .debug_str	00000000 
00015a54 l       .debug_str	00000000 
00013646 l       .debug_str	00000000 
00015ab4 l       .debug_str	00000000 
00015ac5 l       .debug_str	00000000 
00015b2a l       .debug_str	00000000 
00015b5a l       .debug_str	00000000 
00015b63 l       .debug_str	00000000 
00015b9f l       .debug_str	00000000 
00015bb3 l       .debug_str	00000000 
00015bee l       .debug_str	00000000 
00015c34 l       .debug_str	00000000 
00015c52 l       .debug_str	00000000 
00015c82 l       .debug_str	00000000 
00015c8b l       .debug_str	00000000 
00015cc5 l       .debug_str	00000000 
00015cd7 l       .debug_str	00000000 
00015d05 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00015d0c l       .debug_str	00000000 
00015d18 l       .debug_str	00000000 
00015d22 l       .debug_str	00000000 
00015d2c l       .debug_str	00000000 
00015d4f l       .debug_str	00000000 
00033cbf l       .debug_str	00000000 
00015da4 l       .debug_str	00000000 
00015e04 l       .debug_str	00000000 
00015e10 l       .debug_str	00000000 
00015e60 l       .debug_str	00000000 
00015ec3 l       .debug_str	00000000 
00015f2a l       .debug_str	00000000 
00015f99 l       .debug_str	00000000 
0005ae55 l       .debug_str	00000000 
00012ba2 l       .debug_str	00000000 
00016029 l       .debug_str	00000000 
0005bef2 l       .debug_str	00000000 
00010f77 l       .debug_str	00000000 
0000bfe3 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
0001f37b l       .debug_str	00000000 
0005a6ba l       .debug_str	00000000 
00016050 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00016057 l       .debug_str	00000000 
0005ae36 l       .debug_str	00000000 
00016064 l       .debug_str	00000000 
0005abdc l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0001606f l       .debug_str	00000000 
00061200 l       .debug_str	00000000 
000160c3 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
000160ce l       .debug_str	00000000 
000160f9 l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016105 l       .debug_str	00000000 
0001613f l       .debug_str	00000000 
00016178 l       .debug_str	00000000 
00016187 l       .debug_str	00000000 
000161ca l       .debug_str	00000000 
0005c107 l       .debug_str	00000000 
00038a92 l       .debug_str	00000000 
0005db2c l       .debug_str	00000000 
0001620c l       .debug_str	00000000 
00016230 l       .debug_str	00000000 
0001579f l       .debug_str	00000000 
0005a68b l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00016250 l       .debug_str	00000000 
00046830 l       .debug_str	00000000 
0001628b l       .debug_str	00000000 
00016292 l       .debug_str	00000000 
0003742c l       .debug_str	00000000 
000007da l       .debug_str	00000000 
000162d3 l       .debug_str	00000000 
0001631a l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0001f83e l       .debug_str	00000000 
000162f4 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
000168e4 l       .debug_str	00000000 
00016316 l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0001169c l       .debug_str	00000000 
000116a7 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
000116a0 l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0000b6ea l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000132bc l       .debug_str	00000000 
00013314 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00013361 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0001336b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00013377 l       .debug_str	00000000 
000160df l       .debug_str	00000000 
000160d3 l       .debug_str	00000000 
000160fe l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e7bd l       .debug_str	00000000 
000357b1 l       .debug_str	00000000 
00013388 l       .debug_str	00000000 
0001338d l       .debug_str	00000000 
00013393 l       .debug_str	00000000 
000165e7 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00012647 l       .debug_str	00000000 
00011700 l       .debug_str	00000000 
00012631 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0001339b l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
000133a1 l       .debug_str	00000000 
00033353 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394ec l       .debug_str	00000000 
0005cbd5 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a847 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4c8 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0005e9d9 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000133ac l       .debug_str	00000000 
000133d5 l       .debug_str	00000000 
000133e4 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000114f8 l       .debug_str	00000000 
000114fc l       .debug_str	00000000 
00016181 l       .debug_str	00000000 
000133fe l       .debug_str	00000000 
00013427 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0001345c l       .debug_str	00000000 
00013470 l       .debug_str	00000000 
00013483 l       .debug_str	00000000 
000134cf l       .debug_str	00000000 
000134dd l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
0003578b l       .debug_str	00000000 
000134e5 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00011e2f l       .debug_str	00000000 
00036605 l       .debug_str	00000000 
000612f5 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013636 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
000117aa l       .debug_str	00000000 
000229ea l       .debug_str	00000000 
0005f748 l       .debug_str	00000000 
000162ad l       .debug_str	00000000 
00043b8d l       .debug_str	00000000 
00012639 l       .debug_str	00000000 
000134ef l       .debug_str	00000000 
0005d002 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016223 l       .debug_str	00000000 
0005c26b l       .debug_str	00000000 
00014aea l       .debug_str	00000000 
00016263 l       .debug_str	00000000 
00012643 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00015fbd l       .debug_str	00000000 
00015f4e l       .debug_str	00000000 
000134f5 l       .debug_str	00000000 
000134fb l       .debug_str	00000000 
00013524 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00014ad3 l       .debug_str	00000000 
00013530 l       .debug_str	00000000 
00012ba6 l       .debug_str	00000000 
0001355d l       .debug_str	00000000 
0003e620 l       .debug_str	00000000 
00013568 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00013591 l       .debug_str	00000000 
00013598 l       .debug_str	00000000 
000135c2 l       .debug_str	00000000 
0002055e l       .debug_str	00000000 
000135c6 l       .debug_str	00000000 
000221bd l       .debug_str	00000000 
000135cf l       .debug_str	00000000 
00013611 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00013624 l       .debug_str	00000000 
0005f652 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0004aedf l       .debug_str	00000000 
0001363f l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0001364e l       .debug_str	00000000 
00013658 l       .debug_str	00000000 
00016300 l       .debug_str	00000000 
00015ac0 l       .debug_str	00000000 
0001365d l       .debug_str	00000000 
000136e3 l       .debug_str	00000000 
000136ed l       .debug_str	00000000 
0001377f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
000137c5 l       .debug_str	00000000 
00013859 l       .debug_str	00000000 
000138bb l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 embedded_graphics.94s3esdv-cgu.0
00016cdc l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005e9d9 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394ec l       .debug_str	00000000 
0005cbd5 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a847 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4c8 l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00018c4a l       .debug_str	00000000 
0000c21f l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
000163d3 l       .debug_str	00000000 
000163dc l       .debug_str	00000000 
000163e4 l       .debug_str	00000000 
000163ed l       .debug_str	00000000 
00034a91 l       .debug_str	00000000 
000163fa l       .debug_str	00000000 
0001640a l       .debug_str	00000000 
0001641b l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c95 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0001642c l       .debug_str	00000000 
0000e718 l       .debug_str	00000000 
0000e726 l       .debug_str	00000000 
00018cfb l       .debug_str	00000000 
00016435 l       .debug_str	00000000 
0001643b l       .debug_str	00000000 
00016446 l       .debug_str	00000000 
00016450 l       .debug_str	00000000 
0001645a l       .debug_str	00000000 
0000b802 l       .debug_str	00000000 
000164a2 l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
000164ea l       .debug_str	00000000 
00016532 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0001653b l       .debug_str	00000000 
00016564 l       .debug_str	00000000 
0001656d l       .debug_str	00000000 
000165ca l       .debug_str	00000000 
0005f748 l       .debug_str	00000000 
000165f0 l       .debug_str	00000000 
00016618 l       .debug_str	00000000 
0001664a l       .debug_str	00000000 
00013c40 l       .debug_str	00000000 
0001667b l       .debug_str	00000000 
000166d8 l       .debug_str	00000000 
00016735 l       .debug_str	00000000 
00016792 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
000167c4 l       .debug_str	00000000 
00016809 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
00016815 l       .debug_str	00000000 
00059c52 l       .debug_str	00000000 
00016851 l       .debug_str	00000000 
0000e851 l       .debug_str	00000000 
00016895 l       .debug_str	00000000 
000168dc l       .debug_str	00000000 
000168ea l       .debug_str	00000000 
00016931 l       .debug_str	00000000 
0001693f l       .debug_str	00000000 
0001697f l       .debug_str	00000000 
00016987 l       .debug_str	00000000 
0000e8d8 l       .debug_str	00000000 
00016994 l       .debug_str	00000000 
000169cf l       .debug_str	00000000 
00016a0d l       .debug_str	00000000 
00016a3d l       .debug_str	00000000 
00016a51 l       .debug_str	00000000 
00016a81 l       .debug_str	00000000 
00016a95 l       .debug_str	00000000 
00016ac5 l       .debug_str	00000000 
00016ad9 l       .debug_str	00000000 
0003f910 l       .debug_str	00000000 
00016b24 l       .debug_str	00000000 
00016b7b l       .debug_str	00000000 
00016b8a l       .debug_str	00000000 
00016bd5 l       .debug_str	00000000 
0000be4e l       .debug_str	00000000 
00016c4c l       .debug_str	00000000 
00016cd1 l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
00016d53 l       .debug_str	00000000 
00016dd8 l       .debug_str	00000000 
00016de3 l       .debug_str	00000000 
0005a68b l       .debug_str	00000000 
00016e6c l       .debug_str	00000000 
0001fcac l       .debug_str	00000000 
00016ee3 l       .debug_str	00000000 
0005c079 l       .debug_str	00000000 
00016f78 l       .debug_str	00000000 
0001700f l       .debug_str	00000000 
000170aa l       .debug_str	00000000 
0001713f l       .debug_str	00000000 
000171d6 l       .debug_str	00000000 
00017271 l       .debug_str	00000000 
00017339 l       .debug_str	00000000 
00017344 l       .debug_str	00000000 
00017410 l       .debug_str	00000000 
000174a0 l       .debug_str	00000000 
000174ac l       .debug_str	00000000 
00017552 l       .debug_str	00000000 
0001755e l       .debug_str	00000000 
00017602 l       .debug_str	00000000 
000176a4 l       .debug_str	00000000 
00017748 l       .debug_str	00000000 
0001779c l       .debug_str	00000000 
000177f1 l       .debug_str	00000000 
00017846 l       .debug_str	00000000 
00013646 l       .debug_str	00000000 
000178c9 l       .debug_str	00000000 
0001794d l       .debug_str	00000000 
000179d1 l       .debug_str	00000000 
00002878 l       .debug_str	00000000 
00017a18 l       .debug_str	00000000 
0000287e l       .debug_str	00000000 
00017a5f l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00017aa6 l       .debug_str	00000000 
00017b24 l       .debug_str	00000000 
00017ba3 l       .debug_str	00000000 
00017c3e l       .debug_str	00000000 
00017cd2 l       .debug_str	00000000 
00017d1f l       .debug_str	00000000 
00017d2b l       .debug_str	00000000 
00017d8e l       .debug_str	00000000 
00017dd6 l       .debug_str	00000000 
000114f8 l       .debug_str	00000000 
00017dde l       .debug_str	00000000 
00017e72 l       .debug_str	00000000 
00017ed8 l       .debug_str	00000000 
00017f69 l       .debug_str	00000000 
00018008 l       .debug_str	00000000 
00018099 l       .debug_str	00000000 
00018138 l       .debug_str	00000000 
000181da l       .debug_str	00000000 
0001826b l       .debug_str	00000000 
00018319 l       .debug_str	00000000 
000183c9 l       .debug_str	00000000 
0001847d l       .debug_str	00000000 
00018570 l       .debug_str	00000000 
0001857b l       .debug_str	00000000 
00018672 l       .debug_str	00000000 
0001871e l       .debug_str	00000000 
00018728 l       .debug_str	00000000 
0001879a l       .debug_str	00000000 
0001880f l       .debug_str	00000000 
00018882 l       .debug_str	00000000 
000188f3 l       .debug_str	00000000 
00018966 l       .debug_str	00000000 
000189dd l       .debug_str	00000000 
00018a52 l       .debug_str	00000000 
00018ac7 l       .debug_str	00000000 
00018b37 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
00018bc3 l       .debug_str	00000000 
0001f37b l       .debug_str	00000000 
00018bc9 l       .debug_str	00000000 
0001397b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
000160fe l       .debug_str	00000000 
0001606f l       .debug_str	00000000 
000168e4 l       .debug_str	00000000 
00018bcc l       .debug_str	00000000 
00018bd6 l       .debug_str	00000000 
00018be0 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00018bea l       .debug_str	00000000 
00018c1b l       .debug_str	00000000 
0006176d l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
00018c50 l       .debug_str	00000000 
00018c5a l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00018c64 l       .debug_str	00000000 
00018c6d l       .debug_str	00000000 
00018c9c l       .debug_str	00000000 
00018ca9 l       .debug_str	00000000 
00018cac l       .debug_str	00000000 
00018caf l       .debug_str	00000000 
00018cb2 l       .debug_str	00000000 
00018cb5 l       .debug_str	00000000 
00018cb8 l       .debug_str	00000000 
00018cbb l       .debug_str	00000000 
00018d09 l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
000116a0 l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
000116b3 l       .debug_str	00000000 
00018d79 l       .debug_str	00000000 
00018d53 l       .debug_str	00000000 
00018dac l       .debug_str	00000000 
00018d87 l       .debug_str	00000000 
00018ddd l       .debug_str	00000000 
00018db9 l       .debug_str	00000000 
00018e0e l       .debug_str	00000000 
00018de9 l       .debug_str	00000000 
00018e42 l       .debug_str	00000000 
00018e1b l       .debug_str	00000000 
00018e77 l       .debug_str	00000000 
00018e51 l       .debug_str	00000000 
00018eab l       .debug_str	00000000 
00018e85 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001631e l       .debug_str	00000000 
0001637e l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00018bd1 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00018bdb l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00018be5 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e7bd l       .debug_str	00000000 
000357b1 l       .debug_str	00000000 
00013388 l       .debug_str	00000000 
0001338d l       .debug_str	00000000 
00013393 l       .debug_str	00000000 
000165e7 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000386a2 l       .debug_str	00000000 
00033353 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
000117f4 l     F .text	00000044 _ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE
000118e8 l     F .text	0000006e _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E
00011956 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE
0001198e l     F .text	0000001a _ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E
00000000 l    df *ABS*	00000000 hash32.79y5bd3b-cgu.0
00014f72 l       .debug_str	00000000 
00019393 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
0000bf65 l       .debug_str	00000000 
000193de l       .debug_str	00000000 
00013f0f l       .debug_str	00000000 
00019414 l       .debug_str	00000000 
00013f64 l       .debug_str	00000000 
0001944e l       .debug_str	00000000 
0001948a l       .debug_str	00000000 
00013fe5 l       .debug_str	00000000 
000194b0 l       .debug_str	00000000 
00014018 l       .debug_str	00000000 
000194d7 l       .debug_str	00000000 
00014232 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00019525 l       .debug_str	00000000 
000142a2 l       .debug_str	00000000 
00019576 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000195c8 l       .debug_str	00000000 
0005ab5f l       .debug_str	00000000 
0001961d l       .debug_str	00000000 
00014398 l       .debug_str	00000000 
000196b2 l       .debug_str	00000000 
00019700 l       .debug_str	00000000 
000229ea l       .debug_str	00000000 
0001970f l       .debug_str	00000000 
00019760 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00019778 l       .debug_str	00000000 
000197cd l       .debug_str	00000000 
000197e9 l       .debug_str	00000000 
000197f1 l       .debug_str	00000000 
00019837 l       .debug_str	00000000 
0001983f l       .debug_str	00000000 
000141c2 l       .debug_str	00000000 
00019888 l       .debug_str	00000000 
0005c079 l       .debug_str	00000000 
000198f7 l       .debug_str	00000000 
00014e3e l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00019948 l       .debug_str	00000000 
00019999 l       .debug_str	00000000 
00014fdc l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
0001355d l       .debug_str	00000000 
0003e620 l       .debug_str	00000000 
00013568 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005d002 l       .debug_str	00000000 
000612f5 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016223 l       .debug_str	00000000 
000199f1 l       .debug_str	00000000 
00019a54 l       .debug_str	00000000 
00019a7e l       .debug_str	00000000 
00019ae1 l       .debug_str	00000000 
00019aea l       .debug_str	00000000 
00019b57 l       .debug_str	00000000 
00019b69 l       .debug_str	00000000 
00003c53 l       .debug_str	00000000 
00019bda l       .debug_str	00000000 
00013646 l       .debug_str	00000000 
00019c3a l       .debug_str	00000000 
00019c6d l       .debug_str	00000000 
00019cd7 l       .debug_str	00000000 
00019d0a l       .debug_str	00000000 
00019d0f l       .debug_str	00000000 
00019d73 l       .debug_str	00000000 
0005e932 l       .debug_str	00000000 
00019dce l       .debug_str	00000000 
00019e0a l       .debug_str	00000000 
00019e18 l       .debug_str	00000000 
00019e47 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000160fe l       .debug_str	00000000 
0005a6ba l       .debug_str	00000000 
00016050 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005ae36 l       .debug_str	00000000 
0005abdc l       .debug_str	00000000 
00016057 l       .debug_str	00000000 
00016064 l       .debug_str	00000000 
0001f37b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
000160c3 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016105 l       .debug_str	00000000 
0001613f l       .debug_str	00000000 
00016178 l       .debug_str	00000000 
00016187 l       .debug_str	00000000 
000161ca l       .debug_str	00000000 
0005c107 l       .debug_str	00000000 
00038a92 l       .debug_str	00000000 
0005db2c l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0001620c l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
000221bd l       .debug_str	00000000 
00035d24 l       .debug_str	00000000 
0005c26b l       .debug_str	00000000 
00019e4f l       .debug_str	00000000 
00019e67 l       .debug_str	00000000 
00061200 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00019e84 l       .debug_str	00000000 
00011475 l       .debug_str	00000000 
00019e9d l       .debug_str	00000000 
00019eb9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00018eb9 l       .debug_str	00000000 
00018f0e l       .debug_str	00000000 
00018f58 l       .debug_str	00000000 
00018f5f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00010a91 l       .debug_str	00000000 
000116bb l       .debug_str	00000000 
000116c6 l       .debug_str	00000000 
000116d1 l       .debug_str	00000000 
00019e61 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00012647 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000133a1 l       .debug_str	00000000 
0005e7bd l       .debug_str	00000000 
00033353 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0005e9d9 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00018f67 l       .debug_str	00000000 
000133d5 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000133e4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000114f8 l       .debug_str	00000000 
000114fc l       .debug_str	00000000 
00016181 l       .debug_str	00000000 
00018f90 l       .debug_str	00000000 
00013427 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0001345c l       .debug_str	00000000 
00013470 l       .debug_str	00000000 
00018fb9 l       .debug_str	00000000 
000134cf l       .debug_str	00000000 
000134dd l       .debug_str	00000000 
000134e5 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00012ba6 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00019005 l       .debug_str	00000000 
0000ae86 l       .debug_str	00000000 
0001902e l       .debug_str	00000000 
00019038 l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
000168e4 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000574 l       .debug_str	00000000 
0005a68b l       .debug_str	00000000 
0001903c l       .debug_str	00000000 
0005abb0 l       .debug_str	00000000 
00019eb3 l       .debug_str	00000000 
00019e7d l       .debug_str	00000000 
00019046 l       .debug_str	00000000 
00013ae8 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
0001909b l       .debug_str	00000000 
000190d9 l       .debug_str	00000000 
000190f1 l       .debug_str	00000000 
00013b30 l       .debug_str	00000000 
0001912f l       .debug_str	00000000 
00012ba3 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
00019194 l       .debug_str	00000000 
000191c4 l       .debug_str	00000000 
000191eb l       .debug_str	00000000 
00013ce3 l       .debug_str	00000000 
00019211 l       .debug_str	00000000 
00019256 l       .debug_str	00000000 
00019262 l       .debug_str	00000000 
000192a8 l       .debug_str	00000000 
000192b5 l       .debug_str	00000000 
000192fb l       .debug_str	00000000 
00019308 l       .debug_str	00000000 
00019346 l       .debug_str	00000000 
0001934c l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
00011b3e l     F .text	00000034 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE
00011ba8 l     F .text	00000018 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E
00011bd2 l     F .text	0000003e _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE
00011c10 l     F .text	00000040 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE
00011ce0 l     F .text	0000011c _ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE
00000000 l    df *ABS*	00000000 4iim1qfb3qo0ur8y
00019f3d l       .debug_str	00000000 
00019f3b l       .debug_str	00000000 
00019f8e l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00019ec2 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00012ba6 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00019ee1 l       .debug_str	00000000 
00019f32 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 log.9af4yuww-cgu.0
0001c10c l       .debug_str	00000000 
00012c28 l       .debug_str	00000000 
00012c30 l       .debug_str	00000000 
00012c37 l       .debug_str	00000000 
00011f70 l       .debug_str	00000000 
0001f612 l       .debug_str	00000000 
00011700 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0001a2b6 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
0001a2ba l       .debug_str	00000000 
00019837 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
0003578b l       .debug_str	00000000 
000612f5 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013636 l       .debug_str	00000000 
0001a338 l       .debug_str	00000000 
0005d002 l       .debug_str	00000000 
00046830 l       .debug_str	00000000 
000600d6 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0001a34f l       .debug_str	00000000 
00013524 l       .debug_str	00000000 
0001a378 l       .debug_str	00000000 
0001a3aa l       .debug_str	00000000 
000133a1 l       .debug_str	00000000 
000386a2 l       .debug_str	00000000 
00033353 l       .debug_str	00000000 
0005e9d9 l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
0001a3bc l       .debug_str	00000000 
0001a3e5 l       .debug_str	00000000 
000133e4 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000114f8 l       .debug_str	00000000 
000114fc l       .debug_str	00000000 
00016181 l       .debug_str	00000000 
0001a40a l       .debug_str	00000000 
00013427 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
0001a433 l       .debug_str	00000000 
0001a45d l       .debug_str	00000000 
0001a486 l       .debug_str	00000000 
0001a4d2 l       .debug_str	00000000 
000134dd l       .debug_str	00000000 
0001a4f6 l       .debug_str	00000000 
000134e5 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b253 l       .debug_str	00000000 
0000b294 l       .debug_str	00000000 
000221bd l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0005ac4e l       .debug_str	00000000 
0001a504 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00011e2f l       .debug_str	00000000 
00036605 l       .debug_str	00000000 
0005b9a1 l       .debug_str	00000000 
0004e9f4 l       .debug_str	00000000 
0005c706 l       .debug_str	00000000 
0005e01f l       .debug_str	00000000 
000229ea l       .debug_str	00000000 
0001f26c l       .debug_str	00000000 
00043b8d l       .debug_str	00000000 
000392ac l       .debug_str	00000000 
0005ab5f l       .debug_str	00000000 
0001f57c l       .debug_str	00000000 
0001f524 l       .debug_str	00000000 
0001a519 l       .debug_str	00000000 
0001a523 l       .debug_str	00000000 
0001f404 l       .debug_str	00000000 
00034a91 l       .debug_str	00000000 
0001f1dc l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0001cef3 l       .debug_str	00000000 
0005f748 l       .debug_str	00000000 
0001f5b5 l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
0001f594 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0005a68b l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
0001f22d l       .debug_str	00000000 
000134f5 l       .debug_str	00000000 
0001a52c l       .debug_str	00000000 
0001a555 l       .debug_str	00000000 
0001a563 l       .debug_str	00000000 
0001a570 l       .debug_str	00000000 
0001a583 l       .debug_str	00000000 
0003e620 l       .debug_str	00000000 
0001a59c l       .debug_str	00000000 
00012ba6 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
0001a5b1 l       .debug_str	00000000 
0001a62d l       .debug_str	00000000 
0001a5c4 l       .debug_str	00000000 
0001a606 l       .debug_str	00000000 
0001a61b l       .debug_str	00000000 
0005f652 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0004aedf l       .debug_str	00000000 
0001a638 l       .debug_str	00000000 
0001a642 l       .debug_str	00000000 
0001a674 l       .debug_str	00000000 
0001a688 l       .debug_str	00000000 
0001a69d l       .debug_str	00000000 
0001e7d7 l       .debug_str	00000000 
0001e9e0 l       .debug_str	00000000 
0001a6a4 l       .debug_str	00000000 
0001a6af l       .debug_str	00000000 
0001a733 l       .debug_str	00000000 
0001a761 l       .debug_str	00000000 
0001a7e7 l       .debug_str	00000000 
00042a8e l       .debug_str	00000000 
0001a80f l       .debug_str	00000000 
0001a820 l       .debug_str	00000000 
0001a8aa l       .debug_str	00000000 
0001a8c8 l       .debug_str	00000000 
0001a956 l       .debug_str	00000000 
0001a97d l       .debug_str	00000000 
0001aa0c l       .debug_str	00000000 
0001aa54 l       .debug_str	00000000 
0001aa83 l       .debug_str	00000000 
0001aacb l       .debug_str	00000000 
0001aaea l       .debug_str	00000000 
0001ab32 l       .debug_str	00000000 
0001ab42 l       .debug_str	00000000 
0001ab8a l       .debug_str	00000000 
0001ab9b l       .debug_str	00000000 
0001abe3 l       .debug_str	00000000 
0001abeb l       .debug_str	00000000 
0001ac33 l       .debug_str	00000000 
0001ac3d l       .debug_str	00000000 
0001ac85 l       .debug_str	00000000 
0001ac9f l       .debug_str	00000000 
0001ace7 l       .debug_str	00000000 
0001ad00 l       .debug_str	00000000 
0001ad48 l       .debug_str	00000000 
0001ad5b l       .debug_str	00000000 
0001ada3 l       .debug_str	00000000 
0001adac l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
0001adf4 l       .debug_str	00000000 
0001ae3e l       .debug_str	00000000 
0001ae89 l       .debug_str	00000000 
0001aec7 l       .debug_str	00000000 
0001aef8 l       .debug_str	00000000 
000190d9 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0001af36 l       .debug_str	00000000 
0001af5f l       .debug_str	00000000 
0001af6a l       .debug_str	00000000 
0001af8f l       .debug_str	00000000 
0001afee l       .debug_str	00000000 
00033cbf l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
000160fe l       .debug_str	00000000 
0001b055 l       .debug_str	00000000 
0001b07f l       .debug_str	00000000 
0001b0a7 l       .debug_str	00000000 
0001b0df l       .debug_str	00000000 
0001b110 l       .debug_str	00000000 
0001b11a l       .debug_str	00000000 
0001b177 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
0001b1a9 l       .debug_str	00000000 
0001b1cf l       .debug_str	00000000 
0001b1f1 l       .debug_str	00000000 
0001b217 l       .debug_str	00000000 
0001b239 l       .debug_str	00000000 
0001b262 l       .debug_str	00000000 
0001b287 l       .debug_str	00000000 
0001b2cf l       .debug_str	00000000 
0001b2dc l       .debug_str	00000000 
0001b2e5 l       .debug_str	00000000 
0001b36f l       .debug_str	00000000 
00011faf l       .debug_str	00000000 
0001b38c l       .debug_str	00000000 
0001b418 l       .debug_str	00000000 
0001b435 l       .debug_str	00000000 
0001b455 l       .debug_str	00000000 
0000e8d8 l       .debug_str	00000000 
0001b45c l       .debug_str	00000000 
0001b497 l       .debug_str	00000000 
0001b4c9 l       .debug_str	00000000 
0001b4da l       .debug_str	00000000 
0001b515 l       .debug_str	00000000 
0001b55b l       .debug_str	00000000 
00016ac5 l       .debug_str	00000000 
0001b58b l       .debug_str	00000000 
0001b5bb l       .debug_str	00000000 
0001b5d9 l       .debug_str	00000000 
0001b609 l       .debug_str	00000000 
0001b61c l       .debug_str	00000000 
0001b64c l       .debug_str	00000000 
0001b661 l       .debug_str	00000000 
0001b691 l       .debug_str	00000000 
0001b6ad l       .debug_str	00000000 
0001b6dd l       .debug_str	00000000 
0001b6fb l       .debug_str	00000000 
0001b72b l       .debug_str	00000000 
0001b746 l       .debug_str	00000000 
0001b776 l       .debug_str	00000000 
0001b79a l       .debug_str	00000000 
0001b7ca l       .debug_str	00000000 
0001b804 l       .debug_str	00000000 
0001b834 l       .debug_str	00000000 
0001b859 l       .debug_str	00000000 
0001b889 l       .debug_str	00000000 
0001b8b3 l       .debug_str	00000000 
0001b8e9 l       .debug_str	00000000 
0001b91a l       .debug_str	00000000 
0001b954 l       .debug_str	00000000 
0001b989 l       .debug_str	00000000 
0001b9c5 l       .debug_str	00000000 
0001b9eb l       .debug_str	00000000 
0001ba0d l       .debug_str	00000000 
0001ba34 l       .debug_str	00000000 
0001ba57 l       .debug_str	00000000 
00014232 l       .debug_str	00000000 
0001baa5 l       .debug_str	00000000 
000142a2 l       .debug_str	00000000 
0001baf6 l       .debug_str	00000000 
0001bb47 l       .debug_str	00000000 
0001bb54 l       .debug_str	00000000 
0001bba6 l       .debug_str	00000000 
0001bbb4 l       .debug_str	00000000 
0001416d l       .debug_str	00000000 
0001bbff l       .debug_str	00000000 
0001bc4a l       .debug_str	00000000 
0001bc5e l       .debug_str	00000000 
0001bca1 l       .debug_str	00000000 
0001bcae l       .debug_str	00000000 
000141c2 l       .debug_str	00000000 
0001bcf1 l       .debug_str	00000000 
00014229 l       .debug_str	00000000 
0001bd4d l       .debug_str	00000000 
00014299 l       .debug_str	00000000 
0001bdac l       .debug_str	00000000 
0001bdfe l       .debug_str	00000000 
0001be50 l       .debug_str	00000000 
0001be5a l       .debug_str	00000000 
0001beaf l       .debug_str	00000000 
0001bf04 l       .debug_str	00000000 
0001bf5a l       .debug_str	00000000 
00014116 l       .debug_str	00000000 
0001bfb0 l       .debug_str	00000000 
0001bfec l       .debug_str	00000000 
000168e4 l       .debug_str	00000000 
0001c02a l       .debug_str	00000000 
0001c065 l       .debug_str	00000000 
00016064 l       .debug_str	00000000 
0001c070 l       .debug_str	00000000 
0001c0b7 l       .debug_str	00000000 
000117aa l       .debug_str	00000000 
0001c0cd l       .debug_str	00000000 
0001c15e l       .debug_str	00000000 
0001c174 l       .debug_str	00000000 
0001c1b9 l       .debug_str	00000000 
0001c1d3 l       .debug_str	00000000 
0001c236 l       .debug_str	00000000 
0001c256 l       .debug_str	00000000 
0001c295 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0001c2f6 l       .debug_str	00000000 
0001c335 l       .debug_str	00000000 
0001f3ff l       .debug_str	00000000 
0001c35c l       .debug_str	00000000 
0001c39c l       .debug_str	00000000 
0001c3cf l       .debug_str	00000000 
0001c3e6 l       .debug_str	00000000 
0001c42c l       .debug_str	00000000 
0001c448 l       .debug_str	00000000 
0001c4ac l       .debug_str	00000000 
0001c4ce l       .debug_str	00000000 
0001c510 l       .debug_str	00000000 
0001c531 l       .debug_str	00000000 
0001c573 l       .debug_str	00000000 
0005d25f l       .debug_str	00000000 
0001c5a3 l       .debug_str	00000000 
0001c5e7 l       .debug_str	00000000 
0001c63c l       .debug_str	00000000 
0001c680 l       .debug_str	00000000 
0001c6d6 l       .debug_str	00000000 
0001c71a l       .debug_str	00000000 
0001c792 l       .debug_str	00000000 
0001c7d6 l       .debug_str	00000000 
0001c816 l       .debug_str	00000000 
0001c831 l       .debug_str	00000000 
0001c872 l       .debug_str	00000000 
0001c8c8 l       .debug_str	00000000 
0001c90c l       .debug_str	00000000 
0001c939 l       .debug_str	00000000 
0001c97e l       .debug_str	00000000 
0001c9c6 l       .debug_str	00000000 
0001c9d7 l       .debug_str	00000000 
0001ca1f l       .debug_str	00000000 
0001ca30 l       .debug_str	00000000 
00033da5 l       .debug_str	00000000 
0001ca6b l       .debug_str	00000000 
0001caa7 l       .debug_str	00000000 
0001caad l       .debug_str	00000000 
0001cae3 l       .debug_str	00000000 
0001caf6 l       .debug_str	00000000 
0001cb2d l       .debug_str	00000000 
0001cb41 l       .debug_str	00000000 
0001cb83 l       .debug_str	00000000 
0001cba2 l       .debug_str	00000000 
0001cbe7 l       .debug_str	00000000 
0001cc02 l       .debug_str	00000000 
0001cc67 l       .debug_str	00000000 
0001ccce l       .debug_str	00000000 
0001ccd9 l       .debug_str	00000000 
0001cd1f l       .debug_str	00000000 
0001cd65 l       .debug_str	00000000 
0001cd6f l       .debug_str	00000000 
0001cdb6 l       .debug_str	00000000 
0001cdc1 l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
0001ce08 l       .debug_str	00000000 
0001ce51 l       .debug_str	00000000 
0001ce9a l       .debug_str	00000000 
0001ced3 l       .debug_str	00000000 
0001ceee l       .debug_str	00000000 
0001cefd l       .debug_str	00000000 
0001cf36 l       .debug_str	00000000 
0001cf5b l       .debug_str	00000000 
0001cf94 l       .debug_str	00000000 
0001cfcd l       .debug_str	00000000 
0001cff3 l       .debug_str	00000000 
0001d02c l       .debug_str	00000000 
0001d06a l       .debug_str	00000000 
0001d0a4 l       .debug_str	00000000 
0001d0b0 l       .debug_str	00000000 
0001d0ec l       .debug_str	00000000 
0001d0ff l       .debug_str	00000000 
0001d13b l       .debug_str	00000000 
0001d154 l       .debug_str	00000000 
0001d191 l       .debug_str	00000000 
0001d1a2 l       .debug_str	00000000 
00014e3e l       .debug_str	00000000 
0001d1f3 l       .debug_str	00000000 
00019f32 l       .debug_str	00000000 
0001d244 l       .debug_str	00000000 
0001d29f l       .debug_str	00000000 
0001d302 l       .debug_str	00000000 
0001d31e l       .debug_str	00000000 
0001d37e l       .debug_str	00000000 
0001d3de l       .debug_str	00000000 
0001d442 l       .debug_str	00000000 
0001d45d l       .debug_str	00000000 
0001d4c1 l       .debug_str	00000000 
0001d4cc l       .debug_str	00000000 
0001d536 l       .debug_str	00000000 
0001d545 l       .debug_str	00000000 
0001d5b4 l       .debug_str	00000000 
0001d5cc l       .debug_str	00000000 
0001d63c l       .debug_str	00000000 
0001d655 l       .debug_str	00000000 
0001d6c0 l       .debug_str	00000000 
0001d6d5 l       .debug_str	00000000 
0001d745 l       .debug_str	00000000 
0001d75a l       .debug_str	00000000 
0001d7ca l       .debug_str	00000000 
0001d7dc l       .debug_str	00000000 
0000389e l       .debug_str	00000000 
0001d84d l       .debug_str	00000000 
0001d8be l       .debug_str	00000000 
0001d8d4 l       .debug_str	00000000 
0001d8e6 l       .debug_str	00000000 
0001d952 l       .debug_str	00000000 
0001d964 l       .debug_str	00000000 
0001d9d0 l       .debug_str	00000000 
0001d9df l       .debug_str	00000000 
0001da47 l       .debug_str	00000000 
0001da51 l       .debug_str	00000000 
0001dac5 l       .debug_str	00000000 
00001425 l       .debug_str	00000000 
0001dad0 l       .debug_str	00000000 
0001db48 l       .debug_str	00000000 
0001db61 l       .debug_str	00000000 
0001dbd9 l       .debug_str	00000000 
0001dc6f l       .debug_str	00000000 
0001dc8b l       .debug_str	00000000 
0001dd21 l       .debug_str	00000000 
0001ddb7 l       .debug_str	00000000 
0001de4d l       .debug_str	00000000 
00014398 l       .debug_str	00000000 
0001dec2 l       .debug_str	00000000 
0001df36 l       .debug_str	00000000 
0001dfaf l       .debug_str	00000000 
0001e02e l       .debug_str	00000000 
0001e03f l       .debug_str	00000000 
0001e0bf l       .debug_str	00000000 
0001e121 l       .debug_str	00000000 
0001f67f l       .debug_str	00000000 
0001e172 l       .debug_str	00000000 
0001e194 l       .debug_str	00000000 
0001e1c1 l       .debug_str	00000000 
0001e1f0 l       .debug_str	00000000 
0001e212 l       .debug_str	00000000 
0001e239 l       .debug_str	00000000 
0001e262 l       .debug_str	00000000 
0001e294 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0001e2e4 l       .debug_str	00000000 
0001e32a l       .debug_str	00000000 
0001e33d l       .debug_str	00000000 
0001e391 l       .debug_str	00000000 
0001e403 l       .debug_str	00000000 
0001e475 l       .debug_str	00000000 
0001e4e7 l       .debug_str	00000000 
0001e536 l       .debug_str	00000000 
0001e564 l       .debug_str	00000000 
0001e56f l       .debug_str	00000000 
0001e5c9 l       .debug_str	00000000 
0001e641 l       .debug_str	00000000 
0001e6b9 l       .debug_str	00000000 
0001e70e l       .debug_str	00000000 
0001e743 l       .debug_str	00000000 
0000b6c3 l       .debug_str	00000000 
0001e76e l       .debug_str	00000000 
0003f910 l       .debug_str	00000000 
0001e79d l       .debug_str	00000000 
0001e7cd l       .debug_str	00000000 
0001e7e5 l       .debug_str	00000000 
0001e816 l       .debug_str	00000000 
0001e848 l       .debug_str	00000000 
0001e887 l       .debug_str	00000000 
0001e89a l       .debug_str	00000000 
0001e8d2 l       .debug_str	00000000 
0001e8de l       .debug_str	00000000 
0001e90e l       .debug_str	00000000 
0001e93f l       .debug_str	00000000 
0001e945 l       .debug_str	00000000 
0001e972 l       .debug_str	00000000 
0001e9a3 l       .debug_str	00000000 
0001e9d6 l       .debug_str	00000000 
0001e9f0 l       .debug_str	00000000 
0001ea24 l       .debug_str	00000000 
0001ea57 l       .debug_str	00000000 
00059bea l       .debug_str	00000000 
0001eaa4 l       .debug_str	00000000 
0001eaed l       .debug_str	00000000 
00059bcd l       .debug_str	00000000 
0001eb38 l       .debug_str	00000000 
0001eb60 l       .debug_str	00000000 
0001eba6 l       .debug_str	00000000 
0001ebac l       .debug_str	00000000 
0001ebda l       .debug_str	00000000 
0001ebf6 l       .debug_str	00000000 
0001ec23 l       .debug_str	00000000 
0001ec33 l       .debug_str	00000000 
0001ec8b l       .debug_str	00000000 
0001ece4 l       .debug_str	00000000 
0001ed07 l       .debug_str	00000000 
0001ed36 l       .debug_str	00000000 
0001ed48 l       .debug_str	00000000 
0001ed7b l       .debug_str	00000000 
0001ed91 l       .debug_str	00000000 
0001edde l       .debug_str	00000000 
0001ee31 l       .debug_str	00000000 
0001ee64 l       .debug_str	00000000 
0001ee74 l       .debug_str	00000000 
0001eeca l       .debug_str	00000000 
0001ef24 l       .debug_str	00000000 
0001ef72 l       .debug_str	00000000 
0001efc4 l       .debug_str	00000000 
0001f019 l       .debug_str	00000000 
0001f069 l       .debug_str	00000000 
0001f0bd l       .debug_str	00000000 
0001f114 l       .debug_str	00000000 
0001f16a l       .debug_str	00000000 
0001f1c1 l       .debug_str	00000000 
0001f20d l       .debug_str	00000000 
0001f255 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0001f28a l       .debug_str	00000000 
0001f2b6 l       .debug_str	00000000 
0001f2d2 l       .debug_str	00000000 
0001f2df l       .debug_str	00000000 
0001f2ed l       .debug_str	00000000 
0001f2f2 l       .debug_str	00000000 
0001f2f9 l       .debug_str	00000000 
0001f310 l       .debug_str	00000000 
0001f326 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0001f336 l       .debug_str	00000000 
0005ae36 l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
0005abdc l       .debug_str	00000000 
0001f37b l       .debug_str	00000000 
00018bc9 l       .debug_str	00000000 
0001f37a l       .debug_str	00000000 
0001397b l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0001f381 l       .debug_str	00000000 
0001f3d4 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0001f3f5 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0001f3fa l       .debug_str	00000000 
00018be0 l       .debug_str	00000000 
0001f40e l       .debug_str	00000000 
0001f422 l       .debug_str	00000000 
0001f42b l       .debug_str	00000000 
0001f436 l       .debug_str	00000000 
0001f448 l       .debug_str	00000000 
0001f45c l       .debug_str	00000000 
0001f46d l       .debug_str	00000000 
0001f487 l       .debug_str	00000000 
0001f4b7 l       .debug_str	00000000 
0001f4d2 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016105 l       .debug_str	00000000 
0001613f l       .debug_str	00000000 
00016178 l       .debug_str	00000000 
00016187 l       .debug_str	00000000 
000161ca l       .debug_str	00000000 
0005c107 l       .debug_str	00000000 
00038a92 l       .debug_str	00000000 
0005db2c l       .debug_str	00000000 
0001f4f2 l       .debug_str	00000000 
0001f511 l       .debug_str	00000000 
0006005c l       .debug_str	00000000 
0001f534 l       .debug_str	00000000 
0005ae55 l       .debug_str	00000000 
00012c7e l       .debug_str	00000000 
0001f53a l       .debug_str	00000000 
0000bfe3 l       .debug_str	00000000 
0001f542 l       .debug_str	00000000 
0005ba0e l       .debug_str	00000000 
00061200 l       .debug_str	00000000 
00016057 l       .debug_str	00000000 
0005c47d l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
000116a0 l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0000b6ea l       .debug_str	00000000 
0001f54a l       .debug_str	00000000 
0000b786 l       .debug_str	00000000 
0000b796 l       .debug_str	00000000 
0000b7a1 l       .debug_str	00000000 
0005a6ba l       .debug_str	00000000 
0001f569 l       .debug_str	00000000 
0001f588 l       .debug_str	00000000 
0001f59a l       .debug_str	00000000 
00016985 l       .debug_str	00000000 
000117a5 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
0006176d l       .debug_str	00000000 
0005c328 l       .debug_str	00000000 
0003742c l       .debug_str	00000000 
0001f60c l       .debug_str	00000000 
0001a2a7 l       .debug_str	00000000 
0001f61e l       .debug_str	00000000 
00060023 l       .debug_str	00000000 
0001f632 l       .debug_str	00000000 
0001f648 l       .debug_str	00000000 
0001f658 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0001f66a l       .debug_str	00000000 
0001f664 l       .debug_str	00000000 
0001f679 l       .debug_str	00000000 
0001f690 l       .debug_str	00000000 
0001f68f l       .debug_str	00000000 
0001169c l       .debug_str	00000000 
000116a7 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
000116b3 l       .debug_str	00000000 
000116be l       .debug_str	00000000 
000116c9 l       .debug_str	00000000 
000116d4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001a06a l       .debug_str	00000000 
0001a0bc l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00059b32 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0001a103 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001a10a l       .debug_str	00000000 
0001b446 l       .debug_str	00000000 
0001f472 l       .debug_str	00000000 
00018be5 l       .debug_str	00000000 
0001a113 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0001eba7 l       .debug_str	00000000 
0001a11a l       .debug_str	00000000 
0001a13d l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00012c0c l       .debug_str	00000000 
00012c11 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00012c3e l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001f4ff l       .debug_str	00000000 
00012c93 l       .debug_str	00000000 
0001a143 l       .debug_str	00000000 
0001a165 l       .debug_str	00000000 
0001a17a l       .debug_str	00000000 
0001a1ac l       .debug_str	00000000 
0001a1bc l       .debug_str	00000000 
0001a1e9 l       .debug_str	00000000 
0001a1fa l       .debug_str	00000000 
0001a228 l       .debug_str	00000000 
0001a23a l       .debug_str	00000000 
0001f418 l       .debug_str	00000000 
0001f65d l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0001a269 l       .debug_str	00000000 
0001f430 l       .debug_str	00000000 
00001dd1 l       .debug_str	00000000 
00015d26 l       .debug_str	00000000 
00011f74 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
000343fe l       .debug_str	00000000 
00011f79 l       .debug_str	00000000 
0001f467 l       .debug_str	00000000 
0001a290 l       .debug_str	00000000 
0001f453 l       .debug_str	00000000 
0001f44d l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
000394ec l       .debug_str	00000000 
0005cbd5 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a847 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4c8 l       .debug_str	00000000 
0001f4bc l       .debug_str	00000000 
0001f49b l       .debug_str	00000000 
0001f48c l       .debug_str	00000000 
0001f4e6 l       .debug_str	00000000 
0001f4d7 l       .debug_str	00000000 
0001a297 l       .debug_str	00000000 
0001a2a0 l       .debug_str	00000000 
0005a839 l       .debug_str	00000000 
00059b06 l       .debug_str	00000000 
0001f441 l       .debug_str	00000000 
0001f43b l       .debug_str	00000000 
0001f461 l       .debug_str	00000000 
0001f427 l       .debug_str	00000000 
0005e7bd l       .debug_str	00000000 
000357b1 l       .debug_str	00000000 
00013388 l       .debug_str	00000000 
0001338d l       .debug_str	00000000 
00013393 l       .debug_str	00000000 
000165e7 l       .debug_str	00000000 
00012647 l       .debug_str	00000000 
00033ab1 l       .debug_str	00000000 
0005ed05 l       .debug_str	00000000 
0001a2ac l       .debug_str	00000000 
00012c18 l       .debug_str	00000000 
00012c20 l       .debug_str	00000000 
00012390 l     F .text	0000002a _ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E
00012366 l     F .text	0000002a _ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE
0001228c l     F .text	0000009c _ZN3log13RecordBuilder3new17haca8312579858419E
00012328 l     F .text	00000022 _ZN3log13RecordBuilder4args17h0d0d49873389eda9E
000123ba l     F .text	00000010 _ZN3log13RecordBuilder4line17h44de9f431bb34307E
000123ca l     F .text	00000010 _ZN3log13RecordBuilder5build17h83529556a009112eE
0001234a l     F .text	0000000c _ZN3log13RecordBuilder5level17h0f95d7860f854eb5E
00012356 l     F .text	00000010 _ZN3log13RecordBuilder6target17hd1b0e0684e399993E
0001257e l     F .text	00000012 _ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E
000123e4 l     F .text	00000028 _ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E
0001240c l     F .text	00000010 _ZN3log15MetadataBuilder5build17h2478972692162fc0E
20004a68 l     O .bss	00000004 _ZN3log5STATE17hc9404a0f5c97cef6E
200000f0 l     O .data	00000008 _ZN3log6LOGGER17hc33d4d9c061fc628E
00012282 l     F .text	0000000a _ZN3log6Record7builder17hde62ab0132265febE
00020564 l     O .text	00000000 _ZN3log6logger3NOP17h5a3de47970f20990E
000123da l     F .text	0000000a _ZN3log8Metadata7builder17ha56bd59835d60a3cE
00012278 l     F .text	0000000a _ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E
0001200c l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E
00012044 l     F .text	00000016 _ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE
0001205a l     F .text	00000008 _ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE
0001206a l     F .text	00000028 _ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E
00012110 l     F .text	0000000a _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E
000125a4 l     F .text	000000aa _ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E
0001264e l     F .text	0000003a _ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E
00012590 l     F .text	00000014 _ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE
000121dc l     F .text	00000012 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E
00000000 l    df *ABS*	00000000 memchr.2yzmedhn-cgu.0
0001fcfb l       .debug_str	00000000 
00013591 l       .debug_str	00000000 
00018c64 l       .debug_str	00000000 
0001f747 l       .debug_str	00000000 
0001f77c l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
000117aa l       .debug_str	00000000 
0005f748 l       .debug_str	00000000 
0001f788 l       .debug_str	00000000 
0001f7c0 l       .debug_str	00000000 
0001f7da l       .debug_str	00000000 
0001f7e4 l       .debug_str	00000000 
0001f7ec l       .debug_str	00000000 
0001f7f4 l       .debug_str	00000000 
0001f830 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0001f843 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0001f84b l       .debug_str	00000000 
0001f883 l       .debug_str	00000000 
000114f8 l       .debug_str	00000000 
0001f88b l       .debug_str	00000000 
0001f8c3 l       .debug_str	00000000 
0001f8cb l       .debug_str	00000000 
0001f903 l       .debug_str	00000000 
0001f91d l       .debug_str	00000000 
0001f926 l       .debug_str	00000000 
0001f95e l       .debug_str	00000000 
0001f967 l       .debug_str	00000000 
0001f99f l       .debug_str	00000000 
000136e3 l       .debug_str	00000000 
000221bd l       .debug_str	00000000 
0001fa27 l       .debug_str	00000000 
0001fa6f l       .debug_str	00000000 
0001fa7a l       .debug_str	00000000 
000190d9 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0001fab8 l       .debug_str	00000000 
0001af5f l       .debug_str	00000000 
0001fae1 l       .debug_str	00000000 
0001fb06 l       .debug_str	00000000 
000160fe l       .debug_str	00000000 
0001b055 l       .debug_str	00000000 
0001fb65 l       .debug_str	00000000 
0001b0a7 l       .debug_str	00000000 
0001fb8d l       .debug_str	00000000 
0001fbbe l       .debug_str	00000000 
0001fbca l       .debug_str	00000000 
0001fc29 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
0001fc5b l       .debug_str	00000000 
0001fca3 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0001fcb0 l       .debug_str	00000000 
0001fd0b l       .debug_str	00000000 
0001fd19 l       .debug_str	00000000 
0001b2cf l       .debug_str	00000000 
0001b4c9 l       .debug_str	00000000 
0000e8d8 l       .debug_str	00000000 
0001fd61 l       .debug_str	00000000 
0001b515 l       .debug_str	00000000 
0001fd9c l       .debug_str	00000000 
0001fdd3 l       .debug_str	00000000 
0001fdec l       .debug_str	00000000 
0001fdf8 l       .debug_str	00000000 
00014232 l       .debug_str	00000000 
0001fe4a l       .debug_str	00000000 
000142a2 l       .debug_str	00000000 
0001fe9f l       .debug_str	00000000 
0001fdd9 l       .debug_str	00000000 
0001fed2 l       .debug_str	00000000 
00019837 l       .debug_str	00000000 
0001ff18 l       .debug_str	00000000 
000141c2 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005d002 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
0001ff61 l       .debug_str	00000000 
000229ea l       .debug_str	00000000 
0001ff72 l       .debug_str	00000000 
0001ffe7 l       .debug_str	00000000 
00020014 l       .debug_str	00000000 
00019b57 l       .debug_str	00000000 
000200a0 l       .debug_str	00000000 
00020123 l       .debug_str	00000000 
00020152 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0002019f l       .debug_str	00000000 
000201cf l       .debug_str	00000000 
0002021d l       .debug_str	00000000 
0002024d l       .debug_str	00000000 
0002029b l       .debug_str	00000000 
000202cb l       .debug_str	00000000 
00020319 l       .debug_str	00000000 
0002034a l       .debug_str	00000000 
00020399 l       .debug_str	00000000 
000203ca l       .debug_str	00000000 
00020419 l       .debug_str	00000000 
00020449 l       .debug_str	00000000 
00020451 l       .debug_str	00000000 
00020481 l       .debug_str	00000000 
00020489 l       .debug_str	00000000 
000204c7 l       .debug_str	00000000 
000204dc l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000abfe l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005ae36 l       .debug_str	00000000 
0005abdc l       .debug_str	00000000 
0001f37b l       .debug_str	00000000 
00018bc9 l       .debug_str	00000000 
0001397b l       .debug_str	00000000 
00020508 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005c26b l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
0005a68b l       .debug_str	00000000 
000612f5 l       .debug_str	00000000 
00016223 l       .debug_str	00000000 
0002055e l       .debug_str	00000000 
000135c6 l       .debug_str	00000000 
0002055d l       .debug_str	00000000 
00020561 l       .debug_str	00000000 
0002056b l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00020571 l       .debug_str	00000000 
00020575 l       .debug_str	00000000 
0001f83e l       .debug_str	00000000 
0002057a l       .debug_str	00000000 
00020579 l       .debug_str	00000000 
0002057d l       .debug_str	00000000 
00020581 l       .debug_str	00000000 
00020586 l       .debug_str	00000000 
00020585 l       .debug_str	00000000 
00020589 l       .debug_str	00000000 
0002058d l       .debug_str	00000000 
0005a6ba l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001f6a8 l       .debug_str	00000000 
0001f6fd l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e7bd l       .debug_str	00000000 
000357b1 l       .debug_str	00000000 
00013388 l       .debug_str	00000000 
0001338d l       .debug_str	00000000 
00013393 l       .debug_str	00000000 
000165e7 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000133a1 l       .debug_str	00000000 
000386a2 l       .debug_str	00000000 
00033353 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005e9d9 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394ec l       .debug_str	00000000 
0005cbd5 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a847 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4c8 l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134e5 l       .debug_str	00000000 
000126ce l     F .text	0000006e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE
00000000 l    df *ABS*	00000000 1sklumn9v47r13ke
0001f37b l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00018be5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005e7bd l       .debug_str	00000000 
00033353 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00020591 l       .debug_str	00000000 
00033cbf l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
000205f2 l       .debug_str	00000000 
00012ba3 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2la8qm50nrg05wyh
00030d5f l       .debug_str	00000000 
000221bd l       .debug_str	00000000 
00020c56 l       .debug_str	00000000 
00020cc1 l       .debug_str	00000000 
00020d07 l       .debug_str	00000000 
00020d79 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00020fbe l       .debug_str	00000000 
00021030 l       .debug_str	00000000 
0002107a l       .debug_str	00000000 
000210c4 l       .debug_str	00000000 
00021311 l       .debug_str	00000000 
0002134d l       .debug_str	00000000 
0003e620 l       .debug_str	00000000 
0000395c l       .debug_str	00000000 
00021392 l       .debug_str	00000000 
000213cf l       .debug_str	00000000 
00021415 l       .debug_str	00000000 
00021452 l       .debug_str	00000000 
00021693 l       .debug_str	00000000 
000216d3 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00021917 l       .debug_str	00000000 
00021b6b l       .debug_str	00000000 
00021bc4 l       .debug_str	00000000 
00021e14 l       .debug_str	00000000 
0001f37b l       .debug_str	00000000 
0001266f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006014d l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c26b l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035945 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac4e l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
0005ab5f l       .debug_str	00000000 
00030dd3 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002192b l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
00021b7f l       .debug_str	00000000 
00020655 l       .debug_str	00000000 
000206bd l       .debug_str	00000000 
000208fd l       .debug_str	00000000 
00020965 l       .debug_str	00000000 
000209aa l       .debug_str	00000000 
00020a15 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xneats2au1n52xr
00021eba l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00012ba6 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00021e69 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3hq83qlgyhwbaj1j
00000beb l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00018bd1 l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000bb40 l       .debug_str	00000000 
00018be5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e9d9 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00021edc l       .debug_str	00000000 
00021f38 l       .debug_str	00000000 
00021f95 l       .debug_str	00000000 
00021ff2 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4dguvrsipkvuzwcx
0001f430 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001f37b l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000a54c l       .debug_str	00000000 
000221bd l       .debug_str	00000000 
000221bc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005e7bd l       .debug_str	00000000 
00033353 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000357b1 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005ab5f l       .debug_str	00000000 
0005ac4e l       .debug_str	00000000 
0002204f l       .debug_str	00000000 
000220c0 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000220cc l       .debug_str	00000000 
00014ac8 l       .debug_str	00000000 
0002213d l       .debug_str	00000000 
000221ae l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 501bil2zkh495ov3
00022547 l       .debug_str	00000000 
000225b2 l       .debug_str	00000000 
0002267a l       .debug_str	00000000 
000225e8 l       .debug_str	00000000 
0002261f l       .debug_str	00000000 
00022632 l       .debug_str	00000000 
00022671 l       .debug_str	00000000 
0002268c l       .debug_str	00000000 
000226c4 l       .debug_str	00000000 
000226d8 l       .debug_str	00000000 
00022704 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00018bd1 l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
00060023 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000394ec l       .debug_str	00000000 
0005cbd5 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a847 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4c8 l       .debug_str	00000000 
0001f4bc l       .debug_str	00000000 
00018be5 l       .debug_str	00000000 
0000bb39 l       .debug_str	00000000 
0005ae55 l       .debug_str	00000000 
00060022 l       .debug_str	00000000 
0002270d l       .debug_str	00000000 
000221bd l       .debug_str	00000000 
00016985 l       .debug_str	00000000 
00022711 l       .debug_str	00000000 
0005f550 l       .debug_str	00000000 
000049e8 l       .debug_str	00000000 
000049f0 l       .debug_str	00000000 
000049f9 l       .debug_str	00000000 
00004a07 l       .debug_str	00000000 
00004a0e l       .debug_str	00000000 
0000468e l       .debug_str	00000000 
0000469e l       .debug_str	00000000 
000046a7 l       .debug_str	00000000 
000046b5 l       .debug_str	00000000 
000046c3 l       .debug_str	00000000 
000046cf l       .debug_str	00000000 
000048dd l       .debug_str	00000000 
000046db l       .debug_str	00000000 
000046ea l       .debug_str	00000000 
000046f2 l       .debug_str	00000000 
0000470b l       .debug_str	00000000 
0000471c l       .debug_str	00000000 
00004724 l       .debug_str	00000000 
00004757 l       .debug_str	00000000 
0000473e l       .debug_str	00000000 
00004763 l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
00004795 l       .debug_str	00000000 
0000477c l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047c2 l       .debug_str	00000000 
000047a9 l       .debug_str	00000000 
00004a15 l       .debug_str	00000000 
00004a78 l       .debug_str	00000000 
00004a1d l       .debug_str	00000000 
00004a3c l       .debug_str	00000000 
00004a70 l       .debug_str	00000000 
00004a57 l       .debug_str	00000000 
0005e62e l       .debug_str	00000000 
0004cc7b l       .debug_str	00000000 
000232b8 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
0005be40 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00022719 l       .debug_str	00000000 
0005f684 l       .debug_str	00000000 
0005d9c4 l       .debug_str	00000000 
0005b8b6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005d5e7 l       .debug_str	00000000 
0000bfc3 l       .debug_str	00000000 
0005abf9 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000bfd4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000bfde l       .debug_str	00000000 
0000bfe9 l       .debug_str	00000000 
0000bff3 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00022a02 l       .debug_str	00000000 
000221c3 l       .debug_str	00000000 
000221f4 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006014d l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c26b l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035945 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac4e l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
0005ab5f l       .debug_str	00000000 
00030d5f l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00021b7f l       .debug_str	00000000 
00022200 l       .debug_str	00000000 
00022230 l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
00030dd3 l       .debug_str	00000000 
0002192b l       .debug_str	00000000 
0002223d l       .debug_str	00000000 
0002226e l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0004260a l       .debug_str	00000000 
00005699 l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005f4c7 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00059f0c l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
00001d21 l       .debug_str	00000000 
00060302 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
0000561d l       .debug_str	00000000 
0004f5af l       .debug_str	00000000 
000056a2 l       .debug_str	00000000 
000056ad l       .debug_str	00000000 
00022276 l       .debug_str	00000000 
000222a1 l       .debug_str	00000000 
000222b2 l       .debug_str	00000000 
000222e7 l       .debug_str	00000000 
00004c1d l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
000048d4 l       .debug_str	00000000 
000048dc l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000048e6 l       .debug_str	00000000 
00004b8c l       .debug_str	00000000 
00004b73 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004b6e l       .debug_str	00000000 
00004b9b l       .debug_str	00000000 
00004c25 l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
0005d851 l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
00004c2b l       .debug_str	00000000 
000222f6 l       .debug_str	00000000 
00022329 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
00022339 l       .debug_str	00000000 
0002236d l       .debug_str	00000000 
00022376 l       .debug_str	00000000 
000223a2 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000223b1 l       .debug_str	00000000 
000223e4 l       .debug_str	00000000 
000223f1 l       .debug_str	00000000 
000223fd l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0002242e l       .debug_str	00000000 
00022463 l       .debug_str	00000000 
0003e620 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
00022474 l       .debug_str	00000000 
000224a6 l       .debug_str	00000000 
000224b4 l       .debug_str	00000000 
000224f2 l       .debug_str	00000000 
0002250c l       .debug_str	00000000 
0002255e l       .debug_str	00000000 
0002259a l       .debug_str	00000000 
20004a70 l     O .bss	00000008 _ZN6mynewt3spi11PENDING_CMD17hd08bb758c99a7708E
20004a78 l     O .bss	00002004 _ZN6mynewt3spi12PENDING_DATA17hf749c482f1fd6e90E
20006f04 l     O .bss	00000000 _ZN6mynewt3spi12SPI_CALLBACK17h9820a4217e4879a6E
200000f8 l     O .data	00000008 _ZN6mynewt3spi12SPI_SETTINGS17h4a4473e27299c06dE
0001345a l     F .text	0000003a _ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E
20006a8c l     O .bss	00000018 _ZN6mynewt3spi14SPI_DATA_QUEUE17h4880c24292cc1218E
20006b04 l     O .bss	00000400 _ZN6mynewt3spi14SPI_TASK_STACK17h041a1fc76b4d16c1E
20006aa4 l     O .bss	00000010 _ZN6mynewt3spi15SPI_EVENT_QUEUE17h4e2cf68a255fc2fdE
20006a84 l     O .bss	00000008 _ZN6mynewt3spi16SPI_THROTTLE_SEM17h1f0932d6e65cb8daE
00013772 l     F .text	000001ea _ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E
0001395c l     F .text	000002e8 _ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E
00013f7a l     F .text	00000128 _ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E
00013c44 l     F .text	00000336 _ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E
20006a7c l     O .bss	00000008 _ZN6mynewt3spi7SPI_SEM17hd7399e388b8e657cE
20006ab4 l     O .bss	00000050 _ZN6mynewt3spi8SPI_TASK17h4c45c24ee73ad430E
000140a2 l     F .text	00000054 _ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E
00020760 l     O .text	0000001c str.0
000207c0 l     O .text	00000021 str.1
00020820 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 53x3bckk5lzipnpa
00000c52 l       .debug_str	00000000 
000394ec l       .debug_str	00000000 
0005cbd5 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a847 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4c8 l       .debug_str	00000000 
0001f4bc l       .debug_str	00000000 
00022a13 l       .debug_str	00000000 
000221bd l       .debug_str	00000000 
00022a19 l       .debug_str	00000000 
0000e64e l       .debug_str	00000000 
0005d9c4 l       .debug_str	00000000 
0005b8b6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
000229e8 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0005aa19 l       .debug_str	00000000 
00022a2b l       .debug_str	00000000 
0000e660 l       .debug_str	00000000 
00022724 l       .debug_str	00000000 
0003f910 l       .debug_str	00000000 
0002274f l       .debug_str	00000000 
0006005c l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003e620 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
0002277b l       .debug_str	00000000 
00061358 l       .debug_str	00000000 
000227ec l       .debug_str	00000000 
00022818 l       .debug_str	00000000 
00022845 l       .debug_str	00000000 
000228b1 l       .debug_str	00000000 
000228b9 l       .debug_str	00000000 
00022926 l       .debug_str	00000000 
0002292f l       .debug_str	00000000 
0002295c l       .debug_str	00000000 
00022704 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000229d6 l       .debug_str	00000000 
00022a06 l       .debug_str	00000000 
0005abf9 l       .debug_str	00000000 
0000bfd4 l       .debug_str	00000000 
0000bfde l       .debug_str	00000000 
0000bfe9 l       .debug_str	00000000 
0000bff3 l       .debug_str	00000000 
00022a02 l       .debug_str	00000000 
000229ec l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00018bd1 l       .debug_str	00000000 
000017ea l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000bb2d l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00020a20 l     O .text	00000021 str.0
00000000 l    df *ABS*	00000000 n1xzuhnvw82wqrn
00004a1d l       .debug_str	00000000 
00004a3c l       .debug_str	00000000 
00004a70 l       .debug_str	00000000 
00022a30 l       .debug_str	00000000 
00022a82 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134dd l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0004260a l       .debug_str	00000000 
000049e8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
000049f0 l       .debug_str	00000000 
000049f9 l       .debug_str	00000000 
00004a07 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00004a0e l       .debug_str	00000000 
0000468e l       .debug_str	00000000 
0000469e l       .debug_str	00000000 
000046a7 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000046b5 l       .debug_str	00000000 
000046c3 l       .debug_str	00000000 
000046cf l       .debug_str	00000000 
000048dd l       .debug_str	00000000 
000046db l       .debug_str	00000000 
000046ea l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000046f2 l       .debug_str	00000000 
0000470b l       .debug_str	00000000 
00001da5 l       .debug_str	00000000 
0000471c l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00004724 l       .debug_str	00000000 
00004757 l       .debug_str	00000000 
0000473e l       .debug_str	00000000 
00004763 l       .debug_str	00000000 
00001d54 l       .debug_str	00000000 
00004795 l       .debug_str	00000000 
0000477c l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047c2 l       .debug_str	00000000 
000047a9 l       .debug_str	00000000 
00004a15 l       .debug_str	00000000 
00004a57 l       .debug_str	00000000 
00004a78 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 num_traits.eydd4btj-cgu.0
00023dd2 l       .debug_str	00000000 
00022ff3 l       .debug_str	00000000 
000141c2 l       .debug_str	00000000 
00023036 l       .debug_str	00000000 
00014229 l       .debug_str	00000000 
00023092 l       .debug_str	00000000 
00014299 l       .debug_str	00000000 
000230f1 l       .debug_str	00000000 
00014232 l       .debug_str	00000000 
00023143 l       .debug_str	00000000 
00023198 l       .debug_str	00000000 
000231ee l       .debug_str	00000000 
0002321c l       .debug_str	00000000 
00023228 l       .debug_str	00000000 
0002325a l       .debug_str	00000000 
00023281 l       .debug_str	00000000 
000232b3 l       .debug_str	00000000 
000232c3 l       .debug_str	00000000 
000232f8 l       .debug_str	00000000 
0002330b l       .debug_str	00000000 
00023341 l       .debug_str	00000000 
00023355 l       .debug_str	00000000 
0002339f l       .debug_str	00000000 
000233b0 l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
000233ec l       .debug_str	00000000 
00059f38 l       .debug_str	00000000 
0005f748 l       .debug_str	00000000 
0002342a l       .debug_str	00000000 
00023468 l       .debug_str	00000000 
00013658 l       .debug_str	00000000 
00023475 l       .debug_str	00000000 
0003e620 l       .debug_str	00000000 
00023483 l       .debug_str	00000000 
000234ab l       .debug_str	00000000 
0000168b l       .debug_str	00000000 
000234ea l       .debug_str	00000000 
00023518 l       .debug_str	00000000 
0002351f l       .debug_str	00000000 
000235c2 l       .debug_str	00000000 
000235d0 l       .debug_str	00000000 
00040e19 l       .debug_str	00000000 
00023668 l       .debug_str	00000000 
00023702 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
000237ba l       .debug_str	00000000 
00033cbf l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
0001ff61 l       .debug_str	00000000 
0002381d l       .debug_str	00000000 
0002388f l       .debug_str	00000000 
000238b9 l       .debug_str	00000000 
000238f7 l       .debug_str	00000000 
0002390a l       .debug_str	00000000 
00023955 l       .debug_str	00000000 
0000c49f l       .debug_str	00000000 
0002395e l       .debug_str	00000000 
000239a0 l       .debug_str	00000000 
00024c61 l       .debug_str	00000000 
000239da l       .debug_str	00000000 
00023a1f l       .debug_str	00000000 
00023a3b l       .debug_str	00000000 
00023a7e l       .debug_str	00000000 
00023a94 l       .debug_str	00000000 
00023af9 l       .debug_str	00000000 
00023b5e l       .debug_str	00000000 
00023b99 l       .debug_str	00000000 
00023ba6 l       .debug_str	00000000 
0001fdd9 l       .debug_str	00000000 
00023bd9 l       .debug_str	00000000 
0000a8e2 l       .debug_str	00000000 
00023c1f l       .debug_str	00000000 
00019837 l       .debug_str	00000000 
00023c65 l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
00023cac l       .debug_str	00000000 
00023cf5 l       .debug_str	00000000 
00014ac8 l       .debug_str	00000000 
0001f430 l       .debug_str	00000000 
000160fe l       .debug_str	00000000 
000114f8 l       .debug_str	00000000 
000117aa l       .debug_str	00000000 
00023d6e l       .debug_str	00000000 
00023db3 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00023e0b l       .debug_str	00000000 
0000ac06 l       .debug_str	00000000 
00023e23 l       .debug_str	00000000 
00023e5e l       .debug_str	00000000 
00023e82 l       .debug_str	00000000 
00023ea8 l       .debug_str	00000000 
00023ee3 l       .debug_str	00000000 
00023f06 l       .debug_str	00000000 
00023f2b l       .debug_str	00000000 
00023f68 l       .debug_str	00000000 
00023f7f l       .debug_str	00000000 
00023fbc l       .debug_str	00000000 
00023fd3 l       .debug_str	00000000 
00014f03 l       .debug_str	00000000 
00024024 l       .debug_str	00000000 
00016cd1 l       .debug_str	00000000 
0002407f l       .debug_str	00000000 
000240e2 l       .debug_str	00000000 
00024124 l       .debug_str	00000000 
000151bc l       .debug_str	00000000 
00024188 l       .debug_str	00000000 
00019b57 l       .debug_str	00000000 
000241f5 l       .debug_str	00000000 
0000abf6 l       .debug_str	00000000 
00024257 l       .debug_str	00000000 
00024265 l       .debug_str	00000000 
000242d0 l       .debug_str	00000000 
000242ea l       .debug_str	00000000 
00024300 l       .debug_str	00000000 
0002436b l       .debug_str	00000000 
0002437b l       .debug_str	00000000 
000243e7 l       .debug_str	00000000 
000243f9 l       .debug_str	00000000 
00024465 l       .debug_str	00000000 
00024476 l       .debug_str	00000000 
000244dd l       .debug_str	00000000 
00024515 l       .debug_str	00000000 
0002457f l       .debug_str	00000000 
00024607 l       .debug_str	00000000 
000130da l       .debug_str	00000000 
0002467b l       .debug_str	00000000 
000246fd l       .debug_str	00000000 
00024714 l       .debug_str	00000000 
00024752 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00033f31 l       .debug_str	00000000 
000357b1 l       .debug_str	00000000 
00024765 l       .debug_str	00000000 
00024774 l       .debug_str	00000000 
000247b2 l       .debug_str	00000000 
000247c5 l       .debug_str	00000000 
000247f1 l       .debug_str	00000000 
000247fa l       .debug_str	00000000 
00024826 l       .debug_str	00000000 
0002482f l       .debug_str	00000000 
0002488f l       .debug_str	00000000 
00033972 l       .debug_str	00000000 
000248e0 l       .debug_str	00000000 
00024931 l       .debug_str	00000000 
0002498e l       .debug_str	00000000 
000249ec l       .debug_str	00000000 
00024cd1 l       .debug_str	00000000 
00024a3d l       .debug_str	00000000 
00024a66 l       .debug_str	00000000 
00024ac9 l       .debug_str	00000000 
00024ada l       .debug_str	00000000 
00024ae7 l       .debug_str	00000000 
00024afc l       .debug_str	00000000 
00024b4d l       .debug_str	00000000 
00024b76 l       .debug_str	00000000 
00024bd9 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0001f37b l       .debug_str	00000000 
000221bc l       .debug_str	00000000 
00061200 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
00024bf6 l       .debug_str	00000000 
0005c26b l       .debug_str	00000000 
000392ac l       .debug_str	00000000 
0001f83e l       .debug_str	00000000 
000168e4 l       .debug_str	00000000 
0005ae55 l       .debug_str	00000000 
00059c0c l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
0006005c l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00024c17 l       .debug_str	00000000 
00002535 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00024c1b l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00022c88 l       .debug_str	00000000 
00024c2d l       .debug_str	00000000 
00024c32 l       .debug_str	00000000 
00024c37 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000160c3 l       .debug_str	00000000 
00024c5c l       .debug_str	00000000 
00024c98 l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
0003dcd8 l       .debug_str	00000000 
00024cae l       .debug_str	00000000 
00024cb7 l       .debug_str	00000000 
000372dd l       .debug_str	00000000 
0005aca8 l       .debug_str	00000000 
0004ceef l       .debug_str	00000000 
00024cc0 l       .debug_str	00000000 
00024cc4 l       .debug_str	00000000 
000375a3 l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
000116a0 l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0001169c l       .debug_str	00000000 
000116a7 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00024ce6 l       .debug_str	00000000 
00024ce1 l       .debug_str	00000000 
0005aa29 l       .debug_str	00000000 
00024cea l       .debug_str	00000000 
0003907a l       .debug_str	00000000 
00024cf3 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0003bb34 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00022aa7 l       .debug_str	00000000 
00022b01 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00033bdc l       .debug_str	00000000 
00022b50 l       .debug_str	00000000 
00024c08 l       .debug_str	00000000 
00024bfb l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e9d9 l       .debug_str	00000000 
00022b58 l       .debug_str	00000000 
00022b65 l       .debug_str	00000000 
00022b6e l       .debug_str	00000000 
00059b26 l       .debug_str	00000000 
00033fa8 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0001339b l       .debug_str	00000000 
0005e7bd l       .debug_str	00000000 
00033353 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134dd l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003578b l       .debug_str	00000000 
000134e5 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b253 l       .debug_str	00000000 
0000b294 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
000221bd l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00012647 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000612f5 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013636 l       .debug_str	00000000 
00024ca8 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
0005a68b l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00012ba6 l       .debug_str	00000000 
0005cc51 l       .debug_str	00000000 
00011e2f l       .debug_str	00000000 
00036605 l       .debug_str	00000000 
00011700 l       .debug_str	00000000 
0005abdc l       .debug_str	00000000 
000229ea l       .debug_str	00000000 
00024c7c l       .debug_str	00000000 
000134f5 l       .debug_str	00000000 
00022b78 l       .debug_str	00000000 
00022bb6 l       .debug_str	00000000 
0001a338 l       .debug_str	00000000 
0005d002 l       .debug_str	00000000 
00046830 l       .debug_str	00000000 
000600d6 l       .debug_str	00000000 
00022bc5 l       .debug_str	00000000 
00013524 l       .debug_str	00000000 
00022bee l       .debug_str	00000000 
0001a3aa l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001a563 l       .debug_str	00000000 
0001f4e6 l       .debug_str	00000000 
0000e68b l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00022c20 l       .debug_str	00000000 
00024c46 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
00022c2e l       .debug_str	00000000 
00013611 l       .debug_str	00000000 
00013624 l       .debug_str	00000000 
0005f652 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0004aedf l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00059cc1 l       .debug_str	00000000 
00022c70 l       .debug_str	00000000 
00022c74 l       .debug_str	00000000 
00022c7f l       .debug_str	00000000 
00022c8e l       .debug_str	00000000 
00022cd6 l       .debug_str	00000000 
00022cf6 l       .debug_str	00000000 
00039dc6 l       .debug_str	00000000 
00024c2e l       .debug_str	00000000 
00022d41 l       .debug_str	00000000 
00024c33 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005ab5f l       .debug_str	00000000 
0005ac4e l       .debug_str	00000000 
00022d8c l       .debug_str	00000000 
000221ae l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
00022dfd l       .debug_str	00000000 
00013cab l       .debug_str	00000000 
00022e2b l       .debug_str	00000000 
0001b2cf l       .debug_str	00000000 
00022e73 l       .debug_str	00000000 
00022ea3 l       .debug_str	00000000 
00022ece l       .debug_str	00000000 
0001fdd3 l       .debug_str	00000000 
0001fdec l       .debug_str	00000000 
00022f05 l       .debug_str	00000000 
000142a2 l       .debug_str	00000000 
00022f56 l       .debug_str	00000000 
00014116 l       .debug_str	00000000 
00022fa8 l       .debug_str	00000000 
0001416d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19c5s2vweequjzfw
0000e8a7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00024cff l       .debug_str	00000000 
00024d28 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00024db9 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00024d35 l       .debug_str	00000000 
00013524 l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
0005ee5a l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00024d5e l       .debug_str	00000000 
00024db3 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1bm86yaetip2rc3f
0002512e l       .debug_str	00000000 
00024f96 l       .debug_str	00000000 
00024fd2 l       .debug_str	00000000 
00024fee l       .debug_str	00000000 
0002502a l       .debug_str	00000000 
00025060 l       .debug_str	00000000 
0002509c l       .debug_str	00000000 
000250a7 l       .debug_str	00000000 
000250e3 l       .debug_str	00000000 
000250f1 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
00025165 l       .debug_str	00000000 
000251a2 l       .debug_str	00000000 
000251b1 l       .debug_str	00000000 
000251ee l       .debug_str	00000000 
00025231 l       .debug_str	00000000 
0002526e l       .debug_str	00000000 
0000e8ac l       .debug_str	00000000 
000252a5 l       .debug_str	00000000 
000252e3 l       .debug_str	00000000 
0002531a l       .debug_str	00000000 
00025359 l       .debug_str	00000000 
00025392 l       .debug_str	00000000 
000253f6 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0002542b l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00025446 l       .debug_str	00000000 
0002548b l       .debug_str	00000000 
000254a8 l       .debug_str	00000000 
00013646 l       .debug_str	00000000 
00018c6d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000114f8 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00018c95 l       .debug_str	00000000 
00024dbd l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000254b7 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
0002543a l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea9d l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c33 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002566c l       .debug_str	00000000 
00024df7 l       .debug_str	00000000 
00025455 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
000221bd l       .debug_str	00000000 
0002549a l       .debug_str	00000000 
0000e8a7 l       .debug_str	00000000 
00024e13 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000e70f l       .debug_str	00000000 
0000e718 l       .debug_str	00000000 
0000e726 l       .debug_str	00000000 
00018cfb l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0000e73e l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
000117aa l       .debug_str	00000000 
0005f748 l       .debug_str	00000000 
00024e20 l       .debug_str	00000000 
00024e59 l       .debug_str	00000000 
00024ef4 l       .debug_str	00000000 
00024f4e l       .debug_str	00000000 
00024f8a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1i10ukgv8hgyc1v7
0005e966 l       .debug_str	00000000 
00025f86 l       .debug_str	00000000 
00025f91 l       .debug_str	00000000 
00025f98 l       .debug_str	00000000 
00026003 l       .debug_str	00000000 
00026134 l       .debug_str	00000000 
000261a1 l       .debug_str	00000000 
00026213 l       .debug_str	00000000 
00026321 l       .debug_str	00000000 
0002632c l       .debug_str	00000000 
0002639e l       .debug_str	00000000 
000264d3 l       .debug_str	00000000 
00026545 l       .debug_str	00000000 
00026615 l       .debug_str	00000000 
00026630 l       .debug_str	00000000 
0002667a l       .debug_str	00000000 
000267b7 l       .debug_str	00000000 
000267f2 l       .debug_str	00000000 
000268fa l       .debug_str	00000000 
00026935 l       .debug_str	00000000 
00026a64 l       .debug_str	00000000 
00026a9f l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00024df7 l       .debug_str	00000000 
00026b69 l       .debug_str	00000000 
00026ba5 l       .debug_str	00000000 
0003e620 l       .debug_str	00000000 
00026c70 l       .debug_str	00000000 
00026c90 l       .debug_str	00000000 
00026ccc l       .debug_str	00000000 
0002cb54 l       .debug_str	00000000 
00026dd5 l       .debug_str	00000000 
00026e12 l       .debug_str	00000000 
00026f1c l       .debug_str	00000000 
00026f59 l       .debug_str	00000000 
0002708a l       .debug_str	00000000 
0002710b l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0002799b l       .debug_str	00000000 
00027240 l       .debug_str	00000000 
000272be l       .debug_str	00000000 
00011584 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000273ee l       .debug_str	00000000 
000274cd l       .debug_str	00000000 
000275e6 l       .debug_str	00000000 
00027726 l       .debug_str	00000000 
00027843 l       .debug_str	00000000 
00027987 l       .debug_str	00000000 
0001f37b l       .debug_str	00000000 
0001266f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006014d l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c26b l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035945 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac4e l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
0005ab5f l       .debug_str	00000000 
0002b9cc l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027857 l       .debug_str	00000000 
0000e9a7 l       .debug_str	00000000 
0000eab9 l       .debug_str	00000000 
0000ebe8 l       .debug_str	00000000 
0002b894 l       .debug_str	00000000 
0002773a l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea9d l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c33 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002566c l       .debug_str	00000000 
0000f250 l       .debug_str	00000000 
0000f27d l       .debug_str	00000000 
0000f29e l       .debug_str	00000000 
0000f305 l       .debug_str	00000000 
0000f3a5 l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0000f47f l       .debug_str	00000000 
0000f4f6 l       .debug_str	00000000 
0000f57a l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
0000f693 l       .debug_str	00000000 
0000f73e l       .debug_str	00000000 
00028da6 l       .debug_str	00000000 
000284dd l       .debug_str	00000000 
00028814 l       .debug_str	00000000 
0002b79a l       .debug_str	00000000 
00027402 l       .debug_str	00000000 
000254f9 l       .debug_str	00000000 
00025587 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00025657 l       .debug_str	00000000 
00025672 l       .debug_str	00000000 
000612f5 l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
0002568f l       .debug_str	00000000 
000256a8 l       .debug_str	00000000 
0002e389 l       .debug_str	00000000 
000256ce l       .debug_str	00000000 
00025734 l       .debug_str	00000000 
0002583e l       .debug_str	00000000 
000258a4 l       .debug_str	00000000 
000259d5 l       .debug_str	00000000 
00025a3d l       .debug_str	00000000 
00025b08 l       .debug_str	00000000 
00025b70 l       .debug_str	00000000 
00025c79 l       .debug_str	00000000 
00025ce1 l       .debug_str	00000000 
00025e11 l       .debug_str	00000000 
00025e7c l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00020ae0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 1w4juabyv8bmed5v
00000d37 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4c8 l       .debug_str	00000000 
00027ad0 l       .debug_str	00000000 
00027b1b l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001f427 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000394ec l       .debug_str	00000000 
0005cbd5 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a847 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 24fd677mu7rr1lzm
0002667a l       .debug_str	00000000 
00029dd7 l       .debug_str	00000000 
00029e60 l       .debug_str	00000000 
00029f9a l       .debug_str	00000000 
0002a023 l       .debug_str	00000000 
0002a136 l       .debug_str	00000000 
0002a1c2 l       .debug_str	00000000 
0002a24e l       .debug_str	00000000 
0002a364 l       .debug_str	00000000 
0002a3f0 l       .debug_str	00000000 
0002a4de l       .debug_str	00000000 
00026ba5 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
0003e620 l       .debug_str	00000000 
00026c70 l       .debug_str	00000000 
0002a55c l       .debug_str	00000000 
00026ccc l       .debug_str	00000000 
0002cb54 l       .debug_str	00000000 
0002a5da l       .debug_str	00000000 
00026e12 l       .debug_str	00000000 
0002a659 l       .debug_str	00000000 
00026f59 l       .debug_str	00000000 
0002a6d8 l       .debug_str	00000000 
00025734 l       .debug_str	00000000 
0002a757 l       .debug_str	00000000 
000258a4 l       .debug_str	00000000 
0002a7d6 l       .debug_str	00000000 
0002a858 l       .debug_str	00000000 
00025f91 l       .debug_str	00000000 
0002a965 l       .debug_str	00000000 
0002a9e7 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000221bd l       .debug_str	00000000 
0002aacc l       .debug_str	00000000 
0002ab4e l       .debug_str	00000000 
0002ac1d l       .debug_str	00000000 
0002ac34 l       .debug_str	00000000 
0002acb6 l       .debug_str	00000000 
0002adea l       .debug_str	00000000 
0002ae6c l       .debug_str	00000000 
0002af51 l       .debug_str	00000000 
0002afd3 l       .debug_str	00000000 
0002b0e0 l       .debug_str	00000000 
0002b162 l       .debug_str	00000000 
0002b296 l       .debug_str	00000000 
0002b318 l       .debug_str	00000000 
0002b3e7 l       .debug_str	00000000 
0002b469 l       .debug_str	00000000 
0002b59d l       .debug_str	00000000 
0002b61f l       .debug_str	00000000 
0002b72c l       .debug_str	00000000 
0002b788 l       .debug_str	00000000 
0002b882 l       .debug_str	00000000 
0002b9ba l       .debug_str	00000000 
0001266f l       .debug_str	00000000 
0002bb19 l       .debug_str	00000000 
0001f37b l       .debug_str	00000000 
00012647 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002bc29 l       .debug_str	00000000 
000612f5 l       .debug_str	00000000 
00018bdb l       .debug_str	00000000 
0002bc36 l       .debug_str	00000000 
0002e2be l       .debug_str	00000000 
00061200 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0002bc48 l       .debug_str	00000000 
0003578b l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013636 l       .debug_str	00000000 
0002bc4d l       .debug_str	00000000 
0003f910 l       .debug_str	00000000 
0002bd81 l       .debug_str	00000000 
0002bedc l       .debug_str	00000000 
0002bfe8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006014d l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c26b l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00027b4d l       .debug_str	00000000 
00027bba l       .debug_str	00000000 
00027c50 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035945 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac4e l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0000f47f l       .debug_str	00000000 
0000f4f6 l       .debug_str	00000000 
0000f57a l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
0000f693 l       .debug_str	00000000 
0000f73e l       .debug_str	00000000 
00027d0f l       .debug_str	00000000 
00027dd4 l       .debug_str	00000000 
00027ea6 l       .debug_str	00000000 
00027f6f l       .debug_str	00000000 
00028059 l       .debug_str	00000000 
00028160 l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
0005ab5f l       .debug_str	00000000 
0002bb2b l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0002b9cc l       .debug_str	00000000 
0000e9a7 l       .debug_str	00000000 
0000eab9 l       .debug_str	00000000 
0000ebe8 l       .debug_str	00000000 
0002b894 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea9d l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c33 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002566c l       .debug_str	00000000 
0000f250 l       .debug_str	00000000 
0000f27d l       .debug_str	00000000 
0000f29e l       .debug_str	00000000 
0000f305 l       .debug_str	00000000 
0000f3a5 l       .debug_str	00000000 
00028da6 l       .debug_str	00000000 
00028266 l       .debug_str	00000000 
000282e8 l       .debug_str	00000000 
000283d6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000284dd l       .debug_str	00000000 
000284be l       .debug_str	00000000 
00028814 l       .debug_str	00000000 
000285ce l       .debug_str	00000000 
0002861f l       .debug_str	00000000 
0002870e l       .debug_str	00000000 
000287f6 l       .debug_str	00000000 
0002b79a l       .debug_str	00000000 
00028904 l       .debug_str	00000000 
0002897f l       .debug_str	00000000 
00028a69 l       .debug_str	00000000 
00028b4d l       .debug_str	00000000 
00028c59 l       .debug_str	00000000 
00028ca5 l       .debug_str	00000000 
00028d90 l       .debug_str	00000000 
00028e7a l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00028f84 l       .debug_str	00000000 
00029085 l       .debug_str	00000000 
000290db l       .debug_str	00000000 
000291d9 l       .debug_str	00000000 
0002922f l       .debug_str	00000000 
0002937c l       .debug_str	00000000 
000293d2 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000294f8 l       .debug_str	00000000 
0002957f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00025657 l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
00026615 l       .debug_str	00000000 
00029652 l       .debug_str	00000000 
000296d9 l       .debug_str	00000000 
00025f86 l       .debug_str	00000000 
00026321 l       .debug_str	00000000 
000297ea l       .debug_str	00000000 
00029871 l       .debug_str	00000000 
000299a9 l       .debug_str	00000000 
00029a31 l       .debug_str	00000000 
00029b05 l       .debug_str	00000000 
00029b8e l       .debug_str	00000000 
00029c63 l       .debug_str	00000000 
00029cec l       .debug_str	00000000 
00020b60 l     O .text	00000021 str.0
00020ba0 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 2jbqb9ep0zzhh36j
0001c3e1 l       .debug_str	00000000 
0002c3e3 l       .debug_str	00000000 
0002c3f0 l       .debug_str	00000000 
0002c430 l       .debug_str	00000000 
0002c52d l       .debug_str	00000000 
0002c56d l       .debug_str	00000000 
0002c57c l       .debug_str	00000000 
0002c5bc l       .debug_str	00000000 
0002c5db l       .debug_str	00000000 
0002c61b l       .debug_str	00000000 
0002c637 l       .debug_str	00000000 
0002c677 l       .debug_str	00000000 
0002c685 l       .debug_str	00000000 
0002c6c5 l       .debug_str	00000000 
0005f748 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0000c494 l       .debug_str	00000000 
0001cef3 l       .debug_str	00000000 
00000788 l       .debug_str	00000000 
0002c6d3 l       .debug_str	00000000 
0002c714 l       .debug_str	00000000 
0000c1d5 l       .debug_str	00000000 
0002c749 l       .debug_str	00000000 
000117aa l       .debug_str	00000000 
0002c753 l       .debug_str	00000000 
0002c794 l       .debug_str	00000000 
0001f404 l       .debug_str	00000000 
0002c7e1 l       .debug_str	00000000 
0002c822 l       .debug_str	00000000 
0002c857 l       .debug_str	00000000 
0002c862 l       .debug_str	00000000 
0002c8a3 l       .debug_str	00000000 
0002c8f0 l       .debug_str	00000000 
0002c931 l       .debug_str	00000000 
0002c966 l       .debug_str	00000000 
0002c9d5 l       .debug_str	00000000 
0002cad6 l       .debug_str	00000000 
0001d7ca l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0002cb45 l       .debug_str	00000000 
0002cb64 l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016985 l       .debug_str	00000000 
0005aa94 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea9d l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c33 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002566c l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
00015d26 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
000013b6 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003e620 l       .debug_str	00000000 
0002cb54 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00060aff l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
0006014d l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c26b l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00027b4d l       .debug_str	00000000 
00027bba l       .debug_str	00000000 
00027c50 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035945 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac4e l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0000f47f l       .debug_str	00000000 
0000f4f6 l       .debug_str	00000000 
0000f57a l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
0000f693 l       .debug_str	00000000 
0000f73e l       .debug_str	00000000 
00027d0f l       .debug_str	00000000 
00027dd4 l       .debug_str	00000000 
00027ea6 l       .debug_str	00000000 
00027f6f l       .debug_str	00000000 
00028059 l       .debug_str	00000000 
00028160 l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
0005ab5f l       .debug_str	00000000 
0002bb2b l       .debug_str	00000000 
00028f84 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002c0de l       .debug_str	00000000 
0002c1be l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00026c70 l       .debug_str	00000000 
000035dd l       .debug_str	00000000 
0000c1cc l       .debug_str	00000000 
0002c2bc l       .debug_str	00000000 
0002c2c3 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0002c2cb l       .debug_str	00000000 
0002c2df l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0002c311 l       .debug_str	00000000 
0002c325 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002c357 l       .debug_str	00000000 
0002c396 l       .debug_str	00000000 
0002c3a4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2nk42jtdlqpdrpvo
0000f47f l       .debug_str	00000000 
0002ccf0 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0002cde3 l       .debug_str	00000000 
0002ce5b l       .debug_str	00000000 
0002cf75 l       .debug_str	00000000 
0002cfed l       .debug_str	00000000 
0000f4f6 l       .debug_str	00000000 
0000f57a l       .debug_str	00000000 
0000f5f5 l       .debug_str	00000000 
0000f693 l       .debug_str	00000000 
0000f73e l       .debug_str	00000000 
0002d0b9 l       .debug_str	00000000 
0002d131 l       .debug_str	00000000 
0002d1fd l       .debug_str	00000000 
0002d275 l       .debug_str	00000000 
0002d31a l       .debug_str	00000000 
0002d392 l       .debug_str	00000000 
0002d410 l       .debug_str	00000000 
0002d488 l       .debug_str	00000000 
0002d4df l       .debug_str	00000000 
0002d557 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035945 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0005ac4e l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
0002cb82 l       .debug_str	00000000 
0002cbfa l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0002cc78 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2tupw4qr6cy3al7x
00000c36 l       .debug_str	00000000 
00025455 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00034a91 l       .debug_str	00000000 
0002f242 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002f16b l       .debug_str	00000000 
0002d5fc l       .debug_str	00000000 
0002d645 l       .debug_str	00000000 
0001266f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
000163f2 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
0000efdd l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00018c4a l       .debug_str	00000000 
0000efe6 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c95 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 32m5mr5zne5f73k7
0000c06e l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0005d5e6 l       .debug_str	00000000 
0000c05d l       .debug_str	00000000 
000604c1 l       .debug_str	00000000 
0000c061 l       .debug_str	00000000 
0000c065 l       .debug_str	00000000 
00001820 l       .debug_str	00000000 
0005f8fd l       .debug_str	00000000 
0000e5f2 l       .debug_str	00000000 
0000e5e1 l       .debug_str	00000000 
0005bfa4 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
00061200 l       .debug_str	00000000 
0005ae55 l       .debug_str	00000000 
0000e773 l       .debug_str	00000000 
0002dc94 l       .debug_str	00000000 
0002dd30 l       .debug_str	00000000 
0000e70f l       .debug_str	00000000 
0000e718 l       .debug_str	00000000 
0000e726 l       .debug_str	00000000 
00018cfb l       .debug_str	00000000 
0000e73e l       .debug_str	00000000 
00024ef4 l       .debug_str	00000000 
0000f0ef l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
0002dd3b l       .debug_str	00000000 
0002de05 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00012647 l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000bfac l       .debug_str	00000000 
0000e992 l       .debug_str	00000000 
0000f0d5 l       .debug_str	00000000 
0000e778 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
0000efdd l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00018c4a l       .debug_str	00000000 
0000efe6 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c95 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025455 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00034a91 l       .debug_str	00000000 
0002f242 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002f1d6 l       .debug_str	00000000 
0000e998 l       .debug_str	00000000 
0000e99f l       .debug_str	00000000 
0000e634 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
0000c1d1 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006014d l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c26b l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0000c714 l       .debug_str	00000000 
0000c731 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000c777 l       .debug_str	00000000 
0000c788 l       .debug_str	00000000 
0000c7f8 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c955 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00035945 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac4e l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000cb59 l       .debug_str	00000000 
0000cba9 l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
0000cc5a l       .debug_str	00000000 
0000ccd1 l       .debug_str	00000000 
0000cd55 l       .debug_str	00000000 
0000cdd0 l       .debug_str	00000000 
0000ce6e l       .debug_str	00000000 
0000cf19 l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000d080 l       .debug_str	00000000 
0000d152 l       .debug_str	00000000 
0000d21b l       .debug_str	00000000 
0000d307 l       .debug_str	00000000 
0000d400 l       .debug_str	00000000 
0000e9a7 l       .debug_str	00000000 
0000eab9 l       .debug_str	00000000 
0000ebe8 l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
0005ab5f l       .debug_str	00000000 
0002b894 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002773a l       .debug_str	00000000 
0000eff3 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
0002dcb8 l       .debug_str	00000000 
0000f0da l       .debug_str	00000000 
0000f0e0 l       .debug_str	00000000 
0000ca42 l       .debug_str	00000000 
0000d4f0 l       .debug_str	00000000 
0000d603 l       .debug_str	00000000 
0000d723 l       .debug_str	00000000 
0000d83a l       .debug_str	00000000 
0000d973 l       .debug_str	00000000 
0000dac9 l       .debug_str	00000000 
0002b9cc l       .debug_str	00000000 
00027857 l       .debug_str	00000000 
0000f0e9 l       .debug_str	00000000 
0005d25f l       .debug_str	00000000 
0002dd5f l       .debug_str	00000000 
000229ea l       .debug_str	00000000 
0002d6b9 l       .debug_str	00000000 
0002d71c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000bfd0 l       .debug_str	00000000 
0000c055 l       .debug_str	00000000 
000031ab l       .debug_str	00000000 
000229e8 l       .debug_str	00000000 
0005aa19 l       .debug_str	00000000 
00022a2b l       .debug_str	00000000 
0005ef55 l       .debug_str	00000000 
0002f16b l       .debug_str	00000000 
0002d7ec l       .debug_str	00000000 
0002d82f l       .debug_str	00000000 
0002d8d4 l       .debug_str	00000000 
0002d912 l       .debug_str	00000000 
0002d986 l       .debug_str	00000000 
0002d9c6 l       .debug_str	00000000 
0002da68 l       .debug_str	00000000 
0002daf6 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000fd9c l       .debug_str	00000000 
0000fdb8 l       .debug_str	00000000 
0002db67 l       .debug_str	00000000 
0002dbf7 l       .debug_str	00000000 
000104af l       .debug_str	00000000 
00010451 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000163f2 l       .debug_str	00000000 
00020cf0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3ulq1z5tkxz9njop
000012f5 l       .debug_str	00000000 
0002ded7 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00018be5 l       .debug_str	00000000 
00018bdb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
000134f5 l       .debug_str	00000000 
00033353 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002de0e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002de72 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4f0czol4b3uljl4v
00000d05 l       .debug_str	00000000 
0002e055 l       .debug_str	00000000 
00025657 l       .debug_str	00000000 
00026615 l       .debug_str	00000000 
0002e074 l       .debug_str	00000000 
0002e0f2 l       .debug_str	00000000 
0002e182 l       .debug_str	00000000 
0002e199 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005d002 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
0001ff61 l       .debug_str	00000000 
00003d21 l       .debug_str	00000000 
000612f5 l       .debug_str	00000000 
00016223 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002df3c l       .debug_str	00000000 
0002dfc8 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00025f86 l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00026321 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea9d l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c33 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002566c l       .debug_str	00000000 
0002dfd7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n9jsiq8blzioqfk
0002e5e9 l       .debug_str	00000000 
0002e52d l       .debug_str	00000000 
0002e54a l       .debug_str	00000000 
0002e553 l       .debug_str	00000000 
0002e599 l       .debug_str	00000000 
0002e5a2 l       .debug_str	00000000 
0002e81e l       .debug_str	00000000 
0002e632 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
00003d21 l       .debug_str	00000000 
0002e63e l       .debug_str	00000000 
0002e6ba l       .debug_str	00000000 
0005d002 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
0001ff61 l       .debug_str	00000000 
0002e6e5 l       .debug_str	00000000 
0002e761 l       .debug_str	00000000 
0002e793 l       .debug_str	00000000 
0002e819 l       .debug_str	00000000 
0002e828 l       .debug_str	00000000 
0002e182 l       .debug_str	00000000 
0002e899 l       .debug_str	00000000 
0002e90d l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002e917 l       .debug_str	00000000 
0002e924 l       .debug_str	00000000 
0002e99b l       .debug_str	00000000 
0002e9b5 l       .debug_str	00000000 
0005c26b l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
0005a68b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002e220 l       .debug_str	00000000 
0002e249 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00025f86 l       .debug_str	00000000 
0002bc29 l       .debug_str	00000000 
000612f5 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00018bdb l       .debug_str	00000000 
0002bc36 l       .debug_str	00000000 
0002e2be l       .debug_str	00000000 
0002e256 l       .debug_str	00000000 
0002e298 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0002e2ac l       .debug_str	00000000 
0005f652 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0004aedf l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea9d l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c33 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002566c l       .debug_str	00000000 
0002e2c8 l       .debug_str	00000000 
0002e2f1 l       .debug_str	00000000 
00025657 l       .debug_str	00000000 
00025672 l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
0002568f l       .debug_str	00000000 
000256a8 l       .debug_str	00000000 
0002e389 l       .debug_str	00000000 
0002e30e l       .debug_str	00000000 
0002e353 l       .debug_str	00000000 
0002e377 l       .debug_str	00000000 
0002e3a6 l       .debug_str	00000000 
00032f17 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
00025f91 l       .debug_str	00000000 
0002e3d9 l       .debug_str	00000000 
00032f75 l       .debug_str	00000000 
0002ac1d l       .debug_str	00000000 
0002e40c l       .debug_str	00000000 
00032ff7 l       .debug_str	00000000 
00026615 l       .debug_str	00000000 
0002e443 l       .debug_str	00000000 
0003307b l       .debug_str	00000000 
00026321 l       .debug_str	00000000 
0002e47a l       .debug_str	00000000 
0002e4c8 l       .debug_str	00000000 
000229ea l       .debug_str	00000000 
0002e4d8 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z4uczzv8d994j8w
000012f5 l       .debug_str	00000000 
0002eae5 l       .debug_str	00000000 
0002eb37 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
0005abdc l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
00061200 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134dd l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002e9d6 l       .debug_str	00000000 
0002ea24 l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
0002ea2d l       .debug_str	00000000 
0002ea7d l       .debug_str	00000000 
0002ea88 l       .debug_str	00000000 
0002ead9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53kqumdi8360wwys
0002f0bd l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
0000e70f l       .debug_str	00000000 
0000e718 l       .debug_str	00000000 
0000e726 l       .debug_str	00000000 
00018cfb l       .debug_str	00000000 
0000e73e l       .debug_str	00000000 
00024ef4 l       .debug_str	00000000 
0002ef39 l       .debug_str	00000000 
0002eff6 l       .debug_str	00000000 
0002f031 l       .debug_str	00000000 
0002f08a l       .debug_str	00000000 
000253f6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0002f140 l       .debug_str	00000000 
0002f1a4 l       .debug_str	00000000 
0000c26b l       .debug_str	00000000 
0002f1a7 l       .debug_str	00000000 
0000eff9 l       .debug_str	00000000 
000114f8 l       .debug_str	00000000 
00024dbd l       .debug_str	00000000 
000254b7 l       .debug_str	00000000 
00059e37 l       .debug_str	00000000 
00061757 l       .debug_str	00000000 
0002f217 l       .debug_str	00000000 
0002f21a l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
000117aa l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
00018bea l       .debug_str	00000000 
000116b3 l       .debug_str	00000000 
000116be l       .debug_str	00000000 
0002f227 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000efc8 l       .debug_str	00000000 
0000efd3 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0000efdd l       .debug_str	00000000 
0000e738 l       .debug_str	00000000 
0000c232 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00018c4a l       .debug_str	00000000 
0000efe6 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00018c95 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025455 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00034a91 l       .debug_str	00000000 
0002f242 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
0002f16b l       .debug_str	00000000 
0002eb44 l       .debug_str	00000000 
0002ebe1 l       .debug_str	00000000 
0002ec1a l       .debug_str	00000000 
0002ecb9 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002f1d6 l       .debug_str	00000000 
0002ecf2 l       .debug_str	00000000 
0002ed8f l       .debug_str	00000000 
0002edc3 l       .debug_str	00000000 
0002ee66 l       .debug_str	00000000 
0002ef05 l       .debug_str	00000000 
00020dd0 l     O .text	0000001c str.0
00020e00 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 tool5db1zbl71ep
0002f227 l       .debug_str	00000000 
0002f242 l       .debug_str	00000000 
0002f2e6 l       .debug_str	00000000 
0002f35b l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00010a89 l       .debug_str	00000000 
00025446 l       .debug_str	00000000 
000116b3 l       .debug_str	00000000 
000116be l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000bfb1 l       .debug_str	00000000 
0000c241 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000c252 l       .debug_str	00000000 
0000c25d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00018c95 l       .debug_str	00000000 
00034a91 l       .debug_str	00000000 
0002f277 l       .debug_str	00000000 
000253f6 l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025455 l       .debug_str	00000000 
0000c264 l       .debug_str	00000000 
0000c271 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 vnkfcw75uydipan
0002f4a1 l       .debug_str	00000000 
0002566c l       .debug_str	00000000 
00025657 l       .debug_str	00000000 
00025672 l       .debug_str	00000000 
0002f392 l       .debug_str	00000000 
0002f3dd l       .debug_str	00000000 
0002f3f0 l       .debug_str	00000000 
0002f43b l       .debug_str	00000000 
0002f45e l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
0002f4bd l       .debug_str	00000000 
0002e632 l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00025f86 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002bc29 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea9d l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c33 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ik332mkg6tevaet
0000bb41 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010546 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c04a l       .debug_str	00000000 
0001072c l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
0002f500 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
000117aa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1d7thnxtm1658vov
00000d1e l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4c8 l       .debug_str	00000000 
0002f5c5 l       .debug_str	00000000 
0002f602 l       .debug_str	00000000 
0002f613 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000394ec l       .debug_str	00000000 
0005cbd5 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a847 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1mpt8t9sy9fl5s1y
0002f80a l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
0002f689 l       .debug_str	00000000 
000192a8 l       .debug_str	00000000 
0002f6ce l       .debug_str	00000000 
0002f713 l       .debug_str	00000000 
0002f720 l       .debug_str	00000000 
0002f765 l       .debug_str	00000000 
0002f772 l       .debug_str	00000000 
0001b2cf l       .debug_str	00000000 
0002f7b7 l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
0002f7ff l       .debug_str	00000000 
0000bf55 l       .debug_str	00000000 
0002f852 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
0002f898 l       .debug_str	00000000 
0002f8de l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bf73 l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005e9d9 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002f645 l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1yr11byuhnx447wf
0001f37b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00059b32 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00015d26 l       .debug_str	00000000 
00011f74 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0001f60c l       .debug_str	00000000 
000343fe l       .debug_str	00000000 
00011f79 l       .debug_str	00000000 
0001f467 l       .debug_str	00000000 
00011f70 l       .debug_str	00000000 
0001f612 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002f924 l       .debug_str	00000000 
00019349 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001f461 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2c4l9zx47vkj1m82
00035d24 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00012ba6 l       .debug_str	00000000 
0005e9d9 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002f98d l       .debug_str	00000000 
0005c079 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2zdnjadro4igct6r
000197e9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002f9fc l       .debug_str	00000000 
0002fa22 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3w7pruxfhz9uhnv5
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005a68b l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
0005d002 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
000612f5 l       .debug_str	00000000 
0000181f l       .debug_str	00000000 
00016223 l       .debug_str	00000000 
000229ea l       .debug_str	00000000 
0002fa2b l       .debug_str	00000000 
0002faa7 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4wduwt141qumn59z
0000139d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005e7bd l       .debug_str	00000000 
00033353 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0001f37b l       .debug_str	00000000 
0002fad4 l       .debug_str	00000000 
00012ba3 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 pcinnba97cylogg
0001605e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00012647 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0002fb36 l       .debug_str	00000000 
00016050 l       .debug_str	00000000 
00013ae8 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0005a6ba l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 13ma8mzaba1sllzw
0003008c l       .debug_str	00000000 
0003e620 l       .debug_str	00000000 
0000395c l       .debug_str	00000000 
000303e0 l       .debug_str	00000000 
000213cf l       .debug_str	00000000 
0003045f l       .debug_str	00000000 
00021452 l       .debug_str	00000000 
000304de l       .debug_str	00000000 
00030560 l       .debug_str	00000000 
000221bd l       .debug_str	00000000 
000307a4 l       .debug_str	00000000 
00030826 l       .debug_str	00000000 
0003086f l       .debug_str	00000000 
000308f1 l       .debug_str	00000000 
0003093a l       .debug_str	00000000 
000216d3 l       .debug_str	00000000 
000309bc l       .debug_str	00000000 
00030a3e l       .debug_str	00000000 
00030c82 l       .debug_str	00000000 
00030d04 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00030d4d l       .debug_str	00000000 
00030dc1 l       .debug_str	00000000 
0001266f l       .debug_str	00000000 
0001f37b l       .debug_str	00000000 
00012647 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0003578b l       .debug_str	00000000 
000612f5 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013636 l       .debug_str	00000000 
00061200 l       .debug_str	00000000 
00001823 l       .debug_str	00000000 
0002bc48 l       .debug_str	00000000 
00031030 l       .debug_str	00000000 
0003129b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0006014d l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00005824 l       .debug_str	00000000 
0005c26b l       .debug_str	00000000 
00005832 l       .debug_str	00000000 
0000583a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035945 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
0005ac4e l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
0000590a l       .debug_str	00000000 
00005958 l       .debug_str	00000000 
000059c3 l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
0005ab5f l       .debug_str	00000000 
00030d5f l       .debug_str	00000000 
00004a28 l       .debug_str	00000000 
00005ac0 l       .debug_str	00000000 
00005b05 l       .debug_str	00000000 
00005b73 l       .debug_str	00000000 
00005c0a l       .debug_str	00000000 
00005cca l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005ec5 l       .debug_str	00000000 
00006000 l       .debug_str	00000000 
00006164 l       .debug_str	00000000 
000062f1 l       .debug_str	00000000 
000064a7 l       .debug_str	00000000 
00006686 l       .debug_str	00000000 
0000688e l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
000094f8 l       .debug_str	00000000 
0000971c l       .debug_str	00000000 
0000994d l       .debug_str	00000000 
00009b75 l       .debug_str	00000000 
00009dbe l       .debug_str	00000000 
0000a024 l       .debug_str	00000000 
00030dd3 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002fb88 l       .debug_str	00000000 
0002fc0f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
0002fc5c l       .debug_str	00000000 
0002fce3 l       .debug_str	00000000 
0002ff2b l       .debug_str	00000000 
0002ffb4 l       .debug_str	00000000 
00030003 l       .debug_str	00000000 
000302d6 l       .debug_str	00000000 
000210c4 l       .debug_str	00000000 
00030362 l       .debug_str	00000000 
0002134d l       .debug_str	00000000 
00020ef0 l     O .text	0000001c str.0
00020f30 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 4miap3quw76e3k6m
00000beb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134dd l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00061200 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003130b l       .debug_str	00000000 
0000b1cc l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4yl298udq4i2eqhh
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
000134f5 l       .debug_str	00000000 
00033353 l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0003135b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 f8ebwo3yn0ryfmw
00031620 l       .debug_str	00000000 
000082b3 l       .debug_str	00000000 
0000843f l       .debug_str	00000000 
000085ee l       .debug_str	00000000 
000087aa l       .debug_str	00000000 
0000895d l       .debug_str	00000000 
00008b33 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008ef0 l       .debug_str	00000000 
000090ed l       .debug_str	00000000 
000092f7 l       .debug_str	00000000 
00031698 l       .debug_str	00000000 
000318c3 l       .debug_str	00000000 
0003193b l       .debug_str	00000000 
00031aca l       .debug_str	00000000 
00031b42 l       .debug_str	00000000 
00031caa l       .debug_str	00000000 
00031d22 l       .debug_str	00000000 
00031da0 l       .debug_str	00000000 
00031e18 l       .debug_str	00000000 
00031f0b l       .debug_str	00000000 
00031f83 l       .debug_str	00000000 
00032160 l       .debug_str	00000000 
000321d8 l       .debug_str	00000000 
000322a4 l       .debug_str	00000000 
0003231c l       .debug_str	00000000 
0003234c l       .debug_str	00000000 
000323c4 l       .debug_str	00000000 
00032469 l       .debug_str	00000000 
000324e1 l       .debug_str	00000000 
00032622 l       .debug_str	00000000 
0003269a l       .debug_str	00000000 
00032850 l       .debug_str	00000000 
000328c8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005875 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00035945 l       .debug_str	00000000 
0000587b l       .debug_str	00000000 
0000587e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000058a7 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
0005ac4e l       .debug_str	00000000 
000058dd l       .debug_str	00000000 
00006abf l       .debug_str	00000000 
000313bf l       .debug_str	00000000 
00031437 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00006ac2 l       .debug_str	00000000 
00006b12 l       .debug_str	00000000 
00006b6f l       .debug_str	00000000 
00006bc3 l       .debug_str	00000000 
00006c3a l       .debug_str	00000000 
00006cbe l       .debug_str	00000000 
00006d39 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00006fe9 l       .debug_str	00000000 
000070bb l       .debug_str	00000000 
00007184 l       .debug_str	00000000 
00007270 l       .debug_str	00000000 
00007369 l       .debug_str	00000000 
0003148e l       .debug_str	00000000 
00031506 l       .debug_str	00000000 
00007459 l       .debug_str	00000000 
0000756c l       .debug_str	00000000 
0000768c l       .debug_str	00000000 
000077a3 l       .debug_str	00000000 
000078dd l       .debug_str	00000000 
00007a24 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007cc3 l       .debug_str	00000000 
00007e31 l       .debug_str	00000000 
00007f96 l       .debug_str	00000000 
0000811e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16gyyaet005v3lvf
00024db3 l       .debug_str	00000000 
00032acc l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00032b2c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00035945 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1gec8qpvo4ti2nbg
0001c3e1 l       .debug_str	00000000 
0002ead9 l       .debug_str	00000000 
00032c90 l       .debug_str	00000000 
0002eb37 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
0005abdc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000134e5 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00032b8c l       .debug_str	00000000 
0002ea24 l       .debug_str	00000000 
00025f86 l       .debug_str	00000000 
00032bde l       .debug_str	00000000 
00032c31 l       .debug_str	00000000 
00032c3b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 28buxl9xaffr9rke
0005a7be l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005e9d9 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00032ce6 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00018bdb l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2leljxexqh8ze7wz
00035d24 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00012ba6 l       .debug_str	00000000 
0005e9d9 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00032d43 l       .debug_str	00000000 
0005c079 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cgt5uexdtuxl7pe
00033093 l       .debug_str	00000000 
00032f99 l       .debug_str	00000000 
00032fb6 l       .debug_str	00000000 
00032ff1 l       .debug_str	00000000 
0003301f l       .debug_str	00000000 
0003303a l       .debug_str	00000000 
00033075 l       .debug_str	00000000 
0003309e l       .debug_str	00000000 
00032c31 l       .debug_str	00000000 
000330c4 l       .debug_str	00000000 
000330ea l       .debug_str	00000000 
00033104 l       .debug_str	00000000 
0002ea7d l       .debug_str	00000000 
0003312b l       .debug_str	00000000 
00033152 l       .debug_str	00000000 
0005c26b l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005db2c l       .debug_str	00000000 
0005ae36 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00032db4 l       .debug_str	00000000 
00032dc6 l       .debug_str	00000000 
00032dd7 l       .debug_str	00000000 
00032e23 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea9d l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c33 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002566c l       .debug_str	00000000 
00032e2f l       .debug_str	00000000 
00032e51 l       .debug_str	00000000 
00032e72 l       .debug_str	00000000 
00032ebe l       .debug_str	00000000 
00032eda l       .debug_str	00000000 
00032f11 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00025f86 l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00032f2b l       .debug_str	00000000 
00032f38 l       .debug_str	00000000 
00032f6f l       .debug_str	00000000 
00025657 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 26y0fjfhtczgcip1
0005abdc l       .debug_str	00000000 
00033296 l       .debug_str	00000000 
000332b2 l       .debug_str	00000000 
000332d8 l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
00002389 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005db2c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003316d l       .debug_str	00000000 
00013524 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00033196 l       .debug_str	00000000 
000331a7 l       .debug_str	00000000 
000331b7 l       .debug_str	00000000 
00033203 l       .debug_str	00000000 
0003320e l       .debug_str	00000000 
00033244 l       .debug_str	00000000 
0003325c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3529eu2hb2fyibnd
00016105 l       .debug_str	00000000 
0001613f l       .debug_str	00000000 
00016178 l       .debug_str	00000000 
00016187 l       .debug_str	00000000 
000161ca l       .debug_str	00000000 
0005c107 l       .debug_str	00000000 
00038a92 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000133e4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
000114f8 l       .debug_str	00000000 
000114fc l       .debug_str	00000000 
00016181 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000332e1 l       .debug_str	00000000 
00013427 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
0003330a l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cyvbl47c30y60eb
0005c328 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00012ba6 l       .debug_str	00000000 
0005e9d9 l       .debug_str	00000000 
00033346 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00033359 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
000333e5 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
000333ee l       .debug_str	00000000 
0003e620 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000333fe l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19nunfeq6523tst5
00024db3 l       .debug_str	00000000 
00033425 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00033485 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00035945 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1xpo0qpsduc6enem
00033551 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00005860 l       .debug_str	00000000 
00005868 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
000334e5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4xxoizn3g1nl6m5i
00035d24 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000150a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
00012ba6 l       .debug_str	00000000 
0005e9d9 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
0003355a l       .debug_str	00000000 
0005c079 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 25lz0dio8kzdubcg
0001605e l       .debug_str	00000000 
0005abdc l       .debug_str	00000000 
00025657 l       .debug_str	00000000 
000100a8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000bf77 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
000133a1 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000335cb l       .debug_str	00000000 
00033609 l       .debug_str	00000000 
0000f1f7 l       .debug_str	00000000 
0005ea9d l       .debug_str	00000000 
0000237d l       .debug_str	00000000 
00024c33 l       .debug_str	00000000 
00002383 l       .debug_str	00000000 
0002566c l       .debug_str	00000000 
00033622 l       .debug_str	00000000 
00033660 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00025f86 l       .debug_str	00000000 
0005ae36 l       .debug_str	00000000 
0000fd6f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.b09zx0wt-cgu.0
00000afc l       .debug_str	00000000 
00033689 l       .debug_str	00000000 
0003369c l       .debug_str	00000000 
00013366 l       .debug_str	00000000 
0005e9d9 l       .debug_str	00000000 
000336cd l       .debug_str	00000000 
000336d5 l       .debug_str	00000000 
000336de l       .debug_str	00000000 
00033727 l       .debug_str	00000000 
00004f92 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000336e5 l       .debug_str	00000000 
00033724 l       .debug_str	00000000 
0003372d l       .debug_str	00000000 
0003376f l       .debug_str	00000000 
00033779 l       .debug_str	00000000 
000337bc l       .debug_str	00000000 
000337c6 l       .debug_str	00000000 
00033809 l       .debug_str	00000000 
00033813 l       .debug_str	00000000 
00033856 l       .debug_str	00000000 
00033861 l       .debug_str	00000000 
000338a6 l       .debug_str	00000000 
000338b1 l       .debug_str	00000000 
000338f6 l       .debug_str	00000000 
000338fc l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
00004a38 l       .debug_str	00000000 
00033f31 l       .debug_str	00000000 
000114f8 l       .debug_str	00000000 
00033909 l       .debug_str	00000000 
00033919 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00012647 l       .debug_str	00000000 
00011700 l       .debug_str	00000000 
00012631 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000396b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ab7a l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003578b l       .debug_str	00000000 
000612f5 l       .debug_str	00000000 
0000586d l       .debug_str	00000000 
0000586e l       .debug_str	00000000 
0000139d l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
00013636 l       .debug_str	00000000 
00024ca8 l       .debug_str	00000000 
00001d46 l       .debug_str	00000000 
0003395f l       .debug_str	00000000 
000229ea l       .debug_str	00000000 
0005f748 l       .debug_str	00000000 
00034335 l       .debug_str	00000000 
00012639 l       .debug_str	00000000 
0005f35a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005abb0 l       .debug_str	00000000 
00033971 l       .debug_str	00000000 
00033976 l       .debug_str	00000000 
00060cd0 l       .debug_str	00000000 
00033981 l       .debug_str	00000000 
00000326 l       .debug_str	00000000 
0003398b l       .debug_str	00000000 
00033fff l       .debug_str	00000000 
00033995 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
0003403f l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00034378 l       .debug_str	00000000 
00012643 l       .debug_str	00000000 
00005842 l       .debug_str	00000000 
000339a3 l       .debug_str	00000000 
00033a17 l       .debug_str	00000000 
00034259 l       .debug_str	00000000 
00033a29 l       .debug_str	00000000 
00034045 l       .debug_str	00000000 
0003401f l       .debug_str	00000000 
00014aea l       .debug_str	00000000 
0003429c l       .debug_str	00000000 
00033a2e l       .debug_str	00000000 
00033aa2 l       .debug_str	00000000 
000343b1 l       .debug_str	00000000 
000343f8 l       .debug_str	00000000 
000342fe l       .debug_str	00000000 
00033aba l       .debug_str	00000000 
00043b8d l       .debug_str	00000000 
000392ac l       .debug_str	00000000 
0005ab5f l       .debug_str	00000000 
00034413 l       .debug_str	00000000 
000342cd l       .debug_str	00000000 
00033b32 l       .debug_str	00000000 
000042c8 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005e966 l       .debug_str	00000000 
000221bd l       .debug_str	00000000 
00033b8a l       .debug_str	00000000 
00033b8f l       .debug_str	00000000 
00033ba1 l       .debug_str	00000000 
0001c3e1 l       .debug_str	00000000 
00034a91 l       .debug_str	00000000 
00033baa l       .debug_str	00000000 
0001a519 l       .debug_str	00000000 
00033bd2 l       .debug_str	00000000 
00033be2 l       .debug_str	00000000 
0005d002 l       .debug_str	00000000 
00033c3b l       .debug_str	00000000 
00033c43 l       .debug_str	00000000 
000135c6 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00010b34 l       .debug_str	00000000 
00033c4b l       .debug_str	00000000 
0001628b l       .debug_str	00000000 
00033c57 l       .debug_str	00000000 
00033c61 l       .debug_str	00000000 
00033c6e l       .debug_str	00000000 
00033c7b l       .debug_str	00000000 
00033c90 l       .debug_str	00000000 
00033ca4 l       .debug_str	00000000 
00033cba l       .debug_str	00000000 
00033cc2 l       .debug_str	00000000 
00033ccf l       .debug_str	00000000 
00033cdc l       .debug_str	00000000 
000345e5 l       .debug_str	00000000 
0000c06f l       .debug_str	00000000 
00033ce9 l       .debug_str	00000000 
00033d16 l       .debug_str	00000000 
00033d45 l       .debug_str	00000000 
00033d6c l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
000013c2 l       .debug_str	00000000 
00033d8b l       .debug_str	00000000 
00033da0 l       .debug_str	00000000 
00019f3b l       .debug_str	00000000 
0004ea31 l       .debug_str	00000000 
0000b6cb l       .debug_str	00000000 
0005a7be l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00033daa l       .debug_str	00000000 
00033dcf l       .debug_str	00000000 
00033db5 l       .debug_str	00000000 
00033e4e l       .debug_str	00000000 
00033ddf l       .debug_str	00000000 
00033de5 l       .debug_str	00000000 
00033df4 l       .debug_str	00000000 
00033dff l       .debug_str	00000000 
00033e34 l       .debug_str	00000000 
00033e59 l       .debug_str	00000000 
00033e69 l       .debug_str	00000000 
0005b3c8 l       .debug_str	00000000 
00033e9b l       .debug_str	00000000 
00033ea0 l       .debug_str	00000000 
0005c26b l       .debug_str	00000000 
00035705 l       .debug_str	00000000 
000356fe l       .debug_str	00000000 
000134f5 l       .debug_str	00000000 
0003572c l       .debug_str	00000000 
00035760 l       .debug_str	00000000 
00033ea6 l       .debug_str	00000000 
0000581f l       .debug_str	00000000 
00033ee4 l       .debug_str	00000000 
00035709 l       .debug_str	00000000 
00035756 l       .debug_str	00000000 
00033ec5 l       .debug_str	00000000 
00033eb2 l       .debug_str	00000000 
00033ecb l       .debug_str	00000000 
000221bc l       .debug_str	00000000 
0000bb41 l       .debug_str	00000000 
0000bb40 l       .debug_str	00000000 
00033ef3 l       .debug_str	00000000 
00033efb l       .debug_str	00000000 
0003f3c4 l       .debug_str	00000000 
00033f01 l       .debug_str	00000000 
0004ceef l       .debug_str	00000000 
00033f28 l       .debug_str	00000000 
00033f0c l       .debug_str	00000000 
0000e8a7 l       .debug_str	00000000 
00033f30 l       .debug_str	00000000 
00033bdc l       .debug_str	00000000 
00022b50 l       .debug_str	00000000 
00024c08 l       .debug_str	00000000 
00033f35 l       .debug_str	00000000 
00033f59 l       .debug_str	00000000 
00033f5f l       .debug_str	00000000 
00033f67 l       .debug_str	00000000 
0004f55a l       .debug_str	00000000 
0003efc0 l       .debug_str	00000000 
00033f6c l       .debug_str	00000000 
00033f94 l       .debug_str	00000000 
00033f76 l       .debug_str	00000000 
00025f8d l       .debug_str	00000000 
00018bdb l       .debug_str	00000000 
000160fe l       .debug_str	00000000 
0001f427 l       .debug_str	00000000 
00022b58 l       .debug_str	00000000 
00022b65 l       .debug_str	00000000 
00022b6e l       .debug_str	00000000 
00059b26 l       .debug_str	00000000 
00033fa8 l       .debug_str	00000000 
00033f9c l       .debug_str	00000000 
00012ba6 l       .debug_str	00000000 
00033fb5 l       .debug_str	00000000 
00033fc1 l       .debug_str	00000000 
00033fe4 l       .debug_str	00000000 
00033fce l       .debug_str	00000000 
00033ff2 l       .debug_str	00000000 
00034012 l       .debug_str	00000000 
00034032 l       .debug_str	00000000 
0003404d l       .debug_str	00000000 
00034068 l       .debug_str	00000000 
0003406e l       .debug_str	00000000 
00034072 l       .debug_str	00000000 
00034083 l       .debug_str	00000000 
00034076 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00034098 l       .debug_str	00000000 
00034093 l       .debug_str	00000000 
000340ab l       .debug_str	00000000 
000340f7 l       .debug_str	00000000 
000340d0 l       .debug_str	00000000 
000340e7 l       .debug_str	00000000 
00034111 l       .debug_str	00000000 
00034102 l       .debug_str	00000000 
00034159 l       .debug_str	00000000 
00034139 l       .debug_str	00000000 
000341b2 l       .debug_str	00000000 
00034192 l       .debug_str	00000000 
00059b18 l       .debug_str	00000000 
00034209 l       .debug_str	00000000 
0003420e l       .debug_str	00000000 
00034214 l       .debug_str	00000000 
00034237 l       .debug_str	00000000 
00034219 l       .debug_str	00000000 
00034242 l       .debug_str	00000000 
0003428d l       .debug_str	00000000 
000342be l       .debug_str	00000000 
000342ef l       .debug_str	00000000 
0003431e l       .debug_str	00000000 
00034369 l       .debug_str	00000000 
0003439a l       .debug_str	00000000 
0001a338 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000399d6 l       .debug_str	00000000 
00001a3f l       .debug_str	00000000 
000394ec l       .debug_str	00000000 
0005cbd5 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0006120f l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005a847 l       .debug_str	00000000 
0005a748 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0005ad90 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001f34b l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001f4c8 l       .debug_str	00000000 
0001f4bc l       .debug_str	00000000 
0001f2f9 l       .debug_str	00000000 
000343eb l       .debug_str	00000000 
00034404 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00034432 l       .debug_str	00000000 
00034431 l       .debug_str	00000000 
00034446 l       .debug_str	00000000 
00034437 l       .debug_str	00000000 
0005a839 l       .debug_str	00000000 
00059b06 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
00034473 l       .debug_str	00000000 
00034465 l       .debug_str	00000000 
00034464 l       .debug_str	00000000 
0001f430 l       .debug_str	00000000 
00018be5 l       .debug_str	00000000 
00061645 l       .debug_str	00000000 
0003447c l       .debug_str	00000000 
00034480 l       .debug_str	00000000 
00034483 l       .debug_str	00000000 
00060135 l       .debug_str	00000000 
00018bc9 l       .debug_str	00000000 
00034486 l       .debug_str	00000000 
00019eb3 l       .debug_str	00000000 
0003448a l       .debug_str	00000000 
00034489 l       .debug_str	00000000 
0003448f l       .debug_str	00000000 
00034561 l       .debug_str	00000000 
00000238 l       .debug_str	00000000 
000344ad l       .debug_str	00000000 
0003449b l       .debug_str	00000000 
000344d2 l       .debug_str	00000000 
0003459a l       .debug_str	00000000 
000344f0 l       .debug_str	00000000 
000344de l       .debug_str	00000000 
00034515 l       .debug_str	00000000 
0003452e l       .debug_str	00000000 
0003451c l       .debug_str	00000000 
0003453a l       .debug_str	00000000 
00034552 l       .debug_str	00000000 
0003458b l       .debug_str	00000000 
00019eb9 l       .debug_str	00000000 
000345c4 l       .debug_str	00000000 
000345d1 l       .debug_str	00000000 
000345d0 l       .debug_str	00000000 
000345d9 l       .debug_str	00000000 
00034606 l       .debug_str	00000000 
000345f1 l       .debug_str	00000000 
00034623 l       .debug_str	00000000 
0003462f l       .debug_str	00000000 
000346d9 l       .debug_str	00000000 
0003463b l       .debug_str	00000000 
00034642 l       .debug_str	00000000 
0003464b l       .debug_str	00000000 
00034659 l       .debug_str	00000000 
00034660 l       .debug_str	00000000 
00034668 l       .debug_str	00000000 
0003466f l       .debug_str	00000000 
000346b5 l       .debug_str	00000000 
00034690 l       .debug_str	00000000 
0003467b l       .debug_str	00000000 
000346a0 l       .debug_str	00000000 
000346c4 l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
000346e5 l       .debug_str	00000000 
00024c1b l       .debug_str	00000000 
0005e01f l       .debug_str	00000000 
0001f26c l       .debug_str	00000000 
0001f255 l       .debug_str	00000000 
000346ff l       .debug_str	00000000 
00034722 l       .debug_str	00000000 
0003470b l       .debug_str	00000000 
0003476c l       .debug_str	00000000 
00034760 l       .debug_str	00000000 
00033bd7 l       .debug_str	00000000 
00034789 l       .debug_str	00000000 
00034772 l       .debug_str	00000000 
000347d2 l       .debug_str	00000000 
000347fa l       .debug_str	00000000 
000347e3 l       .debug_str	00000000 
0005cbc3 l       .debug_str	00000000 
00002884 l       .debug_str	00000000 
0005ac4e l       .debug_str	00000000 
000348a9 l       .debug_str	00000000 
0003488b l       .debug_str	00000000 
0003499f l       .debug_str	00000000 
0003497f l       .debug_str	00000000 
00034a12 l       .debug_str	00000000 
000349f2 l       .debug_str	00000000 
0004b018 l       .debug_str	00000000 
00034a65 l       .debug_str	00000000 
00034a72 l       .debug_str	00000000 
00034a7d l       .debug_str	00000000 
00034a93 l       .debug_str	00000000 
00034a9d l       .debug_str	00000000 
00034af3 l       .debug_str	00000000 
00034b05 l       .debug_str	00000000 
00034b57 l       .debug_str	00000000 
00034b6b l       .debug_str	00000000 
00034bbf l       .debug_str	00000000 
00034bc6 l       .debug_str	00000000 
00034c0c l       .debug_str	00000000 
00034c1b l       .debug_str	00000000 
00034c75 l       .debug_str	00000000 
00034ccb l       .debug_str	00000000 
00034d23 l       .debug_str	00000000 
00034d6d l       .debug_str	00000000 
00034d73 l       .debug_str	00000000 
00034dc3 l       .debug_str	00000000 
00034e0f l       .debug_str	00000000 
00034e5d l       .debug_str	00000000 
00024cc1 l       .debug_str	00000000 
00034e9d l       .debug_str	00000000 
00034eea l       .debug_str	00000000 
00034f33 l       .debug_str	00000000 
00034f7e l       .debug_str	00000000 
00034fbb l       .debug_str	00000000 
00034fcb l       .debug_str	00000000 
00035026 l       .debug_str	00000000 
0003507d l       .debug_str	00000000 
000350d6 l       .debug_str	00000000 
000423ac l       .debug_str	00000000 
00035121 l       .debug_str	00000000 
00035175 l       .debug_str	00000000 
000351c5 l       .debug_str	00000000 
00035217 l       .debug_str	00000000 
0005a6ba l       .debug_str	00000000 
0003525b l       .debug_str	00000000 
000352a7 l       .debug_str	00000000 
000352ef l       .debug_str	00000000 
00035339 l       .debug_str	00000000 
000421e2 l       .debug_str	00000000 
00035375 l       .debug_str	00000000 
000353c9 l       .debug_str	00000000 
00035419 l       .debug_str	00000000 
0003546b l       .debug_str	00000000 
000354af l       .debug_str	00000000 
000354bb l       .debug_str	00000000 
00035512 l       .debug_str	00000000 
00035565 l       .debug_str	00000000 
000355ba l       .debug_str	00000000 
00035601 l       .debug_str	00000000 
0003560d l       .debug_str	00000000 
00035624 l       .debug_str	00000000 
0003561d l       .debug_str	00000000 
00035636 l       .debug_str	00000000 
0003564b l       .debug_str	00000000 
0003569c l       .debug_str	00000000 
000356ac l       .debug_str	00000000 
000356fd l       .debug_str	00000000 
00035708 l       .debug_str	00000000 
0003572b l       .debug_str	00000000 
0003575f l       .debug_str	00000000 
00035775 l       .debug_str	00000000 
000357a3 l       .debug_str	00000000 
00035797 l       .debug_str	00000000 
000357b1 l       .debug_str	00000000 
000357b0 l       .debug_str	00000000 
00001b69 l       .debug_str	00000000 
00018bd1 l       .debug_str	00000000 
00024c2e l       .debug_str	00000000 
00024c2d l       .debug_str	00000000 
00024c33 l       .debug_str	00000000 
00024c32 l       .debug_str	00000000 
000357b4 l       .debug_str	00000000 
000357f4 l       .debug_str	00000000 
000357fc l       .debug_str	00000000 
0003583c l       .debug_str	00000000 
00035846 l       .debug_str	00000000 
00059c52 l       .debug_str	00000000 
0005e7bd l       .debug_str	00000000 
00035882 l       .debug_str	00000000 
0001b0a7 l       .debug_str	00000000 
000386a2 l       .debug_str	00000000 
000358aa l       .debug_str	00000000 
0001af5f l       .debug_str	00000000 
000358d3 l       .debug_str	00000000 
000358f8 l       .debug_str	00000000 
00046830 l       .debug_str	00000000 
0005aca8 l       .debug_str	00000000 
000358ff l       .debug_str	00000000 
00035908 l       .debug_str	00000000 
00035941 l       .debug_str	00000000 
00010e27 l       .debug_str	00000000 
00035949 l       .debug_str	00000000 
00014398 l       .debug_str	00000000 
000359de l       .debug_str	00000000 
0000be9b l       .debug_str	00000000 
00035a29 l       .debug_str	00000000 
0000be46 l       .debug_str	00000000 
00035a70 l       .debug_str	00000000 
00013ae8 l       .debug_str	00000000 
00035ac5 l       .debug_str	00000000 
00035b02 l       .debug_str	00000000 
000134e5 l       .debug_str	00000000 
00035b0d l       .debug_str	00000000 
000142a2 l       .debug_str	00000000 
00035b62 l       .debug_str	00000000 
00014232 l       .debug_str	00000000 
00035bb4 l       .debug_str	00000000 
0000ab71 l       .debug_str	00000000 
00035bfb l       .debug_str	00000000 
0000ab6c l       .debug_str	00000000 
00002d9c l       .debug_str	00000000 
00011e2f l       .debug_str	00000000 
00036605 l       .debug_str	00000000 
00035c81 l       .debug_str	00000000 
00035cc2 l       .debug_str	00000000 
00035ce5 l       .debug_str	00000000 
00035d20 l       .debug_str	00000000 
00035d2a l       .debug_str	00000000 
00035db4 l       .debug_str	00000000 
00035de6 l       .debug_str	00000000 
000130da l       .debug_str	00000000 
000134dd l       .debug_str	00000000 
00035e5a l       .debug_str	00000000 
00035eab l       .debug_str	00000000 
00013611 l       .debug_str	00000000 
00035eed l       .debug_str	00000000 
00035f74 l       .debug_str	00000000 
00035f83 l       .debug_str	00000000 
0003600d l       .debug_str	00000000 
00036089 l       .debug_str	00000000 
000360b9 l       .debug_str	00000000 
000360f4 l       .debug_str	00000000 
000360fe l       .debug_str	00000000 
00003ab0 l       .debug_str	00000000 
00036175 l       .debug_str	00000000 
000361ca l       .debug_str	00000000 
000361d3 l       .debug_str	00000000 
00036224 l       .debug_str	00000000 
0000579d l       .debug_str	00000000 
00036230 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0003623d l       .debug_str	00000000 
00036246 l       .debug_str	00000000 
0003625c l       .debug_str	00000000 
00036269 l       .debug_str	00000000 
000362ae l       .debug_str	00000000 
000362c2 l       .debug_str	00000000 
00036317 l       .debug_str	00000000 
00036320 l       .debug_str	00000000 
0004d4cf l       .debug_str	00000000 
00036358 l       .debug_str	00000000 
00036395 l       .debug_str	00000000 
000363a0 l       .debug_str	00000000 
00036423 l       .debug_str	00000000 
0003642e l       .debug_str	00000000 
000364b4 l       .debug_str	00000000 
00036529 l       .debug_str	00000000 
00036555 l       .debug_str	00000000 
000365de l       .debug_str	00000000 
000365ed l       .debug_str	00000000 
000365fa l       .debug_str	00000000 
0003660e l       .debug_str	00000000 
00036664 l       .debug_str	00000000 
000366d3 l       .debug_str	00000000 
00036753 l       .debug_str	00000000 
000367c1 l       .debug_str	00000000 
0003684c l       .debug_str	00000000 
000368c1 l       .debug_str	00000000 
00036901 l       .debug_str	00000000 
00036984 l       .debug_str	00000000 
000369c5 l       .debug_str	00000000 
0004aeda l       .debug_str	00000000 
0004e9f4 l       .debug_str	00000000 
00036a2a l       .debug_str	00000000 
00036ad9 l       .debug_str	00000000 
00036b24 l       .debug_str	00000000 
0001451d l       .debug_str	00000000 
00036bcd l       .debug_str	00000000 
00036c49 l       .debug_str	00000000 
0001339b l       .debug_str	00000000 
00036c6e l       .debug_str	00000000 
0000bf06 l       .debug_str	00000000 
00036cbb l       .debug_str	00000000 
00013a8b l       .debug_str	00000000 
00036d0e l       .debug_str	00000000 
00036d49 l       .debug_str	00000000 
00036d54 l       .debug_str	00000000 
00019b57 l       .debug_str	00000000 
00036de0 l       .debug_str	00000000 
000136e3 l       .debug_str	00000000 
00036e63 l       .debug_str	00000000 
00036eeb l       .debug_str	00000000 
0001ffe7 l       .debug_str	00000000 
00036f60 l       .debug_str	00000000 
00036fe6 l       .debug_str	00000000 
00014a24 l       .debug_str	00000000 
0003705b l       .debug_str	00000000 
0000b6af l       .debug_str	00000000 
000370be l       .debug_str	00000000 
0000abf6 l       .debug_str	00000000 
00037120 l       .debug_str	00000000 
0000a8e2 l       .debug_str	00000000 
00037166 l       .debug_str	00000000 
000371ae l       .debug_str	00000000 
000371b8 l       .debug_str	00000000 
000371f9 l       .debug_str	00000000 
00037213 l       .debug_str	00000000 
00024ce6 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00037219 l       .debug_str	00000000 
00037222 l       .debug_str	00000000 
00037287 l       .debug_str	00000000 
00037296 l       .debug_str	00000000 
000372d8 l       .debug_str	00000000 
000372e2 l       .debug_str	00000000 
00037347 l       .debug_str	00000000 
00037389 l       .debug_str	00000000 
000373d3 l       .debug_str	00000000 
000373e2 l       .debug_str	00000000 
00037418 l       .debug_str	00000000 
00037421 l       .debug_str	00000000 
00016985 l       .debug_str	00000000 
0003742b l       .debug_str	00000000 
0003742e l       .debug_str	00000000 
00037466 l       .debug_str	00000000 
00037470 l       .debug_str	00000000 
000374b4 l       .debug_str	00000000 
000374ca l       .debug_str	00000000 
00037513 l       .debug_str	00000000 
00013658 l       .debug_str	00000000 
00024cd1 l       .debug_str	00000000 
00037558 l       .debug_str	00000000 
000375a1 l       .debug_str	00000000 
000375af l       .debug_str	00000000 
000375f7 l       .debug_str	00000000 
0002339f l       .debug_str	00000000 
00037641 l       .debug_str	00000000 
00040e19 l       .debug_str	00000000 
000376d9 l       .debug_str	00000000 
0005a68b l       .debug_str	00000000 
00037773 l       .debug_str	00000000 
0002388f l       .debug_str	00000000 
000377e5 l       .debug_str	00000000 
000235c2 l       .debug_str	00000000 
00037888 l       .debug_str	00000000 
00001a3b l       .debug_str	00000000 
000378ba l       .debug_str	00000000 
00037901 l       .debug_str	00000000 
0003790f l       .debug_str	00000000 
00037919 l       .debug_str	00000000 
00037967 l       .debug_str	00000000 
00037977 l       .debug_str	00000000 
000379c2 l       .debug_str	00000000 
000379d0 l       .debug_str	00000000 
00037a5e l       .debug_str	00000000 
00037a6d l       .debug_str	00000000 
0000bf55 l       .debug_str	00000000 
00037ab6 l       .debug_str	00000000 
0000befe l       .debug_str	00000000 
00037afb l       .debug_str	00000000 
00037b35 l       .debug_str	00000000 
00037b3e l       .debug_str	00000000 
00037b8a l       .debug_str	00000000 
00037ba2 l       .debug_str	00000000 
00037c04 l       .debug_str	00000000 
0000be4e l       .debug_str	00000000 
00037c39 l       .debug_str	00000000 
00037c61 l       .debug_str	00000000 
00037c99 l       .debug_str	00000000 
00037cc2 l       .debug_str	00000000 
00037ccd l       .debug_str	00000000 
0001a2b6 l       .debug_str	00000000 
00037cf2 l       .debug_str	00000000 
00037d81 l       .debug_str	00000000 
00037db8 l       .debug_str	00000000 
00037e3e l       .debug_str	00000000 
00037e8c l       .debug_str	00000000 
00037e95 l       .debug_str	00000000 
00037f1b l       .debug_str	00000000 
00037f2e l       .debug_str	00000000 
00037fb7 l       .debug_str	00000000 
00038013 l       .debug_str	00000000 
00038055 l       .debug_str	00000000 
00038107 l       .debug_str	00000000 
00038146 l       .debug_str	00000000 
000381eb l       .debug_str	00000000 
0003827f l       .debug_str	00000000 
000382a5 l       .debug_str	00000000 
00038321 l       .debug_str	00000000 
0003835c l       .debug_str	00000000 
00038369 l       .debug_str	00000000 
000383a2 l       .debug_str	00000000 
000383ba l       .debug_str	00000000 
000383fa l       .debug_str	00000000 
00033353 l       .debug_str	00000000 
00038406 l       .debug_str	00000000 
00038463 l       .debug_str	00000000 
000384c0 l       .debug_str	00000000 
0003856d l       .debug_str	00000000 
000385ca l       .debug_str	00000000 
00015e04 l       .debug_str	00000000 
00038637 l       .debug_str	00000000 
0003869b l       .debug_str	00000000 
000386a6 l       .debug_str	00000000 
000386d6 l       .debug_str	00000000 
00038702 l       .debug_str	00000000 
0003876e l       .debug_str	00000000 
0003879e l       .debug_str	00000000 
000387da l       .debug_str	00000000 
00038824 l       .debug_str	00000000 
00038834 l       .debug_str	00000000 
00038869 l       .debug_str	00000000 
000388ae l       .debug_str	00000000 
000388b9 l       .debug_str	00000000 
000388f9 l       .debug_str	00000000 
00038907 l       .debug_str	00000000 
00038993 l       .debug_str	00000000 
00038a0f l       .debug_str	00000000 
00038a2f l       .debug_str	00000000 
00038a89 l       .debug_str	00000000 
00038a96 l       .debug_str	00000000 
00038acf l       .debug_str	00000000 
00038ad7 l       .debug_str	00000000 
00038b2c l       .debug_str	00000000 
00038b7e l       .debug_str	00000000 
00037a63 l       .debug_str	00000000 
00038bc5 l       .debug_str	00000000 
00038c39 l       .debug_str	00000000 
00038c7d l       .debug_str	00000000 
00038cc9 l       .debug_str	00000000 
00038d08 l       .debug_str	00000000 
00038d2e l       .debug_str	00000000 
00038d40 l       .debug_str	00000000 
00038d4a l       .debug_str	00000000 
00038d8c l       .debug_str	00000000 
00003a03 l       .debug_str	00000000 
00038e13 l       .debug_str	00000000 
0002faa7 l       .debug_str	00000000 
00038e8f l       .debug_str	00000000 
00038f06 l       .debug_str	00000000 
00038f54 l       .debug_str	00000000 
00003c53 l       .debug_str	00000000 
00038fe4 l       .debug_str	00000000 
00039020 l       .debug_str	00000000 
0003902d l       .debug_str	00000000 
00039073 l       .debug_str	00000000 
00039080 l       .debug_str	00000000 
00039dc6 l       .debug_str	00000000 
000390b2 l       .debug_str	00000000 
00039102 l       .debug_str	00000000 
00039119 l       .debug_str	00000000 
000391a3 l       .debug_str	00000000 
0000aab7 l       .debug_str	00000000 
0003921f l       .debug_str	00000000 
00039233 l       .debug_str	00000000 
00039290 l       .debug_str	00000000 
0003929f l       .debug_str	00000000 
000392b0 l       .debug_str	00000000 
0003930a l       .debug_str	00000000 
00039319 l       .debug_str	00000000 
000393a2 l       .debug_str	00000000 
000393b0 l       .debug_str	00000000 
00039406 l       .debug_str	00000000 
0003945a l       .debug_str	00000000 
000394d3 l       .debug_str	00000000 
000394eb l       .debug_str	00000000 
000394f5 l       .debug_str	00000000 
0003958c l       .debug_str	00000000 
000395a6 l       .debug_str	00000000 
0001ced3 l       .debug_str	00000000 
000395df l       .debug_str	00000000 
00012ba3 l       .debug_str	00000000 
00039644 l       .debug_str	00000000 
000396db l       .debug_str	00000000 
000396df l       .debug_str	00000000 
000399d4 l       .debug_str	00000000 
000396e4 l       .debug_str	00000000 
0005f685 l       .debug_str	00000000 
000133a1 l       .debug_str	00000000 
00039716 l       .debug_str	00000000 
000190d9 l       .debug_str	00000000 
00039754 l       .debug_str	00000000 
0000a888 l       .debug_str	00000000 
000397a7 l       .debug_str	00000000 
00039833 l       .debug_str	00000000 
000398af l       .debug_str	00000000 
000398ce l       .debug_str	00000000 
00039919 l       .debug_str	00000000 
00039926 l       .debug_str	00000000 
0003999a l       .debug_str	00000000 
0003dcd8 l       .debug_str	00000000 
0004f413 l       .debug_str	00000000 
000399b9 l       .debug_str	00000000 
000399d9 l       .debug_str	00000000 
000399f5 l       .debug_str	00000000 
000399ff l       .debug_str	00000000 
00039a8b l       .debug_str	00000000 
00039b07 l       .debug_str	00000000 
00039b38 l       .debug_str	00000000 
00039bbb l       .debug_str	00000000 
00039bdb l       .debug_str	00000000 
00039c61 l       .debug_str	00000000 
00039cd6 l       .debug_str	00000000 
000333ee l       .debug_str	00000000 
0005cc51 l       .debug_str	00000000 
00039d17 l       .debug_str	00000000 
00023955 l       .debug_str	00000000 
00039d62 l       .debug_str	00000000 
00039dbe l       .debug_str	00000000 
00039dca l       .debug_str	00000000 
00039e13 l       .debug_str	00000000 
00039e23 l       .debug_str	00000000 
00039e68 l       .debug_str	00000000 
00039eb1 l       .debug_str	00000000 
00039ef6 l       .debug_str	00000000 
00039f52 l       .debug_str	00000000 
00039f9d l       .debug_str	00000000 
00039fe4 l       .debug_str	00000000 
0003a042 l       .debug_str	00000000 
0003a08d l       .debug_str	00000000 
0003a0d4 l       .debug_str	00000000 
0003a132 l       .debug_str	00000000 
0003a17d l       .debug_str	00000000 
0003a1c4 l       .debug_str	00000000 
0003a222 l       .debug_str	00000000 
0003a26b l       .debug_str	00000000 
0003a2b0 l       .debug_str	00000000 
0003a30c l       .debug_str	00000000 
0003a355 l       .debug_str	00000000 
0003a39a l       .debug_str	00000000 
0003a3f6 l       .debug_str	00000000 
0003a440 l       .debug_str	00000000 
0003a486 l       .debug_str	00000000 
0003a4e3 l       .debug_str	00000000 
0003a52d l       .debug_str	00000000 
0003a573 l       .debug_str	00000000 
0003a5d0 l       .debug_str	00000000 
0003a62b l       .debug_str	00000000 
0003a673 l       .debug_str	00000000 
0003a6b7 l       .debug_str	00000000 
0003a6ff l       .debug_str	00000000 
0003a743 l       .debug_str	00000000 
0003a79e l       .debug_str	00000000 
0003a7e7 l       .debug_str	00000000 
0003a82c l       .debug_str	00000000 
0003a888 l       .debug_str	00000000 
0003a8d1 l       .debug_str	00000000 
0003a916 l       .debug_str	00000000 
0003a972 l       .debug_str	00000000 
0003a9bb l       .debug_str	00000000 
0003aa00 l       .debug_str	00000000 
0003aa5c l       .debug_str	00000000 
0003aaa6 l       .debug_str	00000000 
0003aaec l       .debug_str	00000000 
0003ab49 l       .debug_str	00000000 
0003ab93 l       .debug_str	00000000 
0003abd9 l       .debug_str	00000000 
0003ac36 l       .debug_str	00000000 
0003ac80 l       .debug_str	00000000 
0003acc6 l       .debug_str	00000000 
0003ad23 l       .debug_str	00000000 
0003ad7e l       .debug_str	00000000 
0003adc6 l       .debug_str	00000000 
0003ae0a l       .debug_str	00000000 
0003ae52 l       .debug_str	00000000 
0003ae96 l       .debug_str	00000000 
0003aef1 l       .debug_str	00000000 
0003af4c l       .debug_str	00000000 
0003af94 l       .debug_str	00000000 
0003afd8 l       .debug_str	00000000 
0003b021 l       .debug_str	00000000 
0003b066 l       .debug_str	00000000 
0003b0c2 l       .debug_str	00000000 
0003b11e l       .debug_str	00000000 
0003b167 l       .debug_str	00000000 
0003b1ac l       .debug_str	00000000 
0003b208 l       .debug_str	00000000 
0003b251 l       .debug_str	00000000 
0003b296 l       .debug_str	00000000 
0003b2f2 l       .debug_str	00000000 
0003b33b l       .debug_str	00000000 
0003b380 l       .debug_str	00000000 
00023475 l       .debug_str	00000000 
0003b3dc l       .debug_str	00000000 
0003b41b l       .debug_str	00000000 
0003b450 l       .debug_str	00000000 
0000582c l       .debug_str	00000000 
000134ef l       .debug_str	00000000 
0001363f l       .debug_str	00000000 
0003b45a l       .debug_str	00000000 
00015605 l       .debug_str	00000000 
00001825 l       .debug_str	00000000 
0003b494 l       .debug_str	00000000 
00010a08 l       .debug_str	00000000 
0003b526 l       .debug_str	00000000 
00014b31 l       .debug_str	00000000 
0003b55f l       .debug_str	00000000 
00014018 l       .debug_str	00000000 
0003b586 l       .debug_str	00000000 
00013f64 l       .debug_str	00000000 
00005805 l       .debug_str	00000000 
0003b5c0 l       .debug_str	00000000 
00013ce3 l       .debug_str	00000000 
0003b5e6 l       .debug_str	00000000 
00013a2a l       .debug_str	00000000 
0003b640 l       .debug_str	00000000 
0001443e l       .debug_str	00000000 
0003b6da l       .debug_str	00000000 
0001364e l       .debug_str	00000000 
0003b763 l       .debug_str	00000000 
0003b80a l       .debug_str	00000000 
0003b843 l       .debug_str	00000000 
0003b8b8 l       .debug_str	00000000 
0003b8e1 l       .debug_str	00000000 
0002c749 l       .debug_str	00000000 
0003b916 l       .debug_str	00000000 
0003b952 l       .debug_str	00000000 
0003b963 l       .debug_str	00000000 
0003b99c l       .debug_str	00000000 
00012c3e l       .debug_str	00000000 
0003b9a9 l       .debug_str	00000000 
0003b9b8 l       .debug_str	00000000 
0003728f l       .debug_str	00000000 
0003ba01 l       .debug_str	00000000 
0003ba34 l       .debug_str	00000000 
0003ba41 l       .debug_str	00000000 
00060944 l       .debug_str	00000000 
0003ba8c l       .debug_str	00000000 
0003bae4 l       .debug_str	00000000 
0003baf9 l       .debug_str	00000000 
0003bb2f l       .debug_str	00000000 
0003bb3a l       .debug_str	00000000 
0002c857 l       .debug_str	00000000 
0003bb99 l       .debug_str	00000000 
0003bc0c l       .debug_str	00000000 
0003bc73 l       .debug_str	00000000 
0003bc93 l       .debug_str	00000000 
0003bcd2 l       .debug_str	00000000 
0003bcf1 l       .debug_str	00000000 
00000ad8 l       .debug_str	00000000 
0003bd64 l       .debug_str	00000000 
0003bde1 l       .debug_str	00000000 
0003be46 l       .debug_str	00000000 
0003bea6 l       .debug_str	00000000 
0003bf19 l       .debug_str	00000000 
0003bf96 l       .debug_str	00000000 
0001579a l       .debug_str	00000000 
0003c00e l       .debug_str	00000000 
0003c083 l       .debug_str	00000000 
0003c0fd l       .debug_str	00000000 
0001169c l       .debug_str	00000000 
000116a7 l       .debug_str	00000000 
0003c15d l       .debug_str	00000000 
0005e932 l       .debug_str	00000000 
0003c19b l       .debug_str	00000000 
0003c1dd l       .debug_str	00000000 
0003c208 l       .debug_str	00000000 
0003c249 l       .debug_str	00000000 
0003c253 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
0005f7ec l       .debug_str	00000000 
0005a0d2 l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
0003c2af l       .debug_str	00000000 
0000146f l       .debug_str	00000000 
0003c2eb l       .debug_str	00000000 
00001412 l       .debug_str	00000000 
0003c332 l       .debug_str	00000000 
0003c390 l       .debug_str	00000000 
00033cbf l       .debug_str	00000000 
0003c3e7 l       .debug_str	00000000 
0003c441 l       .debug_str	00000000 
0003c44b l       .debug_str	00000000 
00012c0c l       .debug_str	00000000 
00012c11 l       .debug_str	00000000 
0003c48e l       .debug_str	00000000 
0003c4c4 l       .debug_str	00000000 
0003c4d4 l       .debug_str	00000000 
0003c4e3 l       .debug_str	00000000 
0003c4ee l       .debug_str	00000000 
00033da5 l       .debug_str	00000000 
0003c528 l       .debug_str	00000000 
0003c571 l       .debug_str	00000000 
0002549a l       .debug_str	00000000 
0003c5b8 l       .debug_str	00000000 
0003c5f3 l       .debug_str	00000000 
0003c618 l       .debug_str	00000000 
0003c684 l       .debug_str	00000000 
0003c697 l       .debug_str	00000000 
0003c70e l       .debug_str	00000000 
0003c719 l       .debug_str	00000000 
0003c756 l       .debug_str	00000000 
0003c761 l       .debug_str	00000000 
0003c7e2 l       .debug_str	00000000 
0003c828 l       .debug_str	00000000 
0003c84f l       .debug_str	00000000 
0003c87e l       .debug_str	00000000 
0003c88f l       .debug_str	00000000 
00013591 l       .debug_str	00000000 
0003c8eb l       .debug_str	00000000 
0003c91c l       .debug_str	00000000 
0001b2cf l       .debug_str	00000000 
0003c964 l       .debug_str	00000000 
0001f830 l       .debug_str	00000000 
0003c9a2 l       .debug_str	00000000 
0003c9e6 l       .debug_str	00000000 
0003ca39 l       .debug_str	00000000 
000394d4 l       .debug_str	00000000 
0003cab1 l       .debug_str	00000000 
0003cb00 l       .debug_str	00000000 
0003cb96 l       .debug_str	00000000 
0003cbda l       .debug_str	00000000 
00040918 l       .debug_str	00000000 
0003cc52 l       .debug_str	00000000 
0003cca1 l       .debug_str	00000000 
0003cd37 l       .debug_str	00000000 
0003cd51 l       .debug_str	00000000 
0003cda0 l       .debug_str	00000000 
0003cdd9 l       .debug_str	00000000 
0003cdf4 l       .debug_str	00000000 
000151bc l       .debug_str	00000000 
0003ce58 l       .debug_str	00000000 
00014ac8 l       .debug_str	00000000 
0003ced1 l       .debug_str	00000000 
000221ae l       .debug_str	00000000 
0003cf42 l       .debug_str	00000000 
0003cfd8 l       .debug_str	00000000 
0003d070 l       .debug_str	00000000 
0003d0e2 l       .debug_str	00000000 
0003d10a l       .debug_str	00000000 
0001a563 l       .debug_str	00000000 
0003d1c2 l       .debug_str	00000000 
00023db3 l       .debug_str	00000000 
0003d207 l       .debug_str	00000000 
0003d2bd l       .debug_str	00000000 
0003d302 l       .debug_str	00000000 
00002b77 l       .debug_str	00000000 
0003d344 l       .debug_str	00000000 
0003d39f l       .debug_str	00000000 
0003d3a4 l       .debug_str	00000000 
0003d3fd l       .debug_str	00000000 
0003d431 l       .debug_str	00000000 
0003d445 l       .debug_str	00000000 
0003d480 l       .debug_str	00000000 
0003d4c2 l       .debug_str	00000000 
0003d4d8 l       .debug_str	00000000 
0003d544 l       .debug_str	00000000 
000116a0 l       .debug_str	00000000 
0000b6d4 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0003d586 l       .debug_str	00000000 
0003d5c6 l       .debug_str	00000000 
0003d620 l       .debug_str	00000000 
0003d662 l       .debug_str	00000000 
0003d6bd l       .debug_str	00000000 
0003d6ff l       .debug_str	00000000 
0003d70a l       .debug_str	00000000 
0003d74a l       .debug_str	00000000 
0003d750 l       .debug_str	00000000 
0003d7aa l       .debug_str	00000000 
0003d7b3 l       .debug_str	00000000 
0003d7f5 l       .debug_str	00000000 
0003d84d l       .debug_str	00000000 
0003d88f l       .debug_str	00000000 
0003d8e8 l       .debug_str	00000000 
0003d8f2 l       .debug_str	00000000 
0003d8fa l       .debug_str	00000000 
0003d903 l       .debug_str	00000000 
0003d8f6 l       .debug_str	00000000 
0003d945 l       .debug_str	00000000 
0003d99a l       .debug_str	00000000 
0003d9d7 l       .debug_str	00000000 
0003da19 l       .debug_str	00000000 
0003da70 l       .debug_str	00000000 
0003dab2 l       .debug_str	00000000 
0003db0a l       .debug_str	00000000 
0003db42 l       .debug_str	00000000 
0003db4e l       .debug_str	00000000 
0003db8b l       .debug_str	00000000 
0003dbed l       .debug_str	00000000 
0003dc2e l       .debug_str	00000000 
0003dc37 l       .debug_str	00000000 
0003dc95 l       .debug_str	00000000 
0003dcce l       .debug_str	00000000 
0003dcdd l       .debug_str	00000000 
0003dd1c l       .debug_str	00000000 
0003dd31 l       .debug_str	00000000 
0003dd77 l       .debug_str	00000000 
0003dd84 l       .debug_str	00000000 
0003dd8a l       .debug_str	00000000 
0003ddc3 l       .debug_str	00000000 
0003de4f l       .debug_str	00000000 
0003de8b l       .debug_str	00000000 
00059cc1 l       .debug_str	00000000 
0003de9d l       .debug_str	00000000 
0003ded5 l       .debug_str	00000000 
0003dee1 l       .debug_str	00000000 
0003df1e l       .debug_str	00000000 
0003df80 l       .debug_str	00000000 
0003dfc1 l       .debug_str	00000000 
0003e01f l       .debug_str	00000000 
0003e059 l       .debug_str	00000000 
0003e0b3 l       .debug_str	00000000 
0003e0fc l       .debug_str	00000000 
0003e10c l       .debug_str	00000000 
0003e145 l       .debug_str	00000000 
0003e1c7 l       .debug_str	00000000 
0003e201 l       .debug_str	00000000 
0003e25b l       .debug_str	00000000 
0003e296 l       .debug_str	00000000 
0003e2f6 l       .debug_str	00000000 
0003e331 l       .debug_str	00000000 
0003e391 l       .debug_str	00000000 
0003e3cf l       .debug_str	00000000 
0003e42d l       .debug_str	00000000 
0003e46b l       .debug_str	00000000 
0003e4c9 l       .debug_str	00000000 
0003e514 l       .debug_str	00000000 
0003e51d l       .debug_str	00000000 
0003e56c l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
0003e578 l       .debug_str	00000000 
0003e5a9 l       .debug_str	00000000 
0003e5d4 l       .debug_str	00000000 
0003e622 l       .debug_str	00000000 
000135c2 l       .debug_str	00000000 
0003e629 l       .debug_str	00000000 
0003e68e l       .debug_str	00000000 
0003e6bf l       .debug_str	00000000 
0003e6c7 l       .debug_str	00000000 
00013c40 l       .debug_str	00000000 
0003e6f8 l       .debug_str	00000000 
0003e751 l       .debug_str	00000000 
0003e7df l       .debug_str	00000000 
0003e82b l       .debug_str	00000000 
0003e850 l       .debug_str	00000000 
0003e86d l       .debug_str	00000000 
0003e897 l       .debug_str	00000000 
0001a4f6 l       .debug_str	00000000 
0001a5b1 l       .debug_str	00000000 
0001a62d l       .debug_str	00000000 
0003e8b9 l       .debug_str	00000000 
0003e906 l       .debug_str	00000000 
0003e94b l       .debug_str	00000000 
0003e98a l       .debug_str	00000000 
0003e9d6 l       .debug_str	00000000 
0003ea65 l       .debug_str	00000000 
0003eab2 l       .debug_str	00000000 
0003eb38 l       .debug_str	00000000 
0005bbc3 l       .debug_str	00000000 
0003eb5d l       .debug_str	00000000 
0003eb87 l       .debug_str	00000000 
0003eb90 l       .debug_str	00000000 
0003ebc6 l       .debug_str	00000000 
0003ebcf l       .debug_str	00000000 
0003ec5d l       .debug_str	00000000 
0003eca3 l       .debug_str	00000000 
0003ecc2 l       .debug_str	00000000 
0003ecd9 l       .debug_str	00000000 
0003ecfd l       .debug_str	00000000 
0003ed19 l       .debug_str	00000000 
0003ed60 l       .debug_str	00000000 
0003eda5 l       .debug_str	00000000 
0003ede4 l       .debug_str	00000000 
0003ee2a l       .debug_str	00000000 
0003eeb9 l       .debug_str	00000000 
0003ef00 l       .debug_str	00000000 
0003ef86 l       .debug_str	00000000 
0003efbb l       .debug_str	00000000 
0003efc5 l       .debug_str	00000000 
0005abdc l       .debug_str	00000000 
0003f030 l       .debug_str	00000000 
0003f065 l       .debug_str	00000000 
0003f06f l       .debug_str	00000000 
0003f0a2 l       .debug_str	00000000 
0003f0aa l       .debug_str	00000000 
0003f0de l       .debug_str	00000000 
0003f0f0 l       .debug_str	00000000 
0003f12a l       .debug_str	00000000 
0003f148 l       .debug_str	00000000 
0003f16e l       .debug_str	00000000 
0003f179 l       .debug_str	00000000 
0003f1a2 l       .debug_str	00000000 
0003f1b0 l       .debug_str	00000000 
0003f1ea l       .debug_str	00000000 
0003f220 l       .debug_str	00000000 
0003f246 l       .debug_str	00000000 
0003f269 l       .debug_str	00000000 
0003f292 l       .debug_str	00000000 
0003f2b8 l       .debug_str	00000000 
0003f2f6 l       .debug_str	00000000 
0003f310 l       .debug_str	00000000 
0003f34e l       .debug_str	00000000 
0003f380 l       .debug_str	00000000 
0003f38c l       .debug_str	00000000 
00061358 l       .debug_str	00000000 
0003f3c0 l       .debug_str	00000000 
0003f3cd l       .debug_str	00000000 
0002325a l       .debug_str	00000000 
0003f3ff l       .debug_str	00000000 
0003f469 l       .debug_str	00000000 
0003f4d9 l       .debug_str	00000000 
0003f540 l       .debug_str	00000000 
0003f55d l       .debug_str	00000000 
0003f59c l       .debug_str	00000000 
0003f5b8 l       .debug_str	00000000 
0002321c l       .debug_str	00000000 
0003f5e6 l       .debug_str	00000000 
000232f8 l       .debug_str	00000000 
0003f61b l       .debug_str	00000000 
0003f657 l       .debug_str	00000000 
0003f67d l       .debug_str	00000000 
0003f6bc l       .debug_str	00000000 
0003f6cc l       .debug_str	00000000 
0003f730 l       .debug_str	00000000 
0003f767 l       .debug_str	00000000 
0003f77d l       .debug_str	00000000 
0003f7cc l       .debug_str	00000000 
0003f7d8 l       .debug_str	00000000 
0003f8aa l       .debug_str	00000000 
0003f81f l       .debug_str	00000000 
0003f8a5 l       .debug_str	00000000 
0003f8c9 l       .debug_str	00000000 
0003f904 l       .debug_str	00000000 
0003f914 l       .debug_str	00000000 
00061280 l       .debug_str	00000000 
0003f955 l       .debug_str	00000000 
0003f98f l       .debug_str	00000000 
0003f99e l       .debug_str	00000000 
0003f9d7 l       .debug_str	00000000 
0003f9e5 l       .debug_str	00000000 
0003fa1e l       .debug_str	00000000 
0003fa2c l       .debug_str	00000000 
0003fa7c l       .debug_str	00000000 
0003fa89 l       .debug_str	00000000 
0003faff l       .debug_str	00000000 
0003fb0a l       .debug_str	00000000 
0003fb1c l       .debug_str	00000000 
0003fb68 l       .debug_str	00000000 
0003fb85 l       .debug_str	00000000 
0003fc19 l       .debug_str	00000000 
0003fcaf l       .debug_str	00000000 
0003fd21 l       .debug_str	00000000 
0003fd47 l       .debug_str	00000000 
0003fde6 l       .debug_str	00000000 
0003fe57 l       .debug_str	00000000 
00003971 l       .debug_str	00000000 
0003fe9c l       .debug_str	00000000 
0003feff l       .debug_str	00000000 
0003ff22 l       .debug_str	00000000 
0003ff76 l       .debug_str	00000000 
0003ff8d l       .debug_str	00000000 
00024db3 l       .debug_str	00000000 
0003ffda l       .debug_str	00000000 
0003ffe7 l       .debug_str	00000000 
00040022 l       .debug_str	00000000 
0004004a l       .debug_str	00000000 
000400ac l       .debug_str	00000000 
0003bb34 l       .debug_str	00000000 
00040115 l       .debug_str	00000000 
00042943 l       .debug_str	00000000 
00005809 l       .debug_str	00000000 
0000580f l       .debug_str	00000000 
00005816 l       .debug_str	00000000 
00033196 l       .debug_str	00000000 
000331a7 l       .debug_str	00000000 
00040162 l       .debug_str	00000000 
0000b1cc l       .debug_str	00000000 
000401ad l       .debug_str	00000000 
00040230 l       .debug_str	00000000 
00040260 l       .debug_str	00000000 
000402e8 l       .debug_str	00000000 
0004035d l       .debug_str	00000000 
000403b0 l       .debug_str	00000000 
0004043c l       .debug_str	00000000 
00040474 l       .debug_str	00000000 
000404c9 l       .debug_str	00000000 
000404fa l       .debug_str	00000000 
0004054c l       .debug_str	00000000 
0004057a l       .debug_str	00000000 
000405ce l       .debug_str	00000000 
000405f4 l       .debug_str	00000000 
0001f77c l       .debug_str	00000000 
0004062b l       .debug_str	00000000 
00040676 l       .debug_str	00000000 
00040692 l       .debug_str	00000000 
000406e8 l       .debug_str	00000000 
0001f8c3 l       .debug_str	00000000 
00040761 l       .debug_str	00000000 
000407b1 l       .debug_str	00000000 
00040848 l       .debug_str	00000000 
0004089e l       .debug_str	00000000 
00040917 l       .debug_str	00000000 
0004092f l       .debug_str	00000000 
000409c6 l       .debug_str	00000000 
000409ff l       .debug_str	00000000 
00040c2f l       .debug_str	00000000 
00040a48 l       .debug_str	00000000 
0003f910 l       .debug_str	00000000 
00040a85 l       .debug_str	00000000 
00040ac9 l       .debug_str	00000000 
00040b14 l       .debug_str	00000000 
00040b54 l       .debug_str	00000000 
00040b7e l       .debug_str	00000000 
00040bc7 l       .debug_str	00000000 
00040bd6 l       .debug_str	00000000 
00040c27 l       .debug_str	00000000 
00040c3e l       .debug_str	00000000 
0004aede l       .debug_str	00000000 
0005c47d l       .debug_str	00000000 
00040ca5 l       .debug_str	00000000 
00040d06 l       .debug_str	00000000 
00040d25 l       .debug_str	00000000 
00040d2e l       .debug_str	00000000 
00040d3a l       .debug_str	00000000 
000168e4 l       .debug_str	00000000 
00040d40 l       .debug_str	00000000 
00040d4a l       .debug_str	00000000 
00040d7c l       .debug_str	00000000 
00040d8c l       .debug_str	00000000 
00040e14 l       .debug_str	00000000 
00040e1d l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00040e8a l       .debug_str	00000000 
00040ec9 l       .debug_str	00000000 
00015d0c l       .debug_str	00000000 
00015d18 l       .debug_str	00000000 
00015d22 l       .debug_str	00000000 
00040ed8 l       .debug_str	00000000 
00040f48 l       .debug_str	00000000 
00040f6d l       .debug_str	00000000 
00040fdc l       .debug_str	00000000 
00041002 l       .debug_str	00000000 
00041071 l       .debug_str	00000000 
0004109b l       .debug_str	00000000 
000410d2 l       .debug_str	00000000 
000410dd l       .debug_str	00000000 
00041119 l       .debug_str	00000000 
00041138 l       .debug_str	00000000 
00041172 l       .debug_str	00000000 
000411ad l       .debug_str	00000000 
000411e9 l       .debug_str	00000000 
0000e68b l       .debug_str	00000000 
00041203 l       .debug_str	00000000 
0004123f l       .debug_str	00000000 
0004124c l       .debug_str	00000000 
00059f38 l       .debug_str	00000000 
0004128a l       .debug_str	00000000 
000412d0 l       .debug_str	00000000 
00041358 l       .debug_str	00000000 
00041371 l       .debug_str	00000000 
000413cb l       .debug_str	00000000 
00041411 l       .debug_str	00000000 
00041429 l       .debug_str	00000000 
000414a9 l       .debug_str	00000000 
0004197d l       .debug_str	00000000 
000414b9 l       .debug_str	00000000 
000414f8 l       .debug_str	00000000 
00041538 l       .debug_str	00000000 
000415c2 l       .debug_str	00000000 
000415d9 l       .debug_str	00000000 
0004162a l       .debug_str	00000000 
00041638 l       .debug_str	00000000 
0004163d l       .debug_str	00000000 
00041698 l       .debug_str	00000000 
00042052 l       .debug_str	00000000 
000416ef l       .debug_str	00000000 
00041722 l       .debug_str	00000000 
00041769 l       .debug_str	00000000 
000417a3 l       .debug_str	00000000 
000417d2 l       .debug_str	00000000 
00041850 l       .debug_str	00000000 
000418d4 l       .debug_str	00000000 
00041961 l       .debug_str	00000000 
00041976 l       .debug_str	00000000 
00041986 l       .debug_str	00000000 
000419d2 l       .debug_str	00000000 
00041a17 l       .debug_str	00000000 
00041aae l       .debug_str	00000000 
00041aca l       .debug_str	00000000 
00041b11 l       .debug_str	00000000 
00041b3f l       .debug_str	00000000 
00041b78 l       .debug_str	00000000 
00041b9a l       .debug_str	00000000 
00019837 l       .debug_str	00000000 
00041c18 l       .debug_str	00000000 
00041c98 l       .debug_str	00000000 
00041cd7 l       .debug_str	00000000 
00041d61 l       .debug_str	00000000 
00041dad l       .debug_str	00000000 
00041dcb l       .debug_str	00000000 
00041dd6 l       .debug_str	00000000 
00041e38 l       .debug_str	00000000 
00041e8f l       .debug_str	00000000 
00041f1c l       .debug_str	00000000 
00041f68 l       .debug_str	00000000 
00041fff l       .debug_str	00000000 
00042049 l       .debug_str	00000000 
00042065 l       .debug_str	00000000 
000420bf l       .debug_str	00000000 
000420c8 l       .debug_str	00000000 
00042127 l       .debug_str	00000000 
0004217e l       .debug_str	00000000 
000421d7 l       .debug_str	00000000 
000421ec l       .debug_str	00000000 
00042239 l       .debug_str	00000000 
00042284 l       .debug_str	00000000 
00042297 l       .debug_str	00000000 
0001e32a l       .debug_str	00000000 
000197e9 l       .debug_str	00000000 
000422e2 l       .debug_str	00000000 
000422f7 l       .debug_str	00000000 
00042303 l       .debug_str	00000000 
00042348 l       .debug_str	00000000 
000423a1 l       .debug_str	00000000 
000423b6 l       .debug_str	00000000 
00042403 l       .debug_str	00000000 
0004244e l       .debug_str	00000000 
00042461 l       .debug_str	00000000 
000424ac l       .debug_str	00000000 
000424bf l       .debug_str	00000000 
00042523 l       .debug_str	00000000 
0004255c l       .debug_str	00000000 
00042588 l       .debug_str	00000000 
0005ffad l       .debug_str	00000000 
0005b372 l       .debug_str	00000000 
00042607 l       .debug_str	00000000 
0004260d l       .debug_str	00000000 
00042616 l       .debug_str	00000000 
0004264e l       .debug_str	00000000 
0004266b l       .debug_str	00000000 
000426a7 l       .debug_str	00000000 
000426c4 l       .debug_str	00000000 
00042720 l       .debug_str	00000000 
00042758 l       .debug_str	00000000 
000427b4 l       .debug_str	00000000 
0002543a l       .debug_str	00000000 
000427ec l       .debug_str	00000000 
0004282a l       .debug_str	00000000 
00042846 l       .debug_str	00000000 
0004289c l       .debug_str	00000000 
00042903 l       .debug_str	00000000 
0004293b l       .debug_str	00000000 
00042947 l       .debug_str	00000000 
000429ae l       .debug_str	00000000 
000429ed l       .debug_str	00000000 
000429fe l       .debug_str	00000000 
00042a37 l       .debug_str	00000000 
000509df l       .debug_str	00000000 
00042a52 l       .debug_str	00000000 
00042a8e l       .debug_str	00000000 
00042a87 l       .debug_str	00000000 
00042a97 l       .debug_str	00000000 
00042aa9 l       .debug_str	00000000 
00042af4 l       .debug_str	00000000 
00042b0c l       .debug_str	00000000 
00042b16 l       .debug_str	00000000 
00042b2d l       .debug_str	00000000 
00042b3c l       .debug_str	00000000 
00042b7e l       .debug_str	00000000 
00042b97 l       .debug_str	00000000 
00042c0b l       .debug_str	00000000 
00042c1a l       .debug_str	00000000 
00042c53 l       .debug_str	00000000 
00042c69 l       .debug_str	00000000 
00042ca9 l       .debug_str	00000000 
00042cb4 l       .debug_str	00000000 
00042d33 l       .debug_str	00000000 
0005aaeb l       .debug_str	00000000 
00042d52 l       .debug_str	00000000 
00042d67 l       .debug_str	00000000 
00042d71 l       .debug_str	00000000 
00019e64 l       .debug_str	00000000 
00042d76 l       .debug_str	00000000 
00042da7 l       .debug_str	00000000 
00042dba l       .debug_str	00000000 
00042dc4 l       .debug_str	00000000 
00042de1 l       .debug_str	00000000 
00042e1c l       .debug_str	00000000 
00042e51 l       .debug_str	00000000 
00042e82 l       .debug_str	00000000 
00042e96 l       .debug_str	00000000 
00042ea1 l       .debug_str	00000000 
00042ebf l       .debug_str	00000000 
00042efa l       .debug_str	00000000 
00042f30 l       .debug_str	00000000 
00042f61 l       .debug_str	00000000 
00042f75 l       .debug_str	00000000 
00042f80 l       .debug_str	00000000 
00042f9e l       .debug_str	00000000 
00042fd9 l       .debug_str	00000000 
0004300f l       .debug_str	00000000 
00043040 l       .debug_str	00000000 
00043054 l       .debug_str	00000000 
0004305f l       .debug_str	00000000 
0004307d l       .debug_str	00000000 
000430b8 l       .debug_str	00000000 
000430ee l       .debug_str	00000000 
0004311f l       .debug_str	00000000 
0004796c l       .debug_str	00000000 
00043134 l       .debug_str	00000000 
00043140 l       .debug_str	00000000 
0004315f l       .debug_str	00000000 
0004319a l       .debug_str	00000000 
000431d1 l       .debug_str	00000000 
00043202 l       .debug_str	00000000 
00043215 l       .debug_str	00000000 
0004321f l       .debug_str	00000000 
0004323c l       .debug_str	00000000 
00043277 l       .debug_str	00000000 
000432ac l       .debug_str	00000000 
000432dd l       .debug_str	00000000 
000432f1 l       .debug_str	00000000 
000432fc l       .debug_str	00000000 
0004331a l       .debug_str	00000000 
00043355 l       .debug_str	00000000 
0004338b l       .debug_str	00000000 
000433bc l       .debug_str	00000000 
000433d0 l       .debug_str	00000000 
0004343f l       .debug_str	00000000 
0004347a l       .debug_str	00000000 
000434c3 l       .debug_str	00000000 
00043508 l       .debug_str	00000000 
00043564 l       .debug_str	00000000 
000435ad l       .debug_str	00000000 
000435f2 l       .debug_str	00000000 
0004364e l       .debug_str	00000000 
00043697 l       .debug_str	00000000 
000436dc l       .debug_str	00000000 
00043738 l       .debug_str	00000000 
00043743 l       .debug_str	00000000 
00043761 l       .debug_str	00000000 
0004379c l       .debug_str	00000000 
000437d2 l       .debug_str	00000000 
00043803 l       .debug_str	00000000 
00043817 l       .debug_str	00000000 
00043822 l       .debug_str	00000000 
00043840 l       .debug_str	00000000 
0004387b l       .debug_str	00000000 
000438b1 l       .debug_str	00000000 
00043920 l       .debug_str	00000000 
0004395b l       .debug_str	00000000 
0004398c l       .debug_str	00000000 
000439a1 l       .debug_str	00000000 
000439a6 l       .debug_str	00000000 
000439b2 l       .debug_str	00000000 
000439d1 l       .debug_str	00000000 
00043a0c l       .debug_str	00000000 
00043a43 l       .debug_str	00000000 
00043ab2 l       .debug_str	00000000 
00043aee l       .debug_str	00000000 
0000a989 l       .debug_str	00000000 
00043b37 l       .debug_str	00000000 
00043b42 l       .debug_str	00000000 
00043b89 l       .debug_str	00000000 
00043b93 l       .debug_str	00000000 
00043c15 l       .debug_str	00000000 
00043c32 l       .debug_str	00000000 
00016cd1 l       .debug_str	00000000 
00043c8d l       .debug_str	00000000 
00043ce7 l       .debug_str	00000000 
00043cf4 l       .debug_str	00000000 
00043d66 l       .debug_str	00000000 
00043dca l       .debug_str	00000000 
00043dd5 l       .debug_str	00000000 
00043e4e l       .debug_str	00000000 
00043e5a l       .debug_str	00000000 
00043ed6 l       .debug_str	00000000 
00043edc l       .debug_str	00000000 
00043ee3 l       .debug_str	00000000 
00043f1f l       .debug_str	00000000 
000141c2 l       .debug_str	00000000 
00043f68 l       .debug_str	00000000 
00043fac l       .debug_str	00000000 
00043ff7 l       .debug_str	00000000 
00044036 l       .debug_str	00000000 
0004405b l       .debug_str	00000000 
000440b1 l       .debug_str	00000000 
0004411f l       .debug_str	00000000 
0004419f l       .debug_str	00000000 
0004420c l       .debug_str	00000000 
00044297 l       .debug_str	00000000 
0004430b l       .debug_str	00000000 
0004434b l       .debug_str	00000000 
000443cc l       .debug_str	00000000 
0004440d l       .debug_str	00000000 
00044471 l       .debug_str	00000000 
00044520 l       .debug_str	00000000 
0004456a l       .debug_str	00000000 
000445b7 l       .debug_str	00000000 
000445fd l       .debug_str	00000000 
00044607 l       .debug_str	00000000 
00044640 l       .debug_str	00000000 
0004466f l       .debug_str	00000000 
000446d0 l       .debug_str	00000000 
000446ff l       .debug_str	00000000 
0004473c l       .debug_str	00000000 
000447cb l       .debug_str	00000000 
00044800 l       .debug_str	00000000 
00044886 l       .debug_str	00000000 
0004490c l       .debug_str	00000000 
00044960 l       .debug_str	00000000 
000449e9 l       .debug_str	00000000 
00019700 l       .debug_str	00000000 
00044a37 l       .debug_str	00000000 
00044ac5 l       .debug_str	00000000 
00044b19 l       .debug_str	00000000 
00044b58 l       .debug_str	00000000 
00044ba3 l       .debug_str	00000000 
00044c25 l       .debug_str	00000000 
00044c41 l       .debug_str	00000000 
00044c9a l       .debug_str	00000000 
00044cf3 l       .debug_str	00000000 
00044d30 l       .debug_str	00000000 
00044d71 l       .debug_str	00000000 
00044dd2 l       .debug_str	00000000 
00044e43 l       .debug_str	00000000 
00044e73 l       .debug_str	00000000 
00044eb9 l       .debug_str	00000000 
00044f2b l       .debug_str	00000000 
00044fbf l       .debug_str	00000000 
00044fe3 l       .debug_str	00000000 
0004505f l       .debug_str	00000000 
00045099 l       .debug_str	00000000 
000450db l       .debug_str	00000000 
0004518b l       .debug_str	00000000 
000451ca l       .debug_str	00000000 
0004526d l       .debug_str	00000000 
000452c9 l       .debug_str	00000000 
00045326 l       .debug_str	00000000 
000453d1 l       .debug_str	00000000 
0004540a l       .debug_str	00000000 
00045486 l       .debug_str	00000000 
000454be l       .debug_str	00000000 
000454ca l       .debug_str	00000000 
00045507 l       .debug_str	00000000 
0004555f l       .debug_str	00000000 
0004557f l       .debug_str	00000000 
000455d8 l       .debug_str	00000000 
00045631 l       .debug_str	00000000 
0004568a l       .debug_str	00000000 
000456e4 l       .debug_str	00000000 
0004571a l       .debug_str	00000000 
0004572a l       .debug_str	00000000 
00045739 l       .debug_str	00000000 
00045742 l       .debug_str	00000000 
00045779 l       .debug_str	00000000 
000457b5 l       .debug_str	00000000 
000457c5 l       .debug_str	00000000 
00045821 l       .debug_str	00000000 
00045883 l       .debug_str	00000000 
00038a92 l       .debug_str	00000000 
000458cd l       .debug_str	00000000 
00045908 l       .debug_str	00000000 
0004592d l       .debug_str	00000000 
0004598c l       .debug_str	00000000 
000459d6 l       .debug_str	00000000 
00045a11 l       .debug_str	00000000 
00045a36 l       .debug_str	00000000 
00045a95 l       .debug_str	00000000 
00045afe l       .debug_str	00000000 
00045b07 l       .debug_str	00000000 
00045b3e l       .debug_str	00000000 
00045b9a l       .debug_str	00000000 
00045bfc l       .debug_str	00000000 
00045c5b l       .debug_str	00000000 
00045cba l       .debug_str	00000000 
00045cf0 l       .debug_str	00000000 
00045d01 l       .debug_str	00000000 
00045d11 l       .debug_str	00000000 
00045d1b l       .debug_str	00000000 
00045d53 l       .debug_str	00000000 
00045db0 l       .debug_str	00000000 
00045e13 l       .debug_str	00000000 
00045e5e l       .debug_str	00000000 
00045e99 l       .debug_str	00000000 
00045ebf l       .debug_str	00000000 
00045f1f l       .debug_str	00000000 
00045f6a l       .debug_str	00000000 
00045fa5 l       .debug_str	00000000 
00045fcb l       .debug_str	00000000 
0004602b l       .debug_str	00000000 
00046061 l       .debug_str	00000000 
00046072 l       .debug_str	00000000 
00046082 l       .debug_str	00000000 
0004608c l       .debug_str	00000000 
000460c4 l       .debug_str	00000000 
00046121 l       .debug_str	00000000 
00046184 l       .debug_str	00000000 
000461e4 l       .debug_str	00000000 
00046244 l       .debug_str	00000000 
0004627a l       .debug_str	00000000 
0004628b l       .debug_str	00000000 
0004629b l       .debug_str	00000000 
000462a5 l       .debug_str	00000000 
000462dd l       .debug_str	00000000 
0004633a l       .debug_str	00000000 
0004639d l       .debug_str	00000000 
000463e8 l       .debug_str	00000000 
00046423 l       .debug_str	00000000 
00046449 l       .debug_str	00000000 
000464a9 l       .debug_str	00000000 
000464f4 l       .debug_str	00000000 
0004652f l       .debug_str	00000000 
00046555 l       .debug_str	00000000 
000465b5 l       .debug_str	00000000 
000465eb l       .debug_str	00000000 
000465fc l       .debug_str	00000000 
0004660c l       .debug_str	00000000 
00046616 l       .debug_str	00000000 
0004664e l       .debug_str	00000000 
000466ab l       .debug_str	00000000 
0004670e l       .debug_str	00000000 
0004676e l       .debug_str	00000000 
000467ce l       .debug_str	00000000 
00046804 l       .debug_str	00000000 
0000b790 l       .debug_str	00000000 
00046817 l       .debug_str	00000000 
00046829 l       .debug_str	00000000 
00046835 l       .debug_str	00000000 
00046870 l       .debug_str	00000000 
000468cf l       .debug_str	00000000 
00046934 l       .debug_str	00000000 
00046996 l       .debug_str	00000000 
000469d1 l       .debug_str	00000000 
000469f9 l       .debug_str	00000000 
00046a5b l       .debug_str	00000000 
0001cae3 l       .debug_str	00000000 
0001f4ff l       .debug_str	00000000 
00012c93 l       .debug_str	00000000 
00046a91 l       .debug_str	00000000 
00046acc l       .debug_str	00000000 
00046b0c l       .debug_str	00000000 
00046b29 l       .debug_str	00000000 
00046b6d l       .debug_str	00000000 
00046b8e l       .debug_str	00000000 
00046bce l       .debug_str	00000000 
00046beb l       .debug_str	00000000 
00046c2f l       .debug_str	00000000 
00046c50 l       .debug_str	00000000 
00046cb2 l       .debug_str	00000000 
00046d19 l       .debug_str	00000000 
00046d54 l       .debug_str	00000000 
00046d77 l       .debug_str	00000000 
00046ddd l       .debug_str	00000000 
00046e18 l       .debug_str	00000000 
00046e3a l       .debug_str	00000000 
00046e75 l       .debug_str	00000000 
00046e99 l       .debug_str	00000000 
00046ed4 l       .debug_str	00000000 
00046ef7 l       .debug_str	00000000 
00046f32 l       .debug_str	00000000 
00046f56 l       .debug_str	00000000 
00046f91 l       .debug_str	00000000 
00046fb4 l       .debug_str	00000000 
00046fef l       .debug_str	00000000 
00047013 l       .debug_str	00000000 
0004705e l       .debug_str	00000000 
000470c0 l       .debug_str	00000000 
000470fb l       .debug_str	00000000 
0004711e l       .debug_str	00000000 
00047169 l       .debug_str	00000000 
000471a4 l       .debug_str	00000000 
000471ca l       .debug_str	00000000 
00047205 l       .debug_str	00000000 
0004722b l       .debug_str	00000000 
0004727c l       .debug_str	00000000 
000472ca l       .debug_str	00000000 
00047315 l       .debug_str	00000000 
00047348 l       .debug_str	00000000 
00047383 l       .debug_str	00000000 
000473a8 l       .debug_str	00000000 
00047434 l       .debug_str	00000000 
00047468 l       .debug_str	00000000 
000474e4 l       .debug_str	00000000 
00047529 l       .debug_str	00000000 
00047575 l       .debug_str	00000000 
000475d8 l       .debug_str	00000000 
00047613 l       .debug_str	00000000 
00047637 l       .debug_str	00000000 
00047672 l       .debug_str	00000000 
00047699 l       .debug_str	00000000 
000476e5 l       .debug_str	00000000 
00047720 l       .debug_str	00000000 
00047747 l       .debug_str	00000000 
00047792 l       .debug_str	00000000 
000477de l       .debug_str	00000000 
0004782a l       .debug_str	00000000 
0004785b l       .debug_str	00000000 
00047863 l       .debug_str	00000000 
00010725 l       .debug_str	00000000 
000478af l       .debug_str	00000000 
000478e4 l       .debug_str	00000000 
00047912 l       .debug_str	00000000 
0004791b l       .debug_str	00000000 
00047969 l       .debug_str	00000000 
00047971 l       .debug_str	00000000 
000479d6 l       .debug_str	00000000 
00047a29 l       .debug_str	00000000 
00047a89 l       .debug_str	00000000 
00047aa8 l       .debug_str	00000000 
00047b0b l       .debug_str	00000000 
00047b2d l       .debug_str	00000000 
00047b78 l       .debug_str	00000000 
00047bdd l       .debug_str	00000000 
00047bff l       .debug_str	00000000 
00047c68 l       .debug_str	00000000 
00047ca5 l       .debug_str	00000000 
00047d0e l       .debug_str	00000000 
00047d9e l       .debug_str	00000000 
0000b853 l       .debug_str	00000000 
00047dfe l       .debug_str	00000000 
00047e61 l       .debug_str	00000000 
00047eca l       .debug_str	00000000 
00047efd l       .debug_str	00000000 
00047f45 l       .debug_str	00000000 
00047fbf l       .debug_str	00000000 
00048010 l       .debug_str	00000000 
00048067 l       .debug_str	00000000 
0001ac85 l       .debug_str	00000000 
000480af l       .debug_str	00000000 
0004810d l       .debug_str	00000000 
0004812a l       .debug_str	00000000 
00048196 l       .debug_str	00000000 
000481db l       .debug_str	00000000 
00048229 l       .debug_str	00000000 
00048271 l       .debug_str	00000000 
0004827b l       .debug_str	00000000 
000482e9 l       .debug_str	00000000 
00048325 l       .debug_str	00000000 
00048348 l       .debug_str	00000000 
000483b8 l       .debug_str	00000000 
00048400 l       .debug_str	00000000 
00048409 l       .debug_str	00000000 
00048466 l       .debug_str	00000000 
000484c9 l       .debug_str	00000000 
00048529 l       .debug_str	00000000 
00048589 l       .debug_str	00000000 
000485e5 l       .debug_str	00000000 
00048644 l       .debug_str	00000000 
000486a4 l       .debug_str	00000000 
000486bf l       .debug_str	00000000 
0001abe3 l       .debug_str	00000000 
00048713 l       .debug_str	00000000 
00048791 l       .debug_str	00000000 
000487bb l       .debug_str	00000000 
0004881d l       .debug_str	00000000 
0004887e l       .debug_str	00000000 
000488d8 l       .debug_str	00000000 
0004893d l       .debug_str	00000000 
0004898f l       .debug_str	00000000 
000489d7 l       .debug_str	00000000 
000489f2 l       .debug_str	00000000 
00048a6c l       .debug_str	00000000 
00048ab9 l       .debug_str	00000000 
00048b33 l       .debug_str	00000000 
00048b80 l       .debug_str	00000000 
00048bd4 l       .debug_str	00000000 
00048c26 l       .debug_str	00000000 
00048c8e l       .debug_str	00000000 
00048cee l       .debug_str	00000000 
00048d48 l       .debug_str	00000000 
00048da7 l       .debug_str	00000000 
00048e01 l       .debug_str	00000000 
00048e5e l       .debug_str	00000000 
00022bb6 l       .debug_str	00000000 
00048e9c l       .debug_str	00000000 
00023b99 l       .debug_str	00000000 
00048ed7 l       .debug_str	00000000 
00048f49 l       .debug_str	00000000 
0004901c l       .debug_str	00000000 
0001ada3 l       .debug_str	00000000 
00049064 l       .debug_str	00000000 
000490b2 l       .debug_str	00000000 
000490bc l       .debug_str	00000000 
00049104 l       .debug_str	00000000 
00049110 l       .debug_str	00000000 
00049184 l       .debug_str	00000000 
0004918f l       .debug_str	00000000 
000491cb l       .debug_str	00000000 
000491f2 l       .debug_str	00000000 
00049243 l       .debug_str	00000000 
00049250 l       .debug_str	00000000 
0004925e l       .debug_str	00000000 
00049271 l       .debug_str	00000000 
0004927c l       .debug_str	00000000 
000492be l       .debug_str	00000000 
000492d3 l       .debug_str	00000000 
0004933d l       .debug_str	00000000 
0004939a l       .debug_str	00000000 
000493fa l       .debug_str	00000000 
0004945a l       .debug_str	00000000 
000494cc l       .debug_str	00000000 
00049519 l       .debug_str	00000000 
00049578 l       .debug_str	00000000 
000495d2 l       .debug_str	00000000 
00049645 l       .debug_str	00000000 
00049652 l       .debug_str	00000000 
000496b2 l       .debug_str	00000000 
000496d1 l       .debug_str	00000000 
00049739 l       .debug_str	00000000 
00049754 l       .debug_str	00000000 
000497ac l       .debug_str	00000000 
000497f6 l       .debug_str	00000000 
0004985a l       .debug_str	00000000 
00049879 l       .debug_str	00000000 
000498db l       .debug_str	00000000 
00049941 l       .debug_str	00000000 
000499c1 l       .debug_str	00000000 
00049a10 l       .debug_str	00000000 
00049a86 l       .debug_str	00000000 
00049afc l       .debug_str	00000000 
00049bd1 l       .debug_str	00000000 
00049c2e l       .debug_str	00000000 
00049c8c l       .debug_str	00000000 
00049d0c l       .debug_str	00000000 
00049d7b l       .debug_str	00000000 
00049df9 l       .debug_str	00000000 
00049e4c l       .debug_str	00000000 
00049eb1 l       .debug_str	00000000 
00049f11 l       .debug_str	00000000 
00049f7f l       .debug_str	00000000 
0004a017 l       .debug_str	00000000 
0004a0a6 l       .debug_str	00000000 
0004a134 l       .debug_str	00000000 
0004a1c2 l       .debug_str	00000000 
0004a2d2 l       .debug_str	00000000 
0004a346 l       .debug_str	00000000 
0004a388 l       .debug_str	00000000 
0004a3d1 l       .debug_str	00000000 
0004a42b l       .debug_str	00000000 
0004a4a4 l       .debug_str	00000000 
0004a4b1 l       .debug_str	00000000 
0004a4b6 l       .debug_str	00000000 
0004a522 l       .debug_str	00000000 
0004a569 l       .debug_str	00000000 
0004a5f3 l       .debug_str	00000000 
0004a612 l       .debug_str	00000000 
0004a69c l       .debug_str	00000000 
0004a6c0 l       .debug_str	00000000 
0004a704 l       .debug_str	00000000 
0004a768 l       .debug_str	00000000 
0004a7ac l       .debug_str	00000000 
0004a81e l       .debug_str	00000000 
0004a8dc l       .debug_str	00000000 
0004a93e l       .debug_str	00000000 
0004a9d6 l       .debug_str	00000000 
0004aa85 l       .debug_str	00000000 
0004ab1b l       .debug_str	00000000 
0004abae l       .debug_str	00000000 
0004abf2 l       .debug_str	00000000 
0004ac45 l       .debug_str	00000000 
0004acc9 l       .debug_str	00000000 
0004ad57 l       .debug_str	00000000 
0004adab l       .debug_str	00000000 
0004adbc l       .debug_str	00000000 
0004ae41 l       .debug_str	00000000 
0004aecd l       .debug_str	00000000 
0004aed6 l       .debug_str	00000000 
0004aee3 l       .debug_str	00000000 
0004af3a l       .debug_str	00000000 
0004afbf l       .debug_str	00000000 
0004b011 l       .debug_str	00000000 
0004b020 l       .debug_str	00000000 
0004b067 l       .debug_str	00000000 
0004b0cb l       .debug_str	00000000 
0004b0ec l       .debug_str	00000000 
0004b16c l       .debug_str	00000000 
0004b1d7 l       .debug_str	00000000 
0004b255 l       .debug_str	00000000 
0004b2a4 l       .debug_str	00000000 
0004b303 l       .debug_str	00000000 
0004b39b l       .debug_str	00000000 
0004b441 l       .debug_str	00000000 
0004b4d7 l       .debug_str	00000000 
0004b561 l       .debug_str	00000000 
0004b5d7 l       .debug_str	00000000 
0004b620 l       .debug_str	00000000 
0004b67c l       .debug_str	00000000 
0004b6f7 l       .debug_str	00000000 
0004b763 l       .debug_str	00000000 
0004b7ed l       .debug_str	00000000 
0004b831 l       .debug_str	00000000 
0004b892 l       .debug_str	00000000 
0004b8d6 l       .debug_str	00000000 
0004b95a l       .debug_str	00000000 
0004b9e4 l       .debug_str	00000000 
0004ba36 l       .debug_str	00000000 
0004bab4 l       .debug_str	00000000 
0004bb39 l       .debug_str	00000000 
0004bb90 l       .debug_str	00000000 
0004bc11 l       .debug_str	00000000 
0004bccf l       .debug_str	00000000 
0004bd2e l       .debug_str	00000000 
0004bd91 l       .debug_str	00000000 
0004bdb6 l       .debug_str	00000000 
0004be1a l       .debug_str	00000000 
0004be3b l       .debug_str	00000000 
0004bebb l       .debug_str	00000000 
0004bf26 l       .debug_str	00000000 
0004bfa4 l       .debug_str	00000000 
0004bff3 l       .debug_str	00000000 
0004c052 l       .debug_str	00000000 
0004c0ea l       .debug_str	00000000 
0004c190 l       .debug_str	00000000 
0004c226 l       .debug_str	00000000 
0004c2b0 l       .debug_str	00000000 
0004c326 l       .debug_str	00000000 
0004c36f l       .debug_str	00000000 
0004c3cb l       .debug_str	00000000 
0004c446 l       .debug_str	00000000 
0004c4b2 l       .debug_str	00000000 
0004c53c l       .debug_str	00000000 
0004c580 l       .debug_str	00000000 
0004c5e1 l       .debug_str	00000000 
0004c625 l       .debug_str	00000000 
0004c6a9 l       .debug_str	00000000 
0004c733 l       .debug_str	00000000 
0004c7b1 l       .debug_str	00000000 
0004c836 l       .debug_str	00000000 
0004c88d l       .debug_str	00000000 
0004c90e l       .debug_str	00000000 
0004c9cc l       .debug_str	00000000 
0004ca2b l       .debug_str	00000000 
0004ca5e l       .debug_str	00000000 
0004ca91 l       .debug_str	00000000 
0004cac4 l       .debug_str	00000000 
0004caf7 l       .debug_str	00000000 
0004cb2a l       .debug_str	00000000 
0004cb5d l       .debug_str	00000000 
0004cb90 l       .debug_str	00000000 
0004cbe4 l       .debug_str	00000000 
0004cc12 l       .debug_str	00000000 
0004cc66 l       .debug_str	00000000 
0005f643 l       .debug_str	00000000 
00010e89 l       .debug_str	00000000 
0004cc79 l       .debug_str	00000000 
0004cc7d l       .debug_str	00000000 
0004cc81 l       .debug_str	00000000 
0004cc85 l       .debug_str	00000000 
0004cc8c l       .debug_str	00000000 
0004cc91 l       .debug_str	00000000 
0004ccc1 l       .debug_str	00000000 
0004cd13 l       .debug_str	00000000 
0004cd54 l       .debug_str	00000000 
0004cd61 l       .debug_str	00000000 
0004cda0 l       .debug_str	00000000 
0004cdab l       .debug_str	00000000 
0004cde7 l       .debug_str	00000000 
0004cdf5 l       .debug_str	00000000 
0004ce29 l       .debug_str	00000000 
0004ce64 l       .debug_str	00000000 
0004cea2 l       .debug_str	00000000 
0004ceb0 l       .debug_str	00000000 
0004cee9 l       .debug_str	00000000 
0004cef3 l       .debug_str	00000000 
0004cf2f l       .debug_str	00000000 
0004cf8b l       .debug_str	00000000 
0004cf92 l       .debug_str	00000000 
0004cff0 l       .debug_str	00000000 
0004cff9 l       .debug_str	00000000 
0004d060 l       .debug_str	00000000 
0004d071 l       .debug_str	00000000 
0004d0ce l       .debug_str	00000000 
0004d12d l       .debug_str	00000000 
0004d189 l       .debug_str	00000000 
0004d1e7 l       .debug_str	00000000 
0004d24e l       .debug_str	00000000 
0004d2ab l       .debug_str	00000000 
0004d30a l       .debug_str	00000000 
0004d343 l       .debug_str	00000000 
0004d34d l       .debug_str	00000000 
0004d3b5 l       .debug_str	00000000 
0004d3e8 l       .debug_str	00000000 
0004d3f2 l       .debug_str	00000000 
0004d428 l       .debug_str	00000000 
0004d434 l       .debug_str	00000000 
0004d46b l       .debug_str	00000000 
0004d478 l       .debug_str	00000000 
0004d4bc l       .debug_str	00000000 
0004d4d6 l       .debug_str	00000000 
0004d547 l       .debug_str	00000000 
0004d55a l       .debug_str	00000000 
0004d5cb l       .debug_str	00000000 
0004d60e l       .debug_str	00000000 
0004d618 l       .debug_str	00000000 
0004d662 l       .debug_str	00000000 
0004d6a9 l       .debug_str	00000000 
0004d6f6 l       .debug_str	00000000 
0004d740 l       .debug_str	00000000 
0004d772 l       .debug_str	00000000 
0004d77b l       .debug_str	00000000 
0004d7af l       .debug_str	00000000 
0004d7e8 l       .debug_str	00000000 
0004d824 l       .debug_str	00000000 
0004d836 l       .debug_str	00000000 
0004d877 l       .debug_str	00000000 
0004d8d6 l       .debug_str	00000000 
0004d907 l       .debug_str	00000000 
0004d91d l       .debug_str	00000000 
0004d952 l       .debug_str	00000000 
0004d9af l       .debug_str	00000000 
0004da13 l       .debug_str	00000000 
0004da72 l       .debug_str	00000000 
0004dad2 l       .debug_str	00000000 
0004db30 l       .debug_str	00000000 
0001fa6f l       .debug_str	00000000 
0004db95 l       .debug_str	00000000 
0004dbdb l       .debug_str	00000000 
0004dc1b l       .debug_str	00000000 
0004dca3 l       .debug_str	00000000 
0005c079 l       .debug_str	00000000 
0004dd2a l       .debug_str	00000000 
0004dd5d l       .debug_str	00000000 
0004ddd1 l       .debug_str	00000000 
0004de4a l       .debug_str	00000000 
0004debe l       .debug_str	00000000 
0004df1d l       .debug_str	00000000 
0004df7a l       .debug_str	00000000 
0004dfd4 l       .debug_str	00000000 
0004e030 l       .debug_str	00000000 
0004e08d l       .debug_str	00000000 
0004e0ec l       .debug_str	00000000 
0004e154 l       .debug_str	00000000 
0004e1be l       .debug_str	00000000 
0004e227 l       .debug_str	00000000 
0004e285 l       .debug_str	00000000 
0004e2f7 l       .debug_str	00000000 
0004e2fb l       .debug_str	00000000 
0004e36e l       .debug_str	00000000 
0004e3cc l       .debug_str	00000000 
0004e428 l       .debug_str	00000000 
0004e499 l       .debug_str	00000000 
0004e50f l       .debug_str	00000000 
0004e546 l       .debug_str	00000000 
0004e5a2 l       .debug_str	00000000 
0004e5f6 l       .debug_str	00000000 
0004e654 l       .debug_str	00000000 
0004e6c0 l       .debug_str	00000000 
0004e715 l       .debug_str	00000000 
0004e748 l       .debug_str	00000000 
0004e756 l       .debug_str	00000000 
0004e78e l       .debug_str	00000000 
0004e7a1 l       .debug_str	00000000 
0004e7d6 l       .debug_str	00000000 
0004e80c l       .debug_str	00000000 
0004e867 l       .debug_str	00000000 
0004e89a l       .debug_str	00000000 
0004e8a1 l       .debug_str	00000000 
0004e8e3 l       .debug_str	00000000 
0004e914 l       .debug_str	00000000 
0004e945 l       .debug_str	00000000 
0004e978 l       .debug_str	00000000 
0004e97f l       .debug_str	00000000 
0004e9ac l       .debug_str	00000000 
0004e9e7 l       .debug_str	00000000 
0004e9fa l       .debug_str	00000000 
0004ea2b l       .debug_str	00000000 
0004ea35 l       .debug_str	00000000 
0004ea96 l       .debug_str	00000000 
0004eafe l       .debug_str	00000000 
0004eb3b l       .debug_str	00000000 
0004eb89 l       .debug_str	00000000 
0004ebc5 l       .debug_str	00000000 
0004ec01 l       .debug_str	00000000 
0004ec3a l       .debug_str	00000000 
0004ec74 l       .debug_str	00000000 
0004ecad l       .debug_str	00000000 
0004ece4 l       .debug_str	00000000 
0004ed1d l       .debug_str	00000000 
0004ed57 l       .debug_str	00000000 
0004ed9d l       .debug_str	00000000 
0004edc0 l       .debug_str	00000000 
0004ee06 l       .debug_str	00000000 
0004ee29 l       .debug_str	00000000 
0004ee72 l       .debug_str	00000000 
0004ee98 l       .debug_str	00000000 
0004eee1 l       .debug_str	00000000 
0004ef07 l       .debug_str	00000000 
0004ef51 l       .debug_str	00000000 
0004ef78 l       .debug_str	00000000 
0004efc2 l       .debug_str	00000000 
0004efe9 l       .debug_str	00000000 
0004f036 l       .debug_str	00000000 
0004f060 l       .debug_str	00000000 
0004f0ad l       .debug_str	00000000 
0004f0d7 l       .debug_str	00000000 
0004f10a l       .debug_str	00000000 
0004f136 l       .debug_str	00000000 
0004f18c l       .debug_str	00000000 
0004f1b7 l       .debug_str	00000000 
0004f20f l       .debug_str	00000000 
0004f265 l       .debug_str	00000000 
0004f29e l       .debug_str	00000000 
0004f2a9 l       .debug_str	00000000 
0001e564 l       .debug_str	00000000 
0004f2e2 l       .debug_str	00000000 
0004f309 l       .debug_str	00000000 
0004f342 l       .debug_str	00000000 
0004f389 l       .debug_str	00000000 
0004f396 l       .debug_str	00000000 
0004f5b0 l       .debug_str	00000000 
0004f3c5 l       .debug_str	00000000 
0004f405 l       .debug_str	00000000 
0004f419 l       .debug_str	00000000 
0004f45b l       .debug_str	00000000 
0004f48c l       .debug_str	00000000 
0004f4bc l       .debug_str	00000000 
0004f4ed l       .debug_str	00000000 
0004f51e l       .debug_str	00000000 
0004f555 l       .debug_str	00000000 
0004f560 l       .debug_str	00000000 
0004f5a0 l       .debug_str	00000000 
0004f5b4 l       .debug_str	00000000 
0004f5f0 l       .debug_str	00000000 
0004f600 l       .debug_str	00000000 
0004f635 l       .debug_str	00000000 
0004f63f l       .debug_str	00000000 
0004f674 l       .debug_str	00000000 
0004f67e l       .debug_str	00000000 
0004f6d3 l       .debug_str	00000000 
0004f71b l       .debug_str	00000000 
0004f761 l       .debug_str	00000000 
0004f7a8 l       .debug_str	00000000 
0004f7f1 l       .debug_str	00000000 
0004f843 l       .debug_str	00000000 
0004f895 l       .debug_str	00000000 
0004f933 l       .debug_str	00000000 
0004f965 l       .debug_str	00000000 
0004f99e l       .debug_str	00000000 
0004f9b3 l       .debug_str	00000000 
0004f9ee l       .debug_str	00000000 
0004fa05 l       .debug_str	00000000 
0004fa43 l       .debug_str	00000000 
0004fa5d l       .debug_str	00000000 
0004fabf l       .debug_str	00000000 
0004fae4 l       .debug_str	00000000 
0004fb3f l       .debug_str	00000000 
0004fb4e l       .debug_str	00000000 
0004fbc3 l       .debug_str	00000000 
0004fbe0 l       .debug_str	00000000 
0004fc1a l       .debug_str	00000000 
0004fc57 l       .debug_str	00000000 
0004fc62 l       .debug_str	00000000 
0004fc9a l       .debug_str	00000000 
0004fca1 l       .debug_str	00000000 
0004fd20 l       .debug_str	00000000 
0004fd80 l       .debug_str	00000000 
0004fdde l       .debug_str	00000000 
0004fe3c l       .debug_str	00000000 
0004fe74 l       .debug_str	00000000 
0004fea9 l       .debug_str	00000000 
0004fed4 l       .debug_str	00000000 
0004fede l       .debug_str	00000000 
0004ff0e l       .debug_str	00000000 
0004ff1c l       .debug_str	00000000 
0004ff75 l       .debug_str	00000000 
0004ffc8 l       .debug_str	00000000 
00050044 l       .debug_str	00000000 
000500a8 l       .debug_str	00000000 
0005010c l       .debug_str	00000000 
00050142 l       .debug_str	00000000 
00050156 l       .debug_str	00000000 
00050197 l       .debug_str	00000000 
000501af l       .debug_str	00000000 
00050263 l       .debug_str	00000000 
00050296 l       .debug_str	00000000 
000502a7 l       .debug_str	00000000 
000502ed l       .debug_str	00000000 
000502fa l       .debug_str	00000000 
00050337 l       .debug_str	00000000 
0005037b l       .debug_str	00000000 
000503bc l       .debug_str	00000000 
000503fe l       .debug_str	00000000 
00050408 l       .debug_str	00000000 
0005044c l       .debug_str	00000000 
00050457 l       .debug_str	00000000 
000504a5 l       .debug_str	00000000 
000504f3 l       .debug_str	00000000 
00050539 l       .debug_str	00000000 
00050581 l       .debug_str	00000000 
000505c9 l       .debug_str	00000000 
00013646 l       .debug_str	00000000 
00050630 l       .debug_str	00000000 
00050689 l       .debug_str	00000000 
000506f3 l       .debug_str	00000000 
00016dd8 l       .debug_str	00000000 
0005075d l       .debug_str	00000000 
000507d8 l       .debug_str	00000000 
0005084d l       .debug_str	00000000 
00050858 l       .debug_str	00000000 
000508cd l       .debug_str	00000000 
000508d8 l       .debug_str	00000000 
0005092f l       .debug_str	00000000 
00050993 l       .debug_str	00000000 
0005099f l       .debug_str	00000000 
000509dc l       .debug_str	00000000 
000509e9 l       .debug_str	00000000 
00050a1d l       .debug_str	00000000 
00050a58 l       .debug_str	00000000 
00050ab4 l       .debug_str	00000000 
00050b0f l       .debug_str	00000000 
00050b69 l       .debug_str	00000000 
000375a3 l       .debug_str	00000000 
00050baf l       .debug_str	00000000 
00050c15 l       .debug_str	00000000 
00050c4c l       .debug_str	00000000 
00050c54 l       .debug_str	00000000 
00050c8c l       .debug_str	00000000 
00050c95 l       .debug_str	00000000 
00050ccd l       .debug_str	00000000 
00050cd6 l       .debug_str	00000000 
00050d0d l       .debug_str	00000000 
00050d15 l       .debug_str	00000000 
00050d4d l       .debug_str	00000000 
00050d56 l       .debug_str	00000000 
00050d8e l       .debug_str	00000000 
00050d97 l       .debug_str	00000000 
00050dce l       .debug_str	00000000 
00050dd6 l       .debug_str	00000000 
00050e50 l       .debug_str	00000000 
00050eca l       .debug_str	00000000 
00050f44 l       .debug_str	00000000 
00050fc0 l       .debug_str	00000000 
0001a523 l       .debug_str	00000000 
0005101e l       .debug_str	00000000 
0005107d l       .debug_str	00000000 
000510dc l       .debug_str	00000000 
0005113b l       .debug_str	00000000 
0005119b l       .debug_str	00000000 
000511f9 l       .debug_str	00000000 
00051258 l       .debug_str	00000000 
000512b7 l       .debug_str	00000000 
00051316 l       .debug_str	00000000 
00051376 l       .debug_str	00000000 
000513cb l       .debug_str	00000000 
00051420 l       .debug_str	00000000 
0005147a l       .debug_str	00000000 
000514d4 l       .debug_str	00000000 
0005150e l       .debug_str	00000000 
00051517 l       .debug_str	00000000 
00051551 l       .debug_str	00000000 
0005155a l       .debug_str	00000000 
00051597 l       .debug_str	00000000 
00038a8e l       .debug_str	00000000 
000515d0 l       .debug_str	00000000 
00051631 l       .debug_str	00000000 
0005168f l       .debug_str	00000000 
000516d0 l       .debug_str	00000000 
0005170e l       .debug_str	00000000 
00051747 l       .debug_str	00000000 
00051786 l       .debug_str	00000000 
000517c4 l       .debug_str	00000000 
00051802 l       .debug_str	00000000 
00051843 l       .debug_str	00000000 
00051887 l       .debug_str	00000000 
000518c4 l       .debug_str	00000000 
0005192a l       .debug_str	00000000 
00051991 l       .debug_str	00000000 
000519f4 l       .debug_str	00000000 
00051a56 l       .debug_str	00000000 
00051abb l       .debug_str	00000000 
00051b24 l       .debug_str	00000000 
00051b8a l       .debug_str	00000000 
00051bf0 l       .debug_str	00000000 
00051c4b l       .debug_str	00000000 
00051cb2 l       .debug_str	00000000 
00051d1d l       .debug_str	00000000 
00051d78 l       .debug_str	00000000 
00051dd3 l       .debug_str	00000000 
00022c7f l       .debug_str	00000000 
00051e1a l       .debug_str	00000000 
00051e62 l       .debug_str	00000000 
00051eaa l       .debug_str	00000000 
00051ef2 l       .debug_str	00000000 
00051f3b l       .debug_str	00000000 
00051f85 l       .debug_str	00000000 
00051fcc l       .debug_str	00000000 
0005201f l       .debug_str	00000000 
0005203a l       .debug_str	00000000 
00052082 l       .debug_str	00000000 
000520d6 l       .debug_str	00000000 
0005211e l       .debug_str	00000000 
00052172 l       .debug_str	00000000 
000521ba l       .debug_str	00000000 
0005220e l       .debug_str	00000000 
00052257 l       .debug_str	00000000 
000522ac l       .debug_str	00000000 
000522f6 l       .debug_str	00000000 
0005234e l       .debug_str	00000000 
000523b0 l       .debug_str	00000000 
0005240f l       .debug_str	00000000 
0005246f l       .debug_str	00000000 
000524cf l       .debug_str	00000000 
0005252f l       .debug_str	00000000 
00052590 l       .debug_str	00000000 
000525ef l       .debug_str	00000000 
0005264f l       .debug_str	00000000 
000526af l       .debug_str	00000000 
0005270f l       .debug_str	00000000 
00052770 l       .debug_str	00000000 
000527cd l       .debug_str	00000000 
00052828 l       .debug_str	00000000 
0005287e l       .debug_str	00000000 
000528dc l       .debug_str	00000000 
00052930 l       .debug_str	00000000 
00052991 l       .debug_str	00000000 
000529f7 l       .debug_str	00000000 
00052a5f l       .debug_str	00000000 
00052ac6 l       .debug_str	00000000 
00052b22 l       .debug_str	00000000 
00052b83 l       .debug_str	00000000 
00052bdd l       .debug_str	00000000 
00052c37 l       .debug_str	00000000 
00052c95 l       .debug_str	00000000 
00052ce9 l       .debug_str	00000000 
00052d65 l       .debug_str	00000000 
00052dce l       .debug_str	00000000 
00052e4a l       .debug_str	00000000 
00052ec6 l       .debug_str	00000000 
00052f2f l       .debug_str	00000000 
00052fab l       .debug_str	00000000 
00053018 l       .debug_str	00000000 
00053072 l       .debug_str	00000000 
000530cb l       .debug_str	00000000 
00053123 l       .debug_str	00000000 
00053182 l       .debug_str	00000000 
000531e1 l       .debug_str	00000000 
00053240 l       .debug_str	00000000 
000532a0 l       .debug_str	00000000 
00053300 l       .debug_str	00000000 
00053360 l       .debug_str	00000000 
000533c0 l       .debug_str	00000000 
00053422 l       .debug_str	00000000 
00053484 l       .debug_str	00000000 
000534e5 l       .debug_str	00000000 
00053547 l       .debug_str	00000000 
000535a9 l       .debug_str	00000000 
0005360a l       .debug_str	00000000 
0005366c l       .debug_str	00000000 
000536ce l       .debug_str	00000000 
00038ad2 l       .debug_str	00000000 
00053717 l       .debug_str	00000000 
00053763 l       .debug_str	00000000 
0005376b l       .debug_str	00000000 
000537b5 l       .debug_str	00000000 
00053800 l       .debug_str	00000000 
00053807 l       .debug_str	00000000 
00053852 l       .debug_str	00000000 
0005389d l       .debug_str	00000000 
000538e9 l       .debug_str	00000000 
00053933 l       .debug_str	00000000 
00053980 l       .debug_str	00000000 
000539cb l       .debug_str	00000000 
00053a17 l       .debug_str	00000000 
00053a63 l       .debug_str	00000000 
00053aaf l       .debug_str	00000000 
00053afc l       .debug_str	00000000 
00053b46 l       .debug_str	00000000 
00053b93 l       .debug_str	00000000 
00053bde l       .debug_str	00000000 
00053c2a l       .debug_str	00000000 
00053c76 l       .debug_str	00000000 
00053cc2 l       .debug_str	00000000 
00053d0f l       .debug_str	00000000 
00053d59 l       .debug_str	00000000 
00053da6 l       .debug_str	00000000 
00053df1 l       .debug_str	00000000 
00053e3d l       .debug_str	00000000 
00053e89 l       .debug_str	00000000 
00053ed5 l       .debug_str	00000000 
00053f22 l       .debug_str	00000000 
00053f6d l       .debug_str	00000000 
00053fbb l       .debug_str	00000000 
00054007 l       .debug_str	00000000 
00054054 l       .debug_str	00000000 
000540a1 l       .debug_str	00000000 
000540ee l       .debug_str	00000000 
0005413c l       .debug_str	00000000 
00054187 l       .debug_str	00000000 
000541d2 l       .debug_str	00000000 
0005421e l       .debug_str	00000000 
0005426a l       .debug_str	00000000 
000542b7 l       .debug_str	00000000 
00054303 l       .debug_str	00000000 
00054350 l       .debug_str	00000000 
0005439d l       .debug_str	00000000 
000543fc l       .debug_str	00000000 
00054459 l       .debug_str	00000000 
000544b5 l       .debug_str	00000000 
00054513 l       .debug_str	00000000 
00054570 l       .debug_str	00000000 
000545ce l       .debug_str	00000000 
0005462b l       .debug_str	00000000 
00054689 l       .debug_str	00000000 
000546e6 l       .debug_str	00000000 
00054745 l       .debug_str	00000000 
000547a3 l       .debug_str	00000000 
00054804 l       .debug_str	00000000 
00054865 l       .debug_str	00000000 
000548c8 l       .debug_str	00000000 
000548f9 l       .debug_str	00000000 
00054901 l       .debug_str	00000000 
00054964 l       .debug_str	00000000 
000549c7 l       .debug_str	00000000 
00054a2b l       .debug_str	00000000 
00054a8f l       .debug_str	00000000 
00054af3 l       .debug_str	00000000 
00054b57 l       .debug_str	00000000 
00054bba l       .debug_str	00000000 
00054c1d l       .debug_str	00000000 
00054c81 l       .debug_str	00000000 
00054ce5 l       .debug_str	00000000 
00054d49 l       .debug_str	00000000 
00054dad l       .debug_str	00000000 
00054dde l       .debug_str	00000000 
00054de6 l       .debug_str	00000000 
00054e4a l       .debug_str	00000000 
00054eae l       .debug_str	00000000 
00054f12 l       .debug_str	00000000 
00054f76 l       .debug_str	00000000 
00054fd6 l       .debug_str	00000000 
00055036 l       .debug_str	00000000 
00055064 l       .debug_str	00000000 
0005506d l       .debug_str	00000000 
000550ce l       .debug_str	00000000 
0005512f l       .debug_str	00000000 
00055190 l       .debug_str	00000000 
000551f1 l       .debug_str	00000000 
00055248 l       .debug_str	00000000 
0005529b l       .debug_str	00000000 
000552e3 l       .debug_str	00000000 
0005530b l       .debug_str	00000000 
00055353 l       .debug_str	00000000 
00055369 l       .debug_str	00000000 
000553b1 l       .debug_str	00000000 
000553e6 l       .debug_str	00000000 
0005542e l       .debug_str	00000000 
00055469 l       .debug_str	00000000 
000554b1 l       .debug_str	00000000 
000554f9 l       .debug_str	00000000 
0005551a l       .debug_str	00000000 
00055562 l       .debug_str	00000000 
0005556d l       .debug_str	00000000 
000555b5 l       .debug_str	00000000 
000555f2 l       .debug_str	00000000 
0005563a l       .debug_str	00000000 
00055693 l       .debug_str	00000000 
000556db l       .debug_str	00000000 
000556f7 l       .debug_str	00000000 
0005573f l       .debug_str	00000000 
000557eb l       .debug_str	00000000 
00055833 l       .debug_str	00000000 
00055851 l       .debug_str	00000000 
00055899 l       .debug_str	00000000 
000558a3 l       .debug_str	00000000 
000558eb l       .debug_str	00000000 
00055926 l       .debug_str	00000000 
0005596e l       .debug_str	00000000 
000559bd l       .debug_str	00000000 
00055a05 l       .debug_str	00000000 
00055a2c l       .debug_str	00000000 
00055a74 l       .debug_str	00000000 
00055a9e l       .debug_str	00000000 
00055ae6 l       .debug_str	00000000 
00055b61 l       .debug_str	00000000 
00055ba9 l       .debug_str	00000000 
00055bf1 l       .debug_str	00000000 
00055c07 l       .debug_str	00000000 
00016532 l       .debug_str	00000000 
00055c4f l       .debug_str	00000000 
00055c97 l       .debug_str	00000000 
00055cdf l       .debug_str	00000000 
00055d10 l       .debug_str	00000000 
00055d58 l       .debug_str	00000000 
00055dbc l       .debug_str	00000000 
00055e04 l       .debug_str	00000000 
0000b802 l       .debug_str	00000000 
00055e4c l       .debug_str	00000000 
00055e94 l       .debug_str	00000000 
00055ea1 l       .debug_str	00000000 
00055ee9 l       .debug_str	00000000 
00055ef3 l       .debug_str	00000000 
00055f3b l       .debug_str	00000000 
00055f44 l       .debug_str	00000000 
00055f8c l       .debug_str	00000000 
00055fb4 l       .debug_str	00000000 
00055ffc l       .debug_str	00000000 
00056044 l       .debug_str	00000000 
00056066 l       .debug_str	00000000 
000560ae l       .debug_str	00000000 
000560df l       .debug_str	00000000 
00056127 l       .debug_str	00000000 
0005616f l       .debug_str	00000000 
000561a7 l       .debug_str	00000000 
000561ef l       .debug_str	00000000 
00056224 l       .debug_str	00000000 
0005626c l       .debug_str	00000000 
00056295 l       .debug_str	00000000 
000562dd l       .debug_str	00000000 
00056301 l       .debug_str	00000000 
00056349 l       .debug_str	00000000 
0005636e l       .debug_str	00000000 
000563b6 l       .debug_str	00000000 
000563d3 l       .debug_str	00000000 
0005641b l       .debug_str	00000000 
00056426 l       .debug_str	00000000 
0005646e l       .debug_str	00000000 
00056496 l       .debug_str	00000000 
000564de l       .debug_str	00000000 
000564ed l       .debug_str	00000000 
00056535 l       .debug_str	00000000 
0005657d l       .debug_str	00000000 
00056599 l       .debug_str	00000000 
000565e1 l       .debug_str	00000000 
00056658 l       .debug_str	00000000 
000566a0 l       .debug_str	00000000 
00056717 l       .debug_str	00000000 
0005675f l       .debug_str	00000000 
00056768 l       .debug_str	00000000 
000567b0 l       .debug_str	00000000 
000567d6 l       .debug_str	00000000 
0005681e l       .debug_str	00000000 
00056851 l       .debug_str	00000000 
00056899 l       .debug_str	00000000 
000568b6 l       .debug_str	00000000 
000568fe l       .debug_str	00000000 
00056907 l       .debug_str	00000000 
0005694f l       .debug_str	00000000 
00056997 l       .debug_str	00000000 
000569bb l       .debug_str	00000000 
0000b8eb l       .debug_str	00000000 
00056a03 l       .debug_str	00000000 
00056a4b l       .debug_str	00000000 
00056a93 l       .debug_str	00000000 
00056b8b l       .debug_str	00000000 
0001ac33 l       .debug_str	00000000 
00056bd3 l       .debug_str	00000000 
00056c1b l       .debug_str	00000000 
00056c63 l       .debug_str	00000000 
00056c90 l       .debug_str	00000000 
0000b93c l       .debug_str	00000000 
00056cd8 l       .debug_str	00000000 
00056d20 l       .debug_str	00000000 
00056d7d l       .debug_str	00000000 
00056dc5 l       .debug_str	00000000 
00056dce l       .debug_str	00000000 
00056e16 l       .debug_str	00000000 
00056e33 l       .debug_str	00000000 
00056e7b l       .debug_str	00000000 
00056eb1 l       .debug_str	00000000 
00056ef9 l       .debug_str	00000000 
00056f2e l       .debug_str	00000000 
00056f76 l       .debug_str	00000000 
00056faf l       .debug_str	00000000 
00056ff7 l       .debug_str	00000000 
00057013 l       .debug_str	00000000 
0005705b l       .debug_str	00000000 
00057063 l       .debug_str	00000000 
000570ab l       .debug_str	00000000 
000570c6 l       .debug_str	00000000 
0005710e l       .debug_str	00000000 
00057136 l       .debug_str	00000000 
00057180 l       .debug_str	00000000 
000571ca l       .debug_str	00000000 
00057229 l       .debug_str	00000000 
00057286 l       .debug_str	00000000 
000572df l       .debug_str	00000000 
0005733e l       .debug_str	00000000 
0005739d l       .debug_str	00000000 
000573fe l       .debug_str	00000000 
00057461 l       .debug_str	00000000 
000574c9 l       .debug_str	00000000 
0005752b l       .debug_str	00000000 
00057591 l       .debug_str	00000000 
000575f3 l       .debug_str	00000000 
00057658 l       .debug_str	00000000 
000576bb l       .debug_str	00000000 
00057717 l       .debug_str	00000000 
0005776e l       .debug_str	00000000 
000577c7 l       .debug_str	00000000 
0005781a l       .debug_str	00000000 
00057876 l       .debug_str	00000000 
000578dc l       .debug_str	00000000 
00057932 l       .debug_str	00000000 
0005798f l       .debug_str	00000000 
000579f1 l       .debug_str	00000000 
00057a4a l       .debug_str	00000000 
00057aa5 l       .debug_str	00000000 
00057b00 l       .debug_str	00000000 
00057b5b l       .debug_str	00000000 
00057bb8 l       .debug_str	00000000 
00057c15 l       .debug_str	00000000 
00057c5b l       .debug_str	00000000 
00057ca5 l       .debug_str	00000000 
00057ce5 l       .debug_str	00000000 
00057d22 l       .debug_str	00000000 
00057d66 l       .debug_str	00000000 
00057da2 l       .debug_str	00000000 
00057de6 l       .debug_str	00000000 
00057e2f l       .debug_str	00000000 
00057e38 l       .debug_str	00000000 
00057e81 l       .debug_str	00000000 
00057e8a l       .debug_str	00000000 
00057ef3 l       .debug_str	00000000 
00057f50 l       .debug_str	00000000 
00057fb3 l       .debug_str	00000000 
00058009 l       .debug_str	00000000 
0005805f l       .debug_str	00000000 
000580b8 l       .debug_str	00000000 
00058110 l       .debug_str	00000000 
00058174 l       .debug_str	00000000 
000581fa l       .debug_str	00000000 
00058200 l       .debug_str	00000000 
00058286 l       .debug_str	00000000 
0005828c l       .debug_str	00000000 
0005830e l       .debug_str	00000000 
00058390 l       .debug_str	00000000 
00058413 l       .debug_str	00000000 
0005841a l       .debug_str	00000000 
0005849d l       .debug_str	00000000 
000584a4 l       .debug_str	00000000 
0005852a l       .debug_str	00000000 
000585b0 l       .debug_str	00000000 
00058633 l       .debug_str	00000000 
000586b6 l       .debug_str	00000000 
00058738 l       .debug_str	00000000 
000587be l       .debug_str	00000000 
00058844 l       .debug_str	00000000 
000588ce l       .debug_str	00000000 
00058956 l       .debug_str	00000000 
000589de l       .debug_str	00000000 
00058a46 l       .debug_str	00000000 
00058aaf l       .debug_str	00000000 
00058b19 l       .debug_str	00000000 
00058b84 l       .debug_str	00000000 
00058be2 l       .debug_str	00000000 
00058c40 l       .debug_str	00000000 
00058c9e l       .debug_str	00000000 
00058cfd l       .debug_str	00000000 
00058d5b l       .debug_str	00000000 
00058dba l       .debug_str	00000000 
00058e18 l       .debug_str	00000000 
00058e77 l       .debug_str	00000000 
00058ed6 l       .debug_str	00000000 
00058f35 l       .debug_str	00000000 
00058f93 l       .debug_str	00000000 
00058ff2 l       .debug_str	00000000 
00059051 l       .debug_str	00000000 
000590b0 l       .debug_str	00000000 
0005910f l       .debug_str	00000000 
0005916e l       .debug_str	00000000 
000591cd l       .debug_str	00000000 
0005922c l       .debug_str	00000000 
0005928b l       .debug_str	00000000 
000592ea l       .debug_str	00000000 
00059349 l       .debug_str	00000000 
000593a8 l       .debug_str	00000000 
00059407 l       .debug_str	00000000 
00059466 l       .debug_str	00000000 
000594c5 l       .debug_str	00000000 
00059524 l       .debug_str	00000000 
00059583 l       .debug_str	00000000 
000595e2 l       .debug_str	00000000 
00059641 l       .debug_str	00000000 
000596a0 l       .debug_str	00000000 
00059700 l       .debug_str	00000000 
0005975f l       .debug_str	00000000 
000597be l       .debug_str	00000000 
0005981d l       .debug_str	00000000 
0005987d l       .debug_str	00000000 
000598dc l       .debug_str	00000000 
0005993b l       .debug_str	00000000 
0005999a l       .debug_str	00000000 
000599fa l       .debug_str	00000000 
0001781e l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE
0001983c l     F .text	0000000a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E
00019846 l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E
00017ec2 l     F .text	000000e4 _ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE
00018eea l     F .text	0000024c _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE
00017dbc l     F .text	000000b0 _ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E
00017e6c l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE
000183e4 l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E
000177ce l     F .text	00000002 _ZN4core3ptr13drop_in_place17h000c7c147ade2111E
00017830 l     F .text	00000114 _ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E
00021a8c l     O .text	0000007b _ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E
00021b07 l     O .text	000001f0 _ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E
00021cf8 l     O .text	00000458 _ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E
00021060 l     O .text	00000010 _ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE
00017e96 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE
00017e9c l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE
00017e90 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E
000177d0 l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE
00000000 l    df *ABS*	00000000 semihosting_console.c
00019854 l     F .text	00000024 __semihost
00019878 l     F .text	00000010 debugger_connected
00019888 l     F .text	0000002e semihost_write
0001995c l     F .text	0000001c semihosting_console_write_ch
20006f04 l     O .bss	00000004 semihost_mbuf
20000100 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
20006f08 l     O .bss	00000010 avail_queue
20006f18 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20006f24 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
00019b2c l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_gpio.c
00019b80 l     F .text	00000050 hal_gpio_irq_handler
00019bd0 l     F .text	0000002c hal_gpio_irq_setup
00019bfc l     F .text	0000001c hal_gpio_find_empty_slot
00019c18 l     F .text	00000038 hal_gpio_find_pin
20006f28 l     O .bss	00000040 hal_gpio_irqs
20006f68 l     O .bss	00000001 irq_setup.8906
00000000 l    df *ABS*	00000000 hal_i2c.c
00019dac l     F .text	0000007a hal_i2c_delay_us
00019e28 l     F .text	00000024 hal_i2c_resolve
00019e4c l     F .text	0000001c hal_i2c_convert_status
00019e68 l     F .text	00000012 read_gpio_inbuffer
00019e7a l     F .text	000000a2 hal_i2c_clear_bus
00022160 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_spi.c
0001a218 l     F .text	0000006e nrf52_irqm_handler
0001a2a0 l     F .text	00000014 hal_spi_stop_transfer
0001a2b4 l     F .text	0000004c hal_spi_config_slave
0001a300 l     F .text	000000b8 hal_spi_init_master
0001a3b8 l     F .text	000000e0 hal_spi_config_master
00022168 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
0001a79c l     F .text	0000000e nrf52_hal_wdt_default_handler
0001a7ac l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
0001a9c4 l     F .text	00000016 os_main
20007070 l     O .bss	00002000 g_os_main_stack
20006f70 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
0001acd4 l     F .text	0000005c os_dev_add
0001ad30 l     F .text	00000026 os_dev_initialize
0001ad56 l     F .text	00000020 os_dev_init
20009070 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20009078 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
0001b280 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0001b394 l     F .text	00000010 os_msys_find_biggest_pool
0001b3a4 l     F .text	0000002c os_msys_find_pool
0001b41c l     F .text	00000044 os_msys_init_once
20009088 l     O .bss	00004900 os_msys_1_data
2000d988 l     O .bss	0000000c os_msys_1_mbuf_pool
2000d994 l     O .bss	0000001c os_msys_1_mempool
2000010c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
0001b678 l     F .text	00000020 os_sanity_check_list_lock
0001b698 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
0001bb0c l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0001bbfc l     F .text	0000004c os_deltatime
0001bc48 l     F .text	0000005c os_time_tick
2000d9b8 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0001bf64 l       .text	00000000 SVC_User
0001bf82 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
0001c024 l       .text	00000000 test1
0001c018 l       .text	00000000 loop1
0001c02a l       .text	00000000 res1
0001c046 l       .text	00000000 test2
0001c04e l       .text	00000000 done
0001c03a l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0001c05a l       .text	00000000 test1
0001c056 l       .text	00000000 loop1
0001c068 l       .text	00000000 test2
0001c064 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0001c0d2 l     F .text	000000c0 ui2a
0001c192 l     F .text	00000020 i2a
0001c1b2 l     F .text	00000030 a2d
0001c1e2 l     F .text	00000036 a2i
0001c218 l     F .text	0000002a putf
0001c244 l     F .text	0000011c putchw
0001c360 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0001c6e4 l     F .text	00000004 stdin_read
0001c6e8 l     F .text	00000010 stdout_write
20000124 l     O .data	00000004 _stdin
20000128 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001c798 l     F .text	00000028 nrf52k_flash_wait_ready
0001c7c0 l     F .text	00000054 nrf52k_flash_erase_sector
0001c814 l     F .text	00000004 nrf52k_flash_init
0001c818 l     F .text	00000020 nrf52k_flash_sector_info
0001c838 l     F .text	000000d0 nrf52k_flash_write
0001c908 l     F .text	0000000e nrf52k_flash_read
00022320 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001c918 l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
0001cb24 l     F .text	0000000a nrf_read_timer_cntr
0001cb30 l     F .text	000000b4 nrf_timer_set_ocmp
0001cbe4 l     F .text	0000000a nrf_timer_disable_ocmp
0001cbee l     F .text	0000000a nrf_rtc_disable_ocmp
0001cbf8 l     F .text	00000054 hal_timer_read_bsptimer
0001cc4c l     F .text	00000076 hal_timer_chk_queue
0001ccc2 l     F .text	0000002c hal_timer_irq_handler
0002233c l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001ce88 l     F .text	00000034 nrf52_periph_create_timers
0001cebc l     F .text	00000020 nrf52_periph_create_i2c
0001cedc l     F .text	00000020 nrf52_periph_create_spi
00022354 l     O .text	0000000c hal_i2c1_cfg
00022360 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
0001cf10 l     F .text	00000028 sensor_mgr_remove
0001cf38 l     F .text	00000060 sensor_mgr_insert
0001cf98 l     F .text	0000000a sensor_type_traits_empty
0001cfa4 l     F .text	0000000c sensor_mgr_evq_set
0001cfde l     F .text	0000005c sensor_read_data_func
0001d03c l     F .text	00000048 sensor_base_ts_update_event
0001d084 l     F .text	00000050 sensor_up_timestamp
0001d10c l     F .text	000000a0 sensor_mgr_init
0001d378 l     F .text	0000007c sensor_mgr_wakeup_event
0001d1d6 l     F .text	00000032 sensor_update_nextrun
0001d208 l     F .text	0000001e sensor_calc_nextrun_delta
0001d228 l     F .text	00000024 sensor_find_min_nextrun_sensor
0001d300 l     F .text	0000004a sensor_mgr_poll_bytype
0001d34a l     F .text	0000002e sensor_poll_per_type_trait
2000d9ec l     O .bss	00000078 sensor_notify_evt_area
2000da64 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 sensor_coap.c
2000da80 l     O .bss	00000008 oc_sem
2000da88 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000da8c l     O .bss	0000000c hw_id
2000da98 l     O .bss	00000004 hw_id_len
2000daa0 l     O .bss	00000008 sensor_node_address
2000daa8 l     O .bss	00000037 sensor_node_names_buf
20000130 l     O .data	00000014 sensor_node_names
00022378 l     O .text	0000000c COLLECTOR_NODE_HW_ID
00022384 l     O .text	0000003c SENSOR_NODE_HW_IDS
00022420 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
0001d59c l     F .text	00000050 config_device
2000dae0 l     O .bss	00000014 adc_1_itf_temp_stub
2000daf8 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001d648 l     F .text	00000004 temp_stub_close
0001d64c l     F .text	0000001c temp_stub_sensor_get_config
0001d668 l     F .text	00000026 temp_stub_open
0001d744 l     F .text	0000007c temp_stub_sensor_read
00022464 l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
0001d7e8 l     F .text	00000030 oc_buffer_tx
0001d818 l     F .text	0000002c oc_buffer_rx
2000dbb8 l     O .bss	00000018 oc_inq
2000dbd0 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
2000dbe8 l     O .bss	000000c8 oc_client_cb_area
2000dcb0 l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
2000dccc l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000dcd0 l     O .bss	0000001c oc_rep_objects
2000dcec l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 flash_map.c
0001d96c l     F .text	00000078 flash_map_read_mfg
2000dd1c l     O .bss	00000078 mfg_areas.9056
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0001dac0 l     F .text	00000094 mfg_seek_next_aux
0001db54 l     F .text	00000070 mfg_read_mmr
0001dbc4 l     F .text	00000054 mfg_read_next_mmr
0001dc18 l     F .text	0000003c mfg_open_flash_area
0001dc54 l     F .text	00000044 mfg_read_tlv_body
0001dd20 l     F .text	0000004e mfg_read_mmr_refs
2000dd94 l     O .bss	00000001 mfg_initialized
2000dd98 l     O .bss	00000018 mfg_mmrs
2000ddb0 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001dd86 l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memclr.c
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 lib_a-aeabi_memset-soft.o
00000000 l    df *ABS*	00000000 libchip8.bde0u64m-cgu.0
00000afc l       .debug_str	00000000 
00019f96 l       .debug_str	00000000 
00019fed l       .debug_str	00000000 
0001163d l       .debug_str	00000000 
0001a039 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0001a041 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
000179d4 g     F .text	00000004 _ZN4core5panic8Location4line17h650a566d9637c91dE
000155f8 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE
00008616 g     F .text	000000ba main
00014d24 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE
00009f6e g     F .text	0000070a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E
0001afa4 g     F .text	00000040 os_eventq_remove
0000a704 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE
0001bdf0 g     F .text	00000018 os_arch_init
0001c00c g     F .text	00000048 memcmp
0001211a g     F .text	00000012 _ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE
00017478 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE
000162e4 g     F .text	00000024 _ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE
000115f4 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E
00014908 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E
00012490 g     F .text	000000ee _ZN3log17__private_api_log17h076f8f4ccc99f19bE
00017158 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE
00016fe0 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E
00011476 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h6a9fe8e0637c7337E
00014640 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE
000145d4 g     F .text	00000002 _ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E
00017a04 g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E
0000a6e6 g     F .text	0000001e .hidden _ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE
000090a0 g     F .text	00000010 _ZN4core3ptr5write17h7ef3fa6b6f80daebE
0000bf1e g     F .text	000000d4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E
000147d4 g     F .text	0000005a _ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE
00019664 g     F .text	000000f4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hc96955e2b836ab47E
2000ded0 g     O .bss	0000001c nrf52_hal_timer0
00014b70 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E
00009086 g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE
000149e6 g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE
0001d1cc g     F .text	0000000a sensor_unlock
0000ab9a g     F .text	00000036 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E
0000c16c g     F .text	000000f6 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE
00014b14 g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E
000097f6 g     F .text	00000118 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E
00011648 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E
00014af8 g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE
00016a48 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E
00008ef2 g     F .text	0000006c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E
0001b6c4 g     F .text	00000024 os_sanity_check_register
0001d69c g     F .text	0000007c temp_stub_init
0001b764 g     F .text	00000054 os_sched_insert
0000c08c g     F .text	00000014 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17h3eb92f330a1e13e5E
0001124e g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$8shutdown17h728c2b30a102c46bE
2000ddb4 g     O .bss	00000001 g_silence_console
0001503e g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E
00015912 g     F .text	0000028a _ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E
000150f6 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E
000127ac g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE
00016dd6 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001de24 g     F .text	00000034 hal_bsp_hw_id
00008164  w    F .text	00000002 NFCT_IRQHandler
000177a0 g     F .text	00000004 .hidden _ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE
000148cc g     F .text	00000018 _ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E
00010f62 g     F .text	000000a8 _ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E
00016a98 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E
00009980 g     F .text	00000162 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE
0001608e g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE
00008c5e g     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE
0001547e g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE
000192b0 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE
000177b2 g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E
00014d88 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE
000151e2 g     F .text	00000024 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE
00011838 g     F .text	00000086 _ZN4core3cmp6max_by17h3c9686db40e0f078E
00008a9c g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E
20000114 g     O .data	00000008 g_os_run_list
00015658 g     F .text	0000004a _ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E
0001d8a8 g     F .text	00000020 oc_send_buffer
0001be98 g     F .text	00000030 os_arch_start
00015568 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE
0000a778 g     F .text	0000001a _ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E
0001d4c0 g     F .text	0000001a is_standalone_node
000087d2 g     F .text	00000054 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE
0001ae90 g     F .text	00000010 os_eventq_init
000188c2 g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E
0001125e g     F .text	00000010 _ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04da96b0e9749c79E
0001283c g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E
00017fa6 g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E
00011632 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E
00008d54 g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE
00011380 g     F .text	00000038 _ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h53d3e78f478dc601E
0000cdba g     F .text	00000028 _ZN4core6option15Option$LT$T$GT$6as_mut17h781416273935c5a0E
0001735a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE
0001d3f4 g     F .text	00000028 init_sensor_coap
0001706c g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE
0001d8c8 g     F .text	0000004c oc_send_multicast_message
0001609e g     F .text	0000008c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE
00011e3a g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E
0001887e g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE
2000def0 g     O .bss	00000034 sensor_mgr
0000cea2 g     F .text	00000106 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E
000199f8 g     F .text	0000002c console_dump
0001b890 g     F .text	00000078 os_sched_wakeup
0001764a g     F .text	0000011c .hidden _ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE
0001273c g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E
00019444 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6ff113c3a96d4445E
00008ad4 g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E
0001dd84 g     F .text	00000002 _fini
0001acc8 g     F .text	0000000a os_cputime_get32
000116f8 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E
00014476 g     F .text	00000132 _ZN6mynewt3hal4GPIO4init17h54c34caf27320956E
2000ddb5 g     O .bss	00000001 g_console_input_ignore
0001bd80 g     F .text	00000014 os_arch_ctx_sw
00011432 g     F .text	00000028 .hidden _ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E
00012782 g     F .text	0000001a _ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E
0000bce6 g     F .text	00000042 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17he15d36584013bbaeE
00014eb2 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE
0001bfce g     F .text	0000000c SysTick_Handler
0001d434 g     F .text	00000070 get_hardware_id
00008168 g     F .text	00000010 _sbrkInit
0001223c g     F .text	0000003c _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E
0001165e g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE
000093d8 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE
00008a74 g     F .text	00000012 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E
0001c0a6 g     F .text	0000001c strcmp
0000bae0 g     F .text	00000136 .hidden _ZN3app5chip88on_start17h473d234c4f7ef3a3E
0001606a g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE
2000dde8 g     O .bss	00000050 g_idle_task
0000d294 g     F .text	00000052 _ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E
0001ae80 g     F .text	00000010 os_dev_reset
0001756a g     F .text	00000010 _ZN4core3ptr5write17h147d4643d861e927E
00009484 g     F .text	00000262 _ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E
0001b9e0 g     F .text	00000010 os_sem_init
00016bb2 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E
00019978 g     F .text	00000070 console_printhex
0000adfe g     F .text	00000270 .hidden _ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E
00010f0c g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$4push17h2bc728f644865dbfE
0000885c g     F .text	0000003a _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE
0001466c g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE
00022524 g       .text	00000000 __exidx_start
0001d4a4 g     F .text	0000001c is_collector_node
0001757a g     F .text	00000036 _ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE
000114a8 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5039ae5c012134d0E
000158c2 g     F .text	00000050 _ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E
0001c06e g     F .text	00000038 memset
00008164  w    F .text	00000002 WDT_IRQHandler
00019194 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h096b8fea83a9dea7E
00019908 g     F .text	00000054 console_buffer
0001aea0 g     F .text	0000000a os_eventq_inited
00019b40 g     F .text	0000000c sysinit_end
00016f8e g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE
000173ea g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE
00008020 g       .text	00000000 __isr_vector_start
00008164  w    F .text	00000002 TIMER3_IRQHandler
00008164  w    F .text	00000002 MWU_IRQHandler
0001797c g     F .text	0000004a _ZN4core6result13unwrap_failed17h10957bfda7d5e5f2E
2000df88 g       .bss	00000000 __HeapBase
0001508e g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE
00014fdc g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E
00009384 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E
0000882e g     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E
0000a74a g     F .text	00000012 _ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E
000145a8 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E
0000d106 g     F .text	00000014 _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h7785b67405c5f47aE
00014950 g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E
0001da24 g     F .text	00000026 flash_area_read
0001276c g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E
0001d93a g     F .text	00000002 oc_register_ip4
00008faa g     F .text	00000046 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E
0001d93c g     F .text	00000002 oc_register_ip6
0000842c g     F .text	000001d4 SystemInit
00016e64 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE
0001dda4 g     F .text	00000028 hal_flash_init
0001ae48 g     F .text	00000036 os_dev_close
000224bc g     O .text	00000048 sysflash_map_dflt
0001c78c g     F .text	0000000c hal_bsp_init
00008b80 g     F .text	00000032 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E
00016390 g     F .text	000005e0 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE
00011f36 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
00009b98 g     F .text	0000012c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE
00011dfc g     F .text	00000032 _ZN4core3ptr4read17h2038b0ecb0975c4fE
0001e180 g     F .text	00000004 __aeabi_memcpy4
000161ba g     F .text	000000c6 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE
0000c0a0 g     F .text	000000c4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h3f18189aedbeb9e0E
0001a5e4 g     F .text	0000002c hal_spi_set_txrx_cb
0001e178 g     F .text	00000006 __aeabi_memclr8
000086d0 g     F .text	00000102 rust_begin_unwind
2000ddb8 g     O .bss	00000004 console_is_midline
0001e178 g     F .text	00000006 __aeabi_memclr4
0000a73a g     F .text	00000010 _ZN4core3ptr13drop_in_place17h22ac77b3595708cdE
000080f8 g       .text	00000000 __isr_vector_end
0001a0dc g     F .text	0000013c hal_i2c_master_read
00015176 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E
0001c3c4 g     F .text	0000025c tfp_format
0001732a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE
0001d298 g     F .text	00000068 sensor_read
00016c08 g     F .text	00000058 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E
0000906c g     F .text	00000010 _ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E
00014b80 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E
00015fc2 g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE
0001e180 g     F .text	00000004 __aeabi_memcpy
0001e180 g     F .text	00000004 __aeabi_memcpy8
2000df24 g     O .bss	00000020 st_up_osco
0001bec8 g     F .text	0000005c os_arch_os_start
0001d27a g     F .text	0000001e sensor_init
00017766 g     F .text	00000032 .hidden _ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE
20000000 g       .bss	00000000 _ram_start
0001bcf0 g     F .text	00000026 os_time_delay
00014b90 g     F .text	0000002c _ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE
0000ce2e g     F .text	00000014 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h01a214062ce56537E
0001d938 g     F .text	00000002 oc_register_gatt
20004a6c g     O .bss	00000004 _ZN3log20MAX_LOG_LEVEL_FILTER17h20753a6176f34564E
0001de20 g     F .text	00000004 hal_bsp_hw_id_len
0001ac88 g     F .text	00000034 os_callout_wakeup_ticks
0001affe g     F .text	00000026 os_mqueue_get
00019f1c g     F .text	00000098 hal_i2c_init
00018750 g     F .text	0000012e _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E
00019194 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E
00008164  w    F .text	00000002 TIMER4_IRQHandler
0002042c g     O .text	00000050 _ZN8libchip87CHARBUF17h227c6d0d7e24574cE
000119ba g     F .text	00000092 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E
00016970 g     F .text	00000048 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E
000172fa g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E
0001b990 g     F .text	00000022 os_sched
00008c70 g     F .text	00000020 _ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00011418 g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E
000118be g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h5567184bcc425327E
00011f7c g     F .text	00000014 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE
0000a7c8 g     F .text	00000010 _ZN4core3ptr13drop_in_place17hf625580841d3425eE
2000fe50 g       *ABS*	000001b0 __StackLimit
0001cfb0 g     F .text	0000002e sensor_mgr_match_bytype
00011e50 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE
00014a96 g     F .text	00000032 _ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E
0000ad1c g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE
0001b4cc g     F .text	00000014 os_mutex_init
00008f5e g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E
00009f2a g     F .text	00000044 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE
2000ddc0 g     O .bss	00000028 nrf52_hal_spi0
00008614 g     F .text	00000002 _init
00000020 g       *ABS*	00000000 _imghdr_size
00015206 g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E
00008164  w    F .text	00000002 RTC1_IRQHandler
00012062 g     F .text	00000008 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E
00008164  w    F .text	00000002 PDM_IRQHandler
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
0001726a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE
20000124 g       .data	00000000 __aeabi_unwind_cpp_pr0
00009214 g     F .text	0000001a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E
0000935a g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE
00008b78 g     F .text	00000008 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E
00012954 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E
0001b470 g     F .text	00000028 os_msys_get_pkthdr
0001d718 g     F .text	0000002c temp_stub_get_raw_temperature
0001b908 g     F .text	0000003c os_sched_os_timer_exp
0001ad78 g     F .text	00000040 os_dev_create
0000bff2 g     F .text	0000009a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E
0000a75c g     F .text	0000001c _ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E
000174f4 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
0001b6b4 g     F .text	00000010 os_sanity_check_init
00011488 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17hb92aaa4dbbca4bccE
00017a66 g     F .text	0000022c _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE
00008164  w    F .text	00000002 SAADC_IRQHandler
0001acbc g     F .text	0000000c os_cputime_init
0001af8c g     F .text	00000018 os_eventq_run
0001241c g     F .text	0000000c _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE
0001b498 g     F .text	00000034 os_msys_init
00016a50 g     F .text	0000000e .hidden _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E
00016e00 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E
0001bd76 g     F .text	0000000a timer_handler
000117c2 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE
000177a4 g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E
000092ea g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E
00008bb2 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E
00014ac8 g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E
0001779c g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E
00017a44 g     F .text	00000022 _ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E
000080f8 g     F .text	0000005c Reset_Handler
0000cbda g     F .text	0000002e .hidden _ZN3app5chip812handle_touch17habca32c74e5cefadE
00016a10 g     F .text	0000002c _ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE
00008020 g       .text	000000d8 __isr_vector
00019444 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17heaf2297ac445d947E
00014c6a g     F .text	0000002a .hidden _ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE
0001c620 g     F .text	00000008 vfprintf
0001462c g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E
00011fa8 g     F .text	0000000a _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E
00012006 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E
0001b09e g     F .text	00000036 os_mbuf_get_pkthdr
00008164  w    F .text	00000002 PWM0_IRQHandler
000172ca g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E
00000000 g       .svc_table	00000000 SVC_Count
00018c52 g     F .text	00000298 _ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE
0000c9a6 g     F .text	00000234 _ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE
00016308 g     F .text	00000088 _ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE
000179d8 g     F .text	0000002c _ZN4core9panicking5panic17h24d1dd0a9d540834E
0001bda6 g     F .text	0000000a os_arch_in_critical
000150e2 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E
0001b754 g     F .text	00000010 os_sanity_init
00011500 g     F .text	000000ba _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E
00016a3c g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE
00014c94 g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE
00019444 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E
00016d36 g     F .text	00000018 .hidden _ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE
00014b32 g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE
0001a868 g     F .text	0000004c __assert_func
00017058 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E
000153d4 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
00014cb2 g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE
0001b33e g     F .text	0000001e os_memblock_put_from_cb
0001bf28 g     F .text	00000014 os_set_env
2000deac g     O .bss	00000004 g_os_last_ctx_sw_time
00008a86 g     F .text	0000000a _ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE
00019ad8 g     F .text	00000048 console_printf
000127b6 g     F .text	00000016 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E
0000ac6c g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE
00011e7c g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE
00012688 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E
0001720a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E
0001bf3c g     F .text	00000006 os_arch_init_task_stack
0001dd10 g     F .text	00000010 mfg_open
00019444 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb33f6f1f0114a92bE
00016d4e g     F .text	0000005e .hidden _ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE
0001d86c g     F .text	00000030 oc_ri_mem_init
000096e6 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE
0001c77c g     F .text	00000010 hal_bsp_flash_dev
0001da4c g     F .text	00000070 flash_map_init
2000dec0 g     O .bss	00000004 g_os_time
00014a7e g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E
00010e28 g     F .text	00000024 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17ha6efa376ff520dabE
0000ce24 g     F .text	0000000a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E
00015b9c g     F .text	00000392 _ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E
0001bfda g     F .text	0000001e os_default_irq_asm
0001a8b4 g     F .text	00000098 os_default_irq
200000e4 g     O .data	00000004 SystemCoreClock
0001a51c g     F .text	00000068 hal_spi_disable
00016190 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E
000127fc g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E
0000903e g     F .text	0000002e _ZN6mynewt3sys7console6buffer17h6e460748855d110aE
0001d93e g     F .text	00000002 oc_register_lora
000192b0 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17hc265973c39f711faE
0001b120 g     F .text	000000a8 os_mbuf_append
0001d5ec g     F .text	0000005c temp_stub_create
0001ddcc g     F .text	00000054 hal_flash_read
000198b8 g     F .text	00000048 console_flush
0001744c g     F .text	00000018 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE
00014ae0 g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E
0001ab08 g     F .text	0000001a os_start
0001cd00 g     F .text	00000060 hal_timer_init
00011672 g     F .text	00000086 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E
0001c6f8 g     F .text	00000010 rust_sysinit
00008164  w    F .text	00000002 I2S_IRQHandler
000199e8 g     F .text	00000010 console_printint
0001b9b4 g     F .text	0000002c os_sched_resort
000222fc g     O .text	00000008 MemFile_methods
000113b8 g     F .text	0000004c _ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h3c6fa8392f63d25bE
00011110 g     F .text	0000007e _ZN8libchip814Chip8$LT$T$GT$5setup17h331c1512aac9f047E
0001c6cc g     F .text	00000018 fmemopen_w
0001364c g     F .text	00000126 _ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E
0001a498 g     F .text	00000038 hal_spi_config
0001e174  w    F .text	00000002 .hidden __aeabi_ldiv0
0001b384 g     F .text	00000010 os_mempool_module_init
0001b984 g     F .text	0000000c os_sched_next_task
00016134 g     F .text	0000001a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E
0000a792 g     F .text	00000010 _ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E
00019cd6 g     F .text	00000034 hal_gpio_read
0001ab5c g     F .text	0000001a os_callout_init
0001b460 g     F .text	00000010 os_msys_reset
0001118e g     F .text	000000c0 _ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E
0001c628 g     F .text	00000024 printf
00008156  w    F .text	00000002 HardFault_Handler
0001de78 g     F .text	00000000 .hidden __aeabi_uldivmod
0001bd18 g     F .text	00000038 os_gettimeofday
00019a64 g     F .text	0000001e console_write
000173ba g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E
0001871a g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE
000097e2 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE
0001a9e8 g     F .text	00000070 os_init_idle_task
0001be08 g     F .text	0000008c os_arch_os_init
000156ae g     F .text	000001b6 _ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE
00009322 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E
0001aa58 g     F .text	000000b0 os_init
2000de98 g     O .bss	00000008 g_os_mempool_list
000097d8 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE
00008184 g     F .text	00000010 hal_debugger_connected
0000a7a2 g     F .text	0000001e _ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE
00011e92 g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E
00019a60 g     F .text	00000004 semihosting_console_init
0001dcaa g     F .text	0000001a mfg_seek_next_with_type
0001b598 g     F .text	000000e0 os_mutex_pend
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
00016b6a g     F .text	00000026 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E
00019cb4 g     F .text	00000022 hal_gpio_write
0000bcdc g     F .text	0000000a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h254831b02f23b02eE
00008600 g     F .text	00000014 _start
00011f74 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE
00011fdc g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE
0001dd70 g     F .text	00000014 __wrap_coap_receive
0001723a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E
2000ddbc g     O .bss	00000001 sysinit_active
00016cfa g     F .text	00000012 _ZN4core3mem4swap17h206518364108b51fE
00012878 g     F .text	0000006e .hidden _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E
000147aa g     F .text	0000002a _ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE
0001c69c g     F .text	0000002e memfile_write
0001e174  w    F .text	00000002 .hidden __aeabi_idiv0
00016ca4 g     F .text	00000030 .hidden _ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE
000162ae g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE
0001a9dc g     F .text	0000000c os_started
00015f2e g     F .text	0000000a .hidden _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE
0001d844 g     F .text	00000028 oc_buffer_init
000145d6 g     F .text	00000056 _ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE
00009306 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E
2000dea0 g     O .bss	0000000c g_os_sanity_check_mu
000090b0 g     F .text	0000002c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E
00016c82 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
0001e178 g     F .text	00000006 __aeabi_memclr
0001e184 g     F .text	0000009a __aeabi_memset4
000129e0 g     F .text	00000a7a _ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E
00018722 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE
00017464 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E
000127cc g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E
0001bcb0 g     F .text	00000040 os_time_advance
0001a4d0 g     F .text	0000004c hal_spi_enable
0001dcd8 g     F .text	00000038 mfg_init
000140f6 g     F .text	00000010 _ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E
2000de38 g     O .bss	00000050 g_os_main_task
0001e184 g     F .text	0000009a __aeabi_memset8
000191f2 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hcd88e3dc15351fceE
00008b6c g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE
0002253c g       .ARM.exidx	00000000 __exidx_end
00008164  w    F .text	00000002 PWM1_IRQHandler
20000148 g     O .bss	00000018 _ZN22piet_embedded_graphics7display7DISPLAY17ha0ff10e671b220f2E
00017d64 g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE
00008afa g     F .text	0000004e _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE
00019758 g     F .text	000000e4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17hea84eef47d2fd641E
00019b4c g     F .text	00000034 NVIC_Relocate
0000cca2 g     F .text	0000009c _ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E
00019b34 g     F .text	0000000c sysinit_start
00016296 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E
000162c6 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE
00022308 g     O .text	00000018 nrf52k_flash_dev
0001cd60 g     F .text	000000f8 hal_timer_config
00014a66 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E
00014880 g     F .text	0000004c _ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E
0001c688 g     F .text	00000014 vprintf
0000c164 g     F .text	00000008 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha66b0913e7bbcba9E
00008f90 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E
00019900 g     F .text	00000008 disable_buffer
00017080 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E
2000de88 g     O .bss	00000004 g_os_started
0000cd3e g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE
000179cc g     F .text	00000008 _ZN4core5panic9PanicInfo7payload17h9302c8d957737573E
0000d23e g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$3pop17hcb81f3113413a9ceE
00014a26 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E
20000144 g       .bssnz	00000000 __bssnz_end__
0001ade4 g     F .text	00000020 os_dev_lookup
000155c8 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E
00009208 g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E
0001a844 g     F .text	00000010 hal_watchdog_enable
2000dec4 g     O .bss	0000000c g_hal_os_tick
00016ff2 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E
0001bda0 g     F .text	00000006 os_arch_restore_sr
0001abb4 g     F .text	00000078 os_callout_reset
000097ec g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE
0001dcc4 g     F .text	0000000a mfg_read_tlv_flash_area
00012818 g     F .text	00000024 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E
0000815a  w    F .text	00000002 BusFault_Handler
00016280 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E
0001afec g     F .text	00000012 os_mqueue_init
00011a4c g     F .text	00000052 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE
0001729a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E
0001528e g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E
0001d68e g     F .text	0000000e temp_stub_default_cfg
0001284c g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E
00008020 g       .imghdr	00000000 __text
0001ab78 g     F .text	0000003c os_callout_stop
0001522c g     F .text	00000062 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E
000081c0 g     F .text	0000004c hal_system_clock_start
0001b0e8 g     F .text	00000024 os_mbuf_free_chain
000090dc g     F .text	0000000a .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E
0001c708 g     F .text	00000030 mem_init_mbuf_pool
00012870 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E
0000cc08 g     F .text	0000009a _ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E
00008a90 g     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E
00017004 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E
00019fb4 g     F .text	00000128 hal_i2c_master_write
00015628 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E
00008164  w    F .text	00000002 QDEC_IRQHandler
00010e4c g     F .text	00000014 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hb6f25fe722781fd6E
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
00016b48 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E
000129c2 g     F .text	0000001e _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E
00011c50 g     F .text	0000003a _ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E
0001602c g     F .text	0000001a _ZN4core5slice14from_raw_parts17h1425df913744b73aE
0001afe4 g     F .text	00000008 os_eventq_dflt_get
0001d1b4 g     F .text	00000018 sensor_lock
0001160a g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE
000088c6 g     F .text	00000016 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE
00019a8c g     F .text	0000004c console_pkg_init
20000104 g     O .data	00000004 sysinit_panic_cb
0001b10c g     F .text	00000014 os_mbuf_len
0001b0d4 g     F .text	00000014 os_mbuf_free
00015864 g     F .text	0000005e _ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E
00014bbc g     F .text	000000ae _ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E
00011e66 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE
00012428 g     F .text	0000000a _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE
00008194 g     F .text	0000002c hal_system_reset
00019a82 g     F .text	00000008 console_blocking_mode
000156a2 g     F .text	0000000c _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E
0000a7d8 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE
00009cc4 g     F .text	00000266 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE
0001161e g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E
0001cefc g     F .text	00000010 nrf52_periph_create
00015f80 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E
0001b6e8 g     F .text	0000006c os_sanity_run
00016a5e g     F .text	0000003a .hidden _ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE
00016cec g     F .text	0000000e .hidden _ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E
0000841c g     F .text	00000010 SystemCoreClockUpdate
00014672 g     F .text	0000007e .hidden _ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE
000148e4 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E
0001750e g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE
00008896 g     F .text	00000030 _ZN4core3any6TypeId2of17haae5124a9f275cb8E
0001b2f8 g     F .text	00000014 os_mempool_init
00022304 g     O .text	00000004 stdout
0000adcc g     F .text	0000000e .hidden _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE
0000cde2 g     F .text	00000042 _ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E
0001adb8 g     F .text	0000002c os_dev_initialize_all
00008c90 g     F .text	000000b4 _ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E
00014a06 g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E
0001702e g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE
0001a94c g     F .text	00000078 os_idle_task
00008d44 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h1982c2483e0a2028E
0001145a g     F .text	0000001c _ZN4core4iter6traits8iterator8Iterator7flatten17hce303520e4c400b1E
00017170 g     F .text	0000000a .hidden _ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE
0000a71c g     F .text	0000001e _ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE
00017438 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E
00009ae2 g     F .text	000000b6 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE
00018418 g     F .text	00000302 _ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE
0001d9e4 g     F .text	00000040 flash_area_open
0001614e g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E
00015f76 g     F .text	0000000a _ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E
0001492c g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE
00008164 g     F .text	00000002 Default_Handler
000179ca g     F .text	00000002 _ZN4core5panic8Location6caller17h4b6b61f9498709a3E
0000922e g     F .text	000000bc _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E
0001b3d0 g     F .text	0000004c os_msys_register
000115ce g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17hfd3597918d2fce20E
00016176 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE
000090e6 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E
2000d9b0 g     O .bss	00000004 g_os_sanity_check_list
0000abd0 g     F .text	00000066 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E
00011fb2 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE
00011b8c g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E
0001a584 g     F .text	00000060 hal_spi_init
00008164  w    F .text	00000002 RNG_IRQHandler
0001d0f0 g     F .text	00000010 sensor_mgr_unlock
2000df80 g     O .bss	00000004 flash_map_entries
00019136 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17hb1f1dec5462292d8E
0001717a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E
00014fee g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE
0001d940 g     F .text	00000002 oc_register_serial
00008178 g     F .text	0000000c hal_system_init
00015528 g     F .text	00000010 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E
0000a804 g     F .text	00000396 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E
00014656 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE
0001126e g     F .text	00000112 _ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E
00014cd0 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E
00008164  w    F .text	00000002 GPIOTE_IRQHandler
0001212c g     F .text	000000aa _ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001dc98 g     F .text	00000012 mfg_seek_next
000152e0 g     F .text	0000004a _ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E
00015598 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E
00012432 g     F .text	00000008 _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE
00014cfa g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE
2000011c g     O .data	00000008 g_os_sleep_list
00018188 g     F .text	0000025c _ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E
0000cfa8 g     F .text	0000013c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E
000175b0 g     F .text	00000058 _ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE
0001b062 g     F .text	0000000a os_mbuf_pool_init
2000de90 g     O .bss	00000008 g_callout_list
0001b7f4 g     F .text	0000000c os_sched_set_current_task
0000bd28 g     F .text	000001f6 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E
0001ac2c g     F .text	0000005c os_callout_tick
00017608 g     F .text	00000042 _ZN4core3ptr4read17h38cf3848f1a0f2ccE
00009102 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE
00012094 g     F .text	0000007c _ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E
00017422 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E
0001a7cc g     F .text	00000078 hal_watchdog_init
2000deb4 g     O .bss	00000001 g_task_id
0001951a g     F .text	0000007a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E
0000a7c0 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17hef1277471241eea2E
0000adda g     F .text	00000024 .hidden _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E
0001ae04 g     F .text	00000044 os_dev_open
2000deb0 g     O .bss	00000004 g_current_task
00017798 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE
20000148 g       .bss	00000000 __bss_start__
000170ec g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E
00008b60 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE
0000d2e8 g     F .text	00003b40 _ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E
0001a288 g     F .text	00000018 nrf52_spi0_irq_handler
0001d1ac g     F .text	00000008 sensor_pkg_init
00016d0c g     F .text	0000002a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE
0001d7c0 g     F .text	00000028 temp_stub_config
000115ba g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h977bf45075800c77E
0001b024 g     F .text	0000003e os_mqueue_put
00019758 g     F .text	000000e4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE
0001a610 g     F .text	000000ac hal_spi_txrx
00008164  w    F .text	00000002 RTC2_IRQHandler
0001b7e8 g     F .text	0000000c os_sched_get_current_task
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
000126a4 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E
0001dabc g     F .text	00000002 modlog_init
00014f78 g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E
00015f38 g     F .text	0000003e _ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE
0001a6bc g     F .text	000000e0 hal_spi_txrx_noblock
00017944 g     F .text	00000038 _ZN4core6option13expect_failed17had6579abaad447b4E
0001872a g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE
0000907c g     F .text	0000000a _ZN6mynewt3sys7console5flush17h78b2f38352f0d691E
00008164  w    F .text	00000002 TEMP_IRQHandler
00008ece g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE
0001b7b8 g     F .text	00000030 os_sched_ctx_sw_hook
0001d24c g     F .text	0000002e sensor_mgr_register
0001797c g     F .text	0000004a _ZN4core6option18expect_none_failed17h54d938081af97677E
00017fc8 g     F .text	000001c0 _ZN4core3fmt5write17hd95ac78ed22a2252E
0000d0e4 g     F .text	00000008 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcdf096192109e52aE
00008154  w    F .text	00000002 NMI_Handler
000145be g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE
0000917e g     F .text	0000008a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE
000174e6 g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E
00008d4c g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E
00011e2e g     F .text	0000000c _ZN4core3ptr5write17h4a80332de2cee3d3E
00016b90 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E
0001b06c g     F .text	00000032 os_mbuf_get
2000deb8 g     O .bss	00000008 g_os_task_list
00008928 g     F .text	0000014c _ZN6mynewt4Strn8validate17h1102378208cc75cdE
00017c92 g     F .text	000000d2 _ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E
0001c64c g     F .text	0000003a vsnprintf
00013494 g     F .text	00000090 _ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E
0000ce42 g     F .text	00000060 _ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E
0001b4e0 g     F .text	000000b8 os_mutex_release
0001243a g     F .text	00000056 _ZN3log6logger17hf609e7cc1c031552E
000121ee g     F .text	0000004e _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E
0001d100 g     F .text	0000000c sensor_mgr_evq_get
0000d11a g     F .text	0000001c _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf3cc102ec961f44aE
000169b8 g     F .text	00000058 _ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E
00011f90 g     F .text	00000018 _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E
0001510a g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE
2000de8c g     O .bss	00000004 g_os_idle_ctr
00011404 g     F .text	00000014 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h81f0567d2baa3411E
00019c50 g     F .text	0000002c hal_gpio_init_in
00011f2c g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE
0000990e g     F .text	00000036 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E
00008164  w    F .text	00000002 TIMER1_IRQHandler
00010ee6 g     F .text	00000026 _ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE
0001cf0c g     F .text	00000002 sensor_dev_create
00011a9e g     F .text	0000008e _ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE
00010e70 g     F .text	00000076 _ZN8libchip814Chip8$LT$T$GT$4load17h41409d517e122012E
0001100a g     F .text	00000106 _ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E
00008164  w    F .text	00000002 TIMER0_IRQHandler
000088dc g     F .text	00000010 _ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE
00019c7c g     F .text	00000038 hal_gpio_init_out
00008d6e g     F .text	00000160 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE
00011bc0 g     F .text	00000012 _ZN4core3mem4swap17hc4afbec7b5ffb125E
0001741a g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E
0001612a g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E
00010e60 g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$4jump17h98fcf36ccb52be45E
00016ad0 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E
00009402 g     F .text	0000003e .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE
200000d8 g       .data	00000000 __data_start__
0001bca4 g     F .text	0000000c os_time_get
000179cc g     F .text	00000008 _ZN4core5panic8Location4file17h61e77cb122865fdbE
0000a678 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E
0001b35c g     F .text	00000026 os_memblock_put
00013524 g     F .text	00000128 _ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE
0001b800 g     F .text	00000090 os_sched_sleep
00011f6a g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE
0001d0d4 g     F .text	0000001c sensor_mgr_lock
0001dea8 g     F .text	000002cc .hidden __udivmoddi4
0001162a g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E
0001ca84 g     F .text	000000a0 os_tick_init
0001482e g     F .text	00000052 _ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E
000179c6 g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E
00008164  w    F .text	00000002 RTC0_IRQHandler
00008ff0 g     F .text	00000044 _ZN6mynewt3sys7console5print17hc13a6743274d87fcE
0001b944 g     F .text	00000040 os_sched_wakeup_ticks
0000933e g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE
0001ce58 g     F .text	00000030 hal_timer_read
20000144 g       .data	00000000 __data_end__
00019d84 g     F .text	00000028 hal_gpio_irq_enable
0001d89c g     F .text	0000000c oc_evq_set
0001d41c g     F .text	00000018 is_sensor_node
00019136 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE
0001d914 g     F .text	00000024 oc_init
0001936e g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h54b904d9d5d295daE
0001936e g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h85ec06f2c95e1ecaE
0000971c g     F .text	000000bc _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE
00018906 g     F .text	0000034c _ZN4core3str16slice_error_fail17h232f9181d55b3da9E
000171da g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E
2000df48 g     O .bss	00000018 sensor_base_ts
00019664 g     F .text	000000f4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E
00016ec8 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E
0002253c g       .ARM.exidx	00000000 __etext
000115e2 g     F .text	00000012 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE
000191f2 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E
00019b20 g     F .text	0000000c console_get_ticks
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
00009034 g     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E
0000d136 g     F .text	00000108 _ZN8libchip814Chip8$LT$T$GT$3new17h327c7b1fc19df648E
20000108 g     O .data	00000004 hal_twi_i2c1
00014dec g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E
0001bb24 g     F .text	000000d8 os_task_init
000162da g     F .text	0000000a _ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E
00008f68 g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E
00011b72 g     F .text	0000001a _ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE
00011f5a g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E
00017528 g     F .text	00000042 _ZN4core3ptr4read17h27a035d1812d8297E
0001738a g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E
0001b9f0 g     F .text	00000064 os_sem_release
0001e184 g     F .text	0000009a __aeabi_memset
0001b1c8 g     F .text	000000b8 os_mbuf_dup
0001bf88 g     F .text	00000046 PendSV_Handler
0001285c g     F .text	00000014 _ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E
0001bf42 g     F .text	00000046 SVC_Handler
00008826 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17he6c5bffce3c304d4E
0001bd94 g     F .text	0000000c os_arch_save_sr
00014a46 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E
00008164  w    F .text	00000002 PWM2_IRQHandler
0000815c  w    F .text	00000002 UsageFault_Handler
0001ccf0 g     F .text	00000010 nrf52_timer0_irq_handler
0001bdb0 g     F .text	00000040 os_arch_task_stack_init
2000df88 g       .bss	00000000 __bss_end__
00016c60 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E
0001b30c g     F .text	00000032 os_memblock_get
2000df84 g     O .bss	00000004 flash_map
00008164  w    F .text	00000002 RADIO_IRQHandler
00011c8a g     F .text	00000056 _ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE
00008164  w    F .text	00000002 TIMER2_IRQHandler
000116fe g     F .text	000000c4 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E
0001a854 g     F .text	00000014 hal_watchdog_tickle
0000a70c g     F .text	00000010 _ZN4core3ptr13drop_in_place17h0697ea54608a328fE
00015538 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE
0001af12 g     F .text	0000007a os_eventq_get
0001de58 g     F .text	00000020 sprintf
0000d0ec g     F .text	0000001a _ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE
0001bd50 g     F .text	00000026 os_time_ms_to_ticks
000088ec g     F .text	0000003c _ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E
0001741e g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E
0000ac36 g     F .text	00000036 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE
2000d9e8 g     O .bss	00000004 os_flags
0001d944 g     F .text	00000028 oc_rep_init
0001c054 g     F .text	0000001a memcpy
0001c738 g     F .text	00000044 sysinit_app
00016060 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE
0001149a g     F .text	0000000e _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6ed52dfe9f180960E
000121d6 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E
000171aa g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E
00019594 g     F .text	000000d0 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E
00014106 g     F .text	0000036c _ZN6mynewt3hal3SPI4init17h97467ea724680fb5E
00012756 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE
00019a24 g     F .text	0000003c console_out_nolock
2000df60 g     O .bss	00000020 oc_transports
00019d0c g     F .text	00000078 hal_gpio_irq_init
00014b50 g     F .text	00000020 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE
0001c0c2 g     F .text	00000010 strlen
0001ba54 g     F .text	000000b8 os_sem_pend
000117de g     F .text	00000016 _ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE
0001c9ec g     F .text	00000098 os_tick_idle
0001279c g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E
00016b26 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00000000 g       .svc_table	00000000 SVC_Table
000128e6 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE
00016046 g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E
2000fe50 g       *ABS*	00000000 __HeapLimit
0001ab24 g     F .text	00000038 os_pkg_init
20000144 g       .bssnz	00000000 __bssnz_start__
000093ae g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17had883e363867a05eE
000114d4 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h53e4f1f46625fe50E
00011b2c g     F .text	00000012 _ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E
0000a6cc g     F .text	0000001a .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E
0001532a g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE
00008164  w    F .text	00000002 ECB_IRQHandler
00014472 g     F .text	00000004 _ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E
00016cd4 g     F .text	00000018 .hidden _ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E
00008158  w    F .text	00000002 MemoryManagement_Handler
0001936e g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hc11e05ad6528dc14E
000146f0 g     F .text	000000ba _ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE
0001aeaa g     F .text	00000068 os_eventq_put
20010000 g       .bss	00000000 __StackTop
000150b8 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E
00009944 g     F .text	0000003c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E
000119a8 g     F .text	00000012 _ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE
00014fca g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE
0001dcce g     F .text	0000000a mfg_read_tlv_mmr_ref
00008b48 g     F .text	00000018 _ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E
0001d4dc g     F .text	000000c0 sensor_network_init
0001936e g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE
00016dac g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE
00008bf4 g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE
000127e4 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0001bf43 	.word	0x0001bf43
	...
    8058:	0001bf89 	.word	0x0001bf89
    805c:	0001bfcf 	.word	0x0001bfcf
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f826 	bl	8178 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20000148 	.word	0x20000148
    ldr     r3, =__bss_end__
    8134:	2000df88 	.word	0x2000df88
    ldr    r1, =__etext
    8138:	0002253c 	.word	0x0002253c
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	20000144 	.word	0x20000144
    LDR     R0, =__HeapBase
    8144:	2000df88 	.word	0x2000df88
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	0000842d 	.word	0x0000842d
    LDR     R0, =_start
    8150:	00008601 	.word	0x00008601

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    8178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    817c:	2201      	movs	r2, #1
    817e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    8182:	4770      	bx	lr

00008184 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <hal_debugger_connected+0xc>)
    8186:	6818      	ldr	r0, [r3, #0]
}
    8188:	f000 0001 	and.w	r0, r0, #1
    818c:	4770      	bx	lr
    818e:	bf00      	nop
    8190:	e000edf0 	.word	0xe000edf0

00008194 <hal_system_reset>:
{
    8194:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    8196:	f7ff fff5 	bl	8184 <hal_debugger_connected>
    819a:	b100      	cbz	r0, 819e <hal_system_reset+0xa>
            asm("bkpt");
    819c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    819e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81a2:	4905      	ldr	r1, [pc, #20]	; (81b8 <hal_system_reset+0x24>)
    81a4:	68ca      	ldr	r2, [r1, #12]
    81a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81aa:	4b04      	ldr	r3, [pc, #16]	; (81bc <hal_system_reset+0x28>)
    81ac:	4313      	orrs	r3, r2
    81ae:	60cb      	str	r3, [r1, #12]
    81b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81b4:	bf00      	nop
    81b6:	e7fd      	b.n	81b4 <hal_system_reset+0x20>
    81b8:	e000ed00 	.word	0xe000ed00
    81bc:	05fa0004 	.word	0x05fa0004

000081c0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <hal_system_clock_start+0x48>)
    81ca:	4013      	ands	r3, r2
    81cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    81d0:	d018      	beq.n	8204 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81d6:	2201      	movs	r2, #1
    81d8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    81da:	2100      	movs	r1, #0
    81dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    81e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    81e4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    81e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    81ee:	2b00      	cmp	r3, #0
    81f0:	d0f9      	beq.n	81e6 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    81f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81fa:	4b03      	ldr	r3, [pc, #12]	; (8208 <hal_system_clock_start+0x48>)
    81fc:	4013      	ands	r3, r2
    81fe:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    8202:	d1f0      	bne.n	81e6 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8204:	4770      	bx	lr
    8206:	bf00      	nop
    8208:	00010003 	.word	0x00010003

0000820c <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    820c:	4b0b      	ldr	r3, [pc, #44]	; (823c <errata_16+0x30>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	2b06      	cmp	r3, #6
    8212:	d001      	beq.n	8218 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8214:	2000      	movs	r0, #0
    8216:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8218:	4b09      	ldr	r3, [pc, #36]	; (8240 <errata_16+0x34>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	f013 0f0f 	tst.w	r3, #15
    8220:	d107      	bne.n	8232 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8222:	4b08      	ldr	r3, [pc, #32]	; (8244 <errata_16+0x38>)
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    822a:	2b30      	cmp	r3, #48	; 0x30
    822c:	d003      	beq.n	8236 <errata_16+0x2a>
    return false;
    822e:	2000      	movs	r0, #0
    8230:	4770      	bx	lr
    8232:	2000      	movs	r0, #0
    8234:	4770      	bx	lr
            return true;
    8236:	2001      	movs	r0, #1
}
    8238:	4770      	bx	lr
    823a:	bf00      	nop
    823c:	f0000fe0 	.word	0xf0000fe0
    8240:	f0000fe4 	.word	0xf0000fe4
    8244:	f0000fe8 	.word	0xf0000fe8

00008248 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0f      	ldr	r3, [pc, #60]	; (8288 <errata_31+0x40>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b0d      	ldr	r3, [pc, #52]	; (828c <errata_31+0x44>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d10b      	bne.n	8276 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b0c      	ldr	r3, [pc, #48]	; (8290 <errata_31+0x48>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d007      	beq.n	827a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    826a:	2b40      	cmp	r3, #64	; 0x40
    826c:	d007      	beq.n	827e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    826e:	2b50      	cmp	r3, #80	; 0x50
    8270:	d007      	beq.n	8282 <errata_31+0x3a>
    return false;
    8272:	2000      	movs	r0, #0
    8274:	4770      	bx	lr
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
            return true;
    827a:	2001      	movs	r0, #1
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
    8280:	4770      	bx	lr
            return true;
    8282:	2001      	movs	r0, #1
}
    8284:	4770      	bx	lr
    8286:	bf00      	nop
    8288:	f0000fe0 	.word	0xf0000fe0
    828c:	f0000fe4 	.word	0xf0000fe4
    8290:	f0000fe8 	.word	0xf0000fe8

00008294 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8294:	4b0b      	ldr	r3, [pc, #44]	; (82c4 <errata_32+0x30>)
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b06      	cmp	r3, #6
    829a:	d001      	beq.n	82a0 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    829c:	2000      	movs	r0, #0
    829e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82a0:	4b09      	ldr	r3, [pc, #36]	; (82c8 <errata_32+0x34>)
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	f013 0f0f 	tst.w	r3, #15
    82a8:	d107      	bne.n	82ba <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82aa:	4b08      	ldr	r3, [pc, #32]	; (82cc <errata_32+0x38>)
    82ac:	681b      	ldr	r3, [r3, #0]
    82ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82b2:	2b30      	cmp	r3, #48	; 0x30
    82b4:	d003      	beq.n	82be <errata_32+0x2a>
    return false;
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
    82ba:	2000      	movs	r0, #0
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0f      	ldr	r3, [pc, #60]	; (8310 <errata_36+0x40>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b0d      	ldr	r3, [pc, #52]	; (8314 <errata_36+0x44>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d10b      	bne.n	82fe <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b0c      	ldr	r3, [pc, #48]	; (8318 <errata_36+0x48>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d007      	beq.n	8302 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82f2:	2b40      	cmp	r3, #64	; 0x40
    82f4:	d007      	beq.n	8306 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82f6:	2b50      	cmp	r3, #80	; 0x50
    82f8:	d007      	beq.n	830a <errata_36+0x3a>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
    8304:	4770      	bx	lr
            return true;
    8306:	2001      	movs	r0, #1
    8308:	4770      	bx	lr
            return true;
    830a:	2001      	movs	r0, #1
}
    830c:	4770      	bx	lr
    830e:	bf00      	nop
    8310:	f0000fe0 	.word	0xf0000fe0
    8314:	f0000fe4 	.word	0xf0000fe4
    8318:	f0000fe8 	.word	0xf0000fe8

0000831c <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    831c:	4b0b      	ldr	r3, [pc, #44]	; (834c <errata_37+0x30>)
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	2b06      	cmp	r3, #6
    8322:	d001      	beq.n	8328 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8324:	2000      	movs	r0, #0
    8326:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <errata_37+0x34>)
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	f013 0f0f 	tst.w	r3, #15
    8330:	d107      	bne.n	8342 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8332:	4b08      	ldr	r3, [pc, #32]	; (8354 <errata_37+0x38>)
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    833a:	2b30      	cmp	r3, #48	; 0x30
    833c:	d003      	beq.n	8346 <errata_37+0x2a>
    return false;
    833e:	2000      	movs	r0, #0
    8340:	4770      	bx	lr
    8342:	2000      	movs	r0, #0
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_57+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_57+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_57+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_57+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_66+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_66+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_66+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b50      	cmp	r3, #80	; 0x50
    83b4:	d003      	beq.n	83be <errata_66+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0f      	ldr	r3, [pc, #60]	; (8410 <errata_108+0x40>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b0d      	ldr	r3, [pc, #52]	; (8414 <errata_108+0x44>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d10b      	bne.n	83fe <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83e6:	4b0c      	ldr	r3, [pc, #48]	; (8418 <errata_108+0x48>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b30      	cmp	r3, #48	; 0x30
    83f0:	d007      	beq.n	8402 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    83f2:	2b40      	cmp	r3, #64	; 0x40
    83f4:	d007      	beq.n	8406 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83f6:	2b50      	cmp	r3, #80	; 0x50
    83f8:	d007      	beq.n	840a <errata_108+0x3a>
    return false;
    83fa:	2000      	movs	r0, #0
    83fc:	4770      	bx	lr
    83fe:	2000      	movs	r0, #0
    8400:	4770      	bx	lr
            return true;
    8402:	2001      	movs	r0, #1
    8404:	4770      	bx	lr
            return true;
    8406:	2001      	movs	r0, #1
    8408:	4770      	bx	lr
            return true;
    840a:	2001      	movs	r0, #1
}
    840c:	4770      	bx	lr
    840e:	bf00      	nop
    8410:	f0000fe0 	.word	0xf0000fe0
    8414:	f0000fe4 	.word	0xf0000fe4
    8418:	f0000fe8 	.word	0xf0000fe8

0000841c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    841c:	4b01      	ldr	r3, [pc, #4]	; (8424 <SystemCoreClockUpdate+0x8>)
    841e:	4a02      	ldr	r2, [pc, #8]	; (8428 <SystemCoreClockUpdate+0xc>)
    8420:	601a      	str	r2, [r3, #0]
}
    8422:	4770      	bx	lr
    8424:	200000e4 	.word	0x200000e4
    8428:	03d09000 	.word	0x03d09000

0000842c <SystemInit>:
{
    842c:	b508      	push	{r3, lr}
    if (errata_16()){
    842e:	f7ff feed 	bl	820c <errata_16>
    8432:	b110      	cbz	r0, 843a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8434:	4b65      	ldr	r3, [pc, #404]	; (85cc <SystemInit+0x1a0>)
    8436:	4a66      	ldr	r2, [pc, #408]	; (85d0 <SystemInit+0x1a4>)
    8438:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    843a:	f7ff ff05 	bl	8248 <errata_31>
    843e:	b128      	cbz	r0, 844c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    8440:	4b64      	ldr	r3, [pc, #400]	; (85d4 <SystemInit+0x1a8>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8448:	4a63      	ldr	r2, [pc, #396]	; (85d8 <SystemInit+0x1ac>)
    844a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    844c:	f7ff ff22 	bl	8294 <errata_32>
    8450:	b120      	cbz	r0, 845c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8452:	4a62      	ldr	r2, [pc, #392]	; (85dc <SystemInit+0x1b0>)
    8454:	68d3      	ldr	r3, [r2, #12]
    8456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    845a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    845c:	f7ff ff38 	bl	82d0 <errata_36>
    8460:	b140      	cbz	r0, 8474 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    8462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8466:	2200      	movs	r2, #0
    8468:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    846c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    8470:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    8474:	f7ff ff52 	bl	831c <errata_37>
    8478:	b110      	cbz	r0, 8480 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    847a:	4b59      	ldr	r3, [pc, #356]	; (85e0 <SystemInit+0x1b4>)
    847c:	2203      	movs	r2, #3
    847e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    8480:	f7ff ff6a 	bl	8358 <errata_57>
    8484:	b158      	cbz	r0, 849e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    8486:	4b57      	ldr	r3, [pc, #348]	; (85e4 <SystemInit+0x1b8>)
    8488:	2205      	movs	r2, #5
    848a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    848c:	3378      	adds	r3, #120	; 0x78
    848e:	2201      	movs	r2, #1
    8490:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8492:	3b70      	subs	r3, #112	; 0x70
    8494:	2200      	movs	r2, #0
    8496:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8498:	3b04      	subs	r3, #4
    849a:	223f      	movs	r2, #63	; 0x3f
    849c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    849e:	f7ff ff79 	bl	8394 <errata_66>
    84a2:	2800      	cmp	r0, #0
    84a4:	d046      	beq.n	8534 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ae:	4b4e      	ldr	r3, [pc, #312]	; (85e8 <SystemInit+0x1bc>)
    84b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    84c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    84c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    84cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    84d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    84d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    84dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    84e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    84e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    84e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    84ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    84f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    84f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    84f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    84fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8500:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8504:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8508:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    850c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8510:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8514:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8518:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    851c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8520:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8524:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8528:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    852c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8530:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8534:	f7ff ff4c 	bl	83d0 <errata_108>
    8538:	b128      	cbz	r0, 8546 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    853a:	4b2c      	ldr	r3, [pc, #176]	; (85ec <SystemInit+0x1c0>)
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8542:	4a2b      	ldr	r2, [pc, #172]	; (85f0 <SystemInit+0x1c4>)
    8544:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8546:	4a2b      	ldr	r2, [pc, #172]	; (85f4 <SystemInit+0x1c8>)
    8548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    854c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8558:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    855c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8560:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    8564:	f013 0f01 	tst.w	r3, #1
    8568:	d104      	bne.n	8574 <SystemInit+0x148>
    SystemCoreClockUpdate();
    856a:	f7ff ff57 	bl	841c <SystemCoreClockUpdate>
    NVIC_Relocate();
    856e:	f011 faed 	bl	19b4c <NVIC_Relocate>
}
    8572:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8574:	4b20      	ldr	r3, [pc, #128]	; (85f8 <SystemInit+0x1cc>)
    8576:	2201      	movs	r2, #1
    8578:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    857c:	4b1e      	ldr	r3, [pc, #120]	; (85f8 <SystemInit+0x1cc>)
    857e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8582:	2b00      	cmp	r3, #0
    8584:	d0fa      	beq.n	857c <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8586:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    858a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    858e:	f023 0301 	bic.w	r3, r3, #1
    8592:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8596:	4b18      	ldr	r3, [pc, #96]	; (85f8 <SystemInit+0x1cc>)
    8598:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    859c:	2b00      	cmp	r3, #0
    859e:	d0fa      	beq.n	8596 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85a0:	4b15      	ldr	r3, [pc, #84]	; (85f8 <SystemInit+0x1cc>)
    85a2:	2200      	movs	r2, #0
    85a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85a8:	4b13      	ldr	r3, [pc, #76]	; (85f8 <SystemInit+0x1cc>)
    85aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ae:	2b00      	cmp	r3, #0
    85b0:	d0fa      	beq.n	85a8 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85b2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85b6:	490f      	ldr	r1, [pc, #60]	; (85f4 <SystemInit+0x1c8>)
    85b8:	68ca      	ldr	r2, [r1, #12]
    85ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85be:	4b0f      	ldr	r3, [pc, #60]	; (85fc <SystemInit+0x1d0>)
    85c0:	4313      	orrs	r3, r2
    85c2:	60cb      	str	r3, [r1, #12]
    85c4:	f3bf 8f4f 	dsb	sy
    __NOP();
    85c8:	bf00      	nop
    85ca:	e7fd      	b.n	85c8 <SystemInit+0x19c>
    85cc:	4007c074 	.word	0x4007c074
    85d0:	baadf00d 	.word	0xbaadf00d
    85d4:	10000244 	.word	0x10000244
    85d8:	4000053c 	.word	0x4000053c
    85dc:	e000edf0 	.word	0xe000edf0
    85e0:	400005a0 	.word	0x400005a0
    85e4:	40005610 	.word	0x40005610
    85e8:	4000c000 	.word	0x4000c000
    85ec:	10000258 	.word	0x10000258
    85f0:	40000ee4 	.word	0x40000ee4
    85f4:	e000ed00 	.word	0xe000ed00
    85f8:	4001e000 	.word	0x4001e000
    85fc:	05fa0004 	.word	0x05fa0004

00008600 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8600:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8602:	4803      	ldr	r0, [pc, #12]	; (8610 <_start+0x10>)
    8604:	f012 fa28 	bl	1aa58 <os_init>
    os_start();
    8608:	f012 fa7e 	bl	1ab08 <os_start>
#endif
}
    860c:	bd08      	pop	{r3, pc}
    860e:	bf00      	nop
    8610:	00008617 	.word	0x00008617

00008614 <_init>:

void
_init(void)
{
}
    8614:	4770      	bx	lr

00008616 <main>:
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8616:	b088      	sub	sp, #32
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8618:	f000 f960 	bl	88dc <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>
    861c:	e7ff      	b.n	861e <main+0x8>
    //  extern { fn start_ble() -> i32; }
    //  let rc = unsafe { start_ble() };
    //  assert!(rc == 0, "BLE fail");

    //  Start the display
    druid::start_display()
    861e:	f000 ff31 	bl	9484 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>
    8622:	9005      	str	r0, [sp, #20]
    8624:	e7ff      	b.n	8626 <main+0x10>
    8626:	f24e 211e 	movw	r1, #57886	; 0xe21e
    862a:	f2c0 0101 	movt	r1, #1
    862e:	f24e 2354 	movw	r3, #57940	; 0xe254
    8632:	f2c0 0301 	movt	r3, #1
    8636:	2208      	movs	r2, #8
    8638:	9805      	ldr	r0, [sp, #20]
    863a:	f000 fa5e 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    863e:	e7ff      	b.n	8640 <main+0x2a>
    #[cfg(feature = "display_app")]  //  If graphics display app is enabled...
    display::test_display()
        .expect("DSP test fail");

    //  Start the touch sensor
    touch_sensor::start_touch_sensor()
    8640:	f002 fbdd 	bl	adfe <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E>
    8644:	9004      	str	r0, [sp, #16]
    8646:	e7ff      	b.n	8648 <main+0x32>
    8648:	f24e 2126 	movw	r1, #57894	; 0xe226
    864c:	f2c0 0101 	movt	r1, #1
    8650:	f24e 2364 	movw	r3, #57956	; 0xe264
    8654:	f2c0 0301 	movt	r3, #1
    8658:	2208      	movs	r2, #8
    865a:	9804      	ldr	r0, [sp, #16]
    865c:	f000 fa4d 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8660:	e7ff      	b.n	8662 <main+0x4c>
    visual::on_start()
        .expect("VIS fail");

    //  Launch the CHIP8 Emulator app
    #[cfg(feature = "chip8_app")]  //  If CHIP8 Emulator app is enabled...
    chip8::on_start()
    8662:	f003 fa3d 	bl	bae0 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E>
    8666:	9003      	str	r0, [sp, #12]
    8668:	e7ff      	b.n	866a <main+0x54>
    866a:	f24e 2174 	movw	r1, #57972	; 0xe274
    866e:	f2c0 0101 	movt	r1, #1
    8672:	f24e 2380 	movw	r3, #57984	; 0xe280
    8676:	f2c0 0301 	movt	r3, #1
    867a:	220a      	movs	r2, #10
    867c:	9803      	ldr	r0, [sp, #12]
    867e:	f000 fa3c 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8682:	e7ff      	b.n	8684 <main+0x6e>
        .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
    8684:	e7ff      	b.n	8686 <main+0x70>
    8686:	a806      	add	r0, sp, #24
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8688:	f000 faf2 	bl	8c70 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    868c:	e7ff      	b.n	868e <main+0x78>
    868e:	f24e 212e 	movw	r1, #57902	; 0xe22e
    8692:	f2c0 0101 	movt	r1, #1
    8696:	f24e 2390 	movw	r3, #58000	; 0xe290
    869a:	f2c0 0301 	movt	r3, #1
    869e:	a806      	add	r0, sp, #24
    86a0:	2208      	movs	r2, #8
    86a2:	f000 f896 	bl	87d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>
    86a6:	9002      	str	r0, [sp, #8]
    86a8:	e7ff      	b.n	86aa <main+0x94>
        os::eventq_run(               //  Processing events...
    86aa:	9802      	ldr	r0, [sp, #8]
    86ac:	f000 fad7 	bl	8c5e <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    86b0:	9001      	str	r0, [sp, #4]
    86b2:	e7ff      	b.n	86b4 <main+0x9e>
    86b4:	f24e 2136 	movw	r1, #57910	; 0xe236
    86b8:	f2c0 0101 	movt	r1, #1
    86bc:	f24e 23a0 	movw	r3, #58016	; 0xe2a0
    86c0:	f2c0 0301 	movt	r3, #1
    86c4:	2208      	movs	r2, #8
    86c6:	9801      	ldr	r0, [sp, #4]
    86c8:	f000 fa17 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    86cc:	e7ff      	b.n	86ce <main+0xb8>
    loop {                            //  Loop forever...
    86ce:	e7da      	b.n	8686 <main+0x70>

000086d0 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    86d0:	b08e      	sub	sp, #56	; 0x38
    86d2:	900b      	str	r0, [sp, #44]	; 0x2c
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    86d4:	f24e 21b0 	movw	r1, #58032	; 0xe2b0
    86d8:	f2c0 0101 	movt	r1, #1
    86dc:	2206      	movs	r2, #6
    86de:	9007      	str	r0, [sp, #28]
    86e0:	4608      	mov	r0, r1
    86e2:	4611      	mov	r1, r2
    86e4:	f000 fc84 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    86e8:	e7ff      	b.n	86ea <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
    86ea:	9807      	ldr	r0, [sp, #28]
    86ec:	f00f f96b 	bl	179c6 <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>
    86f0:	9008      	str	r0, [sp, #32]
    86f2:	e7ff      	b.n	86f4 <rust_begin_unwind+0x24>
    86f4:	9808      	ldr	r0, [sp, #32]
    86f6:	2800      	cmp	r0, #0
    86f8:	d108      	bne.n	870c <rust_begin_unwind+0x3c>
    86fa:	e7ff      	b.n	86fc <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    86fc:	f24e 20b6 	movw	r0, #58038	; 0xe2b6
    8700:	f2c0 0001 	movt	r0, #1
    8704:	2107      	movs	r1, #7
    8706:	f000 fc73 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    870a:	e033      	b.n	8774 <rust_begin_unwind+0xa4>
    if let Some(location) = info.location() {
    870c:	9808      	ldr	r0, [sp, #32]
    870e:	900c      	str	r0, [sp, #48]	; 0x30
        let file = location.file();
    8710:	9006      	str	r0, [sp, #24]
    8712:	f00f f95b 	bl	179cc <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8716:	910a      	str	r1, [sp, #40]	; 0x28
    8718:	9009      	str	r0, [sp, #36]	; 0x24
    871a:	e7ff      	b.n	871c <rust_begin_unwind+0x4c>
        let line = location.line();
    871c:	9806      	ldr	r0, [sp, #24]
    871e:	f00f f959 	bl	179d4 <_ZN4core5panic8Location4line17h650a566d9637c91dE>
    8722:	4601      	mov	r1, r0
    8724:	900d      	str	r0, [sp, #52]	; 0x34
    8726:	9105      	str	r1, [sp, #20]
    8728:	e7ff      	b.n	872a <rust_begin_unwind+0x5a>
        console::print("at ");       console::buffer(&file);
    872a:	f24e 20bd 	movw	r0, #58045	; 0xe2bd
    872e:	f2c0 0001 	movt	r0, #1
    8732:	2103      	movs	r1, #3
    8734:	f000 fc5c 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8738:	e7ff      	b.n	873a <rust_begin_unwind+0x6a>
    873a:	9809      	ldr	r0, [sp, #36]	; 0x24
    873c:	990a      	ldr	r1, [sp, #40]	; 0x28
    873e:	f000 fc7e 	bl	903e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>
    8742:	e7ff      	b.n	8744 <rust_begin_unwind+0x74>
        console::print(" line ");    console::printint(line as i32);
    8744:	f24e 20c0 	movw	r0, #58048	; 0xe2c0
    8748:	f2c0 0001 	movt	r0, #1
    874c:	2106      	movs	r1, #6
    874e:	f000 fc4f 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8752:	e7ff      	b.n	8754 <rust_begin_unwind+0x84>
    8754:	9805      	ldr	r0, [sp, #20]
    8756:	f000 fc89 	bl	906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    875a:	e7ff      	b.n	875c <rust_begin_unwind+0x8c>
        console::print("\n");        console::flush();
    875c:	f24e 20c6 	movw	r0, #58054	; 0xe2c6
    8760:	f2c0 0001 	movt	r0, #1
    8764:	2101      	movs	r1, #1
    8766:	f000 fc43 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    876a:	e7ff      	b.n	876c <rust_begin_unwind+0x9c>
    876c:	f000 fc86 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8770:	e7ff      	b.n	8772 <rust_begin_unwind+0xa2>
    if let Some(location) = info.location() {
    8772:	e003      	b.n	877c <rust_begin_unwind+0xac>
        console::print("no loc\n");  console::flush();
    8774:	f000 fc82 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8778:	e7ff      	b.n	877a <rust_begin_unwind+0xaa>
    if let Some(location) = info.location() {
    877a:	e7ff      	b.n	877c <rust_begin_unwind+0xac>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
    877c:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    877e:	e7ff      	b.n	8780 <rust_begin_unwind+0xb0>
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    8780:	9807      	ldr	r0, [sp, #28]
    8782:	f00f f923 	bl	179cc <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8786:	9004      	str	r0, [sp, #16]
    8788:	9103      	str	r1, [sp, #12]
    878a:	e7ff      	b.n	878c <rust_begin_unwind+0xbc>
    878c:	9804      	ldr	r0, [sp, #16]
    878e:	9903      	ldr	r1, [sp, #12]
    8790:	f000 f899 	bl	88c6 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE>
    8794:	9002      	str	r0, [sp, #8]
    8796:	e7ff      	b.n	8798 <rust_begin_unwind+0xc8>
    8798:	f24e 21c8 	movw	r1, #58056	; 0xe2c8
    879c:	f2c0 0101 	movt	r1, #1
    87a0:	9802      	ldr	r0, [sp, #8]
    87a2:	f004 fb1e 	bl	cde2 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E>
    87a6:	9001      	str	r0, [sp, #4]
    87a8:	e7ff      	b.n	87aa <rust_begin_unwind+0xda>
    87aa:	9801      	ldr	r0, [sp, #4]
    87ac:	6800      	ldr	r0, [r0, #0]
    87ae:	9901      	ldr	r1, [sp, #4]
    87b0:	6849      	ldr	r1, [r1, #4]
    87b2:	f000 fc1d 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87b6:	e7ff      	b.n	87b8 <rust_begin_unwind+0xe8>
    console::print("\n");  console::flush();
    87b8:	f24e 20c6 	movw	r0, #58054	; 0xe2c6
    87bc:	f2c0 0001 	movt	r0, #1
    87c0:	2101      	movs	r1, #1
    87c2:	f000 fc15 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87c6:	e7ff      	b.n	87c8 <rust_begin_unwind+0xf8>
    87c8:	f000 fc58 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    87cc:	e7ff      	b.n	87ce <rust_begin_unwind+0xfe>
    //  Loop forever so that device won't restart.
    loop {}
    87ce:	e7ff      	b.n	87d0 <rust_begin_unwind+0x100>
    87d0:	e7fe      	b.n	87d0 <rust_begin_unwind+0x100>

000087d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>:
    87d2:	b08a      	sub	sp, #40	; 0x28
    87d4:	9107      	str	r1, [sp, #28]
    87d6:	9208      	str	r2, [sp, #32]
    87d8:	f8d0 c000 	ldr.w	ip, [r0]
    87dc:	f1bc 0f00 	cmp.w	ip, #0
    87e0:	9305      	str	r3, [sp, #20]
    87e2:	9204      	str	r2, [sp, #16]
    87e4:	9103      	str	r1, [sp, #12]
    87e6:	9002      	str	r0, [sp, #8]
    87e8:	d011      	beq.n	880e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x3c>
    87ea:	e7ff      	b.n	87ec <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x1a>
    87ec:	9802      	ldr	r0, [sp, #8]
    87ee:	6841      	ldr	r1, [r0, #4]
    87f0:	9106      	str	r1, [sp, #24]
    87f2:	4669      	mov	r1, sp
    87f4:	9a05      	ldr	r2, [sp, #20]
    87f6:	600a      	str	r2, [r1, #0]
    87f8:	f24e 23d8 	movw	r3, #58072	; 0xe2d8
    87fc:	f2c0 0301 	movt	r3, #1
    8800:	aa06      	add	r2, sp, #24
    8802:	9803      	ldr	r0, [sp, #12]
    8804:	9904      	ldr	r1, [sp, #16]
    8806:	f00f f8b9 	bl	1797c <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    880a:	defe      	udf	#254	; 0xfe
    880c:	defe      	udf	#254	; 0xfe
    880e:	9802      	ldr	r0, [sp, #8]
    8810:	6841      	ldr	r1, [r0, #4]
    8812:	9109      	str	r1, [sp, #36]	; 0x24
    8814:	6802      	ldr	r2, [r0, #0]
    8816:	2a00      	cmp	r2, #0
    8818:	9101      	str	r1, [sp, #4]
    881a:	d103      	bne.n	8824 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x52>
    881c:	e7ff      	b.n	881e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x4c>
    881e:	9801      	ldr	r0, [sp, #4]
    8820:	b00a      	add	sp, #40	; 0x28
    8822:	4770      	bx	lr
    8824:	e7fb      	b.n	881e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x4c>

00008826 <_ZN4core3ptr13drop_in_place17he6c5bffce3c304d4E>:
    8826:	b081      	sub	sp, #4
    8828:	9000      	str	r0, [sp, #0]
    882a:	b001      	add	sp, #4
    882c:	4770      	bx	lr

0000882e <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E>:
    882e:	b580      	push	{r7, lr}
    8830:	b086      	sub	sp, #24
    8832:	9004      	str	r0, [sp, #16]
    8834:	9105      	str	r1, [sp, #20]
    8836:	9002      	str	r0, [sp, #8]
    8838:	f000 f810 	bl	885c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE>
    883c:	9001      	str	r0, [sp, #4]
    883e:	e7ff      	b.n	8840 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x12>
    8840:	9801      	ldr	r0, [sp, #4]
    8842:	07c1      	lsls	r1, r0, #31
    8844:	2900      	cmp	r1, #0
    8846:	d103      	bne.n	8850 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x22>
    8848:	e7ff      	b.n	884a <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x1c>
    884a:	2000      	movs	r0, #0
    884c:	9003      	str	r0, [sp, #12]
    884e:	e002      	b.n	8856 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x28>
    8850:	9802      	ldr	r0, [sp, #8]
    8852:	9003      	str	r0, [sp, #12]
    8854:	e7ff      	b.n	8856 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x28>
    8856:	9803      	ldr	r0, [sp, #12]
    8858:	b006      	add	sp, #24
    885a:	bd80      	pop	{r7, pc}

0000885c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE>:
    885c:	b580      	push	{r7, lr}
    885e:	b08a      	sub	sp, #40	; 0x28
    8860:	9008      	str	r0, [sp, #32]
    8862:	9109      	str	r1, [sp, #36]	; 0x24
    8864:	9103      	str	r1, [sp, #12]
    8866:	9002      	str	r0, [sp, #8]
    8868:	f000 f815 	bl	8896 <_ZN4core3any6TypeId2of17haae5124a9f275cb8E>
    886c:	9105      	str	r1, [sp, #20]
    886e:	9004      	str	r0, [sp, #16]
    8870:	e7ff      	b.n	8872 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x16>
    8872:	9803      	ldr	r0, [sp, #12]
    8874:	68c1      	ldr	r1, [r0, #12]
    8876:	9802      	ldr	r0, [sp, #8]
    8878:	4788      	blx	r1
    887a:	9107      	str	r1, [sp, #28]
    887c:	9006      	str	r0, [sp, #24]
    887e:	e7ff      	b.n	8880 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x24>
    8880:	a804      	add	r0, sp, #16
    8882:	a906      	add	r1, sp, #24
    8884:	f002 faa9 	bl	adda <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E>
    8888:	9001      	str	r0, [sp, #4]
    888a:	e7ff      	b.n	888c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x30>
    888c:	9801      	ldr	r0, [sp, #4]
    888e:	f000 0001 	and.w	r0, r0, #1
    8892:	b00a      	add	sp, #40	; 0x28
    8894:	bd80      	pop	{r7, pc}

00008896 <_ZN4core3any6TypeId2of17haae5124a9f275cb8E>:
    8896:	b086      	sub	sp, #24
    8898:	f249 40d9 	movw	r0, #38105	; 0x94d9
    889c:	f2c1 1010 	movt	r0, #4368	; 0x1110
    88a0:	9005      	str	r0, [sp, #20]
    88a2:	f249 7064 	movw	r0, #38756	; 0x9764
    88a6:	f2c7 00b0 	movt	r0, #28848	; 0x70b0
    88aa:	9004      	str	r0, [sp, #16]
    88ac:	9804      	ldr	r0, [sp, #16]
    88ae:	9905      	ldr	r1, [sp, #20]
    88b0:	9001      	str	r0, [sp, #4]
    88b2:	9100      	str	r1, [sp, #0]
    88b4:	e7ff      	b.n	88b6 <_ZN4core3any6TypeId2of17haae5124a9f275cb8E+0x20>
    88b6:	9801      	ldr	r0, [sp, #4]
    88b8:	9002      	str	r0, [sp, #8]
    88ba:	9900      	ldr	r1, [sp, #0]
    88bc:	9103      	str	r1, [sp, #12]
    88be:	9802      	ldr	r0, [sp, #8]
    88c0:	9903      	ldr	r1, [sp, #12]
    88c2:	b006      	add	sp, #24
    88c4:	4770      	bx	lr

000088c6 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE>:
    88c6:	b580      	push	{r7, lr}
    88c8:	b084      	sub	sp, #16
    88ca:	9002      	str	r0, [sp, #8]
    88cc:	9103      	str	r1, [sp, #12]
    88ce:	f7ff ffae 	bl	882e <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E>
    88d2:	9001      	str	r0, [sp, #4]
    88d4:	e7ff      	b.n	88d6 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE+0x10>
    88d6:	9801      	ldr	r0, [sp, #4]
    88d8:	b004      	add	sp, #16
    88da:	bd80      	pop	{r7, pc}

000088dc <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>:
pub use hal::{ Delay, GPIO, SPI };  //  Export `hal` types GPIO and SPI

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    88dc:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
    88de:	f013 ff0b 	bl	1c6f8 <rust_sysinit>
    88e2:	e7ff      	b.n	88e4 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0x8>
    sys::console::flush();
    88e4:	f000 fbca 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    88e8:	e7ff      	b.n	88ea <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0xe>
}
    88ea:	bd80      	pop	{r7, pc}

000088ec <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>:
            rep: StrnRep::CStr(cstr)
        }
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
    88ec:	b580      	push	{r7, lr}
    88ee:	b086      	sub	sp, #24
    88f0:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    88f2:	7801      	ldrb	r1, [r0, #0]
    88f4:	07ca      	lsls	r2, r1, #31
    88f6:	2a00      	cmp	r2, #0
    88f8:	9000      	str	r0, [sp, #0]
    88fa:	d006      	beq.n	890a <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x1e>
    88fc:	e7ff      	b.n	88fe <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x12>
            StrnRep::CStr(cstr)  => { cstr }
    88fe:	9800      	ldr	r0, [sp, #0]
    8900:	6841      	ldr	r1, [r0, #4]
    8902:	9103      	str	r1, [sp, #12]
    8904:	9101      	str	r1, [sp, #4]
        match self.rep {
    8906:	e00c      	b.n	8922 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
    8908:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    890a:	9800      	ldr	r0, [sp, #0]
    890c:	6841      	ldr	r1, [r0, #4]
    890e:	6882      	ldr	r2, [r0, #8]
    8910:	9104      	str	r1, [sp, #16]
    8912:	9205      	str	r2, [sp, #20]
    8914:	4608      	mov	r0, r1
    8916:	4611      	mov	r1, r2
    8918:	f009 fb27 	bl	11f6a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    891c:	9001      	str	r0, [sp, #4]
    891e:	e7ff      	b.n	8920 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x34>
        match self.rep {
    8920:	e7ff      	b.n	8922 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
        }
    }
    8922:	9801      	ldr	r0, [sp, #4]
    8924:	b006      	add	sp, #24
    8926:	bd80      	pop	{r7, pc}

00008928 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
    8928:	b5b0      	push	{r4, r5, r7, lr}
    892a:	b0b2      	sub	sp, #200	; 0xc8
    892c:	9029      	str	r0, [sp, #164]	; 0xa4
        match self.rep {
            StrnRep::ByteStr(bs) => {         
    892e:	7801      	ldrb	r1, [r0, #0]
    8930:	07ca      	lsls	r2, r1, #31
    8932:	2a00      	cmp	r2, #0
    8934:	900e      	str	r0, [sp, #56]	; 0x38
    8936:	d005      	beq.n	8944 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x1c>
    8938:	e7ff      	b.n	893a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
    893a:	980e      	ldr	r0, [sp, #56]	; 0x38
    893c:	6841      	ldr	r1, [r0, #4]
    893e:	912a      	str	r1, [sp, #168]	; 0xa8
        match self.rep {
    8940:	e096      	b.n	8a70 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
    8942:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
    8944:	980e      	ldr	r0, [sp, #56]	; 0x38
    8946:	6841      	ldr	r1, [r0, #4]
    8948:	6882      	ldr	r2, [r0, #8]
    894a:	912b      	str	r1, [sp, #172]	; 0xac
    894c:	922c      	str	r2, [sp, #176]	; 0xb0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    894e:	4608      	mov	r0, r1
    8950:	4611      	mov	r1, r2
    8952:	f000 face 	bl	8ef2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>
    8956:	9011      	str	r0, [sp, #68]	; 0x44
    8958:	e7ff      	b.n	895a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x32>
    895a:	f24e 20f0 	movw	r0, #58096	; 0xe2f0
    895e:	f2c0 0001 	movt	r0, #1
    8962:	6800      	ldr	r0, [r0, #0]
    8964:	a911      	add	r1, sp, #68	; 0x44
    8966:	910f      	str	r1, [sp, #60]	; 0x3c
    8968:	9010      	str	r0, [sp, #64]	; 0x40
    896a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    896c:	902d      	str	r0, [sp, #180]	; 0xb4
    896e:	9910      	ldr	r1, [sp, #64]	; 0x40
    8970:	912e      	str	r1, [sp, #184]	; 0xb8
    8972:	900d      	str	r0, [sp, #52]	; 0x34
    8974:	910c      	str	r1, [sp, #48]	; 0x30
    8976:	f000 fc5a 	bl	922e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>
    897a:	900b      	str	r0, [sp, #44]	; 0x2c
    897c:	e7ff      	b.n	897e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x56>
    897e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8980:	07c1      	lsls	r1, r0, #31
    8982:	2900      	cmp	r1, #0
    8984:	d001      	beq.n	898a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x62>
    8986:	e7ff      	b.n	8988 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x60>
        }
    }
    8988:	e072      	b.n	8a70 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    898a:	f24e 3048 	movw	r0, #58184	; 0xe348
    898e:	f2c0 0001 	movt	r0, #1
    8992:	6801      	ldr	r1, [r0, #0]
    8994:	980d      	ldr	r0, [sp, #52]	; 0x34
    8996:	9021      	str	r0, [sp, #132]	; 0x84
    8998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    899a:	9222      	str	r2, [sp, #136]	; 0x88
    899c:	f24e 335c 	movw	r3, #58204	; 0xe35c
    89a0:	f2c0 0301 	movt	r3, #1
    89a4:	681b      	ldr	r3, [r3, #0]
    89a6:	f24e 3c60 	movw	ip, #58208	; 0xe360
    89aa:	f2c0 0c01 	movt	ip, #1
    89ae:	f8dc c000 	ldr.w	ip, [ip]
    89b2:	46ee      	mov	lr, sp
    89b4:	2400      	movs	r4, #0
    89b6:	f8ce 4000 	str.w	r4, [lr]
    89ba:	a823      	add	r0, sp, #140	; 0x8c
    89bc:	2201      	movs	r2, #1
    89be:	910a      	str	r1, [sp, #40]	; 0x28
    89c0:	4619      	mov	r1, r3
    89c2:	4663      	mov	r3, ip
    89c4:	f000 f86a 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    89c8:	e7ff      	b.n	89ca <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xa2>
    89ca:	a821      	add	r0, sp, #132	; 0x84
    89cc:	901e      	str	r0, [sp, #120]	; 0x78
    89ce:	a822      	add	r0, sp, #136	; 0x88
    89d0:	901f      	str	r0, [sp, #124]	; 0x7c
    89d2:	a823      	add	r0, sp, #140	; 0x8c
    89d4:	9020      	str	r0, [sp, #128]	; 0x80
    89d6:	981e      	ldr	r0, [sp, #120]	; 0x78
    89d8:	902f      	str	r0, [sp, #188]	; 0xbc
    89da:	991f      	ldr	r1, [sp, #124]	; 0x7c
    89dc:	9130      	str	r1, [sp, #192]	; 0xc0
    89de:	9a20      	ldr	r2, [sp, #128]	; 0x80
    89e0:	9231      	str	r2, [sp, #196]	; 0xc4
    89e2:	f249 03e7 	movw	r3, #37095	; 0x90e7
    89e6:	f2c0 0300 	movt	r3, #0
    89ea:	9109      	str	r1, [sp, #36]	; 0x24
    89ec:	4619      	mov	r1, r3
    89ee:	9208      	str	r2, [sp, #32]
    89f0:	f000 fcc8 	bl	9384 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    89f4:	9007      	str	r0, [sp, #28]
    89f6:	9106      	str	r1, [sp, #24]
    89f8:	e7ff      	b.n	89fa <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xd2>
    89fa:	f249 01e7 	movw	r1, #37095	; 0x90e7
    89fe:	f2c0 0100 	movt	r1, #0
    8a02:	9809      	ldr	r0, [sp, #36]	; 0x24
    8a04:	f000 fcbe 	bl	9384 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8a08:	9005      	str	r0, [sp, #20]
    8a0a:	9104      	str	r1, [sp, #16]
    8a0c:	e7ff      	b.n	8a0e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xe6>
    8a0e:	f647 71a7 	movw	r1, #32679	; 0x7fa7
    8a12:	f2c0 0101 	movt	r1, #1
    8a16:	9808      	ldr	r0, [sp, #32]
    8a18:	f000 fcde 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8a1c:	9003      	str	r0, [sp, #12]
    8a1e:	9102      	str	r1, [sp, #8]
    8a20:	e7ff      	b.n	8a22 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xfa>
    8a22:	9807      	ldr	r0, [sp, #28]
    8a24:	9018      	str	r0, [sp, #96]	; 0x60
    8a26:	9906      	ldr	r1, [sp, #24]
    8a28:	9119      	str	r1, [sp, #100]	; 0x64
    8a2a:	9a05      	ldr	r2, [sp, #20]
    8a2c:	921a      	str	r2, [sp, #104]	; 0x68
    8a2e:	9b04      	ldr	r3, [sp, #16]
    8a30:	931b      	str	r3, [sp, #108]	; 0x6c
    8a32:	f8dd c00c 	ldr.w	ip, [sp, #12]
    8a36:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    8a3a:	f8dd e008 	ldr.w	lr, [sp, #8]
    8a3e:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    8a42:	466c      	mov	r4, sp
    8a44:	2503      	movs	r5, #3
    8a46:	6025      	str	r5, [r4, #0]
    8a48:	a812      	add	r0, sp, #72	; 0x48
    8a4a:	ab18      	add	r3, sp, #96	; 0x60
    8a4c:	990a      	ldr	r1, [sp, #40]	; 0x28
    8a4e:	462a      	mov	r2, r5
    8a50:	f000 f824 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8a54:	e7ff      	b.n	8a56 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12e>
    8a56:	f24e 307c 	movw	r0, #58236	; 0xe37c
    8a5a:	f2c0 0001 	movt	r0, #1
    8a5e:	f00e ffb4 	bl	179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8a62:	9001      	str	r0, [sp, #4]
    8a64:	e7ff      	b.n	8a66 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x13e>
    8a66:	a812      	add	r0, sp, #72	; 0x48
    8a68:	9901      	ldr	r1, [sp, #4]
    8a6a:	f00e ffeb 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8a6e:	defe      	udf	#254	; 0xfe
    }
    8a70:	b032      	add	sp, #200	; 0xc8
    8a72:	bdb0      	pop	{r4, r5, r7, pc}

00008a74 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>:
        fn from(num: i32) -> Self {
    8a74:	b083      	sub	sp, #12
    8a76:	9001      	str	r0, [sp, #4]
                ::core::mem::transmute::
    8a78:	9002      	str	r0, [sp, #8]
    8a7a:	9802      	ldr	r0, [sp, #8]
    8a7c:	9000      	str	r0, [sp, #0]
    8a7e:	e7ff      	b.n	8a80 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E+0xc>
        }
    8a80:	9800      	ldr	r0, [sp, #0]
    8a82:	b003      	add	sp, #12
    8a84:	4770      	bx	lr

00008a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>:
        fn from(_: ()) -> Self {
    8a86:	b081      	sub	sp, #4
    8a88:	f06f 000c 	mvn.w	r0, #12
        }
    8a8c:	b001      	add	sp, #4
    8a8e:	4770      	bx	lr

00008a90 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E>:
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    8a90:	b082      	sub	sp, #8
    8a92:	9000      	str	r0, [sp, #0]
    8a94:	9101      	str	r1, [sp, #4]
    8a96:	2000      	movs	r0, #0
        }
    8a98:	b002      	add	sp, #8
    8a9a:	4770      	bx	lr

00008a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>:
    8a9c:	b580      	push	{r7, lr}
    8a9e:	b086      	sub	sp, #24
    8aa0:	f8dd c020 	ldr.w	ip, [sp, #32]
    8aa4:	9102      	str	r1, [sp, #8]
    8aa6:	9203      	str	r2, [sp, #12]
    8aa8:	9304      	str	r3, [sp, #16]
    8aaa:	f8cd c014 	str.w	ip, [sp, #20]
    8aae:	f04f 0e00 	mov.w	lr, #0
    8ab2:	f8cd e004 	str.w	lr, [sp, #4]
    8ab6:	f8cd e000 	str.w	lr, [sp]
    8aba:	f8cd e000 	str.w	lr, [sp]
    8abe:	6001      	str	r1, [r0, #0]
    8ac0:	6042      	str	r2, [r0, #4]
    8ac2:	9900      	ldr	r1, [sp, #0]
    8ac4:	9a01      	ldr	r2, [sp, #4]
    8ac6:	6081      	str	r1, [r0, #8]
    8ac8:	60c2      	str	r2, [r0, #12]
    8aca:	6103      	str	r3, [r0, #16]
    8acc:	f8c0 c014 	str.w	ip, [r0, #20]
    8ad0:	b006      	add	sp, #24
    8ad2:	bd80      	pop	{r7, pc}

00008ad4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>:
    8ad4:	b082      	sub	sp, #8
    8ad6:	9001      	str	r0, [sp, #4]
    8ad8:	7800      	ldrb	r0, [r0, #0]
    8ada:	07c0      	lsls	r0, r0, #31
    8adc:	2800      	cmp	r0, #0
    8ade:	d004      	beq.n	8aea <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x16>
    8ae0:	e7ff      	b.n	8ae2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0xe>
    8ae2:	2000      	movs	r0, #0
    8ae4:	f88d 0003 	strb.w	r0, [sp, #3]
    8ae8:	e003      	b.n	8af2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8aea:	2001      	movs	r0, #1
    8aec:	f88d 0003 	strb.w	r0, [sp, #3]
    8af0:	e7ff      	b.n	8af2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8af2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    8af6:	b002      	add	sp, #8
    8af8:	4770      	bx	lr

00008afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>:
    8afa:	b08a      	sub	sp, #40	; 0x28
    8afc:	9005      	str	r0, [sp, #20]
    8afe:	9107      	str	r1, [sp, #28]
    8b00:	9208      	str	r2, [sp, #32]
    8b02:	9805      	ldr	r0, [sp, #20]
    8b04:	f1b0 0c01 	subs.w	ip, r0, #1
    8b08:	bf18      	it	ne
    8b0a:	f04f 0c01 	movne.w	ip, #1
    8b0e:	2801      	cmp	r0, #1
    8b10:	9304      	str	r3, [sp, #16]
    8b12:	9203      	str	r2, [sp, #12]
    8b14:	9102      	str	r1, [sp, #8]
    8b16:	d010      	beq.n	8b3a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x40>
    8b18:	e7ff      	b.n	8b1a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x20>
    8b1a:	9805      	ldr	r0, [sp, #20]
    8b1c:	9006      	str	r0, [sp, #24]
    8b1e:	4668      	mov	r0, sp
    8b20:	9904      	ldr	r1, [sp, #16]
    8b22:	6001      	str	r1, [r0, #0]
    8b24:	f24e 338c 	movw	r3, #58252	; 0xe38c
    8b28:	f2c0 0301 	movt	r3, #1
    8b2c:	aa06      	add	r2, sp, #24
    8b2e:	9802      	ldr	r0, [sp, #8]
    8b30:	9903      	ldr	r1, [sp, #12]
    8b32:	f00e ff23 	bl	1797c <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    8b36:	defe      	udf	#254	; 0xfe
    8b38:	defe      	udf	#254	; 0xfe
    8b3a:	9805      	ldr	r0, [sp, #20]
    8b3c:	2801      	cmp	r0, #1
    8b3e:	d102      	bne.n	8b46 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x4c>
    8b40:	e7ff      	b.n	8b42 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>
    8b42:	b00a      	add	sp, #40	; 0x28
    8b44:	4770      	bx	lr
    8b46:	e7fc      	b.n	8b42 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>

00008b48 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>:
    8b48:	b580      	push	{r7, lr}
    8b4a:	b082      	sub	sp, #8
    8b4c:	9001      	str	r0, [sp, #4]
    8b4e:	f7ff ffc1 	bl	8ad4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>
    8b52:	9000      	str	r0, [sp, #0]
    8b54:	e7ff      	b.n	8b56 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E+0xe>
    8b56:	2001      	movs	r0, #1
    8b58:	9900      	ldr	r1, [sp, #0]
    8b5a:	4388      	bics	r0, r1
    8b5c:	b002      	add	sp, #8
    8b5e:	bd80      	pop	{r7, pc}

00008b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>:
    8b60:	b082      	sub	sp, #8
    8b62:	9001      	str	r0, [sp, #4]
    8b64:	9000      	str	r0, [sp, #0]
    8b66:	9800      	ldr	r0, [sp, #0]
    8b68:	b002      	add	sp, #8
    8b6a:	4770      	bx	lr

00008b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>:
    8b6c:	b081      	sub	sp, #4
    8b6e:	4601      	mov	r1, r0
    8b70:	f88d 0003 	strb.w	r0, [sp, #3]
    8b74:	b001      	add	sp, #4
    8b76:	4770      	bx	lr

00008b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>:
    8b78:	b081      	sub	sp, #4
    8b7a:	9000      	str	r0, [sp, #0]
    8b7c:	b001      	add	sp, #4
    8b7e:	4770      	bx	lr

00008b80 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>:
    8b80:	b580      	push	{r7, lr}
    8b82:	b08a      	sub	sp, #40	; 0x28
    8b84:	9007      	str	r0, [sp, #28]
    8b86:	9108      	str	r1, [sp, #32]
    8b88:	9209      	str	r2, [sp, #36]	; 0x24
    8b8a:	2300      	movs	r3, #0
    8b8c:	9305      	str	r3, [sp, #20]
    8b8e:	9006      	str	r0, [sp, #24]
    8b90:	9805      	ldr	r0, [sp, #20]
    8b92:	9b06      	ldr	r3, [sp, #24]
    8b94:	9104      	str	r1, [sp, #16]
    8b96:	4619      	mov	r1, r3
    8b98:	9b04      	ldr	r3, [sp, #16]
    8b9a:	9203      	str	r2, [sp, #12]
    8b9c:	461a      	mov	r2, r3
    8b9e:	9b03      	ldr	r3, [sp, #12]
    8ba0:	f000 f828 	bl	8bf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    8ba4:	9002      	str	r0, [sp, #8]
    8ba6:	9101      	str	r1, [sp, #4]
    8ba8:	e7ff      	b.n	8baa <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E+0x2a>
    8baa:	9802      	ldr	r0, [sp, #8]
    8bac:	9901      	ldr	r1, [sp, #4]
    8bae:	b00a      	add	sp, #40	; 0x28
    8bb0:	bd80      	pop	{r7, pc}

00008bb2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>:
    8bb2:	b580      	push	{r7, lr}
    8bb4:	b08a      	sub	sp, #40	; 0x28
    8bb6:	9006      	str	r0, [sp, #24]
    8bb8:	9107      	str	r1, [sp, #28]
    8bba:	9208      	str	r2, [sp, #32]
    8bbc:	9309      	str	r3, [sp, #36]	; 0x24
    8bbe:	9005      	str	r0, [sp, #20]
    8bc0:	4610      	mov	r0, r2
    8bc2:	9104      	str	r1, [sp, #16]
    8bc4:	4619      	mov	r1, r3
    8bc6:	f009 f9b1 	bl	11f2c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8bca:	9003      	str	r0, [sp, #12]
    8bcc:	e7ff      	b.n	8bce <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x1c>
    8bce:	9803      	ldr	r0, [sp, #12]
    8bd0:	9905      	ldr	r1, [sp, #20]
    8bd2:	f009 f932 	bl	11e3a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    8bd6:	9002      	str	r0, [sp, #8]
    8bd8:	e7ff      	b.n	8bda <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x28>
    8bda:	9804      	ldr	r0, [sp, #16]
    8bdc:	9905      	ldr	r1, [sp, #20]
    8bde:	1a41      	subs	r1, r0, r1
    8be0:	9802      	ldr	r0, [sp, #8]
    8be2:	f000 f8b7 	bl	8d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
    8be6:	9001      	str	r0, [sp, #4]
    8be8:	9100      	str	r1, [sp, #0]
    8bea:	e7ff      	b.n	8bec <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x3a>
    8bec:	9801      	ldr	r0, [sp, #4]
    8bee:	9900      	ldr	r1, [sp, #0]
    8bf0:	b00a      	add	sp, #40	; 0x28
    8bf2:	bd80      	pop	{r7, pc}

00008bf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>:
    8bf4:	b580      	push	{r7, lr}
    8bf6:	b08c      	sub	sp, #48	; 0x30
    8bf8:	9008      	str	r0, [sp, #32]
    8bfa:	9109      	str	r1, [sp, #36]	; 0x24
    8bfc:	920a      	str	r2, [sp, #40]	; 0x28
    8bfe:	930b      	str	r3, [sp, #44]	; 0x2c
    8c00:	4288      	cmp	r0, r1
    8c02:	9307      	str	r3, [sp, #28]
    8c04:	9206      	str	r2, [sp, #24]
    8c06:	9105      	str	r1, [sp, #20]
    8c08:	9004      	str	r0, [sp, #16]
    8c0a:	d806      	bhi.n	8c1a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x26>
    8c0c:	e7ff      	b.n	8c0e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x1a>
    8c0e:	9806      	ldr	r0, [sp, #24]
    8c10:	9907      	ldr	r1, [sp, #28]
    8c12:	f009 f9a2 	bl	11f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8c16:	9003      	str	r0, [sp, #12]
    8c18:	e004      	b.n	8c24 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x30>
    8c1a:	9804      	ldr	r0, [sp, #16]
    8c1c:	9905      	ldr	r1, [sp, #20]
    8c1e:	f00f fe50 	bl	188c2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
    8c22:	defe      	udf	#254	; 0xfe
    8c24:	9805      	ldr	r0, [sp, #20]
    8c26:	9903      	ldr	r1, [sp, #12]
    8c28:	4288      	cmp	r0, r1
    8c2a:	d809      	bhi.n	8c40 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x4c>
    8c2c:	e7ff      	b.n	8c2e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x3a>
    8c2e:	9804      	ldr	r0, [sp, #16]
    8c30:	9905      	ldr	r1, [sp, #20]
    8c32:	9a06      	ldr	r2, [sp, #24]
    8c34:	9b07      	ldr	r3, [sp, #28]
    8c36:	f7ff ffbc 	bl	8bb2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>
    8c3a:	9002      	str	r0, [sp, #8]
    8c3c:	9101      	str	r1, [sp, #4]
    8c3e:	e00a      	b.n	8c56 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x62>
    8c40:	9806      	ldr	r0, [sp, #24]
    8c42:	9907      	ldr	r1, [sp, #28]
    8c44:	f009 f989 	bl	11f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8c48:	9000      	str	r0, [sp, #0]
    8c4a:	e7ff      	b.n	8c4c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x58>
    8c4c:	9805      	ldr	r0, [sp, #20]
    8c4e:	9900      	ldr	r1, [sp, #0]
    8c50:	f00f fe15 	bl	1887e <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
    8c54:	defe      	udf	#254	; 0xfe
    8c56:	9802      	ldr	r0, [sp, #8]
    8c58:	9901      	ldr	r1, [sp, #4]
    8c5a:	b00c      	add	sp, #48	; 0x30
    8c5c:	bd80      	pop	{r7, pc}

00008c5e <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8c5e:	b580      	push	{r7, lr}
    8c60:	b082      	sub	sp, #8
    8c62:	9001      	str	r0, [sp, #4]
    8c64:	f012 f992 	bl	1af8c <os_eventq_run>
    8c68:	e7ff      	b.n	8c6a <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE+0xc>
    8c6a:	2001      	movs	r0, #1
    8c6c:	b002      	add	sp, #8
    8c6e:	bd80      	pop	{r7, pc}

00008c70 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8c70:	b580      	push	{r7, lr}
    8c72:	b084      	sub	sp, #16
    8c74:	9002      	str	r0, [sp, #8]
    8c76:	f012 f9b5 	bl	1afe4 <os_eventq_dflt_get>
    8c7a:	4601      	mov	r1, r0
    8c7c:	9003      	str	r0, [sp, #12]
    8c7e:	9101      	str	r1, [sp, #4]
    8c80:	e7ff      	b.n	8c82 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE+0x12>
    8c82:	9801      	ldr	r0, [sp, #4]
    8c84:	9902      	ldr	r1, [sp, #8]
    8c86:	6048      	str	r0, [r1, #4]
    8c88:	2200      	movs	r2, #0
    8c8a:	600a      	str	r2, [r1, #0]
    8c8c:	b004      	add	sp, #16
    8c8e:	bd80      	pop	{r7, pc}

00008c90 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>:
impl Default for os_task_stailq {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8c90:	b570      	push	{r4, r5, r6, lr}
    8c92:	b09c      	sub	sp, #112	; 0x70
    8c94:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
    8c98:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
    8c9c:	9c22      	ldr	r4, [sp, #136]	; 0x88
    8c9e:	9d21      	ldr	r5, [sp, #132]	; 0x84
    8ca0:	9e20      	ldr	r6, [sp, #128]	; 0x80
    8ca2:	9013      	str	r0, [sp, #76]	; 0x4c
    8ca4:	9114      	str	r1, [sp, #80]	; 0x50
    8ca6:	9215      	str	r2, [sp, #84]	; 0x54
    8ca8:	9316      	str	r3, [sp, #88]	; 0x58
    8caa:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
    8cae:	9418      	str	r4, [sp, #96]	; 0x60
    8cb0:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
    8cb4:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
    8cb8:	9011      	str	r0, [sp, #68]	; 0x44
    8cba:	4608      	mov	r0, r1
    8cbc:	9310      	str	r3, [sp, #64]	; 0x40
    8cbe:	920f      	str	r2, [sp, #60]	; 0x3c
    8cc0:	910e      	str	r1, [sp, #56]	; 0x38
    8cc2:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    8cc6:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    8cca:	940b      	str	r4, [sp, #44]	; 0x2c
    8ccc:	950a      	str	r5, [sp, #40]	; 0x28
    8cce:	9609      	str	r6, [sp, #36]	; 0x24
    8cd0:	f7ff fe2a 	bl	8928 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>
    8cd4:	e7ff      	b.n	8cd6 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x46>
    8cd6:	980e      	ldr	r0, [sp, #56]	; 0x38
    8cd8:	f7ff fe08 	bl	88ec <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>
    8cdc:	9008      	str	r0, [sp, #32]
    8cde:	e7ff      	b.n	8ce0 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x50>
    8ce0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8ce2:	990c      	ldr	r1, [sp, #48]	; 0x30
    8ce4:	f000 f93b 	bl	8f5e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>
    8ce8:	9007      	str	r0, [sp, #28]
    8cea:	e7ff      	b.n	8cec <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x5c>
    8cec:	980d      	ldr	r0, [sp, #52]	; 0x34
    8cee:	b281      	uxth	r1, r0
    8cf0:	466a      	mov	r2, sp
    8cf2:	60d1      	str	r1, [r2, #12]
    8cf4:	9907      	ldr	r1, [sp, #28]
    8cf6:	6091      	str	r1, [r2, #8]
    8cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8cfa:	6053      	str	r3, [r2, #4]
    8cfc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    8d00:	fa5f fe8c 	uxtb.w	lr, ip
    8d04:	f8c2 e000 	str.w	lr, [r2]
    8d08:	9811      	ldr	r0, [sp, #68]	; 0x44
    8d0a:	9908      	ldr	r1, [sp, #32]
    8d0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8d0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8d10:	f012 ff08 	bl	1bb24 <os_task_init>
    8d14:	4601      	mov	r1, r0
    8d16:	901b      	str	r0, [sp, #108]	; 0x6c
    8d18:	9106      	str	r1, [sp, #24]
    8d1a:	e7ff      	b.n	8d1c <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x8c>
    8d1c:	9806      	ldr	r0, [sp, #24]
    8d1e:	2800      	cmp	r0, #0
    8d20:	d005      	beq.n	8d2e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x9e>
    8d22:	e7ff      	b.n	8d24 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x94>
    8d24:	9806      	ldr	r0, [sp, #24]
    8d26:	f7ff fea5 	bl	8a74 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>
    8d2a:	9005      	str	r0, [sp, #20]
    8d2c:	e004      	b.n	8d38 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xa8>
    8d2e:	2000      	movs	r0, #0
    8d30:	9012      	str	r0, [sp, #72]	; 0x48
    8d32:	2001      	movs	r0, #1
    8d34:	9012      	str	r0, [sp, #72]	; 0x48
    8d36:	e002      	b.n	8d3e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8d38:	9805      	ldr	r0, [sp, #20]
    8d3a:	9012      	str	r0, [sp, #72]	; 0x48
    8d3c:	e7ff      	b.n	8d3e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8d3e:	9812      	ldr	r0, [sp, #72]	; 0x48
    8d40:	b01c      	add	sp, #112	; 0x70
    8d42:	bd70      	pop	{r4, r5, r6, pc}

00008d44 <_ZN4core3ptr13drop_in_place17h1982c2483e0a2028E>:
    8d44:	b081      	sub	sp, #4
    8d46:	9000      	str	r0, [sp, #0]
    8d48:	b001      	add	sp, #4
    8d4a:	4770      	bx	lr

00008d4c <_ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E>:
    8d4c:	b081      	sub	sp, #4
    8d4e:	9000      	str	r0, [sp, #0]
    8d50:	b001      	add	sp, #4
    8d52:	4770      	bx	lr

00008d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>:
    8d54:	b580      	push	{r7, lr}
    8d56:	b084      	sub	sp, #16
    8d58:	9002      	str	r0, [sp, #8]
    8d5a:	9103      	str	r1, [sp, #12]
    8d5c:	f000 f993 	bl	9086 <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>
    8d60:	9001      	str	r0, [sp, #4]
    8d62:	9100      	str	r1, [sp, #0]
    8d64:	e7ff      	b.n	8d66 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE+0x12>
    8d66:	9801      	ldr	r0, [sp, #4]
    8d68:	9900      	ldr	r1, [sp, #0]
    8d6a:	b004      	add	sp, #16
    8d6c:	bd80      	pop	{r7, pc}

00008d6e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>:
    8d6e:	b5b0      	push	{r4, r5, r7, lr}
    8d70:	b0b8      	sub	sp, #224	; 0xe0
    8d72:	902f      	str	r0, [sp, #188]	; 0xbc
    8d74:	9130      	str	r1, [sp, #192]	; 0xc0
    8d76:	9231      	str	r2, [sp, #196]	; 0xc4
    8d78:	9332      	str	r3, [sp, #200]	; 0xc8
    8d7a:	9013      	str	r0, [sp, #76]	; 0x4c
    8d7c:	9112      	str	r1, [sp, #72]	; 0x48
    8d7e:	9311      	str	r3, [sp, #68]	; 0x44
    8d80:	9210      	str	r2, [sp, #64]	; 0x40
    8d82:	f009 f8ea 	bl	11f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d86:	9016      	str	r0, [sp, #88]	; 0x58
    8d88:	e7ff      	b.n	8d8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x1c>
    8d8a:	9810      	ldr	r0, [sp, #64]	; 0x40
    8d8c:	9911      	ldr	r1, [sp, #68]	; 0x44
    8d8e:	f009 f8e4 	bl	11f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d92:	9017      	str	r0, [sp, #92]	; 0x5c
    8d94:	e7ff      	b.n	8d96 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x28>
    8d96:	a816      	add	r0, sp, #88	; 0x58
    8d98:	9014      	str	r0, [sp, #80]	; 0x50
    8d9a:	a817      	add	r0, sp, #92	; 0x5c
    8d9c:	9015      	str	r0, [sp, #84]	; 0x54
    8d9e:	9814      	ldr	r0, [sp, #80]	; 0x50
    8da0:	9033      	str	r0, [sp, #204]	; 0xcc
    8da2:	9915      	ldr	r1, [sp, #84]	; 0x54
    8da4:	9134      	str	r1, [sp, #208]	; 0xd0
    8da6:	6802      	ldr	r2, [r0, #0]
    8da8:	680b      	ldr	r3, [r1, #0]
    8daa:	429a      	cmp	r2, r3
    8dac:	900f      	str	r0, [sp, #60]	; 0x3c
    8dae:	910e      	str	r1, [sp, #56]	; 0x38
    8db0:	d106      	bne.n	8dc0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x52>
    8db2:	e7ff      	b.n	8db4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x46>
    8db4:	9810      	ldr	r0, [sp, #64]	; 0x40
    8db6:	9911      	ldr	r1, [sp, #68]	; 0x44
    8db8:	f009 f8d7 	bl	11f6a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8dbc:	900d      	str	r0, [sp, #52]	; 0x34
    8dbe:	e072      	b.n	8ea6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x138>
    8dc0:	f24e 30f0 	movw	r0, #58352	; 0xe3f0
    8dc4:	f2c0 0001 	movt	r0, #1
    8dc8:	6801      	ldr	r1, [r0, #0]
    8dca:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8dcc:	9027      	str	r0, [sp, #156]	; 0x9c
    8dce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8dd0:	9228      	str	r2, [sp, #160]	; 0xa0
    8dd2:	f24e 4330 	movw	r3, #58416	; 0xe430
    8dd6:	f2c0 0301 	movt	r3, #1
    8dda:	681b      	ldr	r3, [r3, #0]
    8ddc:	f24e 4c34 	movw	ip, #58420	; 0xe434
    8de0:	f2c0 0c01 	movt	ip, #1
    8de4:	f8dc c000 	ldr.w	ip, [ip]
    8de8:	46ee      	mov	lr, sp
    8dea:	2400      	movs	r4, #0
    8dec:	f8ce 4000 	str.w	r4, [lr]
    8df0:	a829      	add	r0, sp, #164	; 0xa4
    8df2:	2201      	movs	r2, #1
    8df4:	910c      	str	r1, [sp, #48]	; 0x30
    8df6:	4619      	mov	r1, r3
    8df8:	4663      	mov	r3, ip
    8dfa:	f7ff fe4f 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8dfe:	e7ff      	b.n	8e00 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x92>
    8e00:	a827      	add	r0, sp, #156	; 0x9c
    8e02:	9024      	str	r0, [sp, #144]	; 0x90
    8e04:	a828      	add	r0, sp, #160	; 0xa0
    8e06:	9025      	str	r0, [sp, #148]	; 0x94
    8e08:	a829      	add	r0, sp, #164	; 0xa4
    8e0a:	9026      	str	r0, [sp, #152]	; 0x98
    8e0c:	9824      	ldr	r0, [sp, #144]	; 0x90
    8e0e:	9035      	str	r0, [sp, #212]	; 0xd4
    8e10:	9925      	ldr	r1, [sp, #148]	; 0x94
    8e12:	9136      	str	r1, [sp, #216]	; 0xd8
    8e14:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8e16:	9237      	str	r2, [sp, #220]	; 0xdc
    8e18:	f242 6389 	movw	r3, #9865	; 0x2689
    8e1c:	f2c0 0301 	movt	r3, #1
    8e20:	910b      	str	r1, [sp, #44]	; 0x2c
    8e22:	4619      	mov	r1, r3
    8e24:	920a      	str	r2, [sp, #40]	; 0x28
    8e26:	f009 fc3d 	bl	126a4 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8e2a:	9009      	str	r0, [sp, #36]	; 0x24
    8e2c:	9108      	str	r1, [sp, #32]
    8e2e:	e7ff      	b.n	8e30 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xc2>
    8e30:	f242 6189 	movw	r1, #9865	; 0x2689
    8e34:	f2c0 0101 	movt	r1, #1
    8e38:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8e3a:	f009 fc33 	bl	126a4 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8e3e:	9007      	str	r0, [sp, #28]
    8e40:	9106      	str	r1, [sp, #24]
    8e42:	e7ff      	b.n	8e44 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xd6>
    8e44:	f647 71a7 	movw	r1, #32679	; 0x7fa7
    8e48:	f2c0 0101 	movt	r1, #1
    8e4c:	980a      	ldr	r0, [sp, #40]	; 0x28
    8e4e:	f000 fac3 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8e52:	9005      	str	r0, [sp, #20]
    8e54:	9104      	str	r1, [sp, #16]
    8e56:	e7ff      	b.n	8e58 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xea>
    8e58:	9809      	ldr	r0, [sp, #36]	; 0x24
    8e5a:	901e      	str	r0, [sp, #120]	; 0x78
    8e5c:	9908      	ldr	r1, [sp, #32]
    8e5e:	911f      	str	r1, [sp, #124]	; 0x7c
    8e60:	9a07      	ldr	r2, [sp, #28]
    8e62:	9220      	str	r2, [sp, #128]	; 0x80
    8e64:	9b06      	ldr	r3, [sp, #24]
    8e66:	9321      	str	r3, [sp, #132]	; 0x84
    8e68:	f8dd c014 	ldr.w	ip, [sp, #20]
    8e6c:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    8e70:	f8dd e010 	ldr.w	lr, [sp, #16]
    8e74:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
    8e78:	466c      	mov	r4, sp
    8e7a:	2503      	movs	r5, #3
    8e7c:	6025      	str	r5, [r4, #0]
    8e7e:	a818      	add	r0, sp, #96	; 0x60
    8e80:	ab1e      	add	r3, sp, #120	; 0x78
    8e82:	990c      	ldr	r1, [sp, #48]	; 0x30
    8e84:	462a      	mov	r2, r5
    8e86:	f7ff fe09 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8e8a:	e7ff      	b.n	8e8c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x11e>
    8e8c:	f24e 4084 	movw	r0, #58500	; 0xe484
    8e90:	f2c0 0001 	movt	r0, #1
    8e94:	f00e fd99 	bl	179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8e98:	9003      	str	r0, [sp, #12]
    8e9a:	e7ff      	b.n	8e9c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x12e>
    8e9c:	a818      	add	r0, sp, #96	; 0x60
    8e9e:	9903      	ldr	r1, [sp, #12]
    8ea0:	f00e fdd0 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8ea4:	defe      	udf	#254	; 0xfe
    8ea6:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8ea8:	9912      	ldr	r1, [sp, #72]	; 0x48
    8eaa:	f009 f83f 	bl	11f2c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8eae:	9002      	str	r0, [sp, #8]
    8eb0:	e7ff      	b.n	8eb2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x144>
    8eb2:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8eb4:	9912      	ldr	r1, [sp, #72]	; 0x48
    8eb6:	f009 f850 	bl	11f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8eba:	9001      	str	r0, [sp, #4]
    8ebc:	e7ff      	b.n	8ebe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x150>
    8ebe:	980d      	ldr	r0, [sp, #52]	; 0x34
    8ec0:	9902      	ldr	r1, [sp, #8]
    8ec2:	9a01      	ldr	r2, [sp, #4]
    8ec4:	f008 fe55 	bl	11b72 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    8ec8:	e7ff      	b.n	8eca <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x15c>
    8eca:	b038      	add	sp, #224	; 0xe0
    8ecc:	bdb0      	pop	{r4, r5, r7, pc}

00008ece <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>:
    8ece:	b580      	push	{r7, lr}
    8ed0:	b086      	sub	sp, #24
    8ed2:	9003      	str	r0, [sp, #12]
    8ed4:	9104      	str	r1, [sp, #16]
    8ed6:	9205      	str	r2, [sp, #20]
    8ed8:	9002      	str	r0, [sp, #8]
    8eda:	4610      	mov	r0, r2
    8edc:	9a02      	ldr	r2, [sp, #8]
    8ede:	9101      	str	r1, [sp, #4]
    8ee0:	4611      	mov	r1, r2
    8ee2:	9a01      	ldr	r2, [sp, #4]
    8ee4:	f000 f861 	bl	8faa <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>
    8ee8:	9000      	str	r0, [sp, #0]
    8eea:	e7ff      	b.n	8eec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE+0x1e>
    8eec:	9800      	ldr	r0, [sp, #0]
    8eee:	b006      	add	sp, #24
    8ef0:	bd80      	pop	{r7, pc}

00008ef2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>:
    8ef2:	b580      	push	{r7, lr}
    8ef4:	b08e      	sub	sp, #56	; 0x38
    8ef6:	9009      	str	r0, [sp, #36]	; 0x24
    8ef8:	910a      	str	r1, [sp, #40]	; 0x28
    8efa:	9005      	str	r0, [sp, #20]
    8efc:	9104      	str	r1, [sp, #16]
    8efe:	f009 f82c 	bl	11f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8f02:	9003      	str	r0, [sp, #12]
    8f04:	e7ff      	b.n	8f06 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x14>
    8f06:	2101      	movs	r1, #1
    8f08:	9803      	ldr	r0, [sp, #12]
    8f0a:	f000 fa7a 	bl	9402 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>
    8f0e:	9002      	str	r0, [sp, #8]
    8f10:	9101      	str	r1, [sp, #4]
    8f12:	e7ff      	b.n	8f14 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x22>
    8f14:	9802      	ldr	r0, [sp, #8]
    8f16:	9901      	ldr	r1, [sp, #4]
    8f18:	f000 f97c 	bl	9214 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>
    8f1c:	9108      	str	r1, [sp, #32]
    8f1e:	9007      	str	r0, [sp, #28]
    8f20:	e7ff      	b.n	8f22 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x30>
    8f22:	9807      	ldr	r0, [sp, #28]
    8f24:	2800      	cmp	r0, #0
    8f26:	d001      	beq.n	8f2c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x3a>
    8f28:	e7ff      	b.n	8f2a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x38>
    8f2a:	e00c      	b.n	8f46 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x54>
    8f2c:	9808      	ldr	r0, [sp, #32]
    8f2e:	900c      	str	r0, [sp, #48]	; 0x30
    8f30:	900d      	str	r0, [sp, #52]	; 0x34
    8f32:	9905      	ldr	r1, [sp, #20]
    8f34:	9000      	str	r0, [sp, #0]
    8f36:	4608      	mov	r0, r1
    8f38:	9904      	ldr	r1, [sp, #16]
    8f3a:	9a00      	ldr	r2, [sp, #0]
    8f3c:	f7ff ffc7 	bl	8ece <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>
    8f40:	9006      	str	r0, [sp, #24]
    8f42:	e00b      	b.n	8f5c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x6a>
    8f44:	defe      	udf	#254	; 0xfe
    8f46:	f008 fbd7 	bl	116f8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>
    8f4a:	e002      	b.n	8f52 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x60>
    8f4c:	9806      	ldr	r0, [sp, #24]
    8f4e:	b00e      	add	sp, #56	; 0x38
    8f50:	bd80      	pop	{r7, pc}
    8f52:	f000 f959 	bl	9208 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>
    8f56:	9006      	str	r0, [sp, #24]
    8f58:	e7ff      	b.n	8f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x68>
    8f5a:	e7f7      	b.n	8f4c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>
    8f5c:	e7f6      	b.n	8f4c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>

00008f5e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>:
    8f5e:	b082      	sub	sp, #8
    8f60:	9000      	str	r0, [sp, #0]
    8f62:	9101      	str	r1, [sp, #4]
    8f64:	b002      	add	sp, #8
    8f66:	4770      	bx	lr

00008f68 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>:
    8f68:	b580      	push	{r7, lr}
    8f6a:	b088      	sub	sp, #32
    8f6c:	9005      	str	r0, [sp, #20]
    8f6e:	9106      	str	r1, [sp, #24]
    8f70:	9207      	str	r2, [sp, #28]
    8f72:	9004      	str	r0, [sp, #16]
    8f74:	4610      	mov	r0, r2
    8f76:	9a04      	ldr	r2, [sp, #16]
    8f78:	9103      	str	r1, [sp, #12]
    8f7a:	4611      	mov	r1, r2
    8f7c:	9a03      	ldr	r2, [sp, #12]
    8f7e:	f7ff fdff 	bl	8b80 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>
    8f82:	9002      	str	r0, [sp, #8]
    8f84:	9101      	str	r1, [sp, #4]
    8f86:	e7ff      	b.n	8f88 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E+0x20>
    8f88:	9802      	ldr	r0, [sp, #8]
    8f8a:	9901      	ldr	r1, [sp, #4]
    8f8c:	b008      	add	sp, #32
    8f8e:	bd80      	pop	{r7, pc}

00008f90 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>:
    8f90:	b580      	push	{r7, lr}
    8f92:	b084      	sub	sp, #16
    8f94:	9002      	str	r0, [sp, #8]
    8f96:	9103      	str	r1, [sp, #12]
    8f98:	f008 fb6b 	bl	11672 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>
    8f9c:	9001      	str	r0, [sp, #4]
    8f9e:	9100      	str	r1, [sp, #0]
    8fa0:	e7ff      	b.n	8fa2 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E+0x12>
    8fa2:	9801      	ldr	r0, [sp, #4]
    8fa4:	9900      	ldr	r1, [sp, #0]
    8fa6:	b004      	add	sp, #16
    8fa8:	bd80      	pop	{r7, pc}

00008faa <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>:
    8faa:	b580      	push	{r7, lr}
    8fac:	b08a      	sub	sp, #40	; 0x28
    8fae:	9007      	str	r0, [sp, #28]
    8fb0:	9108      	str	r1, [sp, #32]
    8fb2:	9209      	str	r2, [sp, #36]	; 0x24
    8fb4:	9005      	str	r0, [sp, #20]
    8fb6:	4608      	mov	r0, r1
    8fb8:	9104      	str	r1, [sp, #16]
    8fba:	4611      	mov	r1, r2
    8fbc:	9203      	str	r2, [sp, #12]
    8fbe:	f008 ffcc 	bl	11f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8fc2:	9002      	str	r0, [sp, #8]
    8fc4:	e7ff      	b.n	8fc6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x1c>
    8fc6:	9805      	ldr	r0, [sp, #20]
    8fc8:	9902      	ldr	r1, [sp, #8]
    8fca:	4288      	cmp	r0, r1
    8fcc:	d303      	bcc.n	8fd6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x2c>
    8fce:	e7ff      	b.n	8fd0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x26>
    8fd0:	2000      	movs	r0, #0
    8fd2:	9006      	str	r0, [sp, #24]
    8fd4:	e009      	b.n	8fea <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    8fd6:	9805      	ldr	r0, [sp, #20]
    8fd8:	9904      	ldr	r1, [sp, #16]
    8fda:	9a03      	ldr	r2, [sp, #12]
    8fdc:	f008 ffe9 	bl	11fb2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>
    8fe0:	9001      	str	r0, [sp, #4]
    8fe2:	e7ff      	b.n	8fe4 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x3a>
    8fe4:	9801      	ldr	r0, [sp, #4]
    8fe6:	9006      	str	r0, [sp, #24]
    8fe8:	e7ff      	b.n	8fea <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    8fea:	9806      	ldr	r0, [sp, #24]
    8fec:	b00a      	add	sp, #40	; 0x28
    8fee:	bd80      	pop	{r7, pc}

00008ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    8ff0:	b580      	push	{r7, lr}
    8ff2:	b08a      	sub	sp, #40	; 0x28
    8ff4:	9004      	str	r0, [sp, #16]
    8ff6:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    8ff8:	9003      	str	r0, [sp, #12]
    8ffa:	9102      	str	r1, [sp, #8]
    8ffc:	f000 f86e 	bl	90dc <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    9000:	4601      	mov	r1, r0
    9002:	9006      	str	r0, [sp, #24]
    9004:	9101      	str	r1, [sp, #4]
    9006:	e7ff      	b.n	9008 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x18>
    let len = msg.len() as u32;
    9008:	9803      	ldr	r0, [sp, #12]
    900a:	9902      	ldr	r1, [sp, #8]
    900c:	f000 f850 	bl	90b0 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    9010:	9000      	str	r0, [sp, #0]
    9012:	e7ff      	b.n	9014 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x24>
    9014:	9800      	ldr	r0, [sp, #0]
    9016:	9007      	str	r0, [sp, #28]
    9018:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    901a:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    901c:	4608      	mov	r0, r1
    901e:	f000 f809 	bl	9034 <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>
    9022:	9009      	str	r0, [sp, #36]	; 0x24
    9024:	e7ff      	b.n	9026 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x36>
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    9026:	9801      	ldr	r0, [sp, #4]
    9028:	9900      	ldr	r1, [sp, #0]
    902a:	f010 fc6d 	bl	19908 <console_buffer>
    902e:	e7ff      	b.n	9030 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x40>
}
    9030:	b00a      	add	sp, #40	; 0x28
    9032:	bd80      	pop	{r7, pc}

00009034 <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    9034:	b081      	sub	sp, #4
    9036:	9000      	str	r0, [sp, #0]
    9038:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    903a:	b001      	add	sp, #4
    903c:	4770      	bx	lr

0000903e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    903e:	b580      	push	{r7, lr}
    9040:	b086      	sub	sp, #24
    9042:	9004      	str	r0, [sp, #16]
    9044:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    9046:	9003      	str	r0, [sp, #12]
    9048:	9102      	str	r1, [sp, #8]
    904a:	f000 f847 	bl	90dc <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    904e:	9001      	str	r0, [sp, #4]
    9050:	e7ff      	b.n	9052 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x14>
    9052:	9803      	ldr	r0, [sp, #12]
    9054:	9902      	ldr	r1, [sp, #8]
    9056:	f000 f82b 	bl	90b0 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    905a:	9000      	str	r0, [sp, #0]
    905c:	e7ff      	b.n	905e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x20>
    905e:	9801      	ldr	r0, [sp, #4]
    9060:	9900      	ldr	r1, [sp, #0]
    9062:	f010 fc51 	bl	19908 <console_buffer>
    9066:	e7ff      	b.n	9068 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x2a>
}
    9068:	b006      	add	sp, #24
    906a:	bd80      	pop	{r7, pc}

0000906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    906c:	b580      	push	{r7, lr}
    906e:	b082      	sub	sp, #8
    9070:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    9072:	f010 fcb9 	bl	199e8 <console_printint>
    9076:	e7ff      	b.n	9078 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E+0xc>
}
    9078:	b002      	add	sp, #8
    907a:	bd80      	pop	{r7, pc}

0000907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    907c:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
    907e:	f010 fc1b 	bl	198b8 <console_flush>
    9082:	e7ff      	b.n	9084 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E+0x8>
}
    9084:	bd80      	pop	{r7, pc}

00009086 <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>:
    9086:	b086      	sub	sp, #24
    9088:	9004      	str	r0, [sp, #16]
    908a:	9105      	str	r1, [sp, #20]
    908c:	9002      	str	r0, [sp, #8]
    908e:	9103      	str	r1, [sp, #12]
    9090:	9802      	ldr	r0, [sp, #8]
    9092:	9903      	ldr	r1, [sp, #12]
    9094:	9000      	str	r0, [sp, #0]
    9096:	9101      	str	r1, [sp, #4]
    9098:	9800      	ldr	r0, [sp, #0]
    909a:	9901      	ldr	r1, [sp, #4]
    909c:	b006      	add	sp, #24
    909e:	4770      	bx	lr

000090a0 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>:
    90a0:	b082      	sub	sp, #8
    90a2:	460a      	mov	r2, r1
    90a4:	9000      	str	r0, [sp, #0]
    90a6:	f88d 1007 	strb.w	r1, [sp, #7]
    90aa:	7001      	strb	r1, [r0, #0]
    90ac:	b002      	add	sp, #8
    90ae:	4770      	bx	lr

000090b0 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>:
    90b0:	b580      	push	{r7, lr}
    90b2:	b08a      	sub	sp, #40	; 0x28
    90b4:	9004      	str	r0, [sp, #16]
    90b6:	9105      	str	r1, [sp, #20]
    90b8:	9008      	str	r0, [sp, #32]
    90ba:	9109      	str	r1, [sp, #36]	; 0x24
    90bc:	9006      	str	r0, [sp, #24]
    90be:	9107      	str	r1, [sp, #28]
    90c0:	9806      	ldr	r0, [sp, #24]
    90c2:	9907      	ldr	r1, [sp, #28]
    90c4:	9003      	str	r0, [sp, #12]
    90c6:	9102      	str	r1, [sp, #8]
    90c8:	e7ff      	b.n	90ca <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x1a>
    90ca:	9803      	ldr	r0, [sp, #12]
    90cc:	9902      	ldr	r1, [sp, #8]
    90ce:	f008 ff44 	bl	11f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    90d2:	9001      	str	r0, [sp, #4]
    90d4:	e7ff      	b.n	90d6 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x26>
    90d6:	9801      	ldr	r0, [sp, #4]
    90d8:	b00a      	add	sp, #40	; 0x28
    90da:	bd80      	pop	{r7, pc}

000090dc <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>:
    90dc:	b082      	sub	sp, #8
    90de:	9000      	str	r0, [sp, #0]
    90e0:	9101      	str	r1, [sp, #4]
    90e2:	b002      	add	sp, #8
    90e4:	4770      	bx	lr

000090e6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E>:
    90e6:	b580      	push	{r7, lr}
    90e8:	b084      	sub	sp, #16
    90ea:	9002      	str	r0, [sp, #8]
    90ec:	9103      	str	r1, [sp, #12]
    90ee:	6800      	ldr	r0, [r0, #0]
    90f0:	f000 f845 	bl	917e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>
    90f4:	9001      	str	r0, [sp, #4]
    90f6:	e7ff      	b.n	90f8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E+0x12>
    90f8:	9801      	ldr	r0, [sp, #4]
    90fa:	f000 0001 	and.w	r0, r0, #1
    90fe:	b004      	add	sp, #16
    9100:	bd80      	pop	{r7, pc}

00009102 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>:
    9102:	b087      	sub	sp, #28
    9104:	9000      	str	r0, [sp, #0]
    9106:	9101      	str	r1, [sp, #4]
    9108:	2000      	movs	r0, #0
    910a:	f88d 0013 	strb.w	r0, [sp, #19]
    910e:	f88d 0012 	strb.w	r0, [sp, #18]
    9112:	2001      	movs	r0, #1
    9114:	f88d 0013 	strb.w	r0, [sp, #19]
    9118:	f88d 0012 	strb.w	r0, [sp, #18]
    911c:	9800      	ldr	r0, [sp, #0]
    911e:	2800      	cmp	r0, #0
    9120:	d001      	beq.n	9126 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x24>
    9122:	e7ff      	b.n	9124 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x22>
    9124:	e006      	b.n	9134 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x32>
    9126:	2000      	movs	r0, #0
    9128:	f88d 0012 	strb.w	r0, [sp, #18]
    912c:	2001      	movs	r0, #1
    912e:	9002      	str	r0, [sp, #8]
    9130:	e008      	b.n	9144 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    9132:	defe      	udf	#254	; 0xfe
    9134:	2000      	movs	r0, #0
    9136:	f88d 0013 	strb.w	r0, [sp, #19]
    913a:	9901      	ldr	r1, [sp, #4]
    913c:	9106      	str	r1, [sp, #24]
    913e:	9103      	str	r1, [sp, #12]
    9140:	9002      	str	r0, [sp, #8]
    9142:	e7ff      	b.n	9144 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    9144:	f89d 0012 	ldrb.w	r0, [sp, #18]
    9148:	07c0      	lsls	r0, r0, #31
    914a:	2800      	cmp	r0, #0
    914c:	d104      	bne.n	9158 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x56>
    914e:	e7ff      	b.n	9150 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9150:	9800      	ldr	r0, [sp, #0]
    9152:	2801      	cmp	r0, #1
    9154:	d008      	beq.n	9168 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x66>
    9156:	e011      	b.n	917c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x7a>
    9158:	2000      	movs	r0, #0
    915a:	f88d 0012 	strb.w	r0, [sp, #18]
    915e:	e7f7      	b.n	9150 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9160:	9802      	ldr	r0, [sp, #8]
    9162:	9903      	ldr	r1, [sp, #12]
    9164:	b007      	add	sp, #28
    9166:	4770      	bx	lr
    9168:	f89d 0013 	ldrb.w	r0, [sp, #19]
    916c:	07c0      	lsls	r0, r0, #31
    916e:	2800      	cmp	r0, #0
    9170:	d0f6      	beq.n	9160 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    9172:	e7ff      	b.n	9174 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x72>
    9174:	2000      	movs	r0, #0
    9176:	f88d 0013 	strb.w	r0, [sp, #19]
    917a:	e7f1      	b.n	9160 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    917c:	e7f0      	b.n	9160 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>

0000917e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>:
    917e:	b580      	push	{r7, lr}
    9180:	b08e      	sub	sp, #56	; 0x38
    9182:	900b      	str	r0, [sp, #44]	; 0x2c
    9184:	910c      	str	r1, [sp, #48]	; 0x30
    9186:	9003      	str	r0, [sp, #12]
    9188:	9803      	ldr	r0, [sp, #12]
    918a:	6800      	ldr	r0, [r0, #0]
    918c:	2800      	cmp	r0, #0
    918e:	4602      	mov	r2, r0
    9190:	bf18      	it	ne
    9192:	2201      	movne	r2, #1
    9194:	2800      	cmp	r0, #0
    9196:	9101      	str	r1, [sp, #4]
    9198:	d00f      	beq.n	91ba <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x3c>
    919a:	e7ff      	b.n	919c <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x1e>
    919c:	9803      	ldr	r0, [sp, #12]
    919e:	900d      	str	r0, [sp, #52]	; 0x34
    91a0:	f24e 4294 	movw	r2, #58516	; 0xe494
    91a4:	f2c0 0201 	movt	r2, #1
    91a8:	a907      	add	r1, sp, #28
    91aa:	2304      	movs	r3, #4
    91ac:	9000      	str	r0, [sp, #0]
    91ae:	4608      	mov	r0, r1
    91b0:	9901      	ldr	r1, [sp, #4]
    91b2:	f00f faba 	bl	1872a <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    91b6:	e011      	b.n	91dc <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5e>
    91b8:	defe      	udf	#254	; 0xfe
    91ba:	f24e 4298 	movw	r2, #58520	; 0xe498
    91be:	f2c0 0201 	movt	r2, #1
    91c2:	a804      	add	r0, sp, #16
    91c4:	2304      	movs	r3, #4
    91c6:	9901      	ldr	r1, [sp, #4]
    91c8:	f00f faaf 	bl	1872a <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    91cc:	e7ff      	b.n	91ce <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x50>
    91ce:	a804      	add	r0, sp, #16
    91d0:	f00e fdc8 	bl	17d64 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    91d4:	f88d 000b 	strb.w	r0, [sp, #11]
    91d8:	e7ff      	b.n	91da <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5c>
    91da:	e011      	b.n	9200 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    91dc:	9800      	ldr	r0, [sp, #0]
    91de:	900a      	str	r0, [sp, #40]	; 0x28
    91e0:	f24e 429c 	movw	r2, #58524	; 0xe49c
    91e4:	f2c0 0201 	movt	r2, #1
    91e8:	a807      	add	r0, sp, #28
    91ea:	a90a      	add	r1, sp, #40	; 0x28
    91ec:	f00e fd51 	bl	17c92 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>
    91f0:	e7ff      	b.n	91f2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x74>
    91f2:	a807      	add	r0, sp, #28
    91f4:	f00e fdb6 	bl	17d64 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    91f8:	f88d 000b 	strb.w	r0, [sp, #11]
    91fc:	e7ff      	b.n	91fe <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x80>
    91fe:	e7ff      	b.n	9200 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    9200:	f89d 000b 	ldrb.w	r0, [sp, #11]
    9204:	b00e      	add	sp, #56	; 0x38
    9206:	bd80      	pop	{r7, pc}

00009208 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>:
    9208:	b082      	sub	sp, #8
    920a:	2000      	movs	r0, #0
    920c:	9000      	str	r0, [sp, #0]
    920e:	9800      	ldr	r0, [sp, #0]
    9210:	b002      	add	sp, #8
    9212:	4770      	bx	lr

00009214 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>:
    9214:	b580      	push	{r7, lr}
    9216:	b084      	sub	sp, #16
    9218:	9002      	str	r0, [sp, #8]
    921a:	9103      	str	r1, [sp, #12]
    921c:	f7ff ff71 	bl	9102 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>
    9220:	9001      	str	r0, [sp, #4]
    9222:	9100      	str	r1, [sp, #0]
    9224:	e7ff      	b.n	9226 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E+0x12>
    9226:	9801      	ldr	r0, [sp, #4]
    9228:	9900      	ldr	r1, [sp, #0]
    922a:	b004      	add	sp, #16
    922c:	bd80      	pop	{r7, pc}

0000922e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>:
    922e:	b580      	push	{r7, lr}
    9230:	b094      	sub	sp, #80	; 0x50
    9232:	9008      	str	r0, [sp, #32]
    9234:	9109      	str	r1, [sp, #36]	; 0x24
    9236:	6802      	ldr	r2, [r0, #0]
    9238:	2a00      	cmp	r2, #0
    923a:	bf18      	it	ne
    923c:	2201      	movne	r2, #1
    923e:	f04f 0300 	mov.w	r3, #0
    9242:	930b      	str	r3, [sp, #44]	; 0x2c
    9244:	920a      	str	r2, [sp, #40]	; 0x28
    9246:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    924a:	9104      	str	r1, [sp, #16]
    924c:	9003      	str	r0, [sp, #12]
    924e:	9202      	str	r2, [sp, #8]
    9250:	e7ff      	b.n	9252 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x24>
    9252:	9802      	ldr	r0, [sp, #8]
    9254:	9902      	ldr	r1, [sp, #8]
    9256:	910d      	str	r1, [sp, #52]	; 0x34
    9258:	9a04      	ldr	r2, [sp, #16]
    925a:	6813      	ldr	r3, [r2, #0]
    925c:	2b00      	cmp	r3, #0
    925e:	bf18      	it	ne
    9260:	2301      	movne	r3, #1
    9262:	f04f 0c00 	mov.w	ip, #0
    9266:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    926a:	930e      	str	r3, [sp, #56]	; 0x38
    926c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    926e:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    9272:	9001      	str	r0, [sp, #4]
    9274:	9300      	str	r3, [sp, #0]
    9276:	e7ff      	b.n	9278 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x4a>
    9278:	9800      	ldr	r0, [sp, #0]
    927a:	9011      	str	r0, [sp, #68]	; 0x44
    927c:	9901      	ldr	r1, [sp, #4]
    927e:	4281      	cmp	r1, r0
    9280:	d104      	bne.n	928c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x5e>
    9282:	e7ff      	b.n	9284 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x56>
    9284:	2001      	movs	r0, #1
    9286:	f88d 0017 	strb.w	r0, [sp, #23]
    928a:	e003      	b.n	9294 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    928c:	2000      	movs	r0, #0
    928e:	f88d 0017 	strb.w	r0, [sp, #23]
    9292:	e7ff      	b.n	9294 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    9294:	f89d 0017 	ldrb.w	r0, [sp, #23]
    9298:	07c0      	lsls	r0, r0, #31
    929a:	2800      	cmp	r0, #0
    929c:	d104      	bne.n	92a8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x7a>
    929e:	e7ff      	b.n	92a0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x72>
    92a0:	2000      	movs	r0, #0
    92a2:	f88d 0016 	strb.w	r0, [sp, #22]
    92a6:	e01c      	b.n	92e2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    92a8:	9803      	ldr	r0, [sp, #12]
    92aa:	9006      	str	r0, [sp, #24]
    92ac:	9904      	ldr	r1, [sp, #16]
    92ae:	9107      	str	r1, [sp, #28]
    92b0:	9a06      	ldr	r2, [sp, #24]
    92b2:	6812      	ldr	r2, [r2, #0]
    92b4:	2a00      	cmp	r2, #0
    92b6:	d104      	bne.n	92c2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x94>
    92b8:	e7ff      	b.n	92ba <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    92ba:	2001      	movs	r0, #1
    92bc:	f88d 0016 	strb.w	r0, [sp, #22]
    92c0:	e00e      	b.n	92e0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    92c2:	9807      	ldr	r0, [sp, #28]
    92c4:	6800      	ldr	r0, [r0, #0]
    92c6:	2800      	cmp	r0, #0
    92c8:	d0f7      	beq.n	92ba <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    92ca:	e7ff      	b.n	92cc <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x9e>
    92cc:	9806      	ldr	r0, [sp, #24]
    92ce:	9012      	str	r0, [sp, #72]	; 0x48
    92d0:	9907      	ldr	r1, [sp, #28]
    92d2:	9113      	str	r1, [sp, #76]	; 0x4c
    92d4:	f009 fb75 	bl	129c2 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>
    92d8:	f88d 0016 	strb.w	r0, [sp, #22]
    92dc:	e7ff      	b.n	92de <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb0>
    92de:	e7ff      	b.n	92e0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    92e0:	e7ff      	b.n	92e2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    92e2:	f89d 0016 	ldrb.w	r0, [sp, #22]
    92e6:	b014      	add	sp, #80	; 0x50
    92e8:	bd80      	pop	{r7, pc}

000092ea <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E>:
    92ea:	b580      	push	{r7, lr}
    92ec:	b084      	sub	sp, #16
    92ee:	9002      	str	r0, [sp, #8]
    92f0:	9103      	str	r1, [sp, #12]
    92f2:	6800      	ldr	r0, [r0, #0]
    92f4:	f009 faf7 	bl	128e6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>
    92f8:	9001      	str	r0, [sp, #4]
    92fa:	e7ff      	b.n	92fc <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E+0x12>
    92fc:	9801      	ldr	r0, [sp, #4]
    92fe:	f000 0001 	and.w	r0, r0, #1
    9302:	b004      	add	sp, #16
    9304:	bd80      	pop	{r7, pc}

00009306 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>:
    9306:	b580      	push	{r7, lr}
    9308:	b084      	sub	sp, #16
    930a:	9002      	str	r0, [sp, #8]
    930c:	9103      	str	r1, [sp, #12]
    930e:	6800      	ldr	r0, [r0, #0]
    9310:	f009 fab2 	bl	12878 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>
    9314:	9001      	str	r0, [sp, #4]
    9316:	e7ff      	b.n	9318 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E+0x12>
    9318:	9801      	ldr	r0, [sp, #4]
    931a:	f000 0001 	and.w	r0, r0, #1
    931e:	b004      	add	sp, #16
    9320:	bd80      	pop	{r7, pc}

00009322 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E>:
    9322:	b580      	push	{r7, lr}
    9324:	b084      	sub	sp, #16
    9326:	9002      	str	r0, [sp, #8]
    9328:	9103      	str	r1, [sp, #12]
    932a:	6800      	ldr	r0, [r0, #0]
    932c:	f7ff ffeb 	bl	9306 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>
    9330:	9001      	str	r0, [sp, #4]
    9332:	e7ff      	b.n	9334 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E+0x12>
    9334:	9801      	ldr	r0, [sp, #4]
    9336:	f000 0001 	and.w	r0, r0, #1
    933a:	b004      	add	sp, #16
    933c:	bd80      	pop	{r7, pc}

0000933e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE>:
    933e:	b580      	push	{r7, lr}
    9340:	b084      	sub	sp, #16
    9342:	9002      	str	r0, [sp, #8]
    9344:	9103      	str	r1, [sp, #12]
    9346:	6800      	ldr	r0, [r0, #0]
    9348:	f009 fb04 	bl	12954 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>
    934c:	9001      	str	r0, [sp, #4]
    934e:	e7ff      	b.n	9350 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE+0x12>
    9350:	9801      	ldr	r0, [sp, #4]
    9352:	f000 0001 	and.w	r0, r0, #1
    9356:	b004      	add	sp, #16
    9358:	bd80      	pop	{r7, pc}

0000935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>:
    935a:	b089      	sub	sp, #36	; 0x24
    935c:	9005      	str	r0, [sp, #20]
    935e:	9106      	str	r1, [sp, #24]
    9360:	9107      	str	r1, [sp, #28]
    9362:	9907      	ldr	r1, [sp, #28]
    9364:	9002      	str	r0, [sp, #8]
    9366:	9101      	str	r1, [sp, #4]
    9368:	e7ff      	b.n	936a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x10>
    936a:	9802      	ldr	r0, [sp, #8]
    936c:	9008      	str	r0, [sp, #32]
    936e:	9908      	ldr	r1, [sp, #32]
    9370:	9100      	str	r1, [sp, #0]
    9372:	e7ff      	b.n	9374 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x1a>
    9374:	9800      	ldr	r0, [sp, #0]
    9376:	9003      	str	r0, [sp, #12]
    9378:	9901      	ldr	r1, [sp, #4]
    937a:	9104      	str	r1, [sp, #16]
    937c:	9803      	ldr	r0, [sp, #12]
    937e:	9904      	ldr	r1, [sp, #16]
    9380:	b009      	add	sp, #36	; 0x24
    9382:	4770      	bx	lr

00009384 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>:
    9384:	b089      	sub	sp, #36	; 0x24
    9386:	9005      	str	r0, [sp, #20]
    9388:	9106      	str	r1, [sp, #24]
    938a:	9107      	str	r1, [sp, #28]
    938c:	9907      	ldr	r1, [sp, #28]
    938e:	9002      	str	r0, [sp, #8]
    9390:	9101      	str	r1, [sp, #4]
    9392:	e7ff      	b.n	9394 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x10>
    9394:	9802      	ldr	r0, [sp, #8]
    9396:	9008      	str	r0, [sp, #32]
    9398:	9908      	ldr	r1, [sp, #32]
    939a:	9100      	str	r1, [sp, #0]
    939c:	e7ff      	b.n	939e <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x1a>
    939e:	9800      	ldr	r0, [sp, #0]
    93a0:	9003      	str	r0, [sp, #12]
    93a2:	9901      	ldr	r1, [sp, #4]
    93a4:	9104      	str	r1, [sp, #16]
    93a6:	9803      	ldr	r0, [sp, #12]
    93a8:	9904      	ldr	r1, [sp, #16]
    93aa:	b009      	add	sp, #36	; 0x24
    93ac:	4770      	bx	lr

000093ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>:
    93ae:	b089      	sub	sp, #36	; 0x24
    93b0:	9005      	str	r0, [sp, #20]
    93b2:	9106      	str	r1, [sp, #24]
    93b4:	9107      	str	r1, [sp, #28]
    93b6:	9907      	ldr	r1, [sp, #28]
    93b8:	9002      	str	r0, [sp, #8]
    93ba:	9101      	str	r1, [sp, #4]
    93bc:	e7ff      	b.n	93be <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x10>
    93be:	9802      	ldr	r0, [sp, #8]
    93c0:	9008      	str	r0, [sp, #32]
    93c2:	9908      	ldr	r1, [sp, #32]
    93c4:	9100      	str	r1, [sp, #0]
    93c6:	e7ff      	b.n	93c8 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x1a>
    93c8:	9800      	ldr	r0, [sp, #0]
    93ca:	9003      	str	r0, [sp, #12]
    93cc:	9901      	ldr	r1, [sp, #4]
    93ce:	9104      	str	r1, [sp, #16]
    93d0:	9803      	ldr	r0, [sp, #12]
    93d2:	9904      	ldr	r1, [sp, #16]
    93d4:	b009      	add	sp, #36	; 0x24
    93d6:	4770      	bx	lr

000093d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>:
    93d8:	b089      	sub	sp, #36	; 0x24
    93da:	9005      	str	r0, [sp, #20]
    93dc:	9106      	str	r1, [sp, #24]
    93de:	9107      	str	r1, [sp, #28]
    93e0:	9907      	ldr	r1, [sp, #28]
    93e2:	9002      	str	r0, [sp, #8]
    93e4:	9101      	str	r1, [sp, #4]
    93e6:	e7ff      	b.n	93e8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x10>
    93e8:	9802      	ldr	r0, [sp, #8]
    93ea:	9008      	str	r0, [sp, #32]
    93ec:	9908      	ldr	r1, [sp, #32]
    93ee:	9100      	str	r1, [sp, #0]
    93f0:	e7ff      	b.n	93f2 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x1a>
    93f2:	9800      	ldr	r0, [sp, #0]
    93f4:	9003      	str	r0, [sp, #12]
    93f6:	9901      	ldr	r1, [sp, #4]
    93f8:	9104      	str	r1, [sp, #16]
    93fa:	9803      	ldr	r0, [sp, #12]
    93fc:	9904      	ldr	r1, [sp, #16]
    93fe:	b009      	add	sp, #36	; 0x24
    9400:	4770      	bx	lr

00009402 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>:
    9402:	b580      	push	{r7, lr}
    9404:	b088      	sub	sp, #32
    9406:	9004      	str	r0, [sp, #16]
    9408:	9105      	str	r1, [sp, #20]
    940a:	f000 f819 	bl	9440 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>
    940e:	9001      	str	r0, [sp, #4]
    9410:	9100      	str	r1, [sp, #0]
    9412:	e7ff      	b.n	9414 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x12>
    9414:	9801      	ldr	r0, [sp, #4]
    9416:	9006      	str	r0, [sp, #24]
    9418:	9900      	ldr	r1, [sp, #0]
    941a:	f001 0201 	and.w	r2, r1, #1
    941e:	f88d 201f 	strb.w	r2, [sp, #31]
    9422:	2a00      	cmp	r2, #0
    9424:	d105      	bne.n	9432 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x30>
    9426:	e7ff      	b.n	9428 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x26>
    9428:	9801      	ldr	r0, [sp, #4]
    942a:	9003      	str	r0, [sp, #12]
    942c:	2101      	movs	r1, #1
    942e:	9102      	str	r1, [sp, #8]
    9430:	e002      	b.n	9438 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    9432:	2000      	movs	r0, #0
    9434:	9002      	str	r0, [sp, #8]
    9436:	e7ff      	b.n	9438 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    9438:	9802      	ldr	r0, [sp, #8]
    943a:	9903      	ldr	r1, [sp, #12]
    943c:	b008      	add	sp, #32
    943e:	bd80      	pop	{r7, pc}

00009440 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>:
    9440:	b08a      	sub	sp, #40	; 0x28
    9442:	9004      	str	r0, [sp, #16]
    9444:	9105      	str	r1, [sp, #20]
    9446:	1a40      	subs	r0, r0, r1
    9448:	f04f 0100 	mov.w	r1, #0
    944c:	f141 0100 	adc.w	r1, r1, #0
    9450:	f1c1 0101 	rsb	r1, r1, #1
    9454:	9006      	str	r0, [sp, #24]
    9456:	f88d 101c 	strb.w	r1, [sp, #28]
    945a:	9806      	ldr	r0, [sp, #24]
    945c:	f89d 101c 	ldrb.w	r1, [sp, #28]
    9460:	9001      	str	r0, [sp, #4]
    9462:	9100      	str	r1, [sp, #0]
    9464:	e7ff      	b.n	9466 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E+0x26>
    9466:	9801      	ldr	r0, [sp, #4]
    9468:	9008      	str	r0, [sp, #32]
    946a:	9900      	ldr	r1, [sp, #0]
    946c:	f001 0201 	and.w	r2, r1, #1
    9470:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    9474:	9002      	str	r0, [sp, #8]
    9476:	f88d 200c 	strb.w	r2, [sp, #12]
    947a:	9802      	ldr	r0, [sp, #8]
    947c:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9480:	b00a      	add	sp, #40	; 0x28
    9482:	4770      	bx	lr

00009484 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>:
    baudrate:   8000,  //  In kHZ. Use SPI at 8MHz (the fastest clock available on the nRF52832) because otherwise refreshing will be super slow.
    word_size:  hal::HAL_SPI_WORD_SIZE_8BIT as u8,
};

/// Initialise the display controller
pub fn start_display() -> MynewtResult<()> {
    9484:	b5b0      	push	{r4, r5, r7, lr}
    9486:	b0b2      	sub	sp, #200	; 0xc8
    //  Create SPI port and GPIO pins
    let mut spi_port = mynewt::SPI::new();
    9488:	f00a fe35 	bl	140f6 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>
    948c:	9115      	str	r1, [sp, #84]	; 0x54
    948e:	9014      	str	r0, [sp, #80]	; 0x50
    9490:	e7ff      	b.n	9492 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe>
    let mut dc_gpio =  mynewt::GPIO::new();
    9492:	f00a ffee 	bl	14472 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    9496:	9016      	str	r0, [sp, #88]	; 0x58
    9498:	e7ff      	b.n	949a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16>
    let mut rst_gpio = mynewt::GPIO::new();
    949a:	f00a ffea 	bl	14472 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    949e:	9017      	str	r0, [sp, #92]	; 0x5c
    94a0:	e7ff      	b.n	94a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e>

    //  Init SPI port and GPIO pins
    spi_port.init(
    94a2:	f240 03e8 	movw	r3, #232	; 0xe8
    94a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    94aa:	a814      	add	r0, sp, #80	; 0x50
    94ac:	2100      	movs	r1, #0
    94ae:	2219      	movs	r2, #25
    94b0:	f00a fe29 	bl	14106 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>
    94b4:	9012      	str	r0, [sp, #72]	; 0x48
    94b6:	e7ff      	b.n	94b8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x34>
    94b8:	9812      	ldr	r0, [sp, #72]	; 0x48
    94ba:	f7ff fb5d 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    94be:	9018      	str	r0, [sp, #96]	; 0x60
    94c0:	e7ff      	b.n	94c2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x3e>
        DISPLAY_SPI, //  Mynewt SPI port 0
        DISPLAY_CS,  //  LCD_CS (P0.25): Chip select
        unsafe { &mut SPI_SETTINGS }
    ) ? ;
    94c2:	9818      	ldr	r0, [sp, #96]	; 0x60
    94c4:	1e41      	subs	r1, r0, #1
    94c6:	bf18      	it	ne
    94c8:	2101      	movne	r1, #1
    94ca:	2801      	cmp	r0, #1
    94cc:	d001      	beq.n	94d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4e>
    94ce:	e7ff      	b.n	94d0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4c>
    94d0:	e006      	b.n	94e0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x5c>
    94d2:	a816      	add	r0, sp, #88	; 0x58
    94d4:	2112      	movs	r1, #18
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    94d6:	f00a ffce 	bl	14476 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    94da:	9011      	str	r0, [sp, #68]	; 0x44
    94dc:	e010      	b.n	9500 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7c>
    spi_port.init(
    94de:	defe      	udf	#254	; 0xfe
    ) ? ;
    94e0:	9818      	ldr	r0, [sp, #96]	; 0x60
    94e2:	902d      	str	r0, [sp, #180]	; 0xb4
    94e4:	f009 f9c4 	bl	12870 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    94e8:	9010      	str	r0, [sp, #64]	; 0x40
    94ea:	e002      	b.n	94f2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x6e>
    unsafe {
        DISPLAY.init(&mut delay) ? ;
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    }
    Ok(())
}
    94ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
    94ee:	b032      	add	sp, #200	; 0xc8
    94f0:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;
    94f2:	9810      	ldr	r0, [sp, #64]	; 0x40
    94f4:	f7ff fb34 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    94f8:	9013      	str	r0, [sp, #76]	; 0x4c
    94fa:	e7ff      	b.n	94fc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x78>
    94fc:	e7ff      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    94fe:	e7f5      	b.n	94ec <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    9500:	9811      	ldr	r0, [sp, #68]	; 0x44
    9502:	f7ff fb39 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9506:	9019      	str	r0, [sp, #100]	; 0x64
    9508:	e7ff      	b.n	950a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x86>
    950a:	9819      	ldr	r0, [sp, #100]	; 0x64
    950c:	1e41      	subs	r1, r0, #1
    950e:	bf18      	it	ne
    9510:	2101      	movne	r1, #1
    9512:	2801      	cmp	r0, #1
    9514:	d001      	beq.n	951a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x96>
    9516:	e7ff      	b.n	9518 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x94>
    9518:	e006      	b.n	9528 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xa4>
    951a:	a817      	add	r0, sp, #92	; 0x5c
    951c:	211a      	movs	r1, #26
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    951e:	f00a ffaa 	bl	14476 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    9522:	900f      	str	r0, [sp, #60]	; 0x3c
    9524:	e00c      	b.n	9540 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xbc>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    9526:	defe      	udf	#254	; 0xfe
    9528:	9819      	ldr	r0, [sp, #100]	; 0x64
    952a:	902e      	str	r0, [sp, #184]	; 0xb8
    952c:	f009 f9a0 	bl	12870 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9530:	900e      	str	r0, [sp, #56]	; 0x38
    9532:	e7ff      	b.n	9534 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xb0>
    9534:	980e      	ldr	r0, [sp, #56]	; 0x38
    9536:	f7ff fb13 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    953a:	9013      	str	r0, [sp, #76]	; 0x4c
    953c:	e7ff      	b.n	953e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xba>
    953e:	e7de      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9540:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9542:	f7ff fb19 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9546:	901a      	str	r0, [sp, #104]	; 0x68
    9548:	e7ff      	b.n	954a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xc6>
    954a:	981a      	ldr	r0, [sp, #104]	; 0x68
    954c:	1e41      	subs	r1, r0, #1
    954e:	bf18      	it	ne
    9550:	2101      	movne	r1, #1
    9552:	2801      	cmp	r0, #1
    9554:	d001      	beq.n	955a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd6>
    9556:	e7ff      	b.n	9558 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd4>
    9558:	e004      	b.n	9564 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe0>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    955a:	f00a ff8a 	bl	14472 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    955e:	900d      	str	r0, [sp, #52]	; 0x34
    9560:	e00c      	b.n	957c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf8>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9562:	defe      	udf	#254	; 0xfe
    9564:	981a      	ldr	r0, [sp, #104]	; 0x68
    9566:	902f      	str	r0, [sp, #188]	; 0xbc
    9568:	f009 f982 	bl	12870 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    956c:	900c      	str	r0, [sp, #48]	; 0x30
    956e:	e7ff      	b.n	9570 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xec>
    9570:	980c      	ldr	r0, [sp, #48]	; 0x30
    9572:	f7ff faf5 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9576:	9013      	str	r0, [sp, #76]	; 0x4c
    9578:	e7ff      	b.n	957a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf6>
    957a:	e7c0      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    957c:	f240 1060 	movw	r0, #352	; 0x160
    9580:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9584:	990d      	ldr	r1, [sp, #52]	; 0x34
    9586:	6001      	str	r1, [r0, #0]
    9588:	2117      	movs	r1, #23
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    958a:	f00a ff74 	bl	14476 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    958e:	900b      	str	r0, [sp, #44]	; 0x2c
    9590:	e7ff      	b.n	9592 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x10e>
    9592:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9594:	f7ff faf0 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9598:	901b      	str	r0, [sp, #108]	; 0x6c
    959a:	e7ff      	b.n	959c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x118>
    959c:	981b      	ldr	r0, [sp, #108]	; 0x6c
    959e:	1e41      	subs	r1, r0, #1
    95a0:	bf18      	it	ne
    95a2:	2101      	movne	r1, #1
    95a4:	2801      	cmp	r0, #1
    95a6:	d001      	beq.n	95ac <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x128>
    95a8:	e7ff      	b.n	95aa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x126>
    95aa:	e008      	b.n	95be <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x13a>
        BACKLIGHT_HIGH.set_low() ? ;    
    95ac:	f240 1060 	movw	r0, #352	; 0x160
    95b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    95b4:	f00a fff8 	bl	145a8 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    95b8:	900a      	str	r0, [sp, #40]	; 0x28
    95ba:	e00d      	b.n	95d8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x154>
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    95bc:	defe      	udf	#254	; 0xfe
    95be:	981b      	ldr	r0, [sp, #108]	; 0x6c
    95c0:	9030      	str	r0, [sp, #192]	; 0xc0
    95c2:	f009 f955 	bl	12870 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    95c6:	9009      	str	r0, [sp, #36]	; 0x24
    95c8:	e7ff      	b.n	95ca <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x146>
    95ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    95cc:	f7ff fac8 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    95d0:	9013      	str	r0, [sp, #76]	; 0x4c
    95d2:	e7ff      	b.n	95d4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x150>
    95d4:	e7ff      	b.n	95d6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    95d6:	e792      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH.set_low() ? ;    
    95d8:	980a      	ldr	r0, [sp, #40]	; 0x28
    95da:	f7ff facd 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    95de:	901c      	str	r0, [sp, #112]	; 0x70
    95e0:	e7ff      	b.n	95e2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x15e>
    95e2:	981c      	ldr	r0, [sp, #112]	; 0x70
    95e4:	1e41      	subs	r1, r0, #1
    95e6:	bf18      	it	ne
    95e8:	2101      	movne	r1, #1
    95ea:	2801      	cmp	r0, #1
    95ec:	d001      	beq.n	95f2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16e>
    95ee:	e7ff      	b.n	95f0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16c>
    95f0:	e011      	b.n	9616 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x192>
        spi_port,    //  SPI Port
    95f2:	9914      	ldr	r1, [sp, #80]	; 0x50
    95f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
        dc_gpio,     //  GPIO Pin for DC
    95f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
        rst_gpio,    //  GPIO Pin for RST
    95f8:	9817      	ldr	r0, [sp, #92]	; 0x5c
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    95fa:	46ec      	mov	ip, sp
    95fc:	f04f 0e01 	mov.w	lr, #1
    9600:	f8cc e008 	str.w	lr, [ip, #8]
    9604:	f8cc e004 	str.w	lr, [ip, #4]
    9608:	f8cc 0000 	str.w	r0, [ip]
    960c:	a81d      	add	r0, sp, #116	; 0x74
    960e:	f000 fc8c 	bl	9f2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>
    9612:	e00c      	b.n	962e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1aa>
        BACKLIGHT_HIGH.set_low() ? ;    
    9614:	defe      	udf	#254	; 0xfe
    9616:	981c      	ldr	r0, [sp, #112]	; 0x70
    9618:	9031      	str	r0, [sp, #196]	; 0xc4
    961a:	f009 f929 	bl	12870 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    961e:	9008      	str	r0, [sp, #32]
    9620:	e7ff      	b.n	9622 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x19e>
    9622:	9808      	ldr	r0, [sp, #32]
    9624:	f7ff fa9c 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9628:	9013      	str	r0, [sp, #76]	; 0x4c
    962a:	e7ff      	b.n	962c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1a8>
    962c:	e7d3      	b.n	95d6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    962e:	f240 1048 	movw	r0, #328	; 0x148
    9632:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9636:	a91d      	add	r1, sp, #116	; 0x74
    9638:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    963c:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    let mut delay = mynewt::Delay::new();
    9640:	f00a ffc8 	bl	145d4 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>
    9644:	e7ff      	b.n	9646 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1c2>
        DISPLAY.init(&mut delay) ? ;
    9646:	f240 1048 	movw	r0, #328	; 0x148
    964a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    964e:	a923      	add	r1, sp, #140	; 0x8c
    9650:	f000 fc8d 	bl	9f6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>
    9654:	9007      	str	r0, [sp, #28]
    9656:	e7ff      	b.n	9658 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1d4>
    9658:	9807      	ldr	r0, [sp, #28]
    965a:	f000 0001 	and.w	r0, r0, #1
    965e:	f7ff fa85 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9662:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
    9666:	e7ff      	b.n	9668 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e4>
    9668:	f89d 008e 	ldrb.w	r0, [sp, #142]	; 0x8e
    966c:	07c1      	lsls	r1, r0, #31
    966e:	2900      	cmp	r1, #0
    9670:	d001      	beq.n	9676 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f2>
    9672:	e7ff      	b.n	9674 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f0>
    9674:	e00d      	b.n	9692 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x20e>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    9676:	f24e 40b0 	movw	r0, #58544	; 0xe4b0
    967a:	f2c0 0001 	movt	r0, #1
    967e:	6801      	ldr	r1, [r0, #0]
    9680:	f240 1048 	movw	r0, #328	; 0x148
    9684:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9688:	f000 fa86 	bl	9b98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>
    968c:	9006      	str	r0, [sp, #24]
    968e:	e00b      	b.n	96a8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x224>
        DISPLAY.init(&mut delay) ? ;
    9690:	defe      	udf	#254	; 0xfe
    9692:	f7ff f9f8 	bl	8a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    9696:	9005      	str	r0, [sp, #20]
    9698:	e7ff      	b.n	969a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x216>
    969a:	9805      	ldr	r0, [sp, #20]
    969c:	f7ff fa60 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    96a0:	9013      	str	r0, [sp, #76]	; 0x4c
    96a2:	e7ff      	b.n	96a4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x220>
    96a4:	e7ff      	b.n	96a6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>
    96a6:	e72a      	b.n	94fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    96a8:	9806      	ldr	r0, [sp, #24]
    96aa:	f000 0001 	and.w	r0, r0, #1
    96ae:	f7ff fa5d 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    96b2:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
    96b6:	e7ff      	b.n	96b8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x234>
    96b8:	f89d 008f 	ldrb.w	r0, [sp, #143]	; 0x8f
    96bc:	07c1      	lsls	r1, r0, #31
    96be:	2900      	cmp	r1, #0
    96c0:	d001      	beq.n	96c6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x242>
    96c2:	e7ff      	b.n	96c4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x240>
    96c4:	e005      	b.n	96d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x24e>
    96c6:	2000      	movs	r0, #0
    Ok(())
    96c8:	9013      	str	r0, [sp, #76]	; 0x4c
    96ca:	2001      	movs	r0, #1
    96cc:	9013      	str	r0, [sp, #76]	; 0x4c
}
    96ce:	e70d      	b.n	94ec <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    96d0:	defe      	udf	#254	; 0xfe
    96d2:	f7ff f9d8 	bl	8a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    96d6:	9004      	str	r0, [sp, #16]
    96d8:	e7ff      	b.n	96da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x256>
    96da:	9804      	ldr	r0, [sp, #16]
    96dc:	f7ff fa40 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    96e0:	9013      	str	r0, [sp, #76]	; 0x4c
    96e2:	e7ff      	b.n	96e4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x260>
    96e4:	e7df      	b.n	96a6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>

000096e6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>:
    }

    /// Converts the value of `self` to a `u8`. If the value cannot be
    /// represented by a `u8`, then `None` is returned.
    #[inline]
    fn to_u8(&self) -> Option<u8> {
    96e6:	b580      	push	{r7, lr}
    96e8:	b08a      	sub	sp, #40	; 0x28
    96ea:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    96ec:	f001 faa3 	bl	ac36 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>
    96f0:	9307      	str	r3, [sp, #28]
    96f2:	9206      	str	r2, [sp, #24]
    96f4:	9105      	str	r1, [sp, #20]
    96f6:	9004      	str	r0, [sp, #16]
    96f8:	e7ff      	b.n	96fa <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x14>
    96fa:	a804      	add	r0, sp, #16
    96fc:	f00b f855 	bl	147aa <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    9700:	9003      	str	r0, [sp, #12]
    9702:	e7ff      	b.n	9704 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x1e>
    9704:	9803      	ldr	r0, [sp, #12]
    9706:	f00b f923 	bl	14950 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    970a:	9002      	str	r0, [sp, #8]
    970c:	9101      	str	r1, [sp, #4]
    970e:	e7ff      	b.n	9710 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x2a>
    }
    9710:	9802      	ldr	r0, [sp, #8]
    9712:	f000 0001 	and.w	r0, r0, #1
    9716:	9901      	ldr	r1, [sp, #4]
    9718:	b00a      	add	sp, #40	; 0x28
    971a:	bd80      	pop	{r7, pc}

0000971c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>:
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }

    pub fn hard_reset(&mut self) -> Result<(), ()>
    971c:	b580      	push	{r7, lr}
    971e:	b090      	sub	sp, #64	; 0x40
    9720:	900b      	str	r0, [sp, #44]	; 0x2c
    {
        self.rst.set_high().map_err(|_| ())?;
    9722:	f100 010c 	add.w	r1, r0, #12
    9726:	9006      	str	r0, [sp, #24]
    9728:	4608      	mov	r0, r1
    972a:	f00a ff48 	bl	145be <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    972e:	9005      	str	r0, [sp, #20]
    9730:	e7ff      	b.n	9732 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x16>
    9732:	9805      	ldr	r0, [sp, #20]
    9734:	f00b fea3 	bl	1547e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>
    9738:	9004      	str	r0, [sp, #16]
    973a:	e7ff      	b.n	973c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x20>
    973c:	9804      	ldr	r0, [sp, #16]
    973e:	f000 0001 	and.w	r0, r0, #1
    9742:	f7ff fa13 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9746:	f88d 001f 	strb.w	r0, [sp, #31]
    974a:	e7ff      	b.n	974c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x30>
    974c:	f89d 001f 	ldrb.w	r0, [sp, #31]
    9750:	07c1      	lsls	r1, r0, #31
    9752:	2900      	cmp	r1, #0
    9754:	d001      	beq.n	975a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3e>
    9756:	e7ff      	b.n	9758 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3c>
    9758:	e006      	b.n	9768 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x4c>
        self.rst.set_low().map_err(|_| ())?;
    975a:	9806      	ldr	r0, [sp, #24]
    975c:	300c      	adds	r0, #12
    975e:	f00a ff23 	bl	145a8 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    9762:	9003      	str	r0, [sp, #12]
    9764:	e00d      	b.n	9782 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x66>
        self.rst.set_high().map_err(|_| ())?;
    9766:	defe      	udf	#254	; 0xfe
    9768:	f008 fc4d 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    976c:	e003      	b.n	9776 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x5a>
        self.rst.set_high().map_err(|_| ())
    }
    976e:	f89d 001e 	ldrb.w	r0, [sp, #30]
    9772:	b010      	add	sp, #64	; 0x40
    9774:	bd80      	pop	{r7, pc}
        self.rst.set_high().map_err(|_| ())?;
    9776:	f00b fed7 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    977a:	f88d 001e 	strb.w	r0, [sp, #30]
    977e:	e7ff      	b.n	9780 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x64>
    9780:	e7f5      	b.n	976e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_low().map_err(|_| ())?;
    9782:	9803      	ldr	r0, [sp, #12]
    9784:	f00b fe26 	bl	153d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>
    9788:	9002      	str	r0, [sp, #8]
    978a:	e7ff      	b.n	978c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x70>
    978c:	9802      	ldr	r0, [sp, #8]
    978e:	f000 0001 	and.w	r0, r0, #1
    9792:	f7ff f9eb 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9796:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    979a:	e7ff      	b.n	979c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x80>
    979c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    97a0:	07c1      	lsls	r1, r0, #31
    97a2:	2900      	cmp	r1, #0
    97a4:	d001      	beq.n	97aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8e>
    97a6:	e7ff      	b.n	97a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8c>
    97a8:	e006      	b.n	97b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x9c>
        self.rst.set_high().map_err(|_| ())
    97aa:	9806      	ldr	r0, [sp, #24]
    97ac:	300c      	adds	r0, #12
    97ae:	f00a ff06 	bl	145be <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    97b2:	9001      	str	r0, [sp, #4]
    97b4:	e009      	b.n	97ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xae>
        self.rst.set_low().map_err(|_| ())?;
    97b6:	defe      	udf	#254	; 0xfe
    97b8:	f008 fc25 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    97bc:	e7ff      	b.n	97be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xa2>
    97be:	f00b feb3 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    97c2:	f88d 001e 	strb.w	r0, [sp, #30]
    97c6:	e7ff      	b.n	97c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xac>
    97c8:	e7d1      	b.n	976e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_high().map_err(|_| ())
    97ca:	9801      	ldr	r0, [sp, #4]
    97cc:	f00b fdad 	bl	1532a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>
    97d0:	f88d 001e 	strb.w	r0, [sp, #30]
    97d4:	e7ff      	b.n	97d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xba>
    }
    97d6:	e7ca      	b.n	976e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>

000097d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>:
        self.rst.set_low().map_err(|_| ())?;
    97d8:	b082      	sub	sp, #8
    97da:	9001      	str	r0, [sp, #4]
    97dc:	e7ff      	b.n	97de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE+0x6>
    97de:	b002      	add	sp, #8
    97e0:	4770      	bx	lr

000097e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>:
        self.rst.set_high().map_err(|_| ())?;
    97e2:	b082      	sub	sp, #8
    97e4:	9001      	str	r0, [sp, #4]
    97e6:	e7ff      	b.n	97e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE+0x6>
    97e8:	b002      	add	sp, #8
    97ea:	4770      	bx	lr

000097ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>:
        self.rst.set_high().map_err(|_| ())
    97ec:	b082      	sub	sp, #8
    97ee:	9001      	str	r0, [sp, #4]
    97f0:	e7ff      	b.n	97f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE+0x6>
    97f2:	b002      	add	sp, #8
    97f4:	4770      	bx	lr

000097f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>:
            .expect("spi flush fail");
        Ok(())
    }

    /// Sets pixel colors at the given drawing window
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    97f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    97f8:	b0c7      	sub	sp, #284	; 0x11c
    97fa:	f8dd c134 	ldr.w	ip, [sp, #308]	; 0x134
    97fe:	f8dd e130 	ldr.w	lr, [sp, #304]	; 0x130
    9802:	461c      	mov	r4, r3
    9804:	4615      	mov	r5, r2
    9806:	460e      	mov	r6, r1
    9808:	9040      	str	r0, [sp, #256]	; 0x100
    980a:	f8ad 1104 	strh.w	r1, [sp, #260]	; 0x104
    980e:	f8ad 2106 	strh.w	r2, [sp, #262]	; 0x106
    9812:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
    9816:	f8ad e10a 	strh.w	lr, [sp, #266]	; 0x10a
    981a:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
    981c:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
    9820:	2701      	movs	r7, #1
    9822:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
    9826:	466f      	mov	r7, sp
    9828:	f8c7 e000 	str.w	lr, [r7]
    982c:	900a      	str	r0, [sp, #40]	; 0x28
    982e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    9832:	9408      	str	r4, [sp, #32]
    9834:	9507      	str	r5, [sp, #28]
    9836:	9606      	str	r6, [sp, #24]
    9838:	f000 fa44 	bl	9cc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
    983c:	9005      	str	r0, [sp, #20]
    983e:	e7ff      	b.n	9840 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x4a>
    9840:	9805      	ldr	r0, [sp, #20]
    9842:	f000 0001 	and.w	r0, r0, #1
    9846:	f7ff f991 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    984a:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    984e:	e7ff      	b.n	9850 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x5a>
    9850:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    9854:	07c1      	lsls	r1, r0, #31
    9856:	2900      	cmp	r1, #0
    9858:	d001      	beq.n	985e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x68>
    985a:	e7ff      	b.n	985c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x66>
    985c:	e00f      	b.n	987e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x88>
    985e:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
    9860:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    9864:	a80c      	add	r0, sp, #48	; 0x30
    9866:	22cc      	movs	r2, #204	; 0xcc
    9868:	9004      	str	r0, [sp, #16]
    986a:	9909      	ldr	r1, [sp, #36]	; 0x24
    986c:	f014 fc88 	bl	1e180 <__aeabi_memcpy>
    9870:	980a      	ldr	r0, [sp, #40]	; 0x28
    9872:	9904      	ldr	r1, [sp, #16]
    9874:	f000 f884 	bl	9980 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>
    9878:	9003      	str	r0, [sp, #12]
    987a:	e00d      	b.n	9898 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa2>
        self.set_address_window(sx, sy, ex, ey)?;
    987c:	defe      	udf	#254	; 0xfe
    987e:	f008 fbc2 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9882:	e003      	b.n	988c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x96>

        #[cfg(feature = "noblock_spi")]         //  If non-blocking SPI is enabled...
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }
    9884:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    9888:	b047      	add	sp, #284	; 0x11c
    988a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
    988c:	f00b fe4c 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9890:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9894:	e7ff      	b.n	9896 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa0>
    9896:	e034      	b.n	9902 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        self.write_pixels(colors) ? ;
    9898:	9803      	ldr	r0, [sp, #12]
    989a:	f000 0001 	and.w	r0, r0, #1
    989e:	f7ff f965 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    98a2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    98a6:	e7ff      	b.n	98a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xb2>
    98a8:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    98ac:	07c1      	lsls	r1, r0, #31
    98ae:	2900      	cmp	r1, #0
    98b0:	d001      	beq.n	98b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xc0>
    98b2:	e7ff      	b.n	98b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xbe>
    98b4:	e004      	b.n	98c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xca>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    98b6:	f009 fec9 	bl	1364c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    98ba:	9002      	str	r0, [sp, #8]
    98bc:	e009      	b.n	98d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xdc>
        self.write_pixels(colors) ? ;
    98be:	defe      	udf	#254	; 0xfe
    98c0:	f008 fba1 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    98c4:	e7ff      	b.n	98c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xd0>
    98c6:	f00b fe2f 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    98ca:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    98ce:	e7ff      	b.n	98d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xda>
    98d0:	e017      	b.n	9902 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    98d2:	f24e 41b4 	movw	r1, #58548	; 0xe4b4
    98d6:	f2c0 0101 	movt	r1, #1
    98da:	f24e 5310 	movw	r3, #58640	; 0xe510
    98de:	f2c0 0301 	movt	r3, #1
    98e2:	220e      	movs	r2, #14
    98e4:	9802      	ldr	r0, [sp, #8]
    98e6:	f7ff f908 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    98ea:	e7ff      	b.n	98ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xf6>
    98ec:	2000      	movs	r0, #0
        Ok(())
    98ee:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    98f2:	e7c7      	b.n	9884 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
    98f4:	2000      	movs	r0, #0
    98f6:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    98fa:	9809      	ldr	r0, [sp, #36]	; 0x24
    98fc:	f000 ff1d 	bl	a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    9900:	e7c0      	b.n	9884 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
    9902:	f89d 00ff 	ldrb.w	r0, [sp, #255]	; 0xff
    9906:	07c0      	lsls	r0, r0, #31
    9908:	2800      	cmp	r0, #0
    990a:	d1f3      	bne.n	98f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xfe>
    990c:	e7ba      	b.n	9884 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>

0000990e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>:
    fn write_data(&mut self, data: &[u8]) -> Result<(), ()> {
    990e:	b580      	push	{r7, lr}
    9910:	b084      	sub	sp, #16
    9912:	9001      	str	r0, [sp, #4]
    9914:	9102      	str	r1, [sp, #8]
    9916:	9203      	str	r2, [sp, #12]
        mynewt::spi::spi_noblock_write_data(
    9918:	4608      	mov	r0, r1
    991a:	4611      	mov	r1, r2
    991c:	f009 fe02 	bl	13524 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9920:	9000      	str	r0, [sp, #0]
    9922:	e7ff      	b.n	9924 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x16>
    9924:	f24e 5120 	movw	r1, #58656	; 0xe520
    9928:	f2c0 0101 	movt	r1, #1
    992c:	f24e 5330 	movw	r3, #58672	; 0xe530
    9930:	f2c0 0301 	movt	r3, #1
    9934:	220d      	movs	r2, #13
    9936:	9800      	ldr	r0, [sp, #0]
    9938:	f7ff f8df 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    993c:	e7ff      	b.n	993e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x30>
    993e:	2000      	movs	r0, #0
    }
    9940:	b004      	add	sp, #16
    9942:	bd80      	pop	{r7, pc}

00009944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>:
    fn write_word(&mut self, value: u16) -> Result<(), ()> {
    9944:	b580      	push	{r7, lr}
    9946:	b088      	sub	sp, #32
    9948:	460a      	mov	r2, r1
    994a:	9006      	str	r0, [sp, #24]
    994c:	f8ad 101e 	strh.w	r1, [sp, #30]
        let bytes: [u8; 2] = unsafe { transmute(value.to_be()) };
    9950:	9004      	str	r0, [sp, #16]
    9952:	4608      	mov	r0, r1
    9954:	9203      	str	r2, [sp, #12]
    9956:	f000 feb9 	bl	a6cc <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>
    995a:	9002      	str	r0, [sp, #8]
    995c:	e7ff      	b.n	995e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x1a>
    995e:	9802      	ldr	r0, [sp, #8]
    9960:	f8ad 0016 	strh.w	r0, [sp, #22]
    9964:	e7ff      	b.n	9966 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x22>
    9966:	f10d 0116 	add.w	r1, sp, #22
    996a:	2202      	movs	r2, #2
        self.write_data(&bytes)
    996c:	9804      	ldr	r0, [sp, #16]
    996e:	f7ff ffce 	bl	990e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>
    9972:	9001      	str	r0, [sp, #4]
    9974:	e7ff      	b.n	9976 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x32>
    }
    9976:	9801      	ldr	r0, [sp, #4]
    9978:	f000 0001 	and.w	r0, r0, #1
    997c:	b008      	add	sp, #32
    997e:	bd80      	pop	{r7, pc}

00009980 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
    9980:	b580      	push	{r7, lr}
    9982:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
    9986:	90a8      	str	r0, [sp, #672]	; 0x2a0
    9988:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
    998a:	f88d 229f 	strb.w	r2, [sp, #671]	; 0x29f
    998e:	2301      	movs	r3, #1
    9990:	f88d 329f 	strb.w	r3, [sp, #671]	; 0x29f
    9994:	232c      	movs	r3, #44	; 0x2c
    9996:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    999a:	920a      	str	r2, [sp, #40]	; 0x28
    999c:	9209      	str	r2, [sp, #36]	; 0x24
    999e:	9209      	str	r2, [sp, #36]	; 0x24
    99a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    99a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    99a4:	f89d c023 	ldrb.w	ip, [sp, #35]	; 0x23
    99a8:	9007      	str	r0, [sp, #28]
    99aa:	9106      	str	r1, [sp, #24]
    99ac:	4661      	mov	r1, ip
    99ae:	f000 f898 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    99b2:	9005      	str	r0, [sp, #20]
    99b4:	e7ff      	b.n	99b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x36>
    99b6:	9805      	ldr	r0, [sp, #20]
    99b8:	f000 0001 	and.w	r0, r0, #1
    99bc:	f7ff f8d6 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    99c0:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    99c4:	e7ff      	b.n	99c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x46>
    99c6:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
    99ca:	07c1      	lsls	r1, r0, #31
    99cc:	2900      	cmp	r1, #0
    99ce:	d001      	beq.n	99d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x54>
    99d0:	e7ff      	b.n	99d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x52>
    99d2:	e00e      	b.n	99f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x72>
    99d4:	2000      	movs	r0, #0
        for color in colors {
    99d6:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
    99da:	a83f      	add	r0, sp, #252	; 0xfc
    99dc:	22cc      	movs	r2, #204	; 0xcc
    99de:	9004      	str	r0, [sp, #16]
    99e0:	9906      	ldr	r1, [sp, #24]
    99e2:	f014 fbcd 	bl	1e180 <__aeabi_memcpy>
    99e6:	a80b      	add	r0, sp, #44	; 0x2c
    99e8:	9904      	ldr	r1, [sp, #16]
    99ea:	f00b f8d1 	bl	14b90 <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>
    99ee:	e00e      	b.n	9a0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8e>
        self.write_command(Instruction::RAMWR, None)?;
    99f0:	defe      	udf	#254	; 0xfe
    99f2:	f008 fb08 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    99f6:	e004      	b.n	9a02 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x82>
    }
    99f8:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
    99fc:	f50d 7d2e 	add.w	sp, sp, #696	; 0x2b8
    9a00:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
    9a02:	f00b fd91 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9a06:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    9a0a:	e7ff      	b.n	9a0c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8c>
    9a0c:	e063      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
    9a0e:	a872      	add	r0, sp, #456	; 0x1c8
    9a10:	a90b      	add	r1, sp, #44	; 0x2c
    9a12:	22d0      	movs	r2, #208	; 0xd0
        for color in colors {
    9a14:	f014 fbb4 	bl	1e180 <__aeabi_memcpy>
    9a18:	e7ff      	b.n	9a1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
    9a1a:	a872      	add	r0, sp, #456	; 0x1c8
    9a1c:	f00b f8ce 	bl	14bbc <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>
    9a20:	f8ad 129a 	strh.w	r1, [sp, #666]	; 0x29a
    9a24:	f8ad 0298 	strh.w	r0, [sp, #664]	; 0x298
    9a28:	e7ff      	b.n	9a2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xaa>
    9a2a:	f8bd 0298 	ldrh.w	r0, [sp, #664]	; 0x298
    9a2e:	4601      	mov	r1, r0
    9a30:	2800      	cmp	r0, #0
    9a32:	d001      	beq.n	9a38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb8>
    9a34:	e7ff      	b.n	9a36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb6>
    9a36:	e004      	b.n	9a42 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xc2>
    9a38:	a872      	add	r0, sp, #456	; 0x1c8
        }
    9a3a:	f000 fe9d 	bl	a778 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
    9a3e:	e02e      	b.n	9a9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11e>
        for color in colors {
    9a40:	defe      	udf	#254	; 0xfe
    9a42:	f8bd 029a 	ldrh.w	r0, [sp, #666]	; 0x29a
    9a46:	f8ad 02b2 	strh.w	r0, [sp, #690]	; 0x2b2
    9a4a:	f8ad 02b4 	strh.w	r0, [sp, #692]	; 0x2b4
    9a4e:	f8ad 02b6 	strh.w	r0, [sp, #694]	; 0x2b6
            self.write_word(color)?;
    9a52:	9907      	ldr	r1, [sp, #28]
    9a54:	9003      	str	r0, [sp, #12]
    9a56:	4608      	mov	r0, r1
    9a58:	9903      	ldr	r1, [sp, #12]
    9a5a:	f7ff ff73 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9a5e:	9002      	str	r0, [sp, #8]
    9a60:	e7ff      	b.n	9a62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xe2>
    9a62:	9802      	ldr	r0, [sp, #8]
    9a64:	f000 0001 	and.w	r0, r0, #1
    9a68:	f7ff f880 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9a6c:	f88d 029e 	strb.w	r0, [sp, #670]	; 0x29e
    9a70:	e7ff      	b.n	9a72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xf2>
    9a72:	f89d 029e 	ldrb.w	r0, [sp, #670]	; 0x29e
    9a76:	07c1      	lsls	r1, r0, #31
    9a78:	2900      	cmp	r1, #0
    9a7a:	d001      	beq.n	9a80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x100>
    9a7c:	e7ff      	b.n	9a7e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xfe>
    9a7e:	e001      	b.n	9a84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x104>
        for color in colors {
    9a80:	e7cb      	b.n	9a1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
            self.write_word(color)?;
    9a82:	defe      	udf	#254	; 0xfe
    9a84:	f008 fabf 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9a88:	e7ff      	b.n	9a8a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x10a>
    9a8a:	f00b fd4d 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9a8e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    9a92:	e7ff      	b.n	9a94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x114>
    9a94:	a872      	add	r0, sp, #456	; 0x1c8
        }
    9a96:	f000 fe6f 	bl	a778 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
    9a9a:	e7ff      	b.n	9a9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11c>
    }
    9a9c:	e01b      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    9a9e:	f009 fdd5 	bl	1364c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    9aa2:	9001      	str	r0, [sp, #4]
    9aa4:	e7ff      	b.n	9aa6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x126>
    9aa6:	f24e 41b4 	movw	r1, #58548	; 0xe4b4
    9aaa:	f2c0 0101 	movt	r1, #1
    9aae:	f24e 5340 	movw	r3, #58688	; 0xe540
    9ab2:	f2c0 0301 	movt	r3, #1
    9ab6:	220e      	movs	r2, #14
    9ab8:	9801      	ldr	r0, [sp, #4]
    9aba:	f7ff f81e 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9abe:	e7ff      	b.n	9ac0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x140>
    9ac0:	2000      	movs	r0, #0
        Ok(())
    9ac2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    }
    9ac6:	e797      	b.n	99f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
    9ac8:	2000      	movs	r0, #0
    9aca:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
    9ace:	9806      	ldr	r0, [sp, #24]
    9ad0:	f000 fe33 	bl	a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    9ad4:	e790      	b.n	99f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
    9ad6:	f89d 029f 	ldrb.w	r0, [sp, #671]	; 0x29f
    9ada:	07c0      	lsls	r0, r0, #31
    9adc:	2800      	cmp	r0, #0
    9ade:	d1f3      	bne.n	9ac8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x148>
    9ae0:	e78a      	b.n	99f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>

00009ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>:
    fn write_command(&mut self, command: Instruction, params: Option<&[u8]>) -> Result<(), ()> {
    9ae2:	b580      	push	{r7, lr}
    9ae4:	b08e      	sub	sp, #56	; 0x38
    9ae6:	468c      	mov	ip, r1
    9ae8:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
    9aec:	920b      	str	r2, [sp, #44]	; 0x2c
    9aee:	930c      	str	r3, [sp, #48]	; 0x30
    9af0:	900d      	str	r0, [sp, #52]	; 0x34
    9af2:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
            command.to_u8().unwrap()
    9af6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    9afa:	f000 fdbd 	bl	a678 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>
    9afe:	9008      	str	r0, [sp, #32]
    9b00:	9107      	str	r1, [sp, #28]
    9b02:	e7ff      	b.n	9b04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x22>
    9b04:	9808      	ldr	r0, [sp, #32]
    9b06:	f000 0001 	and.w	r0, r0, #1
    9b0a:	f24e 5250 	movw	r2, #58704	; 0xe550
    9b0e:	f2c0 0201 	movt	r2, #1
    9b12:	9907      	ldr	r1, [sp, #28]
    9b14:	f00a fe8b 	bl	1482e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9b18:	9006      	str	r0, [sp, #24]
    9b1a:	e7ff      	b.n	9b1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x3a>
        mynewt::spi::spi_noblock_write_command(
    9b1c:	9806      	ldr	r0, [sp, #24]
    9b1e:	f009 fcb9 	bl	13494 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>
    9b22:	9005      	str	r0, [sp, #20]
    9b24:	e7ff      	b.n	9b26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x44>
    9b26:	f24e 5160 	movw	r1, #58720	; 0xe560
    9b2a:	f2c0 0101 	movt	r1, #1
    9b2e:	f24e 536c 	movw	r3, #58732	; 0xe56c
    9b32:	f2c0 0301 	movt	r3, #1
    9b36:	220c      	movs	r2, #12
    9b38:	9805      	ldr	r0, [sp, #20]
    9b3a:	f7fe ffde 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9b3e:	e7ff      	b.n	9b40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x5e>
    9b40:	a80b      	add	r0, sp, #44	; 0x2c
        if params.is_some() {
    9b42:	f00a fecf 	bl	148e4 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>
    9b46:	9004      	str	r0, [sp, #16]
    9b48:	e7ff      	b.n	9b4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x68>
    9b4a:	9804      	ldr	r0, [sp, #16]
    9b4c:	07c1      	lsls	r1, r0, #31
    9b4e:	2900      	cmp	r1, #0
    9b50:	d01f      	beq.n	9b92 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9b52:	e7ff      	b.n	9b54 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x72>
                params.unwrap()
    9b54:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9b56:	990c      	ldr	r1, [sp, #48]	; 0x30
    9b58:	f24e 527c 	movw	r2, #58748	; 0xe57c
    9b5c:	f2c0 0201 	movt	r2, #1
    9b60:	f00a fe8e 	bl	14880 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>
    9b64:	9003      	str	r0, [sp, #12]
    9b66:	9102      	str	r1, [sp, #8]
    9b68:	e7ff      	b.n	9b6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x88>
            mynewt::spi::spi_noblock_write_data(
    9b6a:	9803      	ldr	r0, [sp, #12]
    9b6c:	9902      	ldr	r1, [sp, #8]
    9b6e:	f009 fcd9 	bl	13524 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9b72:	9001      	str	r0, [sp, #4]
    9b74:	e7ff      	b.n	9b76 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x94>
    9b76:	f24e 5120 	movw	r1, #58656	; 0xe520
    9b7a:	f2c0 0101 	movt	r1, #1
    9b7e:	f24e 538c 	movw	r3, #58764	; 0xe58c
    9b82:	f2c0 0301 	movt	r3, #1
    9b86:	220d      	movs	r2, #13
    9b88:	9801      	ldr	r0, [sp, #4]
    9b8a:	f7fe ffb6 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9b8e:	e7ff      	b.n	9b90 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xae>
        if params.is_some() {
    9b90:	e7ff      	b.n	9b92 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9b92:	2000      	movs	r0, #0
    }
    9b94:	b00e      	add	sp, #56	; 0x38
    9b96:	bd80      	pop	{r7, pc}

00009b98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>:
    pub fn set_orientation(&mut self, orientation: &Orientation) -> Result<(), ()> {
    9b98:	b580      	push	{r7, lr}
    9b9a:	b098      	sub	sp, #96	; 0x60
    9b9c:	9012      	str	r0, [sp, #72]	; 0x48
    9b9e:	9113      	str	r1, [sp, #76]	; 0x4c
        if self.rgb {
    9ba0:	7d02      	ldrb	r2, [r0, #20]
    9ba2:	07d2      	lsls	r2, r2, #31
    9ba4:	2a00      	cmp	r2, #0
    9ba6:	910a      	str	r1, [sp, #40]	; 0x28
    9ba8:	9009      	str	r0, [sp, #36]	; 0x24
    9baa:	d109      	bne.n	9bc0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x28>
    9bac:	e7ff      	b.n	9bae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x16>
    9bae:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9bb0:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    9bb4:	980a      	ldr	r0, [sp, #40]	; 0x28
    9bb6:	f7ff fd96 	bl	96e6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9bba:	9008      	str	r0, [sp, #32]
    9bbc:	9107      	str	r1, [sp, #28]
    9bbe:	e044      	b.n	9c4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb2>
    9bc0:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
    9bc2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    9bc6:	980a      	ldr	r0, [sp, #40]	; 0x28
    9bc8:	f7ff fd8d 	bl	96e6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9bcc:	9006      	str	r0, [sp, #24]
    9bce:	9105      	str	r1, [sp, #20]
    9bd0:	e7ff      	b.n	9bd2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x3a>
    9bd2:	9806      	ldr	r0, [sp, #24]
    9bd4:	f000 0001 	and.w	r0, r0, #1
    9bd8:	f24e 529c 	movw	r2, #58780	; 0xe59c
    9bdc:	f2c0 0201 	movt	r2, #1
    9be0:	9905      	ldr	r1, [sp, #20]
    9be2:	f00a fe24 	bl	1482e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9be6:	9004      	str	r0, [sp, #16]
    9be8:	e7ff      	b.n	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x52>
    9bea:	9804      	ldr	r0, [sp, #16]
    9bec:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9bf0:	f10d 0139 	add.w	r1, sp, #57	; 0x39
    9bf4:	910c      	str	r1, [sp, #48]	; 0x30
    9bf6:	2101      	movs	r1, #1
    9bf8:	910d      	str	r1, [sp, #52]	; 0x34
            self.write_command(
    9bfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9bfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9bfe:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    9c02:	9809      	ldr	r0, [sp, #36]	; 0x24
    9c04:	f7ff ff6d 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9c08:	9003      	str	r0, [sp, #12]
    9c0a:	e7ff      	b.n	9c0c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x74>
    9c0c:	9803      	ldr	r0, [sp, #12]
    9c0e:	f000 0001 	and.w	r0, r0, #1
    9c12:	f7fe ffab 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9c16:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    9c1a:	e7ff      	b.n	9c1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x84>
            ))?;
    9c1c:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    9c20:	07c1      	lsls	r1, r0, #31
    9c22:	2900      	cmp	r1, #0
    9c24:	d001      	beq.n	9c2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x92>
    9c26:	e7ff      	b.n	9c28 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x90>
    9c28:	e001      	b.n	9c2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x96>
        if self.rgb {
    9c2a:	e047      	b.n	9cbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9c2c:	defe      	udf	#254	; 0xfe
            ))?;
    9c2e:	f008 f9ea 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9c32:	e003      	b.n	9c3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xa4>
    }
    9c34:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    9c38:	b018      	add	sp, #96	; 0x60
    9c3a:	bd80      	pop	{r7, pc}
            ))?;
    9c3c:	f00b fc74 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9c40:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9c44:	e7ff      	b.n	9c46 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xae>
    9c46:	e7ff      	b.n	9c48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9c48:	e7f4      	b.n	9c34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9c4a:	9808      	ldr	r0, [sp, #32]
    9c4c:	f000 0001 	and.w	r0, r0, #1
    9c50:	f24e 52ac 	movw	r2, #58796	; 0xe5ac
    9c54:	f2c0 0201 	movt	r2, #1
    9c58:	9907      	ldr	r1, [sp, #28]
    9c5a:	f00a fde8 	bl	1482e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9c5e:	9002      	str	r0, [sp, #8]
    9c60:	e7ff      	b.n	9c62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xca>
    9c62:	9802      	ldr	r0, [sp, #8]
    9c64:	f040 0108 	orr.w	r1, r0, #8
    9c68:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    9c6c:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    9c70:	910f      	str	r1, [sp, #60]	; 0x3c
    9c72:	2101      	movs	r1, #1
    9c74:	9110      	str	r1, [sp, #64]	; 0x40
            self.write_command(
    9c76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9c78:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9c7a:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9c7e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9c80:	f7ff ff2f 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9c84:	9001      	str	r0, [sp, #4]
    9c86:	e7ff      	b.n	9c88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xf0>
    9c88:	9801      	ldr	r0, [sp, #4]
    9c8a:	f000 0001 	and.w	r0, r0, #1
    9c8e:	f7fe ff6d 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9c92:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9c96:	e7ff      	b.n	9c98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x100>
            ))?;
    9c98:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9c9c:	07c1      	lsls	r1, r0, #31
    9c9e:	2900      	cmp	r1, #0
    9ca0:	d001      	beq.n	9ca6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10e>
    9ca2:	e7ff      	b.n	9ca4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10c>
    9ca4:	e001      	b.n	9caa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x112>
        if self.rgb {
    9ca6:	e009      	b.n	9cbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9ca8:	defe      	udf	#254	; 0xfe
            ))?;
    9caa:	f008 f9ac 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9cae:	e7ff      	b.n	9cb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x118>
    9cb0:	f00b fc3a 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9cb4:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9cb8:	e7ff      	b.n	9cba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x122>
    9cba:	e7c5      	b.n	9c48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9cbc:	2000      	movs	r0, #0
        Ok(())
    9cbe:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    9cc2:	e7b7      	b.n	9c34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>

00009cc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>:
    fn set_address_window(&mut self, sx: u16, sy: u16, ex: u16, ey: u16) -> Result<(), ()> {
    9cc4:	b5b0      	push	{r4, r5, r7, lr}
    9cc6:	b0a2      	sub	sp, #136	; 0x88
    9cc8:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
    9ccc:	469e      	mov	lr, r3
    9cce:	4614      	mov	r4, r2
    9cd0:	460d      	mov	r5, r1
    9cd2:	9015      	str	r0, [sp, #84]	; 0x54
    9cd4:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
    9cd8:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    9cdc:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    9ce0:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
    9ce4:	212a      	movs	r1, #42	; 0x2a
        self.write_command(Instruction::CASET, None)?;
    9ce6:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
    9cea:	2100      	movs	r1, #0
    9cec:	9110      	str	r1, [sp, #64]	; 0x40
    9cee:	910f      	str	r1, [sp, #60]	; 0x3c
    9cf0:	910f      	str	r1, [sp, #60]	; 0x3c
    9cf2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9cf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9cf6:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9cfa:	900d      	str	r0, [sp, #52]	; 0x34
    9cfc:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    9d00:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    9d04:	940a      	str	r4, [sp, #40]	; 0x28
    9d06:	9509      	str	r5, [sp, #36]	; 0x24
    9d08:	f7ff feeb 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9d0c:	9008      	str	r0, [sp, #32]
    9d0e:	e7ff      	b.n	9d10 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x4c>
    9d10:	9808      	ldr	r0, [sp, #32]
    9d12:	f000 0001 	and.w	r0, r0, #1
    9d16:	f7fe ff29 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d1a:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9d1e:	e7ff      	b.n	9d20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x5c>
    9d20:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9d24:	07c1      	lsls	r1, r0, #31
    9d26:	2900      	cmp	r1, #0
    9d28:	d001      	beq.n	9d2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x6a>
    9d2a:	e7ff      	b.n	9d2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x68>
    9d2c:	e00d      	b.n	9d4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x86>
        self.write_word(sx + self.dx)?;
    9d2e:	980d      	ldr	r0, [sp, #52]	; 0x34
    9d30:	8a01      	ldrh	r1, [r0, #16]
    9d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9d34:	fa11 f182 	uxtah	r1, r1, r2
    9d38:	b28b      	uxth	r3, r1
    9d3a:	468c      	mov	ip, r1
    9d3c:	428b      	cmp	r3, r1
    9d3e:	f8cd c01c 	str.w	ip, [sp, #28]
    9d42:	f040 80c2 	bne.w	9eca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x206>
    9d46:	e00d      	b.n	9d64 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xa0>
        self.write_command(Instruction::CASET, None)?;
    9d48:	defe      	udf	#254	; 0xfe
    9d4a:	f008 f95c 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9d4e:	e003      	b.n	9d58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x94>
    }
    9d50:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    9d54:	b022      	add	sp, #136	; 0x88
    9d56:	bdb0      	pop	{r4, r5, r7, pc}
        self.write_command(Instruction::CASET, None)?;
    9d58:	f00b fbe6 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9d5c:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9d60:	e7ff      	b.n	9d62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x9e>
    9d62:	e7f5      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9d64:	980d      	ldr	r0, [sp, #52]	; 0x34
    9d66:	9907      	ldr	r1, [sp, #28]
    9d68:	f7ff fdec 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9d6c:	9006      	str	r0, [sp, #24]
    9d6e:	e7ff      	b.n	9d70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xac>
    9d70:	9806      	ldr	r0, [sp, #24]
    9d72:	f000 0001 	and.w	r0, r0, #1
    9d76:	f7fe fef9 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d7a:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    9d7e:	e7ff      	b.n	9d80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xbc>
    9d80:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9d84:	07c1      	lsls	r1, r0, #31
    9d86:	2900      	cmp	r1, #0
    9d88:	d001      	beq.n	9d8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xca>
    9d8a:	e7ff      	b.n	9d8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xc8>
    9d8c:	e00d      	b.n	9daa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xe6>
        self.write_word(ex + self.dx)?;
    9d8e:	980d      	ldr	r0, [sp, #52]	; 0x34
    9d90:	8a01      	ldrh	r1, [r0, #16]
    9d92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9d94:	fa11 f182 	uxtah	r1, r1, r2
    9d98:	b28b      	uxth	r3, r1
    9d9a:	468c      	mov	ip, r1
    9d9c:	428b      	cmp	r3, r1
    9d9e:	f8cd c014 	str.w	ip, [sp, #20]
    9da2:	f040 809e 	bne.w	9ee2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x21e>
    9da6:	e009      	b.n	9dbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf8>
        self.write_word(sx + self.dx)?;
    9da8:	defe      	udf	#254	; 0xfe
    9daa:	f008 f92c 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9dae:	e7ff      	b.n	9db0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xec>
    9db0:	f00b fbba 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9db4:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9db8:	e7ff      	b.n	9dba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf6>
    9dba:	e7c9      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ex + self.dx)?;
    9dbc:	980d      	ldr	r0, [sp, #52]	; 0x34
    9dbe:	9905      	ldr	r1, [sp, #20]
    9dc0:	f7ff fdc0 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9dc4:	9004      	str	r0, [sp, #16]
    9dc6:	e7ff      	b.n	9dc8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x104>
    9dc8:	9804      	ldr	r0, [sp, #16]
    9dca:	f000 0001 	and.w	r0, r0, #1
    9dce:	f7fe fecd 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9dd2:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    9dd6:	e7ff      	b.n	9dd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x114>
    9dd8:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    9ddc:	07c1      	lsls	r1, r0, #31
    9dde:	2900      	cmp	r1, #0
    9de0:	d001      	beq.n	9de6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x122>
    9de2:	e7ff      	b.n	9de4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x120>
    9de4:	e010      	b.n	9e08 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x144>
    9de6:	202b      	movs	r0, #43	; 0x2b
        self.write_command(Instruction::RASET, None)?;
    9de8:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
    9dec:	2000      	movs	r0, #0
    9dee:	9013      	str	r0, [sp, #76]	; 0x4c
    9df0:	9012      	str	r0, [sp, #72]	; 0x48
    9df2:	9012      	str	r0, [sp, #72]	; 0x48
    9df4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9df6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9df8:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
    9dfc:	980d      	ldr	r0, [sp, #52]	; 0x34
    9dfe:	f7ff fe70 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9e02:	9003      	str	r0, [sp, #12]
    9e04:	e009      	b.n	9e1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x156>
        self.write_word(ex + self.dx)?;
    9e06:	defe      	udf	#254	; 0xfe
    9e08:	f008 f8fd 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e0c:	e7ff      	b.n	9e0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x14a>
    9e0e:	f00b fb8b 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e12:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9e16:	e7ff      	b.n	9e18 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x154>
    9e18:	e79a      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_command(Instruction::RASET, None)?;
    9e1a:	9803      	ldr	r0, [sp, #12]
    9e1c:	f000 0001 	and.w	r0, r0, #1
    9e20:	f7fe fea4 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e24:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9e28:	e7ff      	b.n	9e2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x166>
    9e2a:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    9e2e:	07c1      	lsls	r1, r0, #31
    9e30:	2900      	cmp	r1, #0
    9e32:	d001      	beq.n	9e38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x174>
    9e34:	e7ff      	b.n	9e36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x172>
    9e36:	e00c      	b.n	9e52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x18e>
        self.write_word(sy + self.dy)?;
    9e38:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e3a:	8a41      	ldrh	r1, [r0, #18]
    9e3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9e3e:	fa11 f182 	uxtah	r1, r1, r2
    9e42:	b28b      	uxth	r3, r1
    9e44:	468c      	mov	ip, r1
    9e46:	428b      	cmp	r3, r1
    9e48:	f8cd c008 	str.w	ip, [sp, #8]
    9e4c:	d155      	bne.n	9efa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x236>
    9e4e:	e009      	b.n	9e64 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1a0>
        self.write_command(Instruction::RASET, None)?;
    9e50:	defe      	udf	#254	; 0xfe
    9e52:	f008 f8d8 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e56:	e7ff      	b.n	9e58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x194>
    9e58:	f00b fb66 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e5c:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9e60:	e7ff      	b.n	9e62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x19e>
    9e62:	e775      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sy + self.dy)?;
    9e64:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e66:	9902      	ldr	r1, [sp, #8]
    9e68:	f7ff fd6c 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9e6c:	9001      	str	r0, [sp, #4]
    9e6e:	e7ff      	b.n	9e70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ac>
    9e70:	9801      	ldr	r0, [sp, #4]
    9e72:	f000 0001 	and.w	r0, r0, #1
    9e76:	f7fe fe79 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e7a:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    9e7e:	e7ff      	b.n	9e80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1bc>
    9e80:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    9e84:	07c1      	lsls	r1, r0, #31
    9e86:	2900      	cmp	r1, #0
    9e88:	d001      	beq.n	9e8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ca>
    9e8a:	e7ff      	b.n	9e8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1c8>
    9e8c:	e00c      	b.n	9ea8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1e4>
        self.write_word(ey + self.dy)
    9e8e:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e90:	8a41      	ldrh	r1, [r0, #18]
    9e92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9e94:	fa11 f182 	uxtah	r1, r1, r2
    9e98:	b28b      	uxth	r3, r1
    9e9a:	468c      	mov	ip, r1
    9e9c:	428b      	cmp	r3, r1
    9e9e:	f8cd c000 	str.w	ip, [sp]
    9ea2:	d136      	bne.n	9f12 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x24e>
    9ea4:	e009      	b.n	9eba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f6>
        self.write_word(sy + self.dy)?;
    9ea6:	defe      	udf	#254	; 0xfe
    9ea8:	f008 f8ad 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9eac:	e7ff      	b.n	9eae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ea>
    9eae:	f00b fb3b 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9eb2:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9eb6:	e7ff      	b.n	9eb8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f4>
    9eb8:	e74a      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ey + self.dy)
    9eba:	980d      	ldr	r0, [sp, #52]	; 0x34
    9ebc:	9900      	ldr	r1, [sp, #0]
    9ebe:	f7ff fd41 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9ec2:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9ec6:	e7ff      	b.n	9ec8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x204>
    }
    9ec8:	e742      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9eca:	f24e 50d0 	movw	r0, #58832	; 0xe5d0
    9ece:	f2c0 0001 	movt	r0, #1
    9ed2:	f24e 52bc 	movw	r2, #58812	; 0xe5bc
    9ed6:	f2c0 0201 	movt	r2, #1
    9eda:	211c      	movs	r1, #28
    9edc:	f00d fd7c 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9ee0:	defe      	udf	#254	; 0xfe
        self.write_word(ex + self.dx)?;
    9ee2:	f24e 50d0 	movw	r0, #58832	; 0xe5d0
    9ee6:	f2c0 0001 	movt	r0, #1
    9eea:	f24e 52ec 	movw	r2, #58860	; 0xe5ec
    9eee:	f2c0 0201 	movt	r2, #1
    9ef2:	211c      	movs	r1, #28
    9ef4:	f00d fd70 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9ef8:	defe      	udf	#254	; 0xfe
        self.write_word(sy + self.dy)?;
    9efa:	f24e 50d0 	movw	r0, #58832	; 0xe5d0
    9efe:	f2c0 0001 	movt	r0, #1
    9f02:	f24e 52fc 	movw	r2, #58876	; 0xe5fc
    9f06:	f2c0 0201 	movt	r2, #1
    9f0a:	211c      	movs	r1, #28
    9f0c:	f00d fd64 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9f10:	defe      	udf	#254	; 0xfe
        self.write_word(ey + self.dy)
    9f12:	f24e 50d0 	movw	r0, #58832	; 0xe5d0
    9f16:	f2c0 0001 	movt	r0, #1
    9f1a:	f24e 620c 	movw	r2, #58892	; 0xe60c
    9f1e:	f2c0 0201 	movt	r2, #1
    9f22:	211c      	movs	r1, #28
    9f24:	f00d fd58 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9f28:	defe      	udf	#254	; 0xfe

00009f2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>:
    pub fn new(
    9f2a:	b5b0      	push	{r4, r5, r7, lr}
    9f2c:	b08a      	sub	sp, #40	; 0x28
    9f2e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    9f32:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    9f36:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    9f38:	9106      	str	r1, [sp, #24]
    9f3a:	9207      	str	r2, [sp, #28]
    9f3c:	9308      	str	r3, [sp, #32]
    9f3e:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    9f42:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
        let display = ST7735 {
    9f46:	9100      	str	r1, [sp, #0]
    9f48:	9201      	str	r2, [sp, #4]
    9f4a:	9302      	str	r3, [sp, #8]
    9f4c:	9403      	str	r4, [sp, #12]
    9f4e:	f88d e014 	strb.w	lr, [sp, #20]
    9f52:	f88d c015 	strb.w	ip, [sp, #21]
    9f56:	2100      	movs	r1, #0
    9f58:	f8ad 1010 	strh.w	r1, [sp, #16]
    9f5c:	f8ad 1012 	strh.w	r1, [sp, #18]
    9f60:	4669      	mov	r1, sp
        display
    9f62:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    9f66:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    }
    9f6a:	b00a      	add	sp, #40	; 0x28
    9f6c:	bdb0      	pop	{r4, r5, r7, pc}

00009f6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>:
    pub fn init<DELAY>(&mut self, delay: &mut DELAY) -> Result<(), ()>
    9f6e:	b580      	push	{r7, lr}
    9f70:	b0f6      	sub	sp, #472	; 0x1d8
    9f72:	904e      	str	r0, [sp, #312]	; 0x138
    9f74:	914f      	str	r1, [sp, #316]	; 0x13c
        mynewt::spi::spi_noblock_init()  //  Init the SPI queue
    9f76:	9117      	str	r1, [sp, #92]	; 0x5c
    9f78:	9016      	str	r0, [sp, #88]	; 0x58
    9f7a:	f008 fd31 	bl	129e0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>
    9f7e:	9015      	str	r0, [sp, #84]	; 0x54
    9f80:	e7ff      	b.n	9f82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x14>
    9f82:	f24e 611c 	movw	r1, #58908	; 0xe61c
    9f86:	f2c0 0101 	movt	r1, #1
    9f8a:	f24e 632c 	movw	r3, #58924	; 0xe62c
    9f8e:	f2c0 0301 	movt	r3, #1
    9f92:	220d      	movs	r2, #13
    9f94:	9815      	ldr	r0, [sp, #84]	; 0x54
    9f96:	f7fe fdb0 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9f9a:	e7ff      	b.n	9f9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2e>
        self.hard_reset()?;
    9f9c:	9816      	ldr	r0, [sp, #88]	; 0x58
    9f9e:	f7ff fbbd 	bl	971c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>
    9fa2:	9014      	str	r0, [sp, #80]	; 0x50
    9fa4:	e7ff      	b.n	9fa6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38>
    9fa6:	9814      	ldr	r0, [sp, #80]	; 0x50
    9fa8:	f000 0001 	and.w	r0, r0, #1
    9fac:	f7fe fdde 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9fb0:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
    9fb4:	e7ff      	b.n	9fb6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48>
    9fb6:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
    9fba:	07c1      	lsls	r1, r0, #31
    9fbc:	2900      	cmp	r1, #0
    9fbe:	d001      	beq.n	9fc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x56>
    9fc0:	e7ff      	b.n	9fc2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54>
    9fc2:	e010      	b.n	9fe6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x78>
    9fc4:	2001      	movs	r0, #1
        self.write_command(Instruction::SWRESET, None)?;
    9fc6:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
    9fca:	2000      	movs	r0, #0
    9fcc:	901a      	str	r0, [sp, #104]	; 0x68
    9fce:	9019      	str	r0, [sp, #100]	; 0x64
    9fd0:	9019      	str	r0, [sp, #100]	; 0x64
    9fd2:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9fd4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9fd6:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
    9fda:	9816      	ldr	r0, [sp, #88]	; 0x58
    9fdc:	f7ff fd81 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9fe0:	9013      	str	r0, [sp, #76]	; 0x4c
    9fe2:	e00d      	b.n	a000 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x92>
        self.hard_reset()?;
    9fe4:	defe      	udf	#254	; 0xfe
    9fe6:	f008 f80e 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9fea:	e003      	b.n	9ff4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x86>
    }
    9fec:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    9ff0:	b076      	add	sp, #472	; 0x1d8
    9ff2:	bd80      	pop	{r7, pc}
        self.hard_reset()?;
    9ff4:	f00b fa98 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ff8:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9ffc:	e7ff      	b.n	9ffe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x90>
    9ffe:	e7f5      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::SWRESET, None)?;
    a000:	9813      	ldr	r0, [sp, #76]	; 0x4c
    a002:	f000 0001 	and.w	r0, r0, #1
    a006:	f7fe fdb1 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a00a:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    a00e:	e7ff      	b.n	a010 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xa2>
    a010:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    a014:	07c1      	lsls	r1, r0, #31
    a016:	2900      	cmp	r1, #0
    a018:	d001      	beq.n	a01e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xb0>
    a01a:	e7ff      	b.n	a01c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xae>
    a01c:	e005      	b.n	a02a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xbc>
    a01e:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a020:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a022:	f00a fad8 	bl	145d6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a026:	e009      	b.n	a03c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xce>
        self.write_command(Instruction::SWRESET, None)?;
    a028:	defe      	udf	#254	; 0xfe
    a02a:	f007 ffec 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a02e:	e7ff      	b.n	a030 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xc2>
    a030:	f00b fa7a 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a034:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a038:	e7ff      	b.n	a03a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xcc>
    a03a:	e7d7      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a03c:	2011      	movs	r0, #17
        self.write_command(Instruction::SLPOUT, None)?;
    a03e:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    a042:	2000      	movs	r0, #0
    a044:	901d      	str	r0, [sp, #116]	; 0x74
    a046:	901c      	str	r0, [sp, #112]	; 0x70
    a048:	901c      	str	r0, [sp, #112]	; 0x70
    a04a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    a04c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a04e:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
    a052:	9816      	ldr	r0, [sp, #88]	; 0x58
    a054:	f7ff fd45 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a058:	9012      	str	r0, [sp, #72]	; 0x48
    a05a:	e7ff      	b.n	a05c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xee>
    a05c:	9812      	ldr	r0, [sp, #72]	; 0x48
    a05e:	f000 0001 	and.w	r0, r0, #1
    a062:	f7fe fd83 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a066:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
    a06a:	e7ff      	b.n	a06c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xfe>
    a06c:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
    a070:	07c1      	lsls	r1, r0, #31
    a072:	2900      	cmp	r1, #0
    a074:	d001      	beq.n	a07a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10c>
    a076:	e7ff      	b.n	a078 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10a>
    a078:	e005      	b.n	a086 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x118>
    a07a:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a07c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a07e:	f00a faaa 	bl	145d6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a082:	e009      	b.n	a098 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x12a>
        self.write_command(Instruction::SLPOUT, None)?;
    a084:	defe      	udf	#254	; 0xfe
    a086:	f007 ffbe 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a08a:	e7ff      	b.n	a08c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x11e>
    a08c:	f00b fa4c 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a090:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a094:	e7ff      	b.n	a096 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x128>
    a096:	e7a9      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a098:	20b1      	movs	r0, #177	; 0xb1
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    a09a:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
    a09e:	f24e 6040 	movw	r0, #58944	; 0xe640
    a0a2:	f2c0 0001 	movt	r0, #1
    a0a6:	6800      	ldr	r0, [r0, #0]
    a0a8:	901f      	str	r0, [sp, #124]	; 0x7c
    a0aa:	2003      	movs	r0, #3
    a0ac:	9020      	str	r0, [sp, #128]	; 0x80
    a0ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    a0b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a0b2:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
    a0b6:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0b8:	f7ff fd13 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a0bc:	9011      	str	r0, [sp, #68]	; 0x44
    a0be:	e7ff      	b.n	a0c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x152>
    a0c0:	9811      	ldr	r0, [sp, #68]	; 0x44
    a0c2:	f000 0001 	and.w	r0, r0, #1
    a0c6:	f7fe fd51 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a0ca:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    a0ce:	e7ff      	b.n	a0d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x162>
    a0d0:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    a0d4:	07c1      	lsls	r1, r0, #31
    a0d6:	2900      	cmp	r1, #0
    a0d8:	d001      	beq.n	a0de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x170>
    a0da:	e7ff      	b.n	a0dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x16e>
    a0dc:	e014      	b.n	a108 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x19a>
    a0de:	20b2      	movs	r0, #178	; 0xb2
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a0e0:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    a0e4:	f24e 6040 	movw	r0, #58944	; 0xe640
    a0e8:	f2c0 0001 	movt	r0, #1
    a0ec:	6800      	ldr	r0, [r0, #0]
    a0ee:	9022      	str	r0, [sp, #136]	; 0x88
    a0f0:	2003      	movs	r0, #3
    a0f2:	9023      	str	r0, [sp, #140]	; 0x8c
    a0f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a0f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a0f8:	f89d 1087 	ldrb.w	r1, [sp, #135]	; 0x87
    a0fc:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0fe:	f7ff fcf0 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a102:	9010      	str	r0, [sp, #64]	; 0x40
    a104:	e009      	b.n	a11a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ac>
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    a106:	defe      	udf	#254	; 0xfe
    a108:	f007 ff7d 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a10c:	e7ff      	b.n	a10e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1a0>
    a10e:	f00b fa0b 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a112:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a116:	e7ff      	b.n	a118 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1aa>
    a118:	e768      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a11a:	9810      	ldr	r0, [sp, #64]	; 0x40
    a11c:	f000 0001 	and.w	r0, r0, #1
    a120:	f7fe fd24 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a124:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
    a128:	e7ff      	b.n	a12a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1bc>
    a12a:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
    a12e:	07c1      	lsls	r1, r0, #31
    a130:	2900      	cmp	r1, #0
    a132:	d001      	beq.n	a138 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ca>
    a134:	e7ff      	b.n	a136 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1c8>
    a136:	e014      	b.n	a162 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1f4>
    a138:	20b3      	movs	r0, #179	; 0xb3
        self.write_command(Instruction::FRMCTR3,
    a13a:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a13e:	f24e 604c 	movw	r0, #58956	; 0xe64c
    a142:	f2c0 0001 	movt	r0, #1
    a146:	6800      	ldr	r0, [r0, #0]
    a148:	9025      	str	r0, [sp, #148]	; 0x94
    a14a:	2006      	movs	r0, #6
    a14c:	9026      	str	r0, [sp, #152]	; 0x98
        self.write_command(Instruction::FRMCTR3,
    a14e:	9a25      	ldr	r2, [sp, #148]	; 0x94
    a150:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a152:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
    a156:	9816      	ldr	r0, [sp, #88]	; 0x58
    a158:	f7ff fcc3 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a15c:	900f      	str	r0, [sp, #60]	; 0x3c
    a15e:	e009      	b.n	a174 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x206>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a160:	defe      	udf	#254	; 0xfe
    a162:	f007 ff50 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a166:	e7ff      	b.n	a168 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1fa>
    a168:	f00b f9de 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a16c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a170:	e7ff      	b.n	a172 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x204>
    a172:	e73b      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR3,
    a174:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a176:	f000 0001 	and.w	r0, r0, #1
    a17a:	f7fe fcf7 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a17e:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
    a182:	e7ff      	b.n	a184 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x216>
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a184:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
    a188:	07c1      	lsls	r1, r0, #31
    a18a:	2900      	cmp	r1, #0
    a18c:	d001      	beq.n	a192 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x224>
    a18e:	e7ff      	b.n	a190 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x222>
    a190:	e014      	b.n	a1bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x24e>
    a192:	20b4      	movs	r0, #180	; 0xb4
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a194:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
    a198:	f24e 6054 	movw	r0, #58964	; 0xe654
    a19c:	f2c0 0001 	movt	r0, #1
    a1a0:	6800      	ldr	r0, [r0, #0]
    a1a2:	9028      	str	r0, [sp, #160]	; 0xa0
    a1a4:	2001      	movs	r0, #1
    a1a6:	9029      	str	r0, [sp, #164]	; 0xa4
    a1a8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    a1aa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    a1ac:	f89d 109f 	ldrb.w	r1, [sp, #159]	; 0x9f
    a1b0:	9816      	ldr	r0, [sp, #88]	; 0x58
    a1b2:	f7ff fc96 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a1b6:	900e      	str	r0, [sp, #56]	; 0x38
    a1b8:	e009      	b.n	a1ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x260>
        self.write_command(Instruction::FRMCTR3,
    a1ba:	defe      	udf	#254	; 0xfe
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a1bc:	f007 ff23 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a1c0:	e7ff      	b.n	a1c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x254>
    a1c2:	f00b f9b1 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a1c6:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a1ca:	e7ff      	b.n	a1cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x25e>
    a1cc:	e70e      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a1ce:	980e      	ldr	r0, [sp, #56]	; 0x38
    a1d0:	f000 0001 	and.w	r0, r0, #1
    a1d4:	f7fe fcca 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a1d8:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
    a1dc:	e7ff      	b.n	a1de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x270>
    a1de:	f89d 009e 	ldrb.w	r0, [sp, #158]	; 0x9e
    a1e2:	07c1      	lsls	r1, r0, #31
    a1e4:	2900      	cmp	r1, #0
    a1e6:	d001      	beq.n	a1ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27e>
    a1e8:	e7ff      	b.n	a1ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27c>
    a1ea:	e014      	b.n	a216 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2a8>
    a1ec:	20c0      	movs	r0, #192	; 0xc0
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a1ee:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
    a1f2:	f24e 605c 	movw	r0, #58972	; 0xe65c
    a1f6:	f2c0 0001 	movt	r0, #1
    a1fa:	6800      	ldr	r0, [r0, #0]
    a1fc:	902b      	str	r0, [sp, #172]	; 0xac
    a1fe:	2003      	movs	r0, #3
    a200:	902c      	str	r0, [sp, #176]	; 0xb0
    a202:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    a204:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    a206:	f89d 10ab 	ldrb.w	r1, [sp, #171]	; 0xab
    a20a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a20c:	f7ff fc69 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a210:	900d      	str	r0, [sp, #52]	; 0x34
    a212:	e009      	b.n	a228 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ba>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a214:	defe      	udf	#254	; 0xfe
    a216:	f007 fef6 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a21a:	e7ff      	b.n	a21c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ae>
    a21c:	f00b f984 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a220:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a224:	e7ff      	b.n	a226 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2b8>
    a226:	e6e1      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a228:	980d      	ldr	r0, [sp, #52]	; 0x34
    a22a:	f000 0001 	and.w	r0, r0, #1
    a22e:	f7fe fc9d 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a232:	f88d 00aa 	strb.w	r0, [sp, #170]	; 0xaa
    a236:	e7ff      	b.n	a238 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ca>
    a238:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
    a23c:	07c1      	lsls	r1, r0, #31
    a23e:	2900      	cmp	r1, #0
    a240:	d001      	beq.n	a246 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d8>
    a242:	e7ff      	b.n	a244 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d6>
    a244:	e014      	b.n	a270 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x302>
    a246:	20c1      	movs	r0, #193	; 0xc1
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a248:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
    a24c:	f24e 6064 	movw	r0, #58980	; 0xe664
    a250:	f2c0 0001 	movt	r0, #1
    a254:	6800      	ldr	r0, [r0, #0]
    a256:	902e      	str	r0, [sp, #184]	; 0xb8
    a258:	2001      	movs	r0, #1
    a25a:	902f      	str	r0, [sp, #188]	; 0xbc
    a25c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    a25e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    a260:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
    a264:	9816      	ldr	r0, [sp, #88]	; 0x58
    a266:	f7ff fc3c 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a26a:	900c      	str	r0, [sp, #48]	; 0x30
    a26c:	e009      	b.n	a282 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x314>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a26e:	defe      	udf	#254	; 0xfe
    a270:	f007 fec9 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a274:	e7ff      	b.n	a276 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x308>
    a276:	f00b f957 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a27a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a27e:	e7ff      	b.n	a280 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x312>
    a280:	e6b4      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a282:	980c      	ldr	r0, [sp, #48]	; 0x30
    a284:	f000 0001 	and.w	r0, r0, #1
    a288:	f7fe fc70 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a28c:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
    a290:	e7ff      	b.n	a292 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x324>
    a292:	f89d 00b6 	ldrb.w	r0, [sp, #182]	; 0xb6
    a296:	07c1      	lsls	r1, r0, #31
    a298:	2900      	cmp	r1, #0
    a29a:	d001      	beq.n	a2a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x332>
    a29c:	e7ff      	b.n	a29e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x330>
    a29e:	e014      	b.n	a2ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x35c>
    a2a0:	20c2      	movs	r0, #194	; 0xc2
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a2a2:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
    a2a6:	f24e 606c 	movw	r0, #58988	; 0xe66c
    a2aa:	f2c0 0001 	movt	r0, #1
    a2ae:	6800      	ldr	r0, [r0, #0]
    a2b0:	9031      	str	r0, [sp, #196]	; 0xc4
    a2b2:	2002      	movs	r0, #2
    a2b4:	9032      	str	r0, [sp, #200]	; 0xc8
    a2b6:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    a2b8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    a2ba:	f89d 10c3 	ldrb.w	r1, [sp, #195]	; 0xc3
    a2be:	9816      	ldr	r0, [sp, #88]	; 0x58
    a2c0:	f7ff fc0f 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a2c4:	900b      	str	r0, [sp, #44]	; 0x2c
    a2c6:	e009      	b.n	a2dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a2c8:	defe      	udf	#254	; 0xfe
    a2ca:	f007 fe9c 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a2ce:	e7ff      	b.n	a2d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x362>
    a2d0:	f00b f92a 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a2d4:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a2d8:	e7ff      	b.n	a2da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36c>
    a2da:	e687      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a2dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a2de:	f000 0001 	and.w	r0, r0, #1
    a2e2:	f7fe fc43 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a2e6:	f88d 00c2 	strb.w	r0, [sp, #194]	; 0xc2
    a2ea:	e7ff      	b.n	a2ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x37e>
    a2ec:	f89d 00c2 	ldrb.w	r0, [sp, #194]	; 0xc2
    a2f0:	07c1      	lsls	r1, r0, #31
    a2f2:	2900      	cmp	r1, #0
    a2f4:	d001      	beq.n	a2fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38c>
    a2f6:	e7ff      	b.n	a2f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38a>
    a2f8:	e014      	b.n	a324 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3b6>
    a2fa:	20c3      	movs	r0, #195	; 0xc3
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a2fc:	f88d 00cf 	strb.w	r0, [sp, #207]	; 0xcf
    a300:	f24e 6074 	movw	r0, #58996	; 0xe674
    a304:	f2c0 0001 	movt	r0, #1
    a308:	6800      	ldr	r0, [r0, #0]
    a30a:	9034      	str	r0, [sp, #208]	; 0xd0
    a30c:	2002      	movs	r0, #2
    a30e:	9035      	str	r0, [sp, #212]	; 0xd4
    a310:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    a312:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    a314:	f89d 10cf 	ldrb.w	r1, [sp, #207]	; 0xcf
    a318:	9816      	ldr	r0, [sp, #88]	; 0x58
    a31a:	f7ff fbe2 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a31e:	900a      	str	r0, [sp, #40]	; 0x28
    a320:	e009      	b.n	a336 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c8>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a322:	defe      	udf	#254	; 0xfe
    a324:	f007 fe6f 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a328:	e7ff      	b.n	a32a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3bc>
    a32a:	f00b f8fd 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a32e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a332:	e7ff      	b.n	a334 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c6>
    a334:	e65a      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a336:	980a      	ldr	r0, [sp, #40]	; 0x28
    a338:	f000 0001 	and.w	r0, r0, #1
    a33c:	f7fe fc16 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a340:	f88d 00ce 	strb.w	r0, [sp, #206]	; 0xce
    a344:	e7ff      	b.n	a346 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3d8>
    a346:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
    a34a:	07c1      	lsls	r1, r0, #31
    a34c:	2900      	cmp	r1, #0
    a34e:	d001      	beq.n	a354 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e6>
    a350:	e7ff      	b.n	a352 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e4>
    a352:	e014      	b.n	a37e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x410>
    a354:	20c4      	movs	r0, #196	; 0xc4
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a356:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
    a35a:	f24e 607c 	movw	r0, #59004	; 0xe67c
    a35e:	f2c0 0001 	movt	r0, #1
    a362:	6800      	ldr	r0, [r0, #0]
    a364:	9037      	str	r0, [sp, #220]	; 0xdc
    a366:	2002      	movs	r0, #2
    a368:	9038      	str	r0, [sp, #224]	; 0xe0
    a36a:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    a36c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    a36e:	f89d 10db 	ldrb.w	r1, [sp, #219]	; 0xdb
    a372:	9816      	ldr	r0, [sp, #88]	; 0x58
    a374:	f7ff fbb5 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a378:	9009      	str	r0, [sp, #36]	; 0x24
    a37a:	e009      	b.n	a390 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x422>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a37c:	defe      	udf	#254	; 0xfe
    a37e:	f007 fe42 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a382:	e7ff      	b.n	a384 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x416>
    a384:	f00b f8d0 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a388:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a38c:	e7ff      	b.n	a38e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x420>
    a38e:	e62d      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a390:	9809      	ldr	r0, [sp, #36]	; 0x24
    a392:	f000 0001 	and.w	r0, r0, #1
    a396:	f7fe fbe9 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a39a:	f88d 00da 	strb.w	r0, [sp, #218]	; 0xda
    a39e:	e7ff      	b.n	a3a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x432>
    a3a0:	f89d 00da 	ldrb.w	r0, [sp, #218]	; 0xda
    a3a4:	07c1      	lsls	r1, r0, #31
    a3a6:	2900      	cmp	r1, #0
    a3a8:	d001      	beq.n	a3ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x440>
    a3aa:	e7ff      	b.n	a3ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x43e>
    a3ac:	e014      	b.n	a3d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x46a>
    a3ae:	20c5      	movs	r0, #197	; 0xc5
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a3b0:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
    a3b4:	f24e 6084 	movw	r0, #59012	; 0xe684
    a3b8:	f2c0 0001 	movt	r0, #1
    a3bc:	6800      	ldr	r0, [r0, #0]
    a3be:	903a      	str	r0, [sp, #232]	; 0xe8
    a3c0:	2001      	movs	r0, #1
    a3c2:	903b      	str	r0, [sp, #236]	; 0xec
    a3c4:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    a3c6:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    a3c8:	f89d 10e7 	ldrb.w	r1, [sp, #231]	; 0xe7
    a3cc:	9816      	ldr	r0, [sp, #88]	; 0x58
    a3ce:	f7ff fb88 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a3d2:	9008      	str	r0, [sp, #32]
    a3d4:	e009      	b.n	a3ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47c>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a3d6:	defe      	udf	#254	; 0xfe
    a3d8:	f007 fe15 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a3dc:	e7ff      	b.n	a3de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x470>
    a3de:	f00b f8a3 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a3e2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a3e6:	e7ff      	b.n	a3e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47a>
    a3e8:	e600      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a3ea:	9808      	ldr	r0, [sp, #32]
    a3ec:	f000 0001 	and.w	r0, r0, #1
    a3f0:	f7fe fbbc 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a3f4:	f88d 00e6 	strb.w	r0, [sp, #230]	; 0xe6
    a3f8:	e7ff      	b.n	a3fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48c>
    a3fa:	f89d 00e6 	ldrb.w	r0, [sp, #230]	; 0xe6
    a3fe:	07c1      	lsls	r1, r0, #31
    a400:	2900      	cmp	r1, #0
    a402:	d001      	beq.n	a408 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x49a>
    a404:	e7ff      	b.n	a406 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x498>
    a406:	e006      	b.n	a416 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4a8>
        if self.inverted {
    a408:	9816      	ldr	r0, [sp, #88]	; 0x58
    a40a:	7d41      	ldrb	r1, [r0, #21]
    a40c:	07c9      	lsls	r1, r1, #31
    a40e:	2900      	cmp	r1, #0
    a410:	d11a      	bne.n	a448 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4da>
    a412:	e009      	b.n	a428 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ba>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a414:	defe      	udf	#254	; 0xfe
    a416:	f007 fdf6 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a41a:	e7ff      	b.n	a41c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ae>
    a41c:	f00b f884 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a420:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a424:	e7ff      	b.n	a426 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4b8>
    a426:	e5e1      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a428:	2020      	movs	r0, #32
            self.write_command(Instruction::INVOFF, None)?;
    a42a:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    a42e:	2000      	movs	r0, #0
    a430:	9041      	str	r0, [sp, #260]	; 0x104
    a432:	9040      	str	r0, [sp, #256]	; 0x100
    a434:	9040      	str	r0, [sp, #256]	; 0x100
    a436:	9a40      	ldr	r2, [sp, #256]	; 0x100
    a438:	9b41      	ldr	r3, [sp, #260]	; 0x104
    a43a:	f89d 10ff 	ldrb.w	r1, [sp, #255]	; 0xff
    a43e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a440:	f7ff fb4f 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a444:	9007      	str	r0, [sp, #28]
    a446:	e02a      	b.n	a49e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x530>
    a448:	2021      	movs	r0, #33	; 0x21
            self.write_command(Instruction::INVON, None)?;
    a44a:	f88d 00f3 	strb.w	r0, [sp, #243]	; 0xf3
    a44e:	2000      	movs	r0, #0
    a450:	903e      	str	r0, [sp, #248]	; 0xf8
    a452:	903d      	str	r0, [sp, #244]	; 0xf4
    a454:	903d      	str	r0, [sp, #244]	; 0xf4
    a456:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    a458:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    a45a:	f89d 10f3 	ldrb.w	r1, [sp, #243]	; 0xf3
    a45e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a460:	f7ff fb3f 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a464:	9006      	str	r0, [sp, #24]
    a466:	e7ff      	b.n	a468 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4fa>
    a468:	9806      	ldr	r0, [sp, #24]
    a46a:	f000 0001 	and.w	r0, r0, #1
    a46e:	f7fe fb7d 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a472:	f88d 00f2 	strb.w	r0, [sp, #242]	; 0xf2
    a476:	e7ff      	b.n	a478 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x50a>
    a478:	f89d 00f2 	ldrb.w	r0, [sp, #242]	; 0xf2
    a47c:	07c1      	lsls	r1, r0, #31
    a47e:	2900      	cmp	r1, #0
    a480:	d001      	beq.n	a486 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x518>
    a482:	e7ff      	b.n	a484 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x516>
    a484:	e001      	b.n	a48a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x51c>
        if self.inverted {
    a486:	e024      	b.n	a4d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVON, None)?;
    a488:	defe      	udf	#254	; 0xfe
    a48a:	f007 fdbc 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a48e:	e7ff      	b.n	a490 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x522>
    a490:	f00b f84a 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a494:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a498:	e7ff      	b.n	a49a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52c>
    a49a:	e7ff      	b.n	a49c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
    a49c:	e5a6      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::INVOFF, None)?;
    a49e:	9807      	ldr	r0, [sp, #28]
    a4a0:	f000 0001 	and.w	r0, r0, #1
    a4a4:	f7fe fb62 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a4a8:	f88d 00fe 	strb.w	r0, [sp, #254]	; 0xfe
    a4ac:	e7ff      	b.n	a4ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x540>
    a4ae:	f89d 00fe 	ldrb.w	r0, [sp, #254]	; 0xfe
    a4b2:	07c1      	lsls	r1, r0, #31
    a4b4:	2900      	cmp	r1, #0
    a4b6:	d001      	beq.n	a4bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54e>
    a4b8:	e7ff      	b.n	a4ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54c>
    a4ba:	e001      	b.n	a4c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x552>
        if self.inverted {
    a4bc:	e009      	b.n	a4d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVOFF, None)?;
    a4be:	defe      	udf	#254	; 0xfe
    a4c0:	f007 fda1 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a4c4:	e7ff      	b.n	a4c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x558>
    a4c6:	f00b f82f 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a4ca:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a4ce:	e7ff      	b.n	a4d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x562>
    a4d0:	e7e4      	b.n	a49c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
        if self.rgb {
    a4d2:	9816      	ldr	r0, [sp, #88]	; 0x58
    a4d4:	7d01      	ldrb	r1, [r0, #20]
    a4d6:	07c9      	lsls	r1, r1, #31
    a4d8:	2900      	cmp	r1, #0
    a4da:	d114      	bne.n	a506 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x598>
    a4dc:	e7ff      	b.n	a4de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x570>
    a4de:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a4e0:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
    a4e4:	f24e 6094 	movw	r0, #59028	; 0xe694
    a4e8:	f2c0 0001 	movt	r0, #1
    a4ec:	6800      	ldr	r0, [r0, #0]
    a4ee:	9046      	str	r0, [sp, #280]	; 0x118
    a4f0:	2001      	movs	r0, #1
    a4f2:	9047      	str	r0, [sp, #284]	; 0x11c
    a4f4:	9a46      	ldr	r2, [sp, #280]	; 0x118
    a4f6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    a4f8:	f89d 1117 	ldrb.w	r1, [sp, #279]	; 0x117
    a4fc:	9816      	ldr	r0, [sp, #88]	; 0x58
    a4fe:	f7ff faf0 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a502:	9005      	str	r0, [sp, #20]
    a504:	e02e      	b.n	a564 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f6>
    a506:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a508:	f88d 010b 	strb.w	r0, [sp, #267]	; 0x10b
    a50c:	f24e 608c 	movw	r0, #59020	; 0xe68c
    a510:	f2c0 0001 	movt	r0, #1
    a514:	6800      	ldr	r0, [r0, #0]
    a516:	9043      	str	r0, [sp, #268]	; 0x10c
    a518:	2001      	movs	r0, #1
    a51a:	9044      	str	r0, [sp, #272]	; 0x110
    a51c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    a51e:	9b44      	ldr	r3, [sp, #272]	; 0x110
    a520:	f89d 110b 	ldrb.w	r1, [sp, #267]	; 0x10b
    a524:	9816      	ldr	r0, [sp, #88]	; 0x58
    a526:	f7ff fadc 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a52a:	9004      	str	r0, [sp, #16]
    a52c:	e7ff      	b.n	a52e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5c0>
    a52e:	9804      	ldr	r0, [sp, #16]
    a530:	f000 0001 	and.w	r0, r0, #1
    a534:	f7fe fb1a 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a538:	f88d 010a 	strb.w	r0, [sp, #266]	; 0x10a
    a53c:	e7ff      	b.n	a53e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5d0>
    a53e:	f89d 010a 	ldrb.w	r0, [sp, #266]	; 0x10a
    a542:	07c1      	lsls	r1, r0, #31
    a544:	2900      	cmp	r1, #0
    a546:	d001      	beq.n	a54c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5de>
    a548:	e7ff      	b.n	a54a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5dc>
    a54a:	e001      	b.n	a550 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e2>
        if self.rgb {
    a54c:	e024      	b.n	a598 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a54e:	defe      	udf	#254	; 0xfe
    a550:	f007 fd59 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a554:	e7ff      	b.n	a556 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e8>
    a556:	f00a ffe7 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a55a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a55e:	e7ff      	b.n	a560 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f2>
    a560:	e7ff      	b.n	a562 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a562:	e543      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a564:	9805      	ldr	r0, [sp, #20]
    a566:	f000 0001 	and.w	r0, r0, #1
    a56a:	f7fe faff 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a56e:	f88d 0116 	strb.w	r0, [sp, #278]	; 0x116
    a572:	e7ff      	b.n	a574 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x606>
    a574:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    a578:	07c1      	lsls	r1, r0, #31
    a57a:	2900      	cmp	r1, #0
    a57c:	d001      	beq.n	a582 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x614>
    a57e:	e7ff      	b.n	a580 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x612>
    a580:	e001      	b.n	a586 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x618>
        if self.rgb {
    a582:	e009      	b.n	a598 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a584:	defe      	udf	#254	; 0xfe
    a586:	f007 fd3e 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a58a:	e7ff      	b.n	a58c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x61e>
    a58c:	f00a ffcc 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a590:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a594:	e7ff      	b.n	a596 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x628>
    a596:	e7e4      	b.n	a562 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a598:	203a      	movs	r0, #58	; 0x3a
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a59a:	f88d 0123 	strb.w	r0, [sp, #291]	; 0x123
    a59e:	f24e 609c 	movw	r0, #59036	; 0xe69c
    a5a2:	f2c0 0001 	movt	r0, #1
    a5a6:	6800      	ldr	r0, [r0, #0]
    a5a8:	9049      	str	r0, [sp, #292]	; 0x124
    a5aa:	2001      	movs	r0, #1
    a5ac:	904a      	str	r0, [sp, #296]	; 0x128
    a5ae:	9a49      	ldr	r2, [sp, #292]	; 0x124
    a5b0:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    a5b2:	f89d 1123 	ldrb.w	r1, [sp, #291]	; 0x123
    a5b6:	9816      	ldr	r0, [sp, #88]	; 0x58
    a5b8:	f7ff fa93 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a5bc:	9003      	str	r0, [sp, #12]
    a5be:	e7ff      	b.n	a5c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x652>
    a5c0:	9803      	ldr	r0, [sp, #12]
    a5c2:	f000 0001 	and.w	r0, r0, #1
    a5c6:	f7fe fad1 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a5ca:	f88d 0122 	strb.w	r0, [sp, #290]	; 0x122
    a5ce:	e7ff      	b.n	a5d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x662>
    a5d0:	f89d 0122 	ldrb.w	r0, [sp, #290]	; 0x122
    a5d4:	07c1      	lsls	r1, r0, #31
    a5d6:	2900      	cmp	r1, #0
    a5d8:	d001      	beq.n	a5de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x670>
    a5da:	e7ff      	b.n	a5dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x66e>
    a5dc:	e010      	b.n	a600 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x692>
    a5de:	2029      	movs	r0, #41	; 0x29
        self.write_command(Instruction::DISPON, None)?;
    a5e0:	f88d 012f 	strb.w	r0, [sp, #303]	; 0x12f
    a5e4:	2000      	movs	r0, #0
    a5e6:	904d      	str	r0, [sp, #308]	; 0x134
    a5e8:	904c      	str	r0, [sp, #304]	; 0x130
    a5ea:	904c      	str	r0, [sp, #304]	; 0x130
    a5ec:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    a5ee:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    a5f0:	f89d 112f 	ldrb.w	r1, [sp, #303]	; 0x12f
    a5f4:	9816      	ldr	r0, [sp, #88]	; 0x58
    a5f6:	f7ff fa74 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a5fa:	9002      	str	r0, [sp, #8]
    a5fc:	e009      	b.n	a612 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a4>
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a5fe:	defe      	udf	#254	; 0xfe
    a600:	f007 fd01 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a604:	e7ff      	b.n	a606 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x698>
    a606:	f00a ff8f 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a60a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a60e:	e7ff      	b.n	a610 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a2>
    a610:	e4ec      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::DISPON, None)?;
    a612:	9802      	ldr	r0, [sp, #8]
    a614:	f000 0001 	and.w	r0, r0, #1
    a618:	f7fe faa8 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a61c:	f88d 012e 	strb.w	r0, [sp, #302]	; 0x12e
    a620:	e7ff      	b.n	a622 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6b4>
    a622:	f89d 012e 	ldrb.w	r0, [sp, #302]	; 0x12e
    a626:	07c1      	lsls	r1, r0, #31
    a628:	2900      	cmp	r1, #0
    a62a:	d001      	beq.n	a630 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c2>
    a62c:	e7ff      	b.n	a62e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c0>
    a62e:	e005      	b.n	a63c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6ce>
    a630:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a632:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a634:	f009 ffcf 	bl	145d6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a638:	e009      	b.n	a64e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e0>
        self.write_command(Instruction::DISPON, None)?;
    a63a:	defe      	udf	#254	; 0xfe
    a63c:	f007 fce3 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a640:	e7ff      	b.n	a642 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6d4>
    a642:	f00a ff71 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a646:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a64a:	e7ff      	b.n	a64c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6de>
    a64c:	e4ce      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    a64e:	f008 fffd 	bl	1364c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    a652:	9001      	str	r0, [sp, #4]
    a654:	e7ff      	b.n	a656 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e8>
    a656:	f24e 41b4 	movw	r1, #58548	; 0xe4b4
    a65a:	f2c0 0101 	movt	r1, #1
    a65e:	f24e 63a0 	movw	r3, #59040	; 0xe6a0
    a662:	f2c0 0301 	movt	r3, #1
    a666:	220e      	movs	r2, #14
    a668:	9801      	ldr	r0, [sp, #4]
    a66a:	f7fe fa46 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    a66e:	e7ff      	b.n	a670 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x702>
    a670:	2000      	movs	r0, #0
        Ok(())
    a672:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    }
    a676:	e4b9      	b.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>

0000a678 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>:
    fn to_u8(&self) -> Option<u8> {
    a678:	b580      	push	{r7, lr}
    a67a:	b08a      	sub	sp, #40	; 0x28
    a67c:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    a67e:	f000 fa8c 	bl	ab9a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>
    a682:	9307      	str	r3, [sp, #28]
    a684:	9206      	str	r2, [sp, #24]
    a686:	9105      	str	r1, [sp, #20]
    a688:	9004      	str	r0, [sp, #16]
    a68a:	e7ff      	b.n	a68c <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x14>
    a68c:	a804      	add	r0, sp, #16
    a68e:	f00a f88c 	bl	147aa <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    a692:	9003      	str	r0, [sp, #12]
    a694:	e7ff      	b.n	a696 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x1e>
    a696:	9803      	ldr	r0, [sp, #12]
    a698:	f00a f95a 	bl	14950 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    a69c:	9002      	str	r0, [sp, #8]
    a69e:	9101      	str	r1, [sp, #4]
    a6a0:	e7ff      	b.n	a6a2 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x2a>
    }
    a6a2:	9802      	ldr	r0, [sp, #8]
    a6a4:	f000 0001 	and.w	r0, r0, #1
    a6a8:	9901      	ldr	r1, [sp, #4]
    a6aa:	b00a      	add	sp, #40	; 0x28
    a6ac:	bd80      	pop	{r7, pc}

0000a6ae <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>:
    a6ae:	b082      	sub	sp, #8
    a6b0:	4601      	mov	r1, r0
    a6b2:	f8ad 0004 	strh.w	r0, [sp, #4]
    a6b6:	ba00      	rev	r0, r0
    a6b8:	0c00      	lsrs	r0, r0, #16
    a6ba:	f8ad 0006 	strh.w	r0, [sp, #6]
    a6be:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a6c2:	9000      	str	r0, [sp, #0]
    a6c4:	e7ff      	b.n	a6c6 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E+0x18>
    a6c6:	9800      	ldr	r0, [sp, #0]
    a6c8:	b002      	add	sp, #8
    a6ca:	4770      	bx	lr

0000a6cc <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>:
    a6cc:	b580      	push	{r7, lr}
    a6ce:	b084      	sub	sp, #16
    a6d0:	4601      	mov	r1, r0
    a6d2:	f8ad 000e 	strh.w	r0, [sp, #14]
    a6d6:	9102      	str	r1, [sp, #8]
    a6d8:	f7ff ffe9 	bl	a6ae <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>
    a6dc:	9001      	str	r0, [sp, #4]
    a6de:	e7ff      	b.n	a6e0 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E+0x14>
    a6e0:	9801      	ldr	r0, [sp, #4]
    a6e2:	b004      	add	sp, #16
    a6e4:	bd80      	pop	{r7, pc}

0000a6e6 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>:
    a6e6:	b580      	push	{r7, lr}
    a6e8:	b084      	sub	sp, #16
    a6ea:	9002      	str	r0, [sp, #8]
    a6ec:	9802      	ldr	r0, [sp, #8]
    a6ee:	f009 ffc0 	bl	14672 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>
    a6f2:	9001      	str	r0, [sp, #4]
    a6f4:	9100      	str	r1, [sp, #0]
    a6f6:	e7ff      	b.n	a6f8 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE+0x12>
    a6f8:	9801      	ldr	r0, [sp, #4]
    a6fa:	f000 0001 	and.w	r0, r0, #1
    a6fe:	9900      	ldr	r1, [sp, #0]
    a700:	b004      	add	sp, #16
    a702:	bd80      	pop	{r7, pc}

0000a704 <_ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE>:
    a704:	b081      	sub	sp, #4
    a706:	9000      	str	r0, [sp, #0]
    a708:	b001      	add	sp, #4
    a70a:	4770      	bx	lr

0000a70c <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>:
    a70c:	b580      	push	{r7, lr}
    a70e:	b082      	sub	sp, #8
    a710:	9001      	str	r0, [sp, #4]
    a712:	f000 f83e 	bl	a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
    a716:	e7ff      	b.n	a718 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE+0xc>
    a718:	b002      	add	sp, #8
    a71a:	bd80      	pop	{r7, pc}

0000a71c <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>:
    a71c:	b580      	push	{r7, lr}
    a71e:	b082      	sub	sp, #8
    a720:	9001      	str	r0, [sp, #4]
    a722:	6801      	ldr	r1, [r0, #0]
    a724:	2900      	cmp	r1, #0
    a726:	9000      	str	r0, [sp, #0]
    a728:	d102      	bne.n	a730 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x14>
    a72a:	e7ff      	b.n	a72c <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>
    a72c:	b002      	add	sp, #8
    a72e:	bd80      	pop	{r7, pc}
    a730:	9800      	ldr	r0, [sp, #0]
    a732:	3004      	adds	r0, #4
    a734:	f7ff ffea 	bl	a70c <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>
    a738:	e7f8      	b.n	a72c <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>

0000a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>:
    a73a:	b580      	push	{r7, lr}
    a73c:	b082      	sub	sp, #8
    a73e:	9001      	str	r0, [sp, #4]
    a740:	f00a f981 	bl	14a46 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>
    a744:	e7ff      	b.n	a746 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE+0xc>
    a746:	b002      	add	sp, #8
    a748:	bd80      	pop	{r7, pc}

0000a74a <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>:
    a74a:	b580      	push	{r7, lr}
    a74c:	b082      	sub	sp, #8
    a74e:	9001      	str	r0, [sp, #4]
    a750:	3024      	adds	r0, #36	; 0x24
    a752:	f000 f81e 	bl	a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
    a756:	e7ff      	b.n	a758 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E+0xe>
    a758:	b002      	add	sp, #8
    a75a:	bd80      	pop	{r7, pc}

0000a75c <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>:
    a75c:	b580      	push	{r7, lr}
    a75e:	b082      	sub	sp, #8
    a760:	9001      	str	r0, [sp, #4]
    a762:	9000      	str	r0, [sp, #0]
    a764:	f7ff fff1 	bl	a74a <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>
    a768:	e001      	b.n	a76e <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0x12>
    a76a:	b002      	add	sp, #8
    a76c:	bd80      	pop	{r7, pc}
    a76e:	9800      	ldr	r0, [sp, #0]
    a770:	3094      	adds	r0, #148	; 0x94
    a772:	f7ff ffe2 	bl	a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    a776:	e7f8      	b.n	a76a <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0xe>

0000a778 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>:
    a778:	b580      	push	{r7, lr}
    a77a:	b082      	sub	sp, #8
    a77c:	9001      	str	r0, [sp, #4]
    a77e:	9000      	str	r0, [sp, #0]
    a780:	f00a f989 	bl	14a96 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>
    a784:	e001      	b.n	a78a <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0x12>
    a786:	b002      	add	sp, #8
    a788:	bd80      	pop	{r7, pc}
    a78a:	9800      	ldr	r0, [sp, #0]
    a78c:	f7ff ffd5 	bl	a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    a790:	e7f9      	b.n	a786 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0xe>

0000a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>:
    a792:	b580      	push	{r7, lr}
    a794:	b082      	sub	sp, #8
    a796:	9001      	str	r0, [sp, #4]
    a798:	f00a f945 	bl	14a26 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>
    a79c:	e7ff      	b.n	a79e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E+0xc>
    a79e:	b002      	add	sp, #8
    a7a0:	bd80      	pop	{r7, pc}

0000a7a2 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>:
    a7a2:	b580      	push	{r7, lr}
    a7a4:	b082      	sub	sp, #8
    a7a6:	9001      	str	r0, [sp, #4]
    a7a8:	6801      	ldr	r1, [r0, #0]
    a7aa:	2900      	cmp	r1, #0
    a7ac:	9000      	str	r0, [sp, #0]
    a7ae:	d102      	bne.n	a7b6 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x14>
    a7b0:	e7ff      	b.n	a7b2 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>
    a7b2:	b002      	add	sp, #8
    a7b4:	bd80      	pop	{r7, pc}
    a7b6:	9800      	ldr	r0, [sp, #0]
    a7b8:	3004      	adds	r0, #4
    a7ba:	f000 f805 	bl	a7c8 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>
    a7be:	e7f8      	b.n	a7b2 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>

0000a7c0 <_ZN4core3ptr13drop_in_place17hef1277471241eea2E>:
    a7c0:	b081      	sub	sp, #4
    a7c2:	9000      	str	r0, [sp, #0]
    a7c4:	b001      	add	sp, #4
    a7c6:	4770      	bx	lr

0000a7c8 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>:
    a7c8:	b580      	push	{r7, lr}
    a7ca:	b082      	sub	sp, #8
    a7cc:	9001      	str	r0, [sp, #4]
    a7ce:	f7ff ffb4 	bl	a73a <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    a7d2:	e7ff      	b.n	a7d4 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE+0xc>
    a7d4:	b002      	add	sp, #8
    a7d6:	bd80      	pop	{r7, pc}

0000a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>:
    a7d8:	b089      	sub	sp, #36	; 0x24
    a7da:	9005      	str	r0, [sp, #20]
    a7dc:	9106      	str	r1, [sp, #24]
    a7de:	9107      	str	r1, [sp, #28]
    a7e0:	9907      	ldr	r1, [sp, #28]
    a7e2:	9002      	str	r0, [sp, #8]
    a7e4:	9101      	str	r1, [sp, #4]
    a7e6:	e7ff      	b.n	a7e8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x10>
    a7e8:	9802      	ldr	r0, [sp, #8]
    a7ea:	9008      	str	r0, [sp, #32]
    a7ec:	9908      	ldr	r1, [sp, #32]
    a7ee:	9100      	str	r1, [sp, #0]
    a7f0:	e7ff      	b.n	a7f2 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x1a>
    a7f2:	9800      	ldr	r0, [sp, #0]
    a7f4:	9003      	str	r0, [sp, #12]
    a7f6:	9901      	ldr	r1, [sp, #4]
    a7f8:	9104      	str	r1, [sp, #16]
    a7fa:	9803      	ldr	r0, [sp, #12]
    a7fc:	9904      	ldr	r1, [sp, #16]
    a7fe:	b009      	add	sp, #36	; 0x24
    a800:	4770      	bx	lr
	...

0000a804 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>:
use num_derive::ToPrimitive;

/// ST7735 instructions.
#[derive(ToPrimitive)]
    a804:	b08a      	sub	sp, #40	; 0x28
    a806:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Instruction {
    a808:	7800      	ldrb	r0, [r0, #0]
    a80a:	9001      	str	r0, [sp, #4]
    a80c:	9901      	ldr	r1, [sp, #4]
    a80e:	e8df f011 	tbh	[pc, r1, lsl #1]
    a812:	0103      	.short	0x0103
    a814:	01020107 	.word	0x01020107
    a818:	010c0102 	.word	0x010c0102
    a81c:	01020102 	.word	0x01020102
    a820:	01020102 	.word	0x01020102
    a824:	01020111 	.word	0x01020111
    a828:	01020102 	.word	0x01020102
    a82c:	01020102 	.word	0x01020102
    a830:	01160102 	.word	0x01160102
    a834:	0120011b 	.word	0x0120011b
    a838:	01020125 	.word	0x01020125
    a83c:	01020102 	.word	0x01020102
    a840:	01020102 	.word	0x01020102
    a844:	01020102 	.word	0x01020102
    a848:	01020102 	.word	0x01020102
    a84c:	01020102 	.word	0x01020102
    a850:	012a0102 	.word	0x012a0102
    a854:	0102012f 	.word	0x0102012f
    a858:	01020102 	.word	0x01020102
    a85c:	01020102 	.word	0x01020102
    a860:	01340102 	.word	0x01340102
    a864:	013e0139 	.word	0x013e0139
    a868:	01480143 	.word	0x01480143
    a86c:	014d0102 	.word	0x014d0102
    a870:	01520102 	.word	0x01520102
    a874:	01020102 	.word	0x01020102
    a878:	01020102 	.word	0x01020102
    a87c:	015c0102 	.word	0x015c0102
    a880:	01020102 	.word	0x01020102
    a884:	01570102 	.word	0x01570102
    a888:	01020102 	.word	0x01020102
    a88c:	01020102 	.word	0x01020102
    a890:	01020102 	.word	0x01020102
    a894:	01020102 	.word	0x01020102
    a898:	01020102 	.word	0x01020102
    a89c:	01020102 	.word	0x01020102
    a8a0:	01020102 	.word	0x01020102
    a8a4:	01020102 	.word	0x01020102
    a8a8:	01020102 	.word	0x01020102
    a8ac:	01020102 	.word	0x01020102
    a8b0:	01020102 	.word	0x01020102
    a8b4:	01020102 	.word	0x01020102
    a8b8:	01020102 	.word	0x01020102
    a8bc:	01020102 	.word	0x01020102
    a8c0:	01020102 	.word	0x01020102
    a8c4:	01020102 	.word	0x01020102
    a8c8:	01020102 	.word	0x01020102
    a8cc:	01020102 	.word	0x01020102
    a8d0:	01020102 	.word	0x01020102
    a8d4:	01020102 	.word	0x01020102
    a8d8:	01020102 	.word	0x01020102
    a8dc:	01020102 	.word	0x01020102
    a8e0:	01020102 	.word	0x01020102
    a8e4:	01020102 	.word	0x01020102
    a8e8:	01020102 	.word	0x01020102
    a8ec:	01020102 	.word	0x01020102
    a8f0:	01020102 	.word	0x01020102
    a8f4:	01020102 	.word	0x01020102
    a8f8:	01020102 	.word	0x01020102
    a8fc:	01020102 	.word	0x01020102
    a900:	01020102 	.word	0x01020102
    a904:	01020102 	.word	0x01020102
    a908:	01020102 	.word	0x01020102
    a90c:	01020102 	.word	0x01020102
    a910:	01020102 	.word	0x01020102
    a914:	01020102 	.word	0x01020102
    a918:	01020102 	.word	0x01020102
    a91c:	01020102 	.word	0x01020102
    a920:	01020102 	.word	0x01020102
    a924:	01020102 	.word	0x01020102
    a928:	01020102 	.word	0x01020102
    a92c:	01020102 	.word	0x01020102
    a930:	01020102 	.word	0x01020102
    a934:	01020102 	.word	0x01020102
    a938:	01020102 	.word	0x01020102
    a93c:	01020102 	.word	0x01020102
    a940:	01020102 	.word	0x01020102
    a944:	01020102 	.word	0x01020102
    a948:	01020102 	.word	0x01020102
    a94c:	01020102 	.word	0x01020102
    a950:	01020102 	.word	0x01020102
    a954:	01020102 	.word	0x01020102
    a958:	01020102 	.word	0x01020102
    a95c:	01020102 	.word	0x01020102
    a960:	01020102 	.word	0x01020102
    a964:	01020102 	.word	0x01020102
    a968:	01020102 	.word	0x01020102
    a96c:	01020102 	.word	0x01020102
    a970:	01020102 	.word	0x01020102
    a974:	01660161 	.word	0x01660161
    a978:	0170016b 	.word	0x0170016b
    a97c:	01750102 	.word	0x01750102
    a980:	01020102 	.word	0x01020102
    a984:	01020102 	.word	0x01020102
    a988:	01020102 	.word	0x01020102
    a98c:	01020102 	.word	0x01020102
    a990:	017a0102 	.word	0x017a0102
    a994:	0184017f 	.word	0x0184017f
    a998:	018e0189 	.word	0x018e0189
    a99c:	01020193 	.word	0x01020193
    a9a0:	01020102 	.word	0x01020102
    a9a4:	01020102 	.word	0x01020102
    a9a8:	01020102 	.word	0x01020102
    a9ac:	01020102 	.word	0x01020102
    a9b0:	01020102 	.word	0x01020102
    a9b4:	01020102 	.word	0x01020102
    a9b8:	01020102 	.word	0x01020102
    a9bc:	01020102 	.word	0x01020102
    a9c0:	01020102 	.word	0x01020102
    a9c4:	01980102 	.word	0x01980102
    a9c8:	01a2019d 	.word	0x01a2019d
    a9cc:	010201a7 	.word	0x010201a7
    a9d0:	01b10102 	.word	0x01b10102
    a9d4:	010200fd 	.word	0x010200fd
    a9d8:	01020102 	.word	0x01020102
    a9dc:	01020102 	.word	0x01020102
    a9e0:	01020102 	.word	0x01020102
    a9e4:	01020102 	.word	0x01020102
    a9e8:	01020102 	.word	0x01020102
    a9ec:	01020102 	.word	0x01020102
    a9f0:	01020102 	.word	0x01020102
    a9f4:	01020102 	.word	0x01020102
    a9f8:	01020102 	.word	0x01020102
    a9fc:	01020102 	.word	0x01020102
    aa00:	01020102 	.word	0x01020102
    aa04:	01020102 	.word	0x01020102
    aa08:	01ac0102 	.word	0x01ac0102
    aa0c:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    aa0e:	9007      	str	r0, [sp, #28]
    aa10:	20e1      	movs	r0, #225	; 0xe1
    aa12:	9006      	str	r0, [sp, #24]
    aa14:	e0b3      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa16:	defe      	udf	#254	; 0xfe
    aa18:	2000      	movs	r0, #0
    aa1a:	9007      	str	r0, [sp, #28]
    aa1c:	9006      	str	r0, [sp, #24]
    aa1e:	e0ae      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa20:	2000      	movs	r0, #0
    aa22:	9007      	str	r0, [sp, #28]
    aa24:	2001      	movs	r0, #1
    aa26:	9006      	str	r0, [sp, #24]
    aa28:	e0a9      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa2a:	2000      	movs	r0, #0
    aa2c:	9007      	str	r0, [sp, #28]
    aa2e:	2004      	movs	r0, #4
    aa30:	9006      	str	r0, [sp, #24]
    aa32:	e0a4      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa34:	2000      	movs	r0, #0
    aa36:	9007      	str	r0, [sp, #28]
    aa38:	2009      	movs	r0, #9
    aa3a:	9006      	str	r0, [sp, #24]
    aa3c:	e09f      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa3e:	2000      	movs	r0, #0
    aa40:	9007      	str	r0, [sp, #28]
    aa42:	2010      	movs	r0, #16
    aa44:	9006      	str	r0, [sp, #24]
    aa46:	e09a      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa48:	2000      	movs	r0, #0
    aa4a:	9007      	str	r0, [sp, #28]
    aa4c:	2011      	movs	r0, #17
    aa4e:	9006      	str	r0, [sp, #24]
    aa50:	e095      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa52:	2000      	movs	r0, #0
    aa54:	9007      	str	r0, [sp, #28]
    aa56:	2012      	movs	r0, #18
    aa58:	9006      	str	r0, [sp, #24]
    aa5a:	e090      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa5c:	2000      	movs	r0, #0
    aa5e:	9007      	str	r0, [sp, #28]
    aa60:	2013      	movs	r0, #19
    aa62:	9006      	str	r0, [sp, #24]
    aa64:	e08b      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa66:	2000      	movs	r0, #0
    aa68:	9007      	str	r0, [sp, #28]
    aa6a:	2020      	movs	r0, #32
    aa6c:	9006      	str	r0, [sp, #24]
    aa6e:	e086      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa70:	2000      	movs	r0, #0
    aa72:	9007      	str	r0, [sp, #28]
    aa74:	2021      	movs	r0, #33	; 0x21
    aa76:	9006      	str	r0, [sp, #24]
    aa78:	e081      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa7a:	2000      	movs	r0, #0
    aa7c:	9007      	str	r0, [sp, #28]
    aa7e:	2028      	movs	r0, #40	; 0x28
    aa80:	9006      	str	r0, [sp, #24]
    aa82:	e07c      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa84:	2000      	movs	r0, #0
    aa86:	9007      	str	r0, [sp, #28]
    aa88:	2029      	movs	r0, #41	; 0x29
    aa8a:	9006      	str	r0, [sp, #24]
    aa8c:	e077      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa8e:	2000      	movs	r0, #0
    aa90:	9007      	str	r0, [sp, #28]
    aa92:	202a      	movs	r0, #42	; 0x2a
    aa94:	9006      	str	r0, [sp, #24]
    aa96:	e072      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aa98:	2000      	movs	r0, #0
    aa9a:	9007      	str	r0, [sp, #28]
    aa9c:	202b      	movs	r0, #43	; 0x2b
    aa9e:	9006      	str	r0, [sp, #24]
    aaa0:	e06d      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aaa2:	2000      	movs	r0, #0
    aaa4:	9007      	str	r0, [sp, #28]
    aaa6:	202c      	movs	r0, #44	; 0x2c
    aaa8:	9006      	str	r0, [sp, #24]
    aaaa:	e068      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aaac:	2000      	movs	r0, #0
    aaae:	9007      	str	r0, [sp, #28]
    aab0:	202e      	movs	r0, #46	; 0x2e
    aab2:	9006      	str	r0, [sp, #24]
    aab4:	e063      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aab6:	2000      	movs	r0, #0
    aab8:	9007      	str	r0, [sp, #28]
    aaba:	2030      	movs	r0, #48	; 0x30
    aabc:	9006      	str	r0, [sp, #24]
    aabe:	e05e      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aac0:	2000      	movs	r0, #0
    aac2:	9007      	str	r0, [sp, #28]
    aac4:	203a      	movs	r0, #58	; 0x3a
    aac6:	9006      	str	r0, [sp, #24]
    aac8:	e059      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aaca:	2000      	movs	r0, #0
    aacc:	9007      	str	r0, [sp, #28]
    aace:	2036      	movs	r0, #54	; 0x36
    aad0:	9006      	str	r0, [sp, #24]
    aad2:	e054      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aad4:	2000      	movs	r0, #0
    aad6:	9007      	str	r0, [sp, #28]
    aad8:	20b1      	movs	r0, #177	; 0xb1
    aada:	9006      	str	r0, [sp, #24]
    aadc:	e04f      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aade:	2000      	movs	r0, #0
    aae0:	9007      	str	r0, [sp, #28]
    aae2:	20b2      	movs	r0, #178	; 0xb2
    aae4:	9006      	str	r0, [sp, #24]
    aae6:	e04a      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aae8:	2000      	movs	r0, #0
    aaea:	9007      	str	r0, [sp, #28]
    aaec:	20b3      	movs	r0, #179	; 0xb3
    aaee:	9006      	str	r0, [sp, #24]
    aaf0:	e045      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aaf2:	2000      	movs	r0, #0
    aaf4:	9007      	str	r0, [sp, #28]
    aaf6:	20b4      	movs	r0, #180	; 0xb4
    aaf8:	9006      	str	r0, [sp, #24]
    aafa:	e040      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aafc:	2000      	movs	r0, #0
    aafe:	9007      	str	r0, [sp, #28]
    ab00:	20b6      	movs	r0, #182	; 0xb6
    ab02:	9006      	str	r0, [sp, #24]
    ab04:	e03b      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab06:	2000      	movs	r0, #0
    ab08:	9007      	str	r0, [sp, #28]
    ab0a:	20c0      	movs	r0, #192	; 0xc0
    ab0c:	9006      	str	r0, [sp, #24]
    ab0e:	e036      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab10:	2000      	movs	r0, #0
    ab12:	9007      	str	r0, [sp, #28]
    ab14:	20c1      	movs	r0, #193	; 0xc1
    ab16:	9006      	str	r0, [sp, #24]
    ab18:	e031      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab1a:	2000      	movs	r0, #0
    ab1c:	9007      	str	r0, [sp, #28]
    ab1e:	20c2      	movs	r0, #194	; 0xc2
    ab20:	9006      	str	r0, [sp, #24]
    ab22:	e02c      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab24:	2000      	movs	r0, #0
    ab26:	9007      	str	r0, [sp, #28]
    ab28:	20c3      	movs	r0, #195	; 0xc3
    ab2a:	9006      	str	r0, [sp, #24]
    ab2c:	e027      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab2e:	2000      	movs	r0, #0
    ab30:	9007      	str	r0, [sp, #28]
    ab32:	20c4      	movs	r0, #196	; 0xc4
    ab34:	9006      	str	r0, [sp, #24]
    ab36:	e022      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab38:	2000      	movs	r0, #0
    ab3a:	9007      	str	r0, [sp, #28]
    ab3c:	20c5      	movs	r0, #197	; 0xc5
    ab3e:	9006      	str	r0, [sp, #24]
    ab40:	e01d      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab42:	2000      	movs	r0, #0
    ab44:	9007      	str	r0, [sp, #28]
    ab46:	20da      	movs	r0, #218	; 0xda
    ab48:	9006      	str	r0, [sp, #24]
    ab4a:	e018      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab4c:	2000      	movs	r0, #0
    ab4e:	9007      	str	r0, [sp, #28]
    ab50:	20db      	movs	r0, #219	; 0xdb
    ab52:	9006      	str	r0, [sp, #24]
    ab54:	e013      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab56:	2000      	movs	r0, #0
    ab58:	9007      	str	r0, [sp, #28]
    ab5a:	20dc      	movs	r0, #220	; 0xdc
    ab5c:	9006      	str	r0, [sp, #24]
    ab5e:	e00e      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab60:	2000      	movs	r0, #0
    ab62:	9007      	str	r0, [sp, #28]
    ab64:	20dd      	movs	r0, #221	; 0xdd
    ab66:	9006      	str	r0, [sp, #24]
    ab68:	e009      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab6a:	2000      	movs	r0, #0
    ab6c:	9007      	str	r0, [sp, #28]
    ab6e:	20fc      	movs	r0, #252	; 0xfc
    ab70:	9006      	str	r0, [sp, #24]
    ab72:	e004      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab74:	2000      	movs	r0, #0
    ab76:	9007      	str	r0, [sp, #28]
    ab78:	20e0      	movs	r0, #224	; 0xe0
    ab7a:	9006      	str	r0, [sp, #24]
    ab7c:	e7ff      	b.n	ab7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab7e:	9806      	ldr	r0, [sp, #24]
    ab80:	9907      	ldr	r1, [sp, #28]
    ab82:	9105      	str	r1, [sp, #20]
    ab84:	9004      	str	r0, [sp, #16]
    ab86:	2000      	movs	r0, #0
    ab88:	9003      	str	r0, [sp, #12]
    ab8a:	2001      	movs	r0, #1
    ab8c:	9002      	str	r0, [sp, #8]
    ab8e:	9802      	ldr	r0, [sp, #8]
    ab90:	9903      	ldr	r1, [sp, #12]
    ab92:	9a04      	ldr	r2, [sp, #16]
    ab94:	9b05      	ldr	r3, [sp, #20]
    ab96:	b00a      	add	sp, #40	; 0x28
    ab98:	4770      	bx	lr

0000ab9a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>:
    ab9a:	b580      	push	{r7, lr}
    ab9c:	b08a      	sub	sp, #40	; 0x28
    ab9e:	9009      	str	r0, [sp, #36]	; 0x24
    aba0:	f7ff fe30 	bl	a804 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>
    aba4:	9108      	str	r1, [sp, #32]
    aba6:	9007      	str	r0, [sp, #28]
    aba8:	9306      	str	r3, [sp, #24]
    abaa:	9205      	str	r2, [sp, #20]
    abac:	e7ff      	b.n	abae <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x14>
    abae:	9807      	ldr	r0, [sp, #28]
    abb0:	9908      	ldr	r1, [sp, #32]
    abb2:	9a05      	ldr	r2, [sp, #20]
    abb4:	9b06      	ldr	r3, [sp, #24]
    abb6:	f000 f859 	bl	ac6c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>
    abba:	9104      	str	r1, [sp, #16]
    abbc:	9003      	str	r0, [sp, #12]
    abbe:	9302      	str	r3, [sp, #8]
    abc0:	9201      	str	r2, [sp, #4]
    abc2:	e7ff      	b.n	abc4 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x2a>
    abc4:	9803      	ldr	r0, [sp, #12]
    abc6:	9904      	ldr	r1, [sp, #16]
    abc8:	9a01      	ldr	r2, [sp, #4]
    abca:	9b02      	ldr	r3, [sp, #8]
    abcc:	b00a      	add	sp, #40	; 0x28
    abce:	bd80      	pop	{r7, pc}

0000abd0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>:
#[derive(ToPrimitive)]
    abd0:	b08a      	sub	sp, #40	; 0x28
    abd2:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Orientation {
    abd4:	7800      	ldrb	r0, [r0, #0]
    abd6:	4601      	mov	r1, r0
    abd8:	2800      	cmp	r0, #0
    abda:	9101      	str	r1, [sp, #4]
    abdc:	d00f      	beq.n	abfe <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x2e>
    abde:	e7ff      	b.n	abe0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x10>
    abe0:	9801      	ldr	r0, [sp, #4]
    abe2:	2860      	cmp	r0, #96	; 0x60
    abe4:	d00f      	beq.n	ac06 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x36>
    abe6:	e7ff      	b.n	abe8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x18>
    abe8:	9801      	ldr	r0, [sp, #4]
    abea:	28a0      	cmp	r0, #160	; 0xa0
    abec:	d001      	beq.n	abf2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x22>
    abee:	e7ff      	b.n	abf0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x20>
    abf0:	e00e      	b.n	ac10 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x40>
    abf2:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    abf4:	9007      	str	r0, [sp, #28]
    abf6:	20a0      	movs	r0, #160	; 0xa0
    abf8:	9006      	str	r0, [sp, #24]
    abfa:	e00e      	b.n	ac1a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    abfc:	defe      	udf	#254	; 0xfe
    abfe:	2000      	movs	r0, #0
    ac00:	9007      	str	r0, [sp, #28]
    ac02:	9006      	str	r0, [sp, #24]
    ac04:	e009      	b.n	ac1a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    ac06:	2000      	movs	r0, #0
    ac08:	9007      	str	r0, [sp, #28]
    ac0a:	2060      	movs	r0, #96	; 0x60
    ac0c:	9006      	str	r0, [sp, #24]
    ac0e:	e004      	b.n	ac1a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    ac10:	2000      	movs	r0, #0
    ac12:	9007      	str	r0, [sp, #28]
    ac14:	20c0      	movs	r0, #192	; 0xc0
    ac16:	9006      	str	r0, [sp, #24]
    ac18:	e7ff      	b.n	ac1a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    ac1a:	9806      	ldr	r0, [sp, #24]
    ac1c:	9907      	ldr	r1, [sp, #28]
    ac1e:	9105      	str	r1, [sp, #20]
    ac20:	9004      	str	r0, [sp, #16]
    ac22:	2000      	movs	r0, #0
    ac24:	9003      	str	r0, [sp, #12]
    ac26:	2001      	movs	r0, #1
    ac28:	9002      	str	r0, [sp, #8]
    ac2a:	9802      	ldr	r0, [sp, #8]
    ac2c:	9903      	ldr	r1, [sp, #12]
    ac2e:	9a04      	ldr	r2, [sp, #16]
    ac30:	9b05      	ldr	r3, [sp, #20]
    ac32:	b00a      	add	sp, #40	; 0x28
    ac34:	4770      	bx	lr

0000ac36 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>:
    ac36:	b580      	push	{r7, lr}
    ac38:	b08a      	sub	sp, #40	; 0x28
    ac3a:	9009      	str	r0, [sp, #36]	; 0x24
    ac3c:	f7ff ffc8 	bl	abd0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>
    ac40:	9108      	str	r1, [sp, #32]
    ac42:	9007      	str	r0, [sp, #28]
    ac44:	9306      	str	r3, [sp, #24]
    ac46:	9205      	str	r2, [sp, #20]
    ac48:	e7ff      	b.n	ac4a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x14>
    ac4a:	9807      	ldr	r0, [sp, #28]
    ac4c:	9908      	ldr	r1, [sp, #32]
    ac4e:	9a05      	ldr	r2, [sp, #20]
    ac50:	9b06      	ldr	r3, [sp, #24]
    ac52:	f000 f863 	bl	ad1c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>
    ac56:	9104      	str	r1, [sp, #16]
    ac58:	9003      	str	r0, [sp, #12]
    ac5a:	9302      	str	r3, [sp, #8]
    ac5c:	9201      	str	r2, [sp, #4]
    ac5e:	e7ff      	b.n	ac60 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x2a>
    ac60:	9803      	ldr	r0, [sp, #12]
    ac62:	9904      	ldr	r1, [sp, #16]
    ac64:	9a01      	ldr	r2, [sp, #4]
    ac66:	9b02      	ldr	r3, [sp, #8]
    ac68:	b00a      	add	sp, #40	; 0x28
    ac6a:	bd80      	pop	{r7, pc}

0000ac6c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>:
    ac6c:	b5b0      	push	{r4, r5, r7, lr}
    ac6e:	b090      	sub	sp, #64	; 0x40
    ac70:	469c      	mov	ip, r3
    ac72:	4696      	mov	lr, r2
    ac74:	460c      	mov	r4, r1
    ac76:	4605      	mov	r5, r0
    ac78:	9103      	str	r1, [sp, #12]
    ac7a:	9002      	str	r0, [sp, #8]
    ac7c:	9305      	str	r3, [sp, #20]
    ac7e:	9204      	str	r2, [sp, #16]
    ac80:	2000      	movs	r0, #0
    ac82:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ac86:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ac8a:	2001      	movs	r0, #1
    ac8c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ac90:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ac94:	9802      	ldr	r0, [sp, #8]
    ac96:	2800      	cmp	r0, #0
    ac98:	d001      	beq.n	ac9e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x32>
    ac9a:	e7ff      	b.n	ac9c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x30>
    ac9c:	e004      	b.n	aca8 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x3c>
    ac9e:	2000      	movs	r0, #0
    aca0:	9007      	str	r0, [sp, #28]
    aca2:	9006      	str	r0, [sp, #24]
    aca4:	e023      	b.n	acee <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    aca6:	defe      	udf	#254	; 0xfe
    aca8:	2000      	movs	r0, #0
    acaa:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    acae:	9904      	ldr	r1, [sp, #16]
    acb0:	9a05      	ldr	r2, [sp, #20]
    acb2:	920f      	str	r2, [sp, #60]	; 0x3c
    acb4:	910e      	str	r1, [sp, #56]	; 0x38
    acb6:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    acba:	920b      	str	r2, [sp, #44]	; 0x2c
    acbc:	910a      	str	r1, [sp, #40]	; 0x28
    acbe:	980a      	ldr	r0, [sp, #40]	; 0x28
    acc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    acc2:	f000 f883 	bl	adcc <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>
    acc6:	9101      	str	r1, [sp, #4]
    acc8:	9000      	str	r0, [sp, #0]
    acca:	e7ff      	b.n	accc <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x60>
    accc:	9800      	ldr	r0, [sp, #0]
    acce:	9008      	str	r0, [sp, #32]
    acd0:	9901      	ldr	r1, [sp, #4]
    acd2:	9109      	str	r1, [sp, #36]	; 0x24
    acd4:	2200      	movs	r2, #0
    acd6:	9207      	str	r2, [sp, #28]
    acd8:	2201      	movs	r2, #1
    acda:	9206      	str	r2, [sp, #24]
    acdc:	e007      	b.n	acee <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    acde:	9802      	ldr	r0, [sp, #8]
    ace0:	2801      	cmp	r0, #1
    ace2:	d010      	beq.n	ad06 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x9a>
    ace4:	e019      	b.n	ad1a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xae>
    ace6:	2000      	movs	r0, #0
    ace8:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    acec:	e7f7      	b.n	acde <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    acee:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    acf2:	07c0      	lsls	r0, r0, #31
    acf4:	2800      	cmp	r0, #0
    acf6:	d1f6      	bne.n	ace6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x7a>
    acf8:	e7f1      	b.n	acde <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    acfa:	9806      	ldr	r0, [sp, #24]
    acfc:	9907      	ldr	r1, [sp, #28]
    acfe:	9a08      	ldr	r2, [sp, #32]
    ad00:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ad02:	b010      	add	sp, #64	; 0x40
    ad04:	bdb0      	pop	{r4, r5, r7, pc}
    ad06:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    ad0a:	07c0      	lsls	r0, r0, #31
    ad0c:	2800      	cmp	r0, #0
    ad0e:	d0f4      	beq.n	acfa <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    ad10:	e7ff      	b.n	ad12 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xa6>
    ad12:	2000      	movs	r0, #0
    ad14:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ad18:	e7ef      	b.n	acfa <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    ad1a:	e7ee      	b.n	acfa <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>

0000ad1c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>:
    ad1c:	b5b0      	push	{r4, r5, r7, lr}
    ad1e:	b090      	sub	sp, #64	; 0x40
    ad20:	469c      	mov	ip, r3
    ad22:	4696      	mov	lr, r2
    ad24:	460c      	mov	r4, r1
    ad26:	4605      	mov	r5, r0
    ad28:	9103      	str	r1, [sp, #12]
    ad2a:	9002      	str	r0, [sp, #8]
    ad2c:	9305      	str	r3, [sp, #20]
    ad2e:	9204      	str	r2, [sp, #16]
    ad30:	2000      	movs	r0, #0
    ad32:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ad36:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ad3a:	2001      	movs	r0, #1
    ad3c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ad40:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ad44:	9802      	ldr	r0, [sp, #8]
    ad46:	2800      	cmp	r0, #0
    ad48:	d001      	beq.n	ad4e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x32>
    ad4a:	e7ff      	b.n	ad4c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x30>
    ad4c:	e004      	b.n	ad58 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x3c>
    ad4e:	2000      	movs	r0, #0
    ad50:	9007      	str	r0, [sp, #28]
    ad52:	9006      	str	r0, [sp, #24]
    ad54:	e023      	b.n	ad9e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    ad56:	defe      	udf	#254	; 0xfe
    ad58:	2000      	movs	r0, #0
    ad5a:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ad5e:	9904      	ldr	r1, [sp, #16]
    ad60:	9a05      	ldr	r2, [sp, #20]
    ad62:	920f      	str	r2, [sp, #60]	; 0x3c
    ad64:	910e      	str	r1, [sp, #56]	; 0x38
    ad66:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ad6a:	920b      	str	r2, [sp, #44]	; 0x2c
    ad6c:	910a      	str	r1, [sp, #40]	; 0x28
    ad6e:	980a      	ldr	r0, [sp, #40]	; 0x28
    ad70:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ad72:	f00b fe6d 	bl	16a50 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>
    ad76:	9101      	str	r1, [sp, #4]
    ad78:	9000      	str	r0, [sp, #0]
    ad7a:	e7ff      	b.n	ad7c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x60>
    ad7c:	9800      	ldr	r0, [sp, #0]
    ad7e:	9008      	str	r0, [sp, #32]
    ad80:	9901      	ldr	r1, [sp, #4]
    ad82:	9109      	str	r1, [sp, #36]	; 0x24
    ad84:	2200      	movs	r2, #0
    ad86:	9207      	str	r2, [sp, #28]
    ad88:	2201      	movs	r2, #1
    ad8a:	9206      	str	r2, [sp, #24]
    ad8c:	e007      	b.n	ad9e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    ad8e:	9802      	ldr	r0, [sp, #8]
    ad90:	2801      	cmp	r0, #1
    ad92:	d010      	beq.n	adb6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x9a>
    ad94:	e019      	b.n	adca <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xae>
    ad96:	2000      	movs	r0, #0
    ad98:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ad9c:	e7f7      	b.n	ad8e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    ad9e:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    ada2:	07c0      	lsls	r0, r0, #31
    ada4:	2800      	cmp	r0, #0
    ada6:	d1f6      	bne.n	ad96 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x7a>
    ada8:	e7f1      	b.n	ad8e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    adaa:	9806      	ldr	r0, [sp, #24]
    adac:	9907      	ldr	r1, [sp, #28]
    adae:	9a08      	ldr	r2, [sp, #32]
    adb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    adb2:	b010      	add	sp, #64	; 0x40
    adb4:	bdb0      	pop	{r4, r5, r7, pc}
    adb6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    adba:	07c0      	lsls	r0, r0, #31
    adbc:	2800      	cmp	r0, #0
    adbe:	d0f4      	beq.n	adaa <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    adc0:	e7ff      	b.n	adc2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xa6>
    adc2:	2000      	movs	r0, #0
    adc4:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    adc8:	e7ef      	b.n	adaa <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    adca:	e7ee      	b.n	adaa <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>

0000adcc <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>:
    adcc:	b084      	sub	sp, #16
    adce:	460a      	mov	r2, r1
    add0:	4603      	mov	r3, r0
    add2:	9103      	str	r1, [sp, #12]
    add4:	9002      	str	r0, [sp, #8]
    add6:	b004      	add	sp, #16
    add8:	4770      	bx	lr

0000adda <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E>:
    adda:	b084      	sub	sp, #16
    addc:	9000      	str	r0, [sp, #0]
    adde:	9101      	str	r1, [sp, #4]
    ade0:	9102      	str	r1, [sp, #8]
    ade2:	9003      	str	r0, [sp, #12]
    ade4:	6802      	ldr	r2, [r0, #0]
    ade6:	6840      	ldr	r0, [r0, #4]
    ade8:	680b      	ldr	r3, [r1, #0]
    adea:	6849      	ldr	r1, [r1, #4]
    adec:	4048      	eors	r0, r1
    adee:	ea82 0103 	eor.w	r1, r2, r3
    adf2:	4308      	orrs	r0, r1
    adf4:	fab0 f080 	clz	r0, r0
    adf8:	0940      	lsrs	r0, r0, #5
    adfa:	b004      	add	sp, #16
    adfc:	4770      	bx	lr

0000adfe <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E>:
/// ```rust
/// let peripherals = nrf52::Peripherals::take().unwrap();
/// let nfcpins = peripherals.UICR.nfcpins.read().bits();
/// console::print("nfcpins = "); console::printhex(nfcpins as u8); console::print("\n");
/// ```
pub fn start_touch_sensor() -> MynewtResult<()> {
    adfe:	b5b0      	push	{r4, r5, r7, lr}
    ae00:	b0be      	sub	sp, #248	; 0xf8
    console::print("Rust touch sensor\n");
    ae02:	f24e 60b0 	movw	r0, #59056	; 0xe6b0
    ae06:	f2c0 0001 	movt	r0, #1
    ae0a:	2112      	movs	r1, #18
    ae0c:	f7fe f8f0 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    ae10:	e7ff      	b.n	ae12 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x14>

    //  Init GPIO for the Reset Pin
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    ae12:	f240 1064 	movw	r0, #356	; 0x164
    ae16:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ae1a:	210a      	movs	r1, #10
    ae1c:	f009 fb2b 	bl	14476 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    ae20:	9012      	str	r0, [sp, #72]	; 0x48
    ae22:	e7ff      	b.n	ae24 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x26>
    ae24:	9812      	ldr	r0, [sp, #72]	; 0x48
    ae26:	f7fd fea7 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    ae2a:	9014      	str	r0, [sp, #80]	; 0x50
    ae2c:	e7ff      	b.n	ae2e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x30>
    ae2e:	9814      	ldr	r0, [sp, #80]	; 0x50
    ae30:	1e41      	subs	r1, r0, #1
    ae32:	bf18      	it	ne
    ae34:	2101      	movne	r1, #1
    ae36:	2801      	cmp	r0, #1
    ae38:	d001      	beq.n	ae3e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x40>
    ae3a:	e7ff      	b.n	ae3c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x3e>
    ae3c:	e008      	b.n	ae50 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x52>

    //  Reset the touch controller by switching the Reset Pin low then high with pauses. Based on https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L1017-L1167
    unsafe {
        TOUCH_RESET.set_low() ? ;
    ae3e:	f240 1064 	movw	r0, #356	; 0x164
    ae42:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ae46:	f009 fbaf 	bl	145a8 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    ae4a:	9011      	str	r0, [sp, #68]	; 0x44
    ae4c:	e00f      	b.n	ae6e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x70>
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    ae4e:	defe      	udf	#254	; 0xfe
    ae50:	9814      	ldr	r0, [sp, #80]	; 0x50
    ae52:	9036      	str	r0, [sp, #216]	; 0xd8
    ae54:	f007 fd0c 	bl	12870 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    ae58:	9010      	str	r0, [sp, #64]	; 0x40
    ae5a:	e002      	b.n	ae62 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x64>
    assert_eq!(rc, 0, "IRQ init fail");

    //  Start monitoring for touch controller interrupts
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    Ok(())
}
    ae5c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    ae5e:	b03e      	add	sp, #248	; 0xf8
    ae60:	bdb0      	pop	{r4, r5, r7, pc}
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    ae62:	9810      	ldr	r0, [sp, #64]	; 0x40
    ae64:	f7fd fe7c 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    ae68:	9013      	str	r0, [sp, #76]	; 0x4c
    ae6a:	e7ff      	b.n	ae6c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x6e>
    ae6c:	e7f6      	b.n	ae5c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>
        TOUCH_RESET.set_low() ? ;
    ae6e:	9811      	ldr	r0, [sp, #68]	; 0x44
    ae70:	f7fd fe82 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    ae74:	9015      	str	r0, [sp, #84]	; 0x54
    ae76:	e7ff      	b.n	ae78 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x7a>
    ae78:	9815      	ldr	r0, [sp, #84]	; 0x54
    ae7a:	1e41      	subs	r1, r0, #1
    ae7c:	bf18      	it	ne
    ae7e:	2101      	movne	r1, #1
    ae80:	2801      	cmp	r0, #1
    ae82:	d001      	beq.n	ae88 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x8a>
    ae84:	e7ff      	b.n	ae86 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x88>
    ae86:	e008      	b.n	ae9a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x9c>
        TOUCH_DELAY.delay_ms(20);
    ae88:	f240 1068 	movw	r0, #360	; 0x168
    ae8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ae90:	2114      	movs	r1, #20
    ae92:	f009 fba0 	bl	145d6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    ae96:	e00d      	b.n	aeb4 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb6>
        TOUCH_RESET.set_low() ? ;
    ae98:	defe      	udf	#254	; 0xfe
    ae9a:	9815      	ldr	r0, [sp, #84]	; 0x54
    ae9c:	9037      	str	r0, [sp, #220]	; 0xdc
    ae9e:	f007 fce7 	bl	12870 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    aea2:	900f      	str	r0, [sp, #60]	; 0x3c
    aea4:	e7ff      	b.n	aea6 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xa8>
    aea6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    aea8:	f7fd fe5a 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    aeac:	9013      	str	r0, [sp, #76]	; 0x4c
    aeae:	e7ff      	b.n	aeb0 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb2>
    aeb0:	e7ff      	b.n	aeb2 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb4>
    aeb2:	e7d3      	b.n	ae5c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>
        TOUCH_RESET.set_high() ? ;
    aeb4:	f240 1064 	movw	r0, #356	; 0x164
    aeb8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    aebc:	f009 fb7f 	bl	145be <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    aec0:	900e      	str	r0, [sp, #56]	; 0x38
    aec2:	e7ff      	b.n	aec4 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xc6>
    aec4:	980e      	ldr	r0, [sp, #56]	; 0x38
    aec6:	f7fd fe57 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    aeca:	9016      	str	r0, [sp, #88]	; 0x58
    aecc:	e7ff      	b.n	aece <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xd0>
    aece:	9816      	ldr	r0, [sp, #88]	; 0x58
    aed0:	1e41      	subs	r1, r0, #1
    aed2:	bf18      	it	ne
    aed4:	2101      	movne	r1, #1
    aed6:	2801      	cmp	r0, #1
    aed8:	d001      	beq.n	aede <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xe0>
    aeda:	e7ff      	b.n	aedc <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xde>
    aedc:	e008      	b.n	aef0 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xf2>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    aede:	f240 1068 	movw	r0, #360	; 0x168
    aee2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    aee6:	21c8      	movs	r1, #200	; 0xc8
    aee8:	f009 fb75 	bl	145d6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    aeec:	e00c      	b.n	af08 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x10a>
        TOUCH_RESET.set_high() ? ;
    aeee:	defe      	udf	#254	; 0xfe
    aef0:	9816      	ldr	r0, [sp, #88]	; 0x58
    aef2:	9038      	str	r0, [sp, #224]	; 0xe0
    aef4:	f007 fcbc 	bl	12870 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    aef8:	900d      	str	r0, [sp, #52]	; 0x34
    aefa:	e7ff      	b.n	aefc <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xfe>
    aefc:	980d      	ldr	r0, [sp, #52]	; 0x34
    aefe:	f7fd fe2f 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    af02:	9013      	str	r0, [sp, #76]	; 0x4c
    af04:	e7ff      	b.n	af06 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x108>
    af06:	e7d4      	b.n	aeb2 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb4>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    af08:	f240 1068 	movw	r0, #360	; 0x168
    af0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    af10:	21c8      	movs	r1, #200	; 0xc8
    af12:	f009 fb60 	bl	145d6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    af16:	e7ff      	b.n	af18 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x11a>
    unsafe { TOUCH_EVENT.ev_cb = Some( touch_event_callback ) };
    af18:	f24b 00bb 	movw	r0, #45243	; 0xb0bb
    af1c:	f2c0 0000 	movt	r0, #0
    af20:	9017      	str	r0, [sp, #92]	; 0x5c
    af22:	9817      	ldr	r0, [sp, #92]	; 0x5c
    af24:	f240 11fc 	movw	r1, #508	; 0x1fc
    af28:	f2c2 0100 	movt	r1, #8192	; 0x2000
    af2c:	6048      	str	r0, [r1, #4]
        Some( touch_interrupt_handler ),  //  Call `touch_interrupt_handler()` upon detecting interrupt
    af2e:	f24b 006f 	movw	r0, #45167	; 0xb06f
    af32:	f2c0 0000 	movt	r0, #0
    af36:	9019      	str	r0, [sp, #100]	; 0x64
        core::ptr::null_mut(),            //  No arguments for `touch_interrupt_handler()`
    af38:	e7ff      	b.n	af3a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x13c>
    let rc = unsafe { hal::hal_gpio_irq_init(
    af3a:	9919      	ldr	r1, [sp, #100]	; 0x64
    af3c:	4668      	mov	r0, sp
    af3e:	2201      	movs	r2, #1
    af40:	6002      	str	r2, [r0, #0]
    af42:	201c      	movs	r0, #28
    af44:	2200      	movs	r2, #0
    af46:	2302      	movs	r3, #2
    af48:	f00e fee0 	bl	19d0c <hal_gpio_irq_init>
    af4c:	9018      	str	r0, [sp, #96]	; 0x60
    af4e:	e7ff      	b.n	af50 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x152>
    assert_eq!(rc, 0, "IRQ init fail");
    af50:	f24e 60c8 	movw	r0, #59080	; 0xe6c8
    af54:	f2c0 0001 	movt	r0, #1
    af58:	6800      	ldr	r0, [r0, #0]
    af5a:	a918      	add	r1, sp, #96	; 0x60
    af5c:	911a      	str	r1, [sp, #104]	; 0x68
    af5e:	901b      	str	r0, [sp, #108]	; 0x6c
    af60:	981a      	ldr	r0, [sp, #104]	; 0x68
    af62:	9039      	str	r0, [sp, #228]	; 0xe4
    af64:	991b      	ldr	r1, [sp, #108]	; 0x6c
    af66:	913a      	str	r1, [sp, #232]	; 0xe8
    af68:	6802      	ldr	r2, [r0, #0]
    af6a:	680b      	ldr	r3, [r1, #0]
    af6c:	429a      	cmp	r2, r3
    af6e:	900c      	str	r0, [sp, #48]	; 0x30
    af70:	910b      	str	r1, [sp, #44]	; 0x2c
    af72:	d104      	bne.n	af7e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x180>
    af74:	e7ff      	b.n	af76 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x178>
    af76:	201c      	movs	r0, #28
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    af78:	f00e ff04 	bl	19d84 <hal_gpio_irq_enable>
    af7c:	e072      	b.n	b064 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x266>
    assert_eq!(rc, 0, "IRQ init fail");
    af7e:	f24e 7020 	movw	r0, #59168	; 0xe720
    af82:	f2c0 0001 	movt	r0, #1
    af86:	6801      	ldr	r1, [r0, #0]
    af88:	980c      	ldr	r0, [sp, #48]	; 0x30
    af8a:	902b      	str	r0, [sp, #172]	; 0xac
    af8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    af8e:	922c      	str	r2, [sp, #176]	; 0xb0
    af90:	f24e 733c 	movw	r3, #59196	; 0xe73c
    af94:	f2c0 0301 	movt	r3, #1
    af98:	681b      	ldr	r3, [r3, #0]
    af9a:	f24e 7c40 	movw	ip, #59200	; 0xe740
    af9e:	f2c0 0c01 	movt	ip, #1
    afa2:	f8dc c000 	ldr.w	ip, [ip]
    afa6:	46ee      	mov	lr, sp
    afa8:	2400      	movs	r4, #0
    afaa:	f8ce 4000 	str.w	r4, [lr]
    afae:	a82d      	add	r0, sp, #180	; 0xb4
    afb0:	2201      	movs	r2, #1
    afb2:	910a      	str	r1, [sp, #40]	; 0x28
    afb4:	4619      	mov	r1, r3
    afb6:	4663      	mov	r3, ip
    afb8:	f00b fd6e 	bl	16a98 <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>
    afbc:	e7ff      	b.n	afbe <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x1c0>
    afbe:	a82b      	add	r0, sp, #172	; 0xac
    afc0:	9028      	str	r0, [sp, #160]	; 0xa0
    afc2:	a82c      	add	r0, sp, #176	; 0xb0
    afc4:	9029      	str	r0, [sp, #164]	; 0xa4
    afc6:	a82d      	add	r0, sp, #180	; 0xb4
    afc8:	902a      	str	r0, [sp, #168]	; 0xa8
    afca:	9828      	ldr	r0, [sp, #160]	; 0xa0
    afcc:	903b      	str	r0, [sp, #236]	; 0xec
    afce:	9929      	ldr	r1, [sp, #164]	; 0xa4
    afd0:	913c      	str	r1, [sp, #240]	; 0xf0
    afd2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    afd4:	923d      	str	r2, [sp, #244]	; 0xf4
    afd6:	f241 73c3 	movw	r3, #6083	; 0x17c3
    afda:	f2c0 0301 	movt	r3, #1
    afde:	9109      	str	r1, [sp, #36]	; 0x24
    afe0:	4619      	mov	r1, r3
    afe2:	9208      	str	r2, [sp, #32]
    afe4:	f7fe f9b9 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    afe8:	9007      	str	r0, [sp, #28]
    afea:	9106      	str	r1, [sp, #24]
    afec:	e7ff      	b.n	afee <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x1f0>
    afee:	f241 71c3 	movw	r1, #6083	; 0x17c3
    aff2:	f2c0 0101 	movt	r1, #1
    aff6:	9809      	ldr	r0, [sp, #36]	; 0x24
    aff8:	f7fe f9af 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    affc:	9005      	str	r0, [sp, #20]
    affe:	9104      	str	r1, [sp, #16]
    b000:	e7ff      	b.n	b002 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x204>
    b002:	f647 71a7 	movw	r1, #32679	; 0x7fa7
    b006:	f2c0 0101 	movt	r1, #1
    b00a:	9808      	ldr	r0, [sp, #32]
    b00c:	f7fe f9e4 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    b010:	9003      	str	r0, [sp, #12]
    b012:	9102      	str	r1, [sp, #8]
    b014:	e7ff      	b.n	b016 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x218>
    b016:	9807      	ldr	r0, [sp, #28]
    b018:	9022      	str	r0, [sp, #136]	; 0x88
    b01a:	9906      	ldr	r1, [sp, #24]
    b01c:	9123      	str	r1, [sp, #140]	; 0x8c
    b01e:	9a05      	ldr	r2, [sp, #20]
    b020:	9224      	str	r2, [sp, #144]	; 0x90
    b022:	9b04      	ldr	r3, [sp, #16]
    b024:	9325      	str	r3, [sp, #148]	; 0x94
    b026:	f8dd c00c 	ldr.w	ip, [sp, #12]
    b02a:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
    b02e:	f8dd e008 	ldr.w	lr, [sp, #8]
    b032:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
    b036:	466c      	mov	r4, sp
    b038:	2503      	movs	r5, #3
    b03a:	6025      	str	r5, [r4, #0]
    b03c:	a81c      	add	r0, sp, #112	; 0x70
    b03e:	ab22      	add	r3, sp, #136	; 0x88
    b040:	990a      	ldr	r1, [sp, #40]	; 0x28
    b042:	462a      	mov	r2, r5
    b044:	f00b fd28 	bl	16a98 <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>
    b048:	e7ff      	b.n	b04a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x24c>
    b04a:	f24e 7060 	movw	r0, #59232	; 0xe760
    b04e:	f2c0 0001 	movt	r0, #1
    b052:	f00c fcba 	bl	179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    b056:	9001      	str	r0, [sp, #4]
    b058:	e7ff      	b.n	b05a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x25c>
    b05a:	a81c      	add	r0, sp, #112	; 0x70
    b05c:	9901      	ldr	r1, [sp, #4]
    b05e:	f00c fcf1 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    b062:	defe      	udf	#254	; 0xfe
    b064:	2000      	movs	r0, #0
    Ok(())
    b066:	9013      	str	r0, [sp, #76]	; 0x4c
    b068:	2001      	movs	r0, #1
    b06a:	9013      	str	r0, [sp, #76]	; 0x4c
}
    b06c:	e6f6      	b.n	ae5c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>

0000b06e <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE>:

/// Interrupt handler for the touch controller, triggered when a touch is detected
extern "C" fn touch_interrupt_handler(arg: *mut core::ffi::c_void) {
    b06e:	b580      	push	{r7, lr}
    b070:	b086      	sub	sp, #24
    b072:	9004      	str	r0, [sp, #16]
    //  We forward a touch event to the Default Event Queue for deferred processing.  Don't do any processing here.
    unsafe { TOUCH_EVENT.ev_arg = arg };
    b074:	f240 11fc 	movw	r1, #508	; 0x1fc
    b078:	f2c2 0100 	movt	r1, #8192	; 0x2000
    b07c:	6088      	str	r0, [r1, #8]
    b07e:	a802      	add	r0, sp, #8
    //  Fetch the Default Event Queue. TODO: Use dedicated Event Queue for higher priority processing.
    let queue = os::eventq_dflt_get()
    b080:	f7fd fdf6 	bl	8c70 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    b084:	e7ff      	b.n	b086 <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x18>
    b086:	f24e 212e 	movw	r1, #57902	; 0xe22e
    b08a:	f2c0 0101 	movt	r1, #1
    b08e:	f24e 7378 	movw	r3, #59256	; 0xe778
    b092:	f2c0 0301 	movt	r3, #1
    b096:	a802      	add	r0, sp, #8
    b098:	2208      	movs	r2, #8
    b09a:	f7fd fb9a 	bl	87d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>
    b09e:	4601      	mov	r1, r0
    b0a0:	9005      	str	r0, [sp, #20]
    b0a2:	9101      	str	r1, [sp, #4]
    b0a4:	e7ff      	b.n	b0a6 <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x38>
        .expect("GET fail");
    unsafe { os::os_eventq_put(queue, &mut TOUCH_EVENT) };  //  Trigger the callback function `touch_event_callback()`
    b0a6:	f240 11fc 	movw	r1, #508	; 0x1fc
    b0aa:	f2c2 0100 	movt	r1, #8192	; 0x2000
    b0ae:	9801      	ldr	r0, [sp, #4]
    b0b0:	f00f fefb 	bl	1aeaa <os_eventq_put>
    b0b4:	e7ff      	b.n	b0b6 <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x48>
    //console::print("touch\n"); ////
}
    b0b6:	b006      	add	sp, #24
    b0b8:	bd80      	pop	{r7, pc}

0000b0ba <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E>:

/// Callback for the touch event that is triggered when a touch is detected
extern "C" fn touch_event_callback(_event: *mut os_event) {
    b0ba:	b580      	push	{r7, lr}
    b0bc:	b094      	sub	sp, #80	; 0x50
    b0be:	900e      	str	r0, [sp, #56]	; 0x38
    //  console::printhex(unsafe { os::os_time_get() } as u8); console::print(" touch\n");
    unsafe { 
        //  Fetch the touch data from the touch controller
        read_touchdata(&mut TOUCH_DATA)
    b0c0:	f240 1068 	movw	r0, #360	; 0x168
    b0c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b0c8:	f000 f894 	bl	b1f4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E>
    b0cc:	9006      	str	r0, [sp, #24]
    b0ce:	e7ff      	b.n	b0d0 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x16>
    b0d0:	f24e 7188 	movw	r1, #59272	; 0xe788
    b0d4:	f2c0 0101 	movt	r1, #1
    b0d8:	f24e 7398 	movw	r3, #59288	; 0xe798
    b0dc:	f2c0 0301 	movt	r3, #1
    b0e0:	220e      	movs	r2, #14
    b0e2:	9806      	ldr	r0, [sp, #24]
    b0e4:	f7fd fd09 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    b0e8:	e7ff      	b.n	b0ea <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x30>
            .expect("touchdata fail");
        //  Handle each touch data info
        for i in 0..TOUCH_DATA.count as usize {
    b0ea:	f240 1068 	movw	r0, #360	; 0x168
    b0ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b0f2:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
    b0f6:	2100      	movs	r1, #0
    b0f8:	9107      	str	r1, [sp, #28]
    b0fa:	9008      	str	r0, [sp, #32]
    b0fc:	9807      	ldr	r0, [sp, #28]
    b0fe:	9908      	ldr	r1, [sp, #32]
    b100:	f006 ff52 	bl	11fa8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    b104:	9005      	str	r0, [sp, #20]
    b106:	9104      	str	r1, [sp, #16]
    b108:	e7ff      	b.n	b10a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x50>
    b10a:	9805      	ldr	r0, [sp, #20]
    b10c:	9009      	str	r0, [sp, #36]	; 0x24
    b10e:	9904      	ldr	r1, [sp, #16]
    b110:	910a      	str	r1, [sp, #40]	; 0x28
    b112:	e7ff      	b.n	b114 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
    b114:	a809      	add	r0, sp, #36	; 0x24
    b116:	f006 febc 	bl	11e92 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    b11a:	910c      	str	r1, [sp, #48]	; 0x30
    b11c:	900b      	str	r0, [sp, #44]	; 0x2c
    b11e:	e7ff      	b.n	b120 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x66>
    b120:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b122:	2800      	cmp	r0, #0
    b124:	d001      	beq.n	b12a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x70>
    b126:	e7ff      	b.n	b128 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x6e>
    b128:	e002      	b.n	b130 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x76>
            console::print(", x: "); console::printint(x as i32); 
            console::print(", y: "); console::printint(y as i32); console::print("\n");
        }
        console::flush();   
    } */
}
    b12a:	b014      	add	sp, #80	; 0x50
    b12c:	bd80      	pop	{r7, pc}
        for i in 0..TOUCH_DATA.count as usize {
    b12e:	defe      	udf	#254	; 0xfe
    b130:	980c      	ldr	r0, [sp, #48]	; 0x30
    b132:	900f      	str	r0, [sp, #60]	; 0x3c
    b134:	9010      	str	r0, [sp, #64]	; 0x40
    b136:	9011      	str	r0, [sp, #68]	; 0x44
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    b138:	2809      	cmp	r0, #9
    b13a:	9003      	str	r0, [sp, #12]
    b13c:	d851      	bhi.n	b1e2 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x128>
    b13e:	e7ff      	b.n	b140 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x86>
    b140:	f240 1068 	movw	r0, #360	; 0x168
    b144:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b148:	9903      	ldr	r1, [sp, #12]
    b14a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b14e:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
    b152:	4603      	mov	r3, r0
    b154:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    b158:	f8b2 c002 	ldrh.w	ip, [r2, #2]
    b15c:	46e6      	mov	lr, ip
    b15e:	f8ad c04c 	strh.w	ip, [sp, #76]	; 0x4c
    b162:	7912      	ldrb	r2, [r2, #4]
    b164:	4694      	mov	ip, r2
    b166:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
            if x == 0 && y == 0 { continue; }
    b16a:	2800      	cmp	r0, #0
    b16c:	9302      	str	r3, [sp, #8]
    b16e:	f8cd e004 	str.w	lr, [sp, #4]
    b172:	f8cd c000 	str.w	ip, [sp]
    b176:	d008      	beq.n	b18a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xd0>
    b178:	e003      	b.n	b182 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc8>
    b17a:	2001      	movs	r0, #1
    b17c:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    b180:	e008      	b.n	b194 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xda>
    b182:	2000      	movs	r0, #0
    b184:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    b188:	e004      	b.n	b194 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xda>
    b18a:	9801      	ldr	r0, [sp, #4]
    b18c:	0401      	lsls	r1, r0, #16
    b18e:	2900      	cmp	r1, #0
    b190:	d0f3      	beq.n	b17a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc0>
    b192:	e7f6      	b.n	b182 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc8>
    b194:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    b198:	07c0      	lsls	r0, r0, #31
    b19a:	2800      	cmp	r0, #0
    b19c:	d105      	bne.n	b1aa <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf0>
    b19e:	e7ff      	b.n	b1a0 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xe6>
            if action != 0 && action != 2 { continue; }
    b1a0:	9800      	ldr	r0, [sp, #0]
    b1a2:	0601      	lsls	r1, r0, #24
    b1a4:	2900      	cmp	r1, #0
    b1a6:	d10a      	bne.n	b1be <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x104>
    b1a8:	e005      	b.n	b1b6 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xfc>
            if x == 0 && y == 0 { continue; }
    b1aa:	e7ff      	b.n	b1ac <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf2>
    b1ac:	e7b2      	b.n	b114 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
    b1ae:	2001      	movs	r0, #1
            if action != 0 && action != 2 { continue; }
    b1b0:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    b1b4:	e008      	b.n	b1c8 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x10e>
    b1b6:	2000      	movs	r0, #0
    b1b8:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    b1bc:	e004      	b.n	b1c8 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x10e>
    b1be:	9800      	ldr	r0, [sp, #0]
    b1c0:	b2c1      	uxtb	r1, r0
    b1c2:	2902      	cmp	r1, #2
    b1c4:	d1f3      	bne.n	b1ae <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf4>
    b1c6:	e7f6      	b.n	b1b6 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xfc>
    b1c8:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
    b1cc:	07c0      	lsls	r0, r0, #31
    b1ce:	2800      	cmp	r0, #0
    b1d0:	d105      	bne.n	b1de <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x124>
    b1d2:	e7ff      	b.n	b1d4 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x11a>
            super::handle_touch(x, y);
    b1d4:	9802      	ldr	r0, [sp, #8]
    b1d6:	9901      	ldr	r1, [sp, #4]
    b1d8:	f001 fcff 	bl	cbda <_ZN3app5chip812handle_touch17habca32c74e5cefadE>
    b1dc:	e000      	b.n	b1e0 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x126>
            if action != 0 && action != 2 { continue; }
    b1de:	e7e5      	b.n	b1ac <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf2>
        for i in 0..TOUCH_DATA.count as usize {
    b1e0:	e798      	b.n	b114 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    b1e2:	f24e 70a8 	movw	r0, #59304	; 0xe7a8
    b1e6:	f2c0 0001 	movt	r0, #1
    b1ea:	220a      	movs	r2, #10
    b1ec:	9903      	ldr	r1, [sp, #12]
    b1ee:	f00c fc09 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b1f2:	defe      	udf	#254	; 0xfe

0000b1f4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E>:
/// Touch data will be populated here
static mut TOUCH_DATA: TouchEventInfo = fill_zero!(TouchEventInfo);

/// Read touch controller data. This only works when the screen has been tapped and the touch controller wakes up.
/// Ported from https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L407-L466
fn read_touchdata(data: &mut TouchEventInfo) -> MynewtResult<()> {
    b1f4:	b580      	push	{r7, lr}
    b1f6:	b0de      	sub	sp, #376	; 0x178
    b1f8:	9057      	str	r0, [sp, #348]	; 0x15c
    read_register_range(           //  Read the range of I2C registers...
    b1fa:	4669      	mov	r1, sp
    b1fc:	223f      	movs	r2, #63	; 0x3f
    b1fe:	600a      	str	r2, [r1, #0]
    b200:	f240 13ba 	movw	r3, #442	; 0x1ba
    b204:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b208:	2115      	movs	r1, #21
    b20a:	f04f 0c00 	mov.w	ip, #0
    b20e:	9026      	str	r0, [sp, #152]	; 0x98
    b210:	4608      	mov	r0, r1
    b212:	4661      	mov	r1, ip
    b214:	f000 fb97 	bl	b946 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E>
    b218:	9025      	str	r0, [sp, #148]	; 0x94
    b21a:	e7ff      	b.n	b21c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x28>
    b21c:	f24e 71b8 	movw	r1, #59320	; 0xe7b8
    b220:	f2c0 0101 	movt	r1, #1
    b224:	f24e 73cc 	movw	r3, #59340	; 0xe7cc
    b228:	f2c0 0301 	movt	r3, #1
    b22c:	2213      	movs	r2, #19
    b22e:	9825      	ldr	r0, [sp, #148]	; 0x94
    b230:	f7fd fc63 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    b234:	e7ff      	b.n	b236 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x42>
    b236:	f10d 00ee 	add.w	r0, sp, #238	; 0xee
    b23a:	2152      	movs	r1, #82	; 0x52
        TOUCH_CONTROLLER_ADDRESS,  //  From the touch controller
        0,                         //  Starting from register 0
        POINT_READ_BUF as u8,      //  Number of registers to read
        unsafe { &mut BUF }        //  Save the read data into `buf`
    ).expect("read touchdata fail");
    *data = fill_zero!(TouchEventInfo);
    b23c:	9024      	str	r0, [sp, #144]	; 0x90
    b23e:	9123      	str	r1, [sp, #140]	; 0x8c
    b240:	f012 ff9a 	bl	1e178 <__aeabi_memclr>
    b244:	a827      	add	r0, sp, #156	; 0x9c
    b246:	9924      	ldr	r1, [sp, #144]	; 0x90
    b248:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    b24a:	f012 ff99 	bl	1e180 <__aeabi_memcpy>
    b24e:	e7ff      	b.n	b250 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5c>
    b250:	a927      	add	r1, sp, #156	; 0x9c
    b252:	2252      	movs	r2, #82	; 0x52
    b254:	9826      	ldr	r0, [sp, #152]	; 0x98
    b256:	f012 ff93 	bl	1e180 <__aeabi_memcpy>
    data.point_num = unsafe { BUF[FT_TOUCH_POINT_NUM] & 0x0F };
    b25a:	f240 11ba 	movw	r1, #442	; 0x1ba
    b25e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    b262:	7889      	ldrb	r1, [r1, #2]
    b264:	f001 010f 	and.w	r1, r1, #15
    b268:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b26a:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    b26e:	2100      	movs	r1, #0
    data.count     = 0;
    b270:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50

    //  Populate the first 5 touch points
    for i in 0..CFG_MAX_TOUCH_POINTS {
    b274:	9150      	str	r1, [sp, #320]	; 0x140
    b276:	2105      	movs	r1, #5
    b278:	9151      	str	r1, [sp, #324]	; 0x144
    b27a:	9950      	ldr	r1, [sp, #320]	; 0x140
    b27c:	9b51      	ldr	r3, [sp, #324]	; 0x144
    b27e:	9022      	str	r0, [sp, #136]	; 0x88
    b280:	4608      	mov	r0, r1
    b282:	4619      	mov	r1, r3
    b284:	f006 fe90 	bl	11fa8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    b288:	9021      	str	r0, [sp, #132]	; 0x84
    b28a:	9120      	str	r1, [sp, #128]	; 0x80
    b28c:	e7ff      	b.n	b28e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x9a>
    b28e:	9821      	ldr	r0, [sp, #132]	; 0x84
    b290:	9052      	str	r0, [sp, #328]	; 0x148
    b292:	9920      	ldr	r1, [sp, #128]	; 0x80
    b294:	9153      	str	r1, [sp, #332]	; 0x14c
    b296:	e7ff      	b.n	b298 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xa4>
    b298:	a852      	add	r0, sp, #328	; 0x148
    b29a:	f006 fdfa 	bl	11e92 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    b29e:	9155      	str	r1, [sp, #340]	; 0x154
    b2a0:	9054      	str	r0, [sp, #336]	; 0x150
    b2a2:	e7ff      	b.n	b2a4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xb0>
    b2a4:	9854      	ldr	r0, [sp, #336]	; 0x150
    b2a6:	2800      	cmp	r0, #0
    b2a8:	d001      	beq.n	b2ae <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xba>
    b2aa:	e7ff      	b.n	b2ac <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xb8>
    b2ac:	e001      	b.n	b2b2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xbe>
    b2ae:	e00d      	b.n	b2cc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xd8>
    b2b0:	defe      	udf	#254	; 0xfe
    b2b2:	9855      	ldr	r0, [sp, #340]	; 0x154
    b2b4:	9058      	str	r0, [sp, #352]	; 0x160
    b2b6:	9059      	str	r0, [sp, #356]	; 0x164
    b2b8:	905a      	str	r0, [sp, #360]	; 0x168
    b2ba:	2106      	movs	r1, #6
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b2bc:	fba1 1200 	umull	r1, r2, r1, r0
    b2c0:	2a00      	cmp	r2, #0
    b2c2:	901f      	str	r0, [sp, #124]	; 0x7c
    b2c4:	911e      	str	r1, [sp, #120]	; 0x78
    b2c6:	f040 81c1 	bne.w	b64c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x458>
    b2ca:	e002      	b.n	b2d2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xde>
    b2cc:	2001      	movs	r0, #1
            && (data.point_num == 0) {
            break;
        }
    }
    Ok(())
}
    b2ce:	b05e      	add	sp, #376	; 0x178
    b2d0:	bd80      	pop	{r7, pc}
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b2d2:	981e      	ldr	r0, [sp, #120]	; 0x78
    b2d4:	1d41      	adds	r1, r0, #5
    b2d6:	460a      	mov	r2, r1
    b2d8:	4281      	cmp	r1, r0
    b2da:	921d      	str	r2, [sp, #116]	; 0x74
    b2dc:	f0c0 81c2 	bcc.w	b664 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x470>
    b2e0:	e7ff      	b.n	b2e2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xee>
    b2e2:	981d      	ldr	r0, [sp, #116]	; 0x74
    b2e4:	283e      	cmp	r0, #62	; 0x3e
    b2e6:	f200 81c9 	bhi.w	b67c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x488>
    b2ea:	e7ff      	b.n	b2ec <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xf8>
    b2ec:	f240 10ba 	movw	r0, #442	; 0x1ba
    b2f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b2f4:	991d      	ldr	r1, [sp, #116]	; 0x74
    b2f6:	5c40      	ldrb	r0, [r0, r1]
    b2f8:	0900      	lsrs	r0, r0, #4
    b2fa:	901c      	str	r0, [sp, #112]	; 0x70
    b2fc:	e7ff      	b.n	b2fe <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x10a>
    b2fe:	981c      	ldr	r0, [sp, #112]	; 0x70
    b300:	f88d 016f 	strb.w	r0, [sp, #367]	; 0x16f
    b304:	b2c1      	uxtb	r1, r0
        if pointid >= HYN_MAX_ID { break; }
    b306:	290e      	cmp	r1, #14
    b308:	d80b      	bhi.n	b322 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x12e>
    b30a:	e7ff      	b.n	b30c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x118>
        data.count += 1;
    b30c:	9826      	ldr	r0, [sp, #152]	; 0x98
    b30e:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
    b312:	3101      	adds	r1, #1
    b314:	b2ca      	uxtb	r2, r1
    b316:	460b      	mov	r3, r1
    b318:	428a      	cmp	r2, r1
    b31a:	931b      	str	r3, [sp, #108]	; 0x6c
    b31c:	f040 81b7 	bne.w	b68e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x49a>
    b320:	e001      	b.n	b326 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x132>
        if pointid >= HYN_MAX_ID { break; }
    b322:	e7ff      	b.n	b324 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x130>
    b324:	e7d2      	b.n	b2cc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xd8>
        data.count += 1;
    b326:	981b      	ldr	r0, [sp, #108]	; 0x6c
    b328:	9926      	ldr	r1, [sp, #152]	; 0x98
    b32a:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    b32e:	2206      	movs	r2, #6
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b330:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b332:	fba2 2c03 	umull	r2, ip, r2, r3
    b336:	f1bc 0f00 	cmp.w	ip, #0
    b33a:	921a      	str	r2, [sp, #104]	; 0x68
    b33c:	f040 81b3 	bne.w	b6a6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4b2>
    b340:	e7ff      	b.n	b342 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x14e>
    b342:	981a      	ldr	r0, [sp, #104]	; 0x68
    b344:	1cc1      	adds	r1, r0, #3
    b346:	460a      	mov	r2, r1
    b348:	4281      	cmp	r1, r0
    b34a:	9219      	str	r2, [sp, #100]	; 0x64
    b34c:	f0c0 81b7 	bcc.w	b6be <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4ca>
    b350:	e7ff      	b.n	b352 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x15e>
    b352:	9819      	ldr	r0, [sp, #100]	; 0x64
    b354:	283e      	cmp	r0, #62	; 0x3e
    b356:	f200 81be 	bhi.w	b6d6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4e2>
    b35a:	e7ff      	b.n	b35c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x168>
    b35c:	f240 10ba 	movw	r0, #442	; 0x1ba
    b360:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b364:	9919      	ldr	r1, [sp, #100]	; 0x64
    b366:	5c40      	ldrb	r0, [r0, r1]
    b368:	f000 000f 	and.w	r0, r0, #15
    b36c:	4602      	mov	r2, r0
    b36e:	f8ad 0170 	strh.w	r0, [sp, #368]	; 0x170
    b372:	2006      	movs	r0, #6
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b374:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b376:	fba0 0c03 	umull	r0, ip, r0, r3
    b37a:	f1bc 0f00 	cmp.w	ip, #0
    b37e:	9218      	str	r2, [sp, #96]	; 0x60
    b380:	9017      	str	r0, [sp, #92]	; 0x5c
    b382:	f040 81b1 	bne.w	b6e8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4f4>
    b386:	e7ff      	b.n	b388 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x194>
    b388:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b38a:	1d01      	adds	r1, r0, #4
    b38c:	460a      	mov	r2, r1
    b38e:	4281      	cmp	r1, r0
    b390:	9216      	str	r2, [sp, #88]	; 0x58
    b392:	f0c0 81b5 	bcc.w	b700 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x50c>
    b396:	e7ff      	b.n	b398 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1a4>
    b398:	9816      	ldr	r0, [sp, #88]	; 0x58
    b39a:	283e      	cmp	r0, #62	; 0x3e
    b39c:	f200 81bc 	bhi.w	b718 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x524>
    b3a0:	e7ff      	b.n	b3a2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1ae>
    b3a2:	f240 10ba 	movw	r0, #442	; 0x1ba
    b3a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b3aa:	9916      	ldr	r1, [sp, #88]	; 0x58
    b3ac:	5c40      	ldrb	r0, [r0, r1]
    b3ae:	4602      	mov	r2, r0
    b3b0:	f8ad 0172 	strh.w	r0, [sp, #370]	; 0x172
        data.touches[i].x  = (x_high << 8) | x_low;
    b3b4:	9818      	ldr	r0, [sp, #96]	; 0x60
    b3b6:	0203      	lsls	r3, r0, #8
    b3b8:	9215      	str	r2, [sp, #84]	; 0x54
    b3ba:	9314      	str	r3, [sp, #80]	; 0x50
    b3bc:	e7ff      	b.n	b3be <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1ca>
    b3be:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b3c0:	2809      	cmp	r0, #9
    b3c2:	f200 81b2 	bhi.w	b72a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x536>
    b3c6:	e7ff      	b.n	b3c8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1d4>
    b3c8:	9814      	ldr	r0, [sp, #80]	; 0x50
    b3ca:	9915      	ldr	r1, [sp, #84]	; 0x54
    b3cc:	ea40 0201 	orr.w	r2, r0, r1
    b3d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
    b3d2:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
    b3d6:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
    b3da:	2206      	movs	r2, #6
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b3dc:	fba2 2e0c 	umull	r2, lr, r2, ip
    b3e0:	f1be 0f00 	cmp.w	lr, #0
    b3e4:	9213      	str	r2, [sp, #76]	; 0x4c
    b3e6:	f040 81a9 	bne.w	b73c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x548>
    b3ea:	e7ff      	b.n	b3ec <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1f8>
    b3ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
    b3ee:	1d41      	adds	r1, r0, #5
    b3f0:	460a      	mov	r2, r1
    b3f2:	4281      	cmp	r1, r0
    b3f4:	9212      	str	r2, [sp, #72]	; 0x48
    b3f6:	f0c0 81ad 	bcc.w	b754 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x560>
    b3fa:	e7ff      	b.n	b3fc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x208>
    b3fc:	9812      	ldr	r0, [sp, #72]	; 0x48
    b3fe:	283e      	cmp	r0, #62	; 0x3e
    b400:	f200 81b4 	bhi.w	b76c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x578>
    b404:	e7ff      	b.n	b406 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x212>
    b406:	f240 10ba 	movw	r0, #442	; 0x1ba
    b40a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b40e:	9912      	ldr	r1, [sp, #72]	; 0x48
    b410:	5c40      	ldrb	r0, [r0, r1]
    b412:	f000 000f 	and.w	r0, r0, #15
    b416:	4602      	mov	r2, r0
    b418:	f8ad 0174 	strh.w	r0, [sp, #372]	; 0x174
    b41c:	2006      	movs	r0, #6
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b41e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b420:	fba0 0c03 	umull	r0, ip, r0, r3
    b424:	f1bc 0f00 	cmp.w	ip, #0
    b428:	9211      	str	r2, [sp, #68]	; 0x44
    b42a:	9010      	str	r0, [sp, #64]	; 0x40
    b42c:	f040 81a7 	bne.w	b77e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x58a>
    b430:	e7ff      	b.n	b432 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x23e>
    b432:	9810      	ldr	r0, [sp, #64]	; 0x40
    b434:	1d81      	adds	r1, r0, #6
    b436:	460a      	mov	r2, r1
    b438:	4281      	cmp	r1, r0
    b43a:	920f      	str	r2, [sp, #60]	; 0x3c
    b43c:	f0c0 81ab 	bcc.w	b796 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5a2>
    b440:	e7ff      	b.n	b442 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x24e>
    b442:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b444:	283e      	cmp	r0, #62	; 0x3e
    b446:	f200 81b2 	bhi.w	b7ae <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5ba>
    b44a:	e7ff      	b.n	b44c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x258>
    b44c:	f240 10ba 	movw	r0, #442	; 0x1ba
    b450:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b454:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b456:	5c40      	ldrb	r0, [r0, r1]
    b458:	4602      	mov	r2, r0
    b45a:	f8ad 0176 	strh.w	r0, [sp, #374]	; 0x176
        data.touches[i].y  = (y_high << 8) | y_low;
    b45e:	9811      	ldr	r0, [sp, #68]	; 0x44
    b460:	0203      	lsls	r3, r0, #8
    b462:	920e      	str	r2, [sp, #56]	; 0x38
    b464:	930d      	str	r3, [sp, #52]	; 0x34
    b466:	e7ff      	b.n	b468 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x274>
    b468:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b46a:	2809      	cmp	r0, #9
    b46c:	f200 81a8 	bhi.w	b7c0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5cc>
    b470:	e7ff      	b.n	b472 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x27e>
    b472:	9826      	ldr	r0, [sp, #152]	; 0x98
    b474:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b476:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b47a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b47c:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    b480:	ea43 0e0c 	orr.w	lr, r3, ip
    b484:	f8a2 e002 	strh.w	lr, [r2, #2]
    b488:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    b48a:	fba2 2e01 	umull	r2, lr, r2, r1
    b48e:	f1be 0f00 	cmp.w	lr, #0
    b492:	920c      	str	r2, [sp, #48]	; 0x30
    b494:	f040 819d 	bne.w	b7d2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5de>
    b498:	e7ff      	b.n	b49a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2a6>
    b49a:	980c      	ldr	r0, [sp, #48]	; 0x30
    b49c:	1cc1      	adds	r1, r0, #3
    b49e:	460a      	mov	r2, r1
    b4a0:	4281      	cmp	r1, r0
    b4a2:	920b      	str	r2, [sp, #44]	; 0x2c
    b4a4:	f0c0 81a1 	bcc.w	b7ea <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5f6>
    b4a8:	e7ff      	b.n	b4aa <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2b6>
    b4aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b4ac:	283e      	cmp	r0, #62	; 0x3e
    b4ae:	f200 81a8 	bhi.w	b802 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x60e>
    b4b2:	e7ff      	b.n	b4b4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2c0>
    b4b4:	f240 10ba 	movw	r0, #442	; 0x1ba
    b4b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b4bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b4be:	5c40      	ldrb	r0, [r0, r1]
    b4c0:	0980      	lsrs	r0, r0, #6
    b4c2:	900a      	str	r0, [sp, #40]	; 0x28
    b4c4:	e7ff      	b.n	b4c6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2d2>
        data.touches[i].action =
    b4c6:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b4c8:	2809      	cmp	r0, #9
    b4ca:	f200 81a3 	bhi.w	b814 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x620>
    b4ce:	e7ff      	b.n	b4d0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2dc>
    b4d0:	9826      	ldr	r0, [sp, #152]	; 0x98
    b4d2:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b4d4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b4d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b4da:	7113      	strb	r3, [r2, #4]
    b4dc:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    b4de:	fba2 2c01 	umull	r2, ip, r2, r1
    b4e2:	f1bc 0f00 	cmp.w	ip, #0
    b4e6:	9209      	str	r2, [sp, #36]	; 0x24
    b4e8:	f040 819d 	bne.w	b826 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x632>
    b4ec:	e7ff      	b.n	b4ee <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2fa>
    b4ee:	9809      	ldr	r0, [sp, #36]	; 0x24
    b4f0:	1d41      	adds	r1, r0, #5
    b4f2:	460a      	mov	r2, r1
    b4f4:	4281      	cmp	r1, r0
    b4f6:	9208      	str	r2, [sp, #32]
    b4f8:	f0c0 81a1 	bcc.w	b83e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x64a>
    b4fc:	e7ff      	b.n	b4fe <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x30a>
    b4fe:	9808      	ldr	r0, [sp, #32]
    b500:	283e      	cmp	r0, #62	; 0x3e
    b502:	f200 81a8 	bhi.w	b856 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x662>
    b506:	e7ff      	b.n	b508 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x314>
    b508:	f240 10ba 	movw	r0, #442	; 0x1ba
    b50c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b510:	9908      	ldr	r1, [sp, #32]
    b512:	5c40      	ldrb	r0, [r0, r1]
    b514:	0900      	lsrs	r0, r0, #4
    b516:	9007      	str	r0, [sp, #28]
    b518:	e7ff      	b.n	b51a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x326>
        data.touches[i].finger =
    b51a:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b51c:	2809      	cmp	r0, #9
    b51e:	f200 81a3 	bhi.w	b868 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x674>
    b522:	e7ff      	b.n	b524 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x330>
    b524:	9826      	ldr	r0, [sp, #152]	; 0x98
    b526:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b528:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b52c:	9b07      	ldr	r3, [sp, #28]
    b52e:	7153      	strb	r3, [r2, #5]
    b530:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    b532:	fba2 2c01 	umull	r2, ip, r2, r1
    b536:	f1bc 0f00 	cmp.w	ip, #0
    b53a:	9206      	str	r2, [sp, #24]
    b53c:	f040 819d 	bne.w	b87a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x686>
    b540:	e7ff      	b.n	b542 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x34e>
    b542:	9806      	ldr	r0, [sp, #24]
    b544:	1dc1      	adds	r1, r0, #7
    b546:	460a      	mov	r2, r1
    b548:	4281      	cmp	r1, r0
    b54a:	9205      	str	r2, [sp, #20]
    b54c:	f0c0 81a1 	bcc.w	b892 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x69e>
    b550:	e7ff      	b.n	b552 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x35e>
    b552:	9805      	ldr	r0, [sp, #20]
    b554:	283e      	cmp	r0, #62	; 0x3e
    b556:	f200 81a8 	bhi.w	b8aa <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6b6>
    b55a:	e7ff      	b.n	b55c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x368>
    b55c:	f240 10ba 	movw	r0, #442	; 0x1ba
    b560:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b564:	9905      	ldr	r1, [sp, #20]
    b566:	5c40      	ldrb	r0, [r0, r1]
        data.touches[i].pressure =
    b568:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    b56a:	2a09      	cmp	r2, #9
    b56c:	9004      	str	r0, [sp, #16]
    b56e:	f200 81a5 	bhi.w	b8bc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6c8>
    b572:	e7ff      	b.n	b574 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x380>
    b574:	9826      	ldr	r0, [sp, #152]	; 0x98
    b576:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b578:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b57c:	9b04      	ldr	r3, [sp, #16]
    b57e:	7193      	strb	r3, [r2, #6]
    b580:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    b582:	fba2 2c01 	umull	r2, ip, r2, r1
    b586:	f1bc 0f00 	cmp.w	ip, #0
    b58a:	9203      	str	r2, [sp, #12]
    b58c:	f040 819f 	bne.w	b8ce <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6da>
    b590:	e7ff      	b.n	b592 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x39e>
    b592:	9803      	ldr	r0, [sp, #12]
    b594:	f100 0108 	add.w	r1, r0, #8
    b598:	460a      	mov	r2, r1
    b59a:	4281      	cmp	r1, r0
    b59c:	9202      	str	r2, [sp, #8]
    b59e:	f0c0 81a2 	bcc.w	b8e6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6f2>
    b5a2:	e7ff      	b.n	b5a4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3b0>
    b5a4:	9802      	ldr	r0, [sp, #8]
    b5a6:	283e      	cmp	r0, #62	; 0x3e
    b5a8:	f200 81a9 	bhi.w	b8fe <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x70a>
    b5ac:	e7ff      	b.n	b5ae <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3ba>
    b5ae:	f240 10ba 	movw	r0, #442	; 0x1ba
    b5b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b5b6:	9902      	ldr	r1, [sp, #8]
    b5b8:	5c40      	ldrb	r0, [r0, r1]
    b5ba:	0900      	lsrs	r0, r0, #4
    b5bc:	9001      	str	r0, [sp, #4]
    b5be:	e7ff      	b.n	b5c0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3cc>
        data.touches[i].area =
    b5c0:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b5c2:	2809      	cmp	r0, #9
    b5c4:	f200 81a4 	bhi.w	b910 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x71c>
    b5c8:	e7ff      	b.n	b5ca <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3d6>
    b5ca:	9826      	ldr	r0, [sp, #152]	; 0x98
    b5cc:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b5ce:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b5d2:	9b01      	ldr	r3, [sp, #4]
    b5d4:	71d3      	strb	r3, [r2, #7]
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b5d6:	290a      	cmp	r1, #10
    b5d8:	d326      	bcc.n	b628 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x434>
    b5da:	e1a2      	b.n	b922 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x72e>
    b5dc:	2001      	movs	r0, #1
    b5de:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    b5e2:	e009      	b.n	b5f8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x404>
    b5e4:	2000      	movs	r0, #0
    b5e6:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    b5ea:	e005      	b.n	b5f8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x404>
            && (data.point_num == 0) {
    b5ec:	9826      	ldr	r0, [sp, #152]	; 0x98
    b5ee:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b5f2:	2900      	cmp	r1, #0
    b5f4:	d0f2      	beq.n	b5dc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3e8>
    b5f6:	e7f5      	b.n	b5e4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f0>
    b5f8:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
    b5fc:	07c0      	lsls	r0, r0, #31
    b5fe:	2800      	cmp	r0, #0
    b600:	d123      	bne.n	b64a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x456>
    b602:	e021      	b.n	b648 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x454>
    b604:	2001      	movs	r0, #1
    b606:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    b60a:	e007      	b.n	b61c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x428>
    b60c:	2000      	movs	r0, #0
    b60e:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    b612:	e003      	b.n	b61c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x428>
    b614:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b616:	280a      	cmp	r0, #10
    b618:	d30e      	bcc.n	b638 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x444>
    b61a:	e18b      	b.n	b934 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x740>
    b61c:	f89d 015b 	ldrb.w	r0, [sp, #347]	; 0x15b
    b620:	07c0      	lsls	r0, r0, #31
    b622:	2800      	cmp	r0, #0
    b624:	d1e2      	bne.n	b5ec <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f8>
    b626:	e7dd      	b.n	b5e4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f0>
    b628:	9826      	ldr	r0, [sp, #152]	; 0x98
    b62a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b62c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b630:	7912      	ldrb	r2, [r2, #4]
    b632:	2a00      	cmp	r2, #0
    b634:	d0e6      	beq.n	b604 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x410>
    b636:	e7ed      	b.n	b614 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x420>
    b638:	9826      	ldr	r0, [sp, #152]	; 0x98
    b63a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b63c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b640:	7912      	ldrb	r2, [r2, #4]
    b642:	2a02      	cmp	r2, #2
    b644:	d0de      	beq.n	b604 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x410>
    b646:	e7e1      	b.n	b60c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x418>
    for i in 0..CFG_MAX_TOUCH_POINTS {
    b648:	e626      	b.n	b298 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xa4>
            break;
    b64a:	e66b      	b.n	b324 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x130>
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b64c:	f24e 70f0 	movw	r0, #59376	; 0xe7f0
    b650:	f2c0 0001 	movt	r0, #1
    b654:	f24e 72dc 	movw	r2, #59356	; 0xe7dc
    b658:	f2c0 0201 	movt	r2, #1
    b65c:	2121      	movs	r1, #33	; 0x21
    b65e:	f00c f9bb 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b662:	defe      	udf	#254	; 0xfe
    b664:	f64e 0030 	movw	r0, #59440	; 0xe830
    b668:	f2c0 0001 	movt	r0, #1
    b66c:	f64e 0214 	movw	r2, #59412	; 0xe814
    b670:	f2c0 0201 	movt	r2, #1
    b674:	211c      	movs	r1, #28
    b676:	f00c f9af 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b67a:	defe      	udf	#254	; 0xfe
    b67c:	f64e 004c 	movw	r0, #59468	; 0xe84c
    b680:	f2c0 0001 	movt	r0, #1
    b684:	223f      	movs	r2, #63	; 0x3f
    b686:	991d      	ldr	r1, [sp, #116]	; 0x74
    b688:	f00c f9bc 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b68c:	defe      	udf	#254	; 0xfe
        data.count += 1;
    b68e:	f64e 0030 	movw	r0, #59440	; 0xe830
    b692:	f2c0 0001 	movt	r0, #1
    b696:	f64e 025c 	movw	r2, #59484	; 0xe85c
    b69a:	f2c0 0201 	movt	r2, #1
    b69e:	211c      	movs	r1, #28
    b6a0:	f00c f99a 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b6a4:	defe      	udf	#254	; 0xfe
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b6a6:	f24e 70f0 	movw	r0, #59376	; 0xe7f0
    b6aa:	f2c0 0001 	movt	r0, #1
    b6ae:	f64e 026c 	movw	r2, #59500	; 0xe86c
    b6b2:	f2c0 0201 	movt	r2, #1
    b6b6:	2121      	movs	r1, #33	; 0x21
    b6b8:	f00c f98e 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b6bc:	defe      	udf	#254	; 0xfe
    b6be:	f64e 0030 	movw	r0, #59440	; 0xe830
    b6c2:	f2c0 0001 	movt	r0, #1
    b6c6:	f64e 027c 	movw	r2, #59516	; 0xe87c
    b6ca:	f2c0 0201 	movt	r2, #1
    b6ce:	211c      	movs	r1, #28
    b6d0:	f00c f982 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b6d4:	defe      	udf	#254	; 0xfe
    b6d6:	f64e 008c 	movw	r0, #59532	; 0xe88c
    b6da:	f2c0 0001 	movt	r0, #1
    b6de:	223f      	movs	r2, #63	; 0x3f
    b6e0:	9919      	ldr	r1, [sp, #100]	; 0x64
    b6e2:	f00c f98f 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b6e6:	defe      	udf	#254	; 0xfe
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b6e8:	f24e 70f0 	movw	r0, #59376	; 0xe7f0
    b6ec:	f2c0 0001 	movt	r0, #1
    b6f0:	f64e 029c 	movw	r2, #59548	; 0xe89c
    b6f4:	f2c0 0201 	movt	r2, #1
    b6f8:	2121      	movs	r1, #33	; 0x21
    b6fa:	f00c f96d 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b6fe:	defe      	udf	#254	; 0xfe
    b700:	f64e 0030 	movw	r0, #59440	; 0xe830
    b704:	f2c0 0001 	movt	r0, #1
    b708:	f64e 02ac 	movw	r2, #59564	; 0xe8ac
    b70c:	f2c0 0201 	movt	r2, #1
    b710:	211c      	movs	r1, #28
    b712:	f00c f961 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b716:	defe      	udf	#254	; 0xfe
    b718:	f64e 00bc 	movw	r0, #59580	; 0xe8bc
    b71c:	f2c0 0001 	movt	r0, #1
    b720:	223f      	movs	r2, #63	; 0x3f
    b722:	9916      	ldr	r1, [sp, #88]	; 0x58
    b724:	f00c f96e 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b728:	defe      	udf	#254	; 0xfe
        data.touches[i].x  = (x_high << 8) | x_low;
    b72a:	f64e 00cc 	movw	r0, #59596	; 0xe8cc
    b72e:	f2c0 0001 	movt	r0, #1
    b732:	220a      	movs	r2, #10
    b734:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b736:	f00c f965 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b73a:	defe      	udf	#254	; 0xfe
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b73c:	f24e 70f0 	movw	r0, #59376	; 0xe7f0
    b740:	f2c0 0001 	movt	r0, #1
    b744:	f64e 02dc 	movw	r2, #59612	; 0xe8dc
    b748:	f2c0 0201 	movt	r2, #1
    b74c:	2121      	movs	r1, #33	; 0x21
    b74e:	f00c f943 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b752:	defe      	udf	#254	; 0xfe
    b754:	f64e 0030 	movw	r0, #59440	; 0xe830
    b758:	f2c0 0001 	movt	r0, #1
    b75c:	f64e 02ec 	movw	r2, #59628	; 0xe8ec
    b760:	f2c0 0201 	movt	r2, #1
    b764:	211c      	movs	r1, #28
    b766:	f00c f937 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b76a:	defe      	udf	#254	; 0xfe
    b76c:	f64e 00fc 	movw	r0, #59644	; 0xe8fc
    b770:	f2c0 0001 	movt	r0, #1
    b774:	223f      	movs	r2, #63	; 0x3f
    b776:	9912      	ldr	r1, [sp, #72]	; 0x48
    b778:	f00c f944 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b77c:	defe      	udf	#254	; 0xfe
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b77e:	f24e 70f0 	movw	r0, #59376	; 0xe7f0
    b782:	f2c0 0001 	movt	r0, #1
    b786:	f64e 120c 	movw	r2, #59660	; 0xe90c
    b78a:	f2c0 0201 	movt	r2, #1
    b78e:	2121      	movs	r1, #33	; 0x21
    b790:	f00c f922 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b794:	defe      	udf	#254	; 0xfe
    b796:	f64e 0030 	movw	r0, #59440	; 0xe830
    b79a:	f2c0 0001 	movt	r0, #1
    b79e:	f64e 121c 	movw	r2, #59676	; 0xe91c
    b7a2:	f2c0 0201 	movt	r2, #1
    b7a6:	211c      	movs	r1, #28
    b7a8:	f00c f916 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b7ac:	defe      	udf	#254	; 0xfe
    b7ae:	f64e 102c 	movw	r0, #59692	; 0xe92c
    b7b2:	f2c0 0001 	movt	r0, #1
    b7b6:	223f      	movs	r2, #63	; 0x3f
    b7b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b7ba:	f00c f923 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b7be:	defe      	udf	#254	; 0xfe
        data.touches[i].y  = (y_high << 8) | y_low;
    b7c0:	f64e 103c 	movw	r0, #59708	; 0xe93c
    b7c4:	f2c0 0001 	movt	r0, #1
    b7c8:	220a      	movs	r2, #10
    b7ca:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b7cc:	f00c f91a 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b7d0:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    b7d2:	f24e 70f0 	movw	r0, #59376	; 0xe7f0
    b7d6:	f2c0 0001 	movt	r0, #1
    b7da:	f64e 124c 	movw	r2, #59724	; 0xe94c
    b7de:	f2c0 0201 	movt	r2, #1
    b7e2:	2121      	movs	r1, #33	; 0x21
    b7e4:	f00c f8f8 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b7e8:	defe      	udf	#254	; 0xfe
    b7ea:	f64e 0030 	movw	r0, #59440	; 0xe830
    b7ee:	f2c0 0001 	movt	r0, #1
    b7f2:	f64e 125c 	movw	r2, #59740	; 0xe95c
    b7f6:	f2c0 0201 	movt	r2, #1
    b7fa:	211c      	movs	r1, #28
    b7fc:	f00c f8ec 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b800:	defe      	udf	#254	; 0xfe
    b802:	f64e 106c 	movw	r0, #59756	; 0xe96c
    b806:	f2c0 0001 	movt	r0, #1
    b80a:	223f      	movs	r2, #63	; 0x3f
    b80c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b80e:	f00c f8f9 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b812:	defe      	udf	#254	; 0xfe
        data.touches[i].action =
    b814:	f64e 107c 	movw	r0, #59772	; 0xe97c
    b818:	f2c0 0001 	movt	r0, #1
    b81c:	220a      	movs	r2, #10
    b81e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b820:	f00c f8f0 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b824:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    b826:	f24e 70f0 	movw	r0, #59376	; 0xe7f0
    b82a:	f2c0 0001 	movt	r0, #1
    b82e:	f64e 128c 	movw	r2, #59788	; 0xe98c
    b832:	f2c0 0201 	movt	r2, #1
    b836:	2121      	movs	r1, #33	; 0x21
    b838:	f00c f8ce 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b83c:	defe      	udf	#254	; 0xfe
    b83e:	f64e 0030 	movw	r0, #59440	; 0xe830
    b842:	f2c0 0001 	movt	r0, #1
    b846:	f64e 129c 	movw	r2, #59804	; 0xe99c
    b84a:	f2c0 0201 	movt	r2, #1
    b84e:	211c      	movs	r1, #28
    b850:	f00c f8c2 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b854:	defe      	udf	#254	; 0xfe
    b856:	f64e 10ac 	movw	r0, #59820	; 0xe9ac
    b85a:	f2c0 0001 	movt	r0, #1
    b85e:	223f      	movs	r2, #63	; 0x3f
    b860:	9908      	ldr	r1, [sp, #32]
    b862:	f00c f8cf 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b866:	defe      	udf	#254	; 0xfe
        data.touches[i].finger =
    b868:	f64e 10bc 	movw	r0, #59836	; 0xe9bc
    b86c:	f2c0 0001 	movt	r0, #1
    b870:	220a      	movs	r2, #10
    b872:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b874:	f00c f8c6 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b878:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    b87a:	f24e 70f0 	movw	r0, #59376	; 0xe7f0
    b87e:	f2c0 0001 	movt	r0, #1
    b882:	f64e 12cc 	movw	r2, #59852	; 0xe9cc
    b886:	f2c0 0201 	movt	r2, #1
    b88a:	2121      	movs	r1, #33	; 0x21
    b88c:	f00c f8a4 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b890:	defe      	udf	#254	; 0xfe
    b892:	f64e 0030 	movw	r0, #59440	; 0xe830
    b896:	f2c0 0001 	movt	r0, #1
    b89a:	f64e 12dc 	movw	r2, #59868	; 0xe9dc
    b89e:	f2c0 0201 	movt	r2, #1
    b8a2:	211c      	movs	r1, #28
    b8a4:	f00c f898 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b8a8:	defe      	udf	#254	; 0xfe
    b8aa:	f64e 10ec 	movw	r0, #59884	; 0xe9ec
    b8ae:	f2c0 0001 	movt	r0, #1
    b8b2:	223f      	movs	r2, #63	; 0x3f
    b8b4:	9905      	ldr	r1, [sp, #20]
    b8b6:	f00c f8a5 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b8ba:	defe      	udf	#254	; 0xfe
        data.touches[i].pressure =
    b8bc:	f64e 10fc 	movw	r0, #59900	; 0xe9fc
    b8c0:	f2c0 0001 	movt	r0, #1
    b8c4:	220a      	movs	r2, #10
    b8c6:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b8c8:	f00c f89c 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b8cc:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    b8ce:	f24e 70f0 	movw	r0, #59376	; 0xe7f0
    b8d2:	f2c0 0001 	movt	r0, #1
    b8d6:	f64e 220c 	movw	r2, #59916	; 0xea0c
    b8da:	f2c0 0201 	movt	r2, #1
    b8de:	2121      	movs	r1, #33	; 0x21
    b8e0:	f00c f87a 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b8e4:	defe      	udf	#254	; 0xfe
    b8e6:	f64e 0030 	movw	r0, #59440	; 0xe830
    b8ea:	f2c0 0001 	movt	r0, #1
    b8ee:	f64e 221c 	movw	r2, #59932	; 0xea1c
    b8f2:	f2c0 0201 	movt	r2, #1
    b8f6:	211c      	movs	r1, #28
    b8f8:	f00c f86e 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b8fc:	defe      	udf	#254	; 0xfe
    b8fe:	f64e 202c 	movw	r0, #59948	; 0xea2c
    b902:	f2c0 0001 	movt	r0, #1
    b906:	223f      	movs	r2, #63	; 0x3f
    b908:	9902      	ldr	r1, [sp, #8]
    b90a:	f00c f87b 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b90e:	defe      	udf	#254	; 0xfe
        data.touches[i].area =
    b910:	f64e 203c 	movw	r0, #59964	; 0xea3c
    b914:	f2c0 0001 	movt	r0, #1
    b918:	220a      	movs	r2, #10
    b91a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b91c:	f00c f872 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b920:	defe      	udf	#254	; 0xfe
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b922:	f64e 204c 	movw	r0, #59980	; 0xea4c
    b926:	f2c0 0001 	movt	r0, #1
    b92a:	220a      	movs	r2, #10
    b92c:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b92e:	f00c f869 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b932:	defe      	udf	#254	; 0xfe
    b934:	f64e 205c 	movw	r0, #59996	; 0xea5c
    b938:	f2c0 0001 	movt	r0, #1
    b93c:	220a      	movs	r2, #10
    b93e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b940:	f00c f860 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b944:	defe      	udf	#254	; 0xfe

0000b946 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E>:

/// Event that will be forwarded to the Event Queue when a touch interrupt is triggered
static mut TOUCH_EVENT: os_event = fill_zero!(os_event);  //  Init all fields to 0 or NULL

/// Read a range of I2C registers from the I2C address `addr` (7-bit address), starting at `start_register` for count `num_registers`. Save into `buffer`.
fn read_register_range(addr: u8, start_register: u8, num_registers: u8, buffer: &mut[u8]) -> MynewtResult<()> {
    b946:	b5b0      	push	{r4, r5, r7, lr}
    b948:	b094      	sub	sp, #80	; 0x50
    b94a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
    b94e:	4696      	mov	lr, r2
    b950:	460c      	mov	r4, r1
    b952:	4605      	mov	r5, r0
    b954:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    b958:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
    b95c:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
    b960:	9310      	str	r3, [sp, #64]	; 0x40
    b962:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    b966:	4618      	mov	r0, r3
    b968:	4661      	mov	r1, ip
    b96a:	930d      	str	r3, [sp, #52]	; 0x34
    b96c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    b970:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    b974:	940a      	str	r4, [sp, #40]	; 0x28
    b976:	9509      	str	r5, [sp, #36]	; 0x24
    b978:	f006 faef 	bl	11f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    b97c:	9008      	str	r0, [sp, #32]
    b97e:	e7ff      	b.n	b980 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x3a>
    b980:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b982:	b2c1      	uxtb	r1, r0
    b984:	9a08      	ldr	r2, [sp, #32]
    b986:	428a      	cmp	r2, r1
    b988:	d30d      	bcc.n	b9a6 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x60>
    b98a:	e7ff      	b.n	b98c <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x46>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b98c:	980a      	ldr	r0, [sp, #40]	; 0x28
    b98e:	b2c1      	uxtb	r1, r0
    b990:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b992:	fa51 f182 	uxtab	r1, r1, r2
    b996:	b2cb      	uxtb	r3, r1
    b998:	468c      	mov	ip, r1
    b99a:	428b      	cmp	r3, r1
    b99c:	f8cd c01c 	str.w	ip, [sp, #28]
    b9a0:	f040 8092 	bne.w	bac8 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x182>
    b9a4:	e00b      	b.n	b9be <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x78>
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    b9a6:	f64e 206c 	movw	r0, #60012	; 0xea6c
    b9aa:	f2c0 0001 	movt	r0, #1
    b9ae:	f64e 2274 	movw	r2, #60020	; 0xea74
    b9b2:	f2c0 0201 	movt	r2, #1
    b9b6:	2107      	movs	r1, #7
    b9b8:	f00c f80e 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b9bc:	defe      	udf	#254	; 0xfe
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b9be:	9807      	ldr	r0, [sp, #28]
    b9c0:	b241      	sxtb	r1, r0
    b9c2:	2900      	cmp	r1, #0
    b9c4:	d411      	bmi.n	b9ea <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xa4>
    b9c6:	e7ff      	b.n	b9c8 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x82>
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Write Mode (1 bit, value 0)...
    //    Followed by starting Register Number (8 bits)
    unsafe { 
        I2C_BUFFER[0] = start_register;  //  I2C Packet buffer contains starting Register Number (1 byte)
    b9c8:	f240 2014 	movw	r0, #532	; 0x214
    b9cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b9d0:	990a      	ldr	r1, [sp, #40]	; 0x28
    b9d2:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;         //  I2C Packet address (7 bits)
    b9d4:	f240 220c 	movw	r2, #524	; 0x20c
    b9d8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b9de:	7013      	strb	r3, [r2, #0]
    b9e0:	2101      	movs	r1, #1
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    b9e2:	f006 faba 	bl	11f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    b9e6:	9006      	str	r0, [sp, #24]
    b9e8:	e00b      	b.n	ba02 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xbc>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b9ea:	f24e 7070 	movw	r0, #59248	; 0xe770
    b9ee:	f2c0 0001 	movt	r0, #1
    b9f2:	f64e 2294 	movw	r2, #60052	; 0xea94
    b9f6:	f2c0 0201 	movt	r2, #1
    b9fa:	2108      	movs	r1, #8
    b9fc:	f00b ffec 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ba00:	defe      	udf	#254	; 0xfe
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    ba02:	f240 200c 	movw	r0, #524	; 0x20c
    ba06:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba0a:	9906      	ldr	r1, [sp, #24]
    ba0c:	8041      	strh	r1, [r0, #2]
        I2C_DATA.buffer = I2C_BUFFER.as_mut_ptr();  //  I2C Packet data points to packet buffer
    ba0e:	f240 2014 	movw	r0, #532	; 0x214
    ba12:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba16:	2101      	movs	r1, #1
    ba18:	f006 fa88 	bl	11f2c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    ba1c:	9005      	str	r0, [sp, #20]
    ba1e:	e7ff      	b.n	ba20 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xda>
    ba20:	f240 200c 	movw	r0, #524	; 0x20c
    ba24:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba28:	9905      	ldr	r1, [sp, #20]
    ba2a:	6041      	str	r1, [r0, #4]
    ba2c:	2201      	movs	r2, #1
    ba2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    ba32:	f04f 0c00 	mov.w	ip, #0
    };
    let _rc1 = unsafe { hal::hal_i2c_master_write(1, &mut I2C_DATA, 1000, 0) };  //  No stop yet, must continue even if we hit an error
    ba36:	9004      	str	r0, [sp, #16]
    ba38:	4610      	mov	r0, r2
    ba3a:	9904      	ldr	r1, [sp, #16]
    ba3c:	461a      	mov	r2, r3
    ba3e:	4663      	mov	r3, ip
    ba40:	f00e fab8 	bl	19fb4 <hal_i2c_master_write>
    ba44:	9012      	str	r0, [sp, #72]	; 0x48
    ba46:	e7ff      	b.n	ba48 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x102>
    //  Step 3: Prepare to receive the stream of I2C Device Register values...
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Read Mode (1 bit, value 1)
    unsafe { 
        I2C_BUFFER[0] = 0x00;     //  I2C Packet buffer should be empty (provided by caller)
    ba48:	f240 2014 	movw	r0, #532	; 0x214
    ba4c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba50:	2100      	movs	r1, #0
    ba52:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;  //  I2C Packet address (7 bits)
    ba54:	f240 200c 	movw	r0, #524	; 0x20c
    ba58:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba5c:	9909      	ldr	r1, [sp, #36]	; 0x24
    ba5e:	7001      	strb	r1, [r0, #0]
        I2C_DATA.len = num_registers as u16;    //  I2C Packet data size is number of Registers to read
    ba60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ba62:	b2d3      	uxtb	r3, r2
    ba64:	8043      	strh	r3, [r0, #2]
        I2C_DATA.buffer = buffer.as_mut_ptr();  //  I2C Packet data points to packet buffer
    ba66:	980d      	ldr	r0, [sp, #52]	; 0x34
    ba68:	990c      	ldr	r1, [sp, #48]	; 0x30
    ba6a:	f006 fa5f 	bl	11f2c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    ba6e:	9003      	str	r0, [sp, #12]
    ba70:	e7ff      	b.n	ba72 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x12c>
    ba72:	f240 200c 	movw	r0, #524	; 0x20c
    ba76:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba7a:	9903      	ldr	r1, [sp, #12]
    ba7c:	6041      	str	r1, [r0, #4]
    ba7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ba82:	2301      	movs	r3, #1
    };
    //  Step 4: Receive the requested number of Register values from I2C Device (1 byte per register)
    //  Step 5: Send the Stop Condition (Low to High SDA Transition)
    let rc2 = unsafe { hal::hal_i2c_master_read(1, &mut I2C_DATA, 1000, 1) };
    ba84:	9002      	str	r0, [sp, #8]
    ba86:	4618      	mov	r0, r3
    ba88:	9902      	ldr	r1, [sp, #8]
    ba8a:	f00e fb27 	bl	1a0dc <hal_i2c_master_read>
    ba8e:	4601      	mov	r1, r0
    ba90:	9013      	str	r0, [sp, #76]	; 0x4c
    ba92:	9101      	str	r1, [sp, #4]
    ba94:	e7ff      	b.n	ba96 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x150>
    if rc2 == hal::HAL_I2C_ERR_ADDR_NACK as i32 {
    ba96:	9801      	ldr	r0, [sp, #4]
    ba98:	2804      	cmp	r0, #4
    ba9a:	d005      	beq.n	baa8 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x162>
    ba9c:	e7ff      	b.n	ba9e <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x158>
    ba9e:	2000      	movs	r0, #0
        ////assert!(false, "i2c fail");  //  I2C read failed
        console::print("i2c fail\n"); ////
        return Ok(());               //  TODO: Return an error
    }
    Ok(())
    baa0:	900e      	str	r0, [sp, #56]	; 0x38
    baa2:	2001      	movs	r0, #1
    baa4:	900e      	str	r0, [sp, #56]	; 0x38
}
    baa6:	e00c      	b.n	bac2 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x17c>
        console::print("i2c fail\n"); ////
    baa8:	f64e 20a4 	movw	r0, #60068	; 0xeaa4
    baac:	f2c0 0001 	movt	r0, #1
    bab0:	2109      	movs	r1, #9
    bab2:	f7fd fa9d 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    bab6:	e7ff      	b.n	bab8 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x172>
    bab8:	2000      	movs	r0, #0
        return Ok(());               //  TODO: Return an error
    baba:	900e      	str	r0, [sp, #56]	; 0x38
    babc:	2001      	movs	r0, #1
    babe:	900e      	str	r0, [sp, #56]	; 0x38
    bac0:	e7ff      	b.n	bac2 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x17c>
}
    bac2:	980e      	ldr	r0, [sp, #56]	; 0x38
    bac4:	b014      	add	sp, #80	; 0x50
    bac6:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    bac8:	f64e 0030 	movw	r0, #59440	; 0xe830
    bacc:	f2c0 0001 	movt	r0, #1
    bad0:	f64e 2284 	movw	r2, #60036	; 0xea84
    bad4:	f2c0 0201 	movt	r2, #1
    bad8:	211c      	movs	r1, #28
    bada:	f00b ff7d 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bade:	defe      	udf	#254	; 0xfe

0000bae0 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E>:
/// CHIP8 Virtual Pixel size, in Physical Pixels
const PIXEL_WIDTH: usize = 3;
const PIXEL_HEIGHT: usize = 5;

/// Render some graphics and text to the PineTime display. `start_display()` must have been called earlier.
pub fn on_start() -> MynewtResult<()> {
    bae0:	b510      	push	{r4, lr}
    bae2:	b0aa      	sub	sp, #168	; 0xa8
    console::print("Rust CHIP8\n"); console::flush();
    bae4:	f64e 20ad 	movw	r0, #60077	; 0xeaad
    bae8:	f2c0 0001 	movt	r0, #1
    baec:	210b      	movs	r1, #11
    baee:	f7fd fa7f 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    baf2:	e7ff      	b.n	baf4 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x14>
    baf4:	f7fd fac2 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    baf8:	e7ff      	b.n	bafa <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x1a>
    bafa:	2000      	movs	r0, #0
    
    //  Create black background
    let background = Rectangle::<Rgb565>
        ::new( Coord::new( 0, 0 ), Coord::new( 239, 239 ) )   //  Rectangle coordinates
    bafc:	900d      	str	r0, [sp, #52]	; 0x34
    bafe:	990d      	ldr	r1, [sp, #52]	; 0x34
    bb00:	f005 ff52 	bl	119a8 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    bb04:	900c      	str	r0, [sp, #48]	; 0x30
    bb06:	910b      	str	r1, [sp, #44]	; 0x2c
    bb08:	e7ff      	b.n	bb0a <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x2a>
    bb0a:	20ef      	movs	r0, #239	; 0xef
    bb0c:	900a      	str	r0, [sp, #40]	; 0x28
    bb0e:	990a      	ldr	r1, [sp, #40]	; 0x28
    bb10:	f005 ff4a 	bl	119a8 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    bb14:	9009      	str	r0, [sp, #36]	; 0x24
    bb16:	9108      	str	r1, [sp, #32]
    bb18:	e7ff      	b.n	bb1a <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x3a>
    let background = Rectangle::<Rgb565>
    bb1a:	4668      	mov	r0, sp
    bb1c:	9908      	ldr	r1, [sp, #32]
    bb1e:	6001      	str	r1, [r0, #0]
    bb20:	a816      	add	r0, sp, #88	; 0x58
    bb22:	990c      	ldr	r1, [sp, #48]	; 0x30
    bb24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bb26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bb28:	f00a ff46 	bl	169b8 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    bb2c:	e7ff      	b.n	bb2e <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x4e>
    bb2e:	2000      	movs	r0, #0
        .fill( Some( Rgb565::from(( 0x00, 0x00, 0x00 )) ) );  //  Black
    bb30:	f88d 0078 	strb.w	r0, [sp, #120]	; 0x78
    bb34:	f88d 0079 	strb.w	r0, [sp, #121]	; 0x79
    bb38:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    bb3c:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    bb40:	f8bd 1078 	ldrh.w	r1, [sp, #120]	; 0x78
    bb44:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    bb48:	f005 ffa9 	bl	11a9e <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    bb4c:	9007      	str	r0, [sp, #28]
    bb4e:	e7ff      	b.n	bb50 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x70>
    bb50:	9807      	ldr	r0, [sp, #28]
    bb52:	f8ad 0076 	strh.w	r0, [sp, #118]	; 0x76
    bb56:	2101      	movs	r1, #1
    bb58:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
    let background = Rectangle::<Rgb565>
    bb5c:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
    bb60:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
    bb64:	a80f      	add	r0, sp, #60	; 0x3c
    bb66:	a916      	add	r1, sp, #88	; 0x58
    bb68:	f00a fbbc 	bl	162e4 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    bb6c:	e7ff      	b.n	bb6e <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x8e>
    bb6e:	a80f      	add	r0, sp, #60	; 0x3c
    bb70:	a91f      	add	r1, sp, #124	; 0x7c

    //  Render background to display
    druid::draw_to_display(background);
    bb72:	460a      	mov	r2, r1
    bb74:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
    bb78:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
    bb7c:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
    bb80:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    bb84:	4608      	mov	r0, r1
    bb86:	f009 fd67 	bl	15658 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>
    bb8a:	e7ff      	b.n	bb8c <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xac>

    //  Start the emulator in a background task
    os::task_init(                  //  Create a new task and start it...
        unsafe { &mut CHIP8_TASK }, //  Task object will be saved here
        &init_strn!( "chip8" ),     //  Name of task
    bb8c:	f64e 20cc 	movw	r0, #60108	; 0xeacc
    bb90:	f2c0 0001 	movt	r0, #1
    bb94:	6801      	ldr	r1, [r0, #0]
        Some( task_func ),    //  Function to execute when task starts
    bb96:	f64b 4017 	movw	r0, #48151	; 0xbc17
    bb9a:	f2c0 0000 	movt	r0, #0
    bb9e:	9027      	str	r0, [sp, #156]	; 0x9c
    os::task_init(                  //  Create a new task and start it...
    bba0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
    bba2:	4668      	mov	r0, sp
    bba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    bba8:	6103      	str	r3, [r0, #16]
    bbaa:	60c3      	str	r3, [r0, #12]
    bbac:	f240 2368 	movw	r3, #616	; 0x268
    bbb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bbb4:	6083      	str	r3, [r0, #8]
    bbb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bbba:	6043      	str	r3, [r0, #4]
    bbbc:	2314      	movs	r3, #20
    bbbe:	6003      	str	r3, [r0, #0]
    bbc0:	f240 2018 	movw	r0, #536	; 0x218
    bbc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bbc8:	2300      	movs	r3, #0
    bbca:	f7fd f861 	bl	8c90 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
    bbce:	9006      	str	r0, [sp, #24]
    bbd0:	e7ff      	b.n	bbd2 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xf2>
    bbd2:	9806      	ldr	r0, [sp, #24]
    bbd4:	f7fc ffd0 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    bbd8:	9026      	str	r0, [sp, #152]	; 0x98
    bbda:	e7ff      	b.n	bbdc <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xfc>
        NULL,  //  Argument to be passed to above function
        20,    //  Task priority: highest is 0, lowest is 255 (main task is 127), SPI is 10
        os::OS_WAIT_FOREVER as u32,       //  Don't do sanity / watchdog checking
        unsafe { &mut CHIP8_TASK_STACK }, //  Stack space for the task
        CHIP8_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                                 //  `?` means check for error
    bbdc:	9826      	ldr	r0, [sp, #152]	; 0x98
    bbde:	1e41      	subs	r1, r0, #1
    bbe0:	bf18      	it	ne
    bbe2:	2101      	movne	r1, #1
    bbe4:	2801      	cmp	r0, #1
    bbe6:	d001      	beq.n	bbec <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x10c>
    bbe8:	e7ff      	b.n	bbea <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x10a>
    bbea:	e005      	b.n	bbf8 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x118>
    bbec:	2000      	movs	r0, #0

    //  Return success to the caller
    Ok(())
    bbee:	900e      	str	r0, [sp, #56]	; 0x38
    bbf0:	2001      	movs	r0, #1
    bbf2:	900e      	str	r0, [sp, #56]	; 0x38
}
    bbf4:	e006      	b.n	bc04 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x124>
    os::task_init(                  //  Create a new task and start it...
    bbf6:	defe      	udf	#254	; 0xfe
    ) ? ;                                 //  `?` means check for error
    bbf8:	9826      	ldr	r0, [sp, #152]	; 0x98
    bbfa:	9029      	str	r0, [sp, #164]	; 0xa4
    bbfc:	f006 fe38 	bl	12870 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    bc00:	9005      	str	r0, [sp, #20]
    bc02:	e002      	b.n	bc0a <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x12a>
}
    bc04:	980e      	ldr	r0, [sp, #56]	; 0x38
    bc06:	b02a      	add	sp, #168	; 0xa8
    bc08:	bd10      	pop	{r4, pc}
    ) ? ;                                 //  `?` means check for error
    bc0a:	9805      	ldr	r0, [sp, #20]
    bc0c:	f7fc ffa8 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    bc10:	900e      	str	r0, [sp, #56]	; 0x38
    bc12:	e7ff      	b.n	bc14 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x134>
    bc14:	e7f6      	b.n	bc04 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x124>

0000bc16 <_ZN3app5chip89task_func17h385831a0096277b5E>:

/// Size of the stack (in 4-byte units). Previously `OS_STACK_ALIGN(256)`  
const CHIP8_TASK_STACK_SIZE: usize = 4096;  //  Must be 4096 and above because CHIP8 Emulator requires substantial stack space

///  Run the emulator
extern "C" fn task_func(_arg: Ptr) {    
    bc16:	b580      	push	{r7, lr}
    bc18:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
    bc1c:	b082      	sub	sp, #8
    bc1e:	f50d 5103 	add.w	r1, sp, #8384	; 0x20c0
    bc22:	6008      	str	r0, [r1, #0]
    bc24:	a804      	add	r0, sp, #16
    //  Create the hardware API for rendering the emulator
    let hardware = Hardware::new();
    bc26:	9103      	str	r1, [sp, #12]
    bc28:	f000 f850 	bl	bccc <_ZN3app5chip88Hardware3new17h7d277b7134505907E>
    bc2c:	e7ff      	b.n	bc2e <_ZN3app5chip89task_func17h385831a0096277b5E+0x18>

    //  Create the emulator
    let chip8 = libchip8::Chip8::new(hardware);
    bc2e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    bc32:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    bc36:	f8ae 006c 	strh.w	r0, [lr, #108]	; 0x6c
    bc3a:	9804      	ldr	r0, [sp, #16]
    bc3c:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    bc40:	f8ce 0068 	str.w	r0, [lr, #104]	; 0x68
    bc44:	a806      	add	r0, sp, #24
    bc46:	f10d 0e08 	add.w	lr, sp, #8
    bc4a:	f50e 5183 	add.w	r1, lr, #4192	; 0x1060
    bc4e:	f001 fa72 	bl	d136 <_ZN8libchip814Chip8$LT$T$GT$3new17h327c7b1fc19df648E>
    bc52:	e7ff      	b.n	bc54 <_ZN3app5chip89task_func17h385831a0096277b5E+0x3e>
    console::print("CHIP8 started\n"); console::flush();
    bc54:	f64e 20d0 	movw	r0, #60112	; 0xead0
    bc58:	f2c0 0001 	movt	r0, #1
    bc5c:	210e      	movs	r1, #14
    bc5e:	f7fd f9c7 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    bc62:	e7ff      	b.n	bc64 <_ZN3app5chip89task_func17h385831a0096277b5E+0x4e>
    bc64:	f7fd fa0a 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    bc68:	e7ff      	b.n	bc6a <_ZN3app5chip89task_func17h385831a0096277b5E+0x54>

    //  Load the emulator ROM
    let rom = include_bytes!("../roms/invaders.ch8");
    bc6a:	f64e 20de 	movw	r0, #60126	; 0xeade
    bc6e:	f2c0 0001 	movt	r0, #1
    bc72:	9903      	ldr	r1, [sp, #12]
    bc74:	6048      	str	r0, [r1, #4]
    bc76:	f10d 0e10 	add.w	lr, sp, #16
    bc7a:	f50e 5283 	add.w	r2, lr, #4192	; 0x1060
    bc7e:	a906      	add	r1, sp, #24
    bc80:	f241 0350 	movw	r3, #4176	; 0x1050
    //  let rom = include_bytes!("../roms/pong.ch8");
    //  let rom = include_bytes!("../roms/blinky.ch8");

    //  Run the emulator ROM. This will block until emulator terminates
    chip8.run(rom);
    bc84:	9002      	str	r0, [sp, #8]
    bc86:	4610      	mov	r0, r2
    bc88:	9201      	str	r2, [sp, #4]
    bc8a:	461a      	mov	r2, r3
    bc8c:	f012 fa78 	bl	1e180 <__aeabi_memcpy>
    bc90:	f240 5215 	movw	r2, #1301	; 0x515
    bc94:	9801      	ldr	r0, [sp, #4]
    bc96:	9902      	ldr	r1, [sp, #8]
    bc98:	f001 fafc 	bl	d294 <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E>
    bc9c:	e7ff      	b.n	bc9e <_ZN3app5chip89task_func17h385831a0096277b5E+0x88>

    //  Should not come here
    console::print("CHIP8 done\n"); console::flush();
    bc9e:	f64e 70f3 	movw	r0, #61427	; 0xeff3
    bca2:	f2c0 0001 	movt	r0, #1
    bca6:	210b      	movs	r1, #11
    bca8:	f7fd f9a2 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    bcac:	e7ff      	b.n	bcae <_ZN3app5chip89task_func17h385831a0096277b5E+0x98>
    bcae:	f7fd f9e5 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    bcb2:	e7ff      	b.n	bcb4 <_ZN3app5chip89task_func17h385831a0096277b5E+0x9e>
    assert!(false, "CHIP8 should not end");
    bcb4:	f64e 70fe 	movw	r0, #61438	; 0xeffe
    bcb8:	f2c0 0001 	movt	r0, #1
    bcbc:	f24f 0228 	movw	r2, #61480	; 0xf028
    bcc0:	f2c0 0201 	movt	r2, #1
    bcc4:	2114      	movs	r1, #20
    bcc6:	f00b fe87 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bcca:	defe      	udf	#254	; 0xfe

0000bccc <_ZN3app5chip88Hardware3new17h7d277b7134505907E>:
    is_checking_input: bool,
}

impl Hardware {
    /// Return a new Hardware API for rendering CHIP8 Emulator
    pub fn new() -> Hardware {
    bccc:	2100      	movs	r1, #0
        Hardware {
    bcce:	7001      	strb	r1, [r0, #0]
    bcd0:	7041      	strb	r1, [r0, #1]
    bcd2:	7081      	strb	r1, [r0, #2]
    bcd4:	70c1      	strb	r1, [r0, #3]
    bcd6:	7101      	strb	r1, [r0, #4]
    bcd8:	7141      	strb	r1, [r0, #5]
            update_right: 0,
            update_bottom: 0,
            is_interactive: false,
            is_checking_input: false,
        }
    }
    bcda:	4770      	bx	lr

0000bcdc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h254831b02f23b02eE>:
}

impl libchip8::Hardware for Hardware {
    /// Return a random value.
    fn rand(&mut self) -> u8 {
    bcdc:	b081      	sub	sp, #4
    bcde:	9000      	str	r0, [sp, #0]
    bce0:	207b      	movs	r0, #123	; 0x7b
        123  //  TODO
    }
    bce2:	b001      	add	sp, #4
    bce4:	4770      	bx	lr

0000bce6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17he15d36584013bbaeE>:

    /// Check if the key is pressed.
    fn key(&mut self, _key: u8) -> bool {
    bce6:	b580      	push	{r7, lr}
    bce8:	b084      	sub	sp, #16
    bcea:	460a      	mov	r2, r1
    bcec:	9002      	str	r0, [sp, #8]
    bcee:	f88d 100f 	strb.w	r1, [sp, #15]
        if !self.is_interactive {
    bcf2:	7901      	ldrb	r1, [r0, #4]
    bcf4:	07c9      	lsls	r1, r1, #31
    bcf6:	2900      	cmp	r1, #0
    bcf8:	9001      	str	r0, [sp, #4]
    bcfa:	d10f      	bne.n	bd1c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17he15d36584013bbaeE+0x36>
    bcfc:	e7ff      	b.n	bcfe <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17he15d36584013bbaeE+0x18>
    bcfe:	2001      	movs	r0, #1
            self.is_interactive = true;
    bd00:	9901      	ldr	r1, [sp, #4]
    bd02:	7108      	strb	r0, [r1, #4]
            console::print("key\n"); console::flush(); ////
    bd04:	f24f 0038 	movw	r0, #61496	; 0xf038
    bd08:	f2c0 0001 	movt	r0, #1
    bd0c:	2104      	movs	r1, #4
    bd0e:	f7fd f96f 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    bd12:	e7ff      	b.n	bd14 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17he15d36584013bbaeE+0x2e>
    bd14:	f7fd f9b2 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    bd18:	e7ff      	b.n	bd1a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17he15d36584013bbaeE+0x34>
        if !self.is_interactive {
    bd1a:	e7ff      	b.n	bd1c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17he15d36584013bbaeE+0x36>
    bd1c:	2001      	movs	r0, #1
        }
        self.is_checking_input = true;
    bd1e:	9901      	ldr	r1, [sp, #4]
    bd20:	7148      	strb	r0, [r1, #5]
    bd22:	2000      	movs	r0, #0
        match &self.win {
            Some(win) => win.is_key_down(k),
            None => false,
        }
        */
    }
    bd24:	b004      	add	sp, #16
    bd26:	bd80      	pop	{r7, pc}

0000bd28 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E>:

    /// Set the state of a pixel in the screen. true for white, and false for black.
    fn vram_set(&mut self, x: usize, y: usize, d: bool) {
    bd28:	b08c      	sub	sp, #48	; 0x30
    bd2a:	469c      	mov	ip, r3
    bd2c:	9007      	str	r0, [sp, #28]
    bd2e:	9108      	str	r1, [sp, #32]
    bd30:	9209      	str	r2, [sp, #36]	; 0x24
    bd32:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        //  console::print("set "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    bd36:	293f      	cmp	r1, #63	; 0x3f
    bd38:	9205      	str	r2, [sp, #20]
    bd3a:	9104      	str	r1, [sp, #16]
    bd3c:	9003      	str	r0, [sp, #12]
    bd3e:	f8cd c008 	str.w	ip, [sp, #8]
    bd42:	d804      	bhi.n	bd4e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x26>
    bd44:	e7ff      	b.n	bd46 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x1e>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    bd46:	9805      	ldr	r0, [sp, #20]
    bd48:	281f      	cmp	r0, #31
    bd4a:	d814      	bhi.n	bd76 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x4e>
    bd4c:	e00b      	b.n	bd66 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x3e>
        assert!(x < SCREEN_WIDTH, "x overflow");
    bd4e:	f24f 003c 	movw	r0, #61500	; 0xf03c
    bd52:	f2c0 0001 	movt	r0, #1
    bd56:	f24f 0248 	movw	r2, #61512	; 0xf048
    bd5a:	f2c0 0201 	movt	r2, #1
    bd5e:	210a      	movs	r1, #10
    bd60:	f00b fe3a 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bd64:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    bd66:	9805      	ldr	r0, [sp, #20]
    bd68:	0181      	lsls	r1, r0, #6
    bd6a:	0e82      	lsrs	r2, r0, #26
    bd6c:	2a00      	cmp	r2, #0
    bd6e:	9101      	str	r1, [sp, #4]
    bd70:	f040 80b3 	bne.w	beda <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x1b2>
    bd74:	e00b      	b.n	bd8e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x66>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    bd76:	f24f 0058 	movw	r0, #61528	; 0xf058
    bd7a:	f2c0 0001 	movt	r0, #1
    bd7e:	f24f 0264 	movw	r2, #61540	; 0xf064
    bd82:	f2c0 0201 	movt	r2, #1
    bd86:	210a      	movs	r1, #10
    bd88:	f00b fe26 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bd8c:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    bd8e:	9804      	ldr	r0, [sp, #16]
    bd90:	9901      	ldr	r1, [sp, #4]
    bd92:	1842      	adds	r2, r0, r1
    bd94:	4613      	mov	r3, r2
    bd96:	4282      	cmp	r2, r0
    bd98:	9300      	str	r3, [sp, #0]
    bd9a:	f0c0 80aa 	bcc.w	bef2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x1ca>
    bd9e:	e7ff      	b.n	bda0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x78>
    bda0:	9800      	ldr	r0, [sp, #0]
    bda2:	900b      	str	r0, [sp, #44]	; 0x2c
        unsafe { SCREEN_BUFFER[i] = 
            if d {
    bda4:	9902      	ldr	r1, [sp, #8]
    bda6:	07ca      	lsls	r2, r1, #31
    bda8:	2a00      	cmp	r2, #0
    bdaa:	d104      	bne.n	bdb6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x8e>
    bdac:	e7ff      	b.n	bdae <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x86>
    bdae:	207f      	movs	r0, #127	; 0x7f
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
                else { 200 }                    //  Darker colour for initial screen
            } 
            else { 127 }  //  Fade to black
    bdb0:	f88d 0018 	strb.w	r0, [sp, #24]
            if d {
    bdb4:	e00e      	b.n	bdd4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xac>
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
    bdb6:	9803      	ldr	r0, [sp, #12]
    bdb8:	7901      	ldrb	r1, [r0, #4]
    bdba:	07c9      	lsls	r1, r1, #31
    bdbc:	2900      	cmp	r1, #0
    bdbe:	d104      	bne.n	bdca <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xa2>
    bdc0:	e7ff      	b.n	bdc2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x9a>
    bdc2:	20c8      	movs	r0, #200	; 0xc8
                else { 200 }                    //  Darker colour for initial screen
    bdc4:	f88d 0018 	strb.w	r0, [sp, #24]
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
    bdc8:	e003      	b.n	bdd2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xaa>
    bdca:	20ff      	movs	r0, #255	; 0xff
    bdcc:	f88d 0018 	strb.w	r0, [sp, #24]
    bdd0:	e7ff      	b.n	bdd2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xaa>
            if d {
    bdd2:	e7ff      	b.n	bdd4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xac>
    bdd4:	2000      	movs	r0, #0
        unsafe { SCREEN_BUFFER[i] = 
    bdd6:	9900      	ldr	r1, [sp, #0]
    bdd8:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    bddc:	f040 8095 	bne.w	bf0a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x1e2>
    bde0:	e7ff      	b.n	bde2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xba>
    bde2:	f244 2068 	movw	r0, #17000	; 0x4268
    bde6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bdea:	f89d 1018 	ldrb.w	r1, [sp, #24]
    bdee:	9a00      	ldr	r2, [sp, #0]
    bdf0:	5481      	strb	r1, [r0, r2]
        };

        //  Remember the boundaries of the screen region to be updated
        if self.update_left == 0 && self.update_right == 0 &&
    bdf2:	9803      	ldr	r0, [sp, #12]
    bdf4:	7801      	ldrb	r1, [r0, #0]
    bdf6:	2900      	cmp	r1, #0
    bdf8:	d02e      	beq.n	be58 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x130>
    bdfa:	e029      	b.n	be50 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x128>
    bdfc:	2001      	movs	r0, #1
    bdfe:	f88d 0019 	strb.w	r0, [sp, #25]
    be02:	e008      	b.n	be16 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xee>
    be04:	2000      	movs	r0, #0
    be06:	f88d 0019 	strb.w	r0, [sp, #25]
    be0a:	e004      	b.n	be16 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xee>
            self.update_top == 0 && self.update_bottom == 0 {
    be0c:	9803      	ldr	r0, [sp, #12]
    be0e:	78c1      	ldrb	r1, [r0, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    be10:	2900      	cmp	r1, #0
    be12:	d0f3      	beq.n	bdfc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xd4>
    be14:	e7f6      	b.n	be04 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xdc>
    be16:	f89d 0019 	ldrb.w	r0, [sp, #25]
    be1a:	07c0      	lsls	r0, r0, #31
    be1c:	2800      	cmp	r0, #0
    be1e:	d126      	bne.n	be6e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x146>
    be20:	e02d      	b.n	be7e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x156>
    be22:	2001      	movs	r0, #1
    be24:	f88d 001a 	strb.w	r0, [sp, #26]
    be28:	e008      	b.n	be3c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x114>
    be2a:	2000      	movs	r0, #0
    be2c:	f88d 001a 	strb.w	r0, [sp, #26]
    be30:	e004      	b.n	be3c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x114>
            self.update_top == 0 && self.update_bottom == 0 {
    be32:	9803      	ldr	r0, [sp, #12]
    be34:	7841      	ldrb	r1, [r0, #1]
        if self.update_left == 0 && self.update_right == 0 &&
    be36:	2900      	cmp	r1, #0
    be38:	d0f3      	beq.n	be22 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xfa>
    be3a:	e7f6      	b.n	be2a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x102>
    be3c:	f89d 001a 	ldrb.w	r0, [sp, #26]
    be40:	07c0      	lsls	r0, r0, #31
    be42:	2800      	cmp	r0, #0
    be44:	d1e2      	bne.n	be0c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xe4>
    be46:	e7dd      	b.n	be04 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0xdc>
    be48:	2001      	movs	r0, #1
    be4a:	f88d 001b 	strb.w	r0, [sp, #27]
    be4e:	e008      	b.n	be62 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x13a>
    be50:	2000      	movs	r0, #0
    be52:	f88d 001b 	strb.w	r0, [sp, #27]
    be56:	e004      	b.n	be62 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x13a>
    be58:	9803      	ldr	r0, [sp, #12]
    be5a:	7881      	ldrb	r1, [r0, #2]
    be5c:	2900      	cmp	r1, #0
    be5e:	d0f3      	beq.n	be48 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x120>
    be60:	e7f6      	b.n	be50 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x128>
    be62:	f89d 001b 	ldrb.w	r0, [sp, #27]
    be66:	07c0      	lsls	r0, r0, #31
    be68:	2800      	cmp	r0, #0
    be6a:	d1e2      	bne.n	be32 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x10a>
    be6c:	e7dd      	b.n	be2a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x102>
            self.update_left = x as u8;
    be6e:	9804      	ldr	r0, [sp, #16]
    be70:	9903      	ldr	r1, [sp, #12]
    be72:	7008      	strb	r0, [r1, #0]
            self.update_right = x as u8;
    be74:	7088      	strb	r0, [r1, #2]
            self.update_top = y as u8;
    be76:	9a05      	ldr	r2, [sp, #20]
    be78:	704a      	strb	r2, [r1, #1]
            self.update_bottom = y as u8;
    be7a:	70ca      	strb	r2, [r1, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    be7c:	e7ff      	b.n	be7e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x156>
        }
        if (x as u8) < self.update_left { self.update_left = x as u8; }
    be7e:	9804      	ldr	r0, [sp, #16]
    be80:	b2c1      	uxtb	r1, r0
    be82:	9a03      	ldr	r2, [sp, #12]
    be84:	7813      	ldrb	r3, [r2, #0]
    be86:	4299      	cmp	r1, r3
    be88:	d204      	bcs.n	be94 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x16c>
    be8a:	e7ff      	b.n	be8c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x164>
    be8c:	9804      	ldr	r0, [sp, #16]
    be8e:	9903      	ldr	r1, [sp, #12]
    be90:	7008      	strb	r0, [r1, #0]
    be92:	e7ff      	b.n	be94 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x16c>
        if (x as u8) > self.update_right { self.update_right = x as u8; }
    be94:	9804      	ldr	r0, [sp, #16]
    be96:	b2c1      	uxtb	r1, r0
    be98:	9a03      	ldr	r2, [sp, #12]
    be9a:	7893      	ldrb	r3, [r2, #2]
    be9c:	4299      	cmp	r1, r3
    be9e:	d904      	bls.n	beaa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x182>
    bea0:	e7ff      	b.n	bea2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x17a>
    bea2:	9804      	ldr	r0, [sp, #16]
    bea4:	9903      	ldr	r1, [sp, #12]
    bea6:	7088      	strb	r0, [r1, #2]
    bea8:	e7ff      	b.n	beaa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x182>
        if (y as u8) < self.update_top { self.update_top = y as u8; }
    beaa:	9805      	ldr	r0, [sp, #20]
    beac:	b2c1      	uxtb	r1, r0
    beae:	9a03      	ldr	r2, [sp, #12]
    beb0:	7853      	ldrb	r3, [r2, #1]
    beb2:	4299      	cmp	r1, r3
    beb4:	d204      	bcs.n	bec0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x198>
    beb6:	e7ff      	b.n	beb8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x190>
    beb8:	9805      	ldr	r0, [sp, #20]
    beba:	9903      	ldr	r1, [sp, #12]
    bebc:	7048      	strb	r0, [r1, #1]
    bebe:	e7ff      	b.n	bec0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x198>
        if (y as u8) > self.update_bottom { self.update_bottom = y as u8; }
    bec0:	9805      	ldr	r0, [sp, #20]
    bec2:	b2c1      	uxtb	r1, r0
    bec4:	9a03      	ldr	r2, [sp, #12]
    bec6:	78d3      	ldrb	r3, [r2, #3]
    bec8:	4299      	cmp	r1, r3
    beca:	d904      	bls.n	bed6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x1ae>
    becc:	e7ff      	b.n	bece <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x1a6>
    bece:	9805      	ldr	r0, [sp, #20]
    bed0:	9903      	ldr	r1, [sp, #12]
    bed2:	70c8      	strb	r0, [r1, #3]
    bed4:	e7ff      	b.n	bed6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E+0x1ae>
    }
    bed6:	b00c      	add	sp, #48	; 0x30
    bed8:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    beda:	f24f 0090 	movw	r0, #61584	; 0xf090
    bede:	f2c0 0001 	movt	r0, #1
    bee2:	f24f 0274 	movw	r2, #61556	; 0xf074
    bee6:	f2c0 0201 	movt	r2, #1
    beea:	2121      	movs	r1, #33	; 0x21
    beec:	f00b fd74 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bef0:	defe      	udf	#254	; 0xfe
    bef2:	f24f 00d0 	movw	r0, #61648	; 0xf0d0
    bef6:	f2c0 0001 	movt	r0, #1
    befa:	f24f 02b4 	movw	r2, #61620	; 0xf0b4
    befe:	f2c0 0201 	movt	r2, #1
    bf02:	211c      	movs	r1, #28
    bf04:	f00b fd68 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bf08:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] = 
    bf0a:	f24f 00ec 	movw	r0, #61676	; 0xf0ec
    bf0e:	f2c0 0001 	movt	r0, #1
    bf12:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bf16:	9900      	ldr	r1, [sp, #0]
    bf18:	f00b fd74 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bf1c:	defe      	udf	#254	; 0xfe

0000bf1e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E>:

    /// Get the current state of a pixel in the screen.
    fn vram_get(&mut self, x: usize, y: usize) -> bool {
    bf1e:	b088      	sub	sp, #32
    bf20:	9004      	str	r0, [sp, #16]
    bf22:	9105      	str	r1, [sp, #20]
    bf24:	9206      	str	r2, [sp, #24]
        //  console::print("get "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    bf26:	293f      	cmp	r1, #63	; 0x3f
    bf28:	9203      	str	r2, [sp, #12]
    bf2a:	9102      	str	r1, [sp, #8]
    bf2c:	d804      	bhi.n	bf38 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E+0x1a>
    bf2e:	e7ff      	b.n	bf30 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E+0x12>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    bf30:	9803      	ldr	r0, [sp, #12]
    bf32:	281f      	cmp	r0, #31
    bf34:	d813      	bhi.n	bf5e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E+0x40>
    bf36:	e00b      	b.n	bf50 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E+0x32>
        assert!(x < SCREEN_WIDTH, "x overflow");
    bf38:	f24f 003c 	movw	r0, #61500	; 0xf03c
    bf3c:	f2c0 0001 	movt	r0, #1
    bf40:	f24f 02fc 	movw	r2, #61692	; 0xf0fc
    bf44:	f2c0 0201 	movt	r2, #1
    bf48:	210a      	movs	r1, #10
    bf4a:	f00b fd45 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bf4e:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    bf50:	9803      	ldr	r0, [sp, #12]
    bf52:	0181      	lsls	r1, r0, #6
    bf54:	0e82      	lsrs	r2, r0, #26
    bf56:	2a00      	cmp	r2, #0
    bf58:	9101      	str	r1, [sp, #4]
    bf5a:	d128      	bne.n	bfae <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E+0x90>
    bf5c:	e00b      	b.n	bf76 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E+0x58>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    bf5e:	f24f 0058 	movw	r0, #61528	; 0xf058
    bf62:	f2c0 0001 	movt	r0, #1
    bf66:	f24f 120c 	movw	r2, #61708	; 0xf10c
    bf6a:	f2c0 0201 	movt	r2, #1
    bf6e:	210a      	movs	r1, #10
    bf70:	f00b fd32 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bf74:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    bf76:	9802      	ldr	r0, [sp, #8]
    bf78:	9901      	ldr	r1, [sp, #4]
    bf7a:	1842      	adds	r2, r0, r1
    bf7c:	4613      	mov	r3, r2
    bf7e:	4282      	cmp	r2, r0
    bf80:	9300      	str	r3, [sp, #0]
    bf82:	d320      	bcc.n	bfc6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E+0xa8>
    bf84:	e7ff      	b.n	bf86 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E+0x68>
    bf86:	9800      	ldr	r0, [sp, #0]
    bf88:	9007      	str	r0, [sp, #28]
    bf8a:	2100      	movs	r1, #0
        unsafe { SCREEN_BUFFER[i] >= 128 }
    bf8c:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    bf90:	d125      	bne.n	bfde <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E+0xc0>
    bf92:	e7ff      	b.n	bf94 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E+0x76>
    bf94:	f244 2068 	movw	r0, #17000	; 0x4268
    bf98:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bf9c:	9900      	ldr	r1, [sp, #0]
    bf9e:	5640      	ldrsb	r0, [r0, r1]
    bfa0:	2200      	movs	r2, #0
    bfa2:	2800      	cmp	r0, #0
    bfa4:	bf48      	it	mi
    bfa6:	2201      	movmi	r2, #1
    }
    bfa8:	4610      	mov	r0, r2
    bfaa:	b008      	add	sp, #32
    bfac:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    bfae:	f24f 0090 	movw	r0, #61584	; 0xf090
    bfb2:	f2c0 0001 	movt	r0, #1
    bfb6:	f24f 121c 	movw	r2, #61724	; 0xf11c
    bfba:	f2c0 0201 	movt	r2, #1
    bfbe:	2121      	movs	r1, #33	; 0x21
    bfc0:	f00b fd0a 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bfc4:	defe      	udf	#254	; 0xfe
    bfc6:	f24f 00d0 	movw	r0, #61648	; 0xf0d0
    bfca:	f2c0 0001 	movt	r0, #1
    bfce:	f24f 122c 	movw	r2, #61740	; 0xf12c
    bfd2:	f2c0 0201 	movt	r2, #1
    bfd6:	211c      	movs	r1, #28
    bfd8:	f00b fcfe 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bfdc:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] >= 128 }
    bfde:	f24f 103c 	movw	r0, #61756	; 0xf13c
    bfe2:	f2c0 0001 	movt	r0, #1
    bfe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bfea:	9900      	ldr	r1, [sp, #0]
    bfec:	f00b fd0a 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bff0:	defe      	udf	#254	; 0xfe

0000bff2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E>:

    /// Set the size of the screen.
    fn vram_setsize(&mut self, size: (usize, usize)) {
    bff2:	b580      	push	{r7, lr}
    bff4:	b086      	sub	sp, #24
    bff6:	9003      	str	r0, [sp, #12]
    bff8:	9104      	str	r1, [sp, #16]
    bffa:	9205      	str	r2, [sp, #20]
        //  Do nothing. We assume SCREEN_WIDTH and SCREEN_HEIGHT.
        assert!(size.0 == SCREEN_WIDTH && size.1 == SCREEN_HEIGHT, "bad size");
    bffc:	2940      	cmp	r1, #64	; 0x40
    bffe:	9201      	str	r2, [sp, #4]
    c000:	9100      	str	r1, [sp, #0]
    c002:	d008      	beq.n	c016 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x24>
    c004:	e003      	b.n	c00e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x1c>
    c006:	2001      	movs	r0, #1
    c008:	f88d 000b 	strb.w	r0, [sp, #11]
    c00c:	e007      	b.n	c01e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x2c>
    c00e:	2000      	movs	r0, #0
    c010:	f88d 000b 	strb.w	r0, [sp, #11]
    c014:	e003      	b.n	c01e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x2c>
    c016:	9801      	ldr	r0, [sp, #4]
    c018:	2820      	cmp	r0, #32
    c01a:	d0f4      	beq.n	c006 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x14>
    c01c:	e7f7      	b.n	c00e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x1c>
    c01e:	f89d 000b 	ldrb.w	r0, [sp, #11]
    c022:	07c0      	lsls	r0, r0, #31
    c024:	2800      	cmp	r0, #0
    c026:	d008      	beq.n	c03a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x48>
    c028:	e7ff      	b.n	c02a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x38>
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    c02a:	f24f 1054 	movw	r0, #61780	; 0xf154
    c02e:	f2c0 0001 	movt	r0, #1
    c032:	2108      	movs	r1, #8
    c034:	f7fc ffdc 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c038:	e00b      	b.n	c052 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x60>
        assert!(size.0 == SCREEN_WIDTH && size.1 == SCREEN_HEIGHT, "bad size");
    c03a:	f24f 104c 	movw	r0, #61772	; 0xf14c
    c03e:	f2c0 0001 	movt	r0, #1
    c042:	f24f 1274 	movw	r2, #61812	; 0xf174
    c046:	f2c0 0201 	movt	r2, #1
    c04a:	2108      	movs	r1, #8
    c04c:	f00b fcc4 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c050:	defe      	udf	#254	; 0xfe
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    c052:	9800      	ldr	r0, [sp, #0]
    c054:	f7fd f80a 	bl	906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    c058:	e7ff      	b.n	c05a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x68>
    c05a:	f24f 1084 	movw	r0, #61828	; 0xf184
    c05e:	f2c0 0001 	movt	r0, #1
    c062:	2102      	movs	r1, #2
    c064:	f7fc ffc4 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c068:	e7ff      	b.n	c06a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x78>
    c06a:	9801      	ldr	r0, [sp, #4]
    c06c:	f7fc fffe 	bl	906c <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    c070:	e7ff      	b.n	c072 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x80>
    c072:	f24f 1086 	movw	r0, #61830	; 0xf186
    c076:	f2c0 0001 	movt	r0, #1
    c07a:	2101      	movs	r1, #1
    c07c:	f7fc ffb8 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c080:	e7ff      	b.n	c082 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x90>
    c082:	f7fc fffb 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    c086:	e7ff      	b.n	c088 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E+0x96>
    }
    c088:	b006      	add	sp, #24
    c08a:	bd80      	pop	{r7, pc}

0000c08c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17h3eb92f330a1e13e5E>:

    /// Get the size of the screen.
    fn vram_size(&mut self) -> (usize, usize) {
    c08c:	b083      	sub	sp, #12
    c08e:	9002      	str	r0, [sp, #8]
    c090:	2040      	movs	r0, #64	; 0x40
        (SCREEN_WIDTH, SCREEN_HEIGHT)
    c092:	9000      	str	r0, [sp, #0]
    c094:	2020      	movs	r0, #32
    c096:	9001      	str	r0, [sp, #4]
    }
    c098:	9800      	ldr	r0, [sp, #0]
    c09a:	9901      	ldr	r1, [sp, #4]
    c09c:	b003      	add	sp, #12
    c09e:	4770      	bx	lr

0000c0a0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h3f18189aedbeb9e0E>:

    /// Return the current clock value in nanoseconds.
    fn clock(&mut self) -> u64 {
    c0a0:	b5b0      	push	{r4, r5, r7, lr}
    c0a2:	b086      	sub	sp, #24
    c0a4:	9005      	str	r0, [sp, #20]
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    c0a6:	f00f fdfd 	bl	1bca4 <os_time_get>
    c0aa:	9004      	str	r0, [sp, #16]
    c0ac:	e7ff      	b.n	c0ae <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h3f18189aedbeb9e0E+0xe>
    c0ae:	2000      	movs	r0, #0
    c0b0:	9904      	ldr	r1, [sp, #16]
    c0b2:	fba0 2301 	umull	r2, r3, r0, r1
    c0b6:	2b00      	cmp	r3, #0
    c0b8:	bf18      	it	ne
    c0ba:	2301      	movne	r3, #1
    c0bc:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    c0c0:	fba0 e40c 	umull	lr, r4, r0, ip
    c0c4:	2c00      	cmp	r4, #0
    c0c6:	bf18      	it	ne
    c0c8:	2401      	movne	r4, #1
    c0ca:	ea43 0304 	orr.w	r3, r3, r4
    c0ce:	4472      	add	r2, lr
    c0d0:	fba1 ce0c 	umull	ip, lr, r1, ip
    c0d4:	eb12 020e 	adds.w	r2, r2, lr
    c0d8:	f140 0000 	adc.w	r0, r0, #0
    c0dc:	ea40 0003 	orr.w	r0, r0, r3
    c0e0:	2800      	cmp	r0, #0
    c0e2:	f8cd c00c 	str.w	ip, [sp, #12]
    c0e6:	9202      	str	r2, [sp, #8]
    c0e8:	d124      	bne.n	c134 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h3f18189aedbeb9e0E+0x94>
    c0ea:	e7ff      	b.n	c0ec <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h3f18189aedbeb9e0E+0x4c>
    c0ec:	2000      	movs	r0, #0
    c0ee:	9903      	ldr	r1, [sp, #12]
    c0f0:	fba0 2301 	umull	r2, r3, r0, r1
    c0f4:	2b00      	cmp	r3, #0
    c0f6:	bf18      	it	ne
    c0f8:	2301      	movne	r3, #1
    c0fa:	f44f 6cfa 	mov.w	ip, #2000	; 0x7d0
    c0fe:	f8dd e008 	ldr.w	lr, [sp, #8]
    c102:	fbae 450c 	umull	r4, r5, lr, ip
    c106:	2d00      	cmp	r5, #0
    c108:	bf18      	it	ne
    c10a:	2501      	movne	r5, #1
    c10c:	ea43 0305 	orr.w	r3, r3, r5
    c110:	4422      	add	r2, r4
    c112:	fba1 c40c 	umull	ip, r4, r1, ip
    c116:	1912      	adds	r2, r2, r4
    c118:	f140 0000 	adc.w	r0, r0, #0
    c11c:	ea40 0003 	orr.w	r0, r0, r3
    c120:	2800      	cmp	r0, #0
    c122:	f8cd c004 	str.w	ip, [sp, #4]
    c126:	9200      	str	r2, [sp, #0]
    c128:	d110      	bne.n	c14c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h3f18189aedbeb9e0E+0xac>
    c12a:	e7ff      	b.n	c12c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h3f18189aedbeb9e0E+0x8c>
    }
    c12c:	9801      	ldr	r0, [sp, #4]
    c12e:	9900      	ldr	r1, [sp, #0]
    c130:	b006      	add	sp, #24
    c132:	bdb0      	pop	{r4, r5, r7, pc}
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    c134:	f24f 0090 	movw	r0, #61584	; 0xf090
    c138:	f2c0 0001 	movt	r0, #1
    c13c:	f24f 1288 	movw	r2, #61832	; 0xf188
    c140:	f2c0 0201 	movt	r2, #1
    c144:	2121      	movs	r1, #33	; 0x21
    c146:	f00b fc47 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c14a:	defe      	udf	#254	; 0xfe
    c14c:	f24f 0090 	movw	r0, #61584	; 0xf090
    c150:	f2c0 0001 	movt	r0, #1
    c154:	f24f 1288 	movw	r2, #61832	; 0xf188
    c158:	f2c0 0201 	movt	r2, #1
    c15c:	2121      	movs	r1, #33	; 0x21
    c15e:	f00b fc3b 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c162:	defe      	udf	#254	; 0xfe

0000c164 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha66b0913e7bbcba9E>:

    /// Play beep sound.
    fn beep(&mut self) {
    c164:	b081      	sub	sp, #4
    c166:	9000      	str	r0, [sp, #0]
        //  TODO: Vibrate? Flash?
    }
    c168:	b001      	add	sp, #4
    c16a:	4770      	bx	lr

0000c16c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE>:

    /// Called in every step; return true for shutdown.
    fn sched(&mut self) -> bool {
    c16c:	b580      	push	{r7, lr}
    c16e:	b084      	sub	sp, #16
    c170:	9003      	str	r0, [sp, #12]
        //  console::print("sched\n"); console::flush(); ////

        //  If no screen update, return
        if self.update_left == 0 && self.update_right == 0 &&
    c172:	7801      	ldrb	r1, [r0, #0]
    c174:	2900      	cmp	r1, #0
    c176:	9001      	str	r0, [sp, #4]
    c178:	d02e      	beq.n	c1d8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x6c>
    c17a:	e029      	b.n	c1d0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x64>
    c17c:	2001      	movs	r0, #1
    c17e:	f88d 0009 	strb.w	r0, [sp, #9]
    c182:	e008      	b.n	c196 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x2a>
    c184:	2000      	movs	r0, #0
    c186:	f88d 0009 	strb.w	r0, [sp, #9]
    c18a:	e004      	b.n	c196 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x2a>
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    c18c:	9801      	ldr	r0, [sp, #4]
    c18e:	78c1      	ldrb	r1, [r0, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    c190:	2900      	cmp	r1, #0
    c192:	d0f3      	beq.n	c17c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x10>
    c194:	e7f6      	b.n	c184 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x18>
    c196:	f89d 0009 	ldrb.w	r0, [sp, #9]
    c19a:	07c0      	lsls	r0, r0, #31
    c19c:	2800      	cmp	r0, #0
    c19e:	d12c      	bne.n	c1fa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x8e>
    c1a0:	e025      	b.n	c1ee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x82>
    c1a2:	2001      	movs	r0, #1
    c1a4:	f88d 000a 	strb.w	r0, [sp, #10]
    c1a8:	e008      	b.n	c1bc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x50>
    c1aa:	2000      	movs	r0, #0
    c1ac:	f88d 000a 	strb.w	r0, [sp, #10]
    c1b0:	e004      	b.n	c1bc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x50>
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    c1b2:	9801      	ldr	r0, [sp, #4]
    c1b4:	7841      	ldrb	r1, [r0, #1]
        if self.update_left == 0 && self.update_right == 0 &&
    c1b6:	2900      	cmp	r1, #0
    c1b8:	d0f3      	beq.n	c1a2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x36>
    c1ba:	e7f6      	b.n	c1aa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x3e>
    c1bc:	f89d 000a 	ldrb.w	r0, [sp, #10]
    c1c0:	07c0      	lsls	r0, r0, #31
    c1c2:	2800      	cmp	r0, #0
    c1c4:	d1e2      	bne.n	c18c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x20>
    c1c6:	e7dd      	b.n	c184 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x18>
    c1c8:	2001      	movs	r0, #1
    c1ca:	f88d 000b 	strb.w	r0, [sp, #11]
    c1ce:	e008      	b.n	c1e2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x76>
    c1d0:	2000      	movs	r0, #0
    c1d2:	f88d 000b 	strb.w	r0, [sp, #11]
    c1d6:	e004      	b.n	c1e2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x76>
    c1d8:	9801      	ldr	r0, [sp, #4]
    c1da:	7881      	ldrb	r1, [r0, #2]
    c1dc:	2900      	cmp	r1, #0
    c1de:	d0f3      	beq.n	c1c8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x5c>
    c1e0:	e7f6      	b.n	c1d0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x64>
    c1e2:	f89d 000b 	ldrb.w	r0, [sp, #11]
    c1e6:	07c0      	lsls	r0, r0, #31
    c1e8:	2800      	cmp	r0, #0
    c1ea:	d1e2      	bne.n	c1b2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x46>
    c1ec:	e7dd      	b.n	c1aa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x3e>

        //  If emulator is preparing the initial screen, refresh the screen later
        if !self.is_interactive { return false; }
    c1ee:	9801      	ldr	r0, [sp, #4]
    c1f0:	7901      	ldrb	r1, [r0, #4]
    c1f2:	07c9      	lsls	r1, r1, #31
    c1f4:	2900      	cmp	r1, #0
    c1f6:	d00e      	beq.n	c216 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0xaa>
    c1f8:	e007      	b.n	c20a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x9e>
    c1fa:	2000      	movs	r0, #0
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    c1fc:	f88d 0008 	strb.w	r0, [sp, #8]
    c200:	e7ff      	b.n	c202 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x96>
        self.update_right = 0;
        self.update_bottom = 0;

        //  Return false to indicate no shutdown
        false
    }
    c202:	f89d 0008 	ldrb.w	r0, [sp, #8]
    c206:	b004      	add	sp, #16
    c208:	bd80      	pop	{r7, pc}
        if !self.is_checking_input { return false; }
    c20a:	9801      	ldr	r0, [sp, #4]
    c20c:	7941      	ldrb	r1, [r0, #5]
    c20e:	07c9      	lsls	r1, r1, #31
    c210:	2900      	cmp	r1, #0
    c212:	d00a      	beq.n	c22a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0xbe>
    c214:	e003      	b.n	c21e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0xb2>
    c216:	2000      	movs	r0, #0
        if !self.is_interactive { return false; }
    c218:	f88d 0008 	strb.w	r0, [sp, #8]
    c21c:	e7f1      	b.n	c202 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x96>
    c21e:	2000      	movs	r0, #0
        self.is_checking_input = false;
    c220:	9901      	ldr	r1, [sp, #4]
    c222:	7148      	strb	r0, [r1, #5]
        unsafe { hal_watchdog_tickle() };
    c224:	f00e fb16 	bl	1a854 <hal_watchdog_tickle>
    c228:	e003      	b.n	c232 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0xc6>
    c22a:	2000      	movs	r0, #0
        if !self.is_checking_input { return false; }
    c22c:	f88d 0008 	strb.w	r0, [sp, #8]
    c230:	e7e7      	b.n	c202 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x96>
    c232:	2001      	movs	r0, #1
        unsafe { os::os_time_delay(1) };
    c234:	f00f fd5c 	bl	1bcf0 <os_time_delay>
    c238:	e7ff      	b.n	c23a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0xce>
        render_region(
    c23a:	9801      	ldr	r0, [sp, #4]
    c23c:	7800      	ldrb	r0, [r0, #0]
    c23e:	9901      	ldr	r1, [sp, #4]
    c240:	7849      	ldrb	r1, [r1, #1]
    c242:	9a01      	ldr	r2, [sp, #4]
    c244:	7892      	ldrb	r2, [r2, #2]
    c246:	9b01      	ldr	r3, [sp, #4]
    c248:	78db      	ldrb	r3, [r3, #3]
    c24a:	f000 f80a 	bl	c262 <_ZN3app5chip813render_region17h63a2f42595e40485E>
    c24e:	e7ff      	b.n	c250 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0xe4>
    c250:	2000      	movs	r0, #0
        self.update_left = 0;
    c252:	9901      	ldr	r1, [sp, #4]
    c254:	7008      	strb	r0, [r1, #0]
        self.update_top = 0;
    c256:	7048      	strb	r0, [r1, #1]
        self.update_right = 0;
    c258:	7088      	strb	r0, [r1, #2]
        self.update_bottom = 0;
    c25a:	70c8      	strb	r0, [r1, #3]
        false
    c25c:	f88d 0008 	strb.w	r0, [sp, #8]
    }
    c260:	e7cf      	b.n	c202 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE+0x96>

0000c262 <_ZN3app5chip813render_region17h63a2f42595e40485E>:
}

/// Render the Virtual Screen region
fn render_region(left: u8, top: u8, right: u8, bottom: u8) {
    c262:	b5f0      	push	{r4, r5, r6, r7, lr}
    c264:	b095      	sub	sp, #84	; 0x54
    c266:	fa5f fc80 	uxtb.w	ip, r0
    c26a:	fa5f fe82 	uxtb.w	lr, r2
    c26e:	461c      	mov	r4, r3
    c270:	4615      	mov	r5, r2
    c272:	460e      	mov	r6, r1
    c274:	4607      	mov	r7, r0
    c276:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    c27a:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    c27e:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
    c282:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    let width = right - left + 1;
    c286:	ebae 000c 	sub.w	r0, lr, ip
    c28a:	b2c1      	uxtb	r1, r0
    c28c:	4602      	mov	r2, r0
    c28e:	4281      	cmp	r1, r0
    c290:	9411      	str	r4, [sp, #68]	; 0x44
    c292:	9510      	str	r5, [sp, #64]	; 0x40
    c294:	960f      	str	r6, [sp, #60]	; 0x3c
    c296:	970e      	str	r7, [sp, #56]	; 0x38
    c298:	920d      	str	r2, [sp, #52]	; 0x34
    c29a:	f040 80df 	bne.w	c45c <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1fa>
    c29e:	e7ff      	b.n	c2a0 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x3e>
    c2a0:	2001      	movs	r0, #1
    c2a2:	990d      	ldr	r1, [sp, #52]	; 0x34
    c2a4:	fa50 f081 	uxtab	r0, r0, r1
    c2a8:	b2c2      	uxtb	r2, r0
    c2aa:	4603      	mov	r3, r0
    c2ac:	4282      	cmp	r2, r0
    c2ae:	930c      	str	r3, [sp, #48]	; 0x30
    c2b0:	f040 80e0 	bne.w	c474 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x212>
    c2b4:	e7ff      	b.n	c2b6 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x54>
    c2b6:	980c      	ldr	r0, [sp, #48]	; 0x30
    c2b8:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    let height = bottom - top + 1;
    c2bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c2be:	b2ca      	uxtb	r2, r1
    c2c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c2c2:	fa5f fc83 	uxtb.w	ip, r3
    c2c6:	ebac 0202 	sub.w	r2, ip, r2
    c2ca:	fa5f fc82 	uxtb.w	ip, r2
    c2ce:	4696      	mov	lr, r2
    c2d0:	4594      	cmp	ip, r2
    c2d2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    c2d6:	f040 80d9 	bne.w	c48c <_ZN3app5chip813render_region17h63a2f42595e40485E+0x22a>
    c2da:	e7ff      	b.n	c2dc <_ZN3app5chip813render_region17h63a2f42595e40485E+0x7a>
    c2dc:	2001      	movs	r0, #1
    c2de:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c2e0:	fa50 f081 	uxtab	r0, r0, r1
    c2e4:	b2c2      	uxtb	r2, r0
    c2e6:	4603      	mov	r3, r0
    c2e8:	4282      	cmp	r2, r0
    c2ea:	930a      	str	r3, [sp, #40]	; 0x28
    c2ec:	f040 80da 	bne.w	c4a4 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x242>
    c2f0:	e7ff      	b.n	c2f2 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x90>
    c2f2:	980a      	ldr	r0, [sp, #40]	; 0x28
    c2f4:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
    //  If the update region is small, render with a single block
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    c2f8:	990c      	ldr	r1, [sp, #48]	; 0x30
    c2fa:	b2ca      	uxtb	r2, r1
    c2fc:	fa52 f280 	uxtab	r2, r2, r0
    c300:	b2d3      	uxtb	r3, r2
    c302:	4694      	mov	ip, r2
    c304:	4293      	cmp	r3, r2
    c306:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    c30a:	f040 80d7 	bne.w	c4bc <_ZN3app5chip813render_region17h63a2f42595e40485E+0x25a>
    c30e:	e7ff      	b.n	c310 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xae>
    c310:	9809      	ldr	r0, [sp, #36]	; 0x24
    c312:	b2c1      	uxtb	r1, r0
    c314:	2926      	cmp	r1, #38	; 0x26
    c316:	d307      	bcc.n	c328 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xc6>
    c318:	e7ff      	b.n	c31a <_ZN3app5chip813render_region17h63a2f42595e40485E+0xb8>
        render_block(left, top, right, bottom);
    } else {
        //  If the update region is too big for a single block, break the region into blocks and render
        let mut x = left;
    c31a:	980e      	ldr	r0, [sp, #56]	; 0x38
    c31c:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
        let mut y = top;
    c320:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c322:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
        loop {
    c326:	e007      	b.n	c338 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xd6>
        render_block(left, top, right, bottom);
    c328:	980e      	ldr	r0, [sp, #56]	; 0x38
    c32a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c32c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c32e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c330:	f000 f918 	bl	c564 <_ZN3app5chip812render_block17hf14dcded684223a2E>
    c334:	e7ff      	b.n	c336 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xd4>
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    c336:	e08f      	b.n	c458 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f6>
            let block_right = x + BLOCK_WIDTH as u8 - 1;
    c338:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    c33c:	3020      	adds	r0, #32
    c33e:	b2c1      	uxtb	r1, r0
    c340:	4602      	mov	r2, r0
    c342:	4281      	cmp	r1, r0
    c344:	9208      	str	r2, [sp, #32]
    c346:	f040 80c5 	bne.w	c4d4 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x272>
    c34a:	e7ff      	b.n	c34c <_ZN3app5chip813render_region17h63a2f42595e40485E+0xea>
    c34c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c350:	9908      	ldr	r1, [sp, #32]
    c352:	fa50 f081 	uxtab	r0, r0, r1
    c356:	b2c2      	uxtb	r2, r0
    c358:	4603      	mov	r3, r0
    c35a:	4282      	cmp	r2, r0
    c35c:	9307      	str	r3, [sp, #28]
    c35e:	f040 80c5 	bne.w	c4ec <_ZN3app5chip813render_region17h63a2f42595e40485E+0x28a>
    c362:	e7ff      	b.n	c364 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x102>
    c364:	9807      	ldr	r0, [sp, #28]
    c366:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
            let block_bottom = y + BLOCK_HEIGHT as u8 - 1;
    c36a:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    c36e:	3105      	adds	r1, #5
    c370:	b2ca      	uxtb	r2, r1
    c372:	460b      	mov	r3, r1
    c374:	428a      	cmp	r2, r1
    c376:	9306      	str	r3, [sp, #24]
    c378:	f040 80c4 	bne.w	c504 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x2a2>
    c37c:	e7ff      	b.n	c37e <_ZN3app5chip813render_region17h63a2f42595e40485E+0x11c>
    c37e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c382:	9906      	ldr	r1, [sp, #24]
    c384:	fa50 f081 	uxtab	r0, r0, r1
    c388:	b2c2      	uxtb	r2, r0
    c38a:	4603      	mov	r3, r0
    c38c:	4282      	cmp	r2, r0
    c38e:	9305      	str	r3, [sp, #20]
    c390:	f040 80c4 	bne.w	c51c <_ZN3app5chip813render_region17h63a2f42595e40485E+0x2ba>
    c394:	e7ff      	b.n	c396 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x134>
    c396:	9805      	ldr	r0, [sp, #20]
    c398:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
            render_block(x, y,
    c39c:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    c3a0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
                if block_right  <= right  { block_right }  else { right },
    c3a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c3a6:	fa5f fc83 	uxtb.w	ip, r3
    c3aa:	f8dd e01c 	ldr.w	lr, [sp, #28]
    c3ae:	fa5f f48e 	uxtb.w	r4, lr
    c3b2:	4564      	cmp	r4, ip
    c3b4:	9104      	str	r1, [sp, #16]
    c3b6:	9203      	str	r2, [sp, #12]
    c3b8:	d904      	bls.n	c3c4 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x162>
    c3ba:	e7ff      	b.n	c3bc <_ZN3app5chip813render_region17h63a2f42595e40485E+0x15a>
    c3bc:	9810      	ldr	r0, [sp, #64]	; 0x40
    c3be:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    c3c2:	e003      	b.n	c3cc <_ZN3app5chip813render_region17h63a2f42595e40485E+0x16a>
    c3c4:	9807      	ldr	r0, [sp, #28]
    c3c6:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    c3ca:	e7ff      	b.n	c3cc <_ZN3app5chip813render_region17h63a2f42595e40485E+0x16a>
                if block_bottom <= bottom { block_bottom } else { bottom }
    c3cc:	9811      	ldr	r0, [sp, #68]	; 0x44
    c3ce:	b2c1      	uxtb	r1, r0
    c3d0:	9a05      	ldr	r2, [sp, #20]
    c3d2:	b2d3      	uxtb	r3, r2
    c3d4:	428b      	cmp	r3, r1
    c3d6:	d904      	bls.n	c3e2 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x180>
    c3d8:	e7ff      	b.n	c3da <_ZN3app5chip813render_region17h63a2f42595e40485E+0x178>
    c3da:	9811      	ldr	r0, [sp, #68]	; 0x44
    c3dc:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
    c3e0:	e003      	b.n	c3ea <_ZN3app5chip813render_region17h63a2f42595e40485E+0x188>
    c3e2:	9805      	ldr	r0, [sp, #20]
    c3e4:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
    c3e8:	e7ff      	b.n	c3ea <_ZN3app5chip813render_region17h63a2f42595e40485E+0x188>
            render_block(x, y,
    c3ea:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
    c3ee:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    c3f2:	9804      	ldr	r0, [sp, #16]
    c3f4:	9903      	ldr	r1, [sp, #12]
    c3f6:	f000 f8b5 	bl	c564 <_ZN3app5chip812render_block17hf14dcded684223a2E>
    c3fa:	e7ff      	b.n	c3fc <_ZN3app5chip813render_region17h63a2f42595e40485E+0x19a>
            );  //  Will not overflow SPI buffer
            x += BLOCK_WIDTH as u8;
    c3fc:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    c400:	3020      	adds	r0, #32
    c402:	b2c1      	uxtb	r1, r0
    c404:	4602      	mov	r2, r0
    c406:	4281      	cmp	r1, r0
    c408:	9202      	str	r2, [sp, #8]
    c40a:	f040 8093 	bne.w	c534 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x2d2>
    c40e:	e7ff      	b.n	c410 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1ae>
    c410:	9802      	ldr	r0, [sp, #8]
    c412:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
            if x > right {
    c416:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    c41a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c41c:	b2d3      	uxtb	r3, r2
    c41e:	4299      	cmp	r1, r3
    c420:	d919      	bls.n	c456 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f4>
    c422:	e7ff      	b.n	c424 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1c2>
                x = left;
    c424:	980e      	ldr	r0, [sp, #56]	; 0x38
    c426:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
                y += BLOCK_HEIGHT as u8;
    c42a:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    c42e:	3105      	adds	r1, #5
    c430:	b2ca      	uxtb	r2, r1
    c432:	460b      	mov	r3, r1
    c434:	428a      	cmp	r2, r1
    c436:	9301      	str	r3, [sp, #4]
    c438:	f040 8088 	bne.w	c54c <_ZN3app5chip813render_region17h63a2f42595e40485E+0x2ea>
    c43c:	e7ff      	b.n	c43e <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1dc>
    c43e:	9801      	ldr	r0, [sp, #4]
    c440:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
                if y > bottom { break; }
    c444:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    c448:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c44a:	b2d3      	uxtb	r3, r2
    c44c:	4299      	cmp	r1, r3
    c44e:	d801      	bhi.n	c454 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f2>
    c450:	e7ff      	b.n	c452 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f0>
            if x > right {
    c452:	e000      	b.n	c456 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f4>
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    c454:	e000      	b.n	c458 <_ZN3app5chip813render_region17h63a2f42595e40485E+0x1f6>
        loop {
    c456:	e76f      	b.n	c338 <_ZN3app5chip813render_region17h63a2f42595e40485E+0xd6>
            }
        }
    }
}
    c458:	b015      	add	sp, #84	; 0x54
    c45a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    let width = right - left + 1;
    c45c:	f24f 10b0 	movw	r0, #61872	; 0xf1b0
    c460:	f2c0 0001 	movt	r0, #1
    c464:	f24f 1298 	movw	r2, #61848	; 0xf198
    c468:	f2c0 0201 	movt	r2, #1
    c46c:	2121      	movs	r1, #33	; 0x21
    c46e:	f00b fab3 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c472:	defe      	udf	#254	; 0xfe
    c474:	f24f 00d0 	movw	r0, #61648	; 0xf0d0
    c478:	f2c0 0001 	movt	r0, #1
    c47c:	f24f 1298 	movw	r2, #61848	; 0xf198
    c480:	f2c0 0201 	movt	r2, #1
    c484:	211c      	movs	r1, #28
    c486:	f00b faa7 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c48a:	defe      	udf	#254	; 0xfe
    let height = bottom - top + 1;
    c48c:	f24f 10b0 	movw	r0, #61872	; 0xf1b0
    c490:	f2c0 0001 	movt	r0, #1
    c494:	f24f 12d4 	movw	r2, #61908	; 0xf1d4
    c498:	f2c0 0201 	movt	r2, #1
    c49c:	2121      	movs	r1, #33	; 0x21
    c49e:	f00b fa9b 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c4a2:	defe      	udf	#254	; 0xfe
    c4a4:	f24f 00d0 	movw	r0, #61648	; 0xf0d0
    c4a8:	f2c0 0001 	movt	r0, #1
    c4ac:	f24f 12d4 	movw	r2, #61908	; 0xf1d4
    c4b0:	f2c0 0201 	movt	r2, #1
    c4b4:	211c      	movs	r1, #28
    c4b6:	f00b fa8f 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c4ba:	defe      	udf	#254	; 0xfe
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    c4bc:	f24f 00d0 	movw	r0, #61648	; 0xf0d0
    c4c0:	f2c0 0001 	movt	r0, #1
    c4c4:	f24f 12e4 	movw	r2, #61924	; 0xf1e4
    c4c8:	f2c0 0201 	movt	r2, #1
    c4cc:	211c      	movs	r1, #28
    c4ce:	f00b fa83 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c4d2:	defe      	udf	#254	; 0xfe
            let block_right = x + BLOCK_WIDTH as u8 - 1;
    c4d4:	f24f 00d0 	movw	r0, #61648	; 0xf0d0
    c4d8:	f2c0 0001 	movt	r0, #1
    c4dc:	f24f 12f4 	movw	r2, #61940	; 0xf1f4
    c4e0:	f2c0 0201 	movt	r2, #1
    c4e4:	211c      	movs	r1, #28
    c4e6:	f00b fa77 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c4ea:	defe      	udf	#254	; 0xfe
    c4ec:	f24f 10b0 	movw	r0, #61872	; 0xf1b0
    c4f0:	f2c0 0001 	movt	r0, #1
    c4f4:	f24f 12f4 	movw	r2, #61940	; 0xf1f4
    c4f8:	f2c0 0201 	movt	r2, #1
    c4fc:	2121      	movs	r1, #33	; 0x21
    c4fe:	f00b fa6b 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c502:	defe      	udf	#254	; 0xfe
            let block_bottom = y + BLOCK_HEIGHT as u8 - 1;
    c504:	f24f 00d0 	movw	r0, #61648	; 0xf0d0
    c508:	f2c0 0001 	movt	r0, #1
    c50c:	f24f 2204 	movw	r2, #61956	; 0xf204
    c510:	f2c0 0201 	movt	r2, #1
    c514:	211c      	movs	r1, #28
    c516:	f00b fa5f 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c51a:	defe      	udf	#254	; 0xfe
    c51c:	f24f 10b0 	movw	r0, #61872	; 0xf1b0
    c520:	f2c0 0001 	movt	r0, #1
    c524:	f24f 2204 	movw	r2, #61956	; 0xf204
    c528:	f2c0 0201 	movt	r2, #1
    c52c:	2121      	movs	r1, #33	; 0x21
    c52e:	f00b fa53 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c532:	defe      	udf	#254	; 0xfe
            x += BLOCK_WIDTH as u8;
    c534:	f24f 00d0 	movw	r0, #61648	; 0xf0d0
    c538:	f2c0 0001 	movt	r0, #1
    c53c:	f24f 2214 	movw	r2, #61972	; 0xf214
    c540:	f2c0 0201 	movt	r2, #1
    c544:	211c      	movs	r1, #28
    c546:	f00b fa47 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c54a:	defe      	udf	#254	; 0xfe
                y += BLOCK_HEIGHT as u8;
    c54c:	f24f 00d0 	movw	r0, #61648	; 0xf0d0
    c550:	f2c0 0001 	movt	r0, #1
    c554:	f24f 2224 	movw	r2, #61988	; 0xf224
    c558:	f2c0 0201 	movt	r2, #1
    c55c:	211c      	movs	r1, #28
    c55e:	f00b fa3b 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c562:	defe      	udf	#254	; 0xfe

0000c564 <_ZN3app5chip812render_block17hf14dcded684223a2E>:

/// Render the Virtual Block
fn render_block(left: u8, top: u8, right: u8, bottom: u8) {
    c564:	b570      	push	{r4, r5, r6, lr}
    c566:	b090      	sub	sp, #64	; 0x40
    c568:	469c      	mov	ip, r3
    c56a:	4696      	mov	lr, r2
    c56c:	460c      	mov	r4, r1
    c56e:	4605      	mov	r5, r0
    c570:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    c574:	f88d 1035 	strb.w	r1, [sp, #53]	; 0x35
    c578:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
    c57c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    //  console::print("render "); console::printint(left as i32); console::print(", "); console::printint(top as i32); console::print(", "); console::printint(right as i32 - left as i32); console::print(", "); console::printint(bottom as i32 - top as i32); console::print("\n"); console::flush(); ////
    //  Create a new block for the region to be updated
    let mut block = PixelIterator::new(
    c580:	466e      	mov	r6, sp
    c582:	6033      	str	r3, [r6, #0]
    c584:	ab0a      	add	r3, sp, #40	; 0x28
    c586:	9009      	str	r0, [sp, #36]	; 0x24
    c588:	4618      	mov	r0, r3
    c58a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c58c:	9108      	str	r1, [sp, #32]
    c58e:	4619      	mov	r1, r3
    c590:	9e08      	ldr	r6, [sp, #32]
    c592:	9207      	str	r2, [sp, #28]
    c594:	4632      	mov	r2, r6
    c596:	9b07      	ldr	r3, [sp, #28]
    c598:	f8cd c018 	str.w	ip, [sp, #24]
    c59c:	f8cd e014 	str.w	lr, [sp, #20]
    c5a0:	9404      	str	r4, [sp, #16]
    c5a2:	9503      	str	r5, [sp, #12]
    c5a4:	f000 f832 	bl	c60c <_ZN3app5chip813PixelIterator3new17h822e2c1da3bbcd7bE>
    c5a8:	e7ff      	b.n	c5aa <_ZN3app5chip812render_block17hf14dcded684223a2E+0x46>
    c5aa:	a80a      	add	r0, sp, #40	; 0x28
        left, top, 
        right, bottom,
    );
    //  Render the block
    let (left, top, right, bottom) = block.get_window();
    c5ac:	f000 f849 	bl	c642 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE>
    c5b0:	900e      	str	r0, [sp, #56]	; 0x38
    c5b2:	980e      	ldr	r0, [sp, #56]	; 0x38
    c5b4:	900c      	str	r0, [sp, #48]	; 0x30
    c5b6:	e7ff      	b.n	c5b8 <_ZN3app5chip812render_block17hf14dcded684223a2E+0x54>
    c5b8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    c5bc:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
    c5c0:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
    c5c4:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
    c5c8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    c5cc:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
    c5d0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    c5d4:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    druid::set_display_pixels(left as u16, top as u16, right as u16, bottom as u16,
    c5d8:	46ec      	mov	ip, sp
    c5da:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
    c5de:	f8cc e000 	str.w	lr, [ip]
    c5e2:	f000 fc2e 	bl	ce42 <_ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E>
    c5e6:	9002      	str	r0, [sp, #8]
    c5e8:	e7ff      	b.n	c5ea <_ZN3app5chip812render_block17hf14dcded684223a2E+0x86>
    c5ea:	9802      	ldr	r0, [sp, #8]
    c5ec:	f000 0001 	and.w	r0, r0, #1
    c5f0:	f24f 2134 	movw	r1, #62004	; 0xf234
    c5f4:	f2c0 0101 	movt	r1, #1
    c5f8:	f24f 2348 	movw	r3, #62024	; 0xf248
    c5fc:	f2c0 0301 	movt	r3, #1
    c600:	2211      	movs	r2, #17
    c602:	f008 fe44 	bl	1528e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
    c606:	e7ff      	b.n	c608 <_ZN3app5chip812render_block17hf14dcded684223a2E+0xa4>
        &mut block
    ).expect("set pixels failed");    
}
    c608:	b010      	add	sp, #64	; 0x40
    c60a:	bd70      	pop	{r4, r5, r6, pc}

0000c60c <_ZN3app5chip813PixelIterator3new17h822e2c1da3bbcd7bE>:
    block_bottom:    u8,
}

impl PixelIterator {
    /// Return a new PixelInterator for the block dimensions
    pub fn new(
    c60c:	b570      	push	{r4, r5, r6, lr}
    c60e:	b081      	sub	sp, #4
    c610:	f8dd c014 	ldr.w	ip, [sp, #20]
    c614:	469e      	mov	lr, r3
    c616:	4614      	mov	r4, r2
    c618:	460d      	mov	r5, r1
    c61a:	f88d 1000 	strb.w	r1, [sp]
    c61e:	f88d 2001 	strb.w	r2, [sp, #1]
    c622:	f88d 3002 	strb.w	r3, [sp, #2]
    c626:	f88d c003 	strb.w	ip, [sp, #3]
        //  End column number for block
        block_right:     u8,
        //  End row number for block
        block_bottom:    u8,        
    ) -> PixelIterator {
        PixelIterator {
    c62a:	7001      	strb	r1, [r0, #0]
    c62c:	7042      	strb	r2, [r0, #1]
    c62e:	2600      	movs	r6, #0
    c630:	7086      	strb	r6, [r0, #2]
    c632:	70c6      	strb	r6, [r0, #3]
    c634:	7101      	strb	r1, [r0, #4]
    c636:	7143      	strb	r3, [r0, #5]
    c638:	7182      	strb	r2, [r0, #6]
    c63a:	f880 c007 	strb.w	ip, [r0, #7]
            x_offset: 0, 
            y_offset: 0,
            block_left, block_right,
            block_top, block_bottom,
        }
    }
    c63e:	b001      	add	sp, #4
    c640:	bd70      	pop	{r4, r5, r6, pc}

0000c642 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE>:
    pub fn contains(&self, x: u8, y: u8) -> bool {
        x >= self.block_left && x <= self.block_right &&
            y >= self.block_top && y <= self.block_bottom
    }
    /// Return window of Physical Pixels: (left, top, right, bottom)
    pub fn get_window(&self) -> (u8, u8, u8, u8) {
    c642:	b580      	push	{r7, lr}
    c644:	b092      	sub	sp, #72	; 0x48
    c646:	9010      	str	r0, [sp, #64]	; 0x40
        let left: u8 = self.block_left as u8 * PIXEL_WIDTH as u8;
    c648:	7901      	ldrb	r1, [r0, #4]
    c64a:	2203      	movs	r2, #3
    c64c:	fba1 1202 	umull	r1, r2, r1, r2
    c650:	0a0b      	lsrs	r3, r1, #8
    c652:	f04f 0c00 	mov.w	ip, #0
    c656:	ebbc 2f11 	cmp.w	ip, r1, lsr #8
    c65a:	bf18      	it	ne
    c65c:	2301      	movne	r3, #1
    c65e:	2a00      	cmp	r2, #0
    c660:	bf18      	it	ne
    c662:	2201      	movne	r2, #1
    c664:	ea42 0203 	orr.w	r2, r2, r3
    c668:	2a00      	cmp	r2, #0
    c66a:	900d      	str	r0, [sp, #52]	; 0x34
    c66c:	910c      	str	r1, [sp, #48]	; 0x30
    c66e:	f040 810a 	bne.w	c886 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x244>
    c672:	e7ff      	b.n	c674 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x32>
    c674:	980c      	ldr	r0, [sp, #48]	; 0x30
    c676:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
        let top: u8 = self.block_top as u8 * PIXEL_HEIGHT as u8; 
    c67a:	990d      	ldr	r1, [sp, #52]	; 0x34
    c67c:	798a      	ldrb	r2, [r1, #6]
    c67e:	2305      	movs	r3, #5
    c680:	fba2 2303 	umull	r2, r3, r2, r3
    c684:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    c688:	f04f 0e00 	mov.w	lr, #0
    c68c:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
    c690:	bf18      	it	ne
    c692:	f04f 0c01 	movne.w	ip, #1
    c696:	2b00      	cmp	r3, #0
    c698:	bf18      	it	ne
    c69a:	2301      	movne	r3, #1
    c69c:	ea43 030c 	orr.w	r3, r3, ip
    c6a0:	2b00      	cmp	r3, #0
    c6a2:	920b      	str	r2, [sp, #44]	; 0x2c
    c6a4:	f040 80fb 	bne.w	c89e <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x25c>
    c6a8:	e7ff      	b.n	c6aa <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x68>
    c6aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c6ac:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
        let right: u8 = left + (self.block_right - self.block_left + 1) * PIXEL_WIDTH as u8 - 1;
    c6b0:	990d      	ldr	r1, [sp, #52]	; 0x34
    c6b2:	790a      	ldrb	r2, [r1, #4]
    c6b4:	794b      	ldrb	r3, [r1, #5]
    c6b6:	1a9a      	subs	r2, r3, r2
    c6b8:	b2d3      	uxtb	r3, r2
    c6ba:	4694      	mov	ip, r2
    c6bc:	4293      	cmp	r3, r2
    c6be:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    c6c2:	f040 80f8 	bne.w	c8b6 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x274>
    c6c6:	e7ff      	b.n	c6c8 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x86>
    c6c8:	2001      	movs	r0, #1
    c6ca:	990a      	ldr	r1, [sp, #40]	; 0x28
    c6cc:	fa50 f081 	uxtab	r0, r0, r1
    c6d0:	b2c2      	uxtb	r2, r0
    c6d2:	4603      	mov	r3, r0
    c6d4:	4282      	cmp	r2, r0
    c6d6:	9309      	str	r3, [sp, #36]	; 0x24
    c6d8:	f040 80f9 	bne.w	c8ce <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x28c>
    c6dc:	e7ff      	b.n	c6de <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x9c>
    c6de:	9809      	ldr	r0, [sp, #36]	; 0x24
    c6e0:	b2c1      	uxtb	r1, r0
    c6e2:	2203      	movs	r2, #3
    c6e4:	fba1 1202 	umull	r1, r2, r1, r2
    c6e8:	0a0b      	lsrs	r3, r1, #8
    c6ea:	f04f 0c00 	mov.w	ip, #0
    c6ee:	ebbc 2f11 	cmp.w	ip, r1, lsr #8
    c6f2:	bf18      	it	ne
    c6f4:	2301      	movne	r3, #1
    c6f6:	2a00      	cmp	r2, #0
    c6f8:	bf18      	it	ne
    c6fa:	2201      	movne	r2, #1
    c6fc:	ea42 0203 	orr.w	r2, r2, r3
    c700:	2a00      	cmp	r2, #0
    c702:	9108      	str	r1, [sp, #32]
    c704:	f040 80ef 	bne.w	c8e6 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x2a4>
    c708:	e7ff      	b.n	c70a <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0xc8>
    c70a:	980c      	ldr	r0, [sp, #48]	; 0x30
    c70c:	b2c1      	uxtb	r1, r0
    c70e:	9a08      	ldr	r2, [sp, #32]
    c710:	fa51 f182 	uxtab	r1, r1, r2
    c714:	b2cb      	uxtb	r3, r1
    c716:	468c      	mov	ip, r1
    c718:	428b      	cmp	r3, r1
    c71a:	f8cd c01c 	str.w	ip, [sp, #28]
    c71e:	f040 80ee 	bne.w	c8fe <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x2bc>
    c722:	e7ff      	b.n	c724 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0xe2>
    c724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c728:	9907      	ldr	r1, [sp, #28]
    c72a:	fa50 f081 	uxtab	r0, r0, r1
    c72e:	b2c2      	uxtb	r2, r0
    c730:	4603      	mov	r3, r0
    c732:	4282      	cmp	r2, r0
    c734:	9306      	str	r3, [sp, #24]
    c736:	f040 80ee 	bne.w	c916 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x2d4>
    c73a:	e7ff      	b.n	c73c <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0xfa>
    c73c:	9806      	ldr	r0, [sp, #24]
    c73e:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
        let bottom: u8 = top + (self.block_bottom - self.block_top + 1) * PIXEL_HEIGHT as u8 - 1;
    c742:	990d      	ldr	r1, [sp, #52]	; 0x34
    c744:	798a      	ldrb	r2, [r1, #6]
    c746:	79cb      	ldrb	r3, [r1, #7]
    c748:	1a9a      	subs	r2, r3, r2
    c74a:	b2d3      	uxtb	r3, r2
    c74c:	4694      	mov	ip, r2
    c74e:	4293      	cmp	r3, r2
    c750:	f8cd c014 	str.w	ip, [sp, #20]
    c754:	f040 80eb 	bne.w	c92e <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x2ec>
    c758:	e7ff      	b.n	c75a <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x118>
    c75a:	2001      	movs	r0, #1
    c75c:	9905      	ldr	r1, [sp, #20]
    c75e:	fa50 f081 	uxtab	r0, r0, r1
    c762:	b2c2      	uxtb	r2, r0
    c764:	4603      	mov	r3, r0
    c766:	4282      	cmp	r2, r0
    c768:	9304      	str	r3, [sp, #16]
    c76a:	f040 80ec 	bne.w	c946 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x304>
    c76e:	e7ff      	b.n	c770 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x12e>
    c770:	9804      	ldr	r0, [sp, #16]
    c772:	b2c1      	uxtb	r1, r0
    c774:	2205      	movs	r2, #5
    c776:	fba1 1202 	umull	r1, r2, r1, r2
    c77a:	0a0b      	lsrs	r3, r1, #8
    c77c:	f04f 0c00 	mov.w	ip, #0
    c780:	ebbc 2f11 	cmp.w	ip, r1, lsr #8
    c784:	bf18      	it	ne
    c786:	2301      	movne	r3, #1
    c788:	2a00      	cmp	r2, #0
    c78a:	bf18      	it	ne
    c78c:	2201      	movne	r2, #1
    c78e:	ea42 0203 	orr.w	r2, r2, r3
    c792:	2a00      	cmp	r2, #0
    c794:	9103      	str	r1, [sp, #12]
    c796:	f040 80e2 	bne.w	c95e <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x31c>
    c79a:	e7ff      	b.n	c79c <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x15a>
    c79c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c79e:	b2c1      	uxtb	r1, r0
    c7a0:	9a03      	ldr	r2, [sp, #12]
    c7a2:	fa51 f182 	uxtab	r1, r1, r2
    c7a6:	b2cb      	uxtb	r3, r1
    c7a8:	468c      	mov	ip, r1
    c7aa:	428b      	cmp	r3, r1
    c7ac:	f8cd c008 	str.w	ip, [sp, #8]
    c7b0:	f040 80e1 	bne.w	c976 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x334>
    c7b4:	e7ff      	b.n	c7b6 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x174>
    c7b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c7ba:	9902      	ldr	r1, [sp, #8]
    c7bc:	fa50 f081 	uxtab	r0, r0, r1
    c7c0:	b2c2      	uxtb	r2, r0
    c7c2:	4603      	mov	r3, r0
    c7c4:	4282      	cmp	r2, r0
    c7c6:	9301      	str	r3, [sp, #4]
    c7c8:	f040 80e1 	bne.w	c98e <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x34c>
    c7cc:	e7ff      	b.n	c7ce <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x18c>
    c7ce:	9801      	ldr	r0, [sp, #4]
    c7d0:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
        assert!(left < 240 && top < 240 && right < 240 && bottom < 240, "overflow");
    c7d4:	990c      	ldr	r1, [sp, #48]	; 0x30
    c7d6:	b2ca      	uxtb	r2, r1
    c7d8:	2af0      	cmp	r2, #240	; 0xf0
    c7da:	d32e      	bcc.n	c83a <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1f8>
    c7dc:	e029      	b.n	c832 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1f0>
    c7de:	2001      	movs	r0, #1
    c7e0:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    c7e4:	e008      	b.n	c7f8 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1b6>
    c7e6:	2000      	movs	r0, #0
    c7e8:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    c7ec:	e004      	b.n	c7f8 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1b6>
    c7ee:	9801      	ldr	r0, [sp, #4]
    c7f0:	b2c1      	uxtb	r1, r0
    c7f2:	29f0      	cmp	r1, #240	; 0xf0
    c7f4:	d3f3      	bcc.n	c7de <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x19c>
    c7f6:	e7f6      	b.n	c7e6 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1a4>
    c7f8:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
    c7fc:	07c0      	lsls	r0, r0, #31
    c7fe:	2800      	cmp	r0, #0
    c800:	d035      	beq.n	c86e <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x22c>
    c802:	e025      	b.n	c850 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x20e>
    c804:	2001      	movs	r0, #1
    c806:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    c80a:	e008      	b.n	c81e <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1dc>
    c80c:	2000      	movs	r0, #0
    c80e:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    c812:	e004      	b.n	c81e <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1dc>
    c814:	9806      	ldr	r0, [sp, #24]
    c816:	b2c1      	uxtb	r1, r0
    c818:	29f0      	cmp	r1, #240	; 0xf0
    c81a:	d3f3      	bcc.n	c804 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1c2>
    c81c:	e7f6      	b.n	c80c <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1ca>
    c81e:	f89d 003e 	ldrb.w	r0, [sp, #62]	; 0x3e
    c822:	07c0      	lsls	r0, r0, #31
    c824:	2800      	cmp	r0, #0
    c826:	d1e2      	bne.n	c7ee <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1ac>
    c828:	e7dd      	b.n	c7e6 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1a4>
    c82a:	2001      	movs	r0, #1
    c82c:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    c830:	e008      	b.n	c844 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x202>
    c832:	2000      	movs	r0, #0
    c834:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    c838:	e004      	b.n	c844 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x202>
    c83a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c83c:	b2c1      	uxtb	r1, r0
    c83e:	29f0      	cmp	r1, #240	; 0xf0
    c840:	d3f3      	bcc.n	c82a <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1e8>
    c842:	e7f6      	b.n	c832 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1f0>
    c844:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
    c848:	07c0      	lsls	r0, r0, #31
    c84a:	2800      	cmp	r0, #0
    c84c:	d1e2      	bne.n	c814 <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1d2>
    c84e:	e7dd      	b.n	c80c <_ZN3app5chip813PixelIterator10get_window17h51c75e0ad9f5985dE+0x1ca>
        ( left, top, right, bottom )
    c850:	980c      	ldr	r0, [sp, #48]	; 0x30
    c852:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    c856:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c858:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
    c85c:	9a06      	ldr	r2, [sp, #24]
    c85e:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
    c862:	9b01      	ldr	r3, [sp, #4]
    c864:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
    }
    c868:	980e      	ldr	r0, [sp, #56]	; 0x38
    c86a:	b012      	add	sp, #72	; 0x48
    c86c:	bd80      	pop	{r7, pc}
        assert!(left < 240 && top < 240 && right < 240 && bottom < 240, "overflow");
    c86e:	f24f 105c 	movw	r0, #61788	; 0xf15c
    c872:	f2c0 0001 	movt	r0, #1
    c876:	f24f 22d8 	movw	r2, #62168	; 0xf2d8
    c87a:	f2c0 0201 	movt	r2, #1
    c87e:	2108      	movs	r1, #8
    c880:	f00b f8aa 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c884:	defe      	udf	#254	; 0xfe
        let left: u8 = self.block_left as u8 * PIXEL_WIDTH as u8;
    c886:	f24f 0090 	movw	r0, #61584	; 0xf090
    c88a:	f2c0 0001 	movt	r0, #1
    c88e:	f24f 2258 	movw	r2, #62040	; 0xf258
    c892:	f2c0 0201 	movt	r2, #1
    c896:	2121      	movs	r1, #33	; 0x21
    c898:	f00b f89e 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c89c:	defe      	udf	#254	; 0xfe
        let top: u8 = self.block_top as u8 * PIXEL_HEIGHT as u8; 
    c89e:	f24f 0090 	movw	r0, #61584	; 0xf090
    c8a2:	f2c0 0001 	movt	r0, #1
    c8a6:	f24f 2268 	movw	r2, #62056	; 0xf268
    c8aa:	f2c0 0201 	movt	r2, #1
    c8ae:	2121      	movs	r1, #33	; 0x21
    c8b0:	f00b f892 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c8b4:	defe      	udf	#254	; 0xfe
        let right: u8 = left + (self.block_right - self.block_left + 1) * PIXEL_WIDTH as u8 - 1;
    c8b6:	f24f 10b0 	movw	r0, #61872	; 0xf1b0
    c8ba:	f2c0 0001 	movt	r0, #1
    c8be:	f24f 2278 	movw	r2, #62072	; 0xf278
    c8c2:	f2c0 0201 	movt	r2, #1
    c8c6:	2121      	movs	r1, #33	; 0x21
    c8c8:	f00b f886 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c8cc:	defe      	udf	#254	; 0xfe
    c8ce:	f24f 00d0 	movw	r0, #61648	; 0xf0d0
    c8d2:	f2c0 0001 	movt	r0, #1
    c8d6:	f24f 2288 	movw	r2, #62088	; 0xf288
    c8da:	f2c0 0201 	movt	r2, #1
    c8de:	211c      	movs	r1, #28
    c8e0:	f00b f87a 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c8e4:	defe      	udf	#254	; 0xfe
    c8e6:	f24f 0090 	movw	r0, #61584	; 0xf090
    c8ea:	f2c0 0001 	movt	r0, #1
    c8ee:	f24f 2288 	movw	r2, #62088	; 0xf288
    c8f2:	f2c0 0201 	movt	r2, #1
    c8f6:	2121      	movs	r1, #33	; 0x21
    c8f8:	f00b f86e 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c8fc:	defe      	udf	#254	; 0xfe
    c8fe:	f24f 00d0 	movw	r0, #61648	; 0xf0d0
    c902:	f2c0 0001 	movt	r0, #1
    c906:	f24f 2298 	movw	r2, #62104	; 0xf298
    c90a:	f2c0 0201 	movt	r2, #1
    c90e:	211c      	movs	r1, #28
    c910:	f00b f862 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c914:	defe      	udf	#254	; 0xfe
    c916:	f24f 10b0 	movw	r0, #61872	; 0xf1b0
    c91a:	f2c0 0001 	movt	r0, #1
    c91e:	f24f 2298 	movw	r2, #62104	; 0xf298
    c922:	f2c0 0201 	movt	r2, #1
    c926:	2121      	movs	r1, #33	; 0x21
    c928:	f00b f856 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c92c:	defe      	udf	#254	; 0xfe
        let bottom: u8 = top + (self.block_bottom - self.block_top + 1) * PIXEL_HEIGHT as u8 - 1;
    c92e:	f24f 10b0 	movw	r0, #61872	; 0xf1b0
    c932:	f2c0 0001 	movt	r0, #1
    c936:	f24f 22a8 	movw	r2, #62120	; 0xf2a8
    c93a:	f2c0 0201 	movt	r2, #1
    c93e:	2121      	movs	r1, #33	; 0x21
    c940:	f00b f84a 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c944:	defe      	udf	#254	; 0xfe
    c946:	f24f 00d0 	movw	r0, #61648	; 0xf0d0
    c94a:	f2c0 0001 	movt	r0, #1
    c94e:	f24f 22b8 	movw	r2, #62136	; 0xf2b8
    c952:	f2c0 0201 	movt	r2, #1
    c956:	211c      	movs	r1, #28
    c958:	f00b f83e 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c95c:	defe      	udf	#254	; 0xfe
    c95e:	f24f 0090 	movw	r0, #61584	; 0xf090
    c962:	f2c0 0001 	movt	r0, #1
    c966:	f24f 22b8 	movw	r2, #62136	; 0xf2b8
    c96a:	f2c0 0201 	movt	r2, #1
    c96e:	2121      	movs	r1, #33	; 0x21
    c970:	f00b f832 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c974:	defe      	udf	#254	; 0xfe
    c976:	f24f 00d0 	movw	r0, #61648	; 0xf0d0
    c97a:	f2c0 0001 	movt	r0, #1
    c97e:	f24f 22c8 	movw	r2, #62152	; 0xf2c8
    c982:	f2c0 0201 	movt	r2, #1
    c986:	211c      	movs	r1, #28
    c988:	f00b f826 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c98c:	defe      	udf	#254	; 0xfe
    c98e:	f24f 10b0 	movw	r0, #61872	; 0xf1b0
    c992:	f2c0 0001 	movt	r0, #1
    c996:	f24f 22c8 	movw	r2, #62152	; 0xf2c8
    c99a:	f2c0 0201 	movt	r2, #1
    c99e:	2121      	movs	r1, #33	; 0x21
    c9a0:	f00b f81a 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c9a4:	defe      	udf	#254	; 0xfe

0000c9a6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE>:
impl Iterator for PixelIterator {
    /// This Iterator returns Physical Pixel colour words (16-bit)
    type Item = u16;

    /// Return the next Physical Pixel colour
    fn next(&mut self) -> Option<Self::Item> {
    c9a6:	b08c      	sub	sp, #48	; 0x30
    c9a8:	900a      	str	r0, [sp, #40]	; 0x28
        if self.y > self.block_bottom { return None; }  //  No more Physical Pixels
    c9aa:	7841      	ldrb	r1, [r0, #1]
    c9ac:	79c2      	ldrb	r2, [r0, #7]
    c9ae:	4291      	cmp	r1, r2
    c9b0:	9007      	str	r0, [sp, #28]
    c9b2:	d805      	bhi.n	c9c0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1a>
    c9b4:	e7ff      	b.n	c9b6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x10>

        if self.x >= SCREEN_WIDTH as u8 ||
    c9b6:	9807      	ldr	r0, [sp, #28]
    c9b8:	7801      	ldrb	r1, [r0, #0]
    c9ba:	293f      	cmp	r1, #63	; 0x3f
    c9bc:	d80a      	bhi.n	c9d4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x2e>
    c9be:	e011      	b.n	c9e4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x3e>
    c9c0:	2000      	movs	r0, #0
        if self.y > self.block_bottom { return None; }  //  No more Physical Pixels
    c9c2:	f8ad 0020 	strh.w	r0, [sp, #32]
    c9c6:	e7ff      	b.n	c9c8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x22>
                }
            }
        }
        //  Return the Physical Pixel color
        return Some(color);
    }
    c9c8:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    c9cc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
    c9d0:	b00c      	add	sp, #48	; 0x30
    c9d2:	4770      	bx	lr
    c9d4:	2001      	movs	r0, #1
        if self.x >= SCREEN_WIDTH as u8 ||
    c9d6:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    c9da:	e008      	b.n	c9ee <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x48>
    c9dc:	2000      	movs	r0, #0
    c9de:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    c9e2:	e004      	b.n	c9ee <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x48>
            self.y >= SCREEN_HEIGHT as u8 { cortex_m::asm::bkpt(); }
    c9e4:	9807      	ldr	r0, [sp, #28]
    c9e6:	7841      	ldrb	r1, [r0, #1]
        if self.x >= SCREEN_WIDTH as u8 ||
    c9e8:	291f      	cmp	r1, #31
    c9ea:	d8f3      	bhi.n	c9d4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x2e>
    c9ec:	e7f6      	b.n	c9dc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x36>
    c9ee:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    c9f2:	07c0      	lsls	r0, r0, #31
    c9f4:	2800      	cmp	r0, #0
    c9f6:	d003      	beq.n	ca00 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x5a>
    c9f8:	e7ff      	b.n	c9fa <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x54>
    c9fa:	be00      	bkpt	0x0000
            self.y >= SCREEN_HEIGHT as u8 { cortex_m::asm::bkpt(); }
    c9fc:	e7ff      	b.n	c9fe <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x58>
        if self.x >= SCREEN_WIDTH as u8 ||
    c9fe:	e7ff      	b.n	ca00 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x5a>
        assert!(self.x < SCREEN_WIDTH as u8, "x overflow");
    ca00:	9807      	ldr	r0, [sp, #28]
    ca02:	7801      	ldrb	r1, [r0, #0]
    ca04:	293f      	cmp	r1, #63	; 0x3f
    ca06:	d805      	bhi.n	ca14 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x6e>
    ca08:	e7ff      	b.n	ca0a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x64>
        assert!(self.y < SCREEN_HEIGHT as u8, "y overflow");
    ca0a:	9807      	ldr	r0, [sp, #28]
    ca0c:	7841      	ldrb	r1, [r0, #1]
    ca0e:	291f      	cmp	r1, #31
    ca10:	d816      	bhi.n	ca40 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x9a>
    ca12:	e00b      	b.n	ca2c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x86>
        assert!(self.x < SCREEN_WIDTH as u8, "x overflow");
    ca14:	f24f 003c 	movw	r0, #61500	; 0xf03c
    ca18:	f2c0 0001 	movt	r0, #1
    ca1c:	f24f 22e8 	movw	r2, #62184	; 0xf2e8
    ca20:	f2c0 0201 	movt	r2, #1
    ca24:	210a      	movs	r1, #10
    ca26:	f00a ffd7 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ca2a:	defe      	udf	#254	; 0xfe
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    ca2c:	9807      	ldr	r0, [sp, #28]
    ca2e:	7801      	ldrb	r1, [r0, #0]
    ca30:	7842      	ldrb	r2, [r0, #1]
    ca32:	0192      	lsls	r2, r2, #6
    ca34:	2300      	movs	r3, #0
    ca36:	2b00      	cmp	r3, #0
    ca38:	9106      	str	r1, [sp, #24]
    ca3a:	9205      	str	r2, [sp, #20]
    ca3c:	d17b      	bne.n	cb36 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x190>
    ca3e:	e00b      	b.n	ca58 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xb2>
        assert!(self.y < SCREEN_HEIGHT as u8, "y overflow");
    ca40:	f24f 0058 	movw	r0, #61528	; 0xf058
    ca44:	f2c0 0001 	movt	r0, #1
    ca48:	f24f 22f8 	movw	r2, #62200	; 0xf2f8
    ca4c:	f2c0 0201 	movt	r2, #1
    ca50:	210a      	movs	r1, #10
    ca52:	f00a ffc1 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ca56:	defe      	udf	#254	; 0xfe
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    ca58:	9806      	ldr	r0, [sp, #24]
    ca5a:	9905      	ldr	r1, [sp, #20]
    ca5c:	1842      	adds	r2, r0, r1
    ca5e:	4613      	mov	r3, r2
    ca60:	4282      	cmp	r2, r0
    ca62:	9304      	str	r3, [sp, #16]
    ca64:	d373      	bcc.n	cb4e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1a8>
    ca66:	e7ff      	b.n	ca68 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xc2>
    ca68:	9804      	ldr	r0, [sp, #16]
    ca6a:	900b      	str	r0, [sp, #44]	; 0x2c
    ca6c:	2100      	movs	r1, #0
            if SCREEN_BUFFER[i] >= 128 { 0xffff } else { 0x0 }
    ca6e:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    ca72:	d178      	bne.n	cb66 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1c0>
    ca74:	e7ff      	b.n	ca76 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xd0>
    ca76:	f244 2068 	movw	r0, #17000	; 0x4268
    ca7a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ca7e:	9904      	ldr	r1, [sp, #16]
    ca80:	5640      	ldrsb	r0, [r0, r1]
    ca82:	2800      	cmp	r0, #0
    ca84:	d404      	bmi.n	ca90 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xea>
    ca86:	e7ff      	b.n	ca88 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xe2>
    ca88:	2000      	movs	r0, #0
    ca8a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    ca8e:	e004      	b.n	ca9a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xf4>
    ca90:	f64f 70ff 	movw	r0, #65535	; 0xffff
    ca94:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    ca98:	e7ff      	b.n	ca9a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0xf4>
        self.x_offset += 1;
    ca9a:	9807      	ldr	r0, [sp, #28]
    ca9c:	7881      	ldrb	r1, [r0, #2]
    ca9e:	3101      	adds	r1, #1
    caa0:	b2ca      	uxtb	r2, r1
    caa2:	460b      	mov	r3, r1
    caa4:	428a      	cmp	r2, r1
    caa6:	9303      	str	r3, [sp, #12]
    caa8:	d167      	bne.n	cb7a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1d4>
    caaa:	e7ff      	b.n	caac <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x106>
    caac:	9803      	ldr	r0, [sp, #12]
    caae:	9907      	ldr	r1, [sp, #28]
    cab0:	7088      	strb	r0, [r1, #2]
        if self.x_offset >= PIXEL_WIDTH as u8 {
    cab2:	788a      	ldrb	r2, [r1, #2]
    cab4:	2a03      	cmp	r2, #3
    cab6:	d336      	bcc.n	cb26 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x180>
    cab8:	e7ff      	b.n	caba <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x114>
    caba:	2000      	movs	r0, #0
            self.x_offset = 0;
    cabc:	9907      	ldr	r1, [sp, #28]
    cabe:	7088      	strb	r0, [r1, #2]
            self.x += 1;
    cac0:	7808      	ldrb	r0, [r1, #0]
    cac2:	3001      	adds	r0, #1
    cac4:	b2c2      	uxtb	r2, r0
    cac6:	4603      	mov	r3, r0
    cac8:	4282      	cmp	r2, r0
    caca:	9302      	str	r3, [sp, #8]
    cacc:	d161      	bne.n	cb92 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x1ec>
    cace:	e7ff      	b.n	cad0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x12a>
    cad0:	9802      	ldr	r0, [sp, #8]
    cad2:	9907      	ldr	r1, [sp, #28]
    cad4:	7008      	strb	r0, [r1, #0]
            if self.x > self.block_right {
    cad6:	780a      	ldrb	r2, [r1, #0]
    cad8:	794b      	ldrb	r3, [r1, #5]
    cada:	429a      	cmp	r2, r3
    cadc:	d922      	bls.n	cb24 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x17e>
    cade:	e7ff      	b.n	cae0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x13a>
                self.x = self.block_left;
    cae0:	9807      	ldr	r0, [sp, #28]
    cae2:	7901      	ldrb	r1, [r0, #4]
    cae4:	7001      	strb	r1, [r0, #0]
                self.y_offset += 1;
    cae6:	78c1      	ldrb	r1, [r0, #3]
    cae8:	3101      	adds	r1, #1
    caea:	b2ca      	uxtb	r2, r1
    caec:	460b      	mov	r3, r1
    caee:	428a      	cmp	r2, r1
    caf0:	9301      	str	r3, [sp, #4]
    caf2:	d15a      	bne.n	cbaa <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x204>
    caf4:	e7ff      	b.n	caf6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x150>
    caf6:	9801      	ldr	r0, [sp, #4]
    caf8:	9907      	ldr	r1, [sp, #28]
    cafa:	70c8      	strb	r0, [r1, #3]
                if self.y_offset >= PIXEL_HEIGHT as u8 {
    cafc:	78ca      	ldrb	r2, [r1, #3]
    cafe:	2a05      	cmp	r2, #5
    cb00:	d30f      	bcc.n	cb22 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x17c>
    cb02:	e7ff      	b.n	cb04 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x15e>
    cb04:	2000      	movs	r0, #0
                    self.y_offset = 0;
    cb06:	9907      	ldr	r1, [sp, #28]
    cb08:	70c8      	strb	r0, [r1, #3]
                    self.y += 1;
    cb0a:	7848      	ldrb	r0, [r1, #1]
    cb0c:	3001      	adds	r0, #1
    cb0e:	b2c2      	uxtb	r2, r0
    cb10:	4603      	mov	r3, r0
    cb12:	4282      	cmp	r2, r0
    cb14:	9300      	str	r3, [sp, #0]
    cb16:	d154      	bne.n	cbc2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x21c>
    cb18:	e7ff      	b.n	cb1a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x174>
    cb1a:	9800      	ldr	r0, [sp, #0]
    cb1c:	9907      	ldr	r1, [sp, #28]
    cb1e:	7048      	strb	r0, [r1, #1]
                if self.y_offset >= PIXEL_HEIGHT as u8 {
    cb20:	e7ff      	b.n	cb22 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x17c>
            if self.x > self.block_right {
    cb22:	e7ff      	b.n	cb24 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x17e>
        if self.x_offset >= PIXEL_WIDTH as u8 {
    cb24:	e7ff      	b.n	cb26 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x180>
        return Some(color);
    cb26:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
    cb2a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
    cb2e:	2001      	movs	r0, #1
    cb30:	f8ad 0020 	strh.w	r0, [sp, #32]
    cb34:	e748      	b.n	c9c8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE+0x22>
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    cb36:	f24f 0090 	movw	r0, #61584	; 0xf090
    cb3a:	f2c0 0001 	movt	r0, #1
    cb3e:	f24f 3208 	movw	r2, #62216	; 0xf308
    cb42:	f2c0 0201 	movt	r2, #1
    cb46:	2121      	movs	r1, #33	; 0x21
    cb48:	f00a ff46 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cb4c:	defe      	udf	#254	; 0xfe
    cb4e:	f24f 00d0 	movw	r0, #61648	; 0xf0d0
    cb52:	f2c0 0001 	movt	r0, #1
    cb56:	f24f 3218 	movw	r2, #62232	; 0xf318
    cb5a:	f2c0 0201 	movt	r2, #1
    cb5e:	211c      	movs	r1, #28
    cb60:	f00a ff3a 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cb64:	defe      	udf	#254	; 0xfe
            if SCREEN_BUFFER[i] >= 128 { 0xffff } else { 0x0 }
    cb66:	f24f 3028 	movw	r0, #62248	; 0xf328
    cb6a:	f2c0 0001 	movt	r0, #1
    cb6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    cb72:	9904      	ldr	r1, [sp, #16]
    cb74:	f00a ff46 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    cb78:	defe      	udf	#254	; 0xfe
        self.x_offset += 1;
    cb7a:	f24f 00d0 	movw	r0, #61648	; 0xf0d0
    cb7e:	f2c0 0001 	movt	r0, #1
    cb82:	f24f 3238 	movw	r2, #62264	; 0xf338
    cb86:	f2c0 0201 	movt	r2, #1
    cb8a:	211c      	movs	r1, #28
    cb8c:	f00a ff24 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cb90:	defe      	udf	#254	; 0xfe
            self.x += 1;
    cb92:	f24f 00d0 	movw	r0, #61648	; 0xf0d0
    cb96:	f2c0 0001 	movt	r0, #1
    cb9a:	f24f 3248 	movw	r2, #62280	; 0xf348
    cb9e:	f2c0 0201 	movt	r2, #1
    cba2:	211c      	movs	r1, #28
    cba4:	f00a ff18 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cba8:	defe      	udf	#254	; 0xfe
                self.y_offset += 1;
    cbaa:	f24f 00d0 	movw	r0, #61648	; 0xf0d0
    cbae:	f2c0 0001 	movt	r0, #1
    cbb2:	f24f 3258 	movw	r2, #62296	; 0xf358
    cbb6:	f2c0 0201 	movt	r2, #1
    cbba:	211c      	movs	r1, #28
    cbbc:	f00a ff0c 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cbc0:	defe      	udf	#254	; 0xfe
                    self.y += 1;
    cbc2:	f24f 00d0 	movw	r0, #61648	; 0xf0d0
    cbc6:	f2c0 0001 	movt	r0, #1
    cbca:	f24f 3268 	movw	r2, #62312	; 0xf368
    cbce:	f2c0 0201 	movt	r2, #1
    cbd2:	211c      	movs	r1, #28
    cbd4:	f00a ff00 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    cbd8:	defe      	udf	#254	; 0xfe

0000cbda <_ZN3app5chip812handle_touch17habca32c74e5cefadE>:
}

pub fn handle_touch(_x: u16, _y: u16) { 
    cbda:	b580      	push	{r7, lr}
    cbdc:	b084      	sub	sp, #16
    cbde:	460a      	mov	r2, r1
    cbe0:	4603      	mov	r3, r0
    cbe2:	f8ad 000c 	strh.w	r0, [sp, #12]
    cbe6:	f8ad 100e 	strh.w	r1, [sp, #14]
    console::print("CHIP8 touch not handled\n"); console::flush(); 
    cbea:	f24f 3078 	movw	r0, #62328	; 0xf378
    cbee:	f2c0 0001 	movt	r0, #1
    cbf2:	2118      	movs	r1, #24
    cbf4:	9202      	str	r2, [sp, #8]
    cbf6:	9301      	str	r3, [sp, #4]
    cbf8:	f7fc f9fa 	bl	8ff0 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    cbfc:	e7ff      	b.n	cbfe <_ZN3app5chip812handle_touch17habca32c74e5cefadE+0x24>
    cbfe:	f7fc fa3d 	bl	907c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    cc02:	e7ff      	b.n	cc04 <_ZN3app5chip812handle_touch17habca32c74e5cefadE+0x2a>
}
    cc04:	b004      	add	sp, #16
    cc06:	bd80      	pop	{r7, pc}

0000cc08 <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E>:
    cc08:	b580      	push	{r7, lr}
    cc0a:	b08a      	sub	sp, #40	; 0x28
    cc0c:	9104      	str	r1, [sp, #16]
    cc0e:	9205      	str	r2, [sp, #20]
    cc10:	9308      	str	r3, [sp, #32]
    cc12:	2100      	movs	r1, #0
    cc14:	f88d 101e 	strb.w	r1, [sp, #30]
    cc18:	f88d 101f 	strb.w	r1, [sp, #31]
    cc1c:	2101      	movs	r1, #1
    cc1e:	f88d 101f 	strb.w	r1, [sp, #31]
    cc22:	f88d 101e 	strb.w	r1, [sp, #30]
    cc26:	9904      	ldr	r1, [sp, #16]
    cc28:	2900      	cmp	r1, #0
    cc2a:	9303      	str	r3, [sp, #12]
    cc2c:	9002      	str	r0, [sp, #8]
    cc2e:	d001      	beq.n	cc34 <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x2c>
    cc30:	e7ff      	b.n	cc32 <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x2a>
    cc32:	e004      	b.n	cc3e <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x36>
    cc34:	2000      	movs	r0, #0
    cc36:	9902      	ldr	r1, [sp, #8]
    cc38:	6008      	str	r0, [r1, #0]
    cc3a:	e01f      	b.n	cc7c <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x74>
    cc3c:	defe      	udf	#254	; 0xfe
    cc3e:	2000      	movs	r0, #0
    cc40:	f88d 001f 	strb.w	r0, [sp, #31]
    cc44:	9905      	ldr	r1, [sp, #20]
    cc46:	9109      	str	r1, [sp, #36]	; 0x24
    cc48:	f88d 001e 	strb.w	r0, [sp, #30]
    cc4c:	9106      	str	r1, [sp, #24]
    cc4e:	9906      	ldr	r1, [sp, #24]
    cc50:	9803      	ldr	r0, [sp, #12]
    cc52:	f000 fa62 	bl	d11a <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf3cc102ec961f44aE>
    cc56:	9001      	str	r0, [sp, #4]
    cc58:	9100      	str	r1, [sp, #0]
    cc5a:	e7ff      	b.n	cc5c <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x54>
    cc5c:	9801      	ldr	r0, [sp, #4]
    cc5e:	9902      	ldr	r1, [sp, #8]
    cc60:	6048      	str	r0, [r1, #4]
    cc62:	9a00      	ldr	r2, [sp, #0]
    cc64:	608a      	str	r2, [r1, #8]
    cc66:	2301      	movs	r3, #1
    cc68:	600b      	str	r3, [r1, #0]
    cc6a:	e007      	b.n	cc7c <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x74>
    cc6c:	9804      	ldr	r0, [sp, #16]
    cc6e:	2801      	cmp	r0, #1
    cc70:	d00c      	beq.n	cc8c <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x84>
    cc72:	e015      	b.n	cca0 <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x98>
    cc74:	2000      	movs	r0, #0
    cc76:	f88d 001e 	strb.w	r0, [sp, #30]
    cc7a:	e7f7      	b.n	cc6c <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x64>
    cc7c:	f89d 001e 	ldrb.w	r0, [sp, #30]
    cc80:	07c0      	lsls	r0, r0, #31
    cc82:	2800      	cmp	r0, #0
    cc84:	d1f6      	bne.n	cc74 <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x6c>
    cc86:	e7f1      	b.n	cc6c <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x64>
    cc88:	b00a      	add	sp, #40	; 0x28
    cc8a:	bd80      	pop	{r7, pc}
    cc8c:	f89d 001f 	ldrb.w	r0, [sp, #31]
    cc90:	07c0      	lsls	r0, r0, #31
    cc92:	2800      	cmp	r0, #0
    cc94:	d0f8      	beq.n	cc88 <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x80>
    cc96:	e7ff      	b.n	cc98 <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x90>
    cc98:	2000      	movs	r0, #0
    cc9a:	f88d 001f 	strb.w	r0, [sp, #31]
    cc9e:	e7f3      	b.n	cc88 <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x80>
    cca0:	e7f2      	b.n	cc88 <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E+0x80>

0000cca2 <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E>:
    cca2:	b580      	push	{r7, lr}
    cca4:	b08c      	sub	sp, #48	; 0x30
    cca6:	9103      	str	r1, [sp, #12]
    cca8:	9204      	str	r2, [sp, #16]
    ccaa:	930a      	str	r3, [sp, #40]	; 0x28
    ccac:	2100      	movs	r1, #0
    ccae:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    ccb2:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    ccb6:	2101      	movs	r1, #1
    ccb8:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    ccbc:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    ccc0:	9903      	ldr	r1, [sp, #12]
    ccc2:	2900      	cmp	r1, #0
    ccc4:	9302      	str	r3, [sp, #8]
    ccc6:	9001      	str	r0, [sp, #4]
    ccc8:	d001      	beq.n	ccce <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x2c>
    ccca:	e7ff      	b.n	cccc <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x2a>
    cccc:	e004      	b.n	ccd8 <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x36>
    ccce:	2000      	movs	r0, #0
    ccd0:	9901      	ldr	r1, [sp, #4]
    ccd2:	6008      	str	r0, [r1, #0]
    ccd4:	e020      	b.n	cd18 <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x76>
    ccd6:	defe      	udf	#254	; 0xfe
    ccd8:	2000      	movs	r0, #0
    ccda:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    ccde:	9904      	ldr	r1, [sp, #16]
    cce0:	910b      	str	r1, [sp, #44]	; 0x2c
    cce2:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    cce6:	9108      	str	r1, [sp, #32]
    cce8:	9a08      	ldr	r2, [sp, #32]
    ccea:	a805      	add	r0, sp, #20
    ccec:	9902      	ldr	r1, [sp, #8]
    ccee:	f000 fa0a 	bl	d106 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h7785b67405c5f47aE>
    ccf2:	e7ff      	b.n	ccf4 <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x52>
    ccf4:	9805      	ldr	r0, [sp, #20]
    ccf6:	9906      	ldr	r1, [sp, #24]
    ccf8:	9a07      	ldr	r2, [sp, #28]
    ccfa:	9b01      	ldr	r3, [sp, #4]
    ccfc:	60da      	str	r2, [r3, #12]
    ccfe:	6099      	str	r1, [r3, #8]
    cd00:	6058      	str	r0, [r3, #4]
    cd02:	2001      	movs	r0, #1
    cd04:	6018      	str	r0, [r3, #0]
    cd06:	e007      	b.n	cd18 <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x76>
    cd08:	9803      	ldr	r0, [sp, #12]
    cd0a:	2801      	cmp	r0, #1
    cd0c:	d00c      	beq.n	cd28 <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x86>
    cd0e:	e015      	b.n	cd3c <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x9a>
    cd10:	2000      	movs	r0, #0
    cd12:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    cd16:	e7f7      	b.n	cd08 <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x66>
    cd18:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    cd1c:	07c0      	lsls	r0, r0, #31
    cd1e:	2800      	cmp	r0, #0
    cd20:	d1f6      	bne.n	cd10 <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x6e>
    cd22:	e7f1      	b.n	cd08 <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x66>
    cd24:	b00c      	add	sp, #48	; 0x30
    cd26:	bd80      	pop	{r7, pc}
    cd28:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    cd2c:	07c0      	lsls	r0, r0, #31
    cd2e:	2800      	cmp	r0, #0
    cd30:	d0f8      	beq.n	cd24 <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x82>
    cd32:	e7ff      	b.n	cd34 <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x92>
    cd34:	2000      	movs	r0, #0
    cd36:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    cd3a:	e7f3      	b.n	cd24 <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x82>
    cd3c:	e7f2      	b.n	cd24 <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E+0x82>

0000cd3e <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE>:
    cd3e:	b085      	sub	sp, #20
    cd40:	9000      	str	r0, [sp, #0]
    cd42:	2000      	movs	r0, #0
    cd44:	f88d 000b 	strb.w	r0, [sp, #11]
    cd48:	f88d 000a 	strb.w	r0, [sp, #10]
    cd4c:	2001      	movs	r0, #1
    cd4e:	f88d 000b 	strb.w	r0, [sp, #11]
    cd52:	f88d 000a 	strb.w	r0, [sp, #10]
    cd56:	9800      	ldr	r0, [sp, #0]
    cd58:	2800      	cmp	r0, #0
    cd5a:	4601      	mov	r1, r0
    cd5c:	bf18      	it	ne
    cd5e:	2101      	movne	r1, #1
    cd60:	2800      	cmp	r0, #0
    cd62:	d001      	beq.n	cd68 <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x2a>
    cd64:	e7ff      	b.n	cd66 <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x28>
    cd66:	e005      	b.n	cd74 <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x36>
    cd68:	2000      	movs	r0, #0
    cd6a:	f88d 000a 	strb.w	r0, [sp, #10]
    cd6e:	9001      	str	r0, [sp, #4]
    cd70:	e007      	b.n	cd82 <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x44>
    cd72:	defe      	udf	#254	; 0xfe
    cd74:	2000      	movs	r0, #0
    cd76:	f88d 000b 	strb.w	r0, [sp, #11]
    cd7a:	9800      	ldr	r0, [sp, #0]
    cd7c:	9004      	str	r0, [sp, #16]
    cd7e:	9001      	str	r0, [sp, #4]
    cd80:	e7ff      	b.n	cd82 <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x44>
    cd82:	f89d 000a 	ldrb.w	r0, [sp, #10]
    cd86:	07c0      	lsls	r0, r0, #31
    cd88:	2800      	cmp	r0, #0
    cd8a:	d104      	bne.n	cd96 <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x58>
    cd8c:	e7ff      	b.n	cd8e <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x50>
    cd8e:	9800      	ldr	r0, [sp, #0]
    cd90:	2800      	cmp	r0, #0
    cd92:	d107      	bne.n	cda4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x66>
    cd94:	e010      	b.n	cdb8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x7a>
    cd96:	2000      	movs	r0, #0
    cd98:	f88d 000a 	strb.w	r0, [sp, #10]
    cd9c:	e7f7      	b.n	cd8e <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x50>
    cd9e:	9801      	ldr	r0, [sp, #4]
    cda0:	b005      	add	sp, #20
    cda2:	4770      	bx	lr
    cda4:	f89d 000b 	ldrb.w	r0, [sp, #11]
    cda8:	07c0      	lsls	r0, r0, #31
    cdaa:	2800      	cmp	r0, #0
    cdac:	d0f7      	beq.n	cd9e <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x60>
    cdae:	e7ff      	b.n	cdb0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x72>
    cdb0:	2000      	movs	r0, #0
    cdb2:	f88d 000b 	strb.w	r0, [sp, #11]
    cdb6:	e7f2      	b.n	cd9e <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x60>
    cdb8:	e7f1      	b.n	cd9e <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE+0x60>

0000cdba <_ZN4core6option15Option$LT$T$GT$6as_mut17h781416273935c5a0E>:
    cdba:	b084      	sub	sp, #16
    cdbc:	9002      	str	r0, [sp, #8]
    cdbe:	6801      	ldr	r1, [r0, #0]
    cdc0:	2900      	cmp	r1, #0
    cdc2:	9000      	str	r0, [sp, #0]
    cdc4:	d001      	beq.n	cdca <_ZN4core6option15Option$LT$T$GT$6as_mut17h781416273935c5a0E+0x10>
    cdc6:	e7ff      	b.n	cdc8 <_ZN4core6option15Option$LT$T$GT$6as_mut17h781416273935c5a0E+0xe>
    cdc8:	e003      	b.n	cdd2 <_ZN4core6option15Option$LT$T$GT$6as_mut17h781416273935c5a0E+0x18>
    cdca:	2000      	movs	r0, #0
    cdcc:	9001      	str	r0, [sp, #4]
    cdce:	e005      	b.n	cddc <_ZN4core6option15Option$LT$T$GT$6as_mut17h781416273935c5a0E+0x22>
    cdd0:	defe      	udf	#254	; 0xfe
    cdd2:	9800      	ldr	r0, [sp, #0]
    cdd4:	1d01      	adds	r1, r0, #4
    cdd6:	9103      	str	r1, [sp, #12]
    cdd8:	9101      	str	r1, [sp, #4]
    cdda:	e7ff      	b.n	cddc <_ZN4core6option15Option$LT$T$GT$6as_mut17h781416273935c5a0E+0x22>
    cddc:	9801      	ldr	r0, [sp, #4]
    cdde:	b004      	add	sp, #16
    cde0:	4770      	bx	lr

0000cde2 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E>:
    cde2:	b084      	sub	sp, #16
    cde4:	9002      	str	r0, [sp, #8]
    cde6:	9802      	ldr	r0, [sp, #8]
    cde8:	2800      	cmp	r0, #0
    cdea:	4602      	mov	r2, r0
    cdec:	bf18      	it	ne
    cdee:	2201      	movne	r2, #1
    cdf0:	2800      	cmp	r0, #0
    cdf2:	9101      	str	r1, [sp, #4]
    cdf4:	d001      	beq.n	cdfa <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x18>
    cdf6:	e7ff      	b.n	cdf8 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x16>
    cdf8:	e009      	b.n	ce0e <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x2c>
    cdfa:	f24f 3090 	movw	r0, #62352	; 0xf390
    cdfe:	f2c0 0001 	movt	r0, #1
    ce02:	212b      	movs	r1, #43	; 0x2b
    ce04:	9a01      	ldr	r2, [sp, #4]
    ce06:	f00a fde7 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ce0a:	defe      	udf	#254	; 0xfe
    ce0c:	defe      	udf	#254	; 0xfe
    ce0e:	9802      	ldr	r0, [sp, #8]
    ce10:	9003      	str	r0, [sp, #12]
    ce12:	9902      	ldr	r1, [sp, #8]
    ce14:	2900      	cmp	r1, #0
    ce16:	9000      	str	r0, [sp, #0]
    ce18:	d003      	beq.n	ce22 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x40>
    ce1a:	e7ff      	b.n	ce1c <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x3a>
    ce1c:	9800      	ldr	r0, [sp, #0]
    ce1e:	b004      	add	sp, #16
    ce20:	4770      	bx	lr
    ce22:	e7fb      	b.n	ce1c <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x3a>

0000ce24 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E>:
    ce24:	b081      	sub	sp, #4
    ce26:	2100      	movs	r1, #0
    ce28:	6001      	str	r1, [r0, #0]
    ce2a:	b001      	add	sp, #4
    ce2c:	4770      	bx	lr

0000ce2e <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h01a214062ce56537E>:
    ce2e:	b580      	push	{r7, lr}
    ce30:	b082      	sub	sp, #8
    ce32:	9001      	str	r0, [sp, #4]
    ce34:	f7ff ff83 	bl	cd3e <_ZN4core6option15Option$LT$T$GT$5ok_or17h347e8e45ab45478bE>
    ce38:	9000      	str	r0, [sp, #0]
    ce3a:	e7ff      	b.n	ce3c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h01a214062ce56537E+0xe>
    ce3c:	9800      	ldr	r0, [sp, #0]
    ce3e:	b002      	add	sp, #8
    ce40:	bd80      	pop	{r7, pc}

0000ce42 <_ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E>:
        item
    ).expect("draw blocks fail");
}

/// Draw the pixel colours to the display at the window from (sx,sy) to (ex,ey)
pub fn set_display_pixels<P: IntoIterator<Item = u16>>(sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    ce42:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce44:	b08d      	sub	sp, #52	; 0x34
    ce46:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    ce4a:	469e      	mov	lr, r3
    ce4c:	4614      	mov	r4, r2
    ce4e:	460d      	mov	r5, r1
    ce50:	4606      	mov	r6, r0
    ce52:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    ce56:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    ce5a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    ce5e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    unsafe { DISPLAY.set_pixels(sx, sy, ex, ey, colors) }
    ce62:	466f      	mov	r7, sp
    ce64:	f8c7 c004 	str.w	ip, [r7, #4]
    ce68:	603b      	str	r3, [r7, #0]
    ce6a:	f240 1348 	movw	r3, #328	; 0x148
    ce6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ce72:	900a      	str	r0, [sp, #40]	; 0x28
    ce74:	4618      	mov	r0, r3
    ce76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ce78:	9109      	str	r1, [sp, #36]	; 0x24
    ce7a:	4619      	mov	r1, r3
    ce7c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    ce80:	9208      	str	r2, [sp, #32]
    ce82:	4662      	mov	r2, ip
    ce84:	9b08      	ldr	r3, [sp, #32]
    ce86:	f8cd e01c 	str.w	lr, [sp, #28]
    ce8a:	9406      	str	r4, [sp, #24]
    ce8c:	9505      	str	r5, [sp, #20]
    ce8e:	9604      	str	r6, [sp, #16]
    ce90:	f000 f807 	bl	cea2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E>
    ce94:	9003      	str	r0, [sp, #12]
    ce96:	e7ff      	b.n	ce98 <_ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E+0x56>
}
    ce98:	9803      	ldr	r0, [sp, #12]
    ce9a:	f000 0001 	and.w	r0, r0, #1
    ce9e:	b00d      	add	sp, #52	; 0x34
    cea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000cea2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E>:
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    cea2:	b5f0      	push	{r4, r5, r6, r7, lr}
    cea4:	b091      	sub	sp, #68	; 0x44
    cea6:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
    ceaa:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
    ceae:	461c      	mov	r4, r3
    ceb0:	4615      	mov	r5, r2
    ceb2:	460e      	mov	r6, r1
    ceb4:	900a      	str	r0, [sp, #40]	; 0x28
    ceb6:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
    ceba:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
    cebe:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    cec2:	f8ad e032 	strh.w	lr, [sp, #50]	; 0x32
    cec6:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
    cec8:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
    cecc:	2701      	movs	r7, #1
    cece:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
    ced2:	466f      	mov	r7, sp
    ced4:	f8c7 e000 	str.w	lr, [r7]
    ced8:	9008      	str	r0, [sp, #32]
    ceda:	f8cd c01c 	str.w	ip, [sp, #28]
    cede:	9406      	str	r4, [sp, #24]
    cee0:	9505      	str	r5, [sp, #20]
    cee2:	9604      	str	r6, [sp, #16]
    cee4:	f7fc feee 	bl	9cc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
    cee8:	9003      	str	r0, [sp, #12]
    ceea:	e7ff      	b.n	ceec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x4a>
    ceec:	9803      	ldr	r0, [sp, #12]
    ceee:	f000 0001 	and.w	r0, r0, #1
    cef2:	f7fb fe3b 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    cef6:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    cefa:	e7ff      	b.n	cefc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x5a>
    cefc:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    cf00:	07c1      	lsls	r1, r0, #31
    cf02:	2900      	cmp	r1, #0
    cf04:	d001      	beq.n	cf0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x68>
    cf06:	e7ff      	b.n	cf08 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x66>
    cf08:	e009      	b.n	cf1e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x7c>
    cf0a:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
    cf0c:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    cf10:	9808      	ldr	r0, [sp, #32]
    cf12:	9907      	ldr	r1, [sp, #28]
    cf14:	f000 f848 	bl	cfa8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E>
    cf18:	9002      	str	r0, [sp, #8]
    cf1a:	e00d      	b.n	cf38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x96>
        self.set_address_window(sx, sy, ex, ey)?;
    cf1c:	defe      	udf	#254	; 0xfe
    cf1e:	f005 f95a 	bl	121d6 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    cf22:	e003      	b.n	cf2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x8a>
    }
    cf24:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    cf28:	b011      	add	sp, #68	; 0x44
    cf2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
    cf2c:	f008 fafc 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    cf30:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    cf34:	e7ff      	b.n	cf36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x94>
    cf36:	e031      	b.n	cf9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xfa>
        self.write_pixels(colors) ? ;
    cf38:	9802      	ldr	r0, [sp, #8]
    cf3a:	f000 0001 	and.w	r0, r0, #1
    cf3e:	f7fb fe15 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    cf42:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    cf46:	e7ff      	b.n	cf48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xa6>
    cf48:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    cf4c:	07c1      	lsls	r1, r0, #31
    cf4e:	2900      	cmp	r1, #0
    cf50:	d001      	beq.n	cf56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xb4>
    cf52:	e7ff      	b.n	cf54 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xb2>
    cf54:	e004      	b.n	cf60 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xbe>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    cf56:	f006 fb79 	bl	1364c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    cf5a:	9001      	str	r0, [sp, #4]
    cf5c:	e009      	b.n	cf72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xd0>
        self.write_pixels(colors) ? ;
    cf5e:	defe      	udf	#254	; 0xfe
    cf60:	f005 f939 	bl	121d6 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    cf64:	e7ff      	b.n	cf66 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xc4>
    cf66:	f008 fadf 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    cf6a:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    cf6e:	e7ff      	b.n	cf70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xce>
    cf70:	e014      	b.n	cf9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xfa>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    cf72:	f24f 31bb 	movw	r1, #62395	; 0xf3bb
    cf76:	f2c0 0101 	movt	r1, #1
    cf7a:	f24f 4318 	movw	r3, #62488	; 0xf418
    cf7e:	f2c0 0301 	movt	r3, #1
    cf82:	220e      	movs	r2, #14
    cf84:	9801      	ldr	r0, [sp, #4]
    cf86:	f7fb fdb8 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    cf8a:	e7ff      	b.n	cf8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xea>
    cf8c:	2000      	movs	r0, #0
        Ok(())
    cf8e:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    }
    cf92:	e7c7      	b.n	cf24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x82>
    cf94:	2000      	movs	r0, #0
    cf96:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    cf9a:	e7c3      	b.n	cf24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x82>
    cf9c:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    cfa0:	07c0      	lsls	r0, r0, #31
    cfa2:	2800      	cmp	r0, #0
    cfa4:	d1f6      	bne.n	cf94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xf2>
    cfa6:	e7bd      	b.n	cf24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x82>

0000cfa8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
    cfa8:	b580      	push	{r7, lr}
    cfaa:	b094      	sub	sp, #80	; 0x50
    cfac:	900d      	str	r0, [sp, #52]	; 0x34
    cfae:	910e      	str	r1, [sp, #56]	; 0x38
    cfb0:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
    cfb2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
    cfb6:	2301      	movs	r3, #1
    cfb8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    cfbc:	232c      	movs	r3, #44	; 0x2c
    cfbe:	f88d 301f 	strb.w	r3, [sp, #31]
    cfc2:	9209      	str	r2, [sp, #36]	; 0x24
    cfc4:	9208      	str	r2, [sp, #32]
    cfc6:	9208      	str	r2, [sp, #32]
    cfc8:	9a08      	ldr	r2, [sp, #32]
    cfca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cfcc:	f89d c01f 	ldrb.w	ip, [sp, #31]
    cfd0:	9006      	str	r0, [sp, #24]
    cfd2:	9105      	str	r1, [sp, #20]
    cfd4:	4661      	mov	r1, ip
    cfd6:	f7fc fd84 	bl	9ae2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    cfda:	9004      	str	r0, [sp, #16]
    cfdc:	e7ff      	b.n	cfde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x36>
    cfde:	9804      	ldr	r0, [sp, #16]
    cfe0:	f000 0001 	and.w	r0, r0, #1
    cfe4:	f7fb fdc2 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    cfe8:	f88d 001e 	strb.w	r0, [sp, #30]
    cfec:	e7ff      	b.n	cfee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x46>
    cfee:	f89d 001e 	ldrb.w	r0, [sp, #30]
    cff2:	07c1      	lsls	r1, r0, #31
    cff4:	2900      	cmp	r1, #0
    cff6:	d001      	beq.n	cffc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x54>
    cff8:	e7ff      	b.n	cffa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x52>
    cffa:	e008      	b.n	d00e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x66>
    cffc:	2000      	movs	r0, #0
        for color in colors {
    cffe:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    d002:	9805      	ldr	r0, [sp, #20]
    d004:	f000 f86e 	bl	d0e4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcdf096192109e52aE>
    d008:	9003      	str	r0, [sp, #12]
    d00a:	e00d      	b.n	d028 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x80>
        self.write_command(Instruction::RAMWR, None)?;
    d00c:	defe      	udf	#254	; 0xfe
    d00e:	f005 f8e2 	bl	121d6 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    d012:	e003      	b.n	d01c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x74>
    }
    d014:	f89d 001d 	ldrb.w	r0, [sp, #29]
    d018:	b014      	add	sp, #80	; 0x50
    d01a:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
    d01c:	f008 fa84 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    d020:	f88d 001d 	strb.w	r0, [sp, #29]
    d024:	e7ff      	b.n	d026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x7e>
    d026:	e057      	b.n	d0d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x130>
        for color in colors {
    d028:	9803      	ldr	r0, [sp, #12]
    d02a:	900a      	str	r0, [sp, #40]	; 0x28
    d02c:	e7ff      	b.n	d02e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x86>
    d02e:	a80a      	add	r0, sp, #40	; 0x28
    d030:	f000 f85c 	bl	d0ec <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE>
    d034:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    d038:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    d03c:	e7ff      	b.n	d03e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x96>
    d03e:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    d042:	4601      	mov	r1, r0
    d044:	2800      	cmp	r0, #0
    d046:	d001      	beq.n	d04c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xa4>
    d048:	e7ff      	b.n	d04a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xa2>
    d04a:	e001      	b.n	d050 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xa8>
        }
    d04c:	e02b      	b.n	d0a6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xfe>
        for color in colors {
    d04e:	defe      	udf	#254	; 0xfe
    d050:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
    d054:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    d058:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    d05c:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
            self.write_word(color)?;
    d060:	9906      	ldr	r1, [sp, #24]
    d062:	9002      	str	r0, [sp, #8]
    d064:	4608      	mov	r0, r1
    d066:	9902      	ldr	r1, [sp, #8]
    d068:	f7fc fc6c 	bl	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    d06c:	9001      	str	r0, [sp, #4]
    d06e:	e7ff      	b.n	d070 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xc8>
    d070:	9801      	ldr	r0, [sp, #4]
    d072:	f000 0001 	and.w	r0, r0, #1
    d076:	f7fb fd79 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    d07a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    d07e:	e7ff      	b.n	d080 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xd8>
    d080:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    d084:	07c1      	lsls	r1, r0, #31
    d086:	2900      	cmp	r1, #0
    d088:	d001      	beq.n	d08e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xe6>
    d08a:	e7ff      	b.n	d08c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xe4>
    d08c:	e001      	b.n	d092 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xea>
        for color in colors {
    d08e:	e7ce      	b.n	d02e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x86>
            self.write_word(color)?;
    d090:	defe      	udf	#254	; 0xfe
    d092:	f005 f8a0 	bl	121d6 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    d096:	e7ff      	b.n	d098 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xf0>
    d098:	f008 fa46 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    d09c:	f88d 001d 	strb.w	r0, [sp, #29]
    d0a0:	e7ff      	b.n	d0a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xfa>
        }
    d0a2:	e7ff      	b.n	d0a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xfc>
    }
    d0a4:	e018      	b.n	d0d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x130>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    d0a6:	f006 fad1 	bl	1364c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    d0aa:	9000      	str	r0, [sp, #0]
    d0ac:	e7ff      	b.n	d0ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x106>
    d0ae:	f24f 31bb 	movw	r1, #62395	; 0xf3bb
    d0b2:	f2c0 0101 	movt	r1, #1
    d0b6:	f24f 4328 	movw	r3, #62504	; 0xf428
    d0ba:	f2c0 0301 	movt	r3, #1
    d0be:	220e      	movs	r2, #14
    d0c0:	9800      	ldr	r0, [sp, #0]
    d0c2:	f7fb fd1a 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    d0c6:	e7ff      	b.n	d0c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x120>
    d0c8:	2000      	movs	r0, #0
        Ok(())
    d0ca:	f88d 001d 	strb.w	r0, [sp, #29]
    }
    d0ce:	e7a1      	b.n	d014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x6c>
    d0d0:	2000      	movs	r0, #0
    d0d2:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    d0d6:	e79d      	b.n	d014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x6c>
    d0d8:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    d0dc:	07c0      	lsls	r0, r0, #31
    d0de:	2800      	cmp	r0, #0
    d0e0:	d1f6      	bne.n	d0d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x128>
    d0e2:	e797      	b.n	d014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x6c>

0000d0e4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcdf096192109e52aE>:
    d0e4:	b081      	sub	sp, #4
    d0e6:	9000      	str	r0, [sp, #0]
    d0e8:	b001      	add	sp, #4
    d0ea:	4770      	bx	lr

0000d0ec <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE>:
    d0ec:	b580      	push	{r7, lr}
    d0ee:	b084      	sub	sp, #16
    d0f0:	9003      	str	r0, [sp, #12]
    d0f2:	6800      	ldr	r0, [r0, #0]
    d0f4:	f7ff fc57 	bl	c9a6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he9351919210a3abfE>
    d0f8:	9002      	str	r0, [sp, #8]
    d0fa:	9101      	str	r1, [sp, #4]
    d0fc:	e7ff      	b.n	d0fe <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE+0x12>
    d0fe:	9802      	ldr	r0, [sp, #8]
    d100:	9901      	ldr	r1, [sp, #4]
    d102:	b004      	add	sp, #16
    d104:	bd80      	pop	{r7, pc}

0000d106 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h7785b67405c5f47aE>:
    d106:	b580      	push	{r7, lr}
    d108:	b082      	sub	sp, #8
    d10a:	9200      	str	r2, [sp, #0]
    d10c:	9101      	str	r1, [sp, #4]
    d10e:	9a00      	ldr	r2, [sp, #0]
    d110:	f003 fe8a 	bl	10e28 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17ha6efa376ff520dabE>
    d114:	e7ff      	b.n	d116 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h7785b67405c5f47aE+0x10>
    d116:	b002      	add	sp, #8
    d118:	bd80      	pop	{r7, pc}

0000d11a <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf3cc102ec961f44aE>:
    d11a:	b580      	push	{r7, lr}
    d11c:	b084      	sub	sp, #16
    d11e:	9102      	str	r1, [sp, #8]
    d120:	9003      	str	r0, [sp, #12]
    d122:	9902      	ldr	r1, [sp, #8]
    d124:	f003 fe92 	bl	10e4c <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hb6f25fe722781fd6E>
    d128:	9001      	str	r0, [sp, #4]
    d12a:	9100      	str	r1, [sp, #0]
    d12c:	e7ff      	b.n	d12e <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf3cc102ec961f44aE+0x14>
    d12e:	9801      	ldr	r0, [sp, #4]
    d130:	9900      	ldr	r1, [sp, #0]
    d132:	b004      	add	sp, #16
    d134:	bd80      	pop	{r7, pc}

0000d136 <_ZN8libchip814Chip8$LT$T$GT$3new17h327c7b1fc19df648E>:
    0xf0, 0x80, 0xf0, 0x80, 0x80, // f
];

impl<T: Hardware> Chip8<T> {
    /// Create an interpreter instance.
    pub fn new(hw: T) -> Self {
    d136:	b5b0      	push	{r4, r5, r7, lr}
    d138:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
    d13c:	b082      	sub	sp, #8
    d13e:	f10d 0e0c 	add.w	lr, sp, #12
    d142:	f50e 5282 	add.w	r2, lr, #4160	; 0x1040
    d146:	2300      	movs	r3, #0
        Self {
            v: [0; REGS],
    d148:	930b      	str	r3, [sp, #44]	; 0x2c
    d14a:	930a      	str	r3, [sp, #40]	; 0x28
    d14c:	9309      	str	r3, [sp, #36]	; 0x24
    d14e:	9308      	str	r3, [sp, #32]
    d150:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
    d154:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
            i: 0,
            dt: 0,
            st: 0,
            pc: 0,
            sp: 0,
            mem: [0; MEMS],
    d158:	9007      	str	r0, [sp, #28]
    d15a:	4660      	mov	r0, ip
    d15c:	9106      	str	r1, [sp, #24]
    d15e:	4671      	mov	r1, lr
    d160:	9205      	str	r2, [sp, #20]
    d162:	9304      	str	r3, [sp, #16]
    d164:	f8cd c00c 	str.w	ip, [sp, #12]
    d168:	f8cd e008 	str.w	lr, [sp, #8]
    d16c:	f011 f804 	bl	1e178 <__aeabi_memclr>
            stack: [0; STACKS],
    d170:	9804      	ldr	r0, [sp, #16]
    d172:	9905      	ldr	r1, [sp, #20]
    d174:	6008      	str	r0, [r1, #0]
    d176:	f841 0c04 	str.w	r0, [r1, #-4]
    d17a:	f841 0c08 	str.w	r0, [r1, #-8]
    d17e:	f841 0c0c 	str.w	r0, [r1, #-12]
    d182:	f841 0c10 	str.w	r0, [r1, #-16]
    d186:	f841 0c14 	str.w	r0, [r1, #-20]
    d18a:	f841 0c18 	str.w	r0, [r1, #-24]
    d18e:	f841 0c1c 	str.w	r0, [r1, #-28]
            time: None,
    d192:	6088      	str	r0, [r1, #8]
    d194:	6048      	str	r0, [r1, #4]
            running: false,
            hw,
    d196:	9a06      	ldr	r2, [sp, #24]
    d198:	8893      	ldrh	r3, [r2, #4]
    d19a:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    d19e:	f8ae 3064 	strh.w	r3, [lr, #100]	; 0x64
    d1a2:	6813      	ldr	r3, [r2, #0]
    d1a4:	614b      	str	r3, [r1, #20]
        Self {
    d1a6:	9b08      	ldr	r3, [sp, #32]
    d1a8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    d1ac:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    d1b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    d1b2:	9d07      	ldr	r5, [sp, #28]
    d1b4:	642c      	str	r4, [r5, #64]	; 0x40
    d1b6:	f8c5 e03c 	str.w	lr, [r5, #60]	; 0x3c
    d1ba:	f8c5 c038 	str.w	ip, [r5, #56]	; 0x38
    d1be:	636b      	str	r3, [r5, #52]	; 0x34
    d1c0:	8228      	strh	r0, [r5, #16]
    d1c2:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    d1c6:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    d1ca:	8268      	strh	r0, [r5, #18]
    d1cc:	f885 0046 	strb.w	r0, [r5, #70]	; 0x46
    d1d0:	f105 0047 	add.w	r0, r5, #71	; 0x47
    d1d4:	9903      	ldr	r1, [sp, #12]
    d1d6:	9a02      	ldr	r2, [sp, #8]
    d1d8:	f010 ffd2 	bl	1e180 <__aeabi_memcpy>
    d1dc:	9907      	ldr	r1, [sp, #28]
    d1de:	f101 0214 	add.w	r2, r1, #20
    d1e2:	f10d 0e10 	add.w	lr, sp, #16
    d1e6:	f50e 5181 	add.w	r1, lr, #4128	; 0x1020
    d1ea:	2320      	movs	r3, #32
    d1ec:	9001      	str	r0, [sp, #4]
    d1ee:	4610      	mov	r0, r2
    d1f0:	461a      	mov	r2, r3
    d1f2:	f010 ffc5 	bl	1e180 <__aeabi_memcpy>
    d1f6:	9905      	ldr	r1, [sp, #20]
    d1f8:	684a      	ldr	r2, [r1, #4]
    d1fa:	688b      	ldr	r3, [r1, #8]
    d1fc:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    d200:	f8d1 e010 	ldr.w	lr, [r1, #16]
    d204:	9c07      	ldr	r4, [sp, #28]
    d206:	6063      	str	r3, [r4, #4]
    d208:	6022      	str	r2, [r4, #0]
    d20a:	f8c4 e00c 	str.w	lr, [r4, #12]
    d20e:	f8c4 c008 	str.w	ip, [r4, #8]
    d212:	f241 0247 	movw	r2, #4167	; 0x1047
    d216:	9b04      	ldr	r3, [sp, #16]
    d218:	54a3      	strb	r3, [r4, r2]
    d21a:	f241 0248 	movw	r2, #4168	; 0x1048
    d21e:	eb04 0c02 	add.w	ip, r4, r2
    d222:	f8d1 e014 	ldr.w	lr, [r1, #20]
    d226:	f844 e002 	str.w	lr, [r4, r2]
    d22a:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
    d22e:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    d232:	f8ac 2004 	strh.w	r2, [ip, #4]
        }
    }
    d236:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
    d23a:	b002      	add	sp, #8
    d23c:	bdb0      	pop	{r4, r5, r7, pc}

0000d23e <_ZN8libchip814Chip8$LT$T$GT$3pop17hcb81f3113413a9ceE>:
    fn push(&mut self, item: u16) {
        self.stack[self.sp as usize] = item;
        self.sp = self.sp.wrapping_add(1);
    }

    fn pop(&mut self) -> u16 {
    d23e:	b580      	push	{r7, lr}
    d240:	b086      	sub	sp, #24
    d242:	9004      	str	r0, [sp, #16]
        self.sp = self.sp.wrapping_sub(1);
    d244:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    d248:	2201      	movs	r2, #1
    d24a:	9003      	str	r0, [sp, #12]
    d24c:	4608      	mov	r0, r1
    d24e:	4611      	mov	r1, r2
    d250:	f009 fc9e 	bl	16b90 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E>
    d254:	9002      	str	r0, [sp, #8]
    d256:	e7ff      	b.n	d258 <_ZN8libchip814Chip8$LT$T$GT$3pop17hcb81f3113413a9ceE+0x1a>
    d258:	9802      	ldr	r0, [sp, #8]
    d25a:	9903      	ldr	r1, [sp, #12]
    d25c:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
        let item = self.stack[self.sp as usize];
    d260:	f891 2046 	ldrb.w	r2, [r1, #70]	; 0x46
    d264:	4613      	mov	r3, r2
    d266:	2a0f      	cmp	r2, #15
    d268:	9301      	str	r3, [sp, #4]
    d26a:	d80a      	bhi.n	d282 <_ZN8libchip814Chip8$LT$T$GT$3pop17hcb81f3113413a9ceE+0x44>
    d26c:	e7ff      	b.n	d26e <_ZN8libchip814Chip8$LT$T$GT$3pop17hcb81f3113413a9ceE+0x30>
    d26e:	9803      	ldr	r0, [sp, #12]
    d270:	9901      	ldr	r1, [sp, #4]
    d272:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    d276:	8a92      	ldrh	r2, [r2, #20]
    d278:	f8ad 2016 	strh.w	r2, [sp, #22]
        item
    }
    d27c:	4610      	mov	r0, r2
    d27e:	b006      	add	sp, #24
    d280:	bd80      	pop	{r7, pc}
        let item = self.stack[self.sp as usize];
    d282:	f24f 4090 	movw	r0, #62608	; 0xf490
    d286:	f2c0 0001 	movt	r0, #1
    d28a:	2210      	movs	r2, #16
    d28c:	9901      	ldr	r1, [sp, #4]
    d28e:	f00a fbb9 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d292:	defe      	udf	#254	; 0xfe

0000d294 <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E>:
    pub fn run(mut self, rom: &[u8]) {
    d294:	b580      	push	{r7, lr}
    d296:	b086      	sub	sp, #24
    d298:	9104      	str	r1, [sp, #16]
    d29a:	9205      	str	r2, [sp, #20]
        self.setup();
    d29c:	9003      	str	r0, [sp, #12]
    d29e:	9202      	str	r2, [sp, #8]
    d2a0:	9101      	str	r1, [sp, #4]
    d2a2:	f003 ff35 	bl	11110 <_ZN8libchip814Chip8$LT$T$GT$5setup17h331c1512aac9f047E>
    d2a6:	e7ff      	b.n	d2a8 <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E+0x14>
        self.load(rom);
    d2a8:	9803      	ldr	r0, [sp, #12]
    d2aa:	9901      	ldr	r1, [sp, #4]
    d2ac:	9a02      	ldr	r2, [sp, #8]
    d2ae:	f003 fddf 	bl	10e70 <_ZN8libchip814Chip8$LT$T$GT$4load17h41409d517e122012E>
    d2b2:	e7ff      	b.n	d2b4 <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E+0x20>
        while self.running {
    d2b4:	e7ff      	b.n	d2b6 <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E+0x22>
    d2b6:	f241 0047 	movw	r0, #4167	; 0x1047
    d2ba:	9903      	ldr	r1, [sp, #12]
    d2bc:	5c08      	ldrb	r0, [r1, r0]
    d2be:	07c0      	lsls	r0, r0, #31
    d2c0:	2800      	cmp	r0, #0
    d2c2:	d101      	bne.n	d2c8 <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E+0x34>
    d2c4:	e7ff      	b.n	d2c6 <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E+0x32>
    }
    d2c6:	e00c      	b.n	d2e2 <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E+0x4e>
            self.sched();
    d2c8:	9803      	ldr	r0, [sp, #12]
    d2ca:	f003 fe9e 	bl	1100a <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E>
    d2ce:	e7ff      	b.n	d2d0 <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E+0x3c>
            self.eval();
    d2d0:	9803      	ldr	r0, [sp, #12]
    d2d2:	f000 f809 	bl	d2e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E>
    d2d6:	e7ff      	b.n	d2d8 <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E+0x44>
            self.next();
    d2d8:	9803      	ldr	r0, [sp, #12]
    d2da:	f003 fe04 	bl	10ee6 <_ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE>
    d2de:	e7ff      	b.n	d2e0 <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E+0x4c>
        while self.running {
    d2e0:	e7e9      	b.n	d2b6 <_ZN8libchip814Chip8$LT$T$GT$3run17hb2775c7816bc08b5E+0x22>
    }
    d2e2:	b006      	add	sp, #24
    d2e4:	bd80      	pop	{r7, pc}
	...

0000d2e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E>:
        }

        return b' ';
    }

    fn eval(&mut self) {
    d2e8:	b570      	push	{r4, r5, r6, lr}
    d2ea:	f5ad 6d6c 	sub.w	sp, sp, #3776	; 0xec0
    d2ee:	f8cd 0c70 	str.w	r0, [sp, #3184]	; 0xc70
        let h = self.mem[self.pc as usize] as u16;
    d2f2:	8a41      	ldrh	r1, [r0, #18]
    d2f4:	460a      	mov	r2, r1
    d2f6:	2300      	movs	r3, #0
    d2f8:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    d2fc:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
    d300:	f8cd 248c 	str.w	r2, [sp, #1164]	; 0x48c
    d304:	f043 82c0 	bne.w	10888 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x35a0>
    d308:	e7ff      	b.n	d30a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22>
    d30a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d30e:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    d312:	1842      	adds	r2, r0, r1
    d314:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d318:	4613      	mov	r3, r2
    d31a:	f8ad 2c76 	strh.w	r2, [sp, #3190]	; 0xc76
        let l = self.mem[(self.pc + 1) as usize] as u16;
    d31e:	8a42      	ldrh	r2, [r0, #18]
    d320:	3201      	adds	r2, #1
    d322:	fa1f fc82 	uxth.w	ip, r2
    d326:	4696      	mov	lr, r2
    d328:	4594      	cmp	ip, r2
    d32a:	f8cd 3488 	str.w	r3, [sp, #1160]	; 0x488
    d32e:	f8cd e484 	str.w	lr, [sp, #1156]	; 0x484
    d332:	f043 82b4 	bne.w	1089e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x35b6>
    d336:	e7ff      	b.n	d338 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x50>
    d338:	f8dd 0484 	ldr.w	r0, [sp, #1156]	; 0x484
    d33c:	b281      	uxth	r1, r0
    d33e:	460a      	mov	r2, r1
    d340:	2300      	movs	r3, #0
    d342:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    d346:	f8cd 2480 	str.w	r2, [sp, #1152]	; 0x480
    d34a:	f043 82b4 	bne.w	108b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x35ce>
    d34e:	e7ff      	b.n	d350 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x68>
    d350:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d354:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    d358:	1842      	adds	r2, r0, r1
    d35a:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d35e:	4613      	mov	r3, r2
    d360:	f8ad 2c78 	strh.w	r2, [sp, #3192]	; 0xc78
        let inst = h << 8 | l;
    d364:	f8dd 2488 	ldr.w	r2, [sp, #1160]	; 0x488
    d368:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    d36c:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c
    d370:	f8cd c478 	str.w	ip, [sp, #1144]	; 0x478
    d374:	e7ff      	b.n	d376 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x8e>
    d376:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478
    d37a:	f8dd 147c 	ldr.w	r1, [sp, #1148]	; 0x47c
    d37e:	ea40 0201 	orr.w	r2, r0, r1
    d382:	f8ad 2496 	strh.w	r2, [sp, #1174]	; 0x496

        let nnn = inst & 0xfff;
    d386:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d38a:	f36f 321f 	bfc	r2, #12, #20
    d38e:	4613      	mov	r3, r2
    d390:	f8ad 2c7a 	strh.w	r2, [sp, #3194]	; 0xc7a
        let n = (inst & 0xf) as usize;
    d394:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d398:	f002 020f 	and.w	r2, r2, #15
    d39c:	4694      	mov	ip, r2
    d39e:	f8cd 2c7c 	str.w	r2, [sp, #3196]	; 0xc7c
        let x = ((inst >> 8) & 0xf) as usize;
    d3a2:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    d3a6:	f8cd 3474 	str.w	r3, [sp, #1140]	; 0x474
    d3aa:	f8cd c470 	str.w	ip, [sp, #1136]	; 0x470
    d3ae:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
    d3b2:	e7ff      	b.n	d3b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xcc>
    d3b4:	f8dd 046c 	ldr.w	r0, [sp, #1132]	; 0x46c
    d3b8:	f000 010f 	and.w	r1, r0, #15
    d3bc:	460a      	mov	r2, r1
    d3be:	f8cd 1c80 	str.w	r1, [sp, #3200]	; 0xc80
        let y = ((inst >> 4) & 0xf) as usize;
    d3c2:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    d3c6:	0909      	lsrs	r1, r1, #4
    d3c8:	f8cd 2468 	str.w	r2, [sp, #1128]	; 0x468
    d3cc:	f8cd 1464 	str.w	r1, [sp, #1124]	; 0x464
    d3d0:	e7ff      	b.n	d3d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xea>
    d3d2:	f8dd 0464 	ldr.w	r0, [sp, #1124]	; 0x464
    d3d6:	f000 010f 	and.w	r1, r0, #15
    d3da:	460a      	mov	r2, r1
    d3dc:	f8cd 1c84 	str.w	r1, [sp, #3204]	; 0xc84
        let kk = (inst & 0xff) as u8;
    d3e0:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    d3e4:	b2cb      	uxtb	r3, r1
    d3e6:	f88d 1c8b 	strb.w	r1, [sp, #3211]	; 0xc8b

        match (
            (inst >> 12) & 0xf,
    d3ea:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    d3ee:	0b09      	lsrs	r1, r1, #12
    d3f0:	f8cd 2460 	str.w	r2, [sp, #1120]	; 0x460
    d3f4:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c
    d3f8:	f8cd 1458 	str.w	r1, [sp, #1112]	; 0x458
    d3fc:	e7ff      	b.n	d3fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x116>
    d3fe:	f8dd 0458 	ldr.w	r0, [sp, #1112]	; 0x458
    d402:	f000 010f 	and.w	r1, r0, #15
            (inst >> 8) & 0xf,
    d406:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    d40a:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
    d40e:	f8cd 2450 	str.w	r2, [sp, #1104]	; 0x450
    d412:	e7ff      	b.n	d414 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x12c>
    d414:	f8dd 0450 	ldr.w	r0, [sp, #1104]	; 0x450
    d418:	f000 010f 	and.w	r1, r0, #15
            (inst >> 4) & 0xf,
    d41c:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d420:	0912      	lsrs	r2, r2, #4
    d422:	f8cd 144c 	str.w	r1, [sp, #1100]	; 0x44c
    d426:	f8cd 2448 	str.w	r2, [sp, #1096]	; 0x448
    d42a:	e7ff      	b.n	d42c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x144>
    d42c:	f8dd 0448 	ldr.w	r0, [sp, #1096]	; 0x448
    d430:	f000 010f 	and.w	r1, r0, #15
            (inst >> 0) & 0xf,
    d434:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    d438:	f8cd 1444 	str.w	r1, [sp, #1092]	; 0x444
    d43c:	f8cd 2440 	str.w	r2, [sp, #1088]	; 0x440
    d440:	e7ff      	b.n	d442 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x15a>
    d442:	f8dd 0440 	ldr.w	r0, [sp, #1088]	; 0x440
    d446:	f000 010f 	and.w	r1, r0, #15
        match (
    d44a:	f8dd 2454 	ldr.w	r2, [sp, #1108]	; 0x454
    d44e:	f8ad 2498 	strh.w	r2, [sp, #1176]	; 0x498
    d452:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
    d456:	f8ad 349a 	strh.w	r3, [sp, #1178]	; 0x49a
    d45a:	f8dd c444 	ldr.w	ip, [sp, #1092]	; 0x444
    d45e:	f8ad c49c 	strh.w	ip, [sp, #1180]	; 0x49c
    d462:	f8ad 149e 	strh.w	r1, [sp, #1182]	; 0x49e
        ) {
            (0, 0, 0xe, 0) => {
    d466:	f8bd 1498 	ldrh.w	r1, [sp, #1176]	; 0x498
    d46a:	468e      	mov	lr, r1
    d46c:	290f      	cmp	r1, #15
    d46e:	f8cd e43c 	str.w	lr, [sp, #1084]	; 0x43c
    d472:	d84f      	bhi.n	d514 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
    d474:	f8dd 143c 	ldr.w	r1, [sp, #1084]	; 0x43c
    d478:	e8df f011 	tbh	[pc, r1, lsl #1]
    d47c:	03060010 	.word	0x03060010
    d480:	04320399 	.word	0x04320399
    d484:	002c04d2 	.word	0x002c04d2
    d488:	06b4061f 	.word	0x06b4061f
    d48c:	00750032 	.word	0x00750032
    d490:	0ee40e59 	.word	0x0ee40e59
    d494:	10260f85 	.word	0x10260f85
    d498:	0095007b 	.word	0x0095007b
    d49c:	f8bd 049a 	ldrh.w	r0, [sp, #1178]	; 0x49a
    d4a0:	2800      	cmp	r0, #0
    d4a2:	f040 8261 	bne.w	d968 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x680>
    d4a6:	e7ff      	b.n	d4a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1c0>
    d4a8:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    d4ac:	280e      	cmp	r0, #14
    d4ae:	f040 825b 	bne.w	d968 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x680>
    d4b2:	e7ff      	b.n	d4b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1cc>
    d4b4:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d4b8:	4601      	mov	r1, r0
    d4ba:	2800      	cmp	r0, #0
    d4bc:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438
    d4c0:	f000 80c0 	beq.w	d644 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x35c>
    d4c4:	e7ff      	b.n	d4c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1de>
    d4c6:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
    d4ca:	b281      	uxth	r1, r0
    d4cc:	290e      	cmp	r1, #14
    d4ce:	f000 81b6 	beq.w	d83e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x556>
    d4d2:	e249      	b.n	d968 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x680>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
                if self.v[x] != kk {
                    self.next();
                }
            }
            (5, _, _, 0) => {
    d4d4:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d4d8:	2800      	cmp	r0, #0
    d4da:	f000 8541 	beq.w	df60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc78>
    d4de:	e019      	b.n	d514 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
            }
            (7, _, _, _) => {
                trace!("[{:04x}] ADD Vx, kk", self.pc);
                self.v[x] = self.v[x].wrapping_add(kk);
            }
            (8, _, _, 0) => {
    d4e0:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d4e4:	4601      	mov	r1, r0
    d4e6:	280e      	cmp	r0, #14
    d4e8:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
    d4ec:	d812      	bhi.n	d514 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
    d4ee:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
    d4f2:	e8df f011 	tbh	[pc, r1, lsl #1]
    d4f6:	071e      	.short	0x071e
    d4f8:	086707c0 	.word	0x086707c0
    d4fc:	09b5090e 	.word	0x09b5090e
    d500:	0b3b0a77 	.word	0x0b3b0a77
    d504:	000f0bf0 	.word	0x000f0bf0
    d508:	000f000f 	.word	0x000f000f
    d50c:	000f000f 	.word	0x000f000f
    d510:	0cb4000f 	.word	0x0cb4000f
                let x = x as usize;
                for i in 0..(x + 1) {
                    self.v[i] = self.mem[self.i as usize + i];
                }
            }
            _ => panic!("[{:04x}] Invalid op: {:04x}", self.pc, inst), // Bad ops
    d514:	f240 0098 	movw	r0, #152	; 0x98
    d518:	f2c0 0002 	movt	r0, #2
    d51c:	6801      	ldr	r1, [r0, #0]
    d51e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d522:	f100 0212 	add.w	r2, r0, #18
    d526:	f8cd 2c68 	str.w	r2, [sp, #3176]	; 0xc68
    d52a:	f20d 4296 	addw	r2, sp, #1174	; 0x496
    d52e:	f8cd 2c6c 	str.w	r2, [sp, #3180]	; 0xc6c
    d532:	f8dd 2c68 	ldr.w	r2, [sp, #3176]	; 0xc68
    d536:	f8cd 2d60 	str.w	r2, [sp, #3424]	; 0xd60
    d53a:	f8dd 3c6c 	ldr.w	r3, [sp, #3180]	; 0xc6c
    d53e:	f8cd 3d64 	str.w	r3, [sp, #3428]	; 0xd64
    d542:	f249 1cf3 	movw	ip, #37363	; 0x91f3
    d546:	f2c0 0c01 	movt	ip, #1
    d54a:	4610      	mov	r0, r2
    d54c:	f8cd 1434 	str.w	r1, [sp, #1076]	; 0x434
    d550:	4661      	mov	r1, ip
    d552:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    d556:	f7fd f93f 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d55a:	f8cd 042c 	str.w	r0, [sp, #1068]	; 0x42c
    d55e:	f8cd 1428 	str.w	r1, [sp, #1064]	; 0x428
    d562:	f003 b94f 	b.w	10804 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x351c>
            (9, _, _, 0) => {
    d566:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d56a:	2800      	cmp	r0, #0
    d56c:	f001 8532 	beq.w	efd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1cec>
    d570:	e7d0      	b.n	d514 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
            (0xe, _, 9, 0xe) => {
    d572:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    d576:	4601      	mov	r1, r0
    d578:	2809      	cmp	r0, #9
    d57a:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420
    d57e:	d006      	beq.n	d58e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a6>
    d580:	e7ff      	b.n	d582 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x29a>
    d582:	f8dd 0420 	ldr.w	r0, [sp, #1056]	; 0x420
    d586:	b281      	uxth	r1, r0
    d588:	290a      	cmp	r1, #10
    d58a:	d006      	beq.n	d59a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2b2>
    d58c:	e7c2      	b.n	d514 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
    d58e:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d592:	280e      	cmp	r0, #14
    d594:	f002 815b 	beq.w	f84e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2566>
    d598:	e7bc      	b.n	d514 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
            (0xe, _, 0xa, 0x1) => {
    d59a:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d59e:	2801      	cmp	r0, #1
    d5a0:	f002 81fe 	beq.w	f9a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x26b8>
    d5a4:	e7b6      	b.n	d514 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
            (0xf, _, 0, 7) => {
    d5a6:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    d5aa:	4601      	mov	r1, r0
    d5ac:	2806      	cmp	r0, #6
    d5ae:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c
    d5b2:	d8af      	bhi.n	d514 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
    d5b4:	f8dd 141c 	ldr.w	r1, [sp, #1052]	; 0x41c
    d5b8:	e8df f001 	tbb	[pc, r1]
    d5bc:	322c1505 	.word	0x322c1505
    d5c0:	003e3804 	.word	0x003e3804
    d5c4:	e7a6      	b.n	d514 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
    d5c6:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d5ca:	4601      	mov	r1, r0
    d5cc:	2807      	cmp	r0, #7
    d5ce:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
    d5d2:	f002 828e 	beq.w	faf2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x280a>
    d5d6:	e7ff      	b.n	d5d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f0>
    d5d8:	f8dd 0418 	ldr.w	r0, [sp, #1048]	; 0x418
    d5dc:	b281      	uxth	r1, r0
    d5de:	290a      	cmp	r1, #10
    d5e0:	f002 8320 	beq.w	fc24 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x293c>
    d5e4:	e796      	b.n	d514 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
            (0xf, _, 1, 5) => {
    d5e6:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d5ea:	4601      	mov	r1, r0
    d5ec:	2805      	cmp	r0, #5
    d5ee:	f8cd 1414 	str.w	r1, [sp, #1044]	; 0x414
    d5f2:	f002 83b1 	beq.w	fd58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a70>
    d5f6:	e7ff      	b.n	d5f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x310>
    d5f8:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    d5fc:	b281      	uxth	r1, r0
    d5fe:	2908      	cmp	r1, #8
    d600:	f002 843f 	beq.w	fe82 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2b9a>
    d604:	e7ff      	b.n	d606 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x31e>
    d606:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    d60a:	b281      	uxth	r1, r0
    d60c:	290e      	cmp	r1, #14
    d60e:	f002 84cd 	beq.w	ffac <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2cc4>
    d612:	e77f      	b.n	d514 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
            (0xf, _, 2, 9) => {
    d614:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d618:	2809      	cmp	r0, #9
    d61a:	f002 856b 	beq.w	100f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e0c>
    d61e:	e779      	b.n	d514 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
            (0xf, _, 3, 3) => {
    d620:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d624:	2803      	cmp	r0, #3
    d626:	f002 8616 	beq.w	10256 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f6e>
    d62a:	e773      	b.n	d514 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
            (0xf, _, 5, 5) => {
    d62c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d630:	2805      	cmp	r0, #5
    d632:	f002 871f 	beq.w	10474 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x318c>
    d636:	e76d      	b.n	d514 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
            (0xf, _, 6, 5) => {
    d638:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    d63c:	2805      	cmp	r0, #5
    d63e:	f002 87fc 	beq.w	1063a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3352>
    d642:	e767      	b.n	d514 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22c>
    d644:	2005      	movs	r0, #5
    d646:	f8cd 04a0 	str.w	r0, [sp, #1184]	; 0x4a0
    d64a:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    d64e:	f2c0 0001 	movt	r0, #1
    d652:	6801      	ldr	r1, [r0, #0]
    d654:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    d658:	f009 fb3c 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d65c:	f8cd 0410 	str.w	r0, [sp, #1040]	; 0x410
    d660:	e01f      	b.n	d6a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3ba>
    d662:	2001      	movs	r0, #1
    d664:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    d668:	e015      	b.n	d696 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3ae>
    d66a:	2000      	movs	r0, #0
    d66c:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    d670:	e011      	b.n	d696 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3ae>
    d672:	2000      	movs	r0, #0
/// [`debug!`]: macro.debug.html
/// [`trace!`]: macro.trace.html
/// [`set_max_level`]: fn.set_max_level.html
#[inline(always)]
pub fn max_level() -> LevelFilter {
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
    d674:	f88d 0dab 	strb.w	r0, [sp, #3499]	; 0xdab
    d678:	f89d 1dab 	ldrb.w	r1, [sp, #3499]	; 0xdab
    d67c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d680:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d684:	f003 fed5 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d688:	f8cd 0dac 	str.w	r0, [sp, #3500]	; 0xdac
    d68c:	f8dd 0dac 	ldr.w	r0, [sp, #3500]	; 0xdac
    d690:	f8cd 04a8 	str.w	r0, [sp, #1192]	; 0x4a8
    d694:	e00b      	b.n	d6ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3c6>
    d696:	f89d 04a7 	ldrb.w	r0, [sp, #1191]	; 0x4a7
    d69a:	07c0      	lsls	r0, r0, #31
    d69c:	2800      	cmp	r0, #0
    d69e:	d115      	bne.n	d6cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3e4>
    d6a0:	e05e      	b.n	d760 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x478>
    d6a2:	f8dd 0410 	ldr.w	r0, [sp, #1040]	; 0x410
    d6a6:	07c1      	lsls	r1, r0, #31
    d6a8:	2900      	cmp	r1, #0
    d6aa:	d1e2      	bne.n	d672 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x38a>
    d6ac:	e7dd      	b.n	d66a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x382>
    d6ae:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    d6b2:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
    d6b6:	f009 fb0d 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d6ba:	f8cd 040c 	str.w	r0, [sp, #1036]	; 0x40c
    d6be:	e7ff      	b.n	d6c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3d8>
    d6c0:	f8dd 040c 	ldr.w	r0, [sp, #1036]	; 0x40c
    d6c4:	07c1      	lsls	r1, r0, #31
    d6c6:	2900      	cmp	r1, #0
    d6c8:	d1cb      	bne.n	d662 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x37a>
    d6ca:	e7ce      	b.n	d66a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x382>
                trace!("[{:04x}] CLS", self.pc);
    d6cc:	f240 3038 	movw	r0, #824	; 0x338
    d6d0:	f2c0 0002 	movt	r0, #2
    d6d4:	6801      	ldr	r1, [r0, #0]
    d6d6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d6da:	f100 0212 	add.w	r2, r0, #18
    d6de:	f8cd 24cc 	str.w	r2, [sp, #1228]	; 0x4cc
    d6e2:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
    d6e6:	f8cd 2d88 	str.w	r2, [sp, #3464]	; 0xd88
    d6ea:	f249 13f3 	movw	r3, #37363	; 0x91f3
    d6ee:	f2c0 0301 	movt	r3, #1
    d6f2:	4610      	mov	r0, r2
    d6f4:	f8cd 1408 	str.w	r1, [sp, #1032]	; 0x408
    d6f8:	4619      	mov	r1, r3
    d6fa:	f7fd f86d 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d6fe:	f8cd 0404 	str.w	r0, [sp, #1028]	; 0x404
    d702:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400
    d706:	e7ff      	b.n	d708 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x420>
    d708:	f8dd 0404 	ldr.w	r0, [sp, #1028]	; 0x404
    d70c:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
    d710:	f8dd 1400 	ldr.w	r1, [sp, #1024]	; 0x400
    d714:	f8cd 14c8 	str.w	r1, [sp, #1224]	; 0x4c8
    d718:	f24f 5238 	movw	r2, #62776	; 0xf538
    d71c:	f2c0 0201 	movt	r2, #1
    d720:	6812      	ldr	r2, [r2, #0]
    d722:	466b      	mov	r3, sp
    d724:	f04f 0c01 	mov.w	ip, #1
    d728:	f8c3 c008 	str.w	ip, [r3, #8]
    d72c:	605a      	str	r2, [r3, #4]
    d72e:	f8c3 c000 	str.w	ip, [r3]
    d732:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    d736:	2202      	movs	r2, #2
    d738:	f20d 43c4 	addw	r3, sp, #1220	; 0x4c4
    d73c:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    d740:	f009 f98d 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d744:	e7ff      	b.n	d746 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x45e>
    d746:	f8dd 14a0 	ldr.w	r1, [sp, #1184]	; 0x4a0
    d74a:	f240 3058 	movw	r0, #856	; 0x358
    d74e:	f2c0 0002 	movt	r0, #2
    d752:	6802      	ldr	r2, [r0, #0]
    d754:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    d758:	f004 fe9a 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d75c:	e7ff      	b.n	d75e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x476>
    d75e:	e7ff      	b.n	d760 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x478>
    d760:	f241 0048 	movw	r0, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    d764:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d768:	4408      	add	r0, r1
    d76a:	f7fe fc8f 	bl	c08c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17h3eb92f330a1e13e5E>
    d76e:	90ff      	str	r0, [sp, #1020]	; 0x3fc
    d770:	91fe      	str	r1, [sp, #1016]	; 0x3f8
    d772:	e7ff      	b.n	d774 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x48c>
    d774:	98ff      	ldr	r0, [sp, #1020]	; 0x3fc
    d776:	f8cd 0d8c 	str.w	r0, [sp, #3468]	; 0xd8c
    d77a:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
    d77c:	f8cd 14d0 	str.w	r1, [sp, #1232]	; 0x4d0
    d780:	2200      	movs	r2, #0
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d782:	f8cd 2538 	str.w	r2, [sp, #1336]	; 0x538
    d786:	f8cd 053c 	str.w	r0, [sp, #1340]	; 0x53c
    d78a:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
    d78e:	f8cd 2540 	str.w	r2, [sp, #1344]	; 0x540
    d792:	f8dd 1538 	ldr.w	r1, [sp, #1336]	; 0x538
    d796:	f8dd 253c 	ldr.w	r2, [sp, #1340]	; 0x53c
    d79a:	f8dd 3540 	ldr.w	r3, [sp, #1344]	; 0x540
    d79e:	f20d 502c 	addw	r0, sp, #1324	; 0x52c
    d7a2:	f003 ff0a 	bl	115ba <_ZN4core4iter6traits8iterator8Iterator3map17h977bf45075800c77E>
    d7a6:	e7ff      	b.n	d7a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x4c0>
    d7a8:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
    d7ac:	f20d 512c 	addw	r1, sp, #1324	; 0x52c
    d7b0:	f003 fe53 	bl	1145a <_ZN4core4iter6traits8iterator8Iterator7flatten17hce303520e4c400b1E>
    d7b4:	e7ff      	b.n	d7b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x4ce>
    d7b6:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    d7ba:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
    d7be:	f003 fe21 	bl	11404 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h81f0567d2baa3411E>
    d7c2:	e7ff      	b.n	d7c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x4dc>
    d7c4:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    d7c8:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    d7cc:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    d7d0:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    d7d4:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    d7d8:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    d7dc:	e7ff      	b.n	d7de <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x4f6>
    d7de:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    d7e2:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    d7e6:	f003 fd3a 	bl	1125e <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04da96b0e9749c79E>
    d7ea:	e7ff      	b.n	d7ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x504>
    d7ec:	f8dd 0570 	ldr.w	r0, [sp, #1392]	; 0x570
    d7f0:	2800      	cmp	r0, #0
    d7f2:	d001      	beq.n	d7f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x510>
    d7f4:	e7ff      	b.n	d7f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x50e>
    d7f6:	e002      	b.n	d7fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x516>
        match (
    d7f8:	f003 b843 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d7fc:	defe      	udf	#254	; 0xfe
    d7fe:	f8dd 0574 	ldr.w	r0, [sp, #1396]	; 0x574
    d802:	f8dd 1578 	ldr.w	r1, [sp, #1400]	; 0x578
    d806:	f8cd 0d90 	str.w	r0, [sp, #3472]	; 0xd90
    d80a:	f8cd 1d94 	str.w	r1, [sp, #3476]	; 0xd94
    d80e:	f8cd 0d98 	str.w	r0, [sp, #3480]	; 0xd98
    d812:	f8cd 1d9c 	str.w	r1, [sp, #3484]	; 0xd9c
    d816:	f8cd 0da0 	str.w	r0, [sp, #3488]	; 0xda0
    d81a:	f8cd 1da4 	str.w	r1, [sp, #3492]	; 0xda4
    d81e:	f241 0248 	movw	r2, #4168	; 0x1048
                    self.hw.vram_set(x, y, false);
    d822:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    d826:	441a      	add	r2, r3
    d828:	2300      	movs	r3, #0
    d82a:	90fd      	str	r0, [sp, #1012]	; 0x3f4
    d82c:	4610      	mov	r0, r2
    d82e:	9afd      	ldr	r2, [sp, #1012]	; 0x3f4
    d830:	91fc      	str	r1, [sp, #1008]	; 0x3f0
    d832:	4611      	mov	r1, r2
    d834:	9afc      	ldr	r2, [sp, #1008]	; 0x3f0
    d836:	f7fe fa77 	bl	bd28 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E>
    d83a:	e7ff      	b.n	d83c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x554>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d83c:	e7cf      	b.n	d7de <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x4f6>
    d83e:	2005      	movs	r0, #5
    d840:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
    d844:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    d848:	f2c0 0001 	movt	r0, #1
    d84c:	6801      	ldr	r1, [r0, #0]
    d84e:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    d852:	f009 fa3f 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d856:	90fb      	str	r0, [sp, #1004]	; 0x3ec
    d858:	e01f      	b.n	d89a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x5b2>
    d85a:	2001      	movs	r0, #1
    d85c:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    d860:	e015      	b.n	d88e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x5a6>
    d862:	2000      	movs	r0, #0
    d864:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    d868:	e011      	b.n	d88e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x5a6>
    d86a:	2000      	movs	r0, #0
    d86c:	f88d 0db3 	strb.w	r0, [sp, #3507]	; 0xdb3
    d870:	f89d 1db3 	ldrb.w	r1, [sp, #3507]	; 0xdb3
    d874:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d878:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d87c:	f003 fdd9 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d880:	f8cd 0db4 	str.w	r0, [sp, #3508]	; 0xdb4
    d884:	f8dd 0db4 	ldr.w	r0, [sp, #3508]	; 0xdb4
    d888:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
    d88c:	e00a      	b.n	d8a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x5bc>
    d88e:	f89d 0583 	ldrb.w	r0, [sp, #1411]	; 0x583
    d892:	07c0      	lsls	r0, r0, #31
    d894:	2800      	cmp	r0, #0
    d896:	d112      	bne.n	d8be <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x5d6>
    d898:	e055      	b.n	d946 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x65e>
    d89a:	98fb      	ldr	r0, [sp, #1004]	; 0x3ec
    d89c:	07c1      	lsls	r1, r0, #31
    d89e:	2900      	cmp	r1, #0
    d8a0:	d1e3      	bne.n	d86a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x582>
    d8a2:	e7de      	b.n	d862 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x57a>
    d8a4:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    d8a8:	f20d 5184 	addw	r1, sp, #1412	; 0x584
    d8ac:	f009 fa12 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d8b0:	90fa      	str	r0, [sp, #1000]	; 0x3e8
    d8b2:	e7ff      	b.n	d8b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x5cc>
    d8b4:	98fa      	ldr	r0, [sp, #1000]	; 0x3e8
    d8b6:	07c1      	lsls	r1, r0, #31
    d8b8:	2900      	cmp	r1, #0
    d8ba:	d1ce      	bne.n	d85a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x572>
    d8bc:	e7d1      	b.n	d862 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x57a>
                trace!("[{:04x}] RET", self.pc);
    d8be:	f240 20fc 	movw	r0, #764	; 0x2fc
    d8c2:	f2c0 0002 	movt	r0, #2
    d8c6:	6801      	ldr	r1, [r0, #0]
    d8c8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d8cc:	f100 0212 	add.w	r2, r0, #18
    d8d0:	f8cd 25a8 	str.w	r2, [sp, #1448]	; 0x5a8
    d8d4:	f8dd 25a8 	ldr.w	r2, [sp, #1448]	; 0x5a8
    d8d8:	f8cd 2d80 	str.w	r2, [sp, #3456]	; 0xd80
    d8dc:	f249 13f3 	movw	r3, #37363	; 0x91f3
    d8e0:	f2c0 0301 	movt	r3, #1
    d8e4:	4610      	mov	r0, r2
    d8e6:	91f9      	str	r1, [sp, #996]	; 0x3e4
    d8e8:	4619      	mov	r1, r3
    d8ea:	f7fc ff75 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d8ee:	90f8      	str	r0, [sp, #992]	; 0x3e0
    d8f0:	91f7      	str	r1, [sp, #988]	; 0x3dc
    d8f2:	e7ff      	b.n	d8f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x60c>
    d8f4:	98f8      	ldr	r0, [sp, #992]	; 0x3e0
    d8f6:	f8cd 05a0 	str.w	r0, [sp, #1440]	; 0x5a0
    d8fa:	99f7      	ldr	r1, [sp, #988]	; 0x3dc
    d8fc:	f8cd 15a4 	str.w	r1, [sp, #1444]	; 0x5a4
    d900:	f24f 5238 	movw	r2, #62776	; 0xf538
    d904:	f2c0 0201 	movt	r2, #1
    d908:	6812      	ldr	r2, [r2, #0]
    d90a:	466b      	mov	r3, sp
    d90c:	f04f 0c01 	mov.w	ip, #1
    d910:	f8c3 c008 	str.w	ip, [r3, #8]
    d914:	605a      	str	r2, [r3, #4]
    d916:	f8c3 c000 	str.w	ip, [r3]
    d91a:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    d91e:	2202      	movs	r2, #2
    d920:	f50d 63b4 	add.w	r3, sp, #1440	; 0x5a0
    d924:	99f9      	ldr	r1, [sp, #996]	; 0x3e4
    d926:	f009 f89a 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d92a:	e7ff      	b.n	d92c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x644>
    d92c:	f8dd 157c 	ldr.w	r1, [sp, #1404]	; 0x57c
    d930:	f240 301c 	movw	r0, #796	; 0x31c
    d934:	f2c0 0002 	movt	r0, #2
    d938:	6802      	ldr	r2, [r0, #0]
    d93a:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    d93e:	f004 fda7 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d942:	e7ff      	b.n	d944 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x65c>
    d944:	e7ff      	b.n	d946 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x65e>
                let addr = self.pop();
    d946:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d94a:	f7ff fc78 	bl	d23e <_ZN8libchip814Chip8$LT$T$GT$3pop17hcb81f3113413a9ceE>
    d94e:	4601      	mov	r1, r0
    d950:	f8ad 0d86 	strh.w	r0, [sp, #3462]	; 0xd86
    d954:	91f6      	str	r1, [sp, #984]	; 0x3d8
    d956:	e7ff      	b.n	d958 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x670>
                self.jump(addr);
    d958:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d95c:	99f6      	ldr	r1, [sp, #984]	; 0x3d8
    d95e:	f003 fa7f 	bl	10e60 <_ZN8libchip814Chip8$LT$T$GT$4jump17h98fcf36ccb52be45E>
    d962:	e7ff      	b.n	d964 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x67c>
        match (
    d964:	f002 bf8d 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    d968:	2005      	movs	r0, #5
    d96a:	f8cd 05ac 	str.w	r0, [sp, #1452]	; 0x5ac
    d96e:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    d972:	f2c0 0001 	movt	r0, #1
    d976:	6801      	ldr	r1, [r0, #0]
    d978:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    d97c:	f009 f9aa 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d980:	90f5      	str	r0, [sp, #980]	; 0x3d4
    d982:	e01f      	b.n	d9c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x6dc>
    d984:	2001      	movs	r0, #1
    d986:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    d98a:	e015      	b.n	d9b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x6d0>
    d98c:	2000      	movs	r0, #0
    d98e:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    d992:	e011      	b.n	d9b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x6d0>
    d994:	2000      	movs	r0, #0
    d996:	f88d 0dbb 	strb.w	r0, [sp, #3515]	; 0xdbb
    d99a:	f89d 1dbb 	ldrb.w	r1, [sp, #3515]	; 0xdbb
    d99e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d9a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d9a6:	f003 fd44 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d9aa:	f8cd 0dbc 	str.w	r0, [sp, #3516]	; 0xdbc
    d9ae:	f8dd 0dbc 	ldr.w	r0, [sp, #3516]	; 0xdbc
    d9b2:	f8cd 05b4 	str.w	r0, [sp, #1460]	; 0x5b4
    d9b6:	e00a      	b.n	d9ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x6e6>
    d9b8:	f89d 05b3 	ldrb.w	r0, [sp, #1459]	; 0x5b3
    d9bc:	07c0      	lsls	r0, r0, #31
    d9be:	2800      	cmp	r0, #0
    d9c0:	d112      	bne.n	d9e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x700>
    d9c2:	e055      	b.n	da70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x788>
    d9c4:	98f5      	ldr	r0, [sp, #980]	; 0x3d4
    d9c6:	07c1      	lsls	r1, r0, #31
    d9c8:	2900      	cmp	r1, #0
    d9ca:	d1e3      	bne.n	d994 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x6ac>
    d9cc:	e7de      	b.n	d98c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x6a4>
    d9ce:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    d9d2:	f20d 51b4 	addw	r1, sp, #1460	; 0x5b4
    d9d6:	f009 f97d 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d9da:	90f4      	str	r0, [sp, #976]	; 0x3d0
    d9dc:	e7ff      	b.n	d9de <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x6f6>
    d9de:	98f4      	ldr	r0, [sp, #976]	; 0x3d0
    d9e0:	07c1      	lsls	r1, r0, #31
    d9e2:	2900      	cmp	r1, #0
    d9e4:	d1ce      	bne.n	d984 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x69c>
    d9e6:	e7d1      	b.n	d98c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x6a4>
                trace!("[{:04x}] SYS nnn", self.pc);
    d9e8:	f240 20a0 	movw	r0, #672	; 0x2a0
    d9ec:	f2c0 0002 	movt	r0, #2
    d9f0:	6801      	ldr	r1, [r0, #0]
    d9f2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d9f6:	f100 0212 	add.w	r2, r0, #18
    d9fa:	f8cd 25d8 	str.w	r2, [sp, #1496]	; 0x5d8
    d9fe:	f8dd 25d8 	ldr.w	r2, [sp, #1496]	; 0x5d8
    da02:	f8cd 2d7c 	str.w	r2, [sp, #3452]	; 0xd7c
    da06:	f249 13f3 	movw	r3, #37363	; 0x91f3
    da0a:	f2c0 0301 	movt	r3, #1
    da0e:	4610      	mov	r0, r2
    da10:	91f3      	str	r1, [sp, #972]	; 0x3cc
    da12:	4619      	mov	r1, r3
    da14:	f7fc fee0 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    da18:	90f2      	str	r0, [sp, #968]	; 0x3c8
    da1a:	91f1      	str	r1, [sp, #964]	; 0x3c4
    da1c:	e7ff      	b.n	da1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x736>
    da1e:	98f2      	ldr	r0, [sp, #968]	; 0x3c8
    da20:	f8cd 05d0 	str.w	r0, [sp, #1488]	; 0x5d0
    da24:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
    da26:	f8cd 15d4 	str.w	r1, [sp, #1492]	; 0x5d4
    da2a:	f24f 5238 	movw	r2, #62776	; 0xf538
    da2e:	f2c0 0201 	movt	r2, #1
    da32:	6812      	ldr	r2, [r2, #0]
    da34:	466b      	mov	r3, sp
    da36:	f04f 0c01 	mov.w	ip, #1
    da3a:	f8c3 c008 	str.w	ip, [r3, #8]
    da3e:	605a      	str	r2, [r3, #4]
    da40:	f8c3 c000 	str.w	ip, [r3]
    da44:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    da48:	2202      	movs	r2, #2
    da4a:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
    da4e:	99f3      	ldr	r1, [sp, #972]	; 0x3cc
    da50:	f009 f805 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    da54:	e7ff      	b.n	da56 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x76e>
    da56:	f8dd 15ac 	ldr.w	r1, [sp, #1452]	; 0x5ac
    da5a:	f240 20c0 	movw	r0, #704	; 0x2c0
    da5e:	f2c0 0002 	movt	r0, #2
    da62:	6802      	ldr	r2, [r0, #0]
    da64:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    da68:	f004 fd12 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    da6c:	e7ff      	b.n	da6e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x786>
    da6e:	e7ff      	b.n	da70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x788>
    da70:	f240 20c4 	movw	r0, #708	; 0x2c4
    da74:	f2c0 0002 	movt	r0, #2
    da78:	f240 22d4 	movw	r2, #724	; 0x2d4
    da7c:	f2c0 0202 	movt	r2, #2
    da80:	210f      	movs	r1, #15
    da82:	f009 ffa9 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    da86:	defe      	udf	#254	; 0xfe
    da88:	2005      	movs	r0, #5
    da8a:	f8cd 05dc 	str.w	r0, [sp, #1500]	; 0x5dc
    da8e:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    da92:	f2c0 0001 	movt	r0, #1
    da96:	6801      	ldr	r1, [r0, #0]
    da98:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    da9c:	f009 f91a 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    daa0:	90f0      	str	r0, [sp, #960]	; 0x3c0
    daa2:	e01f      	b.n	dae4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x7fc>
    daa4:	2001      	movs	r0, #1
    daa6:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    daaa:	e015      	b.n	dad8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x7f0>
    daac:	2000      	movs	r0, #0
    daae:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    dab2:	e011      	b.n	dad8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x7f0>
    dab4:	2000      	movs	r0, #0
    dab6:	f88d 0dc3 	strb.w	r0, [sp, #3523]	; 0xdc3
    daba:	f89d 1dc3 	ldrb.w	r1, [sp, #3523]	; 0xdc3
    dabe:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dac2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dac6:	f003 fcb4 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    daca:	f8cd 0dc4 	str.w	r0, [sp, #3524]	; 0xdc4
    dace:	f8dd 0dc4 	ldr.w	r0, [sp, #3524]	; 0xdc4
    dad2:	f8cd 05e4 	str.w	r0, [sp, #1508]	; 0x5e4
    dad6:	e00a      	b.n	daee <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x806>
    dad8:	f89d 05e3 	ldrb.w	r0, [sp, #1507]	; 0x5e3
    dadc:	07c0      	lsls	r0, r0, #31
    dade:	2800      	cmp	r0, #0
    dae0:	d112      	bne.n	db08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x820>
    dae2:	e055      	b.n	db90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x8a8>
    dae4:	98f0      	ldr	r0, [sp, #960]	; 0x3c0
    dae6:	07c1      	lsls	r1, r0, #31
    dae8:	2900      	cmp	r1, #0
    daea:	d1e3      	bne.n	dab4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x7cc>
    daec:	e7de      	b.n	daac <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x7c4>
    daee:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    daf2:	f20d 51e4 	addw	r1, sp, #1508	; 0x5e4
    daf6:	f009 f8ed 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dafa:	90ef      	str	r0, [sp, #956]	; 0x3bc
    dafc:	e7ff      	b.n	dafe <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x816>
    dafe:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
    db00:	07c1      	lsls	r1, r0, #31
    db02:	2900      	cmp	r1, #0
    db04:	d1ce      	bne.n	daa4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x7bc>
    db06:	e7d1      	b.n	daac <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x7c4>
                trace!("[{:04x}] JP nnn", self.pc);
    db08:	f240 2060 	movw	r0, #608	; 0x260
    db0c:	f2c0 0002 	movt	r0, #2
    db10:	6801      	ldr	r1, [r0, #0]
    db12:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    db16:	f100 0212 	add.w	r2, r0, #18
    db1a:	f8cd 2608 	str.w	r2, [sp, #1544]	; 0x608
    db1e:	f8dd 2608 	ldr.w	r2, [sp, #1544]	; 0x608
    db22:	f8cd 2d78 	str.w	r2, [sp, #3448]	; 0xd78
    db26:	f249 13f3 	movw	r3, #37363	; 0x91f3
    db2a:	f2c0 0301 	movt	r3, #1
    db2e:	4610      	mov	r0, r2
    db30:	91ee      	str	r1, [sp, #952]	; 0x3b8
    db32:	4619      	mov	r1, r3
    db34:	f7fc fe50 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    db38:	90ed      	str	r0, [sp, #948]	; 0x3b4
    db3a:	91ec      	str	r1, [sp, #944]	; 0x3b0
    db3c:	e7ff      	b.n	db3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x856>
    db3e:	98ed      	ldr	r0, [sp, #948]	; 0x3b4
    db40:	f8cd 0600 	str.w	r0, [sp, #1536]	; 0x600
    db44:	99ec      	ldr	r1, [sp, #944]	; 0x3b0
    db46:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
    db4a:	f24f 5238 	movw	r2, #62776	; 0xf538
    db4e:	f2c0 0201 	movt	r2, #1
    db52:	6812      	ldr	r2, [r2, #0]
    db54:	466b      	mov	r3, sp
    db56:	f04f 0c01 	mov.w	ip, #1
    db5a:	f8c3 c008 	str.w	ip, [r3, #8]
    db5e:	605a      	str	r2, [r3, #4]
    db60:	f8c3 c000 	str.w	ip, [r3]
    db64:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    db68:	2202      	movs	r2, #2
    db6a:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
    db6e:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
    db70:	f008 ff75 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    db74:	e7ff      	b.n	db76 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x88e>
    db76:	f8dd 15dc 	ldr.w	r1, [sp, #1500]	; 0x5dc
    db7a:	f240 2080 	movw	r0, #640	; 0x280
    db7e:	f2c0 0002 	movt	r0, #2
    db82:	6802      	ldr	r2, [r0, #0]
    db84:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    db88:	f004 fc82 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    db8c:	e7ff      	b.n	db8e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x8a6>
    db8e:	e7ff      	b.n	db90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x8a8>
    db90:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    db92:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    db96:	f009 f874 	bl	16c82 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    db9a:	90eb      	str	r0, [sp, #940]	; 0x3ac
    db9c:	e7ff      	b.n	db9e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x8b6>
    db9e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dba2:	99eb      	ldr	r1, [sp, #940]	; 0x3ac
    dba4:	f003 f95c 	bl	10e60 <_ZN8libchip814Chip8$LT$T$GT$4jump17h98fcf36ccb52be45E>
    dba8:	e7ff      	b.n	dbaa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x8c2>
        match (
    dbaa:	f002 be6a 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    dbae:	2005      	movs	r0, #5
    dbb0:	f8cd 060c 	str.w	r0, [sp, #1548]	; 0x60c
    dbb4:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    dbb8:	f2c0 0001 	movt	r0, #1
    dbbc:	6801      	ldr	r1, [r0, #0]
    dbbe:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    dbc2:	f009 f887 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dbc6:	90ea      	str	r0, [sp, #936]	; 0x3a8
    dbc8:	e01f      	b.n	dc0a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x922>
    dbca:	2001      	movs	r0, #1
    dbcc:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    dbd0:	e015      	b.n	dbfe <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x916>
    dbd2:	2000      	movs	r0, #0
    dbd4:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    dbd8:	e011      	b.n	dbfe <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x916>
    dbda:	2000      	movs	r0, #0
    dbdc:	f88d 0dcb 	strb.w	r0, [sp, #3531]	; 0xdcb
    dbe0:	f89d 1dcb 	ldrb.w	r1, [sp, #3531]	; 0xdcb
    dbe4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dbe8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dbec:	f003 fc21 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dbf0:	f8cd 0dcc 	str.w	r0, [sp, #3532]	; 0xdcc
    dbf4:	f8dd 0dcc 	ldr.w	r0, [sp, #3532]	; 0xdcc
    dbf8:	f8cd 0614 	str.w	r0, [sp, #1556]	; 0x614
    dbfc:	e00a      	b.n	dc14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x92c>
    dbfe:	f89d 0613 	ldrb.w	r0, [sp, #1555]	; 0x613
    dc02:	07c0      	lsls	r0, r0, #31
    dc04:	2800      	cmp	r0, #0
    dc06:	d112      	bne.n	dc2e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x946>
    dc08:	e055      	b.n	dcb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x9ce>
    dc0a:	98ea      	ldr	r0, [sp, #936]	; 0x3a8
    dc0c:	07c1      	lsls	r1, r0, #31
    dc0e:	2900      	cmp	r1, #0
    dc10:	d1e3      	bne.n	dbda <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x8f2>
    dc12:	e7de      	b.n	dbd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x8ea>
    dc14:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    dc18:	f20d 6114 	addw	r1, sp, #1556	; 0x614
    dc1c:	f009 f85a 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dc20:	90e9      	str	r0, [sp, #932]	; 0x3a4
    dc22:	e7ff      	b.n	dc24 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x93c>
    dc24:	98e9      	ldr	r0, [sp, #932]	; 0x3a4
    dc26:	07c1      	lsls	r1, r0, #31
    dc28:	2900      	cmp	r1, #0
    dc2a:	d1ce      	bne.n	dbca <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x8e2>
    dc2c:	e7d1      	b.n	dbd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x8ea>
                trace!("[{:04x}] CALL nnn", self.pc);
    dc2e:	f240 202c 	movw	r0, #556	; 0x22c
    dc32:	f2c0 0002 	movt	r0, #2
    dc36:	6801      	ldr	r1, [r0, #0]
    dc38:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dc3c:	f100 0212 	add.w	r2, r0, #18
    dc40:	f8cd 2638 	str.w	r2, [sp, #1592]	; 0x638
    dc44:	f8dd 2638 	ldr.w	r2, [sp, #1592]	; 0x638
    dc48:	f8cd 2d74 	str.w	r2, [sp, #3444]	; 0xd74
    dc4c:	f249 13f3 	movw	r3, #37363	; 0x91f3
    dc50:	f2c0 0301 	movt	r3, #1
    dc54:	4610      	mov	r0, r2
    dc56:	91e8      	str	r1, [sp, #928]	; 0x3a0
    dc58:	4619      	mov	r1, r3
    dc5a:	f7fc fdbd 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dc5e:	90e7      	str	r0, [sp, #924]	; 0x39c
    dc60:	91e6      	str	r1, [sp, #920]	; 0x398
    dc62:	e7ff      	b.n	dc64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x97c>
    dc64:	98e7      	ldr	r0, [sp, #924]	; 0x39c
    dc66:	f8cd 0630 	str.w	r0, [sp, #1584]	; 0x630
    dc6a:	99e6      	ldr	r1, [sp, #920]	; 0x398
    dc6c:	f8cd 1634 	str.w	r1, [sp, #1588]	; 0x634
    dc70:	f24f 5238 	movw	r2, #62776	; 0xf538
    dc74:	f2c0 0201 	movt	r2, #1
    dc78:	6812      	ldr	r2, [r2, #0]
    dc7a:	466b      	mov	r3, sp
    dc7c:	f04f 0c01 	mov.w	ip, #1
    dc80:	f8c3 c008 	str.w	ip, [r3, #8]
    dc84:	605a      	str	r2, [r3, #4]
    dc86:	f8c3 c000 	str.w	ip, [r3]
    dc8a:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    dc8e:	2202      	movs	r2, #2
    dc90:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
    dc94:	99e8      	ldr	r1, [sp, #928]	; 0x3a0
    dc96:	f008 fee2 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    dc9a:	e7ff      	b.n	dc9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x9b4>
    dc9c:	f8dd 160c 	ldr.w	r1, [sp, #1548]	; 0x60c
    dca0:	f240 204c 	movw	r0, #588	; 0x24c
    dca4:	f2c0 0002 	movt	r0, #2
    dca8:	6802      	ldr	r2, [r0, #0]
    dcaa:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    dcae:	f004 fbef 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dcb2:	e7ff      	b.n	dcb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x9cc>
    dcb4:	e7ff      	b.n	dcb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x9ce>
                self.push(self.pc);
    dcb6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dcba:	8a41      	ldrh	r1, [r0, #18]
    dcbc:	f003 f926 	bl	10f0c <_ZN8libchip814Chip8$LT$T$GT$4push17h2bc728f644865dbfE>
    dcc0:	e7ff      	b.n	dcc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x9da>
    dcc2:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    dcc4:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    dcc8:	f008 ffdb 	bl	16c82 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    dccc:	90e5      	str	r0, [sp, #916]	; 0x394
    dcce:	e7ff      	b.n	dcd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x9e8>
    dcd0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dcd4:	99e5      	ldr	r1, [sp, #916]	; 0x394
    dcd6:	f003 f8c3 	bl	10e60 <_ZN8libchip814Chip8$LT$T$GT$4jump17h98fcf36ccb52be45E>
    dcda:	e7ff      	b.n	dcdc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x9f4>
        match (
    dcdc:	f002 bdd1 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    dce0:	2005      	movs	r0, #5
    dce2:	f8cd 063c 	str.w	r0, [sp, #1596]	; 0x63c
    dce6:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    dcea:	f2c0 0001 	movt	r0, #1
    dcee:	6801      	ldr	r1, [r0, #0]
    dcf0:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    dcf4:	f008 ffee 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dcf8:	90e4      	str	r0, [sp, #912]	; 0x390
    dcfa:	e01f      	b.n	dd3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xa54>
    dcfc:	2001      	movs	r0, #1
    dcfe:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    dd02:	e015      	b.n	dd30 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xa48>
    dd04:	2000      	movs	r0, #0
    dd06:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    dd0a:	e011      	b.n	dd30 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xa48>
    dd0c:	2000      	movs	r0, #0
    dd0e:	f88d 0dd3 	strb.w	r0, [sp, #3539]	; 0xdd3
    dd12:	f89d 1dd3 	ldrb.w	r1, [sp, #3539]	; 0xdd3
    dd16:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dd1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dd1e:	f003 fb88 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dd22:	f8cd 0dd4 	str.w	r0, [sp, #3540]	; 0xdd4
    dd26:	f8dd 0dd4 	ldr.w	r0, [sp, #3540]	; 0xdd4
    dd2a:	f8cd 0644 	str.w	r0, [sp, #1604]	; 0x644
    dd2e:	e00a      	b.n	dd46 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xa5e>
    dd30:	f89d 0643 	ldrb.w	r0, [sp, #1603]	; 0x643
    dd34:	07c0      	lsls	r0, r0, #31
    dd36:	2800      	cmp	r0, #0
    dd38:	d112      	bne.n	dd60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xa78>
    dd3a:	e055      	b.n	dde8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb00>
    dd3c:	98e4      	ldr	r0, [sp, #912]	; 0x390
    dd3e:	07c1      	lsls	r1, r0, #31
    dd40:	2900      	cmp	r1, #0
    dd42:	d1e3      	bne.n	dd0c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xa24>
    dd44:	e7de      	b.n	dd04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xa1c>
    dd46:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    dd4a:	f20d 6144 	addw	r1, sp, #1604	; 0x644
    dd4e:	f008 ffc1 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dd52:	90e3      	str	r0, [sp, #908]	; 0x38c
    dd54:	e7ff      	b.n	dd56 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xa6e>
    dd56:	98e3      	ldr	r0, [sp, #908]	; 0x38c
    dd58:	07c1      	lsls	r1, r0, #31
    dd5a:	2900      	cmp	r1, #0
    dd5c:	d1ce      	bne.n	dcfc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xa14>
    dd5e:	e7d1      	b.n	dd04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xa1c>
                trace!("[{:04x}] SE Vx kk", self.pc);
    dd60:	f240 10dc 	movw	r0, #476	; 0x1dc
    dd64:	f2c0 0002 	movt	r0, #2
    dd68:	6801      	ldr	r1, [r0, #0]
    dd6a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dd6e:	f100 0212 	add.w	r2, r0, #18
    dd72:	f8cd 2668 	str.w	r2, [sp, #1640]	; 0x668
    dd76:	f8dd 2668 	ldr.w	r2, [sp, #1640]	; 0x668
    dd7a:	f8cd 2d70 	str.w	r2, [sp, #3440]	; 0xd70
    dd7e:	f249 13f3 	movw	r3, #37363	; 0x91f3
    dd82:	f2c0 0301 	movt	r3, #1
    dd86:	4610      	mov	r0, r2
    dd88:	91e2      	str	r1, [sp, #904]	; 0x388
    dd8a:	4619      	mov	r1, r3
    dd8c:	f7fc fd24 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dd90:	90e1      	str	r0, [sp, #900]	; 0x384
    dd92:	91e0      	str	r1, [sp, #896]	; 0x380
    dd94:	e7ff      	b.n	dd96 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xaae>
    dd96:	98e1      	ldr	r0, [sp, #900]	; 0x384
    dd98:	f8cd 0660 	str.w	r0, [sp, #1632]	; 0x660
    dd9c:	99e0      	ldr	r1, [sp, #896]	; 0x380
    dd9e:	f8cd 1664 	str.w	r1, [sp, #1636]	; 0x664
    dda2:	f24f 5238 	movw	r2, #62776	; 0xf538
    dda6:	f2c0 0201 	movt	r2, #1
    ddaa:	6812      	ldr	r2, [r2, #0]
    ddac:	466b      	mov	r3, sp
    ddae:	f04f 0c01 	mov.w	ip, #1
    ddb2:	f8c3 c008 	str.w	ip, [r3, #8]
    ddb6:	605a      	str	r2, [r3, #4]
    ddb8:	f8c3 c000 	str.w	ip, [r3]
    ddbc:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    ddc0:	2202      	movs	r2, #2
    ddc2:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
    ddc6:	99e2      	ldr	r1, [sp, #904]	; 0x388
    ddc8:	f008 fe49 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ddcc:	e7ff      	b.n	ddce <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xae6>
    ddce:	f8dd 163c 	ldr.w	r1, [sp, #1596]	; 0x63c
    ddd2:	f240 10fc 	movw	r0, #508	; 0x1fc
    ddd6:	f2c0 0002 	movt	r0, #2
    ddda:	6802      	ldr	r2, [r0, #0]
    dddc:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    dde0:	f004 fb56 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dde4:	e7ff      	b.n	dde6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xafe>
    dde6:	e7ff      	b.n	dde8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb00>
                if self.v[x] == kk {
    dde8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ddec:	280f      	cmp	r0, #15
    ddee:	f203 8011 	bhi.w	10e14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3b2c>
    ddf2:	e7ff      	b.n	ddf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb0c>
    ddf4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ddf8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ddfc:	1842      	adds	r2, r0, r1
    ddfe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    de02:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    de06:	fa5f fc83 	uxtb.w	ip, r3
    de0a:	4562      	cmp	r2, ip
    de0c:	d106      	bne.n	de1c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb34>
    de0e:	e7ff      	b.n	de10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb28>
                    self.next();
    de10:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    de14:	f003 f867 	bl	10ee6 <_ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE>
    de18:	e7ff      	b.n	de1a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb32>
                if self.v[x] == kk {
    de1a:	e7ff      	b.n	de1c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb34>
        match (
    de1c:	f002 bd31 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    de20:	2005      	movs	r0, #5
    de22:	f8cd 066c 	str.w	r0, [sp, #1644]	; 0x66c
    de26:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    de2a:	f2c0 0001 	movt	r0, #1
    de2e:	6801      	ldr	r1, [r0, #0]
    de30:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    de34:	f008 ff4e 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    de38:	90df      	str	r0, [sp, #892]	; 0x37c
    de3a:	e01f      	b.n	de7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb94>
    de3c:	2001      	movs	r0, #1
    de3e:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    de42:	e015      	b.n	de70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb88>
    de44:	2000      	movs	r0, #0
    de46:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    de4a:	e011      	b.n	de70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb88>
    de4c:	2000      	movs	r0, #0
    de4e:	f88d 0ddb 	strb.w	r0, [sp, #3547]	; 0xddb
    de52:	f89d 1ddb 	ldrb.w	r1, [sp, #3547]	; 0xddb
    de56:	f644 206c 	movw	r0, #19052	; 0x4a6c
    de5a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    de5e:	f003 fae8 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    de62:	f8cd 0ddc 	str.w	r0, [sp, #3548]	; 0xddc
    de66:	f8dd 0ddc 	ldr.w	r0, [sp, #3548]	; 0xddc
    de6a:	f8cd 0674 	str.w	r0, [sp, #1652]	; 0x674
    de6e:	e00a      	b.n	de86 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb9e>
    de70:	f89d 0673 	ldrb.w	r0, [sp, #1651]	; 0x673
    de74:	07c0      	lsls	r0, r0, #31
    de76:	2800      	cmp	r0, #0
    de78:	d112      	bne.n	dea0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xbb8>
    de7a:	e055      	b.n	df28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc40>
    de7c:	98df      	ldr	r0, [sp, #892]	; 0x37c
    de7e:	07c1      	lsls	r1, r0, #31
    de80:	2900      	cmp	r1, #0
    de82:	d1e3      	bne.n	de4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb64>
    de84:	e7de      	b.n	de44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb5c>
    de86:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    de8a:	f20d 6174 	addw	r1, sp, #1652	; 0x674
    de8e:	f008 ff21 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    de92:	90de      	str	r0, [sp, #888]	; 0x378
    de94:	e7ff      	b.n	de96 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xbae>
    de96:	98de      	ldr	r0, [sp, #888]	; 0x378
    de98:	07c1      	lsls	r1, r0, #31
    de9a:	2900      	cmp	r1, #0
    de9c:	d1ce      	bne.n	de3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb54>
    de9e:	e7d1      	b.n	de44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xb5c>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
    dea0:	f240 108c 	movw	r0, #396	; 0x18c
    dea4:	f2c0 0002 	movt	r0, #2
    dea8:	6801      	ldr	r1, [r0, #0]
    deaa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    deae:	f100 0212 	add.w	r2, r0, #18
    deb2:	f8cd 2698 	str.w	r2, [sp, #1688]	; 0x698
    deb6:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
    deba:	f8cd 2d6c 	str.w	r2, [sp, #3436]	; 0xd6c
    debe:	f249 13f3 	movw	r3, #37363	; 0x91f3
    dec2:	f2c0 0301 	movt	r3, #1
    dec6:	4610      	mov	r0, r2
    dec8:	91dd      	str	r1, [sp, #884]	; 0x374
    deca:	4619      	mov	r1, r3
    decc:	f7fc fc84 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ded0:	90dc      	str	r0, [sp, #880]	; 0x370
    ded2:	91db      	str	r1, [sp, #876]	; 0x36c
    ded4:	e7ff      	b.n	ded6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xbee>
    ded6:	98dc      	ldr	r0, [sp, #880]	; 0x370
    ded8:	f8cd 0690 	str.w	r0, [sp, #1680]	; 0x690
    dedc:	99db      	ldr	r1, [sp, #876]	; 0x36c
    dede:	f8cd 1694 	str.w	r1, [sp, #1684]	; 0x694
    dee2:	f24f 5238 	movw	r2, #62776	; 0xf538
    dee6:	f2c0 0201 	movt	r2, #1
    deea:	6812      	ldr	r2, [r2, #0]
    deec:	466b      	mov	r3, sp
    deee:	f04f 0c01 	mov.w	ip, #1
    def2:	f8c3 c008 	str.w	ip, [r3, #8]
    def6:	605a      	str	r2, [r3, #4]
    def8:	f8c3 c000 	str.w	ip, [r3]
    defc:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    df00:	2202      	movs	r2, #2
    df02:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
    df06:	99dd      	ldr	r1, [sp, #884]	; 0x374
    df08:	f008 fda9 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    df0c:	e7ff      	b.n	df0e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc26>
    df0e:	f8dd 166c 	ldr.w	r1, [sp, #1644]	; 0x66c
    df12:	f240 10ac 	movw	r0, #428	; 0x1ac
    df16:	f2c0 0002 	movt	r0, #2
    df1a:	6802      	ldr	r2, [r0, #0]
    df1c:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    df20:	f004 fab6 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    df24:	e7ff      	b.n	df26 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc3e>
    df26:	e7ff      	b.n	df28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc40>
                if self.v[x] != kk {
    df28:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    df2c:	280f      	cmp	r0, #15
    df2e:	f202 8767 	bhi.w	10e00 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3b18>
    df32:	e7ff      	b.n	df34 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc4c>
    df34:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df38:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    df3c:	1842      	adds	r2, r0, r1
    df3e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    df42:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    df46:	fa5f fc83 	uxtb.w	ip, r3
    df4a:	4562      	cmp	r2, ip
    df4c:	d006      	beq.n	df5c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc74>
    df4e:	e7ff      	b.n	df50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc68>
                    self.next();
    df50:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df54:	f002 ffc7 	bl	10ee6 <_ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE>
    df58:	e7ff      	b.n	df5a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc72>
                if self.v[x] != kk {
    df5a:	e7ff      	b.n	df5c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc74>
        match (
    df5c:	f002 bc91 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    df60:	2005      	movs	r0, #5
    df62:	f8cd 069c 	str.w	r0, [sp, #1692]	; 0x69c
    df66:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    df6a:	f2c0 0001 	movt	r0, #1
    df6e:	6801      	ldr	r1, [r0, #0]
    df70:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    df74:	f008 feae 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    df78:	90da      	str	r0, [sp, #872]	; 0x368
    df7a:	e01f      	b.n	dfbc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xcd4>
    df7c:	2001      	movs	r0, #1
    df7e:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    df82:	e015      	b.n	dfb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xcc8>
    df84:	2000      	movs	r0, #0
    df86:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    df8a:	e011      	b.n	dfb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xcc8>
    df8c:	2000      	movs	r0, #0
    df8e:	f88d 0de3 	strb.w	r0, [sp, #3555]	; 0xde3
    df92:	f89d 1de3 	ldrb.w	r1, [sp, #3555]	; 0xde3
    df96:	f644 206c 	movw	r0, #19052	; 0x4a6c
    df9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    df9e:	f003 fa48 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dfa2:	f8cd 0de4 	str.w	r0, [sp, #3556]	; 0xde4
    dfa6:	f8dd 0de4 	ldr.w	r0, [sp, #3556]	; 0xde4
    dfaa:	f8cd 06a4 	str.w	r0, [sp, #1700]	; 0x6a4
    dfae:	e00a      	b.n	dfc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xcde>
    dfb0:	f89d 06a3 	ldrb.w	r0, [sp, #1699]	; 0x6a3
    dfb4:	07c0      	lsls	r0, r0, #31
    dfb6:	2800      	cmp	r0, #0
    dfb8:	d112      	bne.n	dfe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xcf8>
    dfba:	e055      	b.n	e068 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xd80>
    dfbc:	98da      	ldr	r0, [sp, #872]	; 0x368
    dfbe:	07c1      	lsls	r1, r0, #31
    dfc0:	2900      	cmp	r1, #0
    dfc2:	d1e3      	bne.n	df8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xca4>
    dfc4:	e7de      	b.n	df84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc9c>
    dfc6:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    dfca:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
    dfce:	f008 fe81 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dfd2:	90d9      	str	r0, [sp, #868]	; 0x364
    dfd4:	e7ff      	b.n	dfd6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xcee>
    dfd6:	98d9      	ldr	r0, [sp, #868]	; 0x364
    dfd8:	07c1      	lsls	r1, r0, #31
    dfda:	2900      	cmp	r1, #0
    dfdc:	d1ce      	bne.n	df7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc94>
    dfde:	e7d1      	b.n	df84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xc9c>
                trace!("[{:04x}] SE Vx, Vy", self.pc);
    dfe0:	f240 102c 	movw	r0, #300	; 0x12c
    dfe4:	f2c0 0002 	movt	r0, #2
    dfe8:	6801      	ldr	r1, [r0, #0]
    dfea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dfee:	f100 0212 	add.w	r2, r0, #18
    dff2:	f8cd 26c8 	str.w	r2, [sp, #1736]	; 0x6c8
    dff6:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
    dffa:	f8cd 2d68 	str.w	r2, [sp, #3432]	; 0xd68
    dffe:	f249 13f3 	movw	r3, #37363	; 0x91f3
    e002:	f2c0 0301 	movt	r3, #1
    e006:	4610      	mov	r0, r2
    e008:	91d8      	str	r1, [sp, #864]	; 0x360
    e00a:	4619      	mov	r1, r3
    e00c:	f7fc fbe4 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e010:	90d7      	str	r0, [sp, #860]	; 0x35c
    e012:	91d6      	str	r1, [sp, #856]	; 0x358
    e014:	e7ff      	b.n	e016 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xd2e>
    e016:	98d7      	ldr	r0, [sp, #860]	; 0x35c
    e018:	f8cd 06c0 	str.w	r0, [sp, #1728]	; 0x6c0
    e01c:	99d6      	ldr	r1, [sp, #856]	; 0x358
    e01e:	f8cd 16c4 	str.w	r1, [sp, #1732]	; 0x6c4
    e022:	f24f 5238 	movw	r2, #62776	; 0xf538
    e026:	f2c0 0201 	movt	r2, #1
    e02a:	6812      	ldr	r2, [r2, #0]
    e02c:	466b      	mov	r3, sp
    e02e:	f04f 0c01 	mov.w	ip, #1
    e032:	f8c3 c008 	str.w	ip, [r3, #8]
    e036:	605a      	str	r2, [r3, #4]
    e038:	f8c3 c000 	str.w	ip, [r3]
    e03c:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    e040:	2202      	movs	r2, #2
    e042:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
    e046:	99d8      	ldr	r1, [sp, #864]	; 0x360
    e048:	f008 fd09 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e04c:	e7ff      	b.n	e04e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xd66>
    e04e:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
    e052:	f240 104c 	movw	r0, #332	; 0x14c
    e056:	f2c0 0002 	movt	r0, #2
    e05a:	6802      	ldr	r2, [r0, #0]
    e05c:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    e060:	f004 fa16 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e064:	e7ff      	b.n	e066 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xd7e>
    e066:	e7ff      	b.n	e068 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xd80>
                if self.v[x] == self.v[y] {
    e068:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e06c:	280f      	cmp	r0, #15
    e06e:	f202 86b3 	bhi.w	10dd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3af0>
    e072:	e7ff      	b.n	e074 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xd8c>
    e074:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e078:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e07c:	1842      	adds	r2, r0, r1
    e07e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e082:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    e086:	2b0f      	cmp	r3, #15
    e088:	92d5      	str	r2, [sp, #852]	; 0x354
    e08a:	f202 86af 	bhi.w	10dec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3b04>
    e08e:	e7ff      	b.n	e090 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xda8>
    e090:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e094:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e098:	1842      	adds	r2, r0, r1
    e09a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e09e:	9bd5      	ldr	r3, [sp, #852]	; 0x354
    e0a0:	fa5f fc83 	uxtb.w	ip, r3
    e0a4:	4594      	cmp	ip, r2
    e0a6:	d106      	bne.n	e0b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xdce>
    e0a8:	e7ff      	b.n	e0aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xdc2>
                    self.next();
    e0aa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e0ae:	f002 ff1a 	bl	10ee6 <_ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE>
    e0b2:	e7ff      	b.n	e0b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xdcc>
                if self.v[x] == self.v[y] {
    e0b4:	e7ff      	b.n	e0b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xdce>
        match (
    e0b6:	f002 bbe4 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    e0ba:	2005      	movs	r0, #5
    e0bc:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
    e0c0:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    e0c4:	f2c0 0001 	movt	r0, #1
    e0c8:	6801      	ldr	r1, [r0, #0]
    e0ca:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    e0ce:	f008 fe01 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e0d2:	90d4      	str	r0, [sp, #848]	; 0x350
    e0d4:	e01f      	b.n	e116 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xe2e>
    e0d6:	2001      	movs	r0, #1
    e0d8:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    e0dc:	e015      	b.n	e10a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xe22>
    e0de:	2000      	movs	r0, #0
    e0e0:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    e0e4:	e011      	b.n	e10a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xe22>
    e0e6:	2000      	movs	r0, #0
    e0e8:	f88d 0deb 	strb.w	r0, [sp, #3563]	; 0xdeb
    e0ec:	f89d 1deb 	ldrb.w	r1, [sp, #3563]	; 0xdeb
    e0f0:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e0f4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e0f8:	f003 f99b 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e0fc:	f8cd 0dec 	str.w	r0, [sp, #3564]	; 0xdec
    e100:	f8dd 0dec 	ldr.w	r0, [sp, #3564]	; 0xdec
    e104:	f8cd 06d4 	str.w	r0, [sp, #1748]	; 0x6d4
    e108:	e00a      	b.n	e120 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xe38>
    e10a:	f89d 06d3 	ldrb.w	r0, [sp, #1747]	; 0x6d3
    e10e:	07c0      	lsls	r0, r0, #31
    e110:	2800      	cmp	r0, #0
    e112:	d112      	bne.n	e13a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xe52>
    e114:	e055      	b.n	e1c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xeda>
    e116:	98d4      	ldr	r0, [sp, #848]	; 0x350
    e118:	07c1      	lsls	r1, r0, #31
    e11a:	2900      	cmp	r1, #0
    e11c:	d1e3      	bne.n	e0e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xdfe>
    e11e:	e7de      	b.n	e0de <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xdf6>
    e120:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    e124:	f20d 61d4 	addw	r1, sp, #1748	; 0x6d4
    e128:	f008 fdd4 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e12c:	90d3      	str	r0, [sp, #844]	; 0x34c
    e12e:	e7ff      	b.n	e130 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xe48>
    e130:	98d3      	ldr	r0, [sp, #844]	; 0x34c
    e132:	07c1      	lsls	r1, r0, #31
    e134:	2900      	cmp	r1, #0
    e136:	d1ce      	bne.n	e0d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xdee>
    e138:	e7d1      	b.n	e0de <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xdf6>
                trace!("[{:04x}] LD Vx, kk", self.pc);
    e13a:	f240 0044 	movw	r0, #68	; 0x44
    e13e:	f2c0 0002 	movt	r0, #2
    e142:	6801      	ldr	r1, [r0, #0]
    e144:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e148:	f100 0212 	add.w	r2, r0, #18
    e14c:	f8cd 26f8 	str.w	r2, [sp, #1784]	; 0x6f8
    e150:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
    e154:	f8cd 2d5c 	str.w	r2, [sp, #3420]	; 0xd5c
    e158:	f249 13f3 	movw	r3, #37363	; 0x91f3
    e15c:	f2c0 0301 	movt	r3, #1
    e160:	4610      	mov	r0, r2
    e162:	91d2      	str	r1, [sp, #840]	; 0x348
    e164:	4619      	mov	r1, r3
    e166:	f7fc fb37 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e16a:	90d1      	str	r0, [sp, #836]	; 0x344
    e16c:	91d0      	str	r1, [sp, #832]	; 0x340
    e16e:	e7ff      	b.n	e170 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xe88>
    e170:	98d1      	ldr	r0, [sp, #836]	; 0x344
    e172:	f8cd 06f0 	str.w	r0, [sp, #1776]	; 0x6f0
    e176:	99d0      	ldr	r1, [sp, #832]	; 0x340
    e178:	f8cd 16f4 	str.w	r1, [sp, #1780]	; 0x6f4
    e17c:	f24f 5238 	movw	r2, #62776	; 0xf538
    e180:	f2c0 0201 	movt	r2, #1
    e184:	6812      	ldr	r2, [r2, #0]
    e186:	466b      	mov	r3, sp
    e188:	f04f 0c01 	mov.w	ip, #1
    e18c:	f8c3 c008 	str.w	ip, [r3, #8]
    e190:	605a      	str	r2, [r3, #4]
    e192:	f8c3 c000 	str.w	ip, [r3]
    e196:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    e19a:	2202      	movs	r2, #2
    e19c:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
    e1a0:	99d2      	ldr	r1, [sp, #840]	; 0x348
    e1a2:	f008 fc5c 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e1a6:	e7ff      	b.n	e1a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xec0>
    e1a8:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
    e1ac:	f240 0064 	movw	r0, #100	; 0x64
    e1b0:	f2c0 0002 	movt	r0, #2
    e1b4:	6802      	ldr	r2, [r0, #0]
    e1b6:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    e1ba:	f004 f969 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e1be:	e7ff      	b.n	e1c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xed8>
    e1c0:	e7ff      	b.n	e1c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xeda>
                self.v[x] = kk;
    e1c2:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e1c6:	280f      	cmp	r0, #15
    e1c8:	f202 85fc 	bhi.w	10dc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3adc>
    e1cc:	e7ff      	b.n	e1ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xee6>
    e1ce:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e1d2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e1d6:	1842      	adds	r2, r0, r1
    e1d8:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    e1dc:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e1e0:	f002 bb4f 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    e1e4:	2005      	movs	r0, #5
    e1e6:	f8cd 06fc 	str.w	r0, [sp, #1788]	; 0x6fc
    e1ea:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    e1ee:	f2c0 0001 	movt	r0, #1
    e1f2:	6801      	ldr	r1, [r0, #0]
    e1f4:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    e1f8:	f008 fd6c 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e1fc:	90cf      	str	r0, [sp, #828]	; 0x33c
    e1fe:	e01f      	b.n	e240 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xf58>
    e200:	2001      	movs	r0, #1
    e202:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    e206:	e015      	b.n	e234 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xf4c>
    e208:	2000      	movs	r0, #0
    e20a:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    e20e:	e011      	b.n	e234 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xf4c>
    e210:	2000      	movs	r0, #0
    e212:	f88d 0df3 	strb.w	r0, [sp, #3571]	; 0xdf3
    e216:	f89d 1df3 	ldrb.w	r1, [sp, #3571]	; 0xdf3
    e21a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e21e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e222:	f003 f906 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e226:	f8cd 0df4 	str.w	r0, [sp, #3572]	; 0xdf4
    e22a:	f8dd 0df4 	ldr.w	r0, [sp, #3572]	; 0xdf4
    e22e:	f8cd 0704 	str.w	r0, [sp, #1796]	; 0x704
    e232:	e00a      	b.n	e24a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xf62>
    e234:	f89d 0703 	ldrb.w	r0, [sp, #1795]	; 0x703
    e238:	07c0      	lsls	r0, r0, #31
    e23a:	2800      	cmp	r0, #0
    e23c:	d112      	bne.n	e264 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xf7c>
    e23e:	e055      	b.n	e2ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1004>
    e240:	98cf      	ldr	r0, [sp, #828]	; 0x33c
    e242:	07c1      	lsls	r1, r0, #31
    e244:	2900      	cmp	r1, #0
    e246:	d1e3      	bne.n	e210 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xf28>
    e248:	e7de      	b.n	e208 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xf20>
    e24a:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    e24e:	f20d 7104 	addw	r1, sp, #1796	; 0x704
    e252:	f008 fd3f 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e256:	90ce      	str	r0, [sp, #824]	; 0x338
    e258:	e7ff      	b.n	e25a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xf72>
    e25a:	98ce      	ldr	r0, [sp, #824]	; 0x338
    e25c:	07c1      	lsls	r1, r0, #31
    e25e:	2900      	cmp	r1, #0
    e260:	d1ce      	bne.n	e200 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xf18>
    e262:	e7d1      	b.n	e208 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xf20>
                trace!("[{:04x}] ADD Vx, kk", self.pc);
    e264:	f64f 70e4 	movw	r0, #65508	; 0xffe4
    e268:	f2c0 0001 	movt	r0, #1
    e26c:	6801      	ldr	r1, [r0, #0]
    e26e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e272:	f100 0212 	add.w	r2, r0, #18
    e276:	f8cd 2728 	str.w	r2, [sp, #1832]	; 0x728
    e27a:	f8dd 2728 	ldr.w	r2, [sp, #1832]	; 0x728
    e27e:	f8cd 2d58 	str.w	r2, [sp, #3416]	; 0xd58
    e282:	f249 13f3 	movw	r3, #37363	; 0x91f3
    e286:	f2c0 0301 	movt	r3, #1
    e28a:	4610      	mov	r0, r2
    e28c:	91cd      	str	r1, [sp, #820]	; 0x334
    e28e:	4619      	mov	r1, r3
    e290:	f7fc faa2 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e294:	90cc      	str	r0, [sp, #816]	; 0x330
    e296:	91cb      	str	r1, [sp, #812]	; 0x32c
    e298:	e7ff      	b.n	e29a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xfb2>
    e29a:	98cc      	ldr	r0, [sp, #816]	; 0x330
    e29c:	f8cd 0720 	str.w	r0, [sp, #1824]	; 0x720
    e2a0:	99cb      	ldr	r1, [sp, #812]	; 0x32c
    e2a2:	f8cd 1724 	str.w	r1, [sp, #1828]	; 0x724
    e2a6:	f24f 5238 	movw	r2, #62776	; 0xf538
    e2aa:	f2c0 0201 	movt	r2, #1
    e2ae:	6812      	ldr	r2, [r2, #0]
    e2b0:	466b      	mov	r3, sp
    e2b2:	f04f 0c01 	mov.w	ip, #1
    e2b6:	f8c3 c008 	str.w	ip, [r3, #8]
    e2ba:	605a      	str	r2, [r3, #4]
    e2bc:	f8c3 c000 	str.w	ip, [r3]
    e2c0:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    e2c4:	2202      	movs	r2, #2
    e2c6:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
    e2ca:	99cd      	ldr	r1, [sp, #820]	; 0x334
    e2cc:	f008 fbc7 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e2d0:	e7ff      	b.n	e2d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0xfea>
    e2d2:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
    e2d6:	f240 0004 	movw	r0, #4
    e2da:	f2c0 0002 	movt	r0, #2
    e2de:	6802      	ldr	r2, [r0, #0]
    e2e0:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    e2e4:	f004 f8d4 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e2e8:	e7ff      	b.n	e2ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1002>
    e2ea:	e7ff      	b.n	e2ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1004>
                self.v[x] = self.v[x].wrapping_add(kk);
    e2ec:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e2f0:	280f      	cmp	r0, #15
    e2f2:	f202 8553 	bhi.w	10d9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3ab4>
    e2f6:	e7ff      	b.n	e2f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1010>
    e2f8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e2fc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e300:	1842      	adds	r2, r0, r1
    e302:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    e306:	f8dd 145c 	ldr.w	r1, [sp, #1116]	; 0x45c
    e30a:	f008 fc0c 	bl	16b26 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>
    e30e:	90ca      	str	r0, [sp, #808]	; 0x328
    e310:	e7ff      	b.n	e312 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x102a>
    e312:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e316:	280f      	cmp	r0, #15
    e318:	f202 854a 	bhi.w	10db0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3ac8>
    e31c:	e7ff      	b.n	e31e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1036>
    e31e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e322:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e326:	1842      	adds	r2, r0, r1
    e328:	9bca      	ldr	r3, [sp, #808]	; 0x328
    e32a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e32e:	f002 baa8 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    e332:	2005      	movs	r0, #5
    e334:	f8cd 072c 	str.w	r0, [sp, #1836]	; 0x72c
    e338:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    e33c:	f2c0 0001 	movt	r0, #1
    e340:	6801      	ldr	r1, [r0, #0]
    e342:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    e346:	f008 fcc5 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e34a:	90c9      	str	r0, [sp, #804]	; 0x324
    e34c:	e01f      	b.n	e38e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x10a6>
    e34e:	2001      	movs	r0, #1
    e350:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    e354:	e015      	b.n	e382 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x109a>
    e356:	2000      	movs	r0, #0
    e358:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    e35c:	e011      	b.n	e382 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x109a>
    e35e:	2000      	movs	r0, #0
    e360:	f88d 0dfb 	strb.w	r0, [sp, #3579]	; 0xdfb
    e364:	f89d 1dfb 	ldrb.w	r1, [sp, #3579]	; 0xdfb
    e368:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e36c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e370:	f003 f85f 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e374:	f8cd 0dfc 	str.w	r0, [sp, #3580]	; 0xdfc
    e378:	f8dd 0dfc 	ldr.w	r0, [sp, #3580]	; 0xdfc
    e37c:	f8cd 0734 	str.w	r0, [sp, #1844]	; 0x734
    e380:	e00a      	b.n	e398 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x10b0>
    e382:	f89d 0733 	ldrb.w	r0, [sp, #1843]	; 0x733
    e386:	07c0      	lsls	r0, r0, #31
    e388:	2800      	cmp	r0, #0
    e38a:	d112      	bne.n	e3b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x10ca>
    e38c:	e055      	b.n	e43a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1152>
    e38e:	98c9      	ldr	r0, [sp, #804]	; 0x324
    e390:	07c1      	lsls	r1, r0, #31
    e392:	2900      	cmp	r1, #0
    e394:	d1e3      	bne.n	e35e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1076>
    e396:	e7de      	b.n	e356 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x106e>
    e398:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    e39c:	f20d 7134 	addw	r1, sp, #1844	; 0x734
    e3a0:	f008 fc98 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e3a4:	90c8      	str	r0, [sp, #800]	; 0x320
    e3a6:	e7ff      	b.n	e3a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x10c0>
    e3a8:	98c8      	ldr	r0, [sp, #800]	; 0x320
    e3aa:	07c1      	lsls	r1, r0, #31
    e3ac:	2900      	cmp	r1, #0
    e3ae:	d1ce      	bne.n	e34e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1066>
    e3b0:	e7d1      	b.n	e356 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x106e>
                trace!("[{:04x}] LD Vx, Vy", self.pc);
    e3b2:	f64f 7084 	movw	r0, #65412	; 0xff84
    e3b6:	f2c0 0001 	movt	r0, #1
    e3ba:	6801      	ldr	r1, [r0, #0]
    e3bc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e3c0:	f100 0212 	add.w	r2, r0, #18
    e3c4:	f8cd 2758 	str.w	r2, [sp, #1880]	; 0x758
    e3c8:	f8dd 2758 	ldr.w	r2, [sp, #1880]	; 0x758
    e3cc:	f8cd 2d54 	str.w	r2, [sp, #3412]	; 0xd54
    e3d0:	f249 13f3 	movw	r3, #37363	; 0x91f3
    e3d4:	f2c0 0301 	movt	r3, #1
    e3d8:	4610      	mov	r0, r2
    e3da:	91c7      	str	r1, [sp, #796]	; 0x31c
    e3dc:	4619      	mov	r1, r3
    e3de:	f7fc f9fb 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e3e2:	90c6      	str	r0, [sp, #792]	; 0x318
    e3e4:	91c5      	str	r1, [sp, #788]	; 0x314
    e3e6:	e7ff      	b.n	e3e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1100>
    e3e8:	98c6      	ldr	r0, [sp, #792]	; 0x318
    e3ea:	f8cd 0750 	str.w	r0, [sp, #1872]	; 0x750
    e3ee:	99c5      	ldr	r1, [sp, #788]	; 0x314
    e3f0:	f8cd 1754 	str.w	r1, [sp, #1876]	; 0x754
    e3f4:	f24f 5238 	movw	r2, #62776	; 0xf538
    e3f8:	f2c0 0201 	movt	r2, #1
    e3fc:	6812      	ldr	r2, [r2, #0]
    e3fe:	466b      	mov	r3, sp
    e400:	f04f 0c01 	mov.w	ip, #1
    e404:	f8c3 c008 	str.w	ip, [r3, #8]
    e408:	605a      	str	r2, [r3, #4]
    e40a:	f8c3 c000 	str.w	ip, [r3]
    e40e:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    e412:	2202      	movs	r2, #2
    e414:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
    e418:	99c7      	ldr	r1, [sp, #796]	; 0x31c
    e41a:	f008 fb20 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e41e:	e7ff      	b.n	e420 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1138>
    e420:	f8dd 172c 	ldr.w	r1, [sp, #1836]	; 0x72c
    e424:	f64f 70a4 	movw	r0, #65444	; 0xffa4
    e428:	f2c0 0001 	movt	r0, #1
    e42c:	6802      	ldr	r2, [r0, #0]
    e42e:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    e432:	f004 f82d 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e436:	e7ff      	b.n	e438 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1150>
    e438:	e7ff      	b.n	e43a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1152>
                self.v[x] = self.v[y];
    e43a:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e43e:	280f      	cmp	r0, #15
    e440:	f202 8498 	bhi.w	10d74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3a8c>
    e444:	e7ff      	b.n	e446 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x115e>
    e446:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e44a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e44e:	1842      	adds	r2, r0, r1
    e450:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e454:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e458:	2b0f      	cmp	r3, #15
    e45a:	92c4      	str	r2, [sp, #784]	; 0x310
    e45c:	f202 8494 	bhi.w	10d88 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3aa0>
    e460:	e7ff      	b.n	e462 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x117a>
    e462:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e466:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e46a:	1842      	adds	r2, r0, r1
    e46c:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    e46e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e472:	f002 ba06 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    e476:	2005      	movs	r0, #5
    e478:	f8cd 075c 	str.w	r0, [sp, #1884]	; 0x75c
    e47c:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    e480:	f2c0 0001 	movt	r0, #1
    e484:	6801      	ldr	r1, [r0, #0]
    e486:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    e48a:	f008 fc23 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e48e:	90c3      	str	r0, [sp, #780]	; 0x30c
    e490:	e01f      	b.n	e4d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x11ea>
    e492:	2001      	movs	r0, #1
    e494:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    e498:	e015      	b.n	e4c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x11de>
    e49a:	2000      	movs	r0, #0
    e49c:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    e4a0:	e011      	b.n	e4c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x11de>
    e4a2:	2000      	movs	r0, #0
    e4a4:	f88d 0e03 	strb.w	r0, [sp, #3587]	; 0xe03
    e4a8:	f89d 1e03 	ldrb.w	r1, [sp, #3587]	; 0xe03
    e4ac:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e4b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e4b4:	f002 ffbd 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e4b8:	f8cd 0e04 	str.w	r0, [sp, #3588]	; 0xe04
    e4bc:	f8dd 0e04 	ldr.w	r0, [sp, #3588]	; 0xe04
    e4c0:	f8cd 0764 	str.w	r0, [sp, #1892]	; 0x764
    e4c4:	e00a      	b.n	e4dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x11f4>
    e4c6:	f89d 0763 	ldrb.w	r0, [sp, #1891]	; 0x763
    e4ca:	07c0      	lsls	r0, r0, #31
    e4cc:	2800      	cmp	r0, #0
    e4ce:	d112      	bne.n	e4f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x120e>
    e4d0:	e055      	b.n	e57e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1296>
    e4d2:	98c3      	ldr	r0, [sp, #780]	; 0x30c
    e4d4:	07c1      	lsls	r1, r0, #31
    e4d6:	2900      	cmp	r1, #0
    e4d8:	d1e3      	bne.n	e4a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x11ba>
    e4da:	e7de      	b.n	e49a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x11b2>
    e4dc:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    e4e0:	f20d 7164 	addw	r1, sp, #1892	; 0x764
    e4e4:	f008 fbf6 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e4e8:	90c2      	str	r0, [sp, #776]	; 0x308
    e4ea:	e7ff      	b.n	e4ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1204>
    e4ec:	98c2      	ldr	r0, [sp, #776]	; 0x308
    e4ee:	07c1      	lsls	r1, r0, #31
    e4f0:	2900      	cmp	r1, #0
    e4f2:	d1ce      	bne.n	e492 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x11aa>
    e4f4:	e7d1      	b.n	e49a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x11b2>
                trace!("[{:04x}] OR Vx, Vy", self.pc);
    e4f6:	f64f 7024 	movw	r0, #65316	; 0xff24
    e4fa:	f2c0 0001 	movt	r0, #1
    e4fe:	6801      	ldr	r1, [r0, #0]
    e500:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e504:	f100 0212 	add.w	r2, r0, #18
    e508:	f8cd 2788 	str.w	r2, [sp, #1928]	; 0x788
    e50c:	f8dd 2788 	ldr.w	r2, [sp, #1928]	; 0x788
    e510:	f8cd 2d50 	str.w	r2, [sp, #3408]	; 0xd50
    e514:	f249 13f3 	movw	r3, #37363	; 0x91f3
    e518:	f2c0 0301 	movt	r3, #1
    e51c:	4610      	mov	r0, r2
    e51e:	91c1      	str	r1, [sp, #772]	; 0x304
    e520:	4619      	mov	r1, r3
    e522:	f7fc f959 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e526:	90c0      	str	r0, [sp, #768]	; 0x300
    e528:	91bf      	str	r1, [sp, #764]	; 0x2fc
    e52a:	e7ff      	b.n	e52c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1244>
    e52c:	98c0      	ldr	r0, [sp, #768]	; 0x300
    e52e:	f8cd 0780 	str.w	r0, [sp, #1920]	; 0x780
    e532:	99bf      	ldr	r1, [sp, #764]	; 0x2fc
    e534:	f8cd 1784 	str.w	r1, [sp, #1924]	; 0x784
    e538:	f24f 5238 	movw	r2, #62776	; 0xf538
    e53c:	f2c0 0201 	movt	r2, #1
    e540:	6812      	ldr	r2, [r2, #0]
    e542:	466b      	mov	r3, sp
    e544:	f04f 0c01 	mov.w	ip, #1
    e548:	f8c3 c008 	str.w	ip, [r3, #8]
    e54c:	605a      	str	r2, [r3, #4]
    e54e:	f8c3 c000 	str.w	ip, [r3]
    e552:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    e556:	2202      	movs	r2, #2
    e558:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
    e55c:	99c1      	ldr	r1, [sp, #772]	; 0x304
    e55e:	f008 fa7e 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e562:	e7ff      	b.n	e564 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x127c>
    e564:	f8dd 175c 	ldr.w	r1, [sp, #1884]	; 0x75c
    e568:	f64f 7044 	movw	r0, #65348	; 0xff44
    e56c:	f2c0 0001 	movt	r0, #1
    e570:	6802      	ldr	r2, [r0, #0]
    e572:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    e576:	f003 ff8b 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e57a:	e7ff      	b.n	e57c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1294>
    e57c:	e7ff      	b.n	e57e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1296>
                self.v[x] |= self.v[y];
    e57e:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e582:	280f      	cmp	r0, #15
    e584:	f202 83e2 	bhi.w	10d4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3a64>
    e588:	e7ff      	b.n	e58a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x12a2>
    e58a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e58e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e592:	1842      	adds	r2, r0, r1
    e594:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e598:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e59c:	2b0f      	cmp	r3, #15
    e59e:	92be      	str	r2, [sp, #760]	; 0x2f8
    e5a0:	f202 83de 	bhi.w	10d60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3a78>
    e5a4:	e7ff      	b.n	e5a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x12be>
    e5a6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e5aa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e5ae:	1842      	adds	r2, r0, r1
    e5b0:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e5b4:	f8dd c2f8 	ldr.w	ip, [sp, #760]	; 0x2f8
    e5b8:	ea43 030c 	orr.w	r3, r3, ip
    e5bc:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e5c0:	f002 b95f 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    e5c4:	2005      	movs	r0, #5
    e5c6:	f8cd 078c 	str.w	r0, [sp, #1932]	; 0x78c
    e5ca:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    e5ce:	f2c0 0001 	movt	r0, #1
    e5d2:	6801      	ldr	r1, [r0, #0]
    e5d4:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    e5d8:	f008 fb7c 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e5dc:	90bd      	str	r0, [sp, #756]	; 0x2f4
    e5de:	e01f      	b.n	e620 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1338>
    e5e0:	2001      	movs	r0, #1
    e5e2:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    e5e6:	e015      	b.n	e614 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x132c>
    e5e8:	2000      	movs	r0, #0
    e5ea:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    e5ee:	e011      	b.n	e614 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x132c>
    e5f0:	2000      	movs	r0, #0
    e5f2:	f88d 0e0b 	strb.w	r0, [sp, #3595]	; 0xe0b
    e5f6:	f89d 1e0b 	ldrb.w	r1, [sp, #3595]	; 0xe0b
    e5fa:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e5fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e602:	f002 ff16 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e606:	f8cd 0e0c 	str.w	r0, [sp, #3596]	; 0xe0c
    e60a:	f8dd 0e0c 	ldr.w	r0, [sp, #3596]	; 0xe0c
    e60e:	f8cd 0794 	str.w	r0, [sp, #1940]	; 0x794
    e612:	e00a      	b.n	e62a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1342>
    e614:	f89d 0793 	ldrb.w	r0, [sp, #1939]	; 0x793
    e618:	07c0      	lsls	r0, r0, #31
    e61a:	2800      	cmp	r0, #0
    e61c:	d112      	bne.n	e644 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x135c>
    e61e:	e055      	b.n	e6cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x13e4>
    e620:	98bd      	ldr	r0, [sp, #756]	; 0x2f4
    e622:	07c1      	lsls	r1, r0, #31
    e624:	2900      	cmp	r1, #0
    e626:	d1e3      	bne.n	e5f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1308>
    e628:	e7de      	b.n	e5e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1300>
    e62a:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    e62e:	f20d 7194 	addw	r1, sp, #1940	; 0x794
    e632:	f008 fb4f 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e636:	90bc      	str	r0, [sp, #752]	; 0x2f0
    e638:	e7ff      	b.n	e63a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1352>
    e63a:	98bc      	ldr	r0, [sp, #752]	; 0x2f0
    e63c:	07c1      	lsls	r1, r0, #31
    e63e:	2900      	cmp	r1, #0
    e640:	d1ce      	bne.n	e5e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x12f8>
    e642:	e7d1      	b.n	e5e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1300>
                trace!("[{:04x}] AND Vx, Vy", self.pc);
    e644:	f64f 60c4 	movw	r0, #65220	; 0xfec4
    e648:	f2c0 0001 	movt	r0, #1
    e64c:	6801      	ldr	r1, [r0, #0]
    e64e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e652:	f100 0212 	add.w	r2, r0, #18
    e656:	f8cd 27b8 	str.w	r2, [sp, #1976]	; 0x7b8
    e65a:	f8dd 27b8 	ldr.w	r2, [sp, #1976]	; 0x7b8
    e65e:	f8cd 2d4c 	str.w	r2, [sp, #3404]	; 0xd4c
    e662:	f249 13f3 	movw	r3, #37363	; 0x91f3
    e666:	f2c0 0301 	movt	r3, #1
    e66a:	4610      	mov	r0, r2
    e66c:	91bb      	str	r1, [sp, #748]	; 0x2ec
    e66e:	4619      	mov	r1, r3
    e670:	f7fc f8b2 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e674:	90ba      	str	r0, [sp, #744]	; 0x2e8
    e676:	91b9      	str	r1, [sp, #740]	; 0x2e4
    e678:	e7ff      	b.n	e67a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1392>
    e67a:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
    e67c:	f8cd 07b0 	str.w	r0, [sp, #1968]	; 0x7b0
    e680:	99b9      	ldr	r1, [sp, #740]	; 0x2e4
    e682:	f8cd 17b4 	str.w	r1, [sp, #1972]	; 0x7b4
    e686:	f24f 5238 	movw	r2, #62776	; 0xf538
    e68a:	f2c0 0201 	movt	r2, #1
    e68e:	6812      	ldr	r2, [r2, #0]
    e690:	466b      	mov	r3, sp
    e692:	f04f 0c01 	mov.w	ip, #1
    e696:	f8c3 c008 	str.w	ip, [r3, #8]
    e69a:	605a      	str	r2, [r3, #4]
    e69c:	f8c3 c000 	str.w	ip, [r3]
    e6a0:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    e6a4:	2202      	movs	r2, #2
    e6a6:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
    e6aa:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
    e6ac:	f008 f9d7 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e6b0:	e7ff      	b.n	e6b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x13ca>
    e6b2:	f8dd 178c 	ldr.w	r1, [sp, #1932]	; 0x78c
    e6b6:	f64f 60e4 	movw	r0, #65252	; 0xfee4
    e6ba:	f2c0 0001 	movt	r0, #1
    e6be:	6802      	ldr	r2, [r0, #0]
    e6c0:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    e6c4:	f003 fee4 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e6c8:	e7ff      	b.n	e6ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x13e2>
    e6ca:	e7ff      	b.n	e6cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x13e4>
                self.v[x] &= self.v[y];
    e6cc:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e6d0:	280f      	cmp	r0, #15
    e6d2:	f202 8327 	bhi.w	10d24 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3a3c>
    e6d6:	e7ff      	b.n	e6d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x13f0>
    e6d8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e6dc:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e6e0:	1842      	adds	r2, r0, r1
    e6e2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e6e6:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e6ea:	2b0f      	cmp	r3, #15
    e6ec:	92b8      	str	r2, [sp, #736]	; 0x2e0
    e6ee:	f202 8323 	bhi.w	10d38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3a50>
    e6f2:	e7ff      	b.n	e6f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x140c>
    e6f4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e6f8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e6fc:	1842      	adds	r2, r0, r1
    e6fe:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e702:	f8dd c2e0 	ldr.w	ip, [sp, #736]	; 0x2e0
    e706:	ea03 030c 	and.w	r3, r3, ip
    e70a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e70e:	f002 b8b8 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    e712:	2005      	movs	r0, #5
    e714:	f8cd 07bc 	str.w	r0, [sp, #1980]	; 0x7bc
    e718:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    e71c:	f2c0 0001 	movt	r0, #1
    e720:	6801      	ldr	r1, [r0, #0]
    e722:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    e726:	f008 fad5 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e72a:	90b7      	str	r0, [sp, #732]	; 0x2dc
    e72c:	e01f      	b.n	e76e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1486>
    e72e:	2001      	movs	r0, #1
    e730:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    e734:	e015      	b.n	e762 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x147a>
    e736:	2000      	movs	r0, #0
    e738:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    e73c:	e011      	b.n	e762 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x147a>
    e73e:	2000      	movs	r0, #0
    e740:	f88d 0e13 	strb.w	r0, [sp, #3603]	; 0xe13
    e744:	f89d 1e13 	ldrb.w	r1, [sp, #3603]	; 0xe13
    e748:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e74c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e750:	f002 fe6f 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e754:	f8cd 0e14 	str.w	r0, [sp, #3604]	; 0xe14
    e758:	f8dd 0e14 	ldr.w	r0, [sp, #3604]	; 0xe14
    e75c:	f8cd 07c4 	str.w	r0, [sp, #1988]	; 0x7c4
    e760:	e00a      	b.n	e778 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1490>
    e762:	f89d 07c3 	ldrb.w	r0, [sp, #1987]	; 0x7c3
    e766:	07c0      	lsls	r0, r0, #31
    e768:	2800      	cmp	r0, #0
    e76a:	d112      	bne.n	e792 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x14aa>
    e76c:	e055      	b.n	e81a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1532>
    e76e:	98b7      	ldr	r0, [sp, #732]	; 0x2dc
    e770:	07c1      	lsls	r1, r0, #31
    e772:	2900      	cmp	r1, #0
    e774:	d1e3      	bne.n	e73e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1456>
    e776:	e7de      	b.n	e736 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x144e>
    e778:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    e77c:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
    e780:	f008 faa8 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e784:	90b6      	str	r0, [sp, #728]	; 0x2d8
    e786:	e7ff      	b.n	e788 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x14a0>
    e788:	98b6      	ldr	r0, [sp, #728]	; 0x2d8
    e78a:	07c1      	lsls	r1, r0, #31
    e78c:	2900      	cmp	r1, #0
    e78e:	d1ce      	bne.n	e72e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1446>
    e790:	e7d1      	b.n	e736 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x144e>
                trace!("[{:04x}] XOR Vx, Vy", self.pc);
    e792:	f64f 6064 	movw	r0, #65124	; 0xfe64
    e796:	f2c0 0001 	movt	r0, #1
    e79a:	6801      	ldr	r1, [r0, #0]
    e79c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e7a0:	f100 0212 	add.w	r2, r0, #18
    e7a4:	f8cd 27e8 	str.w	r2, [sp, #2024]	; 0x7e8
    e7a8:	f8dd 27e8 	ldr.w	r2, [sp, #2024]	; 0x7e8
    e7ac:	f8cd 2d48 	str.w	r2, [sp, #3400]	; 0xd48
    e7b0:	f249 13f3 	movw	r3, #37363	; 0x91f3
    e7b4:	f2c0 0301 	movt	r3, #1
    e7b8:	4610      	mov	r0, r2
    e7ba:	91b5      	str	r1, [sp, #724]	; 0x2d4
    e7bc:	4619      	mov	r1, r3
    e7be:	f7fc f80b 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e7c2:	90b4      	str	r0, [sp, #720]	; 0x2d0
    e7c4:	91b3      	str	r1, [sp, #716]	; 0x2cc
    e7c6:	e7ff      	b.n	e7c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x14e0>
    e7c8:	98b4      	ldr	r0, [sp, #720]	; 0x2d0
    e7ca:	f8cd 07e0 	str.w	r0, [sp, #2016]	; 0x7e0
    e7ce:	99b3      	ldr	r1, [sp, #716]	; 0x2cc
    e7d0:	f8cd 17e4 	str.w	r1, [sp, #2020]	; 0x7e4
    e7d4:	f24f 5238 	movw	r2, #62776	; 0xf538
    e7d8:	f2c0 0201 	movt	r2, #1
    e7dc:	6812      	ldr	r2, [r2, #0]
    e7de:	466b      	mov	r3, sp
    e7e0:	f04f 0c01 	mov.w	ip, #1
    e7e4:	f8c3 c008 	str.w	ip, [r3, #8]
    e7e8:	605a      	str	r2, [r3, #4]
    e7ea:	f8c3 c000 	str.w	ip, [r3]
    e7ee:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    e7f2:	2202      	movs	r2, #2
    e7f4:	f50d 63fc 	add.w	r3, sp, #2016	; 0x7e0
    e7f8:	99b5      	ldr	r1, [sp, #724]	; 0x2d4
    e7fa:	f008 f930 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e7fe:	e7ff      	b.n	e800 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1518>
    e800:	f8dd 17bc 	ldr.w	r1, [sp, #1980]	; 0x7bc
    e804:	f64f 6084 	movw	r0, #65156	; 0xfe84
    e808:	f2c0 0001 	movt	r0, #1
    e80c:	6802      	ldr	r2, [r0, #0]
    e80e:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    e812:	f003 fe3d 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e816:	e7ff      	b.n	e818 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1530>
    e818:	e7ff      	b.n	e81a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1532>
                self.v[x] ^= self.v[y];
    e81a:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e81e:	280f      	cmp	r0, #15
    e820:	f202 826c 	bhi.w	10cfc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3a14>
    e824:	e7ff      	b.n	e826 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x153e>
    e826:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e82a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e82e:	1842      	adds	r2, r0, r1
    e830:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e834:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e838:	2b0f      	cmp	r3, #15
    e83a:	92b2      	str	r2, [sp, #712]	; 0x2c8
    e83c:	f202 8268 	bhi.w	10d10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3a28>
    e840:	e7ff      	b.n	e842 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x155a>
    e842:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e846:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e84a:	1842      	adds	r2, r0, r1
    e84c:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e850:	f8dd c2c8 	ldr.w	ip, [sp, #712]	; 0x2c8
    e854:	ea83 030c 	eor.w	r3, r3, ip
    e858:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e85c:	f002 b811 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    e860:	2005      	movs	r0, #5
    e862:	f8cd 07ec 	str.w	r0, [sp, #2028]	; 0x7ec
    e866:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    e86a:	f2c0 0001 	movt	r0, #1
    e86e:	6801      	ldr	r1, [r0, #0]
    e870:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    e874:	f008 fa2e 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e878:	90b1      	str	r0, [sp, #708]	; 0x2c4
    e87a:	e01f      	b.n	e8bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x15d4>
    e87c:	2001      	movs	r0, #1
    e87e:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    e882:	e015      	b.n	e8b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x15c8>
    e884:	2000      	movs	r0, #0
    e886:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    e88a:	e011      	b.n	e8b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x15c8>
    e88c:	2000      	movs	r0, #0
    e88e:	f88d 0e1b 	strb.w	r0, [sp, #3611]	; 0xe1b
    e892:	f89d 1e1b 	ldrb.w	r1, [sp, #3611]	; 0xe1b
    e896:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e89a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e89e:	f002 fdc8 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e8a2:	f8cd 0e1c 	str.w	r0, [sp, #3612]	; 0xe1c
    e8a6:	f8dd 0e1c 	ldr.w	r0, [sp, #3612]	; 0xe1c
    e8aa:	f8cd 07f4 	str.w	r0, [sp, #2036]	; 0x7f4
    e8ae:	e00a      	b.n	e8c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x15de>
    e8b0:	f89d 07f3 	ldrb.w	r0, [sp, #2035]	; 0x7f3
    e8b4:	07c0      	lsls	r0, r0, #31
    e8b6:	2800      	cmp	r0, #0
    e8b8:	d112      	bne.n	e8e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x15f8>
    e8ba:	e055      	b.n	e968 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1680>
    e8bc:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
    e8be:	07c1      	lsls	r1, r0, #31
    e8c0:	2900      	cmp	r1, #0
    e8c2:	d1e3      	bne.n	e88c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x15a4>
    e8c4:	e7de      	b.n	e884 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x159c>
    e8c6:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    e8ca:	f20d 71f4 	addw	r1, sp, #2036	; 0x7f4
    e8ce:	f008 fa01 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e8d2:	90b0      	str	r0, [sp, #704]	; 0x2c0
    e8d4:	e7ff      	b.n	e8d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x15ee>
    e8d6:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
    e8d8:	07c1      	lsls	r1, r0, #31
    e8da:	2900      	cmp	r1, #0
    e8dc:	d1ce      	bne.n	e87c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1594>
    e8de:	e7d1      	b.n	e884 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x159c>
                trace!("[{:04x}] ADD Vx, Vy", self.pc);
    e8e0:	f64f 50f4 	movw	r0, #65012	; 0xfdf4
    e8e4:	f2c0 0001 	movt	r0, #1
    e8e8:	6801      	ldr	r1, [r0, #0]
    e8ea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e8ee:	f100 0212 	add.w	r2, r0, #18
    e8f2:	f8cd 2818 	str.w	r2, [sp, #2072]	; 0x818
    e8f6:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
    e8fa:	f8cd 2d40 	str.w	r2, [sp, #3392]	; 0xd40
    e8fe:	f249 13f3 	movw	r3, #37363	; 0x91f3
    e902:	f2c0 0301 	movt	r3, #1
    e906:	4610      	mov	r0, r2
    e908:	91af      	str	r1, [sp, #700]	; 0x2bc
    e90a:	4619      	mov	r1, r3
    e90c:	f7fb ff64 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e910:	90ae      	str	r0, [sp, #696]	; 0x2b8
    e912:	91ad      	str	r1, [sp, #692]	; 0x2b4
    e914:	e7ff      	b.n	e916 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x162e>
    e916:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
    e918:	f8cd 0810 	str.w	r0, [sp, #2064]	; 0x810
    e91c:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
    e91e:	f8cd 1814 	str.w	r1, [sp, #2068]	; 0x814
    e922:	f24f 5238 	movw	r2, #62776	; 0xf538
    e926:	f2c0 0201 	movt	r2, #1
    e92a:	6812      	ldr	r2, [r2, #0]
    e92c:	466b      	mov	r3, sp
    e92e:	f04f 0c01 	mov.w	ip, #1
    e932:	f8c3 c008 	str.w	ip, [r3, #8]
    e936:	605a      	str	r2, [r3, #4]
    e938:	f8c3 c000 	str.w	ip, [r3]
    e93c:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    e940:	2202      	movs	r2, #2
    e942:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
    e946:	99af      	ldr	r1, [sp, #700]	; 0x2bc
    e948:	f008 f889 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e94c:	e7ff      	b.n	e94e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1666>
    e94e:	f8dd 17ec 	ldr.w	r1, [sp, #2028]	; 0x7ec
    e952:	f64f 6014 	movw	r0, #65044	; 0xfe14
    e956:	f2c0 0001 	movt	r0, #1
    e95a:	6802      	ldr	r2, [r0, #0]
    e95c:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    e960:	f003 fd96 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e964:	e7ff      	b.n	e966 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x167e>
    e966:	e7ff      	b.n	e968 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1680>
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    e968:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e96c:	280f      	cmp	r0, #15
    e96e:	f202 81a7 	bhi.w	10cc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x39d8>
    e972:	e7ff      	b.n	e974 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x168c>
    e974:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e978:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e97c:	1842      	adds	r2, r0, r1
    e97e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e982:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    e986:	2b0f      	cmp	r3, #15
    e988:	92ac      	str	r2, [sp, #688]	; 0x2b0
    e98a:	f202 81a3 	bhi.w	10cd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x39ec>
    e98e:	e7ff      	b.n	e990 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x16a8>
    e990:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e994:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e998:	1842      	adds	r2, r0, r1
    e99a:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    e99e:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
    e9a0:	f008 f907 	bl	16bb2 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>
    e9a4:	90ab      	str	r0, [sp, #684]	; 0x2ac
    e9a6:	91aa      	str	r1, [sp, #680]	; 0x2a8
    e9a8:	e7ff      	b.n	e9aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x16c2>
    e9aa:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
    e9ac:	f88d 0d46 	strb.w	r0, [sp, #3398]	; 0xd46
    e9b0:	99aa      	ldr	r1, [sp, #680]	; 0x2a8
    e9b2:	f001 0201 	and.w	r2, r1, #1
    e9b6:	f88d 2d47 	strb.w	r2, [sp, #3399]	; 0xd47
                self.v[x] = v;
    e9ba:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    e9be:	2a0f      	cmp	r2, #15
    e9c0:	f202 8192 	bhi.w	10ce8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3a00>
    e9c4:	e7ff      	b.n	e9c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x16de>
    e9c6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e9ca:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e9ce:	1842      	adds	r2, r0, r1
    e9d0:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
    e9d2:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                self.v[0xf] = c as u8;
    e9d6:	9aaa      	ldr	r2, [sp, #680]	; 0x2a8
    e9d8:	f002 0c01 	and.w	ip, r2, #1
    e9dc:	f880 c043 	strb.w	ip, [r0, #67]	; 0x43
        match (
    e9e0:	f001 bf4f 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    e9e4:	2005      	movs	r0, #5
    e9e6:	f8cd 081c 	str.w	r0, [sp, #2076]	; 0x81c
    e9ea:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    e9ee:	f2c0 0001 	movt	r0, #1
    e9f2:	6801      	ldr	r1, [r0, #0]
    e9f4:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    e9f8:	f008 f96c 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e9fc:	90a9      	str	r0, [sp, #676]	; 0x2a4
    e9fe:	e01f      	b.n	ea40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1758>
    ea00:	2001      	movs	r0, #1
    ea02:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    ea06:	e015      	b.n	ea34 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x174c>
    ea08:	2000      	movs	r0, #0
    ea0a:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    ea0e:	e011      	b.n	ea34 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x174c>
    ea10:	2000      	movs	r0, #0
    ea12:	f88d 0e23 	strb.w	r0, [sp, #3619]	; 0xe23
    ea16:	f89d 1e23 	ldrb.w	r1, [sp, #3619]	; 0xe23
    ea1a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ea1e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ea22:	f002 fd06 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ea26:	f8cd 0e24 	str.w	r0, [sp, #3620]	; 0xe24
    ea2a:	f8dd 0e24 	ldr.w	r0, [sp, #3620]	; 0xe24
    ea2e:	f8cd 0824 	str.w	r0, [sp, #2084]	; 0x824
    ea32:	e00a      	b.n	ea4a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1762>
    ea34:	f89d 0823 	ldrb.w	r0, [sp, #2083]	; 0x823
    ea38:	07c0      	lsls	r0, r0, #31
    ea3a:	2800      	cmp	r0, #0
    ea3c:	d112      	bne.n	ea64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x177c>
    ea3e:	e055      	b.n	eaec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1804>
    ea40:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
    ea42:	07c1      	lsls	r1, r0, #31
    ea44:	2900      	cmp	r1, #0
    ea46:	d1e3      	bne.n	ea10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1728>
    ea48:	e7de      	b.n	ea08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1720>
    ea4a:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    ea4e:	f60d 0124 	addw	r1, sp, #2084	; 0x824
    ea52:	f008 f93f 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ea56:	90a8      	str	r0, [sp, #672]	; 0x2a0
    ea58:	e7ff      	b.n	ea5a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1772>
    ea5a:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
    ea5c:	07c1      	lsls	r1, r0, #31
    ea5e:	2900      	cmp	r1, #0
    ea60:	d1ce      	bne.n	ea00 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1718>
    ea62:	e7d1      	b.n	ea08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1720>
                trace!("[{:04x}] SUB Vx, Vy", self.pc);
    ea64:	f64f 5084 	movw	r0, #64900	; 0xfd84
    ea68:	f2c0 0001 	movt	r0, #1
    ea6c:	6801      	ldr	r1, [r0, #0]
    ea6e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ea72:	f100 0212 	add.w	r2, r0, #18
    ea76:	f8cd 2848 	str.w	r2, [sp, #2120]	; 0x848
    ea7a:	f8dd 2848 	ldr.w	r2, [sp, #2120]	; 0x848
    ea7e:	f8cd 2d38 	str.w	r2, [sp, #3384]	; 0xd38
    ea82:	f249 13f3 	movw	r3, #37363	; 0x91f3
    ea86:	f2c0 0301 	movt	r3, #1
    ea8a:	4610      	mov	r0, r2
    ea8c:	91a7      	str	r1, [sp, #668]	; 0x29c
    ea8e:	4619      	mov	r1, r3
    ea90:	f7fb fea2 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ea94:	90a6      	str	r0, [sp, #664]	; 0x298
    ea96:	91a5      	str	r1, [sp, #660]	; 0x294
    ea98:	e7ff      	b.n	ea9a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x17b2>
    ea9a:	98a6      	ldr	r0, [sp, #664]	; 0x298
    ea9c:	f8cd 0840 	str.w	r0, [sp, #2112]	; 0x840
    eaa0:	99a5      	ldr	r1, [sp, #660]	; 0x294
    eaa2:	f8cd 1844 	str.w	r1, [sp, #2116]	; 0x844
    eaa6:	f24f 5238 	movw	r2, #62776	; 0xf538
    eaaa:	f2c0 0201 	movt	r2, #1
    eaae:	6812      	ldr	r2, [r2, #0]
    eab0:	466b      	mov	r3, sp
    eab2:	f04f 0c01 	mov.w	ip, #1
    eab6:	f8c3 c008 	str.w	ip, [r3, #8]
    eaba:	605a      	str	r2, [r3, #4]
    eabc:	f8c3 c000 	str.w	ip, [r3]
    eac0:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    eac4:	2202      	movs	r2, #2
    eac6:	f50d 6304 	add.w	r3, sp, #2112	; 0x840
    eaca:	99a7      	ldr	r1, [sp, #668]	; 0x29c
    eacc:	f007 ffc7 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ead0:	e7ff      	b.n	ead2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x17ea>
    ead2:	f8dd 181c 	ldr.w	r1, [sp, #2076]	; 0x81c
    ead6:	f64f 50a4 	movw	r0, #64932	; 0xfda4
    eada:	f2c0 0001 	movt	r0, #1
    eade:	6802      	ldr	r2, [r0, #0]
    eae0:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    eae4:	f003 fcd4 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    eae8:	e7ff      	b.n	eaea <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1802>
    eaea:	e7ff      	b.n	eaec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1804>
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    eaec:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    eaf0:	280f      	cmp	r0, #15
    eaf2:	f202 80c7 	bhi.w	10c84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x399c>
    eaf6:	e7ff      	b.n	eaf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1810>
    eaf8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eafc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eb00:	1842      	adds	r2, r0, r1
    eb02:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    eb06:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    eb0a:	2b0f      	cmp	r3, #15
    eb0c:	92a4      	str	r2, [sp, #656]	; 0x290
    eb0e:	f202 80c3 	bhi.w	10c98 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x39b0>
    eb12:	e7ff      	b.n	eb14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x182c>
    eb14:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eb18:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    eb1c:	1842      	adds	r2, r0, r1
    eb1e:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    eb22:	98a4      	ldr	r0, [sp, #656]	; 0x290
    eb24:	f008 f870 	bl	16c08 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>
    eb28:	90a3      	str	r0, [sp, #652]	; 0x28c
    eb2a:	91a2      	str	r1, [sp, #648]	; 0x288
    eb2c:	e7ff      	b.n	eb2e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1846>
    eb2e:	98a3      	ldr	r0, [sp, #652]	; 0x28c
    eb30:	f88d 0d3e 	strb.w	r0, [sp, #3390]	; 0xd3e
    eb34:	99a2      	ldr	r1, [sp, #648]	; 0x288
    eb36:	f001 0201 	and.w	r2, r1, #1
    eb3a:	f88d 2d3f 	strb.w	r2, [sp, #3391]	; 0xd3f
                self.v[x] = v;
    eb3e:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    eb42:	2a0f      	cmp	r2, #15
    eb44:	f202 80b2 	bhi.w	10cac <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x39c4>
    eb48:	e7ff      	b.n	eb4a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1862>
    eb4a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eb4e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eb52:	1842      	adds	r2, r0, r1
    eb54:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    eb56:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    eb5a:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    eb5c:	f8dd c288 	ldr.w	ip, [sp, #648]	; 0x288
    eb60:	ea22 020c 	bic.w	r2, r2, ip
    eb64:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    eb68:	f001 be8b 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    eb6c:	2005      	movs	r0, #5
    eb6e:	f8cd 084c 	str.w	r0, [sp, #2124]	; 0x84c
    eb72:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    eb76:	f2c0 0001 	movt	r0, #1
    eb7a:	6801      	ldr	r1, [r0, #0]
    eb7c:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    eb80:	f008 f8a8 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eb84:	90a1      	str	r0, [sp, #644]	; 0x284
    eb86:	e01f      	b.n	ebc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x18e0>
    eb88:	2001      	movs	r0, #1
    eb8a:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    eb8e:	e015      	b.n	ebbc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x18d4>
    eb90:	2000      	movs	r0, #0
    eb92:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    eb96:	e011      	b.n	ebbc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x18d4>
    eb98:	2000      	movs	r0, #0
    eb9a:	f88d 0e2b 	strb.w	r0, [sp, #3627]	; 0xe2b
    eb9e:	f89d 1e2b 	ldrb.w	r1, [sp, #3627]	; 0xe2b
    eba2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    eba6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ebaa:	f002 fc42 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ebae:	f8cd 0e2c 	str.w	r0, [sp, #3628]	; 0xe2c
    ebb2:	f8dd 0e2c 	ldr.w	r0, [sp, #3628]	; 0xe2c
    ebb6:	f8cd 0854 	str.w	r0, [sp, #2132]	; 0x854
    ebba:	e00a      	b.n	ebd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x18ea>
    ebbc:	f89d 0853 	ldrb.w	r0, [sp, #2131]	; 0x853
    ebc0:	07c0      	lsls	r0, r0, #31
    ebc2:	2800      	cmp	r0, #0
    ebc4:	d112      	bne.n	ebec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1904>
    ebc6:	e055      	b.n	ec74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x198c>
    ebc8:	98a1      	ldr	r0, [sp, #644]	; 0x284
    ebca:	07c1      	lsls	r1, r0, #31
    ebcc:	2900      	cmp	r1, #0
    ebce:	d1e3      	bne.n	eb98 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x18b0>
    ebd0:	e7de      	b.n	eb90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x18a8>
    ebd2:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    ebd6:	f60d 0154 	addw	r1, sp, #2132	; 0x854
    ebda:	f008 f87b 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ebde:	90a0      	str	r0, [sp, #640]	; 0x280
    ebe0:	e7ff      	b.n	ebe2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x18fa>
    ebe2:	98a0      	ldr	r0, [sp, #640]	; 0x280
    ebe4:	07c1      	lsls	r1, r0, #31
    ebe6:	2900      	cmp	r1, #0
    ebe8:	d1ce      	bne.n	eb88 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x18a0>
    ebea:	e7d1      	b.n	eb90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x18a8>
                trace!("[{:04x}] SHR Vx, Vy", self.pc);
    ebec:	f64f 5014 	movw	r0, #64788	; 0xfd14
    ebf0:	f2c0 0001 	movt	r0, #1
    ebf4:	6801      	ldr	r1, [r0, #0]
    ebf6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ebfa:	f100 0212 	add.w	r2, r0, #18
    ebfe:	f8cd 2878 	str.w	r2, [sp, #2168]	; 0x878
    ec02:	f8dd 2878 	ldr.w	r2, [sp, #2168]	; 0x878
    ec06:	f8cd 2d34 	str.w	r2, [sp, #3380]	; 0xd34
    ec0a:	f249 13f3 	movw	r3, #37363	; 0x91f3
    ec0e:	f2c0 0301 	movt	r3, #1
    ec12:	4610      	mov	r0, r2
    ec14:	919f      	str	r1, [sp, #636]	; 0x27c
    ec16:	4619      	mov	r1, r3
    ec18:	f7fb fdde 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ec1c:	909e      	str	r0, [sp, #632]	; 0x278
    ec1e:	919d      	str	r1, [sp, #628]	; 0x274
    ec20:	e7ff      	b.n	ec22 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x193a>
    ec22:	989e      	ldr	r0, [sp, #632]	; 0x278
    ec24:	f8cd 0870 	str.w	r0, [sp, #2160]	; 0x870
    ec28:	999d      	ldr	r1, [sp, #628]	; 0x274
    ec2a:	f8cd 1874 	str.w	r1, [sp, #2164]	; 0x874
    ec2e:	f24f 5238 	movw	r2, #62776	; 0xf538
    ec32:	f2c0 0201 	movt	r2, #1
    ec36:	6812      	ldr	r2, [r2, #0]
    ec38:	466b      	mov	r3, sp
    ec3a:	f04f 0c01 	mov.w	ip, #1
    ec3e:	f8c3 c008 	str.w	ip, [r3, #8]
    ec42:	605a      	str	r2, [r3, #4]
    ec44:	f8c3 c000 	str.w	ip, [r3]
    ec48:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    ec4c:	2202      	movs	r2, #2
    ec4e:	f50d 6307 	add.w	r3, sp, #2160	; 0x870
    ec52:	999f      	ldr	r1, [sp, #636]	; 0x27c
    ec54:	f007 ff03 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ec58:	e7ff      	b.n	ec5a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1972>
    ec5a:	f8dd 184c 	ldr.w	r1, [sp, #2124]	; 0x84c
    ec5e:	f64f 5034 	movw	r0, #64820	; 0xfd34
    ec62:	f2c0 0001 	movt	r0, #1
    ec66:	6802      	ldr	r2, [r0, #0]
    ec68:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    ec6c:	f003 fc10 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ec70:	e7ff      	b.n	ec72 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x198a>
    ec72:	e7ff      	b.n	ec74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x198c>
                self.v[0xf] = self.v[x] & 1;
    ec74:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ec78:	280f      	cmp	r0, #15
    ec7a:	f201 87e5 	bhi.w	10c48 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3960>
    ec7e:	e7ff      	b.n	ec80 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1998>
    ec80:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ec84:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ec88:	1842      	adds	r2, r0, r1
    ec8a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ec8e:	f002 0201 	and.w	r2, r2, #1
    ec92:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shr(1);
    ec96:	290f      	cmp	r1, #15
    ec98:	f201 87e0 	bhi.w	10c5c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3974>
    ec9c:	e7ff      	b.n	ec9e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x19b6>
    ec9e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eca2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eca6:	1842      	adds	r2, r0, r1
    eca8:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    ecac:	2101      	movs	r1, #1
    ecae:	f007 ff5c 	bl	16b6a <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E>
    ecb2:	909c      	str	r0, [sp, #624]	; 0x270
    ecb4:	e7ff      	b.n	ecb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x19ce>
    ecb6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ecba:	280f      	cmp	r0, #15
    ecbc:	f201 87d8 	bhi.w	10c70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3988>
    ecc0:	e7ff      	b.n	ecc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x19da>
    ecc2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ecc6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ecca:	1842      	adds	r2, r0, r1
    eccc:	9b9c      	ldr	r3, [sp, #624]	; 0x270
    ecce:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ecd2:	f001 bdd6 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    ecd6:	2005      	movs	r0, #5
    ecd8:	f8cd 087c 	str.w	r0, [sp, #2172]	; 0x87c
    ecdc:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    ece0:	f2c0 0001 	movt	r0, #1
    ece4:	6801      	ldr	r1, [r0, #0]
    ece6:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    ecea:	f007 fff3 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ecee:	909b      	str	r0, [sp, #620]	; 0x26c
    ecf0:	e01f      	b.n	ed32 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1a4a>
    ecf2:	2001      	movs	r0, #1
    ecf4:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    ecf8:	e015      	b.n	ed26 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1a3e>
    ecfa:	2000      	movs	r0, #0
    ecfc:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    ed00:	e011      	b.n	ed26 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1a3e>
    ed02:	2000      	movs	r0, #0
    ed04:	f88d 0e33 	strb.w	r0, [sp, #3635]	; 0xe33
    ed08:	f89d 1e33 	ldrb.w	r1, [sp, #3635]	; 0xe33
    ed0c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ed10:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ed14:	f002 fb8d 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ed18:	f8cd 0e34 	str.w	r0, [sp, #3636]	; 0xe34
    ed1c:	f8dd 0e34 	ldr.w	r0, [sp, #3636]	; 0xe34
    ed20:	f8cd 0884 	str.w	r0, [sp, #2180]	; 0x884
    ed24:	e00a      	b.n	ed3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1a54>
    ed26:	f89d 0883 	ldrb.w	r0, [sp, #2179]	; 0x883
    ed2a:	07c0      	lsls	r0, r0, #31
    ed2c:	2800      	cmp	r0, #0
    ed2e:	d112      	bne.n	ed56 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1a6e>
    ed30:	e055      	b.n	edde <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1af6>
    ed32:	989b      	ldr	r0, [sp, #620]	; 0x26c
    ed34:	07c1      	lsls	r1, r0, #31
    ed36:	2900      	cmp	r1, #0
    ed38:	d1e3      	bne.n	ed02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1a1a>
    ed3a:	e7de      	b.n	ecfa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1a12>
    ed3c:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    ed40:	f60d 0184 	addw	r1, sp, #2180	; 0x884
    ed44:	f007 ffc6 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ed48:	909a      	str	r0, [sp, #616]	; 0x268
    ed4a:	e7ff      	b.n	ed4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1a64>
    ed4c:	989a      	ldr	r0, [sp, #616]	; 0x268
    ed4e:	07c1      	lsls	r1, r0, #31
    ed50:	2900      	cmp	r1, #0
    ed52:	d1ce      	bne.n	ecf2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1a0a>
    ed54:	e7d1      	b.n	ecfa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1a12>
                trace!("[{:04x}] SUBN Vx, Vy", self.pc);
    ed56:	f64f 40a4 	movw	r0, #64676	; 0xfca4
    ed5a:	f2c0 0001 	movt	r0, #1
    ed5e:	6801      	ldr	r1, [r0, #0]
    ed60:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ed64:	f100 0212 	add.w	r2, r0, #18
    ed68:	f8cd 28a8 	str.w	r2, [sp, #2216]	; 0x8a8
    ed6c:	f8dd 28a8 	ldr.w	r2, [sp, #2216]	; 0x8a8
    ed70:	f8cd 2d2c 	str.w	r2, [sp, #3372]	; 0xd2c
    ed74:	f249 13f3 	movw	r3, #37363	; 0x91f3
    ed78:	f2c0 0301 	movt	r3, #1
    ed7c:	4610      	mov	r0, r2
    ed7e:	9199      	str	r1, [sp, #612]	; 0x264
    ed80:	4619      	mov	r1, r3
    ed82:	f7fb fd29 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ed86:	9098      	str	r0, [sp, #608]	; 0x260
    ed88:	9197      	str	r1, [sp, #604]	; 0x25c
    ed8a:	e7ff      	b.n	ed8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1aa4>
    ed8c:	9898      	ldr	r0, [sp, #608]	; 0x260
    ed8e:	f8cd 08a0 	str.w	r0, [sp, #2208]	; 0x8a0
    ed92:	9997      	ldr	r1, [sp, #604]	; 0x25c
    ed94:	f8cd 18a4 	str.w	r1, [sp, #2212]	; 0x8a4
    ed98:	f24f 5238 	movw	r2, #62776	; 0xf538
    ed9c:	f2c0 0201 	movt	r2, #1
    eda0:	6812      	ldr	r2, [r2, #0]
    eda2:	466b      	mov	r3, sp
    eda4:	f04f 0c01 	mov.w	ip, #1
    eda8:	f8c3 c008 	str.w	ip, [r3, #8]
    edac:	605a      	str	r2, [r3, #4]
    edae:	f8c3 c000 	str.w	ip, [r3]
    edb2:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    edb6:	2202      	movs	r2, #2
    edb8:	f50d 630a 	add.w	r3, sp, #2208	; 0x8a0
    edbc:	9999      	ldr	r1, [sp, #612]	; 0x264
    edbe:	f007 fe4e 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    edc2:	e7ff      	b.n	edc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1adc>
    edc4:	f8dd 187c 	ldr.w	r1, [sp, #2172]	; 0x87c
    edc8:	f64f 40c4 	movw	r0, #64708	; 0xfcc4
    edcc:	f2c0 0001 	movt	r0, #1
    edd0:	6802      	ldr	r2, [r0, #0]
    edd2:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    edd6:	f003 fb5b 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    edda:	e7ff      	b.n	eddc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1af4>
    eddc:	e7ff      	b.n	edde <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1af6>
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    edde:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    ede2:	280f      	cmp	r0, #15
    ede4:	f201 8712 	bhi.w	10c0c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3924>
    ede8:	e7ff      	b.n	edea <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1b02>
    edea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    edee:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    edf2:	1842      	adds	r2, r0, r1
    edf4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    edf8:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    edfc:	2b0f      	cmp	r3, #15
    edfe:	9296      	str	r2, [sp, #600]	; 0x258
    ee00:	f201 870e 	bhi.w	10c20 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3938>
    ee04:	e7ff      	b.n	ee06 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1b1e>
    ee06:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ee0a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ee0e:	1842      	adds	r2, r0, r1
    ee10:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    ee14:	9896      	ldr	r0, [sp, #600]	; 0x258
    ee16:	f007 fef7 	bl	16c08 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>
    ee1a:	9095      	str	r0, [sp, #596]	; 0x254
    ee1c:	9194      	str	r1, [sp, #592]	; 0x250
    ee1e:	e7ff      	b.n	ee20 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1b38>
    ee20:	9895      	ldr	r0, [sp, #596]	; 0x254
    ee22:	f88d 0d32 	strb.w	r0, [sp, #3378]	; 0xd32
    ee26:	9994      	ldr	r1, [sp, #592]	; 0x250
    ee28:	f001 0201 	and.w	r2, r1, #1
    ee2c:	f88d 2d33 	strb.w	r2, [sp, #3379]	; 0xd33
                self.v[x] = v;
    ee30:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    ee34:	2a0f      	cmp	r2, #15
    ee36:	f201 86fd 	bhi.w	10c34 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x394c>
    ee3a:	e7ff      	b.n	ee3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1b54>
    ee3c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ee40:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ee44:	1842      	adds	r2, r0, r1
    ee46:	9b95      	ldr	r3, [sp, #596]	; 0x254
    ee48:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    ee4c:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    ee4e:	f8dd c250 	ldr.w	ip, [sp, #592]	; 0x250
    ee52:	ea22 020c 	bic.w	r2, r2, ip
    ee56:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    ee5a:	f001 bd12 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    ee5e:	2005      	movs	r0, #5
    ee60:	f8cd 08ac 	str.w	r0, [sp, #2220]	; 0x8ac
    ee64:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    ee68:	f2c0 0001 	movt	r0, #1
    ee6c:	6801      	ldr	r1, [r0, #0]
    ee6e:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    ee72:	f007 ff2f 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ee76:	9093      	str	r0, [sp, #588]	; 0x24c
    ee78:	e01f      	b.n	eeba <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1bd2>
    ee7a:	2001      	movs	r0, #1
    ee7c:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    ee80:	e015      	b.n	eeae <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1bc6>
    ee82:	2000      	movs	r0, #0
    ee84:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    ee88:	e011      	b.n	eeae <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1bc6>
    ee8a:	2000      	movs	r0, #0
    ee8c:	f88d 0e3b 	strb.w	r0, [sp, #3643]	; 0xe3b
    ee90:	f89d 1e3b 	ldrb.w	r1, [sp, #3643]	; 0xe3b
    ee94:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ee98:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ee9c:	f002 fac9 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    eea0:	f8cd 0e3c 	str.w	r0, [sp, #3644]	; 0xe3c
    eea4:	f8dd 0e3c 	ldr.w	r0, [sp, #3644]	; 0xe3c
    eea8:	f8cd 08b4 	str.w	r0, [sp, #2228]	; 0x8b4
    eeac:	e00a      	b.n	eec4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1bdc>
    eeae:	f89d 08b3 	ldrb.w	r0, [sp, #2227]	; 0x8b3
    eeb2:	07c0      	lsls	r0, r0, #31
    eeb4:	2800      	cmp	r0, #0
    eeb6:	d112      	bne.n	eede <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1bf6>
    eeb8:	e055      	b.n	ef66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1c7e>
    eeba:	9893      	ldr	r0, [sp, #588]	; 0x24c
    eebc:	07c1      	lsls	r1, r0, #31
    eebe:	2900      	cmp	r1, #0
    eec0:	d1e3      	bne.n	ee8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1ba2>
    eec2:	e7de      	b.n	ee82 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1b9a>
    eec4:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    eec8:	f60d 01b4 	addw	r1, sp, #2228	; 0x8b4
    eecc:	f007 ff02 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eed0:	9092      	str	r0, [sp, #584]	; 0x248
    eed2:	e7ff      	b.n	eed4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1bec>
    eed4:	9892      	ldr	r0, [sp, #584]	; 0x248
    eed6:	07c1      	lsls	r1, r0, #31
    eed8:	2900      	cmp	r1, #0
    eeda:	d1ce      	bne.n	ee7a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1b92>
    eedc:	e7d1      	b.n	ee82 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1b9a>
                trace!("[{:04x}] SHL Vx, Vy", self.pc);
    eede:	f64f 4030 	movw	r0, #64560	; 0xfc30
    eee2:	f2c0 0001 	movt	r0, #1
    eee6:	6801      	ldr	r1, [r0, #0]
    eee8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eeec:	f100 0212 	add.w	r2, r0, #18
    eef0:	f8cd 28d8 	str.w	r2, [sp, #2264]	; 0x8d8
    eef4:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
    eef8:	f8cd 2d28 	str.w	r2, [sp, #3368]	; 0xd28
    eefc:	f249 13f3 	movw	r3, #37363	; 0x91f3
    ef00:	f2c0 0301 	movt	r3, #1
    ef04:	4610      	mov	r0, r2
    ef06:	9191      	str	r1, [sp, #580]	; 0x244
    ef08:	4619      	mov	r1, r3
    ef0a:	f7fb fc65 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ef0e:	9090      	str	r0, [sp, #576]	; 0x240
    ef10:	918f      	str	r1, [sp, #572]	; 0x23c
    ef12:	e7ff      	b.n	ef14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1c2c>
    ef14:	9890      	ldr	r0, [sp, #576]	; 0x240
    ef16:	f8cd 08d0 	str.w	r0, [sp, #2256]	; 0x8d0
    ef1a:	998f      	ldr	r1, [sp, #572]	; 0x23c
    ef1c:	f8cd 18d4 	str.w	r1, [sp, #2260]	; 0x8d4
    ef20:	f24f 5238 	movw	r2, #62776	; 0xf538
    ef24:	f2c0 0201 	movt	r2, #1
    ef28:	6812      	ldr	r2, [r2, #0]
    ef2a:	466b      	mov	r3, sp
    ef2c:	f04f 0c01 	mov.w	ip, #1
    ef30:	f8c3 c008 	str.w	ip, [r3, #8]
    ef34:	605a      	str	r2, [r3, #4]
    ef36:	f8c3 c000 	str.w	ip, [r3]
    ef3a:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    ef3e:	2202      	movs	r2, #2
    ef40:	f50d 630d 	add.w	r3, sp, #2256	; 0x8d0
    ef44:	9991      	ldr	r1, [sp, #580]	; 0x244
    ef46:	f007 fd8a 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ef4a:	e7ff      	b.n	ef4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1c64>
    ef4c:	f8dd 18ac 	ldr.w	r1, [sp, #2220]	; 0x8ac
    ef50:	f64f 4050 	movw	r0, #64592	; 0xfc50
    ef54:	f2c0 0001 	movt	r0, #1
    ef58:	6802      	ldr	r2, [r0, #0]
    ef5a:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    ef5e:	f003 fa97 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ef62:	e7ff      	b.n	ef64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1c7c>
    ef64:	e7ff      	b.n	ef66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1c7e>
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    ef66:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ef6a:	280f      	cmp	r0, #15
    ef6c:	f201 8630 	bhi.w	10bd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x38e8>
    ef70:	e7ff      	b.n	ef72 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1c8a>
    ef72:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ef76:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ef7a:	1842      	adds	r2, r0, r1
    ef7c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ef80:	09d2      	lsrs	r2, r2, #7
    ef82:	928e      	str	r2, [sp, #568]	; 0x238
    ef84:	e7ff      	b.n	ef86 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1c9e>
    ef86:	988e      	ldr	r0, [sp, #568]	; 0x238
    ef88:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    ef8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shl(1);
    ef90:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    ef94:	2a0f      	cmp	r2, #15
    ef96:	f201 8625 	bhi.w	10be4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x38fc>
    ef9a:	e7ff      	b.n	ef9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1cb4>
    ef9c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    efa0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    efa4:	1842      	adds	r2, r0, r1
    efa6:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    efaa:	2101      	movs	r1, #1
    efac:	f007 fdcc 	bl	16b48 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E>
    efb0:	908d      	str	r0, [sp, #564]	; 0x234
    efb2:	e7ff      	b.n	efb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1ccc>
    efb4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    efb8:	280f      	cmp	r0, #15
    efba:	f201 861d 	bhi.w	10bf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3910>
    efbe:	e7ff      	b.n	efc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1cd8>
    efc0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    efc4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    efc8:	1842      	adds	r2, r0, r1
    efca:	9b8d      	ldr	r3, [sp, #564]	; 0x234
    efcc:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    efd0:	f001 bc57 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    efd4:	2005      	movs	r0, #5
    efd6:	f8cd 08dc 	str.w	r0, [sp, #2268]	; 0x8dc
    efda:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    efde:	f2c0 0001 	movt	r0, #1
    efe2:	6801      	ldr	r1, [r0, #0]
    efe4:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    efe8:	f007 fe74 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    efec:	908c      	str	r0, [sp, #560]	; 0x230
    efee:	e01f      	b.n	f030 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1d48>
    eff0:	2001      	movs	r0, #1
    eff2:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    eff6:	e015      	b.n	f024 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1d3c>
    eff8:	2000      	movs	r0, #0
    effa:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    effe:	e011      	b.n	f024 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1d3c>
    f000:	2000      	movs	r0, #0
    f002:	f88d 0e43 	strb.w	r0, [sp, #3651]	; 0xe43
    f006:	f89d 1e43 	ldrb.w	r1, [sp, #3651]	; 0xe43
    f00a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f00e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f012:	f002 fa0e 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f016:	f8cd 0e44 	str.w	r0, [sp, #3652]	; 0xe44
    f01a:	f8dd 0e44 	ldr.w	r0, [sp, #3652]	; 0xe44
    f01e:	f8cd 08e4 	str.w	r0, [sp, #2276]	; 0x8e4
    f022:	e00a      	b.n	f03a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1d52>
    f024:	f89d 08e3 	ldrb.w	r0, [sp, #2275]	; 0x8e3
    f028:	07c0      	lsls	r0, r0, #31
    f02a:	2800      	cmp	r0, #0
    f02c:	d112      	bne.n	f054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1d6c>
    f02e:	e055      	b.n	f0dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1df4>
    f030:	988c      	ldr	r0, [sp, #560]	; 0x230
    f032:	07c1      	lsls	r1, r0, #31
    f034:	2900      	cmp	r1, #0
    f036:	d1e3      	bne.n	f000 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1d18>
    f038:	e7de      	b.n	eff8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1d10>
    f03a:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    f03e:	f60d 01e4 	addw	r1, sp, #2276	; 0x8e4
    f042:	f007 fe47 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f046:	908b      	str	r0, [sp, #556]	; 0x22c
    f048:	e7ff      	b.n	f04a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1d62>
    f04a:	988b      	ldr	r0, [sp, #556]	; 0x22c
    f04c:	07c1      	lsls	r1, r0, #31
    f04e:	2900      	cmp	r1, #0
    f050:	d1ce      	bne.n	eff0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1d08>
    f052:	e7d1      	b.n	eff8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1d10>
                trace!("[{:04x}] SNE Vx, Vy", self.pc);
    f054:	f64f 30d0 	movw	r0, #64464	; 0xfbd0
    f058:	f2c0 0001 	movt	r0, #1
    f05c:	6801      	ldr	r1, [r0, #0]
    f05e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f062:	f100 0212 	add.w	r2, r0, #18
    f066:	f8cd 2908 	str.w	r2, [sp, #2312]	; 0x908
    f06a:	f8dd 2908 	ldr.w	r2, [sp, #2312]	; 0x908
    f06e:	f8cd 2d24 	str.w	r2, [sp, #3364]	; 0xd24
    f072:	f249 13f3 	movw	r3, #37363	; 0x91f3
    f076:	f2c0 0301 	movt	r3, #1
    f07a:	4610      	mov	r0, r2
    f07c:	918a      	str	r1, [sp, #552]	; 0x228
    f07e:	4619      	mov	r1, r3
    f080:	f7fb fbaa 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f084:	9089      	str	r0, [sp, #548]	; 0x224
    f086:	9188      	str	r1, [sp, #544]	; 0x220
    f088:	e7ff      	b.n	f08a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1da2>
    f08a:	9889      	ldr	r0, [sp, #548]	; 0x224
    f08c:	f8cd 0900 	str.w	r0, [sp, #2304]	; 0x900
    f090:	9988      	ldr	r1, [sp, #544]	; 0x220
    f092:	f8cd 1904 	str.w	r1, [sp, #2308]	; 0x904
    f096:	f24f 5238 	movw	r2, #62776	; 0xf538
    f09a:	f2c0 0201 	movt	r2, #1
    f09e:	6812      	ldr	r2, [r2, #0]
    f0a0:	466b      	mov	r3, sp
    f0a2:	f04f 0c01 	mov.w	ip, #1
    f0a6:	f8c3 c008 	str.w	ip, [r3, #8]
    f0aa:	605a      	str	r2, [r3, #4]
    f0ac:	f8c3 c000 	str.w	ip, [r3]
    f0b0:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    f0b4:	2202      	movs	r2, #2
    f0b6:	f50d 6310 	add.w	r3, sp, #2304	; 0x900
    f0ba:	998a      	ldr	r1, [sp, #552]	; 0x228
    f0bc:	f007 fccf 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f0c0:	e7ff      	b.n	f0c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1dda>
    f0c2:	f8dd 18dc 	ldr.w	r1, [sp, #2268]	; 0x8dc
    f0c6:	f64f 30f0 	movw	r0, #64496	; 0xfbf0
    f0ca:	f2c0 0001 	movt	r0, #1
    f0ce:	6802      	ldr	r2, [r0, #0]
    f0d0:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    f0d4:	f003 f9dc 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f0d8:	e7ff      	b.n	f0da <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1df2>
    f0da:	e7ff      	b.n	f0dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1df4>
                if self.v[x] != self.v[y] {
    f0dc:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f0e0:	280f      	cmp	r0, #15
    f0e2:	f201 8561 	bhi.w	10ba8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x38c0>
    f0e6:	e7ff      	b.n	f0e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e00>
    f0e8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f0ec:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f0f0:	1842      	adds	r2, r0, r1
    f0f2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f0f6:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    f0fa:	2b0f      	cmp	r3, #15
    f0fc:	9287      	str	r2, [sp, #540]	; 0x21c
    f0fe:	f201 855d 	bhi.w	10bbc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x38d4>
    f102:	e7ff      	b.n	f104 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e1c>
    f104:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f108:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    f10c:	1842      	adds	r2, r0, r1
    f10e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f112:	9b87      	ldr	r3, [sp, #540]	; 0x21c
    f114:	fa5f fc83 	uxtb.w	ip, r3
    f118:	4594      	cmp	ip, r2
    f11a:	d006      	beq.n	f12a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e42>
    f11c:	e7ff      	b.n	f11e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e36>
                    self.next();
    f11e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f122:	f001 fee0 	bl	10ee6 <_ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE>
    f126:	e7ff      	b.n	f128 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e40>
                if self.v[x] != self.v[y] {
    f128:	e7ff      	b.n	f12a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e42>
        match (
    f12a:	f001 bbaa 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    f12e:	2005      	movs	r0, #5
    f130:	f8cd 090c 	str.w	r0, [sp, #2316]	; 0x90c
    f134:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    f138:	f2c0 0001 	movt	r0, #1
    f13c:	6801      	ldr	r1, [r0, #0]
    f13e:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    f142:	f007 fdc7 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f146:	9086      	str	r0, [sp, #536]	; 0x218
    f148:	e01f      	b.n	f18a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1ea2>
    f14a:	2001      	movs	r0, #1
    f14c:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    f150:	e015      	b.n	f17e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e96>
    f152:	2000      	movs	r0, #0
    f154:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    f158:	e011      	b.n	f17e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e96>
    f15a:	2000      	movs	r0, #0
    f15c:	f88d 0e4b 	strb.w	r0, [sp, #3659]	; 0xe4b
    f160:	f89d 1e4b 	ldrb.w	r1, [sp, #3659]	; 0xe4b
    f164:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f168:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f16c:	f002 f961 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f170:	f8cd 0e4c 	str.w	r0, [sp, #3660]	; 0xe4c
    f174:	f8dd 0e4c 	ldr.w	r0, [sp, #3660]	; 0xe4c
    f178:	f8cd 0914 	str.w	r0, [sp, #2324]	; 0x914
    f17c:	e00a      	b.n	f194 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1eac>
    f17e:	f89d 0913 	ldrb.w	r0, [sp, #2323]	; 0x913
    f182:	07c0      	lsls	r0, r0, #31
    f184:	2800      	cmp	r0, #0
    f186:	d112      	bne.n	f1ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1ec6>
    f188:	e055      	b.n	f236 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1f4e>
    f18a:	9886      	ldr	r0, [sp, #536]	; 0x218
    f18c:	07c1      	lsls	r1, r0, #31
    f18e:	2900      	cmp	r1, #0
    f190:	d1e3      	bne.n	f15a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e72>
    f192:	e7de      	b.n	f152 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e6a>
    f194:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    f198:	f60d 1114 	addw	r1, sp, #2324	; 0x914
    f19c:	f007 fd9a 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f1a0:	9085      	str	r0, [sp, #532]	; 0x214
    f1a2:	e7ff      	b.n	f1a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1ebc>
    f1a4:	9885      	ldr	r0, [sp, #532]	; 0x214
    f1a6:	07c1      	lsls	r1, r0, #31
    f1a8:	2900      	cmp	r1, #0
    f1aa:	d1ce      	bne.n	f14a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e62>
    f1ac:	e7d1      	b.n	f152 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1e6a>
                trace!("[{:04x}] LD I, nnn", self.pc);
    f1ae:	f64f 3090 	movw	r0, #64400	; 0xfb90
    f1b2:	f2c0 0001 	movt	r0, #1
    f1b6:	6801      	ldr	r1, [r0, #0]
    f1b8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f1bc:	f100 0212 	add.w	r2, r0, #18
    f1c0:	f8cd 2938 	str.w	r2, [sp, #2360]	; 0x938
    f1c4:	f8dd 2938 	ldr.w	r2, [sp, #2360]	; 0x938
    f1c8:	f8cd 2d20 	str.w	r2, [sp, #3360]	; 0xd20
    f1cc:	f249 13f3 	movw	r3, #37363	; 0x91f3
    f1d0:	f2c0 0301 	movt	r3, #1
    f1d4:	4610      	mov	r0, r2
    f1d6:	9184      	str	r1, [sp, #528]	; 0x210
    f1d8:	4619      	mov	r1, r3
    f1da:	f7fb fafd 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f1de:	9083      	str	r0, [sp, #524]	; 0x20c
    f1e0:	9182      	str	r1, [sp, #520]	; 0x208
    f1e2:	e7ff      	b.n	f1e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1efc>
    f1e4:	9883      	ldr	r0, [sp, #524]	; 0x20c
    f1e6:	f8cd 0930 	str.w	r0, [sp, #2352]	; 0x930
    f1ea:	9982      	ldr	r1, [sp, #520]	; 0x208
    f1ec:	f8cd 1934 	str.w	r1, [sp, #2356]	; 0x934
    f1f0:	f24f 5238 	movw	r2, #62776	; 0xf538
    f1f4:	f2c0 0201 	movt	r2, #1
    f1f8:	6812      	ldr	r2, [r2, #0]
    f1fa:	466b      	mov	r3, sp
    f1fc:	f04f 0c01 	mov.w	ip, #1
    f200:	f8c3 c008 	str.w	ip, [r3, #8]
    f204:	605a      	str	r2, [r3, #4]
    f206:	f8c3 c000 	str.w	ip, [r3]
    f20a:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    f20e:	2202      	movs	r2, #2
    f210:	f50d 6313 	add.w	r3, sp, #2352	; 0x930
    f214:	9984      	ldr	r1, [sp, #528]	; 0x210
    f216:	f007 fc22 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f21a:	e7ff      	b.n	f21c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1f34>
    f21c:	f8dd 190c 	ldr.w	r1, [sp, #2316]	; 0x90c
    f220:	f64f 30b0 	movw	r0, #64432	; 0xfbb0
    f224:	f2c0 0001 	movt	r0, #1
    f228:	6802      	ldr	r2, [r0, #0]
    f22a:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    f22e:	f003 f92f 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f232:	e7ff      	b.n	f234 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1f4c>
    f234:	e7ff      	b.n	f236 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1f4e>
                self.i = nnn;
    f236:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    f23a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f23e:	8208      	strh	r0, [r1, #16]
        match (
    f240:	f001 bb1f 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    f244:	2005      	movs	r0, #5
    f246:	f8cd 093c 	str.w	r0, [sp, #2364]	; 0x93c
    f24a:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    f24e:	f2c0 0001 	movt	r0, #1
    f252:	6801      	ldr	r1, [r0, #0]
    f254:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    f258:	f007 fd3c 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f25c:	9081      	str	r0, [sp, #516]	; 0x204
    f25e:	e01f      	b.n	f2a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1fb8>
    f260:	2001      	movs	r0, #1
    f262:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    f266:	e015      	b.n	f294 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1fac>
    f268:	2000      	movs	r0, #0
    f26a:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    f26e:	e011      	b.n	f294 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1fac>
    f270:	2000      	movs	r0, #0
    f272:	f88d 0e53 	strb.w	r0, [sp, #3667]	; 0xe53
    f276:	f89d 1e53 	ldrb.w	r1, [sp, #3667]	; 0xe53
    f27a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f27e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f282:	f002 f8d6 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f286:	f8cd 0e54 	str.w	r0, [sp, #3668]	; 0xe54
    f28a:	f8dd 0e54 	ldr.w	r0, [sp, #3668]	; 0xe54
    f28e:	f8cd 0944 	str.w	r0, [sp, #2372]	; 0x944
    f292:	e00a      	b.n	f2aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1fc2>
    f294:	f89d 0943 	ldrb.w	r0, [sp, #2371]	; 0x943
    f298:	07c0      	lsls	r0, r0, #31
    f29a:	2800      	cmp	r0, #0
    f29c:	d112      	bne.n	f2c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1fdc>
    f29e:	e055      	b.n	f34c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2064>
    f2a0:	9881      	ldr	r0, [sp, #516]	; 0x204
    f2a2:	07c1      	lsls	r1, r0, #31
    f2a4:	2900      	cmp	r1, #0
    f2a6:	d1e3      	bne.n	f270 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1f88>
    f2a8:	e7de      	b.n	f268 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1f80>
    f2aa:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    f2ae:	f60d 1144 	addw	r1, sp, #2372	; 0x944
    f2b2:	f007 fd0f 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f2b6:	9080      	str	r0, [sp, #512]	; 0x200
    f2b8:	e7ff      	b.n	f2ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1fd2>
    f2ba:	9880      	ldr	r0, [sp, #512]	; 0x200
    f2bc:	07c1      	lsls	r1, r0, #31
    f2be:	2900      	cmp	r1, #0
    f2c0:	d1ce      	bne.n	f260 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1f78>
    f2c2:	e7d1      	b.n	f268 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x1f80>
                trace!("[{:04x}] JP V0, nnn", self.pc);
    f2c4:	f64f 3050 	movw	r0, #64336	; 0xfb50
    f2c8:	f2c0 0001 	movt	r0, #1
    f2cc:	6801      	ldr	r1, [r0, #0]
    f2ce:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f2d2:	f100 0212 	add.w	r2, r0, #18
    f2d6:	f8cd 2968 	str.w	r2, [sp, #2408]	; 0x968
    f2da:	f8dd 2968 	ldr.w	r2, [sp, #2408]	; 0x968
    f2de:	f8cd 2d1c 	str.w	r2, [sp, #3356]	; 0xd1c
    f2e2:	f249 13f3 	movw	r3, #37363	; 0x91f3
    f2e6:	f2c0 0301 	movt	r3, #1
    f2ea:	4610      	mov	r0, r2
    f2ec:	917f      	str	r1, [sp, #508]	; 0x1fc
    f2ee:	4619      	mov	r1, r3
    f2f0:	f7fb fa72 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f2f4:	907e      	str	r0, [sp, #504]	; 0x1f8
    f2f6:	917d      	str	r1, [sp, #500]	; 0x1f4
    f2f8:	e7ff      	b.n	f2fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2012>
    f2fa:	987e      	ldr	r0, [sp, #504]	; 0x1f8
    f2fc:	f8cd 0960 	str.w	r0, [sp, #2400]	; 0x960
    f300:	997d      	ldr	r1, [sp, #500]	; 0x1f4
    f302:	f8cd 1964 	str.w	r1, [sp, #2404]	; 0x964
    f306:	f24f 5238 	movw	r2, #62776	; 0xf538
    f30a:	f2c0 0201 	movt	r2, #1
    f30e:	6812      	ldr	r2, [r2, #0]
    f310:	466b      	mov	r3, sp
    f312:	f04f 0c01 	mov.w	ip, #1
    f316:	f8c3 c008 	str.w	ip, [r3, #8]
    f31a:	605a      	str	r2, [r3, #4]
    f31c:	f8c3 c000 	str.w	ip, [r3]
    f320:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    f324:	2202      	movs	r2, #2
    f326:	f50d 6316 	add.w	r3, sp, #2400	; 0x960
    f32a:	997f      	ldr	r1, [sp, #508]	; 0x1fc
    f32c:	f007 fb97 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f330:	e7ff      	b.n	f332 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x204a>
    f332:	f8dd 193c 	ldr.w	r1, [sp, #2364]	; 0x93c
    f336:	f64f 3070 	movw	r0, #64368	; 0xfb70
    f33a:	f2c0 0001 	movt	r0, #1
    f33e:	6802      	ldr	r2, [r0, #0]
    f340:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    f344:	f003 f8a4 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f348:	e7ff      	b.n	f34a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2062>
    f34a:	e7ff      	b.n	f34c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2064>
                self.jump(nnn.wrapping_add(self.v[0].into()).wrapping_sub(2));
    f34c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f350:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    f354:	f002 f860 	bl	11418 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
    f358:	907c      	str	r0, [sp, #496]	; 0x1f0
    f35a:	e7ff      	b.n	f35c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2074>
    f35c:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    f360:	997c      	ldr	r1, [sp, #496]	; 0x1f0
    f362:	f007 fc7d 	bl	16c60 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
    f366:	907b      	str	r0, [sp, #492]	; 0x1ec
    f368:	e7ff      	b.n	f36a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2082>
    f36a:	2102      	movs	r1, #2
    f36c:	987b      	ldr	r0, [sp, #492]	; 0x1ec
    f36e:	f007 fc88 	bl	16c82 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    f372:	907a      	str	r0, [sp, #488]	; 0x1e8
    f374:	e7ff      	b.n	f376 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x208e>
    f376:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f37a:	997a      	ldr	r1, [sp, #488]	; 0x1e8
    f37c:	f001 fd70 	bl	10e60 <_ZN8libchip814Chip8$LT$T$GT$4jump17h98fcf36ccb52be45E>
    f380:	e7ff      	b.n	f382 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x209a>
        match (
    f382:	f001 ba7e 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    f386:	2005      	movs	r0, #5
    f388:	f8cd 096c 	str.w	r0, [sp, #2412]	; 0x96c
    f38c:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    f390:	f2c0 0001 	movt	r0, #1
    f394:	6801      	ldr	r1, [r0, #0]
    f396:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    f39a:	f007 fc9b 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f39e:	9079      	str	r0, [sp, #484]	; 0x1e4
    f3a0:	e01f      	b.n	f3e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x20fa>
    f3a2:	2001      	movs	r0, #1
    f3a4:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    f3a8:	e015      	b.n	f3d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x20ee>
    f3aa:	2000      	movs	r0, #0
    f3ac:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    f3b0:	e011      	b.n	f3d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x20ee>
    f3b2:	2000      	movs	r0, #0
    f3b4:	f88d 0e5b 	strb.w	r0, [sp, #3675]	; 0xe5b
    f3b8:	f89d 1e5b 	ldrb.w	r1, [sp, #3675]	; 0xe5b
    f3bc:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f3c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f3c4:	f002 f835 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f3c8:	f8cd 0e5c 	str.w	r0, [sp, #3676]	; 0xe5c
    f3cc:	f8dd 0e5c 	ldr.w	r0, [sp, #3676]	; 0xe5c
    f3d0:	f8cd 0974 	str.w	r0, [sp, #2420]	; 0x974
    f3d4:	e00a      	b.n	f3ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2104>
    f3d6:	f89d 0973 	ldrb.w	r0, [sp, #2419]	; 0x973
    f3da:	07c0      	lsls	r0, r0, #31
    f3dc:	2800      	cmp	r0, #0
    f3de:	d112      	bne.n	f406 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x211e>
    f3e0:	e055      	b.n	f48e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x21a6>
    f3e2:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    f3e4:	07c1      	lsls	r1, r0, #31
    f3e6:	2900      	cmp	r1, #0
    f3e8:	d1e3      	bne.n	f3b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x20ca>
    f3ea:	e7de      	b.n	f3aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x20c2>
    f3ec:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    f3f0:	f60d 1174 	addw	r1, sp, #2420	; 0x974
    f3f4:	f007 fc6e 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f3f8:	9078      	str	r0, [sp, #480]	; 0x1e0
    f3fa:	e7ff      	b.n	f3fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2114>
    f3fc:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    f3fe:	07c1      	lsls	r1, r0, #31
    f400:	2900      	cmp	r1, #0
    f402:	d1ce      	bne.n	f3a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x20ba>
    f404:	e7d1      	b.n	f3aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x20c2>
                trace!("[{:04x}] RND Vx, kk", self.pc);
    f406:	f64f 3000 	movw	r0, #64256	; 0xfb00
    f40a:	f2c0 0001 	movt	r0, #1
    f40e:	6801      	ldr	r1, [r0, #0]
    f410:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f414:	f100 0212 	add.w	r2, r0, #18
    f418:	f8cd 2998 	str.w	r2, [sp, #2456]	; 0x998
    f41c:	f8dd 2998 	ldr.w	r2, [sp, #2456]	; 0x998
    f420:	f8cd 2d18 	str.w	r2, [sp, #3352]	; 0xd18
    f424:	f249 13f3 	movw	r3, #37363	; 0x91f3
    f428:	f2c0 0301 	movt	r3, #1
    f42c:	4610      	mov	r0, r2
    f42e:	9177      	str	r1, [sp, #476]	; 0x1dc
    f430:	4619      	mov	r1, r3
    f432:	f7fb f9d1 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f436:	9076      	str	r0, [sp, #472]	; 0x1d8
    f438:	9175      	str	r1, [sp, #468]	; 0x1d4
    f43a:	e7ff      	b.n	f43c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2154>
    f43c:	9876      	ldr	r0, [sp, #472]	; 0x1d8
    f43e:	f8cd 0990 	str.w	r0, [sp, #2448]	; 0x990
    f442:	9975      	ldr	r1, [sp, #468]	; 0x1d4
    f444:	f8cd 1994 	str.w	r1, [sp, #2452]	; 0x994
    f448:	f24f 5238 	movw	r2, #62776	; 0xf538
    f44c:	f2c0 0201 	movt	r2, #1
    f450:	6812      	ldr	r2, [r2, #0]
    f452:	466b      	mov	r3, sp
    f454:	f04f 0c01 	mov.w	ip, #1
    f458:	f8c3 c008 	str.w	ip, [r3, #8]
    f45c:	605a      	str	r2, [r3, #4]
    f45e:	f8c3 c000 	str.w	ip, [r3]
    f462:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    f466:	2202      	movs	r2, #2
    f468:	f50d 6319 	add.w	r3, sp, #2448	; 0x990
    f46c:	9977      	ldr	r1, [sp, #476]	; 0x1dc
    f46e:	f007 faf6 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f472:	e7ff      	b.n	f474 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x218c>
    f474:	f8dd 196c 	ldr.w	r1, [sp, #2412]	; 0x96c
    f478:	f64f 3020 	movw	r0, #64288	; 0xfb20
    f47c:	f2c0 0001 	movt	r0, #1
    f480:	6802      	ldr	r2, [r0, #0]
    f482:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    f486:	f003 f803 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f48a:	e7ff      	b.n	f48c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x21a4>
    f48c:	e7ff      	b.n	f48e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x21a6>
    f48e:	f241 0048 	movw	r0, #4168	; 0x1048
                self.v[x] = self.hw.rand() & kk;
    f492:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f496:	4408      	add	r0, r1
    f498:	f7fc fc20 	bl	bcdc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h254831b02f23b02eE>
    f49c:	9074      	str	r0, [sp, #464]	; 0x1d0
    f49e:	e7ff      	b.n	f4a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x21b8>
    f4a0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f4a4:	280f      	cmp	r0, #15
    f4a6:	f201 8375 	bhi.w	10b94 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x38ac>
    f4aa:	e7ff      	b.n	f4ac <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x21c4>
    f4ac:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f4b0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f4b4:	1842      	adds	r2, r0, r1
    f4b6:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
    f4b8:	f8dd c45c 	ldr.w	ip, [sp, #1116]	; 0x45c
    f4bc:	ea03 0e0c 	and.w	lr, r3, ip
    f4c0:	f882 e034 	strb.w	lr, [r2, #52]	; 0x34
        match (
    f4c4:	f001 b9dd 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    f4c8:	2005      	movs	r0, #5
    f4ca:	f8cd 099c 	str.w	r0, [sp, #2460]	; 0x99c
    f4ce:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    f4d2:	f2c0 0001 	movt	r0, #1
    f4d6:	6801      	ldr	r1, [r0, #0]
    f4d8:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    f4dc:	f007 fbfa 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f4e0:	9073      	str	r0, [sp, #460]	; 0x1cc
    f4e2:	e01f      	b.n	f524 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x223c>
    f4e4:	2001      	movs	r0, #1
    f4e6:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    f4ea:	e015      	b.n	f518 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2230>
    f4ec:	2000      	movs	r0, #0
    f4ee:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    f4f2:	e011      	b.n	f518 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2230>
    f4f4:	2000      	movs	r0, #0
    f4f6:	f88d 0e63 	strb.w	r0, [sp, #3683]	; 0xe63
    f4fa:	f89d 1e63 	ldrb.w	r1, [sp, #3683]	; 0xe63
    f4fe:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f502:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f506:	f001 ff94 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f50a:	f8cd 0e64 	str.w	r0, [sp, #3684]	; 0xe64
    f50e:	f8dd 0e64 	ldr.w	r0, [sp, #3684]	; 0xe64
    f512:	f8cd 09a4 	str.w	r0, [sp, #2468]	; 0x9a4
    f516:	e00a      	b.n	f52e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2246>
    f518:	f89d 09a3 	ldrb.w	r0, [sp, #2467]	; 0x9a3
    f51c:	07c0      	lsls	r0, r0, #31
    f51e:	2800      	cmp	r0, #0
    f520:	d112      	bne.n	f548 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2260>
    f522:	e055      	b.n	f5d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22e8>
    f524:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    f526:	07c1      	lsls	r1, r0, #31
    f528:	2900      	cmp	r1, #0
    f52a:	d1e3      	bne.n	f4f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x220c>
    f52c:	e7de      	b.n	f4ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2204>
    f52e:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    f532:	f60d 11a4 	addw	r1, sp, #2468	; 0x9a4
    f536:	f007 fbcd 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f53a:	9072      	str	r0, [sp, #456]	; 0x1c8
    f53c:	e7ff      	b.n	f53e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2256>
    f53e:	9872      	ldr	r0, [sp, #456]	; 0x1c8
    f540:	07c1      	lsls	r1, r0, #31
    f542:	2900      	cmp	r1, #0
    f544:	d1ce      	bne.n	f4e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x21fc>
    f546:	e7d1      	b.n	f4ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2204>
                trace!("[{:04x}] DRW Vx, Vy, n", self.pc);
    f548:	f64f 10a4 	movw	r0, #63908	; 0xf9a4
    f54c:	f2c0 0001 	movt	r0, #1
    f550:	6801      	ldr	r1, [r0, #0]
    f552:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f556:	f100 0212 	add.w	r2, r0, #18
    f55a:	f8cd 29c8 	str.w	r2, [sp, #2504]	; 0x9c8
    f55e:	f8dd 29c8 	ldr.w	r2, [sp, #2504]	; 0x9c8
    f562:	f8cd 2cdc 	str.w	r2, [sp, #3292]	; 0xcdc
    f566:	f249 13f3 	movw	r3, #37363	; 0x91f3
    f56a:	f2c0 0301 	movt	r3, #1
    f56e:	4610      	mov	r0, r2
    f570:	9171      	str	r1, [sp, #452]	; 0x1c4
    f572:	4619      	mov	r1, r3
    f574:	f7fb f930 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f578:	9070      	str	r0, [sp, #448]	; 0x1c0
    f57a:	916f      	str	r1, [sp, #444]	; 0x1bc
    f57c:	e7ff      	b.n	f57e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2296>
    f57e:	9870      	ldr	r0, [sp, #448]	; 0x1c0
    f580:	f8cd 09c0 	str.w	r0, [sp, #2496]	; 0x9c0
    f584:	996f      	ldr	r1, [sp, #444]	; 0x1bc
    f586:	f8cd 19c4 	str.w	r1, [sp, #2500]	; 0x9c4
    f58a:	f24f 5238 	movw	r2, #62776	; 0xf538
    f58e:	f2c0 0201 	movt	r2, #1
    f592:	6812      	ldr	r2, [r2, #0]
    f594:	466b      	mov	r3, sp
    f596:	f04f 0c01 	mov.w	ip, #1
    f59a:	f8c3 c008 	str.w	ip, [r3, #8]
    f59e:	605a      	str	r2, [r3, #4]
    f5a0:	f8c3 c000 	str.w	ip, [r3]
    f5a4:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    f5a8:	2202      	movs	r2, #2
    f5aa:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
    f5ae:	9971      	ldr	r1, [sp, #452]	; 0x1c4
    f5b0:	f007 fa55 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f5b4:	e7ff      	b.n	f5b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22ce>
    f5b6:	f8dd 199c 	ldr.w	r1, [sp, #2460]	; 0x99c
    f5ba:	f64f 10c4 	movw	r0, #63940	; 0xf9c4
    f5be:	f2c0 0001 	movt	r0, #1
    f5c2:	6802      	ldr	r2, [r0, #0]
    f5c4:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    f5c8:	f002 ff62 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f5cc:	e7ff      	b.n	f5ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22e6>
    f5ce:	e7ff      	b.n	f5d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22e8>
                let basex = self.v[x] as usize;
    f5d0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f5d4:	280f      	cmp	r0, #15
    f5d6:	f201 826b 	bhi.w	10ab0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x37c8>
    f5da:	e7ff      	b.n	f5dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x22f4>
    f5dc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f5e0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f5e4:	1842      	adds	r2, r0, r1
    f5e6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f5ea:	4613      	mov	r3, r2
    f5ec:	f8cd 2ce0 	str.w	r2, [sp, #3296]	; 0xce0
                let basey = self.v[y] as usize;
    f5f0:	f8dd 2460 	ldr.w	r2, [sp, #1120]	; 0x460
    f5f4:	2a0f      	cmp	r2, #15
    f5f6:	936e      	str	r3, [sp, #440]	; 0x1b8
    f5f8:	f201 8264 	bhi.w	10ac4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x37dc>
    f5fc:	e7ff      	b.n	f5fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2316>
    f5fe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f602:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    f606:	1842      	adds	r2, r0, r1
    f608:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f60c:	4613      	mov	r3, r2
    f60e:	f8cd 2ce4 	str.w	r2, [sp, #3300]	; 0xce4
    f612:	f241 0248 	movw	r2, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    f616:	4410      	add	r0, r2
    f618:	936d      	str	r3, [sp, #436]	; 0x1b4
    f61a:	f7fc fd37 	bl	c08c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17h3eb92f330a1e13e5E>
    f61e:	906c      	str	r0, [sp, #432]	; 0x1b0
    f620:	916b      	str	r1, [sp, #428]	; 0x1ac
    f622:	e7ff      	b.n	f624 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x233c>
    f624:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    f626:	f8cd 0ce8 	str.w	r0, [sp, #3304]	; 0xce8
    f62a:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    f62c:	f8cd 1cec 	str.w	r1, [sp, #3308]	; 0xcec
    f630:	2200      	movs	r2, #0
                self.v[0xf] = 0;
    f632:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    f636:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                for y in 0..n {
    f63a:	f8cd 29cc 	str.w	r2, [sp, #2508]	; 0x9cc
    f63e:	f8dd 2470 	ldr.w	r2, [sp, #1136]	; 0x470
    f642:	f8cd 29d0 	str.w	r2, [sp, #2512]	; 0x9d0
    f646:	f8dd 09cc 	ldr.w	r0, [sp, #2508]	; 0x9cc
    f64a:	f8dd 19d0 	ldr.w	r1, [sp, #2512]	; 0x9d0
    f64e:	f002 fcab 	bl	11fa8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    f652:	906a      	str	r0, [sp, #424]	; 0x1a8
    f654:	9169      	str	r1, [sp, #420]	; 0x1a4
    f656:	e7ff      	b.n	f658 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2370>
    f658:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    f65a:	f8cd 09d4 	str.w	r0, [sp, #2516]	; 0x9d4
    f65e:	9969      	ldr	r1, [sp, #420]	; 0x1a4
    f660:	f8cd 19d8 	str.w	r1, [sp, #2520]	; 0x9d8
    f664:	e7ff      	b.n	f666 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x237e>
    f666:	f60d 10d4 	addw	r0, sp, #2516	; 0x9d4
    f66a:	f002 fc12 	bl	11e92 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f66e:	f8cd 19e0 	str.w	r1, [sp, #2528]	; 0x9e0
    f672:	f8cd 09dc 	str.w	r0, [sp, #2524]	; 0x9dc
    f676:	e7ff      	b.n	f678 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2390>
    f678:	f8dd 09dc 	ldr.w	r0, [sp, #2524]	; 0x9dc
    f67c:	2800      	cmp	r0, #0
    f67e:	d001      	beq.n	f684 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x239c>
    f680:	e7ff      	b.n	f682 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x239a>
    f682:	e002      	b.n	f68a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x23a2>
        match (
    f684:	f001 b8fd 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
                for y in 0..n {
    f688:	defe      	udf	#254	; 0xfe
    f68a:	f8dd 09e0 	ldr.w	r0, [sp, #2528]	; 0x9e0
    f68e:	f8cd 0cf0 	str.w	r0, [sp, #3312]	; 0xcf0
    f692:	f8cd 0cf4 	str.w	r0, [sp, #3316]	; 0xcf4
    f696:	f8cd 0cf8 	str.w	r0, [sp, #3320]	; 0xcf8
                    let b = self.mem[self.i as usize + y];
    f69a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f69e:	8a0a      	ldrh	r2, [r1, #16]
    f6a0:	1813      	adds	r3, r2, r0
    f6a2:	469c      	mov	ip, r3
    f6a4:	4293      	cmp	r3, r2
    f6a6:	9068      	str	r0, [sp, #416]	; 0x1a0
    f6a8:	f8cd c19c 	str.w	ip, [sp, #412]	; 0x19c
    f6ac:	f0c1 8214 	bcc.w	10ad8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x37f0>
    f6b0:	e7ff      	b.n	f6b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x23ca>
    f6b2:	2000      	movs	r0, #0
    f6b4:	9967      	ldr	r1, [sp, #412]	; 0x19c
    f6b6:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    f6ba:	f041 8219 	bne.w	10af0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3808>
    f6be:	e7ff      	b.n	f6c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x23d8>
    f6c0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f6c4:	9967      	ldr	r1, [sp, #412]	; 0x19c
    f6c6:	1842      	adds	r2, r0, r1
    f6c8:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    f6cc:	4613      	mov	r3, r2
    f6ce:	f88d 2cff 	strb.w	r2, [sp, #3327]	; 0xcff
                    let vramy = (y + basey) % h;
    f6d2:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
    f6d4:	f8dd c1b4 	ldr.w	ip, [sp, #436]	; 0x1b4
    f6d8:	eb02 0e0c 	add.w	lr, r2, ip
    f6dc:	4674      	mov	r4, lr
    f6de:	4596      	cmp	lr, r2
    f6e0:	9366      	str	r3, [sp, #408]	; 0x198
    f6e2:	9465      	str	r4, [sp, #404]	; 0x194
    f6e4:	f0c1 820e 	bcc.w	10b04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x381c>
    f6e8:	e7ff      	b.n	f6ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2402>
    f6ea:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    f6ec:	2800      	cmp	r0, #0
    f6ee:	f001 8215 	beq.w	10b1c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3834>
    f6f2:	e7ff      	b.n	f6f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x240c>
    f6f4:	9865      	ldr	r0, [sp, #404]	; 0x194
    f6f6:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    f6f8:	fbb0 f2f1 	udiv	r2, r0, r1
    f6fc:	fb02 0211 	mls	r2, r2, r1, r0
    f700:	4613      	mov	r3, r2
    f702:	f8cd 2d00 	str.w	r2, [sp, #3328]	; 0xd00
    f706:	2200      	movs	r2, #0
                    for x in 0..8 {
    f708:	f8cd 29e4 	str.w	r2, [sp, #2532]	; 0x9e4
    f70c:	2208      	movs	r2, #8
    f70e:	f8cd 29e8 	str.w	r2, [sp, #2536]	; 0x9e8
    f712:	f8dd 09e4 	ldr.w	r0, [sp, #2532]	; 0x9e4
    f716:	f8dd 19e8 	ldr.w	r1, [sp, #2536]	; 0x9e8
    f71a:	9364      	str	r3, [sp, #400]	; 0x190
    f71c:	f002 fc44 	bl	11fa8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    f720:	9063      	str	r0, [sp, #396]	; 0x18c
    f722:	9162      	str	r1, [sp, #392]	; 0x188
    f724:	e7ff      	b.n	f726 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x243e>
    f726:	9863      	ldr	r0, [sp, #396]	; 0x18c
    f728:	f8cd 09ec 	str.w	r0, [sp, #2540]	; 0x9ec
    f72c:	9962      	ldr	r1, [sp, #392]	; 0x188
    f72e:	f8cd 19f0 	str.w	r1, [sp, #2544]	; 0x9f0
    f732:	e7ff      	b.n	f734 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x244c>
    f734:	f60d 10ec 	addw	r0, sp, #2540	; 0x9ec
    f738:	f002 fbab 	bl	11e92 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f73c:	f8cd 19f8 	str.w	r1, [sp, #2552]	; 0x9f8
    f740:	f8cd 09f4 	str.w	r0, [sp, #2548]	; 0x9f4
    f744:	e7ff      	b.n	f746 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x245e>
    f746:	f8dd 09f4 	ldr.w	r0, [sp, #2548]	; 0x9f4
    f74a:	2800      	cmp	r0, #0
    f74c:	d001      	beq.n	f752 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x246a>
    f74e:	e7ff      	b.n	f750 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2468>
    f750:	e001      	b.n	f756 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x246e>
                for y in 0..n {
    f752:	e788      	b.n	f666 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x237e>
                    for x in 0..8 {
    f754:	defe      	udf	#254	; 0xfe
    f756:	f8dd 09f8 	ldr.w	r0, [sp, #2552]	; 0x9f8
    f75a:	f8cd 0d04 	str.w	r0, [sp, #3332]	; 0xd04
    f75e:	f8cd 0d08 	str.w	r0, [sp, #3336]	; 0xd08
    f762:	f8cd 0d0c 	str.w	r0, [sp, #3340]	; 0xd0c
                        let vramx = (x + basex) % w;
    f766:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    f768:	1842      	adds	r2, r0, r1
    f76a:	4613      	mov	r3, r2
    f76c:	4282      	cmp	r2, r0
    f76e:	9061      	str	r0, [sp, #388]	; 0x184
    f770:	9360      	str	r3, [sp, #384]	; 0x180
    f772:	f0c1 81df 	bcc.w	10b34 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x384c>
    f776:	e7ff      	b.n	f778 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2490>
    f778:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    f77a:	2800      	cmp	r0, #0
    f77c:	f001 81e6 	beq.w	10b4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3864>
    f780:	e7ff      	b.n	f782 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x249a>
    f782:	9860      	ldr	r0, [sp, #384]	; 0x180
    f784:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    f786:	fbb0 f2f1 	udiv	r2, r0, r1
    f78a:	fb02 0211 	mls	r2, r2, r1, r0
    f78e:	4613      	mov	r3, r2
    f790:	f8cd 2d10 	str.w	r2, [sp, #3344]	; 0xd10
                        let src = (b & 1 << (7 - x)) > 0;
    f794:	9a61      	ldr	r2, [sp, #388]	; 0x184
    f796:	f1c2 0c07 	rsb	ip, r2, #7
    f79a:	f04f 0e07 	mov.w	lr, #7
    f79e:	4596      	cmp	lr, r2
    f7a0:	935f      	str	r3, [sp, #380]	; 0x17c
    f7a2:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
    f7a6:	f0c1 81dd 	bcc.w	10b64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x387c>
    f7aa:	e7ff      	b.n	f7ac <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x24c4>
    f7ac:	985e      	ldr	r0, [sp, #376]	; 0x178
    f7ae:	f000 0107 	and.w	r1, r0, #7
    f7b2:	2201      	movs	r2, #1
    f7b4:	fa02 f101 	lsl.w	r1, r2, r1
    f7b8:	08c2      	lsrs	r2, r0, #3
    f7ba:	2a00      	cmp	r2, #0
    f7bc:	915d      	str	r1, [sp, #372]	; 0x174
    f7be:	f041 81dd 	bne.w	10b7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3894>
    f7c2:	e7ff      	b.n	f7c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x24dc>
    f7c4:	9866      	ldr	r0, [sp, #408]	; 0x198
    f7c6:	995d      	ldr	r1, [sp, #372]	; 0x174
    f7c8:	ea00 0201 	and.w	r2, r0, r1
    f7cc:	b2d2      	uxtb	r2, r2
    f7ce:	2a00      	cmp	r2, #0
    f7d0:	bf18      	it	ne
    f7d2:	2201      	movne	r2, #1
    f7d4:	4613      	mov	r3, r2
    f7d6:	f88d 2d16 	strb.w	r2, [sp, #3350]	; 0xd16
    f7da:	f241 0248 	movw	r2, #4168	; 0x1048
                        let dst = self.hw.vram_get(vramx, vramy);
    f7de:	f8dd c490 	ldr.w	ip, [sp, #1168]	; 0x490
    f7e2:	eb0c 0002 	add.w	r0, ip, r2
    f7e6:	995f      	ldr	r1, [sp, #380]	; 0x17c
    f7e8:	9a64      	ldr	r2, [sp, #400]	; 0x190
    f7ea:	935c      	str	r3, [sp, #368]	; 0x170
    f7ec:	f7fc fb97 	bl	bf1e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h216d16e76da6ac08E>
    f7f0:	4601      	mov	r1, r0
    f7f2:	f88d 0d17 	strb.w	r0, [sp, #3351]	; 0xd17
    f7f6:	915b      	str	r1, [sp, #364]	; 0x16c
    f7f8:	e7ff      	b.n	f7fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2512>
                        self.v[0xf] |= (src && dst) as u8;
    f7fa:	985c      	ldr	r0, [sp, #368]	; 0x170
    f7fc:	07c1      	lsls	r1, r0, #31
    f7fe:	2900      	cmp	r1, #0
    f800:	d108      	bne.n	f814 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x252c>
    f802:	e003      	b.n	f80c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2524>
    f804:	2001      	movs	r0, #1
    f806:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    f80a:	e008      	b.n	f81e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2536>
    f80c:	2000      	movs	r0, #0
    f80e:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    f812:	e004      	b.n	f81e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2536>
    f814:	985b      	ldr	r0, [sp, #364]	; 0x16c
    f816:	07c1      	lsls	r1, r0, #31
    f818:	2900      	cmp	r1, #0
    f81a:	d1f3      	bne.n	f804 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x251c>
    f81c:	e7f6      	b.n	f80c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2524>
    f81e:	f89d 09ff 	ldrb.w	r0, [sp, #2559]	; 0x9ff
    f822:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f826:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    f82a:	4310      	orrs	r0, r2
    f82c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    f830:	f241 0048 	movw	r0, #4168	; 0x1048
                        self.hw.vram_set(vramx, vramy, src ^ dst);
    f834:	4408      	add	r0, r1
    f836:	9a5c      	ldr	r2, [sp, #368]	; 0x170
    f838:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    f83a:	ea82 0c03 	eor.w	ip, r2, r3
    f83e:	f00c 0301 	and.w	r3, ip, #1
    f842:	995f      	ldr	r1, [sp, #380]	; 0x17c
    f844:	9a64      	ldr	r2, [sp, #400]	; 0x190
    f846:	f7fc fa6f 	bl	bd28 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h7a66c71dde635fe4E>
    f84a:	e7ff      	b.n	f84c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2564>
                    for x in 0..8 {
    f84c:	e772      	b.n	f734 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x244c>
    f84e:	2005      	movs	r0, #5
    f850:	f8cd 0a00 	str.w	r0, [sp, #2560]	; 0xa00
    f854:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    f858:	f2c0 0001 	movt	r0, #1
    f85c:	6801      	ldr	r1, [r0, #0]
    f85e:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    f862:	f007 fa37 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f866:	905a      	str	r0, [sp, #360]	; 0x168
    f868:	e01f      	b.n	f8aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x25c2>
    f86a:	2001      	movs	r0, #1
    f86c:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    f870:	e015      	b.n	f89e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x25b6>
    f872:	2000      	movs	r0, #0
    f874:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    f878:	e011      	b.n	f89e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x25b6>
    f87a:	2000      	movs	r0, #0
    f87c:	f88d 0e6b 	strb.w	r0, [sp, #3691]	; 0xe6b
    f880:	f89d 1e6b 	ldrb.w	r1, [sp, #3691]	; 0xe6b
    f884:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f888:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f88c:	f001 fdd1 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f890:	f8cd 0e6c 	str.w	r0, [sp, #3692]	; 0xe6c
    f894:	f8dd 0e6c 	ldr.w	r0, [sp, #3692]	; 0xe6c
    f898:	f8cd 0a08 	str.w	r0, [sp, #2568]	; 0xa08
    f89c:	e00a      	b.n	f8b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x25cc>
    f89e:	f89d 0a07 	ldrb.w	r0, [sp, #2567]	; 0xa07
    f8a2:	07c0      	lsls	r0, r0, #31
    f8a4:	2800      	cmp	r0, #0
    f8a6:	d112      	bne.n	f8ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x25e6>
    f8a8:	e055      	b.n	f956 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x266e>
    f8aa:	985a      	ldr	r0, [sp, #360]	; 0x168
    f8ac:	07c1      	lsls	r1, r0, #31
    f8ae:	2900      	cmp	r1, #0
    f8b0:	d1e3      	bne.n	f87a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2592>
    f8b2:	e7de      	b.n	f872 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x258a>
    f8b4:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    f8b8:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
    f8bc:	f007 fa0a 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f8c0:	9059      	str	r0, [sp, #356]	; 0x164
    f8c2:	e7ff      	b.n	f8c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x25dc>
    f8c4:	9859      	ldr	r0, [sp, #356]	; 0x164
    f8c6:	07c1      	lsls	r1, r0, #31
    f8c8:	2900      	cmp	r1, #0
    f8ca:	d1ce      	bne.n	f86a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2582>
    f8cc:	e7d1      	b.n	f872 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x258a>
                trace!("[{:04x}] SKP Vx", self.pc);
    f8ce:	f64f 1050 	movw	r0, #63824	; 0xf950
    f8d2:	f2c0 0001 	movt	r0, #1
    f8d6:	6801      	ldr	r1, [r0, #0]
    f8d8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f8dc:	f100 0212 	add.w	r2, r0, #18
    f8e0:	f8cd 2a2c 	str.w	r2, [sp, #2604]	; 0xa2c
    f8e4:	f8dd 2a2c 	ldr.w	r2, [sp, #2604]	; 0xa2c
    f8e8:	f8cd 2cd8 	str.w	r2, [sp, #3288]	; 0xcd8
    f8ec:	f249 13f3 	movw	r3, #37363	; 0x91f3
    f8f0:	f2c0 0301 	movt	r3, #1
    f8f4:	4610      	mov	r0, r2
    f8f6:	9158      	str	r1, [sp, #352]	; 0x160
    f8f8:	4619      	mov	r1, r3
    f8fa:	f7fa ff6d 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f8fe:	9057      	str	r0, [sp, #348]	; 0x15c
    f900:	9156      	str	r1, [sp, #344]	; 0x158
    f902:	e7ff      	b.n	f904 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x261c>
    f904:	9857      	ldr	r0, [sp, #348]	; 0x15c
    f906:	f8cd 0a24 	str.w	r0, [sp, #2596]	; 0xa24
    f90a:	9956      	ldr	r1, [sp, #344]	; 0x158
    f90c:	f8cd 1a28 	str.w	r1, [sp, #2600]	; 0xa28
    f910:	f24f 5238 	movw	r2, #62776	; 0xf538
    f914:	f2c0 0201 	movt	r2, #1
    f918:	6812      	ldr	r2, [r2, #0]
    f91a:	466b      	mov	r3, sp
    f91c:	f04f 0c01 	mov.w	ip, #1
    f920:	f8c3 c008 	str.w	ip, [r3, #8]
    f924:	605a      	str	r2, [r3, #4]
    f926:	f8c3 c000 	str.w	ip, [r3]
    f92a:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    f92e:	2202      	movs	r2, #2
    f930:	f60d 2324 	addw	r3, sp, #2596	; 0xa24
    f934:	9958      	ldr	r1, [sp, #352]	; 0x160
    f936:	f007 f892 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f93a:	e7ff      	b.n	f93c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2654>
    f93c:	f8dd 1a00 	ldr.w	r1, [sp, #2560]	; 0xa00
    f940:	f64f 1070 	movw	r0, #63856	; 0xf970
    f944:	f2c0 0001 	movt	r0, #1
    f948:	6802      	ldr	r2, [r0, #0]
    f94a:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    f94e:	f002 fd9f 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f952:	e7ff      	b.n	f954 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x266c>
    f954:	e7ff      	b.n	f956 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x266e>
    f956:	f241 0048 	movw	r0, #4168	; 0x1048
                if self.hw.key(self.v[x]) {
    f95a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f95e:	4408      	add	r0, r1
    f960:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    f964:	2a0f      	cmp	r2, #15
    f966:	9055      	str	r0, [sp, #340]	; 0x154
    f968:	f201 8098 	bhi.w	10a9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x37b4>
    f96c:	e7ff      	b.n	f96e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2686>
    f96e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f972:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f976:	1842      	adds	r2, r0, r1
    f978:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    f97c:	9855      	ldr	r0, [sp, #340]	; 0x154
    f97e:	f7fc f9b2 	bl	bce6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17he15d36584013bbaeE>
    f982:	9054      	str	r0, [sp, #336]	; 0x150
    f984:	e7ff      	b.n	f986 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x269e>
    f986:	9854      	ldr	r0, [sp, #336]	; 0x150
    f988:	07c1      	lsls	r1, r0, #31
    f98a:	2900      	cmp	r1, #0
    f98c:	d006      	beq.n	f99c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x26b4>
    f98e:	e7ff      	b.n	f990 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x26a8>
                    self.next();
    f990:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f994:	f001 faa7 	bl	10ee6 <_ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE>
    f998:	e7ff      	b.n	f99a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x26b2>
                if self.hw.key(self.v[x]) {
    f99a:	e7ff      	b.n	f99c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x26b4>
        match (
    f99c:	f000 bf71 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    f9a0:	2005      	movs	r0, #5
    f9a2:	f8cd 0a30 	str.w	r0, [sp, #2608]	; 0xa30
    f9a6:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    f9aa:	f2c0 0001 	movt	r0, #1
    f9ae:	6801      	ldr	r1, [r0, #0]
    f9b0:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    f9b4:	f007 f98e 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f9b8:	9053      	str	r0, [sp, #332]	; 0x14c
    f9ba:	e01f      	b.n	f9fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2714>
    f9bc:	2001      	movs	r0, #1
    f9be:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    f9c2:	e015      	b.n	f9f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2708>
    f9c4:	2000      	movs	r0, #0
    f9c6:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    f9ca:	e011      	b.n	f9f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2708>
    f9cc:	2000      	movs	r0, #0
    f9ce:	f88d 0e73 	strb.w	r0, [sp, #3699]	; 0xe73
    f9d2:	f89d 1e73 	ldrb.w	r1, [sp, #3699]	; 0xe73
    f9d6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f9da:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f9de:	f001 fd28 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f9e2:	f8cd 0e74 	str.w	r0, [sp, #3700]	; 0xe74
    f9e6:	f8dd 0e74 	ldr.w	r0, [sp, #3700]	; 0xe74
    f9ea:	f8cd 0a38 	str.w	r0, [sp, #2616]	; 0xa38
    f9ee:	e00a      	b.n	fa06 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x271e>
    f9f0:	f89d 0a37 	ldrb.w	r0, [sp, #2615]	; 0xa37
    f9f4:	07c0      	lsls	r0, r0, #31
    f9f6:	2800      	cmp	r0, #0
    f9f8:	d112      	bne.n	fa20 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2738>
    f9fa:	e055      	b.n	faa8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x27c0>
    f9fc:	9853      	ldr	r0, [sp, #332]	; 0x14c
    f9fe:	07c1      	lsls	r1, r0, #31
    fa00:	2900      	cmp	r1, #0
    fa02:	d1e3      	bne.n	f9cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x26e4>
    fa04:	e7de      	b.n	f9c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x26dc>
    fa06:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    fa0a:	f60d 2138 	addw	r1, sp, #2616	; 0xa38
    fa0e:	f007 f961 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fa12:	9052      	str	r0, [sp, #328]	; 0x148
    fa14:	e7ff      	b.n	fa16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x272e>
    fa16:	9852      	ldr	r0, [sp, #328]	; 0x148
    fa18:	07c1      	lsls	r1, r0, #31
    fa1a:	2900      	cmp	r1, #0
    fa1c:	d1ce      	bne.n	f9bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x26d4>
    fa1e:	e7d1      	b.n	f9c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x26dc>
                trace!("[{:04x}] SKNP Vx", self.pc);
    fa20:	f64f 100c 	movw	r0, #63756	; 0xf90c
    fa24:	f2c0 0001 	movt	r0, #1
    fa28:	6801      	ldr	r1, [r0, #0]
    fa2a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fa2e:	f100 0212 	add.w	r2, r0, #18
    fa32:	f8cd 2a5c 	str.w	r2, [sp, #2652]	; 0xa5c
    fa36:	f8dd 2a5c 	ldr.w	r2, [sp, #2652]	; 0xa5c
    fa3a:	f8cd 2cd4 	str.w	r2, [sp, #3284]	; 0xcd4
    fa3e:	f249 13f3 	movw	r3, #37363	; 0x91f3
    fa42:	f2c0 0301 	movt	r3, #1
    fa46:	4610      	mov	r0, r2
    fa48:	9151      	str	r1, [sp, #324]	; 0x144
    fa4a:	4619      	mov	r1, r3
    fa4c:	f7fa fec4 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fa50:	9050      	str	r0, [sp, #320]	; 0x140
    fa52:	914f      	str	r1, [sp, #316]	; 0x13c
    fa54:	e7ff      	b.n	fa56 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x276e>
    fa56:	9850      	ldr	r0, [sp, #320]	; 0x140
    fa58:	f8cd 0a54 	str.w	r0, [sp, #2644]	; 0xa54
    fa5c:	994f      	ldr	r1, [sp, #316]	; 0x13c
    fa5e:	f8cd 1a58 	str.w	r1, [sp, #2648]	; 0xa58
    fa62:	f24f 5238 	movw	r2, #62776	; 0xf538
    fa66:	f2c0 0201 	movt	r2, #1
    fa6a:	6812      	ldr	r2, [r2, #0]
    fa6c:	466b      	mov	r3, sp
    fa6e:	f04f 0c01 	mov.w	ip, #1
    fa72:	f8c3 c008 	str.w	ip, [r3, #8]
    fa76:	605a      	str	r2, [r3, #4]
    fa78:	f8c3 c000 	str.w	ip, [r3]
    fa7c:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    fa80:	2202      	movs	r2, #2
    fa82:	f60d 2354 	addw	r3, sp, #2644	; 0xa54
    fa86:	9951      	ldr	r1, [sp, #324]	; 0x144
    fa88:	f006 ffe9 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fa8c:	e7ff      	b.n	fa8e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x27a6>
    fa8e:	f8dd 1a30 	ldr.w	r1, [sp, #2608]	; 0xa30
    fa92:	f64f 102c 	movw	r0, #63788	; 0xf92c
    fa96:	f2c0 0001 	movt	r0, #1
    fa9a:	6802      	ldr	r2, [r0, #0]
    fa9c:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    faa0:	f002 fcf6 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    faa4:	e7ff      	b.n	faa6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x27be>
    faa6:	e7ff      	b.n	faa8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x27c0>
    faa8:	f241 0048 	movw	r0, #4168	; 0x1048
                if !self.hw.key(self.v[x]) {
    faac:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    fab0:	4408      	add	r0, r1
    fab2:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    fab6:	2a0f      	cmp	r2, #15
    fab8:	904e      	str	r0, [sp, #312]	; 0x138
    faba:	f200 87e5 	bhi.w	10a88 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x37a0>
    fabe:	e7ff      	b.n	fac0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x27d8>
    fac0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fac4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fac8:	1842      	adds	r2, r0, r1
    faca:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    face:	984e      	ldr	r0, [sp, #312]	; 0x138
    fad0:	f7fc f909 	bl	bce6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17he15d36584013bbaeE>
    fad4:	904d      	str	r0, [sp, #308]	; 0x134
    fad6:	e7ff      	b.n	fad8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x27f0>
    fad8:	984d      	ldr	r0, [sp, #308]	; 0x134
    fada:	07c1      	lsls	r1, r0, #31
    fadc:	2900      	cmp	r1, #0
    fade:	d106      	bne.n	faee <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2806>
    fae0:	e7ff      	b.n	fae2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x27fa>
                    self.next();
    fae2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fae6:	f001 f9fe 	bl	10ee6 <_ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE>
    faea:	e7ff      	b.n	faec <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2804>
                if !self.hw.key(self.v[x]) {
    faec:	e7ff      	b.n	faee <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2806>
        match (
    faee:	f000 bec8 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    faf2:	2005      	movs	r0, #5
    faf4:	f8cd 0a60 	str.w	r0, [sp, #2656]	; 0xa60
    faf8:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    fafc:	f2c0 0001 	movt	r0, #1
    fb00:	6801      	ldr	r1, [r0, #0]
    fb02:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    fb06:	f007 f8e5 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fb0a:	904c      	str	r0, [sp, #304]	; 0x130
    fb0c:	e01f      	b.n	fb4e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2866>
    fb0e:	2001      	movs	r0, #1
    fb10:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    fb14:	e015      	b.n	fb42 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x285a>
    fb16:	2000      	movs	r0, #0
    fb18:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    fb1c:	e011      	b.n	fb42 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x285a>
    fb1e:	2000      	movs	r0, #0
    fb20:	f88d 0e7b 	strb.w	r0, [sp, #3707]	; 0xe7b
    fb24:	f89d 1e7b 	ldrb.w	r1, [sp, #3707]	; 0xe7b
    fb28:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fb2c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fb30:	f001 fc7f 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fb34:	f8cd 0e7c 	str.w	r0, [sp, #3708]	; 0xe7c
    fb38:	f8dd 0e7c 	ldr.w	r0, [sp, #3708]	; 0xe7c
    fb3c:	f8cd 0a68 	str.w	r0, [sp, #2664]	; 0xa68
    fb40:	e00a      	b.n	fb58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2870>
    fb42:	f89d 0a67 	ldrb.w	r0, [sp, #2663]	; 0xa67
    fb46:	07c0      	lsls	r0, r0, #31
    fb48:	2800      	cmp	r0, #0
    fb4a:	d112      	bne.n	fb72 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x288a>
    fb4c:	e055      	b.n	fbfa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2912>
    fb4e:	984c      	ldr	r0, [sp, #304]	; 0x130
    fb50:	07c1      	lsls	r1, r0, #31
    fb52:	2900      	cmp	r1, #0
    fb54:	d1e3      	bne.n	fb1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2836>
    fb56:	e7de      	b.n	fb16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x282e>
    fb58:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    fb5c:	f60d 2168 	addw	r1, sp, #2664	; 0xa68
    fb60:	f007 f8b8 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fb64:	904b      	str	r0, [sp, #300]	; 0x12c
    fb66:	e7ff      	b.n	fb68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2880>
    fb68:	984b      	ldr	r0, [sp, #300]	; 0x12c
    fb6a:	07c1      	lsls	r1, r0, #31
    fb6c:	2900      	cmp	r1, #0
    fb6e:	d1ce      	bne.n	fb0e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2826>
    fb70:	e7d1      	b.n	fb16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x282e>
                trace!("[{:04x}] LD Vx, DT", self.pc);
    fb72:	f64f 00bc 	movw	r0, #63676	; 0xf8bc
    fb76:	f2c0 0001 	movt	r0, #1
    fb7a:	6801      	ldr	r1, [r0, #0]
    fb7c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fb80:	f100 0212 	add.w	r2, r0, #18
    fb84:	f8cd 2a8c 	str.w	r2, [sp, #2700]	; 0xa8c
    fb88:	f8dd 2a8c 	ldr.w	r2, [sp, #2700]	; 0xa8c
    fb8c:	f8cd 2cd0 	str.w	r2, [sp, #3280]	; 0xcd0
    fb90:	f249 13f3 	movw	r3, #37363	; 0x91f3
    fb94:	f2c0 0301 	movt	r3, #1
    fb98:	4610      	mov	r0, r2
    fb9a:	914a      	str	r1, [sp, #296]	; 0x128
    fb9c:	4619      	mov	r1, r3
    fb9e:	f7fa fe1b 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fba2:	9049      	str	r0, [sp, #292]	; 0x124
    fba4:	9148      	str	r1, [sp, #288]	; 0x120
    fba6:	e7ff      	b.n	fba8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x28c0>
    fba8:	9849      	ldr	r0, [sp, #292]	; 0x124
    fbaa:	f8cd 0a84 	str.w	r0, [sp, #2692]	; 0xa84
    fbae:	9948      	ldr	r1, [sp, #288]	; 0x120
    fbb0:	f8cd 1a88 	str.w	r1, [sp, #2696]	; 0xa88
    fbb4:	f24f 5238 	movw	r2, #62776	; 0xf538
    fbb8:	f2c0 0201 	movt	r2, #1
    fbbc:	6812      	ldr	r2, [r2, #0]
    fbbe:	466b      	mov	r3, sp
    fbc0:	f04f 0c01 	mov.w	ip, #1
    fbc4:	f8c3 c008 	str.w	ip, [r3, #8]
    fbc8:	605a      	str	r2, [r3, #4]
    fbca:	f8c3 c000 	str.w	ip, [r3]
    fbce:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    fbd2:	2202      	movs	r2, #2
    fbd4:	f60d 2384 	addw	r3, sp, #2692	; 0xa84
    fbd8:	994a      	ldr	r1, [sp, #296]	; 0x128
    fbda:	f006 ff40 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fbde:	e7ff      	b.n	fbe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x28f8>
    fbe0:	f8dd 1a60 	ldr.w	r1, [sp, #2656]	; 0xa60
    fbe4:	f64f 00dc 	movw	r0, #63708	; 0xf8dc
    fbe8:	f2c0 0001 	movt	r0, #1
    fbec:	6802      	ldr	r2, [r0, #0]
    fbee:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    fbf2:	f002 fc4d 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fbf6:	e7ff      	b.n	fbf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2910>
    fbf8:	e7ff      	b.n	fbfa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2912>
                self.v[x] = self.dt;
    fbfa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fbfe:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    fc02:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    fc06:	2a0f      	cmp	r2, #15
    fc08:	9147      	str	r1, [sp, #284]	; 0x11c
    fc0a:	f200 8733 	bhi.w	10a74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x378c>
    fc0e:	e7ff      	b.n	fc10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2928>
    fc10:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fc14:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fc18:	1842      	adds	r2, r0, r1
    fc1a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    fc1c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    fc20:	f000 be2f 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    fc24:	2005      	movs	r0, #5
    fc26:	f8cd 0a90 	str.w	r0, [sp, #2704]	; 0xa90
    fc2a:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    fc2e:	f2c0 0001 	movt	r0, #1
    fc32:	6801      	ldr	r1, [r0, #0]
    fc34:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    fc38:	f007 f84c 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fc3c:	9046      	str	r0, [sp, #280]	; 0x118
    fc3e:	e01f      	b.n	fc80 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2998>
    fc40:	2001      	movs	r0, #1
    fc42:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    fc46:	e015      	b.n	fc74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x298c>
    fc48:	2000      	movs	r0, #0
    fc4a:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    fc4e:	e011      	b.n	fc74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x298c>
    fc50:	2000      	movs	r0, #0
    fc52:	f88d 0e83 	strb.w	r0, [sp, #3715]	; 0xe83
    fc56:	f89d 1e83 	ldrb.w	r1, [sp, #3715]	; 0xe83
    fc5a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fc5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fc62:	f001 fbe6 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fc66:	f8cd 0e84 	str.w	r0, [sp, #3716]	; 0xe84
    fc6a:	f8dd 0e84 	ldr.w	r0, [sp, #3716]	; 0xe84
    fc6e:	f8cd 0a98 	str.w	r0, [sp, #2712]	; 0xa98
    fc72:	e00a      	b.n	fc8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x29a2>
    fc74:	f89d 0a97 	ldrb.w	r0, [sp, #2711]	; 0xa97
    fc78:	07c0      	lsls	r0, r0, #31
    fc7a:	2800      	cmp	r0, #0
    fc7c:	d112      	bne.n	fca4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x29bc>
    fc7e:	e055      	b.n	fd2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a44>
    fc80:	9846      	ldr	r0, [sp, #280]	; 0x118
    fc82:	07c1      	lsls	r1, r0, #31
    fc84:	2900      	cmp	r1, #0
    fc86:	d1e3      	bne.n	fc50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2968>
    fc88:	e7de      	b.n	fc48 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2960>
    fc8a:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    fc8e:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
    fc92:	f007 f81f 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fc96:	9045      	str	r0, [sp, #276]	; 0x114
    fc98:	e7ff      	b.n	fc9a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x29b2>
    fc9a:	9845      	ldr	r0, [sp, #276]	; 0x114
    fc9c:	07c1      	lsls	r1, r0, #31
    fc9e:	2900      	cmp	r1, #0
    fca0:	d1ce      	bne.n	fc40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2958>
    fca2:	e7d1      	b.n	fc48 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2960>
                trace!("[{:04x}] LD Vx, K", self.pc);
    fca4:	f64f 006c 	movw	r0, #63596	; 0xf86c
    fca8:	f2c0 0001 	movt	r0, #1
    fcac:	6801      	ldr	r1, [r0, #0]
    fcae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fcb2:	f100 0212 	add.w	r2, r0, #18
    fcb6:	f8cd 2abc 	str.w	r2, [sp, #2748]	; 0xabc
    fcba:	f8dd 2abc 	ldr.w	r2, [sp, #2748]	; 0xabc
    fcbe:	f8cd 2ccc 	str.w	r2, [sp, #3276]	; 0xccc
    fcc2:	f249 13f3 	movw	r3, #37363	; 0x91f3
    fcc6:	f2c0 0301 	movt	r3, #1
    fcca:	4610      	mov	r0, r2
    fccc:	9144      	str	r1, [sp, #272]	; 0x110
    fcce:	4619      	mov	r1, r3
    fcd0:	f7fa fd82 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fcd4:	9043      	str	r0, [sp, #268]	; 0x10c
    fcd6:	9142      	str	r1, [sp, #264]	; 0x108
    fcd8:	e7ff      	b.n	fcda <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x29f2>
    fcda:	9843      	ldr	r0, [sp, #268]	; 0x10c
    fcdc:	f8cd 0ab4 	str.w	r0, [sp, #2740]	; 0xab4
    fce0:	9942      	ldr	r1, [sp, #264]	; 0x108
    fce2:	f8cd 1ab8 	str.w	r1, [sp, #2744]	; 0xab8
    fce6:	f24f 5238 	movw	r2, #62776	; 0xf538
    fcea:	f2c0 0201 	movt	r2, #1
    fcee:	6812      	ldr	r2, [r2, #0]
    fcf0:	466b      	mov	r3, sp
    fcf2:	f04f 0c01 	mov.w	ip, #1
    fcf6:	f8c3 c008 	str.w	ip, [r3, #8]
    fcfa:	605a      	str	r2, [r3, #4]
    fcfc:	f8c3 c000 	str.w	ip, [r3]
    fd00:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    fd04:	2202      	movs	r2, #2
    fd06:	f60d 23b4 	addw	r3, sp, #2740	; 0xab4
    fd0a:	9944      	ldr	r1, [sp, #272]	; 0x110
    fd0c:	f006 fea7 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fd10:	e7ff      	b.n	fd12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a2a>
    fd12:	f8dd 1a90 	ldr.w	r1, [sp, #2704]	; 0xa90
    fd16:	f64f 008c 	movw	r0, #63628	; 0xf88c
    fd1a:	f2c0 0001 	movt	r0, #1
    fd1e:	6802      	ldr	r2, [r0, #0]
    fd20:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    fd24:	f002 fbb4 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fd28:	e7ff      	b.n	fd2a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a42>
    fd2a:	e7ff      	b.n	fd2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a44>
                self.v[x] = self.waitkey();
    fd2c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fd30:	f001 fa2d 	bl	1118e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E>
    fd34:	9041      	str	r0, [sp, #260]	; 0x104
    fd36:	e7ff      	b.n	fd38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a50>
    fd38:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fd3c:	280f      	cmp	r0, #15
    fd3e:	f200 868f 	bhi.w	10a60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3778>
    fd42:	e7ff      	b.n	fd44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a5c>
    fd44:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fd48:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fd4c:	1842      	adds	r2, r0, r1
    fd4e:	9b41      	ldr	r3, [sp, #260]	; 0x104
    fd50:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    fd54:	f000 bd95 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    fd58:	2005      	movs	r0, #5
    fd5a:	f8cd 0ac0 	str.w	r0, [sp, #2752]	; 0xac0
    fd5e:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    fd62:	f2c0 0001 	movt	r0, #1
    fd66:	6801      	ldr	r1, [r0, #0]
    fd68:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    fd6c:	f006 ffb2 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fd70:	9040      	str	r0, [sp, #256]	; 0x100
    fd72:	e01f      	b.n	fdb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2acc>
    fd74:	2001      	movs	r0, #1
    fd76:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    fd7a:	e015      	b.n	fda8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ac0>
    fd7c:	2000      	movs	r0, #0
    fd7e:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    fd82:	e011      	b.n	fda8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ac0>
    fd84:	2000      	movs	r0, #0
    fd86:	f88d 0e8b 	strb.w	r0, [sp, #3723]	; 0xe8b
    fd8a:	f89d 1e8b 	ldrb.w	r1, [sp, #3723]	; 0xe8b
    fd8e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fd92:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fd96:	f001 fb4c 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fd9a:	f8cd 0e8c 	str.w	r0, [sp, #3724]	; 0xe8c
    fd9e:	f8dd 0e8c 	ldr.w	r0, [sp, #3724]	; 0xe8c
    fda2:	f8cd 0ac8 	str.w	r0, [sp, #2760]	; 0xac8
    fda6:	e00a      	b.n	fdbe <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ad6>
    fda8:	f89d 0ac7 	ldrb.w	r0, [sp, #2759]	; 0xac7
    fdac:	07c0      	lsls	r0, r0, #31
    fdae:	2800      	cmp	r0, #0
    fdb0:	d112      	bne.n	fdd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2af0>
    fdb2:	e055      	b.n	fe60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2b78>
    fdb4:	9840      	ldr	r0, [sp, #256]	; 0x100
    fdb6:	07c1      	lsls	r1, r0, #31
    fdb8:	2900      	cmp	r1, #0
    fdba:	d1e3      	bne.n	fd84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a9c>
    fdbc:	e7de      	b.n	fd7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a94>
    fdbe:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    fdc2:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
    fdc6:	f006 ff85 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fdca:	903f      	str	r0, [sp, #252]	; 0xfc
    fdcc:	e7ff      	b.n	fdce <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ae6>
    fdce:	983f      	ldr	r0, [sp, #252]	; 0xfc
    fdd0:	07c1      	lsls	r1, r0, #31
    fdd2:	2900      	cmp	r1, #0
    fdd4:	d1ce      	bne.n	fd74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a8c>
    fdd6:	e7d1      	b.n	fd7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2a94>
                trace!("[{:04x}] LD DT, Vx", self.pc);
    fdd8:	f64f 001c 	movw	r0, #63516	; 0xf81c
    fddc:	f2c0 0001 	movt	r0, #1
    fde0:	6801      	ldr	r1, [r0, #0]
    fde2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fde6:	f100 0212 	add.w	r2, r0, #18
    fdea:	f8cd 2aec 	str.w	r2, [sp, #2796]	; 0xaec
    fdee:	f8dd 2aec 	ldr.w	r2, [sp, #2796]	; 0xaec
    fdf2:	f8cd 2cc8 	str.w	r2, [sp, #3272]	; 0xcc8
    fdf6:	f249 13f3 	movw	r3, #37363	; 0x91f3
    fdfa:	f2c0 0301 	movt	r3, #1
    fdfe:	4610      	mov	r0, r2
    fe00:	913e      	str	r1, [sp, #248]	; 0xf8
    fe02:	4619      	mov	r1, r3
    fe04:	f7fa fce8 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fe08:	903d      	str	r0, [sp, #244]	; 0xf4
    fe0a:	913c      	str	r1, [sp, #240]	; 0xf0
    fe0c:	e7ff      	b.n	fe0e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2b26>
    fe0e:	983d      	ldr	r0, [sp, #244]	; 0xf4
    fe10:	f8cd 0ae4 	str.w	r0, [sp, #2788]	; 0xae4
    fe14:	993c      	ldr	r1, [sp, #240]	; 0xf0
    fe16:	f8cd 1ae8 	str.w	r1, [sp, #2792]	; 0xae8
    fe1a:	f24f 5238 	movw	r2, #62776	; 0xf538
    fe1e:	f2c0 0201 	movt	r2, #1
    fe22:	6812      	ldr	r2, [r2, #0]
    fe24:	466b      	mov	r3, sp
    fe26:	f04f 0c01 	mov.w	ip, #1
    fe2a:	f8c3 c008 	str.w	ip, [r3, #8]
    fe2e:	605a      	str	r2, [r3, #4]
    fe30:	f8c3 c000 	str.w	ip, [r3]
    fe34:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    fe38:	2202      	movs	r2, #2
    fe3a:	f60d 23e4 	addw	r3, sp, #2788	; 0xae4
    fe3e:	993e      	ldr	r1, [sp, #248]	; 0xf8
    fe40:	f006 fe0d 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fe44:	e7ff      	b.n	fe46 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2b5e>
    fe46:	f8dd 1ac0 	ldr.w	r1, [sp, #2752]	; 0xac0
    fe4a:	f64f 003c 	movw	r0, #63548	; 0xf83c
    fe4e:	f2c0 0001 	movt	r0, #1
    fe52:	6802      	ldr	r2, [r0, #0]
    fe54:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    fe58:	f002 fb1a 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fe5c:	e7ff      	b.n	fe5e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2b76>
    fe5e:	e7ff      	b.n	fe60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2b78>
                self.dt = self.v[x];
    fe60:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fe64:	280f      	cmp	r0, #15
    fe66:	f200 85f1 	bhi.w	10a4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3764>
    fe6a:	e7ff      	b.n	fe6c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2b84>
    fe6c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fe70:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fe74:	1842      	adds	r2, r0, r1
    fe76:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    fe7a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
        match (
    fe7e:	f000 bd00 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    fe82:	2005      	movs	r0, #5
    fe84:	f8cd 0af0 	str.w	r0, [sp, #2800]	; 0xaf0
    fe88:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    fe8c:	f2c0 0001 	movt	r0, #1
    fe90:	6801      	ldr	r1, [r0, #0]
    fe92:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    fe96:	f006 ff1d 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fe9a:	903b      	str	r0, [sp, #236]	; 0xec
    fe9c:	e01f      	b.n	fede <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2bf6>
    fe9e:	2001      	movs	r0, #1
    fea0:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    fea4:	e015      	b.n	fed2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2bea>
    fea6:	2000      	movs	r0, #0
    fea8:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    feac:	e011      	b.n	fed2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2bea>
    feae:	2000      	movs	r0, #0
    feb0:	f88d 0e93 	strb.w	r0, [sp, #3731]	; 0xe93
    feb4:	f89d 1e93 	ldrb.w	r1, [sp, #3731]	; 0xe93
    feb8:	f644 206c 	movw	r0, #19052	; 0x4a6c
    febc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fec0:	f001 fab7 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fec4:	f8cd 0e94 	str.w	r0, [sp, #3732]	; 0xe94
    fec8:	f8dd 0e94 	ldr.w	r0, [sp, #3732]	; 0xe94
    fecc:	f8cd 0af8 	str.w	r0, [sp, #2808]	; 0xaf8
    fed0:	e00a      	b.n	fee8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2c00>
    fed2:	f89d 0af7 	ldrb.w	r0, [sp, #2807]	; 0xaf7
    fed6:	07c0      	lsls	r0, r0, #31
    fed8:	2800      	cmp	r0, #0
    feda:	d112      	bne.n	ff02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2c1a>
    fedc:	e055      	b.n	ff8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ca2>
    fede:	983b      	ldr	r0, [sp, #236]	; 0xec
    fee0:	07c1      	lsls	r1, r0, #31
    fee2:	2900      	cmp	r1, #0
    fee4:	d1e3      	bne.n	feae <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2bc6>
    fee6:	e7de      	b.n	fea6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2bbe>
    fee8:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    feec:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
    fef0:	f006 fef0 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fef4:	903a      	str	r0, [sp, #232]	; 0xe8
    fef6:	e7ff      	b.n	fef8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2c10>
    fef8:	983a      	ldr	r0, [sp, #232]	; 0xe8
    fefa:	07c1      	lsls	r1, r0, #31
    fefc:	2900      	cmp	r1, #0
    fefe:	d1ce      	bne.n	fe9e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2bb6>
    ff00:	e7d1      	b.n	fea6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2bbe>
                trace!("[{:04x}] LD ST, Vx", self.pc);
    ff02:	f24f 70cc 	movw	r0, #63436	; 0xf7cc
    ff06:	f2c0 0001 	movt	r0, #1
    ff0a:	6801      	ldr	r1, [r0, #0]
    ff0c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ff10:	f100 0212 	add.w	r2, r0, #18
    ff14:	f8cd 2b1c 	str.w	r2, [sp, #2844]	; 0xb1c
    ff18:	f8dd 2b1c 	ldr.w	r2, [sp, #2844]	; 0xb1c
    ff1c:	f8cd 2cc4 	str.w	r2, [sp, #3268]	; 0xcc4
    ff20:	f249 13f3 	movw	r3, #37363	; 0x91f3
    ff24:	f2c0 0301 	movt	r3, #1
    ff28:	4610      	mov	r0, r2
    ff2a:	9139      	str	r1, [sp, #228]	; 0xe4
    ff2c:	4619      	mov	r1, r3
    ff2e:	f7fa fc53 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ff32:	9038      	str	r0, [sp, #224]	; 0xe0
    ff34:	9137      	str	r1, [sp, #220]	; 0xdc
    ff36:	e7ff      	b.n	ff38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2c50>
    ff38:	9838      	ldr	r0, [sp, #224]	; 0xe0
    ff3a:	f8cd 0b14 	str.w	r0, [sp, #2836]	; 0xb14
    ff3e:	9937      	ldr	r1, [sp, #220]	; 0xdc
    ff40:	f8cd 1b18 	str.w	r1, [sp, #2840]	; 0xb18
    ff44:	f24f 5238 	movw	r2, #62776	; 0xf538
    ff48:	f2c0 0201 	movt	r2, #1
    ff4c:	6812      	ldr	r2, [r2, #0]
    ff4e:	466b      	mov	r3, sp
    ff50:	f04f 0c01 	mov.w	ip, #1
    ff54:	f8c3 c008 	str.w	ip, [r3, #8]
    ff58:	605a      	str	r2, [r3, #4]
    ff5a:	f8c3 c000 	str.w	ip, [r3]
    ff5e:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    ff62:	2202      	movs	r2, #2
    ff64:	f60d 3314 	addw	r3, sp, #2836	; 0xb14
    ff68:	9939      	ldr	r1, [sp, #228]	; 0xe4
    ff6a:	f006 fd78 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ff6e:	e7ff      	b.n	ff70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2c88>
    ff70:	f8dd 1af0 	ldr.w	r1, [sp, #2800]	; 0xaf0
    ff74:	f24f 70ec 	movw	r0, #63468	; 0xf7ec
    ff78:	f2c0 0001 	movt	r0, #1
    ff7c:	6802      	ldr	r2, [r0, #0]
    ff7e:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    ff82:	f002 fa85 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ff86:	e7ff      	b.n	ff88 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ca0>
    ff88:	e7ff      	b.n	ff8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ca2>
                self.st = self.v[x];
    ff8a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ff8e:	280f      	cmp	r0, #15
    ff90:	f200 8552 	bhi.w	10a38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3750>
    ff94:	e7ff      	b.n	ff96 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2cae>
    ff96:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ff9a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ff9e:	1842      	adds	r2, r0, r1
    ffa0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ffa4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
        match (
    ffa8:	f000 bc6b 	b.w	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
    ffac:	2005      	movs	r0, #5
    ffae:	f8cd 0b20 	str.w	r0, [sp, #2848]	; 0xb20
    ffb2:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
    ffb6:	f2c0 0001 	movt	r0, #1
    ffba:	6801      	ldr	r1, [r0, #0]
    ffbc:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    ffc0:	f006 fe88 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ffc4:	9036      	str	r0, [sp, #216]	; 0xd8
    ffc6:	e01f      	b.n	10008 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2d20>
    ffc8:	2001      	movs	r0, #1
    ffca:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    ffce:	e015      	b.n	fffc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2d14>
    ffd0:	2000      	movs	r0, #0
    ffd2:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    ffd6:	e011      	b.n	fffc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2d14>
    ffd8:	2000      	movs	r0, #0
    ffda:	f88d 0e9b 	strb.w	r0, [sp, #3739]	; 0xe9b
    ffde:	f89d 1e9b 	ldrb.w	r1, [sp, #3739]	; 0xe9b
    ffe2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ffe6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ffea:	f001 fa22 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ffee:	f8cd 0e9c 	str.w	r0, [sp, #3740]	; 0xe9c
    fff2:	f8dd 0e9c 	ldr.w	r0, [sp, #3740]	; 0xe9c
    fff6:	f8cd 0b28 	str.w	r0, [sp, #2856]	; 0xb28
    fffa:	e00a      	b.n	10012 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2d2a>
    fffc:	f89d 0b27 	ldrb.w	r0, [sp, #2855]	; 0xb27
   10000:	07c0      	lsls	r0, r0, #31
   10002:	2800      	cmp	r0, #0
   10004:	d112      	bne.n	1002c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2d44>
   10006:	e055      	b.n	100b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2dcc>
   10008:	9836      	ldr	r0, [sp, #216]	; 0xd8
   1000a:	07c1      	lsls	r1, r0, #31
   1000c:	2900      	cmp	r1, #0
   1000e:	d1e3      	bne.n	ffd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2cf0>
   10010:	e7de      	b.n	ffd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ce8>
   10012:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
   10016:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
   1001a:	f006 fe5b 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   1001e:	9035      	str	r0, [sp, #212]	; 0xd4
   10020:	e7ff      	b.n	10022 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2d3a>
   10022:	9835      	ldr	r0, [sp, #212]	; 0xd4
   10024:	07c1      	lsls	r1, r0, #31
   10026:	2900      	cmp	r1, #0
   10028:	d1ce      	bne.n	ffc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ce0>
   1002a:	e7d1      	b.n	ffd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ce8>
                trace!("[{:04x}] ADD I, Vx", self.pc);
   1002c:	f24f 707c 	movw	r0, #63356	; 0xf77c
   10030:	f2c0 0001 	movt	r0, #1
   10034:	6801      	ldr	r1, [r0, #0]
   10036:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1003a:	f100 0212 	add.w	r2, r0, #18
   1003e:	f8cd 2b4c 	str.w	r2, [sp, #2892]	; 0xb4c
   10042:	f8dd 2b4c 	ldr.w	r2, [sp, #2892]	; 0xb4c
   10046:	f8cd 2cc0 	str.w	r2, [sp, #3264]	; 0xcc0
   1004a:	f249 13f3 	movw	r3, #37363	; 0x91f3
   1004e:	f2c0 0301 	movt	r3, #1
   10052:	4610      	mov	r0, r2
   10054:	9134      	str	r1, [sp, #208]	; 0xd0
   10056:	4619      	mov	r1, r3
   10058:	f7fa fbbe 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   1005c:	9033      	str	r0, [sp, #204]	; 0xcc
   1005e:	9132      	str	r1, [sp, #200]	; 0xc8
   10060:	e7ff      	b.n	10062 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2d7a>
   10062:	9833      	ldr	r0, [sp, #204]	; 0xcc
   10064:	f8cd 0b44 	str.w	r0, [sp, #2884]	; 0xb44
   10068:	9932      	ldr	r1, [sp, #200]	; 0xc8
   1006a:	f8cd 1b48 	str.w	r1, [sp, #2888]	; 0xb48
   1006e:	f24f 5238 	movw	r2, #62776	; 0xf538
   10072:	f2c0 0201 	movt	r2, #1
   10076:	6812      	ldr	r2, [r2, #0]
   10078:	466b      	mov	r3, sp
   1007a:	f04f 0c01 	mov.w	ip, #1
   1007e:	f8c3 c008 	str.w	ip, [r3, #8]
   10082:	605a      	str	r2, [r3, #4]
   10084:	f8c3 c000 	str.w	ip, [r3]
   10088:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
   1008c:	2202      	movs	r2, #2
   1008e:	f60d 3344 	addw	r3, sp, #2884	; 0xb44
   10092:	9934      	ldr	r1, [sp, #208]	; 0xd0
   10094:	f006 fce3 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   10098:	e7ff      	b.n	1009a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2db2>
   1009a:	f8dd 1b20 	ldr.w	r1, [sp, #2848]	; 0xb20
   1009e:	f24f 709c 	movw	r0, #63388	; 0xf79c
   100a2:	f2c0 0001 	movt	r0, #1
   100a6:	6802      	ldr	r2, [r0, #0]
   100a8:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
   100ac:	f002 f9f0 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   100b0:	e7ff      	b.n	100b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2dca>
   100b2:	e7ff      	b.n	100b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2dcc>
                self.i = self.i.wrapping_add(self.v[x].into());
   100b4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   100b8:	8a01      	ldrh	r1, [r0, #16]
   100ba:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
   100be:	2a0f      	cmp	r2, #15
   100c0:	9131      	str	r1, [sp, #196]	; 0xc4
   100c2:	f200 84af 	bhi.w	10a24 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x373c>
   100c6:	e7ff      	b.n	100c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2de0>
   100c8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   100cc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   100d0:	1842      	adds	r2, r0, r1
   100d2:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
   100d6:	f001 f99f 	bl	11418 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
   100da:	9030      	str	r0, [sp, #192]	; 0xc0
   100dc:	e7ff      	b.n	100de <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2df6>
   100de:	9831      	ldr	r0, [sp, #196]	; 0xc4
   100e0:	9930      	ldr	r1, [sp, #192]	; 0xc0
   100e2:	f006 fdbd 	bl	16c60 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
   100e6:	902f      	str	r0, [sp, #188]	; 0xbc
   100e8:	e7ff      	b.n	100ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e02>
   100ea:	982f      	ldr	r0, [sp, #188]	; 0xbc
   100ec:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   100f0:	8208      	strh	r0, [r1, #16]
        match (
   100f2:	e3c6      	b.n	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
   100f4:	2005      	movs	r0, #5
   100f6:	f8cd 0b50 	str.w	r0, [sp, #2896]	; 0xb50
   100fa:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
   100fe:	f2c0 0001 	movt	r0, #1
   10102:	6801      	ldr	r1, [r0, #0]
   10104:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
   10108:	f006 fde4 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   1010c:	902e      	str	r0, [sp, #184]	; 0xb8
   1010e:	e01f      	b.n	10150 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e68>
   10110:	2001      	movs	r0, #1
   10112:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
   10116:	e015      	b.n	10144 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e5c>
   10118:	2000      	movs	r0, #0
   1011a:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
   1011e:	e011      	b.n	10144 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e5c>
   10120:	2000      	movs	r0, #0
   10122:	f88d 0ea3 	strb.w	r0, [sp, #3747]	; 0xea3
   10126:	f89d 1ea3 	ldrb.w	r1, [sp, #3747]	; 0xea3
   1012a:	f644 206c 	movw	r0, #19052	; 0x4a6c
   1012e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10132:	f001 f97e 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   10136:	f8cd 0ea4 	str.w	r0, [sp, #3748]	; 0xea4
   1013a:	f8dd 0ea4 	ldr.w	r0, [sp, #3748]	; 0xea4
   1013e:	f8cd 0b58 	str.w	r0, [sp, #2904]	; 0xb58
   10142:	e00a      	b.n	1015a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e72>
   10144:	f89d 0b57 	ldrb.w	r0, [sp, #2903]	; 0xb57
   10148:	07c0      	lsls	r0, r0, #31
   1014a:	2800      	cmp	r0, #0
   1014c:	d112      	bne.n	10174 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e8c>
   1014e:	e055      	b.n	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f14>
   10150:	982e      	ldr	r0, [sp, #184]	; 0xb8
   10152:	07c1      	lsls	r1, r0, #31
   10154:	2900      	cmp	r1, #0
   10156:	d1e3      	bne.n	10120 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e38>
   10158:	e7de      	b.n	10118 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e30>
   1015a:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
   1015e:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
   10162:	f006 fdb7 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   10166:	902d      	str	r0, [sp, #180]	; 0xb4
   10168:	e7ff      	b.n	1016a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e82>
   1016a:	982d      	ldr	r0, [sp, #180]	; 0xb4
   1016c:	07c1      	lsls	r1, r0, #31
   1016e:	2900      	cmp	r1, #0
   10170:	d1ce      	bne.n	10110 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e28>
   10172:	e7d1      	b.n	10118 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2e30>
                trace!("[{:04x}] LD F, Vx", self.pc);
   10174:	f24f 60f8 	movw	r0, #63224	; 0xf6f8
   10178:	f2c0 0001 	movt	r0, #1
   1017c:	6801      	ldr	r1, [r0, #0]
   1017e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10182:	f100 0212 	add.w	r2, r0, #18
   10186:	f8cd 2b7c 	str.w	r2, [sp, #2940]	; 0xb7c
   1018a:	f8dd 2b7c 	ldr.w	r2, [sp, #2940]	; 0xb7c
   1018e:	f8cd 2cbc 	str.w	r2, [sp, #3260]	; 0xcbc
   10192:	f249 13f3 	movw	r3, #37363	; 0x91f3
   10196:	f2c0 0301 	movt	r3, #1
   1019a:	4610      	mov	r0, r2
   1019c:	912c      	str	r1, [sp, #176]	; 0xb0
   1019e:	4619      	mov	r1, r3
   101a0:	f7fa fb1a 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   101a4:	902b      	str	r0, [sp, #172]	; 0xac
   101a6:	912a      	str	r1, [sp, #168]	; 0xa8
   101a8:	e7ff      	b.n	101aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2ec2>
   101aa:	982b      	ldr	r0, [sp, #172]	; 0xac
   101ac:	f8cd 0b74 	str.w	r0, [sp, #2932]	; 0xb74
   101b0:	992a      	ldr	r1, [sp, #168]	; 0xa8
   101b2:	f8cd 1b78 	str.w	r1, [sp, #2936]	; 0xb78
   101b6:	f24f 5238 	movw	r2, #62776	; 0xf538
   101ba:	f2c0 0201 	movt	r2, #1
   101be:	6812      	ldr	r2, [r2, #0]
   101c0:	466b      	mov	r3, sp
   101c2:	f04f 0c01 	mov.w	ip, #1
   101c6:	f8c3 c008 	str.w	ip, [r3, #8]
   101ca:	605a      	str	r2, [r3, #4]
   101cc:	f8c3 c000 	str.w	ip, [r3]
   101d0:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
   101d4:	2202      	movs	r2, #2
   101d6:	f60d 3374 	addw	r3, sp, #2932	; 0xb74
   101da:	992c      	ldr	r1, [sp, #176]	; 0xb0
   101dc:	f006 fc3f 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   101e0:	e7ff      	b.n	101e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2efa>
   101e2:	f8dd 1b50 	ldr.w	r1, [sp, #2896]	; 0xb50
   101e6:	f24f 7018 	movw	r0, #63256	; 0xf718
   101ea:	f2c0 0001 	movt	r0, #1
   101ee:	6802      	ldr	r2, [r0, #0]
   101f0:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
   101f4:	f002 f94c 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   101f8:	e7ff      	b.n	101fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f12>
   101fa:	e7ff      	b.n	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f14>
                self.i = (self.v[x] * 5).into();
   101fc:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   10200:	280f      	cmp	r0, #15
   10202:	f200 83f9 	bhi.w	109f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3710>
   10206:	e7ff      	b.n	10208 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f20>
   10208:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1020c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10210:	1842      	adds	r2, r0, r1
   10212:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
   10216:	2305      	movs	r3, #5
   10218:	fba2 2303 	umull	r2, r3, r2, r3
   1021c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
   10220:	f04f 0e00 	mov.w	lr, #0
   10224:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
   10228:	bf18      	it	ne
   1022a:	f04f 0c01 	movne.w	ip, #1
   1022e:	2b00      	cmp	r3, #0
   10230:	bf18      	it	ne
   10232:	2301      	movne	r3, #1
   10234:	ea43 030c 	orr.w	r3, r3, ip
   10238:	2b00      	cmp	r3, #0
   1023a:	9229      	str	r2, [sp, #164]	; 0xa4
   1023c:	f040 83e6 	bne.w	10a0c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3724>
   10240:	e7ff      	b.n	10242 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f5a>
   10242:	9829      	ldr	r0, [sp, #164]	; 0xa4
   10244:	f001 f8e8 	bl	11418 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
   10248:	9028      	str	r0, [sp, #160]	; 0xa0
   1024a:	e7ff      	b.n	1024c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f64>
   1024c:	9828      	ldr	r0, [sp, #160]	; 0xa0
   1024e:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   10252:	8208      	strh	r0, [r1, #16]
        match (
   10254:	e315      	b.n	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
   10256:	2005      	movs	r0, #5
   10258:	f8cd 0b80 	str.w	r0, [sp, #2944]	; 0xb80
   1025c:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
   10260:	f2c0 0001 	movt	r0, #1
   10264:	6801      	ldr	r1, [r0, #0]
   10266:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
   1026a:	f006 fd33 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   1026e:	9027      	str	r0, [sp, #156]	; 0x9c
   10270:	e01f      	b.n	102b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2fca>
   10272:	2001      	movs	r0, #1
   10274:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
   10278:	e015      	b.n	102a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2fbe>
   1027a:	2000      	movs	r0, #0
   1027c:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
   10280:	e011      	b.n	102a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2fbe>
   10282:	2000      	movs	r0, #0
   10284:	f88d 0eab 	strb.w	r0, [sp, #3755]	; 0xeab
   10288:	f89d 1eab 	ldrb.w	r1, [sp, #3755]	; 0xeab
   1028c:	f644 206c 	movw	r0, #19052	; 0x4a6c
   10290:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10294:	f001 f8cd 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   10298:	f8cd 0eac 	str.w	r0, [sp, #3756]	; 0xeac
   1029c:	f8dd 0eac 	ldr.w	r0, [sp, #3756]	; 0xeac
   102a0:	f8cd 0b88 	str.w	r0, [sp, #2952]	; 0xb88
   102a4:	e00a      	b.n	102bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2fd4>
   102a6:	f89d 0b87 	ldrb.w	r0, [sp, #2951]	; 0xb87
   102aa:	07c0      	lsls	r0, r0, #31
   102ac:	2800      	cmp	r0, #0
   102ae:	d112      	bne.n	102d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2fee>
   102b0:	e055      	b.n	1035e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3076>
   102b2:	9827      	ldr	r0, [sp, #156]	; 0x9c
   102b4:	07c1      	lsls	r1, r0, #31
   102b6:	2900      	cmp	r1, #0
   102b8:	d1e3      	bne.n	10282 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f9a>
   102ba:	e7de      	b.n	1027a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f92>
   102bc:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
   102c0:	f60d 3188 	addw	r1, sp, #2952	; 0xb88
   102c4:	f006 fd06 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   102c8:	9026      	str	r0, [sp, #152]	; 0x98
   102ca:	e7ff      	b.n	102cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2fe4>
   102cc:	9826      	ldr	r0, [sp, #152]	; 0x98
   102ce:	07c1      	lsls	r1, r0, #31
   102d0:	2900      	cmp	r1, #0
   102d2:	d1ce      	bne.n	10272 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f8a>
   102d4:	e7d1      	b.n	1027a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x2f92>
                trace!("[{:04x}] LD B, Vx", self.pc);
   102d6:	f24f 6058 	movw	r0, #63064	; 0xf658
   102da:	f2c0 0001 	movt	r0, #1
   102de:	6801      	ldr	r1, [r0, #0]
   102e0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   102e4:	f100 0212 	add.w	r2, r0, #18
   102e8:	f8cd 2bac 	str.w	r2, [sp, #2988]	; 0xbac
   102ec:	f8dd 2bac 	ldr.w	r2, [sp, #2988]	; 0xbac
   102f0:	f8cd 2cb4 	str.w	r2, [sp, #3252]	; 0xcb4
   102f4:	f249 13f3 	movw	r3, #37363	; 0x91f3
   102f8:	f2c0 0301 	movt	r3, #1
   102fc:	4610      	mov	r0, r2
   102fe:	9125      	str	r1, [sp, #148]	; 0x94
   10300:	4619      	mov	r1, r3
   10302:	f7fa fa69 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   10306:	9024      	str	r0, [sp, #144]	; 0x90
   10308:	9123      	str	r1, [sp, #140]	; 0x8c
   1030a:	e7ff      	b.n	1030c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3024>
   1030c:	9824      	ldr	r0, [sp, #144]	; 0x90
   1030e:	f8cd 0ba4 	str.w	r0, [sp, #2980]	; 0xba4
   10312:	9923      	ldr	r1, [sp, #140]	; 0x8c
   10314:	f8cd 1ba8 	str.w	r1, [sp, #2984]	; 0xba8
   10318:	f24f 5238 	movw	r2, #62776	; 0xf538
   1031c:	f2c0 0201 	movt	r2, #1
   10320:	6812      	ldr	r2, [r2, #0]
   10322:	466b      	mov	r3, sp
   10324:	f04f 0c01 	mov.w	ip, #1
   10328:	f8c3 c008 	str.w	ip, [r3, #8]
   1032c:	605a      	str	r2, [r3, #4]
   1032e:	f8c3 c000 	str.w	ip, [r3]
   10332:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
   10336:	2202      	movs	r2, #2
   10338:	f60d 33a4 	addw	r3, sp, #2980	; 0xba4
   1033c:	9925      	ldr	r1, [sp, #148]	; 0x94
   1033e:	f006 fb8e 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   10342:	e7ff      	b.n	10344 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x305c>
   10344:	f8dd 1b80 	ldr.w	r1, [sp, #2944]	; 0xb80
   10348:	f24f 6078 	movw	r0, #63096	; 0xf678
   1034c:	f2c0 0001 	movt	r0, #1
   10350:	6802      	ldr	r2, [r0, #0]
   10352:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
   10356:	f002 f89b 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   1035a:	e7ff      	b.n	1035c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3074>
   1035c:	e7ff      	b.n	1035e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3076>
                let bcd = self.v[x];
   1035e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   10362:	280f      	cmp	r0, #15
   10364:	f200 8308 	bhi.w	10978 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3690>
   10368:	e7ff      	b.n	1036a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3082>
   1036a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1036e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10372:	1842      	adds	r2, r0, r1
   10374:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
   10378:	4613      	mov	r3, r2
   1037a:	f88d 2cbb 	strb.w	r2, [sp, #3259]	; 0xcbb
   1037e:	f248 5c1f 	movw	ip, #34079	; 0x851f
   10382:	f2c5 1ceb 	movt	ip, #20971	; 0x51eb
                self.mem[self.i as usize] = (bcd / 100) % 10;
   10386:	fba2 2c0c 	umull	r2, ip, r2, ip
   1038a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   1038e:	f8b0 e010 	ldrh.w	lr, [r0, #16]
   10392:	4674      	mov	r4, lr
   10394:	2500      	movs	r5, #0
   10396:	ebb5 3f1e 	cmp.w	r5, lr, lsr #12
   1039a:	9322      	str	r3, [sp, #136]	; 0x88
   1039c:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
   103a0:	9420      	str	r4, [sp, #128]	; 0x80
   103a2:	f040 82f3 	bne.w	1098c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x36a4>
   103a6:	e7ff      	b.n	103a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x30c0>
   103a8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   103ac:	9920      	ldr	r1, [sp, #128]	; 0x80
   103ae:	1842      	adds	r2, r0, r1
   103b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   103b2:	fa5f fc83 	uxtb.w	ip, r3
   103b6:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
   103ba:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
   103be:	fbac 450e 	umull	r4, r5, ip, lr
   103c2:	08ed      	lsrs	r5, r5, #3
   103c4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   103c8:	ebac 0c45 	sub.w	ip, ip, r5, lsl #1
   103cc:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
   103d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
   103d2:	fa5f fc82 	uxtb.w	ip, r2
   103d6:	fbac ce0e 	umull	ip, lr, ip, lr
   103da:	ea4f 0ede 	mov.w	lr, lr, lsr #3
   103de:	8a05      	ldrh	r5, [r0, #16]
   103e0:	3501      	adds	r5, #1
   103e2:	2600      	movs	r6, #0
   103e4:	2e00      	cmp	r6, #0
   103e6:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
   103ea:	951e      	str	r5, [sp, #120]	; 0x78
   103ec:	f040 82d8 	bne.w	109a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x36b8>
   103f0:	e7ff      	b.n	103f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x310a>
   103f2:	2000      	movs	r0, #0
   103f4:	991e      	ldr	r1, [sp, #120]	; 0x78
   103f6:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   103fa:	f040 82dd 	bne.w	109b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x36d0>
   103fe:	e7ff      	b.n	10400 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3118>
   10400:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10404:	991e      	ldr	r1, [sp, #120]	; 0x78
   10406:	1842      	adds	r2, r0, r1
   10408:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1040a:	fa5f fc83 	uxtb.w	ip, r3
   1040e:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
   10412:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
   10416:	fbac e40e 	umull	lr, r4, ip, lr
   1041a:	08e4      	lsrs	r4, r4, #3
   1041c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   10420:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
   10424:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 2] = bcd % 10;
   10428:	8a02      	ldrh	r2, [r0, #16]
   1042a:	3202      	adds	r2, #2
   1042c:	f04f 0c00 	mov.w	ip, #0
   10430:	f1bc 0f00 	cmp.w	ip, #0
   10434:	921d      	str	r2, [sp, #116]	; 0x74
   10436:	f040 82c9 	bne.w	109cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x36e4>
   1043a:	e7ff      	b.n	1043c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3154>
   1043c:	2000      	movs	r0, #0
   1043e:	991d      	ldr	r1, [sp, #116]	; 0x74
   10440:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   10444:	f040 82ce 	bne.w	109e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x36fc>
   10448:	e7ff      	b.n	1044a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3162>
   1044a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1044e:	991d      	ldr	r1, [sp, #116]	; 0x74
   10450:	1842      	adds	r2, r0, r1
   10452:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10454:	fa5f fc83 	uxtb.w	ip, r3
   10458:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
   1045c:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
   10460:	fbac e40e 	umull	lr, r4, ip, lr
   10464:	08e4      	lsrs	r4, r4, #3
   10466:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1046a:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
   1046e:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
        match (
   10472:	e206      	b.n	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
   10474:	2005      	movs	r0, #5
   10476:	f8cd 0bb0 	str.w	r0, [sp, #2992]	; 0xbb0
   1047a:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
   1047e:	f2c0 0001 	movt	r0, #1
   10482:	6801      	ldr	r1, [r0, #0]
   10484:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
   10488:	f006 fc24 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   1048c:	901c      	str	r0, [sp, #112]	; 0x70
   1048e:	e01f      	b.n	104d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x31e8>
   10490:	2001      	movs	r0, #1
   10492:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
   10496:	e015      	b.n	104c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x31dc>
   10498:	2000      	movs	r0, #0
   1049a:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
   1049e:	e011      	b.n	104c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x31dc>
   104a0:	2000      	movs	r0, #0
   104a2:	f88d 0eb3 	strb.w	r0, [sp, #3763]	; 0xeb3
   104a6:	f89d 1eb3 	ldrb.w	r1, [sp, #3763]	; 0xeb3
   104aa:	f644 206c 	movw	r0, #19052	; 0x4a6c
   104ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
   104b2:	f000 ffbe 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   104b6:	f8cd 0eb4 	str.w	r0, [sp, #3764]	; 0xeb4
   104ba:	f8dd 0eb4 	ldr.w	r0, [sp, #3764]	; 0xeb4
   104be:	f8cd 0bb8 	str.w	r0, [sp, #3000]	; 0xbb8
   104c2:	e00a      	b.n	104da <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x31f2>
   104c4:	f89d 0bb7 	ldrb.w	r0, [sp, #2999]	; 0xbb7
   104c8:	07c0      	lsls	r0, r0, #31
   104ca:	2800      	cmp	r0, #0
   104cc:	d112      	bne.n	104f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x320c>
   104ce:	e055      	b.n	1057c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3294>
   104d0:	981c      	ldr	r0, [sp, #112]	; 0x70
   104d2:	07c1      	lsls	r1, r0, #31
   104d4:	2900      	cmp	r1, #0
   104d6:	d1e3      	bne.n	104a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x31b8>
   104d8:	e7de      	b.n	10498 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x31b0>
   104da:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
   104de:	f60d 31b8 	addw	r1, sp, #3000	; 0xbb8
   104e2:	f006 fbf7 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   104e6:	901b      	str	r0, [sp, #108]	; 0x6c
   104e8:	e7ff      	b.n	104ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3202>
   104ea:	981b      	ldr	r0, [sp, #108]	; 0x6c
   104ec:	07c1      	lsls	r1, r0, #31
   104ee:	2900      	cmp	r1, #0
   104f0:	d1ce      	bne.n	10490 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x31a8>
   104f2:	e7d1      	b.n	10498 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x31b0>
                trace!("[{:04x}] LD [I], Vx", self.pc);
   104f4:	f24f 50d8 	movw	r0, #62936	; 0xf5d8
   104f8:	f2c0 0001 	movt	r0, #1
   104fc:	6801      	ldr	r1, [r0, #0]
   104fe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10502:	f100 0212 	add.w	r2, r0, #18
   10506:	f8cd 2bdc 	str.w	r2, [sp, #3036]	; 0xbdc
   1050a:	f8dd 2bdc 	ldr.w	r2, [sp, #3036]	; 0xbdc
   1050e:	f8cd 2ca0 	str.w	r2, [sp, #3232]	; 0xca0
   10512:	f249 13f3 	movw	r3, #37363	; 0x91f3
   10516:	f2c0 0301 	movt	r3, #1
   1051a:	4610      	mov	r0, r2
   1051c:	911a      	str	r1, [sp, #104]	; 0x68
   1051e:	4619      	mov	r1, r3
   10520:	f7fa f95a 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   10524:	9019      	str	r0, [sp, #100]	; 0x64
   10526:	9118      	str	r1, [sp, #96]	; 0x60
   10528:	e7ff      	b.n	1052a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3242>
   1052a:	9819      	ldr	r0, [sp, #100]	; 0x64
   1052c:	f8cd 0bd4 	str.w	r0, [sp, #3028]	; 0xbd4
   10530:	9918      	ldr	r1, [sp, #96]	; 0x60
   10532:	f8cd 1bd8 	str.w	r1, [sp, #3032]	; 0xbd8
   10536:	f24f 5238 	movw	r2, #62776	; 0xf538
   1053a:	f2c0 0201 	movt	r2, #1
   1053e:	6812      	ldr	r2, [r2, #0]
   10540:	466b      	mov	r3, sp
   10542:	f04f 0c01 	mov.w	ip, #1
   10546:	f8c3 c008 	str.w	ip, [r3, #8]
   1054a:	605a      	str	r2, [r3, #4]
   1054c:	f8c3 c000 	str.w	ip, [r3]
   10550:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
   10554:	2202      	movs	r2, #2
   10556:	f60d 33d4 	addw	r3, sp, #3028	; 0xbd4
   1055a:	991a      	ldr	r1, [sp, #104]	; 0x68
   1055c:	f006 fa7f 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   10560:	e7ff      	b.n	10562 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x327a>
   10562:	f8dd 1bb0 	ldr.w	r1, [sp, #2992]	; 0xbb0
   10566:	f24f 50f8 	movw	r0, #62968	; 0xf5f8
   1056a:	f2c0 0001 	movt	r0, #1
   1056e:	6802      	ldr	r2, [r0, #0]
   10570:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
   10574:	f001 ff8c 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   10578:	e7ff      	b.n	1057a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3292>
   1057a:	e7ff      	b.n	1057c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3294>
                let x = x as usize;
   1057c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   10580:	f8cd 0ca4 	str.w	r0, [sp, #3236]	; 0xca4
                for i in 0..(x + 1) {
   10584:	1c41      	adds	r1, r0, #1
   10586:	460a      	mov	r2, r1
   10588:	4281      	cmp	r1, r0
   1058a:	9217      	str	r2, [sp, #92]	; 0x5c
   1058c:	f0c0 81c9 	bcc.w	10922 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x363a>
   10590:	e7ff      	b.n	10592 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x32aa>
   10592:	2000      	movs	r0, #0
   10594:	f8cd 0be0 	str.w	r0, [sp, #3040]	; 0xbe0
   10598:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1059a:	f8cd 0be4 	str.w	r0, [sp, #3044]	; 0xbe4
   1059e:	f8dd 0be0 	ldr.w	r0, [sp, #3040]	; 0xbe0
   105a2:	f8dd 1be4 	ldr.w	r1, [sp, #3044]	; 0xbe4
   105a6:	f001 fcff 	bl	11fa8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   105aa:	9016      	str	r0, [sp, #88]	; 0x58
   105ac:	9115      	str	r1, [sp, #84]	; 0x54
   105ae:	e7ff      	b.n	105b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x32c8>
   105b0:	9816      	ldr	r0, [sp, #88]	; 0x58
   105b2:	f8cd 0be8 	str.w	r0, [sp, #3048]	; 0xbe8
   105b6:	9915      	ldr	r1, [sp, #84]	; 0x54
   105b8:	f8cd 1bec 	str.w	r1, [sp, #3052]	; 0xbec
   105bc:	e7ff      	b.n	105be <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x32d6>
   105be:	f60d 30e8 	addw	r0, sp, #3048	; 0xbe8
   105c2:	f001 fc66 	bl	11e92 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   105c6:	f8cd 1bf4 	str.w	r1, [sp, #3060]	; 0xbf4
   105ca:	f8cd 0bf0 	str.w	r0, [sp, #3056]	; 0xbf0
   105ce:	e7ff      	b.n	105d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x32e8>
   105d0:	f8dd 0bf0 	ldr.w	r0, [sp, #3056]	; 0xbf0
   105d4:	2800      	cmp	r0, #0
   105d6:	d001      	beq.n	105dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x32f4>
   105d8:	e7ff      	b.n	105da <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x32f2>
   105da:	e001      	b.n	105e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x32f8>
        match (
   105dc:	e151      	b.n	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
                for i in 0..(x + 1) {
   105de:	defe      	udf	#254	; 0xfe
   105e0:	f8dd 0bf4 	ldr.w	r0, [sp, #3060]	; 0xbf4
   105e4:	f8cd 0ca8 	str.w	r0, [sp, #3240]	; 0xca8
   105e8:	f8cd 0cac 	str.w	r0, [sp, #3244]	; 0xcac
   105ec:	f8cd 0cb0 	str.w	r0, [sp, #3248]	; 0xcb0
                    self.mem[self.i as usize + i] = self.v[i];
   105f0:	280f      	cmp	r0, #15
   105f2:	9014      	str	r0, [sp, #80]	; 0x50
   105f4:	f200 81a1 	bhi.w	1093a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3652>
   105f8:	e7ff      	b.n	105fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3312>
   105fa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   105fe:	9914      	ldr	r1, [sp, #80]	; 0x50
   10600:	1842      	adds	r2, r0, r1
   10602:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
   10606:	8a03      	ldrh	r3, [r0, #16]
   10608:	eb03 0c01 	add.w	ip, r3, r1
   1060c:	46e6      	mov	lr, ip
   1060e:	459c      	cmp	ip, r3
   10610:	9213      	str	r2, [sp, #76]	; 0x4c
   10612:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
   10616:	f0c0 8199 	bcc.w	1094c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3664>
   1061a:	e7ff      	b.n	1061c <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3334>
   1061c:	2000      	movs	r0, #0
   1061e:	9912      	ldr	r1, [sp, #72]	; 0x48
   10620:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   10624:	f040 819e 	bne.w	10964 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x367c>
   10628:	e7ff      	b.n	1062a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3342>
   1062a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1062e:	9912      	ldr	r1, [sp, #72]	; 0x48
   10630:	1842      	adds	r2, r0, r1
   10632:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10634:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
                for i in 0..(x + 1) {
   10638:	e7c1      	b.n	105be <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x32d6>
   1063a:	2005      	movs	r0, #5
   1063c:	f8cd 0bf8 	str.w	r0, [sp, #3064]	; 0xbf8
   10640:	f24f 40f0 	movw	r0, #62704	; 0xf4f0
   10644:	f2c0 0001 	movt	r0, #1
   10648:	6801      	ldr	r1, [r0, #0]
   1064a:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
   1064e:	f006 fb41 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   10652:	9011      	str	r0, [sp, #68]	; 0x44
   10654:	e01f      	b.n	10696 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x33ae>
   10656:	2001      	movs	r0, #1
   10658:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
   1065c:	e015      	b.n	1068a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x33a2>
   1065e:	2000      	movs	r0, #0
   10660:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
   10664:	e011      	b.n	1068a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x33a2>
   10666:	2000      	movs	r0, #0
   10668:	f88d 0ebb 	strb.w	r0, [sp, #3771]	; 0xebb
   1066c:	f89d 1ebb 	ldrb.w	r1, [sp, #3771]	; 0xebb
   10670:	f644 206c 	movw	r0, #19052	; 0x4a6c
   10674:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10678:	f000 fedb 	bl	11432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
   1067c:	f8cd 0ebc 	str.w	r0, [sp, #3772]	; 0xebc
   10680:	f8dd 0ebc 	ldr.w	r0, [sp, #3772]	; 0xebc
   10684:	f8cd 0c00 	str.w	r0, [sp, #3072]	; 0xc00
   10688:	e00a      	b.n	106a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x33b8>
   1068a:	f89d 0bff 	ldrb.w	r0, [sp, #3071]	; 0xbff
   1068e:	07c0      	lsls	r0, r0, #31
   10690:	2800      	cmp	r0, #0
   10692:	d112      	bne.n	106ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x33d2>
   10694:	e055      	b.n	10742 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x345a>
   10696:	9811      	ldr	r0, [sp, #68]	; 0x44
   10698:	07c1      	lsls	r1, r0, #31
   1069a:	2900      	cmp	r1, #0
   1069c:	d1e3      	bne.n	10666 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x337e>
   1069e:	e7de      	b.n	1065e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3376>
   106a0:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
   106a4:	f50d 6140 	add.w	r1, sp, #3072	; 0xc00
   106a8:	f006 fb14 	bl	16cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   106ac:	9010      	str	r0, [sp, #64]	; 0x40
   106ae:	e7ff      	b.n	106b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x33c8>
   106b0:	9810      	ldr	r0, [sp, #64]	; 0x40
   106b2:	07c1      	lsls	r1, r0, #31
   106b4:	2900      	cmp	r1, #0
   106b6:	d1ce      	bne.n	10656 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x336e>
   106b8:	e7d1      	b.n	1065e <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3376>
                trace!("[{:04x}] LD Vx, [I]", self.pc);
   106ba:	f24f 5014 	movw	r0, #62740	; 0xf514
   106be:	f2c0 0001 	movt	r0, #1
   106c2:	6801      	ldr	r1, [r0, #0]
   106c4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   106c8:	f100 0212 	add.w	r2, r0, #18
   106cc:	f8cd 2c24 	str.w	r2, [sp, #3108]	; 0xc24
   106d0:	f8dd 2c24 	ldr.w	r2, [sp, #3108]	; 0xc24
   106d4:	f8cd 2c8c 	str.w	r2, [sp, #3212]	; 0xc8c
   106d8:	f249 13f3 	movw	r3, #37363	; 0x91f3
   106dc:	f2c0 0301 	movt	r3, #1
   106e0:	4610      	mov	r0, r2
   106e2:	910f      	str	r1, [sp, #60]	; 0x3c
   106e4:	4619      	mov	r1, r3
   106e6:	f7fa f877 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   106ea:	900e      	str	r0, [sp, #56]	; 0x38
   106ec:	910d      	str	r1, [sp, #52]	; 0x34
   106ee:	e7ff      	b.n	106f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3408>
   106f0:	980e      	ldr	r0, [sp, #56]	; 0x38
   106f2:	f8cd 0c1c 	str.w	r0, [sp, #3100]	; 0xc1c
   106f6:	990d      	ldr	r1, [sp, #52]	; 0x34
   106f8:	f8cd 1c20 	str.w	r1, [sp, #3104]	; 0xc20
   106fc:	f24f 5238 	movw	r2, #62776	; 0xf538
   10700:	f2c0 0201 	movt	r2, #1
   10704:	6812      	ldr	r2, [r2, #0]
   10706:	466b      	mov	r3, sp
   10708:	f04f 0c01 	mov.w	ip, #1
   1070c:	f8c3 c008 	str.w	ip, [r3, #8]
   10710:	605a      	str	r2, [r3, #4]
   10712:	f8c3 c000 	str.w	ip, [r3]
   10716:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
   1071a:	2202      	movs	r2, #2
   1071c:	f60d 431c 	addw	r3, sp, #3100	; 0xc1c
   10720:	990f      	ldr	r1, [sp, #60]	; 0x3c
   10722:	f006 f99c 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   10726:	e7ff      	b.n	10728 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3440>
   10728:	f8dd 1bf8 	ldr.w	r1, [sp, #3064]	; 0xbf8
   1072c:	f24f 5078 	movw	r0, #62840	; 0xf578
   10730:	f2c0 0001 	movt	r0, #1
   10734:	6802      	ldr	r2, [r0, #0]
   10736:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
   1073a:	f001 fea9 	bl	12490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   1073e:	e7ff      	b.n	10740 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3458>
   10740:	e7ff      	b.n	10742 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x345a>
                let x = x as usize;
   10742:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   10746:	f8cd 0c90 	str.w	r0, [sp, #3216]	; 0xc90
                for i in 0..(x + 1) {
   1074a:	1c41      	adds	r1, r0, #1
   1074c:	460a      	mov	r2, r1
   1074e:	4281      	cmp	r1, r0
   10750:	920c      	str	r2, [sp, #48]	; 0x30
   10752:	f0c0 80bb 	bcc.w	108cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x35e4>
   10756:	e7ff      	b.n	10758 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3470>
   10758:	2000      	movs	r0, #0
   1075a:	f8cd 0c28 	str.w	r0, [sp, #3112]	; 0xc28
   1075e:	980c      	ldr	r0, [sp, #48]	; 0x30
   10760:	f8cd 0c2c 	str.w	r0, [sp, #3116]	; 0xc2c
   10764:	f8dd 0c28 	ldr.w	r0, [sp, #3112]	; 0xc28
   10768:	f8dd 1c2c 	ldr.w	r1, [sp, #3116]	; 0xc2c
   1076c:	f001 fc1c 	bl	11fa8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   10770:	900b      	str	r0, [sp, #44]	; 0x2c
   10772:	910a      	str	r1, [sp, #40]	; 0x28
   10774:	e7ff      	b.n	10776 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x348e>
   10776:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10778:	f8cd 0c30 	str.w	r0, [sp, #3120]	; 0xc30
   1077c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1077e:	f8cd 1c34 	str.w	r1, [sp, #3124]	; 0xc34
   10782:	e7ff      	b.n	10784 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x349c>
   10784:	f50d 6043 	add.w	r0, sp, #3120	; 0xc30
   10788:	f001 fb83 	bl	11e92 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   1078c:	f8cd 1c3c 	str.w	r1, [sp, #3132]	; 0xc3c
   10790:	f8cd 0c38 	str.w	r0, [sp, #3128]	; 0xc38
   10794:	e7ff      	b.n	10796 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x34ae>
   10796:	f8dd 0c38 	ldr.w	r0, [sp, #3128]	; 0xc38
   1079a:	2800      	cmp	r0, #0
   1079c:	d001      	beq.n	107a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x34ba>
   1079e:	e7ff      	b.n	107a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x34b8>
   107a0:	e001      	b.n	107a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x34be>
        match (
   107a2:	e06e      	b.n	10882 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x359a>
                for i in 0..(x + 1) {
   107a4:	defe      	udf	#254	; 0xfe
   107a6:	f8dd 0c3c 	ldr.w	r0, [sp, #3132]	; 0xc3c
   107aa:	f8cd 0c94 	str.w	r0, [sp, #3220]	; 0xc94
   107ae:	f8cd 0c98 	str.w	r0, [sp, #3224]	; 0xc98
   107b2:	f8cd 0c9c 	str.w	r0, [sp, #3228]	; 0xc9c
                    self.v[i] = self.mem[self.i as usize + i];
   107b6:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   107ba:	8a0a      	ldrh	r2, [r1, #16]
   107bc:	1813      	adds	r3, r2, r0
   107be:	469c      	mov	ip, r3
   107c0:	4293      	cmp	r3, r2
   107c2:	9009      	str	r0, [sp, #36]	; 0x24
   107c4:	f8cd c020 	str.w	ip, [sp, #32]
   107c8:	f0c0 808c 	bcc.w	108e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x35fc>
   107cc:	e7ff      	b.n	107ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x34e6>
   107ce:	2000      	movs	r0, #0
   107d0:	9908      	ldr	r1, [sp, #32]
   107d2:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   107d6:	f040 8091 	bne.w	108fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3614>
   107da:	e7ff      	b.n	107dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x34f4>
   107dc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   107e0:	9908      	ldr	r1, [sp, #32]
   107e2:	1842      	adds	r2, r0, r1
   107e4:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
   107e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   107ea:	2b0f      	cmp	r3, #15
   107ec:	9207      	str	r2, [sp, #28]
   107ee:	f200 808f 	bhi.w	10910 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3628>
   107f2:	e7ff      	b.n	107f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x350c>
   107f4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   107f8:	9909      	ldr	r1, [sp, #36]	; 0x24
   107fa:	1842      	adds	r2, r0, r1
   107fc:	9b07      	ldr	r3, [sp, #28]
   107fe:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                for i in 0..(x + 1) {
   10802:	e7bf      	b.n	10784 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x349c>
   10804:	f249 11f3 	movw	r1, #37363	; 0x91f3
   10808:	f2c0 0101 	movt	r1, #1
   1080c:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
   10810:	f7f9 ffe2 	bl	a7d8 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   10814:	9006      	str	r0, [sp, #24]
   10816:	9105      	str	r1, [sp, #20]
   10818:	e7ff      	b.n	1081a <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x3532>
   1081a:	f8dd 042c 	ldr.w	r0, [sp, #1068]	; 0x42c
   1081e:	f8cd 0c58 	str.w	r0, [sp, #3160]	; 0xc58
   10822:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   10826:	f8cd 1c5c 	str.w	r1, [sp, #3164]	; 0xc5c
   1082a:	9a06      	ldr	r2, [sp, #24]
   1082c:	f8cd 2c60 	str.w	r2, [sp, #3168]	; 0xc60
   10830:	9b05      	ldr	r3, [sp, #20]
   10832:	f8cd 3c64 	str.w	r3, [sp, #3172]	; 0xc64
   10836:	f240 0cdc 	movw	ip, #220	; 0xdc
   1083a:	f2c0 0c02 	movt	ip, #2
   1083e:	f8dc c000 	ldr.w	ip, [ip]
   10842:	46ee      	mov	lr, sp
   10844:	2402      	movs	r4, #2
   10846:	f8ce 4008 	str.w	r4, [lr, #8]
   1084a:	f8ce c004 	str.w	ip, [lr, #4]
   1084e:	f8ce 4000 	str.w	r4, [lr]
   10852:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
   10856:	f60d 4358 	addw	r3, sp, #3160	; 0xc58
   1085a:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
   1085e:	4622      	mov	r2, r4
   10860:	f006 f8fd 	bl	16a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   10864:	e7ff      	b.n	10866 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x357e>
   10866:	f240 1000 	movw	r0, #256	; 0x100
   1086a:	f2c0 0002 	movt	r0, #2
   1086e:	f007 f8ac 	bl	179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   10872:	9004      	str	r0, [sp, #16]
   10874:	e7ff      	b.n	10876 <_ZN8libchip814Chip8$LT$T$GT$4eval17h6c78568364a63f20E+0x358e>
   10876:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
   1087a:	9904      	ldr	r1, [sp, #16]
   1087c:	f007 f8e2 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   10880:	defe      	udf	#254	; 0xfe
        }
    }
   10882:	f50d 6d6c 	add.w	sp, sp, #3776	; 0xec0
   10886:	bd70      	pop	{r4, r5, r6, pc}
        let h = self.mem[self.pc as usize] as u16;
   10888:	f24f 40a0 	movw	r0, #62624	; 0xf4a0
   1088c:	f2c0 0001 	movt	r0, #1
   10890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10894:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
   10898:	f007 f8b4 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1089c:	defe      	udf	#254	; 0xfe
        let l = self.mem[(self.pc + 1) as usize] as u16;
   1089e:	f24f 40c0 	movw	r0, #62656	; 0xf4c0
   108a2:	f2c0 0001 	movt	r0, #1
   108a6:	f24f 42b0 	movw	r2, #62640	; 0xf4b0
   108aa:	f2c0 0201 	movt	r2, #1
   108ae:	211c      	movs	r1, #28
   108b0:	f007 f892 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   108b4:	defe      	udf	#254	; 0xfe
   108b6:	f24f 40dc 	movw	r0, #62684	; 0xf4dc
   108ba:	f2c0 0001 	movt	r0, #1
   108be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   108c2:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
   108c6:	f007 f89d 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   108ca:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
   108cc:	f24f 40c0 	movw	r0, #62656	; 0xf4c0
   108d0:	f2c0 0001 	movt	r0, #1
   108d4:	f24f 527c 	movw	r2, #62844	; 0xf57c
   108d8:	f2c0 0201 	movt	r2, #1
   108dc:	211c      	movs	r1, #28
   108de:	f007 f87b 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   108e2:	defe      	udf	#254	; 0xfe
                    self.v[i] = self.mem[self.i as usize + i];
   108e4:	f24f 40c0 	movw	r0, #62656	; 0xf4c0
   108e8:	f2c0 0001 	movt	r0, #1
   108ec:	f24f 528c 	movw	r2, #62860	; 0xf58c
   108f0:	f2c0 0201 	movt	r2, #1
   108f4:	211c      	movs	r1, #28
   108f6:	f007 f86f 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   108fa:	defe      	udf	#254	; 0xfe
   108fc:	f24f 509c 	movw	r0, #62876	; 0xf59c
   10900:	f2c0 0001 	movt	r0, #1
   10904:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10908:	9908      	ldr	r1, [sp, #32]
   1090a:	f007 f87b 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1090e:	defe      	udf	#254	; 0xfe
   10910:	f24f 50ac 	movw	r0, #62892	; 0xf5ac
   10914:	f2c0 0001 	movt	r0, #1
   10918:	2210      	movs	r2, #16
   1091a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1091c:	f007 f872 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10920:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
   10922:	f24f 40c0 	movw	r0, #62656	; 0xf4c0
   10926:	f2c0 0001 	movt	r0, #1
   1092a:	f24f 52fc 	movw	r2, #62972	; 0xf5fc
   1092e:	f2c0 0201 	movt	r2, #1
   10932:	211c      	movs	r1, #28
   10934:	f007 f850 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10938:	defe      	udf	#254	; 0xfe
                    self.mem[self.i as usize + i] = self.v[i];
   1093a:	f24f 600c 	movw	r0, #62988	; 0xf60c
   1093e:	f2c0 0001 	movt	r0, #1
   10942:	2210      	movs	r2, #16
   10944:	9914      	ldr	r1, [sp, #80]	; 0x50
   10946:	f007 f85d 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1094a:	defe      	udf	#254	; 0xfe
   1094c:	f24f 40c0 	movw	r0, #62656	; 0xf4c0
   10950:	f2c0 0001 	movt	r0, #1
   10954:	f24f 621c 	movw	r2, #63004	; 0xf61c
   10958:	f2c0 0201 	movt	r2, #1
   1095c:	211c      	movs	r1, #28
   1095e:	f007 f83b 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10962:	defe      	udf	#254	; 0xfe
   10964:	f24f 602c 	movw	r0, #63020	; 0xf62c
   10968:	f2c0 0001 	movt	r0, #1
   1096c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10970:	9912      	ldr	r1, [sp, #72]	; 0x48
   10972:	f007 f847 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10976:	defe      	udf	#254	; 0xfe
                let bcd = self.v[x];
   10978:	f24f 607c 	movw	r0, #63100	; 0xf67c
   1097c:	f2c0 0001 	movt	r0, #1
   10980:	2210      	movs	r2, #16
   10982:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10986:	f007 f83d 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1098a:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize] = (bcd / 100) % 10;
   1098c:	f24f 608c 	movw	r0, #63116	; 0xf68c
   10990:	f2c0 0001 	movt	r0, #1
   10994:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10998:	9920      	ldr	r1, [sp, #128]	; 0x80
   1099a:	f007 f833 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1099e:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
   109a0:	f24f 40c0 	movw	r0, #62656	; 0xf4c0
   109a4:	f2c0 0001 	movt	r0, #1
   109a8:	f24f 629c 	movw	r2, #63132	; 0xf69c
   109ac:	f2c0 0201 	movt	r2, #1
   109b0:	211c      	movs	r1, #28
   109b2:	f007 f811 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   109b6:	defe      	udf	#254	; 0xfe
   109b8:	f24f 60ac 	movw	r0, #63148	; 0xf6ac
   109bc:	f2c0 0001 	movt	r0, #1
   109c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   109c4:	991e      	ldr	r1, [sp, #120]	; 0x78
   109c6:	f007 f81d 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109ca:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 2] = bcd % 10;
   109cc:	f24f 40c0 	movw	r0, #62656	; 0xf4c0
   109d0:	f2c0 0001 	movt	r0, #1
   109d4:	f24f 62bc 	movw	r2, #63164	; 0xf6bc
   109d8:	f2c0 0201 	movt	r2, #1
   109dc:	211c      	movs	r1, #28
   109de:	f006 fffb 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   109e2:	defe      	udf	#254	; 0xfe
   109e4:	f24f 60cc 	movw	r0, #63180	; 0xf6cc
   109e8:	f2c0 0001 	movt	r0, #1
   109ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   109f0:	991d      	ldr	r1, [sp, #116]	; 0x74
   109f2:	f007 f807 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   109f6:	defe      	udf	#254	; 0xfe
                self.i = (self.v[x] * 5).into();
   109f8:	f24f 701c 	movw	r0, #63260	; 0xf71c
   109fc:	f2c0 0001 	movt	r0, #1
   10a00:	2210      	movs	r2, #16
   10a02:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a06:	f006 fffd 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a0a:	defe      	udf	#254	; 0xfe
   10a0c:	f24f 7040 	movw	r0, #63296	; 0xf740
   10a10:	f2c0 0001 	movt	r0, #1
   10a14:	f24f 722c 	movw	r2, #63276	; 0xf72c
   10a18:	f2c0 0201 	movt	r2, #1
   10a1c:	2121      	movs	r1, #33	; 0x21
   10a1e:	f006 ffdb 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10a22:	defe      	udf	#254	; 0xfe
                self.i = self.i.wrapping_add(self.v[x].into());
   10a24:	f24f 70a0 	movw	r0, #63392	; 0xf7a0
   10a28:	f2c0 0001 	movt	r0, #1
   10a2c:	2210      	movs	r2, #16
   10a2e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a32:	f006 ffe7 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a36:	defe      	udf	#254	; 0xfe
                self.st = self.v[x];
   10a38:	f24f 70f0 	movw	r0, #63472	; 0xf7f0
   10a3c:	f2c0 0001 	movt	r0, #1
   10a40:	2210      	movs	r2, #16
   10a42:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a46:	f006 ffdd 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a4a:	defe      	udf	#254	; 0xfe
                self.dt = self.v[x];
   10a4c:	f64f 0040 	movw	r0, #63552	; 0xf840
   10a50:	f2c0 0001 	movt	r0, #1
   10a54:	2210      	movs	r2, #16
   10a56:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a5a:	f006 ffd3 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a5e:	defe      	udf	#254	; 0xfe
                self.v[x] = self.waitkey();
   10a60:	f64f 0090 	movw	r0, #63632	; 0xf890
   10a64:	f2c0 0001 	movt	r0, #1
   10a68:	2210      	movs	r2, #16
   10a6a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a6e:	f006 ffc9 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a72:	defe      	udf	#254	; 0xfe
                self.v[x] = self.dt;
   10a74:	f64f 00e0 	movw	r0, #63712	; 0xf8e0
   10a78:	f2c0 0001 	movt	r0, #1
   10a7c:	2210      	movs	r2, #16
   10a7e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a82:	f006 ffbf 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a86:	defe      	udf	#254	; 0xfe
                if !self.hw.key(self.v[x]) {
   10a88:	f64f 1030 	movw	r0, #63792	; 0xf930
   10a8c:	f2c0 0001 	movt	r0, #1
   10a90:	2210      	movs	r2, #16
   10a92:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10a96:	f006 ffb5 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10a9a:	defe      	udf	#254	; 0xfe
                if self.hw.key(self.v[x]) {
   10a9c:	f64f 1074 	movw	r0, #63860	; 0xf974
   10aa0:	f2c0 0001 	movt	r0, #1
   10aa4:	2210      	movs	r2, #16
   10aa6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10aaa:	f006 ffab 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10aae:	defe      	udf	#254	; 0xfe
                let basex = self.v[x] as usize;
   10ab0:	f64f 10c8 	movw	r0, #63944	; 0xf9c8
   10ab4:	f2c0 0001 	movt	r0, #1
   10ab8:	2210      	movs	r2, #16
   10aba:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10abe:	f006 ffa1 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10ac2:	defe      	udf	#254	; 0xfe
                let basey = self.v[y] as usize;
   10ac4:	f64f 10d8 	movw	r0, #63960	; 0xf9d8
   10ac8:	f2c0 0001 	movt	r0, #1
   10acc:	2210      	movs	r2, #16
   10ace:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10ad2:	f006 ff97 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10ad6:	defe      	udf	#254	; 0xfe
                    let b = self.mem[self.i as usize + y];
   10ad8:	f24f 40c0 	movw	r0, #62656	; 0xf4c0
   10adc:	f2c0 0001 	movt	r0, #1
   10ae0:	f64f 12e8 	movw	r2, #63976	; 0xf9e8
   10ae4:	f2c0 0201 	movt	r2, #1
   10ae8:	211c      	movs	r1, #28
   10aea:	f006 ff75 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10aee:	defe      	udf	#254	; 0xfe
   10af0:	f64f 10f8 	movw	r0, #63992	; 0xf9f8
   10af4:	f2c0 0001 	movt	r0, #1
   10af8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10afc:	9967      	ldr	r1, [sp, #412]	; 0x19c
   10afe:	f006 ff81 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10b02:	defe      	udf	#254	; 0xfe
                    let vramy = (y + basey) % h;
   10b04:	f24f 40c0 	movw	r0, #62656	; 0xf4c0
   10b08:	f2c0 0001 	movt	r0, #1
   10b0c:	f64f 2208 	movw	r2, #64008	; 0xfa08
   10b10:	f2c0 0201 	movt	r2, #1
   10b14:	211c      	movs	r1, #28
   10b16:	f006 ff5f 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b1a:	defe      	udf	#254	; 0xfe
   10b1c:	f64f 2020 	movw	r0, #64032	; 0xfa20
   10b20:	f2c0 0001 	movt	r0, #1
   10b24:	f64f 2208 	movw	r2, #64008	; 0xfa08
   10b28:	f2c0 0201 	movt	r2, #1
   10b2c:	2139      	movs	r1, #57	; 0x39
   10b2e:	f006 ff53 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b32:	defe      	udf	#254	; 0xfe
                        let vramx = (x + basex) % w;
   10b34:	f24f 40c0 	movw	r0, #62656	; 0xf4c0
   10b38:	f2c0 0001 	movt	r0, #1
   10b3c:	f64f 225c 	movw	r2, #64092	; 0xfa5c
   10b40:	f2c0 0201 	movt	r2, #1
   10b44:	211c      	movs	r1, #28
   10b46:	f006 ff47 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b4a:	defe      	udf	#254	; 0xfe
   10b4c:	f64f 2020 	movw	r0, #64032	; 0xfa20
   10b50:	f2c0 0001 	movt	r0, #1
   10b54:	f64f 225c 	movw	r2, #64092	; 0xfa5c
   10b58:	f2c0 0201 	movt	r2, #1
   10b5c:	2139      	movs	r1, #57	; 0x39
   10b5e:	f006 ff3b 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b62:	defe      	udf	#254	; 0xfe
                        let src = (b & 1 << (7 - x)) > 0;
   10b64:	f64f 2080 	movw	r0, #64128	; 0xfa80
   10b68:	f2c0 0001 	movt	r0, #1
   10b6c:	f64f 226c 	movw	r2, #64108	; 0xfa6c
   10b70:	f2c0 0201 	movt	r2, #1
   10b74:	2121      	movs	r1, #33	; 0x21
   10b76:	f006 ff2f 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b7a:	defe      	udf	#254	; 0xfe
   10b7c:	f64f 20c0 	movw	r0, #64192	; 0xfac0
   10b80:	f2c0 0001 	movt	r0, #1
   10b84:	f64f 22a4 	movw	r2, #64164	; 0xfaa4
   10b88:	f2c0 0201 	movt	r2, #1
   10b8c:	2123      	movs	r1, #35	; 0x23
   10b8e:	f006 ff23 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b92:	defe      	udf	#254	; 0xfe
                self.v[x] = self.hw.rand() & kk;
   10b94:	f64f 3024 	movw	r0, #64292	; 0xfb24
   10b98:	f2c0 0001 	movt	r0, #1
   10b9c:	2210      	movs	r2, #16
   10b9e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10ba2:	f006 ff2f 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10ba6:	defe      	udf	#254	; 0xfe
                if self.v[x] != self.v[y] {
   10ba8:	f64f 30f4 	movw	r0, #64500	; 0xfbf4
   10bac:	f2c0 0001 	movt	r0, #1
   10bb0:	2210      	movs	r2, #16
   10bb2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10bb6:	f006 ff25 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10bba:	defe      	udf	#254	; 0xfe
   10bbc:	f64f 4004 	movw	r0, #64516	; 0xfc04
   10bc0:	f2c0 0001 	movt	r0, #1
   10bc4:	2210      	movs	r2, #16
   10bc6:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10bca:	f006 ff1b 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10bce:	defe      	udf	#254	; 0xfe
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
   10bd0:	f64f 4054 	movw	r0, #64596	; 0xfc54
   10bd4:	f2c0 0001 	movt	r0, #1
   10bd8:	2210      	movs	r2, #16
   10bda:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10bde:	f006 ff11 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10be2:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shl(1);
   10be4:	f64f 4064 	movw	r0, #64612	; 0xfc64
   10be8:	f2c0 0001 	movt	r0, #1
   10bec:	2210      	movs	r2, #16
   10bee:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10bf2:	f006 ff07 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10bf6:	defe      	udf	#254	; 0xfe
   10bf8:	f64f 4074 	movw	r0, #64628	; 0xfc74
   10bfc:	f2c0 0001 	movt	r0, #1
   10c00:	2210      	movs	r2, #16
   10c02:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c06:	f006 fefd 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c0a:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
   10c0c:	f64f 40c8 	movw	r0, #64712	; 0xfcc8
   10c10:	f2c0 0001 	movt	r0, #1
   10c14:	2210      	movs	r2, #16
   10c16:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10c1a:	f006 fef3 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c1e:	defe      	udf	#254	; 0xfe
   10c20:	f64f 40d8 	movw	r0, #64728	; 0xfcd8
   10c24:	f2c0 0001 	movt	r0, #1
   10c28:	2210      	movs	r2, #16
   10c2a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c2e:	f006 fee9 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c32:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   10c34:	f64f 40e8 	movw	r0, #64744	; 0xfce8
   10c38:	f2c0 0001 	movt	r0, #1
   10c3c:	2210      	movs	r2, #16
   10c3e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c42:	f006 fedf 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c46:	defe      	udf	#254	; 0xfe
                self.v[0xf] = self.v[x] & 1;
   10c48:	f64f 5038 	movw	r0, #64824	; 0xfd38
   10c4c:	f2c0 0001 	movt	r0, #1
   10c50:	2210      	movs	r2, #16
   10c52:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c56:	f006 fed5 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c5a:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shr(1);
   10c5c:	f64f 5048 	movw	r0, #64840	; 0xfd48
   10c60:	f2c0 0001 	movt	r0, #1
   10c64:	2210      	movs	r2, #16
   10c66:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c6a:	f006 fecb 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c6e:	defe      	udf	#254	; 0xfe
   10c70:	f64f 5058 	movw	r0, #64856	; 0xfd58
   10c74:	f2c0 0001 	movt	r0, #1
   10c78:	2210      	movs	r2, #16
   10c7a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c7e:	f006 fec1 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c82:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
   10c84:	f64f 50a8 	movw	r0, #64936	; 0xfda8
   10c88:	f2c0 0001 	movt	r0, #1
   10c8c:	2210      	movs	r2, #16
   10c8e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10c92:	f006 feb7 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10c96:	defe      	udf	#254	; 0xfe
   10c98:	f64f 50b8 	movw	r0, #64952	; 0xfdb8
   10c9c:	f2c0 0001 	movt	r0, #1
   10ca0:	2210      	movs	r2, #16
   10ca2:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10ca6:	f006 fead 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10caa:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   10cac:	f64f 50c8 	movw	r0, #64968	; 0xfdc8
   10cb0:	f2c0 0001 	movt	r0, #1
   10cb4:	2210      	movs	r2, #16
   10cb6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10cba:	f006 fea3 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10cbe:	defe      	udf	#254	; 0xfe
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
   10cc0:	f64f 6018 	movw	r0, #65048	; 0xfe18
   10cc4:	f2c0 0001 	movt	r0, #1
   10cc8:	2210      	movs	r2, #16
   10cca:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10cce:	f006 fe99 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10cd2:	defe      	udf	#254	; 0xfe
   10cd4:	f64f 6028 	movw	r0, #65064	; 0xfe28
   10cd8:	f2c0 0001 	movt	r0, #1
   10cdc:	2210      	movs	r2, #16
   10cde:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10ce2:	f006 fe8f 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10ce6:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   10ce8:	f64f 6038 	movw	r0, #65080	; 0xfe38
   10cec:	f2c0 0001 	movt	r0, #1
   10cf0:	2210      	movs	r2, #16
   10cf2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10cf6:	f006 fe85 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10cfa:	defe      	udf	#254	; 0xfe
                self.v[x] ^= self.v[y];
   10cfc:	f64f 6088 	movw	r0, #65160	; 0xfe88
   10d00:	f2c0 0001 	movt	r0, #1
   10d04:	2210      	movs	r2, #16
   10d06:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10d0a:	f006 fe7b 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d0e:	defe      	udf	#254	; 0xfe
   10d10:	f64f 6098 	movw	r0, #65176	; 0xfe98
   10d14:	f2c0 0001 	movt	r0, #1
   10d18:	2210      	movs	r2, #16
   10d1a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10d1e:	f006 fe71 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d22:	defe      	udf	#254	; 0xfe
                self.v[x] &= self.v[y];
   10d24:	f64f 60e8 	movw	r0, #65256	; 0xfee8
   10d28:	f2c0 0001 	movt	r0, #1
   10d2c:	2210      	movs	r2, #16
   10d2e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10d32:	f006 fe67 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d36:	defe      	udf	#254	; 0xfe
   10d38:	f64f 60f8 	movw	r0, #65272	; 0xfef8
   10d3c:	f2c0 0001 	movt	r0, #1
   10d40:	2210      	movs	r2, #16
   10d42:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10d46:	f006 fe5d 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d4a:	defe      	udf	#254	; 0xfe
                self.v[x] |= self.v[y];
   10d4c:	f64f 7048 	movw	r0, #65352	; 0xff48
   10d50:	f2c0 0001 	movt	r0, #1
   10d54:	2210      	movs	r2, #16
   10d56:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10d5a:	f006 fe53 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d5e:	defe      	udf	#254	; 0xfe
   10d60:	f64f 7058 	movw	r0, #65368	; 0xff58
   10d64:	f2c0 0001 	movt	r0, #1
   10d68:	2210      	movs	r2, #16
   10d6a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10d6e:	f006 fe49 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d72:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[y];
   10d74:	f64f 70a8 	movw	r0, #65448	; 0xffa8
   10d78:	f2c0 0001 	movt	r0, #1
   10d7c:	2210      	movs	r2, #16
   10d7e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10d82:	f006 fe3f 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d86:	defe      	udf	#254	; 0xfe
   10d88:	f64f 70b8 	movw	r0, #65464	; 0xffb8
   10d8c:	f2c0 0001 	movt	r0, #1
   10d90:	2210      	movs	r2, #16
   10d92:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10d96:	f006 fe35 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d9a:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_add(kk);
   10d9c:	f240 0008 	movw	r0, #8
   10da0:	f2c0 0002 	movt	r0, #2
   10da4:	2210      	movs	r2, #16
   10da6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10daa:	f006 fe2b 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10dae:	defe      	udf	#254	; 0xfe
   10db0:	f240 0018 	movw	r0, #24
   10db4:	f2c0 0002 	movt	r0, #2
   10db8:	2210      	movs	r2, #16
   10dba:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10dbe:	f006 fe21 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10dc2:	defe      	udf	#254	; 0xfe
                self.v[x] = kk;
   10dc4:	f240 0068 	movw	r0, #104	; 0x68
   10dc8:	f2c0 0002 	movt	r0, #2
   10dcc:	2210      	movs	r2, #16
   10dce:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10dd2:	f006 fe17 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10dd6:	defe      	udf	#254	; 0xfe
                if self.v[x] == self.v[y] {
   10dd8:	f240 1050 	movw	r0, #336	; 0x150
   10ddc:	f2c0 0002 	movt	r0, #2
   10de0:	2210      	movs	r2, #16
   10de2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10de6:	f006 fe0d 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10dea:	defe      	udf	#254	; 0xfe
   10dec:	f240 1060 	movw	r0, #352	; 0x160
   10df0:	f2c0 0002 	movt	r0, #2
   10df4:	2210      	movs	r2, #16
   10df6:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10dfa:	f006 fe03 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10dfe:	defe      	udf	#254	; 0xfe
                if self.v[x] != kk {
   10e00:	f240 10b0 	movw	r0, #432	; 0x1b0
   10e04:	f2c0 0002 	movt	r0, #2
   10e08:	2210      	movs	r2, #16
   10e0a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10e0e:	f006 fdf9 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10e12:	defe      	udf	#254	; 0xfe
                if self.v[x] == kk {
   10e14:	f240 2000 	movw	r0, #512	; 0x200
   10e18:	f2c0 0002 	movt	r0, #2
   10e1c:	2210      	movs	r2, #16
   10e1e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10e22:	f006 fdef 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10e26:	defe      	udf	#254	; 0xfe

00010e28 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17ha6efa376ff520dabE>:
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
   10e28:	b580      	push	{r7, lr}
   10e2a:	b086      	sub	sp, #24
   10e2c:	9104      	str	r1, [sp, #16]
   10e2e:	9205      	str	r2, [sp, #20]
   10e30:	6809      	ldr	r1, [r1, #0]
   10e32:	6809      	ldr	r1, [r1, #0]
   10e34:	2300      	movs	r3, #0
   10e36:	9301      	str	r3, [sp, #4]
   10e38:	9102      	str	r1, [sp, #8]
   10e3a:	9203      	str	r2, [sp, #12]
   10e3c:	9901      	ldr	r1, [sp, #4]
   10e3e:	9a02      	ldr	r2, [sp, #8]
   10e40:	9b03      	ldr	r3, [sp, #12]
   10e42:	f000 fbc4 	bl	115ce <_ZN4core4iter6traits8iterator8Iterator3map17hfd3597918d2fce20E>
   10e46:	e7ff      	b.n	10e48 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17ha6efa376ff520dabE+0x20>
   10e48:	b006      	add	sp, #24
   10e4a:	bd80      	pop	{r7, pc}

00010e4c <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hb6f25fe722781fd6E>:
   10e4c:	b084      	sub	sp, #16
   10e4e:	9002      	str	r0, [sp, #8]
   10e50:	9103      	str	r1, [sp, #12]
   10e52:	6800      	ldr	r0, [r0, #0]
   10e54:	9000      	str	r0, [sp, #0]
   10e56:	9101      	str	r1, [sp, #4]
   10e58:	9800      	ldr	r0, [sp, #0]
   10e5a:	9901      	ldr	r1, [sp, #4]
   10e5c:	b004      	add	sp, #16
   10e5e:	4770      	bx	lr

00010e60 <_ZN8libchip814Chip8$LT$T$GT$4jump17h98fcf36ccb52be45E>:
    fn jump(&mut self, pc: u16) {
   10e60:	b082      	sub	sp, #8
   10e62:	460a      	mov	r2, r1
   10e64:	9000      	str	r0, [sp, #0]
   10e66:	f8ad 1006 	strh.w	r1, [sp, #6]
        self.pc = pc;
   10e6a:	8241      	strh	r1, [r0, #18]
    }
   10e6c:	b002      	add	sp, #8
   10e6e:	4770      	bx	lr

00010e70 <_ZN8libchip814Chip8$LT$T$GT$4load17h41409d517e122012E>:
    fn load(&mut self, rom: &[u8]) {
   10e70:	b580      	push	{r7, lr}
   10e72:	b08a      	sub	sp, #40	; 0x28
   10e74:	9105      	str	r1, [sp, #20]
   10e76:	9206      	str	r2, [sp, #24]
   10e78:	9009      	str	r0, [sp, #36]	; 0x24
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
   10e7a:	3047      	adds	r0, #71	; 0x47
   10e7c:	9905      	ldr	r1, [sp, #20]
   10e7e:	9a06      	ldr	r2, [sp, #24]
   10e80:	9004      	str	r0, [sp, #16]
   10e82:	4608      	mov	r0, r1
   10e84:	4611      	mov	r1, r2
   10e86:	f001 f868 	bl	11f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   10e8a:	9003      	str	r0, [sp, #12]
   10e8c:	e7ff      	b.n	10e8e <_ZN8libchip814Chip8$LT$T$GT$4load17h41409d517e122012E+0x1e>
   10e8e:	9803      	ldr	r0, [sp, #12]
   10e90:	f500 7100 	add.w	r1, r0, #512	; 0x200
   10e94:	460a      	mov	r2, r1
   10e96:	4281      	cmp	r1, r0
   10e98:	9202      	str	r2, [sp, #8]
   10e9a:	d318      	bcc.n	10ece <_ZN8libchip814Chip8$LT$T$GT$4load17h41409d517e122012E+0x5e>
   10e9c:	e7ff      	b.n	10e9e <_ZN8libchip814Chip8$LT$T$GT$4load17h41409d517e122012E+0x2e>
   10e9e:	f44f 7000 	mov.w	r0, #512	; 0x200
   10ea2:	9007      	str	r0, [sp, #28]
   10ea4:	9802      	ldr	r0, [sp, #8]
   10ea6:	9008      	str	r0, [sp, #32]
   10ea8:	9a07      	ldr	r2, [sp, #28]
   10eaa:	9b08      	ldr	r3, [sp, #32]
   10eac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   10eb0:	9804      	ldr	r0, [sp, #16]
   10eb2:	f005 ff2b 	bl	16d0c <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE>
   10eb6:	9001      	str	r0, [sp, #4]
   10eb8:	9100      	str	r1, [sp, #0]
   10eba:	e7ff      	b.n	10ebc <_ZN8libchip814Chip8$LT$T$GT$4load17h41409d517e122012E+0x4c>
   10ebc:	9a05      	ldr	r2, [sp, #20]
   10ebe:	9b06      	ldr	r3, [sp, #24]
   10ec0:	9801      	ldr	r0, [sp, #4]
   10ec2:	9900      	ldr	r1, [sp, #0]
   10ec4:	f7f7 ff53 	bl	8d6e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
   10ec8:	e7ff      	b.n	10eca <_ZN8libchip814Chip8$LT$T$GT$4load17h41409d517e122012E+0x5a>
    }
   10eca:	b00a      	add	sp, #40	; 0x28
   10ecc:	bd80      	pop	{r7, pc}
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
   10ece:	f24f 40c0 	movw	r0, #62656	; 0xf4c0
   10ed2:	f2c0 0001 	movt	r0, #1
   10ed6:	f240 325c 	movw	r2, #860	; 0x35c
   10eda:	f2c0 0202 	movt	r2, #2
   10ede:	211c      	movs	r1, #28
   10ee0:	f006 fd7a 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10ee4:	defe      	udf	#254	; 0xfe

00010ee6 <_ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE>:
    fn next(&mut self) {
   10ee6:	b580      	push	{r7, lr}
   10ee8:	b084      	sub	sp, #16
   10eea:	9003      	str	r0, [sp, #12]
        self.jump(self.pc.wrapping_add(2));
   10eec:	8a41      	ldrh	r1, [r0, #18]
   10eee:	2202      	movs	r2, #2
   10ef0:	9002      	str	r0, [sp, #8]
   10ef2:	4608      	mov	r0, r1
   10ef4:	4611      	mov	r1, r2
   10ef6:	f005 feb3 	bl	16c60 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
   10efa:	9001      	str	r0, [sp, #4]
   10efc:	e7ff      	b.n	10efe <_ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE+0x18>
   10efe:	9802      	ldr	r0, [sp, #8]
   10f00:	9901      	ldr	r1, [sp, #4]
   10f02:	f7ff ffad 	bl	10e60 <_ZN8libchip814Chip8$LT$T$GT$4jump17h98fcf36ccb52be45E>
   10f06:	e7ff      	b.n	10f08 <_ZN8libchip814Chip8$LT$T$GT$4next17h079fcfcda82e796aE+0x22>
    }
   10f08:	b004      	add	sp, #16
   10f0a:	bd80      	pop	{r7, pc}

00010f0c <_ZN8libchip814Chip8$LT$T$GT$4push17h2bc728f644865dbfE>:
    fn push(&mut self, item: u16) {
   10f0c:	b580      	push	{r7, lr}
   10f0e:	b086      	sub	sp, #24
   10f10:	460a      	mov	r2, r1
   10f12:	9004      	str	r0, [sp, #16]
   10f14:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.stack[self.sp as usize] = item;
   10f18:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
   10f1c:	460b      	mov	r3, r1
   10f1e:	290f      	cmp	r1, #15
   10f20:	9003      	str	r0, [sp, #12]
   10f22:	9202      	str	r2, [sp, #8]
   10f24:	9301      	str	r3, [sp, #4]
   10f26:	d813      	bhi.n	10f50 <_ZN8libchip814Chip8$LT$T$GT$4push17h2bc728f644865dbfE+0x44>
   10f28:	e7ff      	b.n	10f2a <_ZN8libchip814Chip8$LT$T$GT$4push17h2bc728f644865dbfE+0x1e>
   10f2a:	9803      	ldr	r0, [sp, #12]
   10f2c:	9901      	ldr	r1, [sp, #4]
   10f2e:	eb00 0241 	add.w	r2, r0, r1, lsl #1
   10f32:	9b02      	ldr	r3, [sp, #8]
   10f34:	8293      	strh	r3, [r2, #20]
        self.sp = self.sp.wrapping_add(1);
   10f36:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
   10f3a:	2101      	movs	r1, #1
   10f3c:	f005 fdf3 	bl	16b26 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>
   10f40:	9000      	str	r0, [sp, #0]
   10f42:	e7ff      	b.n	10f44 <_ZN8libchip814Chip8$LT$T$GT$4push17h2bc728f644865dbfE+0x38>
   10f44:	9800      	ldr	r0, [sp, #0]
   10f46:	9903      	ldr	r1, [sp, #12]
   10f48:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
    }
   10f4c:	b006      	add	sp, #24
   10f4e:	bd80      	pop	{r7, pc}
        self.stack[self.sp as usize] = item;
   10f50:	f240 306c 	movw	r0, #876	; 0x36c
   10f54:	f2c0 0002 	movt	r0, #2
   10f58:	2210      	movs	r2, #16
   10f5a:	9901      	ldr	r1, [sp, #4]
   10f5c:	f006 fd52 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10f60:	defe      	udf	#254	; 0xfe

00010f62 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E>:
    fn tick(&mut self) {
   10f62:	b580      	push	{r7, lr}
   10f64:	b084      	sub	sp, #16
   10f66:	9003      	str	r0, [sp, #12]
        if self.dt > 0 {
   10f68:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
   10f6c:	2900      	cmp	r1, #0
   10f6e:	9002      	str	r0, [sp, #8]
   10f70:	d00f      	beq.n	10f92 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x30>
   10f72:	e7ff      	b.n	10f74 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x12>
            self.dt -= 1;
   10f74:	9802      	ldr	r0, [sp, #8]
   10f76:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
   10f7a:	3901      	subs	r1, #1
   10f7c:	b2ca      	uxtb	r2, r1
   10f7e:	460b      	mov	r3, r1
   10f80:	428a      	cmp	r2, r1
   10f82:	9301      	str	r3, [sp, #4]
   10f84:	d129      	bne.n	10fda <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x78>
   10f86:	e7ff      	b.n	10f88 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x26>
   10f88:	9801      	ldr	r0, [sp, #4]
   10f8a:	9902      	ldr	r1, [sp, #8]
   10f8c:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
        if self.dt > 0 {
   10f90:	e7ff      	b.n	10f92 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x30>
        if self.st > 0 {
   10f92:	9802      	ldr	r0, [sp, #8]
   10f94:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
   10f98:	2900      	cmp	r1, #0
   10f9a:	d01c      	beq.n	10fd6 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x74>
   10f9c:	e7ff      	b.n	10f9e <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x3c>
            self.st -= 1;
   10f9e:	9802      	ldr	r0, [sp, #8]
   10fa0:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
   10fa4:	3901      	subs	r1, #1
   10fa6:	b2ca      	uxtb	r2, r1
   10fa8:	460b      	mov	r3, r1
   10faa:	428a      	cmp	r2, r1
   10fac:	9300      	str	r3, [sp, #0]
   10fae:	d120      	bne.n	10ff2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x90>
   10fb0:	e7ff      	b.n	10fb2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x50>
   10fb2:	9800      	ldr	r0, [sp, #0]
   10fb4:	9902      	ldr	r1, [sp, #8]
   10fb6:	f881 0045 	strb.w	r0, [r1, #69]	; 0x45
            if self.st == 0 {
   10fba:	f891 2045 	ldrb.w	r2, [r1, #69]	; 0x45
   10fbe:	2a00      	cmp	r2, #0
   10fc0:	d108      	bne.n	10fd4 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x72>
   10fc2:	e7ff      	b.n	10fc4 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x62>
   10fc4:	f241 0048 	movw	r0, #4168	; 0x1048
                self.hw.beep();
   10fc8:	9902      	ldr	r1, [sp, #8]
   10fca:	4408      	add	r0, r1
   10fcc:	f7fb f8ca 	bl	c164 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha66b0913e7bbcba9E>
   10fd0:	e7ff      	b.n	10fd2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x70>
            if self.st == 0 {
   10fd2:	e7ff      	b.n	10fd4 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x72>
        if self.st > 0 {
   10fd4:	e7ff      	b.n	10fd6 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E+0x74>
    }
   10fd6:	b004      	add	sp, #16
   10fd8:	bd80      	pop	{r7, pc}
            self.dt -= 1;
   10fda:	f64f 2080 	movw	r0, #64128	; 0xfa80
   10fde:	f2c0 0001 	movt	r0, #1
   10fe2:	f240 327c 	movw	r2, #892	; 0x37c
   10fe6:	f2c0 0202 	movt	r2, #2
   10fea:	2121      	movs	r1, #33	; 0x21
   10fec:	f006 fcf4 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10ff0:	defe      	udf	#254	; 0xfe
            self.st -= 1;
   10ff2:	f64f 2080 	movw	r0, #64128	; 0xfa80
   10ff6:	f2c0 0001 	movt	r0, #1
   10ffa:	f240 328c 	movw	r2, #908	; 0x38c
   10ffe:	f2c0 0202 	movt	r2, #2
   11002:	2121      	movs	r1, #33	; 0x21
   11004:	f006 fce8 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11008:	defe      	udf	#254	; 0xfe

0001100a <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E>:
    fn sched(&mut self) {
   1100a:	b510      	push	{r4, lr}
   1100c:	b098      	sub	sp, #96	; 0x60
   1100e:	9015      	str	r0, [sp, #84]	; 0x54
   11010:	f241 0148 	movw	r1, #4168	; 0x1048
        if self.hw.sched() {
   11014:	4401      	add	r1, r0
   11016:	900b      	str	r0, [sp, #44]	; 0x2c
   11018:	4608      	mov	r0, r1
   1101a:	f7fb f8a7 	bl	c16c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa1fa3eb0067acdbE>
   1101e:	900a      	str	r0, [sp, #40]	; 0x28
   11020:	e7ff      	b.n	11022 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x18>
   11022:	980a      	ldr	r0, [sp, #40]	; 0x28
   11024:	07c1      	lsls	r1, r0, #31
   11026:	2900      	cmp	r1, #0
   11028:	d005      	beq.n	11036 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x2c>
   1102a:	e7ff      	b.n	1102c <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x22>
            self.shutdown();
   1102c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1102e:	f000 f90e 	bl	1124e <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h728c2b30a102c46bE>
   11032:	e7ff      	b.n	11034 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x2a>
        if self.hw.sched() {
   11034:	e7ff      	b.n	11036 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x2c>
        if let Some(t) = self.time {
   11036:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11038:	6801      	ldr	r1, [r0, #0]
   1103a:	2901      	cmp	r1, #1
   1103c:	d009      	beq.n	11052 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x48>
   1103e:	e7ff      	b.n	11040 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x36>
   11040:	f241 0048 	movw	r0, #4168	; 0x1048
            self.time = Some(self.hw.clock());
   11044:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11046:	4408      	add	r0, r1
   11048:	f7fb f82a 	bl	c0a0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h3f18189aedbeb9e0E>
   1104c:	9109      	str	r1, [sp, #36]	; 0x24
   1104e:	9008      	str	r0, [sp, #32]
   11050:	e046      	b.n	110e0 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0xd6>
        if let Some(t) = self.time {
   11052:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11054:	6881      	ldr	r1, [r0, #8]
   11056:	68c2      	ldr	r2, [r0, #12]
   11058:	9217      	str	r2, [sp, #92]	; 0x5c
   1105a:	9116      	str	r1, [sp, #88]	; 0x58
   1105c:	f241 0348 	movw	r3, #4168	; 0x1048
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
   11060:	4418      	add	r0, r3
   11062:	9107      	str	r1, [sp, #28]
   11064:	9206      	str	r2, [sp, #24]
   11066:	f7fb f81b 	bl	c0a0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h3f18189aedbeb9e0E>
   1106a:	9105      	str	r1, [sp, #20]
   1106c:	9004      	str	r0, [sp, #16]
   1106e:	e7ff      	b.n	11070 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x66>
   11070:	9804      	ldr	r0, [sp, #16]
   11072:	9905      	ldr	r1, [sp, #20]
   11074:	9a07      	ldr	r2, [sp, #28]
   11076:	9b06      	ldr	r3, [sp, #24]
   11078:	f005 fe14 	bl	16ca4 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE>
   1107c:	9103      	str	r1, [sp, #12]
   1107e:	9002      	str	r0, [sp, #8]
   11080:	e7ff      	b.n	11082 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x78>
   11082:	f245 002b 	movw	r0, #20523	; 0x502b
   11086:	f2c0 00fe 	movt	r0, #254	; 0xfe
   1108a:	9902      	ldr	r1, [sp, #8]
   1108c:	1a08      	subs	r0, r1, r0
   1108e:	9a03      	ldr	r2, [sp, #12]
   11090:	f172 0300 	sbcs.w	r3, r2, #0
   11094:	d323      	bcc.n	110de <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0xd4>
   11096:	e7ff      	b.n	11098 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x8e>
                self.tick();
   11098:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1109a:	f7ff ff62 	bl	10f62 <_ZN8libchip814Chip8$LT$T$GT$4tick17h7f7248799ee89935E>
   1109e:	e7ff      	b.n	110a0 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x96>
   110a0:	f241 0048 	movw	r0, #4168	; 0x1048
                self.time = Some(self.hw.clock());
   110a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   110a6:	4408      	add	r0, r1
   110a8:	f7fa fffa 	bl	c0a0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h3f18189aedbeb9e0E>
   110ac:	9101      	str	r1, [sp, #4]
   110ae:	9000      	str	r0, [sp, #0]
   110b0:	e7ff      	b.n	110b2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0xa8>
   110b2:	9800      	ldr	r0, [sp, #0]
   110b4:	900e      	str	r0, [sp, #56]	; 0x38
   110b6:	9901      	ldr	r1, [sp, #4]
   110b8:	910f      	str	r1, [sp, #60]	; 0x3c
   110ba:	2200      	movs	r2, #0
   110bc:	920d      	str	r2, [sp, #52]	; 0x34
   110be:	2201      	movs	r2, #1
   110c0:	920c      	str	r2, [sp, #48]	; 0x30
   110c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   110c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   110c6:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   110ca:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   110ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   110d0:	6063      	str	r3, [r4, #4]
   110d2:	6022      	str	r2, [r4, #0]
   110d4:	f8c4 e00c 	str.w	lr, [r4, #12]
   110d8:	f8c4 c008 	str.w	ip, [r4, #8]
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
   110dc:	e7ff      	b.n	110de <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0xd4>
        if let Some(t) = self.time {
   110de:	e015      	b.n	1110c <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x102>
            self.time = Some(self.hw.clock());
   110e0:	9808      	ldr	r0, [sp, #32]
   110e2:	9012      	str	r0, [sp, #72]	; 0x48
   110e4:	9909      	ldr	r1, [sp, #36]	; 0x24
   110e6:	9113      	str	r1, [sp, #76]	; 0x4c
   110e8:	2200      	movs	r2, #0
   110ea:	9211      	str	r2, [sp, #68]	; 0x44
   110ec:	2201      	movs	r2, #1
   110ee:	9210      	str	r2, [sp, #64]	; 0x40
   110f0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   110f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   110f4:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   110f8:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
   110fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   110fe:	6063      	str	r3, [r4, #4]
   11100:	6022      	str	r2, [r4, #0]
   11102:	f8c4 e00c 	str.w	lr, [r4, #12]
   11106:	f8c4 c008 	str.w	ip, [r4, #8]
        if let Some(t) = self.time {
   1110a:	e7ff      	b.n	1110c <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E+0x102>
    }
   1110c:	b018      	add	sp, #96	; 0x60
   1110e:	bd10      	pop	{r4, pc}

00011110 <_ZN8libchip814Chip8$LT$T$GT$5setup17h331c1512aac9f047E>:
    fn setup(&mut self) {
   11110:	b580      	push	{r7, lr}
   11112:	b088      	sub	sp, #32
   11114:	9007      	str	r0, [sp, #28]
   11116:	f44f 7100 	mov.w	r1, #512	; 0x200
        self.pc = ENTRY;
   1111a:	8241      	strh	r1, [r0, #18]
   1111c:	f241 0148 	movw	r1, #4168	; 0x1048
        self.hw.vram_setsize(DISPS);
   11120:	4401      	add	r1, r0
   11122:	f24f 5254 	movw	r2, #62804	; 0xf554
   11126:	f2c0 0201 	movt	r2, #1
   1112a:	6813      	ldr	r3, [r2, #0]
   1112c:	6852      	ldr	r2, [r2, #4]
   1112e:	9005      	str	r0, [sp, #20]
   11130:	4608      	mov	r0, r1
   11132:	4619      	mov	r1, r3
   11134:	f7fa ff5d 	bl	bff2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h4f544ab4a2e1c564E>
   11138:	e7ff      	b.n	1113a <_ZN8libchip814Chip8$LT$T$GT$5setup17h331c1512aac9f047E+0x2a>
        self.mem[..CHARBUF.len()].copy_from_slice(&CHARBUF);
   1113a:	9805      	ldr	r0, [sp, #20]
   1113c:	f100 0147 	add.w	r1, r0, #71	; 0x47
   11140:	f240 402c 	movw	r0, #1068	; 0x42c
   11144:	f2c0 0002 	movt	r0, #2
   11148:	2250      	movs	r2, #80	; 0x50
   1114a:	9104      	str	r1, [sp, #16]
   1114c:	4611      	mov	r1, r2
   1114e:	f000 ff04 	bl	11f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   11152:	9003      	str	r0, [sp, #12]
   11154:	e7ff      	b.n	11156 <_ZN8libchip814Chip8$LT$T$GT$5setup17h331c1512aac9f047E+0x46>
   11156:	9803      	ldr	r0, [sp, #12]
   11158:	9006      	str	r0, [sp, #24]
   1115a:	9a06      	ldr	r2, [sp, #24]
   1115c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   11160:	9804      	ldr	r0, [sp, #16]
   11162:	f7f7 ff01 	bl	8f68 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>
   11166:	9002      	str	r0, [sp, #8]
   11168:	9101      	str	r1, [sp, #4]
   1116a:	e7ff      	b.n	1116c <_ZN8libchip814Chip8$LT$T$GT$5setup17h331c1512aac9f047E+0x5c>
   1116c:	f240 422c 	movw	r2, #1068	; 0x42c
   11170:	f2c0 0202 	movt	r2, #2
   11174:	2350      	movs	r3, #80	; 0x50
   11176:	9802      	ldr	r0, [sp, #8]
   11178:	9901      	ldr	r1, [sp, #4]
   1117a:	f7f7 fdf8 	bl	8d6e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
   1117e:	e7ff      	b.n	11180 <_ZN8libchip814Chip8$LT$T$GT$5setup17h331c1512aac9f047E+0x70>
   11180:	f241 0047 	movw	r0, #4167	; 0x1047
   11184:	2101      	movs	r1, #1
        self.running = true;
   11186:	9a05      	ldr	r2, [sp, #20]
   11188:	5411      	strb	r1, [r2, r0]
    }
   1118a:	b008      	add	sp, #32
   1118c:	bd80      	pop	{r7, pc}

0001118e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E>:
    fn waitkey(&mut self) -> u8 {
   1118e:	b580      	push	{r7, lr}
   11190:	b08c      	sub	sp, #48	; 0x30
   11192:	900a      	str	r0, [sp, #40]	; 0x28
        while self.running {
   11194:	9005      	str	r0, [sp, #20]
   11196:	e7ff      	b.n	11198 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0xa>
   11198:	f241 0047 	movw	r0, #4167	; 0x1047
   1119c:	9905      	ldr	r1, [sp, #20]
   1119e:	5c08      	ldrb	r0, [r1, r0]
   111a0:	07c0      	lsls	r0, r0, #31
   111a2:	2800      	cmp	r0, #0
   111a4:	d104      	bne.n	111b0 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0x22>
   111a6:	e7ff      	b.n	111a8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0x1a>
   111a8:	2020      	movs	r0, #32
        return b' ';
   111aa:	f88d 001b 	strb.w	r0, [sp, #27]
   111ae:	e04a      	b.n	11246 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0xb8>
            self.sched();
   111b0:	9805      	ldr	r0, [sp, #20]
   111b2:	f7ff ff2a 	bl	1100a <_ZN8libchip814Chip8$LT$T$GT$5sched17h523fb4be918a9b80E>
   111b6:	e7ff      	b.n	111b8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0x2a>
   111b8:	2000      	movs	r0, #0
            for i in 0..0xf {
   111ba:	f88d 001c 	strb.w	r0, [sp, #28]
   111be:	200f      	movs	r0, #15
   111c0:	f88d 001d 	strb.w	r0, [sp, #29]
   111c4:	f89d 001c 	ldrb.w	r0, [sp, #28]
   111c8:	f89d 101d 	ldrb.w	r1, [sp, #29]
   111cc:	f000 fa09 	bl	115e2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE>
   111d0:	9004      	str	r0, [sp, #16]
   111d2:	9103      	str	r1, [sp, #12]
   111d4:	e7ff      	b.n	111d6 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0x48>
   111d6:	9804      	ldr	r0, [sp, #16]
   111d8:	f88d 0020 	strb.w	r0, [sp, #32]
   111dc:	9903      	ldr	r1, [sp, #12]
   111de:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   111e2:	e7ff      	b.n	111e4 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0x56>
   111e4:	a808      	add	r0, sp, #32
   111e6:	f000 f98b 	bl	11500 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E>
   111ea:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
   111ee:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   111f2:	e7ff      	b.n	111f4 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0x66>
   111f4:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   111f8:	07c1      	lsls	r1, r0, #31
   111fa:	2900      	cmp	r1, #0
   111fc:	d001      	beq.n	11202 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0x74>
   111fe:	e7ff      	b.n	11200 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0x72>
   11200:	e001      	b.n	11206 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0x78>
        while self.running {
   11202:	e7c9      	b.n	11198 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0xa>
            for i in 0..0xf {
   11204:	defe      	udf	#254	; 0xfe
   11206:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
   1120a:	4601      	mov	r1, r0
   1120c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   11210:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   11214:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   11218:	f241 0248 	movw	r2, #4168	; 0x1048
                if self.hw.key(i) {
   1121c:	9b05      	ldr	r3, [sp, #20]
   1121e:	441a      	add	r2, r3
   11220:	9002      	str	r0, [sp, #8]
   11222:	4610      	mov	r0, r2
   11224:	9a02      	ldr	r2, [sp, #8]
   11226:	9101      	str	r1, [sp, #4]
   11228:	4611      	mov	r1, r2
   1122a:	f7fa fd5c 	bl	bce6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17he15d36584013bbaeE>
   1122e:	9000      	str	r0, [sp, #0]
   11230:	e7ff      	b.n	11232 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0xa4>
   11232:	9800      	ldr	r0, [sp, #0]
   11234:	07c1      	lsls	r1, r0, #31
   11236:	2900      	cmp	r1, #0
   11238:	d101      	bne.n	1123e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0xb0>
   1123a:	e7ff      	b.n	1123c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0xae>
            for i in 0..0xf {
   1123c:	e7d2      	b.n	111e4 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0x56>
                    return i;
   1123e:	9801      	ldr	r0, [sp, #4]
   11240:	f88d 001b 	strb.w	r0, [sp, #27]
   11244:	e7ff      	b.n	11246 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0402902358b2e429E+0xb8>
    }
   11246:	f89d 001b 	ldrb.w	r0, [sp, #27]
   1124a:	b00c      	add	sp, #48	; 0x30
   1124c:	bd80      	pop	{r7, pc}

0001124e <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h728c2b30a102c46bE>:
    fn shutdown(&mut self) {
   1124e:	b081      	sub	sp, #4
   11250:	9000      	str	r0, [sp, #0]
   11252:	f241 0147 	movw	r1, #4167	; 0x1047
   11256:	2200      	movs	r2, #0
        self.running = false;
   11258:	5442      	strb	r2, [r0, r1]
    }
   1125a:	b001      	add	sp, #4
   1125c:	4770      	bx	lr

0001125e <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04da96b0e9749c79E>:
   1125e:	b580      	push	{r7, lr}
   11260:	b082      	sub	sp, #8
   11262:	9101      	str	r1, [sp, #4]
   11264:	f000 f803 	bl	1126e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E>
   11268:	e7ff      	b.n	1126a <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h04da96b0e9749c79E+0xc>
   1126a:	b002      	add	sp, #8
   1126c:	bd80      	pop	{r7, pc}

0001126e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E>:
   1126e:	b580      	push	{r7, lr}
   11270:	b0a0      	sub	sp, #128	; 0x80
   11272:	911c      	str	r1, [sp, #112]	; 0x70
   11274:	9103      	str	r1, [sp, #12]
   11276:	9002      	str	r0, [sp, #8]
   11278:	e7ff      	b.n	1127a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xc>
   1127a:	9803      	ldr	r0, [sp, #12]
   1127c:	68c1      	ldr	r1, [r0, #12]
   1127e:	2901      	cmp	r1, #1
   11280:	d11e      	bne.n	112c0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x52>
   11282:	e7ff      	b.n	11284 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x16>
   11284:	9803      	ldr	r0, [sp, #12]
   11286:	f100 0110 	add.w	r1, r0, #16
   1128a:	911e      	str	r1, [sp, #120]	; 0x78
   1128c:	a804      	add	r0, sp, #16
   1128e:	f000 f90b 	bl	114a8 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5039ae5c012134d0E>
   11292:	e7ff      	b.n	11294 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x26>
   11294:	9804      	ldr	r0, [sp, #16]
   11296:	2801      	cmp	r0, #1
   11298:	d001      	beq.n	1129e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x30>
   1129a:	e7ff      	b.n	1129c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x2e>
   1129c:	e00f      	b.n	112be <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x50>
   1129e:	9804      	ldr	r0, [sp, #16]
   112a0:	9905      	ldr	r1, [sp, #20]
   112a2:	9a06      	ldr	r2, [sp, #24]
   112a4:	9209      	str	r2, [sp, #36]	; 0x24
   112a6:	9108      	str	r1, [sp, #32]
   112a8:	9007      	str	r0, [sp, #28]
   112aa:	9807      	ldr	r0, [sp, #28]
   112ac:	9908      	ldr	r1, [sp, #32]
   112ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
   112b0:	9b02      	ldr	r3, [sp, #8]
   112b2:	609a      	str	r2, [r3, #8]
   112b4:	6059      	str	r1, [r3, #4]
   112b6:	6018      	str	r0, [r3, #0]
   112b8:	e7ff      	b.n	112ba <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x4c>
   112ba:	b020      	add	sp, #128	; 0x80
   112bc:	bd80      	pop	{r7, pc}
   112be:	e7ff      	b.n	112c0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x52>
   112c0:	a80a      	add	r0, sp, #40	; 0x28
   112c2:	9903      	ldr	r1, [sp, #12]
   112c4:	f000 f906 	bl	114d4 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h53e4f1f46625fe50E>
   112c8:	e7ff      	b.n	112ca <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x5c>
   112ca:	980a      	ldr	r0, [sp, #40]	; 0x28
   112cc:	2800      	cmp	r0, #0
   112ce:	d012      	beq.n	112f6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x88>
   112d0:	e7ff      	b.n	112d2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x64>
   112d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   112d4:	990c      	ldr	r1, [sp, #48]	; 0x30
   112d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   112d8:	9211      	str	r2, [sp, #68]	; 0x44
   112da:	9110      	str	r1, [sp, #64]	; 0x40
   112dc:	900f      	str	r0, [sp, #60]	; 0x3c
   112de:	980f      	ldr	r0, [sp, #60]	; 0x3c
   112e0:	9910      	ldr	r1, [sp, #64]	; 0x40
   112e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   112e4:	921b      	str	r2, [sp, #108]	; 0x6c
   112e6:	911a      	str	r1, [sp, #104]	; 0x68
   112e8:	9019      	str	r0, [sp, #100]	; 0x64
   112ea:	a816      	add	r0, sp, #88	; 0x58
   112ec:	a919      	add	r1, sp, #100	; 0x64
   112ee:	f000 f8d4 	bl	1149a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6ed52dfe9f180960E>
   112f2:	e028      	b.n	11346 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xd8>
   112f4:	defe      	udf	#254	; 0xfe
   112f6:	9803      	ldr	r0, [sp, #12]
   112f8:	301c      	adds	r0, #28
   112fa:	f7fb fd5e 	bl	cdba <_ZN4core6option15Option$LT$T$GT$6as_mut17h781416273935c5a0E>
   112fe:	9001      	str	r0, [sp, #4]
   11300:	e7ff      	b.n	11302 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x94>
   11302:	9801      	ldr	r0, [sp, #4]
   11304:	f7fb fd93 	bl	ce2e <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h01a214062ce56537E>
   11308:	900e      	str	r0, [sp, #56]	; 0x38
   1130a:	e7ff      	b.n	1130c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x9e>
   1130c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1130e:	fab0 f180 	clz	r1, r0
   11312:	0949      	lsrs	r1, r1, #5
   11314:	2800      	cmp	r0, #0
   11316:	d101      	bne.n	1131c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xae>
   11318:	e7ff      	b.n	1131a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xac>
   1131a:	e009      	b.n	11330 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xc2>
   1131c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1131e:	901f      	str	r0, [sp, #124]	; 0x7c
   11320:	9902      	ldr	r1, [sp, #8]
   11322:	9000      	str	r0, [sp, #0]
   11324:	4608      	mov	r0, r1
   11326:	9900      	ldr	r1, [sp, #0]
   11328:	f000 f8be 	bl	114a8 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5039ae5c012134d0E>
   1132c:	e00a      	b.n	11344 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xd6>
   1132e:	defe      	udf	#254	; 0xfe
   11330:	f003 f99c 	bl	1466c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>
   11334:	e7ff      	b.n	11336 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xc8>
   11336:	9802      	ldr	r0, [sp, #8]
   11338:	f7fb fd74 	bl	ce24 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E>
   1133c:	e7ff      	b.n	1133e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xd0>
   1133e:	e7ff      	b.n	11340 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xd2>
   11340:	e7ff      	b.n	11342 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xd4>
   11342:	e7ba      	b.n	112ba <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x4c>
   11344:	e7fc      	b.n	11340 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xd2>
   11346:	9816      	ldr	r0, [sp, #88]	; 0x58
   11348:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1134a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1134c:	9215      	str	r2, [sp, #84]	; 0x54
   1134e:	9114      	str	r1, [sp, #80]	; 0x50
   11350:	9013      	str	r0, [sp, #76]	; 0x4c
   11352:	2001      	movs	r0, #1
   11354:	9012      	str	r0, [sp, #72]	; 0x48
   11356:	e7ff      	b.n	11358 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xea>
   11358:	9812      	ldr	r0, [sp, #72]	; 0x48
   1135a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1135c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1135e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11360:	f8dd c00c 	ldr.w	ip, [sp, #12]
   11364:	f8cc 3018 	str.w	r3, [ip, #24]
   11368:	f8cc 2014 	str.w	r2, [ip, #20]
   1136c:	f8cc 1010 	str.w	r1, [ip, #16]
   11370:	f8cc 000c 	str.w	r0, [ip, #12]
   11374:	980a      	ldr	r0, [sp, #40]	; 0x28
   11376:	2801      	cmp	r0, #1
   11378:	d101      	bne.n	1137e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x110>
   1137a:	e7ff      	b.n	1137c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x10e>
   1137c:	e77d      	b.n	1127a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0xc>
   1137e:	e7fd      	b.n	1137c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hfa0e4605f2a01121E+0x10e>

00011380 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h53d3e78f478dc601E>:
   11380:	b5b0      	push	{r4, r5, r7, lr}
   11382:	b090      	sub	sp, #64	; 0x40
   11384:	680a      	ldr	r2, [r1, #0]
   11386:	684b      	ldr	r3, [r1, #4]
   11388:	6889      	ldr	r1, [r1, #8]
   1138a:	910f      	str	r1, [sp, #60]	; 0x3c
   1138c:	930e      	str	r3, [sp, #56]	; 0x38
   1138e:	920d      	str	r2, [sp, #52]	; 0x34
   11390:	a902      	add	r1, sp, #8
   11392:	aa0d      	add	r2, sp, #52	; 0x34
   11394:	9001      	str	r0, [sp, #4]
   11396:	4608      	mov	r0, r1
   11398:	4611      	mov	r1, r2
   1139a:	f000 f80d 	bl	113b8 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h3c6fa8392f63d25bE>
   1139e:	e7ff      	b.n	113a0 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h53d3e78f478dc601E+0x20>
   113a0:	a802      	add	r0, sp, #8
   113a2:	9901      	ldr	r1, [sp, #4]
   113a4:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
   113a8:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
   113ac:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
   113b0:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
   113b4:	b010      	add	sp, #64	; 0x40
   113b6:	bdb0      	pop	{r4, r5, r7, pc}

000113b8 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h3c6fa8392f63d25bE>:
   113b8:	b08b      	sub	sp, #44	; 0x2c
   113ba:	680a      	ldr	r2, [r1, #0]
   113bc:	684b      	ldr	r3, [r1, #4]
   113be:	6889      	ldr	r1, [r1, #8]
   113c0:	9102      	str	r1, [sp, #8]
   113c2:	9301      	str	r3, [sp, #4]
   113c4:	9200      	str	r2, [sp, #0]
   113c6:	2100      	movs	r1, #0
   113c8:	9103      	str	r1, [sp, #12]
   113ca:	9107      	str	r1, [sp, #28]
   113cc:	9900      	ldr	r1, [sp, #0]
   113ce:	9a01      	ldr	r2, [sp, #4]
   113d0:	9b02      	ldr	r3, [sp, #8]
   113d2:	6083      	str	r3, [r0, #8]
   113d4:	6042      	str	r2, [r0, #4]
   113d6:	6001      	str	r1, [r0, #0]
   113d8:	9903      	ldr	r1, [sp, #12]
   113da:	9a04      	ldr	r2, [sp, #16]
   113dc:	9b05      	ldr	r3, [sp, #20]
   113de:	f8dd c018 	ldr.w	ip, [sp, #24]
   113e2:	f8c0 c018 	str.w	ip, [r0, #24]
   113e6:	6143      	str	r3, [r0, #20]
   113e8:	6102      	str	r2, [r0, #16]
   113ea:	60c1      	str	r1, [r0, #12]
   113ec:	9907      	ldr	r1, [sp, #28]
   113ee:	9a08      	ldr	r2, [sp, #32]
   113f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   113f2:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   113f6:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
   113fa:	6243      	str	r3, [r0, #36]	; 0x24
   113fc:	6202      	str	r2, [r0, #32]
   113fe:	61c1      	str	r1, [r0, #28]
   11400:	b00b      	add	sp, #44	; 0x2c
   11402:	4770      	bx	lr

00011404 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h81f0567d2baa3411E>:
   11404:	b5b0      	push	{r4, r5, r7, lr}
   11406:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
   1140a:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
   1140e:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   11412:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   11416:	bdb0      	pop	{r4, r5, r7, pc}

00011418 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>:
   11418:	b580      	push	{r7, lr}
   1141a:	b084      	sub	sp, #16
   1141c:	4601      	mov	r1, r0
   1141e:	f88d 000f 	strb.w	r0, [sp, #15]
   11422:	9102      	str	r1, [sp, #8]
   11424:	f005 fc62 	bl	16cec <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E>
   11428:	9001      	str	r0, [sp, #4]
   1142a:	e7ff      	b.n	1142c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E+0x14>
   1142c:	9801      	ldr	r0, [sp, #4]
   1142e:	b004      	add	sp, #16
   11430:	bd80      	pop	{r7, pc}

00011432 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>:
   11432:	b580      	push	{r7, lr}
   11434:	b086      	sub	sp, #24
   11436:	460a      	mov	r2, r1
   11438:	9004      	str	r0, [sp, #16]
   1143a:	f88d 1017 	strb.w	r1, [sp, #23]
   1143e:	9203      	str	r2, [sp, #12]
   11440:	f000 fe0f 	bl	12062 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   11444:	9002      	str	r0, [sp, #8]
   11446:	e7ff      	b.n	11448 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E+0x16>
   11448:	9802      	ldr	r0, [sp, #8]
   1144a:	9903      	ldr	r1, [sp, #12]
   1144c:	f000 fe22 	bl	12094 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   11450:	9001      	str	r0, [sp, #4]
   11452:	e7ff      	b.n	11454 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E+0x22>
   11454:	9801      	ldr	r0, [sp, #4]
   11456:	b006      	add	sp, #24
   11458:	bd80      	pop	{r7, pc}

0001145a <_ZN4core4iter6traits8iterator8Iterator7flatten17hce303520e4c400b1E>:
   1145a:	b580      	push	{r7, lr}
   1145c:	b084      	sub	sp, #16
   1145e:	680a      	ldr	r2, [r1, #0]
   11460:	684b      	ldr	r3, [r1, #4]
   11462:	6889      	ldr	r1, [r1, #8]
   11464:	9103      	str	r1, [sp, #12]
   11466:	9302      	str	r3, [sp, #8]
   11468:	9201      	str	r2, [sp, #4]
   1146a:	a901      	add	r1, sp, #4
   1146c:	f7ff ff88 	bl	11380 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h53d3e78f478dc601E>
   11470:	e7ff      	b.n	11472 <_ZN4core4iter6traits8iterator8Iterator7flatten17hce303520e4c400b1E+0x18>
   11472:	b004      	add	sp, #16
   11474:	bd80      	pop	{r7, pc}

00011476 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h6a9fe8e0637c7337E>:
   11476:	b083      	sub	sp, #12
   11478:	9100      	str	r1, [sp, #0]
   1147a:	9201      	str	r2, [sp, #4]
   1147c:	9302      	str	r3, [sp, #8]
   1147e:	6001      	str	r1, [r0, #0]
   11480:	6042      	str	r2, [r0, #4]
   11482:	6083      	str	r3, [r0, #8]
   11484:	b003      	add	sp, #12
   11486:	4770      	bx	lr

00011488 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17hb92aaa4dbbca4bccE>:
   11488:	b083      	sub	sp, #12
   1148a:	9100      	str	r1, [sp, #0]
   1148c:	9201      	str	r2, [sp, #4]
   1148e:	9302      	str	r3, [sp, #8]
   11490:	6001      	str	r1, [r0, #0]
   11492:	6042      	str	r2, [r0, #4]
   11494:	6083      	str	r3, [r0, #8]
   11496:	b003      	add	sp, #12
   11498:	4770      	bx	lr

0001149a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6ed52dfe9f180960E>:
   1149a:	680a      	ldr	r2, [r1, #0]
   1149c:	684b      	ldr	r3, [r1, #4]
   1149e:	6889      	ldr	r1, [r1, #8]
   114a0:	6081      	str	r1, [r0, #8]
   114a2:	6043      	str	r3, [r0, #4]
   114a4:	6002      	str	r2, [r0, #0]
   114a6:	4770      	bx	lr

000114a8 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5039ae5c012134d0E>:
   114a8:	b580      	push	{r7, lr}
   114aa:	b086      	sub	sp, #24
   114ac:	9105      	str	r1, [sp, #20]
   114ae:	9004      	str	r0, [sp, #16]
   114b0:	4608      	mov	r0, r1
   114b2:	9103      	str	r1, [sp, #12]
   114b4:	f000 fced 	bl	11e92 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   114b8:	9002      	str	r0, [sp, #8]
   114ba:	9101      	str	r1, [sp, #4]
   114bc:	e7ff      	b.n	114be <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5039ae5c012134d0E+0x16>
   114be:	9803      	ldr	r0, [sp, #12]
   114c0:	f100 0308 	add.w	r3, r0, #8
   114c4:	9804      	ldr	r0, [sp, #16]
   114c6:	9902      	ldr	r1, [sp, #8]
   114c8:	9a01      	ldr	r2, [sp, #4]
   114ca:	f7fb fb9d 	bl	cc08 <_ZN4core6option15Option$LT$T$GT$3map17hdf21ad7718ab4575E>
   114ce:	e7ff      	b.n	114d0 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5039ae5c012134d0E+0x28>
   114d0:	b006      	add	sp, #24
   114d2:	bd80      	pop	{r7, pc}

000114d4 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h53e4f1f46625fe50E>:
   114d4:	b580      	push	{r7, lr}
   114d6:	b086      	sub	sp, #24
   114d8:	9105      	str	r1, [sp, #20]
   114da:	9004      	str	r0, [sp, #16]
   114dc:	4608      	mov	r0, r1
   114de:	9103      	str	r1, [sp, #12]
   114e0:	f000 fcd7 	bl	11e92 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   114e4:	9002      	str	r0, [sp, #8]
   114e6:	9101      	str	r1, [sp, #4]
   114e8:	e7ff      	b.n	114ea <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h53e4f1f46625fe50E+0x16>
   114ea:	9803      	ldr	r0, [sp, #12]
   114ec:	f100 0308 	add.w	r3, r0, #8
   114f0:	9804      	ldr	r0, [sp, #16]
   114f2:	9902      	ldr	r1, [sp, #8]
   114f4:	9a01      	ldr	r2, [sp, #4]
   114f6:	f7fb fbd4 	bl	cca2 <_ZN4core6option15Option$LT$T$GT$3map17he1e8a0ed1df7da19E>
   114fa:	e7ff      	b.n	114fc <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h53e4f1f46625fe50E+0x28>
   114fc:	b006      	add	sp, #24
   114fe:	bd80      	pop	{r7, pc}

00011500 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E>:
   11500:	b580      	push	{r7, lr}
   11502:	b086      	sub	sp, #24
   11504:	9005      	str	r0, [sp, #20]
   11506:	2100      	movs	r1, #0
   11508:	f88d 1013 	strb.w	r1, [sp, #19]
   1150c:	1c41      	adds	r1, r0, #1
   1150e:	9002      	str	r0, [sp, #8]
   11510:	f005 fc11 	bl	16d36 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE>
   11514:	9001      	str	r0, [sp, #4]
   11516:	e7ff      	b.n	11518 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x18>
   11518:	9801      	ldr	r0, [sp, #4]
   1151a:	07c1      	lsls	r1, r0, #31
   1151c:	2900      	cmp	r1, #0
   1151e:	d104      	bne.n	1152a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x2a>
   11520:	e7ff      	b.n	11522 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x22>
   11522:	2000      	movs	r0, #0
   11524:	f88d 000c 	strb.w	r0, [sp, #12]
   11528:	e02c      	b.n	11584 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x84>
   1152a:	2001      	movs	r0, #1
   1152c:	f88d 0013 	strb.w	r0, [sp, #19]
   11530:	9902      	ldr	r1, [sp, #8]
   11532:	9000      	str	r0, [sp, #0]
   11534:	4608      	mov	r0, r1
   11536:	9900      	ldr	r1, [sp, #0]
   11538:	f005 fc09 	bl	16d4e <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE>
   1153c:	f88d 1011 	strb.w	r1, [sp, #17]
   11540:	f88d 0010 	strb.w	r0, [sp, #16]
   11544:	e7ff      	b.n	11546 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x46>
   11546:	f89d 0010 	ldrb.w	r0, [sp, #16]
   1154a:	07c0      	lsls	r0, r0, #31
   1154c:	2800      	cmp	r0, #0
   1154e:	d104      	bne.n	1155a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x5a>
   11550:	e7ff      	b.n	11552 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x52>
   11552:	2000      	movs	r0, #0
   11554:	f88d 000c 	strb.w	r0, [sp, #12]
   11558:	e029      	b.n	115ae <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xae>
   1155a:	2000      	movs	r0, #0
   1155c:	f88d 0013 	strb.w	r0, [sp, #19]
   11560:	f89d 0011 	ldrb.w	r0, [sp, #17]
   11564:	f88d 0012 	strb.w	r0, [sp, #18]
   11568:	f10d 0012 	add.w	r0, sp, #18
   1156c:	9902      	ldr	r1, [sp, #8]
   1156e:	f005 fbc4 	bl	16cfa <_ZN4core3mem4swap17h206518364108b51fE>
   11572:	e7ff      	b.n	11574 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x74>
   11574:	f89d 0012 	ldrb.w	r0, [sp, #18]
   11578:	f88d 000d 	strb.w	r0, [sp, #13]
   1157c:	2001      	movs	r0, #1
   1157e:	f88d 000c 	strb.w	r0, [sp, #12]
   11582:	e014      	b.n	115ae <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xae>
   11584:	f89d 000c 	ldrb.w	r0, [sp, #12]
   11588:	f89d 100d 	ldrb.w	r1, [sp, #13]
   1158c:	b006      	add	sp, #24
   1158e:	bd80      	pop	{r7, pc}
   11590:	2000      	movs	r0, #0
   11592:	f88d 0013 	strb.w	r0, [sp, #19]
   11596:	e7f5      	b.n	11584 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x84>
   11598:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1159c:	07c0      	lsls	r0, r0, #31
   1159e:	2800      	cmp	r0, #0
   115a0:	d0f6      	beq.n	11590 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   115a2:	e7ff      	b.n	115a4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xa4>
   115a4:	2000      	movs	r0, #0
   115a6:	f88d 0013 	strb.w	r0, [sp, #19]
   115aa:	e7f1      	b.n	11590 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   115ac:	e7f0      	b.n	11590 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   115ae:	f89d 0010 	ldrb.w	r0, [sp, #16]
   115b2:	07c0      	lsls	r0, r0, #31
   115b4:	2800      	cmp	r0, #0
   115b6:	d1ef      	bne.n	11598 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x98>
   115b8:	e7f8      	b.n	115ac <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xac>

000115ba <_ZN4core4iter6traits8iterator8Iterator3map17h977bf45075800c77E>:
   115ba:	b580      	push	{r7, lr}
   115bc:	b084      	sub	sp, #16
   115be:	9101      	str	r1, [sp, #4]
   115c0:	9202      	str	r2, [sp, #8]
   115c2:	9303      	str	r3, [sp, #12]
   115c4:	f7ff ff60 	bl	11488 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17hb92aaa4dbbca4bccE>
   115c8:	e7ff      	b.n	115ca <_ZN4core4iter6traits8iterator8Iterator3map17h977bf45075800c77E+0x10>
   115ca:	b004      	add	sp, #16
   115cc:	bd80      	pop	{r7, pc}

000115ce <_ZN4core4iter6traits8iterator8Iterator3map17hfd3597918d2fce20E>:
   115ce:	b580      	push	{r7, lr}
   115d0:	b084      	sub	sp, #16
   115d2:	9101      	str	r1, [sp, #4]
   115d4:	9202      	str	r2, [sp, #8]
   115d6:	9303      	str	r3, [sp, #12]
   115d8:	f7ff ff4d 	bl	11476 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h6a9fe8e0637c7337E>
   115dc:	e7ff      	b.n	115de <_ZN4core4iter6traits8iterator8Iterator3map17hfd3597918d2fce20E+0x10>
   115de:	b004      	add	sp, #16
   115e0:	bd80      	pop	{r7, pc}

000115e2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE>:
   115e2:	b081      	sub	sp, #4
   115e4:	460a      	mov	r2, r1
   115e6:	4603      	mov	r3, r0
   115e8:	f88d 0000 	strb.w	r0, [sp]
   115ec:	f88d 1001 	strb.w	r1, [sp, #1]
   115f0:	b001      	add	sp, #4
   115f2:	4770      	bx	lr

000115f4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>:
   115f4:	b084      	sub	sp, #16
   115f6:	9001      	str	r0, [sp, #4]
   115f8:	9102      	str	r1, [sp, #8]
   115fa:	4408      	add	r0, r1
   115fc:	9003      	str	r0, [sp, #12]
   115fe:	9803      	ldr	r0, [sp, #12]
   11600:	9000      	str	r0, [sp, #0]
   11602:	e7ff      	b.n	11604 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E+0x10>
   11604:	9800      	ldr	r0, [sp, #0]
   11606:	b004      	add	sp, #16
   11608:	4770      	bx	lr

0001160a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>:
   1160a:	b082      	sub	sp, #8
   1160c:	9001      	str	r0, [sp, #4]
   1160e:	9000      	str	r0, [sp, #0]
   11610:	e7ff      	b.n	11612 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE+0x8>
   11612:	9800      	ldr	r0, [sp, #0]
   11614:	fab0 f180 	clz	r1, r0
   11618:	0948      	lsrs	r0, r1, #5
   1161a:	b002      	add	sp, #8
   1161c:	4770      	bx	lr

0001161e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>:
   1161e:	b082      	sub	sp, #8
   11620:	9001      	str	r0, [sp, #4]
   11622:	9000      	str	r0, [sp, #0]
   11624:	9800      	ldr	r0, [sp, #0]
   11626:	b002      	add	sp, #8
   11628:	4770      	bx	lr

0001162a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>:
   1162a:	b081      	sub	sp, #4
   1162c:	9000      	str	r0, [sp, #0]
   1162e:	b001      	add	sp, #4
   11630:	4770      	bx	lr

00011632 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>:
   11632:	b580      	push	{r7, lr}
   11634:	b084      	sub	sp, #16
   11636:	9002      	str	r0, [sp, #8]
   11638:	9103      	str	r1, [sp, #12]
   1163a:	f000 f805 	bl	11648 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   1163e:	9001      	str	r0, [sp, #4]
   11640:	e7ff      	b.n	11642 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E+0x10>
   11642:	9801      	ldr	r0, [sp, #4]
   11644:	b004      	add	sp, #16
   11646:	bd80      	pop	{r7, pc}

00011648 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>:
   11648:	b084      	sub	sp, #16
   1164a:	9001      	str	r0, [sp, #4]
   1164c:	9102      	str	r1, [sp, #8]
   1164e:	4408      	add	r0, r1
   11650:	9003      	str	r0, [sp, #12]
   11652:	9803      	ldr	r0, [sp, #12]
   11654:	9000      	str	r0, [sp, #0]
   11656:	e7ff      	b.n	11658 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E+0x10>
   11658:	9800      	ldr	r0, [sp, #0]
   1165a:	b004      	add	sp, #16
   1165c:	4770      	bx	lr

0001165e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>:
   1165e:	b082      	sub	sp, #8
   11660:	9001      	str	r0, [sp, #4]
   11662:	9000      	str	r0, [sp, #0]
   11664:	e7ff      	b.n	11666 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE+0x8>
   11666:	9800      	ldr	r0, [sp, #0]
   11668:	fab0 f180 	clz	r1, r0
   1166c:	0948      	lsrs	r0, r1, #5
   1166e:	b002      	add	sp, #8
   11670:	4770      	bx	lr

00011672 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>:
   11672:	b580      	push	{r7, lr}
   11674:	b090      	sub	sp, #64	; 0x40
   11676:	900c      	str	r0, [sp, #48]	; 0x30
   11678:	910d      	str	r1, [sp, #52]	; 0x34
   1167a:	9007      	str	r0, [sp, #28]
   1167c:	9106      	str	r1, [sp, #24]
   1167e:	f001 f895 	bl	127ac <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>
   11682:	4601      	mov	r1, r0
   11684:	900e      	str	r0, [sp, #56]	; 0x38
   11686:	9105      	str	r1, [sp, #20]
   11688:	e7ff      	b.n	1168a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x18>
   1168a:	9805      	ldr	r0, [sp, #20]
   1168c:	f7ff ffe7 	bl	1165e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   11690:	e7ff      	b.n	11692 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x20>
   11692:	e7ff      	b.n	11694 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x22>
   11694:	2001      	movs	r0, #1
   11696:	900f      	str	r0, [sp, #60]	; 0x3c
   11698:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1169a:	9004      	str	r0, [sp, #16]
   1169c:	e7ff      	b.n	1169e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x2c>
   1169e:	9804      	ldr	r0, [sp, #16]
   116a0:	2800      	cmp	r0, #0
   116a2:	d006      	beq.n	116b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x40>
   116a4:	e7ff      	b.n	116a6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x34>
   116a6:	9807      	ldr	r0, [sp, #28]
   116a8:	9906      	ldr	r1, [sp, #24]
   116aa:	f001 f877 	bl	1279c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   116ae:	9003      	str	r0, [sp, #12]
   116b0:	e00e      	b.n	116d0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x5e>
   116b2:	9807      	ldr	r0, [sp, #28]
   116b4:	9906      	ldr	r1, [sp, #24]
   116b6:	f001 f871 	bl	1279c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   116ba:	9002      	str	r0, [sp, #8]
   116bc:	e7ff      	b.n	116be <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x4c>
   116be:	9805      	ldr	r0, [sp, #20]
   116c0:	9902      	ldr	r1, [sp, #8]
   116c2:	f7ff ffb6 	bl	11632 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>
   116c6:	9001      	str	r0, [sp, #4]
   116c8:	e7ff      	b.n	116ca <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x58>
   116ca:	9801      	ldr	r0, [sp, #4]
   116cc:	900a      	str	r0, [sp, #40]	; 0x28
   116ce:	e006      	b.n	116de <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   116d0:	9805      	ldr	r0, [sp, #20]
   116d2:	9903      	ldr	r1, [sp, #12]
   116d4:	f001 f83f 	bl	12756 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>
   116d8:	900a      	str	r0, [sp, #40]	; 0x28
   116da:	e7ff      	b.n	116dc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6a>
   116dc:	e7ff      	b.n	116de <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   116de:	9805      	ldr	r0, [sp, #20]
   116e0:	f7ff ff9d 	bl	1161e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   116e4:	9000      	str	r0, [sp, #0]
   116e6:	e7ff      	b.n	116e8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x76>
   116e8:	980a      	ldr	r0, [sp, #40]	; 0x28
   116ea:	9900      	ldr	r1, [sp, #0]
   116ec:	9108      	str	r1, [sp, #32]
   116ee:	9009      	str	r0, [sp, #36]	; 0x24
   116f0:	9808      	ldr	r0, [sp, #32]
   116f2:	9909      	ldr	r1, [sp, #36]	; 0x24
   116f4:	b010      	add	sp, #64	; 0x40
   116f6:	bd80      	pop	{r7, pc}

000116f8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>:
   116f8:	b081      	sub	sp, #4
   116fa:	b001      	add	sp, #4
   116fc:	4770      	bx	lr

000116fe <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>:
   116fe:	b580      	push	{r7, lr}
   11700:	b08e      	sub	sp, #56	; 0x38
   11702:	9007      	str	r0, [sp, #28]
   11704:	6801      	ldr	r1, [r0, #0]
   11706:	9005      	str	r0, [sp, #20]
   11708:	4608      	mov	r0, r1
   1170a:	f7ff ff8e 	bl	1162a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   1170e:	9004      	str	r0, [sp, #16]
   11710:	e7ff      	b.n	11712 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x14>
   11712:	9804      	ldr	r0, [sp, #16]
   11714:	f7ff ff79 	bl	1160a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>
   11718:	e7ff      	b.n	1171a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1c>
   1171a:	e7ff      	b.n	1171c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1e>
   1171c:	2001      	movs	r0, #1
   1171e:	9008      	str	r0, [sp, #32]
   11720:	9808      	ldr	r0, [sp, #32]
   11722:	9003      	str	r0, [sp, #12]
   11724:	e7ff      	b.n	11726 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x28>
   11726:	9803      	ldr	r0, [sp, #12]
   11728:	2800      	cmp	r0, #0
   1172a:	d007      	beq.n	1173c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   1172c:	e7ff      	b.n	1172e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x30>
   1172e:	9805      	ldr	r0, [sp, #20]
   11730:	6840      	ldr	r0, [r0, #4]
   11732:	f7ff ff94 	bl	1165e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   11736:	e7ff      	b.n	11738 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3a>
   11738:	e7ff      	b.n	1173a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3c>
   1173a:	e7ff      	b.n	1173c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   1173c:	9805      	ldr	r0, [sp, #20]
   1173e:	6800      	ldr	r0, [r0, #0]
   11740:	f7ff ff73 	bl	1162a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11744:	9002      	str	r0, [sp, #8]
   11746:	e7ff      	b.n	11748 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x4a>
   11748:	9805      	ldr	r0, [sp, #20]
   1174a:	6841      	ldr	r1, [r0, #4]
   1174c:	9a02      	ldr	r2, [sp, #8]
   1174e:	428a      	cmp	r2, r1
   11750:	d02e      	beq.n	117b0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb2>
   11752:	e7ff      	b.n	11754 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x56>
   11754:	9805      	ldr	r0, [sp, #20]
   11756:	900a      	str	r0, [sp, #40]	; 0x28
   11758:	2101      	movs	r1, #1
   1175a:	910b      	str	r1, [sp, #44]	; 0x2c
   1175c:	910d      	str	r1, [sp, #52]	; 0x34
   1175e:	990d      	ldr	r1, [sp, #52]	; 0x34
   11760:	2900      	cmp	r1, #0
   11762:	d015      	beq.n	11790 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x92>
   11764:	e7ff      	b.n	11766 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x68>
   11766:	9805      	ldr	r0, [sp, #20]
   11768:	6800      	ldr	r0, [r0, #0]
   1176a:	f7ff ff5e 	bl	1162a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   1176e:	900c      	str	r0, [sp, #48]	; 0x30
   11770:	9905      	ldr	r1, [sp, #20]
   11772:	680a      	ldr	r2, [r1, #0]
   11774:	9001      	str	r0, [sp, #4]
   11776:	4610      	mov	r0, r2
   11778:	f7ff ff57 	bl	1162a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   1177c:	2101      	movs	r1, #1
   1177e:	f7ff ff39 	bl	115f4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>
   11782:	f7ff ff4c 	bl	1161e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   11786:	9905      	ldr	r1, [sp, #20]
   11788:	6008      	str	r0, [r1, #0]
   1178a:	9801      	ldr	r0, [sp, #4]
   1178c:	9009      	str	r0, [sp, #36]	; 0x24
   1178e:	e00c      	b.n	117aa <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   11790:	9805      	ldr	r0, [sp, #20]
   11792:	6840      	ldr	r0, [r0, #4]
   11794:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11798:	f7ff ff56 	bl	11648 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   1179c:	9905      	ldr	r1, [sp, #20]
   1179e:	6048      	str	r0, [r1, #4]
   117a0:	6808      	ldr	r0, [r1, #0]
   117a2:	f7ff ff42 	bl	1162a <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   117a6:	9009      	str	r0, [sp, #36]	; 0x24
   117a8:	e7ff      	b.n	117aa <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   117aa:	9809      	ldr	r0, [sp, #36]	; 0x24
   117ac:	9000      	str	r0, [sp, #0]
   117ae:	e002      	b.n	117b6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb8>
   117b0:	2000      	movs	r0, #0
   117b2:	9006      	str	r0, [sp, #24]
   117b4:	e002      	b.n	117bc <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   117b6:	9800      	ldr	r0, [sp, #0]
   117b8:	9006      	str	r0, [sp, #24]
   117ba:	e7ff      	b.n	117bc <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   117bc:	9806      	ldr	r0, [sp, #24]
   117be:	b00e      	add	sp, #56	; 0x38
   117c0:	bd80      	pop	{r7, pc}

000117c2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE>:
   117c2:	b580      	push	{r7, lr}
   117c4:	b084      	sub	sp, #16
   117c6:	9002      	str	r0, [sp, #8]
   117c8:	9103      	str	r1, [sp, #12]
   117ca:	6800      	ldr	r0, [r0, #0]
   117cc:	f000 f88c 	bl	118e8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>
   117d0:	9001      	str	r0, [sp, #4]
   117d2:	e7ff      	b.n	117d4 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE+0x12>
   117d4:	9801      	ldr	r0, [sp, #4]
   117d6:	f000 0001 	and.w	r0, r0, #1
   117da:	b004      	add	sp, #16
   117dc:	bd80      	pop	{r7, pc}

000117de <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>:
   117de:	b580      	push	{r7, lr}
   117e0:	b084      	sub	sp, #16
   117e2:	9002      	str	r0, [sp, #8]
   117e4:	9103      	str	r1, [sp, #12]
   117e6:	f000 f827 	bl	11838 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>
   117ea:	9001      	str	r0, [sp, #4]
   117ec:	e7ff      	b.n	117ee <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE+0x10>
   117ee:	9801      	ldr	r0, [sp, #4]
   117f0:	b004      	add	sp, #16
   117f2:	bd80      	pop	{r7, pc}

000117f4 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>:
   117f4:	b085      	sub	sp, #20
   117f6:	9003      	str	r0, [sp, #12]
   117f8:	9104      	str	r1, [sp, #16]
   117fa:	6802      	ldr	r2, [r0, #0]
   117fc:	680b      	ldr	r3, [r1, #0]
   117fe:	429a      	cmp	r2, r3
   11800:	9101      	str	r1, [sp, #4]
   11802:	9000      	str	r0, [sp, #0]
   11804:	db07      	blt.n	11816 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x22>
   11806:	e7ff      	b.n	11808 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x14>
   11808:	9800      	ldr	r0, [sp, #0]
   1180a:	6801      	ldr	r1, [r0, #0]
   1180c:	9a01      	ldr	r2, [sp, #4]
   1180e:	6813      	ldr	r3, [r2, #0]
   11810:	4299      	cmp	r1, r3
   11812:	d008      	beq.n	11826 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x32>
   11814:	e003      	b.n	1181e <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x2a>
   11816:	20ff      	movs	r0, #255	; 0xff
   11818:	f88d 000b 	strb.w	r0, [sp, #11]
   1181c:	e008      	b.n	11830 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
   1181e:	2001      	movs	r0, #1
   11820:	f88d 000b 	strb.w	r0, [sp, #11]
   11824:	e003      	b.n	1182e <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
   11826:	2000      	movs	r0, #0
   11828:	f88d 000b 	strb.w	r0, [sp, #11]
   1182c:	e7ff      	b.n	1182e <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
   1182e:	e7ff      	b.n	11830 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
   11830:	f89d 000b 	ldrb.w	r0, [sp, #11]
   11834:	b005      	add	sp, #20
   11836:	4770      	bx	lr

00011838 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>:
   11838:	b580      	push	{r7, lr}
   1183a:	b088      	sub	sp, #32
   1183c:	9000      	str	r0, [sp, #0]
   1183e:	9101      	str	r1, [sp, #4]
   11840:	2000      	movs	r0, #0
   11842:	f88d 001b 	strb.w	r0, [sp, #27]
   11846:	f88d 001a 	strb.w	r0, [sp, #26]
   1184a:	2001      	movs	r0, #1
   1184c:	f88d 001b 	strb.w	r0, [sp, #27]
   11850:	f88d 001a 	strb.w	r0, [sp, #26]
   11854:	4668      	mov	r0, sp
   11856:	9004      	str	r0, [sp, #16]
   11858:	a801      	add	r0, sp, #4
   1185a:	9005      	str	r0, [sp, #20]
   1185c:	9804      	ldr	r0, [sp, #16]
   1185e:	9905      	ldr	r1, [sp, #20]
   11860:	f000 f895 	bl	1198e <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>
   11864:	f88d 000f 	strb.w	r0, [sp, #15]
   11868:	e7ff      	b.n	1186a <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x32>
   1186a:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   1186e:	1c41      	adds	r1, r0, #1
   11870:	2902      	cmp	r1, #2
   11872:	d307      	bcc.n	11884 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x4c>
   11874:	e7ff      	b.n	11876 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x3e>
   11876:	2000      	movs	r0, #0
   11878:	f88d 001b 	strb.w	r0, [sp, #27]
   1187c:	9800      	ldr	r0, [sp, #0]
   1187e:	9002      	str	r0, [sp, #8]
   11880:	e006      	b.n	11890 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
   11882:	defe      	udf	#254	; 0xfe
   11884:	2000      	movs	r0, #0
   11886:	f88d 001a 	strb.w	r0, [sp, #26]
   1188a:	9801      	ldr	r0, [sp, #4]
   1188c:	9002      	str	r0, [sp, #8]
   1188e:	e7ff      	b.n	11890 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
   11890:	f89d 001a 	ldrb.w	r0, [sp, #26]
   11894:	07c0      	lsls	r0, r0, #31
   11896:	2800      	cmp	r0, #0
   11898:	d109      	bne.n	118ae <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x76>
   1189a:	e7ff      	b.n	1189c <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
   1189c:	f89d 001b 	ldrb.w	r0, [sp, #27]
   118a0:	07c0      	lsls	r0, r0, #31
   118a2:	2800      	cmp	r0, #0
   118a4:	d107      	bne.n	118b6 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x7e>
   118a6:	e7ff      	b.n	118a8 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>
   118a8:	9802      	ldr	r0, [sp, #8]
   118aa:	b008      	add	sp, #32
   118ac:	bd80      	pop	{r7, pc}
   118ae:	2000      	movs	r0, #0
   118b0:	f88d 001a 	strb.w	r0, [sp, #26]
   118b4:	e7f2      	b.n	1189c <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
   118b6:	2000      	movs	r0, #0
   118b8:	f88d 001b 	strb.w	r0, [sp, #27]
   118bc:	e7f4      	b.n	118a8 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>

000118be <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>:
   118be:	b089      	sub	sp, #36	; 0x24
   118c0:	9005      	str	r0, [sp, #20]
   118c2:	9106      	str	r1, [sp, #24]
   118c4:	9107      	str	r1, [sp, #28]
   118c6:	9907      	ldr	r1, [sp, #28]
   118c8:	9002      	str	r0, [sp, #8]
   118ca:	9101      	str	r1, [sp, #4]
   118cc:	e7ff      	b.n	118ce <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x10>
   118ce:	9802      	ldr	r0, [sp, #8]
   118d0:	9008      	str	r0, [sp, #32]
   118d2:	9908      	ldr	r1, [sp, #32]
   118d4:	9100      	str	r1, [sp, #0]
   118d6:	e7ff      	b.n	118d8 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x1a>
   118d8:	9800      	ldr	r0, [sp, #0]
   118da:	9003      	str	r0, [sp, #12]
   118dc:	9901      	ldr	r1, [sp, #4]
   118de:	9104      	str	r1, [sp, #16]
   118e0:	9803      	ldr	r0, [sp, #12]
   118e2:	9904      	ldr	r1, [sp, #16]
   118e4:	b009      	add	sp, #36	; 0x24
   118e6:	4770      	bx	lr

000118e8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>:
   118e8:	b580      	push	{r7, lr}
   118ea:	b088      	sub	sp, #32
   118ec:	9006      	str	r0, [sp, #24]
   118ee:	9107      	str	r1, [sp, #28]
   118f0:	9004      	str	r0, [sp, #16]
   118f2:	4608      	mov	r0, r1
   118f4:	9103      	str	r1, [sp, #12]
   118f6:	f006 ff10 	bl	1871a <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   118fa:	9002      	str	r0, [sp, #8]
   118fc:	e7ff      	b.n	118fe <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x16>
   118fe:	9802      	ldr	r0, [sp, #8]
   11900:	07c1      	lsls	r1, r0, #31
   11902:	2900      	cmp	r1, #0
   11904:	d105      	bne.n	11912 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x2a>
   11906:	e7ff      	b.n	11908 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x20>
   11908:	9803      	ldr	r0, [sp, #12]
   1190a:	f006 ff0a 	bl	18722 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1190e:	9001      	str	r0, [sp, #4]
   11910:	e007      	b.n	11922 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x3a>
   11912:	9804      	ldr	r0, [sp, #16]
   11914:	9903      	ldr	r1, [sp, #12]
   11916:	f007 fd2a 	bl	1936e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   1191a:	f88d 0017 	strb.w	r0, [sp, #23]
   1191e:	e7ff      	b.n	11920 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x38>
   11920:	e015      	b.n	1194e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   11922:	9801      	ldr	r0, [sp, #4]
   11924:	07c1      	lsls	r1, r0, #31
   11926:	2900      	cmp	r1, #0
   11928:	d107      	bne.n	1193a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x52>
   1192a:	e7ff      	b.n	1192c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x44>
   1192c:	9804      	ldr	r0, [sp, #16]
   1192e:	9903      	ldr	r1, [sp, #12]
   11930:	f007 fe98 	bl	19664 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   11934:	f88d 0017 	strb.w	r0, [sp, #23]
   11938:	e007      	b.n	1194a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x62>
   1193a:	9804      	ldr	r0, [sp, #16]
   1193c:	9903      	ldr	r1, [sp, #12]
   1193e:	f007 fd81 	bl	19444 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   11942:	f88d 0017 	strb.w	r0, [sp, #23]
   11946:	e7ff      	b.n	11948 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x60>
   11948:	e000      	b.n	1194c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   1194a:	e7ff      	b.n	1194c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   1194c:	e7ff      	b.n	1194e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   1194e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   11952:	b008      	add	sp, #32
   11954:	bd80      	pop	{r7, pc}

00011956 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>:
   11956:	b580      	push	{r7, lr}
   11958:	b086      	sub	sp, #24
   1195a:	f8dd c020 	ldr.w	ip, [sp, #32]
   1195e:	9102      	str	r1, [sp, #8]
   11960:	9203      	str	r2, [sp, #12]
   11962:	9304      	str	r3, [sp, #16]
   11964:	f8cd c014 	str.w	ip, [sp, #20]
   11968:	f04f 0e00 	mov.w	lr, #0
   1196c:	f8cd e004 	str.w	lr, [sp, #4]
   11970:	f8cd e000 	str.w	lr, [sp]
   11974:	f8cd e000 	str.w	lr, [sp]
   11978:	6001      	str	r1, [r0, #0]
   1197a:	6042      	str	r2, [r0, #4]
   1197c:	9900      	ldr	r1, [sp, #0]
   1197e:	9a01      	ldr	r2, [sp, #4]
   11980:	6081      	str	r1, [r0, #8]
   11982:	60c2      	str	r2, [r0, #12]
   11984:	6103      	str	r3, [r0, #16]
   11986:	f8c0 c014 	str.w	ip, [r0, #20]
   1198a:	b006      	add	sp, #24
   1198c:	bd80      	pop	{r7, pc}

0001198e <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>:
   1198e:	b580      	push	{r7, lr}
   11990:	b084      	sub	sp, #16
   11992:	9001      	str	r0, [sp, #4]
   11994:	9102      	str	r1, [sp, #8]
   11996:	9801      	ldr	r0, [sp, #4]
   11998:	9902      	ldr	r1, [sp, #8]
   1199a:	f7ff ff2b 	bl	117f4 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>
   1199e:	9000      	str	r0, [sp, #0]
   119a0:	e7ff      	b.n	119a2 <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E+0x14>
   119a2:	9800      	ldr	r0, [sp, #0]
   119a4:	b004      	add	sp, #16
   119a6:	bd80      	pop	{r7, pc}

000119a8 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct Coord(pub CoordPart, pub CoordPart);

    impl Coord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: CoordPart, y: CoordPart) -> Self {
   119a8:	b084      	sub	sp, #16
   119aa:	9002      	str	r0, [sp, #8]
   119ac:	9103      	str	r1, [sp, #12]
            Coord(x, y)
   119ae:	9000      	str	r0, [sp, #0]
   119b0:	9101      	str	r1, [sp, #4]
        }
   119b2:	9800      	ldr	r0, [sp, #0]
   119b4:	9901      	ldr	r1, [sp, #4]
   119b6:	b004      	add	sp, #16
   119b8:	4770      	bx	lr

000119ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>:
    }

    impl Index<usize> for Coord {
        type Output = CoordPart;

        fn index(&self, idx: usize) -> &CoordPart {
   119ba:	b580      	push	{r7, lr}
   119bc:	b096      	sub	sp, #88	; 0x58
   119be:	9109      	str	r1, [sp, #36]	; 0x24
   119c0:	9014      	str	r0, [sp, #80]	; 0x50
            match idx {
                0 => &self.0,
   119c2:	9909      	ldr	r1, [sp, #36]	; 0x24
   119c4:	2900      	cmp	r1, #0
   119c6:	9008      	str	r0, [sp, #32]
   119c8:	9107      	str	r1, [sp, #28]
   119ca:	d018      	beq.n	119fe <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x44>
   119cc:	e7ff      	b.n	119ce <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x14>
   119ce:	9807      	ldr	r0, [sp, #28]
   119d0:	2801      	cmp	r0, #1
   119d2:	d017      	beq.n	11a04 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x4a>
   119d4:	e7ff      	b.n	119d6 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x1c>
                1 => &self.1,
                _ => panic!("Unreachable index {}", idx),
   119d6:	f240 4018 	movw	r0, #1048	; 0x418
   119da:	f2c0 0002 	movt	r0, #2
   119de:	6801      	ldr	r1, [r0, #0]
   119e0:	a809      	add	r0, sp, #36	; 0x24
   119e2:	9013      	str	r0, [sp, #76]	; 0x4c
   119e4:	9813      	ldr	r0, [sp, #76]	; 0x4c
   119e6:	9015      	str	r0, [sp, #84]	; 0x54
   119e8:	f249 7259 	movw	r2, #38745	; 0x9759
   119ec:	f2c0 0201 	movt	r2, #1
   119f0:	9106      	str	r1, [sp, #24]
   119f2:	4611      	mov	r1, r2
   119f4:	f7ff ff63 	bl	118be <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>
   119f8:	9005      	str	r0, [sp, #20]
   119fa:	9104      	str	r1, [sp, #16]
   119fc:	e006      	b.n	11a0c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x52>
                0 => &self.0,
   119fe:	9808      	ldr	r0, [sp, #32]
   11a00:	900a      	str	r0, [sp, #40]	; 0x28
            match idx {
   11a02:	e020      	b.n	11a46 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                1 => &self.1,
   11a04:	9808      	ldr	r0, [sp, #32]
   11a06:	1d01      	adds	r1, r0, #4
   11a08:	910a      	str	r1, [sp, #40]	; 0x28
            match idx {
   11a0a:	e01c      	b.n	11a46 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                _ => panic!("Unreachable index {}", idx),
   11a0c:	9805      	ldr	r0, [sp, #20]
   11a0e:	9011      	str	r0, [sp, #68]	; 0x44
   11a10:	9904      	ldr	r1, [sp, #16]
   11a12:	9112      	str	r1, [sp, #72]	; 0x48
   11a14:	466a      	mov	r2, sp
   11a16:	2301      	movs	r3, #1
   11a18:	6013      	str	r3, [r2, #0]
   11a1a:	a80b      	add	r0, sp, #44	; 0x2c
   11a1c:	aa11      	add	r2, sp, #68	; 0x44
   11a1e:	9906      	ldr	r1, [sp, #24]
   11a20:	9203      	str	r2, [sp, #12]
   11a22:	461a      	mov	r2, r3
   11a24:	9b03      	ldr	r3, [sp, #12]
   11a26:	f7ff ff96 	bl	11956 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>
   11a2a:	e7ff      	b.n	11a2c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x72>
   11a2c:	f240 401c 	movw	r0, #1052	; 0x41c
   11a30:	f2c0 0002 	movt	r0, #2
   11a34:	f005 ffc9 	bl	179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   11a38:	9002      	str	r0, [sp, #8]
   11a3a:	e7ff      	b.n	11a3c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x82>
   11a3c:	a80b      	add	r0, sp, #44	; 0x2c
   11a3e:	9902      	ldr	r1, [sp, #8]
   11a40:	f006 f800 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   11a44:	defe      	udf	#254	; 0xfe
            match idx {
   11a46:	980a      	ldr	r0, [sp, #40]	; 0x28
            }
        }
   11a48:	b016      	add	sp, #88	; 0x58
   11a4a:	bd80      	pop	{r7, pc}

00011a4c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>:
    /// #
    /// let coord = Coord::new(-5, 10);
    ///
    /// assert_eq!(coord.to_unsigned(), UnsignedCoord::new(0, 10));
    /// ```
    fn to_unsigned(self) -> UnsignedCoord {
   11a4c:	b580      	push	{r7, lr}
   11a4e:	b088      	sub	sp, #32
   11a50:	9006      	str	r0, [sp, #24]
   11a52:	9107      	str	r1, [sp, #28]
   11a54:	a806      	add	r0, sp, #24
   11a56:	2100      	movs	r1, #0
        UnsignedCoord::new(self[0].max(0) as u32, self[1].max(0) as u32)
   11a58:	f7ff ffaf 	bl	119ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11a5c:	9005      	str	r0, [sp, #20]
   11a5e:	e7ff      	b.n	11a60 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x14>
   11a60:	9805      	ldr	r0, [sp, #20]
   11a62:	6800      	ldr	r0, [r0, #0]
   11a64:	2100      	movs	r1, #0
   11a66:	f7ff feba 	bl	117de <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
   11a6a:	9004      	str	r0, [sp, #16]
   11a6c:	e7ff      	b.n	11a6e <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x22>
   11a6e:	a806      	add	r0, sp, #24
   11a70:	2101      	movs	r1, #1
   11a72:	f7ff ffa2 	bl	119ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11a76:	9003      	str	r0, [sp, #12]
   11a78:	e7ff      	b.n	11a7a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x2e>
   11a7a:	9803      	ldr	r0, [sp, #12]
   11a7c:	6800      	ldr	r0, [r0, #0]
   11a7e:	2100      	movs	r1, #0
   11a80:	f7ff fead 	bl	117de <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
   11a84:	9002      	str	r0, [sp, #8]
   11a86:	e7ff      	b.n	11a88 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x3c>
   11a88:	9804      	ldr	r0, [sp, #16]
   11a8a:	9902      	ldr	r1, [sp, #8]
   11a8c:	f000 f84e 	bl	11b2c <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>
   11a90:	9001      	str	r0, [sp, #4]
   11a92:	9100      	str	r1, [sp, #0]
   11a94:	e7ff      	b.n	11a96 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x4a>
    }
   11a96:	9801      	ldr	r0, [sp, #4]
   11a98:	9900      	ldr	r1, [sp, #0]
   11a9a:	b008      	add	sp, #32
   11a9c:	bd80      	pop	{r7, pc}

00011a9e <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>:
/// Take a tuple of 8 bit `(red, green, blue)` color values and convert them to a single 16 bit
/// color
///
/// The 2 or 3 (for the green channel) least significant bits are discarded
impl From<(u8, u8, u8)> for Rgb565 {
    fn from((r, g, b): (u8, u8, u8)) -> Self {
   11a9e:	b08b      	sub	sp, #44	; 0x2c
   11aa0:	4601      	mov	r1, r0
   11aa2:	f8ad 0020 	strh.w	r0, [sp, #32]
   11aa6:	0c00      	lsrs	r0, r0, #16
   11aa8:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11aac:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   11ab0:	f88d 001e 	strb.w	r0, [sp, #30]
   11ab4:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   11ab8:	f8ad 001c 	strh.w	r0, [sp, #28]
   11abc:	f89d 001c 	ldrb.w	r0, [sp, #28]
   11ac0:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   11ac4:	f89d 201d 	ldrb.w	r2, [sp, #29]
   11ac8:	4613      	mov	r3, r2
   11aca:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   11ace:	f89d 201e 	ldrb.w	r2, [sp, #30]
   11ad2:	4694      	mov	ip, r2
   11ad4:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
        let value =
        // Red
        (((r as u16) << 8) & RED_MASK)
   11ad8:	0200      	lsls	r0, r0, #8
   11ada:	9306      	str	r3, [sp, #24]
   11adc:	f8cd c014 	str.w	ip, [sp, #20]
   11ae0:	9004      	str	r0, [sp, #16]
   11ae2:	e7ff      	b.n	11ae4 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x46>
   11ae4:	9804      	ldr	r0, [sp, #16]
   11ae6:	f400 4178 	and.w	r1, r0, #63488	; 0xf800
        // Green
        | (((g as u16) << 3) & GREEN_MASK)
   11aea:	9a06      	ldr	r2, [sp, #24]
   11aec:	b2d3      	uxtb	r3, r2
   11aee:	00db      	lsls	r3, r3, #3
   11af0:	9103      	str	r1, [sp, #12]
   11af2:	9302      	str	r3, [sp, #8]
   11af4:	e7ff      	b.n	11af6 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x58>
   11af6:	9802      	ldr	r0, [sp, #8]
   11af8:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
        (((r as u16) << 8) & RED_MASK)
   11afc:	9a03      	ldr	r2, [sp, #12]
   11afe:	4311      	orrs	r1, r2
        // Blue
        | ((b as u16) >> 3 & BLUE_MASK);
   11b00:	9b05      	ldr	r3, [sp, #20]
   11b02:	fa5f fc83 	uxtb.w	ip, r3
   11b06:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
   11b0a:	9101      	str	r1, [sp, #4]
   11b0c:	f8cd c000 	str.w	ip, [sp]
   11b10:	e7ff      	b.n	11b12 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x74>
   11b12:	9800      	ldr	r0, [sp, #0]
   11b14:	f000 011f 	and.w	r1, r0, #31
        (((r as u16) << 8) & RED_MASK)
   11b18:	9a01      	ldr	r2, [sp, #4]
   11b1a:	4311      	orrs	r1, r2
   11b1c:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a

        Self(value)
   11b20:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    }
   11b24:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   11b28:	b00b      	add	sp, #44	; 0x2c
   11b2a:	4770      	bx	lr

00011b2c <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct UnsignedCoord(pub UnsignedCoordPart, pub UnsignedCoordPart);

    impl UnsignedCoord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: UnsignedCoordPart, y: UnsignedCoordPart) -> Self {
   11b2c:	b084      	sub	sp, #16
   11b2e:	9002      	str	r0, [sp, #8]
   11b30:	9103      	str	r1, [sp, #12]
            UnsignedCoord(x, y)
   11b32:	9000      	str	r0, [sp, #0]
   11b34:	9101      	str	r1, [sp, #4]
        }
   11b36:	9800      	ldr	r0, [sp, #0]
   11b38:	9901      	ldr	r1, [sp, #4]
   11b3a:	b004      	add	sp, #16
   11b3c:	4770      	bx	lr

00011b3e <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>:
   11b3e:	b580      	push	{r7, lr}
   11b40:	b088      	sub	sp, #32
   11b42:	9005      	str	r0, [sp, #20]
   11b44:	9106      	str	r1, [sp, #24]
   11b46:	9003      	str	r0, [sp, #12]
   11b48:	4608      	mov	r0, r1
   11b4a:	f000 fa21 	bl	11f90 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>
   11b4e:	9004      	str	r0, [sp, #16]
   11b50:	e7ff      	b.n	11b52 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x14>
   11b52:	9804      	ldr	r0, [sp, #16]
   11b54:	9007      	str	r0, [sp, #28]
   11b56:	9903      	ldr	r1, [sp, #12]
   11b58:	680a      	ldr	r2, [r1, #0]
   11b5a:	9002      	str	r0, [sp, #8]
   11b5c:	4610      	mov	r0, r2
   11b5e:	9902      	ldr	r1, [sp, #8]
   11b60:	f000 f837 	bl	11bd2 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>
   11b64:	9001      	str	r0, [sp, #4]
   11b66:	9100      	str	r1, [sp, #0]
   11b68:	e7ff      	b.n	11b6a <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x2c>
   11b6a:	9801      	ldr	r0, [sp, #4]
   11b6c:	9900      	ldr	r1, [sp, #0]
   11b6e:	b008      	add	sp, #32
   11b70:	bd80      	pop	{r7, pc}

00011b72 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>:
   11b72:	b580      	push	{r7, lr}
   11b74:	b084      	sub	sp, #16
   11b76:	9001      	str	r0, [sp, #4]
   11b78:	9102      	str	r1, [sp, #8]
   11b7a:	9203      	str	r2, [sp, #12]
   11b7c:	9000      	str	r0, [sp, #0]
   11b7e:	4608      	mov	r0, r1
   11b80:	9900      	ldr	r1, [sp, #0]
   11b82:	f00c fafd 	bl	1e180 <__aeabi_memcpy>
   11b86:	e7ff      	b.n	11b88 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE+0x16>
   11b88:	b004      	add	sp, #16
   11b8a:	bd80      	pop	{r7, pc}

00011b8c <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>:
   11b8c:	b580      	push	{r7, lr}
   11b8e:	b084      	sub	sp, #16
   11b90:	9001      	str	r0, [sp, #4]
   11b92:	9102      	str	r1, [sp, #8]
   11b94:	9203      	str	r2, [sp, #12]
   11b96:	0092      	lsls	r2, r2, #2
   11b98:	9000      	str	r0, [sp, #0]
   11b9a:	4608      	mov	r0, r1
   11b9c:	9900      	ldr	r1, [sp, #0]
   11b9e:	f00c faef 	bl	1e180 <__aeabi_memcpy>
   11ba2:	e7ff      	b.n	11ba4 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E+0x18>
   11ba4:	b004      	add	sp, #16
   11ba6:	bd80      	pop	{r7, pc}

00011ba8 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>:
   11ba8:	b082      	sub	sp, #8
   11baa:	9000      	str	r0, [sp, #0]
   11bac:	9101      	str	r1, [sp, #4]
   11bae:	6800      	ldr	r0, [r0, #0]
   11bb0:	6809      	ldr	r1, [r1, #0]
   11bb2:	2200      	movs	r2, #0
   11bb4:	4288      	cmp	r0, r1
   11bb6:	bf38      	it	cc
   11bb8:	2201      	movcc	r2, #1
   11bba:	4610      	mov	r0, r2
   11bbc:	b002      	add	sp, #8
   11bbe:	4770      	bx	lr

00011bc0 <_ZN4core3mem4swap17hc4afbec7b5ffb125E>:
   11bc0:	b580      	push	{r7, lr}
   11bc2:	b082      	sub	sp, #8
   11bc4:	9000      	str	r0, [sp, #0]
   11bc6:	9101      	str	r1, [sp, #4]
   11bc8:	f000 f85f 	bl	11c8a <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>
   11bcc:	e7ff      	b.n	11bce <_ZN4core3mem4swap17hc4afbec7b5ffb125E+0xe>
   11bce:	b002      	add	sp, #8
   11bd0:	bd80      	pop	{r7, pc}

00011bd2 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>:
   11bd2:	b580      	push	{r7, lr}
   11bd4:	b088      	sub	sp, #32
   11bd6:	9004      	str	r0, [sp, #16]
   11bd8:	9105      	str	r1, [sp, #20]
   11bda:	f000 f819 	bl	11c10 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>
   11bde:	9001      	str	r0, [sp, #4]
   11be0:	9100      	str	r1, [sp, #0]
   11be2:	e7ff      	b.n	11be4 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x12>
   11be4:	9801      	ldr	r0, [sp, #4]
   11be6:	9006      	str	r0, [sp, #24]
   11be8:	9900      	ldr	r1, [sp, #0]
   11bea:	f001 0201 	and.w	r2, r1, #1
   11bee:	f88d 201f 	strb.w	r2, [sp, #31]
   11bf2:	2a00      	cmp	r2, #0
   11bf4:	d105      	bne.n	11c02 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x30>
   11bf6:	e7ff      	b.n	11bf8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x26>
   11bf8:	9801      	ldr	r0, [sp, #4]
   11bfa:	9003      	str	r0, [sp, #12]
   11bfc:	2101      	movs	r1, #1
   11bfe:	9102      	str	r1, [sp, #8]
   11c00:	e002      	b.n	11c08 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   11c02:	2000      	movs	r0, #0
   11c04:	9002      	str	r0, [sp, #8]
   11c06:	e7ff      	b.n	11c08 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   11c08:	9802      	ldr	r0, [sp, #8]
   11c0a:	9903      	ldr	r1, [sp, #12]
   11c0c:	b008      	add	sp, #32
   11c0e:	bd80      	pop	{r7, pc}

00011c10 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>:
   11c10:	b08a      	sub	sp, #40	; 0x28
   11c12:	9004      	str	r0, [sp, #16]
   11c14:	9105      	str	r1, [sp, #20]
   11c16:	1840      	adds	r0, r0, r1
   11c18:	f04f 0100 	mov.w	r1, #0
   11c1c:	f141 0100 	adc.w	r1, r1, #0
   11c20:	9006      	str	r0, [sp, #24]
   11c22:	f88d 101c 	strb.w	r1, [sp, #28]
   11c26:	9806      	ldr	r0, [sp, #24]
   11c28:	f89d 101c 	ldrb.w	r1, [sp, #28]
   11c2c:	9001      	str	r0, [sp, #4]
   11c2e:	9100      	str	r1, [sp, #0]
   11c30:	e7ff      	b.n	11c32 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE+0x22>
   11c32:	9801      	ldr	r0, [sp, #4]
   11c34:	9008      	str	r0, [sp, #32]
   11c36:	9900      	ldr	r1, [sp, #0]
   11c38:	f001 0201 	and.w	r2, r1, #1
   11c3c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   11c40:	9002      	str	r0, [sp, #8]
   11c42:	f88d 200c 	strb.w	r2, [sp, #12]
   11c46:	9802      	ldr	r0, [sp, #8]
   11c48:	f89d 100c 	ldrb.w	r1, [sp, #12]
   11c4c:	b00a      	add	sp, #40	; 0x28
   11c4e:	4770      	bx	lr

00011c50 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>:
   11c50:	b580      	push	{r7, lr}
   11c52:	b08c      	sub	sp, #48	; 0x30
   11c54:	9005      	str	r0, [sp, #20]
   11c56:	9106      	str	r1, [sp, #24]
   11c58:	9207      	str	r2, [sp, #28]
   11c5a:	4603      	mov	r3, r0
   11c5c:	9008      	str	r0, [sp, #32]
   11c5e:	4608      	mov	r0, r1
   11c60:	9109      	str	r1, [sp, #36]	; 0x24
   11c62:	2104      	movs	r1, #4
   11c64:	910b      	str	r1, [sp, #44]	; 0x2c
   11c66:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11c68:	9204      	str	r2, [sp, #16]
   11c6a:	9303      	str	r3, [sp, #12]
   11c6c:	9002      	str	r0, [sp, #8]
   11c6e:	9101      	str	r1, [sp, #4]
   11c70:	e7ff      	b.n	11c72 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x22>
   11c72:	9801      	ldr	r0, [sp, #4]
   11c74:	9904      	ldr	r1, [sp, #16]
   11c76:	fb00 f201 	mul.w	r2, r0, r1
   11c7a:	920a      	str	r2, [sp, #40]	; 0x28
   11c7c:	9803      	ldr	r0, [sp, #12]
   11c7e:	9902      	ldr	r1, [sp, #8]
   11c80:	f000 f82e 	bl	11ce0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>
   11c84:	e7ff      	b.n	11c86 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x36>
   11c86:	b00c      	add	sp, #48	; 0x30
   11c88:	bd80      	pop	{r7, pc}

00011c8a <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>:
   11c8a:	b580      	push	{r7, lr}
   11c8c:	b088      	sub	sp, #32
   11c8e:	9004      	str	r0, [sp, #16]
   11c90:	9105      	str	r1, [sp, #20]
   11c92:	2204      	movs	r2, #4
   11c94:	9207      	str	r2, [sp, #28]
   11c96:	9a07      	ldr	r2, [sp, #28]
   11c98:	9103      	str	r1, [sp, #12]
   11c9a:	9002      	str	r0, [sp, #8]
   11c9c:	9201      	str	r2, [sp, #4]
   11c9e:	e7ff      	b.n	11ca0 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x16>
   11ca0:	9801      	ldr	r0, [sp, #4]
   11ca2:	2820      	cmp	r0, #32
   11ca4:	d306      	bcc.n	11cb4 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x2a>
   11ca6:	e7ff      	b.n	11ca8 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x1e>
   11ca8:	2201      	movs	r2, #1
   11caa:	9802      	ldr	r0, [sp, #8]
   11cac:	9903      	ldr	r1, [sp, #12]
   11cae:	f7ff ffcf 	bl	11c50 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>
   11cb2:	e012      	b.n	11cda <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x50>
   11cb4:	9802      	ldr	r0, [sp, #8]
   11cb6:	f000 f8a1 	bl	11dfc <_ZN4core3ptr4read17h2038b0ecb0975c4fE>
   11cba:	4601      	mov	r1, r0
   11cbc:	9006      	str	r0, [sp, #24]
   11cbe:	9100      	str	r1, [sp, #0]
   11cc0:	e7ff      	b.n	11cc2 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x38>
   11cc2:	2201      	movs	r2, #1
   11cc4:	9803      	ldr	r0, [sp, #12]
   11cc6:	9902      	ldr	r1, [sp, #8]
   11cc8:	f7ff ff60 	bl	11b8c <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   11ccc:	e7ff      	b.n	11cce <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x44>
   11cce:	9803      	ldr	r0, [sp, #12]
   11cd0:	9900      	ldr	r1, [sp, #0]
   11cd2:	f000 f8ac 	bl	11e2e <_ZN4core3ptr5write17h4a80332de2cee3d3E>
   11cd6:	e7ff      	b.n	11cd8 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x4e>
   11cd8:	e000      	b.n	11cdc <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   11cda:	e7ff      	b.n	11cdc <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   11cdc:	b008      	add	sp, #32
   11cde:	bd80      	pop	{r7, pc}

00011ce0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>:
   11ce0:	b5d0      	push	{r4, r6, r7, lr}
   11ce2:	af02      	add	r7, sp, #8
   11ce4:	b0b4      	sub	sp, #208	; 0xd0
   11ce6:	466c      	mov	r4, sp
   11ce8:	f36f 0404 	bfc	r4, #0, #5
   11cec:	46a5      	mov	sp, r4
   11cee:	9024      	str	r0, [sp, #144]	; 0x90
   11cf0:	9125      	str	r1, [sp, #148]	; 0x94
   11cf2:	9226      	str	r2, [sp, #152]	; 0x98
   11cf4:	2320      	movs	r3, #32
   11cf6:	932f      	str	r3, [sp, #188]	; 0xbc
   11cf8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   11cfa:	9327      	str	r3, [sp, #156]	; 0x9c
   11cfc:	920e      	str	r2, [sp, #56]	; 0x38
   11cfe:	910d      	str	r1, [sp, #52]	; 0x34
   11d00:	900c      	str	r0, [sp, #48]	; 0x30
   11d02:	930b      	str	r3, [sp, #44]	; 0x2c
   11d04:	e7ff      	b.n	11d06 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x26>
   11d06:	2000      	movs	r0, #0
   11d08:	900f      	str	r0, [sp, #60]	; 0x3c
   11d0a:	e7ff      	b.n	11d0c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   11d0c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11d0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11d10:	4408      	add	r0, r1
   11d12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11d14:	4290      	cmp	r0, r2
   11d16:	d905      	bls.n	11d24 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x44>
   11d18:	e7ff      	b.n	11d1a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x3a>
   11d1a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11d1c:	990e      	ldr	r1, [sp, #56]	; 0x38
   11d1e:	4288      	cmp	r0, r1
   11d20:	d334      	bcc.n	11d8c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xac>
   11d22:	e067      	b.n	11df4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   11d24:	e7ff      	b.n	11d26 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x46>
   11d26:	a810      	add	r0, sp, #64	; 0x40
   11d28:	9030      	str	r0, [sp, #192]	; 0xc0
   11d2a:	9031      	str	r0, [sp, #196]	; 0xc4
   11d2c:	e7ff      	b.n	11d2e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x4e>
   11d2e:	a810      	add	r0, sp, #64	; 0x40
   11d30:	4601      	mov	r1, r0
   11d32:	9028      	str	r0, [sp, #160]	; 0xa0
   11d34:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11d36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11d38:	900a      	str	r0, [sp, #40]	; 0x28
   11d3a:	4610      	mov	r0, r2
   11d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11d3e:	9109      	str	r1, [sp, #36]	; 0x24
   11d40:	4619      	mov	r1, r3
   11d42:	f000 f87a 	bl	11e3a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11d46:	4601      	mov	r1, r0
   11d48:	9029      	str	r0, [sp, #164]	; 0xa4
   11d4a:	9108      	str	r1, [sp, #32]
   11d4c:	e7ff      	b.n	11d4e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x6e>
   11d4e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11d50:	980d      	ldr	r0, [sp, #52]	; 0x34
   11d52:	f000 f872 	bl	11e3a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11d56:	4601      	mov	r1, r0
   11d58:	902a      	str	r0, [sp, #168]	; 0xa8
   11d5a:	9107      	str	r1, [sp, #28]
   11d5c:	e7ff      	b.n	11d5e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x7e>
   11d5e:	9808      	ldr	r0, [sp, #32]
   11d60:	9909      	ldr	r1, [sp, #36]	; 0x24
   11d62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11d64:	f7ff ff05 	bl	11b72 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11d68:	e7ff      	b.n	11d6a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x8a>
   11d6a:	9807      	ldr	r0, [sp, #28]
   11d6c:	9908      	ldr	r1, [sp, #32]
   11d6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11d70:	f7ff feff 	bl	11b72 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11d74:	e7ff      	b.n	11d76 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x96>
   11d76:	9809      	ldr	r0, [sp, #36]	; 0x24
   11d78:	9907      	ldr	r1, [sp, #28]
   11d7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11d7c:	f7ff fef9 	bl	11b72 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11d80:	e7ff      	b.n	11d82 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xa2>
   11d82:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11d84:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11d86:	4408      	add	r0, r1
   11d88:	900f      	str	r0, [sp, #60]	; 0x3c
   11d8a:	e7bf      	b.n	11d0c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   11d8c:	e7ff      	b.n	11d8e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xae>
   11d8e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11d90:	990e      	ldr	r1, [sp, #56]	; 0x38
   11d92:	1a08      	subs	r0, r1, r0
   11d94:	4602      	mov	r2, r0
   11d96:	902b      	str	r0, [sp, #172]	; 0xac
   11d98:	a81c      	add	r0, sp, #112	; 0x70
   11d9a:	9032      	str	r0, [sp, #200]	; 0xc8
   11d9c:	9033      	str	r0, [sp, #204]	; 0xcc
   11d9e:	9206      	str	r2, [sp, #24]
   11da0:	9005      	str	r0, [sp, #20]
   11da2:	e7ff      	b.n	11da4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xc4>
   11da4:	9805      	ldr	r0, [sp, #20]
   11da6:	9905      	ldr	r1, [sp, #20]
   11da8:	912c      	str	r1, [sp, #176]	; 0xb0
   11daa:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11dac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11dae:	9004      	str	r0, [sp, #16]
   11db0:	4610      	mov	r0, r2
   11db2:	f000 f842 	bl	11e3a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11db6:	4601      	mov	r1, r0
   11db8:	902d      	str	r0, [sp, #180]	; 0xb4
   11dba:	9103      	str	r1, [sp, #12]
   11dbc:	e7ff      	b.n	11dbe <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xde>
   11dbe:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11dc0:	980d      	ldr	r0, [sp, #52]	; 0x34
   11dc2:	f000 f83a 	bl	11e3a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11dc6:	4601      	mov	r1, r0
   11dc8:	902e      	str	r0, [sp, #184]	; 0xb8
   11dca:	9102      	str	r1, [sp, #8]
   11dcc:	e7ff      	b.n	11dce <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xee>
   11dce:	9803      	ldr	r0, [sp, #12]
   11dd0:	9904      	ldr	r1, [sp, #16]
   11dd2:	9a06      	ldr	r2, [sp, #24]
   11dd4:	f7ff fecd 	bl	11b72 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11dd8:	e7ff      	b.n	11dda <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xfa>
   11dda:	9802      	ldr	r0, [sp, #8]
   11ddc:	9903      	ldr	r1, [sp, #12]
   11dde:	9a06      	ldr	r2, [sp, #24]
   11de0:	f7ff fec7 	bl	11b72 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11de4:	e7ff      	b.n	11de6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x106>
   11de6:	9804      	ldr	r0, [sp, #16]
   11de8:	9902      	ldr	r1, [sp, #8]
   11dea:	9a06      	ldr	r2, [sp, #24]
   11dec:	f7ff fec1 	bl	11b72 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11df0:	e7ff      	b.n	11df2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x112>
   11df2:	e7ff      	b.n	11df4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   11df4:	f1a7 0408 	sub.w	r4, r7, #8
   11df8:	46a5      	mov	sp, r4
   11dfa:	bdd0      	pop	{r4, r6, r7, pc}

00011dfc <_ZN4core3ptr4read17h2038b0ecb0975c4fE>:
   11dfc:	b580      	push	{r7, lr}
   11dfe:	b08a      	sub	sp, #40	; 0x28
   11e00:	9004      	str	r0, [sp, #16]
   11e02:	9905      	ldr	r1, [sp, #20]
   11e04:	9103      	str	r1, [sp, #12]
   11e06:	9002      	str	r0, [sp, #8]
   11e08:	e7ff      	b.n	11e0a <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0xe>
   11e0a:	a803      	add	r0, sp, #12
   11e0c:	9008      	str	r0, [sp, #32]
   11e0e:	9009      	str	r0, [sp, #36]	; 0x24
   11e10:	e7ff      	b.n	11e12 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x16>
   11e12:	a903      	add	r1, sp, #12
   11e14:	2201      	movs	r2, #1
   11e16:	9802      	ldr	r0, [sp, #8]
   11e18:	f7ff feb8 	bl	11b8c <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   11e1c:	e7ff      	b.n	11e1e <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x22>
   11e1e:	9803      	ldr	r0, [sp, #12]
   11e20:	9006      	str	r0, [sp, #24]
   11e22:	9007      	str	r0, [sp, #28]
   11e24:	9001      	str	r0, [sp, #4]
   11e26:	e7ff      	b.n	11e28 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x2c>
   11e28:	9801      	ldr	r0, [sp, #4]
   11e2a:	b00a      	add	sp, #40	; 0x28
   11e2c:	bd80      	pop	{r7, pc}

00011e2e <_ZN4core3ptr5write17h4a80332de2cee3d3E>:
   11e2e:	b082      	sub	sp, #8
   11e30:	9000      	str	r0, [sp, #0]
   11e32:	9101      	str	r1, [sp, #4]
   11e34:	6001      	str	r1, [r0, #0]
   11e36:	b002      	add	sp, #8
   11e38:	4770      	bx	lr

00011e3a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>:
   11e3a:	b580      	push	{r7, lr}
   11e3c:	b084      	sub	sp, #16
   11e3e:	9002      	str	r0, [sp, #8]
   11e40:	9103      	str	r1, [sp, #12]
   11e42:	f000 f805 	bl	11e50 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>
   11e46:	9001      	str	r0, [sp, #4]
   11e48:	e7ff      	b.n	11e4a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E+0x10>
   11e4a:	9801      	ldr	r0, [sp, #4]
   11e4c:	b004      	add	sp, #16
   11e4e:	bd80      	pop	{r7, pc}

00011e50 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>:
   11e50:	b084      	sub	sp, #16
   11e52:	9001      	str	r0, [sp, #4]
   11e54:	9102      	str	r1, [sp, #8]
   11e56:	4408      	add	r0, r1
   11e58:	9003      	str	r0, [sp, #12]
   11e5a:	9803      	ldr	r0, [sp, #12]
   11e5c:	9000      	str	r0, [sp, #0]
   11e5e:	e7ff      	b.n	11e60 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE+0x10>
   11e60:	9800      	ldr	r0, [sp, #0]
   11e62:	b004      	add	sp, #16
   11e64:	4770      	bx	lr

00011e66 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>:
   11e66:	b580      	push	{r7, lr}
   11e68:	b084      	sub	sp, #16
   11e6a:	9002      	str	r0, [sp, #8]
   11e6c:	9103      	str	r1, [sp, #12]
   11e6e:	f000 f805 	bl	11e7c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>
   11e72:	9001      	str	r0, [sp, #4]
   11e74:	e7ff      	b.n	11e76 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE+0x10>
   11e76:	9801      	ldr	r0, [sp, #4]
   11e78:	b004      	add	sp, #16
   11e7a:	bd80      	pop	{r7, pc}

00011e7c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>:
   11e7c:	b084      	sub	sp, #16
   11e7e:	9001      	str	r0, [sp, #4]
   11e80:	9102      	str	r1, [sp, #8]
   11e82:	4408      	add	r0, r1
   11e84:	9003      	str	r0, [sp, #12]
   11e86:	9803      	ldr	r0, [sp, #12]
   11e88:	9000      	str	r0, [sp, #0]
   11e8a:	e7ff      	b.n	11e8c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE+0x10>
   11e8c:	9800      	ldr	r0, [sp, #0]
   11e8e:	b004      	add	sp, #16
   11e90:	4770      	bx	lr

00011e92 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>:
   11e92:	b580      	push	{r7, lr}
   11e94:	b08a      	sub	sp, #40	; 0x28
   11e96:	9009      	str	r0, [sp, #36]	; 0x24
   11e98:	2100      	movs	r1, #0
   11e9a:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   11e9e:	1d01      	adds	r1, r0, #4
   11ea0:	9002      	str	r0, [sp, #8]
   11ea2:	f7ff fe81 	bl	11ba8 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>
   11ea6:	9001      	str	r0, [sp, #4]
   11ea8:	e7ff      	b.n	11eaa <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x18>
   11eaa:	9801      	ldr	r0, [sp, #4]
   11eac:	07c1      	lsls	r1, r0, #31
   11eae:	2900      	cmp	r1, #0
   11eb0:	d103      	bne.n	11eba <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x28>
   11eb2:	e7ff      	b.n	11eb4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x22>
   11eb4:	2000      	movs	r0, #0
   11eb6:	9003      	str	r0, [sp, #12]
   11eb8:	e021      	b.n	11efe <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   11eba:	2001      	movs	r0, #1
   11ebc:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11ec0:	9902      	ldr	r1, [sp, #8]
   11ec2:	9000      	str	r0, [sp, #0]
   11ec4:	4608      	mov	r0, r1
   11ec6:	9900      	ldr	r1, [sp, #0]
   11ec8:	f7ff fe39 	bl	11b3e <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>
   11ecc:	9106      	str	r1, [sp, #24]
   11ece:	9005      	str	r0, [sp, #20]
   11ed0:	e7ff      	b.n	11ed2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x40>
   11ed2:	9805      	ldr	r0, [sp, #20]
   11ed4:	2801      	cmp	r0, #1
   11ed6:	d003      	beq.n	11ee0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x4e>
   11ed8:	e7ff      	b.n	11eda <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x48>
   11eda:	2000      	movs	r0, #0
   11edc:	9003      	str	r0, [sp, #12]
   11ede:	e021      	b.n	11f24 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   11ee0:	2000      	movs	r0, #0
   11ee2:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11ee6:	9806      	ldr	r0, [sp, #24]
   11ee8:	9007      	str	r0, [sp, #28]
   11eea:	a807      	add	r0, sp, #28
   11eec:	9902      	ldr	r1, [sp, #8]
   11eee:	f7ff fe67 	bl	11bc0 <_ZN4core3mem4swap17hc4afbec7b5ffb125E>
   11ef2:	e7ff      	b.n	11ef4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x62>
   11ef4:	9807      	ldr	r0, [sp, #28]
   11ef6:	9004      	str	r0, [sp, #16]
   11ef8:	2001      	movs	r0, #1
   11efa:	9003      	str	r0, [sp, #12]
   11efc:	e012      	b.n	11f24 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   11efe:	9803      	ldr	r0, [sp, #12]
   11f00:	9904      	ldr	r1, [sp, #16]
   11f02:	b00a      	add	sp, #40	; 0x28
   11f04:	bd80      	pop	{r7, pc}
   11f06:	2000      	movs	r0, #0
   11f08:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11f0c:	e7f7      	b.n	11efe <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   11f0e:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   11f12:	07c0      	lsls	r0, r0, #31
   11f14:	2800      	cmp	r0, #0
   11f16:	d0f6      	beq.n	11f06 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11f18:	e7ff      	b.n	11f1a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x88>
   11f1a:	2000      	movs	r0, #0
   11f1c:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11f20:	e7f1      	b.n	11f06 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11f22:	e7f0      	b.n	11f06 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11f24:	9805      	ldr	r0, [sp, #20]
   11f26:	2801      	cmp	r0, #1
   11f28:	d0f1      	beq.n	11f0e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x7c>
   11f2a:	e7fa      	b.n	11f22 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x90>

00011f2c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>:
   11f2c:	b082      	sub	sp, #8
   11f2e:	9000      	str	r0, [sp, #0]
   11f30:	9101      	str	r1, [sp, #4]
   11f32:	b002      	add	sp, #8
   11f34:	4770      	bx	lr

00011f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>:
   11f36:	b580      	push	{r7, lr}
   11f38:	b086      	sub	sp, #24
   11f3a:	9003      	str	r0, [sp, #12]
   11f3c:	9104      	str	r1, [sp, #16]
   11f3e:	9205      	str	r2, [sp, #20]
   11f40:	9002      	str	r0, [sp, #8]
   11f42:	4610      	mov	r0, r2
   11f44:	9a02      	ldr	r2, [sp, #8]
   11f46:	9101      	str	r1, [sp, #4]
   11f48:	4611      	mov	r1, r2
   11f4a:	9a01      	ldr	r2, [sp, #4]
   11f4c:	f000 f846 	bl	11fdc <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>
   11f50:	9000      	str	r0, [sp, #0]
   11f52:	e7ff      	b.n	11f54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E+0x1e>
   11f54:	9800      	ldr	r0, [sp, #0]
   11f56:	b006      	add	sp, #24
   11f58:	bd80      	pop	{r7, pc}

00011f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>:
   11f5a:	b084      	sub	sp, #16
   11f5c:	9002      	str	r0, [sp, #8]
   11f5e:	9103      	str	r1, [sp, #12]
   11f60:	9000      	str	r0, [sp, #0]
   11f62:	9101      	str	r1, [sp, #4]
   11f64:	9801      	ldr	r0, [sp, #4]
   11f66:	b004      	add	sp, #16
   11f68:	4770      	bx	lr

00011f6a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>:
   11f6a:	b082      	sub	sp, #8
   11f6c:	9000      	str	r0, [sp, #0]
   11f6e:	9101      	str	r1, [sp, #4]
   11f70:	b002      	add	sp, #8
   11f72:	4770      	bx	lr

00011f74 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>:
   11f74:	b081      	sub	sp, #4
   11f76:	9000      	str	r0, [sp, #0]
   11f78:	b001      	add	sp, #4
   11f7a:	4770      	bx	lr

00011f7c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>:
   11f7c:	b580      	push	{r7, lr}
   11f7e:	b082      	sub	sp, #8
   11f80:	9001      	str	r0, [sp, #4]
   11f82:	f7ff fff7 	bl	11f74 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>
   11f86:	9000      	str	r0, [sp, #0]
   11f88:	e7ff      	b.n	11f8a <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE+0xe>
   11f8a:	9800      	ldr	r0, [sp, #0]
   11f8c:	b002      	add	sp, #8
   11f8e:	bd80      	pop	{r7, pc}

00011f90 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>:
   11f90:	b580      	push	{r7, lr}
   11f92:	b084      	sub	sp, #16
   11f94:	9003      	str	r0, [sp, #12]
   11f96:	f7ff fff1 	bl	11f7c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>
   11f9a:	9001      	str	r0, [sp, #4]
   11f9c:	e7ff      	b.n	11f9e <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E+0xe>
   11f9e:	9801      	ldr	r0, [sp, #4]
   11fa0:	9002      	str	r0, [sp, #8]
   11fa2:	9802      	ldr	r0, [sp, #8]
   11fa4:	b004      	add	sp, #16
   11fa6:	bd80      	pop	{r7, pc}

00011fa8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>:
   11fa8:	b082      	sub	sp, #8
   11faa:	9000      	str	r0, [sp, #0]
   11fac:	9101      	str	r1, [sp, #4]
   11fae:	b002      	add	sp, #8
   11fb0:	4770      	bx	lr

00011fb2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>:
   11fb2:	b580      	push	{r7, lr}
   11fb4:	b086      	sub	sp, #24
   11fb6:	9003      	str	r0, [sp, #12]
   11fb8:	9104      	str	r1, [sp, #16]
   11fba:	9205      	str	r2, [sp, #20]
   11fbc:	9002      	str	r0, [sp, #8]
   11fbe:	4608      	mov	r0, r1
   11fc0:	4611      	mov	r1, r2
   11fc2:	f7ff ffd2 	bl	11f6a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   11fc6:	9001      	str	r0, [sp, #4]
   11fc8:	e7ff      	b.n	11fca <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x18>
   11fca:	9801      	ldr	r0, [sp, #4]
   11fcc:	9902      	ldr	r1, [sp, #8]
   11fce:	f7ff ff4a 	bl	11e66 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>
   11fd2:	9000      	str	r0, [sp, #0]
   11fd4:	e7ff      	b.n	11fd6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x24>
   11fd6:	9800      	ldr	r0, [sp, #0]
   11fd8:	b006      	add	sp, #24
   11fda:	bd80      	pop	{r7, pc}

00011fdc <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>:
   11fdc:	b580      	push	{r7, lr}
   11fde:	b086      	sub	sp, #24
   11fe0:	9003      	str	r0, [sp, #12]
   11fe2:	9104      	str	r1, [sp, #16]
   11fe4:	9205      	str	r2, [sp, #20]
   11fe6:	9002      	str	r0, [sp, #8]
   11fe8:	4608      	mov	r0, r1
   11fea:	4611      	mov	r1, r2
   11fec:	f7ff ff9e 	bl	11f2c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   11ff0:	9001      	str	r0, [sp, #4]
   11ff2:	e7ff      	b.n	11ff4 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x18>
   11ff4:	9801      	ldr	r0, [sp, #4]
   11ff6:	9902      	ldr	r1, [sp, #8]
   11ff8:	f7ff ff1f 	bl	11e3a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11ffc:	9000      	str	r0, [sp, #0]
   11ffe:	e7ff      	b.n	12000 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x24>
   12000:	9800      	ldr	r0, [sp, #0]
   12002:	b006      	add	sp, #24
   12004:	bd80      	pop	{r7, pc}

00012006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>:
   12006:	b081      	sub	sp, #4
   12008:	b001      	add	sp, #4
   1200a:	4770      	bx	lr

0001200c <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>:
   1200c:	b580      	push	{r7, lr}
   1200e:	b086      	sub	sp, #24
   12010:	f8dd c020 	ldr.w	ip, [sp, #32]
   12014:	9102      	str	r1, [sp, #8]
   12016:	9203      	str	r2, [sp, #12]
   12018:	9304      	str	r3, [sp, #16]
   1201a:	f8cd c014 	str.w	ip, [sp, #20]
   1201e:	f04f 0e00 	mov.w	lr, #0
   12022:	f8cd e004 	str.w	lr, [sp, #4]
   12026:	f8cd e000 	str.w	lr, [sp]
   1202a:	f8cd e000 	str.w	lr, [sp]
   1202e:	6001      	str	r1, [r0, #0]
   12030:	6042      	str	r2, [r0, #4]
   12032:	9900      	ldr	r1, [sp, #0]
   12034:	9a01      	ldr	r2, [sp, #4]
   12036:	6081      	str	r1, [r0, #8]
   12038:	60c2      	str	r2, [r0, #12]
   1203a:	6103      	str	r3, [r0, #16]
   1203c:	f8c0 c014 	str.w	ip, [r0, #20]
   12040:	b006      	add	sp, #24
   12042:	bd80      	pop	{r7, pc}

00012044 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>:
   12044:	b580      	push	{r7, lr}
   12046:	b084      	sub	sp, #16
   12048:	9101      	str	r1, [sp, #4]
   1204a:	9202      	str	r2, [sp, #8]
   1204c:	9901      	ldr	r1, [sp, #4]
   1204e:	9a02      	ldr	r2, [sp, #8]
   12050:	f000 fa95 	bl	1257e <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>
   12054:	e7ff      	b.n	12056 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE+0x12>
   12056:	b004      	add	sp, #16
   12058:	bd80      	pop	{r7, pc}

0001205a <_ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE>:
   1205a:	b081      	sub	sp, #4
   1205c:	9000      	str	r0, [sp, #0]
   1205e:	b001      	add	sp, #4
   12060:	4770      	bx	lr

00012062 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>:
   12062:	b081      	sub	sp, #4
   12064:	9000      	str	r0, [sp, #0]
   12066:	b001      	add	sp, #4
   12068:	4770      	bx	lr

0001206a <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>:
   1206a:	b580      	push	{r7, lr}
   1206c:	b086      	sub	sp, #24
   1206e:	460a      	mov	r2, r1
   12070:	9004      	str	r0, [sp, #16]
   12072:	f88d 1017 	strb.w	r1, [sp, #23]
   12076:	9203      	str	r2, [sp, #12]
   12078:	f7ff fff3 	bl	12062 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   1207c:	9002      	str	r0, [sp, #8]
   1207e:	e7ff      	b.n	12080 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x16>
   12080:	9802      	ldr	r0, [sp, #8]
   12082:	9903      	ldr	r1, [sp, #12]
   12084:	f000 f806 	bl	12094 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   12088:	9001      	str	r0, [sp, #4]
   1208a:	e7ff      	b.n	1208c <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x22>
   1208c:	9801      	ldr	r0, [sp, #4]
   1208e:	b006      	add	sp, #24
   12090:	bd80      	pop	{r7, pc}
	...

00012094 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>:
   12094:	b086      	sub	sp, #24
   12096:	460a      	mov	r2, r1
   12098:	f88d 100f 	strb.w	r1, [sp, #15]
   1209c:	9005      	str	r0, [sp, #20]
   1209e:	f89d 100f 	ldrb.w	r1, [sp, #15]
   120a2:	9002      	str	r0, [sp, #8]
   120a4:	9101      	str	r1, [sp, #4]
   120a6:	9901      	ldr	r1, [sp, #4]
   120a8:	e8df f001 	tbb	[pc, r1]
   120ac:	03102317 	.word	0x03102317
   120b0:	001c      	.short	0x001c
   120b2:	f240 407c 	movw	r0, #1148	; 0x47c
   120b6:	f2c0 0002 	movt	r0, #2
   120ba:	f240 42f8 	movw	r2, #1272	; 0x4f8
   120be:	f2c0 0202 	movt	r2, #2
   120c2:	2131      	movs	r1, #49	; 0x31
   120c4:	f005 fc88 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   120c8:	defe      	udf	#254	; 0xfe
   120ca:	defe      	udf	#254	; 0xfe
   120cc:	9802      	ldr	r0, [sp, #8]
   120ce:	6801      	ldr	r1, [r0, #0]
   120d0:	f3bf 8f5f 	dmb	sy
   120d4:	9104      	str	r1, [sp, #16]
   120d6:	e7ff      	b.n	120d8 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x44>
   120d8:	e017      	b.n	1210a <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   120da:	9802      	ldr	r0, [sp, #8]
   120dc:	6801      	ldr	r1, [r0, #0]
   120de:	9104      	str	r1, [sp, #16]
   120e0:	e7ff      	b.n	120e2 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x4e>
   120e2:	e012      	b.n	1210a <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   120e4:	9802      	ldr	r0, [sp, #8]
   120e6:	6801      	ldr	r1, [r0, #0]
   120e8:	f3bf 8f5f 	dmb	sy
   120ec:	9104      	str	r1, [sp, #16]
   120ee:	e7ff      	b.n	120f0 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x5c>
   120f0:	e00b      	b.n	1210a <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   120f2:	f240 5008 	movw	r0, #1288	; 0x508
   120f6:	f2c0 0002 	movt	r0, #2
   120fa:	f240 42f8 	movw	r2, #1272	; 0x4f8
   120fe:	f2c0 0202 	movt	r2, #2
   12102:	2128      	movs	r1, #40	; 0x28
   12104:	f005 fc68 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12108:	defe      	udf	#254	; 0xfe
   1210a:	9804      	ldr	r0, [sp, #16]
   1210c:	b006      	add	sp, #24
   1210e:	4770      	bx	lr

00012110 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>:
   12110:	b081      	sub	sp, #4
   12112:	9000      	str	r0, [sp, #0]
   12114:	6800      	ldr	r0, [r0, #0]
   12116:	b001      	add	sp, #4
   12118:	4770      	bx	lr

0001211a <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>:
   1211a:	b082      	sub	sp, #8
   1211c:	9001      	str	r0, [sp, #4]
   1211e:	6801      	ldr	r1, [r0, #0]
   12120:	6840      	ldr	r0, [r0, #4]
   12122:	9000      	str	r0, [sp, #0]
   12124:	4608      	mov	r0, r1
   12126:	9900      	ldr	r1, [sp, #0]
   12128:	b002      	add	sp, #8
   1212a:	4770      	bx	lr

0001212c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>:
   1212c:	b580      	push	{r7, lr}
   1212e:	b08c      	sub	sp, #48	; 0x30
   12130:	9101      	str	r1, [sp, #4]
   12132:	9202      	str	r2, [sp, #8]
   12134:	2100      	movs	r1, #0
   12136:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   1213a:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   1213e:	2101      	movs	r1, #1
   12140:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   12144:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   12148:	9901      	ldr	r1, [sp, #4]
   1214a:	2900      	cmp	r1, #0
   1214c:	460a      	mov	r2, r1
   1214e:	bf18      	it	ne
   12150:	2201      	movne	r2, #1
   12152:	2900      	cmp	r1, #0
   12154:	9000      	str	r0, [sp, #0]
   12156:	d001      	beq.n	1215c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x30>
   12158:	e7ff      	b.n	1215a <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x2e>
   1215a:	e008      	b.n	1216e <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x42>
   1215c:	2000      	movs	r0, #0
   1215e:	9900      	ldr	r1, [sp, #0]
   12160:	6088      	str	r0, [r1, #8]
   12162:	6048      	str	r0, [r1, #4]
   12164:	6008      	str	r0, [r1, #0]
   12166:	2002      	movs	r0, #2
   12168:	6008      	str	r0, [r1, #0]
   1216a:	e021      	b.n	121b0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   1216c:	defe      	udf	#254	; 0xfe
   1216e:	2000      	movs	r0, #0
   12170:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   12174:	9901      	ldr	r1, [sp, #4]
   12176:	9a02      	ldr	r2, [sp, #8]
   12178:	910a      	str	r1, [sp, #40]	; 0x28
   1217a:	920b      	str	r2, [sp, #44]	; 0x2c
   1217c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   12180:	9106      	str	r1, [sp, #24]
   12182:	9207      	str	r2, [sp, #28]
   12184:	9906      	ldr	r1, [sp, #24]
   12186:	9a07      	ldr	r2, [sp, #28]
   12188:	a803      	add	r0, sp, #12
   1218a:	f7ff ff5b 	bl	12044 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>
   1218e:	e7ff      	b.n	12190 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x64>
   12190:	9803      	ldr	r0, [sp, #12]
   12192:	9904      	ldr	r1, [sp, #16]
   12194:	9a05      	ldr	r2, [sp, #20]
   12196:	9b00      	ldr	r3, [sp, #0]
   12198:	609a      	str	r2, [r3, #8]
   1219a:	6059      	str	r1, [r3, #4]
   1219c:	6018      	str	r0, [r3, #0]
   1219e:	e007      	b.n	121b0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   121a0:	9801      	ldr	r0, [sp, #4]
   121a2:	2800      	cmp	r0, #0
   121a4:	d10c      	bne.n	121c0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x94>
   121a6:	e015      	b.n	121d4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa8>
   121a8:	2000      	movs	r0, #0
   121aa:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   121ae:	e7f7      	b.n	121a0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   121b0:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   121b4:	07c0      	lsls	r0, r0, #31
   121b6:	2800      	cmp	r0, #0
   121b8:	d1f6      	bne.n	121a8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x7c>
   121ba:	e7f1      	b.n	121a0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   121bc:	b00c      	add	sp, #48	; 0x30
   121be:	bd80      	pop	{r7, pc}
   121c0:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   121c4:	07c0      	lsls	r0, r0, #31
   121c6:	2800      	cmp	r0, #0
   121c8:	d0f8      	beq.n	121bc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   121ca:	e7ff      	b.n	121cc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa0>
   121cc:	2000      	movs	r0, #0
   121ce:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   121d2:	e7f3      	b.n	121bc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   121d4:	e7f2      	b.n	121bc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>

000121d6 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>:
   121d6:	b081      	sub	sp, #4
   121d8:	b001      	add	sp, #4
   121da:	4770      	bx	lr

000121dc <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>:
   121dc:	b5b0      	push	{r4, r5, r7, lr}
   121de:	b081      	sub	sp, #4
   121e0:	9100      	str	r1, [sp, #0]
   121e2:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   121e6:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   121ea:	b001      	add	sp, #4
   121ec:	bdb0      	pop	{r4, r5, r7, pc}

000121ee <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>:
   121ee:	b580      	push	{r7, lr}
   121f0:	b088      	sub	sp, #32
   121f2:	9106      	str	r1, [sp, #24]
   121f4:	680a      	ldr	r2, [r1, #0]
   121f6:	1e93      	subs	r3, r2, #2
   121f8:	bf18      	it	ne
   121fa:	2301      	movne	r3, #1
   121fc:	2a02      	cmp	r2, #2
   121fe:	9102      	str	r1, [sp, #8]
   12200:	9001      	str	r0, [sp, #4]
   12202:	d001      	beq.n	12208 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x1a>
   12204:	e7ff      	b.n	12206 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x18>
   12206:	e008      	b.n	1221a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x2c>
   12208:	2000      	movs	r0, #0
   1220a:	9901      	ldr	r1, [sp, #4]
   1220c:	6088      	str	r0, [r1, #8]
   1220e:	6048      	str	r0, [r1, #4]
   12210:	6008      	str	r0, [r1, #0]
   12212:	2002      	movs	r0, #2
   12214:	6008      	str	r0, [r1, #0]
   12216:	e00f      	b.n	12238 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   12218:	defe      	udf	#254	; 0xfe
   1221a:	9802      	ldr	r0, [sp, #8]
   1221c:	9007      	str	r0, [sp, #28]
   1221e:	a803      	add	r0, sp, #12
   12220:	9902      	ldr	r1, [sp, #8]
   12222:	f000 f9b5 	bl	12590 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>
   12226:	e7ff      	b.n	12228 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x3a>
   12228:	9803      	ldr	r0, [sp, #12]
   1222a:	9904      	ldr	r1, [sp, #16]
   1222c:	9a05      	ldr	r2, [sp, #20]
   1222e:	9b01      	ldr	r3, [sp, #4]
   12230:	609a      	str	r2, [r3, #8]
   12232:	6059      	str	r1, [r3, #4]
   12234:	6018      	str	r0, [r3, #0]
   12236:	e7ff      	b.n	12238 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   12238:	b008      	add	sp, #32
   1223a:	bd80      	pop	{r7, pc}

0001223c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>:
   1223c:	b580      	push	{r7, lr}
   1223e:	b086      	sub	sp, #24
   12240:	9004      	str	r0, [sp, #16]
   12242:	6801      	ldr	r1, [r0, #0]
   12244:	2900      	cmp	r1, #0
   12246:	9001      	str	r0, [sp, #4]
   12248:	d001      	beq.n	1224e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x12>
   1224a:	e7ff      	b.n	1224c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x10>
   1224c:	e003      	b.n	12256 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x1a>
   1224e:	2000      	movs	r0, #0
   12250:	9002      	str	r0, [sp, #8]
   12252:	e00d      	b.n	12270 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   12254:	defe      	udf	#254	; 0xfe
   12256:	9801      	ldr	r0, [sp, #4]
   12258:	1d01      	adds	r1, r0, #4
   1225a:	9105      	str	r1, [sp, #20]
   1225c:	4608      	mov	r0, r1
   1225e:	f7ff ff57 	bl	12110 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>
   12262:	9000      	str	r0, [sp, #0]
   12264:	e7ff      	b.n	12266 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x2a>
   12266:	9800      	ldr	r0, [sp, #0]
   12268:	9003      	str	r0, [sp, #12]
   1226a:	2101      	movs	r1, #1
   1226c:	9102      	str	r1, [sp, #8]
   1226e:	e7ff      	b.n	12270 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   12270:	9802      	ldr	r0, [sp, #8]
   12272:	9903      	ldr	r1, [sp, #12]
   12274:	b006      	add	sp, #24
   12276:	bd80      	pop	{r7, pc}

00012278 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>:
    fn clone(&self) -> Level {
   12278:	b081      	sub	sp, #4
   1227a:	9000      	str	r0, [sp, #0]
        *self
   1227c:	6800      	ldr	r0, [r0, #0]
    }
   1227e:	b001      	add	sp, #4
   12280:	4770      	bx	lr

00012282 <_ZN3log6Record7builder17hde62ab0132265febE>:
    pub fn builder() -> RecordBuilder<'a> {
   12282:	b580      	push	{r7, lr}
        RecordBuilder::new()
   12284:	f000 f802 	bl	1228c <_ZN3log13RecordBuilder3new17haca8312579858419E>
   12288:	e7ff      	b.n	1228a <_ZN3log6Record7builder17hde62ab0132265febE+0x8>
    }
   1228a:	bd80      	pop	{r7, pc}

0001228c <_ZN3log13RecordBuilder3new17haca8312579858419E>:
    pub fn new() -> RecordBuilder<'a> {
   1228c:	b570      	push	{r4, r5, r6, lr}
   1228e:	b0aa      	sub	sp, #168	; 0xa8
                args: format_args!(""),
   12290:	f240 5148 	movw	r1, #1352	; 0x548
   12294:	f2c0 0102 	movt	r1, #2
   12298:	6809      	ldr	r1, [r1, #0]
   1229a:	466a      	mov	r2, sp
   1229c:	2300      	movs	r3, #0
   1229e:	6013      	str	r3, [r2, #0]
   122a0:	aa16      	add	r2, sp, #88	; 0x58
   122a2:	9004      	str	r0, [sp, #16]
   122a4:	4610      	mov	r0, r2
   122a6:	9103      	str	r1, [sp, #12]
   122a8:	461a      	mov	r2, r3
   122aa:	9b03      	ldr	r3, [sp, #12]
   122ac:	f7ff feae 	bl	1200c <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>
   122b0:	e7ff      	b.n	122b2 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x26>
   122b2:	a81f      	add	r0, sp, #124	; 0x7c
                metadata: Metadata::builder().build(),
   122b4:	f000 f891 	bl	123da <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>
   122b8:	e7ff      	b.n	122ba <_ZN3log13RecordBuilder3new17haca8312579858419E+0x2e>
   122ba:	a81c      	add	r0, sp, #112	; 0x70
   122bc:	a91f      	add	r1, sp, #124	; 0x7c
   122be:	f000 f8a5 	bl	1240c <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>
   122c2:	e7ff      	b.n	122c4 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x38>
   122c4:	2000      	movs	r0, #0
                module_path: None,
   122c6:	9024      	str	r0, [sp, #144]	; 0x90
   122c8:	9023      	str	r0, [sp, #140]	; 0x8c
   122ca:	9022      	str	r0, [sp, #136]	; 0x88
   122cc:	2102      	movs	r1, #2
   122ce:	9122      	str	r1, [sp, #136]	; 0x88
                file: None,
   122d0:	9027      	str	r0, [sp, #156]	; 0x9c
   122d2:	9026      	str	r0, [sp, #152]	; 0x98
   122d4:	9025      	str	r0, [sp, #148]	; 0x94
   122d6:	9125      	str	r1, [sp, #148]	; 0x94
                line: None,
   122d8:	9028      	str	r0, [sp, #160]	; 0xa0
            record: Record {
   122da:	981c      	ldr	r0, [sp, #112]	; 0x70
   122dc:	991d      	ldr	r1, [sp, #116]	; 0x74
   122de:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   122e0:	9207      	str	r2, [sp, #28]
   122e2:	9106      	str	r1, [sp, #24]
   122e4:	9005      	str	r0, [sp, #20]
   122e6:	a805      	add	r0, sp, #20
   122e8:	f100 010c 	add.w	r1, r0, #12
   122ec:	aa16      	add	r2, sp, #88	; 0x58
   122ee:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   122f2:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   122f6:	9922      	ldr	r1, [sp, #136]	; 0x88
   122f8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   122fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
   122fc:	9310      	str	r3, [sp, #64]	; 0x40
   122fe:	920f      	str	r2, [sp, #60]	; 0x3c
   12300:	910e      	str	r1, [sp, #56]	; 0x38
   12302:	9925      	ldr	r1, [sp, #148]	; 0x94
   12304:	9a26      	ldr	r2, [sp, #152]	; 0x98
   12306:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   12308:	9313      	str	r3, [sp, #76]	; 0x4c
   1230a:	9212      	str	r2, [sp, #72]	; 0x48
   1230c:	9111      	str	r1, [sp, #68]	; 0x44
   1230e:	9928      	ldr	r1, [sp, #160]	; 0xa0
   12310:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   12312:	9114      	str	r1, [sp, #80]	; 0x50
   12314:	9215      	str	r2, [sp, #84]	; 0x54
   12316:	2244      	movs	r2, #68	; 0x44
        return RecordBuilder {
   12318:	9904      	ldr	r1, [sp, #16]
   1231a:	9002      	str	r0, [sp, #8]
   1231c:	4608      	mov	r0, r1
   1231e:	9902      	ldr	r1, [sp, #8]
   12320:	f00b ff2e 	bl	1e180 <__aeabi_memcpy>
    }
   12324:	b02a      	add	sp, #168	; 0xa8
   12326:	bd70      	pop	{r4, r5, r6, pc}

00012328 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
   12328:	b5f0      	push	{r4, r5, r6, r7, lr}
   1232a:	b087      	sub	sp, #28
   1232c:	9006      	str	r0, [sp, #24]
   1232e:	466a      	mov	r2, sp
        self.record.args = args;
   12330:	4613      	mov	r3, r2
   12332:	e891 50f0 	ldmia.w	r1, {r4, r5, r6, r7, ip, lr}
   12336:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
   1233a:	f100 010c 	add.w	r1, r0, #12
   1233e:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   12342:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    }
   12346:	b007      	add	sp, #28
   12348:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001234a <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
   1234a:	b082      	sub	sp, #8
   1234c:	9000      	str	r0, [sp, #0]
   1234e:	9101      	str	r1, [sp, #4]
        self.record.metadata.level = level;
   12350:	6001      	str	r1, [r0, #0]
    }
   12352:	b002      	add	sp, #8
   12354:	4770      	bx	lr

00012356 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
   12356:	b083      	sub	sp, #12
   12358:	9000      	str	r0, [sp, #0]
   1235a:	9101      	str	r1, [sp, #4]
   1235c:	9202      	str	r2, [sp, #8]
        self.record.metadata.target = target;
   1235e:	6041      	str	r1, [r0, #4]
   12360:	6082      	str	r2, [r0, #8]
    }
   12362:	b003      	add	sp, #12
   12364:	4770      	bx	lr

00012366 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
   12366:	b580      	push	{r7, lr}
   12368:	b088      	sub	sp, #32
   1236a:	9005      	str	r0, [sp, #20]
   1236c:	9106      	str	r1, [sp, #24]
   1236e:	9207      	str	r2, [sp, #28]
   12370:	ab02      	add	r3, sp, #8
        self.record.module_path = path.map(MaybeStaticStr::Static);
   12372:	9001      	str	r0, [sp, #4]
   12374:	4618      	mov	r0, r3
   12376:	f7ff fed9 	bl	1212c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   1237a:	e7ff      	b.n	1237c <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE+0x16>
   1237c:	9802      	ldr	r0, [sp, #8]
   1237e:	9903      	ldr	r1, [sp, #12]
   12380:	9a04      	ldr	r2, [sp, #16]
   12382:	9b01      	ldr	r3, [sp, #4]
   12384:	62da      	str	r2, [r3, #44]	; 0x2c
   12386:	6299      	str	r1, [r3, #40]	; 0x28
   12388:	6258      	str	r0, [r3, #36]	; 0x24
    }
   1238a:	4618      	mov	r0, r3
   1238c:	b008      	add	sp, #32
   1238e:	bd80      	pop	{r7, pc}

00012390 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
   12390:	b580      	push	{r7, lr}
   12392:	b088      	sub	sp, #32
   12394:	9005      	str	r0, [sp, #20]
   12396:	9106      	str	r1, [sp, #24]
   12398:	9207      	str	r2, [sp, #28]
   1239a:	ab02      	add	r3, sp, #8
        self.record.file = file.map(MaybeStaticStr::Static);
   1239c:	9001      	str	r0, [sp, #4]
   1239e:	4618      	mov	r0, r3
   123a0:	f7ff fec4 	bl	1212c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   123a4:	e7ff      	b.n	123a6 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E+0x16>
   123a6:	9802      	ldr	r0, [sp, #8]
   123a8:	9903      	ldr	r1, [sp, #12]
   123aa:	9a04      	ldr	r2, [sp, #16]
   123ac:	9b01      	ldr	r3, [sp, #4]
   123ae:	639a      	str	r2, [r3, #56]	; 0x38
   123b0:	6359      	str	r1, [r3, #52]	; 0x34
   123b2:	6318      	str	r0, [r3, #48]	; 0x30
    }
   123b4:	4618      	mov	r0, r3
   123b6:	b008      	add	sp, #32
   123b8:	bd80      	pop	{r7, pc}

000123ba <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
   123ba:	b083      	sub	sp, #12
   123bc:	9000      	str	r0, [sp, #0]
   123be:	9101      	str	r1, [sp, #4]
   123c0:	9202      	str	r2, [sp, #8]
        self.record.line = line;
   123c2:	63c1      	str	r1, [r0, #60]	; 0x3c
   123c4:	6402      	str	r2, [r0, #64]	; 0x40
    }
   123c6:	b003      	add	sp, #12
   123c8:	4770      	bx	lr

000123ca <_ZN3log13RecordBuilder5build17h83529556a009112eE>:
    pub fn build(&self) -> Record<'a> {
   123ca:	b580      	push	{r7, lr}
   123cc:	b082      	sub	sp, #8
   123ce:	9101      	str	r1, [sp, #4]
        self.record.clone()
   123d0:	f000 f8e8 	bl	125a4 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>
   123d4:	e7ff      	b.n	123d6 <_ZN3log13RecordBuilder5build17h83529556a009112eE+0xc>
    }
   123d6:	b002      	add	sp, #8
   123d8:	bd80      	pop	{r7, pc}

000123da <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>:
    pub fn builder() -> MetadataBuilder<'a> {
   123da:	b580      	push	{r7, lr}
        MetadataBuilder::new()
   123dc:	f000 f802 	bl	123e4 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>
   123e0:	e7ff      	b.n	123e2 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE+0x8>
    }
   123e2:	bd80      	pop	{r7, pc}

000123e4 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>:
    pub fn new() -> MetadataBuilder<'a> {
   123e4:	b084      	sub	sp, #16
   123e6:	2103      	movs	r1, #3
                level: Level::Info,
   123e8:	9103      	str	r1, [sp, #12]
            metadata: Metadata {
   123ea:	9903      	ldr	r1, [sp, #12]
   123ec:	9100      	str	r1, [sp, #0]
   123ee:	f240 5130 	movw	r1, #1328	; 0x530
   123f2:	f2c0 0102 	movt	r1, #2
   123f6:	9101      	str	r1, [sp, #4]
   123f8:	2100      	movs	r1, #0
   123fa:	9102      	str	r1, [sp, #8]
        MetadataBuilder {
   123fc:	9900      	ldr	r1, [sp, #0]
   123fe:	9a01      	ldr	r2, [sp, #4]
   12400:	9b02      	ldr	r3, [sp, #8]
   12402:	6083      	str	r3, [r0, #8]
   12404:	6042      	str	r2, [r0, #4]
   12406:	6001      	str	r1, [r0, #0]
    }
   12408:	b004      	add	sp, #16
   1240a:	4770      	bx	lr

0001240c <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>:
    pub fn build(&self) -> Metadata<'a> {
   1240c:	b580      	push	{r7, lr}
   1240e:	b082      	sub	sp, #8
   12410:	9101      	str	r1, [sp, #4]
        self.metadata.clone()
   12412:	f000 f91c 	bl	1264e <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   12416:	e7ff      	b.n	12418 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E+0xc>
    }
   12418:	b002      	add	sp, #8
   1241a:	bd80      	pop	{r7, pc}

0001241c <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE>:
    fn enabled(&self, _: &Metadata) -> bool {
   1241c:	b082      	sub	sp, #8
   1241e:	9000      	str	r0, [sp, #0]
   12420:	9101      	str	r1, [sp, #4]
   12422:	2000      	movs	r0, #0
    }
   12424:	b002      	add	sp, #8
   12426:	4770      	bx	lr

00012428 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE>:
    fn log(&self, _: &Record) {}
   12428:	b082      	sub	sp, #8
   1242a:	9000      	str	r0, [sp, #0]
   1242c:	9101      	str	r1, [sp, #4]
   1242e:	b002      	add	sp, #8
   12430:	4770      	bx	lr

00012432 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE>:
    fn flush(&self) {}
   12432:	b081      	sub	sp, #4
   12434:	9000      	str	r0, [sp, #0]
   12436:	b001      	add	sp, #4
   12438:	4770      	bx	lr

0001243a <_ZN3log6logger17hf609e7cc1c031552E>:
}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static Log {
   1243a:	b580      	push	{r7, lr}
   1243c:	b084      	sub	sp, #16
   1243e:	2004      	movs	r0, #4
    unsafe {
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   12440:	f88d 000f 	strb.w	r0, [sp, #15]
   12444:	f89d 100f 	ldrb.w	r1, [sp, #15]
   12448:	f644 2068 	movw	r0, #19048	; 0x4a68
   1244c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12450:	f7ff fe0b 	bl	1206a <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>
   12454:	9000      	str	r0, [sp, #0]
   12456:	e7ff      	b.n	12458 <_ZN3log6logger17hf609e7cc1c031552E+0x1e>
   12458:	9800      	ldr	r0, [sp, #0]
   1245a:	2802      	cmp	r0, #2
   1245c:	d109      	bne.n	12472 <_ZN3log6logger17hf609e7cc1c031552E+0x38>
   1245e:	e7ff      	b.n	12460 <_ZN3log6logger17hf609e7cc1c031552E+0x26>
            static NOP: NopLogger = NopLogger;
            &NOP
        } else {
            LOGGER
   12460:	f240 00f0 	movw	r0, #240	; 0xf0
   12464:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12468:	6801      	ldr	r1, [r0, #0]
   1246a:	6840      	ldr	r0, [r0, #4]
   1246c:	9101      	str	r1, [sp, #4]
   1246e:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   12470:	e00a      	b.n	12488 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
            &NOP
   12472:	f240 5064 	movw	r0, #1380	; 0x564
   12476:	f2c0 0002 	movt	r0, #2
   1247a:	9001      	str	r0, [sp, #4]
   1247c:	f240 504c 	movw	r0, #1356	; 0x54c
   12480:	f2c0 0002 	movt	r0, #2
   12484:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   12486:	e7ff      	b.n	12488 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
   12488:	9801      	ldr	r0, [sp, #4]
   1248a:	9902      	ldr	r1, [sp, #8]
        }
    }
}
   1248c:	b004      	add	sp, #16
   1248e:	bd80      	pop	{r7, pc}

00012490 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
   12490:	b570      	push	{r4, r5, r6, lr}
   12492:	b0ca      	sub	sp, #296	; 0x128
   12494:	9141      	str	r1, [sp, #260]	; 0x104
   12496:	9242      	str	r2, [sp, #264]	; 0x108
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
   12498:	6813      	ldr	r3, [r2, #0]
   1249a:	f8d2 c004 	ldr.w	ip, [r2, #4]
   1249e:	9343      	str	r3, [sp, #268]	; 0x10c
   124a0:	f8cd c110 	str.w	ip, [sp, #272]	; 0x110
   124a4:	f8d2 e008 	ldr.w	lr, [r2, #8]
   124a8:	68d4      	ldr	r4, [r2, #12]
   124aa:	f8cd e114 	str.w	lr, [sp, #276]	; 0x114
   124ae:	9446      	str	r4, [sp, #280]	; 0x118
   124b0:	6915      	ldr	r5, [r2, #16]
   124b2:	6956      	ldr	r6, [r2, #20]
   124b4:	9547      	str	r5, [sp, #284]	; 0x11c
   124b6:	9648      	str	r6, [sp, #288]	; 0x120
   124b8:	6992      	ldr	r2, [r2, #24]
   124ba:	9249      	str	r2, [sp, #292]	; 0x124
) {
    logger().log(
   124bc:	9112      	str	r1, [sp, #72]	; 0x48
   124be:	9011      	str	r0, [sp, #68]	; 0x44
   124c0:	9310      	str	r3, [sp, #64]	; 0x40
   124c2:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   124c6:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   124ca:	940d      	str	r4, [sp, #52]	; 0x34
   124cc:	950c      	str	r5, [sp, #48]	; 0x30
   124ce:	960b      	str	r6, [sp, #44]	; 0x2c
   124d0:	920a      	str	r2, [sp, #40]	; 0x28
   124d2:	f7ff ffb2 	bl	1243a <_ZN3log6logger17hf609e7cc1c031552E>
   124d6:	9009      	str	r0, [sp, #36]	; 0x24
   124d8:	9108      	str	r1, [sp, #32]
   124da:	e7ff      	b.n	124dc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x4c>
   124dc:	a824      	add	r0, sp, #144	; 0x90
        &Record::builder()
   124de:	f7ff fed0 	bl	12282 <_ZN3log6Record7builder17hde62ab0132265febE>
   124e2:	e7ff      	b.n	124e4 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x54>
   124e4:	a835      	add	r0, sp, #212	; 0xd4
            .args(args)
   124e6:	4601      	mov	r1, r0
   124e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   124ea:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   124ee:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   124f2:	a924      	add	r1, sp, #144	; 0x90
        &Record::builder()
   124f4:	9007      	str	r0, [sp, #28]
   124f6:	4608      	mov	r0, r1
   124f8:	9907      	ldr	r1, [sp, #28]
   124fa:	f7ff ff15 	bl	12328 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>
   124fe:	9006      	str	r0, [sp, #24]
   12500:	e7ff      	b.n	12502 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x72>
   12502:	9806      	ldr	r0, [sp, #24]
   12504:	9912      	ldr	r1, [sp, #72]	; 0x48
   12506:	f7ff ff20 	bl	1234a <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>
   1250a:	9005      	str	r0, [sp, #20]
   1250c:	e7ff      	b.n	1250e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x7e>
   1250e:	9805      	ldr	r0, [sp, #20]
   12510:	9910      	ldr	r1, [sp, #64]	; 0x40
   12512:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12514:	f7ff ff1f 	bl	12356 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>
   12518:	9004      	str	r0, [sp, #16]
   1251a:	e7ff      	b.n	1251c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x8c>
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
   1251c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1251e:	903b      	str	r0, [sp, #236]	; 0xec
   12520:	990d      	ldr	r1, [sp, #52]	; 0x34
   12522:	913c      	str	r1, [sp, #240]	; 0xf0
        &Record::builder()
   12524:	993b      	ldr	r1, [sp, #236]	; 0xec
   12526:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   12528:	9804      	ldr	r0, [sp, #16]
   1252a:	f7ff ff1c 	bl	12366 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>
   1252e:	9003      	str	r0, [sp, #12]
   12530:	e7ff      	b.n	12532 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xa2>
            .file_static(Some(file))
   12532:	980c      	ldr	r0, [sp, #48]	; 0x30
   12534:	903d      	str	r0, [sp, #244]	; 0xf4
   12536:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12538:	913e      	str	r1, [sp, #248]	; 0xf8
        &Record::builder()
   1253a:	993d      	ldr	r1, [sp, #244]	; 0xf4
   1253c:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
   1253e:	9803      	ldr	r0, [sp, #12]
   12540:	f7ff ff26 	bl	12390 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>
   12544:	9002      	str	r0, [sp, #8]
   12546:	e7ff      	b.n	12548 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xb8>
            .line(Some(line))
   12548:	980a      	ldr	r0, [sp, #40]	; 0x28
   1254a:	9040      	str	r0, [sp, #256]	; 0x100
   1254c:	2101      	movs	r1, #1
   1254e:	913f      	str	r1, [sp, #252]	; 0xfc
        &Record::builder()
   12550:	993f      	ldr	r1, [sp, #252]	; 0xfc
   12552:	9a40      	ldr	r2, [sp, #256]	; 0x100
   12554:	9802      	ldr	r0, [sp, #8]
   12556:	f7ff ff30 	bl	123ba <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>
   1255a:	9001      	str	r0, [sp, #4]
   1255c:	e7ff      	b.n	1255e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xce>
   1255e:	a813      	add	r0, sp, #76	; 0x4c
   12560:	9901      	ldr	r1, [sp, #4]
   12562:	f7ff ff32 	bl	123ca <_ZN3log13RecordBuilder5build17h83529556a009112eE>
   12566:	e7ff      	b.n	12568 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xd8>
    logger().log(
   12568:	9808      	ldr	r0, [sp, #32]
   1256a:	6901      	ldr	r1, [r0, #16]
   1256c:	aa13      	add	r2, sp, #76	; 0x4c
   1256e:	9809      	ldr	r0, [sp, #36]	; 0x24
   12570:	9100      	str	r1, [sp, #0]
   12572:	4611      	mov	r1, r2
   12574:	9a00      	ldr	r2, [sp, #0]
   12576:	4790      	blx	r2
   12578:	e7ff      	b.n	1257a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xea>
            .build(),
    );
}
   1257a:	b04a      	add	sp, #296	; 0x128
   1257c:	bd70      	pop	{r4, r5, r6, pc}

0001257e <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>:
    Static(&'static str),
   1257e:	b082      	sub	sp, #8
   12580:	9100      	str	r1, [sp, #0]
   12582:	9201      	str	r2, [sp, #4]
   12584:	6041      	str	r1, [r0, #4]
   12586:	6082      	str	r2, [r0, #8]
   12588:	2100      	movs	r1, #0
   1258a:	6001      	str	r1, [r0, #0]
   1258c:	b002      	add	sp, #8
   1258e:	4770      	bx	lr

00012590 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   12590:	b081      	sub	sp, #4
   12592:	9100      	str	r1, [sp, #0]
   12594:	680a      	ldr	r2, [r1, #0]
   12596:	684b      	ldr	r3, [r1, #4]
   12598:	6889      	ldr	r1, [r1, #8]
   1259a:	6081      	str	r1, [r0, #8]
   1259c:	6043      	str	r3, [r0, #4]
   1259e:	6002      	str	r2, [r0, #0]
   125a0:	b001      	add	sp, #4
   125a2:	4770      	bx	lr

000125a4 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>:
#[derive(Clone, Debug)]
   125a4:	b570      	push	{r4, r5, r6, lr}
   125a6:	b09c      	sub	sp, #112	; 0x70
   125a8:	9116      	str	r1, [sp, #88]	; 0x58
    metadata: Metadata<'a>,
   125aa:	9117      	str	r1, [sp, #92]	; 0x5c
    args: fmt::Arguments<'a>,
   125ac:	f101 020c 	add.w	r2, r1, #12
   125b0:	4613      	mov	r3, r2
   125b2:	9218      	str	r2, [sp, #96]	; 0x60
    module_path: Option<MaybeStaticStr<'a>>,
   125b4:	f101 0224 	add.w	r2, r1, #36	; 0x24
   125b8:	4694      	mov	ip, r2
   125ba:	9219      	str	r2, [sp, #100]	; 0x64
    file: Option<MaybeStaticStr<'a>>,
   125bc:	f101 0230 	add.w	r2, r1, #48	; 0x30
   125c0:	4696      	mov	lr, r2
   125c2:	921a      	str	r2, [sp, #104]	; 0x68
    line: Option<u32>,
   125c4:	f101 023c 	add.w	r2, r1, #60	; 0x3c
   125c8:	4614      	mov	r4, r2
   125ca:	921b      	str	r2, [sp, #108]	; 0x6c
   125cc:	aa07      	add	r2, sp, #28
    metadata: Metadata<'a>,
   125ce:	9006      	str	r0, [sp, #24]
   125d0:	4610      	mov	r0, r2
   125d2:	9305      	str	r3, [sp, #20]
   125d4:	f8cd c010 	str.w	ip, [sp, #16]
   125d8:	f8cd e00c 	str.w	lr, [sp, #12]
   125dc:	9402      	str	r4, [sp, #8]
   125de:	f000 f836 	bl	1264e <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   125e2:	e7ff      	b.n	125e4 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x40>
   125e4:	a80a      	add	r0, sp, #40	; 0x28
    args: fmt::Arguments<'a>,
   125e6:	9905      	ldr	r1, [sp, #20]
   125e8:	f7ff fdf8 	bl	121dc <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>
   125ec:	e7ff      	b.n	125ee <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x4a>
   125ee:	a810      	add	r0, sp, #64	; 0x40
    module_path: Option<MaybeStaticStr<'a>>,
   125f0:	9904      	ldr	r1, [sp, #16]
   125f2:	f7ff fdfc 	bl	121ee <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   125f6:	e7ff      	b.n	125f8 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x54>
   125f8:	a813      	add	r0, sp, #76	; 0x4c
    file: Option<MaybeStaticStr<'a>>,
   125fa:	9903      	ldr	r1, [sp, #12]
   125fc:	f7ff fdf7 	bl	121ee <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   12600:	e7ff      	b.n	12602 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x5e>
    line: Option<u32>,
   12602:	9802      	ldr	r0, [sp, #8]
   12604:	f7ff fe1a 	bl	1223c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>
   12608:	9001      	str	r0, [sp, #4]
   1260a:	9100      	str	r1, [sp, #0]
   1260c:	e7ff      	b.n	1260e <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x6a>
#[derive(Clone, Debug)]
   1260e:	9807      	ldr	r0, [sp, #28]
   12610:	9908      	ldr	r1, [sp, #32]
   12612:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12614:	9b06      	ldr	r3, [sp, #24]
   12616:	609a      	str	r2, [r3, #8]
   12618:	6059      	str	r1, [r3, #4]
   1261a:	6018      	str	r0, [r3, #0]
   1261c:	f103 000c 	add.w	r0, r3, #12
   12620:	a90a      	add	r1, sp, #40	; 0x28
   12622:	e891 5074 	ldmia.w	r1, {r2, r4, r5, r6, ip, lr}
   12626:	e880 5074 	stmia.w	r0, {r2, r4, r5, r6, ip, lr}
   1262a:	9810      	ldr	r0, [sp, #64]	; 0x40
   1262c:	9911      	ldr	r1, [sp, #68]	; 0x44
   1262e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12630:	62da      	str	r2, [r3, #44]	; 0x2c
   12632:	6299      	str	r1, [r3, #40]	; 0x28
   12634:	6258      	str	r0, [r3, #36]	; 0x24
   12636:	9813      	ldr	r0, [sp, #76]	; 0x4c
   12638:	9914      	ldr	r1, [sp, #80]	; 0x50
   1263a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1263c:	639a      	str	r2, [r3, #56]	; 0x38
   1263e:	6359      	str	r1, [r3, #52]	; 0x34
   12640:	6318      	str	r0, [r3, #48]	; 0x30
   12642:	9801      	ldr	r0, [sp, #4]
   12644:	63d8      	str	r0, [r3, #60]	; 0x3c
   12646:	9900      	ldr	r1, [sp, #0]
   12648:	6419      	str	r1, [r3, #64]	; 0x40
   1264a:	b01c      	add	sp, #112	; 0x70
   1264c:	bd70      	pop	{r4, r5, r6, pc}

0001264e <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   1264e:	b580      	push	{r7, lr}
   12650:	b088      	sub	sp, #32
   12652:	9105      	str	r1, [sp, #20]
    level: Level,
   12654:	9106      	str	r1, [sp, #24]
    target: &'a str,
   12656:	1d0a      	adds	r2, r1, #4
   12658:	4613      	mov	r3, r2
   1265a:	9207      	str	r2, [sp, #28]
    level: Level,
   1265c:	9004      	str	r0, [sp, #16]
   1265e:	4608      	mov	r0, r1
   12660:	9303      	str	r3, [sp, #12]
   12662:	f7ff fe09 	bl	12278 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>
   12666:	9002      	str	r0, [sp, #8]
   12668:	e7ff      	b.n	1266a <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x1c>
    target: &'a str,
   1266a:	9803      	ldr	r0, [sp, #12]
   1266c:	f7ff fd55 	bl	1211a <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>
   12670:	9001      	str	r0, [sp, #4]
   12672:	9100      	str	r1, [sp, #0]
   12674:	e7ff      	b.n	12676 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x28>
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   12676:	9802      	ldr	r0, [sp, #8]
   12678:	9904      	ldr	r1, [sp, #16]
   1267a:	6008      	str	r0, [r1, #0]
   1267c:	9a01      	ldr	r2, [sp, #4]
   1267e:	604a      	str	r2, [r1, #4]
   12680:	9b00      	ldr	r3, [sp, #0]
   12682:	608b      	str	r3, [r1, #8]
   12684:	b008      	add	sp, #32
   12686:	bd80      	pop	{r7, pc}

00012688 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E>:
   12688:	b580      	push	{r7, lr}
   1268a:	b084      	sub	sp, #16
   1268c:	9002      	str	r0, [sp, #8]
   1268e:	9103      	str	r1, [sp, #12]
   12690:	6800      	ldr	r0, [r0, #0]
   12692:	f000 f81c 	bl	126ce <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>
   12696:	9001      	str	r0, [sp, #4]
   12698:	e7ff      	b.n	1269a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E+0x12>
   1269a:	9801      	ldr	r0, [sp, #4]
   1269c:	f000 0001 	and.w	r0, r0, #1
   126a0:	b004      	add	sp, #16
   126a2:	bd80      	pop	{r7, pc}

000126a4 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>:
   126a4:	b089      	sub	sp, #36	; 0x24
   126a6:	9005      	str	r0, [sp, #20]
   126a8:	9106      	str	r1, [sp, #24]
   126aa:	9107      	str	r1, [sp, #28]
   126ac:	9907      	ldr	r1, [sp, #28]
   126ae:	9002      	str	r0, [sp, #8]
   126b0:	9101      	str	r1, [sp, #4]
   126b2:	e7ff      	b.n	126b4 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x10>
   126b4:	9802      	ldr	r0, [sp, #8]
   126b6:	9008      	str	r0, [sp, #32]
   126b8:	9908      	ldr	r1, [sp, #32]
   126ba:	9100      	str	r1, [sp, #0]
   126bc:	e7ff      	b.n	126be <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x1a>
   126be:	9800      	ldr	r0, [sp, #0]
   126c0:	9003      	str	r0, [sp, #12]
   126c2:	9901      	ldr	r1, [sp, #4]
   126c4:	9104      	str	r1, [sp, #16]
   126c6:	9803      	ldr	r0, [sp, #12]
   126c8:	9904      	ldr	r1, [sp, #16]
   126ca:	b009      	add	sp, #36	; 0x24
   126cc:	4770      	bx	lr

000126ce <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>:
   126ce:	b580      	push	{r7, lr}
   126d0:	b088      	sub	sp, #32
   126d2:	9006      	str	r0, [sp, #24]
   126d4:	9107      	str	r1, [sp, #28]
   126d6:	9004      	str	r0, [sp, #16]
   126d8:	4608      	mov	r0, r1
   126da:	9103      	str	r1, [sp, #12]
   126dc:	f006 f81d 	bl	1871a <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   126e0:	9002      	str	r0, [sp, #8]
   126e2:	e7ff      	b.n	126e4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x16>
   126e4:	9802      	ldr	r0, [sp, #8]
   126e6:	07c1      	lsls	r1, r0, #31
   126e8:	2900      	cmp	r1, #0
   126ea:	d105      	bne.n	126f8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x2a>
   126ec:	e7ff      	b.n	126ee <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x20>
   126ee:	9803      	ldr	r0, [sp, #12]
   126f0:	f006 f817 	bl	18722 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   126f4:	9001      	str	r0, [sp, #4]
   126f6:	e007      	b.n	12708 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x3a>
   126f8:	9804      	ldr	r0, [sp, #16]
   126fa:	9903      	ldr	r1, [sp, #12]
   126fc:	f006 fe37 	bl	1936e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   12700:	f88d 0017 	strb.w	r0, [sp, #23]
   12704:	e7ff      	b.n	12706 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x38>
   12706:	e015      	b.n	12734 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   12708:	9801      	ldr	r0, [sp, #4]
   1270a:	07c1      	lsls	r1, r0, #31
   1270c:	2900      	cmp	r1, #0
   1270e:	d107      	bne.n	12720 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x52>
   12710:	e7ff      	b.n	12712 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x44>
   12712:	9804      	ldr	r0, [sp, #16]
   12714:	9903      	ldr	r1, [sp, #12]
   12716:	f007 f81f 	bl	19758 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   1271a:	f88d 0017 	strb.w	r0, [sp, #23]
   1271e:	e007      	b.n	12730 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x62>
   12720:	9804      	ldr	r0, [sp, #16]
   12722:	9903      	ldr	r1, [sp, #12]
   12724:	f006 fe8e 	bl	19444 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   12728:	f88d 0017 	strb.w	r0, [sp, #23]
   1272c:	e7ff      	b.n	1272e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x60>
   1272e:	e000      	b.n	12732 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   12730:	e7ff      	b.n	12732 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   12732:	e7ff      	b.n	12734 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   12734:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12738:	b008      	add	sp, #32
   1273a:	bd80      	pop	{r7, pc}

0001273c <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>:
   1273c:	b086      	sub	sp, #24
   1273e:	9004      	str	r0, [sp, #16]
   12740:	9105      	str	r1, [sp, #20]
   12742:	9002      	str	r0, [sp, #8]
   12744:	9103      	str	r1, [sp, #12]
   12746:	9802      	ldr	r0, [sp, #8]
   12748:	9903      	ldr	r1, [sp, #12]
   1274a:	9000      	str	r0, [sp, #0]
   1274c:	9101      	str	r1, [sp, #4]
   1274e:	9800      	ldr	r0, [sp, #0]
   12750:	9901      	ldr	r1, [sp, #4]
   12752:	b006      	add	sp, #24
   12754:	4770      	bx	lr

00012756 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>:
   12756:	b580      	push	{r7, lr}
   12758:	b084      	sub	sp, #16
   1275a:	9002      	str	r0, [sp, #8]
   1275c:	9103      	str	r1, [sp, #12]
   1275e:	f000 f805 	bl	1276c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>
   12762:	9001      	str	r0, [sp, #4]
   12764:	e7ff      	b.n	12766 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE+0x10>
   12766:	9801      	ldr	r0, [sp, #4]
   12768:	b004      	add	sp, #16
   1276a:	bd80      	pop	{r7, pc}

0001276c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>:
   1276c:	b084      	sub	sp, #16
   1276e:	9001      	str	r0, [sp, #4]
   12770:	9102      	str	r1, [sp, #8]
   12772:	4408      	add	r0, r1
   12774:	9003      	str	r0, [sp, #12]
   12776:	9803      	ldr	r0, [sp, #12]
   12778:	9000      	str	r0, [sp, #0]
   1277a:	e7ff      	b.n	1277c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E+0x10>
   1277c:	9800      	ldr	r0, [sp, #0]
   1277e:	b004      	add	sp, #16
   12780:	4770      	bx	lr

00012782 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>:
   12782:	b580      	push	{r7, lr}
   12784:	b084      	sub	sp, #16
   12786:	9002      	str	r0, [sp, #8]
   12788:	9103      	str	r1, [sp, #12]
   1278a:	f7ff ffd7 	bl	1273c <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>
   1278e:	9001      	str	r0, [sp, #4]
   12790:	9100      	str	r1, [sp, #0]
   12792:	e7ff      	b.n	12794 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E+0x12>
   12794:	9801      	ldr	r0, [sp, #4]
   12796:	9900      	ldr	r1, [sp, #0]
   12798:	b004      	add	sp, #16
   1279a:	bd80      	pop	{r7, pc}

0001279c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>:
   1279c:	b084      	sub	sp, #16
   1279e:	9002      	str	r0, [sp, #8]
   127a0:	9103      	str	r1, [sp, #12]
   127a2:	9000      	str	r0, [sp, #0]
   127a4:	9101      	str	r1, [sp, #4]
   127a6:	9801      	ldr	r0, [sp, #4]
   127a8:	b004      	add	sp, #16
   127aa:	4770      	bx	lr

000127ac <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>:
   127ac:	b082      	sub	sp, #8
   127ae:	9000      	str	r0, [sp, #0]
   127b0:	9101      	str	r1, [sp, #4]
   127b2:	b002      	add	sp, #8
   127b4:	4770      	bx	lr

000127b6 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>:
   127b6:	b082      	sub	sp, #8
   127b8:	9000      	str	r0, [sp, #0]
   127ba:	9101      	str	r1, [sp, #4]
   127bc:	7800      	ldrb	r0, [r0, #0]
   127be:	7809      	ldrb	r1, [r1, #0]
   127c0:	1a40      	subs	r0, r0, r1
   127c2:	fab0 f080 	clz	r0, r0
   127c6:	0940      	lsrs	r0, r0, #5
   127c8:	b002      	add	sp, #8
   127ca:	4770      	bx	lr

000127cc <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>:
where
    N: ArrayLength<T>,
{
    type Target = [T];

    fn deref(&self) -> &[T] {
   127cc:	b580      	push	{r7, lr}
   127ce:	b084      	sub	sp, #16
   127d0:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   127d2:	f004 fc17 	bl	17004 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>
   127d6:	9002      	str	r0, [sp, #8]
   127d8:	9101      	str	r1, [sp, #4]
   127da:	e7ff      	b.n	127dc <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E+0x10>
    }
   127dc:	9802      	ldr	r0, [sp, #8]
   127de:	9901      	ldr	r1, [sp, #4]
   127e0:	b004      	add	sp, #16
   127e2:	bd80      	pop	{r7, pc}

000127e4 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>:
    fn deref(&self) -> &[T] {
   127e4:	b580      	push	{r7, lr}
   127e6:	b084      	sub	sp, #16
   127e8:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   127ea:	f004 fc20 	bl	1702e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>
   127ee:	9002      	str	r0, [sp, #8]
   127f0:	9101      	str	r1, [sp, #4]
   127f2:	e7ff      	b.n	127f4 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE+0x10>
    }
   127f4:	9802      	ldr	r0, [sp, #8]
   127f6:	9901      	ldr	r1, [sp, #4]
   127f8:	b004      	add	sp, #16
   127fa:	bd80      	pop	{r7, pc}

000127fc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   127fc:	b580      	push	{r7, lr}
   127fe:	b084      	sub	sp, #16
   12800:	9001      	str	r0, [sp, #4]
   12802:	9102      	str	r1, [sp, #8]
   12804:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   12806:	f004 fb5f 	bl	16ec8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>
   1280a:	9000      	str	r0, [sp, #0]
   1280c:	e7ff      	b.n	1280e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E+0x12>
    }
   1280e:	9800      	ldr	r0, [sp, #0]
   12810:	f000 0001 	and.w	r0, r0, #1
   12814:	b004      	add	sp, #16
   12816:	bd80      	pop	{r7, pc}

00012818 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   12818:	b580      	push	{r7, lr}
   1281a:	b086      	sub	sp, #24
   1281c:	460a      	mov	r2, r1
   1281e:	9004      	str	r0, [sp, #16]
   12820:	f88d 1017 	strb.w	r1, [sp, #23]
        self.0.push(item)
   12824:	9203      	str	r2, [sp, #12]
   12826:	f004 fbb2 	bl	16f8e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>
   1282a:	9002      	str	r0, [sp, #8]
   1282c:	9101      	str	r1, [sp, #4]
   1282e:	e7ff      	b.n	12830 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E+0x18>
    }
   12830:	9802      	ldr	r0, [sp, #8]
   12832:	f000 0001 	and.w	r0, r0, #1
   12836:	9901      	ldr	r1, [sp, #4]
   12838:	b006      	add	sp, #24
   1283a:	bd80      	pop	{r7, pc}

0001283c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>:
    pub fn clear(&mut self) {
   1283c:	b580      	push	{r7, lr}
   1283e:	b082      	sub	sp, #8
   12840:	9001      	str	r0, [sp, #4]
        self.0.clear()
   12842:	f004 fbcd 	bl	16fe0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>
   12846:	e7ff      	b.n	12848 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E+0xc>
    }
   12848:	b002      	add	sp, #8
   1284a:	bd80      	pop	{r7, pc}

0001284c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>:
    pub fn clear(&mut self) {
   1284c:	b580      	push	{r7, lr}
   1284e:	b082      	sub	sp, #8
   12850:	9001      	str	r0, [sp, #4]
        self.0.clear()
   12852:	f004 fbce 	bl	16ff2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>
   12856:	e7ff      	b.n	12858 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E+0xc>
    }
   12858:	b002      	add	sp, #8
   1285a:	bd80      	pop	{r7, pc}

0001285c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>:
    pub fn capacity(&self) -> usize {
   1285c:	b580      	push	{r7, lr}
   1285e:	b082      	sub	sp, #8
   12860:	9001      	str	r0, [sp, #4]
        self.0.capacity()
   12862:	f004 fc03 	bl	1706c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   12866:	9000      	str	r0, [sp, #0]
   12868:	e7ff      	b.n	1286a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E+0xe>
    }
   1286a:	9800      	ldr	r0, [sp, #0]
   1286c:	b002      	add	sp, #8
   1286e:	bd80      	pop	{r7, pc}

00012870 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>:
   12870:	b081      	sub	sp, #4
   12872:	9000      	str	r0, [sp, #0]
   12874:	b001      	add	sp, #4
   12876:	4770      	bx	lr

00012878 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>:
   12878:	b580      	push	{r7, lr}
   1287a:	b088      	sub	sp, #32
   1287c:	9006      	str	r0, [sp, #24]
   1287e:	9107      	str	r1, [sp, #28]
   12880:	9004      	str	r0, [sp, #16]
   12882:	4608      	mov	r0, r1
   12884:	9103      	str	r1, [sp, #12]
   12886:	f005 ff48 	bl	1871a <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1288a:	9002      	str	r0, [sp, #8]
   1288c:	e7ff      	b.n	1288e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x16>
   1288e:	9802      	ldr	r0, [sp, #8]
   12890:	07c1      	lsls	r1, r0, #31
   12892:	2900      	cmp	r1, #0
   12894:	d105      	bne.n	128a2 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x2a>
   12896:	e7ff      	b.n	12898 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x20>
   12898:	9803      	ldr	r0, [sp, #12]
   1289a:	f005 ff42 	bl	18722 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1289e:	9001      	str	r0, [sp, #4]
   128a0:	e007      	b.n	128b2 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x3a>
   128a2:	9804      	ldr	r0, [sp, #16]
   128a4:	9903      	ldr	r1, [sp, #12]
   128a6:	f006 fc46 	bl	19136 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>
   128aa:	f88d 0017 	strb.w	r0, [sp, #23]
   128ae:	e7ff      	b.n	128b0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x38>
   128b0:	e015      	b.n	128de <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   128b2:	9801      	ldr	r0, [sp, #4]
   128b4:	07c1      	lsls	r1, r0, #31
   128b6:	2900      	cmp	r1, #0
   128b8:	d107      	bne.n	128ca <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x52>
   128ba:	e7ff      	b.n	128bc <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x44>
   128bc:	9804      	ldr	r0, [sp, #16]
   128be:	9903      	ldr	r1, [sp, #12]
   128c0:	f006 fe2b 	bl	1951a <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>
   128c4:	f88d 0017 	strb.w	r0, [sp, #23]
   128c8:	e007      	b.n	128da <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x62>
   128ca:	9804      	ldr	r0, [sp, #16]
   128cc:	9903      	ldr	r1, [sp, #12]
   128ce:	f006 fc61 	bl	19194 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>
   128d2:	f88d 0017 	strb.w	r0, [sp, #23]
   128d6:	e7ff      	b.n	128d8 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x60>
   128d8:	e000      	b.n	128dc <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   128da:	e7ff      	b.n	128dc <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   128dc:	e7ff      	b.n	128de <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   128de:	f89d 0017 	ldrb.w	r0, [sp, #23]
   128e2:	b008      	add	sp, #32
   128e4:	bd80      	pop	{r7, pc}

000128e6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>:
   128e6:	b580      	push	{r7, lr}
   128e8:	b088      	sub	sp, #32
   128ea:	9006      	str	r0, [sp, #24]
   128ec:	9107      	str	r1, [sp, #28]
   128ee:	9004      	str	r0, [sp, #16]
   128f0:	4608      	mov	r0, r1
   128f2:	9103      	str	r1, [sp, #12]
   128f4:	f005 ff11 	bl	1871a <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   128f8:	9002      	str	r0, [sp, #8]
   128fa:	e7ff      	b.n	128fc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x16>
   128fc:	9802      	ldr	r0, [sp, #8]
   128fe:	07c1      	lsls	r1, r0, #31
   12900:	2900      	cmp	r1, #0
   12902:	d105      	bne.n	12910 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x2a>
   12904:	e7ff      	b.n	12906 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x20>
   12906:	9803      	ldr	r0, [sp, #12]
   12908:	f005 ff0b 	bl	18722 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1290c:	9001      	str	r0, [sp, #4]
   1290e:	e007      	b.n	12920 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x3a>
   12910:	9804      	ldr	r0, [sp, #16]
   12912:	9903      	ldr	r1, [sp, #12]
   12914:	f006 fd2b 	bl	1936e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   12918:	f88d 0017 	strb.w	r0, [sp, #23]
   1291c:	e7ff      	b.n	1291e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x38>
   1291e:	e015      	b.n	1294c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   12920:	9801      	ldr	r0, [sp, #4]
   12922:	07c1      	lsls	r1, r0, #31
   12924:	2900      	cmp	r1, #0
   12926:	d107      	bne.n	12938 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x52>
   12928:	e7ff      	b.n	1292a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x44>
   1292a:	9804      	ldr	r0, [sp, #16]
   1292c:	9903      	ldr	r1, [sp, #12]
   1292e:	f006 fe99 	bl	19664 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   12932:	f88d 0017 	strb.w	r0, [sp, #23]
   12936:	e007      	b.n	12948 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x62>
   12938:	9804      	ldr	r0, [sp, #16]
   1293a:	9903      	ldr	r1, [sp, #12]
   1293c:	f006 fd82 	bl	19444 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   12940:	f88d 0017 	strb.w	r0, [sp, #23]
   12944:	e7ff      	b.n	12946 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x60>
   12946:	e000      	b.n	1294a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   12948:	e7ff      	b.n	1294a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   1294a:	e7ff      	b.n	1294c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   1294c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12950:	b008      	add	sp, #32
   12952:	bd80      	pop	{r7, pc}

00012954 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>:
   12954:	b580      	push	{r7, lr}
   12956:	b088      	sub	sp, #32
   12958:	9006      	str	r0, [sp, #24]
   1295a:	9107      	str	r1, [sp, #28]
   1295c:	9004      	str	r0, [sp, #16]
   1295e:	4608      	mov	r0, r1
   12960:	9103      	str	r1, [sp, #12]
   12962:	f005 feda 	bl	1871a <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   12966:	9002      	str	r0, [sp, #8]
   12968:	e7ff      	b.n	1296a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x16>
   1296a:	9802      	ldr	r0, [sp, #8]
   1296c:	07c1      	lsls	r1, r0, #31
   1296e:	2900      	cmp	r1, #0
   12970:	d105      	bne.n	1297e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x2a>
   12972:	e7ff      	b.n	12974 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x20>
   12974:	9803      	ldr	r0, [sp, #12]
   12976:	f005 fed4 	bl	18722 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1297a:	9001      	str	r0, [sp, #4]
   1297c:	e007      	b.n	1298e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x3a>
   1297e:	9804      	ldr	r0, [sp, #16]
   12980:	9903      	ldr	r1, [sp, #12]
   12982:	f006 fcf4 	bl	1936e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   12986:	f88d 0017 	strb.w	r0, [sp, #23]
   1298a:	e7ff      	b.n	1298c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x38>
   1298c:	e015      	b.n	129ba <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   1298e:	9801      	ldr	r0, [sp, #4]
   12990:	07c1      	lsls	r1, r0, #31
   12992:	2900      	cmp	r1, #0
   12994:	d107      	bne.n	129a6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x52>
   12996:	e7ff      	b.n	12998 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x44>
   12998:	9804      	ldr	r0, [sp, #16]
   1299a:	9903      	ldr	r1, [sp, #12]
   1299c:	f006 fedc 	bl	19758 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   129a0:	f88d 0017 	strb.w	r0, [sp, #23]
   129a4:	e007      	b.n	129b6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x62>
   129a6:	9804      	ldr	r0, [sp, #16]
   129a8:	9903      	ldr	r1, [sp, #12]
   129aa:	f006 fd4b 	bl	19444 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   129ae:	f88d 0017 	strb.w	r0, [sp, #23]
   129b2:	e7ff      	b.n	129b4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x60>
   129b4:	e000      	b.n	129b8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   129b6:	e7ff      	b.n	129b8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   129b8:	e7ff      	b.n	129ba <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   129ba:	f89d 0017 	ldrb.w	r0, [sp, #23]
   129be:	b008      	add	sp, #32
   129c0:	bd80      	pop	{r7, pc}

000129c2 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>:
   129c2:	b580      	push	{r7, lr}
   129c4:	b084      	sub	sp, #16
   129c6:	9002      	str	r0, [sp, #8]
   129c8:	9103      	str	r1, [sp, #12]
   129ca:	6800      	ldr	r0, [r0, #0]
   129cc:	6809      	ldr	r1, [r1, #0]
   129ce:	f7ff fef2 	bl	127b6 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>
   129d2:	9001      	str	r0, [sp, #4]
   129d4:	e7ff      	b.n	129d6 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E+0x14>
   129d6:	9801      	ldr	r0, [sp, #4]
   129d8:	f000 0001 	and.w	r0, r0, #1
   129dc:	b004      	add	sp, #16
   129de:	bd80      	pop	{r7, pc}

000129e0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>:

/// Non-blocking SPI transfer callback values (not used)
static mut SPI_CALLBACK: SpiCallback = SpiCallback {};

/// Init non-blocking SPI transfer
pub fn spi_noblock_init() -> MynewtResult<()> {
   129e0:	b5b0      	push	{r4, r5, r7, lr}
   129e2:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
   129e6:	2000      	movs	r0, #0
    //  Disable SPI port
    unsafe { hal::hal_spi_disable(SPI_NUM) };
   129e8:	f007 fd98 	bl	1a51c <hal_spi_disable>
   129ec:	e7ff      	b.n	129ee <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xe>

    //  Configure SPI port for non-blocking SPI
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   129ee:	f240 01f8 	movw	r1, #248	; 0xf8
   129f2:	f2c2 0100 	movt	r1, #8192	; 0x2000
   129f6:	2000      	movs	r0, #0
   129f8:	f007 fd4e 	bl	1a498 <hal_spi_config>
   129fc:	906a      	str	r0, [sp, #424]	; 0x1a8
   129fe:	e7ff      	b.n	12a00 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x20>
   12a00:	f240 5068 	movw	r0, #1384	; 0x568
   12a04:	f2c0 0002 	movt	r0, #2
   12a08:	6800      	ldr	r0, [r0, #0]
   12a0a:	a96a      	add	r1, sp, #424	; 0x1a8
   12a0c:	916b      	str	r1, [sp, #428]	; 0x1ac
   12a0e:	906c      	str	r0, [sp, #432]	; 0x1b0
   12a10:	986b      	ldr	r0, [sp, #428]	; 0x1ac
   12a12:	f8cd 04fc 	str.w	r0, [sp, #1276]	; 0x4fc
   12a16:	996c      	ldr	r1, [sp, #432]	; 0x1b0
   12a18:	f8cd 1500 	str.w	r1, [sp, #1280]	; 0x500
   12a1c:	6802      	ldr	r2, [r0, #0]
   12a1e:	680b      	ldr	r3, [r1, #0]
   12a20:	429a      	cmp	r2, r3
   12a22:	9068      	str	r0, [sp, #416]	; 0x1a0
   12a24:	9167      	str	r1, [sp, #412]	; 0x19c
   12a26:	d10c      	bne.n	12a42 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x62>
   12a28:	e7ff      	b.n	12a2a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4a>
    let arg = unsafe { core::mem::transmute(&mut SPI_CALLBACK) };
   12a2a:	f646 7004 	movw	r0, #28420	; 0x6f04
   12a2e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12a32:	f8cd 0510 	str.w	r0, [sp, #1296]	; 0x510
   12a36:	f8dd 0510 	ldr.w	r0, [sp, #1296]	; 0x510
   12a3a:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
   12a3e:	9066      	str	r0, [sp, #408]	; 0x198
   12a40:	e075      	b.n	12b2e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x14e>
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   12a42:	f240 50c0 	movw	r0, #1472	; 0x5c0
   12a46:	f2c0 0002 	movt	r0, #2
   12a4a:	6801      	ldr	r1, [r0, #0]
   12a4c:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   12a4e:	907c      	str	r0, [sp, #496]	; 0x1f0
   12a50:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   12a52:	927d      	str	r2, [sp, #500]	; 0x1f4
   12a54:	f240 53dc 	movw	r3, #1500	; 0x5dc
   12a58:	f2c0 0302 	movt	r3, #2
   12a5c:	681b      	ldr	r3, [r3, #0]
   12a5e:	f240 5ce0 	movw	ip, #1504	; 0x5e0
   12a62:	f2c0 0c02 	movt	ip, #2
   12a66:	f8dc c000 	ldr.w	ip, [ip]
   12a6a:	46ee      	mov	lr, sp
   12a6c:	2400      	movs	r4, #0
   12a6e:	f8ce 4000 	str.w	r4, [lr]
   12a72:	a87e      	add	r0, sp, #504	; 0x1f8
   12a74:	2201      	movs	r2, #1
   12a76:	9165      	str	r1, [sp, #404]	; 0x194
   12a78:	4619      	mov	r1, r3
   12a7a:	4663      	mov	r3, ip
   12a7c:	f7f6 f80e 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12a80:	e7ff      	b.n	12a82 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2>
   12a82:	a87c      	add	r0, sp, #496	; 0x1f0
   12a84:	9079      	str	r0, [sp, #484]	; 0x1e4
   12a86:	a87d      	add	r0, sp, #500	; 0x1f4
   12a88:	907a      	str	r0, [sp, #488]	; 0x1e8
   12a8a:	a87e      	add	r0, sp, #504	; 0x1f8
   12a8c:	907b      	str	r0, [sp, #492]	; 0x1ec
   12a8e:	9879      	ldr	r0, [sp, #484]	; 0x1e4
   12a90:	f8cd 0504 	str.w	r0, [sp, #1284]	; 0x504
   12a94:	997a      	ldr	r1, [sp, #488]	; 0x1e8
   12a96:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
   12a9a:	9a7b      	ldr	r2, [sp, #492]	; 0x1ec
   12a9c:	f8cd 250c 	str.w	r2, [sp, #1292]	; 0x50c
   12aa0:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12aa4:	f2c0 0300 	movt	r3, #0
   12aa8:	9164      	str	r1, [sp, #400]	; 0x190
   12aaa:	4619      	mov	r1, r3
   12aac:	9263      	str	r2, [sp, #396]	; 0x18c
   12aae:	f7f6 fc54 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12ab2:	9062      	str	r0, [sp, #392]	; 0x188
   12ab4:	9161      	str	r1, [sp, #388]	; 0x184
   12ab6:	e7ff      	b.n	12ab8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xd8>
   12ab8:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12abc:	f2c0 0100 	movt	r1, #0
   12ac0:	9864      	ldr	r0, [sp, #400]	; 0x190
   12ac2:	f7f6 fc4a 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12ac6:	9060      	str	r0, [sp, #384]	; 0x180
   12ac8:	915f      	str	r1, [sp, #380]	; 0x17c
   12aca:	e7ff      	b.n	12acc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xec>
   12acc:	f647 71a7 	movw	r1, #32679	; 0x7fa7
   12ad0:	f2c0 0101 	movt	r1, #1
   12ad4:	9863      	ldr	r0, [sp, #396]	; 0x18c
   12ad6:	f7f6 fc7f 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12ada:	905e      	str	r0, [sp, #376]	; 0x178
   12adc:	915d      	str	r1, [sp, #372]	; 0x174
   12ade:	e7ff      	b.n	12ae0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x100>
   12ae0:	9862      	ldr	r0, [sp, #392]	; 0x188
   12ae2:	9073      	str	r0, [sp, #460]	; 0x1cc
   12ae4:	9961      	ldr	r1, [sp, #388]	; 0x184
   12ae6:	9174      	str	r1, [sp, #464]	; 0x1d0
   12ae8:	9a60      	ldr	r2, [sp, #384]	; 0x180
   12aea:	9275      	str	r2, [sp, #468]	; 0x1d4
   12aec:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   12aee:	9376      	str	r3, [sp, #472]	; 0x1d8
   12af0:	f8dd c178 	ldr.w	ip, [sp, #376]	; 0x178
   12af4:	f8cd c1dc 	str.w	ip, [sp, #476]	; 0x1dc
   12af8:	f8dd e174 	ldr.w	lr, [sp, #372]	; 0x174
   12afc:	f8cd e1e0 	str.w	lr, [sp, #480]	; 0x1e0
   12b00:	466c      	mov	r4, sp
   12b02:	2503      	movs	r5, #3
   12b04:	6025      	str	r5, [r4, #0]
   12b06:	a86d      	add	r0, sp, #436	; 0x1b4
   12b08:	ab73      	add	r3, sp, #460	; 0x1cc
   12b0a:	9965      	ldr	r1, [sp, #404]	; 0x194
   12b0c:	462a      	mov	r2, r5
   12b0e:	f7f5 ffc5 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12b12:	e7ff      	b.n	12b14 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x134>
   12b14:	f240 50fc 	movw	r0, #1532	; 0x5fc
   12b18:	f2c0 0002 	movt	r0, #2
   12b1c:	f004 ff55 	bl	179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12b20:	905c      	str	r0, [sp, #368]	; 0x170
   12b22:	e7ff      	b.n	12b24 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x144>
   12b24:	a86d      	add	r0, sp, #436	; 0x1b4
   12b26:	995c      	ldr	r1, [sp, #368]	; 0x170
   12b28:	f004 ff8c 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12b2c:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
        SPI_NUM, 
        Some(spi_noblock_handler), 
   12b2e:	f643 707b 	movw	r0, #16251	; 0x3f7b
   12b32:	f2c0 0001 	movt	r0, #1
   12b36:	9085      	str	r0, [sp, #532]	; 0x214
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
   12b38:	9985      	ldr	r1, [sp, #532]	; 0x214
   12b3a:	2000      	movs	r0, #0
   12b3c:	9a66      	ldr	r2, [sp, #408]	; 0x198
   12b3e:	f007 fd51 	bl	1a5e4 <hal_spi_set_txrx_cb>
   12b42:	9084      	str	r0, [sp, #528]	; 0x210
   12b44:	e7ff      	b.n	12b46 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x166>
        arg
    ) };
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   12b46:	f240 5068 	movw	r0, #1384	; 0x568
   12b4a:	f2c0 0002 	movt	r0, #2
   12b4e:	6800      	ldr	r0, [r0, #0]
   12b50:	a984      	add	r1, sp, #528	; 0x210
   12b52:	9186      	str	r1, [sp, #536]	; 0x218
   12b54:	9087      	str	r0, [sp, #540]	; 0x21c
   12b56:	9886      	ldr	r0, [sp, #536]	; 0x218
   12b58:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
   12b5c:	9987      	ldr	r1, [sp, #540]	; 0x21c
   12b5e:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
   12b62:	6802      	ldr	r2, [r0, #0]
   12b64:	680b      	ldr	r3, [r1, #0]
   12b66:	429a      	cmp	r2, r3
   12b68:	905b      	str	r0, [sp, #364]	; 0x16c
   12b6a:	915a      	str	r1, [sp, #360]	; 0x168
   12b6c:	d105      	bne.n	12b7a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x19a>
   12b6e:	e7ff      	b.n	12b70 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x190>
   12b70:	2000      	movs	r0, #0

    //  Enable SPI port and set SS to high to disable SPI device
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12b72:	f007 fcad 	bl	1a4d0 <hal_spi_enable>
   12b76:	909f      	str	r0, [sp, #636]	; 0x27c
   12b78:	e075      	b.n	12c66 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x286>
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   12b7a:	f240 50c0 	movw	r0, #1472	; 0x5c0
   12b7e:	f2c0 0002 	movt	r0, #2
   12b82:	6801      	ldr	r1, [r0, #0]
   12b84:	985b      	ldr	r0, [sp, #364]	; 0x16c
   12b86:	9097      	str	r0, [sp, #604]	; 0x25c
   12b88:	9a5a      	ldr	r2, [sp, #360]	; 0x168
   12b8a:	9298      	str	r2, [sp, #608]	; 0x260
   12b8c:	f240 6320 	movw	r3, #1568	; 0x620
   12b90:	f2c0 0302 	movt	r3, #2
   12b94:	681b      	ldr	r3, [r3, #0]
   12b96:	f240 5ce0 	movw	ip, #1504	; 0x5e0
   12b9a:	f2c0 0c02 	movt	ip, #2
   12b9e:	f8dc c000 	ldr.w	ip, [ip]
   12ba2:	46ee      	mov	lr, sp
   12ba4:	2400      	movs	r4, #0
   12ba6:	f8ce 4000 	str.w	r4, [lr]
   12baa:	a899      	add	r0, sp, #612	; 0x264
   12bac:	2201      	movs	r2, #1
   12bae:	9159      	str	r1, [sp, #356]	; 0x164
   12bb0:	4619      	mov	r1, r3
   12bb2:	4663      	mov	r3, ip
   12bb4:	f7f5 ff72 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12bb8:	e7ff      	b.n	12bba <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x1da>
   12bba:	a897      	add	r0, sp, #604	; 0x25c
   12bbc:	9094      	str	r0, [sp, #592]	; 0x250
   12bbe:	a898      	add	r0, sp, #608	; 0x260
   12bc0:	9095      	str	r0, [sp, #596]	; 0x254
   12bc2:	a899      	add	r0, sp, #612	; 0x264
   12bc4:	9096      	str	r0, [sp, #600]	; 0x258
   12bc6:	9894      	ldr	r0, [sp, #592]	; 0x250
   12bc8:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
   12bcc:	9995      	ldr	r1, [sp, #596]	; 0x254
   12bce:	f8cd 1524 	str.w	r1, [sp, #1316]	; 0x524
   12bd2:	9a96      	ldr	r2, [sp, #600]	; 0x258
   12bd4:	f8cd 2528 	str.w	r2, [sp, #1320]	; 0x528
   12bd8:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12bdc:	f2c0 0300 	movt	r3, #0
   12be0:	9158      	str	r1, [sp, #352]	; 0x160
   12be2:	4619      	mov	r1, r3
   12be4:	9257      	str	r2, [sp, #348]	; 0x15c
   12be6:	f7f6 fbb8 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12bea:	9056      	str	r0, [sp, #344]	; 0x158
   12bec:	9155      	str	r1, [sp, #340]	; 0x154
   12bee:	e7ff      	b.n	12bf0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x210>
   12bf0:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12bf4:	f2c0 0100 	movt	r1, #0
   12bf8:	9858      	ldr	r0, [sp, #352]	; 0x160
   12bfa:	f7f6 fbae 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12bfe:	9054      	str	r0, [sp, #336]	; 0x150
   12c00:	9153      	str	r1, [sp, #332]	; 0x14c
   12c02:	e7ff      	b.n	12c04 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x224>
   12c04:	f647 71a7 	movw	r1, #32679	; 0x7fa7
   12c08:	f2c0 0101 	movt	r1, #1
   12c0c:	9857      	ldr	r0, [sp, #348]	; 0x15c
   12c0e:	f7f6 fbe3 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12c12:	9052      	str	r0, [sp, #328]	; 0x148
   12c14:	9151      	str	r1, [sp, #324]	; 0x144
   12c16:	e7ff      	b.n	12c18 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x238>
   12c18:	9856      	ldr	r0, [sp, #344]	; 0x158
   12c1a:	908e      	str	r0, [sp, #568]	; 0x238
   12c1c:	9955      	ldr	r1, [sp, #340]	; 0x154
   12c1e:	918f      	str	r1, [sp, #572]	; 0x23c
   12c20:	9a54      	ldr	r2, [sp, #336]	; 0x150
   12c22:	9290      	str	r2, [sp, #576]	; 0x240
   12c24:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   12c26:	9391      	str	r3, [sp, #580]	; 0x244
   12c28:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
   12c2c:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
   12c30:	f8dd e144 	ldr.w	lr, [sp, #324]	; 0x144
   12c34:	f8cd e24c 	str.w	lr, [sp, #588]	; 0x24c
   12c38:	466c      	mov	r4, sp
   12c3a:	2503      	movs	r5, #3
   12c3c:	6025      	str	r5, [r4, #0]
   12c3e:	a888      	add	r0, sp, #544	; 0x220
   12c40:	ab8e      	add	r3, sp, #568	; 0x238
   12c42:	9959      	ldr	r1, [sp, #356]	; 0x164
   12c44:	462a      	mov	r2, r5
   12c46:	f7f5 ff29 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12c4a:	e7ff      	b.n	12c4c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x26c>
   12c4c:	f240 6024 	movw	r0, #1572	; 0x624
   12c50:	f2c0 0002 	movt	r0, #2
   12c54:	f004 feb9 	bl	179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12c58:	9050      	str	r0, [sp, #320]	; 0x140
   12c5a:	e7ff      	b.n	12c5c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x27c>
   12c5c:	a888      	add	r0, sp, #544	; 0x220
   12c5e:	9950      	ldr	r1, [sp, #320]	; 0x140
   12c60:	f004 fef0 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12c64:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12c66:	f240 5068 	movw	r0, #1384	; 0x568
   12c6a:	f2c0 0002 	movt	r0, #2
   12c6e:	6800      	ldr	r0, [r0, #0]
   12c70:	a99f      	add	r1, sp, #636	; 0x27c
   12c72:	91a0      	str	r1, [sp, #640]	; 0x280
   12c74:	90a1      	str	r0, [sp, #644]	; 0x284
   12c76:	98a0      	ldr	r0, [sp, #640]	; 0x280
   12c78:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
   12c7c:	99a1      	ldr	r1, [sp, #644]	; 0x284
   12c7e:	f8cd 1530 	str.w	r1, [sp, #1328]	; 0x530
   12c82:	6802      	ldr	r2, [r0, #0]
   12c84:	680b      	ldr	r3, [r1, #0]
   12c86:	429a      	cmp	r2, r3
   12c88:	904f      	str	r0, [sp, #316]	; 0x13c
   12c8a:	914e      	str	r1, [sp, #312]	; 0x138
   12c8c:	d106      	bne.n	12c9c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2bc>
   12c8e:	e7ff      	b.n	12c90 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2b0>
   12c90:	2019      	movs	r0, #25
   12c92:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12c94:	f006 fff2 	bl	19c7c <hal_gpio_init_out>
   12c98:	90b9      	str	r0, [sp, #740]	; 0x2e4
   12c9a:	e075      	b.n	12d88 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3a8>
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12c9c:	f240 50c0 	movw	r0, #1472	; 0x5c0
   12ca0:	f2c0 0002 	movt	r0, #2
   12ca4:	6801      	ldr	r1, [r0, #0]
   12ca6:	984f      	ldr	r0, [sp, #316]	; 0x13c
   12ca8:	90b1      	str	r0, [sp, #708]	; 0x2c4
   12caa:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   12cac:	92b2      	str	r2, [sp, #712]	; 0x2c8
   12cae:	f240 634c 	movw	r3, #1612	; 0x64c
   12cb2:	f2c0 0302 	movt	r3, #2
   12cb6:	681b      	ldr	r3, [r3, #0]
   12cb8:	f240 5ce0 	movw	ip, #1504	; 0x5e0
   12cbc:	f2c0 0c02 	movt	ip, #2
   12cc0:	f8dc c000 	ldr.w	ip, [ip]
   12cc4:	46ee      	mov	lr, sp
   12cc6:	2400      	movs	r4, #0
   12cc8:	f8ce 4000 	str.w	r4, [lr]
   12ccc:	a8b3      	add	r0, sp, #716	; 0x2cc
   12cce:	2201      	movs	r2, #1
   12cd0:	914d      	str	r1, [sp, #308]	; 0x134
   12cd2:	4619      	mov	r1, r3
   12cd4:	4663      	mov	r3, ip
   12cd6:	f7f5 fee1 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12cda:	e7ff      	b.n	12cdc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2fc>
   12cdc:	a8b1      	add	r0, sp, #708	; 0x2c4
   12cde:	90ae      	str	r0, [sp, #696]	; 0x2b8
   12ce0:	a8b2      	add	r0, sp, #712	; 0x2c8
   12ce2:	90af      	str	r0, [sp, #700]	; 0x2bc
   12ce4:	a8b3      	add	r0, sp, #716	; 0x2cc
   12ce6:	90b0      	str	r0, [sp, #704]	; 0x2c0
   12ce8:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
   12cea:	f8cd 0534 	str.w	r0, [sp, #1332]	; 0x534
   12cee:	99af      	ldr	r1, [sp, #700]	; 0x2bc
   12cf0:	f8cd 1538 	str.w	r1, [sp, #1336]	; 0x538
   12cf4:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
   12cf6:	f8cd 253c 	str.w	r2, [sp, #1340]	; 0x53c
   12cfa:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12cfe:	f2c0 0300 	movt	r3, #0
   12d02:	914c      	str	r1, [sp, #304]	; 0x130
   12d04:	4619      	mov	r1, r3
   12d06:	924b      	str	r2, [sp, #300]	; 0x12c
   12d08:	f7f6 fb27 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12d0c:	904a      	str	r0, [sp, #296]	; 0x128
   12d0e:	9149      	str	r1, [sp, #292]	; 0x124
   12d10:	e7ff      	b.n	12d12 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x332>
   12d12:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12d16:	f2c0 0100 	movt	r1, #0
   12d1a:	984c      	ldr	r0, [sp, #304]	; 0x130
   12d1c:	f7f6 fb1d 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12d20:	9048      	str	r0, [sp, #288]	; 0x120
   12d22:	9147      	str	r1, [sp, #284]	; 0x11c
   12d24:	e7ff      	b.n	12d26 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x346>
   12d26:	f647 71a7 	movw	r1, #32679	; 0x7fa7
   12d2a:	f2c0 0101 	movt	r1, #1
   12d2e:	984b      	ldr	r0, [sp, #300]	; 0x12c
   12d30:	f7f6 fb52 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12d34:	9046      	str	r0, [sp, #280]	; 0x118
   12d36:	9145      	str	r1, [sp, #276]	; 0x114
   12d38:	e7ff      	b.n	12d3a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x35a>
   12d3a:	984a      	ldr	r0, [sp, #296]	; 0x128
   12d3c:	90a8      	str	r0, [sp, #672]	; 0x2a0
   12d3e:	9949      	ldr	r1, [sp, #292]	; 0x124
   12d40:	91a9      	str	r1, [sp, #676]	; 0x2a4
   12d42:	9a48      	ldr	r2, [sp, #288]	; 0x120
   12d44:	92aa      	str	r2, [sp, #680]	; 0x2a8
   12d46:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   12d48:	93ab      	str	r3, [sp, #684]	; 0x2ac
   12d4a:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   12d4e:	f8cd c2b0 	str.w	ip, [sp, #688]	; 0x2b0
   12d52:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
   12d56:	f8cd e2b4 	str.w	lr, [sp, #692]	; 0x2b4
   12d5a:	466c      	mov	r4, sp
   12d5c:	2503      	movs	r5, #3
   12d5e:	6025      	str	r5, [r4, #0]
   12d60:	a8a2      	add	r0, sp, #648	; 0x288
   12d62:	aba8      	add	r3, sp, #672	; 0x2a0
   12d64:	994d      	ldr	r1, [sp, #308]	; 0x134
   12d66:	462a      	mov	r2, r5
   12d68:	f7f5 fe98 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12d6c:	e7ff      	b.n	12d6e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x38e>
   12d6e:	f240 6050 	movw	r0, #1616	; 0x650
   12d72:	f2c0 0002 	movt	r0, #2
   12d76:	f004 fe28 	bl	179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12d7a:	9044      	str	r0, [sp, #272]	; 0x110
   12d7c:	e7ff      	b.n	12d7e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x39e>
   12d7e:	a8a2      	add	r0, sp, #648	; 0x288
   12d80:	9944      	ldr	r1, [sp, #272]	; 0x110
   12d82:	f004 fe5f 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12d86:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12d88:	f240 5068 	movw	r0, #1384	; 0x568
   12d8c:	f2c0 0002 	movt	r0, #2
   12d90:	6800      	ldr	r0, [r0, #0]
   12d92:	a9b9      	add	r1, sp, #740	; 0x2e4
   12d94:	91ba      	str	r1, [sp, #744]	; 0x2e8
   12d96:	90bb      	str	r0, [sp, #748]	; 0x2ec
   12d98:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
   12d9a:	f8cd 0540 	str.w	r0, [sp, #1344]	; 0x540
   12d9e:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
   12da0:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
   12da4:	6802      	ldr	r2, [r0, #0]
   12da6:	680b      	ldr	r3, [r1, #0]
   12da8:	429a      	cmp	r2, r3
   12daa:	9043      	str	r0, [sp, #268]	; 0x10c
   12dac:	9142      	str	r1, [sp, #264]	; 0x108
   12dae:	d106      	bne.n	12dbe <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3de>
   12db0:	e7ff      	b.n	12db2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3d2>
   12db2:	2012      	movs	r0, #18
   12db4:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12db6:	f006 ff61 	bl	19c7c <hal_gpio_init_out>
   12dba:	90d3      	str	r0, [sp, #844]	; 0x34c
   12dbc:	e075      	b.n	12eaa <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4ca>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12dbe:	f240 50c0 	movw	r0, #1472	; 0x5c0
   12dc2:	f2c0 0002 	movt	r0, #2
   12dc6:	6801      	ldr	r1, [r0, #0]
   12dc8:	9843      	ldr	r0, [sp, #268]	; 0x10c
   12dca:	90cb      	str	r0, [sp, #812]	; 0x32c
   12dcc:	9a42      	ldr	r2, [sp, #264]	; 0x108
   12dce:	92cc      	str	r2, [sp, #816]	; 0x330
   12dd0:	f240 6374 	movw	r3, #1652	; 0x674
   12dd4:	f2c0 0302 	movt	r3, #2
   12dd8:	681b      	ldr	r3, [r3, #0]
   12dda:	f240 5ce0 	movw	ip, #1504	; 0x5e0
   12dde:	f2c0 0c02 	movt	ip, #2
   12de2:	f8dc c000 	ldr.w	ip, [ip]
   12de6:	46ee      	mov	lr, sp
   12de8:	2400      	movs	r4, #0
   12dea:	f8ce 4000 	str.w	r4, [lr]
   12dee:	a8cd      	add	r0, sp, #820	; 0x334
   12df0:	2201      	movs	r2, #1
   12df2:	9141      	str	r1, [sp, #260]	; 0x104
   12df4:	4619      	mov	r1, r3
   12df6:	4663      	mov	r3, ip
   12df8:	f7f5 fe50 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12dfc:	e7ff      	b.n	12dfe <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x41e>
   12dfe:	a8cb      	add	r0, sp, #812	; 0x32c
   12e00:	90c8      	str	r0, [sp, #800]	; 0x320
   12e02:	a8cc      	add	r0, sp, #816	; 0x330
   12e04:	90c9      	str	r0, [sp, #804]	; 0x324
   12e06:	a8cd      	add	r0, sp, #820	; 0x334
   12e08:	90ca      	str	r0, [sp, #808]	; 0x328
   12e0a:	98c8      	ldr	r0, [sp, #800]	; 0x320
   12e0c:	f8cd 0548 	str.w	r0, [sp, #1352]	; 0x548
   12e10:	99c9      	ldr	r1, [sp, #804]	; 0x324
   12e12:	f8cd 154c 	str.w	r1, [sp, #1356]	; 0x54c
   12e16:	9aca      	ldr	r2, [sp, #808]	; 0x328
   12e18:	f8cd 2550 	str.w	r2, [sp, #1360]	; 0x550
   12e1c:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12e20:	f2c0 0300 	movt	r3, #0
   12e24:	9140      	str	r1, [sp, #256]	; 0x100
   12e26:	4619      	mov	r1, r3
   12e28:	923f      	str	r2, [sp, #252]	; 0xfc
   12e2a:	f7f6 fa96 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12e2e:	903e      	str	r0, [sp, #248]	; 0xf8
   12e30:	913d      	str	r1, [sp, #244]	; 0xf4
   12e32:	e7ff      	b.n	12e34 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x454>
   12e34:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12e38:	f2c0 0100 	movt	r1, #0
   12e3c:	9840      	ldr	r0, [sp, #256]	; 0x100
   12e3e:	f7f6 fa8c 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12e42:	903c      	str	r0, [sp, #240]	; 0xf0
   12e44:	913b      	str	r1, [sp, #236]	; 0xec
   12e46:	e7ff      	b.n	12e48 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x468>
   12e48:	f647 71a7 	movw	r1, #32679	; 0x7fa7
   12e4c:	f2c0 0101 	movt	r1, #1
   12e50:	983f      	ldr	r0, [sp, #252]	; 0xfc
   12e52:	f7f6 fac1 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12e56:	903a      	str	r0, [sp, #232]	; 0xe8
   12e58:	9139      	str	r1, [sp, #228]	; 0xe4
   12e5a:	e7ff      	b.n	12e5c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x47c>
   12e5c:	983e      	ldr	r0, [sp, #248]	; 0xf8
   12e5e:	90c2      	str	r0, [sp, #776]	; 0x308
   12e60:	993d      	ldr	r1, [sp, #244]	; 0xf4
   12e62:	91c3      	str	r1, [sp, #780]	; 0x30c
   12e64:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   12e66:	92c4      	str	r2, [sp, #784]	; 0x310
   12e68:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   12e6a:	93c5      	str	r3, [sp, #788]	; 0x314
   12e6c:	f8dd c0e8 	ldr.w	ip, [sp, #232]	; 0xe8
   12e70:	f8cd c318 	str.w	ip, [sp, #792]	; 0x318
   12e74:	f8dd e0e4 	ldr.w	lr, [sp, #228]	; 0xe4
   12e78:	f8cd e31c 	str.w	lr, [sp, #796]	; 0x31c
   12e7c:	466c      	mov	r4, sp
   12e7e:	2503      	movs	r5, #3
   12e80:	6025      	str	r5, [r4, #0]
   12e82:	a8bc      	add	r0, sp, #752	; 0x2f0
   12e84:	abc2      	add	r3, sp, #776	; 0x308
   12e86:	9941      	ldr	r1, [sp, #260]	; 0x104
   12e88:	462a      	mov	r2, r5
   12e8a:	f7f5 fe07 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12e8e:	e7ff      	b.n	12e90 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4b0>
   12e90:	f240 6078 	movw	r0, #1656	; 0x678
   12e94:	f2c0 0002 	movt	r0, #2
   12e98:	f004 fd97 	bl	179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12e9c:	9038      	str	r0, [sp, #224]	; 0xe0
   12e9e:	e7ff      	b.n	12ea0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4c0>
   12ea0:	a8bc      	add	r0, sp, #752	; 0x2f0
   12ea2:	9938      	ldr	r1, [sp, #224]	; 0xe0
   12ea4:	f004 fdce 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12ea8:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12eaa:	f240 5068 	movw	r0, #1384	; 0x568
   12eae:	f2c0 0002 	movt	r0, #2
   12eb2:	6800      	ldr	r0, [r0, #0]
   12eb4:	a9d3      	add	r1, sp, #844	; 0x34c
   12eb6:	91d4      	str	r1, [sp, #848]	; 0x350
   12eb8:	90d5      	str	r0, [sp, #852]	; 0x354
   12eba:	98d4      	ldr	r0, [sp, #848]	; 0x350
   12ebc:	f8cd 0554 	str.w	r0, [sp, #1364]	; 0x554
   12ec0:	99d5      	ldr	r1, [sp, #852]	; 0x354
   12ec2:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
   12ec6:	6802      	ldr	r2, [r0, #0]
   12ec8:	680b      	ldr	r3, [r1, #0]
   12eca:	429a      	cmp	r2, r3
   12ecc:	9037      	str	r0, [sp, #220]	; 0xdc
   12ece:	9136      	str	r1, [sp, #216]	; 0xd8
   12ed0:	d107      	bne.n	12ee2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x502>
   12ed2:	e7ff      	b.n	12ed4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4f4>

    //  Create Event Queue and Mbuf (Data) Queue that will store the SPI requests
    unsafe { os::os_eventq_init(&mut SPI_EVENT_QUEUE) };
   12ed4:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   12ed8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12edc:	f007 ffd8 	bl	1ae90 <os_eventq_init>
   12ee0:	e075      	b.n	12fce <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5ee>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12ee2:	f240 50c0 	movw	r0, #1472	; 0x5c0
   12ee6:	f2c0 0002 	movt	r0, #2
   12eea:	6801      	ldr	r1, [r0, #0]
   12eec:	9837      	ldr	r0, [sp, #220]	; 0xdc
   12eee:	90e5      	str	r0, [sp, #916]	; 0x394
   12ef0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   12ef2:	92e6      	str	r2, [sp, #920]	; 0x398
   12ef4:	f240 6374 	movw	r3, #1652	; 0x674
   12ef8:	f2c0 0302 	movt	r3, #2
   12efc:	681b      	ldr	r3, [r3, #0]
   12efe:	f240 5ce0 	movw	ip, #1504	; 0x5e0
   12f02:	f2c0 0c02 	movt	ip, #2
   12f06:	f8dc c000 	ldr.w	ip, [ip]
   12f0a:	46ee      	mov	lr, sp
   12f0c:	2400      	movs	r4, #0
   12f0e:	f8ce 4000 	str.w	r4, [lr]
   12f12:	a8e7      	add	r0, sp, #924	; 0x39c
   12f14:	2201      	movs	r2, #1
   12f16:	9135      	str	r1, [sp, #212]	; 0xd4
   12f18:	4619      	mov	r1, r3
   12f1a:	4663      	mov	r3, ip
   12f1c:	f7f5 fdbe 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12f20:	e7ff      	b.n	12f22 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x542>
   12f22:	a8e5      	add	r0, sp, #916	; 0x394
   12f24:	90e2      	str	r0, [sp, #904]	; 0x388
   12f26:	a8e6      	add	r0, sp, #920	; 0x398
   12f28:	90e3      	str	r0, [sp, #908]	; 0x38c
   12f2a:	a8e7      	add	r0, sp, #924	; 0x39c
   12f2c:	90e4      	str	r0, [sp, #912]	; 0x390
   12f2e:	98e2      	ldr	r0, [sp, #904]	; 0x388
   12f30:	f8cd 055c 	str.w	r0, [sp, #1372]	; 0x55c
   12f34:	99e3      	ldr	r1, [sp, #908]	; 0x38c
   12f36:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560
   12f3a:	9ae4      	ldr	r2, [sp, #912]	; 0x390
   12f3c:	f8cd 2564 	str.w	r2, [sp, #1380]	; 0x564
   12f40:	f249 23eb 	movw	r3, #37611	; 0x92eb
   12f44:	f2c0 0300 	movt	r3, #0
   12f48:	9134      	str	r1, [sp, #208]	; 0xd0
   12f4a:	4619      	mov	r1, r3
   12f4c:	9233      	str	r2, [sp, #204]	; 0xcc
   12f4e:	f7f6 fa04 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12f52:	9032      	str	r0, [sp, #200]	; 0xc8
   12f54:	9131      	str	r1, [sp, #196]	; 0xc4
   12f56:	e7ff      	b.n	12f58 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x578>
   12f58:	f249 21eb 	movw	r1, #37611	; 0x92eb
   12f5c:	f2c0 0100 	movt	r1, #0
   12f60:	9834      	ldr	r0, [sp, #208]	; 0xd0
   12f62:	f7f6 f9fa 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12f66:	9030      	str	r0, [sp, #192]	; 0xc0
   12f68:	912f      	str	r1, [sp, #188]	; 0xbc
   12f6a:	e7ff      	b.n	12f6c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x58c>
   12f6c:	f647 71a7 	movw	r1, #32679	; 0x7fa7
   12f70:	f2c0 0101 	movt	r1, #1
   12f74:	9833      	ldr	r0, [sp, #204]	; 0xcc
   12f76:	f7f6 fa2f 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12f7a:	902e      	str	r0, [sp, #184]	; 0xb8
   12f7c:	912d      	str	r1, [sp, #180]	; 0xb4
   12f7e:	e7ff      	b.n	12f80 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5a0>
   12f80:	9832      	ldr	r0, [sp, #200]	; 0xc8
   12f82:	90dc      	str	r0, [sp, #880]	; 0x370
   12f84:	9931      	ldr	r1, [sp, #196]	; 0xc4
   12f86:	91dd      	str	r1, [sp, #884]	; 0x374
   12f88:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   12f8a:	92de      	str	r2, [sp, #888]	; 0x378
   12f8c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   12f8e:	93df      	str	r3, [sp, #892]	; 0x37c
   12f90:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
   12f94:	f8cd c380 	str.w	ip, [sp, #896]	; 0x380
   12f98:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
   12f9c:	f8cd e384 	str.w	lr, [sp, #900]	; 0x384
   12fa0:	466c      	mov	r4, sp
   12fa2:	2503      	movs	r5, #3
   12fa4:	6025      	str	r5, [r4, #0]
   12fa6:	a8d6      	add	r0, sp, #856	; 0x358
   12fa8:	abdc      	add	r3, sp, #880	; 0x370
   12faa:	9935      	ldr	r1, [sp, #212]	; 0xd4
   12fac:	462a      	mov	r2, r5
   12fae:	f7f5 fd75 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12fb2:	e7ff      	b.n	12fb4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5d4>
   12fb4:	f240 6088 	movw	r0, #1672	; 0x688
   12fb8:	f2c0 0002 	movt	r0, #2
   12fbc:	f004 fd05 	bl	179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12fc0:	902c      	str	r0, [sp, #176]	; 0xb0
   12fc2:	e7ff      	b.n	12fc4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5e4>
   12fc4:	a8d6      	add	r0, sp, #856	; 0x358
   12fc6:	992c      	ldr	r1, [sp, #176]	; 0xb0
   12fc8:	f004 fd3c 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12fcc:	defe      	udf	#254	; 0xfe
    let rc = unsafe { os::os_mqueue_init(
        &mut SPI_DATA_QUEUE, 
        Some(spi_event_callback), 
   12fce:	f643 105d 	movw	r0, #14685	; 0x395d
   12fd2:	f2c0 0001 	movt	r0, #1
   12fd6:	90ee      	str	r0, [sp, #952]	; 0x3b8
    let rc = unsafe { os::os_mqueue_init(
   12fd8:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
   12fda:	f646 208c 	movw	r0, #27276	; 0x6a8c
   12fde:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12fe2:	2200      	movs	r2, #0
   12fe4:	f008 f802 	bl	1afec <os_mqueue_init>
   12fe8:	90ed      	str	r0, [sp, #948]	; 0x3b4
   12fea:	e7ff      	b.n	12fec <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x60c>
        NULL
    ) };
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   12fec:	f240 5068 	movw	r0, #1384	; 0x568
   12ff0:	f2c0 0002 	movt	r0, #2
   12ff4:	6800      	ldr	r0, [r0, #0]
   12ff6:	a9ed      	add	r1, sp, #948	; 0x3b4
   12ff8:	91ef      	str	r1, [sp, #956]	; 0x3bc
   12ffa:	90f0      	str	r0, [sp, #960]	; 0x3c0
   12ffc:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
   12ffe:	f8cd 0568 	str.w	r0, [sp, #1384]	; 0x568
   13002:	99f0      	ldr	r1, [sp, #960]	; 0x3c0
   13004:	f8cd 156c 	str.w	r1, [sp, #1388]	; 0x56c
   13008:	6802      	ldr	r2, [r0, #0]
   1300a:	680b      	ldr	r3, [r1, #0]
   1300c:	429a      	cmp	r2, r3
   1300e:	902b      	str	r0, [sp, #172]	; 0xac
   13010:	912a      	str	r1, [sp, #168]	; 0xa8
   13012:	d10a      	bne.n	1302a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x64a>
   13014:	e7ff      	b.n	13016 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x636>

    //  Create the Semaphore that will signal whether the SPI request has completed
    let rc = unsafe { os::os_sem_init(&mut SPI_SEM, 0) };  //  Init to 0 tokens, so caller will block until SPI request is completed.
   13016:	f646 207c 	movw	r0, #27260	; 0x6a7c
   1301a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1301e:	2100      	movs	r1, #0
   13020:	f008 fcde 	bl	1b9e0 <os_sem_init>
   13024:	f8cd 0420 	str.w	r0, [sp, #1056]	; 0x420
   13028:	e07b      	b.n	13122 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x742>
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   1302a:	f240 50c0 	movw	r0, #1472	; 0x5c0
   1302e:	f2c0 0002 	movt	r0, #2
   13032:	6801      	ldr	r1, [r0, #0]
   13034:	982b      	ldr	r0, [sp, #172]	; 0xac
   13036:	f8cd 0400 	str.w	r0, [sp, #1024]	; 0x400
   1303a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   1303c:	f8cd 2404 	str.w	r2, [sp, #1028]	; 0x404
   13040:	f240 63ac 	movw	r3, #1708	; 0x6ac
   13044:	f2c0 0302 	movt	r3, #2
   13048:	681b      	ldr	r3, [r3, #0]
   1304a:	f240 5ce0 	movw	ip, #1504	; 0x5e0
   1304e:	f2c0 0c02 	movt	ip, #2
   13052:	f8dc c000 	ldr.w	ip, [ip]
   13056:	46ee      	mov	lr, sp
   13058:	2400      	movs	r4, #0
   1305a:	f8ce 4000 	str.w	r4, [lr]
   1305e:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   13062:	2201      	movs	r2, #1
   13064:	9129      	str	r1, [sp, #164]	; 0xa4
   13066:	4619      	mov	r1, r3
   13068:	4663      	mov	r3, ip
   1306a:	f7f5 fd17 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1306e:	e7ff      	b.n	13070 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x690>
   13070:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
   13074:	90fd      	str	r0, [sp, #1012]	; 0x3f4
   13076:	f20d 4004 	addw	r0, sp, #1028	; 0x404
   1307a:	90fe      	str	r0, [sp, #1016]	; 0x3f8
   1307c:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   13080:	90ff      	str	r0, [sp, #1020]	; 0x3fc
   13082:	98fd      	ldr	r0, [sp, #1012]	; 0x3f4
   13084:	f8cd 0570 	str.w	r0, [sp, #1392]	; 0x570
   13088:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
   1308a:	f8cd 1574 	str.w	r1, [sp, #1396]	; 0x574
   1308e:	9aff      	ldr	r2, [sp, #1020]	; 0x3fc
   13090:	f8cd 2578 	str.w	r2, [sp, #1400]	; 0x578
   13094:	f249 23eb 	movw	r3, #37611	; 0x92eb
   13098:	f2c0 0300 	movt	r3, #0
   1309c:	9128      	str	r1, [sp, #160]	; 0xa0
   1309e:	4619      	mov	r1, r3
   130a0:	9227      	str	r2, [sp, #156]	; 0x9c
   130a2:	f7f6 f95a 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   130a6:	9026      	str	r0, [sp, #152]	; 0x98
   130a8:	9125      	str	r1, [sp, #148]	; 0x94
   130aa:	e7ff      	b.n	130ac <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6cc>
   130ac:	f249 21eb 	movw	r1, #37611	; 0x92eb
   130b0:	f2c0 0100 	movt	r1, #0
   130b4:	9828      	ldr	r0, [sp, #160]	; 0xa0
   130b6:	f7f6 f950 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   130ba:	9024      	str	r0, [sp, #144]	; 0x90
   130bc:	9123      	str	r1, [sp, #140]	; 0x8c
   130be:	e7ff      	b.n	130c0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6e0>
   130c0:	f647 71a7 	movw	r1, #32679	; 0x7fa7
   130c4:	f2c0 0101 	movt	r1, #1
   130c8:	9827      	ldr	r0, [sp, #156]	; 0x9c
   130ca:	f7f6 f985 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   130ce:	9022      	str	r0, [sp, #136]	; 0x88
   130d0:	9121      	str	r1, [sp, #132]	; 0x84
   130d2:	e7ff      	b.n	130d4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6f4>
   130d4:	9826      	ldr	r0, [sp, #152]	; 0x98
   130d6:	90f7      	str	r0, [sp, #988]	; 0x3dc
   130d8:	9925      	ldr	r1, [sp, #148]	; 0x94
   130da:	91f8      	str	r1, [sp, #992]	; 0x3e0
   130dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
   130de:	92f9      	str	r2, [sp, #996]	; 0x3e4
   130e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   130e2:	93fa      	str	r3, [sp, #1000]	; 0x3e8
   130e4:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
   130e8:	f8cd c3ec 	str.w	ip, [sp, #1004]	; 0x3ec
   130ec:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
   130f0:	f8cd e3f0 	str.w	lr, [sp, #1008]	; 0x3f0
   130f4:	466c      	mov	r4, sp
   130f6:	2503      	movs	r5, #3
   130f8:	6025      	str	r5, [r4, #0]
   130fa:	a8f1      	add	r0, sp, #964	; 0x3c4
   130fc:	abf7      	add	r3, sp, #988	; 0x3dc
   130fe:	9929      	ldr	r1, [sp, #164]	; 0xa4
   13100:	462a      	mov	r2, r5
   13102:	f7f5 fccb 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13106:	e7ff      	b.n	13108 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x728>
   13108:	f240 60b0 	movw	r0, #1712	; 0x6b0
   1310c:	f2c0 0002 	movt	r0, #2
   13110:	f004 fc5b 	bl	179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13114:	9020      	str	r0, [sp, #128]	; 0x80
   13116:	e7ff      	b.n	13118 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x738>
   13118:	a8f1      	add	r0, sp, #964	; 0x3c4
   1311a:	9920      	ldr	r1, [sp, #128]	; 0x80
   1311c:	f004 fc92 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13120:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13122:	f240 5068 	movw	r0, #1384	; 0x568
   13126:	f2c0 0002 	movt	r0, #2
   1312a:	6800      	ldr	r0, [r0, #0]
   1312c:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
   13130:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
   13134:	f8cd 0428 	str.w	r0, [sp, #1064]	; 0x428
   13138:	f8dd 0424 	ldr.w	r0, [sp, #1060]	; 0x424
   1313c:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
   13140:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   13144:	f8cd 1580 	str.w	r1, [sp, #1408]	; 0x580
   13148:	6802      	ldr	r2, [r0, #0]
   1314a:	680b      	ldr	r3, [r1, #0]
   1314c:	429a      	cmp	r2, r3
   1314e:	901f      	str	r0, [sp, #124]	; 0x7c
   13150:	911e      	str	r1, [sp, #120]	; 0x78
   13152:	d10a      	bne.n	1316a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x78a>
   13154:	e7ff      	b.n	13156 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x776>

    //  Create the Semaphore that will throttle the number of queued SPI requests
    let rc = unsafe { os::os_sem_init(&mut SPI_THROTTLE_SEM, 2) };  //  Only max 2 requests queued, the next request will block
   13156:	f646 2084 	movw	r0, #27268	; 0x6a84
   1315a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1315e:	2102      	movs	r1, #2
   13160:	f008 fc3e 	bl	1b9e0 <os_sem_init>
   13164:	f8cd 0488 	str.w	r0, [sp, #1160]	; 0x488
   13168:	e088      	b.n	1327c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x89c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   1316a:	f240 50c0 	movw	r0, #1472	; 0x5c0
   1316e:	f2c0 0002 	movt	r0, #2
   13172:	6801      	ldr	r1, [r0, #0]
   13174:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13176:	f8cd 0468 	str.w	r0, [sp, #1128]	; 0x468
   1317a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1317c:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
   13180:	f240 63d8 	movw	r3, #1752	; 0x6d8
   13184:	f2c0 0302 	movt	r3, #2
   13188:	681b      	ldr	r3, [r3, #0]
   1318a:	f240 5ce0 	movw	ip, #1504	; 0x5e0
   1318e:	f2c0 0c02 	movt	ip, #2
   13192:	f8dc c000 	ldr.w	ip, [ip]
   13196:	46ee      	mov	lr, sp
   13198:	2400      	movs	r4, #0
   1319a:	f8ce 4000 	str.w	r4, [lr]
   1319e:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   131a2:	2201      	movs	r2, #1
   131a4:	911d      	str	r1, [sp, #116]	; 0x74
   131a6:	4619      	mov	r1, r3
   131a8:	4663      	mov	r3, ip
   131aa:	f7f5 fc77 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   131ae:	e7ff      	b.n	131b0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x7d0>
   131b0:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
   131b4:	f8cd 045c 	str.w	r0, [sp, #1116]	; 0x45c
   131b8:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
   131bc:	f8cd 0460 	str.w	r0, [sp, #1120]	; 0x460
   131c0:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   131c4:	f8cd 0464 	str.w	r0, [sp, #1124]	; 0x464
   131c8:	f8dd 045c 	ldr.w	r0, [sp, #1116]	; 0x45c
   131cc:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
   131d0:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   131d4:	f8cd 1588 	str.w	r1, [sp, #1416]	; 0x588
   131d8:	f8dd 2464 	ldr.w	r2, [sp, #1124]	; 0x464
   131dc:	f8cd 258c 	str.w	r2, [sp, #1420]	; 0x58c
   131e0:	f249 333f 	movw	r3, #37695	; 0x933f
   131e4:	f2c0 0300 	movt	r3, #0
   131e8:	911c      	str	r1, [sp, #112]	; 0x70
   131ea:	4619      	mov	r1, r3
   131ec:	921b      	str	r2, [sp, #108]	; 0x6c
   131ee:	f7f6 f8de 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   131f2:	901a      	str	r0, [sp, #104]	; 0x68
   131f4:	9119      	str	r1, [sp, #100]	; 0x64
   131f6:	e7ff      	b.n	131f8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x818>
   131f8:	f249 313f 	movw	r1, #37695	; 0x933f
   131fc:	f2c0 0100 	movt	r1, #0
   13200:	981c      	ldr	r0, [sp, #112]	; 0x70
   13202:	f7f6 f8d4 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13206:	9018      	str	r0, [sp, #96]	; 0x60
   13208:	9117      	str	r1, [sp, #92]	; 0x5c
   1320a:	e7ff      	b.n	1320c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x82c>
   1320c:	f647 71a7 	movw	r1, #32679	; 0x7fa7
   13210:	f2c0 0101 	movt	r1, #1
   13214:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13216:	f7f6 f8df 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1321a:	9016      	str	r0, [sp, #88]	; 0x58
   1321c:	9115      	str	r1, [sp, #84]	; 0x54
   1321e:	e7ff      	b.n	13220 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x840>
   13220:	981a      	ldr	r0, [sp, #104]	; 0x68
   13222:	f8cd 0444 	str.w	r0, [sp, #1092]	; 0x444
   13226:	9919      	ldr	r1, [sp, #100]	; 0x64
   13228:	f8cd 1448 	str.w	r1, [sp, #1096]	; 0x448
   1322c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1322e:	f8cd 244c 	str.w	r2, [sp, #1100]	; 0x44c
   13232:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13234:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
   13238:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
   1323c:	f8cd c454 	str.w	ip, [sp, #1108]	; 0x454
   13240:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
   13244:	f8cd e458 	str.w	lr, [sp, #1112]	; 0x458
   13248:	466c      	mov	r4, sp
   1324a:	2503      	movs	r5, #3
   1324c:	6025      	str	r5, [r4, #0]
   1324e:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   13252:	f20d 4344 	addw	r3, sp, #1092	; 0x444
   13256:	991d      	ldr	r1, [sp, #116]	; 0x74
   13258:	462a      	mov	r2, r5
   1325a:	f7f5 fc1f 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1325e:	e7ff      	b.n	13260 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x880>
   13260:	f240 60dc 	movw	r0, #1756	; 0x6dc
   13264:	f2c0 0002 	movt	r0, #2
   13268:	f004 fbaf 	bl	179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1326c:	9014      	str	r0, [sp, #80]	; 0x50
   1326e:	e7ff      	b.n	13270 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x890>
   13270:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   13274:	9914      	ldr	r1, [sp, #80]	; 0x50
   13276:	f004 fbe5 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1327a:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   1327c:	f240 5068 	movw	r0, #1384	; 0x568
   13280:	f2c0 0002 	movt	r0, #2
   13284:	6800      	ldr	r0, [r0, #0]
   13286:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   1328a:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
   1328e:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
   13292:	f8dd 048c 	ldr.w	r0, [sp, #1164]	; 0x48c
   13296:	f8cd 0590 	str.w	r0, [sp, #1424]	; 0x590
   1329a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   1329e:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
   132a2:	6802      	ldr	r2, [r0, #0]
   132a4:	680b      	ldr	r3, [r1, #0]
   132a6:	429a      	cmp	r2, r3
   132a8:	9013      	str	r0, [sp, #76]	; 0x4c
   132aa:	9112      	str	r1, [sp, #72]	; 0x48
   132ac:	d125      	bne.n	132fa <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x91a>
   132ae:	e7ff      	b.n	132b0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x8d0>
    
    //  Create a task to send SPI requests sequentially from the SPI Event Queue and Mbuf Queue
    os::task_init(                //  Create a new task and start it...
        unsafe { &mut SPI_TASK }, //  Task object will be saved here
        &init_strn!( "spi" ),     //  Name of task
   132b0:	f240 7008 	movw	r0, #1800	; 0x708
   132b4:	f2c0 0002 	movt	r0, #2
   132b8:	6801      	ldr	r1, [r0, #0]
        Some( spi_task_func ),    //  Function to execute when task starts
   132ba:	f243 405b 	movw	r0, #13403	; 0x345b
   132be:	f2c0 0001 	movt	r0, #1
   132c2:	f8cd 04f4 	str.w	r0, [sp, #1268]	; 0x4f4
    os::task_init(                //  Create a new task and start it...
   132c6:	f8dd 24f4 	ldr.w	r2, [sp, #1268]	; 0x4f4
   132ca:	4668      	mov	r0, sp
   132cc:	f44f 7380 	mov.w	r3, #256	; 0x100
   132d0:	6103      	str	r3, [r0, #16]
   132d2:	60c3      	str	r3, [r0, #12]
   132d4:	f646 3304 	movw	r3, #27396	; 0x6b04
   132d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   132dc:	6083      	str	r3, [r0, #8]
   132de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   132e2:	6043      	str	r3, [r0, #4]
   132e4:	230a      	movs	r3, #10
   132e6:	6003      	str	r3, [r0, #0]
   132e8:	f646 20b4 	movw	r0, #27316	; 0x6ab4
   132ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
   132f0:	2300      	movs	r3, #0
   132f2:	f7f5 fccd 	bl	8c90 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
   132f6:	9011      	str	r0, [sp, #68]	; 0x44
   132f8:	e088      	b.n	1340c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   132fa:	f240 50c0 	movw	r0, #1472	; 0x5c0
   132fe:	f2c0 0002 	movt	r0, #2
   13302:	6801      	ldr	r1, [r0, #0]
   13304:	9813      	ldr	r0, [sp, #76]	; 0x4c
   13306:	f8cd 04d0 	str.w	r0, [sp, #1232]	; 0x4d0
   1330a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1330c:	f8cd 24d4 	str.w	r2, [sp, #1236]	; 0x4d4
   13310:	f240 63d8 	movw	r3, #1752	; 0x6d8
   13314:	f2c0 0302 	movt	r3, #2
   13318:	681b      	ldr	r3, [r3, #0]
   1331a:	f240 5ce0 	movw	ip, #1504	; 0x5e0
   1331e:	f2c0 0c02 	movt	ip, #2
   13322:	f8dc c000 	ldr.w	ip, [ip]
   13326:	46ee      	mov	lr, sp
   13328:	2400      	movs	r4, #0
   1332a:	f8ce 4000 	str.w	r4, [lr]
   1332e:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   13332:	2201      	movs	r2, #1
   13334:	9110      	str	r1, [sp, #64]	; 0x40
   13336:	4619      	mov	r1, r3
   13338:	4663      	mov	r3, ip
   1333a:	f7f5 fbaf 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1333e:	e7ff      	b.n	13340 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x960>
   13340:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   13344:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
   13348:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
   1334c:	f8cd 04c8 	str.w	r0, [sp, #1224]	; 0x4c8
   13350:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   13354:	f8cd 04cc 	str.w	r0, [sp, #1228]	; 0x4cc
   13358:	f8dd 04c4 	ldr.w	r0, [sp, #1220]	; 0x4c4
   1335c:	f8cd 0598 	str.w	r0, [sp, #1432]	; 0x598
   13360:	f8dd 14c8 	ldr.w	r1, [sp, #1224]	; 0x4c8
   13364:	f8cd 159c 	str.w	r1, [sp, #1436]	; 0x59c
   13368:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
   1336c:	f8cd 25a0 	str.w	r2, [sp, #1440]	; 0x5a0
   13370:	f249 333f 	movw	r3, #37695	; 0x933f
   13374:	f2c0 0300 	movt	r3, #0
   13378:	910f      	str	r1, [sp, #60]	; 0x3c
   1337a:	4619      	mov	r1, r3
   1337c:	920e      	str	r2, [sp, #56]	; 0x38
   1337e:	f7f6 f816 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13382:	900d      	str	r0, [sp, #52]	; 0x34
   13384:	910c      	str	r1, [sp, #48]	; 0x30
   13386:	e7ff      	b.n	13388 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9a8>
   13388:	f249 313f 	movw	r1, #37695	; 0x933f
   1338c:	f2c0 0100 	movt	r1, #0
   13390:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13392:	f7f6 f80c 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13396:	900b      	str	r0, [sp, #44]	; 0x2c
   13398:	910a      	str	r1, [sp, #40]	; 0x28
   1339a:	e7ff      	b.n	1339c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9bc>
   1339c:	f647 71a7 	movw	r1, #32679	; 0x7fa7
   133a0:	f2c0 0101 	movt	r1, #1
   133a4:	980e      	ldr	r0, [sp, #56]	; 0x38
   133a6:	f7f6 f817 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   133aa:	9009      	str	r0, [sp, #36]	; 0x24
   133ac:	9108      	str	r1, [sp, #32]
   133ae:	e7ff      	b.n	133b0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9d0>
   133b0:	980d      	ldr	r0, [sp, #52]	; 0x34
   133b2:	f8cd 04ac 	str.w	r0, [sp, #1196]	; 0x4ac
   133b6:	990c      	ldr	r1, [sp, #48]	; 0x30
   133b8:	f8cd 14b0 	str.w	r1, [sp, #1200]	; 0x4b0
   133bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   133be:	f8cd 24b4 	str.w	r2, [sp, #1204]	; 0x4b4
   133c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   133c4:	f8cd 34b8 	str.w	r3, [sp, #1208]	; 0x4b8
   133c8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   133cc:	f8cd c4bc 	str.w	ip, [sp, #1212]	; 0x4bc
   133d0:	f8dd e020 	ldr.w	lr, [sp, #32]
   133d4:	f8cd e4c0 	str.w	lr, [sp, #1216]	; 0x4c0
   133d8:	466c      	mov	r4, sp
   133da:	2503      	movs	r5, #3
   133dc:	6025      	str	r5, [r4, #0]
   133de:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   133e2:	f20d 43ac 	addw	r3, sp, #1196	; 0x4ac
   133e6:	9910      	ldr	r1, [sp, #64]	; 0x40
   133e8:	462a      	mov	r2, r5
   133ea:	f7f5 fb57 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   133ee:	e7ff      	b.n	133f0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa10>
   133f0:	f240 60ec 	movw	r0, #1772	; 0x6ec
   133f4:	f2c0 0002 	movt	r0, #2
   133f8:	f004 fae7 	bl	179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   133fc:	9007      	str	r0, [sp, #28]
   133fe:	e7ff      	b.n	13400 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa20>
   13400:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13404:	9907      	ldr	r1, [sp, #28]
   13406:	f004 fb1d 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1340a:	defe      	udf	#254	; 0xfe
    os::task_init(                //  Create a new task and start it...
   1340c:	9811      	ldr	r0, [sp, #68]	; 0x44
   1340e:	f7f5 fbb3 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   13412:	f8cd 04f0 	str.w	r0, [sp, #1264]	; 0x4f0
   13416:	e7ff      	b.n	13418 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa38>
        NULL,  //  Argument to be passed to above function
        10,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut SPI_TASK_STACK }, //  Stack space for the task
        SPI_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
   13418:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   1341c:	1e41      	subs	r1, r0, #1
   1341e:	bf18      	it	ne
   13420:	2101      	movne	r1, #1
   13422:	2801      	cmp	r0, #1
   13424:	d001      	beq.n	1342a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa4a>
   13426:	e7ff      	b.n	13428 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa48>
   13428:	e005      	b.n	13436 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa56>
   1342a:	2000      	movs	r0, #0
    Ok(())
   1342c:	9069      	str	r0, [sp, #420]	; 0x1a4
   1342e:	2001      	movs	r0, #1
   13430:	9069      	str	r0, [sp, #420]	; 0x1a4
}
   13432:	e008      	b.n	13446 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>
    os::task_init(                //  Create a new task and start it...
   13434:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
   13436:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   1343a:	f8cd 05a4 	str.w	r0, [sp, #1444]	; 0x5a4
   1343e:	f7ff fa17 	bl	12870 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   13442:	9006      	str	r0, [sp, #24]
   13444:	e003      	b.n	1344e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa6e>
}
   13446:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   13448:	f50d 6db5 	add.w	sp, sp, #1448	; 0x5a8
   1344c:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;                               //  `?` means check for error
   1344e:	9806      	ldr	r0, [sp, #24]
   13450:	f7f5 fb86 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13454:	9069      	str	r0, [sp, #420]	; 0x1a4
   13456:	e7ff      	b.n	13458 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa78>
   13458:	e7f5      	b.n	13446 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>

0001345a <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E>:

/// SPI Task Function.  Execute sequentially each SPI request posted to our Event Queue.  When there are no requests to process, block until one arrives.
extern "C" fn spi_task_func(_arg: Ptr) {
   1345a:	b580      	push	{r7, lr}
   1345c:	b082      	sub	sp, #8
   1345e:	9001      	str	r0, [sp, #4]
    loop {
   13460:	e7ff      	b.n	13462 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>
        //  Forever read SPI requests and execute them. Will call spi_event_callback().
        os::eventq_run(
   13462:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   13466:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1346a:	f7f5 fbf8 	bl	8c5e <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
   1346e:	9000      	str	r0, [sp, #0]
   13470:	e7ff      	b.n	13472 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x18>
   13472:	f240 710c 	movw	r1, #1804	; 0x70c
   13476:	f2c0 0102 	movt	r1, #2
   1347a:	f240 7318 	movw	r3, #1816	; 0x718
   1347e:	f2c0 0302 	movt	r3, #2
   13482:	220b      	movs	r2, #11
   13484:	9800      	ldr	r0, [sp, #0]
   13486:	f7f5 fb38 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1348a:	e7ff      	b.n	1348c <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x32>
            unsafe { &mut SPI_EVENT_QUEUE }
        ).expect("eventq fail");

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
   1348c:	f007 f9e2 	bl	1a854 <hal_watchdog_tickle>
   13490:	e7ff      	b.n	13492 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x38>
    loop {
   13492:	e7e6      	b.n	13462 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>

00013494 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>:
    }
}

/// Set pending request for non-blocking SPI write for Command Byte. Returns without waiting for write to complete.
pub fn spi_noblock_write_command(cmd: u8) -> MynewtResult<()> {
   13494:	b580      	push	{r7, lr}
   13496:	b08c      	sub	sp, #48	; 0x30
   13498:	4601      	mov	r1, r0
   1349a:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    //  If there is a pending Command Byte, enqueue it.
    spi_noblock_write_flush() ? ;
   1349e:	9104      	str	r1, [sp, #16]
   134a0:	f000 f8d4 	bl	1364c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   134a4:	9003      	str	r0, [sp, #12]
   134a6:	e7ff      	b.n	134a8 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x14>
   134a8:	9803      	ldr	r0, [sp, #12]
   134aa:	f7f5 fb65 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   134ae:	9006      	str	r0, [sp, #24]
   134b0:	e7ff      	b.n	134b2 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x1e>
   134b2:	9806      	ldr	r0, [sp, #24]
   134b4:	1e41      	subs	r1, r0, #1
   134b6:	bf18      	it	ne
   134b8:	2101      	movne	r1, #1
   134ba:	2801      	cmp	r0, #1
   134bc:	d001      	beq.n	134c2 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2e>
   134be:	e7ff      	b.n	134c0 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2c>
   134c0:	e00c      	b.n	134dc <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x48>
    //  Set the pending Command Byte.
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   134c2:	f644 2070 	movw	r0, #19056	; 0x4a70
   134c6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   134ca:	9904      	ldr	r1, [sp, #16]
   134cc:	f7ff f9a4 	bl	12818 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>
   134d0:	f88d 101d 	strb.w	r1, [sp, #29]
   134d4:	f88d 001c 	strb.w	r0, [sp, #28]
   134d8:	e00f      	b.n	134fa <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x66>
    spi_noblock_write_flush() ? ;
   134da:	defe      	udf	#254	; 0xfe
   134dc:	9806      	ldr	r0, [sp, #24]
   134de:	900b      	str	r0, [sp, #44]	; 0x2c
   134e0:	f7ff f9c6 	bl	12870 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   134e4:	9002      	str	r0, [sp, #8]
   134e6:	e002      	b.n	134ee <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x5a>
        return Err(MynewtError::SYS_EINVAL);
    }
    Ok(())
}
   134e8:	9805      	ldr	r0, [sp, #20]
   134ea:	b00c      	add	sp, #48	; 0x30
   134ec:	bd80      	pop	{r7, pc}
    spi_noblock_write_flush() ? ;
   134ee:	9802      	ldr	r0, [sp, #8]
   134f0:	f7f5 fb36 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   134f4:	9005      	str	r0, [sp, #20]
   134f6:	e7ff      	b.n	134f8 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x64>
   134f8:	e7f6      	b.n	134e8 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   134fa:	a807      	add	r0, sp, #28
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   134fc:	f7f5 fb24 	bl	8b48 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>
   13500:	9001      	str	r0, [sp, #4]
   13502:	e7ff      	b.n	13504 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x70>
   13504:	9801      	ldr	r0, [sp, #4]
   13506:	07c1      	lsls	r1, r0, #31
   13508:	2900      	cmp	r1, #0
   1350a:	d105      	bne.n	13518 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x84>
   1350c:	e7ff      	b.n	1350e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x7a>
   1350e:	2000      	movs	r0, #0
    Ok(())
   13510:	9005      	str	r0, [sp, #20]
   13512:	2001      	movs	r0, #1
   13514:	9005      	str	r0, [sp, #20]
}
   13516:	e7e7      	b.n	134e8 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   13518:	f06f 0001 	mvn.w	r0, #1
        return Err(MynewtError::SYS_EINVAL);
   1351c:	9008      	str	r0, [sp, #32]
   1351e:	9808      	ldr	r0, [sp, #32]
   13520:	9005      	str	r0, [sp, #20]
   13522:	e7e1      	b.n	134e8 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>

00013524 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>:

/// Set pending request for non-blocking SPI write for Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_data(data: &[u8]) -> MynewtResult<()> {
   13524:	b580      	push	{r7, lr}
   13526:	b094      	sub	sp, #80	; 0x50
   13528:	9010      	str	r0, [sp, #64]	; 0x40
   1352a:	9111      	str	r1, [sp, #68]	; 0x44
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   1352c:	f644 2270 	movw	r2, #19056	; 0x4a70
   13530:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13534:	900d      	str	r0, [sp, #52]	; 0x34
   13536:	4610      	mov	r0, r2
   13538:	910c      	str	r1, [sp, #48]	; 0x30
   1353a:	f7ff f953 	bl	127e4 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   1353e:	900b      	str	r0, [sp, #44]	; 0x2c
   13540:	910a      	str	r1, [sp, #40]	; 0x28
   13542:	e7ff      	b.n	13544 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x20>
   13544:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13546:	990a      	ldr	r1, [sp, #40]	; 0x28
   13548:	f7fe fd07 	bl	11f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1354c:	9009      	str	r0, [sp, #36]	; 0x24
   1354e:	e7ff      	b.n	13550 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x2c>
   13550:	9809      	ldr	r0, [sp, #36]	; 0x24
   13552:	2800      	cmp	r0, #0
   13554:	d009      	beq.n	1356a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x46>
   13556:	e7ff      	b.n	13558 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x34>
    //  if unsafe { PENDING_DATA.len() + data.len() > PENDING_DATA.capacity() } { cortex_m::asm::bkpt(); } ////
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   13558:	f644 2078 	movw	r0, #19064	; 0x4a78
   1355c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13560:	f7ff f934 	bl	127cc <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   13564:	9008      	str	r0, [sp, #32]
   13566:	9107      	str	r1, [sp, #28]
   13568:	e00b      	b.n	13582 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x5e>
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   1356a:	f240 7028 	movw	r0, #1832	; 0x728
   1356e:	f2c0 0002 	movt	r0, #2
   13572:	f240 7234 	movw	r2, #1844	; 0x734
   13576:	f2c0 0202 	movt	r2, #2
   1357a:	210b      	movs	r1, #11
   1357c:	f004 fa2c 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13580:	defe      	udf	#254	; 0xfe
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   13582:	9808      	ldr	r0, [sp, #32]
   13584:	9907      	ldr	r1, [sp, #28]
   13586:	f7fe fce8 	bl	11f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1358a:	9006      	str	r0, [sp, #24]
   1358c:	e7ff      	b.n	1358e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x6a>
   1358e:	980d      	ldr	r0, [sp, #52]	; 0x34
   13590:	990c      	ldr	r1, [sp, #48]	; 0x30
   13592:	f7fe fce2 	bl	11f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13596:	9005      	str	r0, [sp, #20]
   13598:	e7ff      	b.n	1359a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x76>
   1359a:	9806      	ldr	r0, [sp, #24]
   1359c:	9905      	ldr	r1, [sp, #20]
   1359e:	1842      	adds	r2, r0, r1
   135a0:	4613      	mov	r3, r2
   135a2:	4282      	cmp	r2, r0
   135a4:	9304      	str	r3, [sp, #16]
   135a6:	d345      	bcc.n	13634 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x110>
   135a8:	e7ff      	b.n	135aa <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x86>
   135aa:	f644 2078 	movw	r0, #19064	; 0x4a78
   135ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
   135b2:	f7ff f953 	bl	1285c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>
   135b6:	9003      	str	r0, [sp, #12]
   135b8:	e7ff      	b.n	135ba <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x96>
   135ba:	9804      	ldr	r0, [sp, #16]
   135bc:	9903      	ldr	r1, [sp, #12]
   135be:	4288      	cmp	r0, r1
   135c0:	d80a      	bhi.n	135d8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xb4>
   135c2:	e7ff      	b.n	135c4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa0>
    //  Append Data Bytes to Pending Data Bytes.
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   135c4:	f644 2078 	movw	r0, #19064	; 0x4a78
   135c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   135cc:	990d      	ldr	r1, [sp, #52]	; 0x34
   135ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   135d0:	f7ff f914 	bl	127fc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>
   135d4:	9002      	str	r0, [sp, #8]
   135d6:	e00b      	b.n	135f0 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xcc>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   135d8:	f240 707c 	movw	r0, #1916	; 0x77c
   135dc:	f2c0 0002 	movt	r0, #2
   135e0:	f240 7288 	movw	r2, #1928	; 0x788
   135e4:	f2c0 0202 	movt	r2, #2
   135e8:	210c      	movs	r1, #12
   135ea:	f004 f9f5 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   135ee:	defe      	udf	#254	; 0xfe
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   135f0:	9802      	ldr	r0, [sp, #8]
   135f2:	f000 0001 	and.w	r0, r0, #1
   135f6:	f7f5 fab9 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   135fa:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   135fe:	e7ff      	b.n	13600 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xdc>
   13600:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   13604:	07c1      	lsls	r1, r0, #31
   13606:	2900      	cmp	r1, #0
   13608:	d001      	beq.n	1360e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xea>
   1360a:	e7ff      	b.n	1360c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xe8>
   1360c:	e005      	b.n	1361a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xf6>
   1360e:	2000      	movs	r0, #0
    Ok(())
   13610:	900e      	str	r0, [sp, #56]	; 0x38
   13612:	2001      	movs	r0, #1
   13614:	900e      	str	r0, [sp, #56]	; 0x38
}
   13616:	e004      	b.n	13622 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13618:	defe      	udf	#254	; 0xfe
   1361a:	f7f5 fa34 	bl	8a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   1361e:	9001      	str	r0, [sp, #4]
   13620:	e002      	b.n	13628 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x104>
}
   13622:	980e      	ldr	r0, [sp, #56]	; 0x38
   13624:	b014      	add	sp, #80	; 0x50
   13626:	bd80      	pop	{r7, pc}
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13628:	9801      	ldr	r0, [sp, #4]
   1362a:	f7f5 fa99 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   1362e:	900e      	str	r0, [sp, #56]	; 0x38
   13630:	e7ff      	b.n	13632 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x10e>
   13632:	e7f6      	b.n	13622 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   13634:	f240 7060 	movw	r0, #1888	; 0x760
   13638:	f2c0 0002 	movt	r0, #2
   1363c:	f240 7244 	movw	r2, #1860	; 0x744
   13640:	f2c0 0202 	movt	r2, #2
   13644:	211c      	movs	r1, #28
   13646:	f004 f9c7 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1364a:	defe      	udf	#254	; 0xfe

0001364c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>:

/// Enqueue any pending request for non-blocking SPI write for Command Byte and Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_flush() -> MynewtResult<()> {
   1364c:	b580      	push	{r7, lr}
   1364e:	b090      	sub	sp, #64	; 0x40
    //  If no pending request, quit.
    if unsafe { PENDING_CMD.len() } == 0 &&
   13650:	f644 2070 	movw	r0, #19056	; 0x4a70
   13654:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13658:	f7ff f8c4 	bl	127e4 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   1365c:	900b      	str	r0, [sp, #44]	; 0x2c
   1365e:	910a      	str	r1, [sp, #40]	; 0x28
   13660:	e016      	b.n	13690 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x44>
   13662:	2001      	movs	r0, #1
   13664:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   13668:	e00c      	b.n	13684 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
   1366a:	2000      	movs	r0, #0
   1366c:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   13670:	e008      	b.n	13684 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
        unsafe { PENDING_DATA.len() } == 0 {
   13672:	f644 2078 	movw	r0, #19064	; 0x4a78
   13676:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1367a:	f7ff f8a7 	bl	127cc <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   1367e:	9009      	str	r0, [sp, #36]	; 0x24
   13680:	9108      	str	r1, [sp, #32]
   13682:	e00f      	b.n	136a4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x58>
    if unsafe { PENDING_CMD.len() } == 0 &&
   13684:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   13688:	07c0      	lsls	r0, r0, #31
   1368a:	2800      	cmp	r0, #0
   1368c:	d11d      	bne.n	136ca <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x7e>
   1368e:	e013      	b.n	136b8 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x6c>
   13690:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13692:	990a      	ldr	r1, [sp, #40]	; 0x28
   13694:	f7fe fc61 	bl	11f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13698:	9007      	str	r0, [sp, #28]
   1369a:	e7ff      	b.n	1369c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x50>
   1369c:	9807      	ldr	r0, [sp, #28]
   1369e:	2800      	cmp	r0, #0
   136a0:	d0e7      	beq.n	13672 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x26>
   136a2:	e7e2      	b.n	1366a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        unsafe { PENDING_DATA.len() } == 0 {
   136a4:	9809      	ldr	r0, [sp, #36]	; 0x24
   136a6:	9908      	ldr	r1, [sp, #32]
   136a8:	f7fe fc57 	bl	11f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   136ac:	9006      	str	r0, [sp, #24]
   136ae:	e7ff      	b.n	136b0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x64>
    if unsafe { PENDING_CMD.len() } == 0 &&
   136b0:	9806      	ldr	r0, [sp, #24]
   136b2:	2800      	cmp	r0, #0
   136b4:	d0d5      	beq.n	13662 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x16>
   136b6:	e7d8      	b.n	1366a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        return Ok(());
    }
    //  Enqueue the pending SPI request into the Mbuf Queue
    if let Err(e) = spi_noblock_write(
        unsafe { PENDING_CMD[0] },  //  Command Byte
   136b8:	f644 2070 	movw	r0, #19056	; 0x4a70
   136bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   136c0:	f7ff f890 	bl	127e4 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   136c4:	9005      	str	r0, [sp, #20]
   136c6:	9104      	str	r1, [sp, #16]
   136c8:	e007      	b.n	136da <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x8e>
   136ca:	2000      	movs	r0, #0
        return Ok(());
   136cc:	900c      	str	r0, [sp, #48]	; 0x30
   136ce:	2001      	movs	r0, #1
   136d0:	900c      	str	r0, [sp, #48]	; 0x30
   136d2:	e7ff      	b.n	136d4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    }
    //  Else clear the pending request and return Ok.
    unsafe { PENDING_CMD.clear() };
    unsafe { PENDING_DATA.clear() };
    Ok(())
}
   136d4:	980c      	ldr	r0, [sp, #48]	; 0x30
   136d6:	b010      	add	sp, #64	; 0x40
   136d8:	bd80      	pop	{r7, pc}
        unsafe { PENDING_CMD[0] },  //  Command Byte
   136da:	9804      	ldr	r0, [sp, #16]
   136dc:	2800      	cmp	r0, #0
   136de:	d03f      	beq.n	13760 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x114>
   136e0:	e7ff      	b.n	136e2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x96>
   136e2:	9805      	ldr	r0, [sp, #20]
   136e4:	7801      	ldrb	r1, [r0, #0]
        unsafe { &PENDING_DATA }    //  Data Bytes
   136e6:	f644 2078 	movw	r0, #19064	; 0x4a78
   136ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
   136ee:	9103      	str	r1, [sp, #12]
   136f0:	f7ff f86c 	bl	127cc <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   136f4:	9002      	str	r0, [sp, #8]
   136f6:	9101      	str	r1, [sp, #4]
   136f8:	e7ff      	b.n	136fa <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xae>
    if let Err(e) = spi_noblock_write(
   136fa:	9803      	ldr	r0, [sp, #12]
   136fc:	9902      	ldr	r1, [sp, #8]
   136fe:	9a01      	ldr	r2, [sp, #4]
   13700:	f000 f837 	bl	13772 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>
   13704:	900e      	str	r0, [sp, #56]	; 0x38
   13706:	e7ff      	b.n	13708 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xbc>
   13708:	980e      	ldr	r0, [sp, #56]	; 0x38
   1370a:	2801      	cmp	r0, #1
   1370c:	d107      	bne.n	1371e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xd2>
   1370e:	e7ff      	b.n	13710 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xc4>
    unsafe { PENDING_CMD.clear() };
   13710:	f644 2070 	movw	r0, #19056	; 0x4a70
   13714:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13718:	f7ff f890 	bl	1283c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   1371c:	e014      	b.n	13748 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xfc>
    if let Err(e) = spi_noblock_write(
   1371e:	980e      	ldr	r0, [sp, #56]	; 0x38
   13720:	900f      	str	r0, [sp, #60]	; 0x3c
        unsafe { PENDING_CMD.clear() };
   13722:	f644 2170 	movw	r1, #19056	; 0x4a70
   13726:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1372a:	9000      	str	r0, [sp, #0]
   1372c:	4608      	mov	r0, r1
   1372e:	f7ff f885 	bl	1283c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   13732:	e7ff      	b.n	13734 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xe8>
        unsafe { PENDING_DATA.clear() };    
   13734:	f644 2078 	movw	r0, #19064	; 0x4a78
   13738:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1373c:	f7ff f886 	bl	1284c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   13740:	e7ff      	b.n	13742 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xf6>
        return Err(e);
   13742:	9800      	ldr	r0, [sp, #0]
   13744:	900c      	str	r0, [sp, #48]	; 0x30
   13746:	e7c5      	b.n	136d4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    unsafe { PENDING_DATA.clear() };
   13748:	f644 2078 	movw	r0, #19064	; 0x4a78
   1374c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13750:	f7ff f87c 	bl	1284c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   13754:	e7ff      	b.n	13756 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x10a>
   13756:	2000      	movs	r0, #0
    Ok(())
   13758:	900c      	str	r0, [sp, #48]	; 0x30
   1375a:	2001      	movs	r0, #1
   1375c:	900c      	str	r0, [sp, #48]	; 0x30
}
   1375e:	e7b9      	b.n	136d4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
        unsafe { PENDING_CMD[0] },  //  Command Byte
   13760:	f240 7098 	movw	r0, #1944	; 0x798
   13764:	f2c0 0002 	movt	r0, #2
   13768:	2100      	movs	r1, #0
   1376a:	9a04      	ldr	r2, [sp, #16]
   1376c:	f004 f94a 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   13770:	defe      	udf	#254	; 0xfe

00013772 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>:

/// Enqueue request for non-blocking SPI write. Returns without waiting for write to complete.
/// Request must have a Command Byte, followed by optional Data Bytes.
fn spi_noblock_write(cmd: u8, data: &[u8]) -> MynewtResult<()> {
   13772:	b580      	push	{r7, lr}
   13774:	b0a0      	sub	sp, #128	; 0x80
   13776:	4603      	mov	r3, r0
   13778:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   1377c:	9116      	str	r1, [sp, #88]	; 0x58
   1377e:	9217      	str	r2, [sp, #92]	; 0x5c
   13780:	f247 5030 	movw	r0, #30000	; 0x7530
    console::print("spi data "); ////
    console::dump(data.as_ptr(), data.len() as u32); console::print("\n"); ////
    console::flush(); */

    //  Throttle the number of queued SPI requests.
    let timeout = 30_000;
   13784:	9018      	str	r0, [sp, #96]	; 0x60
   13786:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   1378a:	fba0 0c0c 	umull	r0, ip, r0, ip
   1378e:	f1bc 0f00 	cmp.w	ip, #0
   13792:	920f      	str	r2, [sp, #60]	; 0x3c
   13794:	910e      	str	r1, [sp, #56]	; 0x38
   13796:	900d      	str	r0, [sp, #52]	; 0x34
   13798:	f040 80c8 	bne.w	1392c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ba>
   1379c:	e7ff      	b.n	1379e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x2c>
   1379e:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   137a2:	f2c1 0062 	movt	r0, #4194	; 0x1062
   137a6:	990d      	ldr	r1, [sp, #52]	; 0x34
   137a8:	fba1 0200 	umull	r0, r2, r1, r0
   137ac:	0991      	lsrs	r1, r2, #6
   137ae:	f646 2284 	movw	r2, #27268	; 0x6a84
   137b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   137b6:	900c      	str	r0, [sp, #48]	; 0x30
   137b8:	4610      	mov	r0, r2
   137ba:	f008 f94b 	bl	1ba54 <os_sem_pend>
   137be:	e7ff      	b.n	137c0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x4e>

    //  Allocate a new mbuf chain to copy the data to be sent.
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   137c0:	980e      	ldr	r0, [sp, #56]	; 0x38
   137c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   137c4:	f7fe fbc9 	bl	11f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   137c8:	900b      	str	r0, [sp, #44]	; 0x2c
   137ca:	e7ff      	b.n	137cc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x5a>
   137cc:	2001      	movs	r0, #1
   137ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
   137d0:	fa10 f081 	uxtah	r0, r0, r1
   137d4:	b282      	uxth	r2, r0
   137d6:	4603      	mov	r3, r0
   137d8:	4282      	cmp	r2, r0
   137da:	930a      	str	r3, [sp, #40]	; 0x28
   137dc:	f040 80b2 	bne.w	13944 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1d2>
   137e0:	e7ff      	b.n	137e2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x70>
   137e2:	980a      	ldr	r0, [sp, #40]	; 0x28
   137e4:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    let mbuf = unsafe { os::os_msys_get_pkthdr(len, 0) };
   137e8:	b280      	uxth	r0, r0
   137ea:	2100      	movs	r1, #0
   137ec:	f007 fe40 	bl	1b470 <os_msys_get_pkthdr>
   137f0:	4601      	mov	r1, r0
   137f2:	901a      	str	r0, [sp, #104]	; 0x68
   137f4:	9109      	str	r1, [sp, #36]	; 0x24
   137f6:	e7ff      	b.n	137f8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x86>
    if mbuf.is_null() {  //  If out of memory, quit.
   137f8:	9809      	ldr	r0, [sp, #36]	; 0x24
   137fa:	f000 ff17 	bl	1462c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   137fe:	9008      	str	r0, [sp, #32]
   13800:	e7ff      	b.n	13802 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x90>
   13802:	9808      	ldr	r0, [sp, #32]
   13804:	07c1      	lsls	r1, r0, #31
   13806:	2900      	cmp	r1, #0
   13808:	d106      	bne.n	13818 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xa6>
   1380a:	e7ff      	b.n	1380c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x9a>
   1380c:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    }

    //  Append the Command Byte to the mbuf chain.
    let rc = unsafe { os::os_mbuf_append(
        mbuf, 
        core::mem::transmute(&cmd), 
   13810:	901b      	str	r0, [sp, #108]	; 0x6c
   13812:	991b      	ldr	r1, [sp, #108]	; 0x6c
   13814:	9107      	str	r1, [sp, #28]
   13816:	e010      	b.n	1383a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc8>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   13818:	f646 2084 	movw	r0, #27268	; 0x6a84
   1381c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13820:	f008 f8e6 	bl	1b9f0 <os_sem_release>
   13824:	e7ff      	b.n	13826 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xb4>
   13826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   1382a:	9012      	str	r0, [sp, #72]	; 0x48
   1382c:	9812      	ldr	r0, [sp, #72]	; 0x48
   1382e:	9011      	str	r0, [sp, #68]	; 0x44
   13830:	e002      	b.n	13838 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
        return Err(MynewtError::SYS_EUNKNOWN); 
    }
    Ok(())
}
   13832:	9811      	ldr	r0, [sp, #68]	; 0x44
   13834:	b020      	add	sp, #128	; 0x80
   13836:	bd80      	pop	{r7, pc}
        return Err(MynewtError::SYS_ENOMEM); 
   13838:	e7fb      	b.n	13832 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
   1383a:	2201      	movs	r2, #1
    let rc = unsafe { os::os_mbuf_append(
   1383c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1383e:	9907      	ldr	r1, [sp, #28]
   13840:	f007 fc6e 	bl	1b120 <os_mbuf_append>
   13844:	4601      	mov	r1, r0
   13846:	901c      	str	r0, [sp, #112]	; 0x70
   13848:	9106      	str	r1, [sp, #24]
   1384a:	e7ff      	b.n	1384c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xda>
    if rc != 0 {  //  If out of memory, quit.
   1384c:	9806      	ldr	r0, [sp, #24]
   1384e:	2800      	cmp	r0, #0
   13850:	d106      	bne.n	13860 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xee>
   13852:	e7ff      	b.n	13854 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xe2>
        core::mem::transmute(data.as_ptr()), 
   13854:	980e      	ldr	r0, [sp, #56]	; 0x38
   13856:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13858:	f7fe fb87 	bl	11f6a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   1385c:	9005      	str	r0, [sp, #20]
   1385e:	e011      	b.n	13884 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x112>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   13860:	9809      	ldr	r0, [sp, #36]	; 0x24
   13862:	f007 fc41 	bl	1b0e8 <os_mbuf_free_chain>
   13866:	e7ff      	b.n	13868 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xf6>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   13868:	f646 2084 	movw	r0, #27268	; 0x6a84
   1386c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13870:	f008 f8be 	bl	1b9f0 <os_sem_release>
   13874:	e7ff      	b.n	13876 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x104>
   13876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   1387a:	9013      	str	r0, [sp, #76]	; 0x4c
   1387c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1387e:	9011      	str	r0, [sp, #68]	; 0x44
   13880:	e7ff      	b.n	13882 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
   13882:	e7d9      	b.n	13838 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        core::mem::transmute(data.as_ptr()), 
   13884:	9805      	ldr	r0, [sp, #20]
   13886:	901d      	str	r0, [sp, #116]	; 0x74
   13888:	991d      	ldr	r1, [sp, #116]	; 0x74
   1388a:	9104      	str	r1, [sp, #16]
   1388c:	e7ff      	b.n	1388e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x11c>
        data.len() as u16
   1388e:	980e      	ldr	r0, [sp, #56]	; 0x38
   13890:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13892:	f7fe fb62 	bl	11f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13896:	9003      	str	r0, [sp, #12]
   13898:	e7ff      	b.n	1389a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x128>
    let rc = unsafe { os::os_mbuf_append(
   1389a:	9803      	ldr	r0, [sp, #12]
   1389c:	b282      	uxth	r2, r0
   1389e:	9809      	ldr	r0, [sp, #36]	; 0x24
   138a0:	9904      	ldr	r1, [sp, #16]
   138a2:	f007 fc3d 	bl	1b120 <os_mbuf_append>
   138a6:	4601      	mov	r1, r0
   138a8:	901e      	str	r0, [sp, #120]	; 0x78
   138aa:	9102      	str	r1, [sp, #8]
   138ac:	e7ff      	b.n	138ae <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x13c>
    if rc != 0 {  //  If out of memory, quit.
   138ae:	9802      	ldr	r0, [sp, #8]
   138b0:	2800      	cmp	r0, #0
   138b2:	d10f      	bne.n	138d4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x162>
   138b4:	e7ff      	b.n	138b6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x144>
    let rc = unsafe { os::os_mqueue_put(
   138b6:	f646 208c 	movw	r0, #27276	; 0x6a8c
   138ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
   138be:	f646 21a4 	movw	r1, #27300	; 0x6aa4
   138c2:	f2c2 0100 	movt	r1, #8192	; 0x2000
   138c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   138c8:	f007 fbac 	bl	1b024 <os_mqueue_put>
   138cc:	4601      	mov	r1, r0
   138ce:	901f      	str	r0, [sp, #124]	; 0x7c
   138d0:	9101      	str	r1, [sp, #4]
   138d2:	e011      	b.n	138f8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x186>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   138d4:	9809      	ldr	r0, [sp, #36]	; 0x24
   138d6:	f007 fc07 	bl	1b0e8 <os_mbuf_free_chain>
   138da:	e7ff      	b.n	138dc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x16a>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   138dc:	f646 2084 	movw	r0, #27268	; 0x6a84
   138e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   138e4:	f008 f884 	bl	1b9f0 <os_sem_release>
   138e8:	e7ff      	b.n	138ea <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x178>
   138ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   138ee:	9014      	str	r0, [sp, #80]	; 0x50
   138f0:	9814      	ldr	r0, [sp, #80]	; 0x50
   138f2:	9011      	str	r0, [sp, #68]	; 0x44
   138f4:	e7ff      	b.n	138f6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
   138f6:	e7c4      	b.n	13882 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
    if rc != 0 {  //  If out of memory, quit.
   138f8:	9801      	ldr	r0, [sp, #4]
   138fa:	2800      	cmp	r0, #0
   138fc:	d105      	bne.n	1390a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x198>
   138fe:	e7ff      	b.n	13900 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x18e>
   13900:	2000      	movs	r0, #0
    Ok(())
   13902:	9011      	str	r0, [sp, #68]	; 0x44
   13904:	2001      	movs	r0, #1
   13906:	9011      	str	r0, [sp, #68]	; 0x44
}
   13908:	e793      	b.n	13832 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   1390a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1390c:	f007 fbec 	bl	1b0e8 <os_mbuf_free_chain>
   13910:	e7ff      	b.n	13912 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1a0>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   13912:	f646 2084 	movw	r0, #27268	; 0x6a84
   13916:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1391a:	f008 f869 	bl	1b9f0 <os_sem_release>
   1391e:	e7ff      	b.n	13920 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ae>
   13920:	f06f 000c 	mvn.w	r0, #12
        return Err(MynewtError::SYS_EUNKNOWN); 
   13924:	9015      	str	r0, [sp, #84]	; 0x54
   13926:	9815      	ldr	r0, [sp, #84]	; 0x54
   13928:	9011      	str	r0, [sp, #68]	; 0x44
   1392a:	e7e4      	b.n	138f6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   1392c:	f240 70c0 	movw	r0, #1984	; 0x7c0
   13930:	f2c0 0002 	movt	r0, #2
   13934:	f240 72a8 	movw	r2, #1960	; 0x7a8
   13938:	f2c0 0202 	movt	r2, #2
   1393c:	2121      	movs	r1, #33	; 0x21
   1393e:	f004 f84b 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13942:	defe      	udf	#254	; 0xfe
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   13944:	f240 7060 	movw	r0, #1888	; 0x760
   13948:	f2c0 0002 	movt	r0, #2
   1394c:	f240 72e4 	movw	r2, #2020	; 0x7e4
   13950:	f2c0 0202 	movt	r2, #2
   13954:	211c      	movs	r1, #28
   13956:	f004 f83f 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1395a:	defe      	udf	#254	; 0xfe

0001395c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E>:

/// Callback for the event that is triggered when an SPI request is added to the queue.
extern "C" fn spi_event_callback(_event: *mut os::os_event) {    
   1395c:	b5b0      	push	{r4, r5, r7, lr}
   1395e:	b0c4      	sub	sp, #272	; 0x110
   13960:	9038      	str	r0, [sp, #224]	; 0xe0
   13962:	e7ff      	b.n	13964 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
    loop {  //  For each mbuf chain found...
        //  Get the next SPI request, stored as an mbuf chain.
        let om = unsafe { os::os_mqueue_get(&mut SPI_DATA_QUEUE) };
   13964:	f646 208c 	movw	r0, #27276	; 0x6a8c
   13968:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1396c:	f007 fb47 	bl	1affe <os_mqueue_get>
   13970:	4601      	mov	r1, r0
   13972:	9039      	str	r0, [sp, #228]	; 0xe4
   13974:	911b      	str	r1, [sp, #108]	; 0x6c
   13976:	e7ff      	b.n	13978 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c>
        if om.is_null() { break; }
   13978:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1397a:	f000 fe57 	bl	1462c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   1397e:	901a      	str	r0, [sp, #104]	; 0x68
   13980:	e7ff      	b.n	13982 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26>
   13982:	981a      	ldr	r0, [sp, #104]	; 0x68
   13984:	07c1      	lsls	r1, r0, #31
   13986:	2900      	cmp	r1, #0
   13988:	d106      	bne.n	13998 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x3c>
   1398a:	e7ff      	b.n	1398c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x30>

        //  Send the mbuf chain.
        let mut m = om;
   1398c:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1398e:	901c      	str	r0, [sp, #112]	; 0x70
   13990:	2101      	movs	r1, #1
        let mut first_byte = true;
   13992:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
        while !m.is_null() {  //  For each mbuf in the chain...
   13996:	e001      	b.n	1399c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>

        //  Release the throttle semaphore to allow next request to be queued.
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
        assert_eq!(rc, 0, "sem fail");    
    }
}
   13998:	b044      	add	sp, #272	; 0x110
   1399a:	bdb0      	pop	{r4, r5, r7, pc}
        while !m.is_null() {  //  For each mbuf in the chain...
   1399c:	981c      	ldr	r0, [sp, #112]	; 0x70
   1399e:	f000 fe45 	bl	1462c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   139a2:	9019      	str	r0, [sp, #100]	; 0x64
   139a4:	e7ff      	b.n	139a6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x4a>
   139a6:	9819      	ldr	r0, [sp, #100]	; 0x64
   139a8:	07c1      	lsls	r1, r0, #31
   139aa:	2900      	cmp	r1, #0
   139ac:	d004      	beq.n	139b8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x5c>
   139ae:	e7ff      	b.n	139b0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x54>
        unsafe { os::os_mbuf_free_chain(om) };
   139b0:	981b      	ldr	r0, [sp, #108]	; 0x6c
   139b2:	f007 fb99 	bl	1b0e8 <os_mbuf_free_chain>
   139b6:	e0aa      	b.n	13b0e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1b2>
            let data = unsafe { (*m).om_data };  //  Fetch the data
   139b8:	981c      	ldr	r0, [sp, #112]	; 0x70
   139ba:	6800      	ldr	r0, [r0, #0]
   139bc:	903a      	str	r0, [sp, #232]	; 0xe8
            let len = unsafe { (*m).om_len };    //  Fetch the length
   139be:	991c      	ldr	r1, [sp, #112]	; 0x70
   139c0:	88c9      	ldrh	r1, [r1, #6]
   139c2:	460a      	mov	r2, r1
   139c4:	f8ad 10ee 	strh.w	r1, [sp, #238]	; 0xee
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   139c8:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
   139cc:	07c9      	lsls	r1, r1, #31
   139ce:	2900      	cmp	r1, #0
   139d0:	9018      	str	r0, [sp, #96]	; 0x60
   139d2:	9217      	str	r2, [sp, #92]	; 0x5c
   139d4:	d105      	bne.n	139e2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x86>
   139d6:	e7ff      	b.n	139d8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x7c>
                    unsafe { core::mem::transmute(data) }, 
   139d8:	9818      	ldr	r0, [sp, #96]	; 0x60
   139da:	903e      	str	r0, [sp, #248]	; 0xf8
   139dc:	983e      	ldr	r0, [sp, #248]	; 0xf8
   139de:	9016      	str	r0, [sp, #88]	; 0x58
   139e0:	e07b      	b.n	13ada <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17e>
   139e2:	2000      	movs	r0, #0
                first_byte = false;
   139e4:	f88d 0075 	strb.w	r0, [sp, #117]	; 0x75
                    unsafe { core::mem::transmute(data) }, 
   139e8:	9818      	ldr	r0, [sp, #96]	; 0x60
   139ea:	903c      	str	r0, [sp, #240]	; 0xf0
   139ec:	983c      	ldr	r0, [sp, #240]	; 0xf0
   139ee:	9015      	str	r0, [sp, #84]	; 0x54
   139f0:	e7ff      	b.n	139f2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x96>
   139f2:	2001      	movs	r0, #1
                internal_spi_noblock_write(
   139f4:	9915      	ldr	r1, [sp, #84]	; 0x54
   139f6:	9014      	str	r0, [sp, #80]	; 0x50
   139f8:	4608      	mov	r0, r1
   139fa:	9914      	ldr	r1, [sp, #80]	; 0x50
   139fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   139fe:	f000 f921 	bl	13c44 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   13a02:	9013      	str	r0, [sp, #76]	; 0x4c
   13a04:	e7ff      	b.n	13a06 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xaa>
   13a06:	f240 71f4 	movw	r1, #2036	; 0x7f4
   13a0a:	f2c0 0102 	movt	r1, #2
   13a0e:	f640 0300 	movw	r3, #2048	; 0x800
   13a12:	f2c0 0302 	movt	r3, #2
   13a16:	220c      	movs	r2, #12
   13a18:	9813      	ldr	r0, [sp, #76]	; 0x4c
   13a1a:	f7f5 f86e 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13a1e:	e7ff      	b.n	13a20 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xc4>
                if  unsafe { *data } == 0x01 || //  SWRESET
   13a20:	9818      	ldr	r0, [sp, #96]	; 0x60
   13a22:	7801      	ldrb	r1, [r0, #0]
   13a24:	2901      	cmp	r1, #1
   13a26:	d013      	beq.n	13a50 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   13a28:	e01a      	b.n	13a60 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x104>
   13a2a:	2001      	movs	r0, #1
   13a2c:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   13a30:	e008      	b.n	13a44 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
   13a32:	2000      	movs	r0, #0
   13a34:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   13a38:	e004      	b.n	13a44 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
                    unsafe { *data } == 0x29 {  //  DISPON
   13a3a:	9818      	ldr	r0, [sp, #96]	; 0x60
   13a3c:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   13a3e:	2929      	cmp	r1, #41	; 0x29
   13a40:	d0f3      	beq.n	13a2a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   13a42:	e7f6      	b.n	13a32 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xd6>
   13a44:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
   13a48:	07c0      	lsls	r0, r0, #31
   13a4a:	2800      	cmp	r0, #0
   13a4c:	d113      	bne.n	13a76 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x11a>
   13a4e:	e017      	b.n	13a80 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   13a50:	2001      	movs	r0, #1
   13a52:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   13a56:	e008      	b.n	13a6a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
   13a58:	2000      	movs	r0, #0
   13a5a:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   13a5e:	e004      	b.n	13a6a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
                    unsafe { *data } == 0x11 || //  SLPOUT
   13a60:	9818      	ldr	r0, [sp, #96]	; 0x60
   13a62:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   13a64:	2911      	cmp	r1, #17
   13a66:	d0f3      	beq.n	13a50 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   13a68:	e7f6      	b.n	13a58 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xfc>
   13a6a:	f89d 0077 	ldrb.w	r0, [sp, #119]	; 0x77
   13a6e:	07c0      	lsls	r0, r0, #31
   13a70:	2800      	cmp	r0, #0
   13a72:	d1da      	bne.n	13a2a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   13a74:	e7e1      	b.n	13a3a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xde>
   13a76:	20c8      	movs	r0, #200	; 0xc8
                    delay_ms(200);
   13a78:	f000 fb13 	bl	140a2 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>
   13a7c:	e7ff      	b.n	13a7e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x122>
                if  unsafe { *data } == 0x01 || //  SWRESET
   13a7e:	e7ff      	b.n	13a80 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   13a80:	2101      	movs	r1, #1
                    unsafe { core::mem::transmute(data.add(1)) }, 
   13a82:	9818      	ldr	r0, [sp, #96]	; 0x60
   13a84:	f7fe f9d9 	bl	11e3a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   13a88:	9012      	str	r0, [sp, #72]	; 0x48
   13a8a:	e7ff      	b.n	13a8c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x130>
   13a8c:	9812      	ldr	r0, [sp, #72]	; 0x48
   13a8e:	903d      	str	r0, [sp, #244]	; 0xf4
   13a90:	983d      	ldr	r0, [sp, #244]	; 0xf4
   13a92:	9011      	str	r0, [sp, #68]	; 0x44
   13a94:	e7ff      	b.n	13a96 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x13a>
   13a96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   13a9a:	9917      	ldr	r1, [sp, #92]	; 0x5c
   13a9c:	fa10 f081 	uxtah	r0, r0, r1
   13aa0:	b282      	uxth	r2, r0
   13aa2:	4603      	mov	r3, r0
   13aa4:	4282      	cmp	r2, r0
   13aa6:	9310      	str	r3, [sp, #64]	; 0x40
   13aa8:	f040 80c0 	bne.w	13c2c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2d0>
   13aac:	e7ff      	b.n	13aae <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x152>
   13aae:	9810      	ldr	r0, [sp, #64]	; 0x40
   13ab0:	b281      	uxth	r1, r0
   13ab2:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   13ab4:	9811      	ldr	r0, [sp, #68]	; 0x44
   13ab6:	f000 f8c5 	bl	13c44 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   13aba:	900f      	str	r0, [sp, #60]	; 0x3c
   13abc:	e7ff      	b.n	13abe <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x162>
   13abe:	f240 71f4 	movw	r1, #2036	; 0x7f4
   13ac2:	f2c0 0102 	movt	r1, #2
   13ac6:	f640 0344 	movw	r3, #2116	; 0x844
   13aca:	f2c0 0302 	movt	r3, #2
   13ace:	220c      	movs	r2, #12
   13ad0:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13ad2:	f7f5 f812 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13ad6:	e7ff      	b.n	13ad8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17c>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13ad8:	e015      	b.n	13b06 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
                    len as i32,  //  Write all Data Bytes
   13ada:	9817      	ldr	r0, [sp, #92]	; 0x5c
   13adc:	b281      	uxth	r1, r0
   13ade:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   13ae0:	9816      	ldr	r0, [sp, #88]	; 0x58
   13ae2:	f000 f8af 	bl	13c44 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   13ae6:	900e      	str	r0, [sp, #56]	; 0x38
   13ae8:	e7ff      	b.n	13aea <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x18e>
   13aea:	f240 71f4 	movw	r1, #2036	; 0x7f4
   13aee:	f2c0 0102 	movt	r1, #2
   13af2:	f640 0354 	movw	r3, #2132	; 0x854
   13af6:	f2c0 0302 	movt	r3, #2
   13afa:	220c      	movs	r2, #12
   13afc:	980e      	ldr	r0, [sp, #56]	; 0x38
   13afe:	f7f4 fffc 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13b02:	e7ff      	b.n	13b04 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1a8>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13b04:	e7ff      	b.n	13b06 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
            m = unsafe { (*m).om_next.sle_next };  //  Fetch next mbuf in the chain.
   13b06:	981c      	ldr	r0, [sp, #112]	; 0x70
   13b08:	68c0      	ldr	r0, [r0, #12]
   13b0a:	901c      	str	r0, [sp, #112]	; 0x70
        while !m.is_null() {  //  For each mbuf in the chain...
   13b0c:	e746      	b.n	1399c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
   13b0e:	f646 2084 	movw	r0, #27268	; 0x6a84
   13b12:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13b16:	f007 ff6b 	bl	1b9f0 <os_sem_release>
   13b1a:	901e      	str	r0, [sp, #120]	; 0x78
   13b1c:	e7ff      	b.n	13b1e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c2>
        assert_eq!(rc, 0, "sem fail");    
   13b1e:	f240 5068 	movw	r0, #1384	; 0x568
   13b22:	f2c0 0002 	movt	r0, #2
   13b26:	6800      	ldr	r0, [r0, #0]
   13b28:	a91e      	add	r1, sp, #120	; 0x78
   13b2a:	911f      	str	r1, [sp, #124]	; 0x7c
   13b2c:	9020      	str	r0, [sp, #128]	; 0x80
   13b2e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13b30:	903f      	str	r0, [sp, #252]	; 0xfc
   13b32:	9920      	ldr	r1, [sp, #128]	; 0x80
   13b34:	9140      	str	r1, [sp, #256]	; 0x100
   13b36:	6802      	ldr	r2, [r0, #0]
   13b38:	680b      	ldr	r3, [r1, #0]
   13b3a:	429a      	cmp	r2, r3
   13b3c:	900d      	str	r0, [sp, #52]	; 0x34
   13b3e:	910c      	str	r1, [sp, #48]	; 0x30
   13b40:	d101      	bne.n	13b46 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1ea>
   13b42:	e7ff      	b.n	13b44 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1e8>
    loop {  //  For each mbuf chain found...
   13b44:	e70e      	b.n	13964 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
        assert_eq!(rc, 0, "sem fail");    
   13b46:	f240 50c0 	movw	r0, #1472	; 0x5c0
   13b4a:	f2c0 0002 	movt	r0, #2
   13b4e:	6801      	ldr	r1, [r0, #0]
   13b50:	980d      	ldr	r0, [sp, #52]	; 0x34
   13b52:	9030      	str	r0, [sp, #192]	; 0xc0
   13b54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13b56:	9231      	str	r2, [sp, #196]	; 0xc4
   13b58:	f240 63d8 	movw	r3, #1752	; 0x6d8
   13b5c:	f2c0 0302 	movt	r3, #2
   13b60:	681b      	ldr	r3, [r3, #0]
   13b62:	f240 5ce0 	movw	ip, #1504	; 0x5e0
   13b66:	f2c0 0c02 	movt	ip, #2
   13b6a:	f8dc c000 	ldr.w	ip, [ip]
   13b6e:	46ee      	mov	lr, sp
   13b70:	2400      	movs	r4, #0
   13b72:	f8ce 4000 	str.w	r4, [lr]
   13b76:	a832      	add	r0, sp, #200	; 0xc8
   13b78:	2201      	movs	r2, #1
   13b7a:	910b      	str	r1, [sp, #44]	; 0x2c
   13b7c:	4619      	mov	r1, r3
   13b7e:	4663      	mov	r3, ip
   13b80:	f7f4 ff8c 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13b84:	e7ff      	b.n	13b86 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x22a>
   13b86:	a830      	add	r0, sp, #192	; 0xc0
   13b88:	902d      	str	r0, [sp, #180]	; 0xb4
   13b8a:	a831      	add	r0, sp, #196	; 0xc4
   13b8c:	902e      	str	r0, [sp, #184]	; 0xb8
   13b8e:	a832      	add	r0, sp, #200	; 0xc8
   13b90:	902f      	str	r0, [sp, #188]	; 0xbc
   13b92:	982d      	ldr	r0, [sp, #180]	; 0xb4
   13b94:	9041      	str	r0, [sp, #260]	; 0x104
   13b96:	992e      	ldr	r1, [sp, #184]	; 0xb8
   13b98:	9142      	str	r1, [sp, #264]	; 0x108
   13b9a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   13b9c:	9243      	str	r2, [sp, #268]	; 0x10c
   13b9e:	f249 333f 	movw	r3, #37695	; 0x933f
   13ba2:	f2c0 0300 	movt	r3, #0
   13ba6:	910a      	str	r1, [sp, #40]	; 0x28
   13ba8:	4619      	mov	r1, r3
   13baa:	9209      	str	r2, [sp, #36]	; 0x24
   13bac:	f7f5 fbff 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13bb0:	9008      	str	r0, [sp, #32]
   13bb2:	9107      	str	r1, [sp, #28]
   13bb4:	e7ff      	b.n	13bb6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x25a>
   13bb6:	f249 313f 	movw	r1, #37695	; 0x933f
   13bba:	f2c0 0100 	movt	r1, #0
   13bbe:	980a      	ldr	r0, [sp, #40]	; 0x28
   13bc0:	f7f5 fbf5 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13bc4:	9006      	str	r0, [sp, #24]
   13bc6:	9105      	str	r1, [sp, #20]
   13bc8:	e7ff      	b.n	13bca <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26e>
   13bca:	f647 71a7 	movw	r1, #32679	; 0x7fa7
   13bce:	f2c0 0101 	movt	r1, #1
   13bd2:	9809      	ldr	r0, [sp, #36]	; 0x24
   13bd4:	f7f5 fc00 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13bd8:	9004      	str	r0, [sp, #16]
   13bda:	9103      	str	r1, [sp, #12]
   13bdc:	e7ff      	b.n	13bde <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x282>
   13bde:	9808      	ldr	r0, [sp, #32]
   13be0:	9027      	str	r0, [sp, #156]	; 0x9c
   13be2:	9907      	ldr	r1, [sp, #28]
   13be4:	9128      	str	r1, [sp, #160]	; 0xa0
   13be6:	9a06      	ldr	r2, [sp, #24]
   13be8:	9229      	str	r2, [sp, #164]	; 0xa4
   13bea:	9b05      	ldr	r3, [sp, #20]
   13bec:	932a      	str	r3, [sp, #168]	; 0xa8
   13bee:	f8dd c010 	ldr.w	ip, [sp, #16]
   13bf2:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
   13bf6:	f8dd e00c 	ldr.w	lr, [sp, #12]
   13bfa:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
   13bfe:	466c      	mov	r4, sp
   13c00:	2503      	movs	r5, #3
   13c02:	6025      	str	r5, [r4, #0]
   13c04:	a821      	add	r0, sp, #132	; 0x84
   13c06:	ab27      	add	r3, sp, #156	; 0x9c
   13c08:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13c0a:	462a      	mov	r2, r5
   13c0c:	f7f4 ff46 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13c10:	e7ff      	b.n	13c12 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2b6>
   13c12:	f640 0064 	movw	r0, #2148	; 0x864
   13c16:	f2c0 0002 	movt	r0, #2
   13c1a:	f003 fed6 	bl	179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13c1e:	9002      	str	r0, [sp, #8]
   13c20:	e7ff      	b.n	13c22 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2c6>
   13c22:	a821      	add	r0, sp, #132	; 0x84
   13c24:	9902      	ldr	r1, [sp, #8]
   13c26:	f003 ff0d 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13c2a:	defe      	udf	#254	; 0xfe
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   13c2c:	f640 0020 	movw	r0, #2080	; 0x820
   13c30:	f2c0 0002 	movt	r0, #2
   13c34:	f640 0210 	movw	r2, #2064	; 0x810
   13c38:	f2c0 0202 	movt	r2, #2
   13c3c:	2121      	movs	r1, #33	; 0x21
   13c3e:	f003 fecb 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13c42:	defe      	udf	#254	; 0xfe

00013c44 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>:

/// Perform non-blocking SPI write in Mynewt OS.  Blocks until SPI write completes.
fn internal_spi_noblock_write(buf: &'static u8, len: i32, is_command: bool) -> MynewtResult<()> {
   13c44:	b5b0      	push	{r4, r5, r7, lr}
   13c46:	b0e8      	sub	sp, #416	; 0x1a0
   13c48:	4613      	mov	r3, r2
   13c4a:	9058      	str	r0, [sp, #352]	; 0x160
   13c4c:	9159      	str	r1, [sp, #356]	; 0x164
   13c4e:	f88d 216b 	strb.w	r2, [sp, #363]	; 0x16b
    if len == 0 { return Ok(()); }
   13c52:	2900      	cmp	r1, #0
   13c54:	9121      	str	r1, [sp, #132]	; 0x84
   13c56:	9020      	str	r0, [sp, #128]	; 0x80
   13c58:	931f      	str	r3, [sp, #124]	; 0x7c
   13c5a:	d004      	beq.n	13c66 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x22>
   13c5c:	e7ff      	b.n	13c5e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a>
    assert!(len > 0, "bad spi len");
   13c5e:	9821      	ldr	r0, [sp, #132]	; 0x84
   13c60:	2801      	cmp	r0, #1
   13c62:	db0d      	blt.n	13c80 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x3c>
   13c64:	e007      	b.n	13c76 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x32>
   13c66:	2000      	movs	r0, #0
    if len == 0 { return Ok(()); }
   13c68:	9022      	str	r0, [sp, #136]	; 0x88
   13c6a:	2001      	movs	r0, #1
   13c6c:	9022      	str	r0, [sp, #136]	; 0x88
   13c6e:	e7ff      	b.n	13c70 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
    }

    //  Set SS Pin to high to stop the transfer.
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
    Ok(())
}
   13c70:	9822      	ldr	r0, [sp, #136]	; 0x88
   13c72:	b068      	add	sp, #416	; 0x1a0
   13c74:	bdb0      	pop	{r4, r5, r7, pc}
        if is_command { 0 }
   13c76:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13c78:	07c1      	lsls	r1, r0, #31
   13c7a:	2900      	cmp	r1, #0
   13c7c:	d10f      	bne.n	13c9e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x5a>
   13c7e:	e00b      	b.n	13c98 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x54>
    assert!(len > 0, "bad spi len");
   13c80:	f640 0074 	movw	r0, #2164	; 0x874
   13c84:	f2c0 0002 	movt	r0, #2
   13c88:	f640 0280 	movw	r2, #2176	; 0x880
   13c8c:	f2c0 0202 	movt	r2, #2
   13c90:	210b      	movs	r1, #11
   13c92:	f003 fea1 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13c96:	defe      	udf	#254	; 0xfe
   13c98:	2001      	movs	r0, #1
        else { 1 }
   13c9a:	9023      	str	r0, [sp, #140]	; 0x8c
        if is_command { 0 }
   13c9c:	e002      	b.n	13ca4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
   13c9e:	2000      	movs	r0, #0
   13ca0:	9023      	str	r0, [sp, #140]	; 0x8c
   13ca2:	e7ff      	b.n	13ca4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
    unsafe { hal::hal_gpio_write(
   13ca4:	9923      	ldr	r1, [sp, #140]	; 0x8c
   13ca6:	2012      	movs	r0, #18
   13ca8:	f006 f804 	bl	19cb4 <hal_gpio_write>
   13cac:	e7ff      	b.n	13cae <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x6a>
   13cae:	2019      	movs	r0, #25
   13cb0:	2100      	movs	r1, #0
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 0) };
   13cb2:	f005 ffff 	bl	19cb4 <hal_gpio_write>
   13cb6:	e7ff      	b.n	13cb8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x74>
    if len == 1 {  //  If writing only 1 byte...
   13cb8:	9821      	ldr	r0, [sp, #132]	; 0x84
   13cba:	2801      	cmp	r0, #1
   13cbc:	d005      	beq.n	13cca <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x86>
   13cbe:	e7ff      	b.n	13cc0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x7c>
            core::mem::transmute(buf), //  TX Buffer
   13cc0:	9820      	ldr	r0, [sp, #128]	; 0x80
   13cc2:	9061      	str	r0, [sp, #388]	; 0x184
   13cc4:	9961      	ldr	r1, [sp, #388]	; 0x184
   13cc6:	911e      	str	r1, [sp, #120]	; 0x78
   13cc8:	e094      	b.n	13df4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1b0>
            core::mem::transmute(buf), //  TX Buffer
   13cca:	9820      	ldr	r0, [sp, #128]	; 0x80
   13ccc:	905b      	str	r0, [sp, #364]	; 0x16c
   13cce:	995b      	ldr	r1, [sp, #364]	; 0x16c
   13cd0:	911d      	str	r1, [sp, #116]	; 0x74
   13cd2:	e7ff      	b.n	13cd4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x90>
   13cd4:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx(
   13cd6:	901c      	str	r0, [sp, #112]	; 0x70
   13cd8:	991d      	ldr	r1, [sp, #116]	; 0x74
   13cda:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   13cdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13cde:	f006 fc97 	bl	1a610 <hal_spi_txrx>
   13ce2:	9024      	str	r0, [sp, #144]	; 0x90
   13ce4:	e7ff      	b.n	13ce6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xa2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13ce6:	f240 5068 	movw	r0, #1384	; 0x568
   13cea:	f2c0 0002 	movt	r0, #2
   13cee:	6800      	ldr	r0, [r0, #0]
   13cf0:	a924      	add	r1, sp, #144	; 0x90
   13cf2:	9125      	str	r1, [sp, #148]	; 0x94
   13cf4:	9026      	str	r0, [sp, #152]	; 0x98
   13cf6:	9825      	ldr	r0, [sp, #148]	; 0x94
   13cf8:	905c      	str	r0, [sp, #368]	; 0x170
   13cfa:	9926      	ldr	r1, [sp, #152]	; 0x98
   13cfc:	915d      	str	r1, [sp, #372]	; 0x174
   13cfe:	6802      	ldr	r2, [r0, #0]
   13d00:	680b      	ldr	r3, [r1, #0]
   13d02:	429a      	cmp	r2, r3
   13d04:	901b      	str	r0, [sp, #108]	; 0x6c
   13d06:	911a      	str	r1, [sp, #104]	; 0x68
   13d08:	d101      	bne.n	13d0e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xca>
   13d0a:	e7ff      	b.n	13d0c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xc8>
    if len == 1 {  //  If writing only 1 byte...
   13d0c:	e11f      	b.n	13f4e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13d0e:	f240 50c0 	movw	r0, #1472	; 0x5c0
   13d12:	f2c0 0002 	movt	r0, #2
   13d16:	6801      	ldr	r1, [r0, #0]
   13d18:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13d1a:	9036      	str	r0, [sp, #216]	; 0xd8
   13d1c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13d1e:	9237      	str	r2, [sp, #220]	; 0xdc
   13d20:	f640 0398 	movw	r3, #2200	; 0x898
   13d24:	f2c0 0302 	movt	r3, #2
   13d28:	681b      	ldr	r3, [r3, #0]
   13d2a:	f240 5ce0 	movw	ip, #1504	; 0x5e0
   13d2e:	f2c0 0c02 	movt	ip, #2
   13d32:	f8dc c000 	ldr.w	ip, [ip]
   13d36:	46ee      	mov	lr, sp
   13d38:	2400      	movs	r4, #0
   13d3a:	f8ce 4000 	str.w	r4, [lr]
   13d3e:	a838      	add	r0, sp, #224	; 0xe0
   13d40:	2201      	movs	r2, #1
   13d42:	9119      	str	r1, [sp, #100]	; 0x64
   13d44:	4619      	mov	r1, r3
   13d46:	4663      	mov	r3, ip
   13d48:	f7f4 fea8 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13d4c:	e7ff      	b.n	13d4e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x10a>
   13d4e:	a836      	add	r0, sp, #216	; 0xd8
   13d50:	9033      	str	r0, [sp, #204]	; 0xcc
   13d52:	a837      	add	r0, sp, #220	; 0xdc
   13d54:	9034      	str	r0, [sp, #208]	; 0xd0
   13d56:	a838      	add	r0, sp, #224	; 0xe0
   13d58:	9035      	str	r0, [sp, #212]	; 0xd4
   13d5a:	9833      	ldr	r0, [sp, #204]	; 0xcc
   13d5c:	905e      	str	r0, [sp, #376]	; 0x178
   13d5e:	9934      	ldr	r1, [sp, #208]	; 0xd0
   13d60:	915f      	str	r1, [sp, #380]	; 0x17c
   13d62:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   13d64:	9260      	str	r2, [sp, #384]	; 0x180
   13d66:	f249 23eb 	movw	r3, #37611	; 0x92eb
   13d6a:	f2c0 0300 	movt	r3, #0
   13d6e:	9118      	str	r1, [sp, #96]	; 0x60
   13d70:	4619      	mov	r1, r3
   13d72:	9217      	str	r2, [sp, #92]	; 0x5c
   13d74:	f7f5 faf1 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13d78:	9016      	str	r0, [sp, #88]	; 0x58
   13d7a:	9115      	str	r1, [sp, #84]	; 0x54
   13d7c:	e7ff      	b.n	13d7e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x13a>
   13d7e:	f249 21eb 	movw	r1, #37611	; 0x92eb
   13d82:	f2c0 0100 	movt	r1, #0
   13d86:	9818      	ldr	r0, [sp, #96]	; 0x60
   13d88:	f7f5 fae7 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13d8c:	9014      	str	r0, [sp, #80]	; 0x50
   13d8e:	9113      	str	r1, [sp, #76]	; 0x4c
   13d90:	e7ff      	b.n	13d92 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x14e>
   13d92:	f647 71a7 	movw	r1, #32679	; 0x7fa7
   13d96:	f2c0 0101 	movt	r1, #1
   13d9a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   13d9c:	f7f5 fb1c 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13da0:	9012      	str	r0, [sp, #72]	; 0x48
   13da2:	9111      	str	r1, [sp, #68]	; 0x44
   13da4:	e7ff      	b.n	13da6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x162>
   13da6:	9816      	ldr	r0, [sp, #88]	; 0x58
   13da8:	902d      	str	r0, [sp, #180]	; 0xb4
   13daa:	9915      	ldr	r1, [sp, #84]	; 0x54
   13dac:	912e      	str	r1, [sp, #184]	; 0xb8
   13dae:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13db0:	922f      	str	r2, [sp, #188]	; 0xbc
   13db2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13db4:	9330      	str	r3, [sp, #192]	; 0xc0
   13db6:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   13dba:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
   13dbe:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
   13dc2:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
   13dc6:	466c      	mov	r4, sp
   13dc8:	2503      	movs	r5, #3
   13dca:	6025      	str	r5, [r4, #0]
   13dcc:	a827      	add	r0, sp, #156	; 0x9c
   13dce:	ab2d      	add	r3, sp, #180	; 0xb4
   13dd0:	9919      	ldr	r1, [sp, #100]	; 0x64
   13dd2:	462a      	mov	r2, r5
   13dd4:	f7f4 fe62 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13dd8:	e7ff      	b.n	13dda <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x196>
   13dda:	f640 009c 	movw	r0, #2204	; 0x89c
   13dde:	f2c0 0002 	movt	r0, #2
   13de2:	f003 fdf2 	bl	179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13de6:	9010      	str	r0, [sp, #64]	; 0x40
   13de8:	e7ff      	b.n	13dea <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a6>
   13dea:	a827      	add	r0, sp, #156	; 0x9c
   13dec:	9910      	ldr	r1, [sp, #64]	; 0x40
   13dee:	f003 fe29 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13df2:	defe      	udf	#254	; 0xfe
   13df4:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx_noblock(
   13df6:	900f      	str	r0, [sp, #60]	; 0x3c
   13df8:	991e      	ldr	r1, [sp, #120]	; 0x78
   13dfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   13dfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13dfe:	f006 fc5d 	bl	1a6bc <hal_spi_txrx_noblock>
   13e02:	903e      	str	r0, [sp, #248]	; 0xf8
   13e04:	e7ff      	b.n	13e06 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1c2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13e06:	f240 5068 	movw	r0, #1384	; 0x568
   13e0a:	f2c0 0002 	movt	r0, #2
   13e0e:	6800      	ldr	r0, [r0, #0]
   13e10:	a93e      	add	r1, sp, #248	; 0xf8
   13e12:	913f      	str	r1, [sp, #252]	; 0xfc
   13e14:	9040      	str	r0, [sp, #256]	; 0x100
   13e16:	983f      	ldr	r0, [sp, #252]	; 0xfc
   13e18:	9062      	str	r0, [sp, #392]	; 0x188
   13e1a:	9940      	ldr	r1, [sp, #256]	; 0x100
   13e1c:	9163      	str	r1, [sp, #396]	; 0x18c
   13e1e:	6802      	ldr	r2, [r0, #0]
   13e20:	680b      	ldr	r3, [r1, #0]
   13e22:	429a      	cmp	r2, r3
   13e24:	900e      	str	r0, [sp, #56]	; 0x38
   13e26:	910d      	str	r1, [sp, #52]	; 0x34
   13e28:	d10c      	bne.n	13e44 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x200>
   13e2a:	e7ff      	b.n	13e2c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1e8>
   13e2c:	f247 5030 	movw	r0, #30000	; 0x7530
        let timeout = 30_000;
   13e30:	9067      	str	r0, [sp, #412]	; 0x19c
   13e32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13e36:	fba0 0101 	umull	r0, r1, r0, r1
   13e3a:	2900      	cmp	r1, #0
   13e3c:	900c      	str	r0, [sp, #48]	; 0x30
   13e3e:	f040 8090 	bne.w	13f62 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x31e>
   13e42:	e072      	b.n	13f2a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2e6>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13e44:	f240 50c0 	movw	r0, #1472	; 0x5c0
   13e48:	f2c0 0002 	movt	r0, #2
   13e4c:	6801      	ldr	r1, [r0, #0]
   13e4e:	980e      	ldr	r0, [sp, #56]	; 0x38
   13e50:	9050      	str	r0, [sp, #320]	; 0x140
   13e52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13e54:	9251      	str	r2, [sp, #324]	; 0x144
   13e56:	f640 0398 	movw	r3, #2200	; 0x898
   13e5a:	f2c0 0302 	movt	r3, #2
   13e5e:	681b      	ldr	r3, [r3, #0]
   13e60:	f240 5ce0 	movw	ip, #1504	; 0x5e0
   13e64:	f2c0 0c02 	movt	ip, #2
   13e68:	f8dc c000 	ldr.w	ip, [ip]
   13e6c:	46ee      	mov	lr, sp
   13e6e:	2400      	movs	r4, #0
   13e70:	f8ce 4000 	str.w	r4, [lr]
   13e74:	a852      	add	r0, sp, #328	; 0x148
   13e76:	2201      	movs	r2, #1
   13e78:	910b      	str	r1, [sp, #44]	; 0x2c
   13e7a:	4619      	mov	r1, r3
   13e7c:	4663      	mov	r3, ip
   13e7e:	f7f4 fe0d 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13e82:	e7ff      	b.n	13e84 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x240>
   13e84:	a850      	add	r0, sp, #320	; 0x140
   13e86:	904d      	str	r0, [sp, #308]	; 0x134
   13e88:	a851      	add	r0, sp, #324	; 0x144
   13e8a:	904e      	str	r0, [sp, #312]	; 0x138
   13e8c:	a852      	add	r0, sp, #328	; 0x148
   13e8e:	904f      	str	r0, [sp, #316]	; 0x13c
   13e90:	984d      	ldr	r0, [sp, #308]	; 0x134
   13e92:	9064      	str	r0, [sp, #400]	; 0x190
   13e94:	994e      	ldr	r1, [sp, #312]	; 0x138
   13e96:	9165      	str	r1, [sp, #404]	; 0x194
   13e98:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
   13e9a:	9266      	str	r2, [sp, #408]	; 0x198
   13e9c:	f249 23eb 	movw	r3, #37611	; 0x92eb
   13ea0:	f2c0 0300 	movt	r3, #0
   13ea4:	910a      	str	r1, [sp, #40]	; 0x28
   13ea6:	4619      	mov	r1, r3
   13ea8:	9209      	str	r2, [sp, #36]	; 0x24
   13eaa:	f7f5 fa56 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13eae:	9008      	str	r0, [sp, #32]
   13eb0:	9107      	str	r1, [sp, #28]
   13eb2:	e7ff      	b.n	13eb4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x270>
   13eb4:	f249 21eb 	movw	r1, #37611	; 0x92eb
   13eb8:	f2c0 0100 	movt	r1, #0
   13ebc:	980a      	ldr	r0, [sp, #40]	; 0x28
   13ebe:	f7f5 fa4c 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13ec2:	9006      	str	r0, [sp, #24]
   13ec4:	9105      	str	r1, [sp, #20]
   13ec6:	e7ff      	b.n	13ec8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x284>
   13ec8:	f647 71a7 	movw	r1, #32679	; 0x7fa7
   13ecc:	f2c0 0101 	movt	r1, #1
   13ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
   13ed2:	f7f5 fa81 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13ed6:	9004      	str	r0, [sp, #16]
   13ed8:	9103      	str	r1, [sp, #12]
   13eda:	e7ff      	b.n	13edc <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x298>
   13edc:	9808      	ldr	r0, [sp, #32]
   13ede:	9047      	str	r0, [sp, #284]	; 0x11c
   13ee0:	9907      	ldr	r1, [sp, #28]
   13ee2:	9148      	str	r1, [sp, #288]	; 0x120
   13ee4:	9a06      	ldr	r2, [sp, #24]
   13ee6:	9249      	str	r2, [sp, #292]	; 0x124
   13ee8:	9b05      	ldr	r3, [sp, #20]
   13eea:	934a      	str	r3, [sp, #296]	; 0x128
   13eec:	f8dd c010 	ldr.w	ip, [sp, #16]
   13ef0:	f8cd c12c 	str.w	ip, [sp, #300]	; 0x12c
   13ef4:	f8dd e00c 	ldr.w	lr, [sp, #12]
   13ef8:	f8cd e130 	str.w	lr, [sp, #304]	; 0x130
   13efc:	466c      	mov	r4, sp
   13efe:	2503      	movs	r5, #3
   13f00:	6025      	str	r5, [r4, #0]
   13f02:	a841      	add	r0, sp, #260	; 0x104
   13f04:	ab47      	add	r3, sp, #284	; 0x11c
   13f06:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13f08:	462a      	mov	r2, r5
   13f0a:	f7f4 fdc7 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13f0e:	e7ff      	b.n	13f10 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2cc>
   13f10:	f640 00ac 	movw	r0, #2220	; 0x8ac
   13f14:	f2c0 0002 	movt	r0, #2
   13f18:	f003 fd57 	bl	179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13f1c:	9002      	str	r0, [sp, #8]
   13f1e:	e7ff      	b.n	13f20 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2dc>
   13f20:	a841      	add	r0, sp, #260	; 0x104
   13f22:	9902      	ldr	r1, [sp, #8]
   13f24:	f003 fd8e 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13f28:	defe      	udf	#254	; 0xfe
   13f2a:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13f2e:	f2c1 0062 	movt	r0, #4194	; 0x1062
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13f32:	990c      	ldr	r1, [sp, #48]	; 0x30
   13f34:	fba1 0200 	umull	r0, r2, r1, r0
   13f38:	0991      	lsrs	r1, r2, #6
   13f3a:	f646 227c 	movw	r2, #27260	; 0x6a7c
   13f3e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13f42:	9001      	str	r0, [sp, #4]
   13f44:	4610      	mov	r0, r2
   13f46:	f007 fd85 	bl	1ba54 <os_sem_pend>
   13f4a:	e7ff      	b.n	13f4c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x308>
    if len == 1 {  //  If writing only 1 byte...
   13f4c:	e7ff      	b.n	13f4e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
   13f4e:	2019      	movs	r0, #25
   13f50:	2101      	movs	r1, #1
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
   13f52:	f005 feaf 	bl	19cb4 <hal_gpio_write>
   13f56:	e7ff      	b.n	13f58 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x314>
   13f58:	2000      	movs	r0, #0
    Ok(())
   13f5a:	9022      	str	r0, [sp, #136]	; 0x88
   13f5c:	2001      	movs	r0, #1
   13f5e:	9022      	str	r0, [sp, #136]	; 0x88
}
   13f60:	e686      	b.n	13c70 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13f62:	f240 70c0 	movw	r0, #1984	; 0x7c0
   13f66:	f2c0 0002 	movt	r0, #2
   13f6a:	f640 02bc 	movw	r2, #2236	; 0x8bc
   13f6e:	f2c0 0202 	movt	r2, #2
   13f72:	2121      	movs	r1, #33	; 0x21
   13f74:	f003 fd30 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13f78:	defe      	udf	#254	; 0xfe

00013f7a <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E>:

/// Called by interrupt handler after Non-blocking SPI transfer has completed
extern "C" fn spi_noblock_handler(_arg: Ptr, _len: i32) {
   13f7a:	b5b0      	push	{r4, r5, r7, lr}
   13f7c:	b0ae      	sub	sp, #184	; 0xb8
   13f7e:	9027      	str	r0, [sp, #156]	; 0x9c
   13f80:	9128      	str	r1, [sp, #160]	; 0xa0
    //  Signal to internal_spi_noblock_write() that SPI request has been completed.
    let rc = unsafe { os::os_sem_release(&mut SPI_SEM) };
   13f82:	f646 207c 	movw	r0, #27260	; 0x6a7c
   13f86:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13f8a:	f007 fd31 	bl	1b9f0 <os_sem_release>
   13f8e:	900d      	str	r0, [sp, #52]	; 0x34
   13f90:	e7ff      	b.n	13f92 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x18>
    assert_eq!(rc, 0, "sem fail");
   13f92:	f240 5068 	movw	r0, #1384	; 0x568
   13f96:	f2c0 0002 	movt	r0, #2
   13f9a:	6800      	ldr	r0, [r0, #0]
   13f9c:	a90d      	add	r1, sp, #52	; 0x34
   13f9e:	910e      	str	r1, [sp, #56]	; 0x38
   13fa0:	900f      	str	r0, [sp, #60]	; 0x3c
   13fa2:	980e      	ldr	r0, [sp, #56]	; 0x38
   13fa4:	9029      	str	r0, [sp, #164]	; 0xa4
   13fa6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13fa8:	912a      	str	r1, [sp, #168]	; 0xa8
   13faa:	6802      	ldr	r2, [r0, #0]
   13fac:	680b      	ldr	r3, [r1, #0]
   13fae:	429a      	cmp	r2, r3
   13fb0:	900c      	str	r0, [sp, #48]	; 0x30
   13fb2:	910b      	str	r1, [sp, #44]	; 0x2c
   13fb4:	d102      	bne.n	13fbc <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x42>
   13fb6:	e7ff      	b.n	13fb8 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x3e>
}
   13fb8:	b02e      	add	sp, #184	; 0xb8
   13fba:	bdb0      	pop	{r4, r5, r7, pc}
    assert_eq!(rc, 0, "sem fail");
   13fbc:	f240 50c0 	movw	r0, #1472	; 0x5c0
   13fc0:	f2c0 0002 	movt	r0, #2
   13fc4:	6801      	ldr	r1, [r0, #0]
   13fc6:	980c      	ldr	r0, [sp, #48]	; 0x30
   13fc8:	901f      	str	r0, [sp, #124]	; 0x7c
   13fca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13fcc:	9220      	str	r2, [sp, #128]	; 0x80
   13fce:	f240 63d8 	movw	r3, #1752	; 0x6d8
   13fd2:	f2c0 0302 	movt	r3, #2
   13fd6:	681b      	ldr	r3, [r3, #0]
   13fd8:	f240 5ce0 	movw	ip, #1504	; 0x5e0
   13fdc:	f2c0 0c02 	movt	ip, #2
   13fe0:	f8dc c000 	ldr.w	ip, [ip]
   13fe4:	46ee      	mov	lr, sp
   13fe6:	2400      	movs	r4, #0
   13fe8:	f8ce 4000 	str.w	r4, [lr]
   13fec:	a821      	add	r0, sp, #132	; 0x84
   13fee:	2201      	movs	r2, #1
   13ff0:	910a      	str	r1, [sp, #40]	; 0x28
   13ff2:	4619      	mov	r1, r3
   13ff4:	4663      	mov	r3, ip
   13ff6:	f7f4 fd51 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13ffa:	e7ff      	b.n	13ffc <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x82>
   13ffc:	a81f      	add	r0, sp, #124	; 0x7c
   13ffe:	901c      	str	r0, [sp, #112]	; 0x70
   14000:	a820      	add	r0, sp, #128	; 0x80
   14002:	901d      	str	r0, [sp, #116]	; 0x74
   14004:	a821      	add	r0, sp, #132	; 0x84
   14006:	901e      	str	r0, [sp, #120]	; 0x78
   14008:	981c      	ldr	r0, [sp, #112]	; 0x70
   1400a:	902b      	str	r0, [sp, #172]	; 0xac
   1400c:	991d      	ldr	r1, [sp, #116]	; 0x74
   1400e:	912c      	str	r1, [sp, #176]	; 0xb0
   14010:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14012:	922d      	str	r2, [sp, #180]	; 0xb4
   14014:	f249 333f 	movw	r3, #37695	; 0x933f
   14018:	f2c0 0300 	movt	r3, #0
   1401c:	9109      	str	r1, [sp, #36]	; 0x24
   1401e:	4619      	mov	r1, r3
   14020:	9208      	str	r2, [sp, #32]
   14022:	f7f5 f9c4 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   14026:	9007      	str	r0, [sp, #28]
   14028:	9106      	str	r1, [sp, #24]
   1402a:	e7ff      	b.n	1402c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xb2>
   1402c:	f249 313f 	movw	r1, #37695	; 0x933f
   14030:	f2c0 0100 	movt	r1, #0
   14034:	9809      	ldr	r0, [sp, #36]	; 0x24
   14036:	f7f5 f9ba 	bl	93ae <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   1403a:	9005      	str	r0, [sp, #20]
   1403c:	9104      	str	r1, [sp, #16]
   1403e:	e7ff      	b.n	14040 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xc6>
   14040:	f647 71a7 	movw	r1, #32679	; 0x7fa7
   14044:	f2c0 0101 	movt	r1, #1
   14048:	9808      	ldr	r0, [sp, #32]
   1404a:	f7f5 f9c5 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1404e:	9003      	str	r0, [sp, #12]
   14050:	9102      	str	r1, [sp, #8]
   14052:	e7ff      	b.n	14054 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xda>
   14054:	9807      	ldr	r0, [sp, #28]
   14056:	9016      	str	r0, [sp, #88]	; 0x58
   14058:	9906      	ldr	r1, [sp, #24]
   1405a:	9117      	str	r1, [sp, #92]	; 0x5c
   1405c:	9a05      	ldr	r2, [sp, #20]
   1405e:	9218      	str	r2, [sp, #96]	; 0x60
   14060:	9b04      	ldr	r3, [sp, #16]
   14062:	9319      	str	r3, [sp, #100]	; 0x64
   14064:	f8dd c00c 	ldr.w	ip, [sp, #12]
   14068:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
   1406c:	f8dd e008 	ldr.w	lr, [sp, #8]
   14070:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
   14074:	466c      	mov	r4, sp
   14076:	2503      	movs	r5, #3
   14078:	6025      	str	r5, [r4, #0]
   1407a:	a810      	add	r0, sp, #64	; 0x40
   1407c:	ab16      	add	r3, sp, #88	; 0x58
   1407e:	990a      	ldr	r1, [sp, #40]	; 0x28
   14080:	462a      	mov	r2, r5
   14082:	f7f4 fd0b 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14086:	e7ff      	b.n	14088 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x10e>
   14088:	f640 00cc 	movw	r0, #2252	; 0x8cc
   1408c:	f2c0 0002 	movt	r0, #2
   14090:	f003 fc9b 	bl	179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14094:	9001      	str	r0, [sp, #4]
   14096:	e7ff      	b.n	14098 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x11e>
   14098:	a810      	add	r0, sp, #64	; 0x40
   1409a:	9901      	ldr	r1, [sp, #4]
   1409c:	f003 fcd2 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   140a0:	defe      	udf	#254	; 0xfe

000140a2 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>:

/// Sleep for the specified number of milliseconds
fn delay_ms(ms: u8) {
   140a2:	b580      	push	{r7, lr}
   140a4:	b084      	sub	sp, #16
   140a6:	4601      	mov	r1, r0
   140a8:	f88d 000b 	strb.w	r0, [sp, #11]
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   140ac:	b2c0      	uxtb	r0, r0
   140ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   140b2:	fba0 0202 	umull	r0, r2, r0, r2
   140b6:	2a00      	cmp	r2, #0
   140b8:	9001      	str	r0, [sp, #4]
   140ba:	d110      	bne.n	140de <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x3c>
   140bc:	e7ff      	b.n	140be <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x1c>
   140be:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   140c2:	f2c1 0062 	movt	r0, #4194	; 0x1062
   140c6:	9901      	ldr	r1, [sp, #4]
   140c8:	fba1 0200 	umull	r0, r2, r1, r0
   140cc:	0992      	lsrs	r2, r2, #6
   140ce:	9203      	str	r2, [sp, #12]
    unsafe { os::os_time_delay(delay_ticks) };
   140d0:	9000      	str	r0, [sp, #0]
   140d2:	4610      	mov	r0, r2
   140d4:	f007 fe0c 	bl	1bcf0 <os_time_delay>
   140d8:	e7ff      	b.n	140da <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x38>
}
   140da:	b004      	add	sp, #16
   140dc:	bd80      	pop	{r7, pc}
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   140de:	f240 70c0 	movw	r0, #1984	; 0x7c0
   140e2:	f2c0 0002 	movt	r0, #2
   140e6:	f640 02dc 	movw	r2, #2268	; 0x8dc
   140ea:	f2c0 0202 	movt	r2, #2
   140ee:	2121      	movs	r1, #33	; 0x21
   140f0:	f003 fc72 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   140f4:	defe      	udf	#254	; 0xfe

000140f6 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>:
};

/// Rust Embedded HAL interface for Mynewt SPI
impl SPI {
    /// Create a new SPI port
    pub fn new() -> Self {
   140f6:	b082      	sub	sp, #8
   140f8:	2000      	movs	r0, #0
        SPI {
   140fa:	9000      	str	r0, [sp, #0]
   140fc:	9001      	str	r0, [sp, #4]
            spi_num: 0,
            cs_pin:  0,
        }
    }
   140fe:	9800      	ldr	r0, [sp, #0]
   14100:	9901      	ldr	r1, [sp, #4]
   14102:	b002      	add	sp, #8
   14104:	4770      	bx	lr

00014106 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>:

    /// Initiaise the SPI port
    pub fn init(&mut self, spi_num: i32, cs_pin: i32, spi_settings: *mut hal::hal_spi_settings) 
   14106:	b5b0      	push	{r4, r5, r7, lr}
   14108:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
   1410c:	9077      	str	r0, [sp, #476]	; 0x1dc
   1410e:	9178      	str	r1, [sp, #480]	; 0x1e0
   14110:	9279      	str	r2, [sp, #484]	; 0x1e4
   14112:	937a      	str	r3, [sp, #488]	; 0x1e8
        -> MynewtResult<()> {
        let rc = unsafe { hal::hal_spi_config(spi_num, spi_settings) };
   14114:	9028      	str	r0, [sp, #160]	; 0xa0
   14116:	4608      	mov	r0, r1
   14118:	9127      	str	r1, [sp, #156]	; 0x9c
   1411a:	4619      	mov	r1, r3
   1411c:	9226      	str	r2, [sp, #152]	; 0x98
   1411e:	f006 f9bb 	bl	1a498 <hal_spi_config>
   14122:	9029      	str	r0, [sp, #164]	; 0xa4
   14124:	e7ff      	b.n	14126 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x20>
        assert_eq!(rc, 0, "spi config fail");
   14126:	f640 00ec 	movw	r0, #2284	; 0x8ec
   1412a:	f2c0 0002 	movt	r0, #2
   1412e:	6800      	ldr	r0, [r0, #0]
   14130:	a929      	add	r1, sp, #164	; 0xa4
   14132:	912a      	str	r1, [sp, #168]	; 0xa8
   14134:	902b      	str	r0, [sp, #172]	; 0xac
   14136:	982a      	ldr	r0, [sp, #168]	; 0xa8
   14138:	907b      	str	r0, [sp, #492]	; 0x1ec
   1413a:	992b      	ldr	r1, [sp, #172]	; 0xac
   1413c:	917c      	str	r1, [sp, #496]	; 0x1f0
   1413e:	6802      	ldr	r2, [r0, #0]
   14140:	680b      	ldr	r3, [r1, #0]
   14142:	429a      	cmp	r2, r3
   14144:	9025      	str	r0, [sp, #148]	; 0x94
   14146:	9124      	str	r1, [sp, #144]	; 0x90
   14148:	d105      	bne.n	14156 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x50>
   1414a:	e7ff      	b.n	1414c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x46>

        let rc = unsafe { hal::hal_spi_enable(spi_num) };
   1414c:	9827      	ldr	r0, [sp, #156]	; 0x9c
   1414e:	f006 f9bf 	bl	1a4d0 <hal_spi_enable>
   14152:	9043      	str	r0, [sp, #268]	; 0x10c
   14154:	e072      	b.n	1423c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x136>
        assert_eq!(rc, 0, "spi config fail");
   14156:	f640 1044 	movw	r0, #2372	; 0x944
   1415a:	f2c0 0002 	movt	r0, #2
   1415e:	6801      	ldr	r1, [r0, #0]
   14160:	9825      	ldr	r0, [sp, #148]	; 0x94
   14162:	903b      	str	r0, [sp, #236]	; 0xec
   14164:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14166:	923c      	str	r2, [sp, #240]	; 0xf0
   14168:	f640 1360 	movw	r3, #2400	; 0x960
   1416c:	f2c0 0302 	movt	r3, #2
   14170:	681b      	ldr	r3, [r3, #0]
   14172:	f640 1c64 	movw	ip, #2404	; 0x964
   14176:	f2c0 0c02 	movt	ip, #2
   1417a:	f8dc c000 	ldr.w	ip, [ip]
   1417e:	46ee      	mov	lr, sp
   14180:	2400      	movs	r4, #0
   14182:	f8ce 4000 	str.w	r4, [lr]
   14186:	a83d      	add	r0, sp, #244	; 0xf4
   14188:	2201      	movs	r2, #1
   1418a:	9123      	str	r1, [sp, #140]	; 0x8c
   1418c:	4619      	mov	r1, r3
   1418e:	4663      	mov	r3, ip
   14190:	f7f4 fc84 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14194:	e7ff      	b.n	14196 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x90>
   14196:	a83b      	add	r0, sp, #236	; 0xec
   14198:	9038      	str	r0, [sp, #224]	; 0xe0
   1419a:	a83c      	add	r0, sp, #240	; 0xf0
   1419c:	9039      	str	r0, [sp, #228]	; 0xe4
   1419e:	a83d      	add	r0, sp, #244	; 0xf4
   141a0:	903a      	str	r0, [sp, #232]	; 0xe8
   141a2:	9838      	ldr	r0, [sp, #224]	; 0xe0
   141a4:	907d      	str	r0, [sp, #500]	; 0x1f4
   141a6:	9939      	ldr	r1, [sp, #228]	; 0xe4
   141a8:	917e      	str	r1, [sp, #504]	; 0x1f8
   141aa:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   141ac:	927f      	str	r2, [sp, #508]	; 0x1fc
   141ae:	f249 23eb 	movw	r3, #37611	; 0x92eb
   141b2:	f2c0 0300 	movt	r3, #0
   141b6:	9122      	str	r1, [sp, #136]	; 0x88
   141b8:	4619      	mov	r1, r3
   141ba:	9221      	str	r2, [sp, #132]	; 0x84
   141bc:	f7f5 f8cd 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   141c0:	9020      	str	r0, [sp, #128]	; 0x80
   141c2:	911f      	str	r1, [sp, #124]	; 0x7c
   141c4:	e7ff      	b.n	141c6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xc0>
   141c6:	f249 21eb 	movw	r1, #37611	; 0x92eb
   141ca:	f2c0 0100 	movt	r1, #0
   141ce:	9822      	ldr	r0, [sp, #136]	; 0x88
   141d0:	f7f5 f8c3 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   141d4:	901e      	str	r0, [sp, #120]	; 0x78
   141d6:	911d      	str	r1, [sp, #116]	; 0x74
   141d8:	e7ff      	b.n	141da <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xd4>
   141da:	f647 71a7 	movw	r1, #32679	; 0x7fa7
   141de:	f2c0 0101 	movt	r1, #1
   141e2:	9821      	ldr	r0, [sp, #132]	; 0x84
   141e4:	f7f5 f8f8 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   141e8:	901c      	str	r0, [sp, #112]	; 0x70
   141ea:	911b      	str	r1, [sp, #108]	; 0x6c
   141ec:	e7ff      	b.n	141ee <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xe8>
   141ee:	9820      	ldr	r0, [sp, #128]	; 0x80
   141f0:	9032      	str	r0, [sp, #200]	; 0xc8
   141f2:	991f      	ldr	r1, [sp, #124]	; 0x7c
   141f4:	9133      	str	r1, [sp, #204]	; 0xcc
   141f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   141f8:	9234      	str	r2, [sp, #208]	; 0xd0
   141fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   141fc:	9335      	str	r3, [sp, #212]	; 0xd4
   141fe:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
   14202:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
   14206:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
   1420a:	f8cd e0dc 	str.w	lr, [sp, #220]	; 0xdc
   1420e:	466c      	mov	r4, sp
   14210:	2503      	movs	r5, #3
   14212:	6025      	str	r5, [r4, #0]
   14214:	a82c      	add	r0, sp, #176	; 0xb0
   14216:	ab32      	add	r3, sp, #200	; 0xc8
   14218:	9923      	ldr	r1, [sp, #140]	; 0x8c
   1421a:	462a      	mov	r2, r5
   1421c:	f7f4 fc3e 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14220:	e7ff      	b.n	14222 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x11c>
   14222:	f640 1080 	movw	r0, #2432	; 0x980
   14226:	f2c0 0002 	movt	r0, #2
   1422a:	f003 fbce 	bl	179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1422e:	901a      	str	r0, [sp, #104]	; 0x68
   14230:	e7ff      	b.n	14232 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x12c>
   14232:	a82c      	add	r0, sp, #176	; 0xb0
   14234:	991a      	ldr	r1, [sp, #104]	; 0x68
   14236:	f003 fc05 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1423a:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi enable fail");
   1423c:	f640 00ec 	movw	r0, #2284	; 0x8ec
   14240:	f2c0 0002 	movt	r0, #2
   14244:	6800      	ldr	r0, [r0, #0]
   14246:	a943      	add	r1, sp, #268	; 0x10c
   14248:	9144      	str	r1, [sp, #272]	; 0x110
   1424a:	9045      	str	r0, [sp, #276]	; 0x114
   1424c:	9844      	ldr	r0, [sp, #272]	; 0x110
   1424e:	9080      	str	r0, [sp, #512]	; 0x200
   14250:	9945      	ldr	r1, [sp, #276]	; 0x114
   14252:	9181      	str	r1, [sp, #516]	; 0x204
   14254:	6802      	ldr	r2, [r0, #0]
   14256:	680b      	ldr	r3, [r1, #0]
   14258:	429a      	cmp	r2, r3
   1425a:	9019      	str	r0, [sp, #100]	; 0x64
   1425c:	9118      	str	r1, [sp, #96]	; 0x60
   1425e:	d106      	bne.n	1426e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x168>
   14260:	e7ff      	b.n	14262 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x15c>
   14262:	2101      	movs	r1, #1

        let rc = unsafe { hal::hal_gpio_init_out(cs_pin, 1) };
   14264:	9826      	ldr	r0, [sp, #152]	; 0x98
   14266:	f005 fd09 	bl	19c7c <hal_gpio_init_out>
   1426a:	905d      	str	r0, [sp, #372]	; 0x174
   1426c:	e072      	b.n	14354 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x24e>
        assert_eq!(rc, 0, "spi enable fail");
   1426e:	f640 1044 	movw	r0, #2372	; 0x944
   14272:	f2c0 0002 	movt	r0, #2
   14276:	6801      	ldr	r1, [r0, #0]
   14278:	9819      	ldr	r0, [sp, #100]	; 0x64
   1427a:	9055      	str	r0, [sp, #340]	; 0x154
   1427c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1427e:	9256      	str	r2, [sp, #344]	; 0x158
   14280:	f640 13a8 	movw	r3, #2472	; 0x9a8
   14284:	f2c0 0302 	movt	r3, #2
   14288:	681b      	ldr	r3, [r3, #0]
   1428a:	f640 1c64 	movw	ip, #2404	; 0x964
   1428e:	f2c0 0c02 	movt	ip, #2
   14292:	f8dc c000 	ldr.w	ip, [ip]
   14296:	46ee      	mov	lr, sp
   14298:	2400      	movs	r4, #0
   1429a:	f8ce 4000 	str.w	r4, [lr]
   1429e:	a857      	add	r0, sp, #348	; 0x15c
   142a0:	2201      	movs	r2, #1
   142a2:	9117      	str	r1, [sp, #92]	; 0x5c
   142a4:	4619      	mov	r1, r3
   142a6:	4663      	mov	r3, ip
   142a8:	f7f4 fbf8 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   142ac:	e7ff      	b.n	142ae <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1a8>
   142ae:	a855      	add	r0, sp, #340	; 0x154
   142b0:	9052      	str	r0, [sp, #328]	; 0x148
   142b2:	a856      	add	r0, sp, #344	; 0x158
   142b4:	9053      	str	r0, [sp, #332]	; 0x14c
   142b6:	a857      	add	r0, sp, #348	; 0x15c
   142b8:	9054      	str	r0, [sp, #336]	; 0x150
   142ba:	9852      	ldr	r0, [sp, #328]	; 0x148
   142bc:	9082      	str	r0, [sp, #520]	; 0x208
   142be:	9953      	ldr	r1, [sp, #332]	; 0x14c
   142c0:	9183      	str	r1, [sp, #524]	; 0x20c
   142c2:	9a54      	ldr	r2, [sp, #336]	; 0x150
   142c4:	9284      	str	r2, [sp, #528]	; 0x210
   142c6:	f249 23eb 	movw	r3, #37611	; 0x92eb
   142ca:	f2c0 0300 	movt	r3, #0
   142ce:	9116      	str	r1, [sp, #88]	; 0x58
   142d0:	4619      	mov	r1, r3
   142d2:	9215      	str	r2, [sp, #84]	; 0x54
   142d4:	f7f5 f841 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   142d8:	9014      	str	r0, [sp, #80]	; 0x50
   142da:	9113      	str	r1, [sp, #76]	; 0x4c
   142dc:	e7ff      	b.n	142de <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1d8>
   142de:	f249 21eb 	movw	r1, #37611	; 0x92eb
   142e2:	f2c0 0100 	movt	r1, #0
   142e6:	9816      	ldr	r0, [sp, #88]	; 0x58
   142e8:	f7f5 f837 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   142ec:	9012      	str	r0, [sp, #72]	; 0x48
   142ee:	9111      	str	r1, [sp, #68]	; 0x44
   142f0:	e7ff      	b.n	142f2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1ec>
   142f2:	f647 71a7 	movw	r1, #32679	; 0x7fa7
   142f6:	f2c0 0101 	movt	r1, #1
   142fa:	9815      	ldr	r0, [sp, #84]	; 0x54
   142fc:	f7f5 f86c 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14300:	9010      	str	r0, [sp, #64]	; 0x40
   14302:	910f      	str	r1, [sp, #60]	; 0x3c
   14304:	e7ff      	b.n	14306 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x200>
   14306:	9814      	ldr	r0, [sp, #80]	; 0x50
   14308:	904c      	str	r0, [sp, #304]	; 0x130
   1430a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1430c:	914d      	str	r1, [sp, #308]	; 0x134
   1430e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14310:	924e      	str	r2, [sp, #312]	; 0x138
   14312:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14314:	934f      	str	r3, [sp, #316]	; 0x13c
   14316:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   1431a:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
   1431e:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   14322:	f8cd e144 	str.w	lr, [sp, #324]	; 0x144
   14326:	466c      	mov	r4, sp
   14328:	2503      	movs	r5, #3
   1432a:	6025      	str	r5, [r4, #0]
   1432c:	a846      	add	r0, sp, #280	; 0x118
   1432e:	ab4c      	add	r3, sp, #304	; 0x130
   14330:	9917      	ldr	r1, [sp, #92]	; 0x5c
   14332:	462a      	mov	r2, r5
   14334:	f7f4 fbb2 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14338:	e7ff      	b.n	1433a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x234>
   1433a:	f640 10ac 	movw	r0, #2476	; 0x9ac
   1433e:	f2c0 0002 	movt	r0, #2
   14342:	f003 fb42 	bl	179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14346:	900e      	str	r0, [sp, #56]	; 0x38
   14348:	e7ff      	b.n	1434a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x244>
   1434a:	a846      	add	r0, sp, #280	; 0x118
   1434c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1434e:	f003 fb79 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14352:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi init fail");
   14354:	f640 00ec 	movw	r0, #2284	; 0x8ec
   14358:	f2c0 0002 	movt	r0, #2
   1435c:	6800      	ldr	r0, [r0, #0]
   1435e:	a95d      	add	r1, sp, #372	; 0x174
   14360:	915e      	str	r1, [sp, #376]	; 0x178
   14362:	905f      	str	r0, [sp, #380]	; 0x17c
   14364:	985e      	ldr	r0, [sp, #376]	; 0x178
   14366:	9085      	str	r0, [sp, #532]	; 0x214
   14368:	995f      	ldr	r1, [sp, #380]	; 0x17c
   1436a:	9186      	str	r1, [sp, #536]	; 0x218
   1436c:	6802      	ldr	r2, [r0, #0]
   1436e:	680b      	ldr	r3, [r1, #0]
   14370:	429a      	cmp	r2, r3
   14372:	900d      	str	r0, [sp, #52]	; 0x34
   14374:	910c      	str	r1, [sp, #48]	; 0x30
   14376:	d109      	bne.n	1438c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x286>
   14378:	e7ff      	b.n	1437a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x274>
        self.spi_num = spi_num;
   1437a:	9827      	ldr	r0, [sp, #156]	; 0x9c
   1437c:	9928      	ldr	r1, [sp, #160]	; 0xa0
   1437e:	6008      	str	r0, [r1, #0]
        self.cs_pin  = cs_pin;
   14380:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14382:	604a      	str	r2, [r1, #4]
   14384:	2001      	movs	r0, #1
        Ok(())
    }
   14386:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
   1438a:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "spi init fail");
   1438c:	f640 1044 	movw	r0, #2372	; 0x944
   14390:	f2c0 0002 	movt	r0, #2
   14394:	6801      	ldr	r1, [r0, #0]
   14396:	980d      	ldr	r0, [sp, #52]	; 0x34
   14398:	906f      	str	r0, [sp, #444]	; 0x1bc
   1439a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1439c:	9270      	str	r2, [sp, #448]	; 0x1c0
   1439e:	f640 13d4 	movw	r3, #2516	; 0x9d4
   143a2:	f2c0 0302 	movt	r3, #2
   143a6:	681b      	ldr	r3, [r3, #0]
   143a8:	f640 1c64 	movw	ip, #2404	; 0x964
   143ac:	f2c0 0c02 	movt	ip, #2
   143b0:	f8dc c000 	ldr.w	ip, [ip]
   143b4:	46ee      	mov	lr, sp
   143b6:	2400      	movs	r4, #0
   143b8:	f8ce 4000 	str.w	r4, [lr]
   143bc:	a871      	add	r0, sp, #452	; 0x1c4
   143be:	2201      	movs	r2, #1
   143c0:	910b      	str	r1, [sp, #44]	; 0x2c
   143c2:	4619      	mov	r1, r3
   143c4:	4663      	mov	r3, ip
   143c6:	f7f4 fb69 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   143ca:	e7ff      	b.n	143cc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2c6>
   143cc:	a86f      	add	r0, sp, #444	; 0x1bc
   143ce:	906c      	str	r0, [sp, #432]	; 0x1b0
   143d0:	a870      	add	r0, sp, #448	; 0x1c0
   143d2:	906d      	str	r0, [sp, #436]	; 0x1b4
   143d4:	a871      	add	r0, sp, #452	; 0x1c4
   143d6:	906e      	str	r0, [sp, #440]	; 0x1b8
   143d8:	986c      	ldr	r0, [sp, #432]	; 0x1b0
   143da:	9087      	str	r0, [sp, #540]	; 0x21c
   143dc:	996d      	ldr	r1, [sp, #436]	; 0x1b4
   143de:	9188      	str	r1, [sp, #544]	; 0x220
   143e0:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
   143e2:	9289      	str	r2, [sp, #548]	; 0x224
   143e4:	f249 23eb 	movw	r3, #37611	; 0x92eb
   143e8:	f2c0 0300 	movt	r3, #0
   143ec:	910a      	str	r1, [sp, #40]	; 0x28
   143ee:	4619      	mov	r1, r3
   143f0:	9209      	str	r2, [sp, #36]	; 0x24
   143f2:	f7f4 ffb2 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   143f6:	9008      	str	r0, [sp, #32]
   143f8:	9107      	str	r1, [sp, #28]
   143fa:	e7ff      	b.n	143fc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2f6>
   143fc:	f249 21eb 	movw	r1, #37611	; 0x92eb
   14400:	f2c0 0100 	movt	r1, #0
   14404:	980a      	ldr	r0, [sp, #40]	; 0x28
   14406:	f7f4 ffa8 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1440a:	9006      	str	r0, [sp, #24]
   1440c:	9105      	str	r1, [sp, #20]
   1440e:	e7ff      	b.n	14410 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x30a>
   14410:	f647 71a7 	movw	r1, #32679	; 0x7fa7
   14414:	f2c0 0101 	movt	r1, #1
   14418:	9809      	ldr	r0, [sp, #36]	; 0x24
   1441a:	f7f4 ffdd 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1441e:	9004      	str	r0, [sp, #16]
   14420:	9103      	str	r1, [sp, #12]
   14422:	e7ff      	b.n	14424 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x31e>
   14424:	9808      	ldr	r0, [sp, #32]
   14426:	9066      	str	r0, [sp, #408]	; 0x198
   14428:	9907      	ldr	r1, [sp, #28]
   1442a:	9167      	str	r1, [sp, #412]	; 0x19c
   1442c:	9a06      	ldr	r2, [sp, #24]
   1442e:	9268      	str	r2, [sp, #416]	; 0x1a0
   14430:	9b05      	ldr	r3, [sp, #20]
   14432:	9369      	str	r3, [sp, #420]	; 0x1a4
   14434:	f8dd c010 	ldr.w	ip, [sp, #16]
   14438:	f8cd c1a8 	str.w	ip, [sp, #424]	; 0x1a8
   1443c:	f8dd e00c 	ldr.w	lr, [sp, #12]
   14440:	f8cd e1ac 	str.w	lr, [sp, #428]	; 0x1ac
   14444:	466c      	mov	r4, sp
   14446:	2503      	movs	r5, #3
   14448:	6025      	str	r5, [r4, #0]
   1444a:	a860      	add	r0, sp, #384	; 0x180
   1444c:	ab66      	add	r3, sp, #408	; 0x198
   1444e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14450:	462a      	mov	r2, r5
   14452:	f7f4 fb23 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14456:	e7ff      	b.n	14458 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x352>
   14458:	f640 10d8 	movw	r0, #2520	; 0x9d8
   1445c:	f2c0 0002 	movt	r0, #2
   14460:	f003 fab3 	bl	179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14464:	9002      	str	r0, [sp, #8]
   14466:	e7ff      	b.n	14468 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x362>
   14468:	a860      	add	r0, sp, #384	; 0x180
   1446a:	9902      	ldr	r1, [sp, #8]
   1446c:	f003 faea 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14470:	defe      	udf	#254	; 0xfe

00014472 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl GPIO {
    /// Create a new output GPIO pin
    pub fn new() -> Self {
   14472:	2000      	movs	r0, #0
        GPIO {
            pin: 0,
        }
    }
   14474:	4770      	bx	lr

00014476 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>:

    /// Initialise the output GPIO pin
    pub fn init(&mut self, pin: i32) -> MynewtResult<()> {
   14476:	b5b0      	push	{r4, r5, r7, lr}
   14478:	b0b0      	sub	sp, #192	; 0xc0
   1447a:	9029      	str	r0, [sp, #164]	; 0xa4
   1447c:	912a      	str	r1, [sp, #168]	; 0xa8
   1447e:	2200      	movs	r2, #0
        //  TODO: let dc = pins.d0.into_push_pull_output(&mut pins.port);
        //  TODO: let rst = pins.d1.into_push_pull_output(&mut pins.port);
        let rc = unsafe { hal::hal_gpio_init_out(pin, 0) };
   14480:	900e      	str	r0, [sp, #56]	; 0x38
   14482:	4608      	mov	r0, r1
   14484:	910d      	str	r1, [sp, #52]	; 0x34
   14486:	4611      	mov	r1, r2
   14488:	f005 fbf8 	bl	19c7c <hal_gpio_init_out>
   1448c:	900f      	str	r0, [sp, #60]	; 0x3c
   1448e:	e7ff      	b.n	14490 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x1a>
        assert_eq!(rc, 0, "gpio fail");
   14490:	f640 00ec 	movw	r0, #2284	; 0x8ec
   14494:	f2c0 0002 	movt	r0, #2
   14498:	6800      	ldr	r0, [r0, #0]
   1449a:	a90f      	add	r1, sp, #60	; 0x3c
   1449c:	9110      	str	r1, [sp, #64]	; 0x40
   1449e:	9011      	str	r0, [sp, #68]	; 0x44
   144a0:	9810      	ldr	r0, [sp, #64]	; 0x40
   144a2:	902b      	str	r0, [sp, #172]	; 0xac
   144a4:	9911      	ldr	r1, [sp, #68]	; 0x44
   144a6:	912c      	str	r1, [sp, #176]	; 0xb0
   144a8:	6802      	ldr	r2, [r0, #0]
   144aa:	680b      	ldr	r3, [r1, #0]
   144ac:	429a      	cmp	r2, r3
   144ae:	900c      	str	r0, [sp, #48]	; 0x30
   144b0:	910b      	str	r1, [sp, #44]	; 0x2c
   144b2:	d106      	bne.n	144c2 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x4c>
   144b4:	e7ff      	b.n	144b6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x40>
        self.pin = pin;
   144b6:	980d      	ldr	r0, [sp, #52]	; 0x34
   144b8:	990e      	ldr	r1, [sp, #56]	; 0x38
   144ba:	6008      	str	r0, [r1, #0]
   144bc:	2001      	movs	r0, #1
        Ok(())
    }
   144be:	b030      	add	sp, #192	; 0xc0
   144c0:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "gpio fail");
   144c2:	f640 1044 	movw	r0, #2372	; 0x944
   144c6:	f2c0 0002 	movt	r0, #2
   144ca:	6801      	ldr	r1, [r0, #0]
   144cc:	980c      	ldr	r0, [sp, #48]	; 0x30
   144ce:	9021      	str	r0, [sp, #132]	; 0x84
   144d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   144d2:	9222      	str	r2, [sp, #136]	; 0x88
   144d4:	f640 13fc 	movw	r3, #2556	; 0x9fc
   144d8:	f2c0 0302 	movt	r3, #2
   144dc:	681b      	ldr	r3, [r3, #0]
   144de:	f640 1c64 	movw	ip, #2404	; 0x964
   144e2:	f2c0 0c02 	movt	ip, #2
   144e6:	f8dc c000 	ldr.w	ip, [ip]
   144ea:	46ee      	mov	lr, sp
   144ec:	2400      	movs	r4, #0
   144ee:	f8ce 4000 	str.w	r4, [lr]
   144f2:	a823      	add	r0, sp, #140	; 0x8c
   144f4:	2201      	movs	r2, #1
   144f6:	910a      	str	r1, [sp, #40]	; 0x28
   144f8:	4619      	mov	r1, r3
   144fa:	4663      	mov	r3, ip
   144fc:	f7f4 face 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14500:	e7ff      	b.n	14502 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x8c>
   14502:	a821      	add	r0, sp, #132	; 0x84
   14504:	901e      	str	r0, [sp, #120]	; 0x78
   14506:	a822      	add	r0, sp, #136	; 0x88
   14508:	901f      	str	r0, [sp, #124]	; 0x7c
   1450a:	a823      	add	r0, sp, #140	; 0x8c
   1450c:	9020      	str	r0, [sp, #128]	; 0x80
   1450e:	981e      	ldr	r0, [sp, #120]	; 0x78
   14510:	902d      	str	r0, [sp, #180]	; 0xb4
   14512:	991f      	ldr	r1, [sp, #124]	; 0x7c
   14514:	912e      	str	r1, [sp, #184]	; 0xb8
   14516:	9a20      	ldr	r2, [sp, #128]	; 0x80
   14518:	922f      	str	r2, [sp, #188]	; 0xbc
   1451a:	f249 23eb 	movw	r3, #37611	; 0x92eb
   1451e:	f2c0 0300 	movt	r3, #0
   14522:	9109      	str	r1, [sp, #36]	; 0x24
   14524:	4619      	mov	r1, r3
   14526:	9208      	str	r2, [sp, #32]
   14528:	f7f4 ff17 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1452c:	9007      	str	r0, [sp, #28]
   1452e:	9106      	str	r1, [sp, #24]
   14530:	e7ff      	b.n	14532 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xbc>
   14532:	f249 21eb 	movw	r1, #37611	; 0x92eb
   14536:	f2c0 0100 	movt	r1, #0
   1453a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1453c:	f7f4 ff0d 	bl	935a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14540:	9005      	str	r0, [sp, #20]
   14542:	9104      	str	r1, [sp, #16]
   14544:	e7ff      	b.n	14546 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xd0>
   14546:	f647 71a7 	movw	r1, #32679	; 0x7fa7
   1454a:	f2c0 0101 	movt	r1, #1
   1454e:	9808      	ldr	r0, [sp, #32]
   14550:	f7f4 ff42 	bl	93d8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14554:	9003      	str	r0, [sp, #12]
   14556:	9102      	str	r1, [sp, #8]
   14558:	e7ff      	b.n	1455a <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xe4>
   1455a:	9807      	ldr	r0, [sp, #28]
   1455c:	9018      	str	r0, [sp, #96]	; 0x60
   1455e:	9906      	ldr	r1, [sp, #24]
   14560:	9119      	str	r1, [sp, #100]	; 0x64
   14562:	9a05      	ldr	r2, [sp, #20]
   14564:	921a      	str	r2, [sp, #104]	; 0x68
   14566:	9b04      	ldr	r3, [sp, #16]
   14568:	931b      	str	r3, [sp, #108]	; 0x6c
   1456a:	f8dd c00c 	ldr.w	ip, [sp, #12]
   1456e:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
   14572:	f8dd e008 	ldr.w	lr, [sp, #8]
   14576:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
   1457a:	466c      	mov	r4, sp
   1457c:	2503      	movs	r5, #3
   1457e:	6025      	str	r5, [r4, #0]
   14580:	a812      	add	r0, sp, #72	; 0x48
   14582:	ab18      	add	r3, sp, #96	; 0x60
   14584:	990a      	ldr	r1, [sp, #40]	; 0x28
   14586:	462a      	mov	r2, r5
   14588:	f7f4 fa88 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1458c:	e7ff      	b.n	1458e <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x118>
   1458e:	f640 2000 	movw	r0, #2560	; 0xa00
   14592:	f2c0 0002 	movt	r0, #2
   14596:	f003 fa18 	bl	179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1459a:	9001      	str	r0, [sp, #4]
   1459c:	e7ff      	b.n	1459e <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x128>
   1459e:	a812      	add	r0, sp, #72	; 0x48
   145a0:	9901      	ldr	r1, [sp, #4]
   145a2:	f003 fa4f 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   145a6:	defe      	udf	#254	; 0xfe

000145a8 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl embedded_hal::digital::v2::OutputPin for GPIO {
    /// Set the GPIO pin to low
    fn set_low(&mut self) -> Result<(), Self::Error> {
   145a8:	b580      	push	{r7, lr}
   145aa:	b082      	sub	sp, #8
   145ac:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 0) };
   145ae:	6800      	ldr	r0, [r0, #0]
   145b0:	2100      	movs	r1, #0
   145b2:	f005 fb7f 	bl	19cb4 <hal_gpio_write>
   145b6:	e7ff      	b.n	145b8 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E+0x10>
   145b8:	2001      	movs	r0, #1
        Ok(())
    }
   145ba:	b002      	add	sp, #8
   145bc:	bd80      	pop	{r7, pc}

000145be <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>:

    /// Set the GPIO pin to high
    fn set_high(&mut self) -> Result<(), Self::Error> {
   145be:	b580      	push	{r7, lr}
   145c0:	b082      	sub	sp, #8
   145c2:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 1) };
   145c4:	6800      	ldr	r0, [r0, #0]
   145c6:	2101      	movs	r1, #1
   145c8:	f005 fb74 	bl	19cb4 <hal_gpio_write>
   145cc:	e7ff      	b.n	145ce <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE+0x10>
   145ce:	2001      	movs	r0, #1
        Ok(())
    }
   145d0:	b002      	add	sp, #8
   145d2:	bd80      	pop	{r7, pc}

000145d4 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>:
impl Delay {
    /// Create a new delay
    pub fn new() -> Self {
        Delay {
        }
    }
   145d4:	4770      	bx	lr

000145d6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>:
}

/// Rust Embedded HAL interface for Mynewt Delay
impl embedded_hal::blocking::delay::DelayMs<u8> for Delay {
    /// Sleep for the specified number of milliseconds
    fn delay_ms(&mut self, ms: u8) {
   145d6:	b580      	push	{r7, lr}
   145d8:	b086      	sub	sp, #24
   145da:	460a      	mov	r2, r1
   145dc:	9003      	str	r0, [sp, #12]
   145de:	f88d 1013 	strb.w	r1, [sp, #19]
        //  TODO: Get this constant from Mynewt
        const OS_TICKS_PER_SEC: u32 = 1000;
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   145e2:	b2c8      	uxtb	r0, r1
   145e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   145e8:	fba0 0101 	umull	r0, r1, r0, r1
   145ec:	2900      	cmp	r1, #0
   145ee:	9002      	str	r0, [sp, #8]
   145f0:	d110      	bne.n	14614 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3e>
   145f2:	e7ff      	b.n	145f4 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x1e>
   145f4:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   145f8:	f2c1 0062 	movt	r0, #4194	; 0x1062
   145fc:	9902      	ldr	r1, [sp, #8]
   145fe:	fba1 0200 	umull	r0, r2, r1, r0
   14602:	0992      	lsrs	r2, r2, #6
   14604:	9205      	str	r2, [sp, #20]
        unsafe { os::os_time_delay(delay_ticks) };
   14606:	9001      	str	r0, [sp, #4]
   14608:	4610      	mov	r0, r2
   1460a:	f007 fb71 	bl	1bcf0 <os_time_delay>
   1460e:	e7ff      	b.n	14610 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3a>
    }
   14610:	b006      	add	sp, #24
   14612:	bd80      	pop	{r7, pc}
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14614:	f640 2020 	movw	r0, #2592	; 0xa20
   14618:	f2c0 0002 	movt	r0, #2
   1461c:	f640 2210 	movw	r2, #2576	; 0xa10
   14620:	f2c0 0202 	movt	r2, #2
   14624:	2121      	movs	r1, #33	; 0x21
   14626:	f003 f9d7 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1462a:	defe      	udf	#254	; 0xfe

0001462c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>:
   1462c:	b082      	sub	sp, #8
   1462e:	9001      	str	r0, [sp, #4]
   14630:	9000      	str	r0, [sp, #0]
   14632:	e7ff      	b.n	14634 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E+0x8>
   14634:	9800      	ldr	r0, [sp, #0]
   14636:	fab0 f180 	clz	r1, r0
   1463a:	0948      	lsrs	r0, r1, #5
   1463c:	b002      	add	sp, #8
   1463e:	4770      	bx	lr

00014640 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>:
   14640:	b580      	push	{r7, lr}
   14642:	b084      	sub	sp, #16
   14644:	9002      	str	r0, [sp, #8]
   14646:	9103      	str	r1, [sp, #12]
   14648:	f000 f805 	bl	14656 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   1464c:	9001      	str	r0, [sp, #4]
   1464e:	e7ff      	b.n	14650 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE+0x10>
   14650:	9801      	ldr	r0, [sp, #4]
   14652:	b004      	add	sp, #16
   14654:	bd80      	pop	{r7, pc}

00014656 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>:
   14656:	b084      	sub	sp, #16
   14658:	9001      	str	r0, [sp, #4]
   1465a:	9102      	str	r1, [sp, #8]
   1465c:	4408      	add	r0, r1
   1465e:	9003      	str	r0, [sp, #12]
   14660:	9803      	ldr	r0, [sp, #12]
   14662:	9000      	str	r0, [sp, #0]
   14664:	e7ff      	b.n	14666 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE+0x10>
   14666:	9800      	ldr	r0, [sp, #0]
   14668:	b004      	add	sp, #16
   1466a:	4770      	bx	lr

0001466c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>:
   1466c:	b081      	sub	sp, #4
   1466e:	b001      	add	sp, #4
   14670:	4770      	bx	lr

00014672 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>:

macro_rules! impl_to_primitive_uint_to_uint {
    ($SrcT:ident : $( $(#[$cfg:meta])* fn $method:ident -> $DstT:ident ; )*) => {$(
        #[inline]
        $(#[$cfg])*
        fn $method(&self) -> Option<$DstT> {
   14672:	b08a      	sub	sp, #40	; 0x28
   14674:	9005      	str	r0, [sp, #20]
   14676:	2100      	movs	r1, #0
            let max = $DstT::MAX as $SrcT;
   14678:	9107      	str	r1, [sp, #28]
   1467a:	21ff      	movs	r1, #255	; 0xff
   1467c:	9106      	str	r1, [sp, #24]
   1467e:	2108      	movs	r1, #8
   14680:	9108      	str	r1, [sp, #32]
   14682:	9908      	ldr	r1, [sp, #32]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14684:	9003      	str	r0, [sp, #12]
   14686:	9102      	str	r1, [sp, #8]
   14688:	e016      	b.n	146b8 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x46>
   1468a:	2001      	movs	r0, #1
   1468c:	f88d 0013 	strb.w	r0, [sp, #19]
   14690:	e00c      	b.n	146ac <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   14692:	2000      	movs	r0, #0
   14694:	f88d 0013 	strb.w	r0, [sp, #19]
   14698:	e008      	b.n	146ac <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   1469a:	9803      	ldr	r0, [sp, #12]
   1469c:	6801      	ldr	r1, [r0, #0]
   1469e:	6842      	ldr	r2, [r0, #4]
   146a0:	f5b1 7180 	subs.w	r1, r1, #256	; 0x100
   146a4:	f172 0200 	sbcs.w	r2, r2, #0
   146a8:	d3ef      	bcc.n	1468a <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   146aa:	e7f2      	b.n	14692 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x20>
   146ac:	f89d 0013 	ldrb.w	r0, [sp, #19]
   146b0:	07c0      	lsls	r0, r0, #31
   146b2:	2800      	cmp	r0, #0
   146b4:	d10e      	bne.n	146d4 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x62>
   146b6:	e009      	b.n	146cc <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x5a>
   146b8:	2001      	movs	r0, #1
   146ba:	9009      	str	r0, [sp, #36]	; 0x24
   146bc:	9809      	ldr	r0, [sp, #36]	; 0x24
   146be:	9001      	str	r0, [sp, #4]
   146c0:	e7ff      	b.n	146c2 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x50>
   146c2:	9802      	ldr	r0, [sp, #8]
   146c4:	9901      	ldr	r1, [sp, #4]
   146c6:	4288      	cmp	r0, r1
   146c8:	d9df      	bls.n	1468a <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   146ca:	e7e6      	b.n	1469a <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x28>
   146cc:	2000      	movs	r0, #0
                Some(*self as $DstT)
            } else {
                None
   146ce:	f88d 0010 	strb.w	r0, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   146d2:	e007      	b.n	146e4 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
                Some(*self as $DstT)
   146d4:	9803      	ldr	r0, [sp, #12]
   146d6:	7801      	ldrb	r1, [r0, #0]
   146d8:	f88d 1011 	strb.w	r1, [sp, #17]
   146dc:	2101      	movs	r1, #1
   146de:	f88d 1010 	strb.w	r1, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   146e2:	e7ff      	b.n	146e4 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
            }
        }
   146e4:	f89d 0010 	ldrb.w	r0, [sp, #16]
   146e8:	f89d 1011 	ldrb.w	r1, [sp, #17]
   146ec:	b00a      	add	sp, #40	; 0x28
   146ee:	4770      	bx	lr

000146f0 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>:
   146f0:	b580      	push	{r7, lr}
   146f2:	b090      	sub	sp, #64	; 0x40
   146f4:	2200      	movs	r2, #0
   146f6:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   146fa:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   146fe:	2201      	movs	r2, #1
   14700:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   14704:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   14708:	680a      	ldr	r2, [r1, #0]
   1470a:	2a00      	cmp	r2, #0
   1470c:	9101      	str	r1, [sp, #4]
   1470e:	9000      	str	r0, [sp, #0]
   14710:	d001      	beq.n	14716 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x26>
   14712:	e7ff      	b.n	14714 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x24>
   14714:	e004      	b.n	14720 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x30>
   14716:	2000      	movs	r0, #0
   14718:	9900      	ldr	r1, [sp, #0]
   1471a:	6008      	str	r0, [r1, #0]
   1471c:	e032      	b.n	14784 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   1471e:	defe      	udf	#254	; 0xfe
   14720:	2000      	movs	r0, #0
   14722:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   14726:	9901      	ldr	r1, [sp, #4]
   14728:	684a      	ldr	r2, [r1, #4]
   1472a:	688b      	ldr	r3, [r1, #8]
   1472c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   14730:	f8cd c010 	str.w	ip, [sp, #16]
   14734:	9303      	str	r3, [sp, #12]
   14736:	9202      	str	r2, [sp, #8]
   14738:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   1473c:	9802      	ldr	r0, [sp, #8]
   1473e:	9a03      	ldr	r2, [sp, #12]
   14740:	9b04      	ldr	r3, [sp, #16]
   14742:	930d      	str	r3, [sp, #52]	; 0x34
   14744:	920c      	str	r2, [sp, #48]	; 0x30
   14746:	900b      	str	r0, [sp, #44]	; 0x2c
   14748:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1474a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1474c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1474e:	930a      	str	r3, [sp, #40]	; 0x28
   14750:	9209      	str	r2, [sp, #36]	; 0x24
   14752:	9008      	str	r0, [sp, #32]
   14754:	a805      	add	r0, sp, #20
   14756:	a908      	add	r1, sp, #32
   14758:	f002 f90a 	bl	16970 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>
   1475c:	e7ff      	b.n	1475e <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x6e>
   1475e:	9805      	ldr	r0, [sp, #20]
   14760:	9906      	ldr	r1, [sp, #24]
   14762:	9a07      	ldr	r2, [sp, #28]
   14764:	9b00      	ldr	r3, [sp, #0]
   14766:	60da      	str	r2, [r3, #12]
   14768:	6099      	str	r1, [r3, #8]
   1476a:	6058      	str	r0, [r3, #4]
   1476c:	2001      	movs	r0, #1
   1476e:	6018      	str	r0, [r3, #0]
   14770:	e008      	b.n	14784 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   14772:	9801      	ldr	r0, [sp, #4]
   14774:	6801      	ldr	r1, [r0, #0]
   14776:	2901      	cmp	r1, #1
   14778:	d00c      	beq.n	14794 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa4>
   1477a:	e015      	b.n	147a8 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb8>
   1477c:	2000      	movs	r0, #0
   1477e:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   14782:	e7f6      	b.n	14772 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   14784:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   14788:	07c0      	lsls	r0, r0, #31
   1478a:	2800      	cmp	r0, #0
   1478c:	d1f6      	bne.n	1477c <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x8c>
   1478e:	e7f0      	b.n	14772 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   14790:	b010      	add	sp, #64	; 0x40
   14792:	bd80      	pop	{r7, pc}
   14794:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   14798:	07c0      	lsls	r0, r0, #31
   1479a:	2800      	cmp	r0, #0
   1479c:	d0f8      	beq.n	14790 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   1479e:	e7ff      	b.n	147a0 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb0>
   147a0:	2000      	movs	r0, #0
   147a2:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   147a6:	e7f3      	b.n	14790 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   147a8:	e7f2      	b.n	14790 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>

000147aa <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>:
   147aa:	b084      	sub	sp, #16
   147ac:	9002      	str	r0, [sp, #8]
   147ae:	6801      	ldr	r1, [r0, #0]
   147b0:	2900      	cmp	r1, #0
   147b2:	9000      	str	r0, [sp, #0]
   147b4:	d001      	beq.n	147ba <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x10>
   147b6:	e7ff      	b.n	147b8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0xe>
   147b8:	e003      	b.n	147c2 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x18>
   147ba:	2000      	movs	r0, #0
   147bc:	9001      	str	r0, [sp, #4]
   147be:	e006      	b.n	147ce <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   147c0:	defe      	udf	#254	; 0xfe
   147c2:	9800      	ldr	r0, [sp, #0]
   147c4:	f100 0108 	add.w	r1, r0, #8
   147c8:	9103      	str	r1, [sp, #12]
   147ca:	9101      	str	r1, [sp, #4]
   147cc:	e7ff      	b.n	147ce <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   147ce:	9801      	ldr	r0, [sp, #4]
   147d0:	b004      	add	sp, #16
   147d2:	4770      	bx	lr

000147d4 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>:
   147d4:	b510      	push	{r4, lr}
   147d6:	b088      	sub	sp, #32
   147d8:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   147dc:	468e      	mov	lr, r1
   147de:	4604      	mov	r4, r0
   147e0:	f8ad 0010 	strh.w	r0, [sp, #16]
   147e4:	f8ad 1012 	strh.w	r1, [sp, #18]
   147e8:	9205      	str	r2, [sp, #20]
   147ea:	9306      	str	r3, [sp, #24]
   147ec:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   147f0:	4601      	mov	r1, r0
   147f2:	2800      	cmp	r0, #0
   147f4:	9303      	str	r3, [sp, #12]
   147f6:	9202      	str	r2, [sp, #8]
   147f8:	f8cd c004 	str.w	ip, [sp, #4]
   147fc:	d001      	beq.n	14802 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2e>
   147fe:	e7ff      	b.n	14800 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2c>
   14800:	e006      	b.n	14810 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x3c>
   14802:	9802      	ldr	r0, [sp, #8]
   14804:	9903      	ldr	r1, [sp, #12]
   14806:	9a01      	ldr	r2, [sp, #4]
   14808:	f003 f89c 	bl	17944 <_ZN4core6option13expect_failed17had6579abaad447b4E>
   1480c:	defe      	udf	#254	; 0xfe
   1480e:	defe      	udf	#254	; 0xfe
   14810:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   14814:	4601      	mov	r1, r0
   14816:	f8ad 001e 	strh.w	r0, [sp, #30]
   1481a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   1481e:	2801      	cmp	r0, #1
   14820:	9100      	str	r1, [sp, #0]
   14822:	d103      	bne.n	1482c <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x58>
   14824:	e7ff      	b.n	14826 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>
   14826:	9800      	ldr	r0, [sp, #0]
   14828:	b008      	add	sp, #32
   1482a:	bd10      	pop	{r4, pc}
   1482c:	e7fb      	b.n	14826 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>

0001482e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>:
   1482e:	b084      	sub	sp, #16
   14830:	460b      	mov	r3, r1
   14832:	4684      	mov	ip, r0
   14834:	f88d 000c 	strb.w	r0, [sp, #12]
   14838:	f88d 100d 	strb.w	r1, [sp, #13]
   1483c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14840:	07c1      	lsls	r1, r0, #31
   14842:	2900      	cmp	r1, #0
   14844:	9202      	str	r2, [sp, #8]
   14846:	d001      	beq.n	1484c <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1e>
   14848:	e7ff      	b.n	1484a <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1c>
   1484a:	e009      	b.n	14860 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x32>
   1484c:	f640 2041 	movw	r0, #2625	; 0xa41
   14850:	f2c0 0002 	movt	r0, #2
   14854:	212b      	movs	r1, #43	; 0x2b
   14856:	9a02      	ldr	r2, [sp, #8]
   14858:	f003 f8be 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1485c:	defe      	udf	#254	; 0xfe
   1485e:	defe      	udf	#254	; 0xfe
   14860:	f89d 000d 	ldrb.w	r0, [sp, #13]
   14864:	4601      	mov	r1, r0
   14866:	f88d 000f 	strb.w	r0, [sp, #15]
   1486a:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1486e:	07c0      	lsls	r0, r0, #31
   14870:	2800      	cmp	r0, #0
   14872:	9101      	str	r1, [sp, #4]
   14874:	d003      	beq.n	1487e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x50>
   14876:	e7ff      	b.n	14878 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>
   14878:	9801      	ldr	r0, [sp, #4]
   1487a:	b004      	add	sp, #16
   1487c:	4770      	bx	lr
   1487e:	e7fb      	b.n	14878 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>

00014880 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>:
   14880:	b088      	sub	sp, #32
   14882:	9004      	str	r0, [sp, #16]
   14884:	9105      	str	r1, [sp, #20]
   14886:	9804      	ldr	r0, [sp, #16]
   14888:	2800      	cmp	r0, #0
   1488a:	4601      	mov	r1, r0
   1488c:	bf18      	it	ne
   1488e:	2101      	movne	r1, #1
   14890:	2800      	cmp	r0, #0
   14892:	9203      	str	r2, [sp, #12]
   14894:	d001      	beq.n	1489a <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x1a>
   14896:	e7ff      	b.n	14898 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x18>
   14898:	e009      	b.n	148ae <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x2e>
   1489a:	f640 2041 	movw	r0, #2625	; 0xa41
   1489e:	f2c0 0002 	movt	r0, #2
   148a2:	212b      	movs	r1, #43	; 0x2b
   148a4:	9a03      	ldr	r2, [sp, #12]
   148a6:	f003 f897 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   148aa:	defe      	udf	#254	; 0xfe
   148ac:	defe      	udf	#254	; 0xfe
   148ae:	9804      	ldr	r0, [sp, #16]
   148b0:	9905      	ldr	r1, [sp, #20]
   148b2:	9006      	str	r0, [sp, #24]
   148b4:	9107      	str	r1, [sp, #28]
   148b6:	9a04      	ldr	r2, [sp, #16]
   148b8:	2a00      	cmp	r2, #0
   148ba:	9002      	str	r0, [sp, #8]
   148bc:	9101      	str	r1, [sp, #4]
   148be:	d004      	beq.n	148ca <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x4a>
   148c0:	e7ff      	b.n	148c2 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>
   148c2:	9802      	ldr	r0, [sp, #8]
   148c4:	9901      	ldr	r1, [sp, #4]
   148c6:	b008      	add	sp, #32
   148c8:	4770      	bx	lr
   148ca:	e7fa      	b.n	148c2 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>

000148cc <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>:
   148cc:	b580      	push	{r7, lr}
   148ce:	b082      	sub	sp, #8
   148d0:	9001      	str	r0, [sp, #4]
   148d2:	f000 f82b 	bl	1492c <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   148d6:	9000      	str	r0, [sp, #0]
   148d8:	e7ff      	b.n	148da <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E+0xe>
   148da:	2001      	movs	r0, #1
   148dc:	9900      	ldr	r1, [sp, #0]
   148de:	4388      	bics	r0, r1
   148e0:	b002      	add	sp, #8
   148e2:	bd80      	pop	{r7, pc}

000148e4 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>:
   148e4:	b082      	sub	sp, #8
   148e6:	9001      	str	r0, [sp, #4]
   148e8:	6800      	ldr	r0, [r0, #0]
   148ea:	2800      	cmp	r0, #0
   148ec:	d104      	bne.n	148f8 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x14>
   148ee:	e7ff      	b.n	148f0 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0xc>
   148f0:	2000      	movs	r0, #0
   148f2:	f88d 0003 	strb.w	r0, [sp, #3]
   148f6:	e003      	b.n	14900 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   148f8:	2001      	movs	r0, #1
   148fa:	f88d 0003 	strb.w	r0, [sp, #3]
   148fe:	e7ff      	b.n	14900 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14900:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14904:	b002      	add	sp, #8
   14906:	4770      	bx	lr

00014908 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>:
   14908:	b082      	sub	sp, #8
   1490a:	9001      	str	r0, [sp, #4]
   1490c:	6800      	ldr	r0, [r0, #0]
   1490e:	2801      	cmp	r0, #1
   14910:	d004      	beq.n	1491c <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x14>
   14912:	e7ff      	b.n	14914 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0xc>
   14914:	2000      	movs	r0, #0
   14916:	f88d 0003 	strb.w	r0, [sp, #3]
   1491a:	e003      	b.n	14924 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   1491c:	2001      	movs	r0, #1
   1491e:	f88d 0003 	strb.w	r0, [sp, #3]
   14922:	e7ff      	b.n	14924 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   14924:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14928:	b002      	add	sp, #8
   1492a:	4770      	bx	lr

0001492c <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>:
   1492c:	b082      	sub	sp, #8
   1492e:	9001      	str	r0, [sp, #4]
   14930:	8800      	ldrh	r0, [r0, #0]
   14932:	2801      	cmp	r0, #1
   14934:	d004      	beq.n	14940 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x14>
   14936:	e7ff      	b.n	14938 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0xc>
   14938:	2000      	movs	r0, #0
   1493a:	f88d 0003 	strb.w	r0, [sp, #3]
   1493e:	e003      	b.n	14948 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   14940:	2001      	movs	r0, #1
   14942:	f88d 0003 	strb.w	r0, [sp, #3]
   14946:	e7ff      	b.n	14948 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   14948:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1494c:	b002      	add	sp, #8
   1494e:	4770      	bx	lr

00014950 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>:
   14950:	b580      	push	{r7, lr}
   14952:	b086      	sub	sp, #24
   14954:	9000      	str	r0, [sp, #0]
   14956:	2000      	movs	r0, #0
   14958:	f88d 000f 	strb.w	r0, [sp, #15]
   1495c:	f88d 000e 	strb.w	r0, [sp, #14]
   14960:	2001      	movs	r0, #1
   14962:	f88d 000f 	strb.w	r0, [sp, #15]
   14966:	f88d 000e 	strb.w	r0, [sp, #14]
   1496a:	9800      	ldr	r0, [sp, #0]
   1496c:	2800      	cmp	r0, #0
   1496e:	4601      	mov	r1, r0
   14970:	bf18      	it	ne
   14972:	2101      	movne	r1, #1
   14974:	2800      	cmp	r0, #0
   14976:	d001      	beq.n	1497c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2c>
   14978:	e7ff      	b.n	1497a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2a>
   1497a:	e004      	b.n	14986 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x36>
   1497c:	2000      	movs	r0, #0
   1497e:	f88d 0004 	strb.w	r0, [sp, #4]
   14982:	e019      	b.n	149b8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14984:	defe      	udf	#254	; 0xfe
   14986:	2000      	movs	r0, #0
   14988:	f88d 000f 	strb.w	r0, [sp, #15]
   1498c:	9900      	ldr	r1, [sp, #0]
   1498e:	9105      	str	r1, [sp, #20]
   14990:	f88d 000e 	strb.w	r0, [sp, #14]
   14994:	9102      	str	r1, [sp, #8]
   14996:	9802      	ldr	r0, [sp, #8]
   14998:	f7f5 fea5 	bl	a6e6 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>
   1499c:	f88d 1005 	strb.w	r1, [sp, #5]
   149a0:	f88d 0004 	strb.w	r0, [sp, #4]
   149a4:	e7ff      	b.n	149a6 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x56>
   149a6:	e007      	b.n	149b8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   149a8:	9800      	ldr	r0, [sp, #0]
   149aa:	2800      	cmp	r0, #0
   149ac:	d110      	bne.n	149d0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x80>
   149ae:	e019      	b.n	149e4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x94>
   149b0:	2000      	movs	r0, #0
   149b2:	f88d 000e 	strb.w	r0, [sp, #14]
   149b6:	e7f7      	b.n	149a8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   149b8:	f89d 000e 	ldrb.w	r0, [sp, #14]
   149bc:	07c0      	lsls	r0, r0, #31
   149be:	2800      	cmp	r0, #0
   149c0:	d1f6      	bne.n	149b0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x60>
   149c2:	e7f1      	b.n	149a8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   149c4:	f89d 0004 	ldrb.w	r0, [sp, #4]
   149c8:	f89d 1005 	ldrb.w	r1, [sp, #5]
   149cc:	b006      	add	sp, #24
   149ce:	bd80      	pop	{r7, pc}
   149d0:	f89d 000f 	ldrb.w	r0, [sp, #15]
   149d4:	07c0      	lsls	r0, r0, #31
   149d6:	2800      	cmp	r0, #0
   149d8:	d0f4      	beq.n	149c4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   149da:	e7ff      	b.n	149dc <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x8c>
   149dc:	2000      	movs	r0, #0
   149de:	f88d 000f 	strb.w	r0, [sp, #15]
   149e2:	e7ef      	b.n	149c4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   149e4:	e7ee      	b.n	149c4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>

000149e6 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>:
    fn clone(&self) -> Self {
   149e6:	b580      	push	{r7, lr}
   149e8:	b09c      	sub	sp, #112	; 0x70
   149ea:	911b      	str	r1, [sp, #108]	; 0x6c
   149ec:	aa01      	add	r2, sp, #4
        Vec(self.0.clone())
   149ee:	9000      	str	r0, [sp, #0]
   149f0:	4610      	mov	r0, r2
   149f2:	f000 fafc 	bl	14fee <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>
   149f6:	e7ff      	b.n	149f8 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE+0x12>
   149f8:	a901      	add	r1, sp, #4
   149fa:	2268      	movs	r2, #104	; 0x68
   149fc:	9800      	ldr	r0, [sp, #0]
   149fe:	f009 fbbf 	bl	1e180 <__aeabi_memcpy>
    }
   14a02:	b01c      	add	sp, #112	; 0x70
   14a04:	bd80      	pop	{r7, pc}

00014a06 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>:
    fn clone(&self) -> Self {
   14a06:	b580      	push	{r7, lr}
   14a08:	b0b6      	sub	sp, #216	; 0xd8
   14a0a:	9135      	str	r1, [sp, #212]	; 0xd4
   14a0c:	aa02      	add	r2, sp, #8
        Vec(self.0.clone())
   14a0e:	9001      	str	r0, [sp, #4]
   14a10:	4610      	mov	r0, r2
   14a12:	f000 fb14 	bl	1503e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>
   14a16:	e7ff      	b.n	14a18 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E+0x12>
   14a18:	a902      	add	r1, sp, #8
   14a1a:	22cc      	movs	r2, #204	; 0xcc
   14a1c:	9801      	ldr	r0, [sp, #4]
   14a1e:	f009 fbaf 	bl	1e180 <__aeabi_memcpy>
    }
   14a22:	b036      	add	sp, #216	; 0xd8
   14a24:	bd80      	pop	{r7, pc}

00014a26 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>:
    fn drop(&mut self) {
   14a26:	b580      	push	{r7, lr}
   14a28:	b084      	sub	sp, #16
   14a2a:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   14a2c:	f000 f84c 	bl	14ac8 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>
   14a30:	9002      	str	r0, [sp, #8]
   14a32:	9101      	str	r1, [sp, #4]
   14a34:	e7ff      	b.n	14a36 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x10>
   14a36:	9802      	ldr	r0, [sp, #8]
   14a38:	9901      	ldr	r1, [sp, #4]
   14a3a:	f001 fb7b 	bl	16134 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   14a3e:	e7ff      	b.n	14a40 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1a>
   14a40:	e7ff      	b.n	14a42 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1c>
    }
   14a42:	b004      	add	sp, #16
   14a44:	bd80      	pop	{r7, pc}

00014a46 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>:
    fn drop(&mut self) {
   14a46:	b580      	push	{r7, lr}
   14a48:	b084      	sub	sp, #16
   14a4a:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   14a4c:	f000 f848 	bl	14ae0 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   14a50:	9002      	str	r0, [sp, #8]
   14a52:	9101      	str	r1, [sp, #4]
   14a54:	e7ff      	b.n	14a56 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x10>
   14a56:	9802      	ldr	r0, [sp, #8]
   14a58:	9901      	ldr	r1, [sp, #4]
   14a5a:	f001 fb6b 	bl	16134 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   14a5e:	e7ff      	b.n	14a60 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1a>
   14a60:	e7ff      	b.n	14a62 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1c>
    }
   14a62:	b004      	add	sp, #16
   14a64:	bd80      	pop	{r7, pc}

00014a66 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>:
    fn deref(&self) -> &[T] {
   14a66:	b580      	push	{r7, lr}
   14a68:	b084      	sub	sp, #16
   14a6a:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   14a6c:	f000 fb0f 	bl	1508e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   14a70:	9002      	str	r0, [sp, #8]
   14a72:	9101      	str	r1, [sp, #4]
   14a74:	e7ff      	b.n	14a76 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E+0x10>
    }
   14a76:	9802      	ldr	r0, [sp, #8]
   14a78:	9901      	ldr	r1, [sp, #4]
   14a7a:	b004      	add	sp, #16
   14a7c:	bd80      	pop	{r7, pc}

00014a7e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>:
    fn deref(&self) -> &[T] {
   14a7e:	b580      	push	{r7, lr}
   14a80:	b084      	sub	sp, #16
   14a82:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   14a84:	f000 fb18 	bl	150b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   14a88:	9002      	str	r0, [sp, #8]
   14a8a:	9101      	str	r1, [sp, #4]
   14a8c:	e7ff      	b.n	14a8e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E+0x10>
    }
   14a8e:	9802      	ldr	r0, [sp, #8]
   14a90:	9901      	ldr	r1, [sp, #4]
   14a92:	b004      	add	sp, #16
   14a94:	bd80      	pop	{r7, pc}

00014a96 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>:
    fn drop(&mut self) {
   14a96:	b580      	push	{r7, lr}
   14a98:	b086      	sub	sp, #24
   14a9a:	9005      	str	r0, [sp, #20]
            ptr::drop_in_place(&mut self.vec[self.next..]);
   14a9c:	9003      	str	r0, [sp, #12]
   14a9e:	f000 f81f 	bl	14ae0 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   14aa2:	9002      	str	r0, [sp, #8]
   14aa4:	9101      	str	r1, [sp, #4]
   14aa6:	e7ff      	b.n	14aa8 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x12>
   14aa8:	9803      	ldr	r0, [sp, #12]
   14aaa:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   14aae:	9104      	str	r1, [sp, #16]
   14ab0:	9a04      	ldr	r2, [sp, #16]
   14ab2:	9802      	ldr	r0, [sp, #8]
   14ab4:	9901      	ldr	r1, [sp, #4]
   14ab6:	f001 fb4a 	bl	1614e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>
   14aba:	e7ff      	b.n	14abc <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x26>
   14abc:	e7ff      	b.n	14abe <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x28>
   14abe:	2000      	movs	r0, #0
            self.vec.0.len = 0;
   14ac0:	9903      	ldr	r1, [sp, #12]
   14ac2:	6008      	str	r0, [r1, #0]
    }
   14ac4:	b006      	add	sp, #24
   14ac6:	bd80      	pop	{r7, pc}

00014ac8 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>:

impl<T, N> ops::DerefMut for Vec<T, N>
where
    N: ArrayLength<T>,
{
    fn deref_mut(&mut self) -> &mut [T] {
   14ac8:	b580      	push	{r7, lr}
   14aca:	b084      	sub	sp, #16
   14acc:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   14ace:	f000 f8ff 	bl	14cd0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   14ad2:	9002      	str	r0, [sp, #8]
   14ad4:	9101      	str	r1, [sp, #4]
   14ad6:	e7ff      	b.n	14ad8 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E+0x10>
    }
   14ad8:	9802      	ldr	r0, [sp, #8]
   14ada:	9901      	ldr	r1, [sp, #4]
   14adc:	b004      	add	sp, #16
   14ade:	bd80      	pop	{r7, pc}

00014ae0 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>:
    fn deref_mut(&mut self) -> &mut [T] {
   14ae0:	b580      	push	{r7, lr}
   14ae2:	b084      	sub	sp, #16
   14ae4:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   14ae6:	f000 f908 	bl	14cfa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   14aea:	9002      	str	r0, [sp, #8]
   14aec:	9101      	str	r1, [sp, #4]
   14aee:	e7ff      	b.n	14af0 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E+0x10>
    }
   14af0:	9802      	ldr	r0, [sp, #8]
   14af2:	9901      	ldr	r1, [sp, #4]
   14af4:	b004      	add	sp, #16
   14af6:	bd80      	pop	{r7, pc}

00014af8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14af8:	b580      	push	{r7, lr}
   14afa:	b084      	sub	sp, #16
   14afc:	9001      	str	r0, [sp, #4]
   14afe:	9102      	str	r1, [sp, #8]
   14b00:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   14b02:	f000 f973 	bl	14dec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   14b06:	9000      	str	r0, [sp, #0]
   14b08:	e7ff      	b.n	14b0a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE+0x12>
    }
   14b0a:	9800      	ldr	r0, [sp, #0]
   14b0c:	f000 0001 	and.w	r0, r0, #1
   14b10:	b004      	add	sp, #16
   14b12:	bd80      	pop	{r7, pc}

00014b14 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>:
    pub fn new() -> Self {
   14b14:	b580      	push	{r7, lr}
   14b16:	b09c      	sub	sp, #112	; 0x70
   14b18:	a902      	add	r1, sp, #8
        Vec(crate::i::Vec::new())
   14b1a:	9001      	str	r0, [sp, #4]
   14b1c:	4608      	mov	r0, r1
   14b1e:	f000 f8c8 	bl	14cb2 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   14b22:	e7ff      	b.n	14b24 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E+0x10>
   14b24:	a902      	add	r1, sp, #8
   14b26:	2268      	movs	r2, #104	; 0x68
   14b28:	9801      	ldr	r0, [sp, #4]
   14b2a:	f009 fb29 	bl	1e180 <__aeabi_memcpy>
    }
   14b2e:	b01c      	add	sp, #112	; 0x70
   14b30:	bd80      	pop	{r7, pc}

00014b32 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>:
    pub fn new() -> Self {
   14b32:	b580      	push	{r7, lr}
   14b34:	b0b4      	sub	sp, #208	; 0xd0
   14b36:	a901      	add	r1, sp, #4
        Vec(crate::i::Vec::new())
   14b38:	9000      	str	r0, [sp, #0]
   14b3a:	4608      	mov	r0, r1
   14b3c:	f000 f8aa 	bl	14c94 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   14b40:	e7ff      	b.n	14b42 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE+0x10>
   14b42:	a901      	add	r1, sp, #4
   14b44:	22cc      	movs	r2, #204	; 0xcc
   14b46:	9800      	ldr	r0, [sp, #0]
   14b48:	f009 fb1a 	bl	1e180 <__aeabi_memcpy>
    }
   14b4c:	b034      	add	sp, #208	; 0xd0
   14b4e:	bd80      	pop	{r7, pc}

00014b50 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   14b50:	b580      	push	{r7, lr}
   14b52:	b086      	sub	sp, #24
   14b54:	460a      	mov	r2, r1
   14b56:	9004      	str	r0, [sp, #16]
   14b58:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.0.push(item)
   14b5c:	9203      	str	r2, [sp, #12]
   14b5e:	f000 fa0b 	bl	14f78 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>
   14b62:	9002      	str	r0, [sp, #8]
   14b64:	9101      	str	r1, [sp, #4]
   14b66:	e7ff      	b.n	14b68 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE+0x18>
    }
   14b68:	9802      	ldr	r0, [sp, #8]
   14b6a:	9901      	ldr	r1, [sp, #4]
   14b6c:	b006      	add	sp, #24
   14b6e:	bd80      	pop	{r7, pc}

00014b70 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>:
    pub fn clear(&mut self) {
   14b70:	b580      	push	{r7, lr}
   14b72:	b082      	sub	sp, #8
   14b74:	9001      	str	r0, [sp, #4]
        self.0.clear()
   14b76:	f000 fa28 	bl	14fca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>
   14b7a:	e7ff      	b.n	14b7c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E+0xc>
    }
   14b7c:	b002      	add	sp, #8
   14b7e:	bd80      	pop	{r7, pc}

00014b80 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>:
    pub fn clear(&mut self) {
   14b80:	b580      	push	{r7, lr}
   14b82:	b082      	sub	sp, #8
   14b84:	9001      	str	r0, [sp, #4]
        self.0.clear()
   14b86:	f000 fa29 	bl	14fdc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>
   14b8a:	e7ff      	b.n	14b8c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E+0xc>
    }
   14b8c:	b002      	add	sp, #8
   14b8e:	bd80      	pop	{r7, pc}

00014b90 <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>:
    fn into_iter(self) -> Self::IntoIter {
   14b90:	b580      	push	{r7, lr}
   14b92:	b0b6      	sub	sp, #216	; 0xd8
   14b94:	aa03      	add	r2, sp, #12
   14b96:	23cc      	movs	r3, #204	; 0xcc
        IntoIter { vec: self, next: 0 }
   14b98:	9002      	str	r0, [sp, #8]
   14b9a:	4610      	mov	r0, r2
   14b9c:	9201      	str	r2, [sp, #4]
   14b9e:	461a      	mov	r2, r3
   14ba0:	9300      	str	r3, [sp, #0]
   14ba2:	f009 faed 	bl	1e180 <__aeabi_memcpy>
   14ba6:	9802      	ldr	r0, [sp, #8]
   14ba8:	9901      	ldr	r1, [sp, #4]
   14baa:	9a00      	ldr	r2, [sp, #0]
   14bac:	f009 fae8 	bl	1e180 <__aeabi_memcpy>
   14bb0:	2000      	movs	r0, #0
   14bb2:	9902      	ldr	r1, [sp, #8]
   14bb4:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
    }
   14bb8:	b036      	add	sp, #216	; 0xd8
   14bba:	bd80      	pop	{r7, pc}

00014bbc <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>:
    fn next(&mut self) -> Option<Self::Item> {
   14bbc:	b580      	push	{r7, lr}
   14bbe:	b08e      	sub	sp, #56	; 0x38
   14bc0:	900a      	str	r0, [sp, #40]	; 0x28
        if self.next < self.vec.len() {
   14bc2:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   14bc6:	9008      	str	r0, [sp, #32]
   14bc8:	9107      	str	r1, [sp, #28]
   14bca:	f7ff ff58 	bl	14a7e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>
   14bce:	9006      	str	r0, [sp, #24]
   14bd0:	9105      	str	r1, [sp, #20]
   14bd2:	e7ff      	b.n	14bd4 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x18>
   14bd4:	9806      	ldr	r0, [sp, #24]
   14bd6:	9905      	ldr	r1, [sp, #20]
   14bd8:	f001 fa59 	bl	1608e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   14bdc:	9004      	str	r0, [sp, #16]
   14bde:	e7ff      	b.n	14be0 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x24>
   14be0:	9807      	ldr	r0, [sp, #28]
   14be2:	9904      	ldr	r1, [sp, #16]
   14be4:	4288      	cmp	r0, r1
   14be6:	d304      	bcc.n	14bf2 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x36>
   14be8:	e7ff      	b.n	14bea <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x2e>
   14bea:	2000      	movs	r0, #0
            None
   14bec:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   14bf0:	e029      	b.n	14c46 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
                (self.vec.0.buffer.as_ptr() as *const T)
   14bf2:	9808      	ldr	r0, [sp, #32]
   14bf4:	1d01      	adds	r1, r0, #4
   14bf6:	910c      	str	r1, [sp, #48]	; 0x30
   14bf8:	910d      	str	r1, [sp, #52]	; 0x34
   14bfa:	9103      	str	r1, [sp, #12]
   14bfc:	e7ff      	b.n	14bfe <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x42>
                    .add(self.next)
   14bfe:	9808      	ldr	r0, [sp, #32]
   14c00:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
                (self.vec.0.buffer.as_ptr() as *const T)
   14c04:	9803      	ldr	r0, [sp, #12]
   14c06:	f002 fc0c 	bl	17422 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   14c0a:	9002      	str	r0, [sp, #8]
   14c0c:	e7ff      	b.n	14c0e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x52>
   14c0e:	9802      	ldr	r0, [sp, #8]
   14c10:	f002 fc12 	bl	17438 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>
   14c14:	4601      	mov	r1, r0
   14c16:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
   14c1a:	9101      	str	r1, [sp, #4]
   14c1c:	e7ff      	b.n	14c1e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x62>
            self.next += 1;
   14c1e:	9808      	ldr	r0, [sp, #32]
   14c20:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   14c24:	1c4a      	adds	r2, r1, #1
   14c26:	4613      	mov	r3, r2
   14c28:	428a      	cmp	r2, r1
   14c2a:	9300      	str	r3, [sp, #0]
   14c2c:	d311      	bcc.n	14c52 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x96>
   14c2e:	e7ff      	b.n	14c30 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x74>
   14c30:	9800      	ldr	r0, [sp, #0]
   14c32:	9908      	ldr	r1, [sp, #32]
   14c34:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
            Some(item)
   14c38:	9a01      	ldr	r2, [sp, #4]
   14c3a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
   14c3e:	2301      	movs	r3, #1
   14c40:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   14c44:	e7ff      	b.n	14c46 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
    }
   14c46:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   14c4a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   14c4e:	b00e      	add	sp, #56	; 0x38
   14c50:	bd80      	pop	{r7, pc}
            self.next += 1;
   14c52:	f640 20e0 	movw	r0, #2784	; 0xae0
   14c56:	f2c0 0002 	movt	r0, #2
   14c5a:	f640 22c4 	movw	r2, #2756	; 0xac4
   14c5e:	f2c0 0202 	movt	r2, #2
   14c62:	211c      	movs	r1, #28
   14c64:	f002 feb8 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14c68:	defe      	udf	#254	; 0xfe

00014c6a <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE>:
   14c6a:	b580      	push	{r7, lr}
   14c6c:	b084      	sub	sp, #16
   14c6e:	9002      	str	r0, [sp, #8]
   14c70:	9103      	str	r1, [sp, #12]
   14c72:	f640 20fc 	movw	r0, #2812	; 0xafc
   14c76:	f2c0 0002 	movt	r0, #2
   14c7a:	2202      	movs	r2, #2
   14c7c:	9001      	str	r0, [sp, #4]
   14c7e:	4608      	mov	r0, r1
   14c80:	9901      	ldr	r1, [sp, #4]
   14c82:	f003 fbc9 	bl	18418 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
   14c86:	9000      	str	r0, [sp, #0]
   14c88:	e7ff      	b.n	14c8a <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE+0x20>
   14c8a:	9800      	ldr	r0, [sp, #0]
   14c8c:	f000 0001 	and.w	r0, r0, #1
   14c90:	b004      	add	sp, #16
   14c92:	bd80      	pop	{r7, pc}

00014c94 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>:
    pub const fn new() -> Self {
   14c94:	b580      	push	{r7, lr}
   14c96:	b0b4      	sub	sp, #208	; 0xd0
            buffer: MaybeUninit::uninit(),
   14c98:	9001      	str	r0, [sp, #4]
   14c9a:	e7ff      	b.n	14c9c <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE+0x8>
        Self {
   14c9c:	9801      	ldr	r0, [sp, #4]
   14c9e:	3004      	adds	r0, #4
   14ca0:	a902      	add	r1, sp, #8
   14ca2:	22c8      	movs	r2, #200	; 0xc8
   14ca4:	f009 fa6c 	bl	1e180 <__aeabi_memcpy>
   14ca8:	2100      	movs	r1, #0
   14caa:	9a01      	ldr	r2, [sp, #4]
   14cac:	6011      	str	r1, [r2, #0]
    }
   14cae:	b034      	add	sp, #208	; 0xd0
   14cb0:	bd80      	pop	{r7, pc}

00014cb2 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>:
    pub const fn new() -> Self {
   14cb2:	b580      	push	{r7, lr}
   14cb4:	b09a      	sub	sp, #104	; 0x68
            buffer: MaybeUninit::uninit(),
   14cb6:	9000      	str	r0, [sp, #0]
   14cb8:	e7ff      	b.n	14cba <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE+0x8>
        Self {
   14cba:	9800      	ldr	r0, [sp, #0]
   14cbc:	3004      	adds	r0, #4
   14cbe:	a901      	add	r1, sp, #4
   14cc0:	2264      	movs	r2, #100	; 0x64
   14cc2:	f009 fa5d 	bl	1e180 <__aeabi_memcpy>
   14cc6:	2100      	movs	r1, #0
   14cc8:	9a00      	ldr	r2, [sp, #0]
   14cca:	6011      	str	r1, [r2, #0]
    }
   14ccc:	b01a      	add	sp, #104	; 0x68
   14cce:	bd80      	pop	{r7, pc}

00014cd0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   14cd0:	b580      	push	{r7, lr}
   14cd2:	b088      	sub	sp, #32
   14cd4:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   14cd6:	1d01      	adds	r1, r0, #4
   14cd8:	9106      	str	r1, [sp, #24]
   14cda:	9107      	str	r1, [sp, #28]
   14cdc:	9004      	str	r0, [sp, #16]
   14cde:	9103      	str	r1, [sp, #12]
   14ce0:	e7ff      	b.n	14ce2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x12>
   14ce2:	9804      	ldr	r0, [sp, #16]
   14ce4:	6801      	ldr	r1, [r0, #0]
   14ce6:	9803      	ldr	r0, [sp, #12]
   14ce8:	f001 f9ad 	bl	16046 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   14cec:	9002      	str	r0, [sp, #8]
   14cee:	9101      	str	r1, [sp, #4]
   14cf0:	e7ff      	b.n	14cf2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x22>
    }
   14cf2:	9802      	ldr	r0, [sp, #8]
   14cf4:	9901      	ldr	r1, [sp, #4]
   14cf6:	b008      	add	sp, #32
   14cf8:	bd80      	pop	{r7, pc}

00014cfa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   14cfa:	b580      	push	{r7, lr}
   14cfc:	b088      	sub	sp, #32
   14cfe:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   14d00:	1d01      	adds	r1, r0, #4
   14d02:	9106      	str	r1, [sp, #24]
   14d04:	9107      	str	r1, [sp, #28]
   14d06:	9004      	str	r0, [sp, #16]
   14d08:	9103      	str	r1, [sp, #12]
   14d0a:	e7ff      	b.n	14d0c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x12>
   14d0c:	9804      	ldr	r0, [sp, #16]
   14d0e:	6801      	ldr	r1, [r0, #0]
   14d10:	9803      	ldr	r0, [sp, #12]
   14d12:	f001 f998 	bl	16046 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   14d16:	9002      	str	r0, [sp, #8]
   14d18:	9101      	str	r1, [sp, #4]
   14d1a:	e7ff      	b.n	14d1c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x22>
    }
   14d1c:	9802      	ldr	r0, [sp, #8]
   14d1e:	9901      	ldr	r1, [sp, #4]
   14d20:	b008      	add	sp, #32
   14d22:	bd80      	pop	{r7, pc}

00014d24 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   14d24:	b580      	push	{r7, lr}
   14d26:	b08a      	sub	sp, #40	; 0x28
   14d28:	460a      	mov	r2, r1
   14d2a:	9006      	str	r0, [sp, #24]
   14d2c:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   14d30:	1d01      	adds	r1, r0, #4
   14d32:	9108      	str	r1, [sp, #32]
   14d34:	9109      	str	r1, [sp, #36]	; 0x24
   14d36:	9005      	str	r0, [sp, #20]
   14d38:	9204      	str	r2, [sp, #16]
   14d3a:	9103      	str	r1, [sp, #12]
   14d3c:	e7ff      	b.n	14d3e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x1a>
            .add(self.len)
   14d3e:	9805      	ldr	r0, [sp, #20]
   14d40:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   14d42:	9803      	ldr	r0, [sp, #12]
   14d44:	f001 fa9c 	bl	16280 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   14d48:	9002      	str	r0, [sp, #8]
   14d4a:	e7ff      	b.n	14d4c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x28>
   14d4c:	9802      	ldr	r0, [sp, #8]
   14d4e:	9904      	ldr	r1, [sp, #16]
   14d50:	f001 faa1 	bl	16296 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   14d54:	e7ff      	b.n	14d56 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x32>
        self.len += 1;
   14d56:	9805      	ldr	r0, [sp, #20]
   14d58:	6801      	ldr	r1, [r0, #0]
   14d5a:	1c4a      	adds	r2, r1, #1
   14d5c:	4613      	mov	r3, r2
   14d5e:	428a      	cmp	r2, r1
   14d60:	9301      	str	r3, [sp, #4]
   14d62:	d305      	bcc.n	14d70 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x4c>
   14d64:	e7ff      	b.n	14d66 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x42>
   14d66:	9801      	ldr	r0, [sp, #4]
   14d68:	9905      	ldr	r1, [sp, #20]
   14d6a:	6008      	str	r0, [r1, #0]
    }
   14d6c:	b00a      	add	sp, #40	; 0x28
   14d6e:	bd80      	pop	{r7, pc}
        self.len += 1;
   14d70:	f640 30a0 	movw	r0, #2976	; 0xba0
   14d74:	f2c0 0002 	movt	r0, #2
   14d78:	f640 3284 	movw	r2, #2948	; 0xb84
   14d7c:	f2c0 0202 	movt	r2, #2
   14d80:	211c      	movs	r1, #28
   14d82:	f002 fe29 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14d86:	defe      	udf	#254	; 0xfe

00014d88 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   14d88:	b580      	push	{r7, lr}
   14d8a:	b08a      	sub	sp, #40	; 0x28
   14d8c:	460a      	mov	r2, r1
   14d8e:	9006      	str	r0, [sp, #24]
   14d90:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   14d94:	1d01      	adds	r1, r0, #4
   14d96:	9108      	str	r1, [sp, #32]
   14d98:	9109      	str	r1, [sp, #36]	; 0x24
   14d9a:	9005      	str	r0, [sp, #20]
   14d9c:	9204      	str	r2, [sp, #16]
   14d9e:	9103      	str	r1, [sp, #12]
   14da0:	e7ff      	b.n	14da2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x1a>
            .add(self.len)
   14da2:	9805      	ldr	r0, [sp, #20]
   14da4:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   14da6:	9803      	ldr	r0, [sp, #12]
   14da8:	f001 fa6a 	bl	16280 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   14dac:	9002      	str	r0, [sp, #8]
   14dae:	e7ff      	b.n	14db0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x28>
   14db0:	9802      	ldr	r0, [sp, #8]
   14db2:	9904      	ldr	r1, [sp, #16]
   14db4:	f001 fa6f 	bl	16296 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   14db8:	e7ff      	b.n	14dba <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x32>
        self.len += 1;
   14dba:	9805      	ldr	r0, [sp, #20]
   14dbc:	6801      	ldr	r1, [r0, #0]
   14dbe:	1c4a      	adds	r2, r1, #1
   14dc0:	4613      	mov	r3, r2
   14dc2:	428a      	cmp	r2, r1
   14dc4:	9301      	str	r3, [sp, #4]
   14dc6:	d305      	bcc.n	14dd4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x4c>
   14dc8:	e7ff      	b.n	14dca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x42>
   14dca:	9801      	ldr	r0, [sp, #4]
   14dcc:	9905      	ldr	r1, [sp, #20]
   14dce:	6008      	str	r0, [r1, #0]
    }
   14dd0:	b00a      	add	sp, #40	; 0x28
   14dd2:	bd80      	pop	{r7, pc}
        self.len += 1;
   14dd4:	f640 30a0 	movw	r0, #2976	; 0xba0
   14dd8:	f2c0 0002 	movt	r0, #2
   14ddc:	f640 3284 	movw	r2, #2948	; 0xb84
   14de0:	f2c0 0202 	movt	r2, #2
   14de4:	211c      	movs	r1, #28
   14de6:	f002 fdf7 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14dea:	defe      	udf	#254	; 0xfe

00014dec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14dec:	b580      	push	{r7, lr}
   14dee:	b094      	sub	sp, #80	; 0x50
   14df0:	900e      	str	r0, [sp, #56]	; 0x38
   14df2:	910f      	str	r1, [sp, #60]	; 0x3c
   14df4:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   14df6:	6803      	ldr	r3, [r0, #0]
   14df8:	9009      	str	r0, [sp, #36]	; 0x24
   14dfa:	4608      	mov	r0, r1
   14dfc:	9108      	str	r1, [sp, #32]
   14dfe:	4611      	mov	r1, r2
   14e00:	9207      	str	r2, [sp, #28]
   14e02:	9306      	str	r3, [sp, #24]
   14e04:	f001 f943 	bl	1608e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   14e08:	9005      	str	r0, [sp, #20]
   14e0a:	e7ff      	b.n	14e0c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x20>
   14e0c:	9806      	ldr	r0, [sp, #24]
   14e0e:	9905      	ldr	r1, [sp, #20]
   14e10:	1842      	adds	r2, r0, r1
   14e12:	4613      	mov	r3, r2
   14e14:	4282      	cmp	r2, r0
   14e16:	9304      	str	r3, [sp, #16]
   14e18:	d33f      	bcc.n	14e9a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xae>
   14e1a:	e7ff      	b.n	14e1c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x30>
   14e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
   14e1e:	f000 f96a 	bl	150f6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>
   14e22:	9003      	str	r0, [sp, #12]
   14e24:	e7ff      	b.n	14e26 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x3a>
   14e26:	9804      	ldr	r0, [sp, #16]
   14e28:	9903      	ldr	r1, [sp, #12]
   14e2a:	4288      	cmp	r0, r1
   14e2c:	d807      	bhi.n	14e3e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x52>
   14e2e:	e7ff      	b.n	14e30 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x44>
            for elem in other {
   14e30:	9808      	ldr	r0, [sp, #32]
   14e32:	9907      	ldr	r1, [sp, #28]
   14e34:	f001 f99f 	bl	16176 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   14e38:	9002      	str	r0, [sp, #8]
   14e3a:	9101      	str	r1, [sp, #4]
   14e3c:	e003      	b.n	14e46 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x5a>
   14e3e:	2001      	movs	r0, #1
            Err(())
   14e40:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14e44:	e025      	b.n	14e92 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   14e46:	9802      	ldr	r0, [sp, #8]
   14e48:	900b      	str	r0, [sp, #44]	; 0x2c
   14e4a:	9901      	ldr	r1, [sp, #4]
   14e4c:	910c      	str	r1, [sp, #48]	; 0x30
   14e4e:	e7ff      	b.n	14e50 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
   14e50:	a80b      	add	r0, sp, #44	; 0x2c
   14e52:	f001 f9b2 	bl	161ba <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   14e56:	900d      	str	r0, [sp, #52]	; 0x34
   14e58:	e7ff      	b.n	14e5a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x6e>
   14e5a:	980d      	ldr	r0, [sp, #52]	; 0x34
   14e5c:	2800      	cmp	r0, #0
   14e5e:	4601      	mov	r1, r0
   14e60:	bf18      	it	ne
   14e62:	2101      	movne	r1, #1
   14e64:	2800      	cmp	r0, #0
   14e66:	d001      	beq.n	14e6c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x80>
   14e68:	e7ff      	b.n	14e6a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x7e>
   14e6a:	e004      	b.n	14e76 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x8a>
   14e6c:	2000      	movs	r0, #0
            Ok(())
   14e6e:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14e72:	e00e      	b.n	14e92 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   14e74:	defe      	udf	#254	; 0xfe
   14e76:	980d      	ldr	r0, [sp, #52]	; 0x34
   14e78:	9011      	str	r0, [sp, #68]	; 0x44
   14e7a:	9012      	str	r0, [sp, #72]	; 0x48
   14e7c:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   14e7e:	f001 f856 	bl	15f2e <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   14e82:	9000      	str	r0, [sp, #0]
   14e84:	e7ff      	b.n	14e86 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x9a>
   14e86:	9809      	ldr	r0, [sp, #36]	; 0x24
   14e88:	9900      	ldr	r1, [sp, #0]
   14e8a:	f7ff ff4b 	bl	14d24 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>
   14e8e:	e7ff      	b.n	14e90 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa4>
            for elem in other {
   14e90:	e7de      	b.n	14e50 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
    }
   14e92:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   14e96:	b014      	add	sp, #80	; 0x50
   14e98:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   14e9a:	f640 30a0 	movw	r0, #2976	; 0xba0
   14e9e:	f2c0 0002 	movt	r0, #2
   14ea2:	f640 32bc 	movw	r2, #3004	; 0xbbc
   14ea6:	f2c0 0202 	movt	r2, #2
   14eaa:	211c      	movs	r1, #28
   14eac:	f002 fd94 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14eb0:	defe      	udf	#254	; 0xfe

00014eb2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14eb2:	b580      	push	{r7, lr}
   14eb4:	b094      	sub	sp, #80	; 0x50
   14eb6:	900e      	str	r0, [sp, #56]	; 0x38
   14eb8:	910f      	str	r1, [sp, #60]	; 0x3c
   14eba:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   14ebc:	6803      	ldr	r3, [r0, #0]
   14ebe:	9009      	str	r0, [sp, #36]	; 0x24
   14ec0:	4608      	mov	r0, r1
   14ec2:	9108      	str	r1, [sp, #32]
   14ec4:	4611      	mov	r1, r2
   14ec6:	9207      	str	r2, [sp, #28]
   14ec8:	9306      	str	r3, [sp, #24]
   14eca:	f001 f8e0 	bl	1608e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   14ece:	9005      	str	r0, [sp, #20]
   14ed0:	e7ff      	b.n	14ed2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x20>
   14ed2:	9806      	ldr	r0, [sp, #24]
   14ed4:	9905      	ldr	r1, [sp, #20]
   14ed6:	1842      	adds	r2, r0, r1
   14ed8:	4613      	mov	r3, r2
   14eda:	4282      	cmp	r2, r0
   14edc:	9304      	str	r3, [sp, #16]
   14ede:	d33f      	bcc.n	14f60 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xae>
   14ee0:	e7ff      	b.n	14ee2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x30>
   14ee2:	9809      	ldr	r0, [sp, #36]	; 0x24
   14ee4:	f000 f8fd 	bl	150e2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   14ee8:	9003      	str	r0, [sp, #12]
   14eea:	e7ff      	b.n	14eec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x3a>
   14eec:	9804      	ldr	r0, [sp, #16]
   14eee:	9903      	ldr	r1, [sp, #12]
   14ef0:	4288      	cmp	r0, r1
   14ef2:	d807      	bhi.n	14f04 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x52>
   14ef4:	e7ff      	b.n	14ef6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x44>
            for elem in other {
   14ef6:	9808      	ldr	r0, [sp, #32]
   14ef8:	9907      	ldr	r1, [sp, #28]
   14efa:	f001 f93c 	bl	16176 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   14efe:	9002      	str	r0, [sp, #8]
   14f00:	9101      	str	r1, [sp, #4]
   14f02:	e003      	b.n	14f0c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x5a>
   14f04:	2001      	movs	r0, #1
            Err(())
   14f06:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14f0a:	e025      	b.n	14f58 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   14f0c:	9802      	ldr	r0, [sp, #8]
   14f0e:	900b      	str	r0, [sp, #44]	; 0x2c
   14f10:	9901      	ldr	r1, [sp, #4]
   14f12:	910c      	str	r1, [sp, #48]	; 0x30
   14f14:	e7ff      	b.n	14f16 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
   14f16:	a80b      	add	r0, sp, #44	; 0x2c
   14f18:	f001 f94f 	bl	161ba <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   14f1c:	900d      	str	r0, [sp, #52]	; 0x34
   14f1e:	e7ff      	b.n	14f20 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x6e>
   14f20:	980d      	ldr	r0, [sp, #52]	; 0x34
   14f22:	2800      	cmp	r0, #0
   14f24:	4601      	mov	r1, r0
   14f26:	bf18      	it	ne
   14f28:	2101      	movne	r1, #1
   14f2a:	2800      	cmp	r0, #0
   14f2c:	d001      	beq.n	14f32 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x80>
   14f2e:	e7ff      	b.n	14f30 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x7e>
   14f30:	e004      	b.n	14f3c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x8a>
   14f32:	2000      	movs	r0, #0
            Ok(())
   14f34:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14f38:	e00e      	b.n	14f58 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   14f3a:	defe      	udf	#254	; 0xfe
   14f3c:	980d      	ldr	r0, [sp, #52]	; 0x34
   14f3e:	9011      	str	r0, [sp, #68]	; 0x44
   14f40:	9012      	str	r0, [sp, #72]	; 0x48
   14f42:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   14f44:	f000 fff3 	bl	15f2e <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   14f48:	9000      	str	r0, [sp, #0]
   14f4a:	e7ff      	b.n	14f4c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x9a>
   14f4c:	9809      	ldr	r0, [sp, #36]	; 0x24
   14f4e:	9900      	ldr	r1, [sp, #0]
   14f50:	f7ff ff1a 	bl	14d88 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   14f54:	e7ff      	b.n	14f56 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa4>
            for elem in other {
   14f56:	e7de      	b.n	14f16 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
    }
   14f58:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   14f5c:	b014      	add	sp, #80	; 0x50
   14f5e:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   14f60:	f640 30a0 	movw	r0, #2976	; 0xba0
   14f64:	f2c0 0002 	movt	r0, #2
   14f68:	f640 32bc 	movw	r2, #3004	; 0xbbc
   14f6c:	f2c0 0202 	movt	r2, #2
   14f70:	211c      	movs	r1, #28
   14f72:	f002 fd31 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14f76:	defe      	udf	#254	; 0xfe

00014f78 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   14f78:	b580      	push	{r7, lr}
   14f7a:	b088      	sub	sp, #32
   14f7c:	460a      	mov	r2, r1
   14f7e:	9006      	str	r0, [sp, #24]
   14f80:	f8ad 101e 	strh.w	r1, [sp, #30]
        if self.len < self.capacity() {
   14f84:	6801      	ldr	r1, [r0, #0]
   14f86:	9004      	str	r0, [sp, #16]
   14f88:	9203      	str	r2, [sp, #12]
   14f8a:	9102      	str	r1, [sp, #8]
   14f8c:	f000 f8a9 	bl	150e2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   14f90:	9001      	str	r0, [sp, #4]
   14f92:	e7ff      	b.n	14f94 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x1c>
   14f94:	9802      	ldr	r0, [sp, #8]
   14f96:	9901      	ldr	r1, [sp, #4]
   14f98:	4288      	cmp	r0, r1
   14f9a:	d307      	bcc.n	14fac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x34>
   14f9c:	e7ff      	b.n	14f9e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x26>
            Err(item)
   14f9e:	9803      	ldr	r0, [sp, #12]
   14fa0:	f8ad 0016 	strh.w	r0, [sp, #22]
   14fa4:	2101      	movs	r1, #1
   14fa6:	f8ad 1014 	strh.w	r1, [sp, #20]
        if self.len < self.capacity() {
   14faa:	e008      	b.n	14fbe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
            unsafe { self.push_unchecked(item) }
   14fac:	9804      	ldr	r0, [sp, #16]
   14fae:	9903      	ldr	r1, [sp, #12]
   14fb0:	f7ff feea 	bl	14d88 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   14fb4:	e7ff      	b.n	14fb6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x3e>
   14fb6:	2000      	movs	r0, #0
            Ok(())
   14fb8:	f8ad 0014 	strh.w	r0, [sp, #20]
        if self.len < self.capacity() {
   14fbc:	e7ff      	b.n	14fbe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
    }
   14fbe:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   14fc2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   14fc6:	b008      	add	sp, #32
   14fc8:	bd80      	pop	{r7, pc}

00014fca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>:
    pub(crate) fn clear(&mut self) {
   14fca:	b580      	push	{r7, lr}
   14fcc:	b082      	sub	sp, #8
   14fce:	9001      	str	r0, [sp, #4]
   14fd0:	2100      	movs	r1, #0
        self.truncate(0);
   14fd2:	f000 f8d0 	bl	15176 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>
   14fd6:	e7ff      	b.n	14fd8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE+0xe>
    }
   14fd8:	b002      	add	sp, #8
   14fda:	bd80      	pop	{r7, pc}

00014fdc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>:
    pub(crate) fn clear(&mut self) {
   14fdc:	b580      	push	{r7, lr}
   14fde:	b082      	sub	sp, #8
   14fe0:	9001      	str	r0, [sp, #4]
   14fe2:	2100      	movs	r1, #0
        self.truncate(0);
   14fe4:	f000 f891 	bl	1510a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>
   14fe8:	e7ff      	b.n	14fea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E+0xe>
    }
   14fea:	b002      	add	sp, #8
   14fec:	bd80      	pop	{r7, pc}

00014fee <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>:
    pub(crate) fn clone(&self) -> Self
   14fee:	b580      	push	{r7, lr}
   14ff0:	b0a0      	sub	sp, #128	; 0x80
   14ff2:	911f      	str	r1, [sp, #124]	; 0x7c
   14ff4:	aa05      	add	r2, sp, #20
        let mut new = Self::new();
   14ff6:	9004      	str	r0, [sp, #16]
   14ff8:	4610      	mov	r0, r2
   14ffa:	9103      	str	r1, [sp, #12]
   14ffc:	f7ff fe59 	bl	14cb2 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   15000:	e7ff      	b.n	15002 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   15002:	9803      	ldr	r0, [sp, #12]
   15004:	f000 f843 	bl	1508e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   15008:	9002      	str	r0, [sp, #8]
   1500a:	9101      	str	r1, [sp, #4]
   1500c:	e7ff      	b.n	1500e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x20>
   1500e:	a805      	add	r0, sp, #20
   15010:	9902      	ldr	r1, [sp, #8]
   15012:	9a01      	ldr	r2, [sp, #4]
   15014:	f7ff ff4d 	bl	14eb2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>
   15018:	9000      	str	r0, [sp, #0]
   1501a:	e7ff      	b.n	1501c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x2e>
   1501c:	9800      	ldr	r0, [sp, #0]
   1501e:	f000 0001 	and.w	r0, r0, #1
   15022:	f640 31cc 	movw	r1, #3020	; 0xbcc
   15026:	f2c0 0102 	movt	r1, #2
   1502a:	f000 f959 	bl	152e0 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   1502e:	e7ff      	b.n	15030 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x42>
   15030:	a905      	add	r1, sp, #20
   15032:	2268      	movs	r2, #104	; 0x68
        new
   15034:	9804      	ldr	r0, [sp, #16]
   15036:	f009 f8a3 	bl	1e180 <__aeabi_memcpy>
    }
   1503a:	b020      	add	sp, #128	; 0x80
   1503c:	bd80      	pop	{r7, pc}

0001503e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>:
    pub(crate) fn clone(&self) -> Self
   1503e:	b580      	push	{r7, lr}
   15040:	b0ba      	sub	sp, #232	; 0xe8
   15042:	9139      	str	r1, [sp, #228]	; 0xe4
   15044:	aa06      	add	r2, sp, #24
        let mut new = Self::new();
   15046:	9005      	str	r0, [sp, #20]
   15048:	4610      	mov	r0, r2
   1504a:	9104      	str	r1, [sp, #16]
   1504c:	f7ff fe22 	bl	14c94 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   15050:	e7ff      	b.n	15052 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   15052:	9804      	ldr	r0, [sp, #16]
   15054:	f000 f830 	bl	150b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   15058:	9003      	str	r0, [sp, #12]
   1505a:	9102      	str	r1, [sp, #8]
   1505c:	e7ff      	b.n	1505e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x20>
   1505e:	a806      	add	r0, sp, #24
   15060:	9903      	ldr	r1, [sp, #12]
   15062:	9a02      	ldr	r2, [sp, #8]
   15064:	f7ff fec2 	bl	14dec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   15068:	9001      	str	r0, [sp, #4]
   1506a:	e7ff      	b.n	1506c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x2e>
   1506c:	9801      	ldr	r0, [sp, #4]
   1506e:	f000 0001 	and.w	r0, r0, #1
   15072:	f640 31cc 	movw	r1, #3020	; 0xbcc
   15076:	f2c0 0102 	movt	r1, #2
   1507a:	f000 f931 	bl	152e0 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   1507e:	e7ff      	b.n	15080 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x42>
   15080:	a906      	add	r1, sp, #24
   15082:	22cc      	movs	r2, #204	; 0xcc
        new
   15084:	9805      	ldr	r0, [sp, #20]
   15086:	f009 f87b 	bl	1e180 <__aeabi_memcpy>
    }
   1508a:	b03a      	add	sp, #232	; 0xe8
   1508c:	bd80      	pop	{r7, pc}

0001508e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   1508e:	b580      	push	{r7, lr}
   15090:	b088      	sub	sp, #32
   15092:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   15094:	1d01      	adds	r1, r0, #4
   15096:	9106      	str	r1, [sp, #24]
   15098:	9107      	str	r1, [sp, #28]
   1509a:	9004      	str	r0, [sp, #16]
   1509c:	9103      	str	r1, [sp, #12]
   1509e:	e7ff      	b.n	150a0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x12>
   150a0:	9804      	ldr	r0, [sp, #16]
   150a2:	6801      	ldr	r1, [r0, #0]
   150a4:	9803      	ldr	r0, [sp, #12]
   150a6:	f000 ffc1 	bl	1602c <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   150aa:	9002      	str	r0, [sp, #8]
   150ac:	9101      	str	r1, [sp, #4]
   150ae:	e7ff      	b.n	150b0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x22>
    }
   150b0:	9802      	ldr	r0, [sp, #8]
   150b2:	9901      	ldr	r1, [sp, #4]
   150b4:	b008      	add	sp, #32
   150b6:	bd80      	pop	{r7, pc}

000150b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   150b8:	b580      	push	{r7, lr}
   150ba:	b088      	sub	sp, #32
   150bc:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   150be:	1d01      	adds	r1, r0, #4
   150c0:	9106      	str	r1, [sp, #24]
   150c2:	9107      	str	r1, [sp, #28]
   150c4:	9004      	str	r0, [sp, #16]
   150c6:	9103      	str	r1, [sp, #12]
   150c8:	e7ff      	b.n	150ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x12>
   150ca:	9804      	ldr	r0, [sp, #16]
   150cc:	6801      	ldr	r1, [r0, #0]
   150ce:	9803      	ldr	r0, [sp, #12]
   150d0:	f000 ffac 	bl	1602c <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   150d4:	9002      	str	r0, [sp, #8]
   150d6:	9101      	str	r1, [sp, #4]
   150d8:	e7ff      	b.n	150da <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x22>
    }
   150da:	9802      	ldr	r0, [sp, #8]
   150dc:	9901      	ldr	r1, [sp, #4]
   150de:	b008      	add	sp, #32
   150e0:	bd80      	pop	{r7, pc}

000150e2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>:
    pub(crate) fn capacity(&self) -> usize {
   150e2:	b580      	push	{r7, lr}
   150e4:	b082      	sub	sp, #8
   150e6:	9001      	str	r0, [sp, #4]
        N::to_usize()
   150e8:	f000 fa26 	bl	15538 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   150ec:	9000      	str	r0, [sp, #0]
   150ee:	e7ff      	b.n	150f0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E+0xe>
    }
   150f0:	9800      	ldr	r0, [sp, #0]
   150f2:	b002      	add	sp, #8
   150f4:	bd80      	pop	{r7, pc}

000150f6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>:
    pub(crate) fn capacity(&self) -> usize {
   150f6:	b580      	push	{r7, lr}
   150f8:	b082      	sub	sp, #8
   150fa:	9001      	str	r0, [sp, #4]
        N::to_usize()
   150fc:	f000 fa34 	bl	15568 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>
   15100:	9000      	str	r0, [sp, #0]
   15102:	e7ff      	b.n	15104 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E+0xe>
    }
   15104:	9800      	ldr	r0, [sp, #0]
   15106:	b002      	add	sp, #8
   15108:	bd80      	pop	{r7, pc}

0001510a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>:
    pub(crate) fn truncate(&mut self, len: usize) {
   1510a:	b580      	push	{r7, lr}
   1510c:	b08a      	sub	sp, #40	; 0x28
   1510e:	9007      	str	r0, [sp, #28]
   15110:	9108      	str	r1, [sp, #32]
   15112:	9106      	str	r1, [sp, #24]
   15114:	9005      	str	r0, [sp, #20]
   15116:	e7ff      	b.n	15118 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
            while len < self.len {
   15118:	9805      	ldr	r0, [sp, #20]
   1511a:	6801      	ldr	r1, [r0, #0]
   1511c:	9a06      	ldr	r2, [sp, #24]
   1511e:	428a      	cmp	r2, r1
   15120:	d302      	bcc.n	15128 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1e>
   15122:	e7ff      	b.n	15124 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1a>
    }
   15124:	b00a      	add	sp, #40	; 0x28
   15126:	bd80      	pop	{r7, pc}
                self.len -= 1;
   15128:	9805      	ldr	r0, [sp, #20]
   1512a:	6801      	ldr	r1, [r0, #0]
   1512c:	1e4a      	subs	r2, r1, #1
   1512e:	2901      	cmp	r1, #1
   15130:	9204      	str	r2, [sp, #16]
   15132:	d314      	bcc.n	1515e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x54>
   15134:	e7ff      	b.n	15136 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x2c>
   15136:	9804      	ldr	r0, [sp, #16]
   15138:	9905      	ldr	r1, [sp, #20]
   1513a:	6008      	str	r0, [r1, #0]
                let len = self.len;
   1513c:	680a      	ldr	r2, [r1, #0]
   1513e:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   15140:	4608      	mov	r0, r1
   15142:	9203      	str	r2, [sp, #12]
   15144:	f7ff fdd9 	bl	14cfa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   15148:	9002      	str	r0, [sp, #8]
   1514a:	9101      	str	r1, [sp, #4]
   1514c:	e7ff      	b.n	1514e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x44>
   1514e:	9802      	ldr	r0, [sp, #8]
   15150:	9901      	ldr	r1, [sp, #4]
   15152:	9a03      	ldr	r2, [sp, #12]
   15154:	f000 ff89 	bl	1606a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   15158:	e7ff      	b.n	1515a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x50>
   1515a:	e7ff      	b.n	1515c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x52>
            while len < self.len {
   1515c:	e7dc      	b.n	15118 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
                self.len -= 1;
   1515e:	f640 3060 	movw	r0, #2912	; 0xb60
   15162:	f2c0 0002 	movt	r0, #2
   15166:	f640 32dc 	movw	r2, #3036	; 0xbdc
   1516a:	f2c0 0202 	movt	r2, #2
   1516e:	2121      	movs	r1, #33	; 0x21
   15170:	f002 fc32 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15174:	defe      	udf	#254	; 0xfe

00015176 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   15176:	b580      	push	{r7, lr}
   15178:	b08a      	sub	sp, #40	; 0x28
   1517a:	9007      	str	r0, [sp, #28]
   1517c:	9108      	str	r1, [sp, #32]
   1517e:	9106      	str	r1, [sp, #24]
   15180:	9005      	str	r0, [sp, #20]
   15182:	e7ff      	b.n	15184 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
            while len < self.len {
   15184:	9805      	ldr	r0, [sp, #20]
   15186:	6801      	ldr	r1, [r0, #0]
   15188:	9a06      	ldr	r2, [sp, #24]
   1518a:	428a      	cmp	r2, r1
   1518c:	d302      	bcc.n	15194 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1e>
   1518e:	e7ff      	b.n	15190 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1a>
    }
   15190:	b00a      	add	sp, #40	; 0x28
   15192:	bd80      	pop	{r7, pc}
                self.len -= 1;
   15194:	9805      	ldr	r0, [sp, #20]
   15196:	6801      	ldr	r1, [r0, #0]
   15198:	1e4a      	subs	r2, r1, #1
   1519a:	2901      	cmp	r1, #1
   1519c:	9204      	str	r2, [sp, #16]
   1519e:	d314      	bcc.n	151ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x54>
   151a0:	e7ff      	b.n	151a2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x2c>
   151a2:	9804      	ldr	r0, [sp, #16]
   151a4:	9905      	ldr	r1, [sp, #20]
   151a6:	6008      	str	r0, [r1, #0]
                let len = self.len;
   151a8:	680a      	ldr	r2, [r1, #0]
   151aa:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   151ac:	4608      	mov	r0, r1
   151ae:	9203      	str	r2, [sp, #12]
   151b0:	f7ff fd8e 	bl	14cd0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   151b4:	9002      	str	r0, [sp, #8]
   151b6:	9101      	str	r1, [sp, #4]
   151b8:	e7ff      	b.n	151ba <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x44>
   151ba:	9802      	ldr	r0, [sp, #8]
   151bc:	9901      	ldr	r1, [sp, #4]
   151be:	9a03      	ldr	r2, [sp, #12]
   151c0:	f000 ff53 	bl	1606a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   151c4:	e7ff      	b.n	151c6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x50>
   151c6:	e7ff      	b.n	151c8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x52>
            while len < self.len {
   151c8:	e7dc      	b.n	15184 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
                self.len -= 1;
   151ca:	f640 3060 	movw	r0, #2912	; 0xb60
   151ce:	f2c0 0002 	movt	r0, #2
   151d2:	f640 32dc 	movw	r2, #3036	; 0xbdc
   151d6:	f2c0 0202 	movt	r2, #2
   151da:	2121      	movs	r1, #33	; 0x21
   151dc:	f002 fbfc 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   151e0:	defe      	udf	#254	; 0xfe

000151e2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>:
   151e2:	b082      	sub	sp, #8
   151e4:	9001      	str	r0, [sp, #4]
   151e6:	8800      	ldrh	r0, [r0, #0]
   151e8:	2800      	cmp	r0, #0
   151ea:	d004      	beq.n	151f6 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x14>
   151ec:	e7ff      	b.n	151ee <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0xc>
   151ee:	2000      	movs	r0, #0
   151f0:	f88d 0003 	strb.w	r0, [sp, #3]
   151f4:	e003      	b.n	151fe <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   151f6:	2001      	movs	r0, #1
   151f8:	f88d 0003 	strb.w	r0, [sp, #3]
   151fc:	e7ff      	b.n	151fe <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   151fe:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15202:	b002      	add	sp, #8
   15204:	4770      	bx	lr

00015206 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>:
   15206:	b082      	sub	sp, #8
   15208:	9001      	str	r0, [sp, #4]
   1520a:	7800      	ldrb	r0, [r0, #0]
   1520c:	07c0      	lsls	r0, r0, #31
   1520e:	2800      	cmp	r0, #0
   15210:	d004      	beq.n	1521c <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x16>
   15212:	e7ff      	b.n	15214 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0xe>
   15214:	2000      	movs	r0, #0
   15216:	f88d 0003 	strb.w	r0, [sp, #3]
   1521a:	e003      	b.n	15224 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   1521c:	2001      	movs	r0, #1
   1521e:	f88d 0003 	strb.w	r0, [sp, #3]
   15222:	e7ff      	b.n	15224 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   15224:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15228:	b002      	add	sp, #8
   1522a:	4770      	bx	lr

0001522c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>:
   1522c:	b510      	push	{r4, lr}
   1522e:	b08a      	sub	sp, #40	; 0x28
   15230:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   15234:	468e      	mov	lr, r1
   15236:	4604      	mov	r4, r0
   15238:	f8ad 0014 	strh.w	r0, [sp, #20]
   1523c:	f8ad 1016 	strh.w	r1, [sp, #22]
   15240:	9207      	str	r2, [sp, #28]
   15242:	9308      	str	r3, [sp, #32]
   15244:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   15248:	4601      	mov	r1, r0
   1524a:	2800      	cmp	r0, #0
   1524c:	9304      	str	r3, [sp, #16]
   1524e:	9203      	str	r2, [sp, #12]
   15250:	f8cd c008 	str.w	ip, [sp, #8]
   15254:	d013      	beq.n	1527e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x52>
   15256:	e7ff      	b.n	15258 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x2c>
   15258:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   1525c:	f8ad 001a 	strh.w	r0, [sp, #26]
   15260:	4668      	mov	r0, sp
   15262:	9902      	ldr	r1, [sp, #8]
   15264:	6001      	str	r1, [r0, #0]
   15266:	f640 33fc 	movw	r3, #3068	; 0xbfc
   1526a:	f2c0 0302 	movt	r3, #2
   1526e:	f10d 021a 	add.w	r2, sp, #26
   15272:	9803      	ldr	r0, [sp, #12]
   15274:	9904      	ldr	r1, [sp, #16]
   15276:	f002 fb81 	bl	1797c <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   1527a:	defe      	udf	#254	; 0xfe
   1527c:	defe      	udf	#254	; 0xfe
   1527e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   15282:	2800      	cmp	r0, #0
   15284:	d102      	bne.n	1528c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x60>
   15286:	e7ff      	b.n	15288 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>
   15288:	b00a      	add	sp, #40	; 0x28
   1528a:	bd10      	pop	{r4, pc}
   1528c:	e7fc      	b.n	15288 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>

0001528e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>:
   1528e:	b580      	push	{r7, lr}
   15290:	b08a      	sub	sp, #40	; 0x28
   15292:	4684      	mov	ip, r0
   15294:	f88d 0017 	strb.w	r0, [sp, #23]
   15298:	9107      	str	r1, [sp, #28]
   1529a:	9208      	str	r2, [sp, #32]
   1529c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   152a0:	ea4f 7ec0 	mov.w	lr, r0, lsl #31
   152a4:	f1be 0f00 	cmp.w	lr, #0
   152a8:	9304      	str	r3, [sp, #16]
   152aa:	9203      	str	r2, [sp, #12]
   152ac:	9102      	str	r1, [sp, #8]
   152ae:	d00e      	beq.n	152ce <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x40>
   152b0:	e7ff      	b.n	152b2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x24>
   152b2:	4668      	mov	r0, sp
   152b4:	9904      	ldr	r1, [sp, #16]
   152b6:	6001      	str	r1, [r0, #0]
   152b8:	f640 33ec 	movw	r3, #3052	; 0xbec
   152bc:	f2c0 0302 	movt	r3, #2
   152c0:	aa06      	add	r2, sp, #24
   152c2:	9802      	ldr	r0, [sp, #8]
   152c4:	9903      	ldr	r1, [sp, #12]
   152c6:	f002 fb59 	bl	1797c <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   152ca:	defe      	udf	#254	; 0xfe
   152cc:	defe      	udf	#254	; 0xfe
   152ce:	f89d 0017 	ldrb.w	r0, [sp, #23]
   152d2:	07c0      	lsls	r0, r0, #31
   152d4:	2800      	cmp	r0, #0
   152d6:	d102      	bne.n	152de <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x50>
   152d8:	e7ff      	b.n	152da <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>
   152da:	b00a      	add	sp, #40	; 0x28
   152dc:	bd80      	pop	{r7, pc}
   152de:	e7fc      	b.n	152da <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>

000152e0 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>:
   152e0:	b086      	sub	sp, #24
   152e2:	4602      	mov	r2, r0
   152e4:	f88d 000f 	strb.w	r0, [sp, #15]
   152e8:	f89d 000f 	ldrb.w	r0, [sp, #15]
   152ec:	07c3      	lsls	r3, r0, #31
   152ee:	2b00      	cmp	r3, #0
   152f0:	9102      	str	r1, [sp, #8]
   152f2:	d011      	beq.n	15318 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x38>
   152f4:	e7ff      	b.n	152f6 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x16>
   152f6:	4668      	mov	r0, sp
   152f8:	9902      	ldr	r1, [sp, #8]
   152fa:	6001      	str	r1, [r0, #0]
   152fc:	f640 400c 	movw	r0, #3084	; 0xc0c
   15300:	f2c0 0002 	movt	r0, #2
   15304:	f640 33ec 	movw	r3, #3052	; 0xbec
   15308:	f2c0 0302 	movt	r3, #2
   1530c:	212b      	movs	r1, #43	; 0x2b
   1530e:	aa04      	add	r2, sp, #16
   15310:	f002 fb34 	bl	1797c <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   15314:	defe      	udf	#254	; 0xfe
   15316:	defe      	udf	#254	; 0xfe
   15318:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1531c:	07c0      	lsls	r0, r0, #31
   1531e:	2800      	cmp	r0, #0
   15320:	d102      	bne.n	15328 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x48>
   15322:	e7ff      	b.n	15324 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>
   15324:	b006      	add	sp, #24
   15326:	4770      	bx	lr
   15328:	e7fc      	b.n	15324 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>

0001532a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>:
   1532a:	b580      	push	{r7, lr}
   1532c:	b088      	sub	sp, #32
   1532e:	9001      	str	r0, [sp, #4]
   15330:	2000      	movs	r0, #0
   15332:	f88d 0013 	strb.w	r0, [sp, #19]
   15336:	f88d 0011 	strb.w	r0, [sp, #17]
   1533a:	f88d 0012 	strb.w	r0, [sp, #18]
   1533e:	2001      	movs	r0, #1
   15340:	f88d 0012 	strb.w	r0, [sp, #18]
   15344:	f88d 0013 	strb.w	r0, [sp, #19]
   15348:	f88d 0011 	strb.w	r0, [sp, #17]
   1534c:	9801      	ldr	r0, [sp, #4]
   1534e:	1e41      	subs	r1, r0, #1
   15350:	bf18      	it	ne
   15352:	2101      	movne	r1, #1
   15354:	2801      	cmp	r0, #1
   15356:	d00d      	beq.n	15374 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x4a>
   15358:	e7ff      	b.n	1535a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x30>
   1535a:	2000      	movs	r0, #0
   1535c:	f88d 0013 	strb.w	r0, [sp, #19]
   15360:	9901      	ldr	r1, [sp, #4]
   15362:	9107      	str	r1, [sp, #28]
   15364:	f88d 0011 	strb.w	r0, [sp, #17]
   15368:	9103      	str	r1, [sp, #12]
   1536a:	9803      	ldr	r0, [sp, #12]
   1536c:	f7f4 fa3e 	bl	97ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>
   15370:	e006      	b.n	15380 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x56>
   15372:	defe      	udf	#254	; 0xfe
   15374:	2000      	movs	r0, #0
   15376:	f88d 0012 	strb.w	r0, [sp, #18]
   1537a:	f88d 000b 	strb.w	r0, [sp, #11]
   1537e:	e003      	b.n	15388 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   15380:	2001      	movs	r0, #1
   15382:	f88d 000b 	strb.w	r0, [sp, #11]
   15386:	e7ff      	b.n	15388 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   15388:	f89d 0011 	ldrb.w	r0, [sp, #17]
   1538c:	07c0      	lsls	r0, r0, #31
   1538e:	2800      	cmp	r0, #0
   15390:	d104      	bne.n	1539c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x72>
   15392:	e7ff      	b.n	15394 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   15394:	9801      	ldr	r0, [sp, #4]
   15396:	2801      	cmp	r0, #1
   15398:	d008      	beq.n	153ac <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x82>
   1539a:	e011      	b.n	153c0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x96>
   1539c:	2000      	movs	r0, #0
   1539e:	f88d 0011 	strb.w	r0, [sp, #17]
   153a2:	e7f7      	b.n	15394 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   153a4:	f89d 000b 	ldrb.w	r0, [sp, #11]
   153a8:	b008      	add	sp, #32
   153aa:	bd80      	pop	{r7, pc}
   153ac:	f89d 0012 	ldrb.w	r0, [sp, #18]
   153b0:	07c0      	lsls	r0, r0, #31
   153b2:	2800      	cmp	r0, #0
   153b4:	d0f6      	beq.n	153a4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   153b6:	e7ff      	b.n	153b8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x8e>
   153b8:	2000      	movs	r0, #0
   153ba:	f88d 0012 	strb.w	r0, [sp, #18]
   153be:	e7f1      	b.n	153a4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   153c0:	f89d 0013 	ldrb.w	r0, [sp, #19]
   153c4:	07c0      	lsls	r0, r0, #31
   153c6:	2800      	cmp	r0, #0
   153c8:	d0ec      	beq.n	153a4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   153ca:	e7ff      	b.n	153cc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0xa2>
   153cc:	2000      	movs	r0, #0
   153ce:	f88d 0013 	strb.w	r0, [sp, #19]
   153d2:	e7e7      	b.n	153a4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>

000153d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>:
   153d4:	b580      	push	{r7, lr}
   153d6:	b088      	sub	sp, #32
   153d8:	9001      	str	r0, [sp, #4]
   153da:	2000      	movs	r0, #0
   153dc:	f88d 0013 	strb.w	r0, [sp, #19]
   153e0:	f88d 0011 	strb.w	r0, [sp, #17]
   153e4:	f88d 0012 	strb.w	r0, [sp, #18]
   153e8:	2001      	movs	r0, #1
   153ea:	f88d 0012 	strb.w	r0, [sp, #18]
   153ee:	f88d 0013 	strb.w	r0, [sp, #19]
   153f2:	f88d 0011 	strb.w	r0, [sp, #17]
   153f6:	9801      	ldr	r0, [sp, #4]
   153f8:	1e41      	subs	r1, r0, #1
   153fa:	bf18      	it	ne
   153fc:	2101      	movne	r1, #1
   153fe:	2801      	cmp	r0, #1
   15400:	d00d      	beq.n	1541e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x4a>
   15402:	e7ff      	b.n	15404 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x30>
   15404:	2000      	movs	r0, #0
   15406:	f88d 0013 	strb.w	r0, [sp, #19]
   1540a:	9901      	ldr	r1, [sp, #4]
   1540c:	9107      	str	r1, [sp, #28]
   1540e:	f88d 0011 	strb.w	r0, [sp, #17]
   15412:	9103      	str	r1, [sp, #12]
   15414:	9803      	ldr	r0, [sp, #12]
   15416:	f7f4 f9df 	bl	97d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>
   1541a:	e006      	b.n	1542a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x56>
   1541c:	defe      	udf	#254	; 0xfe
   1541e:	2000      	movs	r0, #0
   15420:	f88d 0012 	strb.w	r0, [sp, #18]
   15424:	f88d 000b 	strb.w	r0, [sp, #11]
   15428:	e003      	b.n	15432 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   1542a:	2001      	movs	r0, #1
   1542c:	f88d 000b 	strb.w	r0, [sp, #11]
   15430:	e7ff      	b.n	15432 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   15432:	f89d 0011 	ldrb.w	r0, [sp, #17]
   15436:	07c0      	lsls	r0, r0, #31
   15438:	2800      	cmp	r0, #0
   1543a:	d104      	bne.n	15446 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x72>
   1543c:	e7ff      	b.n	1543e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   1543e:	9801      	ldr	r0, [sp, #4]
   15440:	2801      	cmp	r0, #1
   15442:	d008      	beq.n	15456 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x82>
   15444:	e011      	b.n	1546a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x96>
   15446:	2000      	movs	r0, #0
   15448:	f88d 0011 	strb.w	r0, [sp, #17]
   1544c:	e7f7      	b.n	1543e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   1544e:	f89d 000b 	ldrb.w	r0, [sp, #11]
   15452:	b008      	add	sp, #32
   15454:	bd80      	pop	{r7, pc}
   15456:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1545a:	07c0      	lsls	r0, r0, #31
   1545c:	2800      	cmp	r0, #0
   1545e:	d0f6      	beq.n	1544e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   15460:	e7ff      	b.n	15462 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x8e>
   15462:	2000      	movs	r0, #0
   15464:	f88d 0012 	strb.w	r0, [sp, #18]
   15468:	e7f1      	b.n	1544e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   1546a:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1546e:	07c0      	lsls	r0, r0, #31
   15470:	2800      	cmp	r0, #0
   15472:	d0ec      	beq.n	1544e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   15474:	e7ff      	b.n	15476 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0xa2>
   15476:	2000      	movs	r0, #0
   15478:	f88d 0013 	strb.w	r0, [sp, #19]
   1547c:	e7e7      	b.n	1544e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>

0001547e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>:
   1547e:	b580      	push	{r7, lr}
   15480:	b088      	sub	sp, #32
   15482:	9001      	str	r0, [sp, #4]
   15484:	2000      	movs	r0, #0
   15486:	f88d 0013 	strb.w	r0, [sp, #19]
   1548a:	f88d 0011 	strb.w	r0, [sp, #17]
   1548e:	f88d 0012 	strb.w	r0, [sp, #18]
   15492:	2001      	movs	r0, #1
   15494:	f88d 0012 	strb.w	r0, [sp, #18]
   15498:	f88d 0013 	strb.w	r0, [sp, #19]
   1549c:	f88d 0011 	strb.w	r0, [sp, #17]
   154a0:	9801      	ldr	r0, [sp, #4]
   154a2:	1e41      	subs	r1, r0, #1
   154a4:	bf18      	it	ne
   154a6:	2101      	movne	r1, #1
   154a8:	2801      	cmp	r0, #1
   154aa:	d00d      	beq.n	154c8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x4a>
   154ac:	e7ff      	b.n	154ae <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x30>
   154ae:	2000      	movs	r0, #0
   154b0:	f88d 0013 	strb.w	r0, [sp, #19]
   154b4:	9901      	ldr	r1, [sp, #4]
   154b6:	9107      	str	r1, [sp, #28]
   154b8:	f88d 0011 	strb.w	r0, [sp, #17]
   154bc:	9103      	str	r1, [sp, #12]
   154be:	9803      	ldr	r0, [sp, #12]
   154c0:	f7f4 f98f 	bl	97e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>
   154c4:	e006      	b.n	154d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x56>
   154c6:	defe      	udf	#254	; 0xfe
   154c8:	2000      	movs	r0, #0
   154ca:	f88d 0012 	strb.w	r0, [sp, #18]
   154ce:	f88d 000b 	strb.w	r0, [sp, #11]
   154d2:	e003      	b.n	154dc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   154d4:	2001      	movs	r0, #1
   154d6:	f88d 000b 	strb.w	r0, [sp, #11]
   154da:	e7ff      	b.n	154dc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   154dc:	f89d 0011 	ldrb.w	r0, [sp, #17]
   154e0:	07c0      	lsls	r0, r0, #31
   154e2:	2800      	cmp	r0, #0
   154e4:	d104      	bne.n	154f0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x72>
   154e6:	e7ff      	b.n	154e8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   154e8:	9801      	ldr	r0, [sp, #4]
   154ea:	2801      	cmp	r0, #1
   154ec:	d008      	beq.n	15500 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x82>
   154ee:	e011      	b.n	15514 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x96>
   154f0:	2000      	movs	r0, #0
   154f2:	f88d 0011 	strb.w	r0, [sp, #17]
   154f6:	e7f7      	b.n	154e8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   154f8:	f89d 000b 	ldrb.w	r0, [sp, #11]
   154fc:	b008      	add	sp, #32
   154fe:	bd80      	pop	{r7, pc}
   15500:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15504:	07c0      	lsls	r0, r0, #31
   15506:	2800      	cmp	r0, #0
   15508:	d0f6      	beq.n	154f8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   1550a:	e7ff      	b.n	1550c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x8e>
   1550c:	2000      	movs	r0, #0
   1550e:	f88d 0012 	strb.w	r0, [sp, #18]
   15512:	e7f1      	b.n	154f8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   15514:	f89d 0013 	ldrb.w	r0, [sp, #19]
   15518:	07c0      	lsls	r0, r0, #31
   1551a:	2800      	cmp	r0, #0
   1551c:	d0ec      	beq.n	154f8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   1551e:	e7ff      	b.n	15520 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0xa2>
   15520:	2000      	movs	r0, #0
   15522:	f88d 0013 	strb.w	r0, [sp, #19]
   15526:	e7e7      	b.n	154f8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>

00015528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>:
   15528:	b082      	sub	sp, #8
   1552a:	2001      	movs	r0, #1
   1552c:	f88d 0003 	strb.w	r0, [sp, #3]
   15530:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15534:	b002      	add	sp, #8
   15536:	4770      	bx	lr

00015538 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>:
    #[inline]
    fn to_u128() -> u128 {
        u128::from(B::to_u8()) | U::to_u128() << 1
    }
    #[inline]
    fn to_usize() -> usize {
   15538:	b580      	push	{r7, lr}
   1553a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1553c:	f001 ff6d 	bl	1741a <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15540:	9003      	str	r0, [sp, #12]
   15542:	e7ff      	b.n	15544 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0xc>
   15544:	9803      	ldr	r0, [sp, #12]
   15546:	f001 ffce 	bl	174e6 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   1554a:	9002      	str	r0, [sp, #8]
   1554c:	e7ff      	b.n	1554e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x16>
   1554e:	f000 f823 	bl	15598 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>
   15552:	9001      	str	r0, [sp, #4]
   15554:	e7ff      	b.n	15556 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x1e>
   15556:	9801      	ldr	r0, [sp, #4]
   15558:	0041      	lsls	r1, r0, #1
   1555a:	9100      	str	r1, [sp, #0]
   1555c:	e7ff      	b.n	1555e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x26>
   1555e:	9802      	ldr	r0, [sp, #8]
   15560:	9900      	ldr	r1, [sp, #0]
   15562:	4308      	orrs	r0, r1
    }
   15564:	b004      	add	sp, #16
   15566:	bd80      	pop	{r7, pc}

00015568 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>:
    fn to_usize() -> usize {
   15568:	b580      	push	{r7, lr}
   1556a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1556c:	f001 ff55 	bl	1741a <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15570:	9003      	str	r0, [sp, #12]
   15572:	e7ff      	b.n	15574 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0xc>
   15574:	9803      	ldr	r0, [sp, #12]
   15576:	f001 ffb6 	bl	174e6 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   1557a:	9002      	str	r0, [sp, #8]
   1557c:	e7ff      	b.n	1557e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x16>
   1557e:	f7ff ffdb 	bl	15538 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   15582:	9001      	str	r0, [sp, #4]
   15584:	e7ff      	b.n	15586 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x1e>
   15586:	9801      	ldr	r0, [sp, #4]
   15588:	0041      	lsls	r1, r0, #1
   1558a:	9100      	str	r1, [sp, #0]
   1558c:	e7ff      	b.n	1558e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x26>
   1558e:	9802      	ldr	r0, [sp, #8]
   15590:	9900      	ldr	r1, [sp, #0]
   15592:	4308      	orrs	r0, r1
    }
   15594:	b004      	add	sp, #16
   15596:	bd80      	pop	{r7, pc}

00015598 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>:
    fn to_usize() -> usize {
   15598:	b580      	push	{r7, lr}
   1559a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1559c:	f001 ff3f 	bl	1741e <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   155a0:	9003      	str	r0, [sp, #12]
   155a2:	e7ff      	b.n	155a4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0xc>
   155a4:	9803      	ldr	r0, [sp, #12]
   155a6:	f001 ff9e 	bl	174e6 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   155aa:	9002      	str	r0, [sp, #8]
   155ac:	e7ff      	b.n	155ae <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x16>
   155ae:	f000 f83b 	bl	15628 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>
   155b2:	9001      	str	r0, [sp, #4]
   155b4:	e7ff      	b.n	155b6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x1e>
   155b6:	9801      	ldr	r0, [sp, #4]
   155b8:	0041      	lsls	r1, r0, #1
   155ba:	9100      	str	r1, [sp, #0]
   155bc:	e7ff      	b.n	155be <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x26>
   155be:	9802      	ldr	r0, [sp, #8]
   155c0:	9900      	ldr	r1, [sp, #0]
   155c2:	4308      	orrs	r0, r1
    }
   155c4:	b004      	add	sp, #16
   155c6:	bd80      	pop	{r7, pc}

000155c8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>:
    fn to_usize() -> usize {
   155c8:	b580      	push	{r7, lr}
   155ca:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   155cc:	f001 ff25 	bl	1741a <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   155d0:	9003      	str	r0, [sp, #12]
   155d2:	e7ff      	b.n	155d4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0xc>
   155d4:	9803      	ldr	r0, [sp, #12]
   155d6:	f001 ff86 	bl	174e6 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   155da:	9002      	str	r0, [sp, #8]
   155dc:	e7ff      	b.n	155de <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x16>
   155de:	f000 f80b 	bl	155f8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>
   155e2:	9001      	str	r0, [sp, #4]
   155e4:	e7ff      	b.n	155e6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x1e>
   155e6:	9801      	ldr	r0, [sp, #4]
   155e8:	0041      	lsls	r1, r0, #1
   155ea:	9100      	str	r1, [sp, #0]
   155ec:	e7ff      	b.n	155ee <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x26>
   155ee:	9802      	ldr	r0, [sp, #8]
   155f0:	9900      	ldr	r1, [sp, #0]
   155f2:	4308      	orrs	r0, r1
    }
   155f4:	b004      	add	sp, #16
   155f6:	bd80      	pop	{r7, pc}

000155f8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>:
    fn to_usize() -> usize {
   155f8:	b580      	push	{r7, lr}
   155fa:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   155fc:	f001 ff0f 	bl	1741e <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   15600:	9003      	str	r0, [sp, #12]
   15602:	e7ff      	b.n	15604 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0xc>
   15604:	9803      	ldr	r0, [sp, #12]
   15606:	f001 ff6e 	bl	174e6 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   1560a:	9002      	str	r0, [sp, #8]
   1560c:	e7ff      	b.n	1560e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x16>
   1560e:	f001 fe8c 	bl	1732a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   15612:	9001      	str	r0, [sp, #4]
   15614:	e7ff      	b.n	15616 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x1e>
   15616:	9801      	ldr	r0, [sp, #4]
   15618:	0041      	lsls	r1, r0, #1
   1561a:	9100      	str	r1, [sp, #0]
   1561c:	e7ff      	b.n	1561e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x26>
   1561e:	9802      	ldr	r0, [sp, #8]
   15620:	9900      	ldr	r1, [sp, #0]
   15622:	4308      	orrs	r0, r1
    }
   15624:	b004      	add	sp, #16
   15626:	bd80      	pop	{r7, pc}

00015628 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>:
    fn to_usize() -> usize {
   15628:	b580      	push	{r7, lr}
   1562a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1562c:	f001 fef5 	bl	1741a <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15630:	9003      	str	r0, [sp, #12]
   15632:	e7ff      	b.n	15634 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0xc>
   15634:	9803      	ldr	r0, [sp, #12]
   15636:	f001 ff56 	bl	174e6 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   1563a:	9002      	str	r0, [sp, #8]
   1563c:	e7ff      	b.n	1563e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x16>
   1563e:	f7ff ffc3 	bl	155c8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>
   15642:	9001      	str	r0, [sp, #4]
   15644:	e7ff      	b.n	15646 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x1e>
   15646:	9801      	ldr	r0, [sp, #4]
   15648:	0041      	lsls	r1, r0, #1
   1564a:	9100      	str	r1, [sp, #0]
   1564c:	e7ff      	b.n	1564e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x26>
   1564e:	9802      	ldr	r0, [sp, #8]
   15650:	9900      	ldr	r1, [sp, #0]
   15652:	4308      	orrs	r0, r1
    }
   15654:	b004      	add	sp, #16
   15656:	bd80      	pop	{r7, pc}

00015658 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>:
pub fn draw_to_display<T>(item: T)
   15658:	b510      	push	{r4, lr}
   1565a:	b088      	sub	sp, #32
   1565c:	a901      	add	r1, sp, #4
        item
   1565e:	460a      	mov	r2, r1
   15660:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
   15664:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
   15668:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
   1566c:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    super::batch::draw_blocks(            //  Draw text or graphics the new faster way, as pixel blocks
   15670:	f240 1048 	movw	r0, #328	; 0x148
   15674:	f2c2 0000 	movt	r0, #8192	; 0x2000
   15678:	f000 f819 	bl	156ae <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>
   1567c:	9000      	str	r0, [sp, #0]
   1567e:	e7ff      	b.n	15680 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x28>
   15680:	9800      	ldr	r0, [sp, #0]
   15682:	f000 0001 	and.w	r0, r0, #1
   15686:	f640 4137 	movw	r1, #3127	; 0xc37
   1568a:	f2c0 0102 	movt	r1, #2
   1568e:	f640 4380 	movw	r3, #3200	; 0xc80
   15692:	f2c0 0302 	movt	r3, #2
   15696:	2210      	movs	r2, #16
   15698:	f7ff fdf9 	bl	1528e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   1569c:	e7ff      	b.n	1569e <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x46>
}
   1569e:	b008      	add	sp, #32
   156a0:	bd10      	pop	{r4, pc}

000156a2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>:
   156a2:	b580      	push	{r7, lr}
   156a4:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   156a8:	f008 fd6a 	bl	1e180 <__aeabi_memcpy>
   156ac:	bd80      	pop	{r7, pc}

000156ae <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>:
    pub colors:   BlockColors,
}

/// Draw the pixels in the item as Pixel Blocks of contiguous Pixel Rows. The pixels are grouped by row then by block.
#[allow(dead_code)]
pub fn draw_blocks<SPI, DC, RST, T>(display: &mut ST7735<SPI, DC, RST>, item_pixels: T) -> Result<(),()>
   156ae:	b5b0      	push	{r4, r5, r7, lr}
   156b0:	f5ad 6d48 	sub.w	sp, sp, #3200	; 0xc80
   156b4:	f8cd 0c6c 	str.w	r0, [sp, #3180]	; 0xc6c
   156b8:	aa19      	add	r2, sp, #100	; 0x64
    SPI: spi::Write<u8>,
    DC: OutputPin,
    RST: OutputPin,
    T: IntoIterator<Item = Pixel<Rgb565>>, {
    //  Get the pixels for the item to be rendered.
    let pixels = item_pixels.into_iter();
   156ba:	4613      	mov	r3, r2
   156bc:	e8b1 5010 	ldmia.w	r1!, {r4, ip, lr}
   156c0:	e8a3 5010 	stmia.w	r3!, {r4, ip, lr}
   156c4:	e891 5030 	ldmia.w	r1, {r4, r5, ip, lr}
   156c8:	e883 5030 	stmia.w	r3, {r4, r5, ip, lr}
   156cc:	a910      	add	r1, sp, #64	; 0x40
   156ce:	900e      	str	r0, [sp, #56]	; 0x38
   156d0:	4608      	mov	r0, r1
   156d2:	4611      	mov	r1, r2
   156d4:	f000 fe01 	bl	162da <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>
   156d8:	e7ff      	b.n	156da <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x2c>
   156da:	a810      	add	r0, sp, #64	; 0x40
   156dc:	a945      	add	r1, sp, #276	; 0x114
    //  Batch the pixels into Pixel Rows.
    let rows = to_rows(pixels);
   156de:	460a      	mov	r2, r1
   156e0:	e8b0 5018 	ldmia.w	r0!, {r3, r4, ip, lr}
   156e4:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   156e8:	e890 5038 	ldmia.w	r0, {r3, r4, r5, ip, lr}
   156ec:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   156f0:	a820      	add	r0, sp, #128	; 0x80
   156f2:	f000 f8b7 	bl	15864 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>
   156f6:	e7ff      	b.n	156f8 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x4a>
   156f8:	a8a9      	add	r0, sp, #676	; 0x2a4
   156fa:	a920      	add	r1, sp, #128	; 0x80
   156fc:	2294      	movs	r2, #148	; 0x94
    //  Batch the Pixel Rows into Pixel Blocks.
    let blocks = to_blocks(rows);
   156fe:	900d      	str	r0, [sp, #52]	; 0x34
   15700:	f008 fd3e 	bl	1e180 <__aeabi_memcpy>
   15704:	a84e      	add	r0, sp, #312	; 0x138
   15706:	990d      	ldr	r1, [sp, #52]	; 0x34
   15708:	f000 f8db 	bl	158c2 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>
   1570c:	e7ff      	b.n	1570e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x60>
   1570e:	f20d 40a4 	addw	r0, sp, #1188	; 0x4a4
   15712:	a94e      	add	r1, sp, #312	; 0x138
   15714:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    //  For each Pixel Block...
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   15718:	900c      	str	r0, [sp, #48]	; 0x30
   1571a:	f008 fd31 	bl	1e180 <__aeabi_memcpy>
   1571e:	a8ce      	add	r0, sp, #824	; 0x338
   15720:	990c      	ldr	r1, [sp, #48]	; 0x30
   15722:	f7ff ffbe 	bl	156a2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>
   15726:	e7ff      	b.n	15728 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x7a>
   15728:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
   1572c:	a9ce      	add	r1, sp, #824	; 0x338
   1572e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   15732:	f008 fd25 	bl	1e180 <__aeabi_memcpy>
   15736:	e7ff      	b.n	15738 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
   15738:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   1573c:	f50d 61c2 	add.w	r1, sp, #1552	; 0x610
   15740:	f000 fa2c 	bl	15b9c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>
   15744:	e7ff      	b.n	15746 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x98>
   15746:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   1574a:	2800      	cmp	r0, #0
   1574c:	d001      	beq.n	15752 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa4>
   1574e:	e7ff      	b.n	15750 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa2>
   15750:	e005      	b.n	1575e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xb0>
   15752:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   15756:	f7f5 f824 	bl	a7a2 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   1575a:	e01c      	b.n	15796 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xe8>
   1575c:	defe      	udf	#254	; 0xfe
   1575e:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   15762:	1d01      	adds	r1, r0, #4
   15764:	f60d 1028 	addw	r0, sp, #2344	; 0x928
   15768:	22d4      	movs	r2, #212	; 0xd4
   1576a:	900b      	str	r0, [sp, #44]	; 0x2c
   1576c:	920a      	str	r2, [sp, #40]	; 0x28
   1576e:	f008 fd07 	bl	1e180 <__aeabi_memcpy>
   15772:	f60d 10fc 	addw	r0, sp, #2556	; 0x9fc
   15776:	9009      	str	r0, [sp, #36]	; 0x24
   15778:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1577a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1577c:	f008 fd00 	bl	1e180 <__aeabi_memcpy>
   15780:	f20d 707c 	addw	r0, sp, #1916	; 0x77c
   15784:	9909      	ldr	r1, [sp, #36]	; 0x24
   15786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15788:	f008 fcfa 	bl	1e180 <__aeabi_memcpy>
   1578c:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   15790:	2801      	cmp	r0, #1
   15792:	d02c      	beq.n	157ee <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>
   15794:	e061      	b.n	1585a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x1ac>
   15796:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
        //  Dump out the Pixel Blocks for the square in test_display()
        /* if x_left >= 60 && x_left <= 150 && x_right >= 60 && x_right <= 150 && y_top >= 60 && y_top <= 150 && y_bottom >= 60 && y_bottom <= 150 {
            console::print("pixel block ("); console::printint(x_left as i32); console::print(", "); console::printint(y_top as i32); ////
            console::print("), ("); console::printint(x_right as i32); console::print(", "); console::printint(y_bottom as i32); console::print(")\n"); ////    
        } */
    }
   1579a:	f7f4 ffdf 	bl	a75c <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   1579e:	e022      	b.n	157e6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x138>
        display.set_pixels(
   157a0:	f89d 0b9f 	ldrb.w	r0, [sp, #2975]	; 0xb9f
   157a4:	f7f3 f9e2 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   157a8:	f88d 0b9e 	strb.w	r0, [sp, #2974]	; 0xb9e
   157ac:	e7ff      	b.n	157ae <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x100>
            colors) ? ;
   157ae:	f89d 0b9e 	ldrb.w	r0, [sp, #2974]	; 0xb9e
   157b2:	07c1      	lsls	r1, r0, #31
   157b4:	2900      	cmp	r1, #0
   157b6:	d001      	beq.n	157bc <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10e>
   157b8:	e7ff      	b.n	157ba <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10c>
   157ba:	e001      	b.n	157c0 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x112>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   157bc:	e7bc      	b.n	15738 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
        display.set_pixels(
   157be:	defe      	udf	#254	; 0xfe
            colors) ? ;
   157c0:	f7fc fc21 	bl	12006 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   157c4:	e004      	b.n	157d0 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x122>
    Ok(())
}
   157c6:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   157ca:	f50d 6d48 	add.w	sp, sp, #3200	; 0xc80
   157ce:	bdb0      	pop	{r4, r5, r7, pc}
            colors) ? ;
   157d0:	f7ff feaa 	bl	15528 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   157d4:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   157d8:	e7ff      	b.n	157da <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x12c>
   157da:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
    }
   157de:	f7f4 ffbd 	bl	a75c <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   157e2:	e7ff      	b.n	157e4 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x136>
}
   157e4:	e7ef      	b.n	157c6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
   157e6:	2000      	movs	r0, #0
    Ok(())
   157e8:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
}
   157ec:	e7eb      	b.n	157c6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   157ee:	f8bd 0848 	ldrh.w	r0, [sp, #2120]	; 0x848
   157f2:	f8ad 0c78 	strh.w	r0, [sp, #3192]	; 0xc78
   157f6:	f8bd 184a 	ldrh.w	r1, [sp, #2122]	; 0x84a
   157fa:	f8ad 1c7a 	strh.w	r1, [sp, #3194]	; 0xc7a
   157fe:	f8bd 284c 	ldrh.w	r2, [sp, #2124]	; 0x84c
   15802:	f8ad 2c7c 	strh.w	r2, [sp, #3196]	; 0xc7c
   15806:	f8bd 384e 	ldrh.w	r3, [sp, #2126]	; 0x84e
   1580a:	f8ad 3c7e 	strh.w	r3, [sp, #3198]	; 0xc7e
   1580e:	f50d 6c2d 	add.w	ip, sp, #2768	; 0xad0
   15812:	f20d 7e7c 	addw	lr, sp, #1916	; 0x77c
   15816:	24cc      	movs	r4, #204	; 0xcc
   15818:	9008      	str	r0, [sp, #32]
   1581a:	4660      	mov	r0, ip
   1581c:	9107      	str	r1, [sp, #28]
   1581e:	4671      	mov	r1, lr
   15820:	9206      	str	r2, [sp, #24]
   15822:	4622      	mov	r2, r4
   15824:	9305      	str	r3, [sp, #20]
   15826:	f8cd c010 	str.w	ip, [sp, #16]
   1582a:	9403      	str	r4, [sp, #12]
   1582c:	f008 fca8 	bl	1e180 <__aeabi_memcpy>
   15830:	f50d 603a 	add.w	r0, sp, #2976	; 0xba0
            colors) ? ;
   15834:	9002      	str	r0, [sp, #8]
   15836:	9904      	ldr	r1, [sp, #16]
   15838:	9a03      	ldr	r2, [sp, #12]
   1583a:	f008 fca1 	bl	1e180 <__aeabi_memcpy>
        display.set_pixels(
   1583e:	4668      	mov	r0, sp
   15840:	9902      	ldr	r1, [sp, #8]
   15842:	6041      	str	r1, [r0, #4]
   15844:	9a05      	ldr	r2, [sp, #20]
   15846:	6002      	str	r2, [r0, #0]
   15848:	980e      	ldr	r0, [sp, #56]	; 0x38
   1584a:	9908      	ldr	r1, [sp, #32]
   1584c:	9a06      	ldr	r2, [sp, #24]
   1584e:	9b07      	ldr	r3, [sp, #28]
   15850:	f7f3 ffd1 	bl	97f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>
   15854:	f88d 0b9f 	strb.w	r0, [sp, #2975]	; 0xb9f
   15858:	e7a2      	b.n	157a0 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xf2>
   1585a:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   1585e:	f7f4 ffa0 	bl	a7a2 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   15862:	e7c4      	b.n	157ee <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>

00015864 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>:

/// Batch the pixels into Pixel Rows, which are contiguous pixels on the same row.
/// P can be any Pixel Iterator (e.g. a rectangle).
fn to_rows<P>(pixels: P) -> RowIterator<P>
   15864:	b5b0      	push	{r4, r5, r7, lr}
   15866:	b0a4      	sub	sp, #144	; 0x90
   15868:	aa01      	add	r2, sp, #4
where
    P: Iterator<Item = Pixel<Rgb565>>, {
    RowIterator::<P> {
        pixels,
   1586a:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
   1586e:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   15872:	e891 5038 	ldmia.w	r1, {r3, r4, r5, ip, lr}
   15876:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   1587a:	a90a      	add	r1, sp, #40	; 0x28
        x_left: 0,
        x_right: 0,
        y: 0,
        colors: RowColors::new(),
   1587c:	9000      	str	r0, [sp, #0]
   1587e:	4608      	mov	r0, r1
   15880:	f7ff f948 	bl	14b14 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>
   15884:	e7ff      	b.n	15886 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E+0x22>
   15886:	a801      	add	r0, sp, #4
    RowIterator::<P> {
   15888:	9900      	ldr	r1, [sp, #0]
   1588a:	e8b0 500c 	ldmia.w	r0!, {r2, r3, ip, lr}
   1588e:	e8a1 500c 	stmia.w	r1!, {r2, r3, ip, lr}
   15892:	e890 501c 	ldmia.w	r0, {r2, r3, r4, ip, lr}
   15896:	e881 501c 	stmia.w	r1, {r2, r3, r4, ip, lr}
   1589a:	2000      	movs	r0, #0
   1589c:	9900      	ldr	r1, [sp, #0]
   1589e:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
   158a2:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
   158a6:	f8a1 0090 	strh.w	r0, [r1, #144]	; 0x90
   158aa:	f101 0024 	add.w	r0, r1, #36	; 0x24
   158ae:	a90a      	add	r1, sp, #40	; 0x28
   158b0:	2268      	movs	r2, #104	; 0x68
   158b2:	f008 fc65 	bl	1e180 <__aeabi_memcpy>
   158b6:	2001      	movs	r0, #1
   158b8:	9900      	ldr	r1, [sp, #0]
   158ba:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
        first_pixel: true,
    }
}
   158be:	b024      	add	sp, #144	; 0x90
   158c0:	bdb0      	pop	{r4, r5, r7, pc}

000158c2 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>:

/// Batch the Pixel Rows into Pixel Blocks, which are contiguous Pixel Rows with the same start and end column number
/// R can be any Pixel Row Iterator.
fn to_blocks<R>(rows: R) -> BlockIterator<R>
   158c2:	b580      	push	{r7, lr}
   158c4:	b0da      	sub	sp, #360	; 0x168
   158c6:	aa02      	add	r2, sp, #8
   158c8:	2394      	movs	r3, #148	; 0x94
where
    R: Iterator<Item = PixelRow>, {
    BlockIterator::<R> {
        rows,
   158ca:	9001      	str	r0, [sp, #4]
   158cc:	4610      	mov	r0, r2
   158ce:	461a      	mov	r2, r3
   158d0:	f008 fc56 	bl	1e180 <__aeabi_memcpy>
   158d4:	a827      	add	r0, sp, #156	; 0x9c
        x_left: 0,
        x_right: 0,
        y_top: 0,
        y_bottom: 0,
        colors: BlockColors::new(),
   158d6:	f7ff f92c 	bl	14b32 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>
   158da:	e7ff      	b.n	158dc <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E+0x1a>
   158dc:	a902      	add	r1, sp, #8
   158de:	2294      	movs	r2, #148	; 0x94
    BlockIterator::<R> {
   158e0:	9801      	ldr	r0, [sp, #4]
   158e2:	f008 fc4d 	bl	1e180 <__aeabi_memcpy>
   158e6:	2000      	movs	r0, #0
   158e8:	9901      	ldr	r1, [sp, #4]
   158ea:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
   158ee:	f8a1 0162 	strh.w	r0, [r1, #354]	; 0x162
   158f2:	f8a1 0164 	strh.w	r0, [r1, #356]	; 0x164
   158f6:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
   158fa:	f101 0094 	add.w	r0, r1, #148	; 0x94
   158fe:	a927      	add	r1, sp, #156	; 0x9c
   15900:	22cc      	movs	r2, #204	; 0xcc
   15902:	f008 fc3d 	bl	1e180 <__aeabi_memcpy>
   15906:	2001      	movs	r0, #1
   15908:	9901      	ldr	r1, [sp, #4]
   1590a:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
        first_row: true,
    }
}    
   1590e:	b05a      	add	sp, #360	; 0x168
   15910:	bd80      	pop	{r7, pc}

00015912 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>:
impl<P: Iterator<Item = Pixel<Rgb565>>> Iterator for RowIterator<P> {
    /// This Iterator returns Pixel Rows
    type Item = PixelRow;

    /// Return the next Pixel Row of contiguous pixels on the same row
    fn next(&mut self) -> Option<Self::Item> {
   15912:	b580      	push	{r7, lr}
   15914:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
   15918:	91c1      	str	r1, [sp, #772]	; 0x304
        //  Loop over all pixels until we have composed a Pixel Row, or we have run out of pixels.
        loop {
   1591a:	9116      	str	r1, [sp, #88]	; 0x58
   1591c:	9015      	str	r0, [sp, #84]	; 0x54
   1591e:	e7ff      	b.n	15920 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   15920:	a817      	add	r0, sp, #92	; 0x5c
            //  Get the next pixel.
            let next_pixel = self.pixels.next();
   15922:	9916      	ldr	r1, [sp, #88]	; 0x58
   15924:	f000 fd34 	bl	16390 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>
   15928:	e7ff      	b.n	1592a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x18>
            match next_pixel {
                None => {  //  If no more pixels...
   1592a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1592c:	2800      	cmp	r0, #0
   1592e:	d01c      	beq.n	1596a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x58>
   15930:	e7ff      	b.n	15932 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x20>
                    };
                    self.colors.clear();
                    self.first_pixel = true;
                    return Some(row);
                }
                Some(Pixel(coord, color)) => {  //  If there is a pixel...
   15932:	9818      	ldr	r0, [sp, #96]	; 0x60
   15934:	9919      	ldr	r1, [sp, #100]	; 0x64
   15936:	90c2      	str	r0, [sp, #776]	; 0x308
   15938:	91c3      	str	r1, [sp, #780]	; 0x30c
   1593a:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   1593e:	4613      	mov	r3, r2
   15940:	f8ad 2310 	strh.w	r2, [sp, #784]	; 0x310
                    let x = coord.0 as u16;
   15944:	f8ad 0312 	strh.w	r0, [sp, #786]	; 0x312
                    let y = coord.1 as u16;
   15948:	f8ad 1314 	strh.w	r1, [sp, #788]	; 0x314
                    let color = color.0;
   1594c:	f8ad 2316 	strh.w	r2, [sp, #790]	; 0x316
                    //  Save the first pixel as the row start and handle next pixel.
                    if self.first_pixel {
   15950:	9a16      	ldr	r2, [sp, #88]	; 0x58
   15952:	f892 c092 	ldrb.w	ip, [r2, #146]	; 0x92
   15956:	ea4f 7ccc 	mov.w	ip, ip, lsl #31
   1595a:	f1bc 0f00 	cmp.w	ip, #0
   1595e:	9014      	str	r0, [sp, #80]	; 0x50
   15960:	9113      	str	r1, [sp, #76]	; 0x4c
   15962:	9312      	str	r3, [sp, #72]	; 0x48
   15964:	d156      	bne.n	15a14 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x102>
   15966:	e04a      	b.n	159fe <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xec>
            match next_pixel {
   15968:	defe      	udf	#254	; 0xfe
                    if self.first_pixel {
   1596a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1596c:	f890 1092 	ldrb.w	r1, [r0, #146]	; 0x92
   15970:	07c9      	lsls	r1, r1, #31
   15972:	2900      	cmp	r1, #0
   15974:	d111      	bne.n	1599a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x88>
   15976:	e7ff      	b.n	15978 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x66>
                        x_left: self.x_left,
   15978:	9816      	ldr	r0, [sp, #88]	; 0x58
   1597a:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   1597e:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   15982:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   15986:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   1598a:	a837      	add	r0, sp, #220	; 0xdc
   1598c:	9111      	str	r1, [sp, #68]	; 0x44
   1598e:	4661      	mov	r1, ip
   15990:	9210      	str	r2, [sp, #64]	; 0x40
   15992:	930f      	str	r3, [sp, #60]	; 0x3c
   15994:	f7ff f827 	bl	149e6 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   15998:	e006      	b.n	159a8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x96>
   1599a:	2000      	movs	r0, #0
                        return None;  //  No pixels to group
   1599c:	9915      	ldr	r1, [sp, #84]	; 0x54
   1599e:	6008      	str	r0, [r1, #0]
   159a0:	e7ff      	b.n	159a2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                        .expect("never");
                    return Some(row);
                }
            }
        }
    }
   159a2:	f50d 7d46 	add.w	sp, sp, #792	; 0x318
   159a6:	bd80      	pop	{r7, pc}
                    let row = PixelRow {
   159a8:	9811      	ldr	r0, [sp, #68]	; 0x44
   159aa:	f8ad 00d4 	strh.w	r0, [sp, #212]	; 0xd4
   159ae:	9910      	ldr	r1, [sp, #64]	; 0x40
   159b0:	f8ad 10d6 	strh.w	r1, [sp, #214]	; 0xd6
   159b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   159b6:	f8ad 20d8 	strh.w	r2, [sp, #216]	; 0xd8
   159ba:	a81b      	add	r0, sp, #108	; 0x6c
   159bc:	a937      	add	r1, sp, #220	; 0xdc
   159be:	2268      	movs	r2, #104	; 0x68
   159c0:	f008 fbde 	bl	1e180 <__aeabi_memcpy>
                    self.colors.clear();
   159c4:	9816      	ldr	r0, [sp, #88]	; 0x58
   159c6:	3024      	adds	r0, #36	; 0x24
   159c8:	f7ff f8d2 	bl	14b70 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   159cc:	e7ff      	b.n	159ce <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xbc>
   159ce:	2001      	movs	r0, #1
                    self.first_pixel = true;
   159d0:	9916      	ldr	r1, [sp, #88]	; 0x58
   159d2:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
   159d6:	aa51      	add	r2, sp, #324	; 0x144
   159d8:	a91b      	add	r1, sp, #108	; 0x6c
   159da:	2370      	movs	r3, #112	; 0x70
                    return Some(row);
   159dc:	900e      	str	r0, [sp, #56]	; 0x38
   159de:	4610      	mov	r0, r2
   159e0:	920d      	str	r2, [sp, #52]	; 0x34
   159e2:	461a      	mov	r2, r3
   159e4:	930c      	str	r3, [sp, #48]	; 0x30
   159e6:	f008 fbcb 	bl	1e180 <__aeabi_memcpy>
   159ea:	9815      	ldr	r0, [sp, #84]	; 0x54
   159ec:	3004      	adds	r0, #4
   159ee:	990d      	ldr	r1, [sp, #52]	; 0x34
   159f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   159f2:	f008 fbc5 	bl	1e180 <__aeabi_memcpy>
   159f6:	980e      	ldr	r0, [sp, #56]	; 0x38
   159f8:	9915      	ldr	r1, [sp, #84]	; 0x54
   159fa:	6008      	str	r0, [r1, #0]
   159fc:	e7d1      	b.n	159a2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   159fe:	9816      	ldr	r0, [sp, #88]	; 0x58
   15a00:	f8b0 108e 	ldrh.w	r1, [r0, #142]	; 0x8e
   15a04:	3101      	adds	r1, #1
   15a06:	b28a      	uxth	r2, r1
   15a08:	460b      	mov	r3, r1
   15a0a:	428a      	cmp	r2, r1
   15a0c:	930b      	str	r3, [sp, #44]	; 0x2c
   15a0e:	f040 80b9 	bne.w	15b84 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x272>
   15a12:	e040      	b.n	15a96 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x184>
   15a14:	2000      	movs	r0, #0
                        self.first_pixel = false;
   15a16:	9916      	ldr	r1, [sp, #88]	; 0x58
   15a18:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
                        self.x_left = x;
   15a1c:	9814      	ldr	r0, [sp, #80]	; 0x50
   15a1e:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                        self.x_right = x;
   15a22:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                        self.y = y;
   15a26:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15a28:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                        self.colors.clear();
   15a2c:	f101 0024 	add.w	r0, r1, #36	; 0x24
   15a30:	f7ff f89e 	bl	14b70 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   15a34:	e7ff      	b.n	15a36 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x124>
                        self.colors.push(color)
   15a36:	9816      	ldr	r0, [sp, #88]	; 0x58
   15a38:	3024      	adds	r0, #36	; 0x24
   15a3a:	9912      	ldr	r1, [sp, #72]	; 0x48
   15a3c:	f7ff f888 	bl	14b50 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   15a40:	900a      	str	r0, [sp, #40]	; 0x28
   15a42:	9109      	str	r1, [sp, #36]	; 0x24
   15a44:	e7ff      	b.n	15a46 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x134>
   15a46:	f640 40cc 	movw	r0, #3276	; 0xccc
   15a4a:	f2c0 0002 	movt	r0, #2
   15a4e:	4669      	mov	r1, sp
   15a50:	6008      	str	r0, [r1, #0]
   15a52:	f640 4290 	movw	r2, #3216	; 0xc90
   15a56:	f2c0 0202 	movt	r2, #2
   15a5a:	2305      	movs	r3, #5
   15a5c:	980a      	ldr	r0, [sp, #40]	; 0x28
   15a5e:	9909      	ldr	r1, [sp, #36]	; 0x24
   15a60:	f7ff fbe4 	bl	1522c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   15a64:	e7ff      	b.n	15a66 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x154>
                        continue;
   15a66:	e7ff      	b.n	15a68 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
   15a68:	e75a      	b.n	15920 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   15a6a:	2001      	movs	r0, #1
                    if x == self.x_right + 1 && y == self.y {
   15a6c:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   15a70:	e00b      	b.n	15a8a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   15a72:	2000      	movs	r0, #0
   15a74:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   15a78:	e007      	b.n	15a8a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   15a7a:	9816      	ldr	r0, [sp, #88]	; 0x58
   15a7c:	f8b0 1090 	ldrh.w	r1, [r0, #144]	; 0x90
   15a80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15a82:	b293      	uxth	r3, r2
   15a84:	428b      	cmp	r3, r1
   15a86:	d0f0      	beq.n	15a6a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x158>
   15a88:	e7f3      	b.n	15a72 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
   15a8a:	f89d 01b7 	ldrb.w	r0, [sp, #439]	; 0x1b7
   15a8e:	07c0      	lsls	r0, r0, #31
   15a90:	2800      	cmp	r0, #0
   15a92:	d107      	bne.n	15aa4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x192>
   15a94:	e020      	b.n	15ad8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
   15a96:	980b      	ldr	r0, [sp, #44]	; 0x2c
   15a98:	b281      	uxth	r1, r0
   15a9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   15a9c:	b293      	uxth	r3, r2
   15a9e:	428b      	cmp	r3, r1
   15aa0:	d0eb      	beq.n	15a7a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x168>
   15aa2:	e7e6      	b.n	15a72 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
                        if self.colors.push(color).is_ok() {
   15aa4:	9816      	ldr	r0, [sp, #88]	; 0x58
   15aa6:	3024      	adds	r0, #36	; 0x24
   15aa8:	9912      	ldr	r1, [sp, #72]	; 0x48
   15aaa:	f7ff f851 	bl	14b50 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   15aae:	f8ad 11ba 	strh.w	r1, [sp, #442]	; 0x1ba
   15ab2:	f8ad 01b8 	strh.w	r0, [sp, #440]	; 0x1b8
   15ab6:	e7ff      	b.n	15ab8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1a6>
   15ab8:	a86e      	add	r0, sp, #440	; 0x1b8
   15aba:	f7ff fb92 	bl	151e2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>
   15abe:	9008      	str	r0, [sp, #32]
   15ac0:	e7ff      	b.n	15ac2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1b0>
   15ac2:	9808      	ldr	r0, [sp, #32]
   15ac4:	07c1      	lsls	r1, r0, #31
   15ac6:	2900      	cmp	r1, #0
   15ac8:	d101      	bne.n	15ace <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1bc>
   15aca:	e7ff      	b.n	15acc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1ba>
                    if x == self.x_right + 1 && y == self.y {
   15acc:	e004      	b.n	15ad8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
                            self.x_right = x;
   15ace:	9814      	ldr	r0, [sp, #80]	; 0x50
   15ad0:	9916      	ldr	r1, [sp, #88]	; 0x58
   15ad2:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                            continue;
   15ad6:	e7c7      	b.n	15a68 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
                        x_left: self.x_left,
   15ad8:	9816      	ldr	r0, [sp, #88]	; 0x58
   15ada:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   15ade:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   15ae2:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   15ae6:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   15aea:	a88b      	add	r0, sp, #556	; 0x22c
   15aec:	9107      	str	r1, [sp, #28]
   15aee:	4661      	mov	r1, ip
   15af0:	9206      	str	r2, [sp, #24]
   15af2:	9305      	str	r3, [sp, #20]
   15af4:	f7fe ff77 	bl	149e6 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   15af8:	e7ff      	b.n	15afa <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1e8>
                    let row = PixelRow {
   15afa:	9807      	ldr	r0, [sp, #28]
   15afc:	f8ad 0224 	strh.w	r0, [sp, #548]	; 0x224
   15b00:	9906      	ldr	r1, [sp, #24]
   15b02:	f8ad 1226 	strh.w	r1, [sp, #550]	; 0x226
   15b06:	9a05      	ldr	r2, [sp, #20]
   15b08:	f8ad 2228 	strh.w	r2, [sp, #552]	; 0x228
   15b0c:	a86f      	add	r0, sp, #444	; 0x1bc
   15b0e:	a98b      	add	r1, sp, #556	; 0x22c
   15b10:	2268      	movs	r2, #104	; 0x68
   15b12:	f008 fb35 	bl	1e180 <__aeabi_memcpy>
                    self.x_left = x;
   15b16:	9814      	ldr	r0, [sp, #80]	; 0x50
   15b18:	9916      	ldr	r1, [sp, #88]	; 0x58
   15b1a:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                    self.x_right = x;
   15b1e:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                    self.y = y;
   15b22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15b24:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                    self.colors.clear();
   15b28:	f101 0024 	add.w	r0, r1, #36	; 0x24
   15b2c:	f7ff f820 	bl	14b70 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   15b30:	e7ff      	b.n	15b32 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x220>
                    self.colors.push(color)
   15b32:	9816      	ldr	r0, [sp, #88]	; 0x58
   15b34:	3024      	adds	r0, #36	; 0x24
   15b36:	9912      	ldr	r1, [sp, #72]	; 0x48
   15b38:	f7ff f80a 	bl	14b50 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   15b3c:	9004      	str	r0, [sp, #16]
   15b3e:	9103      	str	r1, [sp, #12]
   15b40:	e7ff      	b.n	15b42 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x230>
   15b42:	f640 500c 	movw	r0, #3340	; 0xd0c
   15b46:	f2c0 0002 	movt	r0, #2
   15b4a:	4669      	mov	r1, sp
   15b4c:	6008      	str	r0, [r1, #0]
   15b4e:	f640 4290 	movw	r2, #3216	; 0xc90
   15b52:	f2c0 0202 	movt	r2, #2
   15b56:	2305      	movs	r3, #5
   15b58:	9804      	ldr	r0, [sp, #16]
   15b5a:	9903      	ldr	r1, [sp, #12]
   15b5c:	f7ff fb66 	bl	1522c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   15b60:	e7ff      	b.n	15b62 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x250>
   15b62:	a8a5      	add	r0, sp, #660	; 0x294
   15b64:	a96f      	add	r1, sp, #444	; 0x1bc
   15b66:	2270      	movs	r2, #112	; 0x70
                    return Some(row);
   15b68:	9002      	str	r0, [sp, #8]
   15b6a:	9201      	str	r2, [sp, #4]
   15b6c:	f008 fb08 	bl	1e180 <__aeabi_memcpy>
   15b70:	9815      	ldr	r0, [sp, #84]	; 0x54
   15b72:	3004      	adds	r0, #4
   15b74:	9902      	ldr	r1, [sp, #8]
   15b76:	9a01      	ldr	r2, [sp, #4]
   15b78:	f008 fb02 	bl	1e180 <__aeabi_memcpy>
   15b7c:	2001      	movs	r0, #1
   15b7e:	9915      	ldr	r1, [sp, #84]	; 0x54
   15b80:	6008      	str	r0, [r1, #0]
   15b82:	e70e      	b.n	159a2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   15b84:	f640 40f0 	movw	r0, #3312	; 0xcf0
   15b88:	f2c0 0002 	movt	r0, #2
   15b8c:	f640 42dc 	movw	r2, #3292	; 0xcdc
   15b90:	f2c0 0202 	movt	r2, #2
   15b94:	211c      	movs	r1, #28
   15b96:	f001 ff1f 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15b9a:	defe      	udf	#254	; 0xfe

00015b9c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>:
impl<R: Iterator<Item = PixelRow>> Iterator for BlockIterator<R> {
    /// This Iterator returns Pixel Blocks
    type Item = PixelBlock;

    /// Return the next Pixel Block of contiguous Pixel Rows with the same start and end column number
    fn next(&mut self) -> Option<Self::Item> {
   15b9c:	b580      	push	{r7, lr}
   15b9e:	f5ad 6dcb 	sub.w	sp, sp, #1624	; 0x658
   15ba2:	f8cd 164c 	str.w	r1, [sp, #1612]	; 0x64c
   15ba6:	2200      	movs	r2, #0
        //  Loop over all Pixel Rows until we have composed a Pixel Block, or we have run out of Pixel Rows.
        loop {
   15ba8:	f88d 264b 	strb.w	r2, [sp, #1611]	; 0x64b
   15bac:	911f      	str	r1, [sp, #124]	; 0x7c
   15bae:	901e      	str	r0, [sp, #120]	; 0x78
   15bb0:	e7ff      	b.n	15bb2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   15bb2:	2001      	movs	r0, #1
            //  Get the next Pixel Row.
            let next_row = self.rows.next();
   15bb4:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   15bb8:	a820      	add	r0, sp, #128	; 0x80
   15bba:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15bbc:	f7ff fea9 	bl	15912 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>
   15bc0:	e7ff      	b.n	15bc2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x26>
            match next_row {
                None => {  //  If no more Pixel Rows...
   15bc2:	9820      	ldr	r0, [sp, #128]	; 0x80
   15bc4:	2800      	cmp	r0, #0
   15bc6:	d026      	beq.n	15c16 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x7a>
   15bc8:	e7ff      	b.n	15bca <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e>
   15bca:	a820      	add	r0, sp, #128	; 0x80
                    };
                    self.colors.clear();
                    self.first_row = true;
                    return Some(row);
                }
                Some(PixelRow { x_left, x_right, y, colors, .. }) => {  //  If there is a Pixel Row...
   15bcc:	1d01      	adds	r1, r0, #4
   15bce:	f8bd 00ec 	ldrh.w	r0, [sp, #236]	; 0xec
   15bd2:	4602      	mov	r2, r0
   15bd4:	f8ad 0652 	strh.w	r0, [sp, #1618]	; 0x652
   15bd8:	f8bd 00ee 	ldrh.w	r0, [sp, #238]	; 0xee
   15bdc:	4603      	mov	r3, r0
   15bde:	f8ad 0654 	strh.w	r0, [sp, #1620]	; 0x654
   15be2:	f8bd 00f0 	ldrh.w	r0, [sp, #240]	; 0xf0
   15be6:	4684      	mov	ip, r0
   15be8:	f8ad 0656 	strh.w	r0, [sp, #1622]	; 0x656
   15bec:	2000      	movs	r0, #0
   15bee:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   15bf2:	a8da      	add	r0, sp, #872	; 0x368
   15bf4:	f04f 0e68 	mov.w	lr, #104	; 0x68
   15bf8:	921d      	str	r2, [sp, #116]	; 0x74
   15bfa:	4672      	mov	r2, lr
   15bfc:	931c      	str	r3, [sp, #112]	; 0x70
   15bfe:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
   15c02:	f008 fabd 	bl	1e180 <__aeabi_memcpy>
                    //  Save the first row as the block start and handle next block.
                    if self.first_row {
   15c06:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15c08:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   15c0c:	07c9      	lsls	r1, r1, #31
   15c0e:	2900      	cmp	r1, #0
   15c10:	d15a      	bne.n	15cc8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x12c>
   15c12:	e04e      	b.n	15cb2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x116>
            match next_row {
   15c14:	defe      	udf	#254	; 0xfe
                    if self.first_row {
   15c16:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15c18:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   15c1c:	07c9      	lsls	r1, r1, #31
   15c1e:	2900      	cmp	r1, #0
   15c20:	d115      	bne.n	15c4e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xb2>
   15c22:	e7ff      	b.n	15c24 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x88>
                        x_left: self.x_left,
   15c24:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15c26:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   15c2a:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   15c2e:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   15c32:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   15c36:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   15c3a:	a872      	add	r0, sp, #456	; 0x1c8
   15c3c:	911a      	str	r1, [sp, #104]	; 0x68
   15c3e:	4671      	mov	r1, lr
   15c40:	9219      	str	r2, [sp, #100]	; 0x64
   15c42:	9318      	str	r3, [sp, #96]	; 0x60
   15c44:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
   15c48:	f7fe fedd 	bl	14a06 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   15c4c:	e003      	b.n	15c56 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xba>
   15c4e:	2000      	movs	r0, #0
                        return None;  //  No rows to group
   15c50:	991e      	ldr	r1, [sp, #120]	; 0x78
   15c52:	6008      	str	r0, [r1, #0]
   15c54:	e153      	b.n	15efe <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                    let row = PixelBlock {
   15c56:	981a      	ldr	r0, [sp, #104]	; 0x68
   15c58:	f8ad 01c0 	strh.w	r0, [sp, #448]	; 0x1c0
   15c5c:	9919      	ldr	r1, [sp, #100]	; 0x64
   15c5e:	f8ad 11c2 	strh.w	r1, [sp, #450]	; 0x1c2
   15c62:	9a18      	ldr	r2, [sp, #96]	; 0x60
   15c64:	f8ad 21c4 	strh.w	r2, [sp, #452]	; 0x1c4
   15c68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15c6a:	f8ad 31c6 	strh.w	r3, [sp, #454]	; 0x1c6
   15c6e:	a83d      	add	r0, sp, #244	; 0xf4
   15c70:	a972      	add	r1, sp, #456	; 0x1c8
   15c72:	22cc      	movs	r2, #204	; 0xcc
   15c74:	f008 fa84 	bl	1e180 <__aeabi_memcpy>
                    self.colors.clear();
   15c78:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15c7a:	3094      	adds	r0, #148	; 0x94
   15c7c:	f7fe ff80 	bl	14b80 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   15c80:	e7ff      	b.n	15c82 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xe6>
   15c82:	2001      	movs	r0, #1
                    self.first_row = true;
   15c84:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15c86:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
   15c8a:	aaa5      	add	r2, sp, #660	; 0x294
   15c8c:	a93d      	add	r1, sp, #244	; 0xf4
   15c8e:	23d4      	movs	r3, #212	; 0xd4
                    return Some(row);
   15c90:	9016      	str	r0, [sp, #88]	; 0x58
   15c92:	4610      	mov	r0, r2
   15c94:	9215      	str	r2, [sp, #84]	; 0x54
   15c96:	461a      	mov	r2, r3
   15c98:	9314      	str	r3, [sp, #80]	; 0x50
   15c9a:	f008 fa71 	bl	1e180 <__aeabi_memcpy>
   15c9e:	981e      	ldr	r0, [sp, #120]	; 0x78
   15ca0:	3004      	adds	r0, #4
   15ca2:	9915      	ldr	r1, [sp, #84]	; 0x54
   15ca4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   15ca6:	f008 fa6b 	bl	1e180 <__aeabi_memcpy>
   15caa:	9816      	ldr	r0, [sp, #88]	; 0x58
   15cac:	991e      	ldr	r1, [sp, #120]	; 0x78
   15cae:	6008      	str	r0, [r1, #0]
   15cb0:	e125      	b.n	15efe <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                        self.colors.extend_from_slice(&colors)
                            .expect("never");
                        continue;
                    }
                    //  If this row is adjacent to the previous row and same size, add to the block.
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   15cb2:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15cb4:	f8b0 1166 	ldrh.w	r1, [r0, #358]	; 0x166
   15cb8:	3101      	adds	r1, #1
   15cba:	b28a      	uxth	r2, r1
   15cbc:	460b      	mov	r3, r1
   15cbe:	428a      	cmp	r2, r1
   15cc0:	9313      	str	r3, [sp, #76]	; 0x4c
   15cc2:	f040 8128 	bne.w	15f16 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x37a>
   15cc6:	e069      	b.n	15d9c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x200>
   15cc8:	2000      	movs	r0, #0
                        self.first_row = false;
   15cca:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15ccc:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
                        self.x_left = x_left;
   15cd0:	981d      	ldr	r0, [sp, #116]	; 0x74
   15cd2:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                        self.x_right = x_right;
   15cd6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   15cd8:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                        self.y_top = y;
   15cdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15cde:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                        self.y_bottom = y;
   15ce2:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                        self.colors.clear();
   15ce6:	f101 0094 	add.w	r0, r1, #148	; 0x94
   15cea:	f7fe ff49 	bl	14b80 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   15cee:	e7ff      	b.n	15cf0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x154>
                        self.colors.extend_from_slice(&colors)
   15cf0:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15cf2:	f100 0194 	add.w	r1, r0, #148	; 0x94
   15cf6:	a8da      	add	r0, sp, #872	; 0x368
   15cf8:	9112      	str	r1, [sp, #72]	; 0x48
   15cfa:	f7fe feb4 	bl	14a66 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   15cfe:	9011      	str	r0, [sp, #68]	; 0x44
   15d00:	9110      	str	r1, [sp, #64]	; 0x40
   15d02:	e7ff      	b.n	15d04 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x168>
   15d04:	9812      	ldr	r0, [sp, #72]	; 0x48
   15d06:	9911      	ldr	r1, [sp, #68]	; 0x44
   15d08:	9a10      	ldr	r2, [sp, #64]	; 0x40
   15d0a:	f7fe fef5 	bl	14af8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   15d0e:	900f      	str	r0, [sp, #60]	; 0x3c
   15d10:	e7ff      	b.n	15d12 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x176>
   15d12:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15d14:	f000 0001 	and.w	r0, r0, #1
   15d18:	f640 4190 	movw	r1, #3216	; 0xc90
   15d1c:	f2c0 0102 	movt	r1, #2
   15d20:	f640 531c 	movw	r3, #3356	; 0xd1c
   15d24:	f2c0 0302 	movt	r3, #2
   15d28:	2205      	movs	r2, #5
   15d2a:	f7ff fab0 	bl	1528e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   15d2e:	e7ff      	b.n	15d30 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x194>
                        continue;
   15d30:	e7ff      	b.n	15d32 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
   15d32:	a8da      	add	r0, sp, #872	; 0x368
                    self.colors.clear();
                    self.colors.extend_from_slice(&colors)
                        .expect("never");
                    return Some(row);
                }
            }
   15d34:	f7f4 fd2d 	bl	a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   15d38:	e7ff      	b.n	15d3a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x19e>
        }
   15d3a:	9820      	ldr	r0, [sp, #128]	; 0x80
   15d3c:	2801      	cmp	r0, #1
   15d3e:	f000 80e2 	beq.w	15f06 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
   15d42:	e0e4      	b.n	15f0e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x372>
   15d44:	2001      	movs	r0, #1
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   15d46:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   15d4a:	e00b      	b.n	15d64 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   15d4c:	2000      	movs	r0, #0
   15d4e:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   15d52:	e007      	b.n	15d64 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   15d54:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15d56:	f8b0 1162 	ldrh.w	r1, [r0, #354]	; 0x162
   15d5a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   15d5c:	b293      	uxth	r3, r2
   15d5e:	428b      	cmp	r3, r1
   15d60:	d0f0      	beq.n	15d44 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1a8>
   15d62:	e7f3      	b.n	15d4c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   15d64:	f89d 03d1 	ldrb.w	r0, [sp, #977]	; 0x3d1
   15d68:	07c0      	lsls	r0, r0, #31
   15d6a:	2800      	cmp	r0, #0
   15d6c:	d11d      	bne.n	15daa <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x20e>
   15d6e:	e03f      	b.n	15df0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
   15d70:	2001      	movs	r0, #1
   15d72:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   15d76:	e00b      	b.n	15d90 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   15d78:	2000      	movs	r0, #0
   15d7a:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   15d7e:	e007      	b.n	15d90 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   15d80:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15d82:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
   15d86:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   15d88:	b293      	uxth	r3, r2
   15d8a:	428b      	cmp	r3, r1
   15d8c:	d0f0      	beq.n	15d70 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1d4>
   15d8e:	e7f3      	b.n	15d78 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
   15d90:	f89d 03d2 	ldrb.w	r0, [sp, #978]	; 0x3d2
   15d94:	07c0      	lsls	r0, r0, #31
   15d96:	2800      	cmp	r0, #0
   15d98:	d1dc      	bne.n	15d54 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b8>
   15d9a:	e7d7      	b.n	15d4c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   15d9c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   15d9e:	b281      	uxth	r1, r0
   15da0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   15da2:	b293      	uxth	r3, r2
   15da4:	428b      	cmp	r3, r1
   15da6:	d0eb      	beq.n	15d80 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1e4>
   15da8:	e7e6      	b.n	15d78 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
                        if self.colors.extend_from_slice(&colors).is_ok() {
   15daa:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15dac:	f100 0194 	add.w	r1, r0, #148	; 0x94
   15db0:	a8da      	add	r0, sp, #872	; 0x368
   15db2:	910e      	str	r1, [sp, #56]	; 0x38
   15db4:	f7fe fe57 	bl	14a66 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   15db8:	900d      	str	r0, [sp, #52]	; 0x34
   15dba:	910c      	str	r1, [sp, #48]	; 0x30
   15dbc:	e7ff      	b.n	15dbe <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x222>
   15dbe:	980e      	ldr	r0, [sp, #56]	; 0x38
   15dc0:	990d      	ldr	r1, [sp, #52]	; 0x34
   15dc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15dc4:	f7fe fe98 	bl	14af8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   15dc8:	f88d 03d3 	strb.w	r0, [sp, #979]	; 0x3d3
   15dcc:	e7ff      	b.n	15dce <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x232>
   15dce:	f20d 30d3 	addw	r0, sp, #979	; 0x3d3
   15dd2:	f7ff fa18 	bl	15206 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>
   15dd6:	900b      	str	r0, [sp, #44]	; 0x2c
   15dd8:	e7ff      	b.n	15dda <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x23e>
   15dda:	980b      	ldr	r0, [sp, #44]	; 0x2c
   15ddc:	07c1      	lsls	r1, r0, #31
   15dde:	2900      	cmp	r1, #0
   15de0:	d101      	bne.n	15de6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x24a>
   15de2:	e7ff      	b.n	15de4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x248>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   15de4:	e004      	b.n	15df0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
                            self.y_bottom = y;
   15de6:	981b      	ldr	r0, [sp, #108]	; 0x6c
   15de8:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15dea:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
                            continue;    
   15dee:	e7a0      	b.n	15d32 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
                        x_left: self.x_left,
   15df0:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15df2:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   15df6:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   15dfa:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   15dfe:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   15e02:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   15e06:	f50d 6095 	add.w	r0, sp, #1192	; 0x4a8
   15e0a:	910a      	str	r1, [sp, #40]	; 0x28
   15e0c:	4671      	mov	r1, lr
   15e0e:	9209      	str	r2, [sp, #36]	; 0x24
   15e10:	9308      	str	r3, [sp, #32]
   15e12:	f8cd c01c 	str.w	ip, [sp, #28]
   15e16:	f7fe fdf6 	bl	14a06 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   15e1a:	e7ff      	b.n	15e1c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x280>
                    let row = PixelBlock {
   15e1c:	980a      	ldr	r0, [sp, #40]	; 0x28
   15e1e:	f8ad 04a0 	strh.w	r0, [sp, #1184]	; 0x4a0
   15e22:	9909      	ldr	r1, [sp, #36]	; 0x24
   15e24:	f8ad 14a2 	strh.w	r1, [sp, #1186]	; 0x4a2
   15e28:	9a08      	ldr	r2, [sp, #32]
   15e2a:	f8ad 24a4 	strh.w	r2, [sp, #1188]	; 0x4a4
   15e2e:	9b07      	ldr	r3, [sp, #28]
   15e30:	f8ad 34a6 	strh.w	r3, [sp, #1190]	; 0x4a6
   15e34:	a8f5      	add	r0, sp, #980	; 0x3d4
   15e36:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
   15e3a:	22cc      	movs	r2, #204	; 0xcc
   15e3c:	f008 f9a0 	bl	1e180 <__aeabi_memcpy>
                    self.x_left = x_left;
   15e40:	981d      	ldr	r0, [sp, #116]	; 0x74
   15e42:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15e44:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                    self.x_right = x_right;
   15e48:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   15e4a:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                    self.y_top = y;
   15e4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15e50:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                    self.y_bottom = y;
   15e54:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                    self.colors.clear();
   15e58:	f101 0094 	add.w	r0, r1, #148	; 0x94
   15e5c:	f7fe fe90 	bl	14b80 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   15e60:	e7ff      	b.n	15e62 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2c6>
                    self.colors.extend_from_slice(&colors)
   15e62:	981f      	ldr	r0, [sp, #124]	; 0x7c
   15e64:	f100 0194 	add.w	r1, r0, #148	; 0x94
   15e68:	a8da      	add	r0, sp, #872	; 0x368
   15e6a:	9106      	str	r1, [sp, #24]
   15e6c:	f7fe fdfb 	bl	14a66 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   15e70:	9005      	str	r0, [sp, #20]
   15e72:	9104      	str	r1, [sp, #16]
   15e74:	e7ff      	b.n	15e76 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2da>
   15e76:	9806      	ldr	r0, [sp, #24]
   15e78:	9905      	ldr	r1, [sp, #20]
   15e7a:	9a04      	ldr	r2, [sp, #16]
   15e7c:	f7fe fe3c 	bl	14af8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   15e80:	9003      	str	r0, [sp, #12]
   15e82:	e7ff      	b.n	15e84 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e8>
   15e84:	9803      	ldr	r0, [sp, #12]
   15e86:	f000 0001 	and.w	r0, r0, #1
   15e8a:	f640 4190 	movw	r1, #3216	; 0xc90
   15e8e:	f2c0 0102 	movt	r1, #2
   15e92:	f640 533c 	movw	r3, #3388	; 0xd3c
   15e96:	f2c0 0302 	movt	r3, #2
   15e9a:	2205      	movs	r2, #5
   15e9c:	f7ff f9f7 	bl	1528e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   15ea0:	e7ff      	b.n	15ea2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x306>
   15ea2:	f20d 5074 	addw	r0, sp, #1396	; 0x574
   15ea6:	a9f5      	add	r1, sp, #980	; 0x3d4
   15ea8:	22d4      	movs	r2, #212	; 0xd4
                    return Some(row);
   15eaa:	9002      	str	r0, [sp, #8]
   15eac:	9201      	str	r2, [sp, #4]
   15eae:	f008 f967 	bl	1e180 <__aeabi_memcpy>
   15eb2:	981e      	ldr	r0, [sp, #120]	; 0x78
   15eb4:	3004      	adds	r0, #4
   15eb6:	9902      	ldr	r1, [sp, #8]
   15eb8:	9a01      	ldr	r2, [sp, #4]
   15eba:	f008 f961 	bl	1e180 <__aeabi_memcpy>
   15ebe:	2001      	movs	r0, #1
   15ec0:	991e      	ldr	r1, [sp, #120]	; 0x78
   15ec2:	6008      	str	r0, [r1, #0]
   15ec4:	a8da      	add	r0, sp, #872	; 0x368
            }
   15ec6:	f7f4 fc64 	bl	a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   15eca:	e7ff      	b.n	15ecc <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x330>
                    return Some(row);
   15ecc:	e017      	b.n	15efe <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
   15ece:	2000      	movs	r0, #0
        }
   15ed0:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
    }
   15ed4:	f50d 6dcb 	add.w	sp, sp, #1624	; 0x658
   15ed8:	bd80      	pop	{r7, pc}
        }
   15eda:	f89d 064b 	ldrb.w	r0, [sp, #1611]	; 0x64b
   15ede:	07c0      	lsls	r0, r0, #31
   15ee0:	2800      	cmp	r0, #0
   15ee2:	d0f4      	beq.n	15ece <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   15ee4:	e7ff      	b.n	15ee6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x34a>
   15ee6:	2000      	movs	r0, #0
   15ee8:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   15eec:	a820      	add	r0, sp, #128	; 0x80
   15eee:	3004      	adds	r0, #4
   15ef0:	f7f4 fc4f 	bl	a792 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   15ef4:	e7eb      	b.n	15ece <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   15ef6:	a820      	add	r0, sp, #128	; 0x80
   15ef8:	f7f4 fc10 	bl	a71c <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   15efc:	e7e7      	b.n	15ece <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   15efe:	9820      	ldr	r0, [sp, #128]	; 0x80
   15f00:	2801      	cmp	r0, #1
   15f02:	d0ea      	beq.n	15eda <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x33e>
   15f04:	e7f7      	b.n	15ef6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x35a>
   15f06:	2000      	movs	r0, #0
   15f08:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
                        continue;
   15f0c:	e651      	b.n	15bb2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   15f0e:	a820      	add	r0, sp, #128	; 0x80
        }
   15f10:	f7f4 fc04 	bl	a71c <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   15f14:	e7f7      	b.n	15f06 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   15f16:	f640 40f0 	movw	r0, #3312	; 0xcf0
   15f1a:	f2c0 0002 	movt	r0, #2
   15f1e:	f640 522c 	movw	r2, #3372	; 0xd2c
   15f22:	f2c0 0202 	movt	r2, #2
   15f26:	211c      	movs	r1, #28
   15f28:	f001 fd56 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15f2c:	defe      	udf	#254	; 0xfe

00015f2e <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>:
   15f2e:	b081      	sub	sp, #4
   15f30:	9000      	str	r0, [sp, #0]
   15f32:	8800      	ldrh	r0, [r0, #0]
   15f34:	b001      	add	sp, #4
   15f36:	4770      	bx	lr

00015f38 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>:
   15f38:	b580      	push	{r7, lr}
   15f3a:	b08c      	sub	sp, #48	; 0x30
   15f3c:	9009      	str	r0, [sp, #36]	; 0x24
   15f3e:	910a      	str	r1, [sp, #40]	; 0x28
   15f40:	920b      	str	r2, [sp, #44]	; 0x2c
   15f42:	9006      	str	r0, [sp, #24]
   15f44:	4608      	mov	r0, r1
   15f46:	9105      	str	r1, [sp, #20]
   15f48:	4611      	mov	r1, r2
   15f4a:	9204      	str	r2, [sp, #16]
   15f4c:	f000 f89f 	bl	1608e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15f50:	9003      	str	r0, [sp, #12]
   15f52:	e7ff      	b.n	15f54 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x1c>
   15f54:	9806      	ldr	r0, [sp, #24]
   15f56:	9007      	str	r0, [sp, #28]
   15f58:	9903      	ldr	r1, [sp, #12]
   15f5a:	9108      	str	r1, [sp, #32]
   15f5c:	9807      	ldr	r0, [sp, #28]
   15f5e:	9908      	ldr	r1, [sp, #32]
   15f60:	9a05      	ldr	r2, [sp, #20]
   15f62:	9b04      	ldr	r3, [sp, #16]
   15f64:	f000 f82d 	bl	15fc2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>
   15f68:	9002      	str	r0, [sp, #8]
   15f6a:	9101      	str	r1, [sp, #4]
   15f6c:	e7ff      	b.n	15f6e <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x36>
   15f6e:	9802      	ldr	r0, [sp, #8]
   15f70:	9901      	ldr	r1, [sp, #4]
   15f72:	b00c      	add	sp, #48	; 0x30
   15f74:	bd80      	pop	{r7, pc}

00015f76 <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>:
   15f76:	b083      	sub	sp, #12
   15f78:	9001      	str	r0, [sp, #4]
   15f7a:	9102      	str	r1, [sp, #8]
   15f7c:	b003      	add	sp, #12
   15f7e:	4770      	bx	lr

00015f80 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>:
   15f80:	b580      	push	{r7, lr}
   15f82:	b08a      	sub	sp, #40	; 0x28
   15f84:	9006      	str	r0, [sp, #24]
   15f86:	9107      	str	r1, [sp, #28]
   15f88:	9208      	str	r2, [sp, #32]
   15f8a:	9309      	str	r3, [sp, #36]	; 0x24
   15f8c:	9005      	str	r0, [sp, #20]
   15f8e:	4610      	mov	r0, r2
   15f90:	9104      	str	r1, [sp, #16]
   15f92:	4619      	mov	r1, r3
   15f94:	f000 f864 	bl	16060 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   15f98:	9003      	str	r0, [sp, #12]
   15f9a:	e7ff      	b.n	15f9c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x1c>
   15f9c:	9803      	ldr	r0, [sp, #12]
   15f9e:	9905      	ldr	r1, [sp, #20]
   15fa0:	f000 f96e 	bl	16280 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15fa4:	9002      	str	r0, [sp, #8]
   15fa6:	e7ff      	b.n	15fa8 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x28>
   15fa8:	9804      	ldr	r0, [sp, #16]
   15faa:	9905      	ldr	r1, [sp, #20]
   15fac:	1a41      	subs	r1, r0, r1
   15fae:	9802      	ldr	r0, [sp, #8]
   15fb0:	f000 f849 	bl	16046 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   15fb4:	9001      	str	r0, [sp, #4]
   15fb6:	9100      	str	r1, [sp, #0]
   15fb8:	e7ff      	b.n	15fba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x3a>
   15fba:	9801      	ldr	r0, [sp, #4]
   15fbc:	9900      	ldr	r1, [sp, #0]
   15fbe:	b00a      	add	sp, #40	; 0x28
   15fc0:	bd80      	pop	{r7, pc}

00015fc2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>:
   15fc2:	b580      	push	{r7, lr}
   15fc4:	b08c      	sub	sp, #48	; 0x30
   15fc6:	9008      	str	r0, [sp, #32]
   15fc8:	9109      	str	r1, [sp, #36]	; 0x24
   15fca:	920a      	str	r2, [sp, #40]	; 0x28
   15fcc:	930b      	str	r3, [sp, #44]	; 0x2c
   15fce:	4288      	cmp	r0, r1
   15fd0:	9307      	str	r3, [sp, #28]
   15fd2:	9206      	str	r2, [sp, #24]
   15fd4:	9105      	str	r1, [sp, #20]
   15fd6:	9004      	str	r0, [sp, #16]
   15fd8:	d806      	bhi.n	15fe8 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x26>
   15fda:	e7ff      	b.n	15fdc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x1a>
   15fdc:	9806      	ldr	r0, [sp, #24]
   15fde:	9907      	ldr	r1, [sp, #28]
   15fe0:	f000 f855 	bl	1608e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15fe4:	9003      	str	r0, [sp, #12]
   15fe6:	e004      	b.n	15ff2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x30>
   15fe8:	9804      	ldr	r0, [sp, #16]
   15fea:	9905      	ldr	r1, [sp, #20]
   15fec:	f002 fc69 	bl	188c2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   15ff0:	defe      	udf	#254	; 0xfe
   15ff2:	9805      	ldr	r0, [sp, #20]
   15ff4:	9903      	ldr	r1, [sp, #12]
   15ff6:	4288      	cmp	r0, r1
   15ff8:	d809      	bhi.n	1600e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x4c>
   15ffa:	e7ff      	b.n	15ffc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x3a>
   15ffc:	9804      	ldr	r0, [sp, #16]
   15ffe:	9905      	ldr	r1, [sp, #20]
   16000:	9a06      	ldr	r2, [sp, #24]
   16002:	9b07      	ldr	r3, [sp, #28]
   16004:	f7ff ffbc 	bl	15f80 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>
   16008:	9002      	str	r0, [sp, #8]
   1600a:	9101      	str	r1, [sp, #4]
   1600c:	e00a      	b.n	16024 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x62>
   1600e:	9806      	ldr	r0, [sp, #24]
   16010:	9907      	ldr	r1, [sp, #28]
   16012:	f000 f83c 	bl	1608e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   16016:	9000      	str	r0, [sp, #0]
   16018:	e7ff      	b.n	1601a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x58>
   1601a:	9805      	ldr	r0, [sp, #20]
   1601c:	9900      	ldr	r1, [sp, #0]
   1601e:	f002 fc2e 	bl	1887e <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   16022:	defe      	udf	#254	; 0xfe
   16024:	9802      	ldr	r0, [sp, #8]
   16026:	9901      	ldr	r1, [sp, #4]
   16028:	b00c      	add	sp, #48	; 0x30
   1602a:	bd80      	pop	{r7, pc}

0001602c <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>:
   1602c:	b580      	push	{r7, lr}
   1602e:	b084      	sub	sp, #16
   16030:	9002      	str	r0, [sp, #8]
   16032:	9103      	str	r1, [sp, #12]
   16034:	f001 fa5e 	bl	174f4 <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>
   16038:	9001      	str	r0, [sp, #4]
   1603a:	9100      	str	r1, [sp, #0]
   1603c:	e7ff      	b.n	1603e <_ZN4core5slice14from_raw_parts17h1425df913744b73aE+0x12>
   1603e:	9801      	ldr	r0, [sp, #4]
   16040:	9900      	ldr	r1, [sp, #0]
   16042:	b004      	add	sp, #16
   16044:	bd80      	pop	{r7, pc}

00016046 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>:
   16046:	b580      	push	{r7, lr}
   16048:	b084      	sub	sp, #16
   1604a:	9002      	str	r0, [sp, #8]
   1604c:	9103      	str	r1, [sp, #12]
   1604e:	f001 fa5e 	bl	1750e <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>
   16052:	9001      	str	r0, [sp, #4]
   16054:	9100      	str	r1, [sp, #0]
   16056:	e7ff      	b.n	16058 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E+0x12>
   16058:	9801      	ldr	r0, [sp, #4]
   1605a:	9900      	ldr	r1, [sp, #0]
   1605c:	b004      	add	sp, #16
   1605e:	bd80      	pop	{r7, pc}

00016060 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>:
   16060:	b082      	sub	sp, #8
   16062:	9000      	str	r0, [sp, #0]
   16064:	9101      	str	r1, [sp, #4]
   16066:	b002      	add	sp, #8
   16068:	4770      	bx	lr

0001606a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>:
   1606a:	b580      	push	{r7, lr}
   1606c:	b086      	sub	sp, #24
   1606e:	9003      	str	r0, [sp, #12]
   16070:	9104      	str	r1, [sp, #16]
   16072:	9205      	str	r2, [sp, #20]
   16074:	9002      	str	r0, [sp, #8]
   16076:	4610      	mov	r0, r2
   16078:	9a02      	ldr	r2, [sp, #8]
   1607a:	9101      	str	r1, [sp, #4]
   1607c:	4611      	mov	r1, r2
   1607e:	9a01      	ldr	r2, [sp, #4]
   16080:	f000 f886 	bl	16190 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>
   16084:	9000      	str	r0, [sp, #0]
   16086:	e7ff      	b.n	16088 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE+0x1e>
   16088:	9800      	ldr	r0, [sp, #0]
   1608a:	b006      	add	sp, #24
   1608c:	bd80      	pop	{r7, pc}

0001608e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>:
   1608e:	b084      	sub	sp, #16
   16090:	9002      	str	r0, [sp, #8]
   16092:	9103      	str	r1, [sp, #12]
   16094:	9000      	str	r0, [sp, #0]
   16096:	9101      	str	r1, [sp, #4]
   16098:	9801      	ldr	r0, [sp, #4]
   1609a:	b004      	add	sp, #16
   1609c:	4770      	bx	lr

0001609e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>:
   1609e:	b580      	push	{r7, lr}
   160a0:	b092      	sub	sp, #72	; 0x48
   160a2:	900e      	str	r0, [sp, #56]	; 0x38
   160a4:	910f      	str	r1, [sp, #60]	; 0x3c
   160a6:	9009      	str	r0, [sp, #36]	; 0x24
   160a8:	9108      	str	r1, [sp, #32]
   160aa:	f000 f83e 	bl	1612a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>
   160ae:	4601      	mov	r1, r0
   160b0:	9010      	str	r0, [sp, #64]	; 0x40
   160b2:	9107      	str	r1, [sp, #28]
   160b4:	e7ff      	b.n	160b6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x18>
   160b6:	9807      	ldr	r0, [sp, #28]
   160b8:	f001 f9d4 	bl	17464 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   160bc:	e7ff      	b.n	160be <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x20>
   160be:	e7ff      	b.n	160c0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x22>
   160c0:	2002      	movs	r0, #2
   160c2:	9011      	str	r0, [sp, #68]	; 0x44
   160c4:	9811      	ldr	r0, [sp, #68]	; 0x44
   160c6:	9006      	str	r0, [sp, #24]
   160c8:	e7ff      	b.n	160ca <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x2c>
   160ca:	9806      	ldr	r0, [sp, #24]
   160cc:	2800      	cmp	r0, #0
   160ce:	d006      	beq.n	160de <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x40>
   160d0:	e7ff      	b.n	160d2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x34>
   160d2:	9809      	ldr	r0, [sp, #36]	; 0x24
   160d4:	9908      	ldr	r1, [sp, #32]
   160d6:	f7ff ffda 	bl	1608e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   160da:	9005      	str	r0, [sp, #20]
   160dc:	e011      	b.n	16102 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x64>
   160de:	9807      	ldr	r0, [sp, #28]
   160e0:	9909      	ldr	r1, [sp, #36]	; 0x24
   160e2:	9004      	str	r0, [sp, #16]
   160e4:	4608      	mov	r0, r1
   160e6:	9908      	ldr	r1, [sp, #32]
   160e8:	f7ff ffd1 	bl	1608e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   160ec:	9003      	str	r0, [sp, #12]
   160ee:	e7ff      	b.n	160f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x52>
   160f0:	9804      	ldr	r0, [sp, #16]
   160f2:	9903      	ldr	r1, [sp, #12]
   160f4:	f7fe faa4 	bl	14640 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>
   160f8:	9002      	str	r0, [sp, #8]
   160fa:	e7ff      	b.n	160fc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x5e>
   160fc:	9802      	ldr	r0, [sp, #8]
   160fe:	900c      	str	r0, [sp, #48]	; 0x30
   16100:	e006      	b.n	16110 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   16102:	9807      	ldr	r0, [sp, #28]
   16104:	9905      	ldr	r1, [sp, #20]
   16106:	f001 f98c 	bl	17422 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   1610a:	900c      	str	r0, [sp, #48]	; 0x30
   1610c:	e7ff      	b.n	1610e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x70>
   1610e:	e7ff      	b.n	16110 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   16110:	9807      	ldr	r0, [sp, #28]
   16112:	f000 fc93 	bl	16a3c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   16116:	9001      	str	r0, [sp, #4]
   16118:	e7ff      	b.n	1611a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x7c>
   1611a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1611c:	9901      	ldr	r1, [sp, #4]
   1611e:	910a      	str	r1, [sp, #40]	; 0x28
   16120:	900b      	str	r0, [sp, #44]	; 0x2c
   16122:	980a      	ldr	r0, [sp, #40]	; 0x28
   16124:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16126:	b012      	add	sp, #72	; 0x48
   16128:	bd80      	pop	{r7, pc}

0001612a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>:
   1612a:	b082      	sub	sp, #8
   1612c:	9000      	str	r0, [sp, #0]
   1612e:	9101      	str	r1, [sp, #4]
   16130:	b002      	add	sp, #8
   16132:	4770      	bx	lr

00016134 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>:
   16134:	b580      	push	{r7, lr}
   16136:	b086      	sub	sp, #24
   16138:	9003      	str	r0, [sp, #12]
   1613a:	9104      	str	r1, [sp, #16]
   1613c:	f7ff ff1b 	bl	15f76 <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>
   16140:	9002      	str	r0, [sp, #8]
   16142:	9101      	str	r1, [sp, #4]
   16144:	e7ff      	b.n	16146 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E+0x12>
   16146:	9802      	ldr	r0, [sp, #8]
   16148:	9901      	ldr	r1, [sp, #4]
   1614a:	b006      	add	sp, #24
   1614c:	bd80      	pop	{r7, pc}

0001614e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>:
   1614e:	b580      	push	{r7, lr}
   16150:	b088      	sub	sp, #32
   16152:	9005      	str	r0, [sp, #20]
   16154:	9106      	str	r1, [sp, #24]
   16156:	9207      	str	r2, [sp, #28]
   16158:	9004      	str	r0, [sp, #16]
   1615a:	4610      	mov	r0, r2
   1615c:	9a04      	ldr	r2, [sp, #16]
   1615e:	9103      	str	r1, [sp, #12]
   16160:	4611      	mov	r1, r2
   16162:	9a03      	ldr	r2, [sp, #12]
   16164:	f7ff fee8 	bl	15f38 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>
   16168:	9002      	str	r0, [sp, #8]
   1616a:	9101      	str	r1, [sp, #4]
   1616c:	e7ff      	b.n	1616e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E+0x20>
   1616e:	9802      	ldr	r0, [sp, #8]
   16170:	9901      	ldr	r1, [sp, #4]
   16172:	b008      	add	sp, #32
   16174:	bd80      	pop	{r7, pc}

00016176 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>:
   16176:	b580      	push	{r7, lr}
   16178:	b084      	sub	sp, #16
   1617a:	9002      	str	r0, [sp, #8]
   1617c:	9103      	str	r1, [sp, #12]
   1617e:	f7ff ff8e 	bl	1609e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>
   16182:	9001      	str	r0, [sp, #4]
   16184:	9100      	str	r1, [sp, #0]
   16186:	e7ff      	b.n	16188 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE+0x12>
   16188:	9801      	ldr	r0, [sp, #4]
   1618a:	9900      	ldr	r1, [sp, #0]
   1618c:	b004      	add	sp, #16
   1618e:	bd80      	pop	{r7, pc}

00016190 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>:
   16190:	b580      	push	{r7, lr}
   16192:	b086      	sub	sp, #24
   16194:	9003      	str	r0, [sp, #12]
   16196:	9104      	str	r1, [sp, #16]
   16198:	9205      	str	r2, [sp, #20]
   1619a:	9002      	str	r0, [sp, #8]
   1619c:	4608      	mov	r0, r1
   1619e:	4611      	mov	r1, r2
   161a0:	f7ff ff5e 	bl	16060 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   161a4:	9001      	str	r0, [sp, #4]
   161a6:	e7ff      	b.n	161a8 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x18>
   161a8:	9801      	ldr	r0, [sp, #4]
   161aa:	9902      	ldr	r1, [sp, #8]
   161ac:	f000 f868 	bl	16280 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   161b0:	9000      	str	r0, [sp, #0]
   161b2:	e7ff      	b.n	161b4 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x24>
   161b4:	9800      	ldr	r0, [sp, #0]
   161b6:	b006      	add	sp, #24
   161b8:	bd80      	pop	{r7, pc}

000161ba <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>:
   161ba:	b580      	push	{r7, lr}
   161bc:	b08e      	sub	sp, #56	; 0x38
   161be:	9007      	str	r0, [sp, #28]
   161c0:	6801      	ldr	r1, [r0, #0]
   161c2:	9005      	str	r0, [sp, #20]
   161c4:	4608      	mov	r0, r1
   161c6:	f000 fc3f 	bl	16a48 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   161ca:	9004      	str	r0, [sp, #16]
   161cc:	e7ff      	b.n	161ce <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x14>
   161ce:	9804      	ldr	r0, [sp, #16]
   161d0:	f000 f879 	bl	162c6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>
   161d4:	e7ff      	b.n	161d6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1c>
   161d6:	e7ff      	b.n	161d8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1e>
   161d8:	2002      	movs	r0, #2
   161da:	9008      	str	r0, [sp, #32]
   161dc:	9808      	ldr	r0, [sp, #32]
   161de:	9003      	str	r0, [sp, #12]
   161e0:	e7ff      	b.n	161e2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x28>
   161e2:	9803      	ldr	r0, [sp, #12]
   161e4:	2800      	cmp	r0, #0
   161e6:	d007      	beq.n	161f8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   161e8:	e7ff      	b.n	161ea <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x30>
   161ea:	9805      	ldr	r0, [sp, #20]
   161ec:	6840      	ldr	r0, [r0, #4]
   161ee:	f001 f939 	bl	17464 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   161f2:	e7ff      	b.n	161f4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3a>
   161f4:	e7ff      	b.n	161f6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3c>
   161f6:	e7ff      	b.n	161f8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   161f8:	9805      	ldr	r0, [sp, #20]
   161fa:	6800      	ldr	r0, [r0, #0]
   161fc:	f000 fc24 	bl	16a48 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   16200:	9002      	str	r0, [sp, #8]
   16202:	e7ff      	b.n	16204 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x4a>
   16204:	9805      	ldr	r0, [sp, #20]
   16206:	6841      	ldr	r1, [r0, #4]
   16208:	9a02      	ldr	r2, [sp, #8]
   1620a:	428a      	cmp	r2, r1
   1620c:	d02f      	beq.n	1626e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xb4>
   1620e:	e7ff      	b.n	16210 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x56>
   16210:	9805      	ldr	r0, [sp, #20]
   16212:	900a      	str	r0, [sp, #40]	; 0x28
   16214:	2101      	movs	r1, #1
   16216:	910b      	str	r1, [sp, #44]	; 0x2c
   16218:	2102      	movs	r1, #2
   1621a:	910d      	str	r1, [sp, #52]	; 0x34
   1621c:	990d      	ldr	r1, [sp, #52]	; 0x34
   1621e:	2900      	cmp	r1, #0
   16220:	d015      	beq.n	1624e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x94>
   16222:	e7ff      	b.n	16224 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x6a>
   16224:	9805      	ldr	r0, [sp, #20]
   16226:	6800      	ldr	r0, [r0, #0]
   16228:	f000 fc0e 	bl	16a48 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   1622c:	900c      	str	r0, [sp, #48]	; 0x30
   1622e:	9905      	ldr	r1, [sp, #20]
   16230:	680a      	ldr	r2, [r1, #0]
   16232:	9001      	str	r0, [sp, #4]
   16234:	4610      	mov	r0, r2
   16236:	f000 fc07 	bl	16a48 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   1623a:	2101      	movs	r1, #1
   1623c:	f000 f837 	bl	162ae <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   16240:	f000 fbfc 	bl	16a3c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   16244:	9905      	ldr	r1, [sp, #20]
   16246:	6008      	str	r0, [r1, #0]
   16248:	9801      	ldr	r0, [sp, #4]
   1624a:	9009      	str	r0, [sp, #36]	; 0x24
   1624c:	e00c      	b.n	16268 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   1624e:	9805      	ldr	r0, [sp, #20]
   16250:	6840      	ldr	r0, [r0, #4]
   16252:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16256:	f7fe f9fe 	bl	14656 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   1625a:	9905      	ldr	r1, [sp, #20]
   1625c:	6048      	str	r0, [r1, #4]
   1625e:	6808      	ldr	r0, [r1, #0]
   16260:	f000 fbf2 	bl	16a48 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   16264:	9009      	str	r0, [sp, #36]	; 0x24
   16266:	e7ff      	b.n	16268 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   16268:	9809      	ldr	r0, [sp, #36]	; 0x24
   1626a:	9000      	str	r0, [sp, #0]
   1626c:	e002      	b.n	16274 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xba>
   1626e:	2000      	movs	r0, #0
   16270:	9006      	str	r0, [sp, #24]
   16272:	e002      	b.n	1627a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   16274:	9800      	ldr	r0, [sp, #0]
   16276:	9006      	str	r0, [sp, #24]
   16278:	e7ff      	b.n	1627a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   1627a:	9806      	ldr	r0, [sp, #24]
   1627c:	b00e      	add	sp, #56	; 0x38
   1627e:	bd80      	pop	{r7, pc}

00016280 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>:
   16280:	b580      	push	{r7, lr}
   16282:	b084      	sub	sp, #16
   16284:	9002      	str	r0, [sp, #8]
   16286:	9103      	str	r1, [sp, #12]
   16288:	f000 f811 	bl	162ae <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   1628c:	9001      	str	r0, [sp, #4]
   1628e:	e7ff      	b.n	16290 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E+0x10>
   16290:	9801      	ldr	r0, [sp, #4]
   16292:	b004      	add	sp, #16
   16294:	bd80      	pop	{r7, pc}

00016296 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>:
   16296:	b580      	push	{r7, lr}
   16298:	b084      	sub	sp, #16
   1629a:	460a      	mov	r2, r1
   1629c:	9002      	str	r0, [sp, #8]
   1629e:	f8ad 100e 	strh.w	r1, [sp, #14]
   162a2:	9201      	str	r2, [sp, #4]
   162a4:	f001 f961 	bl	1756a <_ZN4core3ptr5write17h147d4643d861e927E>
   162a8:	e7ff      	b.n	162aa <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E+0x14>
   162aa:	b004      	add	sp, #16
   162ac:	bd80      	pop	{r7, pc}

000162ae <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>:
   162ae:	b084      	sub	sp, #16
   162b0:	9001      	str	r0, [sp, #4]
   162b2:	9102      	str	r1, [sp, #8]
   162b4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   162b8:	9003      	str	r0, [sp, #12]
   162ba:	9803      	ldr	r0, [sp, #12]
   162bc:	9000      	str	r0, [sp, #0]
   162be:	e7ff      	b.n	162c0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE+0x12>
   162c0:	9800      	ldr	r0, [sp, #0]
   162c2:	b004      	add	sp, #16
   162c4:	4770      	bx	lr

000162c6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>:
   162c6:	b082      	sub	sp, #8
   162c8:	9001      	str	r0, [sp, #4]
   162ca:	9000      	str	r0, [sp, #0]
   162cc:	e7ff      	b.n	162ce <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE+0x8>
   162ce:	9800      	ldr	r0, [sp, #0]
   162d0:	fab0 f180 	clz	r1, r0
   162d4:	0948      	lsrs	r0, r1, #5
   162d6:	b002      	add	sp, #8
   162d8:	4770      	bx	lr

000162da <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   162da:	b580      	push	{r7, lr}
        (&self).into_iter()
   162dc:	f000 f814 	bl	16308 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>
   162e0:	e7ff      	b.n	162e2 <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E+0x8>
    }
   162e2:	bd80      	pop	{r7, pc}

000162e4 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>:
    fn fill(mut self, color: Option<C>) -> Self {
   162e4:	b5b0      	push	{r4, r5, r7, lr}
   162e6:	b081      	sub	sp, #4
   162e8:	469c      	mov	ip, r3
   162ea:	4696      	mov	lr, r2
   162ec:	f8ad 2000 	strh.w	r2, [sp]
   162f0:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
   162f4:	820a      	strh	r2, [r1, #16]
   162f6:	824b      	strh	r3, [r1, #18]
        self
   162f8:	c91c      	ldmia	r1!, {r2, r3, r4}
   162fa:	c01c      	stmia	r0!, {r2, r3, r4}
   162fc:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
   16300:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
   16304:	b001      	add	sp, #4
   16306:	bdb0      	pop	{r4, r5, r7, pc}

00016308 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   16308:	b570      	push	{r4, r5, r6, lr}
   1630a:	b08e      	sub	sp, #56	; 0x38
   1630c:	910d      	str	r1, [sp, #52]	; 0x34
        RectangleIterator {
            top_left: self.top_left,
   1630e:	680a      	ldr	r2, [r1, #0]
   16310:	684b      	ldr	r3, [r1, #4]
            bottom_right: self.bottom_right,
   16312:	f8d1 c008 	ldr.w	ip, [r1, #8]
   16316:	f8d1 e00c 	ldr.w	lr, [r1, #12]
            style: self.style,
   1631a:	8b0c      	ldrh	r4, [r1, #24]
   1631c:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
   16320:	690c      	ldr	r4, [r1, #16]
   16322:	694d      	ldr	r5, [r1, #20]
   16324:	950b      	str	r5, [sp, #44]	; 0x2c
   16326:	940a      	str	r4, [sp, #40]	; 0x28
   16328:	2400      	movs	r4, #0
            x: self.top_left[0],
   1632a:	9009      	str	r0, [sp, #36]	; 0x24
   1632c:	4608      	mov	r0, r1
   1632e:	9108      	str	r1, [sp, #32]
   16330:	4621      	mov	r1, r4
   16332:	9207      	str	r2, [sp, #28]
   16334:	9306      	str	r3, [sp, #24]
   16336:	f8cd c014 	str.w	ip, [sp, #20]
   1633a:	f8cd e010 	str.w	lr, [sp, #16]
   1633e:	f7fb fb3c 	bl	119ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16342:	9003      	str	r0, [sp, #12]
   16344:	e7ff      	b.n	16346 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x3e>
   16346:	9803      	ldr	r0, [sp, #12]
   16348:	6801      	ldr	r1, [r0, #0]
   1634a:	2201      	movs	r2, #1
            y: self.top_left[1],
   1634c:	9808      	ldr	r0, [sp, #32]
   1634e:	9102      	str	r1, [sp, #8]
   16350:	4611      	mov	r1, r2
   16352:	f7fb fb32 	bl	119ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16356:	9001      	str	r0, [sp, #4]
   16358:	e7ff      	b.n	1635a <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x52>
   1635a:	9801      	ldr	r0, [sp, #4]
   1635c:	6801      	ldr	r1, [r0, #0]
        RectangleIterator {
   1635e:	9a07      	ldr	r2, [sp, #28]
   16360:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16362:	601a      	str	r2, [r3, #0]
   16364:	f8dd c018 	ldr.w	ip, [sp, #24]
   16368:	f8c3 c004 	str.w	ip, [r3, #4]
   1636c:	f8dd e014 	ldr.w	lr, [sp, #20]
   16370:	f8c3 e008 	str.w	lr, [r3, #8]
   16374:	9c04      	ldr	r4, [sp, #16]
   16376:	60dc      	str	r4, [r3, #12]
   16378:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1637c:	841d      	strh	r5, [r3, #32]
   1637e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   16380:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   16382:	61de      	str	r6, [r3, #28]
   16384:	619d      	str	r5, [r3, #24]
   16386:	9d02      	ldr	r5, [sp, #8]
   16388:	611d      	str	r5, [r3, #16]
   1638a:	6159      	str	r1, [r3, #20]
        }
    }
   1638c:	b00e      	add	sp, #56	; 0x38
   1638e:	bd70      	pop	{r4, r5, r6, pc}

00016390 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>:
where
    C: PixelColor,
{
    type Item = Pixel<C>;

    fn next(&mut self) -> Option<Self::Item> {
   16390:	b510      	push	{r4, lr}
   16392:	b0d2      	sub	sp, #328	; 0x148
   16394:	914f      	str	r1, [sp, #316]	; 0x13c
   16396:	2200      	movs	r2, #0
        // If entire object is off the top left of the screen or has no border or fill colour,
        // don't render anything
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   16398:	902a      	str	r0, [sp, #168]	; 0xa8
   1639a:	4608      	mov	r0, r1
   1639c:	9129      	str	r1, [sp, #164]	; 0xa4
   1639e:	4611      	mov	r1, r2
   163a0:	f7fb fb0b 	bl	119ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   163a4:	9028      	str	r0, [sp, #160]	; 0xa0
   163a6:	e03c      	b.n	16422 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x92>
   163a8:	2001      	movs	r0, #1
   163aa:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   163ae:	e009      	b.n	163c4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
   163b0:	2000      	movs	r0, #0
   163b2:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   163b6:	e005      	b.n	163c4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   163b8:	9829      	ldr	r0, [sp, #164]	; 0xa4
   163ba:	301c      	adds	r0, #28
   163bc:	f7fe fa86 	bl	148cc <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   163c0:	9027      	str	r0, [sp, #156]	; 0x9c
   163c2:	e06c      	b.n	1649e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x10e>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   163c4:	f89d 00af 	ldrb.w	r0, [sp, #175]	; 0xaf
   163c8:	07c0      	lsls	r0, r0, #31
   163ca:	2800      	cmp	r0, #0
   163cc:	d172      	bne.n	164b4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x124>
   163ce:	e070      	b.n	164b2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x122>
   163d0:	2001      	movs	r0, #1
   163d2:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   163d6:	e00a      	b.n	163ee <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
   163d8:	2000      	movs	r0, #0
   163da:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   163de:	e006      	b.n	163ee <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   163e0:	9829      	ldr	r0, [sp, #164]	; 0xa4
   163e2:	3008      	adds	r0, #8
   163e4:	2100      	movs	r1, #0
   163e6:	f7fb fae8 	bl	119ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   163ea:	9026      	str	r0, [sp, #152]	; 0x98
   163ec:	e038      	b.n	16460 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xd0>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   163ee:	f89d 00b0 	ldrb.w	r0, [sp, #176]	; 0xb0
   163f2:	07c0      	lsls	r0, r0, #31
   163f4:	2800      	cmp	r0, #0
   163f6:	d1d7      	bne.n	163a8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   163f8:	e7de      	b.n	163b8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x28>
   163fa:	2001      	movs	r0, #1
   163fc:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   16400:	e009      	b.n	16416 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   16402:	2000      	movs	r0, #0
   16404:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   16408:	e005      	b.n	16416 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   1640a:	2101      	movs	r1, #1
   1640c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1640e:	f7fb fad4 	bl	119ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16412:	9025      	str	r0, [sp, #148]	; 0x94
   16414:	e00a      	b.n	1642c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x9c>
   16416:	f89d 00b1 	ldrb.w	r0, [sp, #177]	; 0xb1
   1641a:	07c0      	lsls	r0, r0, #31
   1641c:	2800      	cmp	r0, #0
   1641e:	d1df      	bne.n	163e0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x50>
   16420:	e7da      	b.n	163d8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
   16422:	9828      	ldr	r0, [sp, #160]	; 0xa0
   16424:	6801      	ldr	r1, [r0, #0]
   16426:	2900      	cmp	r1, #0
   16428:	d4e7      	bmi.n	163fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   1642a:	e7ee      	b.n	1640a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x7a>
   1642c:	9825      	ldr	r0, [sp, #148]	; 0x94
   1642e:	6801      	ldr	r1, [r0, #0]
   16430:	2900      	cmp	r1, #0
   16432:	d4e2      	bmi.n	163fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   16434:	e7e5      	b.n	16402 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x72>
   16436:	2001      	movs	r0, #1
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   16438:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   1643c:	e00a      	b.n	16454 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   1643e:	2000      	movs	r0, #0
   16440:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   16444:	e006      	b.n	16454 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   16446:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16448:	3008      	adds	r0, #8
   1644a:	2101      	movs	r1, #1
   1644c:	f7fb fab5 	bl	119ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16450:	9024      	str	r0, [sp, #144]	; 0x90
   16452:	e00a      	b.n	1646a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xda>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   16454:	f89d 00b2 	ldrb.w	r0, [sp, #178]	; 0xb2
   16458:	07c0      	lsls	r0, r0, #31
   1645a:	2800      	cmp	r0, #0
   1645c:	d1b8      	bne.n	163d0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40>
   1645e:	e7bb      	b.n	163d8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   16460:	9826      	ldr	r0, [sp, #152]	; 0x98
   16462:	6801      	ldr	r1, [r0, #0]
   16464:	2900      	cmp	r1, #0
   16466:	d4e6      	bmi.n	16436 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   16468:	e7ed      	b.n	16446 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xb6>
   1646a:	9824      	ldr	r0, [sp, #144]	; 0x90
   1646c:	6801      	ldr	r1, [r0, #0]
   1646e:	2900      	cmp	r1, #0
   16470:	d4e1      	bmi.n	16436 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   16472:	e7e4      	b.n	1643e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xae>
   16474:	2001      	movs	r0, #1
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   16476:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   1647a:	e009      	b.n	16490 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   1647c:	2000      	movs	r0, #0
   1647e:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   16482:	e005      	b.n	16490 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   16484:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16486:	3018      	adds	r0, #24
   16488:	f7fe fa20 	bl	148cc <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   1648c:	9023      	str	r0, [sp, #140]	; 0x8c
   1648e:	e00b      	b.n	164a8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x118>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   16490:	f89d 00b3 	ldrb.w	r0, [sp, #179]	; 0xb3
   16494:	07c0      	lsls	r0, r0, #31
   16496:	2800      	cmp	r0, #0
   16498:	f47f af86 	bne.w	163a8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   1649c:	e788      	b.n	163b0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20>
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   1649e:	9827      	ldr	r0, [sp, #156]	; 0x9c
   164a0:	07c1      	lsls	r1, r0, #31
   164a2:	2900      	cmp	r1, #0
   164a4:	d1ee      	bne.n	16484 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xf4>
   164a6:	e7e9      	b.n	1647c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
   164a8:	9823      	ldr	r0, [sp, #140]	; 0x8c
   164aa:	07c1      	lsls	r1, r0, #31
   164ac:	2900      	cmp	r1, #0
   164ae:	d1e1      	bne.n	16474 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xe4>
   164b0:	e7e4      	b.n	1647c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
        {
            return None;
        }

        let pixel = loop {
   164b2:	e012      	b.n	164da <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
   164b4:	2000      	movs	r0, #0
            return None;
   164b6:	992a      	ldr	r1, [sp, #168]	; 0xa8
   164b8:	6008      	str	r0, [r1, #0]
   164ba:	e7ff      	b.n	164bc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                break out;
            }
        };

        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
    }
   164bc:	b052      	add	sp, #328	; 0x148
   164be:	bd10      	pop	{r4, pc}
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   164c0:	982d      	ldr	r0, [sp, #180]	; 0xb4
   164c2:	992e      	ldr	r1, [sp, #184]	; 0xb8
   164c4:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   164c6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   164c8:	934d      	str	r3, [sp, #308]	; 0x134
   164ca:	924c      	str	r2, [sp, #304]	; 0x130
   164cc:	914b      	str	r1, [sp, #300]	; 0x12c
   164ce:	904a      	str	r0, [sp, #296]	; 0x128
   164d0:	a94a      	add	r1, sp, #296	; 0x128
   164d2:	982a      	ldr	r0, [sp, #168]	; 0xa8
   164d4:	f7fe f90c 	bl	146f0 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>
   164d8:	e201      	b.n	168de <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x54e>
   164da:	2000      	movs	r0, #0
            let mut out = None;
   164dc:	9031      	str	r0, [sp, #196]	; 0xc4
            if self.y > self.bottom_right[1] {
   164de:	9829      	ldr	r0, [sp, #164]	; 0xa4
   164e0:	6941      	ldr	r1, [r0, #20]
   164e2:	3008      	adds	r0, #8
   164e4:	2201      	movs	r2, #1
   164e6:	9122      	str	r1, [sp, #136]	; 0x88
   164e8:	4611      	mov	r1, r2
   164ea:	f7fb fa66 	bl	119ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   164ee:	9021      	str	r0, [sp, #132]	; 0x84
   164f0:	e7ff      	b.n	164f2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x162>
   164f2:	9821      	ldr	r0, [sp, #132]	; 0x84
   164f4:	6801      	ldr	r1, [r0, #0]
   164f6:	9a22      	ldr	r2, [sp, #136]	; 0x88
   164f8:	428a      	cmp	r2, r1
   164fa:	dc13      	bgt.n	16524 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x194>
   164fc:	e7ff      	b.n	164fe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x16e>
            let border_width = self.style.stroke_width as i32;
   164fe:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16500:	f890 1020 	ldrb.w	r1, [r0, #32]
   16504:	460a      	mov	r2, r1
   16506:	9150      	str	r1, [sp, #320]	; 0x140
            let tl = self.top_left;
   16508:	6801      	ldr	r1, [r0, #0]
   1650a:	6843      	ldr	r3, [r0, #4]
   1650c:	9135      	str	r1, [sp, #212]	; 0xd4
   1650e:	9336      	str	r3, [sp, #216]	; 0xd8
            let br = self.bottom_right;
   16510:	6881      	ldr	r1, [r0, #8]
   16512:	68c3      	ldr	r3, [r0, #12]
   16514:	9137      	str	r1, [sp, #220]	; 0xdc
   16516:	9338      	str	r3, [sp, #224]	; 0xe0
            if self.x >= 0 && self.y >= 0 {
   16518:	6901      	ldr	r1, [r0, #16]
   1651a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1651e:	9220      	str	r2, [sp, #128]	; 0x80
   16520:	dc0b      	bgt.n	1653a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1aa>
   16522:	e006      	b.n	16532 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   16524:	2000      	movs	r0, #0
                break None;
   16526:	902d      	str	r0, [sp, #180]	; 0xb4
   16528:	e7ca      	b.n	164c0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
   1652a:	2001      	movs	r0, #1
            if self.x >= 0 && self.y >= 0 {
   1652c:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   16530:	e009      	b.n	16546 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   16532:	2000      	movs	r0, #0
   16534:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   16538:	e005      	b.n	16546 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   1653a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1653c:	6941      	ldr	r1, [r0, #20]
   1653e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   16542:	dcf2      	bgt.n	1652a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x19a>
   16544:	e7f5      	b.n	16532 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   16546:	f89d 00e7 	ldrb.w	r0, [sp, #231]	; 0xe7
   1654a:	07c0      	lsls	r0, r0, #31
   1654c:	2800      	cmp	r0, #0
   1654e:	f000 8182 	beq.w	16856 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
   16552:	e7ff      	b.n	16554 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1c4>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   16554:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16556:	6941      	ldr	r1, [r0, #20]
   16558:	a835      	add	r0, sp, #212	; 0xd4
   1655a:	2201      	movs	r2, #1
   1655c:	911f      	str	r1, [sp, #124]	; 0x7c
   1655e:	4611      	mov	r1, r2
   16560:	f7fb fa2b 	bl	119ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16564:	901e      	str	r0, [sp, #120]	; 0x78
   16566:	e074      	b.n	16652 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2c2>
   16568:	2001      	movs	r0, #1
                if (
   1656a:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   1656e:	e009      	b.n	16584 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
   16570:	2000      	movs	r0, #0
   16572:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   16576:	e005      	b.n	16584 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
                ) && self.style.stroke_color.is_some()
   16578:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1657a:	301c      	adds	r0, #28
   1657c:	f7fe f9d6 	bl	1492c <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   16580:	901d      	str	r0, [sp, #116]	; 0x74
   16582:	e104      	b.n	1678e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3fe>
                if (
   16584:	f89d 00e8 	ldrb.w	r0, [sp, #232]	; 0xe8
   16588:	07c0      	lsls	r0, r0, #31
   1658a:	2800      	cmp	r0, #0
   1658c:	f040 810a 	bne.w	167a4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x414>
   16590:	e103      	b.n	1679a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40a>
   16592:	2001      	movs	r0, #1
   16594:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   16598:	e00d      	b.n	165b6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
   1659a:	2000      	movs	r0, #0
   1659c:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   165a0:	e009      	b.n	165b6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   165a2:	9829      	ldr	r0, [sp, #164]	; 0xa4
   165a4:	6901      	ldr	r1, [r0, #16]
   165a6:	a837      	add	r0, sp, #220	; 0xdc
   165a8:	2200      	movs	r2, #0
   165aa:	911c      	str	r1, [sp, #112]	; 0x70
   165ac:	4611      	mov	r1, r2
   165ae:	f7fb fa04 	bl	119ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   165b2:	901b      	str	r0, [sp, #108]	; 0x6c
   165b4:	e0d7      	b.n	16766 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3d6>
                if (
   165b6:	f89d 00e9 	ldrb.w	r0, [sp, #233]	; 0xe9
   165ba:	07c0      	lsls	r0, r0, #31
   165bc:	2800      	cmp	r0, #0
   165be:	d1db      	bne.n	16578 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e8>
   165c0:	e7d6      	b.n	16570 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
   165c2:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   165c4:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   165c8:	e00d      	b.n	165e6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
   165ca:	2000      	movs	r0, #0
   165cc:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   165d0:	e009      	b.n	165e6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   165d2:	9829      	ldr	r0, [sp, #164]	; 0xa4
   165d4:	6901      	ldr	r1, [r0, #16]
   165d6:	a835      	add	r0, sp, #212	; 0xd4
   165d8:	2200      	movs	r2, #0
   165da:	911a      	str	r1, [sp, #104]	; 0x68
   165dc:	4611      	mov	r1, r2
   165de:	f7fb f9ec 	bl	119ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   165e2:	9019      	str	r0, [sp, #100]	; 0x64
   165e4:	e090      	b.n	16708 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x378>
                if (
   165e6:	f89d 00ea 	ldrb.w	r0, [sp, #234]	; 0xea
   165ea:	07c0      	lsls	r0, r0, #31
   165ec:	2800      	cmp	r0, #0
   165ee:	d1d0      	bne.n	16592 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   165f0:	e7d7      	b.n	165a2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x212>
   165f2:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   165f4:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   165f8:	e00d      	b.n	16616 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
   165fa:	2000      	movs	r0, #0
   165fc:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   16600:	e009      	b.n	16616 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   16602:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16604:	6941      	ldr	r1, [r0, #20]
   16606:	a837      	add	r0, sp, #220	; 0xdc
   16608:	2201      	movs	r2, #1
   1660a:	9118      	str	r1, [sp, #96]	; 0x60
   1660c:	4611      	mov	r1, r2
   1660e:	f7fb f9d4 	bl	119ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16612:	9017      	str	r0, [sp, #92]	; 0x5c
   16614:	e04b      	b.n	166ae <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x31e>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   16616:	f89d 00eb 	ldrb.w	r0, [sp, #235]	; 0xeb
   1661a:	07c0      	lsls	r0, r0, #31
   1661c:	2800      	cmp	r0, #0
   1661e:	d1d0      	bne.n	165c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   16620:	e7d7      	b.n	165d2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x242>
   16622:	2001      	movs	r0, #1
   16624:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   16628:	e00d      	b.n	16646 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   1662a:	2000      	movs	r0, #0
   1662c:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   16630:	e009      	b.n	16646 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   16632:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16634:	6941      	ldr	r1, [r0, #20]
   16636:	a835      	add	r0, sp, #212	; 0xd4
   16638:	2201      	movs	r2, #1
   1663a:	9116      	str	r1, [sp, #88]	; 0x58
   1663c:	4611      	mov	r1, r2
   1663e:	f7fb f9bc 	bl	119ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16642:	9015      	str	r0, [sp, #84]	; 0x54
   16644:	e00b      	b.n	1665e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ce>
   16646:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
   1664a:	07c0      	lsls	r0, r0, #31
   1664c:	2800      	cmp	r0, #0
   1664e:	d1d0      	bne.n	165f2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   16650:	e7d7      	b.n	16602 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x272>
   16652:	981e      	ldr	r0, [sp, #120]	; 0x78
   16654:	6801      	ldr	r1, [r0, #0]
   16656:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   16658:	428a      	cmp	r2, r1
   1665a:	daea      	bge.n	16632 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2a2>
   1665c:	e7e5      	b.n	1662a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   1665e:	9815      	ldr	r0, [sp, #84]	; 0x54
   16660:	6801      	ldr	r1, [r0, #0]
   16662:	9a20      	ldr	r2, [sp, #128]	; 0x80
   16664:	188b      	adds	r3, r1, r2
   16666:	469c      	mov	ip, r3
   16668:	428b      	cmp	r3, r1
   1666a:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
   1666e:	f180 8137 	bvs.w	168e0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x550>
   16672:	e7ff      	b.n	16674 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2e4>
   16674:	9816      	ldr	r0, [sp, #88]	; 0x58
   16676:	9914      	ldr	r1, [sp, #80]	; 0x50
   16678:	4288      	cmp	r0, r1
   1667a:	dbd2      	blt.n	16622 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x292>
   1667c:	e7d5      	b.n	1662a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   1667e:	2001      	movs	r0, #1
                || (self.y <= br[1] && self.y > br[1] - border_width)
   16680:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   16684:	e00d      	b.n	166a2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   16686:	2000      	movs	r0, #0
   16688:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   1668c:	e009      	b.n	166a2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   1668e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16690:	6941      	ldr	r1, [r0, #20]
   16692:	a837      	add	r0, sp, #220	; 0xdc
   16694:	2201      	movs	r2, #1
   16696:	9113      	str	r1, [sp, #76]	; 0x4c
   16698:	4611      	mov	r1, r2
   1669a:	f7fb f98e 	bl	119ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1669e:	9012      	str	r0, [sp, #72]	; 0x48
   166a0:	e00b      	b.n	166ba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x32a>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   166a2:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
   166a6:	07c0      	lsls	r0, r0, #31
   166a8:	2800      	cmp	r0, #0
   166aa:	d1a2      	bne.n	165f2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   166ac:	e7a5      	b.n	165fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x26a>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   166ae:	9817      	ldr	r0, [sp, #92]	; 0x5c
   166b0:	6801      	ldr	r1, [r0, #0]
   166b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   166b4:	428a      	cmp	r2, r1
   166b6:	ddea      	ble.n	1668e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2fe>
   166b8:	e7e5      	b.n	16686 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   166ba:	9812      	ldr	r0, [sp, #72]	; 0x48
   166bc:	6801      	ldr	r1, [r0, #0]
   166be:	9a20      	ldr	r2, [sp, #128]	; 0x80
   166c0:	1a8b      	subs	r3, r1, r2
   166c2:	4291      	cmp	r1, r2
   166c4:	9311      	str	r3, [sp, #68]	; 0x44
   166c6:	f180 8117 	bvs.w	168f8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x568>
   166ca:	e7ff      	b.n	166cc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x33c>
   166cc:	9813      	ldr	r0, [sp, #76]	; 0x4c
   166ce:	9911      	ldr	r1, [sp, #68]	; 0x44
   166d0:	4288      	cmp	r0, r1
   166d2:	dcd4      	bgt.n	1667e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ee>
   166d4:	e7d7      	b.n	16686 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   166d6:	2001      	movs	r0, #1
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   166d8:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   166dc:	e00d      	b.n	166fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   166de:	2000      	movs	r0, #0
   166e0:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   166e4:	e009      	b.n	166fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   166e6:	9829      	ldr	r0, [sp, #164]	; 0xa4
   166e8:	6901      	ldr	r1, [r0, #16]
   166ea:	a835      	add	r0, sp, #212	; 0xd4
   166ec:	2200      	movs	r2, #0
   166ee:	9110      	str	r1, [sp, #64]	; 0x40
   166f0:	4611      	mov	r1, r2
   166f2:	f7fb f962 	bl	119ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   166f6:	900f      	str	r0, [sp, #60]	; 0x3c
   166f8:	e00c      	b.n	16714 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x384>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   166fa:	f89d 00ee 	ldrb.w	r0, [sp, #238]	; 0xee
   166fe:	07c0      	lsls	r0, r0, #31
   16700:	2800      	cmp	r0, #0
   16702:	f47f af5e 	bne.w	165c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   16706:	e760      	b.n	165ca <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x23a>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   16708:	9819      	ldr	r0, [sp, #100]	; 0x64
   1670a:	6801      	ldr	r1, [r0, #0]
   1670c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1670e:	428a      	cmp	r2, r1
   16710:	dae9      	bge.n	166e6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x356>
   16712:	e7e4      	b.n	166de <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   16714:	980f      	ldr	r0, [sp, #60]	; 0x3c
   16716:	6801      	ldr	r1, [r0, #0]
   16718:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1671a:	188b      	adds	r3, r1, r2
   1671c:	469c      	mov	ip, r3
   1671e:	428b      	cmp	r3, r1
   16720:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   16724:	f180 80f4 	bvs.w	16910 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x580>
   16728:	e7ff      	b.n	1672a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x39a>
   1672a:	9810      	ldr	r0, [sp, #64]	; 0x40
   1672c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1672e:	4288      	cmp	r0, r1
   16730:	dbd1      	blt.n	166d6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x346>
   16732:	e7d4      	b.n	166de <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   16734:	2001      	movs	r0, #1
                || (self.x <= br[0] && self.x > br[0] - border_width)
   16736:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   1673a:	e00d      	b.n	16758 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   1673c:	2000      	movs	r0, #0
   1673e:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   16742:	e009      	b.n	16758 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   16744:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16746:	6901      	ldr	r1, [r0, #16]
   16748:	a837      	add	r0, sp, #220	; 0xdc
   1674a:	2200      	movs	r2, #0
   1674c:	910d      	str	r1, [sp, #52]	; 0x34
   1674e:	4611      	mov	r1, r2
   16750:	f7fb f933 	bl	119ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16754:	900c      	str	r0, [sp, #48]	; 0x30
   16756:	e00c      	b.n	16772 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3e2>
                if (
   16758:	f89d 00ef 	ldrb.w	r0, [sp, #239]	; 0xef
   1675c:	07c0      	lsls	r0, r0, #31
   1675e:	2800      	cmp	r0, #0
   16760:	f47f af17 	bne.w	16592 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   16764:	e719      	b.n	1659a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20a>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   16766:	981b      	ldr	r0, [sp, #108]	; 0x6c
   16768:	6801      	ldr	r1, [r0, #0]
   1676a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1676c:	428a      	cmp	r2, r1
   1676e:	dde9      	ble.n	16744 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3b4>
   16770:	e7e4      	b.n	1673c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
   16772:	980c      	ldr	r0, [sp, #48]	; 0x30
   16774:	6801      	ldr	r1, [r0, #0]
   16776:	9a20      	ldr	r2, [sp, #128]	; 0x80
   16778:	1a8b      	subs	r3, r1, r2
   1677a:	4291      	cmp	r1, r2
   1677c:	930b      	str	r3, [sp, #44]	; 0x2c
   1677e:	f180 80d3 	bvs.w	16928 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x598>
   16782:	e7ff      	b.n	16784 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3f4>
   16784:	980d      	ldr	r0, [sp, #52]	; 0x34
   16786:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16788:	4288      	cmp	r0, r1
   1678a:	dcd3      	bgt.n	16734 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3a4>
   1678c:	e7d6      	b.n	1673c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
                if (
   1678e:	981d      	ldr	r0, [sp, #116]	; 0x74
   16790:	07c1      	lsls	r1, r0, #31
   16792:	2900      	cmp	r1, #0
   16794:	f47f aee8 	bne.w	16568 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1d8>
   16798:	e6ea      	b.n	16570 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
                else if let Some(fill) = self.style.fill_color {
   1679a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1679c:	8b01      	ldrh	r1, [r0, #24]
   1679e:	2901      	cmp	r1, #1
   167a0:	d03b      	beq.n	1681a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48a>
   167a2:	e057      	b.n	16854 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                        self.x,
   167a4:	9829      	ldr	r0, [sp, #164]	; 0xa4
   167a6:	6901      	ldr	r1, [r0, #16]
                        self.y,
   167a8:	6942      	ldr	r2, [r0, #20]
                        self.style.stroke_color.expect("Expected stroke"),
   167aa:	8bc3      	ldrh	r3, [r0, #30]
   167ac:	8b80      	ldrh	r0, [r0, #28]
   167ae:	f640 6c54 	movw	ip, #3668	; 0xe54
   167b2:	f2c0 0c02 	movt	ip, #2
   167b6:	46ee      	mov	lr, sp
   167b8:	f8ce c000 	str.w	ip, [lr]
   167bc:	f640 6c44 	movw	ip, #3652	; 0xe44
   167c0:	f2c0 0c02 	movt	ip, #2
   167c4:	f04f 0e0f 	mov.w	lr, #15
   167c8:	910a      	str	r1, [sp, #40]	; 0x28
   167ca:	4619      	mov	r1, r3
   167cc:	9209      	str	r2, [sp, #36]	; 0x24
   167ce:	4662      	mov	r2, ip
   167d0:	4673      	mov	r3, lr
   167d2:	f7fd ffff 	bl	147d4 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>
   167d6:	9008      	str	r0, [sp, #32]
   167d8:	e7ff      	b.n	167da <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x44a>
                    out = Some((
   167da:	980a      	ldr	r0, [sp, #40]	; 0x28
   167dc:	9040      	str	r0, [sp, #256]	; 0x100
   167de:	9909      	ldr	r1, [sp, #36]	; 0x24
   167e0:	9141      	str	r1, [sp, #260]	; 0x104
   167e2:	9a08      	ldr	r2, [sp, #32]
   167e4:	f8ad 2108 	strh.w	r2, [sp, #264]	; 0x108
   167e8:	9b40      	ldr	r3, [sp, #256]	; 0x100
   167ea:	f8dd c104 	ldr.w	ip, [sp, #260]	; 0x104
   167ee:	f8dd e108 	ldr.w	lr, [sp, #264]	; 0x108
   167f2:	f8cd e0fc 	str.w	lr, [sp, #252]	; 0xfc
   167f6:	f8cd c0f8 	str.w	ip, [sp, #248]	; 0xf8
   167fa:	933d      	str	r3, [sp, #244]	; 0xf4
   167fc:	2301      	movs	r3, #1
   167fe:	933c      	str	r3, [sp, #240]	; 0xf0
   16800:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   16802:	f8dd c0f4 	ldr.w	ip, [sp, #244]	; 0xf4
   16806:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   1680a:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
   1680c:	9434      	str	r4, [sp, #208]	; 0xd0
   1680e:	f8cd e0cc 	str.w	lr, [sp, #204]	; 0xcc
   16812:	f8cd c0c8 	str.w	ip, [sp, #200]	; 0xc8
   16816:	9331      	str	r3, [sp, #196]	; 0xc4
                if (
   16818:	e01c      	b.n	16854 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                else if let Some(fill) = self.style.fill_color {
   1681a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1681c:	8b41      	ldrh	r1, [r0, #26]
   1681e:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
                    out = Some((self.x, self.y, fill));
   16822:	6902      	ldr	r2, [r0, #16]
   16824:	6943      	ldr	r3, [r0, #20]
   16826:	9247      	str	r2, [sp, #284]	; 0x11c
   16828:	9348      	str	r3, [sp, #288]	; 0x120
   1682a:	f8ad 1124 	strh.w	r1, [sp, #292]	; 0x124
   1682e:	9947      	ldr	r1, [sp, #284]	; 0x11c
   16830:	9a48      	ldr	r2, [sp, #288]	; 0x120
   16832:	9b49      	ldr	r3, [sp, #292]	; 0x124
   16834:	9346      	str	r3, [sp, #280]	; 0x118
   16836:	9245      	str	r2, [sp, #276]	; 0x114
   16838:	9144      	str	r1, [sp, #272]	; 0x110
   1683a:	2101      	movs	r1, #1
   1683c:	9143      	str	r1, [sp, #268]	; 0x10c
   1683e:	9943      	ldr	r1, [sp, #268]	; 0x10c
   16840:	9a44      	ldr	r2, [sp, #272]	; 0x110
   16842:	9b45      	ldr	r3, [sp, #276]	; 0x114
   16844:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   16848:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
   1684c:	9333      	str	r3, [sp, #204]	; 0xcc
   1684e:	9232      	str	r2, [sp, #200]	; 0xc8
   16850:	9131      	str	r1, [sp, #196]	; 0xc4
                else if let Some(fill) = self.style.fill_color {
   16852:	e7ff      	b.n	16854 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
            if self.x >= 0 && self.y >= 0 {
   16854:	e7ff      	b.n	16856 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
            self.x += 1;
   16856:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16858:	6901      	ldr	r1, [r0, #16]
   1685a:	1c4a      	adds	r2, r1, #1
   1685c:	4613      	mov	r3, r2
   1685e:	428a      	cmp	r2, r1
   16860:	9307      	str	r3, [sp, #28]
   16862:	d66d      	bvs.n	16940 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5b0>
   16864:	e7ff      	b.n	16866 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4d6>
   16866:	9807      	ldr	r0, [sp, #28]
   16868:	9929      	ldr	r1, [sp, #164]	; 0xa4
   1686a:	6108      	str	r0, [r1, #16]
            if self.x > self.bottom_right[0] {
   1686c:	690a      	ldr	r2, [r1, #16]
   1686e:	f101 0008 	add.w	r0, r1, #8
   16872:	2100      	movs	r1, #0
   16874:	9206      	str	r2, [sp, #24]
   16876:	f7fb f8a0 	bl	119ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1687a:	9005      	str	r0, [sp, #20]
   1687c:	e7ff      	b.n	1687e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4ee>
   1687e:	9805      	ldr	r0, [sp, #20]
   16880:	6801      	ldr	r1, [r0, #0]
   16882:	9a06      	ldr	r2, [sp, #24]
   16884:	428a      	cmp	r2, r1
   16886:	dd16      	ble.n	168b6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   16888:	e7ff      	b.n	1688a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4fa>
   1688a:	2100      	movs	r1, #0
                self.x = self.top_left[0];
   1688c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1688e:	f7fb f894 	bl	119ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16892:	9004      	str	r0, [sp, #16]
   16894:	e7ff      	b.n	16896 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x506>
   16896:	9804      	ldr	r0, [sp, #16]
   16898:	6801      	ldr	r1, [r0, #0]
   1689a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   1689c:	6111      	str	r1, [r2, #16]
                self.y += 1;
   1689e:	6951      	ldr	r1, [r2, #20]
   168a0:	1c4b      	adds	r3, r1, #1
   168a2:	469c      	mov	ip, r3
   168a4:	428b      	cmp	r3, r1
   168a6:	f8cd c00c 	str.w	ip, [sp, #12]
   168aa:	d655      	bvs.n	16958 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5c8>
   168ac:	e7ff      	b.n	168ae <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x51e>
   168ae:	9803      	ldr	r0, [sp, #12]
   168b0:	9929      	ldr	r1, [sp, #164]	; 0xa4
   168b2:	6148      	str	r0, [r1, #20]
            if self.x > self.bottom_right[0] {
   168b4:	e7ff      	b.n	168b6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   168b6:	a831      	add	r0, sp, #196	; 0xc4
            if out.is_some() {
   168b8:	f7fe f826 	bl	14908 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>
   168bc:	9002      	str	r0, [sp, #8]
   168be:	e7ff      	b.n	168c0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x530>
   168c0:	9802      	ldr	r0, [sp, #8]
   168c2:	07c1      	lsls	r1, r0, #31
   168c4:	2900      	cmp	r1, #0
   168c6:	d101      	bne.n	168cc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53c>
   168c8:	e7ff      	b.n	168ca <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53a>
        let pixel = loop {
   168ca:	e606      	b.n	164da <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
                break out;
   168cc:	9831      	ldr	r0, [sp, #196]	; 0xc4
   168ce:	9932      	ldr	r1, [sp, #200]	; 0xc8
   168d0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
   168d2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   168d4:	9330      	str	r3, [sp, #192]	; 0xc0
   168d6:	922f      	str	r2, [sp, #188]	; 0xbc
   168d8:	912e      	str	r1, [sp, #184]	; 0xb8
   168da:	902d      	str	r0, [sp, #180]	; 0xb4
   168dc:	e5f0      	b.n	164c0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
    }
   168de:	e5ed      	b.n	164bc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   168e0:	f640 50d0 	movw	r0, #3536	; 0xdd0
   168e4:	f2c0 0002 	movt	r0, #2
   168e8:	f640 52bc 	movw	r2, #3516	; 0xdbc
   168ec:	f2c0 0202 	movt	r2, #2
   168f0:	211c      	movs	r1, #28
   168f2:	f001 f871 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   168f6:	defe      	udf	#254	; 0xfe
                || (self.y <= br[1] && self.y > br[1] - border_width)
   168f8:	f640 6000 	movw	r0, #3584	; 0xe00
   168fc:	f2c0 0002 	movt	r0, #2
   16900:	f640 52ec 	movw	r2, #3564	; 0xdec
   16904:	f2c0 0202 	movt	r2, #2
   16908:	2121      	movs	r1, #33	; 0x21
   1690a:	f001 f865 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1690e:	defe      	udf	#254	; 0xfe
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   16910:	f640 50d0 	movw	r0, #3536	; 0xdd0
   16914:	f2c0 0002 	movt	r0, #2
   16918:	f640 6224 	movw	r2, #3620	; 0xe24
   1691c:	f2c0 0202 	movt	r2, #2
   16920:	211c      	movs	r1, #28
   16922:	f001 f859 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16926:	defe      	udf	#254	; 0xfe
                || (self.x <= br[0] && self.x > br[0] - border_width)
   16928:	f640 6000 	movw	r0, #3584	; 0xe00
   1692c:	f2c0 0002 	movt	r0, #2
   16930:	f640 6234 	movw	r2, #3636	; 0xe34
   16934:	f2c0 0202 	movt	r2, #2
   16938:	2121      	movs	r1, #33	; 0x21
   1693a:	f001 f84d 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1693e:	defe      	udf	#254	; 0xfe
            self.x += 1;
   16940:	f640 50d0 	movw	r0, #3536	; 0xdd0
   16944:	f2c0 0002 	movt	r0, #2
   16948:	f640 6264 	movw	r2, #3684	; 0xe64
   1694c:	f2c0 0202 	movt	r2, #2
   16950:	211c      	movs	r1, #28
   16952:	f001 f841 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16956:	defe      	udf	#254	; 0xfe
                self.y += 1;
   16958:	f640 50d0 	movw	r0, #3536	; 0xdd0
   1695c:	f2c0 0002 	movt	r0, #2
   16960:	f640 6274 	movw	r2, #3700	; 0xe74
   16964:	f2c0 0202 	movt	r2, #2
   16968:	211c      	movs	r1, #28
   1696a:	f001 f835 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1696e:	defe      	udf	#254	; 0xfe

00016970 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>:
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   16970:	b580      	push	{r7, lr}
   16972:	b08a      	sub	sp, #40	; 0x28
   16974:	680a      	ldr	r2, [r1, #0]
   16976:	9207      	str	r2, [sp, #28]
   16978:	684b      	ldr	r3, [r1, #4]
   1697a:	9308      	str	r3, [sp, #32]
   1697c:	8909      	ldrh	r1, [r1, #8]
   1697e:	468c      	mov	ip, r1
   16980:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
   16984:	9005      	str	r0, [sp, #20]
   16986:	4610      	mov	r0, r2
   16988:	4619      	mov	r1, r3
   1698a:	f8cd c010 	str.w	ip, [sp, #16]
   1698e:	f7fb f80b 	bl	119a8 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
   16992:	9003      	str	r0, [sp, #12]
   16994:	9102      	str	r1, [sp, #8]
   16996:	e7ff      	b.n	16998 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x28>
   16998:	9803      	ldr	r0, [sp, #12]
   1699a:	9902      	ldr	r1, [sp, #8]
   1699c:	f7fb f856 	bl	11a4c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>
   169a0:	9001      	str	r0, [sp, #4]
   169a2:	9100      	str	r1, [sp, #0]
   169a4:	e7ff      	b.n	169a6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x36>
   169a6:	9801      	ldr	r0, [sp, #4]
   169a8:	9905      	ldr	r1, [sp, #20]
   169aa:	6008      	str	r0, [r1, #0]
   169ac:	9a00      	ldr	r2, [sp, #0]
   169ae:	604a      	str	r2, [r1, #4]
   169b0:	9b04      	ldr	r3, [sp, #16]
   169b2:	810b      	strh	r3, [r1, #8]
   169b4:	b00a      	add	sp, #40	; 0x28
   169b6:	bd80      	pop	{r7, pc}

000169b8 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>:
    pub fn new(top_left: Coord, bottom_right: Coord) -> Self {
   169b8:	b510      	push	{r4, lr}
   169ba:	b08c      	sub	sp, #48	; 0x30
   169bc:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   169c0:	9108      	str	r1, [sp, #32]
   169c2:	9209      	str	r2, [sp, #36]	; 0x24
   169c4:	930a      	str	r3, [sp, #40]	; 0x28
   169c6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   169ca:	f10d 0e14 	add.w	lr, sp, #20
            style: Style::default(),
   169ce:	9004      	str	r0, [sp, #16]
   169d0:	4670      	mov	r0, lr
   169d2:	9303      	str	r3, [sp, #12]
   169d4:	9202      	str	r2, [sp, #8]
   169d6:	9101      	str	r1, [sp, #4]
   169d8:	f8cd c000 	str.w	ip, [sp]
   169dc:	f000 f818 	bl	16a10 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
   169e0:	e7ff      	b.n	169e2 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E+0x2a>
        Rectangle {
   169e2:	9801      	ldr	r0, [sp, #4]
   169e4:	9904      	ldr	r1, [sp, #16]
   169e6:	6008      	str	r0, [r1, #0]
   169e8:	9a02      	ldr	r2, [sp, #8]
   169ea:	604a      	str	r2, [r1, #4]
   169ec:	9b03      	ldr	r3, [sp, #12]
   169ee:	608b      	str	r3, [r1, #8]
   169f0:	f8dd c000 	ldr.w	ip, [sp]
   169f4:	f8c1 c00c 	str.w	ip, [r1, #12]
   169f8:	f8bd e01c 	ldrh.w	lr, [sp, #28]
   169fc:	f8a1 e018 	strh.w	lr, [r1, #24]
   16a00:	f8dd e014 	ldr.w	lr, [sp, #20]
   16a04:	9c06      	ldr	r4, [sp, #24]
   16a06:	614c      	str	r4, [r1, #20]
   16a08:	f8c1 e010 	str.w	lr, [r1, #16]
    }
   16a0c:	b00c      	add	sp, #48	; 0x30
   16a0e:	bd10      	pop	{r4, pc}

00016a10 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>:

impl<P> Default for Style<P>
where
    P: PixelColor,
{
    fn default() -> Self {
   16a10:	b082      	sub	sp, #8
   16a12:	2100      	movs	r1, #0
        Self {
            fill_color: None,
   16a14:	f8ad 1000 	strh.w	r1, [sp]
            stroke_color: None,
   16a18:	f8ad 1004 	strh.w	r1, [sp, #4]
        Self {
   16a1c:	f8bd 1000 	ldrh.w	r1, [sp]
   16a20:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   16a24:	8001      	strh	r1, [r0, #0]
   16a26:	8042      	strh	r2, [r0, #2]
   16a28:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   16a2c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   16a30:	8081      	strh	r1, [r0, #4]
   16a32:	80c2      	strh	r2, [r0, #6]
   16a34:	2101      	movs	r1, #1
   16a36:	7201      	strb	r1, [r0, #8]
            stroke_width: 1,
        }
    }
   16a38:	b002      	add	sp, #8
   16a3a:	4770      	bx	lr

00016a3c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>:
   16a3c:	b082      	sub	sp, #8
   16a3e:	9001      	str	r0, [sp, #4]
   16a40:	9000      	str	r0, [sp, #0]
   16a42:	9800      	ldr	r0, [sp, #0]
   16a44:	b002      	add	sp, #8
   16a46:	4770      	bx	lr

00016a48 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>:
   16a48:	b081      	sub	sp, #4
   16a4a:	9000      	str	r0, [sp, #0]
   16a4c:	b001      	add	sp, #4
   16a4e:	4770      	bx	lr

00016a50 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>:
#[derive(ToPrimitive)]
   16a50:	b084      	sub	sp, #16
   16a52:	460a      	mov	r2, r1
   16a54:	4603      	mov	r3, r0
   16a56:	9103      	str	r1, [sp, #12]
   16a58:	9002      	str	r0, [sp, #8]
   16a5a:	b004      	add	sp, #16
   16a5c:	4770      	bx	lr

00016a5e <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>:
   16a5e:	b510      	push	{r4, lr}
   16a60:	b088      	sub	sp, #32
   16a62:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   16a66:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
   16a6a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   16a6c:	9102      	str	r1, [sp, #8]
   16a6e:	9203      	str	r2, [sp, #12]
   16a70:	9304      	str	r3, [sp, #16]
   16a72:	9405      	str	r4, [sp, #20]
   16a74:	f8cd e018 	str.w	lr, [sp, #24]
   16a78:	f8cd c01c 	str.w	ip, [sp, #28]
   16a7c:	f8cd e000 	str.w	lr, [sp]
   16a80:	f8cd c004 	str.w	ip, [sp, #4]
   16a84:	6001      	str	r1, [r0, #0]
   16a86:	6042      	str	r2, [r0, #4]
   16a88:	9900      	ldr	r1, [sp, #0]
   16a8a:	9a01      	ldr	r2, [sp, #4]
   16a8c:	6081      	str	r1, [r0, #8]
   16a8e:	60c2      	str	r2, [r0, #12]
   16a90:	6103      	str	r3, [r0, #16]
   16a92:	6144      	str	r4, [r0, #20]
   16a94:	b008      	add	sp, #32
   16a96:	bd10      	pop	{r4, pc}

00016a98 <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>:
   16a98:	b580      	push	{r7, lr}
   16a9a:	b086      	sub	sp, #24
   16a9c:	f8dd c020 	ldr.w	ip, [sp, #32]
   16aa0:	9102      	str	r1, [sp, #8]
   16aa2:	9203      	str	r2, [sp, #12]
   16aa4:	9304      	str	r3, [sp, #16]
   16aa6:	f8cd c014 	str.w	ip, [sp, #20]
   16aaa:	f04f 0e00 	mov.w	lr, #0
   16aae:	f8cd e004 	str.w	lr, [sp, #4]
   16ab2:	f8cd e000 	str.w	lr, [sp]
   16ab6:	f8cd e000 	str.w	lr, [sp]
   16aba:	6001      	str	r1, [r0, #0]
   16abc:	6042      	str	r2, [r0, #4]
   16abe:	9900      	ldr	r1, [sp, #0]
   16ac0:	9a01      	ldr	r2, [sp, #4]
   16ac2:	6081      	str	r1, [r0, #8]
   16ac4:	60c2      	str	r2, [r0, #12]
   16ac6:	6103      	str	r3, [r0, #16]
   16ac8:	f8c0 c014 	str.w	ip, [r0, #20]
   16acc:	b006      	add	sp, #24
   16ace:	bd80      	pop	{r7, pc}

00016ad0 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E>:
   16ad0:	b580      	push	{r7, lr}
   16ad2:	b086      	sub	sp, #24
   16ad4:	460a      	mov	r2, r1
   16ad6:	4603      	mov	r3, r0
   16ad8:	f88d 0014 	strb.w	r0, [sp, #20]
   16adc:	f88d 1015 	strb.w	r1, [sp, #21]
   16ae0:	9203      	str	r2, [sp, #12]
   16ae2:	9302      	str	r3, [sp, #8]
   16ae4:	f000 f865 	bl	16bb2 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>
   16ae8:	9001      	str	r0, [sp, #4]
   16aea:	9100      	str	r1, [sp, #0]
   16aec:	e7ff      	b.n	16aee <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x1e>
   16aee:	9801      	ldr	r0, [sp, #4]
   16af0:	f88d 0016 	strb.w	r0, [sp, #22]
   16af4:	9900      	ldr	r1, [sp, #0]
   16af6:	f001 0201 	and.w	r2, r1, #1
   16afa:	f88d 2017 	strb.w	r2, [sp, #23]
   16afe:	2a00      	cmp	r2, #0
   16b00:	d107      	bne.n	16b12 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x42>
   16b02:	e7ff      	b.n	16b04 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x34>
   16b04:	9801      	ldr	r0, [sp, #4]
   16b06:	f88d 0011 	strb.w	r0, [sp, #17]
   16b0a:	2101      	movs	r1, #1
   16b0c:	f88d 1010 	strb.w	r1, [sp, #16]
   16b10:	e003      	b.n	16b1a <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x4a>
   16b12:	2000      	movs	r0, #0
   16b14:	f88d 0010 	strb.w	r0, [sp, #16]
   16b18:	e7ff      	b.n	16b1a <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x4a>
   16b1a:	f89d 0010 	ldrb.w	r0, [sp, #16]
   16b1e:	f89d 1011 	ldrb.w	r1, [sp, #17]
   16b22:	b006      	add	sp, #24
   16b24:	bd80      	pop	{r7, pc}

00016b26 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>:
   16b26:	b082      	sub	sp, #8
   16b28:	460a      	mov	r2, r1
   16b2a:	4603      	mov	r3, r0
   16b2c:	f88d 0005 	strb.w	r0, [sp, #5]
   16b30:	f88d 1006 	strb.w	r1, [sp, #6]
   16b34:	4408      	add	r0, r1
   16b36:	f88d 0007 	strb.w	r0, [sp, #7]
   16b3a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   16b3e:	9000      	str	r0, [sp, #0]
   16b40:	e7ff      	b.n	16b42 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE+0x1c>
   16b42:	9800      	ldr	r0, [sp, #0]
   16b44:	b002      	add	sp, #8
   16b46:	4770      	bx	lr

00016b48 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E>:
   16b48:	b084      	sub	sp, #16
   16b4a:	4602      	mov	r2, r0
   16b4c:	f88d 0007 	strb.w	r0, [sp, #7]
   16b50:	9102      	str	r1, [sp, #8]
   16b52:	f001 0107 	and.w	r1, r1, #7
   16b56:	4088      	lsls	r0, r1
   16b58:	f88d 000f 	strb.w	r0, [sp, #15]
   16b5c:	f89d 000f 	ldrb.w	r0, [sp, #15]
   16b60:	9000      	str	r0, [sp, #0]
   16b62:	e7ff      	b.n	16b64 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E+0x1c>
   16b64:	9800      	ldr	r0, [sp, #0]
   16b66:	b004      	add	sp, #16
   16b68:	4770      	bx	lr

00016b6a <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E>:
   16b6a:	b084      	sub	sp, #16
   16b6c:	b2c2      	uxtb	r2, r0
   16b6e:	4603      	mov	r3, r0
   16b70:	f88d 0007 	strb.w	r0, [sp, #7]
   16b74:	9102      	str	r1, [sp, #8]
   16b76:	f001 0007 	and.w	r0, r1, #7
   16b7a:	fa22 f000 	lsr.w	r0, r2, r0
   16b7e:	f88d 000f 	strb.w	r0, [sp, #15]
   16b82:	f89d 000f 	ldrb.w	r0, [sp, #15]
   16b86:	9000      	str	r0, [sp, #0]
   16b88:	e7ff      	b.n	16b8a <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E+0x20>
   16b8a:	9800      	ldr	r0, [sp, #0]
   16b8c:	b004      	add	sp, #16
   16b8e:	4770      	bx	lr

00016b90 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E>:
   16b90:	b082      	sub	sp, #8
   16b92:	460a      	mov	r2, r1
   16b94:	4603      	mov	r3, r0
   16b96:	f88d 0005 	strb.w	r0, [sp, #5]
   16b9a:	f88d 1006 	strb.w	r1, [sp, #6]
   16b9e:	1a40      	subs	r0, r0, r1
   16ba0:	f88d 0007 	strb.w	r0, [sp, #7]
   16ba4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   16ba8:	9000      	str	r0, [sp, #0]
   16baa:	e7ff      	b.n	16bac <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E+0x1c>
   16bac:	9800      	ldr	r0, [sp, #0]
   16bae:	b002      	add	sp, #8
   16bb0:	4770      	bx	lr

00016bb2 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>:
   16bb2:	b084      	sub	sp, #16
   16bb4:	b2c2      	uxtb	r2, r0
   16bb6:	460b      	mov	r3, r1
   16bb8:	4684      	mov	ip, r0
   16bba:	f88d 000a 	strb.w	r0, [sp, #10]
   16bbe:	f88d 100b 	strb.w	r1, [sp, #11]
   16bc2:	fa52 f081 	uxtab	r0, r2, r1
   16bc6:	b2c1      	uxtb	r1, r0
   16bc8:	1a09      	subs	r1, r1, r0
   16bca:	bf18      	it	ne
   16bcc:	2101      	movne	r1, #1
   16bce:	f88d 000c 	strb.w	r0, [sp, #12]
   16bd2:	f88d 100d 	strb.w	r1, [sp, #13]
   16bd6:	f89d 000c 	ldrb.w	r0, [sp, #12]
   16bda:	f89d 100d 	ldrb.w	r1, [sp, #13]
   16bde:	9001      	str	r0, [sp, #4]
   16be0:	9100      	str	r1, [sp, #0]
   16be2:	e7ff      	b.n	16be4 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E+0x32>
   16be4:	9801      	ldr	r0, [sp, #4]
   16be6:	f88d 000e 	strb.w	r0, [sp, #14]
   16bea:	9900      	ldr	r1, [sp, #0]
   16bec:	f001 0201 	and.w	r2, r1, #1
   16bf0:	f88d 200f 	strb.w	r2, [sp, #15]
   16bf4:	f88d 0008 	strb.w	r0, [sp, #8]
   16bf8:	f88d 2009 	strb.w	r2, [sp, #9]
   16bfc:	f89d 0008 	ldrb.w	r0, [sp, #8]
   16c00:	f89d 1009 	ldrb.w	r1, [sp, #9]
   16c04:	b004      	add	sp, #16
   16c06:	4770      	bx	lr

00016c08 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>:
   16c08:	b580      	push	{r7, lr}
   16c0a:	b084      	sub	sp, #16
   16c0c:	b2ca      	uxtb	r2, r1
   16c0e:	b2c3      	uxtb	r3, r0
   16c10:	468c      	mov	ip, r1
   16c12:	4686      	mov	lr, r0
   16c14:	f88d 000a 	strb.w	r0, [sp, #10]
   16c18:	f88d 100b 	strb.w	r1, [sp, #11]
   16c1c:	1a98      	subs	r0, r3, r2
   16c1e:	b2c1      	uxtb	r1, r0
   16c20:	1a09      	subs	r1, r1, r0
   16c22:	bf18      	it	ne
   16c24:	2101      	movne	r1, #1
   16c26:	f88d 000c 	strb.w	r0, [sp, #12]
   16c2a:	f88d 100d 	strb.w	r1, [sp, #13]
   16c2e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   16c32:	f89d 100d 	ldrb.w	r1, [sp, #13]
   16c36:	9001      	str	r0, [sp, #4]
   16c38:	9100      	str	r1, [sp, #0]
   16c3a:	e7ff      	b.n	16c3c <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E+0x34>
   16c3c:	9801      	ldr	r0, [sp, #4]
   16c3e:	f88d 000e 	strb.w	r0, [sp, #14]
   16c42:	9900      	ldr	r1, [sp, #0]
   16c44:	f001 0201 	and.w	r2, r1, #1
   16c48:	f88d 200f 	strb.w	r2, [sp, #15]
   16c4c:	f88d 0008 	strb.w	r0, [sp, #8]
   16c50:	f88d 2009 	strb.w	r2, [sp, #9]
   16c54:	f89d 0008 	ldrb.w	r0, [sp, #8]
   16c58:	f89d 1009 	ldrb.w	r1, [sp, #9]
   16c5c:	b004      	add	sp, #16
   16c5e:	bd80      	pop	{r7, pc}

00016c60 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>:
   16c60:	b083      	sub	sp, #12
   16c62:	460a      	mov	r2, r1
   16c64:	4603      	mov	r3, r0
   16c66:	f8ad 0006 	strh.w	r0, [sp, #6]
   16c6a:	f8ad 1008 	strh.w	r1, [sp, #8]
   16c6e:	4408      	add	r0, r1
   16c70:	f8ad 000a 	strh.w	r0, [sp, #10]
   16c74:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   16c78:	9000      	str	r0, [sp, #0]
   16c7a:	e7ff      	b.n	16c7c <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E+0x1c>
   16c7c:	9800      	ldr	r0, [sp, #0]
   16c7e:	b003      	add	sp, #12
   16c80:	4770      	bx	lr

00016c82 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>:
   16c82:	b083      	sub	sp, #12
   16c84:	460a      	mov	r2, r1
   16c86:	4603      	mov	r3, r0
   16c88:	f8ad 0006 	strh.w	r0, [sp, #6]
   16c8c:	f8ad 1008 	strh.w	r1, [sp, #8]
   16c90:	1a40      	subs	r0, r0, r1
   16c92:	f8ad 000a 	strh.w	r0, [sp, #10]
   16c96:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   16c9a:	9000      	str	r0, [sp, #0]
   16c9c:	e7ff      	b.n	16c9e <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E+0x1c>
   16c9e:	9800      	ldr	r0, [sp, #0]
   16ca0:	b003      	add	sp, #12
   16ca2:	4770      	bx	lr

00016ca4 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE>:
   16ca4:	b5b0      	push	{r4, r5, r7, lr}
   16ca6:	b088      	sub	sp, #32
   16ca8:	469c      	mov	ip, r3
   16caa:	4696      	mov	lr, r2
   16cac:	460c      	mov	r4, r1
   16cae:	4605      	mov	r5, r0
   16cb0:	9103      	str	r1, [sp, #12]
   16cb2:	9002      	str	r0, [sp, #8]
   16cb4:	9305      	str	r3, [sp, #20]
   16cb6:	9204      	str	r2, [sp, #16]
   16cb8:	1a80      	subs	r0, r0, r2
   16cba:	eb61 0103 	sbc.w	r1, r1, r3
   16cbe:	9107      	str	r1, [sp, #28]
   16cc0:	9006      	str	r0, [sp, #24]
   16cc2:	9806      	ldr	r0, [sp, #24]
   16cc4:	9907      	ldr	r1, [sp, #28]
   16cc6:	9001      	str	r0, [sp, #4]
   16cc8:	9100      	str	r1, [sp, #0]
   16cca:	e7ff      	b.n	16ccc <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE+0x28>
   16ccc:	9801      	ldr	r0, [sp, #4]
   16cce:	9900      	ldr	r1, [sp, #0]
   16cd0:	b008      	add	sp, #32
   16cd2:	bdb0      	pop	{r4, r5, r7, pc}

00016cd4 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>:
    fn le(&self, other: &LevelFilter) -> bool {
   16cd4:	b082      	sub	sp, #8
   16cd6:	9000      	str	r0, [sp, #0]
   16cd8:	9101      	str	r1, [sp, #4]
        *self as usize <= *other as usize
   16cda:	6800      	ldr	r0, [r0, #0]
   16cdc:	6809      	ldr	r1, [r1, #0]
   16cde:	2200      	movs	r2, #0
   16ce0:	4288      	cmp	r0, r1
   16ce2:	bf98      	it	ls
   16ce4:	2201      	movls	r2, #1
    }
   16ce6:	4610      	mov	r0, r2
   16ce8:	b002      	add	sp, #8
   16cea:	4770      	bx	lr

00016cec <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E>:
   16cec:	b081      	sub	sp, #4
   16cee:	4601      	mov	r1, r0
   16cf0:	f88d 0003 	strb.w	r0, [sp, #3]
   16cf4:	b2c0      	uxtb	r0, r0
   16cf6:	b001      	add	sp, #4
   16cf8:	4770      	bx	lr

00016cfa <_ZN4core3mem4swap17h206518364108b51fE>:
   16cfa:	b580      	push	{r7, lr}
   16cfc:	b082      	sub	sp, #8
   16cfe:	9000      	str	r0, [sp, #0]
   16d00:	9101      	str	r1, [sp, #4]
   16d02:	f000 fc55 	bl	175b0 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE>
   16d06:	e7ff      	b.n	16d08 <_ZN4core3mem4swap17h206518364108b51fE+0xe>
   16d08:	b002      	add	sp, #8
   16d0a:	bd80      	pop	{r7, pc}

00016d0c <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE>:
   16d0c:	b580      	push	{r7, lr}
   16d0e:	b088      	sub	sp, #32
   16d10:	9004      	str	r0, [sp, #16]
   16d12:	9105      	str	r1, [sp, #20]
   16d14:	9206      	str	r2, [sp, #24]
   16d16:	9307      	str	r3, [sp, #28]
   16d18:	9003      	str	r0, [sp, #12]
   16d1a:	4610      	mov	r0, r2
   16d1c:	9102      	str	r1, [sp, #8]
   16d1e:	4619      	mov	r1, r3
   16d20:	9a03      	ldr	r2, [sp, #12]
   16d22:	9b02      	ldr	r3, [sp, #8]
   16d24:	f7f1 ff66 	bl	8bf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
   16d28:	9001      	str	r0, [sp, #4]
   16d2a:	9100      	str	r1, [sp, #0]
   16d2c:	e7ff      	b.n	16d2e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE+0x22>
   16d2e:	9801      	ldr	r0, [sp, #4]
   16d30:	9900      	ldr	r1, [sp, #0]
   16d32:	b008      	add	sp, #32
   16d34:	bd80      	pop	{r7, pc}

00016d36 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE>:
   16d36:	b082      	sub	sp, #8
   16d38:	9000      	str	r0, [sp, #0]
   16d3a:	9101      	str	r1, [sp, #4]
   16d3c:	7800      	ldrb	r0, [r0, #0]
   16d3e:	7809      	ldrb	r1, [r1, #0]
   16d40:	2200      	movs	r2, #0
   16d42:	4288      	cmp	r0, r1
   16d44:	bf38      	it	cc
   16d46:	2201      	movcc	r2, #1
   16d48:	4610      	mov	r0, r2
   16d4a:	b002      	add	sp, #8
   16d4c:	4770      	bx	lr

00016d4e <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE>:
   16d4e:	b580      	push	{r7, lr}
   16d50:	b088      	sub	sp, #32
   16d52:	9005      	str	r0, [sp, #20]
   16d54:	9106      	str	r1, [sp, #24]
   16d56:	9002      	str	r0, [sp, #8]
   16d58:	4608      	mov	r0, r1
   16d5a:	f000 fd04 	bl	17766 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE>
   16d5e:	f88d 1011 	strb.w	r1, [sp, #17]
   16d62:	f88d 0010 	strb.w	r0, [sp, #16]
   16d66:	e7ff      	b.n	16d68 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x1a>
   16d68:	f89d 0010 	ldrb.w	r0, [sp, #16]
   16d6c:	07c1      	lsls	r1, r0, #31
   16d6e:	2900      	cmp	r1, #0
   16d70:	d005      	beq.n	16d7e <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x30>
   16d72:	e7ff      	b.n	16d74 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x26>
   16d74:	2000      	movs	r0, #0
   16d76:	f88d 000c 	strb.w	r0, [sp, #12]
   16d7a:	e011      	b.n	16da0 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x52>
   16d7c:	defe      	udf	#254	; 0xfe
   16d7e:	f89d 0011 	ldrb.w	r0, [sp, #17]
   16d82:	f88d 001f 	strb.w	r0, [sp, #31]
   16d86:	9902      	ldr	r1, [sp, #8]
   16d88:	780a      	ldrb	r2, [r1, #0]
   16d8a:	9001      	str	r0, [sp, #4]
   16d8c:	4610      	mov	r0, r2
   16d8e:	9901      	ldr	r1, [sp, #4]
   16d90:	f7ff fe9e 	bl	16ad0 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E>
   16d94:	f88d 100d 	strb.w	r1, [sp, #13]
   16d98:	f88d 000c 	strb.w	r0, [sp, #12]
   16d9c:	e7ff      	b.n	16d9e <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x50>
   16d9e:	e7ff      	b.n	16da0 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x52>
   16da0:	f89d 000c 	ldrb.w	r0, [sp, #12]
   16da4:	f89d 100d 	ldrb.w	r1, [sp, #13]
   16da8:	b008      	add	sp, #32
   16daa:	bd80      	pop	{r7, pc}

00016dac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   16dac:	b580      	push	{r7, lr}
   16dae:	b088      	sub	sp, #32
   16db0:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   16db2:	1d01      	adds	r1, r0, #4
   16db4:	9106      	str	r1, [sp, #24]
   16db6:	9107      	str	r1, [sp, #28]
   16db8:	9004      	str	r0, [sp, #16]
   16dba:	9103      	str	r1, [sp, #12]
   16dbc:	e7ff      	b.n	16dbe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x12>
   16dbe:	9804      	ldr	r0, [sp, #16]
   16dc0:	6801      	ldr	r1, [r0, #0]
   16dc2:	9803      	ldr	r0, [sp, #12]
   16dc4:	f7f1 ffc6 	bl	8d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   16dc8:	9002      	str	r0, [sp, #8]
   16dca:	9101      	str	r1, [sp, #4]
   16dcc:	e7ff      	b.n	16dce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x22>
    }
   16dce:	9802      	ldr	r0, [sp, #8]
   16dd0:	9901      	ldr	r1, [sp, #4]
   16dd2:	b008      	add	sp, #32
   16dd4:	bd80      	pop	{r7, pc}

00016dd6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   16dd6:	b580      	push	{r7, lr}
   16dd8:	b088      	sub	sp, #32
   16dda:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   16ddc:	1d01      	adds	r1, r0, #4
   16dde:	9106      	str	r1, [sp, #24]
   16de0:	9107      	str	r1, [sp, #28]
   16de2:	9004      	str	r0, [sp, #16]
   16de4:	9103      	str	r1, [sp, #12]
   16de6:	e7ff      	b.n	16de8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x12>
   16de8:	9804      	ldr	r0, [sp, #16]
   16dea:	6801      	ldr	r1, [r0, #0]
   16dec:	9803      	ldr	r0, [sp, #12]
   16dee:	f7f1 ffb1 	bl	8d54 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   16df2:	9002      	str	r0, [sp, #8]
   16df4:	9101      	str	r1, [sp, #4]
   16df6:	e7ff      	b.n	16df8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x22>
    }
   16df8:	9802      	ldr	r0, [sp, #8]
   16dfa:	9901      	ldr	r1, [sp, #4]
   16dfc:	b008      	add	sp, #32
   16dfe:	bd80      	pop	{r7, pc}

00016e00 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   16e00:	b580      	push	{r7, lr}
   16e02:	b08a      	sub	sp, #40	; 0x28
   16e04:	460a      	mov	r2, r1
   16e06:	9006      	str	r0, [sp, #24]
   16e08:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   16e0c:	1d01      	adds	r1, r0, #4
   16e0e:	9108      	str	r1, [sp, #32]
   16e10:	9109      	str	r1, [sp, #36]	; 0x24
   16e12:	9005      	str	r0, [sp, #20]
   16e14:	9204      	str	r2, [sp, #16]
   16e16:	9103      	str	r1, [sp, #12]
   16e18:	e7ff      	b.n	16e1a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x1a>
            .add(self.len)
   16e1a:	9805      	ldr	r0, [sp, #20]
   16e1c:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   16e1e:	9803      	ldr	r0, [sp, #12]
   16e20:	f7fb f80b 	bl	11e3a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   16e24:	9002      	str	r0, [sp, #8]
   16e26:	e7ff      	b.n	16e28 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x28>
   16e28:	9802      	ldr	r0, [sp, #8]
   16e2a:	9904      	ldr	r1, [sp, #16]
   16e2c:	f000 f994 	bl	17158 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   16e30:	e7ff      	b.n	16e32 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x32>
        self.len += 1;
   16e32:	9805      	ldr	r0, [sp, #20]
   16e34:	6801      	ldr	r1, [r0, #0]
   16e36:	1c4a      	adds	r2, r1, #1
   16e38:	4613      	mov	r3, r2
   16e3a:	428a      	cmp	r2, r1
   16e3c:	9301      	str	r3, [sp, #4]
   16e3e:	d305      	bcc.n	16e4c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x4c>
   16e40:	e7ff      	b.n	16e42 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x42>
   16e42:	9801      	ldr	r0, [sp, #4]
   16e44:	9905      	ldr	r1, [sp, #20]
   16e46:	6008      	str	r0, [r1, #0]
    }
   16e48:	b00a      	add	sp, #40	; 0x28
   16e4a:	bd80      	pop	{r7, pc}
        self.len += 1;
   16e4c:	f640 60f0 	movw	r0, #3824	; 0xef0
   16e50:	f2c0 0002 	movt	r0, #2
   16e54:	f640 62dc 	movw	r2, #3804	; 0xedc
   16e58:	f2c0 0202 	movt	r2, #2
   16e5c:	211c      	movs	r1, #28
   16e5e:	f000 fdbb 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16e62:	defe      	udf	#254	; 0xfe

00016e64 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   16e64:	b580      	push	{r7, lr}
   16e66:	b08a      	sub	sp, #40	; 0x28
   16e68:	460a      	mov	r2, r1
   16e6a:	9006      	str	r0, [sp, #24]
   16e6c:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   16e70:	1d01      	adds	r1, r0, #4
   16e72:	9108      	str	r1, [sp, #32]
   16e74:	9109      	str	r1, [sp, #36]	; 0x24
   16e76:	9005      	str	r0, [sp, #20]
   16e78:	9204      	str	r2, [sp, #16]
   16e7a:	9103      	str	r1, [sp, #12]
   16e7c:	e7ff      	b.n	16e7e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x1a>
            .add(self.len)
   16e7e:	9805      	ldr	r0, [sp, #20]
   16e80:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   16e82:	9803      	ldr	r0, [sp, #12]
   16e84:	f7fa ffd9 	bl	11e3a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   16e88:	9002      	str	r0, [sp, #8]
   16e8a:	e7ff      	b.n	16e8c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x28>
   16e8c:	9802      	ldr	r0, [sp, #8]
   16e8e:	9904      	ldr	r1, [sp, #16]
   16e90:	f000 f962 	bl	17158 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   16e94:	e7ff      	b.n	16e96 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x32>
        self.len += 1;
   16e96:	9805      	ldr	r0, [sp, #20]
   16e98:	6801      	ldr	r1, [r0, #0]
   16e9a:	1c4a      	adds	r2, r1, #1
   16e9c:	4613      	mov	r3, r2
   16e9e:	428a      	cmp	r2, r1
   16ea0:	9301      	str	r3, [sp, #4]
   16ea2:	d305      	bcc.n	16eb0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x4c>
   16ea4:	e7ff      	b.n	16ea6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x42>
   16ea6:	9801      	ldr	r0, [sp, #4]
   16ea8:	9905      	ldr	r1, [sp, #20]
   16eaa:	6008      	str	r0, [r1, #0]
    }
   16eac:	b00a      	add	sp, #40	; 0x28
   16eae:	bd80      	pop	{r7, pc}
        self.len += 1;
   16eb0:	f640 60f0 	movw	r0, #3824	; 0xef0
   16eb4:	f2c0 0002 	movt	r0, #2
   16eb8:	f640 62dc 	movw	r2, #3804	; 0xedc
   16ebc:	f2c0 0202 	movt	r2, #2
   16ec0:	211c      	movs	r1, #28
   16ec2:	f000 fd89 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16ec6:	defe      	udf	#254	; 0xfe

00016ec8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   16ec8:	b580      	push	{r7, lr}
   16eca:	b094      	sub	sp, #80	; 0x50
   16ecc:	900e      	str	r0, [sp, #56]	; 0x38
   16ece:	910f      	str	r1, [sp, #60]	; 0x3c
   16ed0:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   16ed2:	6803      	ldr	r3, [r0, #0]
   16ed4:	9009      	str	r0, [sp, #36]	; 0x24
   16ed6:	4608      	mov	r0, r1
   16ed8:	9108      	str	r1, [sp, #32]
   16eda:	4611      	mov	r1, r2
   16edc:	9207      	str	r2, [sp, #28]
   16ede:	9306      	str	r3, [sp, #24]
   16ee0:	f7fb f83b 	bl	11f5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   16ee4:	9005      	str	r0, [sp, #20]
   16ee6:	e7ff      	b.n	16ee8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x20>
   16ee8:	9806      	ldr	r0, [sp, #24]
   16eea:	9905      	ldr	r1, [sp, #20]
   16eec:	1842      	adds	r2, r0, r1
   16eee:	4613      	mov	r3, r2
   16ef0:	4282      	cmp	r2, r0
   16ef2:	9304      	str	r3, [sp, #16]
   16ef4:	d33f      	bcc.n	16f76 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xae>
   16ef6:	e7ff      	b.n	16ef8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x30>
   16ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
   16efa:	f000 f8b7 	bl	1706c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   16efe:	9003      	str	r0, [sp, #12]
   16f00:	e7ff      	b.n	16f02 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x3a>
   16f02:	9804      	ldr	r0, [sp, #16]
   16f04:	9903      	ldr	r1, [sp, #12]
   16f06:	4288      	cmp	r0, r1
   16f08:	d807      	bhi.n	16f1a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x52>
   16f0a:	e7ff      	b.n	16f0c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x44>
            for elem in other {
   16f0c:	9808      	ldr	r0, [sp, #32]
   16f0e:	9907      	ldr	r1, [sp, #28]
   16f10:	f7f2 f83e 	bl	8f90 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>
   16f14:	9002      	str	r0, [sp, #8]
   16f16:	9101      	str	r1, [sp, #4]
   16f18:	e003      	b.n	16f22 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x5a>
   16f1a:	2001      	movs	r0, #1
            Err(())
   16f1c:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   16f20:	e025      	b.n	16f6e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   16f22:	9802      	ldr	r0, [sp, #8]
   16f24:	900b      	str	r0, [sp, #44]	; 0x2c
   16f26:	9901      	ldr	r1, [sp, #4]
   16f28:	910c      	str	r1, [sp, #48]	; 0x30
   16f2a:	e7ff      	b.n	16f2c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
   16f2c:	a80b      	add	r0, sp, #44	; 0x2c
   16f2e:	f7fa fbe6 	bl	116fe <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>
   16f32:	900d      	str	r0, [sp, #52]	; 0x34
   16f34:	e7ff      	b.n	16f36 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x6e>
   16f36:	980d      	ldr	r0, [sp, #52]	; 0x34
   16f38:	2800      	cmp	r0, #0
   16f3a:	4601      	mov	r1, r0
   16f3c:	bf18      	it	ne
   16f3e:	2101      	movne	r1, #1
   16f40:	2800      	cmp	r0, #0
   16f42:	d001      	beq.n	16f48 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x80>
   16f44:	e7ff      	b.n	16f46 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x7e>
   16f46:	e004      	b.n	16f52 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x8a>
   16f48:	2000      	movs	r0, #0
            Ok(())
   16f4a:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   16f4e:	e00e      	b.n	16f6e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   16f50:	defe      	udf	#254	; 0xfe
   16f52:	980d      	ldr	r0, [sp, #52]	; 0x34
   16f54:	9011      	str	r0, [sp, #68]	; 0x44
   16f56:	9012      	str	r0, [sp, #72]	; 0x48
   16f58:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   16f5a:	f000 f909 	bl	17170 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>
   16f5e:	9000      	str	r0, [sp, #0]
   16f60:	e7ff      	b.n	16f62 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x9a>
   16f62:	9809      	ldr	r0, [sp, #36]	; 0x24
   16f64:	9900      	ldr	r1, [sp, #0]
   16f66:	f7ff ff7d 	bl	16e64 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>
   16f6a:	e7ff      	b.n	16f6c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa4>
            for elem in other {
   16f6c:	e7de      	b.n	16f2c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
    }
   16f6e:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   16f72:	b014      	add	sp, #80	; 0x50
   16f74:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   16f76:	f640 60f0 	movw	r0, #3824	; 0xef0
   16f7a:	f2c0 0002 	movt	r0, #2
   16f7e:	f640 720c 	movw	r2, #3852	; 0xf0c
   16f82:	f2c0 0202 	movt	r2, #2
   16f86:	211c      	movs	r1, #28
   16f88:	f000 fd26 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16f8c:	defe      	udf	#254	; 0xfe

00016f8e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   16f8e:	b580      	push	{r7, lr}
   16f90:	b088      	sub	sp, #32
   16f92:	460a      	mov	r2, r1
   16f94:	9006      	str	r0, [sp, #24]
   16f96:	f88d 101f 	strb.w	r1, [sp, #31]
        if self.len < self.capacity() {
   16f9a:	6801      	ldr	r1, [r0, #0]
   16f9c:	9004      	str	r0, [sp, #16]
   16f9e:	9203      	str	r2, [sp, #12]
   16fa0:	9102      	str	r1, [sp, #8]
   16fa2:	f000 f859 	bl	17058 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>
   16fa6:	9001      	str	r0, [sp, #4]
   16fa8:	e7ff      	b.n	16faa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x1c>
   16faa:	9802      	ldr	r0, [sp, #8]
   16fac:	9901      	ldr	r1, [sp, #4]
   16fae:	4288      	cmp	r0, r1
   16fb0:	d307      	bcc.n	16fc2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x34>
   16fb2:	e7ff      	b.n	16fb4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x26>
            Err(item)
   16fb4:	9803      	ldr	r0, [sp, #12]
   16fb6:	f88d 0015 	strb.w	r0, [sp, #21]
   16fba:	2101      	movs	r1, #1
   16fbc:	f88d 1014 	strb.w	r1, [sp, #20]
        if self.len < self.capacity() {
   16fc0:	e008      	b.n	16fd4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
            unsafe { self.push_unchecked(item) }
   16fc2:	9804      	ldr	r0, [sp, #16]
   16fc4:	9903      	ldr	r1, [sp, #12]
   16fc6:	f7ff ff1b 	bl	16e00 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>
   16fca:	e7ff      	b.n	16fcc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x3e>
   16fcc:	2000      	movs	r0, #0
            Ok(())
   16fce:	f88d 0014 	strb.w	r0, [sp, #20]
        if self.len < self.capacity() {
   16fd2:	e7ff      	b.n	16fd4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
    }
   16fd4:	f89d 0014 	ldrb.w	r0, [sp, #20]
   16fd8:	f89d 1015 	ldrb.w	r1, [sp, #21]
   16fdc:	b008      	add	sp, #32
   16fde:	bd80      	pop	{r7, pc}

00016fe0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>:
    pub(crate) fn clear(&mut self) {
   16fe0:	b580      	push	{r7, lr}
   16fe2:	b082      	sub	sp, #8
   16fe4:	9001      	str	r0, [sp, #4]
   16fe6:	2100      	movs	r1, #0
        self.truncate(0);
   16fe8:	f000 f880 	bl	170ec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>
   16fec:	e7ff      	b.n	16fee <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E+0xe>
    }
   16fee:	b002      	add	sp, #8
   16ff0:	bd80      	pop	{r7, pc}

00016ff2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>:
    pub(crate) fn clear(&mut self) {
   16ff2:	b580      	push	{r7, lr}
   16ff4:	b082      	sub	sp, #8
   16ff6:	9001      	str	r0, [sp, #4]
   16ff8:	2100      	movs	r1, #0
        self.truncate(0);
   16ffa:	f000 f841 	bl	17080 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>
   16ffe:	e7ff      	b.n	17000 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E+0xe>
    }
   17000:	b002      	add	sp, #8
   17002:	bd80      	pop	{r7, pc}

00017004 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   17004:	b580      	push	{r7, lr}
   17006:	b088      	sub	sp, #32
   17008:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   1700a:	1d01      	adds	r1, r0, #4
   1700c:	9106      	str	r1, [sp, #24]
   1700e:	9107      	str	r1, [sp, #28]
   17010:	9004      	str	r0, [sp, #16]
   17012:	9103      	str	r1, [sp, #12]
   17014:	e7ff      	b.n	17016 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x12>
   17016:	9804      	ldr	r0, [sp, #16]
   17018:	6801      	ldr	r1, [r0, #0]
   1701a:	9803      	ldr	r0, [sp, #12]
   1701c:	f7fb fbb1 	bl	12782 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   17020:	9002      	str	r0, [sp, #8]
   17022:	9101      	str	r1, [sp, #4]
   17024:	e7ff      	b.n	17026 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x22>
    }
   17026:	9802      	ldr	r0, [sp, #8]
   17028:	9901      	ldr	r1, [sp, #4]
   1702a:	b008      	add	sp, #32
   1702c:	bd80      	pop	{r7, pc}

0001702e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   1702e:	b580      	push	{r7, lr}
   17030:	b088      	sub	sp, #32
   17032:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   17034:	1d01      	adds	r1, r0, #4
   17036:	9106      	str	r1, [sp, #24]
   17038:	9107      	str	r1, [sp, #28]
   1703a:	9004      	str	r0, [sp, #16]
   1703c:	9103      	str	r1, [sp, #12]
   1703e:	e7ff      	b.n	17040 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x12>
   17040:	9804      	ldr	r0, [sp, #16]
   17042:	6801      	ldr	r1, [r0, #0]
   17044:	9803      	ldr	r0, [sp, #12]
   17046:	f7fb fb9c 	bl	12782 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   1704a:	9002      	str	r0, [sp, #8]
   1704c:	9101      	str	r1, [sp, #4]
   1704e:	e7ff      	b.n	17050 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x22>
    }
   17050:	9802      	ldr	r0, [sp, #8]
   17052:	9901      	ldr	r1, [sp, #4]
   17054:	b008      	add	sp, #32
   17056:	bd80      	pop	{r7, pc}

00017058 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>:
    pub(crate) fn capacity(&self) -> usize {
   17058:	b580      	push	{r7, lr}
   1705a:	b082      	sub	sp, #8
   1705c:	9001      	str	r0, [sp, #4]
        N::to_usize()
   1705e:	f000 f964 	bl	1732a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   17062:	9000      	str	r0, [sp, #0]
   17064:	e7ff      	b.n	17066 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E+0xe>
    }
   17066:	9800      	ldr	r0, [sp, #0]
   17068:	b002      	add	sp, #8
   1706a:	bd80      	pop	{r7, pc}

0001706c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>:
    pub(crate) fn capacity(&self) -> usize {
   1706c:	b580      	push	{r7, lr}
   1706e:	b082      	sub	sp, #8
   17070:	9001      	str	r0, [sp, #4]
        N::to_usize()
   17072:	f000 f8b2 	bl	171da <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>
   17076:	9000      	str	r0, [sp, #0]
   17078:	e7ff      	b.n	1707a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE+0xe>
    }
   1707a:	9800      	ldr	r0, [sp, #0]
   1707c:	b002      	add	sp, #8
   1707e:	bd80      	pop	{r7, pc}

00017080 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   17080:	b580      	push	{r7, lr}
   17082:	b08a      	sub	sp, #40	; 0x28
   17084:	9007      	str	r0, [sp, #28]
   17086:	9108      	str	r1, [sp, #32]
   17088:	9106      	str	r1, [sp, #24]
   1708a:	9005      	str	r0, [sp, #20]
   1708c:	e7ff      	b.n	1708e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
            while len < self.len {
   1708e:	9805      	ldr	r0, [sp, #20]
   17090:	6801      	ldr	r1, [r0, #0]
   17092:	9a06      	ldr	r2, [sp, #24]
   17094:	428a      	cmp	r2, r1
   17096:	d302      	bcc.n	1709e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1e>
   17098:	e7ff      	b.n	1709a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1a>
    }
   1709a:	b00a      	add	sp, #40	; 0x28
   1709c:	bd80      	pop	{r7, pc}
                self.len -= 1;
   1709e:	9805      	ldr	r0, [sp, #20]
   170a0:	6801      	ldr	r1, [r0, #0]
   170a2:	1e4a      	subs	r2, r1, #1
   170a4:	2901      	cmp	r1, #1
   170a6:	9204      	str	r2, [sp, #16]
   170a8:	d314      	bcc.n	170d4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x54>
   170aa:	e7ff      	b.n	170ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x2c>
   170ac:	9804      	ldr	r0, [sp, #16]
   170ae:	9905      	ldr	r1, [sp, #20]
   170b0:	6008      	str	r0, [r1, #0]
                let len = self.len;
   170b2:	680a      	ldr	r2, [r1, #0]
   170b4:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   170b6:	4608      	mov	r0, r1
   170b8:	9203      	str	r2, [sp, #12]
   170ba:	f7ff fe8c 	bl	16dd6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>
   170be:	9002      	str	r0, [sp, #8]
   170c0:	9101      	str	r1, [sp, #4]
   170c2:	e7ff      	b.n	170c4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x44>
   170c4:	9802      	ldr	r0, [sp, #8]
   170c6:	9901      	ldr	r1, [sp, #4]
   170c8:	9a03      	ldr	r2, [sp, #12]
   170ca:	f7fa ff34 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   170ce:	e7ff      	b.n	170d0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x50>
   170d0:	e7ff      	b.n	170d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x52>
            while len < self.len {
   170d2:	e7dc      	b.n	1708e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
                self.len -= 1;
   170d4:	f640 7030 	movw	r0, #3888	; 0xf30
   170d8:	f2c0 0002 	movt	r0, #2
   170dc:	f640 721c 	movw	r2, #3868	; 0xf1c
   170e0:	f2c0 0202 	movt	r2, #2
   170e4:	2121      	movs	r1, #33	; 0x21
   170e6:	f000 fc77 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   170ea:	defe      	udf	#254	; 0xfe

000170ec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   170ec:	b580      	push	{r7, lr}
   170ee:	b08a      	sub	sp, #40	; 0x28
   170f0:	9007      	str	r0, [sp, #28]
   170f2:	9108      	str	r1, [sp, #32]
   170f4:	9106      	str	r1, [sp, #24]
   170f6:	9005      	str	r0, [sp, #20]
   170f8:	e7ff      	b.n	170fa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
            while len < self.len {
   170fa:	9805      	ldr	r0, [sp, #20]
   170fc:	6801      	ldr	r1, [r0, #0]
   170fe:	9a06      	ldr	r2, [sp, #24]
   17100:	428a      	cmp	r2, r1
   17102:	d302      	bcc.n	1710a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1e>
   17104:	e7ff      	b.n	17106 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1a>
    }
   17106:	b00a      	add	sp, #40	; 0x28
   17108:	bd80      	pop	{r7, pc}
                self.len -= 1;
   1710a:	9805      	ldr	r0, [sp, #20]
   1710c:	6801      	ldr	r1, [r0, #0]
   1710e:	1e4a      	subs	r2, r1, #1
   17110:	2901      	cmp	r1, #1
   17112:	9204      	str	r2, [sp, #16]
   17114:	d314      	bcc.n	17140 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x54>
   17116:	e7ff      	b.n	17118 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x2c>
   17118:	9804      	ldr	r0, [sp, #16]
   1711a:	9905      	ldr	r1, [sp, #20]
   1711c:	6008      	str	r0, [r1, #0]
                let len = self.len;
   1711e:	680a      	ldr	r2, [r1, #0]
   17120:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   17122:	4608      	mov	r0, r1
   17124:	9203      	str	r2, [sp, #12]
   17126:	f7ff fe41 	bl	16dac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>
   1712a:	9002      	str	r0, [sp, #8]
   1712c:	9101      	str	r1, [sp, #4]
   1712e:	e7ff      	b.n	17130 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x44>
   17130:	9802      	ldr	r0, [sp, #8]
   17132:	9901      	ldr	r1, [sp, #4]
   17134:	9a03      	ldr	r2, [sp, #12]
   17136:	f7fa fefe 	bl	11f36 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   1713a:	e7ff      	b.n	1713c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x50>
   1713c:	e7ff      	b.n	1713e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x52>
            while len < self.len {
   1713e:	e7dc      	b.n	170fa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
                self.len -= 1;
   17140:	f640 7030 	movw	r0, #3888	; 0xf30
   17144:	f2c0 0002 	movt	r0, #2
   17148:	f640 721c 	movw	r2, #3868	; 0xf1c
   1714c:	f2c0 0202 	movt	r2, #2
   17150:	2121      	movs	r1, #33	; 0x21
   17152:	f000 fc41 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17156:	defe      	udf	#254	; 0xfe

00017158 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>:
   17158:	b580      	push	{r7, lr}
   1715a:	b084      	sub	sp, #16
   1715c:	460a      	mov	r2, r1
   1715e:	9002      	str	r0, [sp, #8]
   17160:	f88d 100f 	strb.w	r1, [sp, #15]
   17164:	9201      	str	r2, [sp, #4]
   17166:	f7f1 ff9b 	bl	90a0 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   1716a:	e7ff      	b.n	1716c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE+0x14>
   1716c:	b004      	add	sp, #16
   1716e:	bd80      	pop	{r7, pc}

00017170 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>:
   17170:	b081      	sub	sp, #4
   17172:	9000      	str	r0, [sp, #0]
   17174:	7800      	ldrb	r0, [r0, #0]
   17176:	b001      	add	sp, #4
   17178:	4770      	bx	lr

0001717a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>:
    fn to_usize() -> usize {
   1717a:	b580      	push	{r7, lr}
   1717c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1717e:	f000 fb0b 	bl	17798 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17182:	9003      	str	r0, [sp, #12]
   17184:	e7ff      	b.n	17186 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0xc>
   17186:	9803      	ldr	r0, [sp, #12]
   17188:	f000 fb0c 	bl	177a4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1718c:	9002      	str	r0, [sp, #8]
   1718e:	e7ff      	b.n	17190 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x16>
   17190:	f000 f8cb 	bl	1732a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   17194:	9001      	str	r0, [sp, #4]
   17196:	e7ff      	b.n	17198 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x1e>
   17198:	9801      	ldr	r0, [sp, #4]
   1719a:	0041      	lsls	r1, r0, #1
   1719c:	9100      	str	r1, [sp, #0]
   1719e:	e7ff      	b.n	171a0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x26>
   171a0:	9802      	ldr	r0, [sp, #8]
   171a2:	9900      	ldr	r1, [sp, #0]
   171a4:	4308      	orrs	r0, r1
    }
   171a6:	b004      	add	sp, #16
   171a8:	bd80      	pop	{r7, pc}

000171aa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>:
    fn to_usize() -> usize {
   171aa:	b580      	push	{r7, lr}
   171ac:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   171ae:	f000 faf3 	bl	17798 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   171b2:	9003      	str	r0, [sp, #12]
   171b4:	e7ff      	b.n	171b6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0xc>
   171b6:	9803      	ldr	r0, [sp, #12]
   171b8:	f000 faf4 	bl	177a4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   171bc:	9002      	str	r0, [sp, #8]
   171be:	e7ff      	b.n	171c0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x16>
   171c0:	f000 f86b 	bl	1729a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>
   171c4:	9001      	str	r0, [sp, #4]
   171c6:	e7ff      	b.n	171c8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x1e>
   171c8:	9801      	ldr	r0, [sp, #4]
   171ca:	0041      	lsls	r1, r0, #1
   171cc:	9100      	str	r1, [sp, #0]
   171ce:	e7ff      	b.n	171d0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x26>
   171d0:	9802      	ldr	r0, [sp, #8]
   171d2:	9900      	ldr	r1, [sp, #0]
   171d4:	4308      	orrs	r0, r1
    }
   171d6:	b004      	add	sp, #16
   171d8:	bd80      	pop	{r7, pc}

000171da <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>:
    fn to_usize() -> usize {
   171da:	b580      	push	{r7, lr}
   171dc:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   171de:	f000 fadb 	bl	17798 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   171e2:	9003      	str	r0, [sp, #12]
   171e4:	e7ff      	b.n	171e6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0xc>
   171e6:	9803      	ldr	r0, [sp, #12]
   171e8:	f000 fadc 	bl	177a4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   171ec:	9002      	str	r0, [sp, #8]
   171ee:	e7ff      	b.n	171f0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x16>
   171f0:	f000 f8fb 	bl	173ea <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>
   171f4:	9001      	str	r0, [sp, #4]
   171f6:	e7ff      	b.n	171f8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x1e>
   171f8:	9801      	ldr	r0, [sp, #4]
   171fa:	0041      	lsls	r1, r0, #1
   171fc:	9100      	str	r1, [sp, #0]
   171fe:	e7ff      	b.n	17200 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x26>
   17200:	9802      	ldr	r0, [sp, #8]
   17202:	9900      	ldr	r1, [sp, #0]
   17204:	4308      	orrs	r0, r1
    }
   17206:	b004      	add	sp, #16
   17208:	bd80      	pop	{r7, pc}

0001720a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>:
    fn to_usize() -> usize {
   1720a:	b580      	push	{r7, lr}
   1720c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1720e:	f000 fac3 	bl	17798 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17212:	9003      	str	r0, [sp, #12]
   17214:	e7ff      	b.n	17216 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0xc>
   17216:	9803      	ldr	r0, [sp, #12]
   17218:	f000 fac4 	bl	177a4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1721c:	9002      	str	r0, [sp, #8]
   1721e:	e7ff      	b.n	17220 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x16>
   17220:	f000 f80b 	bl	1723a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>
   17224:	9001      	str	r0, [sp, #4]
   17226:	e7ff      	b.n	17228 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x1e>
   17228:	9801      	ldr	r0, [sp, #4]
   1722a:	0041      	lsls	r1, r0, #1
   1722c:	9100      	str	r1, [sp, #0]
   1722e:	e7ff      	b.n	17230 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x26>
   17230:	9802      	ldr	r0, [sp, #8]
   17232:	9900      	ldr	r1, [sp, #0]
   17234:	4308      	orrs	r0, r1
    }
   17236:	b004      	add	sp, #16
   17238:	bd80      	pop	{r7, pc}

0001723a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>:
    fn to_usize() -> usize {
   1723a:	b580      	push	{r7, lr}
   1723c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1723e:	f000 faab 	bl	17798 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17242:	9003      	str	r0, [sp, #12]
   17244:	e7ff      	b.n	17246 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0xc>
   17246:	9803      	ldr	r0, [sp, #12]
   17248:	f000 faac 	bl	177a4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1724c:	9002      	str	r0, [sp, #8]
   1724e:	e7ff      	b.n	17250 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x16>
   17250:	f000 f89b 	bl	1738a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>
   17254:	9001      	str	r0, [sp, #4]
   17256:	e7ff      	b.n	17258 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x1e>
   17258:	9801      	ldr	r0, [sp, #4]
   1725a:	0041      	lsls	r1, r0, #1
   1725c:	9100      	str	r1, [sp, #0]
   1725e:	e7ff      	b.n	17260 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x26>
   17260:	9802      	ldr	r0, [sp, #8]
   17262:	9900      	ldr	r1, [sp, #0]
   17264:	4308      	orrs	r0, r1
    }
   17266:	b004      	add	sp, #16
   17268:	bd80      	pop	{r7, pc}

0001726a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>:
    fn to_usize() -> usize {
   1726a:	b580      	push	{r7, lr}
   1726c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1726e:	f000 fa93 	bl	17798 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17272:	9003      	str	r0, [sp, #12]
   17274:	e7ff      	b.n	17276 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0xc>
   17276:	9803      	ldr	r0, [sp, #12]
   17278:	f000 fa94 	bl	177a4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1727c:	9002      	str	r0, [sp, #8]
   1727e:	e7ff      	b.n	17280 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x16>
   17280:	f7ff ff7b 	bl	1717a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>
   17284:	9001      	str	r0, [sp, #4]
   17286:	e7ff      	b.n	17288 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x1e>
   17288:	9801      	ldr	r0, [sp, #4]
   1728a:	0041      	lsls	r1, r0, #1
   1728c:	9100      	str	r1, [sp, #0]
   1728e:	e7ff      	b.n	17290 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x26>
   17290:	9802      	ldr	r0, [sp, #8]
   17292:	9900      	ldr	r1, [sp, #0]
   17294:	4308      	orrs	r0, r1
    }
   17296:	b004      	add	sp, #16
   17298:	bd80      	pop	{r7, pc}

0001729a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>:
    fn to_usize() -> usize {
   1729a:	b580      	push	{r7, lr}
   1729c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1729e:	f000 fa7b 	bl	17798 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   172a2:	9003      	str	r0, [sp, #12]
   172a4:	e7ff      	b.n	172a6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0xc>
   172a6:	9803      	ldr	r0, [sp, #12]
   172a8:	f000 fa7c 	bl	177a4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   172ac:	9002      	str	r0, [sp, #8]
   172ae:	e7ff      	b.n	172b0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x16>
   172b0:	f000 f823 	bl	172fa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>
   172b4:	9001      	str	r0, [sp, #4]
   172b6:	e7ff      	b.n	172b8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x1e>
   172b8:	9801      	ldr	r0, [sp, #4]
   172ba:	0041      	lsls	r1, r0, #1
   172bc:	9100      	str	r1, [sp, #0]
   172be:	e7ff      	b.n	172c0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x26>
   172c0:	9802      	ldr	r0, [sp, #8]
   172c2:	9900      	ldr	r1, [sp, #0]
   172c4:	4308      	orrs	r0, r1
    }
   172c6:	b004      	add	sp, #16
   172c8:	bd80      	pop	{r7, pc}

000172ca <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>:
    fn to_usize() -> usize {
   172ca:	b580      	push	{r7, lr}
   172cc:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   172ce:	f000 fa63 	bl	17798 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   172d2:	9003      	str	r0, [sp, #12]
   172d4:	e7ff      	b.n	172d6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0xc>
   172d6:	9803      	ldr	r0, [sp, #12]
   172d8:	f000 fa64 	bl	177a4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   172dc:	9002      	str	r0, [sp, #8]
   172de:	e7ff      	b.n	172e0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x16>
   172e0:	f000 f86b 	bl	173ba <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>
   172e4:	9001      	str	r0, [sp, #4]
   172e6:	e7ff      	b.n	172e8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x1e>
   172e8:	9801      	ldr	r0, [sp, #4]
   172ea:	0041      	lsls	r1, r0, #1
   172ec:	9100      	str	r1, [sp, #0]
   172ee:	e7ff      	b.n	172f0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x26>
   172f0:	9802      	ldr	r0, [sp, #8]
   172f2:	9900      	ldr	r1, [sp, #0]
   172f4:	4308      	orrs	r0, r1
    }
   172f6:	b004      	add	sp, #16
   172f8:	bd80      	pop	{r7, pc}

000172fa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>:
    fn to_usize() -> usize {
   172fa:	b580      	push	{r7, lr}
   172fc:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   172fe:	f000 fa4b 	bl	17798 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17302:	9003      	str	r0, [sp, #12]
   17304:	e7ff      	b.n	17306 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0xc>
   17306:	9803      	ldr	r0, [sp, #12]
   17308:	f000 fa4c 	bl	177a4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1730c:	9002      	str	r0, [sp, #8]
   1730e:	e7ff      	b.n	17310 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x16>
   17310:	f000 f823 	bl	1735a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>
   17314:	9001      	str	r0, [sp, #4]
   17316:	e7ff      	b.n	17318 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x1e>
   17318:	9801      	ldr	r0, [sp, #4]
   1731a:	0041      	lsls	r1, r0, #1
   1731c:	9100      	str	r1, [sp, #0]
   1731e:	e7ff      	b.n	17320 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x26>
   17320:	9802      	ldr	r0, [sp, #8]
   17322:	9900      	ldr	r1, [sp, #0]
   17324:	4308      	orrs	r0, r1
    }
   17326:	b004      	add	sp, #16
   17328:	bd80      	pop	{r7, pc}

0001732a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>:
    fn to_usize() -> usize {
   1732a:	b580      	push	{r7, lr}
   1732c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1732e:	f000 fa35 	bl	1779c <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>
   17332:	9003      	str	r0, [sp, #12]
   17334:	e7ff      	b.n	17336 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0xc>
   17336:	9803      	ldr	r0, [sp, #12]
   17338:	f000 fa34 	bl	177a4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1733c:	9002      	str	r0, [sp, #8]
   1733e:	e7ff      	b.n	17340 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x16>
   17340:	f000 fa2e 	bl	177a0 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>
   17344:	9001      	str	r0, [sp, #4]
   17346:	e7ff      	b.n	17348 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x1e>
   17348:	9801      	ldr	r0, [sp, #4]
   1734a:	0041      	lsls	r1, r0, #1
   1734c:	9100      	str	r1, [sp, #0]
   1734e:	e7ff      	b.n	17350 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x26>
   17350:	9802      	ldr	r0, [sp, #8]
   17352:	9900      	ldr	r1, [sp, #0]
   17354:	4308      	orrs	r0, r1
    }
   17356:	b004      	add	sp, #16
   17358:	bd80      	pop	{r7, pc}

0001735a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>:
    fn to_usize() -> usize {
   1735a:	b580      	push	{r7, lr}
   1735c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1735e:	f000 fa1b 	bl	17798 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17362:	9003      	str	r0, [sp, #12]
   17364:	e7ff      	b.n	17366 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0xc>
   17366:	9803      	ldr	r0, [sp, #12]
   17368:	f000 fa1c 	bl	177a4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1736c:	9002      	str	r0, [sp, #8]
   1736e:	e7ff      	b.n	17370 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x16>
   17370:	f7ff ff7b 	bl	1726a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>
   17374:	9001      	str	r0, [sp, #4]
   17376:	e7ff      	b.n	17378 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x1e>
   17378:	9801      	ldr	r0, [sp, #4]
   1737a:	0041      	lsls	r1, r0, #1
   1737c:	9100      	str	r1, [sp, #0]
   1737e:	e7ff      	b.n	17380 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x26>
   17380:	9802      	ldr	r0, [sp, #8]
   17382:	9900      	ldr	r1, [sp, #0]
   17384:	4308      	orrs	r0, r1
    }
   17386:	b004      	add	sp, #16
   17388:	bd80      	pop	{r7, pc}

0001738a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>:
    fn to_usize() -> usize {
   1738a:	b580      	push	{r7, lr}
   1738c:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1738e:	f000 fa03 	bl	17798 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17392:	9003      	str	r0, [sp, #12]
   17394:	e7ff      	b.n	17396 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0xc>
   17396:	9803      	ldr	r0, [sp, #12]
   17398:	f000 fa04 	bl	177a4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   1739c:	9002      	str	r0, [sp, #8]
   1739e:	e7ff      	b.n	173a0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x16>
   173a0:	f7ff ff03 	bl	171aa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>
   173a4:	9001      	str	r0, [sp, #4]
   173a6:	e7ff      	b.n	173a8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x1e>
   173a8:	9801      	ldr	r0, [sp, #4]
   173aa:	0041      	lsls	r1, r0, #1
   173ac:	9100      	str	r1, [sp, #0]
   173ae:	e7ff      	b.n	173b0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x26>
   173b0:	9802      	ldr	r0, [sp, #8]
   173b2:	9900      	ldr	r1, [sp, #0]
   173b4:	4308      	orrs	r0, r1
    }
   173b6:	b004      	add	sp, #16
   173b8:	bd80      	pop	{r7, pc}

000173ba <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>:
    fn to_usize() -> usize {
   173ba:	b580      	push	{r7, lr}
   173bc:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   173be:	f000 f9eb 	bl	17798 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   173c2:	9003      	str	r0, [sp, #12]
   173c4:	e7ff      	b.n	173c6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0xc>
   173c6:	9803      	ldr	r0, [sp, #12]
   173c8:	f000 f9ec 	bl	177a4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   173cc:	9002      	str	r0, [sp, #8]
   173ce:	e7ff      	b.n	173d0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x16>
   173d0:	f7ff ff1b 	bl	1720a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>
   173d4:	9001      	str	r0, [sp, #4]
   173d6:	e7ff      	b.n	173d8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x1e>
   173d8:	9801      	ldr	r0, [sp, #4]
   173da:	0041      	lsls	r1, r0, #1
   173dc:	9100      	str	r1, [sp, #0]
   173de:	e7ff      	b.n	173e0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x26>
   173e0:	9802      	ldr	r0, [sp, #8]
   173e2:	9900      	ldr	r1, [sp, #0]
   173e4:	4308      	orrs	r0, r1
    }
   173e6:	b004      	add	sp, #16
   173e8:	bd80      	pop	{r7, pc}

000173ea <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>:
    fn to_usize() -> usize {
   173ea:	b580      	push	{r7, lr}
   173ec:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   173ee:	f000 f9d3 	bl	17798 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   173f2:	9003      	str	r0, [sp, #12]
   173f4:	e7ff      	b.n	173f6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0xc>
   173f6:	9803      	ldr	r0, [sp, #12]
   173f8:	f000 f9d4 	bl	177a4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   173fc:	9002      	str	r0, [sp, #8]
   173fe:	e7ff      	b.n	17400 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x16>
   17400:	f7ff ff63 	bl	172ca <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>
   17404:	9001      	str	r0, [sp, #4]
   17406:	e7ff      	b.n	17408 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x1e>
   17408:	9801      	ldr	r0, [sp, #4]
   1740a:	0041      	lsls	r1, r0, #1
   1740c:	9100      	str	r1, [sp, #0]
   1740e:	e7ff      	b.n	17410 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x26>
   17410:	9802      	ldr	r0, [sp, #8]
   17412:	9900      	ldr	r1, [sp, #0]
   17414:	4308      	orrs	r0, r1
    }
   17416:	b004      	add	sp, #16
   17418:	bd80      	pop	{r7, pc}

0001741a <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>:
impl Bit for B0 {
    const U8: u8 = 0;
    const BOOL: bool = false;

    #[inline]
    fn to_u8() -> u8 {
   1741a:	2000      	movs	r0, #0
        0
    }
   1741c:	4770      	bx	lr

0001741e <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>:
impl Bit for B1 {
    const U8: u8 = 1;
    const BOOL: bool = true;

    #[inline]
    fn to_u8() -> u8 {
   1741e:	2001      	movs	r0, #1
        1
    }
   17420:	4770      	bx	lr

00017422 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>:
   17422:	b580      	push	{r7, lr}
   17424:	b084      	sub	sp, #16
   17426:	9002      	str	r0, [sp, #8]
   17428:	9103      	str	r1, [sp, #12]
   1742a:	f000 f80f 	bl	1744c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>
   1742e:	9001      	str	r0, [sp, #4]
   17430:	e7ff      	b.n	17432 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E+0x10>
   17432:	9801      	ldr	r0, [sp, #4]
   17434:	b004      	add	sp, #16
   17436:	bd80      	pop	{r7, pc}

00017438 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>:
   17438:	b580      	push	{r7, lr}
   1743a:	b082      	sub	sp, #8
   1743c:	9001      	str	r0, [sp, #4]
   1743e:	f000 f873 	bl	17528 <_ZN4core3ptr4read17h27a035d1812d8297E>
   17442:	9000      	str	r0, [sp, #0]
   17444:	e7ff      	b.n	17446 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E+0xe>
   17446:	9800      	ldr	r0, [sp, #0]
   17448:	b002      	add	sp, #8
   1744a:	bd80      	pop	{r7, pc}

0001744c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>:
   1744c:	b084      	sub	sp, #16
   1744e:	9001      	str	r0, [sp, #4]
   17450:	9102      	str	r1, [sp, #8]
   17452:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   17456:	9003      	str	r0, [sp, #12]
   17458:	9803      	ldr	r0, [sp, #12]
   1745a:	9000      	str	r0, [sp, #0]
   1745c:	e7ff      	b.n	1745e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE+0x12>
   1745e:	9800      	ldr	r0, [sp, #0]
   17460:	b004      	add	sp, #16
   17462:	4770      	bx	lr

00017464 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>:
   17464:	b082      	sub	sp, #8
   17466:	9001      	str	r0, [sp, #4]
   17468:	9000      	str	r0, [sp, #0]
   1746a:	e7ff      	b.n	1746c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E+0x8>
   1746c:	9800      	ldr	r0, [sp, #0]
   1746e:	fab0 f180 	clz	r1, r0
   17472:	0948      	lsrs	r0, r1, #5
   17474:	b002      	add	sp, #8
   17476:	4770      	bx	lr

00017478 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE>:
   17478:	b580      	push	{r7, lr}
   1747a:	b088      	sub	sp, #32
   1747c:	9006      	str	r0, [sp, #24]
   1747e:	9107      	str	r1, [sp, #28]
   17480:	9004      	str	r0, [sp, #16]
   17482:	4608      	mov	r0, r1
   17484:	9103      	str	r1, [sp, #12]
   17486:	f001 f948 	bl	1871a <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1748a:	9002      	str	r0, [sp, #8]
   1748c:	e7ff      	b.n	1748e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x16>
   1748e:	9802      	ldr	r0, [sp, #8]
   17490:	07c1      	lsls	r1, r0, #31
   17492:	2900      	cmp	r1, #0
   17494:	d105      	bne.n	174a2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x2a>
   17496:	e7ff      	b.n	17498 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x20>
   17498:	9803      	ldr	r0, [sp, #12]
   1749a:	f001 f942 	bl	18722 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1749e:	9001      	str	r0, [sp, #4]
   174a0:	e007      	b.n	174b2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x3a>
   174a2:	9804      	ldr	r0, [sp, #16]
   174a4:	9903      	ldr	r1, [sp, #12]
   174a6:	f001 fea4 	bl	191f2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>
   174aa:	f88d 0017 	strb.w	r0, [sp, #23]
   174ae:	e7ff      	b.n	174b0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x38>
   174b0:	e015      	b.n	174de <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   174b2:	9801      	ldr	r0, [sp, #4]
   174b4:	07c1      	lsls	r1, r0, #31
   174b6:	2900      	cmp	r1, #0
   174b8:	d107      	bne.n	174ca <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x52>
   174ba:	e7ff      	b.n	174bc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x44>
   174bc:	9804      	ldr	r0, [sp, #16]
   174be:	9903      	ldr	r1, [sp, #12]
   174c0:	f002 f868 	bl	19594 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>
   174c4:	f88d 0017 	strb.w	r0, [sp, #23]
   174c8:	e007      	b.n	174da <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x62>
   174ca:	9804      	ldr	r0, [sp, #16]
   174cc:	9903      	ldr	r1, [sp, #12]
   174ce:	f001 feef 	bl	192b0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>
   174d2:	f88d 0017 	strb.w	r0, [sp, #23]
   174d6:	e7ff      	b.n	174d8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x60>
   174d8:	e000      	b.n	174dc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   174da:	e7ff      	b.n	174dc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   174dc:	e7ff      	b.n	174de <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   174de:	f89d 0017 	ldrb.w	r0, [sp, #23]
   174e2:	b008      	add	sp, #32
   174e4:	bd80      	pop	{r7, pc}

000174e6 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>:
   174e6:	b081      	sub	sp, #4
   174e8:	4601      	mov	r1, r0
   174ea:	f88d 0003 	strb.w	r0, [sp, #3]
   174ee:	b2c0      	uxtb	r0, r0
   174f0:	b001      	add	sp, #4
   174f2:	4770      	bx	lr

000174f4 <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>:
   174f4:	b086      	sub	sp, #24
   174f6:	9004      	str	r0, [sp, #16]
   174f8:	9105      	str	r1, [sp, #20]
   174fa:	9002      	str	r0, [sp, #8]
   174fc:	9103      	str	r1, [sp, #12]
   174fe:	9802      	ldr	r0, [sp, #8]
   17500:	9903      	ldr	r1, [sp, #12]
   17502:	9000      	str	r0, [sp, #0]
   17504:	9101      	str	r1, [sp, #4]
   17506:	9800      	ldr	r0, [sp, #0]
   17508:	9901      	ldr	r1, [sp, #4]
   1750a:	b006      	add	sp, #24
   1750c:	4770      	bx	lr

0001750e <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>:
   1750e:	b086      	sub	sp, #24
   17510:	9004      	str	r0, [sp, #16]
   17512:	9105      	str	r1, [sp, #20]
   17514:	9002      	str	r0, [sp, #8]
   17516:	9103      	str	r1, [sp, #12]
   17518:	9802      	ldr	r0, [sp, #8]
   1751a:	9903      	ldr	r1, [sp, #12]
   1751c:	9000      	str	r0, [sp, #0]
   1751e:	9101      	str	r1, [sp, #4]
   17520:	9800      	ldr	r0, [sp, #0]
   17522:	9901      	ldr	r1, [sp, #4]
   17524:	b006      	add	sp, #24
   17526:	4770      	bx	lr

00017528 <_ZN4core3ptr4read17h27a035d1812d8297E>:
   17528:	b580      	push	{r7, lr}
   1752a:	b088      	sub	sp, #32
   1752c:	9003      	str	r0, [sp, #12]
   1752e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   17532:	f8ad 100a 	strh.w	r1, [sp, #10]
   17536:	9001      	str	r0, [sp, #4]
   17538:	e7ff      	b.n	1753a <_ZN4core3ptr4read17h27a035d1812d8297E+0x12>
   1753a:	f10d 000a 	add.w	r0, sp, #10
   1753e:	9006      	str	r0, [sp, #24]
   17540:	9007      	str	r0, [sp, #28]
   17542:	e7ff      	b.n	17544 <_ZN4core3ptr4read17h27a035d1812d8297E+0x1c>
   17544:	f10d 010a 	add.w	r1, sp, #10
   17548:	2201      	movs	r2, #1
   1754a:	9801      	ldr	r0, [sp, #4]
   1754c:	f000 f931 	bl	177b2 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>
   17550:	e7ff      	b.n	17552 <_ZN4core3ptr4read17h27a035d1812d8297E+0x2a>
   17552:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   17556:	4601      	mov	r1, r0
   17558:	f8ad 0014 	strh.w	r0, [sp, #20]
   1755c:	f8ad 0016 	strh.w	r0, [sp, #22]
   17560:	9100      	str	r1, [sp, #0]
   17562:	e7ff      	b.n	17564 <_ZN4core3ptr4read17h27a035d1812d8297E+0x3c>
   17564:	9800      	ldr	r0, [sp, #0]
   17566:	b008      	add	sp, #32
   17568:	bd80      	pop	{r7, pc}

0001756a <_ZN4core3ptr5write17h147d4643d861e927E>:
   1756a:	b082      	sub	sp, #8
   1756c:	460a      	mov	r2, r1
   1756e:	9000      	str	r0, [sp, #0]
   17570:	f8ad 1006 	strh.w	r1, [sp, #6]
   17574:	8001      	strh	r1, [r0, #0]
   17576:	b002      	add	sp, #8
   17578:	4770      	bx	lr

0001757a <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE>:
   1757a:	b580      	push	{r7, lr}
   1757c:	b08c      	sub	sp, #48	; 0x30
   1757e:	9005      	str	r0, [sp, #20]
   17580:	9106      	str	r1, [sp, #24]
   17582:	9207      	str	r2, [sp, #28]
   17584:	9008      	str	r0, [sp, #32]
   17586:	9109      	str	r1, [sp, #36]	; 0x24
   17588:	2301      	movs	r3, #1
   1758a:	930b      	str	r3, [sp, #44]	; 0x2c
   1758c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1758e:	9204      	str	r2, [sp, #16]
   17590:	9103      	str	r1, [sp, #12]
   17592:	9002      	str	r0, [sp, #8]
   17594:	9301      	str	r3, [sp, #4]
   17596:	e7ff      	b.n	17598 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE+0x1e>
   17598:	9801      	ldr	r0, [sp, #4]
   1759a:	9904      	ldr	r1, [sp, #16]
   1759c:	fb00 f201 	mul.w	r2, r0, r1
   175a0:	920a      	str	r2, [sp, #40]	; 0x28
   175a2:	9802      	ldr	r0, [sp, #8]
   175a4:	9903      	ldr	r1, [sp, #12]
   175a6:	f000 f850 	bl	1764a <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE>
   175aa:	e7ff      	b.n	175ac <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE+0x32>
   175ac:	b00c      	add	sp, #48	; 0x30
   175ae:	bd80      	pop	{r7, pc}

000175b0 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE>:
   175b0:	b580      	push	{r7, lr}
   175b2:	b088      	sub	sp, #32
   175b4:	9004      	str	r0, [sp, #16]
   175b6:	9105      	str	r1, [sp, #20]
   175b8:	2201      	movs	r2, #1
   175ba:	9207      	str	r2, [sp, #28]
   175bc:	9a07      	ldr	r2, [sp, #28]
   175be:	9103      	str	r1, [sp, #12]
   175c0:	9002      	str	r0, [sp, #8]
   175c2:	9201      	str	r2, [sp, #4]
   175c4:	e7ff      	b.n	175c6 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x16>
   175c6:	9801      	ldr	r0, [sp, #4]
   175c8:	2820      	cmp	r0, #32
   175ca:	d306      	bcc.n	175da <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x2a>
   175cc:	e7ff      	b.n	175ce <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x1e>
   175ce:	2201      	movs	r2, #1
   175d0:	9802      	ldr	r0, [sp, #8]
   175d2:	9903      	ldr	r1, [sp, #12]
   175d4:	f7ff ffd1 	bl	1757a <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE>
   175d8:	e013      	b.n	17602 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x52>
   175da:	9802      	ldr	r0, [sp, #8]
   175dc:	f000 f814 	bl	17608 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE>
   175e0:	4601      	mov	r1, r0
   175e2:	f88d 001b 	strb.w	r0, [sp, #27]
   175e6:	9100      	str	r1, [sp, #0]
   175e8:	e7ff      	b.n	175ea <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x3a>
   175ea:	2201      	movs	r2, #1
   175ec:	9803      	ldr	r0, [sp, #12]
   175ee:	9902      	ldr	r1, [sp, #8]
   175f0:	f7fa fabf 	bl	11b72 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   175f4:	e7ff      	b.n	175f6 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x46>
   175f6:	9803      	ldr	r0, [sp, #12]
   175f8:	9900      	ldr	r1, [sp, #0]
   175fa:	f7f1 fd51 	bl	90a0 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   175fe:	e7ff      	b.n	17600 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x50>
   17600:	e000      	b.n	17604 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x54>
   17602:	e7ff      	b.n	17604 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x54>
   17604:	b008      	add	sp, #32
   17606:	bd80      	pop	{r7, pc}

00017608 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE>:
   17608:	b580      	push	{r7, lr}
   1760a:	b088      	sub	sp, #32
   1760c:	9004      	str	r0, [sp, #16]
   1760e:	f89d 1015 	ldrb.w	r1, [sp, #21]
   17612:	f88d 100f 	strb.w	r1, [sp, #15]
   17616:	9002      	str	r0, [sp, #8]
   17618:	e7ff      	b.n	1761a <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x12>
   1761a:	f10d 000f 	add.w	r0, sp, #15
   1761e:	9006      	str	r0, [sp, #24]
   17620:	9007      	str	r0, [sp, #28]
   17622:	e7ff      	b.n	17624 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x1c>
   17624:	f10d 010f 	add.w	r1, sp, #15
   17628:	2201      	movs	r2, #1
   1762a:	9802      	ldr	r0, [sp, #8]
   1762c:	f7fa faa1 	bl	11b72 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   17630:	e7ff      	b.n	17632 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x2a>
   17632:	f89d 000f 	ldrb.w	r0, [sp, #15]
   17636:	4601      	mov	r1, r0
   17638:	f88d 0016 	strb.w	r0, [sp, #22]
   1763c:	f88d 0017 	strb.w	r0, [sp, #23]
   17640:	9101      	str	r1, [sp, #4]
   17642:	e7ff      	b.n	17644 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x3c>
   17644:	9801      	ldr	r0, [sp, #4]
   17646:	b008      	add	sp, #32
   17648:	bd80      	pop	{r7, pc}

0001764a <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE>:
   1764a:	b5d0      	push	{r4, r6, r7, lr}
   1764c:	af02      	add	r7, sp, #8
   1764e:	b0b4      	sub	sp, #208	; 0xd0
   17650:	466c      	mov	r4, sp
   17652:	f36f 0404 	bfc	r4, #0, #5
   17656:	46a5      	mov	sp, r4
   17658:	9024      	str	r0, [sp, #144]	; 0x90
   1765a:	9125      	str	r1, [sp, #148]	; 0x94
   1765c:	9226      	str	r2, [sp, #152]	; 0x98
   1765e:	2320      	movs	r3, #32
   17660:	932f      	str	r3, [sp, #188]	; 0xbc
   17662:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   17664:	9327      	str	r3, [sp, #156]	; 0x9c
   17666:	920e      	str	r2, [sp, #56]	; 0x38
   17668:	910d      	str	r1, [sp, #52]	; 0x34
   1766a:	900c      	str	r0, [sp, #48]	; 0x30
   1766c:	930b      	str	r3, [sp, #44]	; 0x2c
   1766e:	e7ff      	b.n	17670 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x26>
   17670:	2000      	movs	r0, #0
   17672:	900f      	str	r0, [sp, #60]	; 0x3c
   17674:	e7ff      	b.n	17676 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x2c>
   17676:	980f      	ldr	r0, [sp, #60]	; 0x3c
   17678:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1767a:	4408      	add	r0, r1
   1767c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1767e:	4290      	cmp	r0, r2
   17680:	d905      	bls.n	1768e <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x44>
   17682:	e7ff      	b.n	17684 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x3a>
   17684:	980f      	ldr	r0, [sp, #60]	; 0x3c
   17686:	990e      	ldr	r1, [sp, #56]	; 0x38
   17688:	4288      	cmp	r0, r1
   1768a:	d334      	bcc.n	176f6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xac>
   1768c:	e067      	b.n	1775e <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x114>
   1768e:	e7ff      	b.n	17690 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x46>
   17690:	a810      	add	r0, sp, #64	; 0x40
   17692:	9032      	str	r0, [sp, #200]	; 0xc8
   17694:	9033      	str	r0, [sp, #204]	; 0xcc
   17696:	e7ff      	b.n	17698 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x4e>
   17698:	a810      	add	r0, sp, #64	; 0x40
   1769a:	4601      	mov	r1, r0
   1769c:	9028      	str	r0, [sp, #160]	; 0xa0
   1769e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   176a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   176a2:	900a      	str	r0, [sp, #40]	; 0x28
   176a4:	4610      	mov	r0, r2
   176a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   176a8:	9109      	str	r1, [sp, #36]	; 0x24
   176aa:	4619      	mov	r1, r3
   176ac:	f7fa fbc5 	bl	11e3a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   176b0:	4601      	mov	r1, r0
   176b2:	9029      	str	r0, [sp, #164]	; 0xa4
   176b4:	9108      	str	r1, [sp, #32]
   176b6:	e7ff      	b.n	176b8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x6e>
   176b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   176ba:	980d      	ldr	r0, [sp, #52]	; 0x34
   176bc:	f7fa fbbd 	bl	11e3a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   176c0:	4601      	mov	r1, r0
   176c2:	902a      	str	r0, [sp, #168]	; 0xa8
   176c4:	9107      	str	r1, [sp, #28]
   176c6:	e7ff      	b.n	176c8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x7e>
   176c8:	9808      	ldr	r0, [sp, #32]
   176ca:	9909      	ldr	r1, [sp, #36]	; 0x24
   176cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   176ce:	f7fa fa50 	bl	11b72 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   176d2:	e7ff      	b.n	176d4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x8a>
   176d4:	9807      	ldr	r0, [sp, #28]
   176d6:	9908      	ldr	r1, [sp, #32]
   176d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   176da:	f7fa fa4a 	bl	11b72 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   176de:	e7ff      	b.n	176e0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x96>
   176e0:	9809      	ldr	r0, [sp, #36]	; 0x24
   176e2:	9907      	ldr	r1, [sp, #28]
   176e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   176e6:	f7fa fa44 	bl	11b72 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   176ea:	e7ff      	b.n	176ec <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xa2>
   176ec:	980f      	ldr	r0, [sp, #60]	; 0x3c
   176ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
   176f0:	4408      	add	r0, r1
   176f2:	900f      	str	r0, [sp, #60]	; 0x3c
   176f4:	e7bf      	b.n	17676 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x2c>
   176f6:	e7ff      	b.n	176f8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xae>
   176f8:	980f      	ldr	r0, [sp, #60]	; 0x3c
   176fa:	990e      	ldr	r1, [sp, #56]	; 0x38
   176fc:	1a08      	subs	r0, r1, r0
   176fe:	4602      	mov	r2, r0
   17700:	902b      	str	r0, [sp, #172]	; 0xac
   17702:	a81c      	add	r0, sp, #112	; 0x70
   17704:	9030      	str	r0, [sp, #192]	; 0xc0
   17706:	9031      	str	r0, [sp, #196]	; 0xc4
   17708:	9206      	str	r2, [sp, #24]
   1770a:	9005      	str	r0, [sp, #20]
   1770c:	e7ff      	b.n	1770e <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xc4>
   1770e:	9805      	ldr	r0, [sp, #20]
   17710:	9905      	ldr	r1, [sp, #20]
   17712:	912c      	str	r1, [sp, #176]	; 0xb0
   17714:	990f      	ldr	r1, [sp, #60]	; 0x3c
   17716:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   17718:	9004      	str	r0, [sp, #16]
   1771a:	4610      	mov	r0, r2
   1771c:	f7fa fb8d 	bl	11e3a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   17720:	4601      	mov	r1, r0
   17722:	902d      	str	r0, [sp, #180]	; 0xb4
   17724:	9103      	str	r1, [sp, #12]
   17726:	e7ff      	b.n	17728 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xde>
   17728:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1772a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1772c:	f7fa fb85 	bl	11e3a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   17730:	4601      	mov	r1, r0
   17732:	902e      	str	r0, [sp, #184]	; 0xb8
   17734:	9102      	str	r1, [sp, #8]
   17736:	e7ff      	b.n	17738 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xee>
   17738:	9803      	ldr	r0, [sp, #12]
   1773a:	9904      	ldr	r1, [sp, #16]
   1773c:	9a06      	ldr	r2, [sp, #24]
   1773e:	f7fa fa18 	bl	11b72 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   17742:	e7ff      	b.n	17744 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xfa>
   17744:	9802      	ldr	r0, [sp, #8]
   17746:	9903      	ldr	r1, [sp, #12]
   17748:	9a06      	ldr	r2, [sp, #24]
   1774a:	f7fa fa12 	bl	11b72 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1774e:	e7ff      	b.n	17750 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x106>
   17750:	9804      	ldr	r0, [sp, #16]
   17752:	9902      	ldr	r1, [sp, #8]
   17754:	9a06      	ldr	r2, [sp, #24]
   17756:	f7fa fa0c 	bl	11b72 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1775a:	e7ff      	b.n	1775c <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x112>
   1775c:	e7ff      	b.n	1775e <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x114>
   1775e:	f1a7 0408 	sub.w	r4, r7, #8
   17762:	46a5      	mov	sp, r4
   17764:	bdd0      	pop	{r4, r6, r7, pc}

00017766 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE>:
   17766:	b083      	sub	sp, #12
   17768:	9002      	str	r0, [sp, #8]
   1776a:	9000      	str	r0, [sp, #0]
   1776c:	e7ff      	b.n	1776e <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x8>
   1776e:	9800      	ldr	r0, [sp, #0]
   17770:	28ff      	cmp	r0, #255	; 0xff
   17772:	d807      	bhi.n	17784 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x1e>
   17774:	e7ff      	b.n	17776 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x10>
   17776:	9800      	ldr	r0, [sp, #0]
   17778:	f88d 0005 	strb.w	r0, [sp, #5]
   1777c:	2100      	movs	r1, #0
   1777e:	f88d 1004 	strb.w	r1, [sp, #4]
   17782:	e003      	b.n	1778c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x26>
   17784:	2001      	movs	r0, #1
   17786:	f88d 0004 	strb.w	r0, [sp, #4]
   1778a:	e7ff      	b.n	1778c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x26>
   1778c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   17790:	f89d 1005 	ldrb.w	r1, [sp, #5]
   17794:	b003      	add	sp, #12
   17796:	4770      	bx	lr

00017798 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>:
    fn to_u8() -> u8 {
   17798:	2000      	movs	r0, #0
    }
   1779a:	4770      	bx	lr

0001779c <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>:
    fn to_u8() -> u8 {
   1779c:	2001      	movs	r0, #1
    }
   1779e:	4770      	bx	lr

000177a0 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>:
    fn to_usize() -> usize {
   177a0:	2000      	movs	r0, #0
    }
   177a2:	4770      	bx	lr

000177a4 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>:
   177a4:	b081      	sub	sp, #4
   177a6:	4601      	mov	r1, r0
   177a8:	f88d 0003 	strb.w	r0, [sp, #3]
   177ac:	b2c0      	uxtb	r0, r0
   177ae:	b001      	add	sp, #4
   177b0:	4770      	bx	lr

000177b2 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>:
   177b2:	b580      	push	{r7, lr}
   177b4:	b084      	sub	sp, #16
   177b6:	9001      	str	r0, [sp, #4]
   177b8:	9102      	str	r1, [sp, #8]
   177ba:	9203      	str	r2, [sp, #12]
   177bc:	0052      	lsls	r2, r2, #1
   177be:	9000      	str	r0, [sp, #0]
   177c0:	4608      	mov	r0, r1
   177c2:	9900      	ldr	r1, [sp, #0]
   177c4:	f006 fcdc 	bl	1e180 <__aeabi_memcpy>
   177c8:	e7ff      	b.n	177ca <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E+0x18>
   177ca:	b004      	add	sp, #16
   177cc:	bd80      	pop	{r7, pc}

000177ce <_ZN4core3ptr13drop_in_place17h000c7c147ade2111E>:
   177ce:	4770      	bx	lr

000177d0 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE>:
   177d0:	b5b0      	push	{r4, r5, r7, lr}
   177d2:	b086      	sub	sp, #24
   177d4:	460c      	mov	r4, r1
   177d6:	4605      	mov	r5, r0
   177d8:	f001 fb87 	bl	18eea <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>
   177dc:	b9a8      	cbnz	r0, 1780a <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x3a>
   177de:	f640 7354 	movw	r3, #3924	; 0xf54
   177e2:	2200      	movs	r2, #0
   177e4:	f2c0 0302 	movt	r3, #2
   177e8:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   177ec:	9205      	str	r2, [sp, #20]
   177ee:	9304      	str	r3, [sp, #16]
   177f0:	e9cd 2202 	strd	r2, r2, [sp, #8]
   177f4:	2201      	movs	r2, #1
   177f6:	9201      	str	r2, [sp, #4]
   177f8:	f241 0218 	movw	r2, #4120	; 0x1018
   177fc:	f2c0 0202 	movt	r2, #2
   17800:	9200      	str	r2, [sp, #0]
   17802:	466a      	mov	r2, sp
   17804:	f000 fbe0 	bl	17fc8 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   17808:	b110      	cbz	r0, 17810 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x40>
   1780a:	2001      	movs	r0, #1
   1780c:	b006      	add	sp, #24
   1780e:	bdb0      	pop	{r4, r5, r7, pc}
   17810:	1d28      	adds	r0, r5, #4
   17812:	4621      	mov	r1, r4
   17814:	b006      	add	sp, #24
   17816:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
   1781a:	f001 bb66 	b.w	18eea <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>

0001781e <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE>:
   1781e:	f642 20e1 	movw	r0, #10977	; 0x2ae1
   17822:	f243 6134 	movw	r1, #13876	; 0x3634
   17826:	f6c9 405d 	movt	r0, #40029	; 0x9c5d
   1782a:	f6cd 0131 	movt	r1, #55345	; 0xd831
   1782e:	4770      	bx	lr

00017830 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>:
   17830:	b570      	push	{r4, r5, r6, lr}
   17832:	460e      	mov	r6, r1
   17834:	3909      	subs	r1, #9
   17836:	4604      	mov	r4, r0
   17838:	291e      	cmp	r1, #30
   1783a:	d818      	bhi.n	1786e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x3e>
   1783c:	2002      	movs	r0, #2
   1783e:	2574      	movs	r5, #116	; 0x74
   17840:	e8df f001 	tbb	[pc, r1]
   17844:	1c1c1019 	.word	0x1c1c1019
   17848:	1c1c1c29 	.word	0x1c1c1c29
   1784c:	1c1c1c1c 	.word	0x1c1c1c1c
   17850:	1c1c1c1c 	.word	0x1c1c1c1c
   17854:	1c1c1c1c 	.word	0x1c1c1c1c
   17858:	1c1c1c1c 	.word	0x1c1c1c1c
   1785c:	1c1c171c 	.word	0x1c1c171c
   17860:	00171c1c 	.word	0x00171c1c
   17864:	2002      	movs	r0, #2
   17866:	256e      	movs	r5, #110	; 0x6e
   17868:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   1786c:	bd70      	pop	{r4, r5, r6, pc}
   1786e:	2e5c      	cmp	r6, #92	; 0x5c
   17870:	d104      	bne.n	1787c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x4c>
   17872:	2002      	movs	r0, #2
   17874:	4635      	mov	r5, r6
   17876:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   1787a:	bd70      	pop	{r4, r5, r6, pc}
   1787c:	2a00      	cmp	r2, #0
   1787e:	d040      	beq.n	17902 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   17880:	f3c6 1083 	ubfx	r0, r6, #6, #4
   17884:	0ab1      	lsrs	r1, r6, #10
   17886:	f5b6 3ff6 	cmp.w	r6, #125952	; 0x1ec00
   1788a:	d309      	bcc.n	178a0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x70>
   1788c:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
   17890:	d137      	bne.n	17902 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   17892:	211e      	movs	r1, #30
   17894:	e00b      	b.n	178ae <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x7e>
   17896:	2002      	movs	r0, #2
   17898:	2572      	movs	r5, #114	; 0x72
   1789a:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   1789e:	bd70      	pop	{r4, r5, r6, pc}
   178a0:	f641 228c 	movw	r2, #6796	; 0x1a8c
   178a4:	f2c0 0202 	movt	r2, #2
   178a8:	5c51      	ldrb	r1, [r2, r1]
   178aa:	291e      	cmp	r1, #30
   178ac:	d842      	bhi.n	17934 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x104>
   178ae:	f641 3207 	movw	r2, #6919	; 0x1b07
   178b2:	f2c0 0202 	movt	r2, #2
   178b6:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   178ba:	5c09      	ldrb	r1, [r1, r0]
   178bc:	298b      	cmp	r1, #139	; 0x8b
   178be:	d231      	bcs.n	17924 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xf4>
   178c0:	f641 40f8 	movw	r0, #7416	; 0x1cf8
   178c4:	2301      	movs	r3, #1
   178c6:	f2c0 0002 	movt	r0, #2
   178ca:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   178ce:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
   178d2:	f006 013f 	and.w	r1, r6, #63	; 0x3f
   178d6:	f8d2 c004 	ldr.w	ip, [r2, #4]
   178da:	fa03 f501 	lsl.w	r5, r3, r1
   178de:	f1b1 0220 	subs.w	r2, r1, #32
   178e2:	f1c1 0120 	rsb	r1, r1, #32
   178e6:	bf58      	it	pl
   178e8:	2500      	movpl	r5, #0
   178ea:	2a00      	cmp	r2, #0
   178ec:	ea00 0005 	and.w	r0, r0, r5
   178f0:	fa23 f101 	lsr.w	r1, r3, r1
   178f4:	bf58      	it	pl
   178f6:	fa03 f102 	lslpl.w	r1, r3, r2
   178fa:	ea01 010c 	and.w	r1, r1, ip
   178fe:	4308      	orrs	r0, r1
   17900:	d105      	bne.n	1790e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   17902:	4630      	mov	r0, r6
   17904:	f001 f9a5 	bl	18c52 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>
   17908:	b108      	cbz	r0, 1790e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   1790a:	2001      	movs	r0, #1
   1790c:	e7b2      	b.n	17874 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   1790e:	f046 0001 	orr.w	r0, r6, #1
   17912:	2107      	movs	r1, #7
   17914:	fab0 f080 	clz	r0, r0
   17918:	f04f 0e05 	mov.w	lr, #5
   1791c:	ea81 0c90 	eor.w	ip, r1, r0, lsr #2
   17920:	2003      	movs	r0, #3
   17922:	e7a7      	b.n	17874 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   17924:	f641 207c 	movw	r0, #6780	; 0x1a7c
   17928:	228b      	movs	r2, #139	; 0x8b
   1792a:	f2c0 0002 	movt	r0, #2
   1792e:	f000 f869 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   17932:	defe      	udf	#254	; 0xfe
   17934:	f641 206c 	movw	r0, #6764	; 0x1a6c
   17938:	221f      	movs	r2, #31
   1793a:	f2c0 0002 	movt	r0, #2
   1793e:	f000 f861 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   17942:	defe      	udf	#254	; 0xfe

00017944 <_ZN4core6option13expect_failed17had6579abaad447b4E>:
   17944:	b08a      	sub	sp, #40	; 0x28
   17946:	e9cd 0100 	strd	r0, r1, [sp]
   1794a:	2001      	movs	r0, #1
   1794c:	a908      	add	r1, sp, #32
   1794e:	9007      	str	r0, [sp, #28]
   17950:	9106      	str	r1, [sp, #24]
   17952:	2100      	movs	r1, #0
   17954:	9105      	str	r1, [sp, #20]
   17956:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1795a:	f241 101c 	movw	r0, #4380	; 0x111c
   1795e:	f2c0 0002 	movt	r0, #2
   17962:	4611      	mov	r1, r2
   17964:	9002      	str	r0, [sp, #8]
   17966:	f649 0047 	movw	r0, #38983	; 0x9847
   1796a:	f2c0 0001 	movt	r0, #1
   1796e:	9009      	str	r0, [sp, #36]	; 0x24
   17970:	4668      	mov	r0, sp
   17972:	9008      	str	r0, [sp, #32]
   17974:	a802      	add	r0, sp, #8
   17976:	f000 f865 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1797a:	defe      	udf	#254	; 0xfe

0001797c <_ZN4core6option18expect_none_failed17h54d938081af97677E>:
   1797c:	b08e      	sub	sp, #56	; 0x38
   1797e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   17982:	2002      	movs	r0, #2
   17984:	a90a      	add	r1, sp, #40	; 0x28
   17986:	9009      	str	r0, [sp, #36]	; 0x24
   17988:	9108      	str	r1, [sp, #32]
   1798a:	2100      	movs	r1, #0
   1798c:	9107      	str	r1, [sp, #28]
   1798e:	e9cd 0105 	strd	r0, r1, [sp, #20]
   17992:	f241 1028 	movw	r0, #4392	; 0x1128
   17996:	f2c0 0002 	movt	r0, #2
   1799a:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   1799e:	9004      	str	r0, [sp, #16]
   179a0:	f649 003d 	movw	r0, #38973	; 0x983d
   179a4:	f2c0 0001 	movt	r0, #1
   179a8:	900d      	str	r0, [sp, #52]	; 0x34
   179aa:	a802      	add	r0, sp, #8
   179ac:	900c      	str	r0, [sp, #48]	; 0x30
   179ae:	f649 0047 	movw	r0, #38983	; 0x9847
   179b2:	f2c0 0001 	movt	r0, #1
   179b6:	4661      	mov	r1, ip
   179b8:	900b      	str	r0, [sp, #44]	; 0x2c
   179ba:	4668      	mov	r0, sp
   179bc:	900a      	str	r0, [sp, #40]	; 0x28
   179be:	a804      	add	r0, sp, #16
   179c0:	f000 f840 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   179c4:	defe      	udf	#254	; 0xfe

000179c6 <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>:
   179c6:	68c0      	ldr	r0, [r0, #12]
   179c8:	4770      	bx	lr

000179ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>:
   179ca:	4770      	bx	lr

000179cc <_ZN4core5panic8Location4file17h61e77cb122865fdbE>:
   179cc:	e9d0 2100 	ldrd	r2, r1, [r0]
   179d0:	4610      	mov	r0, r2
   179d2:	4770      	bx	lr

000179d4 <_ZN4core5panic8Location4line17h650a566d9637c91dE>:
   179d4:	6880      	ldr	r0, [r0, #8]
   179d6:	4770      	bx	lr

000179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>:
   179d8:	b088      	sub	sp, #32
   179da:	4694      	mov	ip, r2
   179dc:	f640 7254 	movw	r2, #3924	; 0xf54
   179e0:	2300      	movs	r3, #0
   179e2:	f2c0 0202 	movt	r2, #2
   179e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
   179ea:	4668      	mov	r0, sp
   179ec:	9305      	str	r3, [sp, #20]
   179ee:	4661      	mov	r1, ip
   179f0:	9204      	str	r2, [sp, #16]
   179f2:	2201      	movs	r2, #1
   179f4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   179f8:	9201      	str	r2, [sp, #4]
   179fa:	aa06      	add	r2, sp, #24
   179fc:	9200      	str	r2, [sp, #0]
   179fe:	f000 f821 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17a02:	defe      	udf	#254	; 0xfe

00017a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>:
   17a04:	b08c      	sub	sp, #48	; 0x30
   17a06:	4603      	mov	r3, r0
   17a08:	e9cd 1200 	strd	r1, r2, [sp]
   17a0c:	2002      	movs	r0, #2
   17a0e:	a908      	add	r1, sp, #32
   17a10:	9007      	str	r0, [sp, #28]
   17a12:	9106      	str	r1, [sp, #24]
   17a14:	2100      	movs	r1, #0
   17a16:	9105      	str	r1, [sp, #20]
   17a18:	e9cd 0103 	strd	r0, r1, [sp, #12]
   17a1c:	f241 105c 	movw	r0, #4444	; 0x115c
   17a20:	f2c0 0002 	movt	r0, #2
   17a24:	4669      	mov	r1, sp
   17a26:	9002      	str	r0, [sp, #8]
   17a28:	f249 7059 	movw	r0, #38745	; 0x9759
   17a2c:	f2c0 0001 	movt	r0, #1
   17a30:	900b      	str	r0, [sp, #44]	; 0x2c
   17a32:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   17a36:	a801      	add	r0, sp, #4
   17a38:	9008      	str	r0, [sp, #32]
   17a3a:	a802      	add	r0, sp, #8
   17a3c:	4619      	mov	r1, r3
   17a3e:	f000 f801 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17a42:	defe      	udf	#254	; 0xfe

00017a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>:
   17a44:	b084      	sub	sp, #16
   17a46:	e9cd 0102 	strd	r0, r1, [sp, #8]
   17a4a:	f241 1038 	movw	r0, #4408	; 0x1138
   17a4e:	f2c0 0002 	movt	r0, #2
   17a52:	9001      	str	r0, [sp, #4]
   17a54:	f640 7054 	movw	r0, #3924	; 0xf54
   17a58:	f2c0 0002 	movt	r0, #2
   17a5c:	9000      	str	r0, [sp, #0]
   17a5e:	4668      	mov	r0, sp
   17a60:	f7f0 fe36 	bl	86d0 <rust_begin_unwind>
   17a64:	defe      	udf	#254	; 0xfe

00017a66 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>:
   17a66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a6a:	b081      	sub	sp, #4
   17a6c:	2a00      	cmp	r2, #0
   17a6e:	f000 80fe 	beq.w	17c6e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   17a72:	4690      	mov	r8, r2
   17a74:	468a      	mov	sl, r1
   17a76:	4681      	mov	r9, r0
   17a78:	f8d9 0008 	ldr.w	r0, [r9, #8]
   17a7c:	7800      	ldrb	r0, [r0, #0]
   17a7e:	b948      	cbnz	r0, 17a94 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x2e>
   17a80:	e014      	b.n	17aac <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   17a82:	44da      	add	sl, fp
   17a84:	2c00      	cmp	r4, #0
   17a86:	46a0      	mov	r8, r4
   17a88:	f000 80f1 	beq.w	17c6e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   17a8c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   17a90:	7800      	ldrb	r0, [r0, #0]
   17a92:	b158      	cbz	r0, 17aac <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   17a94:	e9d9 0100 	ldrd	r0, r1, [r9]
   17a98:	2204      	movs	r2, #4
   17a9a:	68cb      	ldr	r3, [r1, #12]
   17a9c:	f241 0174 	movw	r1, #4212	; 0x1074
   17aa0:	f2c0 0102 	movt	r1, #2
   17aa4:	4798      	blx	r3
   17aa6:	2800      	cmp	r0, #0
   17aa8:	f040 80e5 	bne.w	17c76 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   17aac:	f04f 0b00 	mov.w	fp, #0
   17ab0:	4641      	mov	r1, r8
   17ab2:	e008      	b.n	17ac6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x60>
   17ab4:	ebb8 010b 	subs.w	r1, r8, fp
   17ab8:	f04f 0000 	mov.w	r0, #0
   17abc:	bf38      	it	cc
   17abe:	4601      	movcc	r1, r0
   17ac0:	45c3      	cmp	fp, r8
   17ac2:	f200 80a5 	bhi.w	17c10 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1aa>
   17ac6:	eb0a 0e0b 	add.w	lr, sl, fp
   17aca:	2000      	movs	r0, #0
   17acc:	f01e 0203 	ands.w	r2, lr, #3
   17ad0:	bf18      	it	ne
   17ad2:	f1d2 0c04 	rsbsne	ip, r2, #4
   17ad6:	d120      	bne.n	17b1a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xb4>
   17ad8:	2908      	cmp	r1, #8
   17ada:	d357      	bcc.n	17b8c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   17adc:	f1a1 0208 	sub.w	r2, r1, #8
   17ae0:	4290      	cmp	r0, r2
   17ae2:	d853      	bhi.n	17b8c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   17ae4:	f85e 3000 	ldr.w	r3, [lr, r0]
   17ae8:	eb0e 0700 	add.w	r7, lr, r0
   17aec:	687f      	ldr	r7, [r7, #4]
   17aee:	f083 360a 	eor.w	r6, r3, #168430090	; 0xa0a0a0a
   17af2:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   17af6:	ea26 0303 	bic.w	r3, r6, r3
   17afa:	f087 360a 	eor.w	r6, r7, #168430090	; 0xa0a0a0a
   17afe:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   17b02:	ea26 0707 	bic.w	r7, r6, r7
   17b06:	433b      	orrs	r3, r7
   17b08:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   17b0c:	d102      	bne.n	17b14 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xae>
   17b0e:	3008      	adds	r0, #8
   17b10:	4290      	cmp	r0, r2
   17b12:	d9e7      	bls.n	17ae4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x7e>
   17b14:	4288      	cmp	r0, r1
   17b16:	d939      	bls.n	17b8c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   17b18:	e0b1      	b.n	17c7e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x218>
   17b1a:	458c      	cmp	ip, r1
   17b1c:	bf88      	it	hi
   17b1e:	468c      	movhi	ip, r1
   17b20:	eb0e 060c 	add.w	r6, lr, ip
   17b24:	2000      	movs	r0, #0
   17b26:	4663      	mov	r3, ip
   17b28:	4677      	mov	r7, lr
   17b2a:	b363      	cbz	r3, 17b86 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   17b2c:	463a      	mov	r2, r7
   17b2e:	f812 4b01 	ldrb.w	r4, [r2], #1
   17b32:	f1b4 050a 	subs.w	r5, r4, #10
   17b36:	bf18      	it	ne
   17b38:	2501      	movne	r5, #1
   17b3a:	4428      	add	r0, r5
   17b3c:	2c0a      	cmp	r4, #10
   17b3e:	d059      	beq.n	17bf4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   17b40:	42b2      	cmp	r2, r6
   17b42:	d020      	beq.n	17b86 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   17b44:	787a      	ldrb	r2, [r7, #1]
   17b46:	f1b2 040a 	subs.w	r4, r2, #10
   17b4a:	bf18      	it	ne
   17b4c:	2401      	movne	r4, #1
   17b4e:	4420      	add	r0, r4
   17b50:	2a0a      	cmp	r2, #10
   17b52:	d04f      	beq.n	17bf4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   17b54:	1cba      	adds	r2, r7, #2
   17b56:	42b2      	cmp	r2, r6
   17b58:	d015      	beq.n	17b86 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   17b5a:	78ba      	ldrb	r2, [r7, #2]
   17b5c:	f1b2 040a 	subs.w	r4, r2, #10
   17b60:	bf18      	it	ne
   17b62:	2401      	movne	r4, #1
   17b64:	4420      	add	r0, r4
   17b66:	2a0a      	cmp	r2, #10
   17b68:	d044      	beq.n	17bf4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   17b6a:	1cfa      	adds	r2, r7, #3
   17b6c:	42b2      	cmp	r2, r6
   17b6e:	d00a      	beq.n	17b86 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   17b70:	78fa      	ldrb	r2, [r7, #3]
   17b72:	3b04      	subs	r3, #4
   17b74:	3704      	adds	r7, #4
   17b76:	f1b2 040a 	subs.w	r4, r2, #10
   17b7a:	bf18      	it	ne
   17b7c:	2401      	movne	r4, #1
   17b7e:	4420      	add	r0, r4
   17b80:	2a0a      	cmp	r2, #10
   17b82:	d1d2      	bne.n	17b2a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xc4>
   17b84:	e036      	b.n	17bf4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   17b86:	4660      	mov	r0, ip
   17b88:	2908      	cmp	r1, #8
   17b8a:	d2a7      	bcs.n	17adc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x76>
   17b8c:	eb0e 0700 	add.w	r7, lr, r0
   17b90:	eb0e 0201 	add.w	r2, lr, r1
   17b94:	1a0e      	subs	r6, r1, r0
   17b96:	2100      	movs	r1, #0
   17b98:	b3ce      	cbz	r6, 17c0e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   17b9a:	463b      	mov	r3, r7
   17b9c:	f813 5b01 	ldrb.w	r5, [r3], #1
   17ba0:	f1b5 040a 	subs.w	r4, r5, #10
   17ba4:	bf18      	it	ne
   17ba6:	2401      	movne	r4, #1
   17ba8:	4421      	add	r1, r4
   17baa:	2d0a      	cmp	r5, #10
   17bac:	d021      	beq.n	17bf2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   17bae:	4293      	cmp	r3, r2
   17bb0:	d02d      	beq.n	17c0e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   17bb2:	787b      	ldrb	r3, [r7, #1]
   17bb4:	f1b3 050a 	subs.w	r5, r3, #10
   17bb8:	bf18      	it	ne
   17bba:	2501      	movne	r5, #1
   17bbc:	4429      	add	r1, r5
   17bbe:	2b0a      	cmp	r3, #10
   17bc0:	d017      	beq.n	17bf2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   17bc2:	1cbb      	adds	r3, r7, #2
   17bc4:	4293      	cmp	r3, r2
   17bc6:	d022      	beq.n	17c0e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   17bc8:	78bb      	ldrb	r3, [r7, #2]
   17bca:	f1b3 050a 	subs.w	r5, r3, #10
   17bce:	bf18      	it	ne
   17bd0:	2501      	movne	r5, #1
   17bd2:	4429      	add	r1, r5
   17bd4:	2b0a      	cmp	r3, #10
   17bd6:	d00c      	beq.n	17bf2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   17bd8:	1cfb      	adds	r3, r7, #3
   17bda:	4293      	cmp	r3, r2
   17bdc:	d017      	beq.n	17c0e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   17bde:	78fb      	ldrb	r3, [r7, #3]
   17be0:	3e04      	subs	r6, #4
   17be2:	3704      	adds	r7, #4
   17be4:	f1b3 050a 	subs.w	r5, r3, #10
   17be8:	bf18      	it	ne
   17bea:	2501      	movne	r5, #1
   17bec:	4429      	add	r1, r5
   17bee:	2b0a      	cmp	r3, #10
   17bf0:	d1d2      	bne.n	17b98 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x132>
   17bf2:	4408      	add	r0, r1
   17bf4:	4458      	add	r0, fp
   17bf6:	f100 0b01 	add.w	fp, r0, #1
   17bfa:	4540      	cmp	r0, r8
   17bfc:	f4bf af5a 	bcs.w	17ab4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   17c00:	f81a 0000 	ldrb.w	r0, [sl, r0]
   17c04:	280a      	cmp	r0, #10
   17c06:	f47f af55 	bne.w	17ab4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   17c0a:	2001      	movs	r0, #1
   17c0c:	e001      	b.n	17c12 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1ac>
   17c0e:	2000      	movs	r0, #0
   17c10:	46c3      	mov	fp, r8
   17c12:	f8d9 1008 	ldr.w	r1, [r9, #8]
   17c16:	eba8 040b 	sub.w	r4, r8, fp
   17c1a:	7008      	strb	r0, [r1, #0]
   17c1c:	fab4 f084 	clz	r0, r4
   17c20:	0942      	lsrs	r2, r0, #5
   17c22:	fabb f08b 	clz	r0, fp
   17c26:	0943      	lsrs	r3, r0, #5
   17c28:	e9d9 0100 	ldrd	r0, r1, [r9]
   17c2c:	ea53 0602 	orrs.w	r6, r3, r2
   17c30:	d106      	bne.n	17c40 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1da>
   17c32:	45d8      	cmp	r8, fp
   17c34:	d926      	bls.n	17c84 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   17c36:	f91a 200b 	ldrsb.w	r2, [sl, fp]
   17c3a:	f112 0f41 	cmn.w	r2, #65	; 0x41
   17c3e:	dd21      	ble.n	17c84 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   17c40:	68cb      	ldr	r3, [r1, #12]
   17c42:	4651      	mov	r1, sl
   17c44:	465a      	mov	r2, fp
   17c46:	4798      	blx	r3
   17c48:	b9a8      	cbnz	r0, 17c76 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   17c4a:	2e00      	cmp	r6, #0
   17c4c:	f47f af19 	bne.w	17a82 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   17c50:	45d8      	cmp	r8, fp
   17c52:	d905      	bls.n	17c60 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1fa>
   17c54:	f91a 000b 	ldrsb.w	r0, [sl, fp]
   17c58:	f110 0f41 	cmn.w	r0, #65	; 0x41
   17c5c:	f73f af11 	bgt.w	17a82 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   17c60:	4650      	mov	r0, sl
   17c62:	4641      	mov	r1, r8
   17c64:	465a      	mov	r2, fp
   17c66:	4643      	mov	r3, r8
   17c68:	f000 fe4d 	bl	18906 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   17c6c:	defe      	udf	#254	; 0xfe
   17c6e:	2000      	movs	r0, #0
   17c70:	b001      	add	sp, #4
   17c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c76:	2001      	movs	r0, #1
   17c78:	b001      	add	sp, #4
   17c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c7e:	f000 fe20 	bl	188c2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   17c82:	defe      	udf	#254	; 0xfe
   17c84:	4650      	mov	r0, sl
   17c86:	4641      	mov	r1, r8
   17c88:	2200      	movs	r2, #0
   17c8a:	465b      	mov	r3, fp
   17c8c:	f000 fe3b 	bl	18906 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   17c90:	defe      	udf	#254	; 0xfe

00017c92 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>:
   17c92:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c94:	b08d      	sub	sp, #52	; 0x34
   17c96:	4604      	mov	r4, r0
   17c98:	7a00      	ldrb	r0, [r0, #8]
   17c9a:	b138      	cbz	r0, 17cac <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x1a>
   17c9c:	2001      	movs	r0, #1
   17c9e:	6861      	ldr	r1, [r4, #4]
   17ca0:	7220      	strb	r0, [r4, #8]
   17ca2:	1c48      	adds	r0, r1, #1
   17ca4:	6060      	str	r0, [r4, #4]
   17ca6:	4620      	mov	r0, r4
   17ca8:	b00d      	add	sp, #52	; 0x34
   17caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17cac:	4616      	mov	r6, r2
   17cae:	460d      	mov	r5, r1
   17cb0:	e9d4 1200 	ldrd	r1, r2, [r4]
   17cb4:	7808      	ldrb	r0, [r1, #0]
   17cb6:	0740      	lsls	r0, r0, #29
   17cb8:	d419      	bmi.n	17cee <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x5c>
   17cba:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
   17cbe:	f241 1186 	movw	r1, #4486	; 0x1186
   17cc2:	f241 1c8a 	movw	ip, #4490	; 0x118a
   17cc6:	f2c0 0102 	movt	r1, #2
   17cca:	2a00      	cmp	r2, #0
   17ccc:	f2c0 0c02 	movt	ip, #2
   17cd0:	bf08      	it	eq
   17cd2:	4661      	moveq	r1, ip
   17cd4:	68db      	ldr	r3, [r3, #12]
   17cd6:	f04f 0202 	mov.w	r2, #2
   17cda:	bf08      	it	eq
   17cdc:	2201      	moveq	r2, #1
   17cde:	4798      	blx	r3
   17ce0:	2800      	cmp	r0, #0
   17ce2:	d1db      	bne.n	17c9c <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   17ce4:	68f2      	ldr	r2, [r6, #12]
   17ce6:	4628      	mov	r0, r5
   17ce8:	6821      	ldr	r1, [r4, #0]
   17cea:	4790      	blx	r2
   17cec:	e7d7      	b.n	17c9e <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>
   17cee:	b95a      	cbnz	r2, 17d08 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x76>
   17cf0:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   17cf4:	2202      	movs	r2, #2
   17cf6:	68cb      	ldr	r3, [r1, #12]
   17cf8:	f241 1188 	movw	r1, #4488	; 0x1188
   17cfc:	f2c0 0102 	movt	r1, #2
   17d00:	4798      	blx	r3
   17d02:	2800      	cmp	r0, #0
   17d04:	d1ca      	bne.n	17c9c <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   17d06:	6821      	ldr	r1, [r4, #0]
   17d08:	2001      	movs	r0, #1
   17d0a:	f10d 030f 	add.w	r3, sp, #15
   17d0e:	f88d 000f 	strb.w	r0, [sp, #15]
   17d12:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
   17d16:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
   17d1a:	e891 5005 	ldmia.w	r1, {r0, r2, ip, lr}
   17d1e:	e9d1 3704 	ldrd	r3, r7, [r1, #16]
   17d22:	f891 1020 	ldrb.w	r1, [r1, #32]
   17d26:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   17d2a:	a904      	add	r1, sp, #16
   17d2c:	e9cd 0204 	strd	r0, r2, [sp, #16]
   17d30:	f241 106c 	movw	r0, #4460	; 0x116c
   17d34:	f2c0 0002 	movt	r0, #2
   17d38:	68f2      	ldr	r2, [r6, #12]
   17d3a:	900b      	str	r0, [sp, #44]	; 0x2c
   17d3c:	4668      	mov	r0, sp
   17d3e:	900a      	str	r0, [sp, #40]	; 0x28
   17d40:	4628      	mov	r0, r5
   17d42:	e9cd 3708 	strd	r3, r7, [sp, #32]
   17d46:	e9cd ce06 	strd	ip, lr, [sp, #24]
   17d4a:	4790      	blx	r2
   17d4c:	2800      	cmp	r0, #0
   17d4e:	d1a5      	bne.n	17c9c <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   17d50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   17d54:	2202      	movs	r2, #2
   17d56:	68cb      	ldr	r3, [r1, #12]
   17d58:	f241 1184 	movw	r1, #4484	; 0x1184
   17d5c:	f2c0 0102 	movt	r1, #2
   17d60:	4798      	blx	r3
   17d62:	e79c      	b.n	17c9e <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>

00017d64 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>:
   17d64:	b5b0      	push	{r4, r5, r7, lr}
   17d66:	4604      	mov	r4, r0
   17d68:	7a05      	ldrb	r5, [r0, #8]
   17d6a:	6840      	ldr	r0, [r0, #4]
   17d6c:	b308      	cbz	r0, 17db2 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4e>
   17d6e:	b10d      	cbz	r5, 17d74 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x10>
   17d70:	2501      	movs	r5, #1
   17d72:	e01d      	b.n	17db0 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   17d74:	2801      	cmp	r0, #1
   17d76:	d110      	bne.n	17d9a <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   17d78:	7a60      	ldrb	r0, [r4, #9]
   17d7a:	b170      	cbz	r0, 17d9a <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   17d7c:	6821      	ldr	r1, [r4, #0]
   17d7e:	7808      	ldrb	r0, [r1, #0]
   17d80:	0740      	lsls	r0, r0, #29
   17d82:	d40a      	bmi.n	17d9a <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   17d84:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   17d88:	2201      	movs	r2, #1
   17d8a:	68cb      	ldr	r3, [r1, #12]
   17d8c:	f241 118b 	movw	r1, #4491	; 0x118b
   17d90:	f2c0 0102 	movt	r1, #2
   17d94:	2501      	movs	r5, #1
   17d96:	4798      	blx	r3
   17d98:	b950      	cbnz	r0, 17db0 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   17d9a:	6821      	ldr	r1, [r4, #0]
   17d9c:	2201      	movs	r2, #1
   17d9e:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   17da2:	68cb      	ldr	r3, [r1, #12]
   17da4:	f241 118c 	movw	r1, #4492	; 0x118c
   17da8:	f2c0 0102 	movt	r1, #2
   17dac:	4798      	blx	r3
   17dae:	4605      	mov	r5, r0
   17db0:	7225      	strb	r5, [r4, #8]
   17db2:	2d00      	cmp	r5, #0
   17db4:	bf18      	it	ne
   17db6:	2501      	movne	r5, #1
   17db8:	4628      	mov	r0, r5
   17dba:	bdb0      	pop	{r4, r5, r7, pc}

00017dbc <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>:
   17dbc:	b580      	push	{r7, lr}
   17dbe:	b082      	sub	sp, #8
   17dc0:	468c      	mov	ip, r1
   17dc2:	2100      	movs	r1, #0
   17dc4:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   17dc8:	9101      	str	r1, [sp, #4]
   17dca:	d207      	bcs.n	17ddc <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x20>
   17dcc:	f88d c004 	strb.w	ip, [sp, #4]
   17dd0:	a901      	add	r1, sp, #4
   17dd2:	2201      	movs	r2, #1
   17dd4:	f7ff fe47 	bl	17a66 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   17dd8:	b002      	add	sp, #8
   17dda:	bd80      	pop	{r7, pc}
   17ddc:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
   17de0:	d210      	bcs.n	17e04 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x48>
   17de2:	ea4f 119c 	mov.w	r1, ip, lsr #6
   17de6:	2306      	movs	r3, #6
   17de8:	2202      	movs	r2, #2
   17dea:	f363 115f 	bfi	r1, r3, #5, #27
   17dee:	f362 1c9f 	bfi	ip, r2, #6, #26
   17df2:	f88d c005 	strb.w	ip, [sp, #5]
   17df6:	f88d 1004 	strb.w	r1, [sp, #4]
   17dfa:	a901      	add	r1, sp, #4
   17dfc:	f7ff fe33 	bl	17a66 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   17e00:	b002      	add	sp, #8
   17e02:	bd80      	pop	{r7, pc}
   17e04:	2202      	movs	r2, #2
   17e06:	4663      	mov	r3, ip
   17e08:	a901      	add	r1, sp, #4
   17e0a:	f362 139f 	bfi	r3, r2, #6, #26
   17e0e:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   17e12:	d213      	bcs.n	17e3c <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x80>
   17e14:	f88d 3006 	strb.w	r3, [sp, #6]
   17e18:	ea4f 139c 	mov.w	r3, ip, lsr #6
   17e1c:	f362 139f 	bfi	r3, r2, #6, #26
   17e20:	f88d 3005 	strb.w	r3, [sp, #5]
   17e24:	ea4f 321c 	mov.w	r2, ip, lsr #12
   17e28:	230e      	movs	r3, #14
   17e2a:	f363 121f 	bfi	r2, r3, #4, #28
   17e2e:	f88d 2004 	strb.w	r2, [sp, #4]
   17e32:	2203      	movs	r2, #3
   17e34:	f7ff fe17 	bl	17a66 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   17e38:	b002      	add	sp, #8
   17e3a:	bd80      	pop	{r7, pc}
   17e3c:	f88d 3007 	strb.w	r3, [sp, #7]
   17e40:	ea4f 139c 	mov.w	r3, ip, lsr #6
   17e44:	f362 139f 	bfi	r3, r2, #6, #26
   17e48:	f88d 3006 	strb.w	r3, [sp, #6]
   17e4c:	ea4f 331c 	mov.w	r3, ip, lsr #12
   17e50:	f362 139f 	bfi	r3, r2, #6, #26
   17e54:	22f0      	movs	r2, #240	; 0xf0
   17e56:	ea42 429c 	orr.w	r2, r2, ip, lsr #18
   17e5a:	f88d 3005 	strb.w	r3, [sp, #5]
   17e5e:	f88d 2004 	strb.w	r2, [sp, #4]
   17e62:	2204      	movs	r2, #4
   17e64:	f7ff fdff 	bl	17a66 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   17e68:	b002      	add	sp, #8
   17e6a:	bd80      	pop	{r7, pc}

00017e6c <_ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE>:
   17e6c:	b570      	push	{r4, r5, r6, lr}
   17e6e:	b088      	sub	sp, #32
   17e70:	9001      	str	r0, [sp, #4]
   17e72:	aa02      	add	r2, sp, #8
   17e74:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   17e78:	f241 2158 	movw	r1, #4696	; 0x1258
   17e7c:	4610      	mov	r0, r2
   17e7e:	f2c0 0102 	movt	r1, #2
   17e82:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   17e86:	a801      	add	r0, sp, #4
   17e88:	f000 f89e 	bl	17fc8 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   17e8c:	b008      	add	sp, #32
   17e8e:	bd70      	pop	{r4, r5, r6, pc}

00017e90 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E>:
   17e90:	6800      	ldr	r0, [r0, #0]
   17e92:	f7ff bde8 	b.w	17a66 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>

00017e96 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE>:
   17e96:	6800      	ldr	r0, [r0, #0]
   17e98:	f7ff bf90 	b.w	17dbc <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>

00017e9c <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE>:
   17e9c:	b570      	push	{r4, r5, r6, lr}
   17e9e:	b088      	sub	sp, #32
   17ea0:	6800      	ldr	r0, [r0, #0]
   17ea2:	aa02      	add	r2, sp, #8
   17ea4:	9001      	str	r0, [sp, #4]
   17ea6:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   17eaa:	4610      	mov	r0, r2
   17eac:	f241 2158 	movw	r1, #4696	; 0x1258
   17eb0:	f2c0 0102 	movt	r1, #2
   17eb4:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   17eb8:	a801      	add	r0, sp, #4
   17eba:	f000 f885 	bl	17fc8 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   17ebe:	b008      	add	sp, #32
   17ec0:	bd70      	pop	{r4, r5, r6, pc}

00017ec2 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE>:
   17ec2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ec6:	b08d      	sub	sp, #52	; 0x34
   17ec8:	468c      	mov	ip, r1
   17eca:	6801      	ldr	r1, [r0, #0]
   17ecc:	f248 5e1f 	movw	lr, #34079	; 0x851f
   17ed0:	f241 108f 	movw	r0, #4495	; 0x118f
   17ed4:	f242 7810 	movw	r8, #10000	; 0x2710
   17ed8:	4541      	cmp	r1, r8
   17eda:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   17ede:	f2c0 0002 	movt	r0, #2
   17ee2:	d337      	bcc.n	17f54 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x92>
   17ee4:	f241 7959 	movw	r9, #5977	; 0x1759
   17ee8:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   17eec:	f10d 0b0c 	add.w	fp, sp, #12
   17ef0:	2300      	movs	r3, #0
   17ef2:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   17ef6:	f04f 0a64 	mov.w	sl, #100	; 0x64
   17efa:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   17efe:	fba1 2409 	umull	r2, r4, r1, r9
   17f02:	42b9      	cmp	r1, r7
   17f04:	ea4f 3254 	mov.w	r2, r4, lsr #13
   17f08:	fb02 1418 	mls	r4, r2, r8, r1
   17f0c:	4611      	mov	r1, r2
   17f0e:	b2a5      	uxth	r5, r4
   17f10:	fba5 560e 	umull	r5, r6, r5, lr
   17f14:	ea4f 1556 	mov.w	r5, r6, lsr #5
   17f18:	eb0b 0603 	add.w	r6, fp, r3
   17f1c:	fb05 441a 	mls	r4, r5, sl, r4
   17f20:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   17f24:	f1a3 0304 	sub.w	r3, r3, #4
   17f28:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   17f2c:	b2a4      	uxth	r4, r4
   17f2e:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   17f32:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   17f36:	d8e2      	bhi.n	17efe <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x3c>
   17f38:	f103 0427 	add.w	r4, r3, #39	; 0x27
   17f3c:	4611      	mov	r1, r2
   17f3e:	2963      	cmp	r1, #99	; 0x63
   17f40:	dc0b      	bgt.n	17f5a <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x98>
   17f42:	460b      	mov	r3, r1
   17f44:	2b0a      	cmp	r3, #10
   17f46:	db17      	blt.n	17f78 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xb6>
   17f48:	1ea1      	subs	r1, r4, #2
   17f4a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   17f4e:	aa03      	add	r2, sp, #12
   17f50:	5250      	strh	r0, [r2, r1]
   17f52:	e016      	b.n	17f82 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xc0>
   17f54:	2427      	movs	r4, #39	; 0x27
   17f56:	2963      	cmp	r1, #99	; 0x63
   17f58:	ddf3      	ble.n	17f42 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x80>
   17f5a:	b28a      	uxth	r2, r1
   17f5c:	3c02      	subs	r4, #2
   17f5e:	fba2 230e 	umull	r2, r3, r2, lr
   17f62:	2264      	movs	r2, #100	; 0x64
   17f64:	095b      	lsrs	r3, r3, #5
   17f66:	fb03 1112 	mls	r1, r3, r2, r1
   17f6a:	aa03      	add	r2, sp, #12
   17f6c:	b289      	uxth	r1, r1
   17f6e:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   17f72:	5311      	strh	r1, [r2, r4]
   17f74:	2b0a      	cmp	r3, #10
   17f76:	dae7      	bge.n	17f48 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x86>
   17f78:	1e61      	subs	r1, r4, #1
   17f7a:	aa03      	add	r2, sp, #12
   17f7c:	f103 0030 	add.w	r0, r3, #48	; 0x30
   17f80:	5450      	strb	r0, [r2, r1]
   17f82:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   17f86:	aa03      	add	r2, sp, #12
   17f88:	4411      	add	r1, r2
   17f8a:	f640 7254 	movw	r2, #3924	; 0xf54
   17f8e:	e9cd 1000 	strd	r1, r0, [sp]
   17f92:	f2c0 0202 	movt	r2, #2
   17f96:	4660      	mov	r0, ip
   17f98:	2101      	movs	r1, #1
   17f9a:	2300      	movs	r3, #0
   17f9c:	f000 f8f4 	bl	18188 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   17fa0:	b00d      	add	sp, #52	; 0x34
   17fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017fa6 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E>:
   17fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17faa:	b086      	sub	sp, #24
   17fac:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
   17fb0:	466a      	mov	r2, sp
   17fb2:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
   17fb6:	4613      	mov	r3, r2
   17fb8:	4660      	mov	r0, ip
   17fba:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
   17fbe:	f000 f803 	bl	17fc8 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   17fc2:	b006      	add	sp, #24
   17fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017fc8 <_ZN4core3fmt5write17hd95ac78ed22a2252E>:
   17fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fcc:	b08b      	sub	sp, #44	; 0x2c
   17fce:	2303      	movs	r3, #3
   17fd0:	6897      	ldr	r7, [r2, #8]
   17fd2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   17fd6:	2320      	movs	r3, #32
   17fd8:	9303      	str	r3, [sp, #12]
   17fda:	2300      	movs	r3, #0
   17fdc:	2f00      	cmp	r7, #0
   17fde:	9302      	str	r3, [sp, #8]
   17fe0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   17fe4:	9306      	str	r3, [sp, #24]
   17fe6:	9304      	str	r3, [sp, #16]
   17fe8:	d07c      	beq.n	180e4 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x11c>
   17fea:	f8d2 b00c 	ldr.w	fp, [r2, #12]
   17fee:	e9d2 9400 	ldrd	r9, r4, [r2]
   17ff2:	45a3      	cmp	fp, r4
   17ff4:	bf88      	it	hi
   17ff6:	46a3      	movhi	fp, r4
   17ff8:	f1bb 0f00 	cmp.w	fp, #0
   17ffc:	f000 809b 	beq.w	18136 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   18000:	e9d2 6204 	ldrd	r6, r2, [r2, #16]
   18004:	68cd      	ldr	r5, [r1, #12]
   18006:	9201      	str	r2, [sp, #4]
   18008:	e9d9 3200 	ldrd	r3, r2, [r9]
   1800c:	4619      	mov	r1, r3
   1800e:	47a8      	blx	r5
   18010:	2800      	cmp	r0, #0
   18012:	f040 809e 	bne.w	18152 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18016:	464d      	mov	r5, r9
   18018:	f04f 0a01 	mov.w	sl, #1
   1801c:	f04f 0800 	mov.w	r8, #0
   18020:	f04f 0910 	mov.w	r9, #16
   18024:	eb07 0088 	add.w	r0, r7, r8, lsl #2
   18028:	6841      	ldr	r1, [r0, #4]
   1802a:	9103      	str	r1, [sp, #12]
   1802c:	7f01      	ldrb	r1, [r0, #28]
   1802e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   18032:	6881      	ldr	r1, [r0, #8]
   18034:	9102      	str	r1, [sp, #8]
   18036:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   1803a:	b18a      	cbz	r2, 18060 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x98>
   1803c:	2a02      	cmp	r2, #2
   1803e:	d011      	beq.n	18064 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   18040:	9a01      	ldr	r2, [sp, #4]
   18042:	4291      	cmp	r1, r2
   18044:	f080 8098 	bcs.w	18178 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   18048:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
   1804c:	f647 63c3 	movw	r3, #32451	; 0x7ec3
   18050:	f2c0 0301 	movt	r3, #1
   18054:	6852      	ldr	r2, [r2, #4]
   18056:	429a      	cmp	r2, r3
   18058:	d104      	bne.n	18064 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   1805a:	f856 1031 	ldr.w	r1, [r6, r1, lsl #3]
   1805e:	6809      	ldr	r1, [r1, #0]
   18060:	2201      	movs	r2, #1
   18062:	e000      	b.n	18066 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9e>
   18064:	2200      	movs	r2, #0
   18066:	e9cd 2104 	strd	r2, r1, [sp, #16]
   1806a:	f857 1009 	ldr.w	r1, [r7, r9]
   1806e:	68c0      	ldr	r0, [r0, #12]
   18070:	b180      	cbz	r0, 18094 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xcc>
   18072:	2802      	cmp	r0, #2
   18074:	d010      	beq.n	18098 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   18076:	9801      	ldr	r0, [sp, #4]
   18078:	4281      	cmp	r1, r0
   1807a:	d27d      	bcs.n	18178 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   1807c:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   18080:	f647 62c3 	movw	r2, #32451	; 0x7ec3
   18084:	f2c0 0201 	movt	r2, #1
   18088:	6840      	ldr	r0, [r0, #4]
   1808a:	4290      	cmp	r0, r2
   1808c:	d104      	bne.n	18098 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   1808e:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   18092:	6801      	ldr	r1, [r0, #0]
   18094:	2001      	movs	r0, #1
   18096:	e000      	b.n	1809a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd2>
   18098:	2000      	movs	r0, #0
   1809a:	eb07 0209 	add.w	r2, r7, r9
   1809e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   180a2:	9801      	ldr	r0, [sp, #4]
   180a4:	f852 1c10 	ldr.w	r1, [r2, #-16]
   180a8:	4281      	cmp	r1, r0
   180aa:	d25d      	bcs.n	18168 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1a0>
   180ac:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   180b0:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   180b4:	684a      	ldr	r2, [r1, #4]
   180b6:	a902      	add	r1, sp, #8
   180b8:	4790      	blx	r2
   180ba:	2800      	cmp	r0, #0
   180bc:	d149      	bne.n	18152 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   180be:	45da      	cmp	sl, fp
   180c0:	d24b      	bcs.n	1815a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x192>
   180c2:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   180c6:	eb05 0208 	add.w	r2, r5, r8
   180ca:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   180ce:	68db      	ldr	r3, [r3, #12]
   180d0:	4798      	blx	r3
   180d2:	f109 0920 	add.w	r9, r9, #32
   180d6:	f108 0808 	add.w	r8, r8, #8
   180da:	f10a 0a01 	add.w	sl, sl, #1
   180de:	2800      	cmp	r0, #0
   180e0:	d0a0      	beq.n	18024 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x5c>
   180e2:	e036      	b.n	18152 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   180e4:	6956      	ldr	r6, [r2, #20]
   180e6:	e9d2 9400 	ldrd	r9, r4, [r2]
   180ea:	42a6      	cmp	r6, r4
   180ec:	bf88      	it	hi
   180ee:	4626      	movhi	r6, r4
   180f0:	b30e      	cbz	r6, 18136 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   180f2:	6917      	ldr	r7, [r2, #16]
   180f4:	e9d9 3200 	ldrd	r3, r2, [r9]
   180f8:	68cd      	ldr	r5, [r1, #12]
   180fa:	4619      	mov	r1, r3
   180fc:	47a8      	blx	r5
   180fe:	bb40      	cbnz	r0, 18152 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18100:	f10d 0808 	add.w	r8, sp, #8
   18104:	2500      	movs	r5, #0
   18106:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   1810a:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   1810e:	684a      	ldr	r2, [r1, #4]
   18110:	4641      	mov	r1, r8
   18112:	4790      	blx	r2
   18114:	b9e8      	cbnz	r0, 18152 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18116:	f105 0a01 	add.w	sl, r5, #1
   1811a:	45b2      	cmp	sl, r6
   1811c:	d20d      	bcs.n	1813a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x172>
   1811e:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   18122:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
   18126:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   1812a:	68db      	ldr	r3, [r3, #12]
   1812c:	4798      	blx	r3
   1812e:	2800      	cmp	r0, #0
   18130:	4655      	mov	r5, sl
   18132:	d0e8      	beq.n	18106 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x13e>
   18134:	e00d      	b.n	18152 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18136:	f04f 0a00 	mov.w	sl, #0
   1813a:	4554      	cmp	r4, sl
   1813c:	d910      	bls.n	18160 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   1813e:	eb09 02ca 	add.w	r2, r9, sl, lsl #3
   18142:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   18146:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
   1814a:	6852      	ldr	r2, [r2, #4]
   1814c:	68db      	ldr	r3, [r3, #12]
   1814e:	4798      	blx	r3
   18150:	b130      	cbz	r0, 18160 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   18152:	2001      	movs	r0, #1
   18154:	b00b      	add	sp, #44	; 0x2c
   18156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1815a:	46a9      	mov	r9, r5
   1815c:	4554      	cmp	r4, sl
   1815e:	d8ee      	bhi.n	1813e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x176>
   18160:	2000      	movs	r0, #0
   18162:	b00b      	add	sp, #44	; 0x2c
   18164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18168:	f241 2088 	movw	r0, #4744	; 0x1288
   1816c:	f2c0 0002 	movt	r0, #2
   18170:	9a01      	ldr	r2, [sp, #4]
   18172:	f7ff fc47 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   18176:	defe      	udf	#254	; 0xfe
   18178:	f241 2098 	movw	r0, #4760	; 0x1298
   1817c:	f2c0 0002 	movt	r0, #2
   18180:	9a01      	ldr	r2, [sp, #4]
   18182:	f7ff fc3f 	bl	17a04 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   18186:	defe      	udf	#254	; 0xfe

00018188 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>:
   18188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1818c:	b083      	sub	sp, #12
   1818e:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
   18192:	469a      	mov	sl, r3
   18194:	4604      	mov	r4, r0
   18196:	b1e1      	cbz	r1, 181d2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x4a>
   18198:	f8d4 e000 	ldr.w	lr, [r4]
   1819c:	f04f 082b 	mov.w	r8, #43	; 0x2b
   181a0:	f01e 0101 	ands.w	r1, lr, #1
   181a4:	bf08      	it	eq
   181a6:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
   181aa:	eb01 0907 	add.w	r9, r1, r7
   181ae:	ea5f 714e 	movs.w	r1, lr, lsl #29
   181b2:	d517      	bpl.n	181e4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x5c>
   181b4:	f1ba 0f00 	cmp.w	sl, #0
   181b8:	d033      	beq.n	18222 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9a>
   181ba:	f1aa 0101 	sub.w	r1, sl, #1
   181be:	f00a 0c03 	and.w	ip, sl, #3
   181c2:	2903      	cmp	r1, #3
   181c4:	d22f      	bcs.n	18226 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9e>
   181c6:	2100      	movs	r1, #0
   181c8:	4613      	mov	r3, r2
   181ca:	f1bc 0f00 	cmp.w	ip, #0
   181ce:	d152      	bne.n	18276 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xee>
   181d0:	e069      	b.n	182a6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   181d2:	f8d4 e000 	ldr.w	lr, [r4]
   181d6:	f107 0901 	add.w	r9, r7, #1
   181da:	f04f 082d 	mov.w	r8, #45	; 0x2d
   181de:	ea5f 714e 	movs.w	r1, lr, lsl #29
   181e2:	d4e7      	bmi.n	181b4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x2c>
   181e4:	f04f 0a00 	mov.w	sl, #0
   181e8:	2200      	movs	r2, #0
   181ea:	68a0      	ldr	r0, [r4, #8]
   181ec:	2801      	cmp	r0, #1
   181ee:	d161      	bne.n	182b4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   181f0:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   181f4:	45cb      	cmp	fp, r9
   181f6:	d95d      	bls.n	182b4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   181f8:	ea5f 700e 	movs.w	r0, lr, lsl #28
   181fc:	d46e      	bmi.n	182dc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x154>
   181fe:	9202      	str	r2, [sp, #8]
   18200:	ebab 0109 	sub.w	r1, fp, r9
   18204:	f894 2020 	ldrb.w	r2, [r4, #32]
   18208:	2000      	movs	r0, #0
   1820a:	46a9      	mov	r9, r5
   1820c:	460e      	mov	r6, r1
   1820e:	2a03      	cmp	r2, #3
   18210:	bf08      	it	eq
   18212:	2201      	moveq	r2, #1
   18214:	e8df f002 	tbb	[pc, r2]
   18218:	02840287 	.word	0x02840287
   1821c:	2600      	movs	r6, #0
   1821e:	4608      	mov	r0, r1
   18220:	e081      	b.n	18326 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x19e>
   18222:	2100      	movs	r1, #0
   18224:	e03f      	b.n	182a6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18226:	ebac 060a 	sub.w	r6, ip, sl
   1822a:	2100      	movs	r1, #0
   1822c:	4693      	mov	fp, r2
   1822e:	4613      	mov	r3, r2
   18230:	e9cd 7501 	strd	r7, r5, [sp, #4]
   18234:	781a      	ldrb	r2, [r3, #0]
   18236:	785d      	ldrb	r5, [r3, #1]
   18238:	7898      	ldrb	r0, [r3, #2]
   1823a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1823e:	78df      	ldrb	r7, [r3, #3]
   18240:	2a80      	cmp	r2, #128	; 0x80
   18242:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
   18246:	bf08      	it	eq
   18248:	3101      	addeq	r1, #1
   1824a:	2a80      	cmp	r2, #128	; 0x80
   1824c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   18250:	bf08      	it	eq
   18252:	3101      	addeq	r1, #1
   18254:	2880      	cmp	r0, #128	; 0x80
   18256:	f007 00c0 	and.w	r0, r7, #192	; 0xc0
   1825a:	bf08      	it	eq
   1825c:	3101      	addeq	r1, #1
   1825e:	2880      	cmp	r0, #128	; 0x80
   18260:	bf08      	it	eq
   18262:	3101      	addeq	r1, #1
   18264:	3304      	adds	r3, #4
   18266:	3604      	adds	r6, #4
   18268:	d1e4      	bne.n	18234 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xac>
   1826a:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   1826e:	465a      	mov	r2, fp
   18270:	f1bc 0f00 	cmp.w	ip, #0
   18274:	d017      	beq.n	182a6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18276:	7818      	ldrb	r0, [r3, #0]
   18278:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   1827c:	2880      	cmp	r0, #128	; 0x80
   1827e:	bf08      	it	eq
   18280:	3101      	addeq	r1, #1
   18282:	f1bc 0f01 	cmp.w	ip, #1
   18286:	d00e      	beq.n	182a6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18288:	7858      	ldrb	r0, [r3, #1]
   1828a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   1828e:	2880      	cmp	r0, #128	; 0x80
   18290:	bf08      	it	eq
   18292:	3101      	addeq	r1, #1
   18294:	f1bc 0f02 	cmp.w	ip, #2
   18298:	d005      	beq.n	182a6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   1829a:	7898      	ldrb	r0, [r3, #2]
   1829c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   182a0:	2880      	cmp	r0, #128	; 0x80
   182a2:	bf08      	it	eq
   182a4:	3101      	addeq	r1, #1
   182a6:	eb09 000a 	add.w	r0, r9, sl
   182aa:	eba0 0901 	sub.w	r9, r0, r1
   182ae:	68a0      	ldr	r0, [r4, #8]
   182b0:	2801      	cmp	r0, #1
   182b2:	d09d      	beq.n	181f0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x68>
   182b4:	4620      	mov	r0, r4
   182b6:	4641      	mov	r1, r8
   182b8:	4653      	mov	r3, sl
   182ba:	f000 f893 	bl	183e4 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   182be:	b120      	cbz	r0, 182ca <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x142>
   182c0:	2601      	movs	r6, #1
   182c2:	4630      	mov	r0, r6
   182c4:	b003      	add	sp, #12
   182c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182ca:	69e1      	ldr	r1, [r4, #28]
   182cc:	463a      	mov	r2, r7
   182ce:	69a0      	ldr	r0, [r4, #24]
   182d0:	68cb      	ldr	r3, [r1, #12]
   182d2:	4629      	mov	r1, r5
   182d4:	b003      	add	sp, #12
   182d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182da:	4718      	bx	r3
   182dc:	6860      	ldr	r0, [r4, #4]
   182de:	2601      	movs	r6, #1
   182e0:	9002      	str	r0, [sp, #8]
   182e2:	2030      	movs	r0, #48	; 0x30
   182e4:	f894 1020 	ldrb.w	r1, [r4, #32]
   182e8:	4653      	mov	r3, sl
   182ea:	6060      	str	r0, [r4, #4]
   182ec:	4620      	mov	r0, r4
   182ee:	9101      	str	r1, [sp, #4]
   182f0:	4641      	mov	r1, r8
   182f2:	f884 6020 	strb.w	r6, [r4, #32]
   182f6:	f000 f875 	bl	183e4 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   182fa:	2800      	cmp	r0, #0
   182fc:	d1e1      	bne.n	182c2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   182fe:	f894 2020 	ldrb.w	r2, [r4, #32]
   18302:	ebab 0109 	sub.w	r1, fp, r9
   18306:	2000      	movs	r0, #0
   18308:	46a9      	mov	r9, r5
   1830a:	2a03      	cmp	r2, #3
   1830c:	bf08      	it	eq
   1830e:	2201      	moveq	r2, #1
   18310:	460e      	mov	r6, r1
   18312:	e8df f002 	tbb	[pc, r2]
   18316:	0235      	.short	0x0235
   18318:	0232      	.short	0x0232
   1831a:	2600      	movs	r6, #0
   1831c:	4608      	mov	r0, r1
   1831e:	e02f      	b.n	18380 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1f8>
   18320:	0848      	lsrs	r0, r1, #1
   18322:	3101      	adds	r1, #1
   18324:	084e      	lsrs	r6, r1, #1
   18326:	1c45      	adds	r5, r0, #1
   18328:	3d01      	subs	r5, #1
   1832a:	d007      	beq.n	1833c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1b4>
   1832c:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   18330:	6861      	ldr	r1, [r4, #4]
   18332:	6912      	ldr	r2, [r2, #16]
   18334:	4790      	blx	r2
   18336:	2800      	cmp	r0, #0
   18338:	d0f6      	beq.n	18328 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1a0>
   1833a:	e7c1      	b.n	182c0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   1833c:	9a02      	ldr	r2, [sp, #8]
   1833e:	4620      	mov	r0, r4
   18340:	4641      	mov	r1, r8
   18342:	4653      	mov	r3, sl
   18344:	f8d4 b004 	ldr.w	fp, [r4, #4]
   18348:	f000 f84c 	bl	183e4 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   1834c:	2800      	cmp	r0, #0
   1834e:	d1b7      	bne.n	182c0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   18350:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   18354:	463a      	mov	r2, r7
   18356:	68cb      	ldr	r3, [r1, #12]
   18358:	4649      	mov	r1, r9
   1835a:	4798      	blx	r3
   1835c:	2800      	cmp	r0, #0
   1835e:	d1af      	bne.n	182c0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   18360:	e9d4 5406 	ldrd	r5, r4, [r4, #24]
   18364:	1c77      	adds	r7, r6, #1
   18366:	2601      	movs	r6, #1
   18368:	3f01      	subs	r7, #1
   1836a:	d02c      	beq.n	183c6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x23e>
   1836c:	6922      	ldr	r2, [r4, #16]
   1836e:	4628      	mov	r0, r5
   18370:	4659      	mov	r1, fp
   18372:	4790      	blx	r2
   18374:	2800      	cmp	r0, #0
   18376:	d0f7      	beq.n	18368 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1e0>
   18378:	e7a3      	b.n	182c2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   1837a:	0848      	lsrs	r0, r1, #1
   1837c:	3101      	adds	r1, #1
   1837e:	084e      	lsrs	r6, r1, #1
   18380:	1c45      	adds	r5, r0, #1
   18382:	3d01      	subs	r5, #1
   18384:	d007      	beq.n	18396 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x20e>
   18386:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   1838a:	6861      	ldr	r1, [r4, #4]
   1838c:	6912      	ldr	r2, [r2, #16]
   1838e:	4790      	blx	r2
   18390:	2800      	cmp	r0, #0
   18392:	d0f6      	beq.n	18382 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1fa>
   18394:	e794      	b.n	182c0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   18396:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   1839a:	463a      	mov	r2, r7
   1839c:	68cb      	ldr	r3, [r1, #12]
   1839e:	4649      	mov	r1, r9
   183a0:	f8d4 8004 	ldr.w	r8, [r4, #4]
   183a4:	4798      	blx	r3
   183a6:	2800      	cmp	r0, #0
   183a8:	f47f af8a 	bne.w	182c0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   183ac:	e9d4 9506 	ldrd	r9, r5, [r4, #24]
   183b0:	1c77      	adds	r7, r6, #1
   183b2:	2601      	movs	r6, #1
   183b4:	3f01      	subs	r7, #1
   183b6:	d00b      	beq.n	183d0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x248>
   183b8:	692a      	ldr	r2, [r5, #16]
   183ba:	4648      	mov	r0, r9
   183bc:	4641      	mov	r1, r8
   183be:	4790      	blx	r2
   183c0:	2800      	cmp	r0, #0
   183c2:	d0f7      	beq.n	183b4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x22c>
   183c4:	e77d      	b.n	182c2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   183c6:	2600      	movs	r6, #0
   183c8:	4630      	mov	r0, r6
   183ca:	b003      	add	sp, #12
   183cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183d0:	9801      	ldr	r0, [sp, #4]
   183d2:	2600      	movs	r6, #0
   183d4:	f884 0020 	strb.w	r0, [r4, #32]
   183d8:	9802      	ldr	r0, [sp, #8]
   183da:	6060      	str	r0, [r4, #4]
   183dc:	4630      	mov	r0, r6
   183de:	b003      	add	sp, #12
   183e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000183e4 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>:
   183e4:	b570      	push	{r4, r5, r6, lr}
   183e6:	461c      	mov	r4, r3
   183e8:	4615      	mov	r5, r2
   183ea:	4606      	mov	r6, r0
   183ec:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   183f0:	d006      	beq.n	18400 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   183f2:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
   183f6:	6912      	ldr	r2, [r2, #16]
   183f8:	4790      	blx	r2
   183fa:	b108      	cbz	r0, 18400 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   183fc:	2001      	movs	r0, #1
   183fe:	bd70      	pop	{r4, r5, r6, pc}
   18400:	b13d      	cbz	r5, 18412 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x2e>
   18402:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
   18406:	4622      	mov	r2, r4
   18408:	68cb      	ldr	r3, [r1, #12]
   1840a:	4629      	mov	r1, r5
   1840c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   18410:	4718      	bx	r3
   18412:	2000      	movs	r0, #0
   18414:	bd70      	pop	{r4, r5, r6, pc}
	...

00018418 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>:
   18418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1841c:	b081      	sub	sp, #4
   1841e:	f8d0 e008 	ldr.w	lr, [r0, #8]
   18422:	4682      	mov	sl, r0
   18424:	6900      	ldr	r0, [r0, #16]
   18426:	4691      	mov	r9, r2
   18428:	4688      	mov	r8, r1
   1842a:	f1be 0f01 	cmp.w	lr, #1
   1842e:	d111      	bne.n	18454 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x3c>
   18430:	2801      	cmp	r0, #1
   18432:	d012      	beq.n	1845a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x42>
   18434:	f1b9 0f00 	cmp.w	r9, #0
   18438:	f000 80c5 	beq.w	185c6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1ae>
   1843c:	f1a9 0101 	sub.w	r1, r9, #1
   18440:	f009 0003 	and.w	r0, r9, #3
   18444:	2903      	cmp	r1, #3
   18446:	d267      	bcs.n	18518 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x100>
   18448:	2100      	movs	r1, #0
   1844a:	4642      	mov	r2, r8
   1844c:	2800      	cmp	r0, #0
   1844e:	f040 8083 	bne.w	18558 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x140>
   18452:	e097      	b.n	18584 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   18454:	2801      	cmp	r0, #1
   18456:	f040 80bd 	bne.w	185d4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   1845a:	f1b9 0f00 	cmp.w	r9, #0
   1845e:	d054      	beq.n	1850a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xf2>
   18460:	f8da 0014 	ldr.w	r0, [sl, #20]
   18464:	eb08 0109 	add.w	r1, r8, r9
   18468:	2200      	movs	r2, #0
   1846a:	4647      	mov	r7, r8
   1846c:	1c43      	adds	r3, r0, #1
   1846e:	4646      	mov	r6, r8
   18470:	463c      	mov	r4, r7
   18472:	f914 5b01 	ldrsb.w	r5, [r4], #1
   18476:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1847a:	b2e8      	uxtb	r0, r5
   1847c:	dc2e      	bgt.n	184dc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   1847e:	428c      	cmp	r4, r1
   18480:	d01a      	beq.n	184b8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xa0>
   18482:	787d      	ldrb	r5, [r7, #1]
   18484:	1cbc      	adds	r4, r7, #2
   18486:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   1848a:	4627      	mov	r7, r4
   1848c:	f000 0b1f 	and.w	fp, r0, #31
   18490:	28df      	cmp	r0, #223	; 0xdf
   18492:	d917      	bls.n	184c4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xac>
   18494:	428f      	cmp	r7, r1
   18496:	d018      	beq.n	184ca <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xb2>
   18498:	f817 4b01 	ldrb.w	r4, [r7], #1
   1849c:	f004 0c3f 	and.w	ip, r4, #63	; 0x3f
   184a0:	463c      	mov	r4, r7
   184a2:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   184a6:	28f0      	cmp	r0, #240	; 0xf0
   184a8:	d316      	bcc.n	184d8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc0>
   184aa:	428f      	cmp	r7, r1
   184ac:	d020      	beq.n	184f0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xd8>
   184ae:	f817 0b01 	ldrb.w	r0, [r7], #1
   184b2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   184b6:	e01d      	b.n	184f4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xdc>
   184b8:	2500      	movs	r5, #0
   184ba:	460f      	mov	r7, r1
   184bc:	f000 0b1f 	and.w	fp, r0, #31
   184c0:	28df      	cmp	r0, #223	; 0xdf
   184c2:	d8e7      	bhi.n	18494 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x7c>
   184c4:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
   184c8:	e008      	b.n	184dc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   184ca:	f04f 0c00 	mov.w	ip, #0
   184ce:	460f      	mov	r7, r1
   184d0:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   184d4:	28f0      	cmp	r0, #240	; 0xf0
   184d6:	d2e8      	bcs.n	184aa <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x92>
   184d8:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
   184dc:	4627      	mov	r7, r4
   184de:	3b01      	subs	r3, #1
   184e0:	d065      	beq.n	185ae <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x196>
   184e2:	1b90      	subs	r0, r2, r6
   184e4:	42b9      	cmp	r1, r7
   184e6:	eb00 0207 	add.w	r2, r0, r7
   184ea:	463e      	mov	r6, r7
   184ec:	d1c0      	bne.n	18470 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x58>
   184ee:	e061      	b.n	185b4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   184f0:	2000      	movs	r0, #0
   184f2:	4627      	mov	r7, r4
   184f4:	f44f 14e0 	mov.w	r4, #1835008	; 0x1c0000
   184f8:	ea04 448b 	and.w	r4, r4, fp, lsl #18
   184fc:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   18500:	4428      	add	r0, r5
   18502:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   18506:	d1ea      	bne.n	184de <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc6>
   18508:	e054      	b.n	185b4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   1850a:	2200      	movs	r2, #0
   1850c:	f1be 0f01 	cmp.w	lr, #1
   18510:	d054      	beq.n	185bc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   18512:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   18516:	e062      	b.n	185de <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1c6>
   18518:	eba0 0309 	sub.w	r3, r0, r9
   1851c:	2100      	movs	r1, #0
   1851e:	4642      	mov	r2, r8
   18520:	7817      	ldrb	r7, [r2, #0]
   18522:	7856      	ldrb	r6, [r2, #1]
   18524:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
   18528:	7895      	ldrb	r5, [r2, #2]
   1852a:	78d4      	ldrb	r4, [r2, #3]
   1852c:	2f80      	cmp	r7, #128	; 0x80
   1852e:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
   18532:	bf08      	it	eq
   18534:	3101      	addeq	r1, #1
   18536:	2f80      	cmp	r7, #128	; 0x80
   18538:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
   1853c:	bf08      	it	eq
   1853e:	3101      	addeq	r1, #1
   18540:	2f80      	cmp	r7, #128	; 0x80
   18542:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   18546:	bf08      	it	eq
   18548:	3101      	addeq	r1, #1
   1854a:	2f80      	cmp	r7, #128	; 0x80
   1854c:	bf08      	it	eq
   1854e:	3101      	addeq	r1, #1
   18550:	3204      	adds	r2, #4
   18552:	3304      	adds	r3, #4
   18554:	d1e4      	bne.n	18520 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x108>
   18556:	b1a8      	cbz	r0, 18584 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   18558:	7813      	ldrb	r3, [r2, #0]
   1855a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1855e:	2b80      	cmp	r3, #128	; 0x80
   18560:	bf08      	it	eq
   18562:	3101      	addeq	r1, #1
   18564:	2801      	cmp	r0, #1
   18566:	d00d      	beq.n	18584 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   18568:	7853      	ldrb	r3, [r2, #1]
   1856a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1856e:	2b80      	cmp	r3, #128	; 0x80
   18570:	bf08      	it	eq
   18572:	3101      	addeq	r1, #1
   18574:	2802      	cmp	r0, #2
   18576:	d005      	beq.n	18584 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   18578:	7890      	ldrb	r0, [r2, #2]
   1857a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   1857e:	2880      	cmp	r0, #128	; 0x80
   18580:	bf08      	it	eq
   18582:	3101      	addeq	r1, #1
   18584:	f8da 000c 	ldr.w	r0, [sl, #12]
   18588:	eba9 0101 	sub.w	r1, r9, r1
   1858c:	4281      	cmp	r1, r0
   1858e:	d221      	bcs.n	185d4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   18590:	f1b9 0f00 	cmp.w	r9, #0
   18594:	d029      	beq.n	185ea <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d2>
   18596:	f1a9 0101 	sub.w	r1, r9, #1
   1859a:	f009 0c03 	and.w	ip, r9, #3
   1859e:	2903      	cmp	r1, #3
   185a0:	d225      	bcs.n	185ee <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d6>
   185a2:	2100      	movs	r1, #0
   185a4:	4643      	mov	r3, r8
   185a6:	f1bc 0f00 	cmp.w	ip, #0
   185aa:	d142      	bne.n	18632 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x21a>
   185ac:	e059      	b.n	18662 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   185ae:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   185b2:	d167      	bne.n	18684 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x26c>
   185b4:	464a      	mov	r2, r9
   185b6:	f1be 0f01 	cmp.w	lr, #1
   185ba:	d1aa      	bne.n	18512 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   185bc:	4691      	mov	r9, r2
   185be:	f1b9 0f00 	cmp.w	r9, #0
   185c2:	f47f af3b 	bne.w	1843c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24>
   185c6:	2100      	movs	r1, #0
   185c8:	f8da 000c 	ldr.w	r0, [sl, #12]
   185cc:	eba9 0101 	sub.w	r1, r9, r1
   185d0:	4281      	cmp	r1, r0
   185d2:	d3dd      	bcc.n	18590 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x178>
   185d4:	f8da 101c 	ldr.w	r1, [sl, #28]
   185d8:	464a      	mov	r2, r9
   185da:	f8da 0018 	ldr.w	r0, [sl, #24]
   185de:	68cb      	ldr	r3, [r1, #12]
   185e0:	4641      	mov	r1, r8
   185e2:	b001      	add	sp, #4
   185e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185e8:	4718      	bx	r3
   185ea:	2100      	movs	r1, #0
   185ec:	e039      	b.n	18662 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   185ee:	ebac 0709 	sub.w	r7, ip, r9
   185f2:	2100      	movs	r1, #0
   185f4:	4643      	mov	r3, r8
   185f6:	781e      	ldrb	r6, [r3, #0]
   185f8:	785d      	ldrb	r5, [r3, #1]
   185fa:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
   185fe:	789c      	ldrb	r4, [r3, #2]
   18600:	78da      	ldrb	r2, [r3, #3]
   18602:	2e80      	cmp	r6, #128	; 0x80
   18604:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   18608:	bf08      	it	eq
   1860a:	3101      	addeq	r1, #1
   1860c:	2e80      	cmp	r6, #128	; 0x80
   1860e:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
   18612:	bf08      	it	eq
   18614:	3101      	addeq	r1, #1
   18616:	2e80      	cmp	r6, #128	; 0x80
   18618:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1861c:	bf08      	it	eq
   1861e:	3101      	addeq	r1, #1
   18620:	2a80      	cmp	r2, #128	; 0x80
   18622:	bf08      	it	eq
   18624:	3101      	addeq	r1, #1
   18626:	3304      	adds	r3, #4
   18628:	3704      	adds	r7, #4
   1862a:	d1e4      	bne.n	185f6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1de>
   1862c:	f1bc 0f00 	cmp.w	ip, #0
   18630:	d017      	beq.n	18662 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   18632:	781a      	ldrb	r2, [r3, #0]
   18634:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   18638:	2a80      	cmp	r2, #128	; 0x80
   1863a:	bf08      	it	eq
   1863c:	3101      	addeq	r1, #1
   1863e:	f1bc 0f01 	cmp.w	ip, #1
   18642:	d00e      	beq.n	18662 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   18644:	785a      	ldrb	r2, [r3, #1]
   18646:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1864a:	2a80      	cmp	r2, #128	; 0x80
   1864c:	bf08      	it	eq
   1864e:	3101      	addeq	r1, #1
   18650:	f1bc 0f02 	cmp.w	ip, #2
   18654:	d005      	beq.n	18662 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   18656:	789a      	ldrb	r2, [r3, #2]
   18658:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1865c:	2a80      	cmp	r2, #128	; 0x80
   1865e:	bf08      	it	eq
   18660:	3101      	addeq	r1, #1
   18662:	f89a 3020 	ldrb.w	r3, [sl, #32]
   18666:	eba1 0109 	sub.w	r1, r1, r9
   1866a:	4401      	add	r1, r0
   1866c:	2000      	movs	r0, #0
   1866e:	1eda      	subs	r2, r3, #3
   18670:	bf18      	it	ne
   18672:	461a      	movne	r2, r3
   18674:	460e      	mov	r6, r1
   18676:	e8df f002 	tbb	[pc, r2]
   1867a:	0216      	.short	0x0216
   1867c:	0213      	.short	0x0213
   1867e:	2600      	movs	r6, #0
   18680:	4608      	mov	r0, r1
   18682:	e010      	b.n	186a6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x28e>
   18684:	2a00      	cmp	r2, #0
   18686:	bf18      	it	ne
   18688:	454a      	cmpne	r2, r9
   1868a:	d134      	bne.n	186f6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2de>
   1868c:	4640      	mov	r0, r8
   1868e:	2800      	cmp	r0, #0
   18690:	bf0c      	ite	eq
   18692:	464a      	moveq	r2, r9
   18694:	4680      	movne	r8, r0
   18696:	f1be 0f01 	cmp.w	lr, #1
   1869a:	f43f af8f 	beq.w	185bc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   1869e:	e738      	b.n	18512 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   186a0:	0848      	lsrs	r0, r1, #1
   186a2:	3101      	adds	r1, #1
   186a4:	084e      	lsrs	r6, r1, #1
   186a6:	1c44      	adds	r4, r0, #1
   186a8:	3c01      	subs	r4, #1
   186aa:	d008      	beq.n	186be <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2a6>
   186ac:	e9da 0206 	ldrd	r0, r2, [sl, #24]
   186b0:	f8da 1004 	ldr.w	r1, [sl, #4]
   186b4:	6912      	ldr	r2, [r2, #16]
   186b6:	4790      	blx	r2
   186b8:	2800      	cmp	r0, #0
   186ba:	d0f5      	beq.n	186a8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x290>
   186bc:	e013      	b.n	186e6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   186be:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   186c2:	464a      	mov	r2, r9
   186c4:	68cb      	ldr	r3, [r1, #12]
   186c6:	4641      	mov	r1, r8
   186c8:	f8da 7004 	ldr.w	r7, [sl, #4]
   186cc:	4798      	blx	r3
   186ce:	b950      	cbnz	r0, 186e6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   186d0:	e9da 4506 	ldrd	r4, r5, [sl, #24]
   186d4:	3601      	adds	r6, #1
   186d6:	3e01      	subs	r6, #1
   186d8:	d009      	beq.n	186ee <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2d6>
   186da:	692a      	ldr	r2, [r5, #16]
   186dc:	4620      	mov	r0, r4
   186de:	4639      	mov	r1, r7
   186e0:	4790      	blx	r2
   186e2:	2800      	cmp	r0, #0
   186e4:	d0f7      	beq.n	186d6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2be>
   186e6:	2001      	movs	r0, #1
   186e8:	b001      	add	sp, #4
   186ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186ee:	2000      	movs	r0, #0
   186f0:	b001      	add	sp, #4
   186f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186f6:	454a      	cmp	r2, r9
   186f8:	d204      	bcs.n	18704 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ec>
   186fa:	f918 0002 	ldrsb.w	r0, [r8, r2]
   186fe:	f110 0f40 	cmn.w	r0, #64	; 0x40
   18702:	dac3      	bge.n	1868c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x274>
   18704:	2000      	movs	r0, #0
   18706:	2200      	movs	r2, #0
   18708:	2800      	cmp	r0, #0
   1870a:	bf0c      	ite	eq
   1870c:	464a      	moveq	r2, r9
   1870e:	4680      	movne	r8, r0
   18710:	f1be 0f01 	cmp.w	lr, #1
   18714:	f43f af52 	beq.w	185bc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   18718:	e6fb      	b.n	18512 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>

0001871a <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>:
   1871a:	7800      	ldrb	r0, [r0, #0]
   1871c:	f3c0 1000 	ubfx	r0, r0, #4, #1
   18720:	4770      	bx	lr

00018722 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>:
   18722:	7800      	ldrb	r0, [r0, #0]
   18724:	f3c0 1040 	ubfx	r0, r0, #5, #1
   18728:	4770      	bx	lr

0001872a <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>:
   1872a:	b570      	push	{r4, r5, r6, lr}
   1872c:	460d      	mov	r5, r1
   1872e:	4606      	mov	r6, r0
   18730:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   18734:	461c      	mov	r4, r3
   18736:	68cb      	ldr	r3, [r1, #12]
   18738:	4611      	mov	r1, r2
   1873a:	4622      	mov	r2, r4
   1873c:	4798      	blx	r3
   1873e:	7230      	strb	r0, [r6, #8]
   18740:	fab4 f084 	clz	r0, r4
   18744:	0940      	lsrs	r0, r0, #5
   18746:	7270      	strb	r0, [r6, #9]
   18748:	2000      	movs	r0, #0
   1874a:	e9c6 5000 	strd	r5, r0, [r6]
   1874e:	bd70      	pop	{r4, r5, r6, pc}

00018750 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E>:
   18750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18754:	b085      	sub	sp, #20
   18756:	460c      	mov	r4, r1
   18758:	4605      	mov	r5, r0
   1875a:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   1875e:	690a      	ldr	r2, [r1, #16]
   18760:	2127      	movs	r1, #39	; 0x27
   18762:	4790      	blx	r2
   18764:	b118      	cbz	r0, 1876e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x1e>
   18766:	2001      	movs	r0, #1
   18768:	b005      	add	sp, #20
   1876a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1876e:	6829      	ldr	r1, [r5, #0]
   18770:	a801      	add	r0, sp, #4
   18772:	2201      	movs	r2, #1
   18774:	f7ff f85c 	bl	17830 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>
   18778:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   1877c:	f04f 091c 	mov.w	r9, #28
   18780:	f8dd 800c 	ldr.w	r8, [sp, #12]
   18784:	f5b5 1f88 	cmp.w	r5, #1114112	; 0x110000
   18788:	f89d 6010 	ldrb.w	r6, [sp, #16]
   1878c:	d139      	bne.n	18802 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xb2>
   1878e:	f44f 1588 	mov.w	r5, #1114112	; 0x110000
   18792:	2f02      	cmp	r7, #2
   18794:	f0c0 806b 	bcc.w	1886e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x11e>
   18798:	d00c      	beq.n	187b4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x64>
   1879a:	b2f0      	uxtb	r0, r6
   1879c:	2604      	movs	r6, #4
   1879e:	2703      	movs	r7, #3
   187a0:	215c      	movs	r1, #92	; 0x5c
   187a2:	e8df f000 	tbb	[pc, r0]
   187a6:	0364      	.short	0x0364
   187a8:	09242010 	.word	0x09242010
   187ac:	2600      	movs	r6, #0
   187ae:	2703      	movs	r7, #3
   187b0:	217d      	movs	r1, #125	; 0x7d
   187b2:	e001      	b.n	187b8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   187b4:	2701      	movs	r7, #1
   187b6:	215c      	movs	r1, #92	; 0x5c
   187b8:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   187bc:	6912      	ldr	r2, [r2, #16]
   187be:	4790      	blx	r2
   187c0:	2800      	cmp	r0, #0
   187c2:	d0e6      	beq.n	18792 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x42>
   187c4:	e7cf      	b.n	18766 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   187c6:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   187ca:	2602      	movs	r6, #2
   187cc:	2703      	movs	r7, #3
   187ce:	f1b8 0f00 	cmp.w	r8, #0
   187d2:	fa25 f100 	lsr.w	r1, r5, r0
   187d6:	bf08      	it	eq
   187d8:	2601      	moveq	r6, #1
   187da:	bf18      	it	ne
   187dc:	f1a8 0801 	subne.w	r8, r8, #1
   187e0:	f367 111f 	bfi	r1, r7, #4, #28
   187e4:	e7e8      	b.n	187b8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   187e6:	2602      	movs	r6, #2
   187e8:	2703      	movs	r7, #3
   187ea:	217b      	movs	r1, #123	; 0x7b
   187ec:	e7e4      	b.n	187b8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   187ee:	2703      	movs	r7, #3
   187f0:	2175      	movs	r1, #117	; 0x75
   187f2:	2603      	movs	r6, #3
   187f4:	e7e0      	b.n	187b8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   187f6:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   187fa:	6912      	ldr	r2, [r2, #16]
   187fc:	4790      	blx	r2
   187fe:	2800      	cmp	r0, #0
   18800:	d1b1      	bne.n	18766 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   18802:	4638      	mov	r0, r7
   18804:	2701      	movs	r7, #1
   18806:	215c      	movs	r1, #92	; 0x5c
   18808:	e8df f000 	tbb	[pc, r0]
   1880c:	06020331 	.word	0x06020331
   18810:	e7f1      	b.n	187f6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   18812:	2700      	movs	r7, #0
   18814:	4629      	mov	r1, r5
   18816:	e7ee      	b.n	187f6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   18818:	b2f0      	uxtb	r0, r6
   1881a:	2604      	movs	r6, #4
   1881c:	2703      	movs	r7, #3
   1881e:	215c      	movs	r1, #92	; 0x5c
   18820:	e8df f000 	tbb	[pc, r0]
   18824:	1d080425 	.word	0x1d080425
   18828:	0321      	.short	0x0321
   1882a:	e7e4      	b.n	187f6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1882c:	2600      	movs	r6, #0
   1882e:	2703      	movs	r7, #3
   18830:	217d      	movs	r1, #125	; 0x7d
   18832:	e7e0      	b.n	187f6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   18834:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   18838:	2602      	movs	r6, #2
   1883a:	2703      	movs	r7, #3
   1883c:	fa25 f000 	lsr.w	r0, r5, r0
   18840:	f000 000f 	and.w	r0, r0, #15
   18844:	f100 0157 	add.w	r1, r0, #87	; 0x57
   18848:	280a      	cmp	r0, #10
   1884a:	bf38      	it	cc
   1884c:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   18850:	f1b8 0f00 	cmp.w	r8, #0
   18854:	bf0c      	ite	eq
   18856:	2601      	moveq	r6, #1
   18858:	f1a8 0801 	subne.w	r8, r8, #1
   1885c:	e7cb      	b.n	187f6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1885e:	2602      	movs	r6, #2
   18860:	2703      	movs	r7, #3
   18862:	217b      	movs	r1, #123	; 0x7b
   18864:	e7c7      	b.n	187f6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   18866:	2703      	movs	r7, #3
   18868:	2175      	movs	r1, #117	; 0x75
   1886a:	2603      	movs	r6, #3
   1886c:	e7c3      	b.n	187f6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1886e:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   18872:	690a      	ldr	r2, [r1, #16]
   18874:	2127      	movs	r1, #39	; 0x27
   18876:	b005      	add	sp, #20
   18878:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1887c:	4710      	bx	r2

0001887e <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>:
   1887e:	b08c      	sub	sp, #48	; 0x30
   18880:	e9cd 0100 	strd	r0, r1, [sp]
   18884:	2002      	movs	r0, #2
   18886:	a908      	add	r1, sp, #32
   18888:	9007      	str	r0, [sp, #28]
   1888a:	9106      	str	r1, [sp, #24]
   1888c:	2100      	movs	r1, #0
   1888e:	9105      	str	r1, [sp, #20]
   18890:	e9cd 0103 	strd	r0, r1, [sp, #12]
   18894:	f241 20e8 	movw	r0, #4840	; 0x12e8
   18898:	f2c0 0002 	movt	r0, #2
   1889c:	a901      	add	r1, sp, #4
   1889e:	9002      	str	r0, [sp, #8]
   188a0:	f249 7059 	movw	r0, #38745	; 0x9759
   188a4:	f2c0 0001 	movt	r0, #1
   188a8:	900b      	str	r0, [sp, #44]	; 0x2c
   188aa:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   188ae:	4668      	mov	r0, sp
   188b0:	f241 21f8 	movw	r1, #4856	; 0x12f8
   188b4:	9008      	str	r0, [sp, #32]
   188b6:	a802      	add	r0, sp, #8
   188b8:	f2c0 0102 	movt	r1, #2
   188bc:	f7ff f8c2 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   188c0:	defe      	udf	#254	; 0xfe

000188c2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>:
   188c2:	b08c      	sub	sp, #48	; 0x30
   188c4:	e9cd 0100 	strd	r0, r1, [sp]
   188c8:	2002      	movs	r0, #2
   188ca:	a908      	add	r1, sp, #32
   188cc:	9007      	str	r0, [sp, #28]
   188ce:	9106      	str	r1, [sp, #24]
   188d0:	2100      	movs	r1, #0
   188d2:	9105      	str	r1, [sp, #20]
   188d4:	e9cd 0103 	strd	r0, r1, [sp, #12]
   188d8:	f241 302c 	movw	r0, #4908	; 0x132c
   188dc:	f2c0 0002 	movt	r0, #2
   188e0:	a901      	add	r1, sp, #4
   188e2:	9002      	str	r0, [sp, #8]
   188e4:	f249 7059 	movw	r0, #38745	; 0x9759
   188e8:	f2c0 0001 	movt	r0, #1
   188ec:	900b      	str	r0, [sp, #44]	; 0x2c
   188ee:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   188f2:	4668      	mov	r0, sp
   188f4:	f241 313c 	movw	r1, #4924	; 0x133c
   188f8:	9008      	str	r0, [sp, #32]
   188fa:	a802      	add	r0, sp, #8
   188fc:	f2c0 0102 	movt	r1, #2
   18900:	f7ff f8a0 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   18904:	defe      	udf	#254	; 0xfe

00018906 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>:
   18906:	b09a      	sub	sp, #104	; 0x68
   18908:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   1890c:	e9cd 2300 	strd	r2, r3, [sp]
   18910:	d802      	bhi.n	18918 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12>
   18912:	2501      	movs	r5, #1
   18914:	468c      	mov	ip, r1
   18916:	e03e      	b.n	18996 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   18918:	f1c1 0e00 	rsb	lr, r1, #0
   1891c:	f44f 7c80 	mov.w	ip, #256	; 0x100
   18920:	458c      	cmp	ip, r1
   18922:	d205      	bcs.n	18930 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2a>
   18924:	f910 400c 	ldrsb.w	r4, [r0, ip]
   18928:	f114 0f41 	cmn.w	r4, #65	; 0x41
   1892c:	f300 8108 	bgt.w	18b40 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23a>
   18930:	eb0e 040c 	add.w	r4, lr, ip
   18934:	f1ac 0601 	sub.w	r6, ip, #1
   18938:	2c01      	cmp	r4, #1
   1893a:	d02a      	beq.n	18992 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1893c:	428e      	cmp	r6, r1
   1893e:	d206      	bcs.n	1894e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x48>
   18940:	eb00 050c 	add.w	r5, r0, ip
   18944:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
   18948:	f115 0f41 	cmn.w	r5, #65	; 0x41
   1894c:	dc21      	bgt.n	18992 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1894e:	f1ac 0602 	sub.w	r6, ip, #2
   18952:	2c02      	cmp	r4, #2
   18954:	d01d      	beq.n	18992 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   18956:	428e      	cmp	r6, r1
   18958:	d206      	bcs.n	18968 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x62>
   1895a:	eb00 050c 	add.w	r5, r0, ip
   1895e:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
   18962:	f115 0f41 	cmn.w	r5, #65	; 0x41
   18966:	dc14      	bgt.n	18992 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   18968:	f1ac 0603 	sub.w	r6, ip, #3
   1896c:	2c03      	cmp	r4, #3
   1896e:	d010      	beq.n	18992 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   18970:	428e      	cmp	r6, r1
   18972:	d206      	bcs.n	18982 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x7c>
   18974:	eb00 050c 	add.w	r5, r0, ip
   18978:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
   1897c:	f115 0f41 	cmn.w	r5, #65	; 0x41
   18980:	dc07      	bgt.n	18992 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   18982:	f1bc 0c04 	subs.w	ip, ip, #4
   18986:	f04f 0500 	mov.w	r5, #0
   1898a:	d004      	beq.n	18996 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   1898c:	2c04      	cmp	r4, #4
   1898e:	d1c7      	bne.n	18920 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1a>
   18990:	e001      	b.n	18996 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   18992:	2500      	movs	r5, #0
   18994:	46b4      	mov	ip, r6
   18996:	2605      	movs	r6, #5
   18998:	2d00      	cmp	r5, #0
   1899a:	f241 450a 	movw	r5, #5130	; 0x140a
   1899e:	e9cd 0c02 	strd	r0, ip, [sp, #8]
   189a2:	bf18      	it	ne
   189a4:	2600      	movne	r6, #0
   189a6:	9605      	str	r6, [sp, #20]
   189a8:	f640 7654 	movw	r6, #3924	; 0xf54
   189ac:	f2c0 0502 	movt	r5, #2
   189b0:	f2c0 0602 	movt	r6, #2
   189b4:	bf18      	it	ne
   189b6:	4635      	movne	r5, r6
   189b8:	428a      	cmp	r2, r1
   189ba:	9504      	str	r5, [sp, #16]
   189bc:	bf98      	it	ls
   189be:	428b      	cmpls	r3, r1
   189c0:	d92a      	bls.n	18a18 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x112>
   189c2:	428a      	cmp	r2, r1
   189c4:	f04f 0003 	mov.w	r0, #3
   189c8:	a910      	add	r1, sp, #64	; 0x40
   189ca:	bf88      	it	hi
   189cc:	4613      	movhi	r3, r2
   189ce:	900f      	str	r0, [sp, #60]	; 0x3c
   189d0:	910e      	str	r1, [sp, #56]	; 0x38
   189d2:	2100      	movs	r1, #0
   189d4:	910d      	str	r1, [sp, #52]	; 0x34
   189d6:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   189da:	f241 4030 	movw	r0, #5168	; 0x1430
   189de:	f2c0 0002 	movt	r0, #2
   189e2:	a904      	add	r1, sp, #16
   189e4:	900a      	str	r0, [sp, #40]	; 0x28
   189e6:	f649 0047 	movw	r0, #38983	; 0x9847
   189ea:	f2c0 0001 	movt	r0, #1
   189ee:	9308      	str	r3, [sp, #32]
   189f0:	9015      	str	r0, [sp, #84]	; 0x54
   189f2:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
   189f6:	a802      	add	r0, sp, #8
   189f8:	f241 4148 	movw	r1, #5192	; 0x1448
   189fc:	9012      	str	r0, [sp, #72]	; 0x48
   189fe:	f249 7059 	movw	r0, #38745	; 0x9759
   18a02:	f2c0 0102 	movt	r1, #2
   18a06:	f2c0 0001 	movt	r0, #1
   18a0a:	9011      	str	r0, [sp, #68]	; 0x44
   18a0c:	a808      	add	r0, sp, #32
   18a0e:	9010      	str	r0, [sp, #64]	; 0x40
   18a10:	a80a      	add	r0, sp, #40	; 0x28
   18a12:	f7ff f817 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   18a16:	defe      	udf	#254	; 0xfe
   18a18:	429a      	cmp	r2, r3
   18a1a:	f200 80f1 	bhi.w	18c00 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2fa>
   18a1e:	2a00      	cmp	r2, #0
   18a20:	bf18      	it	ne
   18a22:	4291      	cmpne	r1, r2
   18a24:	d109      	bne.n	18a3a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x134>
   18a26:	461a      	mov	r2, r3
   18a28:	2a00      	cmp	r2, #0
   18a2a:	9206      	str	r2, [sp, #24]
   18a2c:	bf18      	it	ne
   18a2e:	428a      	cmpne	r2, r1
   18a30:	d10e      	bne.n	18a50 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x14a>
   18a32:	4613      	mov	r3, r2
   18a34:	428b      	cmp	r3, r1
   18a36:	d047      	beq.n	18ac8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   18a38:	e052      	b.n	18ae0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   18a3a:	d9f5      	bls.n	18a28 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x122>
   18a3c:	5686      	ldrsb	r6, [r0, r2]
   18a3e:	f116 0f40 	cmn.w	r6, #64	; 0x40
   18a42:	bfa8      	it	ge
   18a44:	461a      	movge	r2, r3
   18a46:	2a00      	cmp	r2, #0
   18a48:	9206      	str	r2, [sp, #24]
   18a4a:	bf18      	it	ne
   18a4c:	428a      	cmpne	r2, r1
   18a4e:	d0f0      	beq.n	18a32 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   18a50:	f1a0 0c01 	sub.w	ip, r0, #1
   18a54:	f101 0e02 	add.w	lr, r1, #2
   18a58:	1ccc      	adds	r4, r1, #3
   18a5a:	1c4d      	adds	r5, r1, #1
   18a5c:	1d0e      	adds	r6, r1, #4
   18a5e:	428a      	cmp	r2, r1
   18a60:	d206      	bcs.n	18a70 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x16a>
   18a62:	eb0c 0302 	add.w	r3, ip, r2
   18a66:	f993 3001 	ldrsb.w	r3, [r3, #1]
   18a6a:	f113 0f41 	cmn.w	r3, #65	; 0x41
   18a6e:	dce0      	bgt.n	18a32 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   18a70:	1e53      	subs	r3, r2, #1
   18a72:	bf18      	it	ne
   18a74:	4295      	cmpne	r5, r2
   18a76:	d025      	beq.n	18ac4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18a78:	428b      	cmp	r3, r1
   18a7a:	d204      	bcs.n	18a86 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x180>
   18a7c:	f91c 7002 	ldrsb.w	r7, [ip, r2]
   18a80:	f117 0f41 	cmn.w	r7, #65	; 0x41
   18a84:	dc1e      	bgt.n	18ac4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18a86:	1e93      	subs	r3, r2, #2
   18a88:	bf18      	it	ne
   18a8a:	4596      	cmpne	lr, r2
   18a8c:	d01a      	beq.n	18ac4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18a8e:	428b      	cmp	r3, r1
   18a90:	d206      	bcs.n	18aa0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x19a>
   18a92:	eb0c 0702 	add.w	r7, ip, r2
   18a96:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
   18a9a:	f117 0f41 	cmn.w	r7, #65	; 0x41
   18a9e:	dc11      	bgt.n	18ac4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18aa0:	1ed3      	subs	r3, r2, #3
   18aa2:	bf18      	it	ne
   18aa4:	4294      	cmpne	r4, r2
   18aa6:	d00d      	beq.n	18ac4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18aa8:	428b      	cmp	r3, r1
   18aaa:	d206      	bcs.n	18aba <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1b4>
   18aac:	eb0c 0702 	add.w	r7, ip, r2
   18ab0:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
   18ab4:	f117 0f41 	cmn.w	r7, #65	; 0x41
   18ab8:	dc04      	bgt.n	18ac4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18aba:	1f13      	subs	r3, r2, #4
   18abc:	d002      	beq.n	18ac4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   18abe:	4296      	cmp	r6, r2
   18ac0:	461a      	mov	r2, r3
   18ac2:	d1cc      	bne.n	18a5e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x158>
   18ac4:	428b      	cmp	r3, r1
   18ac6:	d10b      	bne.n	18ae0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   18ac8:	f241 00f0 	movw	r0, #4336	; 0x10f0
   18acc:	f241 4298 	movw	r2, #5272	; 0x1498
   18ad0:	f2c0 0002 	movt	r0, #2
   18ad4:	f2c0 0202 	movt	r2, #2
   18ad8:	212b      	movs	r1, #43	; 0x2b
   18ada:	f7fe ff7d 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   18ade:	defe      	udf	#254	; 0xfe
   18ae0:	18c5      	adds	r5, r0, r3
   18ae2:	462e      	mov	r6, r5
   18ae4:	f916 4b01 	ldrsb.w	r4, [r6], #1
   18ae8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   18aec:	b2e2      	uxtb	r2, r4
   18aee:	dd02      	ble.n	18af6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1f0>
   18af0:	9207      	str	r2, [sp, #28]
   18af2:	2101      	movs	r1, #1
   18af4:	e04d      	b.n	18b92 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   18af6:	4408      	add	r0, r1
   18af8:	4286      	cmp	r6, r0
   18afa:	d10b      	bne.n	18b14 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x20e>
   18afc:	2500      	movs	r5, #0
   18afe:	4606      	mov	r6, r0
   18b00:	f002 011f 	and.w	r1, r2, #31
   18b04:	2adf      	cmp	r2, #223	; 0xdf
   18b06:	d80d      	bhi.n	18b24 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x21e>
   18b08:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
   18b0c:	2880      	cmp	r0, #128	; 0x80
   18b0e:	9007      	str	r0, [sp, #28]
   18b10:	d333      	bcc.n	18b7a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   18b12:	e034      	b.n	18b7e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   18b14:	7869      	ldrb	r1, [r5, #1]
   18b16:	1cae      	adds	r6, r5, #2
   18b18:	f001 053f 	and.w	r5, r1, #63	; 0x3f
   18b1c:	f002 011f 	and.w	r1, r2, #31
   18b20:	2adf      	cmp	r2, #223	; 0xdf
   18b22:	d9f1      	bls.n	18b08 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x202>
   18b24:	4286      	cmp	r6, r0
   18b26:	d10d      	bne.n	18b44 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23e>
   18b28:	2400      	movs	r4, #0
   18b2a:	4606      	mov	r6, r0
   18b2c:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   18b30:	2af0      	cmp	r2, #240	; 0xf0
   18b32:	d20f      	bcs.n	18b54 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x24e>
   18b34:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
   18b38:	2880      	cmp	r0, #128	; 0x80
   18b3a:	9007      	str	r0, [sp, #28]
   18b3c:	d31d      	bcc.n	18b7a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   18b3e:	e01e      	b.n	18b7e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   18b40:	2500      	movs	r5, #0
   18b42:	e728      	b.n	18996 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   18b44:	f816 4b01 	ldrb.w	r4, [r6], #1
   18b48:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   18b4c:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   18b50:	2af0      	cmp	r2, #240	; 0xf0
   18b52:	d3ef      	bcc.n	18b34 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x22e>
   18b54:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   18b58:	ea02 4181 	and.w	r1, r2, r1, lsl #18
   18b5c:	4286      	cmp	r6, r0
   18b5e:	bf1a      	itte	ne
   18b60:	7830      	ldrbne	r0, [r6, #0]
   18b62:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
   18b66:	2000      	moveq	r0, #0
   18b68:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
   18b6c:	4408      	add	r0, r1
   18b6e:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   18b72:	d0a9      	beq.n	18ac8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   18b74:	2880      	cmp	r0, #128	; 0x80
   18b76:	9007      	str	r0, [sp, #28]
   18b78:	d201      	bcs.n	18b7e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   18b7a:	2101      	movs	r1, #1
   18b7c:	e009      	b.n	18b92 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   18b7e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   18b82:	d201      	bcs.n	18b88 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x282>
   18b84:	2102      	movs	r1, #2
   18b86:	e004      	b.n	18b92 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   18b88:	2104      	movs	r1, #4
   18b8a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   18b8e:	bf38      	it	cc
   18b90:	2103      	movcc	r1, #3
   18b92:	4419      	add	r1, r3
   18b94:	aa10      	add	r2, sp, #64	; 0x40
   18b96:	a808      	add	r0, sp, #32
   18b98:	e9cd 3108 	strd	r3, r1, [sp, #32]
   18b9c:	2105      	movs	r1, #5
   18b9e:	910f      	str	r1, [sp, #60]	; 0x3c
   18ba0:	920e      	str	r2, [sp, #56]	; 0x38
   18ba2:	2200      	movs	r2, #0
   18ba4:	920d      	str	r2, [sp, #52]	; 0x34
   18ba6:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
   18baa:	f241 41d4 	movw	r1, #5332	; 0x14d4
   18bae:	f2c0 0102 	movt	r1, #2
   18bb2:	aa04      	add	r2, sp, #16
   18bb4:	910a      	str	r1, [sp, #40]	; 0x28
   18bb6:	f649 0147 	movw	r1, #38983	; 0x9847
   18bba:	f2c0 0101 	movt	r1, #1
   18bbe:	9119      	str	r1, [sp, #100]	; 0x64
   18bc0:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
   18bc4:	a902      	add	r1, sp, #8
   18bc6:	9116      	str	r1, [sp, #88]	; 0x58
   18bc8:	f247 71d1 	movw	r1, #30673	; 0x77d1
   18bcc:	f2c0 0101 	movt	r1, #1
   18bd0:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   18bd4:	f248 7051 	movw	r0, #34641	; 0x8751
   18bd8:	f2c0 0001 	movt	r0, #1
   18bdc:	f241 41fc 	movw	r1, #5372	; 0x14fc
   18be0:	9013      	str	r0, [sp, #76]	; 0x4c
   18be2:	a807      	add	r0, sp, #28
   18be4:	9012      	str	r0, [sp, #72]	; 0x48
   18be6:	f249 7059 	movw	r0, #38745	; 0x9759
   18bea:	f2c0 0001 	movt	r0, #1
   18bee:	f2c0 0102 	movt	r1, #2
   18bf2:	9011      	str	r0, [sp, #68]	; 0x44
   18bf4:	a806      	add	r0, sp, #24
   18bf6:	9010      	str	r0, [sp, #64]	; 0x40
   18bf8:	a80a      	add	r0, sp, #40	; 0x28
   18bfa:	f7fe ff23 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   18bfe:	defe      	udf	#254	; 0xfe
   18c00:	2004      	movs	r0, #4
   18c02:	a910      	add	r1, sp, #64	; 0x40
   18c04:	900f      	str	r0, [sp, #60]	; 0x3c
   18c06:	910e      	str	r1, [sp, #56]	; 0x38
   18c08:	2100      	movs	r1, #0
   18c0a:	910d      	str	r1, [sp, #52]	; 0x34
   18c0c:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   18c10:	f241 4068 	movw	r0, #5224	; 0x1468
   18c14:	f2c0 0002 	movt	r0, #2
   18c18:	a904      	add	r1, sp, #16
   18c1a:	900a      	str	r0, [sp, #40]	; 0x28
   18c1c:	f649 0047 	movw	r0, #38983	; 0x9847
   18c20:	f2c0 0001 	movt	r0, #1
   18c24:	9017      	str	r0, [sp, #92]	; 0x5c
   18c26:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
   18c2a:	a802      	add	r0, sp, #8
   18c2c:	9014      	str	r0, [sp, #80]	; 0x50
   18c2e:	f249 7059 	movw	r0, #38745	; 0x9759
   18c32:	a901      	add	r1, sp, #4
   18c34:	f2c0 0001 	movt	r0, #1
   18c38:	9013      	str	r0, [sp, #76]	; 0x4c
   18c3a:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
   18c3e:	f241 4188 	movw	r1, #5256	; 0x1488
   18c42:	4668      	mov	r0, sp
   18c44:	f2c0 0102 	movt	r1, #2
   18c48:	9010      	str	r0, [sp, #64]	; 0x40
   18c4a:	a80a      	add	r0, sp, #40	; 0x28
   18c4c:	f7fe fefa 	bl	17a44 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   18c50:	defe      	udf	#254	; 0xfe

00018c52 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>:
   18c52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18c56:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   18c5a:	d270      	bcs.n	18d3e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xec>
   18c5c:	f241 5e1c 	movw	lr, #5404	; 0x151c
   18c60:	f241 586e 	movw	r8, #5486	; 0x156e
   18c64:	fa1f f980 	uxth.w	r9, r0
   18c68:	f2c0 0e02 	movt	lr, #2
   18c6c:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   18c70:	f04f 0a00 	mov.w	sl, #0
   18c74:	f2c0 0802 	movt	r8, #2
   18c78:	4675      	mov	r5, lr
   18c7a:	786e      	ldrb	r6, [r5, #1]
   18c7c:	4652      	mov	r2, sl
   18c7e:	782b      	ldrb	r3, [r5, #0]
   18c80:	3502      	adds	r5, #2
   18c82:	44b2      	add	sl, r6
   18c84:	4563      	cmp	r3, ip
   18c86:	d129      	bne.n	18cdc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x8a>
   18c88:	4592      	cmp	sl, r2
   18c8a:	f0c0 8112 	bcc.w	18eb2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   18c8e:	ea4f 035a 	mov.w	r3, sl, lsr #1
   18c92:	2b92      	cmp	r3, #146	; 0x92
   18c94:	f200 8112 	bhi.w	18ebc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x26a>
   18c98:	eb08 0302 	add.w	r3, r8, r2
   18c9c:	199a      	adds	r2, r3, r6
   18c9e:	b31e      	cbz	r6, 18ce8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   18ca0:	461f      	mov	r7, r3
   18ca2:	b2c4      	uxtb	r4, r0
   18ca4:	f817 1b01 	ldrb.w	r1, [r7], #1
   18ca8:	42a1      	cmp	r1, r4
   18caa:	f000 80b6 	beq.w	18e1a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18cae:	4297      	cmp	r7, r2
   18cb0:	d01a      	beq.n	18ce8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   18cb2:	7859      	ldrb	r1, [r3, #1]
   18cb4:	42a1      	cmp	r1, r4
   18cb6:	f000 80b0 	beq.w	18e1a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18cba:	1c99      	adds	r1, r3, #2
   18cbc:	4291      	cmp	r1, r2
   18cbe:	d013      	beq.n	18ce8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   18cc0:	7899      	ldrb	r1, [r3, #2]
   18cc2:	42a1      	cmp	r1, r4
   18cc4:	f000 80a9 	beq.w	18e1a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18cc8:	1cd9      	adds	r1, r3, #3
   18cca:	4291      	cmp	r1, r2
   18ccc:	d00c      	beq.n	18ce8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   18cce:	1d19      	adds	r1, r3, #4
   18cd0:	78db      	ldrb	r3, [r3, #3]
   18cd2:	3e04      	subs	r6, #4
   18cd4:	42a3      	cmp	r3, r4
   18cd6:	460b      	mov	r3, r1
   18cd8:	d1e1      	bne.n	18c9e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x4c>
   18cda:	e09e      	b.n	18e1a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18cdc:	d808      	bhi.n	18cf0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   18cde:	f10e 0252 	add.w	r2, lr, #82	; 0x52
   18ce2:	4295      	cmp	r5, r2
   18ce4:	d1c9      	bne.n	18c7a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   18ce6:	e003      	b.n	18cf0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   18ce8:	f10e 0152 	add.w	r1, lr, #82	; 0x52
   18cec:	428d      	cmp	r5, r1
   18cee:	d1c4      	bne.n	18c7a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   18cf0:	f241 6593 	movw	r5, #5779	; 0x1693
   18cf4:	2101      	movs	r1, #1
   18cf6:	f2c0 0502 	movt	r5, #2
   18cfa:	4628      	mov	r0, r5
   18cfc:	4602      	mov	r2, r0
   18cfe:	f812 7b01 	ldrb.w	r7, [r2], #1
   18d02:	b27e      	sxtb	r6, r7
   18d04:	2e00      	cmp	r6, #0
   18d06:	d404      	bmi.n	18d12 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xc0>
   18d08:	4610      	mov	r0, r2
   18d0a:	ebb9 0907 	subs.w	r9, r9, r7
   18d0e:	d50f      	bpl.n	18d30 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xde>
   18d10:	e0bd      	b.n	18e8e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18d12:	f505 739d 	add.w	r3, r5, #314	; 0x13a
   18d16:	429a      	cmp	r2, r3
   18d18:	f000 80db 	beq.w	18ed2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   18d1c:	7842      	ldrb	r2, [r0, #1]
   18d1e:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   18d22:	3002      	adds	r0, #2
   18d24:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   18d28:	ebb9 0907 	subs.w	r9, r9, r7
   18d2c:	f100 80af 	bmi.w	18e8e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18d30:	f505 729d 	add.w	r2, r5, #314	; 0x13a
   18d34:	f081 0101 	eor.w	r1, r1, #1
   18d38:	4290      	cmp	r0, r2
   18d3a:	d1df      	bne.n	18cfc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xaa>
   18d3c:	e0a7      	b.n	18e8e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18d3e:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
   18d42:	d26f      	bcs.n	18e24 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1d2>
   18d44:	f241 7ecd 	movw	lr, #6093	; 0x17cd
   18d48:	f641 0813 	movw	r8, #6163	; 0x1813
   18d4c:	fa1f f980 	uxth.w	r9, r0
   18d50:	f2c0 0e02 	movt	lr, #2
   18d54:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   18d58:	f04f 0a00 	mov.w	sl, #0
   18d5c:	f2c0 0802 	movt	r8, #2
   18d60:	4675      	mov	r5, lr
   18d62:	786e      	ldrb	r6, [r5, #1]
   18d64:	4652      	mov	r2, sl
   18d66:	782b      	ldrb	r3, [r5, #0]
   18d68:	3502      	adds	r5, #2
   18d6a:	44b2      	add	sl, r6
   18d6c:	4563      	cmp	r3, ip
   18d6e:	d125      	bne.n	18dbc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x16a>
   18d70:	4592      	cmp	sl, r2
   18d72:	f0c0 809e 	bcc.w	18eb2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   18d76:	f1ba 0fa6 	cmp.w	sl, #166	; 0xa6
   18d7a:	f200 80a5 	bhi.w	18ec8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x276>
   18d7e:	eb08 0302 	add.w	r3, r8, r2
   18d82:	199a      	adds	r2, r3, r6
   18d84:	b306      	cbz	r6, 18dc8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   18d86:	461f      	mov	r7, r3
   18d88:	b2c4      	uxtb	r4, r0
   18d8a:	f817 1b01 	ldrb.w	r1, [r7], #1
   18d8e:	42a1      	cmp	r1, r4
   18d90:	d043      	beq.n	18e1a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18d92:	4297      	cmp	r7, r2
   18d94:	d018      	beq.n	18dc8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   18d96:	7859      	ldrb	r1, [r3, #1]
   18d98:	42a1      	cmp	r1, r4
   18d9a:	d03e      	beq.n	18e1a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18d9c:	1c99      	adds	r1, r3, #2
   18d9e:	4291      	cmp	r1, r2
   18da0:	d012      	beq.n	18dc8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   18da2:	7899      	ldrb	r1, [r3, #2]
   18da4:	42a1      	cmp	r1, r4
   18da6:	d038      	beq.n	18e1a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18da8:	1cd9      	adds	r1, r3, #3
   18daa:	4291      	cmp	r1, r2
   18dac:	d00c      	beq.n	18dc8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   18dae:	1d19      	adds	r1, r3, #4
   18db0:	78db      	ldrb	r3, [r3, #3]
   18db2:	3e04      	subs	r6, #4
   18db4:	42a3      	cmp	r3, r4
   18db6:	460b      	mov	r3, r1
   18db8:	d1e4      	bne.n	18d84 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x132>
   18dba:	e02e      	b.n	18e1a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   18dbc:	d808      	bhi.n	18dd0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   18dbe:	f10e 0246 	add.w	r2, lr, #70	; 0x46
   18dc2:	4295      	cmp	r5, r2
   18dc4:	d1cd      	bne.n	18d62 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   18dc6:	e003      	b.n	18dd0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   18dc8:	f10e 0146 	add.w	r1, lr, #70	; 0x46
   18dcc:	428d      	cmp	r5, r1
   18dce:	d1c8      	bne.n	18d62 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   18dd0:	f641 05b9 	movw	r5, #6329	; 0x18b9
   18dd4:	2101      	movs	r1, #1
   18dd6:	f2c0 0502 	movt	r5, #2
   18dda:	4628      	mov	r0, r5
   18ddc:	4602      	mov	r2, r0
   18dde:	f812 7b01 	ldrb.w	r7, [r2], #1
   18de2:	b27e      	sxtb	r6, r7
   18de4:	2e00      	cmp	r6, #0
   18de6:	d40a      	bmi.n	18dfe <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1ac>
   18de8:	4610      	mov	r0, r2
   18dea:	ebb9 0907 	subs.w	r9, r9, r7
   18dee:	d44e      	bmi.n	18e8e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18df0:	f505 72cc 	add.w	r2, r5, #408	; 0x198
   18df4:	f081 0101 	eor.w	r1, r1, #1
   18df8:	4290      	cmp	r0, r2
   18dfa:	d1ef      	bne.n	18ddc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x18a>
   18dfc:	e047      	b.n	18e8e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18dfe:	f505 73cc 	add.w	r3, r5, #408	; 0x198
   18e02:	429a      	cmp	r2, r3
   18e04:	d065      	beq.n	18ed2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   18e06:	7842      	ldrb	r2, [r0, #1]
   18e08:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   18e0c:	3002      	adds	r0, #2
   18e0e:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   18e12:	ebb9 0907 	subs.w	r9, r9, r7
   18e16:	d5eb      	bpl.n	18df0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x19e>
   18e18:	e039      	b.n	18e8e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18e1a:	2100      	movs	r1, #0
   18e1c:	f001 0001 	and.w	r0, r1, #1
   18e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18e24:	f240 51e2 	movw	r1, #1506	; 0x5e2
   18e28:	f240 63e2 	movw	r3, #1762	; 0x6e2
   18e2c:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
   18e30:	1842      	adds	r2, r0, r1
   18e32:	f2c0 030b 	movt	r3, #11
   18e36:	2100      	movs	r1, #0
   18e38:	429a      	cmp	r2, r3
   18e3a:	d328      	bcc.n	18e8e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18e3c:	f241 421f 	movw	r2, #5151	; 0x141f
   18e40:	f640 431f 	movw	r3, #3103	; 0xc1f
   18e44:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   18e48:	4402      	add	r2, r0
   18e4a:	429a      	cmp	r2, r3
   18e4c:	bf21      	itttt	cs
   18e4e:	f243 125e 	movwcs	r2, #12638	; 0x315e
   18e52:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   18e56:	4402      	addcs	r2, r0
   18e58:	2a0e      	cmpcs	r2, #14
   18e5a:	d318      	bcc.n	18e8e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18e5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   18e60:	f64b 031e 	movw	r3, #47134	; 0xb81e
   18e64:	f2c0 021f 	movt	r2, #31
   18e68:	f2c0 0302 	movt	r3, #2
   18e6c:	4002      	ands	r2, r0
   18e6e:	429a      	cmp	r2, r3
   18e70:	d00d      	beq.n	18e8e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18e72:	f645 1229 	movw	r2, #22825	; 0x5929
   18e76:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   18e7a:	4402      	add	r2, r0
   18e7c:	2a29      	cmp	r2, #41	; 0x29
   18e7e:	bf21      	itttt	cs
   18e80:	f644 02cb 	movwcs	r2, #18635	; 0x48cb
   18e84:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   18e88:	4402      	addcs	r2, r0
   18e8a:	2a0b      	cmpcs	r2, #11
   18e8c:	d203      	bcs.n	18e96 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x244>
   18e8e:	f001 0001 	and.w	r0, r1, #1
   18e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18e96:	f5a0 2060 	sub.w	r0, r0, #917504	; 0xe0000
   18e9a:	f64f 620f 	movw	r2, #65039	; 0xfe0f
   18e9e:	f5a0 71f8 	sub.w	r1, r0, #496	; 0x1f0
   18ea2:	2000      	movs	r0, #0
   18ea4:	f2c0 0202 	movt	r2, #2
   18ea8:	4291      	cmp	r1, r2
   18eaa:	bf88      	it	hi
   18eac:	2001      	movhi	r0, #1
   18eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18eb2:	4610      	mov	r0, r2
   18eb4:	4651      	mov	r1, sl
   18eb6:	f7ff fd04 	bl	188c2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   18eba:	defe      	udf	#254	; 0xfe
   18ebc:	4650      	mov	r0, sl
   18ebe:	f240 1125 	movw	r1, #293	; 0x125
   18ec2:	f7ff fcdc 	bl	1887e <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   18ec6:	defe      	udf	#254	; 0xfe
   18ec8:	4650      	mov	r0, sl
   18eca:	21a6      	movs	r1, #166	; 0xa6
   18ecc:	f7ff fcd7 	bl	1887e <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   18ed0:	defe      	udf	#254	; 0xfe
   18ed2:	f241 00f0 	movw	r0, #4336	; 0x10f0
   18ed6:	f241 520c 	movw	r2, #5388	; 0x150c
   18eda:	f2c0 0002 	movt	r0, #2
   18ede:	f2c0 0202 	movt	r2, #2
   18ee2:	212b      	movs	r1, #43	; 0x2b
   18ee4:	f7fe fd78 	bl	179d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   18ee8:	defe      	udf	#254	; 0xfe

00018eea <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>:
   18eea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18eee:	b0a3      	sub	sp, #140	; 0x8c
   18ef0:	468c      	mov	ip, r1
   18ef2:	6809      	ldr	r1, [r1, #0]
   18ef4:	06ca      	lsls	r2, r1, #27
   18ef6:	d44a      	bmi.n	18f8e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xa4>
   18ef8:	6804      	ldr	r4, [r0, #0]
   18efa:	0688      	lsls	r0, r1, #26
   18efc:	f100 8089 	bmi.w	19012 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x128>
   18f00:	f248 5e1f 	movw	lr, #34079	; 0x851f
   18f04:	f241 128f 	movw	r2, #4495	; 0x118f
   18f08:	f242 7810 	movw	r8, #10000	; 0x2710
   18f0c:	4544      	cmp	r4, r8
   18f0e:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   18f12:	f2c0 0202 	movt	r2, #2
   18f16:	f0c0 80e3 	bcc.w	190e0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1f6>
   18f1a:	f241 7959 	movw	r9, #5977	; 0x1759
   18f1e:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   18f22:	f10d 0b0c 	add.w	fp, sp, #12
   18f26:	2300      	movs	r3, #0
   18f28:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   18f2c:	f04f 0a64 	mov.w	sl, #100	; 0x64
   18f30:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   18f34:	fba4 0109 	umull	r0, r1, r4, r9
   18f38:	42bc      	cmp	r4, r7
   18f3a:	ea4f 3051 	mov.w	r0, r1, lsr #13
   18f3e:	fb00 4118 	mls	r1, r0, r8, r4
   18f42:	4604      	mov	r4, r0
   18f44:	b28d      	uxth	r5, r1
   18f46:	fba5 560e 	umull	r5, r6, r5, lr
   18f4a:	ea4f 1556 	mov.w	r5, r6, lsr #5
   18f4e:	eb0b 0603 	add.w	r6, fp, r3
   18f52:	fb05 111a 	mls	r1, r5, sl, r1
   18f56:	f832 5015 	ldrh.w	r5, [r2, r5, lsl #1]
   18f5a:	f1a3 0304 	sub.w	r3, r3, #4
   18f5e:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   18f62:	b289      	uxth	r1, r1
   18f64:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   18f68:	f8a6 1025 	strh.w	r1, [r6, #37]	; 0x25
   18f6c:	d8e2      	bhi.n	18f34 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x4a>
   18f6e:	f103 0127 	add.w	r1, r3, #39	; 0x27
   18f72:	4604      	mov	r4, r0
   18f74:	2c63      	cmp	r4, #99	; 0x63
   18f76:	f300 80b7 	bgt.w	190e8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1fe>
   18f7a:	4623      	mov	r3, r4
   18f7c:	2b0a      	cmp	r3, #10
   18f7e:	f2c0 80c3 	blt.w	19108 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x21e>
   18f82:	1e88      	subs	r0, r1, #2
   18f84:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   18f88:	aa03      	add	r2, sp, #12
   18f8a:	5211      	strh	r1, [r2, r0]
   18f8c:	e0c1      	b.n	19112 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x228>
   18f8e:	6800      	ldr	r0, [r0, #0]
   18f90:	f10d 0e0c 	add.w	lr, sp, #12
   18f94:	2381      	movs	r3, #129	; 0x81
   18f96:	2100      	movs	r1, #0
   18f98:	f000 020f 	and.w	r2, r0, #15
   18f9c:	f102 0457 	add.w	r4, r2, #87	; 0x57
   18fa0:	2a0a      	cmp	r2, #10
   18fa2:	bf38      	it	cc
   18fa4:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   18fa8:	eb0e 0203 	add.w	r2, lr, r3
   18fac:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   18fb0:	f802 4c02 	strb.w	r4, [r2, #-2]
   18fb4:	d071      	beq.n	1909a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   18fb6:	0904      	lsrs	r4, r0, #4
   18fb8:	f004 040f 	and.w	r4, r4, #15
   18fbc:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18fc0:	2c0a      	cmp	r4, #10
   18fc2:	bf38      	it	cc
   18fc4:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18fc8:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   18fcc:	f802 5c03 	strb.w	r5, [r2, #-3]
   18fd0:	d079      	beq.n	190c6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   18fd2:	0a04      	lsrs	r4, r0, #8
   18fd4:	f004 040f 	and.w	r4, r4, #15
   18fd8:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18fdc:	2c0a      	cmp	r4, #10
   18fde:	bf38      	it	cc
   18fe0:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18fe4:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   18fe8:	f802 5c04 	strb.w	r5, [r2, #-4]
   18fec:	d073      	beq.n	190d6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   18fee:	0b04      	lsrs	r4, r0, #12
   18ff0:	3b04      	subs	r3, #4
   18ff2:	f004 040f 	and.w	r4, r4, #15
   18ff6:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18ffa:	2c0a      	cmp	r4, #10
   18ffc:	bf38      	it	cc
   18ffe:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   19002:	f802 5c05 	strb.w	r5, [r2, #-5]
   19006:	0c02      	lsrs	r2, r0, #16
   19008:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   1900c:	4610      	mov	r0, r2
   1900e:	d1c3      	bne.n	18f98 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xae>
   19010:	e03f      	b.n	19092 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1a8>
   19012:	f10d 0e0c 	add.w	lr, sp, #12
   19016:	2381      	movs	r3, #129	; 0x81
   19018:	2100      	movs	r1, #0
   1901a:	f004 000f 	and.w	r0, r4, #15
   1901e:	eb0e 0203 	add.w	r2, lr, r3
   19022:	f100 0537 	add.w	r5, r0, #55	; 0x37
   19026:	280a      	cmp	r0, #10
   19028:	bf38      	it	cc
   1902a:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   1902e:	ebb1 1f14 	cmp.w	r1, r4, lsr #4
   19032:	f802 5c02 	strb.w	r5, [r2, #-2]
   19036:	d030      	beq.n	1909a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   19038:	0920      	lsrs	r0, r4, #4
   1903a:	f000 000f 	and.w	r0, r0, #15
   1903e:	f100 0537 	add.w	r5, r0, #55	; 0x37
   19042:	280a      	cmp	r0, #10
   19044:	bf38      	it	cc
   19046:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   1904a:	ebb1 2f14 	cmp.w	r1, r4, lsr #8
   1904e:	f802 5c03 	strb.w	r5, [r2, #-3]
   19052:	d038      	beq.n	190c6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   19054:	0a20      	lsrs	r0, r4, #8
   19056:	f000 000f 	and.w	r0, r0, #15
   1905a:	f100 0537 	add.w	r5, r0, #55	; 0x37
   1905e:	280a      	cmp	r0, #10
   19060:	bf38      	it	cc
   19062:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   19066:	ebb1 3f14 	cmp.w	r1, r4, lsr #12
   1906a:	f802 5c04 	strb.w	r5, [r2, #-4]
   1906e:	d032      	beq.n	190d6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   19070:	0b20      	lsrs	r0, r4, #12
   19072:	3b04      	subs	r3, #4
   19074:	f000 000f 	and.w	r0, r0, #15
   19078:	f100 0537 	add.w	r5, r0, #55	; 0x37
   1907c:	280a      	cmp	r0, #10
   1907e:	bf38      	it	cc
   19080:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   19084:	0c20      	lsrs	r0, r4, #16
   19086:	ebb1 4f14 	cmp.w	r1, r4, lsr #16
   1908a:	4604      	mov	r4, r0
   1908c:	f802 5c05 	strb.w	r5, [r2, #-5]
   19090:	d1c3      	bne.n	1901a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x130>
   19092:	1e58      	subs	r0, r3, #1
   19094:	2881      	cmp	r0, #129	; 0x81
   19096:	d305      	bcc.n	190a4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   19098:	e019      	b.n	190ce <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   1909a:	1e59      	subs	r1, r3, #1
   1909c:	1e98      	subs	r0, r3, #2
   1909e:	460b      	mov	r3, r1
   190a0:	2881      	cmp	r0, #129	; 0x81
   190a2:	d214      	bcs.n	190ce <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   190a4:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   190a8:	f241 128d 	movw	r2, #4493	; 0x118d
   190ac:	4470      	add	r0, lr
   190ae:	f2c0 0202 	movt	r2, #2
   190b2:	e9cd 0100 	strd	r0, r1, [sp]
   190b6:	4660      	mov	r0, ip
   190b8:	2101      	movs	r1, #1
   190ba:	2302      	movs	r3, #2
   190bc:	f7ff f864 	bl	18188 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   190c0:	b023      	add	sp, #140	; 0x8c
   190c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190c6:	1ed8      	subs	r0, r3, #3
   190c8:	3b02      	subs	r3, #2
   190ca:	2881      	cmp	r0, #129	; 0x81
   190cc:	d3ea      	bcc.n	190a4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   190ce:	2180      	movs	r1, #128	; 0x80
   190d0:	f7ff fbf7 	bl	188c2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   190d4:	defe      	udf	#254	; 0xfe
   190d6:	1f18      	subs	r0, r3, #4
   190d8:	3b03      	subs	r3, #3
   190da:	2881      	cmp	r0, #129	; 0x81
   190dc:	d3e2      	bcc.n	190a4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   190de:	e7f6      	b.n	190ce <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   190e0:	2127      	movs	r1, #39	; 0x27
   190e2:	2c63      	cmp	r4, #99	; 0x63
   190e4:	f77f af49 	ble.w	18f7a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x90>
   190e8:	b2a0      	uxth	r0, r4
   190ea:	3902      	subs	r1, #2
   190ec:	fba0 030e 	umull	r0, r3, r0, lr
   190f0:	af03      	add	r7, sp, #12
   190f2:	2064      	movs	r0, #100	; 0x64
   190f4:	095b      	lsrs	r3, r3, #5
   190f6:	fb03 4010 	mls	r0, r3, r0, r4
   190fa:	b280      	uxth	r0, r0
   190fc:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   19100:	5278      	strh	r0, [r7, r1]
   19102:	2b0a      	cmp	r3, #10
   19104:	f6bf af3d 	bge.w	18f82 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x98>
   19108:	1e48      	subs	r0, r1, #1
   1910a:	aa03      	add	r2, sp, #12
   1910c:	f103 0130 	add.w	r1, r3, #48	; 0x30
   19110:	5411      	strb	r1, [r2, r0]
   19112:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   19116:	aa03      	add	r2, sp, #12
   19118:	4410      	add	r0, r2
   1911a:	f640 7254 	movw	r2, #3924	; 0xf54
   1911e:	e9cd 0100 	strd	r0, r1, [sp]
   19122:	f2c0 0202 	movt	r2, #2
   19126:	4660      	mov	r0, ip
   19128:	2101      	movs	r1, #1
   1912a:	2300      	movs	r3, #0
   1912c:	f7ff f82c 	bl	18188 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19130:	b023      	add	sp, #140	; 0x8c
   19132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019136 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>:
   19136:	b580      	push	{r7, lr}
   19138:	b0a2      	sub	sp, #136	; 0x88
   1913a:	7802      	ldrb	r2, [r0, #0]
   1913c:	468c      	mov	ip, r1
   1913e:	f002 030f 	and.w	r3, r2, #15
   19142:	f103 0057 	add.w	r0, r3, #87	; 0x57
   19146:	2b0a      	cmp	r3, #10
   19148:	bf38      	it	cc
   1914a:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   1914e:	2300      	movs	r3, #0
   19150:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   19154:	d00b      	beq.n	1916e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x38>
   19156:	0913      	lsrs	r3, r2, #4
   19158:	f103 0157 	add.w	r1, r3, #87	; 0x57
   1915c:	2aa0      	cmp	r2, #160	; 0xa0
   1915e:	bf38      	it	cc
   19160:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   19164:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   19168:	227e      	movs	r2, #126	; 0x7e
   1916a:	2302      	movs	r3, #2
   1916c:	e001      	b.n	19172 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x3c>
   1916e:	227f      	movs	r2, #127	; 0x7f
   19170:	2301      	movs	r3, #1
   19172:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   19176:	a802      	add	r0, sp, #8
   19178:	4410      	add	r0, r2
   1917a:	f241 128d 	movw	r2, #4493	; 0x118d
   1917e:	e9cd 0300 	strd	r0, r3, [sp]
   19182:	f2c0 0202 	movt	r2, #2
   19186:	4660      	mov	r0, ip
   19188:	2101      	movs	r1, #1
   1918a:	2302      	movs	r3, #2
   1918c:	f7fe fffc 	bl	18188 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19190:	b022      	add	sp, #136	; 0x88
   19192:	bd80      	pop	{r7, pc}

00019194 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>:
   19194:	b580      	push	{r7, lr}
   19196:	b0a2      	sub	sp, #136	; 0x88
   19198:	7802      	ldrb	r2, [r0, #0]
   1919a:	468c      	mov	ip, r1
   1919c:	f002 030f 	and.w	r3, r2, #15
   191a0:	f103 0037 	add.w	r0, r3, #55	; 0x37
   191a4:	2b0a      	cmp	r3, #10
   191a6:	bf38      	it	cc
   191a8:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   191ac:	2300      	movs	r3, #0
   191ae:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   191b2:	d00b      	beq.n	191cc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x38>
   191b4:	0913      	lsrs	r3, r2, #4
   191b6:	f103 0137 	add.w	r1, r3, #55	; 0x37
   191ba:	2aa0      	cmp	r2, #160	; 0xa0
   191bc:	bf38      	it	cc
   191be:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   191c2:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   191c6:	227e      	movs	r2, #126	; 0x7e
   191c8:	2302      	movs	r3, #2
   191ca:	e001      	b.n	191d0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x3c>
   191cc:	227f      	movs	r2, #127	; 0x7f
   191ce:	2301      	movs	r3, #1
   191d0:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   191d4:	a802      	add	r0, sp, #8
   191d6:	4410      	add	r0, r2
   191d8:	f241 128d 	movw	r2, #4493	; 0x118d
   191dc:	e9cd 0300 	strd	r0, r3, [sp]
   191e0:	f2c0 0202 	movt	r2, #2
   191e4:	4660      	mov	r0, ip
   191e6:	2101      	movs	r1, #1
   191e8:	2302      	movs	r3, #2
   191ea:	f7fe ffcd 	bl	18188 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   191ee:	b022      	add	sp, #136	; 0x88
   191f0:	bd80      	pop	{r7, pc}

000191f2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>:
   191f2:	b580      	push	{r7, lr}
   191f4:	b0a2      	sub	sp, #136	; 0x88
   191f6:	8800      	ldrh	r0, [r0, #0]
   191f8:	468c      	mov	ip, r1
   191fa:	f000 020f 	and.w	r2, r0, #15
   191fe:	f102 0357 	add.w	r3, r2, #87	; 0x57
   19202:	2a0a      	cmp	r2, #10
   19204:	bf38      	it	cc
   19206:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   1920a:	2200      	movs	r2, #0
   1920c:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   19210:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   19214:	d02a      	beq.n	1926c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x7a>
   19216:	0903      	lsrs	r3, r0, #4
   19218:	f003 030f 	and.w	r3, r3, #15
   1921c:	f103 0157 	add.w	r1, r3, #87	; 0x57
   19220:	2b0a      	cmp	r3, #10
   19222:	bf38      	it	cc
   19224:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   19228:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   1922c:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   19230:	d031      	beq.n	19296 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xa4>
   19232:	0a01      	lsrs	r1, r0, #8
   19234:	f001 010f 	and.w	r1, r1, #15
   19238:	f101 0257 	add.w	r2, r1, #87	; 0x57
   1923c:	290a      	cmp	r1, #10
   1923e:	bf38      	it	cc
   19240:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   19244:	2100      	movs	r1, #0
   19246:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   1924a:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   1924e:	d027      	beq.n	192a0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xae>
   19250:	0b00      	lsrs	r0, r0, #12
   19252:	f100 0157 	add.w	r1, r0, #87	; 0x57
   19256:	280a      	cmp	r0, #10
   19258:	bf38      	it	cc
   1925a:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   1925e:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   19262:	227d      	movs	r2, #125	; 0x7d
   19264:	207c      	movs	r0, #124	; 0x7c
   19266:	2881      	cmp	r0, #129	; 0x81
   19268:	d304      	bcc.n	19274 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   1926a:	e01d      	b.n	192a8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   1926c:	2280      	movs	r2, #128	; 0x80
   1926e:	207f      	movs	r0, #127	; 0x7f
   19270:	2881      	cmp	r0, #129	; 0x81
   19272:	d219      	bcs.n	192a8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   19274:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   19278:	ab02      	add	r3, sp, #8
   1927a:	4418      	add	r0, r3
   1927c:	2101      	movs	r1, #1
   1927e:	e9cd 0200 	strd	r0, r2, [sp]
   19282:	f241 128d 	movw	r2, #4493	; 0x118d
   19286:	f2c0 0202 	movt	r2, #2
   1928a:	4660      	mov	r0, ip
   1928c:	2302      	movs	r3, #2
   1928e:	f7fe ff7b 	bl	18188 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19292:	b022      	add	sp, #136	; 0x88
   19294:	bd80      	pop	{r7, pc}
   19296:	207e      	movs	r0, #126	; 0x7e
   19298:	227f      	movs	r2, #127	; 0x7f
   1929a:	2881      	cmp	r0, #129	; 0x81
   1929c:	d3ea      	bcc.n	19274 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   1929e:	e003      	b.n	192a8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   192a0:	207d      	movs	r0, #125	; 0x7d
   192a2:	227e      	movs	r2, #126	; 0x7e
   192a4:	2881      	cmp	r0, #129	; 0x81
   192a6:	d3e5      	bcc.n	19274 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   192a8:	2180      	movs	r1, #128	; 0x80
   192aa:	f7ff fb0a 	bl	188c2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   192ae:	defe      	udf	#254	; 0xfe

000192b0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>:
   192b0:	b580      	push	{r7, lr}
   192b2:	b0a2      	sub	sp, #136	; 0x88
   192b4:	8800      	ldrh	r0, [r0, #0]
   192b6:	468c      	mov	ip, r1
   192b8:	f000 020f 	and.w	r2, r0, #15
   192bc:	f102 0337 	add.w	r3, r2, #55	; 0x37
   192c0:	2a0a      	cmp	r2, #10
   192c2:	bf38      	it	cc
   192c4:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   192c8:	2200      	movs	r2, #0
   192ca:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   192ce:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   192d2:	d02a      	beq.n	1932a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x7a>
   192d4:	0903      	lsrs	r3, r0, #4
   192d6:	f003 030f 	and.w	r3, r3, #15
   192da:	f103 0137 	add.w	r1, r3, #55	; 0x37
   192de:	2b0a      	cmp	r3, #10
   192e0:	bf38      	it	cc
   192e2:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   192e6:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   192ea:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   192ee:	d031      	beq.n	19354 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xa4>
   192f0:	0a01      	lsrs	r1, r0, #8
   192f2:	f001 010f 	and.w	r1, r1, #15
   192f6:	f101 0237 	add.w	r2, r1, #55	; 0x37
   192fa:	290a      	cmp	r1, #10
   192fc:	bf38      	it	cc
   192fe:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   19302:	2100      	movs	r1, #0
   19304:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   19308:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   1930c:	d027      	beq.n	1935e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xae>
   1930e:	0b00      	lsrs	r0, r0, #12
   19310:	f100 0137 	add.w	r1, r0, #55	; 0x37
   19314:	280a      	cmp	r0, #10
   19316:	bf38      	it	cc
   19318:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   1931c:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   19320:	227d      	movs	r2, #125	; 0x7d
   19322:	207c      	movs	r0, #124	; 0x7c
   19324:	2881      	cmp	r0, #129	; 0x81
   19326:	d304      	bcc.n	19332 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   19328:	e01d      	b.n	19366 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   1932a:	2280      	movs	r2, #128	; 0x80
   1932c:	207f      	movs	r0, #127	; 0x7f
   1932e:	2881      	cmp	r0, #129	; 0x81
   19330:	d219      	bcs.n	19366 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   19332:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   19336:	ab02      	add	r3, sp, #8
   19338:	4418      	add	r0, r3
   1933a:	2101      	movs	r1, #1
   1933c:	e9cd 0200 	strd	r0, r2, [sp]
   19340:	f241 128d 	movw	r2, #4493	; 0x118d
   19344:	f2c0 0202 	movt	r2, #2
   19348:	4660      	mov	r0, ip
   1934a:	2302      	movs	r3, #2
   1934c:	f7fe ff1c 	bl	18188 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19350:	b022      	add	sp, #136	; 0x88
   19352:	bd80      	pop	{r7, pc}
   19354:	207e      	movs	r0, #126	; 0x7e
   19356:	227f      	movs	r2, #127	; 0x7f
   19358:	2881      	cmp	r0, #129	; 0x81
   1935a:	d3ea      	bcc.n	19332 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   1935c:	e003      	b.n	19366 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   1935e:	207d      	movs	r0, #125	; 0x7d
   19360:	227e      	movs	r2, #126	; 0x7e
   19362:	2881      	cmp	r0, #129	; 0x81
   19364:	d3e5      	bcc.n	19332 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   19366:	2180      	movs	r1, #128	; 0x80
   19368:	f7ff faab 	bl	188c2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1936c:	defe      	udf	#254	; 0xfe

0001936e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>:
   1936e:	b5b0      	push	{r4, r5, r7, lr}
   19370:	b0a2      	sub	sp, #136	; 0x88
   19372:	6800      	ldr	r0, [r0, #0]
   19374:	f10d 0e08 	add.w	lr, sp, #8
   19378:	468c      	mov	ip, r1
   1937a:	2381      	movs	r3, #129	; 0x81
   1937c:	2100      	movs	r1, #0
   1937e:	f000 020f 	and.w	r2, r0, #15
   19382:	f102 0457 	add.w	r4, r2, #87	; 0x57
   19386:	2a0a      	cmp	r2, #10
   19388:	bf38      	it	cc
   1938a:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   1938e:	eb0e 0203 	add.w	r2, lr, r3
   19392:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   19396:	f802 4c02 	strb.w	r4, [r2, #-2]
   1939a:	d030      	beq.n	193fe <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x90>
   1939c:	0904      	lsrs	r4, r0, #4
   1939e:	f004 040f 	and.w	r4, r4, #15
   193a2:	f104 0557 	add.w	r5, r4, #87	; 0x57
   193a6:	2c0a      	cmp	r4, #10
   193a8:	bf38      	it	cc
   193aa:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   193ae:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   193b2:	f802 5c03 	strb.w	r5, [r2, #-3]
   193b6:	d028      	beq.n	1940a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x9c>
   193b8:	0a04      	lsrs	r4, r0, #8
   193ba:	f004 040f 	and.w	r4, r4, #15
   193be:	f104 0557 	add.w	r5, r4, #87	; 0x57
   193c2:	2c0a      	cmp	r4, #10
   193c4:	bf38      	it	cc
   193c6:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   193ca:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   193ce:	f802 5c04 	strb.w	r5, [r2, #-4]
   193d2:	d01f      	beq.n	19414 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xa6>
   193d4:	0b04      	lsrs	r4, r0, #12
   193d6:	3b04      	subs	r3, #4
   193d8:	f004 040f 	and.w	r4, r4, #15
   193dc:	f104 0557 	add.w	r5, r4, #87	; 0x57
   193e0:	2c0a      	cmp	r4, #10
   193e2:	bf38      	it	cc
   193e4:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   193e8:	f802 5c05 	strb.w	r5, [r2, #-5]
   193ec:	0c02      	lsrs	r2, r0, #16
   193ee:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   193f2:	4610      	mov	r0, r2
   193f4:	d1c3      	bne.n	1937e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x10>
   193f6:	1e58      	subs	r0, r3, #1
   193f8:	2881      	cmp	r0, #129	; 0x81
   193fa:	d30f      	bcc.n	1941c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   193fc:	e01e      	b.n	1943c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   193fe:	1e59      	subs	r1, r3, #1
   19400:	1e98      	subs	r0, r3, #2
   19402:	460b      	mov	r3, r1
   19404:	2881      	cmp	r0, #129	; 0x81
   19406:	d309      	bcc.n	1941c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   19408:	e018      	b.n	1943c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   1940a:	1ed8      	subs	r0, r3, #3
   1940c:	3b02      	subs	r3, #2
   1940e:	2881      	cmp	r0, #129	; 0x81
   19410:	d304      	bcc.n	1941c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   19412:	e013      	b.n	1943c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   19414:	1f18      	subs	r0, r3, #4
   19416:	3b03      	subs	r3, #3
   19418:	2881      	cmp	r0, #129	; 0x81
   1941a:	d20f      	bcs.n	1943c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   1941c:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   19420:	f241 128d 	movw	r2, #4493	; 0x118d
   19424:	4470      	add	r0, lr
   19426:	f2c0 0202 	movt	r2, #2
   1942a:	e9cd 0100 	strd	r0, r1, [sp]
   1942e:	4660      	mov	r0, ip
   19430:	2101      	movs	r1, #1
   19432:	2302      	movs	r3, #2
   19434:	f7fe fea8 	bl	18188 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19438:	b022      	add	sp, #136	; 0x88
   1943a:	bdb0      	pop	{r4, r5, r7, pc}
   1943c:	2180      	movs	r1, #128	; 0x80
   1943e:	f7ff fa40 	bl	188c2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   19442:	defe      	udf	#254	; 0xfe

00019444 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>:
   19444:	b5b0      	push	{r4, r5, r7, lr}
   19446:	b0a2      	sub	sp, #136	; 0x88
   19448:	6800      	ldr	r0, [r0, #0]
   1944a:	f10d 0e08 	add.w	lr, sp, #8
   1944e:	468c      	mov	ip, r1
   19450:	2381      	movs	r3, #129	; 0x81
   19452:	2100      	movs	r1, #0
   19454:	f000 020f 	and.w	r2, r0, #15
   19458:	f102 0437 	add.w	r4, r2, #55	; 0x37
   1945c:	2a0a      	cmp	r2, #10
   1945e:	bf38      	it	cc
   19460:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   19464:	eb0e 0203 	add.w	r2, lr, r3
   19468:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   1946c:	f802 4c02 	strb.w	r4, [r2, #-2]
   19470:	d030      	beq.n	194d4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x90>
   19472:	0904      	lsrs	r4, r0, #4
   19474:	f004 040f 	and.w	r4, r4, #15
   19478:	f104 0537 	add.w	r5, r4, #55	; 0x37
   1947c:	2c0a      	cmp	r4, #10
   1947e:	bf38      	it	cc
   19480:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   19484:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   19488:	f802 5c03 	strb.w	r5, [r2, #-3]
   1948c:	d028      	beq.n	194e0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x9c>
   1948e:	0a04      	lsrs	r4, r0, #8
   19490:	f004 040f 	and.w	r4, r4, #15
   19494:	f104 0537 	add.w	r5, r4, #55	; 0x37
   19498:	2c0a      	cmp	r4, #10
   1949a:	bf38      	it	cc
   1949c:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   194a0:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   194a4:	f802 5c04 	strb.w	r5, [r2, #-4]
   194a8:	d01f      	beq.n	194ea <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xa6>
   194aa:	0b04      	lsrs	r4, r0, #12
   194ac:	3b04      	subs	r3, #4
   194ae:	f004 040f 	and.w	r4, r4, #15
   194b2:	f104 0537 	add.w	r5, r4, #55	; 0x37
   194b6:	2c0a      	cmp	r4, #10
   194b8:	bf38      	it	cc
   194ba:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   194be:	f802 5c05 	strb.w	r5, [r2, #-5]
   194c2:	0c02      	lsrs	r2, r0, #16
   194c4:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   194c8:	4610      	mov	r0, r2
   194ca:	d1c3      	bne.n	19454 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x10>
   194cc:	1e58      	subs	r0, r3, #1
   194ce:	2881      	cmp	r0, #129	; 0x81
   194d0:	d30f      	bcc.n	194f2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   194d2:	e01e      	b.n	19512 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   194d4:	1e59      	subs	r1, r3, #1
   194d6:	1e98      	subs	r0, r3, #2
   194d8:	460b      	mov	r3, r1
   194da:	2881      	cmp	r0, #129	; 0x81
   194dc:	d309      	bcc.n	194f2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   194de:	e018      	b.n	19512 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   194e0:	1ed8      	subs	r0, r3, #3
   194e2:	3b02      	subs	r3, #2
   194e4:	2881      	cmp	r0, #129	; 0x81
   194e6:	d304      	bcc.n	194f2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   194e8:	e013      	b.n	19512 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   194ea:	1f18      	subs	r0, r3, #4
   194ec:	3b03      	subs	r3, #3
   194ee:	2881      	cmp	r0, #129	; 0x81
   194f0:	d20f      	bcs.n	19512 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   194f2:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   194f6:	f241 128d 	movw	r2, #4493	; 0x118d
   194fa:	4470      	add	r0, lr
   194fc:	f2c0 0202 	movt	r2, #2
   19500:	e9cd 0100 	strd	r0, r1, [sp]
   19504:	4660      	mov	r0, ip
   19506:	2101      	movs	r1, #1
   19508:	2302      	movs	r3, #2
   1950a:	f7fe fe3d 	bl	18188 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1950e:	b022      	add	sp, #136	; 0x88
   19510:	bdb0      	pop	{r4, r5, r7, pc}
   19512:	2180      	movs	r1, #128	; 0x80
   19514:	f7ff f9d5 	bl	188c2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   19518:	defe      	udf	#254	; 0xfe

0001951a <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>:
   1951a:	b580      	push	{r7, lr}
   1951c:	b08c      	sub	sp, #48	; 0x30
   1951e:	7802      	ldrb	r2, [r0, #0]
   19520:	2a64      	cmp	r2, #100	; 0x64
   19522:	d314      	bcc.n	1954e <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x34>
   19524:	f248 501f 	movw	r0, #34079	; 0x851f
   19528:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
   1952c:	fba2 0300 	umull	r0, r3, r2, r0
   19530:	2064      	movs	r0, #100	; 0x64
   19532:	095b      	lsrs	r3, r3, #5
   19534:	fb03 2010 	mls	r0, r3, r0, r2
   19538:	f241 128f 	movw	r2, #4495	; 0x118f
   1953c:	f2c0 0202 	movt	r2, #2
   19540:	b2c0      	uxtb	r0, r0
   19542:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   19546:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   1954a:	2024      	movs	r0, #36	; 0x24
   1954c:	e003      	b.n	19556 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x3c>
   1954e:	2a0a      	cmp	r2, #10
   19550:	d206      	bcs.n	19560 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x46>
   19552:	2026      	movs	r0, #38	; 0x26
   19554:	4613      	mov	r3, r2
   19556:	f103 0230 	add.w	r2, r3, #48	; 0x30
   1955a:	ab02      	add	r3, sp, #8
   1955c:	541a      	strb	r2, [r3, r0]
   1955e:	e008      	b.n	19572 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x58>
   19560:	f241 108f 	movw	r0, #4495	; 0x118f
   19564:	f2c0 0002 	movt	r0, #2
   19568:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   1956c:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   19570:	2025      	movs	r0, #37	; 0x25
   19572:	f1c0 0227 	rsb	r2, r0, #39	; 0x27
   19576:	ab02      	add	r3, sp, #8
   19578:	4418      	add	r0, r3
   1957a:	2300      	movs	r3, #0
   1957c:	e9cd 0200 	strd	r0, r2, [sp]
   19580:	f640 7254 	movw	r2, #3924	; 0xf54
   19584:	4608      	mov	r0, r1
   19586:	f2c0 0202 	movt	r2, #2
   1958a:	2101      	movs	r1, #1
   1958c:	f7fe fdfc 	bl	18188 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19590:	b00c      	add	sp, #48	; 0x30
   19592:	bd80      	pop	{r7, pc}

00019594 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>:
   19594:	b580      	push	{r7, lr}
   19596:	b08c      	sub	sp, #48	; 0x30
   19598:	8800      	ldrh	r0, [r0, #0]
   1959a:	f242 720f 	movw	r2, #9999	; 0x270f
   1959e:	468e      	mov	lr, r1
   195a0:	4290      	cmp	r0, r2
   195a2:	d924      	bls.n	195ee <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x5a>
   195a4:	f241 7259 	movw	r2, #5977	; 0x1759
   195a8:	f248 511f 	movw	r1, #34079	; 0x851f
   195ac:	f2cd 12b7 	movt	r2, #53687	; 0xd1b7
   195b0:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   195b4:	fba0 2302 	umull	r2, r3, r0, r2
   195b8:	0b5a      	lsrs	r2, r3, #13
   195ba:	f242 7310 	movw	r3, #10000	; 0x2710
   195be:	fb02 0013 	mls	r0, r2, r3, r0
   195c2:	b283      	uxth	r3, r0
   195c4:	fba3 1301 	umull	r1, r3, r3, r1
   195c8:	0959      	lsrs	r1, r3, #5
   195ca:	2364      	movs	r3, #100	; 0x64
   195cc:	fb01 0013 	mls	r0, r1, r3, r0
   195d0:	f241 138f 	movw	r3, #4495	; 0x118f
   195d4:	f2c0 0302 	movt	r3, #2
   195d8:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   195dc:	f8ad 102b 	strh.w	r1, [sp, #43]	; 0x2b
   195e0:	b280      	uxth	r0, r0
   195e2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   195e6:	2323      	movs	r3, #35	; 0x23
   195e8:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   195ec:	e024      	b.n	19638 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa4>
   195ee:	f241 1c8f 	movw	ip, #4495	; 0x118f
   195f2:	2863      	cmp	r0, #99	; 0x63
   195f4:	f2c0 0c02 	movt	ip, #2
   195f8:	d919      	bls.n	1962e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x9a>
   195fa:	f248 511f 	movw	r1, #34079	; 0x851f
   195fe:	2325      	movs	r3, #37	; 0x25
   19600:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   19604:	fba0 1201 	umull	r1, r2, r0, r1
   19608:	0951      	lsrs	r1, r2, #5
   1960a:	2264      	movs	r2, #100	; 0x64
   1960c:	fb01 0012 	mls	r0, r1, r2, r0
   19610:	b280      	uxth	r0, r0
   19612:	f83c 0010 	ldrh.w	r0, [ip, r0, lsl #1]
   19616:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   1961a:	4608      	mov	r0, r1
   1961c:	b282      	uxth	r2, r0
   1961e:	2a0a      	cmp	r2, #10
   19620:	d309      	bcc.n	19636 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa2>
   19622:	f83c 1012 	ldrh.w	r1, [ip, r2, lsl #1]
   19626:	1e98      	subs	r0, r3, #2
   19628:	aa02      	add	r2, sp, #8
   1962a:	5211      	strh	r1, [r2, r0]
   1962c:	e009      	b.n	19642 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xae>
   1962e:	2327      	movs	r3, #39	; 0x27
   19630:	b282      	uxth	r2, r0
   19632:	2a0a      	cmp	r2, #10
   19634:	d2f5      	bcs.n	19622 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x8e>
   19636:	4602      	mov	r2, r0
   19638:	1e58      	subs	r0, r3, #1
   1963a:	f102 0130 	add.w	r1, r2, #48	; 0x30
   1963e:	aa02      	add	r2, sp, #8
   19640:	5411      	strb	r1, [r2, r0]
   19642:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   19646:	aa02      	add	r2, sp, #8
   19648:	4410      	add	r0, r2
   1964a:	f640 7254 	movw	r2, #3924	; 0xf54
   1964e:	e9cd 0100 	strd	r0, r1, [sp]
   19652:	f2c0 0202 	movt	r2, #2
   19656:	4670      	mov	r0, lr
   19658:	2101      	movs	r1, #1
   1965a:	2300      	movs	r3, #0
   1965c:	f7fe fd94 	bl	18188 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19660:	b00c      	add	sp, #48	; 0x30
   19662:	bd80      	pop	{r7, pc}

00019664 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>:
   19664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19668:	b08f      	sub	sp, #60	; 0x3c
   1966a:	6805      	ldr	r5, [r0, #0]
   1966c:	f248 581f 	movw	r8, #34079	; 0x851f
   19670:	460e      	mov	r6, r1
   19672:	f241 118f 	movw	r1, #4495	; 0x118f
   19676:	2d00      	cmp	r5, #0
   19678:	f242 7910 	movw	r9, #10000	; 0x2710
   1967c:	462b      	mov	r3, r5
   1967e:	f2c5 18eb 	movt	r8, #20971	; 0x51eb
   19682:	bf48      	it	mi
   19684:	426b      	negmi	r3, r5
   19686:	454b      	cmp	r3, r9
   19688:	f2c0 0102 	movt	r1, #2
   1968c:	d33a      	bcc.n	19704 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa0>
   1968e:	f241 7a59 	movw	sl, #5977	; 0x1759
   19692:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
   19696:	f10d 0e14 	add.w	lr, sp, #20
   1969a:	2400      	movs	r4, #0
   1969c:	f2cd 1ab7 	movt	sl, #53687	; 0xd1b7
   196a0:	f04f 0b64 	mov.w	fp, #100	; 0x64
   196a4:	f2c0 50f5 	movt	r0, #1525	; 0x5f5
   196a8:	e9cd 5603 	strd	r5, r6, [sp, #12]
   196ac:	fba3 250a 	umull	r2, r5, r3, sl
   196b0:	eb0e 0704 	add.w	r7, lr, r4
   196b4:	3c04      	subs	r4, #4
   196b6:	4283      	cmp	r3, r0
   196b8:	ea4f 3255 	mov.w	r2, r5, lsr #13
   196bc:	fb02 3519 	mls	r5, r2, r9, r3
   196c0:	4613      	mov	r3, r2
   196c2:	b2ae      	uxth	r6, r5
   196c4:	fba6 6c08 	umull	r6, ip, r6, r8
   196c8:	ea4f 165c 	mov.w	r6, ip, lsr #5
   196cc:	fb06 551b 	mls	r5, r6, fp, r5
   196d0:	f831 6016 	ldrh.w	r6, [r1, r6, lsl #1]
   196d4:	f8a7 6023 	strh.w	r6, [r7, #35]	; 0x23
   196d8:	b2ad      	uxth	r5, r5
   196da:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   196de:	f8a7 5025 	strh.w	r5, [r7, #37]	; 0x25
   196e2:	d8e3      	bhi.n	196ac <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x48>
   196e4:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
   196e8:	f104 0027 	add.w	r0, r4, #39	; 0x27
   196ec:	4613      	mov	r3, r2
   196ee:	2b63      	cmp	r3, #99	; 0x63
   196f0:	dc0b      	bgt.n	1970a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa6>
   196f2:	461a      	mov	r2, r3
   196f4:	2a0a      	cmp	r2, #10
   196f6:	db17      	blt.n	19728 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xc4>
   196f8:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   196fc:	3802      	subs	r0, #2
   196fe:	aa05      	add	r2, sp, #20
   19700:	5211      	strh	r1, [r2, r0]
   19702:	e016      	b.n	19732 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xce>
   19704:	2027      	movs	r0, #39	; 0x27
   19706:	2b63      	cmp	r3, #99	; 0x63
   19708:	ddf3      	ble.n	196f2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x8e>
   1970a:	b29a      	uxth	r2, r3
   1970c:	3802      	subs	r0, #2
   1970e:	fba2 2708 	umull	r2, r7, r2, r8
   19712:	097a      	lsrs	r2, r7, #5
   19714:	2764      	movs	r7, #100	; 0x64
   19716:	fb02 3317 	mls	r3, r2, r7, r3
   1971a:	af05      	add	r7, sp, #20
   1971c:	b29b      	uxth	r3, r3
   1971e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   19722:	523b      	strh	r3, [r7, r0]
   19724:	2a0a      	cmp	r2, #10
   19726:	dae7      	bge.n	196f8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x94>
   19728:	3801      	subs	r0, #1
   1972a:	f102 0130 	add.w	r1, r2, #48	; 0x30
   1972e:	aa05      	add	r2, sp, #20
   19730:	5411      	strb	r1, [r2, r0]
   19732:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   19736:	aa05      	add	r2, sp, #20
   19738:	4410      	add	r0, r2
   1973a:	f640 7254 	movw	r2, #3924	; 0xf54
   1973e:	e9cd 0100 	strd	r0, r1, [sp]
   19742:	43e8      	mvns	r0, r5
   19744:	0fc1      	lsrs	r1, r0, #31
   19746:	f2c0 0202 	movt	r2, #2
   1974a:	4630      	mov	r0, r6
   1974c:	2300      	movs	r3, #0
   1974e:	f7fe fd1b 	bl	18188 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19752:	b00f      	add	sp, #60	; 0x3c
   19754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019758 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>:
   19758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1975c:	b08d      	sub	sp, #52	; 0x34
   1975e:	468c      	mov	ip, r1
   19760:	6801      	ldr	r1, [r0, #0]
   19762:	f248 5e1f 	movw	lr, #34079	; 0x851f
   19766:	f241 108f 	movw	r0, #4495	; 0x118f
   1976a:	f242 7810 	movw	r8, #10000	; 0x2710
   1976e:	4541      	cmp	r1, r8
   19770:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   19774:	f2c0 0002 	movt	r0, #2
   19778:	d337      	bcc.n	197ea <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x92>
   1977a:	f241 7959 	movw	r9, #5977	; 0x1759
   1977e:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   19782:	f10d 0b0c 	add.w	fp, sp, #12
   19786:	2300      	movs	r3, #0
   19788:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   1978c:	f04f 0a64 	mov.w	sl, #100	; 0x64
   19790:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   19794:	fba1 2409 	umull	r2, r4, r1, r9
   19798:	42b9      	cmp	r1, r7
   1979a:	ea4f 3254 	mov.w	r2, r4, lsr #13
   1979e:	fb02 1418 	mls	r4, r2, r8, r1
   197a2:	4611      	mov	r1, r2
   197a4:	b2a5      	uxth	r5, r4
   197a6:	fba5 560e 	umull	r5, r6, r5, lr
   197aa:	ea4f 1556 	mov.w	r5, r6, lsr #5
   197ae:	eb0b 0603 	add.w	r6, fp, r3
   197b2:	fb05 441a 	mls	r4, r5, sl, r4
   197b6:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   197ba:	f1a3 0304 	sub.w	r3, r3, #4
   197be:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   197c2:	b2a4      	uxth	r4, r4
   197c4:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   197c8:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   197cc:	d8e2      	bhi.n	19794 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x3c>
   197ce:	f103 0427 	add.w	r4, r3, #39	; 0x27
   197d2:	4611      	mov	r1, r2
   197d4:	2963      	cmp	r1, #99	; 0x63
   197d6:	dc0b      	bgt.n	197f0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x98>
   197d8:	460b      	mov	r3, r1
   197da:	2b0a      	cmp	r3, #10
   197dc:	db17      	blt.n	1980e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xb6>
   197de:	1ea1      	subs	r1, r4, #2
   197e0:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   197e4:	aa03      	add	r2, sp, #12
   197e6:	5250      	strh	r0, [r2, r1]
   197e8:	e016      	b.n	19818 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xc0>
   197ea:	2427      	movs	r4, #39	; 0x27
   197ec:	2963      	cmp	r1, #99	; 0x63
   197ee:	ddf3      	ble.n	197d8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x80>
   197f0:	b28a      	uxth	r2, r1
   197f2:	3c02      	subs	r4, #2
   197f4:	fba2 230e 	umull	r2, r3, r2, lr
   197f8:	2264      	movs	r2, #100	; 0x64
   197fa:	095b      	lsrs	r3, r3, #5
   197fc:	fb03 1112 	mls	r1, r3, r2, r1
   19800:	aa03      	add	r2, sp, #12
   19802:	b289      	uxth	r1, r1
   19804:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   19808:	5311      	strh	r1, [r2, r4]
   1980a:	2b0a      	cmp	r3, #10
   1980c:	dae7      	bge.n	197de <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x86>
   1980e:	1e61      	subs	r1, r4, #1
   19810:	aa03      	add	r2, sp, #12
   19812:	f103 0030 	add.w	r0, r3, #48	; 0x30
   19816:	5450      	strb	r0, [r2, r1]
   19818:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   1981c:	aa03      	add	r2, sp, #12
   1981e:	4411      	add	r1, r2
   19820:	f640 7254 	movw	r2, #3924	; 0xf54
   19824:	e9cd 1000 	strd	r1, r0, [sp]
   19828:	f2c0 0202 	movt	r2, #2
   1982c:	4660      	mov	r0, ip
   1982e:	2101      	movs	r1, #1
   19830:	2300      	movs	r3, #0
   19832:	f7fe fca9 	bl	18188 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19836:	b00d      	add	sp, #52	; 0x34
   19838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001983c <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E>:
   1983c:	e9d0 2000 	ldrd	r2, r0, [r0]
   19840:	68c3      	ldr	r3, [r0, #12]
   19842:	4610      	mov	r0, r2
   19844:	4718      	bx	r3

00019846 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E>:
   19846:	460b      	mov	r3, r1
   19848:	e9d0 1200 	ldrd	r1, r2, [r0]
   1984c:	4618      	mov	r0, r3
   1984e:	f7fe bde3 	b.w	18418 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
	...

00019854 <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
   19854:	4b07      	ldr	r3, [pc, #28]	; (19874 <__semihost+0x20>)
   19856:	781b      	ldrb	r3, [r3, #0]
   19858:	b14b      	cbz	r3, 1986e <__semihost+0x1a>
static int __semihost(int command, void* message) {
   1985a:	b410      	push	{r4}
   1985c:	4602      	mov	r2, r0
   1985e:	460c      	mov	r4, r1
    __asm( 
   19860:	4610      	mov	r0, r2
   19862:	4621      	mov	r1, r4
   19864:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
   19866:	2000      	movs	r0, #0
}
   19868:	f85d 4b04 	ldr.w	r4, [sp], #4
   1986c:	4770      	bx	lr
    if (!log_enabled) return -1;
   1986e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19872:	4770      	bx	lr
   19874:	20000100 	.word	0x20000100

00019878 <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   19878:	4b02      	ldr	r3, [pc, #8]	; (19884 <debugger_connected+0xc>)
   1987a:	6818      	ldr	r0, [r3, #0]
}
   1987c:	f000 0001 	and.w	r0, r0, #1
   19880:	4770      	bx	lr
   19882:	bf00      	nop
   19884:	e000edf0 	.word	0xe000edf0

00019888 <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
   19888:	b570      	push	{r4, r5, r6, lr}
   1988a:	b084      	sub	sp, #16
   1988c:	4606      	mov	r6, r0
   1988e:	460d      	mov	r5, r1
   19890:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
   19892:	f7ff fff1 	bl	19878 <debugger_connected>
   19896:	4603      	mov	r3, r0
   19898:	b108      	cbz	r0, 1989e <semihost_write+0x16>
    if (length == 0) { return 0; }
   1989a:	b91c      	cbnz	r4, 198a4 <semihost_write+0x1c>
   1989c:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
   1989e:	4618      	mov	r0, r3
   198a0:	b004      	add	sp, #16
   198a2:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
   198a4:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
   198a6:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
   198a8:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
   198aa:	a901      	add	r1, sp, #4
   198ac:	2005      	movs	r0, #5
   198ae:	f7ff ffd1 	bl	19854 <__semihost>
   198b2:	4603      	mov	r3, r0
   198b4:	e7f3      	b.n	1989e <semihost_write+0x16>
	...

000198b8 <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
   198b8:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
   198ba:	4b0e      	ldr	r3, [pc, #56]	; (198f4 <console_flush+0x3c>)
   198bc:	781b      	ldrb	r3, [r3, #0]
   198be:	b1bb      	cbz	r3, 198f0 <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
   198c0:	4b0d      	ldr	r3, [pc, #52]	; (198f8 <console_flush+0x40>)
   198c2:	681d      	ldr	r5, [r3, #0]
   198c4:	b1a5      	cbz	r5, 198f0 <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   198c6:	4b0d      	ldr	r3, [pc, #52]	; (198fc <console_flush+0x44>)
   198c8:	685b      	ldr	r3, [r3, #4]
   198ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
   198ce:	b97b      	cbnz	r3, 198f0 <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
   198d0:	4b09      	ldr	r3, [pc, #36]	; (198f8 <console_flush+0x40>)
   198d2:	2200      	movs	r2, #0
   198d4:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
   198d6:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
   198d8:	e005      	b.n	198e6 <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
   198da:	88e2      	ldrh	r2, [r4, #6]
   198dc:	6821      	ldr	r1, [r4, #0]
   198de:	2002      	movs	r0, #2
   198e0:	f7ff ffd2 	bl	19888 <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
   198e4:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
   198e6:	2c00      	cmp	r4, #0
   198e8:	d1f7      	bne.n	198da <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
   198ea:	4628      	mov	r0, r5
   198ec:	f001 fbfc 	bl	1b0e8 <os_mbuf_free_chain>
}
   198f0:	bd38      	pop	{r3, r4, r5, pc}
   198f2:	bf00      	nop
   198f4:	20000100 	.word	0x20000100
   198f8:	20006f04 	.word	0x20006f04
   198fc:	e000ed00 	.word	0xe000ed00

00019900 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
   19900:	b508      	push	{r3, lr}
   19902:	f7ff ffd9 	bl	198b8 <console_flush>
   19906:	bd08      	pop	{r3, pc}

00019908 <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
   19908:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
   1990a:	4b12      	ldr	r3, [pc, #72]	; (19954 <console_buffer+0x4c>)
   1990c:	781b      	ldrb	r3, [r3, #0]
   1990e:	b903      	cbnz	r3, 19912 <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
   19910:	bd38      	pop	{r3, r4, r5, pc}
   19912:	460d      	mov	r5, r1
   19914:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
   19916:	f7ff ffaf 	bl	19878 <debugger_connected>
   1991a:	2800      	cmp	r0, #0
   1991c:	d0f8      	beq.n	19910 <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
   1991e:	4b0e      	ldr	r3, [pc, #56]	; (19958 <console_buffer+0x50>)
   19920:	681b      	ldr	r3, [r3, #0]
   19922:	b173      	cbz	r3, 19942 <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
   19924:	4b0c      	ldr	r3, [pc, #48]	; (19958 <console_buffer+0x50>)
   19926:	6818      	ldr	r0, [r3, #0]
   19928:	f001 fbf0 	bl	1b10c <os_mbuf_len>
   1992c:	4428      	add	r0, r5
   1992e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   19932:	d2ed      	bcs.n	19910 <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
   19934:	b2aa      	uxth	r2, r5
   19936:	4621      	mov	r1, r4
   19938:	4b07      	ldr	r3, [pc, #28]	; (19958 <console_buffer+0x50>)
   1993a:	6818      	ldr	r0, [r3, #0]
   1993c:	f001 fbf0 	bl	1b120 <os_mbuf_append>
   19940:	e7e6      	b.n	19910 <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
   19942:	2100      	movs	r1, #0
   19944:	b2a8      	uxth	r0, r5
   19946:	f001 fd93 	bl	1b470 <os_msys_get_pkthdr>
   1994a:	4b03      	ldr	r3, [pc, #12]	; (19958 <console_buffer+0x50>)
   1994c:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
   1994e:	2800      	cmp	r0, #0
   19950:	d1e8      	bne.n	19924 <console_buffer+0x1c>
   19952:	e7dd      	b.n	19910 <console_buffer+0x8>
   19954:	20000100 	.word	0x20000100
   19958:	20006f04 	.word	0x20006f04

0001995c <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
   1995c:	b500      	push	{lr}
   1995e:	b083      	sub	sp, #12
   19960:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
   19964:	280d      	cmp	r0, #13
   19966:	d004      	beq.n	19972 <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
   19968:	2101      	movs	r1, #1
   1996a:	f10d 0007 	add.w	r0, sp, #7
   1996e:	f7ff ffcb 	bl	19908 <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
   19972:	b003      	add	sp, #12
   19974:	f85d fb04 	ldr.w	pc, [sp], #4

00019978 <console_printhex>:
void console_printhex(uint8_t v) {
   19978:	b510      	push	{r4, lr}
   1997a:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   1997c:	2310      	movs	r3, #16
    int length = 0;
   1997e:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   19980:	e005      	b.n	1998e <console_printhex+0x16>
        v = v % divisor;
   19982:	fbb0 f1f3 	udiv	r1, r0, r3
   19986:	fb03 0011 	mls	r0, r3, r1, r0
   1998a:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   1998c:	091b      	lsrs	r3, r3, #4
   1998e:	b18b      	cbz	r3, 199b4 <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
   19990:	fbb0 f4f3 	udiv	r4, r0, r3
   19994:	f104 0130 	add.w	r1, r4, #48	; 0x30
   19998:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
   1999a:	2939      	cmp	r1, #57	; 0x39
   1999c:	d902      	bls.n	199a4 <console_printhex+0x2c>
   1999e:	f104 0157 	add.w	r1, r4, #87	; 0x57
   199a2:	b2c9      	uxtb	r1, r1
            if (length < size) {
   199a4:	2a02      	cmp	r2, #2
   199a6:	dcec      	bgt.n	19982 <console_printhex+0xa>
                buffer[length++] = digit;
   199a8:	ac02      	add	r4, sp, #8
   199aa:	4414      	add	r4, r2
   199ac:	f804 1c04 	strb.w	r1, [r4, #-4]
   199b0:	3201      	adds	r2, #1
   199b2:	e7e6      	b.n	19982 <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
   199b4:	b92a      	cbnz	r2, 199c2 <console_printhex+0x4a>
   199b6:	ab02      	add	r3, sp, #8
   199b8:	4413      	add	r3, r2
   199ba:	2130      	movs	r1, #48	; 0x30
   199bc:	f803 1c04 	strb.w	r1, [r3, #-4]
   199c0:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
   199c2:	2a02      	cmp	r2, #2
   199c4:	dc04      	bgt.n	199d0 <console_printhex+0x58>
   199c6:	ab02      	add	r3, sp, #8
   199c8:	441a      	add	r2, r3
   199ca:	2300      	movs	r3, #0
   199cc:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
   199d0:	2300      	movs	r3, #0
   199d2:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
   199d6:	a801      	add	r0, sp, #4
   199d8:	f002 fb73 	bl	1c0c2 <strlen>
   199dc:	4601      	mov	r1, r0
   199de:	a801      	add	r0, sp, #4
   199e0:	f7ff ff92 	bl	19908 <console_buffer>
}
   199e4:	b002      	add	sp, #8
   199e6:	bd10      	pop	{r4, pc}

000199e8 <console_printint>:
void console_printint(int i) {
   199e8:	b508      	push	{r3, lr}
    console_printf("%d", i);
   199ea:	4601      	mov	r1, r0
   199ec:	4801      	ldr	r0, [pc, #4]	; (199f4 <console_printint+0xc>)
   199ee:	f000 f873 	bl	19ad8 <console_printf>
}
   199f2:	bd08      	pop	{r3, pc}
   199f4:	00022154 	.word	0x00022154

000199f8 <console_dump>:
    if (buffer == NULL || len == 0) { return; }
   199f8:	b180      	cbz	r0, 19a1c <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
   199fa:	b570      	push	{r4, r5, r6, lr}
   199fc:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
   199fe:	b161      	cbz	r1, 19a1a <console_dump+0x22>
   19a00:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
   19a02:	2400      	movs	r4, #0
   19a04:	e007      	b.n	19a16 <console_dump+0x1e>
   19a06:	5d30      	ldrb	r0, [r6, r4]
   19a08:	f7ff ffb6 	bl	19978 <console_printhex>
   19a0c:	2101      	movs	r1, #1
   19a0e:	4804      	ldr	r0, [pc, #16]	; (19a20 <console_dump+0x28>)
   19a10:	f7ff ff7a 	bl	19908 <console_buffer>
   19a14:	3401      	adds	r4, #1
   19a16:	42ac      	cmp	r4, r5
   19a18:	d3f5      	bcc.n	19a06 <console_dump+0xe>
}
   19a1a:	bd70      	pop	{r4, r5, r6, pc}
   19a1c:	4770      	bx	lr
   19a1e:	bf00      	nop
   19a20:	00022150 	.word	0x00022150

00019a24 <console_out_nolock>:

int console_out_nolock(int character) {
   19a24:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   19a26:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
   19a28:	4b0b      	ldr	r3, [pc, #44]	; (19a58 <console_out_nolock+0x34>)
   19a2a:	781b      	ldrb	r3, [r3, #0]
   19a2c:	b953      	cbnz	r3, 19a44 <console_out_nolock+0x20>
   19a2e:	4604      	mov	r4, r0
    if ('\n' == c) {
   19a30:	2d0a      	cmp	r5, #10
   19a32:	d009      	beq.n	19a48 <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
   19a34:	4b09      	ldr	r3, [pc, #36]	; (19a5c <console_out_nolock+0x38>)
   19a36:	2201      	movs	r2, #1
   19a38:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
   19a3a:	4628      	mov	r0, r5
   19a3c:	f7ff ff8e 	bl	1995c <semihosting_console_write_ch>
    return character;
   19a40:	4620      	mov	r0, r4
}
   19a42:	bd38      	pop	{r3, r4, r5, pc}
   19a44:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
   19a46:	e7fc      	b.n	19a42 <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
   19a48:	200d      	movs	r0, #13
   19a4a:	f7ff ff87 	bl	1995c <semihosting_console_write_ch>
        console_is_midline = 0;
   19a4e:	4b03      	ldr	r3, [pc, #12]	; (19a5c <console_out_nolock+0x38>)
   19a50:	2200      	movs	r2, #0
   19a52:	601a      	str	r2, [r3, #0]
   19a54:	e7f1      	b.n	19a3a <console_out_nolock+0x16>
   19a56:	bf00      	nop
   19a58:	2000ddb4 	.word	0x2000ddb4
   19a5c:	2000ddb8 	.word	0x2000ddb8

00019a60 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
   19a60:	2000      	movs	r0, #0
   19a62:	4770      	bx	lr

00019a64 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
   19a64:	b570      	push	{r4, r5, r6, lr}
   19a66:	4606      	mov	r6, r0
   19a68:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
   19a6a:	2400      	movs	r4, #0
   19a6c:	42ac      	cmp	r4, r5
   19a6e:	da07      	bge.n	19a80 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
   19a70:	5d30      	ldrb	r0, [r6, r4]
   19a72:	f7ff ffd7 	bl	19a24 <console_out_nolock>
   19a76:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   19a7a:	d001      	beq.n	19a80 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
   19a7c:	3401      	adds	r4, #1
   19a7e:	e7f5      	b.n	19a6c <console_write+0x8>
    }
}
   19a80:	bd70      	pop	{r4, r5, r6, pc}

00019a82 <console_blocking_mode>:

void console_blocking_mode(void) {
   19a82:	b508      	push	{r3, lr}
    disable_buffer();
   19a84:	f7ff ff3c 	bl	19900 <disable_buffer>
}
   19a88:	bd08      	pop	{r3, pc}
	...

00019a8c <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
   19a8c:	b510      	push	{r4, lr}
   19a8e:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   19a90:	4b0d      	ldr	r3, [pc, #52]	; (19ac8 <console_pkg_init+0x3c>)
   19a92:	781b      	ldrb	r3, [r3, #0]
   19a94:	b193      	cbz	r3, 19abc <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
   19a96:	480d      	ldr	r0, [pc, #52]	; (19acc <console_pkg_init+0x40>)
   19a98:	f001 f9fa 	bl	1ae90 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   19a9c:	480c      	ldr	r0, [pc, #48]	; (19ad0 <console_pkg_init+0x44>)
   19a9e:	f001 fd15 	bl	1b4cc <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
   19aa2:	f7ff ffdd 	bl	19a60 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   19aa6:	b138      	cbz	r0, 19ab8 <console_pkg_init+0x2c>
   19aa8:	2000      	movs	r0, #0
   19aaa:	9000      	str	r0, [sp, #0]
   19aac:	4b09      	ldr	r3, [pc, #36]	; (19ad4 <console_pkg_init+0x48>)
   19aae:	681c      	ldr	r4, [r3, #0]
   19ab0:	4603      	mov	r3, r0
   19ab2:	4602      	mov	r2, r0
   19ab4:	4601      	mov	r1, r0
   19ab6:	47a0      	blx	r4
}
   19ab8:	b002      	add	sp, #8
   19aba:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   19abc:	461a      	mov	r2, r3
   19abe:	4619      	mov	r1, r3
   19ac0:	4618      	mov	r0, r3
   19ac2:	f000 fed1 	bl	1a868 <__assert_func>
   19ac6:	bf00      	nop
   19ac8:	2000ddbc 	.word	0x2000ddbc
   19acc:	20006f08 	.word	0x20006f08
   19ad0:	20006f18 	.word	0x20006f18
   19ad4:	20000104 	.word	0x20000104

00019ad8 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   19ad8:	b40f      	push	{r0, r1, r2, r3}
   19ada:	b510      	push	{r4, lr}
   19adc:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   19ade:	f000 f81f 	bl	19b20 <console_get_ticks>
   19ae2:	b160      	cbz	r0, 19afe <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   19ae4:	4b0c      	ldr	r3, [pc, #48]	; (19b18 <console_printf+0x40>)
   19ae6:	681b      	ldr	r3, [r3, #0]
   19ae8:	b10b      	cbz	r3, 19aee <console_printf+0x16>
    num_chars = 0;
   19aea:	2400      	movs	r4, #0
   19aec:	e008      	b.n	19b00 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   19aee:	f002 f8d9 	bl	1bca4 <os_time_get>
   19af2:	4601      	mov	r1, r0
   19af4:	4809      	ldr	r0, [pc, #36]	; (19b1c <console_printf+0x44>)
   19af6:	f002 fd97 	bl	1c628 <printf>
   19afa:	4604      	mov	r4, r0
   19afc:	e000      	b.n	19b00 <console_printf+0x28>
    num_chars = 0;
   19afe:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
   19b00:	a905      	add	r1, sp, #20
   19b02:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
   19b04:	9804      	ldr	r0, [sp, #16]
   19b06:	f002 fdbf 	bl	1c688 <vprintf>
    va_end(args);

    return num_chars;
}
   19b0a:	4420      	add	r0, r4
   19b0c:	b002      	add	sp, #8
   19b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19b12:	b004      	add	sp, #16
   19b14:	4770      	bx	lr
   19b16:	bf00      	nop
   19b18:	2000ddb8 	.word	0x2000ddb8
   19b1c:	00022158 	.word	0x00022158

00019b20 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   19b20:	4b01      	ldr	r3, [pc, #4]	; (19b28 <console_get_ticks+0x8>)
   19b22:	7818      	ldrb	r0, [r3, #0]
   19b24:	4770      	bx	lr
   19b26:	bf00      	nop
   19b28:	20006f24 	.word	0x20006f24

00019b2c <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   19b2c:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   19b2e:	f000 fe9b 	bl	1a868 <__assert_func>
	...

00019b34 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   19b34:	4b01      	ldr	r3, [pc, #4]	; (19b3c <sysinit_start+0x8>)
   19b36:	2201      	movs	r2, #1
   19b38:	701a      	strb	r2, [r3, #0]
}
   19b3a:	4770      	bx	lr
   19b3c:	2000ddbc 	.word	0x2000ddbc

00019b40 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   19b40:	4b01      	ldr	r3, [pc, #4]	; (19b48 <sysinit_end+0x8>)
   19b42:	2200      	movs	r2, #0
   19b44:	701a      	strb	r2, [r3, #0]
}
   19b46:	4770      	bx	lr
   19b48:	2000ddbc 	.word	0x2000ddbc

00019b4c <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   19b4c:	4a09      	ldr	r2, [pc, #36]	; (19b74 <NVIC_Relocate+0x28>)
   19b4e:	4b0a      	ldr	r3, [pc, #40]	; (19b78 <NVIC_Relocate+0x2c>)
   19b50:	429a      	cmp	r2, r3
   19b52:	d00a      	beq.n	19b6a <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   19b54:	2300      	movs	r3, #0
   19b56:	e006      	b.n	19b66 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
   19b58:	4a07      	ldr	r2, [pc, #28]	; (19b78 <NVIC_Relocate+0x2c>)
   19b5a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   19b5e:	4a05      	ldr	r2, [pc, #20]	; (19b74 <NVIC_Relocate+0x28>)
   19b60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   19b64:	3301      	adds	r3, #1
   19b66:	2b35      	cmp	r3, #53	; 0x35
   19b68:	ddf6      	ble.n	19b58 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   19b6a:	4a02      	ldr	r2, [pc, #8]	; (19b74 <NVIC_Relocate+0x28>)
   19b6c:	4b03      	ldr	r3, [pc, #12]	; (19b7c <NVIC_Relocate+0x30>)
   19b6e:	609a      	str	r2, [r3, #8]
#endif
}
   19b70:	4770      	bx	lr
   19b72:	bf00      	nop
   19b74:	20000000 	.word	0x20000000
   19b78:	00008020 	.word	0x00008020
   19b7c:	e000ed00 	.word	0xe000ed00

00019b80 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
   19b80:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   19b82:	2400      	movs	r4, #0
   19b84:	e000      	b.n	19b88 <hal_gpio_irq_handler+0x8>
   19b86:	3401      	adds	r4, #1
   19b88:	2c07      	cmp	r4, #7
   19b8a:	dc1c      	bgt.n	19bc6 <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
   19b8c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   19b90:	4a0d      	ldr	r2, [pc, #52]	; (19bc8 <hal_gpio_irq_handler+0x48>)
   19b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   19b96:	2b00      	cmp	r3, #0
   19b98:	d0f5      	beq.n	19b86 <hal_gpio_irq_handler+0x6>
   19b9a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   19b9e:	2301      	movs	r3, #1
   19ba0:	40a3      	lsls	r3, r4
   19ba2:	421a      	tst	r2, r3
   19ba4:	d0ef      	beq.n	19b86 <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
   19ba6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   19baa:	4a07      	ldr	r2, [pc, #28]	; (19bc8 <hal_gpio_irq_handler+0x48>)
   19bac:	2100      	movs	r1, #0
   19bae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
   19bb2:	4b06      	ldr	r3, [pc, #24]	; (19bcc <hal_gpio_irq_handler+0x4c>)
   19bb4:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   19bb8:	2a00      	cmp	r2, #0
   19bba:	d0e4      	beq.n	19b86 <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
   19bbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   19bc0:	6858      	ldr	r0, [r3, #4]
   19bc2:	4790      	blx	r2
   19bc4:	e7df      	b.n	19b86 <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
   19bc6:	bd10      	pop	{r4, pc}
   19bc8:	40006000 	.word	0x40006000
   19bcc:	20006f28 	.word	0x20006f28

00019bd0 <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
   19bd0:	4b06      	ldr	r3, [pc, #24]	; (19bec <hal_gpio_irq_setup+0x1c>)
   19bd2:	781b      	ldrb	r3, [r3, #0]
   19bd4:	b94b      	cbnz	r3, 19bea <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   19bd6:	4b06      	ldr	r3, [pc, #24]	; (19bf0 <hal_gpio_irq_setup+0x20>)
   19bd8:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   19bda:	4a06      	ldr	r2, [pc, #24]	; (19bf4 <hal_gpio_irq_setup+0x24>)
   19bdc:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19bde:	4b06      	ldr	r3, [pc, #24]	; (19bf8 <hal_gpio_irq_setup+0x28>)
   19be0:	2240      	movs	r2, #64	; 0x40
   19be2:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
   19be4:	4b01      	ldr	r3, [pc, #4]	; (19bec <hal_gpio_irq_setup+0x1c>)
   19be6:	2201      	movs	r2, #1
   19be8:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
   19bea:	4770      	bx	lr
   19bec:	20006f68 	.word	0x20006f68
   19bf0:	e000ed00 	.word	0xe000ed00
   19bf4:	00019b81 	.word	0x00019b81
   19bf8:	e000e100 	.word	0xe000e100

00019bfc <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   19bfc:	2000      	movs	r0, #0
   19bfe:	2807      	cmp	r0, #7
   19c00:	dc05      	bgt.n	19c0e <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
   19c02:	4b04      	ldr	r3, [pc, #16]	; (19c14 <hal_gpio_find_empty_slot+0x18>)
   19c04:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   19c08:	b11b      	cbz	r3, 19c12 <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   19c0a:	3001      	adds	r0, #1
   19c0c:	e7f7      	b.n	19bfe <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
   19c0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19c12:	4770      	bx	lr
   19c14:	20006f28 	.word	0x20006f28

00019c18 <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
   19c18:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   19c1a:	2000      	movs	r0, #0
   19c1c:	e000      	b.n	19c20 <hal_gpio_find_pin+0x8>
   19c1e:	3001      	adds	r0, #1
   19c20:	2807      	cmp	r0, #7
   19c22:	dc0e      	bgt.n	19c42 <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
   19c24:	4b08      	ldr	r3, [pc, #32]	; (19c48 <hal_gpio_find_pin+0x30>)
   19c26:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   19c2a:	2b00      	cmp	r3, #0
   19c2c:	d0f7      	beq.n	19c1e <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
   19c2e:	f500 73a2 	add.w	r3, r0, #324	; 0x144
   19c32:	4a06      	ldr	r2, [pc, #24]	; (19c4c <hal_gpio_find_pin+0x34>)
   19c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   19c38:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
   19c3c:	428b      	cmp	r3, r1
   19c3e:	d1ee      	bne.n	19c1e <hal_gpio_find_pin+0x6>
   19c40:	e001      	b.n	19c46 <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
   19c42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19c46:	4770      	bx	lr
   19c48:	20006f28 	.word	0x20006f28
   19c4c:	40006000 	.word	0x40006000

00019c50 <hal_gpio_init_in>:
    switch (pull) {
   19c50:	2901      	cmp	r1, #1
   19c52:	d003      	beq.n	19c5c <hal_gpio_init_in+0xc>
   19c54:	2902      	cmp	r1, #2
   19c56:	d00f      	beq.n	19c78 <hal_gpio_init_in+0x28>
        conf = 0;
   19c58:	2100      	movs	r1, #0
        break;
   19c5a:	e000      	b.n	19c5e <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
   19c5c:	210c      	movs	r1, #12
    port->PIN_CNF[pin_index] = conf;
   19c5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19c62:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   19c66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
   19c6a:	2301      	movs	r3, #1
   19c6c:	fa03 f000 	lsl.w	r0, r3, r0
   19c70:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
   19c74:	2000      	movs	r0, #0
   19c76:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
   19c78:	2104      	movs	r1, #4
   19c7a:	e7f0      	b.n	19c5e <hal_gpio_init_in+0xe>

00019c7c <hal_gpio_init_out>:
    if (val) {
   19c7c:	b999      	cbnz	r1, 19ca6 <hal_gpio_init_out+0x2a>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   19c7e:	2301      	movs	r3, #1
   19c80:	4083      	lsls	r3, r0
   19c82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19c86:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   19c8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19c8e:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   19c92:	2103      	movs	r1, #3
   19c94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
   19c98:	2301      	movs	r3, #1
   19c9a:	fa03 f000 	lsl.w	r0, r3, r0
   19c9e:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
   19ca2:	2000      	movs	r0, #0
   19ca4:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   19ca6:	2301      	movs	r3, #1
   19ca8:	4083      	lsls	r3, r0
   19caa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19cae:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   19cb2:	e7ea      	b.n	19c8a <hal_gpio_init_out+0xe>

00019cb4 <hal_gpio_write>:
    if (val) {
   19cb4:	b939      	cbnz	r1, 19cc6 <hal_gpio_write+0x12>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   19cb6:	2301      	movs	r3, #1
   19cb8:	fa03 f000 	lsl.w	r0, r3, r0
   19cbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19cc0:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   19cc4:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   19cc6:	2301      	movs	r3, #1
   19cc8:	fa03 f000 	lsl.w	r0, r3, r0
   19ccc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19cd0:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   19cd4:	4770      	bx	lr

00019cd6 <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
   19cd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19cda:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
   19cde:	2301      	movs	r3, #1
   19ce0:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   19ce2:	421a      	tst	r2, r3
   19ce4:	d108      	bne.n	19cf8 <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   19ce6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19cea:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   19cee:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   19cf2:	f000 0001 	and.w	r0, r0, #1
}
   19cf6:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   19cf8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19cfc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   19d00:	fa23 f000 	lsr.w	r0, r3, r0
   19d04:	f000 0001 	and.w	r0, r0, #1
   19d08:	4770      	bx	lr
	...

00019d0c <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
   19d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d10:	4680      	mov	r8, r0
   19d12:	460f      	mov	r7, r1
   19d14:	4616      	mov	r6, r2
   19d16:	461c      	mov	r4, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
   19d18:	f7ff ff5a 	bl	19bd0 <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
   19d1c:	f7ff ff6e 	bl	19bfc <hal_gpio_find_empty_slot>
    if (i < 0) {
   19d20:	1e05      	subs	r5, r0, #0
   19d22:	db27      	blt.n	19d74 <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
   19d24:	f89d 1018 	ldrb.w	r1, [sp, #24]
   19d28:	4640      	mov	r0, r8
   19d2a:	f7ff ff91 	bl	19c50 <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
   19d2e:	2c02      	cmp	r4, #2
   19d30:	d01d      	beq.n	19d6e <hal_gpio_irq_init+0x62>
   19d32:	2c03      	cmp	r4, #3
   19d34:	d018      	beq.n	19d68 <hal_gpio_irq_init+0x5c>
   19d36:	2c01      	cmp	r4, #1
   19d38:	d002      	beq.n	19d40 <hal_gpio_irq_init+0x34>
        break;
    case HAL_GPIO_TRIG_BOTH:
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
        break;
    default:
        return -1;
   19d3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19d3e:	e011      	b.n	19d64 <hal_gpio_irq_init+0x58>
        conf = GPIOTE_CONFIG_POLARITY_LoToHi << GPIOTE_CONFIG_POLARITY_Pos;
   19d40:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
   19d44:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
   19d48:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
   19d4c:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   19d50:	4b0a      	ldr	r3, [pc, #40]	; (19d7c <hal_gpio_irq_init+0x70>)
   19d52:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
   19d56:	4b0a      	ldr	r3, [pc, #40]	; (19d80 <hal_gpio_irq_init+0x74>)
   19d58:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
   19d5c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   19d60:	605e      	str	r6, [r3, #4]

    return 0;
   19d62:	2000      	movs	r0, #0
}
   19d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
   19d68:	f44f 3040 	mov.w	r0, #196608	; 0x30000
        break;
   19d6c:	e7ea      	b.n	19d44 <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
   19d6e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   19d72:	e7e7      	b.n	19d44 <hal_gpio_irq_init+0x38>
        return -1;
   19d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19d78:	e7f4      	b.n	19d64 <hal_gpio_irq_init+0x58>
   19d7a:	bf00      	nop
   19d7c:	40006000 	.word	0x40006000
   19d80:	20006f28 	.word	0x20006f28

00019d84 <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
   19d84:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
   19d86:	f7ff ff47 	bl	19c18 <hal_gpio_find_pin>
    if (i < 0) {
   19d8a:	2800      	cmp	r0, #0
   19d8c:	db0a      	blt.n	19da4 <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
   19d8e:	4a06      	ldr	r2, [pc, #24]	; (19da8 <hal_gpio_irq_enable+0x24>)
   19d90:	f100 0340 	add.w	r3, r0, #64	; 0x40
   19d94:	2100      	movs	r1, #0
   19d96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
   19d9a:	2301      	movs	r3, #1
   19d9c:	fa03 f000 	lsl.w	r0, r3, r0
   19da0:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
   19da4:	bd08      	pop	{r3, pc}
   19da6:	bf00      	nop
   19da8:	40006000 	.word	0x40006000

00019dac <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   19dac:	3801      	subs	r0, #1
   19dae:	bf00      	nop
   19db0:	bf00      	nop
   19db2:	bf00      	nop
   19db4:	bf00      	nop
   19db6:	bf00      	nop
   19db8:	bf00      	nop
   19dba:	bf00      	nop
   19dbc:	bf00      	nop
   19dbe:	bf00      	nop
   19dc0:	bf00      	nop
   19dc2:	bf00      	nop
   19dc4:	bf00      	nop
   19dc6:	bf00      	nop
   19dc8:	bf00      	nop
   19dca:	bf00      	nop
   19dcc:	bf00      	nop
   19dce:	bf00      	nop
   19dd0:	bf00      	nop
   19dd2:	bf00      	nop
   19dd4:	bf00      	nop
   19dd6:	bf00      	nop
   19dd8:	bf00      	nop
   19dda:	bf00      	nop
   19ddc:	bf00      	nop
   19dde:	bf00      	nop
   19de0:	bf00      	nop
   19de2:	bf00      	nop
   19de4:	bf00      	nop
   19de6:	bf00      	nop
   19de8:	bf00      	nop
   19dea:	bf00      	nop
   19dec:	bf00      	nop
   19dee:	bf00      	nop
   19df0:	bf00      	nop
   19df2:	bf00      	nop
   19df4:	bf00      	nop
   19df6:	bf00      	nop
   19df8:	bf00      	nop
   19dfa:	bf00      	nop
   19dfc:	bf00      	nop
   19dfe:	bf00      	nop
   19e00:	bf00      	nop
   19e02:	bf00      	nop
   19e04:	bf00      	nop
   19e06:	bf00      	nop
   19e08:	bf00      	nop
   19e0a:	bf00      	nop
   19e0c:	bf00      	nop
   19e0e:	bf00      	nop
   19e10:	bf00      	nop
   19e12:	bf00      	nop
   19e14:	bf00      	nop
   19e16:	bf00      	nop
   19e18:	bf00      	nop
   19e1a:	bf00      	nop
   19e1c:	bf00      	nop
   19e1e:	bf00      	nop
   19e20:	bf00      	nop
   19e22:	d1c3      	bne.n	19dac <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   19e24:	4770      	bx	lr
	...

00019e28 <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   19e28:	2801      	cmp	r0, #1
   19e2a:	d806      	bhi.n	19e3a <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   19e2c:	4b06      	ldr	r3, [pc, #24]	; (19e48 <hal_i2c_resolve+0x20>)
   19e2e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   19e32:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   19e34:	b12b      	cbz	r3, 19e42 <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   19e36:	2000      	movs	r0, #0
}
   19e38:	4770      	bx	lr
        *out_i2c = NULL;
   19e3a:	2300      	movs	r3, #0
   19e3c:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   19e3e:	2002      	movs	r0, #2
   19e40:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   19e42:	2002      	movs	r0, #2
   19e44:	4770      	bx	lr
   19e46:	bf00      	nop
   19e48:	00022160 	.word	0x00022160

00019e4c <hal_i2c_convert_status>:
 * Converts an nRF SDK I2C status to a HAL I2C error code.
 */
static int
hal_i2c_convert_status(int nrf_status)
{
    if (nrf_status == 0) {
   19e4c:	b148      	cbz	r0, 19e62 <hal_i2c_convert_status+0x16>
        return 0;
    } else if (nrf_status & NRF_TWIM_ERROR_DATA_NACK) {
   19e4e:	f010 0f04 	tst.w	r0, #4
   19e52:	d107      	bne.n	19e64 <hal_i2c_convert_status+0x18>
        return HAL_I2C_ERR_DATA_NACK;
    } else if (nrf_status & NRF_TWIM_ERROR_ADDRESS_NACK) {
   19e54:	f010 0f02 	tst.w	r0, #2
   19e58:	d101      	bne.n	19e5e <hal_i2c_convert_status+0x12>
        return HAL_I2C_ERR_ADDR_NACK;
    } else {
        return HAL_I2C_ERR_UNKNOWN;
   19e5a:	2001      	movs	r0, #1
    }
}
   19e5c:	4770      	bx	lr
        return HAL_I2C_ERR_ADDR_NACK;
   19e5e:	2004      	movs	r0, #4
   19e60:	4770      	bx	lr
   19e62:	4770      	bx	lr
        return HAL_I2C_ERR_DATA_NACK;
   19e64:	2005      	movs	r0, #5
   19e66:	4770      	bx	lr

00019e68 <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   19e68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19e6c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   19e70:	fa23 f000 	lsr.w	r0, r3, r0
}
   19e74:	f000 0001 	and.w	r0, r0, #1
   19e78:	4770      	bx	lr

00019e7a <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   19e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e7e:	4605      	mov	r5, r0
   19e80:	460e      	mov	r6, r1
    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(scl_pin);
    sda_port = HAL_GPIO_PORT(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   19e82:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   19e86:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   19e8a:	f240 630c 	movw	r3, #1548	; 0x60c
   19e8e:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   19e92:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   19e96:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   19e9a:	2101      	movs	r1, #1
   19e9c:	f7ff ff0a 	bl	19cb4 <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   19ea0:	2101      	movs	r1, #1
   19ea2:	4630      	mov	r0, r6
   19ea4:	f7ff ff06 	bl	19cb4 <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF_CLR;
   19ea8:	f240 630d 	movw	r3, #1549	; 0x60d
   19eac:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF_CLR;
   19eb0:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   19eb4:	2004      	movs	r0, #4
   19eb6:	f7ff ff79 	bl	19dac <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   19eba:	2400      	movs	r4, #0
   19ebc:	2c08      	cmp	r4, #8
   19ebe:	dc14      	bgt.n	19eea <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   19ec0:	4630      	mov	r0, r6
   19ec2:	f7ff ffd1 	bl	19e68 <read_gpio_inbuffer>
   19ec6:	b978      	cbnz	r0, 19ee8 <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   19ec8:	2100      	movs	r1, #0
   19eca:	4628      	mov	r0, r5
   19ecc:	f7ff fef2 	bl	19cb4 <hal_gpio_write>
        hal_i2c_delay_us(4);
   19ed0:	2004      	movs	r0, #4
   19ed2:	f7ff ff6b 	bl	19dac <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   19ed6:	2101      	movs	r1, #1
   19ed8:	4628      	mov	r0, r5
   19eda:	f7ff feeb 	bl	19cb4 <hal_gpio_write>
        hal_i2c_delay_us(4);
   19ede:	2004      	movs	r0, #4
   19ee0:	f7ff ff64 	bl	19dac <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   19ee4:	3401      	adds	r4, #1
   19ee6:	e7e9      	b.n	19ebc <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   19ee8:	b154      	cbz	r4, 19f00 <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   19eea:	2100      	movs	r1, #0
   19eec:	4630      	mov	r0, r6
   19eee:	f7ff fee1 	bl	19cb4 <hal_gpio_write>
    hal_i2c_delay_us(4);
   19ef2:	2004      	movs	r0, #4
   19ef4:	f7ff ff5a 	bl	19dac <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   19ef8:	2101      	movs	r1, #1
   19efa:	4630      	mov	r0, r6
   19efc:	f7ff feda 	bl	19cb4 <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   19f00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19f04:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   19f08:	f240 620c 	movw	r2, #1548	; 0x60c
   19f0c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   19f10:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   19f14:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   19f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019f1c <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   19f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f1e:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   19f20:	b1a1      	cbz	r1, 19f4c <hal_i2c_init+0x30>
   19f22:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   19f24:	a901      	add	r1, sp, #4
   19f26:	f7ff ff7f 	bl	19e28 <hal_i2c_resolve>
    if (rc != 0) {
   19f2a:	4606      	mov	r6, r0
   19f2c:	bba8      	cbnz	r0, 19f9a <hal_i2c_init+0x7e>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   19f2e:	9b01      	ldr	r3, [sp, #4]
   19f30:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   19f32:	68a3      	ldr	r3, [r4, #8]
   19f34:	2bfa      	cmp	r3, #250	; 0xfa
   19f36:	d035      	beq.n	19fa4 <hal_i2c_init+0x88>
   19f38:	d90e      	bls.n	19f58 <hal_i2c_init+0x3c>
   19f3a:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   19f3e:	d02f      	beq.n	19fa0 <hal_i2c_init+0x84>
   19f40:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   19f44:	d131      	bne.n	19faa <hal_i2c_init+0x8e>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   19f46:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   19f4a:	e009      	b.n	19f60 <hal_i2c_init+0x44>
    assert(usercfg != NULL);
   19f4c:	2300      	movs	r3, #0
   19f4e:	461a      	mov	r2, r3
   19f50:	4619      	mov	r1, r3
   19f52:	4618      	mov	r0, r3
   19f54:	f000 fc88 	bl	1a868 <__assert_func>
    switch (cfg->i2c_frequency) {
   19f58:	2b64      	cmp	r3, #100	; 0x64
   19f5a:	d126      	bne.n	19faa <hal_i2c_init+0x8e>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   19f5c:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   19f60:	6861      	ldr	r1, [r4, #4]
   19f62:	6820      	ldr	r0, [r4, #0]
   19f64:	f7ff ff89 	bl	19e7a <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   19f68:	6823      	ldr	r3, [r4, #0]
   19f6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19f6e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19f72:	f240 610c 	movw	r1, #1548	; 0x60c
   19f76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   19f7a:	6863      	ldr	r3, [r4, #4]
   19f7c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19f80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   19f84:	6823      	ldr	r3, [r4, #0]
   19f86:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   19f8a:	6863      	ldr	r3, [r4, #4]
   19f8c:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   19f90:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   19f94:	2305      	movs	r3, #5
   19f96:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   19f9a:	4630      	mov	r0, r6
   19f9c:	b003      	add	sp, #12
   19f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   19fa0:	4f03      	ldr	r7, [pc, #12]	; (19fb0 <hal_i2c_init+0x94>)
        break;
   19fa2:	e7dd      	b.n	19f60 <hal_i2c_init+0x44>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   19fa4:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   19fa8:	e7da      	b.n	19f60 <hal_i2c_init+0x44>
        rc = HAL_I2C_ERR_INVAL;
   19faa:	2602      	movs	r6, #2
   19fac:	e7f5      	b.n	19f9a <hal_i2c_init+0x7e>
   19fae:	bf00      	nop
   19fb0:	06147ae9 	.word	0x06147ae9

00019fb4 <hal_i2c_master_write>:
}

int
hal_i2c_master_write(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                     uint32_t timo, uint8_t last_op)
{
   19fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fb8:	b083      	sub	sp, #12
   19fba:	4688      	mov	r8, r1
   19fbc:	4615      	mov	r5, r2
   19fbe:	469a      	mov	sl, r3
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   19fc0:	a901      	add	r1, sp, #4
   19fc2:	f7ff ff31 	bl	19e28 <hal_i2c_resolve>
    if (rc != 0) {
   19fc6:	4681      	mov	r9, r0
   19fc8:	b118      	cbz	r0, 19fd2 <hal_i2c_master_write+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   19fca:	4648      	mov	r0, r9
   19fcc:	b003      	add	sp, #12
   19fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   19fd2:	9b01      	ldr	r3, [sp, #4]
   19fd4:	681c      	ldr	r4, [r3, #0]
    regs->ADDRESS = pdata->address;
   19fd6:	f898 3000 	ldrb.w	r3, [r8]
   19fda:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    regs->EVENTS_ERROR = 0;
   19fde:	2300      	movs	r3, #0
   19fe0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   19fe4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   19fe8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->SHORTS = 0;
   19fec:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTTX);
   19ff0:	f104 0708 	add.w	r7, r4, #8
    int retry = 2;
   19ff4:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   19ff8:	2300      	movs	r3, #0
   19ffa:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   19ffe:	2301      	movs	r3, #1
   1a000:	603b      	str	r3, [r7, #0]
        end_ticks = os_cputime_get32() +
   1a002:	f000 fe61 	bl	1acc8 <os_cputime_get32>
   1a006:	f100 0664 	add.w	r6, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   1a00a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1a00e:	f7ff fe62 	bl	19cd6 <hal_gpio_read>
   1a012:	b1b0      	cbz	r0, 1a042 <hal_i2c_master_write+0x8e>
   1a014:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   1a018:	b99b      	cbnz	r3, 1a042 <hal_i2c_master_write+0x8e>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   1a01a:	f000 fe55 	bl	1acc8 <os_cputime_get32>
   1a01e:	1b80      	subs	r0, r0, r6
   1a020:	2800      	cmp	r0, #0
   1a022:	dbf2      	blt.n	1a00a <hal_i2c_master_write+0x56>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   1a024:	2300      	movs	r3, #0
   1a026:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   1a02a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1a02e:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   1a032:	f7ff ff22 	bl	19e7a <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1a036:	2305      	movs	r3, #5
   1a038:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   1a03c:	f1bb 0b01 	subs.w	fp, fp, #1
   1a040:	d1da      	bne.n	19ff8 <hal_i2c_master_write+0x44>
    start = os_time_get();
   1a042:	f001 fe2f 	bl	1bca4 <os_time_get>
   1a046:	4606      	mov	r6, r0
    for (i = 0; i < pdata->len; i++) {
   1a048:	464f      	mov	r7, r9
   1a04a:	e003      	b.n	1a054 <hal_i2c_master_write+0xa0>
        if (regs->EVENTS_ERROR) {
   1a04c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a050:	b9db      	cbnz	r3, 1a08a <hal_i2c_master_write+0xd6>
    for (i = 0; i < pdata->len; i++) {
   1a052:	3701      	adds	r7, #1
   1a054:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   1a058:	42bb      	cmp	r3, r7
   1a05a:	dd24      	ble.n	1a0a6 <hal_i2c_master_write+0xf2>
        regs->EVENTS_TXDSENT = 0;
   1a05c:	2300      	movs	r3, #0
   1a05e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        regs->TXD = pdata->buffer[i];
   1a062:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1a066:	5ddb      	ldrb	r3, [r3, r7]
   1a068:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        while (!regs->EVENTS_TXDSENT && !regs->EVENTS_ERROR) {
   1a06c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1a070:	2b00      	cmp	r3, #0
   1a072:	d1eb      	bne.n	1a04c <hal_i2c_master_write+0x98>
   1a074:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a078:	2b00      	cmp	r3, #0
   1a07a:	d1e7      	bne.n	1a04c <hal_i2c_master_write+0x98>
            if (os_time_get() - start > timo) {
   1a07c:	f001 fe12 	bl	1bca4 <os_time_get>
   1a080:	1b80      	subs	r0, r0, r6
   1a082:	42a8      	cmp	r0, r5
   1a084:	d9f2      	bls.n	1a06c <hal_i2c_master_write+0xb8>
                rc = HAL_I2C_ERR_TIMEOUT;
   1a086:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   1a08a:	2301      	movs	r3, #1
   1a08c:	6163      	str	r3, [r4, #20]
    if (regs->EVENTS_ERROR) {
   1a08e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a092:	2b00      	cmp	r3, #0
   1a094:	d099      	beq.n	19fca <hal_i2c_master_write+0x16>
        nrf_status = regs->ERRORSRC;
   1a096:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   1a09a:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   1a09e:	f7ff fed5 	bl	19e4c <hal_i2c_convert_status>
   1a0a2:	4681      	mov	r9, r0
   1a0a4:	e791      	b.n	19fca <hal_i2c_master_write+0x16>
    if (last_op) {
   1a0a6:	f1ba 0f00 	cmp.w	sl, #0
   1a0aa:	d08e      	beq.n	19fca <hal_i2c_master_write+0x16>
        regs->EVENTS_STOPPED = 0;
   1a0ac:	2300      	movs	r3, #0
   1a0ae:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        regs->TASKS_STOP = 1;
   1a0b2:	2301      	movs	r3, #1
   1a0b4:	6163      	str	r3, [r4, #20]
        while (!regs->EVENTS_STOPPED && !regs->EVENTS_ERROR) {
   1a0b6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1a0ba:	b953      	cbnz	r3, 1a0d2 <hal_i2c_master_write+0x11e>
   1a0bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a0c0:	b93b      	cbnz	r3, 1a0d2 <hal_i2c_master_write+0x11e>
            if (os_time_get() - start > timo) {
   1a0c2:	f001 fdef 	bl	1bca4 <os_time_get>
   1a0c6:	1b80      	subs	r0, r0, r6
   1a0c8:	42a8      	cmp	r0, r5
   1a0ca:	d9f4      	bls.n	1a0b6 <hal_i2c_master_write+0x102>
                rc = HAL_I2C_ERR_TIMEOUT;
   1a0cc:	f04f 0903 	mov.w	r9, #3
   1a0d0:	e7db      	b.n	1a08a <hal_i2c_master_write+0xd6>
        if (regs->EVENTS_ERROR) {
   1a0d2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a0d6:	2b00      	cmp	r3, #0
   1a0d8:	d1d7      	bne.n	1a08a <hal_i2c_master_write+0xd6>
   1a0da:	e776      	b.n	19fca <hal_i2c_master_write+0x16>

0001a0dc <hal_i2c_master_read>:

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timo, uint8_t last_op)
{
   1a0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0e0:	b085      	sub	sp, #20
   1a0e2:	460f      	mov	r7, r1
   1a0e4:	4615      	mov	r5, r2
   1a0e6:	9301      	str	r3, [sp, #4]
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   1a0e8:	a903      	add	r1, sp, #12
   1a0ea:	f7ff fe9d 	bl	19e28 <hal_i2c_resolve>
    if (rc != 0) {
   1a0ee:	4681      	mov	r9, r0
   1a0f0:	b118      	cbz	r0, 1a0fa <hal_i2c_master_read+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   1a0f2:	4648      	mov	r0, r9
   1a0f4:	b005      	add	sp, #20
   1a0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   1a0fa:	9b03      	ldr	r3, [sp, #12]
   1a0fc:	681c      	ldr	r4, [r3, #0]
    start = os_time_get();
   1a0fe:	f001 fdd1 	bl	1bca4 <os_time_get>
   1a102:	4606      	mov	r6, r0
    if (regs->EVENTS_RXDREADY) {
   1a104:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a108:	b11b      	cbz	r3, 1a112 <hal_i2c_master_read+0x36>
        (void)regs->RXD;
   1a10a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
        (void)regs->RXD;
   1a10e:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    regs->EVENTS_ERROR = 0;
   1a112:	2300      	movs	r3, #0
   1a114:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   1a118:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   1a11c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->EVENTS_RXDREADY = 0;
   1a120:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    regs->ADDRESS = pdata->address;
   1a124:	783b      	ldrb	r3, [r7, #0]
   1a126:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (pdata->len == 1 && last_op) {
   1a12a:	887b      	ldrh	r3, [r7, #2]
   1a12c:	2b01      	cmp	r3, #1
   1a12e:	d02e      	beq.n	1a18e <hal_i2c_master_read+0xb2>
        regs->SHORTS = TWI_SHORTS_BB_SUSPEND_Msk;
   1a130:	2301      	movs	r3, #1
   1a132:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTRX);
   1a136:	46a2      	mov	sl, r4
    int retry = 2;
   1a138:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   1a13c:	2300      	movs	r3, #0
   1a13e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   1a142:	2301      	movs	r3, #1
   1a144:	f8ca 3000 	str.w	r3, [sl]
        end_ticks = os_cputime_get32() +
   1a148:	f000 fdbe 	bl	1acc8 <os_cputime_get32>
   1a14c:	f100 0864 	add.w	r8, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   1a150:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1a154:	f7ff fdbf 	bl	19cd6 <hal_gpio_read>
   1a158:	b1b8      	cbz	r0, 1a18a <hal_i2c_master_read+0xae>
   1a15a:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   1a15e:	b9a3      	cbnz	r3, 1a18a <hal_i2c_master_read+0xae>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   1a160:	f000 fdb2 	bl	1acc8 <os_cputime_get32>
   1a164:	eba0 0008 	sub.w	r0, r0, r8
   1a168:	2800      	cmp	r0, #0
   1a16a:	dbf1      	blt.n	1a150 <hal_i2c_master_read+0x74>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   1a16c:	2300      	movs	r3, #0
   1a16e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   1a172:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1a176:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   1a17a:	f7ff fe7e 	bl	19e7a <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1a17e:	2305      	movs	r3, #5
   1a180:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   1a184:	f1bb 0b01 	subs.w	fp, fp, #1
   1a188:	d1d8      	bne.n	1a13c <hal_i2c_master_read+0x60>
    int retry = 2;
   1a18a:	46c8      	mov	r8, r9
   1a18c:	e017      	b.n	1a1be <hal_i2c_master_read+0xe2>
    if (pdata->len == 1 && last_op) {
   1a18e:	9b01      	ldr	r3, [sp, #4]
   1a190:	2b00      	cmp	r3, #0
   1a192:	d0cd      	beq.n	1a130 <hal_i2c_master_read+0x54>
        regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   1a194:	2302      	movs	r3, #2
   1a196:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   1a19a:	e7cc      	b.n	1a136 <hal_i2c_master_read+0x5a>
        if (regs->EVENTS_ERROR) {
   1a19c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a1a0:	bb0b      	cbnz	r3, 1a1e6 <hal_i2c_master_read+0x10a>
        pdata->buffer[i] = regs->RXD;
   1a1a2:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
   1a1a6:	687b      	ldr	r3, [r7, #4]
   1a1a8:	f803 2008 	strb.w	r2, [r3, r8]
        if (i == pdata->len - 2) {
   1a1ac:	887b      	ldrh	r3, [r7, #2]
   1a1ae:	3b02      	subs	r3, #2
   1a1b0:	4543      	cmp	r3, r8
   1a1b2:	d02a      	beq.n	1a20a <hal_i2c_master_read+0x12e>
        regs->EVENTS_RXDREADY = 0;
   1a1b4:	2300      	movs	r3, #0
   1a1b6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    for (i = 0; i < pdata->len; i++) {
   1a1ba:	f108 0801 	add.w	r8, r8, #1
   1a1be:	887b      	ldrh	r3, [r7, #2]
   1a1c0:	4543      	cmp	r3, r8
   1a1c2:	dd96      	ble.n	1a0f2 <hal_i2c_master_read+0x16>
        regs->TASKS_RESUME = 1;
   1a1c4:	2301      	movs	r3, #1
   1a1c6:	6223      	str	r3, [r4, #32]
        while (!regs->EVENTS_RXDREADY && !regs->EVENTS_ERROR) {
   1a1c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a1cc:	2b00      	cmp	r3, #0
   1a1ce:	d1e5      	bne.n	1a19c <hal_i2c_master_read+0xc0>
   1a1d0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a1d4:	2b00      	cmp	r3, #0
   1a1d6:	d1e1      	bne.n	1a19c <hal_i2c_master_read+0xc0>
            if (os_time_get() - start > timo) {
   1a1d8:	f001 fd64 	bl	1bca4 <os_time_get>
   1a1dc:	1b80      	subs	r0, r0, r6
   1a1de:	42a8      	cmp	r0, r5
   1a1e0:	d9f2      	bls.n	1a1c8 <hal_i2c_master_read+0xec>
                rc = HAL_I2C_ERR_TIMEOUT;
   1a1e2:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   1a1e6:	2301      	movs	r3, #1
   1a1e8:	6163      	str	r3, [r4, #20]
    regs->SHORTS = 0;
   1a1ea:	2300      	movs	r3, #0
   1a1ec:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (regs->EVENTS_ERROR) {
   1a1f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1a1f4:	2b00      	cmp	r3, #0
   1a1f6:	f43f af7c 	beq.w	1a0f2 <hal_i2c_master_read+0x16>
        nrf_status = regs->ERRORSRC;
   1a1fa:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   1a1fe:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   1a202:	f7ff fe23 	bl	19e4c <hal_i2c_convert_status>
   1a206:	4681      	mov	r9, r0
   1a208:	e773      	b.n	1a0f2 <hal_i2c_master_read+0x16>
            if (last_op) {
   1a20a:	9b01      	ldr	r3, [sp, #4]
   1a20c:	2b00      	cmp	r3, #0
   1a20e:	d0d1      	beq.n	1a1b4 <hal_i2c_master_read+0xd8>
                regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   1a210:	2302      	movs	r3, #2
   1a212:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   1a216:	e7cd      	b.n	1a1b4 <hal_i2c_master_read+0xd8>

0001a218 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   1a218:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   1a21a:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   1a21c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   1a220:	b32b      	cbz	r3, 1a26e <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   1a222:	2300      	movs	r3, #0
   1a224:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   1a228:	7843      	ldrb	r3, [r0, #1]
   1a22a:	b303      	cbz	r3, 1a26e <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   1a22c:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   1a230:	88c3      	ldrh	r3, [r0, #6]
   1a232:	fa13 f382 	uxtah	r3, r3, r2
   1a236:	b29b      	uxth	r3, r3
   1a238:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   1a23a:	8881      	ldrh	r1, [r0, #4]
   1a23c:	428b      	cmp	r3, r1
   1a23e:	d217      	bcs.n	1a270 <nrf52_irqm_handler+0x58>
   1a240:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   1a242:	6984      	ldr	r4, [r0, #24]
   1a244:	4414      	add	r4, r2
   1a246:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   1a248:	1acb      	subs	r3, r1, r3
   1a24a:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   1a24c:	2bff      	cmp	r3, #255	; 0xff
   1a24e:	bf28      	it	cs
   1a250:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   1a252:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   1a256:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   1a25a:	69c1      	ldr	r1, [r0, #28]
   1a25c:	b129      	cbz	r1, 1a26a <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   1a25e:	440a      	add	r2, r1
   1a260:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   1a262:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   1a266:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   1a26a:	2301      	movs	r3, #1
   1a26c:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   1a26e:	bd38      	pop	{r3, r4, r5, pc}
   1a270:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   1a272:	6a03      	ldr	r3, [r0, #32]
   1a274:	b10b      	cbz	r3, 1a27a <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   1a276:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1a278:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   1a27a:	2300      	movs	r3, #0
   1a27c:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   1a27e:	2340      	movs	r3, #64	; 0x40
   1a280:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   1a284:	e7f3      	b.n	1a26e <nrf52_irqm_handler+0x56>
	...

0001a288 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   1a288:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   1a28a:	4b04      	ldr	r3, [pc, #16]	; (1a29c <nrf52_spi0_irq_handler+0x14>)
   1a28c:	781b      	ldrb	r3, [r3, #0]
   1a28e:	b103      	cbz	r3, 1a292 <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   1a290:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   1a292:	4802      	ldr	r0, [pc, #8]	; (1a29c <nrf52_spi0_irq_handler+0x14>)
   1a294:	f7ff ffc0 	bl	1a218 <nrf52_irqm_handler>
}
   1a298:	e7fa      	b.n	1a290 <nrf52_spi0_irq_handler+0x8>
   1a29a:	bf00      	nop
   1a29c:	2000ddc0 	.word	0x2000ddc0

0001a2a0 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   1a2a0:	2301      	movs	r3, #1
   1a2a2:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   1a2a4:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   1a2a8:	2b00      	cmp	r3, #0
   1a2aa:	d0fb      	beq.n	1a2a4 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   1a2ac:	2300      	movs	r3, #0
   1a2ae:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   1a2b2:	4770      	bx	lr

0001a2b4 <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   1a2b4:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   1a2b6:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   1a2b8:	780b      	ldrb	r3, [r1, #0]
   1a2ba:	2b03      	cmp	r3, #3
   1a2bc:	d80c      	bhi.n	1a2d8 <hal_spi_config_slave+0x24>
   1a2be:	e8df f003 	tbb	[pc, r3]
   1a2c2:	0e02      	.short	0x0e02
   1a2c4:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1a2c6:	2300      	movs	r3, #0
    rc = 0;
   1a2c8:	4618      	mov	r0, r3
   1a2ca:	e00a      	b.n	1a2e2 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1a2cc:	2304      	movs	r3, #4
    rc = 0;
   1a2ce:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   1a2d0:	e007      	b.n	1a2e2 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1a2d2:	2306      	movs	r3, #6
    rc = 0;
   1a2d4:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   1a2d6:	e004      	b.n	1a2e2 <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   1a2d8:	2300      	movs	r3, #0
            rc = EINVAL;
   1a2da:	2016      	movs	r0, #22
            break;
   1a2dc:	e001      	b.n	1a2e2 <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1a2de:	2302      	movs	r3, #2
    rc = 0;
   1a2e0:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1a2e2:	784c      	ldrb	r4, [r1, #1]
   1a2e4:	2c01      	cmp	r4, #1
   1a2e6:	d006      	beq.n	1a2f6 <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   1a2e8:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   1a2ec:	788b      	ldrb	r3, [r1, #2]
   1a2ee:	b92b      	cbnz	r3, 1a2fc <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   1a2f0:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a2f4:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   1a2f6:	f043 0301 	orr.w	r3, r3, #1
   1a2fa:	e7f5      	b.n	1a2e8 <hal_spi_config_slave+0x34>
            rc = EINVAL;
   1a2fc:	2016      	movs	r0, #22
    return rc;
   1a2fe:	e7f7      	b.n	1a2f0 <hal_spi_config_slave+0x3c>

0001a300 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   1a300:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   1a302:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   1a304:	2501      	movs	r5, #1
   1a306:	409d      	lsls	r5, r3
   1a308:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1a30c:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   1a310:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a314:	2503      	movs	r5, #3
   1a316:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   1a31a:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   1a31c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a320:	2500      	movs	r5, #0
   1a322:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   1a326:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   1a328:	780c      	ldrb	r4, [r1, #0]
   1a32a:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   1a32e:	784c      	ldrb	r4, [r1, #1]
   1a330:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   1a334:	7889      	ldrb	r1, [r1, #2]
   1a336:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1a33a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a33e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   1a342:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a346:	4919      	ldr	r1, [pc, #100]	; (1a3ac <hal_spi_init_master+0xac>)
   1a348:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a34a:	3310      	adds	r3, #16
   1a34c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   1a350:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1a354:	42ab      	cmp	r3, r5
   1a356:	db22      	blt.n	1a39e <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a358:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1a35c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1a360:	22e0      	movs	r2, #224	; 0xe0
   1a362:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   1a366:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1a36a:	2b00      	cmp	r3, #0
   1a36c:	db08      	blt.n	1a380 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a36e:	f003 011f 	and.w	r1, r3, #31
   1a372:	095b      	lsrs	r3, r3, #5
   1a374:	2201      	movs	r2, #1
   1a376:	408a      	lsls	r2, r1
   1a378:	3360      	adds	r3, #96	; 0x60
   1a37a:	490d      	ldr	r1, [pc, #52]	; (1a3b0 <hal_spi_init_master+0xb0>)
   1a37c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   1a380:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1a384:	2b00      	cmp	r3, #0
   1a386:	db07      	blt.n	1a398 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a388:	f003 011f 	and.w	r1, r3, #31
   1a38c:	095b      	lsrs	r3, r3, #5
   1a38e:	2201      	movs	r2, #1
   1a390:	408a      	lsls	r2, r1
   1a392:	4907      	ldr	r1, [pc, #28]	; (1a3b0 <hal_spi_init_master+0xb0>)
   1a394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   1a398:	2000      	movs	r0, #0
   1a39a:	bc30      	pop	{r4, r5}
   1a39c:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a39e:	f003 030f 	and.w	r3, r3, #15
   1a3a2:	4a04      	ldr	r2, [pc, #16]	; (1a3b4 <hal_spi_init_master+0xb4>)
   1a3a4:	441a      	add	r2, r3
   1a3a6:	23e0      	movs	r3, #224	; 0xe0
   1a3a8:	7613      	strb	r3, [r2, #24]
   1a3aa:	e7dc      	b.n	1a366 <hal_spi_init_master+0x66>
   1a3ac:	e000ed00 	.word	0xe000ed00
   1a3b0:	e000e100 	.word	0xe000e100
   1a3b4:	e000ecfc 	.word	0xe000ecfc

0001a3b8 <hal_spi_config_master>:
{
   1a3b8:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   1a3ba:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   1a3bc:	680c      	ldr	r4, [r1, #0]
   1a3be:	684b      	ldr	r3, [r1, #4]
   1a3c0:	6084      	str	r4, [r0, #8]
   1a3c2:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   1a3c4:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   1a3c8:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   1a3cc:	7808      	ldrb	r0, [r1, #0]
   1a3ce:	2801      	cmp	r0, #1
   1a3d0:	d916      	bls.n	1a400 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   1a3d2:	2001      	movs	r0, #1
   1a3d4:	4098      	lsls	r0, r3
   1a3d6:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1a3da:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   1a3de:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1a3e2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1a3e6:	2403      	movs	r4, #3
   1a3e8:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   1a3ec:	788b      	ldrb	r3, [r1, #2]
   1a3ee:	b973      	cbnz	r3, 1a40e <hal_spi_config_master+0x56>
    rc = 0;
   1a3f0:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   1a3f2:	780b      	ldrb	r3, [r1, #0]
   1a3f4:	2b03      	cmp	r3, #3
   1a3f6:	d812      	bhi.n	1a41e <hal_spi_config_master+0x66>
   1a3f8:	e8df f003 	tbb	[pc, r3]
   1a3fc:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   1a400:	2001      	movs	r0, #1
   1a402:	4098      	lsls	r0, r3
   1a404:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1a408:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   1a40c:	e7e7      	b.n	1a3de <hal_spi_config_master+0x26>
            rc = EINVAL;
   1a40e:	2016      	movs	r0, #22
   1a410:	e7ef      	b.n	1a3f2 <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1a412:	2300      	movs	r3, #0
   1a414:	e007      	b.n	1a426 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1a416:	2304      	movs	r3, #4
            break;
   1a418:	e005      	b.n	1a426 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1a41a:	2306      	movs	r3, #6
            break;
   1a41c:	e003      	b.n	1a426 <hal_spi_config_master+0x6e>
            nrf_config = 0;
   1a41e:	2300      	movs	r3, #0
            rc = EINVAL;
   1a420:	2016      	movs	r0, #22
            break;
   1a422:	e000      	b.n	1a426 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1a424:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1a426:	784c      	ldrb	r4, [r1, #1]
   1a428:	2c01      	cmp	r4, #1
   1a42a:	d010      	beq.n	1a44e <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   1a42c:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   1a430:	684b      	ldr	r3, [r1, #4]
   1a432:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1a436:	d023      	beq.n	1a480 <hal_spi_config_master+0xc8>
   1a438:	d80c      	bhi.n	1a454 <hal_spi_config_master+0x9c>
   1a43a:	2bfa      	cmp	r3, #250	; 0xfa
   1a43c:	d029      	beq.n	1a492 <hal_spi_config_master+0xda>
   1a43e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1a442:	d01a      	beq.n	1a47a <hal_spi_config_master+0xc2>
   1a444:	2b7d      	cmp	r3, #125	; 0x7d
   1a446:	d011      	beq.n	1a46c <hal_spi_config_master+0xb4>
            frequency = 0;
   1a448:	2300      	movs	r3, #0
            rc = EINVAL;
   1a44a:	2016      	movs	r0, #22
            break;
   1a44c:	e010      	b.n	1a470 <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   1a44e:	f043 0301 	orr.w	r3, r3, #1
   1a452:	e7eb      	b.n	1a42c <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   1a454:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   1a458:	d015      	beq.n	1a486 <hal_spi_config_master+0xce>
   1a45a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   1a45e:	d015      	beq.n	1a48c <hal_spi_config_master+0xd4>
   1a460:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   1a464:	d1f0      	bne.n	1a448 <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   1a466:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   1a46a:	e001      	b.n	1a470 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   1a46c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   1a470:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   1a474:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a478:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   1a47a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   1a47e:	e7f7      	b.n	1a470 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   1a480:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   1a484:	e7f4      	b.n	1a470 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   1a486:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   1a48a:	e7f1      	b.n	1a470 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   1a48c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   1a490:	e7ee      	b.n	1a470 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   1a492:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1a496:	e7eb      	b.n	1a470 <hal_spi_config_master+0xb8>

0001a498 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a498:	2802      	cmp	r0, #2
   1a49a:	dc10      	bgt.n	1a4be <hal_spi_config+0x26>
{
   1a49c:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a49e:	4b0b      	ldr	r3, [pc, #44]	; (1a4cc <hal_spi_config+0x34>)
   1a4a0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a4a4:	b168      	cbz	r0, 1a4c2 <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1a4a6:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   1a4a8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   1a4ac:	b95b      	cbnz	r3, 1a4c6 <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1a4ae:	7803      	ldrb	r3, [r0, #0]
   1a4b0:	b113      	cbz	r3, 1a4b8 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   1a4b2:	f7ff feff 	bl	1a2b4 <hal_spi_config_slave>
    }

err:
    return (rc);
}
   1a4b6:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   1a4b8:	f7ff ff7e 	bl	1a3b8 <hal_spi_config_master>
   1a4bc:	e7fb      	b.n	1a4b6 <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a4be:	2016      	movs	r0, #22
}
   1a4c0:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a4c2:	2016      	movs	r0, #22
   1a4c4:	e7f7      	b.n	1a4b6 <hal_spi_config+0x1e>
        return -1;
   1a4c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a4ca:	e7f4      	b.n	1a4b6 <hal_spi_config+0x1e>
   1a4cc:	00022168 	.word	0x00022168

0001a4d0 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a4d0:	2802      	cmp	r0, #2
   1a4d2:	dc1b      	bgt.n	1a50c <hal_spi_enable+0x3c>
   1a4d4:	4b10      	ldr	r3, [pc, #64]	; (1a518 <hal_spi_enable+0x48>)
   1a4d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1a4da:	b1cb      	cbz	r3, 1a510 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1a4dc:	781a      	ldrb	r2, [r3, #0]
   1a4de:	b17a      	cbz	r2, 1a500 <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   1a4e0:	6a1a      	ldr	r2, [r3, #32]
   1a4e2:	b1ba      	cbz	r2, 1a514 <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   1a4e4:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   1a4e6:	2000      	movs	r0, #0
   1a4e8:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1a4ec:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   1a4f0:	f240 4202 	movw	r2, #1026	; 0x402
   1a4f4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   1a4f8:	2202      	movs	r2, #2
   1a4fa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1a4fe:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   1a500:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1a502:	2201      	movs	r2, #1
   1a504:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   1a508:	2000      	movs	r0, #0
   1a50a:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a50c:	2016      	movs	r0, #22
   1a50e:	4770      	bx	lr
   1a510:	2016      	movs	r0, #22
   1a512:	4770      	bx	lr
            rc = EINVAL;
   1a514:	2016      	movs	r0, #22

err:
    return rc;
}
   1a516:	4770      	bx	lr
   1a518:	00022168 	.word	0x00022168

0001a51c <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a51c:	2802      	cmp	r0, #2
   1a51e:	dc2a      	bgt.n	1a576 <hal_spi_disable+0x5a>
{
   1a520:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a522:	4b17      	ldr	r3, [pc, #92]	; (1a580 <hal_spi_disable+0x64>)
   1a524:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1a528:	b33c      	cbz	r4, 1a57a <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1a52a:	7823      	ldrb	r3, [r4, #0]
   1a52c:	b9ab      	cbnz	r3, 1a55a <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   1a52e:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1a530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a534:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   1a538:	7863      	ldrb	r3, [r4, #1]
   1a53a:	b943      	cbnz	r3, 1a54e <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   1a53c:	2300      	movs	r3, #0
   1a53e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   1a542:	2000      	movs	r0, #0
   1a544:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   1a546:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   1a548:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   1a54a:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   1a54c:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   1a54e:	4628      	mov	r0, r5
   1a550:	f7ff fea6 	bl	1a2a0 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   1a554:	2300      	movs	r3, #0
   1a556:	7063      	strb	r3, [r4, #1]
   1a558:	e7f0      	b.n	1a53c <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   1a55a:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1a55c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a560:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   1a564:	2300      	movs	r3, #0
   1a566:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1a56a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   1a56e:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   1a572:	70e3      	strb	r3, [r4, #3]
   1a574:	e7e5      	b.n	1a542 <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a576:	2016      	movs	r0, #22
}
   1a578:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a57a:	2016      	movs	r0, #22
    return rc;
   1a57c:	e7e6      	b.n	1a54c <hal_spi_disable+0x30>
   1a57e:	bf00      	nop
   1a580:	00022168 	.word	0x00022168

0001a584 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a584:	2802      	cmp	r0, #2
   1a586:	dc1d      	bgt.n	1a5c4 <hal_spi_init+0x40>
{
   1a588:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a58a:	4b13      	ldr	r3, [pc, #76]	; (1a5d8 <hal_spi_init+0x54>)
   1a58c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1a590:	b1d4      	cbz	r4, 1a5c8 <hal_spi_init+0x44>
    if (cfg == NULL) {
   1a592:	b1d9      	cbz	r1, 1a5cc <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   1a594:	2a01      	cmp	r2, #1
   1a596:	d81b      	bhi.n	1a5d0 <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   1a598:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   1a59a:	b9d8      	cbnz	r0, 1a5d4 <hal_spi_init+0x50>
   1a59c:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   1a59e:	2303      	movs	r3, #3
   1a5a0:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   1a5a2:	b94a      	cbnz	r2, 1a5b8 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   1a5a4:	4b0d      	ldr	r3, [pc, #52]	; (1a5dc <hal_spi_init+0x58>)
   1a5a6:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   1a5a8:	f7ff ffb8 	bl	1a51c <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   1a5ac:	4a0c      	ldr	r2, [pc, #48]	; (1a5e0 <hal_spi_init+0x5c>)
   1a5ae:	4629      	mov	r1, r5
   1a5b0:	4620      	mov	r0, r4
   1a5b2:	f7ff fea5 	bl	1a300 <hal_spi_init_master>
   1a5b6:	e00c      	b.n	1a5d2 <hal_spi_init+0x4e>
            assert(0);
   1a5b8:	2300      	movs	r3, #0
   1a5ba:	461a      	mov	r2, r3
   1a5bc:	4619      	mov	r1, r3
   1a5be:	4618      	mov	r0, r3
   1a5c0:	f000 f952 	bl	1a868 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a5c4:	2016      	movs	r0, #22
}
   1a5c6:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a5c8:	2016      	movs	r0, #22
   1a5ca:	e002      	b.n	1a5d2 <hal_spi_init+0x4e>
    rc = EINVAL;
   1a5cc:	2016      	movs	r0, #22
   1a5ce:	e000      	b.n	1a5d2 <hal_spi_init+0x4e>
   1a5d0:	2016      	movs	r0, #22
}
   1a5d2:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   1a5d4:	2016      	movs	r0, #22
    return (rc);
   1a5d6:	e7fc      	b.n	1a5d2 <hal_spi_init+0x4e>
   1a5d8:	00022168 	.word	0x00022168
   1a5dc:	40003000 	.word	0x40003000
   1a5e0:	0001a289 	.word	0x0001a289

0001a5e4 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a5e4:	2802      	cmp	r0, #2
   1a5e6:	dc0a      	bgt.n	1a5fe <hal_spi_set_txrx_cb+0x1a>
   1a5e8:	4b08      	ldr	r3, [pc, #32]	; (1a60c <hal_spi_set_txrx_cb+0x28>)
   1a5ea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1a5ee:	b143      	cbz	r3, 1a602 <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1a5f0:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   1a5f2:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   1a5f6:	b930      	cbnz	r0, 1a606 <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   1a5f8:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   1a5fa:	625a      	str	r2, [r3, #36]	; 0x24
   1a5fc:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a5fe:	2016      	movs	r0, #22
   1a600:	4770      	bx	lr
   1a602:	2016      	movs	r0, #22
   1a604:	4770      	bx	lr
        rc = -1;
   1a606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   1a60a:	4770      	bx	lr
   1a60c:	00022168 	.word	0x00022168

0001a610 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   1a610:	2b00      	cmp	r3, #0
   1a612:	d046      	beq.n	1a6a2 <hal_spi_txrx+0x92>
{
   1a614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a616:	460d      	mov	r5, r1
   1a618:	4617      	mov	r7, r2
   1a61a:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   1a61c:	2802      	cmp	r0, #2
   1a61e:	dc42      	bgt.n	1a6a6 <hal_spi_txrx+0x96>
   1a620:	4b25      	ldr	r3, [pc, #148]	; (1a6b8 <hal_spi_txrx+0xa8>)
   1a622:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1a626:	2b00      	cmp	r3, #0
   1a628:	d03f      	beq.n	1a6aa <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1a62a:	781a      	ldrb	r2, [r3, #0]
   1a62c:	2a00      	cmp	r2, #0
   1a62e:	d13e      	bne.n	1a6ae <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1a630:	2900      	cmp	r1, #0
   1a632:	d03e      	beq.n	1a6b2 <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   1a634:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   1a636:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   1a63a:	2b07      	cmp	r3, #7
   1a63c:	d004      	beq.n	1a648 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   1a63e:	b95b      	cbnz	r3, 1a658 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1a640:	2301      	movs	r3, #1
   1a642:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1a646:	e007      	b.n	1a658 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   1a648:	f7ff ff68 	bl	1a51c <hal_spi_disable>
   1a64c:	e7f8      	b.n	1a640 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   1a64e:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   1a652:	2300      	movs	r3, #0
   1a654:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   1a658:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a65c:	2b00      	cmp	r3, #0
   1a65e:	d1f6      	bne.n	1a64e <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   1a660:	782b      	ldrb	r3, [r5, #0]
   1a662:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   1a666:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   1a668:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   1a66a:	2200      	movs	r2, #0
   1a66c:	e00d      	b.n	1a68a <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   1a66e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1a672:	2b00      	cmp	r3, #0
   1a674:	d0fb      	beq.n	1a66e <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   1a676:	2300      	movs	r3, #0
   1a678:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   1a67c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   1a680:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   1a682:	b10f      	cbz	r7, 1a688 <hal_spi_txrx+0x78>
                *rxd = rxval;
   1a684:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   1a688:	3201      	adds	r2, #1
   1a68a:	42b2      	cmp	r2, r6
   1a68c:	da07      	bge.n	1a69e <hal_spi_txrx+0x8e>
            if (txcnt) {
   1a68e:	2900      	cmp	r1, #0
   1a690:	d0ed      	beq.n	1a66e <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   1a692:	786b      	ldrb	r3, [r5, #1]
   1a694:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   1a698:	3901      	subs	r1, #1
                ++txd;
   1a69a:	3501      	adds	r5, #1
   1a69c:	e7e7      	b.n	1a66e <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   1a69e:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   1a6a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   1a6a2:	2016      	movs	r0, #22
}
   1a6a4:	4770      	bx	lr
    return rc;
   1a6a6:	2016      	movs	r0, #22
   1a6a8:	e7fa      	b.n	1a6a0 <hal_spi_txrx+0x90>
   1a6aa:	2016      	movs	r0, #22
   1a6ac:	e7f8      	b.n	1a6a0 <hal_spi_txrx+0x90>
   1a6ae:	2016      	movs	r0, #22
   1a6b0:	e7f6      	b.n	1a6a0 <hal_spi_txrx+0x90>
   1a6b2:	2016      	movs	r0, #22
   1a6b4:	e7f4      	b.n	1a6a0 <hal_spi_txrx+0x90>
   1a6b6:	bf00      	nop
   1a6b8:	00022168 	.word	0x00022168

0001a6bc <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a6bc:	2802      	cmp	r0, #2
   1a6be:	dc57      	bgt.n	1a770 <hal_spi_txrx_noblock+0xb4>
{
   1a6c0:	b430      	push	{r4, r5}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a6c2:	4c35      	ldr	r4, [pc, #212]	; (1a798 <hal_spi_txrx_noblock+0xdc>)
   1a6c4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   1a6c8:	2800      	cmp	r0, #0
   1a6ca:	d053      	beq.n	1a774 <hal_spi_txrx_noblock+0xb8>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   1a6cc:	6a04      	ldr	r4, [r0, #32]
   1a6ce:	2c00      	cmp	r4, #0
   1a6d0:	d052      	beq.n	1a778 <hal_spi_txrx_noblock+0xbc>
   1a6d2:	2b00      	cmp	r3, #0
   1a6d4:	d052      	beq.n	1a77c <hal_spi_txrx_noblock+0xc0>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1a6d6:	7804      	ldrb	r4, [r0, #0]
   1a6d8:	2c00      	cmp	r4, #0
   1a6da:	d137      	bne.n	1a74c <hal_spi_txrx_noblock+0x90>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1a6dc:	2900      	cmp	r1, #0
   1a6de:	d050      	beq.n	1a782 <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   1a6e0:	7844      	ldrb	r4, [r0, #1]
   1a6e2:	2c00      	cmp	r4, #0
   1a6e4:	d14f      	bne.n	1a786 <hal_spi_txrx_noblock+0xca>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   1a6e6:	6904      	ldr	r4, [r0, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   1a6e8:	2540      	movs	r5, #64	; 0x40
   1a6ea:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   1a6ee:	2501      	movs	r5, #1
   1a6f0:	7045      	strb	r5, [r0, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   1a6f2:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
   1a6f6:	2d07      	cmp	r5, #7
   1a6f8:	d005      	beq.n	1a706 <hal_spi_txrx_noblock+0x4a>
            spim->ENABLE = 0;
   1a6fa:	2500      	movs	r5, #0
   1a6fc:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1a700:	2507      	movs	r5, #7
   1a702:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   1a706:	2500      	movs	r5, #0
   1a708:	80c5      	strh	r5, [r0, #6]
        spi->nhs_buflen = len;
   1a70a:	8083      	strh	r3, [r0, #4]
        spi->nhs_txbuf = txbuf;
   1a70c:	6181      	str	r1, [r0, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   1a70e:	2bff      	cmp	r3, #255	; 0xff
   1a710:	bfa8      	it	ge
   1a712:	23ff      	movge	r3, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   1a714:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   1a718:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   1a71c:	61c2      	str	r2, [r0, #28]
        if (rxbuf == NULL) {
   1a71e:	b172      	cbz	r2, 1a73e <hal_spi_txrx_noblock+0x82>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   1a720:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   1a724:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   1a728:	2000      	movs	r0, #0
   1a72a:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   1a72e:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        spim->TASKS_START = 1;
   1a732:	2301      	movs	r3, #1
   1a734:	6123      	str	r3, [r4, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   1a736:	2340      	movs	r3, #64	; 0x40
   1a738:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1a73c:	e01f      	b.n	1a77e <hal_spi_txrx_noblock+0xc2>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   1a73e:	3002      	adds	r0, #2
   1a740:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   1a744:	2301      	movs	r3, #1
   1a746:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
   1a74a:	e7ed      	b.n	1a728 <hal_spi_txrx_noblock+0x6c>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   1a74c:	b161      	cbz	r1, 1a768 <hal_spi_txrx_noblock+0xac>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   1a74e:	2bff      	cmp	r3, #255	; 0xff
   1a750:	dc1c      	bgt.n	1a78c <hal_spi_txrx_noblock+0xd0>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   1a752:	78c4      	ldrb	r4, [r0, #3]
   1a754:	b9e4      	cbnz	r4, 1a790 <hal_spi_txrx_noblock+0xd4>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   1a756:	61c2      	str	r2, [r0, #28]
        spi->nhs_txbuf = txbuf;
   1a758:	6181      	str	r1, [r0, #24]
        spi->nhs_buflen = len;
   1a75a:	8083      	strh	r3, [r0, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   1a75c:	2301      	movs	r3, #1
   1a75e:	70c3      	strb	r3, [r0, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   1a760:	6902      	ldr	r2, [r0, #16]
   1a762:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   1a764:	2000      	movs	r0, #0
   1a766:	e00a      	b.n	1a77e <hal_spi_txrx_noblock+0xc2>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   1a768:	2a00      	cmp	r2, #0
   1a76a:	d1f0      	bne.n	1a74e <hal_spi_txrx_noblock+0x92>
    rc = EINVAL;
   1a76c:	2016      	movs	r0, #22
   1a76e:	e006      	b.n	1a77e <hal_spi_txrx_noblock+0xc2>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a770:	2016      	movs	r0, #22

err:
    return rc;
}
   1a772:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1a774:	2016      	movs	r0, #22
   1a776:	e002      	b.n	1a77e <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   1a778:	2016      	movs	r0, #22
   1a77a:	e000      	b.n	1a77e <hal_spi_txrx_noblock+0xc2>
   1a77c:	2016      	movs	r0, #22
}
   1a77e:	bc30      	pop	{r4, r5}
   1a780:	4770      	bx	lr
    rc = EINVAL;
   1a782:	2016      	movs	r0, #22
   1a784:	e7fb      	b.n	1a77e <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   1a786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a78a:	e7f8      	b.n	1a77e <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   1a78c:	2016      	movs	r0, #22
   1a78e:	e7f6      	b.n	1a77e <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   1a790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a794:	e7f3      	b.n	1a77e <hal_spi_txrx_noblock+0xc2>
   1a796:	bf00      	nop
   1a798:	00022168 	.word	0x00022168

0001a79c <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   1a79c:	b508      	push	{r3, lr}
    assert(0);
   1a79e:	2300      	movs	r3, #0
   1a7a0:	461a      	mov	r2, r3
   1a7a2:	4619      	mov	r1, r3
   1a7a4:	4618      	mov	r0, r3
   1a7a6:	f000 f85f 	bl	1a868 <__assert_func>
	...

0001a7ac <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   1a7ac:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   1a7ae:	4b06      	ldr	r3, [pc, #24]	; (1a7c8 <nrf52_wdt_irq_handler+0x1c>)
   1a7b0:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   1a7b4:	f013 0f01 	tst.w	r3, #1
   1a7b8:	d100      	bne.n	1a7bc <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   1a7ba:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   1a7bc:	4b02      	ldr	r3, [pc, #8]	; (1a7c8 <nrf52_wdt_irq_handler+0x1c>)
   1a7be:	2200      	movs	r2, #0
   1a7c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   1a7c4:	f7ff ffea 	bl	1a79c <nrf52_hal_wdt_default_handler>
   1a7c8:	40010000 	.word	0x40010000

0001a7cc <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   1a7cc:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   1a7ce:	4b17      	ldr	r3, [pc, #92]	; (1a82c <hal_watchdog_init+0x60>)
   1a7d0:	2201      	movs	r2, #1
   1a7d2:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   1a7d6:	4b16      	ldr	r3, [pc, #88]	; (1a830 <hal_watchdog_init+0x64>)
   1a7d8:	4298      	cmp	r0, r3
   1a7da:	d821      	bhi.n	1a820 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   1a7dc:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1a7e0:	0153      	lsls	r3, r2, #5
   1a7e2:	4a14      	ldr	r2, [pc, #80]	; (1a834 <hal_watchdog_init+0x68>)
   1a7e4:	fba2 2303 	umull	r2, r3, r2, r3
   1a7e8:	08db      	lsrs	r3, r3, #3
   1a7ea:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1a7ee:	4b0f      	ldr	r3, [pc, #60]	; (1a82c <hal_watchdog_init+0x60>)
   1a7f0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a7f4:	4a10      	ldr	r2, [pc, #64]	; (1a838 <hal_watchdog_init+0x6c>)
   1a7f6:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a7f8:	4910      	ldr	r1, [pc, #64]	; (1a83c <hal_watchdog_init+0x70>)
   1a7fa:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a7fe:	4a10      	ldr	r2, [pc, #64]	; (1a840 <hal_watchdog_init+0x74>)
   1a800:	21e0      	movs	r1, #224	; 0xe0
   1a802:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a806:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1a80a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a80e:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   1a810:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   1a814:	f042 0201 	orr.w	r2, r2, #1
   1a818:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   1a81c:	2000      	movs	r0, #0
   1a81e:	bd08      	pop	{r3, pc}
        assert(0);
   1a820:	2300      	movs	r3, #0
   1a822:	461a      	mov	r2, r3
   1a824:	4619      	mov	r1, r3
   1a826:	4618      	mov	r0, r3
   1a828:	f000 f81e 	bl	1a868 <__assert_func>
   1a82c:	40010000 	.word	0x40010000
   1a830:	02aaaaaa 	.word	0x02aaaaaa
   1a834:	10624dd3 	.word	0x10624dd3
   1a838:	e000ed00 	.word	0xe000ed00
   1a83c:	0001a7ad 	.word	0x0001a7ad
   1a840:	e000e100 	.word	0xe000e100

0001a844 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   1a844:	4b02      	ldr	r3, [pc, #8]	; (1a850 <hal_watchdog_enable+0xc>)
   1a846:	2201      	movs	r2, #1
   1a848:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   1a84c:	601a      	str	r2, [r3, #0]
}
   1a84e:	4770      	bx	lr
   1a850:	40010000 	.word	0x40010000

0001a854 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   1a854:	4b02      	ldr	r3, [pc, #8]	; (1a860 <hal_watchdog_tickle+0xc>)
   1a856:	4a03      	ldr	r2, [pc, #12]	; (1a864 <hal_watchdog_tickle+0x10>)
   1a858:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   1a85c:	4770      	bx	lr
   1a85e:	bf00      	nop
   1a860:	40010000 	.word	0x40010000
   1a864:	6e524635 	.word	0x6e524635

0001a868 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   1a868:	b508      	push	{r3, lr}
   1a86a:	4675      	mov	r5, lr
   1a86c:	4604      	mov	r4, r0
   1a86e:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   1a870:	f001 fa90 	bl	1bd94 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   1a874:	f7ff f905 	bl	19a82 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   1a878:	b18c      	cbz	r4, 1a89e <__assert_func+0x36>
   1a87a:	4633      	mov	r3, r6
   1a87c:	4622      	mov	r2, r4
   1a87e:	4629      	mov	r1, r5
   1a880:	4809      	ldr	r0, [pc, #36]	; (1a8a8 <__assert_func+0x40>)
   1a882:	f7ff f929 	bl	19ad8 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
   1a886:	f7ed fc7d 	bl	8184 <hal_debugger_connected>
   1a88a:	b100      	cbz	r0, 1a88e <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
   1a88c:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   1a88e:	4b07      	ldr	r3, [pc, #28]	; (1a8ac <__assert_func+0x44>)
   1a890:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1a894:	605a      	str	r2, [r3, #4]
    asm("isb");
   1a896:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   1a89a:	f7ed fc7b 	bl	8194 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   1a89e:	4629      	mov	r1, r5
   1a8a0:	4803      	ldr	r0, [pc, #12]	; (1a8b0 <__assert_func+0x48>)
   1a8a2:	f7ff f919 	bl	19ad8 <console_printf>
   1a8a6:	e7ee      	b.n	1a886 <__assert_func+0x1e>
   1a8a8:	00022184 	.word	0x00022184
   1a8ac:	e000ed00 	.word	0xe000ed00
   1a8b0:	00022174 	.word	0x00022174

0001a8b4 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   1a8b4:	b500      	push	{lr}
   1a8b6:	b083      	sub	sp, #12
   1a8b8:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   1a8ba:	f7ff f8e2 	bl	19a82 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   1a8be:	4d1b      	ldr	r5, [pc, #108]	; (1a92c <os_default_irq+0x78>)
   1a8c0:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   1a8c2:	6822      	ldr	r2, [r4, #0]
   1a8c4:	f3c1 0108 	ubfx	r1, r1, #0, #9
   1a8c8:	4819      	ldr	r0, [pc, #100]	; (1a930 <os_default_irq+0x7c>)
   1a8ca:	f7ff f905 	bl	19ad8 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   1a8ce:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   1a8d0:	6883      	ldr	r3, [r0, #8]
   1a8d2:	6842      	ldr	r2, [r0, #4]
   1a8d4:	6801      	ldr	r1, [r0, #0]
   1a8d6:	68c0      	ldr	r0, [r0, #12]
   1a8d8:	9000      	str	r0, [sp, #0]
   1a8da:	4816      	ldr	r0, [pc, #88]	; (1a934 <os_default_irq+0x80>)
   1a8dc:	f7ff f8fc 	bl	19ad8 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   1a8e0:	6923      	ldr	r3, [r4, #16]
   1a8e2:	9300      	str	r3, [sp, #0]
   1a8e4:	68e3      	ldr	r3, [r4, #12]
   1a8e6:	68a2      	ldr	r2, [r4, #8]
   1a8e8:	6861      	ldr	r1, [r4, #4]
   1a8ea:	4813      	ldr	r0, [pc, #76]	; (1a938 <os_default_irq+0x84>)
   1a8ec:	f7ff f8f4 	bl	19ad8 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   1a8f0:	6a23      	ldr	r3, [r4, #32]
   1a8f2:	9300      	str	r3, [sp, #0]
   1a8f4:	69e3      	ldr	r3, [r4, #28]
   1a8f6:	69a2      	ldr	r2, [r4, #24]
   1a8f8:	6961      	ldr	r1, [r4, #20]
   1a8fa:	4810      	ldr	r0, [pc, #64]	; (1a93c <os_default_irq+0x88>)
   1a8fc:	f7ff f8ec 	bl	19ad8 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   1a900:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   1a902:	6983      	ldr	r3, [r0, #24]
   1a904:	6942      	ldr	r2, [r0, #20]
   1a906:	6901      	ldr	r1, [r0, #16]
   1a908:	69c0      	ldr	r0, [r0, #28]
   1a90a:	9000      	str	r0, [sp, #0]
   1a90c:	480c      	ldr	r0, [pc, #48]	; (1a940 <os_default_irq+0x8c>)
   1a90e:	f7ff f8e3 	bl	19ad8 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   1a912:	6869      	ldr	r1, [r5, #4]
   1a914:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   1a916:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1a918:	480a      	ldr	r0, [pc, #40]	; (1a944 <os_default_irq+0x90>)
   1a91a:	f7ff f8dd 	bl	19ad8 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   1a91e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   1a920:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   1a922:	4809      	ldr	r0, [pc, #36]	; (1a948 <os_default_irq+0x94>)
   1a924:	f7ff f8d8 	bl	19ad8 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   1a928:	f7ed fc34 	bl	8194 <hal_system_reset>
   1a92c:	e000ed00 	.word	0xe000ed00
   1a930:	0002219c 	.word	0x0002219c
   1a934:	000221d0 	.word	0x000221d0
   1a938:	00022204 	.word	0x00022204
   1a93c:	00022238 	.word	0x00022238
   1a940:	0002226c 	.word	0x0002226c
   1a944:	000222a0 	.word	0x000222a0
   1a948:	000222c8 	.word	0x000222c8

0001a94c <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   1a94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
   1a94e:	f7ff ff81 	bl	1a854 <hal_watchdog_tickle>
    sanity_last = 0;
   1a952:	2500      	movs	r5, #0
   1a954:	e00b      	b.n	1a96e <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   1a956:	f000 fec7 	bl	1b6e8 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   1a95a:	f7ff ff7b 	bl	1a854 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
   1a95e:	4625      	mov	r5, r4
   1a960:	e011      	b.n	1a986 <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   1a962:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   1a964:	f002 f842 	bl	1c9ec <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   1a968:	4638      	mov	r0, r7
   1a96a:	f001 fa19 	bl	1bda0 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   1a96e:	4a14      	ldr	r2, [pc, #80]	; (1a9c0 <os_idle_task+0x74>)
   1a970:	6813      	ldr	r3, [r2, #0]
   1a972:	3301      	adds	r3, #1
   1a974:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   1a976:	f001 f995 	bl	1bca4 <os_time_get>
   1a97a:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
   1a97c:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   1a980:	1ac3      	subs	r3, r0, r3
   1a982:	2b00      	cmp	r3, #0
   1a984:	dce7      	bgt.n	1a956 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   1a986:	f001 fa05 	bl	1bd94 <os_arch_save_sr>
   1a98a:	4607      	mov	r7, r0
        now = os_time_get();
   1a98c:	f001 f98a 	bl	1bca4 <os_time_get>
   1a990:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
   1a992:	f000 ffd7 	bl	1b944 <os_sched_wakeup_ticks>
   1a996:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   1a998:	4630      	mov	r0, r6
   1a99a:	f000 f975 	bl	1ac88 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   1a99e:	42a0      	cmp	r0, r4
   1a9a0:	bf28      	it	cs
   1a9a2:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
   1a9a4:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   1a9a8:	1b9b      	subs	r3, r3, r6
   1a9aa:	4298      	cmp	r0, r3
   1a9ac:	bf28      	it	cs
   1a9ae:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
   1a9b0:	280b      	cmp	r0, #11
   1a9b2:	d9d6      	bls.n	1a962 <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
   1a9b4:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   1a9b8:	d9d4      	bls.n	1a964 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
   1a9ba:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   1a9be:	e7d1      	b.n	1a964 <os_idle_task+0x18>
   1a9c0:	2000de8c 	.word	0x2000de8c

0001a9c4 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   1a9c4:	b508      	push	{r3, lr}
   1a9c6:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   1a9c8:	2100      	movs	r1, #0
   1a9ca:	4608      	mov	r0, r1
   1a9cc:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   1a9ce:	2300      	movs	r3, #0
   1a9d0:	461a      	mov	r2, r3
   1a9d2:	4619      	mov	r1, r3
   1a9d4:	4618      	mov	r0, r3
   1a9d6:	f7ff ff47 	bl	1a868 <__assert_func>
	...

0001a9dc <os_started>:
}
   1a9dc:	4b01      	ldr	r3, [pc, #4]	; (1a9e4 <os_started+0x8>)
   1a9de:	6818      	ldr	r0, [r3, #0]
   1a9e0:	4770      	bx	lr
   1a9e2:	bf00      	nop
   1a9e4:	2000de88 	.word	0x2000de88

0001a9e8 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   1a9e8:	b500      	push	{lr}
   1a9ea:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   1a9ec:	2340      	movs	r3, #64	; 0x40
   1a9ee:	9303      	str	r3, [sp, #12]
   1a9f0:	4b15      	ldr	r3, [pc, #84]	; (1aa48 <os_init_idle_task+0x60>)
   1a9f2:	9302      	str	r3, [sp, #8]
   1a9f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a9f8:	9301      	str	r3, [sp, #4]
   1a9fa:	23ff      	movs	r3, #255	; 0xff
   1a9fc:	9300      	str	r3, [sp, #0]
   1a9fe:	2300      	movs	r3, #0
   1aa00:	4a12      	ldr	r2, [pc, #72]	; (1aa4c <os_init_idle_task+0x64>)
   1aa02:	4913      	ldr	r1, [pc, #76]	; (1aa50 <os_init_idle_task+0x68>)
   1aa04:	4813      	ldr	r0, [pc, #76]	; (1aa54 <os_init_idle_task+0x6c>)
   1aa06:	f001 f88d 	bl	1bb24 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   1aa0a:	b950      	cbnz	r0, 1aa22 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   1aa0c:	f000 fea2 	bl	1b754 <os_sanity_init>
    assert(rc == 0);
   1aa10:	b968      	cbnz	r0, 1aa2e <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   1aa12:	f247 5030 	movw	r0, #30000	; 0x7530
   1aa16:	f7ff fed9 	bl	1a7cc <hal_watchdog_init>
    assert(rc == 0);
   1aa1a:	b970      	cbnz	r0, 1aa3a <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
   1aa1c:	b005      	add	sp, #20
   1aa1e:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   1aa22:	2300      	movs	r3, #0
   1aa24:	461a      	mov	r2, r3
   1aa26:	4619      	mov	r1, r3
   1aa28:	4618      	mov	r0, r3
   1aa2a:	f7ff ff1d 	bl	1a868 <__assert_func>
    assert(rc == 0);
   1aa2e:	2300      	movs	r3, #0
   1aa30:	461a      	mov	r2, r3
   1aa32:	4619      	mov	r1, r3
   1aa34:	4618      	mov	r0, r3
   1aa36:	f7ff ff17 	bl	1a868 <__assert_func>
    assert(rc == 0);
   1aa3a:	2300      	movs	r3, #0
   1aa3c:	461a      	mov	r2, r3
   1aa3e:	4619      	mov	r1, r3
   1aa40:	4618      	mov	r0, r3
   1aa42:	f7ff ff11 	bl	1a868 <__assert_func>
   1aa46:	bf00      	nop
   1aa48:	20006f70 	.word	0x20006f70
   1aa4c:	0001a94d 	.word	0x0001a94d
   1aa50:	000222ec 	.word	0x000222ec
   1aa54:	2000dde8 	.word	0x2000dde8

0001aa58 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   1aa58:	b510      	push	{r4, lr}
   1aa5a:	b084      	sub	sp, #16
   1aa5c:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   1aa5e:	4b24      	ldr	r3, [pc, #144]	; (1aaf0 <os_init+0x98>)
   1aa60:	2200      	movs	r2, #0
   1aa62:	601a      	str	r2, [r3, #0]
   1aa64:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   1aa66:	4b23      	ldr	r3, [pc, #140]	; (1aaf4 <os_init+0x9c>)
   1aa68:	601a      	str	r2, [r3, #0]
   1aa6a:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   1aa6c:	f000 faba 	bl	1afe4 <os_eventq_dflt_get>
   1aa70:	f000 fa0e 	bl	1ae90 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   1aa74:	f000 fa04 	bl	1ae80 <os_dev_reset>

    err = os_arch_os_init();
   1aa78:	f001 f9c6 	bl	1be08 <os_arch_os_init>
    assert(err == OS_OK);
   1aa7c:	bb00      	cbnz	r0, 1aac0 <os_init+0x68>

    if (main_fn) {
   1aa7e:	b18c      	cbz	r4, 1aaa4 <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   1aa80:	f44f 6300 	mov.w	r3, #2048	; 0x800
   1aa84:	9303      	str	r3, [sp, #12]
   1aa86:	4b1c      	ldr	r3, [pc, #112]	; (1aaf8 <os_init+0xa0>)
   1aa88:	9302      	str	r3, [sp, #8]
   1aa8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1aa8e:	9301      	str	r3, [sp, #4]
   1aa90:	237f      	movs	r3, #127	; 0x7f
   1aa92:	9300      	str	r3, [sp, #0]
   1aa94:	4623      	mov	r3, r4
   1aa96:	4a19      	ldr	r2, [pc, #100]	; (1aafc <os_init+0xa4>)
   1aa98:	4919      	ldr	r1, [pc, #100]	; (1ab00 <os_init+0xa8>)
   1aa9a:	481a      	ldr	r0, [pc, #104]	; (1ab04 <os_init+0xac>)
   1aa9c:	f001 f842 	bl	1bb24 <os_task_init>
   1aaa0:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   1aaa2:	b998      	cbnz	r0, 1aacc <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   1aaa4:	f001 fe72 	bl	1c78c <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   1aaa8:	2001      	movs	r0, #1
   1aaaa:	f000 f985 	bl	1adb8 <os_dev_initialize_all>
   1aaae:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1aab0:	b990      	cbnz	r0, 1aad8 <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   1aab2:	2002      	movs	r0, #2
   1aab4:	f000 f980 	bl	1adb8 <os_dev_initialize_all>
   1aab8:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1aaba:	b998      	cbnz	r0, 1aae4 <os_init+0x8c>
}
   1aabc:	b004      	add	sp, #16
   1aabe:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   1aac0:	2300      	movs	r3, #0
   1aac2:	461a      	mov	r2, r3
   1aac4:	4619      	mov	r1, r3
   1aac6:	4618      	mov	r0, r3
   1aac8:	f7ff fece 	bl	1a868 <__assert_func>
        assert(err == 0);
   1aacc:	2300      	movs	r3, #0
   1aace:	461a      	mov	r2, r3
   1aad0:	4619      	mov	r1, r3
   1aad2:	4618      	mov	r0, r3
   1aad4:	f7ff fec8 	bl	1a868 <__assert_func>
    assert(err == OS_OK);
   1aad8:	2300      	movs	r3, #0
   1aada:	461a      	mov	r2, r3
   1aadc:	4619      	mov	r1, r3
   1aade:	4618      	mov	r0, r3
   1aae0:	f7ff fec2 	bl	1a868 <__assert_func>
    assert(err == OS_OK);
   1aae4:	2300      	movs	r3, #0
   1aae6:	461a      	mov	r2, r3
   1aae8:	4619      	mov	r1, r3
   1aaea:	4618      	mov	r0, r3
   1aaec:	f7ff febc 	bl	1a868 <__assert_func>
   1aaf0:	2000de90 	.word	0x2000de90
   1aaf4:	2000deb8 	.word	0x2000deb8
   1aaf8:	20007070 	.word	0x20007070
   1aafc:	0001a9c5 	.word	0x0001a9c5
   1ab00:	000222e4 	.word	0x000222e4
   1ab04:	2000de38 	.word	0x2000de38

0001ab08 <os_start>:

void
os_start(void)
{
   1ab08:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   1ab0a:	f7ff fe9b 	bl	1a844 <hal_watchdog_enable>

    err = os_arch_os_start();
   1ab0e:	f001 f9db 	bl	1bec8 <os_arch_os_start>
    assert(err == OS_OK);
   1ab12:	b900      	cbnz	r0, 1ab16 <os_start+0xe>
#else
    assert(0);
#endif
}
   1ab14:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   1ab16:	2300      	movs	r3, #0
   1ab18:	461a      	mov	r2, r3
   1ab1a:	4619      	mov	r1, r3
   1ab1c:	4618      	mov	r0, r3
   1ab1e:	f7ff fea3 	bl	1a868 <__assert_func>
	...

0001ab24 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   1ab24:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1ab26:	4b0c      	ldr	r3, [pc, #48]	; (1ab58 <os_pkg_init+0x34>)
   1ab28:	781b      	ldrb	r3, [r3, #0]
   1ab2a:	b14b      	cbz	r3, 1ab40 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   1ab2c:	2003      	movs	r0, #3
   1ab2e:	f000 f943 	bl	1adb8 <os_dev_initialize_all>
   1ab32:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1ab34:	b948      	cbnz	r0, 1ab4a <os_pkg_init+0x26>

    os_mempool_module_init();
   1ab36:	f000 fc25 	bl	1b384 <os_mempool_module_init>
    os_msys_init();
   1ab3a:	f000 fcad 	bl	1b498 <os_msys_init>
}
   1ab3e:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1ab40:	461a      	mov	r2, r3
   1ab42:	4619      	mov	r1, r3
   1ab44:	4618      	mov	r0, r3
   1ab46:	f7ff fe8f 	bl	1a868 <__assert_func>
    assert(err == OS_OK);
   1ab4a:	2300      	movs	r3, #0
   1ab4c:	461a      	mov	r2, r3
   1ab4e:	4619      	mov	r1, r3
   1ab50:	4618      	mov	r0, r3
   1ab52:	f7ff fe89 	bl	1a868 <__assert_func>
   1ab56:	bf00      	nop
   1ab58:	2000ddbc 	.word	0x2000ddbc

0001ab5c <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   1ab5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ab5e:	4604      	mov	r4, r0
   1ab60:	460d      	mov	r5, r1
   1ab62:	4617      	mov	r7, r2
   1ab64:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   1ab66:	2220      	movs	r2, #32
   1ab68:	2100      	movs	r1, #0
   1ab6a:	f001 fa80 	bl	1c06e <memset>
    c->c_ev.ev_cb = ev_cb;
   1ab6e:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   1ab70:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   1ab72:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   1ab74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001ab78 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   1ab78:	b538      	push	{r3, r4, r5, lr}
   1ab7a:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   1ab7c:	f001 f90a 	bl	1bd94 <os_arch_save_sr>
   1ab80:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   1ab82:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   1ab84:	b13b      	cbz	r3, 1ab96 <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1ab86:	69a2      	ldr	r2, [r4, #24]
   1ab88:	b172      	cbz	r2, 1aba8 <os_callout_stop+0x30>
   1ab8a:	61d3      	str	r3, [r2, #28]
   1ab8c:	69e3      	ldr	r3, [r4, #28]
   1ab8e:	69a2      	ldr	r2, [r4, #24]
   1ab90:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   1ab92:	2300      	movs	r3, #0
   1ab94:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   1ab96:	6920      	ldr	r0, [r4, #16]
   1ab98:	b110      	cbz	r0, 1aba0 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   1ab9a:	4621      	mov	r1, r4
   1ab9c:	f000 fa02 	bl	1afa4 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   1aba0:	4628      	mov	r0, r5
   1aba2:	f001 f8fd 	bl	1bda0 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   1aba6:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1aba8:	4a01      	ldr	r2, [pc, #4]	; (1abb0 <os_callout_stop+0x38>)
   1abaa:	6053      	str	r3, [r2, #4]
   1abac:	e7ee      	b.n	1ab8c <os_callout_stop+0x14>
   1abae:	bf00      	nop
   1abb0:	2000de90 	.word	0x2000de90

0001abb4 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   1abb4:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   1abb6:	6903      	ldr	r3, [r0, #16]
   1abb8:	b1c3      	cbz	r3, 1abec <os_callout_reset+0x38>
   1abba:	4605      	mov	r5, r0
   1abbc:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   1abbe:	2900      	cmp	r1, #0
   1abc0:	db2f      	blt.n	1ac22 <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   1abc2:	f001 f8e7 	bl	1bd94 <os_arch_save_sr>
   1abc6:	4606      	mov	r6, r0

    os_callout_stop(c);
   1abc8:	4628      	mov	r0, r5
   1abca:	f7ff ffd5 	bl	1ab78 <os_callout_stop>

    if (ticks == 0) {
   1abce:	b904      	cbnz	r4, 1abd2 <os_callout_reset+0x1e>
        ticks = 1;
   1abd0:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
   1abd2:	f001 f867 	bl	1bca4 <os_time_get>
   1abd6:	4420      	add	r0, r4
   1abd8:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1abda:	4b13      	ldr	r3, [pc, #76]	; (1ac28 <os_callout_reset+0x74>)
   1abdc:	681b      	ldr	r3, [r3, #0]
   1abde:	b153      	cbz	r3, 1abf6 <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   1abe0:	695a      	ldr	r2, [r3, #20]
   1abe2:	1a82      	subs	r2, r0, r2
   1abe4:	2a00      	cmp	r2, #0
   1abe6:	db06      	blt.n	1abf6 <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1abe8:	699b      	ldr	r3, [r3, #24]
   1abea:	e7f8      	b.n	1abde <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   1abec:	461a      	mov	r2, r3
   1abee:	4619      	mov	r1, r3
   1abf0:	4618      	mov	r0, r3
   1abf2:	f7ff fe39 	bl	1a868 <__assert_func>
            break;
        }
    }

    if (entry) {
   1abf6:	b15b      	cbz	r3, 1ac10 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   1abf8:	69da      	ldr	r2, [r3, #28]
   1abfa:	61ea      	str	r2, [r5, #28]
   1abfc:	61ab      	str	r3, [r5, #24]
   1abfe:	69da      	ldr	r2, [r3, #28]
   1ac00:	6015      	str	r5, [r2, #0]
   1ac02:	3518      	adds	r5, #24
   1ac04:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   1ac06:	4630      	mov	r0, r6
   1ac08:	f001 f8ca 	bl	1bda0 <os_arch_restore_sr>

    ret = OS_OK;
   1ac0c:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   1ac0e:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   1ac10:	2300      	movs	r3, #0
   1ac12:	61ab      	str	r3, [r5, #24]
   1ac14:	4b04      	ldr	r3, [pc, #16]	; (1ac28 <os_callout_reset+0x74>)
   1ac16:	685a      	ldr	r2, [r3, #4]
   1ac18:	61ea      	str	r2, [r5, #28]
   1ac1a:	6015      	str	r5, [r2, #0]
   1ac1c:	3518      	adds	r5, #24
   1ac1e:	605d      	str	r5, [r3, #4]
   1ac20:	e7f1      	b.n	1ac06 <os_callout_reset+0x52>
        ret = OS_EINVAL;
   1ac22:	2002      	movs	r0, #2
    return ret;
   1ac24:	e7f3      	b.n	1ac0e <os_callout_reset+0x5a>
   1ac26:	bf00      	nop
   1ac28:	2000de90 	.word	0x2000de90

0001ac2c <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   1ac2c:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   1ac2e:	f001 f839 	bl	1bca4 <os_time_get>
   1ac32:	4605      	mov	r5, r0
   1ac34:	e00f      	b.n	1ac56 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   1ac36:	69e2      	ldr	r2, [r4, #28]
   1ac38:	4b12      	ldr	r3, [pc, #72]	; (1ac84 <os_callout_tick+0x58>)
   1ac3a:	605a      	str	r2, [r3, #4]
   1ac3c:	69e3      	ldr	r3, [r4, #28]
   1ac3e:	69a2      	ldr	r2, [r4, #24]
   1ac40:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   1ac42:	2300      	movs	r3, #0
   1ac44:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   1ac46:	f001 f8ab 	bl	1bda0 <os_arch_restore_sr>

        if (c) {
   1ac4a:	b1d4      	cbz	r4, 1ac82 <os_callout_tick+0x56>
            if (c->c_evq) {
   1ac4c:	6920      	ldr	r0, [r4, #16]
   1ac4e:	b9a0      	cbnz	r0, 1ac7a <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   1ac50:	6863      	ldr	r3, [r4, #4]
   1ac52:	4620      	mov	r0, r4
   1ac54:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
   1ac56:	f001 f89d 	bl	1bd94 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   1ac5a:	4b0a      	ldr	r3, [pc, #40]	; (1ac84 <os_callout_tick+0x58>)
   1ac5c:	681c      	ldr	r4, [r3, #0]
        if (c) {
   1ac5e:	2c00      	cmp	r4, #0
   1ac60:	d0f1      	beq.n	1ac46 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   1ac62:	6963      	ldr	r3, [r4, #20]
   1ac64:	1aeb      	subs	r3, r5, r3
   1ac66:	2b00      	cmp	r3, #0
   1ac68:	db05      	blt.n	1ac76 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   1ac6a:	69a3      	ldr	r3, [r4, #24]
   1ac6c:	2b00      	cmp	r3, #0
   1ac6e:	d0e2      	beq.n	1ac36 <os_callout_tick+0xa>
   1ac70:	69e2      	ldr	r2, [r4, #28]
   1ac72:	61da      	str	r2, [r3, #28]
   1ac74:	e7e2      	b.n	1ac3c <os_callout_tick+0x10>
                c = NULL;
   1ac76:	2400      	movs	r4, #0
   1ac78:	e7e5      	b.n	1ac46 <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
   1ac7a:	4621      	mov	r1, r4
   1ac7c:	f000 f915 	bl	1aeaa <os_eventq_put>
   1ac80:	e7e9      	b.n	1ac56 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   1ac82:	bd38      	pop	{r3, r4, r5, pc}
   1ac84:	2000de90 	.word	0x2000de90

0001ac88 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   1ac88:	b510      	push	{r4, lr}
   1ac8a:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   1ac8c:	f001 f88b 	bl	1bda6 <os_arch_in_critical>
   1ac90:	b130      	cbz	r0, 1aca0 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   1ac92:	4b09      	ldr	r3, [pc, #36]	; (1acb8 <os_callout_wakeup_ticks+0x30>)
   1ac94:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   1ac96:	b15b      	cbz	r3, 1acb0 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   1ac98:	6958      	ldr	r0, [r3, #20]
   1ac9a:	1b00      	subs	r0, r0, r4
   1ac9c:	d406      	bmi.n	1acac <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   1ac9e:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1aca0:	2300      	movs	r3, #0
   1aca2:	461a      	mov	r2, r3
   1aca4:	4619      	mov	r1, r3
   1aca6:	4618      	mov	r0, r3
   1aca8:	f7ff fdde 	bl	1a868 <__assert_func>
            rt = 0;     /* callout time is in the past */
   1acac:	2000      	movs	r0, #0
   1acae:	e7f6      	b.n	1ac9e <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   1acb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1acb4:	e7f3      	b.n	1ac9e <os_callout_wakeup_ticks+0x16>
   1acb6:	bf00      	nop
   1acb8:	2000de90 	.word	0x2000de90

0001acbc <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   1acbc:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   1acbe:	4601      	mov	r1, r0
   1acc0:	2000      	movs	r0, #0
   1acc2:	f002 f84d 	bl	1cd60 <hal_timer_config>
    return rc;
}
   1acc6:	bd08      	pop	{r3, pc}

0001acc8 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
   1acc8:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   1acca:	2000      	movs	r0, #0
   1accc:	f002 f8c4 	bl	1ce58 <hal_timer_read>
    return cpu_time;
}
   1acd0:	bd08      	pop	{r3, pc}
	...

0001acd4 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   1acd4:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   1acd6:	4b15      	ldr	r3, [pc, #84]	; (1ad2c <os_dev_add+0x58>)
   1acd8:	681d      	ldr	r5, [r3, #0]
   1acda:	b115      	cbz	r5, 1ace2 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   1acdc:	462b      	mov	r3, r5
    prev_dev = NULL;
   1acde:	2400      	movs	r4, #0
   1ace0:	e008      	b.n	1acf4 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1ace2:	4603      	mov	r3, r0
   1ace4:	f843 5f20 	str.w	r5, [r3, #32]!
   1ace8:	4a10      	ldr	r2, [pc, #64]	; (1ad2c <os_dev_add+0x58>)
   1acea:	6053      	str	r3, [r2, #4]
   1acec:	6010      	str	r0, [r2, #0]
        return (0);
   1acee:	e010      	b.n	1ad12 <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   1acf0:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   1acf2:	6a1b      	ldr	r3, [r3, #32]
   1acf4:	b143      	cbz	r3, 1ad08 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
   1acf6:	7e01      	ldrb	r1, [r0, #24]
   1acf8:	7e1a      	ldrb	r2, [r3, #24]
   1acfa:	4291      	cmp	r1, r2
   1acfc:	d304      	bcc.n	1ad08 <os_dev_add+0x34>
   1acfe:	d1f7      	bne.n	1acf0 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
   1ad00:	7e41      	ldrb	r1, [r0, #25]
   1ad02:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
   1ad04:	4291      	cmp	r1, r2
   1ad06:	d2f3      	bcs.n	1acf0 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   1ad08:	b15c      	cbz	r4, 1ad22 <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   1ad0a:	6a23      	ldr	r3, [r4, #32]
   1ad0c:	6203      	str	r3, [r0, #32]
   1ad0e:	b11b      	cbz	r3, 1ad18 <os_dev_add+0x44>
   1ad10:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   1ad12:	2000      	movs	r0, #0
   1ad14:	bc30      	pop	{r4, r5}
   1ad16:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   1ad18:	f100 0320 	add.w	r3, r0, #32
   1ad1c:	4a03      	ldr	r2, [pc, #12]	; (1ad2c <os_dev_add+0x58>)
   1ad1e:	6053      	str	r3, [r2, #4]
   1ad20:	e7f6      	b.n	1ad10 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1ad22:	6205      	str	r5, [r0, #32]
   1ad24:	4b01      	ldr	r3, [pc, #4]	; (1ad2c <os_dev_add+0x58>)
   1ad26:	6018      	str	r0, [r3, #0]
   1ad28:	e7f3      	b.n	1ad12 <os_dev_add+0x3e>
   1ad2a:	bf00      	nop
   1ad2c:	20009070 	.word	0x20009070

0001ad30 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   1ad30:	b510      	push	{r4, lr}
   1ad32:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   1ad34:	6903      	ldr	r3, [r0, #16]
   1ad36:	6941      	ldr	r1, [r0, #20]
   1ad38:	4798      	blx	r3
    if (rc != 0) {
   1ad3a:	4603      	mov	r3, r0
   1ad3c:	b128      	cbz	r0, 1ad4a <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   1ad3e:	7ee2      	ldrb	r2, [r4, #27]
   1ad40:	f012 0f08 	tst.w	r2, #8
   1ad44:	d105      	bne.n	1ad52 <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   1ad46:	2300      	movs	r3, #0
   1ad48:	e003      	b.n	1ad52 <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   1ad4a:	7ee2      	ldrb	r2, [r4, #27]
   1ad4c:	f042 0201 	orr.w	r2, r2, #1
   1ad50:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
   1ad52:	4618      	mov	r0, r3
   1ad54:	bd10      	pop	{r4, pc}

0001ad56 <os_dev_init>:
    dev->od_name = name;
   1ad56:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   1ad58:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   1ad5a:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   1ad5c:	2300      	movs	r3, #0
   1ad5e:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
   1ad60:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
   1ad62:	9a00      	ldr	r2, [sp, #0]
   1ad64:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
   1ad66:	9a01      	ldr	r2, [sp, #4]
   1ad68:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   1ad6a:	6003      	str	r3, [r0, #0]
   1ad6c:	6043      	str	r3, [r0, #4]
   1ad6e:	6083      	str	r3, [r0, #8]
   1ad70:	60c3      	str	r3, [r0, #12]
}
   1ad72:	4618      	mov	r0, r3
   1ad74:	4770      	bx	lr
	...

0001ad78 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   1ad78:	b530      	push	{r4, r5, lr}
   1ad7a:	b083      	sub	sp, #12
   1ad7c:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   1ad7e:	9c07      	ldr	r4, [sp, #28]
   1ad80:	9401      	str	r4, [sp, #4]
   1ad82:	9c06      	ldr	r4, [sp, #24]
   1ad84:	9400      	str	r4, [sp, #0]
   1ad86:	f7ff ffe6 	bl	1ad56 <os_dev_init>
    if (rc != 0) {
   1ad8a:	4603      	mov	r3, r0
   1ad8c:	b110      	cbz	r0, 1ad94 <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   1ad8e:	4618      	mov	r0, r3
   1ad90:	b003      	add	sp, #12
   1ad92:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   1ad94:	4628      	mov	r0, r5
   1ad96:	f7ff ff9d 	bl	1acd4 <os_dev_add>
    if (rc != 0) {
   1ad9a:	4603      	mov	r3, r0
   1ad9c:	2800      	cmp	r0, #0
   1ad9e:	d1f6      	bne.n	1ad8e <os_dev_create+0x16>
    if (g_os_started) {
   1ada0:	4a04      	ldr	r2, [pc, #16]	; (1adb4 <os_dev_create+0x3c>)
   1ada2:	6812      	ldr	r2, [r2, #0]
   1ada4:	2a00      	cmp	r2, #0
   1ada6:	d0f2      	beq.n	1ad8e <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
   1ada8:	4628      	mov	r0, r5
   1adaa:	f7ff ffc1 	bl	1ad30 <os_dev_initialize>
   1adae:	4603      	mov	r3, r0
    return (rc);
   1adb0:	e7ed      	b.n	1ad8e <os_dev_create+0x16>
   1adb2:	bf00      	nop
   1adb4:	2000de88 	.word	0x2000de88

0001adb8 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   1adb8:	b538      	push	{r3, r4, r5, lr}
   1adba:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1adbc:	4b08      	ldr	r3, [pc, #32]	; (1ade0 <os_dev_initialize_all+0x28>)
   1adbe:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   1adc0:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1adc2:	e000      	b.n	1adc6 <os_dev_initialize_all+0xe>
   1adc4:	6a24      	ldr	r4, [r4, #32]
   1adc6:	b144      	cbz	r4, 1adda <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   1adc8:	7e23      	ldrb	r3, [r4, #24]
   1adca:	42ab      	cmp	r3, r5
   1adcc:	d1fa      	bne.n	1adc4 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   1adce:	4620      	mov	r0, r4
   1add0:	f7ff ffae 	bl	1ad30 <os_dev_initialize>
            if (rc) {
   1add4:	4602      	mov	r2, r0
   1add6:	2800      	cmp	r0, #0
   1add8:	d0f4      	beq.n	1adc4 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   1adda:	4610      	mov	r0, r2
   1addc:	bd38      	pop	{r3, r4, r5, pc}
   1adde:	bf00      	nop
   1ade0:	20009070 	.word	0x20009070

0001ade4 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   1ade4:	b538      	push	{r3, r4, r5, lr}
   1ade6:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1ade8:	4b05      	ldr	r3, [pc, #20]	; (1ae00 <os_dev_lookup+0x1c>)
   1adea:	681c      	ldr	r4, [r3, #0]
   1adec:	b134      	cbz	r4, 1adfc <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   1adee:	4629      	mov	r1, r5
   1adf0:	69e0      	ldr	r0, [r4, #28]
   1adf2:	f001 f958 	bl	1c0a6 <strcmp>
   1adf6:	b108      	cbz	r0, 1adfc <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1adf8:	6a24      	ldr	r4, [r4, #32]
   1adfa:	e7f7      	b.n	1adec <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   1adfc:	4620      	mov	r0, r4
   1adfe:	bd38      	pop	{r3, r4, r5, pc}
   1ae00:	20009070 	.word	0x20009070

0001ae04 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   1ae04:	b570      	push	{r4, r5, r6, lr}
   1ae06:	460d      	mov	r5, r1
   1ae08:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   1ae0a:	f7ff ffeb 	bl	1ade4 <os_dev_lookup>
    if (dev == NULL) {
   1ae0e:	4604      	mov	r4, r0
   1ae10:	b1a0      	cbz	r0, 1ae3c <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   1ae12:	7ec3      	ldrb	r3, [r0, #27]
   1ae14:	f013 0f01 	tst.w	r3, #1
   1ae18:	d012      	beq.n	1ae40 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   1ae1a:	6803      	ldr	r3, [r0, #0]
   1ae1c:	b11b      	cbz	r3, 1ae26 <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   1ae1e:	4632      	mov	r2, r6
   1ae20:	4629      	mov	r1, r5
   1ae22:	4798      	blx	r3
        if (rc != 0) {
   1ae24:	b970      	cbnz	r0, 1ae44 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1ae26:	f000 ffb5 	bl	1bd94 <os_arch_save_sr>
    ++dev->od_open_ref;
   1ae2a:	7ea3      	ldrb	r3, [r4, #26]
   1ae2c:	3301      	adds	r3, #1
   1ae2e:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   1ae30:	7ee3      	ldrb	r3, [r4, #27]
   1ae32:	f043 0302 	orr.w	r3, r3, #2
   1ae36:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   1ae38:	f000 ffb2 	bl	1bda0 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   1ae3c:	4620      	mov	r0, r4
   1ae3e:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   1ae40:	2400      	movs	r4, #0
   1ae42:	e7fb      	b.n	1ae3c <os_dev_open+0x38>
    return (NULL);
   1ae44:	2400      	movs	r4, #0
   1ae46:	e7f9      	b.n	1ae3c <os_dev_open+0x38>

0001ae48 <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
   1ae48:	b1b0      	cbz	r0, 1ae78 <os_dev_close+0x30>
{
   1ae4a:	b510      	push	{r4, lr}
   1ae4c:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
   1ae4e:	68c3      	ldr	r3, [r0, #12]
   1ae50:	b113      	cbz	r3, 1ae58 <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
   1ae52:	4798      	blx	r3
        if (rc != 0) {
   1ae54:	4603      	mov	r3, r0
   1ae56:	b968      	cbnz	r0, 1ae74 <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1ae58:	f000 ff9c 	bl	1bd94 <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
   1ae5c:	7ea3      	ldrb	r3, [r4, #26]
   1ae5e:	3b01      	subs	r3, #1
   1ae60:	b2db      	uxtb	r3, r3
   1ae62:	76a3      	strb	r3, [r4, #26]
   1ae64:	b91b      	cbnz	r3, 1ae6e <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
   1ae66:	7ee3      	ldrb	r3, [r4, #27]
   1ae68:	f023 0306 	bic.w	r3, r3, #6
   1ae6c:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
   1ae6e:	f000 ff97 	bl	1bda0 <os_arch_restore_sr>

    return (0);
   1ae72:	2300      	movs	r3, #0
err:
    return (rc);
}
   1ae74:	4618      	mov	r0, r3
   1ae76:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
   1ae78:	2302      	movs	r3, #2
}
   1ae7a:	4618      	mov	r0, r3
   1ae7c:	4770      	bx	lr
	...

0001ae80 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   1ae80:	4b02      	ldr	r3, [pc, #8]	; (1ae8c <os_dev_reset+0xc>)
   1ae82:	2200      	movs	r2, #0
   1ae84:	601a      	str	r2, [r3, #0]
   1ae86:	605b      	str	r3, [r3, #4]
}
   1ae88:	4770      	bx	lr
   1ae8a:	bf00      	nop
   1ae8c:	20009070 	.word	0x20009070

0001ae90 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   1ae90:	2200      	movs	r2, #0
   1ae92:	6002      	str	r2, [r0, #0]
   1ae94:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   1ae96:	4603      	mov	r3, r0
   1ae98:	f843 2f08 	str.w	r2, [r3, #8]!
   1ae9c:	60c3      	str	r3, [r0, #12]
}
   1ae9e:	4770      	bx	lr

0001aea0 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   1aea0:	68c0      	ldr	r0, [r0, #12]
}
   1aea2:	3000      	adds	r0, #0
   1aea4:	bf18      	it	ne
   1aea6:	2001      	movne	r0, #1
   1aea8:	4770      	bx	lr

0001aeaa <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   1aeaa:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   1aeac:	b1f0      	cbz	r0, 1aeec <os_eventq_put+0x42>
   1aeae:	460c      	mov	r4, r1
   1aeb0:	4605      	mov	r5, r0
   1aeb2:	f7ff fff5 	bl	1aea0 <os_eventq_inited>
   1aeb6:	b1c8      	cbz	r0, 1aeec <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1aeb8:	f000 ff6c 	bl	1bd94 <os_arch_save_sr>
   1aebc:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   1aebe:	7823      	ldrb	r3, [r4, #0]
   1aec0:	b9d3      	cbnz	r3, 1aef8 <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   1aec2:	2301      	movs	r3, #1
   1aec4:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   1aec6:	2300      	movs	r3, #0
   1aec8:	60e3      	str	r3, [r4, #12]
   1aeca:	68eb      	ldr	r3, [r5, #12]
   1aecc:	601c      	str	r4, [r3, #0]
   1aece:	340c      	adds	r4, #12
   1aed0:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
   1aed2:	6868      	ldr	r0, [r5, #4]
   1aed4:	b1b8      	cbz	r0, 1af06 <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   1aed6:	7b03      	ldrb	r3, [r0, #12]
   1aed8:	2b02      	cmp	r3, #2
   1aeda:	d010      	beq.n	1aefe <os_eventq_put+0x54>
    resched = 0;
   1aedc:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   1aede:	2300      	movs	r3, #0
   1aee0:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   1aee2:	4630      	mov	r0, r6
   1aee4:	f000 ff5c 	bl	1bda0 <os_arch_restore_sr>

    if (resched) {
   1aee8:	b97c      	cbnz	r4, 1af0a <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   1aeea:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   1aeec:	2300      	movs	r3, #0
   1aeee:	461a      	mov	r2, r3
   1aef0:	4619      	mov	r1, r3
   1aef2:	4618      	mov	r0, r3
   1aef4:	f7ff fcb8 	bl	1a868 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   1aef8:	f000 ff52 	bl	1bda0 <os_arch_restore_sr>
   1aefc:	e7f5      	b.n	1aeea <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   1aefe:	f000 fcc7 	bl	1b890 <os_sched_wakeup>
            resched = 1;
   1af02:	2401      	movs	r4, #1
   1af04:	e7eb      	b.n	1aede <os_eventq_put+0x34>
    resched = 0;
   1af06:	2400      	movs	r4, #0
   1af08:	e7eb      	b.n	1aee2 <os_eventq_put+0x38>
        os_sched(NULL);
   1af0a:	2000      	movs	r0, #0
   1af0c:	f000 fd40 	bl	1b990 <os_sched>
   1af10:	e7eb      	b.n	1aeea <os_eventq_put+0x40>

0001af12 <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   1af12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1af14:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   1af16:	f000 fc67 	bl	1b7e8 <os_sched_get_current_task>
   1af1a:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   1af1c:	682b      	ldr	r3, [r5, #0]
   1af1e:	4283      	cmp	r3, r0
   1af20:	d001      	beq.n	1af26 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   1af22:	b9db      	cbnz	r3, 1af5c <os_eventq_get+0x4a>
            evq->evq_owner = t;
   1af24:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   1af26:	f000 ff35 	bl	1bd94 <os_arch_save_sr>
   1af2a:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   1af2c:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
   1af2e:	b9de      	cbnz	r6, 1af68 <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   1af30:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   1af32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1af36:	4620      	mov	r0, r4
   1af38:	f000 fc62 	bl	1b800 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   1af3c:	7b63      	ldrb	r3, [r4, #13]
   1af3e:	f043 0308 	orr.w	r3, r3, #8
   1af42:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   1af44:	4638      	mov	r0, r7
   1af46:	f000 ff2b 	bl	1bda0 <os_arch_restore_sr>

        os_sched(NULL);
   1af4a:	2000      	movs	r0, #0
   1af4c:	f000 fd20 	bl	1b990 <os_sched>

        OS_ENTER_CRITICAL(sr);
   1af50:	f000 ff20 	bl	1bd94 <os_arch_save_sr>
   1af54:	4607      	mov	r7, r0
        evq->evq_task = NULL;
   1af56:	2300      	movs	r3, #0
   1af58:	606b      	str	r3, [r5, #4]
        goto pull_one;
   1af5a:	e7e7      	b.n	1af2c <os_eventq_get+0x1a>
            assert(0);
   1af5c:	2300      	movs	r3, #0
   1af5e:	461a      	mov	r2, r3
   1af60:	4619      	mov	r1, r3
   1af62:	4618      	mov	r0, r3
   1af64:	f7ff fc80 	bl	1a868 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1af68:	68f3      	ldr	r3, [r6, #12]
   1af6a:	60ab      	str	r3, [r5, #8]
   1af6c:	b153      	cbz	r3, 1af84 <os_eventq_get+0x72>
        ev->ev_queued = 0;
   1af6e:	2300      	movs	r3, #0
   1af70:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   1af72:	7b63      	ldrb	r3, [r4, #13]
   1af74:	f023 0308 	bic.w	r3, r3, #8
   1af78:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   1af7a:	4638      	mov	r0, r7
   1af7c:	f000 ff10 	bl	1bda0 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   1af80:	4630      	mov	r0, r6
   1af82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1af84:	f105 0308 	add.w	r3, r5, #8
   1af88:	60eb      	str	r3, [r5, #12]
   1af8a:	e7f0      	b.n	1af6e <os_eventq_get+0x5c>

0001af8c <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   1af8c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   1af8e:	f7ff ffc0 	bl	1af12 <os_eventq_get>
    assert(ev->ev_cb != NULL);
   1af92:	6843      	ldr	r3, [r0, #4]
   1af94:	b10b      	cbz	r3, 1af9a <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   1af96:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   1af98:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   1af9a:	461a      	mov	r2, r3
   1af9c:	4619      	mov	r1, r3
   1af9e:	4618      	mov	r0, r3
   1afa0:	f7ff fc62 	bl	1a868 <__assert_func>

0001afa4 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   1afa4:	b538      	push	{r3, r4, r5, lr}
   1afa6:	4605      	mov	r5, r0
   1afa8:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1afaa:	f000 fef3 	bl	1bd94 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   1afae:	7823      	ldrb	r3, [r4, #0]
   1afb0:	b183      	cbz	r3, 1afd4 <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1afb2:	68aa      	ldr	r2, [r5, #8]
   1afb4:	42a2      	cmp	r2, r4
   1afb6:	d107      	bne.n	1afc8 <os_eventq_remove+0x24>
   1afb8:	68d3      	ldr	r3, [r2, #12]
   1afba:	60ab      	str	r3, [r5, #8]
   1afbc:	b953      	cbnz	r3, 1afd4 <os_eventq_remove+0x30>
   1afbe:	f105 0308 	add.w	r3, r5, #8
   1afc2:	60eb      	str	r3, [r5, #12]
   1afc4:	e006      	b.n	1afd4 <os_eventq_remove+0x30>
   1afc6:	461a      	mov	r2, r3
   1afc8:	68d3      	ldr	r3, [r2, #12]
   1afca:	42a3      	cmp	r3, r4
   1afcc:	d1fb      	bne.n	1afc6 <os_eventq_remove+0x22>
   1afce:	68db      	ldr	r3, [r3, #12]
   1afd0:	60d3      	str	r3, [r2, #12]
   1afd2:	b123      	cbz	r3, 1afde <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
   1afd4:	2300      	movs	r3, #0
   1afd6:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   1afd8:	f000 fee2 	bl	1bda0 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   1afdc:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1afde:	320c      	adds	r2, #12
   1afe0:	60ea      	str	r2, [r5, #12]
   1afe2:	e7f7      	b.n	1afd4 <os_eventq_remove+0x30>

0001afe4 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   1afe4:	4800      	ldr	r0, [pc, #0]	; (1afe8 <os_eventq_dflt_get+0x4>)
   1afe6:	4770      	bx	lr
   1afe8:	20009078 	.word	0x20009078

0001afec <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   1afec:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   1afee:	2000      	movs	r0, #0
   1aff0:	6018      	str	r0, [r3, #0]
   1aff2:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   1aff4:	6098      	str	r0, [r3, #8]
   1aff6:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   1aff8:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   1affa:	611a      	str	r2, [r3, #16]

    return (0);
}
   1affc:	4770      	bx	lr

0001affe <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   1affe:	b538      	push	{r3, r4, r5, lr}
   1b000:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1b002:	f000 fec7 	bl	1bd94 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   1b006:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   1b008:	b114      	cbz	r4, 1b010 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1b00a:	6863      	ldr	r3, [r4, #4]
   1b00c:	602b      	str	r3, [r5, #0]
   1b00e:	b12b      	cbz	r3, 1b01c <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   1b010:	f000 fec6 	bl	1bda0 <os_arch_restore_sr>

    if (mp) {
   1b014:	b124      	cbz	r4, 1b020 <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   1b016:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   1b01a:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1b01c:	606d      	str	r5, [r5, #4]
   1b01e:	e7f7      	b.n	1b010 <os_mqueue_get+0x12>
        m = NULL;
   1b020:	2000      	movs	r0, #0
    return (m);
   1b022:	e7fa      	b.n	1b01a <os_mqueue_get+0x1c>

0001b024 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   1b024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   1b026:	7953      	ldrb	r3, [r2, #5]
   1b028:	2b07      	cmp	r3, #7
   1b02a:	d916      	bls.n	1b05a <os_mqueue_put+0x36>
   1b02c:	4614      	mov	r4, r2
   1b02e:	460e      	mov	r6, r1
   1b030:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   1b032:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   1b036:	f000 fead 	bl	1bd94 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   1b03a:	2300      	movs	r3, #0
   1b03c:	f844 3f14 	str.w	r3, [r4, #20]!
   1b040:	686b      	ldr	r3, [r5, #4]
   1b042:	601f      	str	r7, [r3, #0]
   1b044:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   1b046:	f000 feab 	bl	1bda0 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   1b04a:	b146      	cbz	r6, 1b05e <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   1b04c:	f105 0108 	add.w	r1, r5, #8
   1b050:	4630      	mov	r0, r6
   1b052:	f7ff ff2a 	bl	1aeaa <os_eventq_put>
    }

    return (0);
   1b056:	2000      	movs	r0, #0
   1b058:	e000      	b.n	1b05c <os_mqueue_put+0x38>
err:
    return (rc);
   1b05a:	2002      	movs	r0, #2
}
   1b05c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   1b05e:	2000      	movs	r0, #0
   1b060:	e7fc      	b.n	1b05c <os_mqueue_put+0x38>

0001b062 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   1b062:	3a10      	subs	r2, #16
   1b064:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   1b066:	6041      	str	r1, [r0, #4]

    return (0);
}
   1b068:	2000      	movs	r0, #0
   1b06a:	4770      	bx	lr

0001b06c <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   1b06c:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   1b06e:	8803      	ldrh	r3, [r0, #0]
   1b070:	428b      	cmp	r3, r1
   1b072:	d312      	bcc.n	1b09a <os_mbuf_get+0x2e>
   1b074:	460d      	mov	r5, r1
   1b076:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   1b078:	6840      	ldr	r0, [r0, #4]
   1b07a:	f000 f947 	bl	1b30c <os_memblock_get>
    if (!om) {
   1b07e:	4603      	mov	r3, r0
   1b080:	b148      	cbz	r0, 1b096 <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   1b082:	2200      	movs	r2, #0
   1b084:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
   1b086:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
   1b088:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
   1b08a:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   1b08c:	f100 0110 	add.w	r1, r0, #16
   1b090:	4429      	add	r1, r5
   1b092:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
   1b094:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   1b096:	4618      	mov	r0, r3
   1b098:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1b09a:	2300      	movs	r3, #0
    return om;
   1b09c:	e7fb      	b.n	1b096 <os_mbuf_get+0x2a>

0001b09e <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   1b09e:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   1b0a0:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   1b0a4:	8803      	ldrh	r3, [r0, #0]
   1b0a6:	42ab      	cmp	r3, r5
   1b0a8:	d310      	bcc.n	1b0cc <os_mbuf_get_pkthdr+0x2e>
   1b0aa:	2dff      	cmp	r5, #255	; 0xff
   1b0ac:	d810      	bhi.n	1b0d0 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   1b0ae:	2100      	movs	r1, #0
   1b0b0:	f7ff ffdc 	bl	1b06c <os_mbuf_get>
    if (om) {
   1b0b4:	4603      	mov	r3, r0
   1b0b6:	b138      	cbz	r0, 1b0c8 <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
   1b0b8:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
   1b0ba:	6802      	ldr	r2, [r0, #0]
   1b0bc:	4415      	add	r5, r2
   1b0be:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   1b0c0:	2200      	movs	r2, #0
   1b0c2:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
   1b0c4:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   1b0c6:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   1b0c8:	4618      	mov	r0, r3
   1b0ca:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1b0cc:	2300      	movs	r3, #0
   1b0ce:	e7fb      	b.n	1b0c8 <os_mbuf_get_pkthdr+0x2a>
   1b0d0:	2300      	movs	r3, #0
    return om;
   1b0d2:	e7f9      	b.n	1b0c8 <os_mbuf_get_pkthdr+0x2a>

0001b0d4 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   1b0d4:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   1b0d6:	6883      	ldr	r3, [r0, #8]
   1b0d8:	b123      	cbz	r3, 1b0e4 <os_mbuf_free+0x10>
   1b0da:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   1b0dc:	6858      	ldr	r0, [r3, #4]
   1b0de:	f000 f93d 	bl	1b35c <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   1b0e2:	bd08      	pop	{r3, pc}
    rc = 0;
   1b0e4:	2000      	movs	r0, #0
    return (rc);
   1b0e6:	e7fc      	b.n	1b0e2 <os_mbuf_free+0xe>

0001b0e8 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
   1b0e8:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   1b0ea:	b160      	cbz	r0, 1b106 <os_mbuf_free_chain+0x1e>
{
   1b0ec:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   1b0ee:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
   1b0f0:	4618      	mov	r0, r3
   1b0f2:	f7ff ffef 	bl	1b0d4 <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
   1b0f6:	4623      	mov	r3, r4
        if (rc != 0) {
   1b0f8:	4602      	mov	r2, r0
   1b0fa:	b910      	cbnz	r0, 1b102 <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
   1b0fc:	2c00      	cmp	r4, #0
   1b0fe:	d1f6      	bne.n	1b0ee <os_mbuf_free_chain+0x6>
    }

    rc = 0;
   1b100:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   1b102:	4610      	mov	r0, r2
   1b104:	bd10      	pop	{r4, pc}
    rc = 0;
   1b106:	2200      	movs	r2, #0
}
   1b108:	4610      	mov	r0, r2
   1b10a:	4770      	bx	lr

0001b10c <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
   1b10c:	2300      	movs	r3, #0
    while (om != NULL) {
   1b10e:	e003      	b.n	1b118 <os_mbuf_len+0xc>
        len += om->om_len;
   1b110:	88c2      	ldrh	r2, [r0, #6]
   1b112:	4413      	add	r3, r2
   1b114:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
   1b116:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
   1b118:	2800      	cmp	r0, #0
   1b11a:	d1f9      	bne.n	1b110 <os_mbuf_len+0x4>
    }

    return len;
}
   1b11c:	4618      	mov	r0, r3
   1b11e:	4770      	bx	lr

0001b120 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   1b120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   1b124:	2800      	cmp	r0, #0
   1b126:	d04d      	beq.n	1b1c4 <os_mbuf_append+0xa4>
   1b128:	460f      	mov	r7, r1
   1b12a:	4691      	mov	r9, r2
   1b12c:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   1b12e:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   1b132:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   1b134:	e000      	b.n	1b138 <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
   1b136:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   1b138:	68eb      	ldr	r3, [r5, #12]
   1b13a:	2b00      	cmp	r3, #0
   1b13c:	d1fb      	bne.n	1b136 <os_mbuf_append+0x16>
    }

    remainder = len;
   1b13e:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   1b140:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1b142:	f105 0410 	add.w	r4, r5, #16
   1b146:	881b      	ldrh	r3, [r3, #0]
   1b148:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   1b14a:	6828      	ldr	r0, [r5, #0]
   1b14c:	88eb      	ldrh	r3, [r5, #6]
   1b14e:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1b150:	1a24      	subs	r4, r4, r0
   1b152:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   1b154:	b164      	cbz	r4, 1b170 <os_mbuf_append+0x50>
        if (space > remainder) {
   1b156:	454c      	cmp	r4, r9
   1b158:	dd00      	ble.n	1b15c <os_mbuf_append+0x3c>
            space = remainder;
   1b15a:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   1b15c:	4622      	mov	r2, r4
   1b15e:	4639      	mov	r1, r7
   1b160:	f000 ff78 	bl	1c054 <memcpy>

        last->om_len += space;
   1b164:	88eb      	ldrh	r3, [r5, #6]
   1b166:	4423      	add	r3, r4
   1b168:	80eb      	strh	r3, [r5, #6]
        data += space;
   1b16a:	4427      	add	r7, r4
        remainder -= space;
   1b16c:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   1b170:	2e00      	cmp	r6, #0
   1b172:	dd16      	ble.n	1b1a2 <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
   1b174:	2100      	movs	r1, #0
   1b176:	4640      	mov	r0, r8
   1b178:	f7ff ff78 	bl	1b06c <os_mbuf_get>
        if (!new) {
   1b17c:	4604      	mov	r4, r0
   1b17e:	b180      	cbz	r0, 1b1a2 <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   1b180:	f8b8 2000 	ldrh.w	r2, [r8]
   1b184:	42b2      	cmp	r2, r6
   1b186:	bfa8      	it	ge
   1b188:	4632      	movge	r2, r6
   1b18a:	b292      	uxth	r2, r2
   1b18c:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   1b18e:	4639      	mov	r1, r7
   1b190:	6800      	ldr	r0, [r0, #0]
   1b192:	f000 ff5f 	bl	1c054 <memcpy>
        data += new->om_len;
   1b196:	88e3      	ldrh	r3, [r4, #6]
   1b198:	441f      	add	r7, r3
        remainder -= new->om_len;
   1b19a:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
   1b19c:	60ec      	str	r4, [r5, #12]
        last = new;
   1b19e:	4625      	mov	r5, r4
   1b1a0:	e7e6      	b.n	1b170 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   1b1a2:	f89a 3005 	ldrb.w	r3, [sl, #5]
   1b1a6:	2b07      	cmp	r3, #7
   1b1a8:	d907      	bls.n	1b1ba <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   1b1aa:	eba9 0906 	sub.w	r9, r9, r6
   1b1ae:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   1b1b2:	fa13 f989 	uxtah	r9, r3, r9
   1b1b6:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   1b1ba:	b106      	cbz	r6, 1b1be <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
   1b1bc:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
   1b1be:	4630      	mov	r0, r6
   1b1c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   1b1c4:	2602      	movs	r6, #2
   1b1c6:	e7fa      	b.n	1b1be <os_mbuf_append+0x9e>

0001b1c8 <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
   1b1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b1cc:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
   1b1ce:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
   1b1d2:	2700      	movs	r7, #0
    head = NULL;
   1b1d4:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1b1d6:	e017      	b.n	1b208 <os_mbuf_dup+0x40>
    startoff = 0;
   1b1d8:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1b1da:	4623      	mov	r3, r4
   1b1dc:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1b1e0:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1b1e2:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
   1b1e4:	b299      	uxth	r1, r3
   1b1e6:	4640      	mov	r0, r8
   1b1e8:	f7ff ff40 	bl	1b06c <os_mbuf_get>
   1b1ec:	4605      	mov	r5, r0
   1b1ee:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
   1b1f0:	b188      	cbz	r0, 1b216 <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
   1b1f2:	7923      	ldrb	r3, [r4, #4]
   1b1f4:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
   1b1f6:	88e3      	ldrh	r3, [r4, #6]
   1b1f8:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
   1b1fa:	88e2      	ldrh	r2, [r4, #6]
   1b1fc:	6821      	ldr	r1, [r4, #0]
   1b1fe:	6828      	ldr	r0, [r5, #0]
   1b200:	f000 ff28 	bl	1c054 <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1b204:	68e4      	ldr	r4, [r4, #12]
   1b206:	462f      	mov	r7, r5
   1b208:	b14c      	cbz	r4, 1b21e <os_mbuf_dup+0x56>
        if (head) {
   1b20a:	b15e      	cbz	r6, 1b224 <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   1b20c:	7963      	ldrb	r3, [r4, #5]
   1b20e:	2b07      	cmp	r3, #7
   1b210:	d9e2      	bls.n	1b1d8 <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
   1b212:	b299      	uxth	r1, r3
   1b214:	e7e1      	b.n	1b1da <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
   1b216:	4630      	mov	r0, r6
   1b218:	f7ff ff66 	bl	1b0e8 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
   1b21c:	462e      	mov	r6, r5
}
   1b21e:	4630      	mov	r0, r6
   1b220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   1b224:	7963      	ldrb	r3, [r4, #5]
   1b226:	2b07      	cmp	r3, #7
   1b228:	d911      	bls.n	1b24e <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
   1b22a:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1b22c:	4623      	mov	r3, r4
   1b22e:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1b232:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1b234:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
   1b236:	b299      	uxth	r1, r3
   1b238:	4640      	mov	r0, r8
   1b23a:	f7ff ff17 	bl	1b06c <os_mbuf_get>
            if (!head) {
   1b23e:	4606      	mov	r6, r0
   1b240:	2800      	cmp	r0, #0
   1b242:	d0ec      	beq.n	1b21e <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
   1b244:	7963      	ldrb	r3, [r4, #5]
   1b246:	2b07      	cmp	r3, #7
   1b248:	d803      	bhi.n	1b252 <os_mbuf_dup+0x8a>
            copy = head;
   1b24a:	4605      	mov	r5, r0
   1b24c:	e7d1      	b.n	1b1f2 <os_mbuf_dup+0x2a>
    startoff = 0;
   1b24e:	2100      	movs	r1, #0
   1b250:	e7ec      	b.n	1b22c <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
   1b252:	88c3      	ldrh	r3, [r0, #6]
   1b254:	b973      	cbnz	r3, 1b274 <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   1b256:	f100 0510 	add.w	r5, r0, #16
   1b25a:	7962      	ldrb	r2, [r4, #5]
   1b25c:	f104 0110 	add.w	r1, r4, #16
   1b260:	4628      	mov	r0, r5
   1b262:	f000 fef7 	bl	1c054 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   1b266:	7963      	ldrb	r3, [r4, #5]
   1b268:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   1b26a:	7963      	ldrb	r3, [r4, #5]
   1b26c:	441d      	add	r5, r3
   1b26e:	6035      	str	r5, [r6, #0]
            copy = head;
   1b270:	4635      	mov	r5, r6
   1b272:	e7be      	b.n	1b1f2 <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
   1b274:	2300      	movs	r3, #0
   1b276:	461a      	mov	r2, r3
   1b278:	4619      	mov	r1, r3
   1b27a:	4618      	mov	r0, r3
   1b27c:	f7ff faf4 	bl	1a868 <__assert_func>

0001b280 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   1b280:	2800      	cmp	r0, #0
   1b282:	d031      	beq.n	1b2e8 <os_mempool_init_internal+0x68>
{
   1b284:	b430      	push	{r4, r5}
   1b286:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   1b288:	2a00      	cmp	r2, #0
   1b28a:	d02f      	beq.n	1b2ec <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   1b28c:	b1bb      	cbz	r3, 1b2be <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   1b28e:	b113      	cbz	r3, 1b296 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   1b290:	f013 0f03 	tst.w	r3, #3
   1b294:	d12c      	bne.n	1b2f0 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   1b296:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   1b298:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   1b29a:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   1b29c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1b2a0:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   1b2a2:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   1b2a4:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   1b2a6:	9802      	ldr	r0, [sp, #8]
   1b2a8:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   1b2aa:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   1b2ac:	b199      	cbz	r1, 1b2d6 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   1b2ae:	f012 0f03 	tst.w	r2, #3
   1b2b2:	d002      	beq.n	1b2ba <os_mempool_init_internal+0x3a>
   1b2b4:	f022 0203 	bic.w	r2, r2, #3
   1b2b8:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   1b2ba:	2001      	movs	r0, #1
   1b2bc:	e007      	b.n	1b2ce <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   1b2be:	2900      	cmp	r1, #0
   1b2c0:	d0e5      	beq.n	1b28e <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   1b2c2:	2003      	movs	r0, #3
   1b2c4:	e00e      	b.n	1b2e4 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   1b2c6:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   1b2c8:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   1b2ca:	3001      	adds	r0, #1
            block_addr += true_block_size;
   1b2cc:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   1b2ce:	4281      	cmp	r1, r0
   1b2d0:	dcf9      	bgt.n	1b2c6 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   1b2d2:	2200      	movs	r2, #0
   1b2d4:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   1b2d6:	2000      	movs	r0, #0
   1b2d8:	6120      	str	r0, [r4, #16]
   1b2da:	4b06      	ldr	r3, [pc, #24]	; (1b2f4 <os_mempool_init_internal+0x74>)
   1b2dc:	685a      	ldr	r2, [r3, #4]
   1b2de:	6014      	str	r4, [r2, #0]
   1b2e0:	3410      	adds	r4, #16
   1b2e2:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   1b2e4:	bc30      	pop	{r4, r5}
   1b2e6:	4770      	bx	lr
        return OS_INVALID_PARM;
   1b2e8:	2003      	movs	r0, #3
}
   1b2ea:	4770      	bx	lr
        return OS_INVALID_PARM;
   1b2ec:	2003      	movs	r0, #3
   1b2ee:	e7f9      	b.n	1b2e4 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   1b2f0:	2004      	movs	r0, #4
   1b2f2:	e7f7      	b.n	1b2e4 <os_mempool_init_internal+0x64>
   1b2f4:	2000de98 	.word	0x2000de98

0001b2f8 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   1b2f8:	b510      	push	{r4, lr}
   1b2fa:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   1b2fc:	2400      	movs	r4, #0
   1b2fe:	9401      	str	r4, [sp, #4]
   1b300:	9c04      	ldr	r4, [sp, #16]
   1b302:	9400      	str	r4, [sp, #0]
   1b304:	f7ff ffbc 	bl	1b280 <os_mempool_init_internal>
}
   1b308:	b002      	add	sp, #8
   1b30a:	bd10      	pop	{r4, pc}

0001b30c <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   1b30c:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   1b30e:	b1a0      	cbz	r0, 1b33a <os_memblock_get+0x2e>
   1b310:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1b312:	f000 fd3f 	bl	1bd94 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   1b316:	88e3      	ldrh	r3, [r4, #6]
   1b318:	b153      	cbz	r3, 1b330 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   1b31a:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   1b31c:	682a      	ldr	r2, [r5, #0]
   1b31e:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   1b320:	3b01      	subs	r3, #1
   1b322:	b29b      	uxth	r3, r3
   1b324:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   1b326:	8922      	ldrh	r2, [r4, #8]
   1b328:	4293      	cmp	r3, r2
   1b32a:	d202      	bcs.n	1b332 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   1b32c:	8123      	strh	r3, [r4, #8]
   1b32e:	e000      	b.n	1b332 <os_memblock_get+0x26>
    block = NULL;
   1b330:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   1b332:	f000 fd35 	bl	1bda0 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   1b336:	4628      	mov	r0, r5
   1b338:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   1b33a:	2500      	movs	r5, #0
    return (void *)block;
   1b33c:	e7fb      	b.n	1b336 <os_memblock_get+0x2a>

0001b33e <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   1b33e:	b538      	push	{r3, r4, r5, lr}
   1b340:	4604      	mov	r4, r0
   1b342:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   1b344:	f000 fd26 	bl	1bd94 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   1b348:	6963      	ldr	r3, [r4, #20]
   1b34a:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   1b34c:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   1b34e:	88e3      	ldrh	r3, [r4, #6]
   1b350:	3301      	adds	r3, #1
   1b352:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   1b354:	f000 fd24 	bl	1bda0 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   1b358:	2000      	movs	r0, #0
   1b35a:	bd38      	pop	{r3, r4, r5, pc}

0001b35c <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   1b35c:	b168      	cbz	r0, 1b37a <os_memblock_put+0x1e>
{
   1b35e:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
   1b360:	b169      	cbz	r1, 1b37e <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   1b362:	7a83      	ldrb	r3, [r0, #10]
   1b364:	f013 0f01 	tst.w	r3, #1
   1b368:	d004      	beq.n	1b374 <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   1b36a:	69c3      	ldr	r3, [r0, #28]
   1b36c:	b113      	cbz	r3, 1b374 <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   1b36e:	6a02      	ldr	r2, [r0, #32]
   1b370:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   1b372:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
   1b374:	f7ff ffe3 	bl	1b33e <os_memblock_put_from_cb>
   1b378:	e7fb      	b.n	1b372 <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
   1b37a:	2003      	movs	r0, #3
}
   1b37c:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1b37e:	2003      	movs	r0, #3
   1b380:	e7f7      	b.n	1b372 <os_memblock_put+0x16>
	...

0001b384 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   1b384:	4b02      	ldr	r3, [pc, #8]	; (1b390 <os_mempool_module_init+0xc>)
   1b386:	2200      	movs	r2, #0
   1b388:	601a      	str	r2, [r3, #0]
   1b38a:	605b      	str	r3, [r3, #4]
}
   1b38c:	4770      	bx	lr
   1b38e:	bf00      	nop
   1b390:	2000de98 	.word	0x2000de98

0001b394 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1b394:	4b02      	ldr	r3, [pc, #8]	; (1b3a0 <os_msys_find_biggest_pool+0xc>)
   1b396:	6818      	ldr	r0, [r3, #0]
   1b398:	b108      	cbz	r0, 1b39e <os_msys_find_biggest_pool+0xa>
   1b39a:	6858      	ldr	r0, [r3, #4]
   1b39c:	3808      	subs	r0, #8
}
   1b39e:	4770      	bx	lr
   1b3a0:	2000010c 	.word	0x2000010c

0001b3a4 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1b3a4:	4b09      	ldr	r3, [pc, #36]	; (1b3cc <os_msys_find_pool+0x28>)
   1b3a6:	6819      	ldr	r1, [r3, #0]
   1b3a8:	460b      	mov	r3, r1
   1b3aa:	b123      	cbz	r3, 1b3b6 <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
   1b3ac:	881a      	ldrh	r2, [r3, #0]
   1b3ae:	4282      	cmp	r2, r0
   1b3b0:	d201      	bcs.n	1b3b6 <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1b3b2:	689b      	ldr	r3, [r3, #8]
   1b3b4:	e7f9      	b.n	1b3aa <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
   1b3b6:	b10b      	cbz	r3, 1b3bc <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   1b3b8:	4618      	mov	r0, r3
   1b3ba:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1b3bc:	b119      	cbz	r1, 1b3c6 <os_msys_find_pool+0x22>
   1b3be:	4b03      	ldr	r3, [pc, #12]	; (1b3cc <os_msys_find_pool+0x28>)
   1b3c0:	685b      	ldr	r3, [r3, #4]
   1b3c2:	3b08      	subs	r3, #8
   1b3c4:	e7f8      	b.n	1b3b8 <os_msys_find_pool+0x14>
   1b3c6:	460b      	mov	r3, r1
    return (pool);
   1b3c8:	e7f6      	b.n	1b3b8 <os_msys_find_pool+0x14>
   1b3ca:	bf00      	nop
   1b3cc:	2000010c 	.word	0x2000010c

0001b3d0 <os_msys_register>:
{
   1b3d0:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1b3d2:	4b11      	ldr	r3, [pc, #68]	; (1b418 <os_msys_register+0x48>)
   1b3d4:	681d      	ldr	r5, [r3, #0]
   1b3d6:	462b      	mov	r3, r5
    prev = NULL;
   1b3d8:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1b3da:	b133      	cbz	r3, 1b3ea <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   1b3dc:	8801      	ldrh	r1, [r0, #0]
   1b3de:	881a      	ldrh	r2, [r3, #0]
   1b3e0:	4291      	cmp	r1, r2
   1b3e2:	d302      	bcc.n	1b3ea <os_msys_register+0x1a>
        prev = pool;
   1b3e4:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1b3e6:	689b      	ldr	r3, [r3, #8]
   1b3e8:	e7f7      	b.n	1b3da <os_msys_register+0xa>
    if (prev) {
   1b3ea:	b15c      	cbz	r4, 1b404 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1b3ec:	68a3      	ldr	r3, [r4, #8]
   1b3ee:	6083      	str	r3, [r0, #8]
   1b3f0:	b11b      	cbz	r3, 1b3fa <os_msys_register+0x2a>
   1b3f2:	60a0      	str	r0, [r4, #8]
}
   1b3f4:	2000      	movs	r0, #0
   1b3f6:	bc30      	pop	{r4, r5}
   1b3f8:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1b3fa:	f100 0308 	add.w	r3, r0, #8
   1b3fe:	4a06      	ldr	r2, [pc, #24]	; (1b418 <os_msys_register+0x48>)
   1b400:	6053      	str	r3, [r2, #4]
   1b402:	e7f6      	b.n	1b3f2 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   1b404:	6085      	str	r5, [r0, #8]
   1b406:	b115      	cbz	r5, 1b40e <os_msys_register+0x3e>
   1b408:	4b03      	ldr	r3, [pc, #12]	; (1b418 <os_msys_register+0x48>)
   1b40a:	6018      	str	r0, [r3, #0]
   1b40c:	e7f2      	b.n	1b3f4 <os_msys_register+0x24>
   1b40e:	f100 0308 	add.w	r3, r0, #8
   1b412:	4a01      	ldr	r2, [pc, #4]	; (1b418 <os_msys_register+0x48>)
   1b414:	6053      	str	r3, [r2, #4]
   1b416:	e7f7      	b.n	1b408 <os_msys_register+0x38>
   1b418:	2000010c 	.word	0x2000010c

0001b41c <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   1b41c:	b530      	push	{r4, r5, lr}
   1b41e:	b083      	sub	sp, #12
   1b420:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   1b422:	9d07      	ldr	r5, [sp, #28]
   1b424:	9501      	str	r5, [sp, #4]
   1b426:	9d06      	ldr	r5, [sp, #24]
   1b428:	9500      	str	r5, [sp, #0]
   1b42a:	f001 f96d 	bl	1c708 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1b42e:	b138      	cbz	r0, 1b440 <os_msys_init_once+0x24>
   1b430:	2000      	movs	r0, #0
   1b432:	9000      	str	r0, [sp, #0]
   1b434:	4b09      	ldr	r3, [pc, #36]	; (1b45c <os_msys_init_once+0x40>)
   1b436:	681d      	ldr	r5, [r3, #0]
   1b438:	4603      	mov	r3, r0
   1b43a:	4602      	mov	r2, r0
   1b43c:	4601      	mov	r1, r0
   1b43e:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
   1b440:	4620      	mov	r0, r4
   1b442:	f7ff ffc5 	bl	1b3d0 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1b446:	b138      	cbz	r0, 1b458 <os_msys_init_once+0x3c>
   1b448:	2000      	movs	r0, #0
   1b44a:	9000      	str	r0, [sp, #0]
   1b44c:	4b03      	ldr	r3, [pc, #12]	; (1b45c <os_msys_init_once+0x40>)
   1b44e:	681c      	ldr	r4, [r3, #0]
   1b450:	4603      	mov	r3, r0
   1b452:	4602      	mov	r2, r0
   1b454:	4601      	mov	r1, r0
   1b456:	47a0      	blx	r4
}
   1b458:	b003      	add	sp, #12
   1b45a:	bd30      	pop	{r4, r5, pc}
   1b45c:	20000104 	.word	0x20000104

0001b460 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   1b460:	4b02      	ldr	r3, [pc, #8]	; (1b46c <os_msys_reset+0xc>)
   1b462:	2200      	movs	r2, #0
   1b464:	601a      	str	r2, [r3, #0]
   1b466:	605b      	str	r3, [r3, #4]
}
   1b468:	4770      	bx	lr
   1b46a:	bf00      	nop
   1b46c:	2000010c 	.word	0x2000010c

0001b470 <os_msys_get_pkthdr>:
{
   1b470:	b510      	push	{r4, lr}
   1b472:	460c      	mov	r4, r1
    if (dsize == 0) {
   1b474:	b930      	cbnz	r0, 1b484 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   1b476:	f7ff ff8d 	bl	1b394 <os_msys_find_biggest_pool>
    if (!pool) {
   1b47a:	b158      	cbz	r0, 1b494 <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   1b47c:	b2e1      	uxtb	r1, r4
   1b47e:	f7ff fe0e 	bl	1b09e <os_mbuf_get_pkthdr>
}
   1b482:	bd10      	pop	{r4, pc}
   1b484:	f101 0308 	add.w	r3, r1, #8
   1b488:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   1b48a:	4403      	add	r3, r0
   1b48c:	b298      	uxth	r0, r3
   1b48e:	f7ff ff89 	bl	1b3a4 <os_msys_find_pool>
   1b492:	e7f2      	b.n	1b47a <os_msys_get_pkthdr+0xa>
    return (NULL);
   1b494:	2000      	movs	r0, #0
   1b496:	e7f4      	b.n	1b482 <os_msys_get_pkthdr+0x12>

0001b498 <os_msys_init>:

void
os_msys_init(void)
{
   1b498:	b500      	push	{lr}
   1b49a:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   1b49c:	f7ff ffe0 	bl	1b460 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   1b4a0:	4b06      	ldr	r3, [pc, #24]	; (1b4bc <os_msys_init+0x24>)
   1b4a2:	9301      	str	r3, [sp, #4]
   1b4a4:	f44f 7392 	mov.w	r3, #292	; 0x124
   1b4a8:	9300      	str	r3, [sp, #0]
   1b4aa:	2340      	movs	r3, #64	; 0x40
   1b4ac:	4a04      	ldr	r2, [pc, #16]	; (1b4c0 <os_msys_init+0x28>)
   1b4ae:	4905      	ldr	r1, [pc, #20]	; (1b4c4 <os_msys_init+0x2c>)
   1b4b0:	4805      	ldr	r0, [pc, #20]	; (1b4c8 <os_msys_init+0x30>)
   1b4b2:	f7ff ffb3 	bl	1b41c <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   1b4b6:	b003      	add	sp, #12
   1b4b8:	f85d fb04 	ldr.w	pc, [sp], #4
   1b4bc:	000222f4 	.word	0x000222f4
   1b4c0:	2000d988 	.word	0x2000d988
   1b4c4:	2000d994 	.word	0x2000d994
   1b4c8:	20009088 	.word	0x20009088

0001b4cc <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   1b4cc:	4603      	mov	r3, r0
   1b4ce:	b128      	cbz	r0, 1b4dc <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   1b4d0:	2000      	movs	r0, #0
   1b4d2:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   1b4d4:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   1b4d6:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   1b4d8:	6018      	str	r0, [r3, #0]
   1b4da:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1b4dc:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   1b4de:	4770      	bx	lr

0001b4e0 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   1b4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   1b4e2:	4b2c      	ldr	r3, [pc, #176]	; (1b594 <os_mutex_release+0xb4>)
   1b4e4:	681b      	ldr	r3, [r3, #0]
   1b4e6:	2b00      	cmp	r3, #0
   1b4e8:	d04d      	beq.n	1b586 <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1b4ea:	2800      	cmp	r0, #0
   1b4ec:	d04d      	beq.n	1b58a <os_mutex_release+0xaa>
   1b4ee:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   1b4f0:	f000 f97a 	bl	1b7e8 <os_sched_get_current_task>
   1b4f4:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   1b4f6:	88e3      	ldrh	r3, [r4, #6]
   1b4f8:	2b00      	cmp	r3, #0
   1b4fa:	d048      	beq.n	1b58e <os_mutex_release+0xae>
   1b4fc:	68a2      	ldr	r2, [r4, #8]
   1b4fe:	4282      	cmp	r2, r0
   1b500:	d001      	beq.n	1b506 <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
   1b502:	2005      	movs	r0, #5
   1b504:	e040      	b.n	1b588 <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   1b506:	2b01      	cmp	r3, #1
   1b508:	d003      	beq.n	1b512 <os_mutex_release+0x32>
        --mu->mu_level;
   1b50a:	3b01      	subs	r3, #1
   1b50c:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1b50e:	2000      	movs	r0, #0
        goto done;
   1b510:	e03a      	b.n	1b588 <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
   1b512:	f000 fc3f 	bl	1bd94 <os_arch_save_sr>
   1b516:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   1b518:	88e3      	ldrh	r3, [r4, #6]
   1b51a:	3b01      	subs	r3, #1
   1b51c:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   1b51e:	7aea      	ldrb	r2, [r5, #11]
   1b520:	7963      	ldrb	r3, [r4, #5]
   1b522:	429a      	cmp	r2, r3
   1b524:	d11e      	bne.n	1b564 <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   1b526:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   1b528:	b146      	cbz	r6, 1b53c <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   1b52a:	69f3      	ldr	r3, [r6, #28]
   1b52c:	b1fb      	cbz	r3, 1b56e <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
   1b52e:	4630      	mov	r0, r6
   1b530:	f000 f9ae 	bl	1b890 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   1b534:	2301      	movs	r3, #1
   1b536:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   1b538:	7af3      	ldrb	r3, [r6, #11]
   1b53a:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   1b53c:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   1b53e:	b116      	cbz	r6, 1b546 <os_mutex_release+0x66>
        rdy->t_lockcnt++;
   1b540:	7bb3      	ldrb	r3, [r6, #14]
   1b542:	3301      	adds	r3, #1
   1b544:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   1b546:	7bab      	ldrb	r3, [r5, #14]
   1b548:	3b01      	subs	r3, #1
   1b54a:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   1b54c:	f000 fa1a 	bl	1b984 <os_sched_next_task>
   1b550:	4604      	mov	r4, r0
    if (rdy != current) {
   1b552:	4285      	cmp	r5, r0
   1b554:	d010      	beq.n	1b578 <os_mutex_release+0x98>
        resched = 1;
   1b556:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   1b558:	4638      	mov	r0, r7
   1b55a:	f000 fc21 	bl	1bda0 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1b55e:	b96d      	cbnz	r5, 1b57c <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
   1b560:	2000      	movs	r0, #0
   1b562:	e011      	b.n	1b588 <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
   1b564:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   1b566:	4628      	mov	r0, r5
   1b568:	f000 fa24 	bl	1b9b4 <os_sched_resort>
   1b56c:	e7db      	b.n	1b526 <os_mutex_release+0x46>
        assert(rdy->t_obj);
   1b56e:	461a      	mov	r2, r3
   1b570:	4619      	mov	r1, r3
   1b572:	4618      	mov	r0, r3
   1b574:	f7ff f978 	bl	1a868 <__assert_func>
    resched = 0;
   1b578:	2500      	movs	r5, #0
   1b57a:	e7ed      	b.n	1b558 <os_mutex_release+0x78>
        os_sched(rdy);
   1b57c:	4620      	mov	r0, r4
   1b57e:	f000 fa07 	bl	1b990 <os_sched>
    ret = OS_OK;
   1b582:	2000      	movs	r0, #0
   1b584:	e000      	b.n	1b588 <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
   1b586:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   1b588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   1b58a:	2003      	movs	r0, #3
   1b58c:	e7fc      	b.n	1b588 <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
   1b58e:	2005      	movs	r0, #5
   1b590:	e7fa      	b.n	1b588 <os_mutex_release+0xa8>
   1b592:	bf00      	nop
   1b594:	2000de88 	.word	0x2000de88

0001b598 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   1b598:	4b36      	ldr	r3, [pc, #216]	; (1b674 <os_mutex_pend+0xdc>)
   1b59a:	681b      	ldr	r3, [r3, #0]
   1b59c:	2b00      	cmp	r3, #0
   1b59e:	d065      	beq.n	1b66c <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1b5a0:	2800      	cmp	r0, #0
   1b5a2:	d065      	beq.n	1b670 <os_mutex_pend+0xd8>
{
   1b5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b5a8:	460f      	mov	r7, r1
   1b5aa:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   1b5ac:	f000 fbf2 	bl	1bd94 <os_arch_save_sr>
   1b5b0:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   1b5b2:	f000 f919 	bl	1b7e8 <os_sched_get_current_task>
   1b5b6:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
   1b5b8:	88e3      	ldrh	r3, [r4, #6]
   1b5ba:	b19b      	cbz	r3, 1b5e4 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   1b5bc:	68a2      	ldr	r2, [r4, #8]
   1b5be:	4282      	cmp	r2, r0
   1b5c0:	d01e      	beq.n	1b600 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   1b5c2:	b327      	cbz	r7, 1b60e <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   1b5c4:	7ad1      	ldrb	r1, [r2, #11]
   1b5c6:	7ac3      	ldrb	r3, [r0, #11]
   1b5c8:	4299      	cmp	r1, r3
   1b5ca:	d825      	bhi.n	1b618 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   1b5cc:	6821      	ldr	r1, [r4, #0]
   1b5ce:	b369      	cbz	r1, 1b62c <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1b5d0:	460b      	mov	r3, r1
    last = NULL;
   1b5d2:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1b5d4:	b32b      	cbz	r3, 1b622 <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
   1b5d6:	7ae8      	ldrb	r0, [r5, #11]
   1b5d8:	7ada      	ldrb	r2, [r3, #11]
   1b5da:	4290      	cmp	r0, r2
   1b5dc:	d321      	bcc.n	1b622 <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
   1b5de:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1b5e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1b5e2:	e7f7      	b.n	1b5d4 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   1b5e4:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
   1b5e6:	7ac3      	ldrb	r3, [r0, #11]
   1b5e8:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
   1b5ea:	7b83      	ldrb	r3, [r0, #14]
   1b5ec:	3301      	adds	r3, #1
   1b5ee:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   1b5f0:	2301      	movs	r3, #1
   1b5f2:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1b5f4:	4640      	mov	r0, r8
   1b5f6:	f000 fbd3 	bl	1bda0 <os_arch_restore_sr>
        ret = OS_OK;
   1b5fa:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   1b5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
   1b600:	3301      	adds	r3, #1
   1b602:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1b604:	4640      	mov	r0, r8
   1b606:	f000 fbcb 	bl	1bda0 <os_arch_restore_sr>
        ret = OS_OK;
   1b60a:	2000      	movs	r0, #0
        goto done;
   1b60c:	e7f6      	b.n	1b5fc <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
   1b60e:	4640      	mov	r0, r8
   1b610:	f000 fbc6 	bl	1bda0 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   1b614:	2006      	movs	r0, #6
        goto done;
   1b616:	e7f1      	b.n	1b5fc <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
   1b618:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
   1b61a:	68a0      	ldr	r0, [r4, #8]
   1b61c:	f000 f9ca 	bl	1b9b4 <os_sched_resort>
   1b620:	e7d4      	b.n	1b5cc <os_mutex_pend+0x34>
    if (last) {
   1b622:	b11e      	cbz	r6, 1b62c <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   1b624:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   1b626:	64eb      	str	r3, [r5, #76]	; 0x4c
   1b628:	64f5      	str	r5, [r6, #76]	; 0x4c
   1b62a:	e001      	b.n	1b630 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   1b62c:	64e9      	str	r1, [r5, #76]	; 0x4c
   1b62e:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
   1b630:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   1b632:	7b6b      	ldrb	r3, [r5, #13]
   1b634:	f043 0304 	orr.w	r3, r3, #4
   1b638:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
   1b63a:	4639      	mov	r1, r7
   1b63c:	4628      	mov	r0, r5
   1b63e:	f000 f8df 	bl	1b800 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   1b642:	4640      	mov	r0, r8
   1b644:	f000 fbac 	bl	1bda0 <os_arch_restore_sr>
    os_sched(NULL);
   1b648:	2000      	movs	r0, #0
   1b64a:	f000 f9a1 	bl	1b990 <os_sched>
    OS_ENTER_CRITICAL(sr);
   1b64e:	f000 fba1 	bl	1bd94 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   1b652:	7b6b      	ldrb	r3, [r5, #13]
   1b654:	f023 0304 	bic.w	r3, r3, #4
   1b658:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
   1b65a:	f000 fba1 	bl	1bda0 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
   1b65e:	68a3      	ldr	r3, [r4, #8]
   1b660:	42ab      	cmp	r3, r5
   1b662:	d001      	beq.n	1b668 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
   1b664:	2006      	movs	r0, #6
   1b666:	e7c9      	b.n	1b5fc <os_mutex_pend+0x64>
        ret = OS_OK;
   1b668:	2000      	movs	r0, #0
   1b66a:	e7c7      	b.n	1b5fc <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
   1b66c:	2009      	movs	r0, #9
   1b66e:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1b670:	2003      	movs	r0, #3
}
   1b672:	4770      	bx	lr
   1b674:	2000de88 	.word	0x2000de88

0001b678 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   1b678:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1b67a:	4b05      	ldr	r3, [pc, #20]	; (1b690 <os_sanity_check_list_lock+0x18>)
   1b67c:	6818      	ldr	r0, [r3, #0]
   1b67e:	b900      	cbnz	r0, 1b682 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1b680:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   1b682:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b686:	4803      	ldr	r0, [pc, #12]	; (1b694 <os_sanity_check_list_lock+0x1c>)
   1b688:	f7ff ff86 	bl	1b598 <os_mutex_pend>
err:
   1b68c:	e7f8      	b.n	1b680 <os_sanity_check_list_lock+0x8>
   1b68e:	bf00      	nop
   1b690:	2000de88 	.word	0x2000de88
   1b694:	2000dea0 	.word	0x2000dea0

0001b698 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   1b698:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1b69a:	4b04      	ldr	r3, [pc, #16]	; (1b6ac <os_sanity_check_list_unlock+0x14>)
   1b69c:	6818      	ldr	r0, [r3, #0]
   1b69e:	b900      	cbnz	r0, 1b6a2 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1b6a0:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   1b6a2:	4803      	ldr	r0, [pc, #12]	; (1b6b0 <os_sanity_check_list_unlock+0x18>)
   1b6a4:	f7ff ff1c 	bl	1b4e0 <os_mutex_release>
err:
   1b6a8:	e7fa      	b.n	1b6a0 <os_sanity_check_list_unlock+0x8>
   1b6aa:	bf00      	nop
   1b6ac:	2000de88 	.word	0x2000de88
   1b6b0:	2000dea0 	.word	0x2000dea0

0001b6b4 <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
   1b6b4:	2300      	movs	r3, #0
   1b6b6:	6003      	str	r3, [r0, #0]
   1b6b8:	6043      	str	r3, [r0, #4]
   1b6ba:	6083      	str	r3, [r0, #8]
   1b6bc:	60c3      	str	r3, [r0, #12]
   1b6be:	6103      	str	r3, [r0, #16]
}
   1b6c0:	4618      	mov	r0, r3
   1b6c2:	4770      	bx	lr

0001b6c4 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   1b6c4:	b510      	push	{r4, lr}
   1b6c6:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   1b6c8:	f7ff ffd6 	bl	1b678 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   1b6cc:	4603      	mov	r3, r0
   1b6ce:	b108      	cbz	r0, 1b6d4 <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
   1b6d0:	4618      	mov	r0, r3
   1b6d2:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   1b6d4:	4b03      	ldr	r3, [pc, #12]	; (1b6e4 <os_sanity_check_register+0x20>)
   1b6d6:	681a      	ldr	r2, [r3, #0]
   1b6d8:	6122      	str	r2, [r4, #16]
   1b6da:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   1b6dc:	f7ff ffdc 	bl	1b698 <os_sanity_check_list_unlock>
   1b6e0:	4603      	mov	r3, r0
err:
   1b6e2:	e7f5      	b.n	1b6d0 <os_sanity_check_register+0xc>
   1b6e4:	2000d9b0 	.word	0x2000d9b0

0001b6e8 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   1b6e8:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   1b6ea:	f7ff ffc5 	bl	1b678 <os_sanity_check_list_lock>
    if (rc != 0) {
   1b6ee:	b910      	cbnz	r0, 1b6f6 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1b6f0:	4b17      	ldr	r3, [pc, #92]	; (1b750 <os_sanity_run+0x68>)
   1b6f2:	681c      	ldr	r4, [r3, #0]
   1b6f4:	e00e      	b.n	1b714 <os_sanity_run+0x2c>
        assert(0);
   1b6f6:	2300      	movs	r3, #0
   1b6f8:	461a      	mov	r2, r3
   1b6fa:	4619      	mov	r1, r3
   1b6fc:	4618      	mov	r0, r3
   1b6fe:	f7ff f8b3 	bl	1a868 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   1b702:	f000 facf 	bl	1bca4 <os_time_get>
   1b706:	6823      	ldr	r3, [r4, #0]
   1b708:	6862      	ldr	r2, [r4, #4]
   1b70a:	4413      	add	r3, r2
   1b70c:	1ac3      	subs	r3, r0, r3
   1b70e:	2b00      	cmp	r3, #0
   1b710:	dc0d      	bgt.n	1b72e <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1b712:	6924      	ldr	r4, [r4, #16]
   1b714:	b18c      	cbz	r4, 1b73a <os_sanity_run+0x52>
        if (sc->sc_func) {
   1b716:	68a3      	ldr	r3, [r4, #8]
   1b718:	2b00      	cmp	r3, #0
   1b71a:	d0f2      	beq.n	1b702 <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
   1b71c:	68e1      	ldr	r1, [r4, #12]
   1b71e:	4620      	mov	r0, r4
   1b720:	4798      	blx	r3
            if (rc == OS_OK) {
   1b722:	2800      	cmp	r0, #0
   1b724:	d1ed      	bne.n	1b702 <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
   1b726:	f000 fabd 	bl	1bca4 <os_time_get>
   1b72a:	6020      	str	r0, [r4, #0]
                continue;
   1b72c:	e7f1      	b.n	1b712 <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   1b72e:	2300      	movs	r3, #0
   1b730:	461a      	mov	r2, r3
   1b732:	4619      	mov	r1, r3
   1b734:	4618      	mov	r0, r3
   1b736:	f7ff f897 	bl	1a868 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   1b73a:	f7ff ffad 	bl	1b698 <os_sanity_check_list_unlock>
    if (rc != 0) {
   1b73e:	b900      	cbnz	r0, 1b742 <os_sanity_run+0x5a>
        assert(0);
    }
}
   1b740:	bd10      	pop	{r4, pc}
        assert(0);
   1b742:	2300      	movs	r3, #0
   1b744:	461a      	mov	r2, r3
   1b746:	4619      	mov	r1, r3
   1b748:	4618      	mov	r0, r3
   1b74a:	f7ff f88d 	bl	1a868 <__assert_func>
   1b74e:	bf00      	nop
   1b750:	2000d9b0 	.word	0x2000d9b0

0001b754 <os_sanity_init>:

int
os_sanity_init(void)
{
   1b754:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   1b756:	4802      	ldr	r0, [pc, #8]	; (1b760 <os_sanity_init+0xc>)
   1b758:	f7ff feb8 	bl	1b4cc <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   1b75c:	bd08      	pop	{r3, pc}
   1b75e:	bf00      	nop
   1b760:	2000dea0 	.word	0x2000dea0

0001b764 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   1b764:	7b03      	ldrb	r3, [r0, #12]
   1b766:	2b01      	cmp	r3, #1
   1b768:	d001      	beq.n	1b76e <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   1b76a:	2002      	movs	r0, #2
}
   1b76c:	4770      	bx	lr
{
   1b76e:	b510      	push	{r4, lr}
   1b770:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1b772:	f000 fb0f 	bl	1bd94 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1b776:	4b0f      	ldr	r3, [pc, #60]	; (1b7b4 <os_sched_insert+0x50>)
   1b778:	681b      	ldr	r3, [r3, #0]
   1b77a:	b12b      	cbz	r3, 1b788 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   1b77c:	7ae1      	ldrb	r1, [r4, #11]
   1b77e:	7ada      	ldrb	r2, [r3, #11]
   1b780:	4291      	cmp	r1, r2
   1b782:	d301      	bcc.n	1b788 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1b784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1b786:	e7f8      	b.n	1b77a <os_sched_insert+0x16>
    if (entry) {
   1b788:	b153      	cbz	r3, 1b7a0 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   1b78a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b78c:	64a2      	str	r2, [r4, #72]	; 0x48
   1b78e:	6463      	str	r3, [r4, #68]	; 0x44
   1b790:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b792:	6014      	str	r4, [r2, #0]
   1b794:	3444      	adds	r4, #68	; 0x44
   1b796:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   1b798:	f000 fb02 	bl	1bda0 <os_arch_restore_sr>
    return (0);
   1b79c:	2000      	movs	r0, #0
}
   1b79e:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   1b7a0:	2300      	movs	r3, #0
   1b7a2:	6463      	str	r3, [r4, #68]	; 0x44
   1b7a4:	4b03      	ldr	r3, [pc, #12]	; (1b7b4 <os_sched_insert+0x50>)
   1b7a6:	685a      	ldr	r2, [r3, #4]
   1b7a8:	64a2      	str	r2, [r4, #72]	; 0x48
   1b7aa:	6014      	str	r4, [r2, #0]
   1b7ac:	3444      	adds	r4, #68	; 0x44
   1b7ae:	605c      	str	r4, [r3, #4]
   1b7b0:	e7f2      	b.n	1b798 <os_sched_insert+0x34>
   1b7b2:	bf00      	nop
   1b7b4:	20000114 	.word	0x20000114

0001b7b8 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   1b7b8:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   1b7ba:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1b7bc:	3301      	adds	r3, #1
   1b7be:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
   1b7c0:	4b06      	ldr	r3, [pc, #24]	; (1b7dc <os_sched_ctx_sw_hook+0x24>)
   1b7c2:	681c      	ldr	r4, [r3, #0]
   1b7c4:	4b06      	ldr	r3, [pc, #24]	; (1b7e0 <os_sched_ctx_sw_hook+0x28>)
   1b7c6:	6818      	ldr	r0, [r3, #0]
   1b7c8:	4906      	ldr	r1, [pc, #24]	; (1b7e4 <os_sched_ctx_sw_hook+0x2c>)
   1b7ca:	680b      	ldr	r3, [r1, #0]
   1b7cc:	1ac2      	subs	r2, r0, r3
   1b7ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1b7d0:	4413      	add	r3, r2
   1b7d2:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
   1b7d4:	6008      	str	r0, [r1, #0]
}
   1b7d6:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b7da:	4770      	bx	lr
   1b7dc:	2000deb0 	.word	0x2000deb0
   1b7e0:	2000dec0 	.word	0x2000dec0
   1b7e4:	2000deac 	.word	0x2000deac

0001b7e8 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   1b7e8:	4b01      	ldr	r3, [pc, #4]	; (1b7f0 <os_sched_get_current_task+0x8>)
   1b7ea:	6818      	ldr	r0, [r3, #0]
   1b7ec:	4770      	bx	lr
   1b7ee:	bf00      	nop
   1b7f0:	2000deb0 	.word	0x2000deb0

0001b7f4 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   1b7f4:	4b01      	ldr	r3, [pc, #4]	; (1b7fc <os_sched_set_current_task+0x8>)
   1b7f6:	6018      	str	r0, [r3, #0]
}
   1b7f8:	4770      	bx	lr
   1b7fa:	bf00      	nop
   1b7fc:	2000deb0 	.word	0x2000deb0

0001b800 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   1b800:	b538      	push	{r3, r4, r5, lr}
   1b802:	4604      	mov	r4, r0
   1b804:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1b806:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1b808:	b1d3      	cbz	r3, 1b840 <os_sched_sleep+0x40>
   1b80a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b80c:	649a      	str	r2, [r3, #72]	; 0x48
   1b80e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1b810:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1b812:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   1b814:	2302      	movs	r3, #2
   1b816:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   1b818:	f000 fa44 	bl	1bca4 <os_time_get>
   1b81c:	4428      	add	r0, r5
   1b81e:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   1b820:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1b824:	d010      	beq.n	1b848 <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1b826:	4b18      	ldr	r3, [pc, #96]	; (1b888 <os_sched_sleep+0x88>)
   1b828:	681b      	ldr	r3, [r3, #0]
   1b82a:	b1d3      	cbz	r3, 1b862 <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1b82c:	7b5a      	ldrb	r2, [r3, #13]
   1b82e:	f012 0f01 	tst.w	r2, #1
   1b832:	d116      	bne.n	1b862 <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   1b834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1b836:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1b838:	2a00      	cmp	r2, #0
   1b83a:	dc12      	bgt.n	1b862 <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1b83c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1b83e:	e7f4      	b.n	1b82a <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1b840:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b842:	4b12      	ldr	r3, [pc, #72]	; (1b88c <os_sched_sleep+0x8c>)
   1b844:	605a      	str	r2, [r3, #4]
   1b846:	e7e2      	b.n	1b80e <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   1b848:	7b63      	ldrb	r3, [r4, #13]
   1b84a:	f043 0301 	orr.w	r3, r3, #1
   1b84e:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1b850:	2300      	movs	r3, #0
   1b852:	6463      	str	r3, [r4, #68]	; 0x44
   1b854:	4b0c      	ldr	r3, [pc, #48]	; (1b888 <os_sched_sleep+0x88>)
   1b856:	685a      	ldr	r2, [r3, #4]
   1b858:	64a2      	str	r2, [r4, #72]	; 0x48
   1b85a:	6014      	str	r4, [r2, #0]
   1b85c:	3444      	adds	r4, #68	; 0x44
   1b85e:	605c      	str	r4, [r3, #4]
   1b860:	e007      	b.n	1b872 <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
   1b862:	b143      	cbz	r3, 1b876 <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   1b864:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b866:	64a2      	str	r2, [r4, #72]	; 0x48
   1b868:	6463      	str	r3, [r4, #68]	; 0x44
   1b86a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1b86c:	6014      	str	r4, [r2, #0]
   1b86e:	3444      	adds	r4, #68	; 0x44
   1b870:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   1b872:	2000      	movs	r0, #0
   1b874:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1b876:	2300      	movs	r3, #0
   1b878:	6463      	str	r3, [r4, #68]	; 0x44
   1b87a:	4b03      	ldr	r3, [pc, #12]	; (1b888 <os_sched_sleep+0x88>)
   1b87c:	685a      	ldr	r2, [r3, #4]
   1b87e:	64a2      	str	r2, [r4, #72]	; 0x48
   1b880:	6014      	str	r4, [r2, #0]
   1b882:	3444      	adds	r4, #68	; 0x44
   1b884:	605c      	str	r4, [r3, #4]
   1b886:	e7f4      	b.n	1b872 <os_sched_sleep+0x72>
   1b888:	2000011c 	.word	0x2000011c
   1b88c:	20000114 	.word	0x20000114

0001b890 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   1b890:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   1b892:	7b03      	ldrb	r3, [r0, #12]
   1b894:	2b02      	cmp	r3, #2
   1b896:	d108      	bne.n	1b8aa <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   1b898:	69c3      	ldr	r3, [r0, #28]
   1b89a:	b1db      	cbz	r3, 1b8d4 <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1b89c:	681a      	ldr	r2, [r3, #0]
   1b89e:	b152      	cbz	r2, 1b8b6 <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1b8a0:	4282      	cmp	r2, r0
   1b8a2:	d10f      	bne.n	1b8c4 <os_sched_wakeup+0x34>
   1b8a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1b8a6:	601a      	str	r2, [r3, #0]
   1b8a8:	e011      	b.n	1b8ce <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
   1b8aa:	2300      	movs	r3, #0
   1b8ac:	461a      	mov	r2, r3
   1b8ae:	4619      	mov	r1, r3
   1b8b0:	4618      	mov	r0, r3
   1b8b2:	f7fe ffd9 	bl	1a868 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1b8b6:	2300      	movs	r3, #0
   1b8b8:	461a      	mov	r2, r3
   1b8ba:	4619      	mov	r1, r3
   1b8bc:	4618      	mov	r0, r3
   1b8be:	f7fe ffd3 	bl	1a868 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1b8c2:	461a      	mov	r2, r3
   1b8c4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1b8c6:	4283      	cmp	r3, r0
   1b8c8:	d1fb      	bne.n	1b8c2 <os_sched_wakeup+0x32>
   1b8ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1b8cc:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   1b8ce:	2300      	movs	r3, #0
   1b8d0:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   1b8d2:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   1b8d4:	2301      	movs	r3, #1
   1b8d6:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   1b8d8:	2300      	movs	r3, #0
   1b8da:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   1b8dc:	7b43      	ldrb	r3, [r0, #13]
   1b8de:	f023 0301 	bic.w	r3, r3, #1
   1b8e2:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1b8e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1b8e6:	b143      	cbz	r3, 1b8fa <os_sched_wakeup+0x6a>
   1b8e8:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b8ea:	649a      	str	r2, [r3, #72]	; 0x48
   1b8ec:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1b8ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1b8f0:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   1b8f2:	f7ff ff37 	bl	1b764 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   1b8f6:	2000      	movs	r0, #0
   1b8f8:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1b8fa:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b8fc:	4b01      	ldr	r3, [pc, #4]	; (1b904 <os_sched_wakeup+0x74>)
   1b8fe:	605a      	str	r2, [r3, #4]
   1b900:	e7f4      	b.n	1b8ec <os_sched_wakeup+0x5c>
   1b902:	bf00      	nop
   1b904:	2000011c 	.word	0x2000011c

0001b908 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   1b908:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   1b90a:	f000 f9cb 	bl	1bca4 <os_time_get>
   1b90e:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   1b910:	f000 fa40 	bl	1bd94 <os_arch_save_sr>
   1b914:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   1b916:	4b0a      	ldr	r3, [pc, #40]	; (1b940 <os_sched_os_timer_exp+0x38>)
   1b918:	6818      	ldr	r0, [r3, #0]
    while (t) {
   1b91a:	b160      	cbz	r0, 1b936 <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   1b91c:	7b43      	ldrb	r3, [r0, #13]
   1b91e:	f013 0f01 	tst.w	r3, #1
   1b922:	d108      	bne.n	1b936 <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
   1b924:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   1b926:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1b928:	1aeb      	subs	r3, r5, r3
   1b92a:	2b00      	cmp	r3, #0
   1b92c:	db03      	blt.n	1b936 <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
   1b92e:	f7ff ffaf 	bl	1b890 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   1b932:	4620      	mov	r0, r4
   1b934:	e7f1      	b.n	1b91a <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
   1b936:	4630      	mov	r0, r6
   1b938:	f000 fa32 	bl	1bda0 <os_arch_restore_sr>
}
   1b93c:	bd70      	pop	{r4, r5, r6, pc}
   1b93e:	bf00      	nop
   1b940:	2000011c 	.word	0x2000011c

0001b944 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   1b944:	b510      	push	{r4, lr}
   1b946:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   1b948:	f000 fa2d 	bl	1bda6 <os_arch_in_critical>
   1b94c:	b150      	cbz	r0, 1b964 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   1b94e:	4b0c      	ldr	r3, [pc, #48]	; (1b980 <os_sched_wakeup_ticks+0x3c>)
   1b950:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   1b952:	b17b      	cbz	r3, 1b974 <os_sched_wakeup_ticks+0x30>
   1b954:	7b5a      	ldrb	r2, [r3, #13]
   1b956:	f012 0f01 	tst.w	r2, #1
   1b95a:	d10e      	bne.n	1b97a <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   1b95c:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1b95e:	1b00      	subs	r0, r0, r4
   1b960:	d406      	bmi.n	1b970 <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   1b962:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1b964:	2300      	movs	r3, #0
   1b966:	461a      	mov	r2, r3
   1b968:	4619      	mov	r1, r3
   1b96a:	4618      	mov	r0, r3
   1b96c:	f7fe ff7c 	bl	1a868 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   1b970:	2000      	movs	r0, #0
   1b972:	e7f6      	b.n	1b962 <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   1b974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b978:	e7f3      	b.n	1b962 <os_sched_wakeup_ticks+0x1e>
   1b97a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1b97e:	e7f0      	b.n	1b962 <os_sched_wakeup_ticks+0x1e>
   1b980:	2000011c 	.word	0x2000011c

0001b984 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   1b984:	4b01      	ldr	r3, [pc, #4]	; (1b98c <os_sched_next_task+0x8>)
   1b986:	6818      	ldr	r0, [r3, #0]
   1b988:	4770      	bx	lr
   1b98a:	bf00      	nop
   1b98c:	20000114 	.word	0x20000114

0001b990 <os_sched>:
{
   1b990:	b538      	push	{r3, r4, r5, lr}
   1b992:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1b994:	f000 f9fe 	bl	1bd94 <os_arch_save_sr>
   1b998:	4605      	mov	r5, r0
    if (!next_t) {
   1b99a:	b134      	cbz	r4, 1b9aa <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   1b99c:	4620      	mov	r0, r4
   1b99e:	f000 f9ef 	bl	1bd80 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   1b9a2:	4628      	mov	r0, r5
   1b9a4:	f000 f9fc 	bl	1bda0 <os_arch_restore_sr>
}
   1b9a8:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   1b9aa:	f7ff ffeb 	bl	1b984 <os_sched_next_task>
   1b9ae:	4604      	mov	r4, r0
   1b9b0:	e7f4      	b.n	1b99c <os_sched+0xc>
	...

0001b9b4 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   1b9b4:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   1b9b6:	7b03      	ldrb	r3, [r0, #12]
   1b9b8:	2b01      	cmp	r3, #1
   1b9ba:	d000      	beq.n	1b9be <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   1b9bc:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1b9be:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1b9c0:	b13b      	cbz	r3, 1b9d2 <os_sched_resort+0x1e>
   1b9c2:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b9c4:	649a      	str	r2, [r3, #72]	; 0x48
   1b9c6:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1b9c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1b9ca:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   1b9cc:	f7ff feca 	bl	1b764 <os_sched_insert>
}
   1b9d0:	e7f4      	b.n	1b9bc <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1b9d2:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1b9d4:	4b01      	ldr	r3, [pc, #4]	; (1b9dc <os_sched_resort+0x28>)
   1b9d6:	605a      	str	r2, [r3, #4]
   1b9d8:	e7f5      	b.n	1b9c6 <os_sched_resort+0x12>
   1b9da:	bf00      	nop
   1b9dc:	20000114 	.word	0x20000114

0001b9e0 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   1b9e0:	4603      	mov	r3, r0
   1b9e2:	b118      	cbz	r0, 1b9ec <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   1b9e4:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   1b9e6:	2000      	movs	r0, #0
   1b9e8:	6018      	str	r0, [r3, #0]
   1b9ea:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1b9ec:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   1b9ee:	4770      	bx	lr

0001b9f0 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   1b9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   1b9f2:	4b17      	ldr	r3, [pc, #92]	; (1ba50 <os_sem_release+0x60>)
   1b9f4:	681b      	ldr	r3, [r3, #0]
   1b9f6:	b33b      	cbz	r3, 1ba48 <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1b9f8:	b340      	cbz	r0, 1ba4c <os_sem_release+0x5c>
   1b9fa:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   1b9fc:	f7ff fef4 	bl	1b7e8 <os_sched_get_current_task>
   1ba00:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   1ba02:	f000 f9c7 	bl	1bd94 <os_arch_save_sr>
   1ba06:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   1ba08:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   1ba0a:	b165      	cbz	r5, 1ba26 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1ba0c:	7b6b      	ldrb	r3, [r5, #13]
   1ba0e:	f023 0302 	bic.w	r3, r3, #2
   1ba12:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   1ba14:	4628      	mov	r0, r5
   1ba16:	f7ff ff3b 	bl	1b890 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   1ba1a:	7afa      	ldrb	r2, [r7, #11]
   1ba1c:	7aeb      	ldrb	r3, [r5, #11]
   1ba1e:	429a      	cmp	r2, r3
   1ba20:	d80b      	bhi.n	1ba3a <os_sem_release+0x4a>
    resched = 0;
   1ba22:	2400      	movs	r4, #0
   1ba24:	e003      	b.n	1ba2e <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   1ba26:	88e3      	ldrh	r3, [r4, #6]
   1ba28:	3301      	adds	r3, #1
   1ba2a:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   1ba2c:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   1ba2e:	4630      	mov	r0, r6
   1ba30:	f000 f9b6 	bl	1bda0 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1ba34:	b91c      	cbnz	r4, 1ba3e <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   1ba36:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   1ba38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   1ba3a:	2401      	movs	r4, #1
   1ba3c:	e7f7      	b.n	1ba2e <os_sem_release+0x3e>
        os_sched(rdy);
   1ba3e:	4628      	mov	r0, r5
   1ba40:	f7ff ffa6 	bl	1b990 <os_sched>
    ret = OS_OK;
   1ba44:	2000      	movs	r0, #0
   1ba46:	e7f7      	b.n	1ba38 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   1ba48:	2009      	movs	r0, #9
   1ba4a:	e7f5      	b.n	1ba38 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   1ba4c:	2003      	movs	r0, #3
   1ba4e:	e7f3      	b.n	1ba38 <os_sem_release+0x48>
   1ba50:	2000de88 	.word	0x2000de88

0001ba54 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   1ba54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   1ba56:	4b2c      	ldr	r3, [pc, #176]	; (1bb08 <os_sem_pend+0xb4>)
   1ba58:	681b      	ldr	r3, [r3, #0]
   1ba5a:	2b00      	cmp	r3, #0
   1ba5c:	d04f      	beq.n	1bafe <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1ba5e:	2800      	cmp	r0, #0
   1ba60:	d04f      	beq.n	1bb02 <os_sem_pend+0xae>
   1ba62:	460d      	mov	r5, r1
   1ba64:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   1ba66:	f7ff febf 	bl	1b7e8 <os_sched_get_current_task>
   1ba6a:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   1ba6c:	f000 f992 	bl	1bd94 <os_arch_save_sr>
   1ba70:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   1ba72:	88e3      	ldrh	r3, [r4, #6]
   1ba74:	b14b      	cbz	r3, 1ba8a <os_sem_pend+0x36>
        sem->sem_tokens--;
   1ba76:	3b01      	subs	r3, #1
   1ba78:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1ba7a:	2400      	movs	r4, #0
    sched = 0;
   1ba7c:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   1ba7e:	4638      	mov	r0, r7
   1ba80:	f000 f98e 	bl	1bda0 <os_arch_restore_sr>

    if (sched) {
   1ba84:	bb45      	cbnz	r5, 1bad8 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   1ba86:	4620      	mov	r0, r4
   1ba88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   1ba8a:	b315      	cbz	r5, 1bad2 <os_sem_pend+0x7e>
        current->t_obj = sem;
   1ba8c:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   1ba8e:	7b73      	ldrb	r3, [r6, #13]
   1ba90:	f043 0302 	orr.w	r3, r3, #2
   1ba94:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   1ba96:	f8d4 c000 	ldr.w	ip, [r4]
   1ba9a:	f1bc 0f00 	cmp.w	ip, #0
   1ba9e:	d00e      	beq.n	1babe <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1baa0:	4663      	mov	r3, ip
        last = NULL;
   1baa2:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1baa4:	b133      	cbz	r3, 1bab4 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   1baa6:	7af1      	ldrb	r1, [r6, #11]
   1baa8:	7ada      	ldrb	r2, [r3, #11]
   1baaa:	4291      	cmp	r1, r2
   1baac:	d302      	bcc.n	1bab4 <os_sem_pend+0x60>
                last = entry;
   1baae:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1bab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1bab2:	e7f7      	b.n	1baa4 <os_sem_pend+0x50>
        if (last) {
   1bab4:	b118      	cbz	r0, 1babe <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   1bab6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1bab8:	64f3      	str	r3, [r6, #76]	; 0x4c
   1baba:	64c6      	str	r6, [r0, #76]	; 0x4c
   1babc:	e002      	b.n	1bac4 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   1babe:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   1bac2:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   1bac4:	4629      	mov	r1, r5
   1bac6:	4630      	mov	r0, r6
   1bac8:	f7ff fe9a 	bl	1b800 <os_sched_sleep>
        ret = OS_OK;
   1bacc:	2400      	movs	r4, #0
        sched = 1;
   1bace:	2501      	movs	r5, #1
   1bad0:	e7d5      	b.n	1ba7e <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   1bad2:	2406      	movs	r4, #6
    sched = 0;
   1bad4:	2500      	movs	r5, #0
   1bad6:	e7d2      	b.n	1ba7e <os_sem_pend+0x2a>
        os_sched(NULL);
   1bad8:	2000      	movs	r0, #0
   1bada:	f7ff ff59 	bl	1b990 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   1bade:	7b73      	ldrb	r3, [r6, #13]
   1bae0:	f013 0f02 	tst.w	r3, #2
   1bae4:	d101      	bne.n	1baea <os_sem_pend+0x96>
            ret = OS_OK;
   1bae6:	2400      	movs	r4, #0
   1bae8:	e7cd      	b.n	1ba86 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   1baea:	f000 f953 	bl	1bd94 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1baee:	7b73      	ldrb	r3, [r6, #13]
   1baf0:	f023 0302 	bic.w	r3, r3, #2
   1baf4:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   1baf6:	f000 f953 	bl	1bda0 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   1bafa:	2406      	movs	r4, #6
   1bafc:	e7c3      	b.n	1ba86 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   1bafe:	2409      	movs	r4, #9
   1bb00:	e7c1      	b.n	1ba86 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   1bb02:	2403      	movs	r4, #3
   1bb04:	e7bf      	b.n	1ba86 <os_sem_pend+0x32>
   1bb06:	bf00      	nop
   1bb08:	2000de88 	.word	0x2000de88

0001bb0c <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   1bb0c:	2300      	movs	r3, #0
   1bb0e:	e003      	b.n	1bb18 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
   1bb10:	4a03      	ldr	r2, [pc, #12]	; (1bb20 <_clear_stack+0x14>)
   1bb12:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   1bb16:	3301      	adds	r3, #1
   1bb18:	428b      	cmp	r3, r1
   1bb1a:	dbf9      	blt.n	1bb10 <_clear_stack+0x4>
    }
}
   1bb1c:	4770      	bx	lr
   1bb1e:	bf00      	nop
   1bb20:	deadbeef 	.word	0xdeadbeef

0001bb24 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
   1bb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb28:	4604      	mov	r4, r0
   1bb2a:	460f      	mov	r7, r1
   1bb2c:	4690      	mov	r8, r2
   1bb2e:	461d      	mov	r5, r3
   1bb30:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
   1bb34:	2250      	movs	r2, #80	; 0x50
   1bb36:	2100      	movs	r1, #0
   1bb38:	f000 fa99 	bl	1c06e <memset>

    t->t_func = func;
   1bb3c:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
   1bb40:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   1bb42:	f000 f927 	bl	1bd94 <os_arch_save_sr>
    rc = g_task_id;
   1bb46:	4b2b      	ldr	r3, [pc, #172]	; (1bbf4 <os_task_init+0xd0>)
   1bb48:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
   1bb4a:	1c6a      	adds	r2, r5, #1
   1bb4c:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1bb4e:	f000 f927 	bl	1bda0 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
   1bb52:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
   1bb54:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1bb58:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
   1bb5a:	2301      	movs	r3, #1
   1bb5c:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   1bb5e:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
   1bb60:	2300      	movs	r3, #0
   1bb62:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
   1bb64:	f104 0720 	add.w	r7, r4, #32
   1bb68:	4638      	mov	r0, r7
   1bb6a:	f7ff fda3 	bl	1b6b4 <os_sanity_check_init>
    if (rc != OS_OK) {
   1bb6e:	4605      	mov	r5, r0
   1bb70:	2800      	cmp	r0, #0
   1bb72:	d132      	bne.n	1bbda <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
   1bb74:	9b07      	ldr	r3, [sp, #28]
   1bb76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1bb7a:	d005      	beq.n	1bb88 <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
   1bb7c:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
   1bb7e:	4638      	mov	r0, r7
   1bb80:	f7ff fda0 	bl	1b6c4 <os_sanity_check_register>
        if (rc != OS_OK) {
   1bb84:	4605      	mov	r5, r0
   1bb86:	bb40      	cbnz	r0, 1bbda <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
   1bb88:	4631      	mov	r1, r6
   1bb8a:	9808      	ldr	r0, [sp, #32]
   1bb8c:	f7ff ffbe 	bl	1bb0c <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
   1bb90:	9b08      	ldr	r3, [sp, #32]
   1bb92:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   1bb96:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
   1bb98:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
   1bb9a:	4632      	mov	r2, r6
   1bb9c:	4620      	mov	r0, r4
   1bb9e:	f000 f907 	bl	1bdb0 <os_arch_task_stack_init>
   1bba2:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1bba4:	4b14      	ldr	r3, [pc, #80]	; (1bbf8 <os_task_init+0xd4>)
   1bba6:	681b      	ldr	r3, [r3, #0]
   1bba8:	b15b      	cbz	r3, 1bbc2 <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
   1bbaa:	7ae1      	ldrb	r1, [r4, #11]
   1bbac:	7ada      	ldrb	r2, [r3, #11]
   1bbae:	4291      	cmp	r1, r2
   1bbb0:	d001      	beq.n	1bbb6 <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1bbb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bbb4:	e7f8      	b.n	1bba8 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
   1bbb6:	2300      	movs	r3, #0
   1bbb8:	461a      	mov	r2, r3
   1bbba:	4619      	mov	r1, r3
   1bbbc:	4618      	mov	r0, r3
   1bbbe:	f7fe fe53 	bl	1a868 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1bbc2:	6423      	str	r3, [r4, #64]	; 0x40
   1bbc4:	4b0c      	ldr	r3, [pc, #48]	; (1bbf8 <os_task_init+0xd4>)
   1bbc6:	685a      	ldr	r2, [r3, #4]
   1bbc8:	6014      	str	r4, [r2, #0]
   1bbca:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1bbce:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
   1bbd0:	4620      	mov	r0, r4
   1bbd2:	f7ff fdc7 	bl	1b764 <os_sched_insert>
   1bbd6:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   1bbd8:	b110      	cbz	r0, 1bbe0 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
   1bbda:	4628      	mov	r0, r5
   1bbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
   1bbe0:	f7fe fefc 	bl	1a9dc <os_started>
   1bbe4:	b908      	cbnz	r0, 1bbea <os_task_init+0xc6>
    return (0);
   1bbe6:	4605      	mov	r5, r0
   1bbe8:	e7f7      	b.n	1bbda <os_task_init+0xb6>
        os_sched(NULL);
   1bbea:	2000      	movs	r0, #0
   1bbec:	f7ff fed0 	bl	1b990 <os_sched>
   1bbf0:	e7f3      	b.n	1bbda <os_task_init+0xb6>
   1bbf2:	bf00      	nop
   1bbf4:	2000deb4 	.word	0x2000deb4
   1bbf8:	2000deb8 	.word	0x2000deb8

0001bbfc <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   1bbfc:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   1bc00:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   1bc02:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   1bc06:	e9d1 4500 	ldrd	r4, r5, [r1]
   1bc0a:	eb14 0b03 	adds.w	fp, r4, r3
   1bc0e:	f145 0c00 	adc.w	ip, r5, #0
   1bc12:	e9c2 bc00 	strd	fp, ip, [r2]
   1bc16:	688b      	ldr	r3, [r1, #8]
   1bc18:	f641 6184 	movw	r1, #7812	; 0x1e84
   1bc1c:	fb01 3000 	mla	r0, r1, r0, r3
   1bc20:	6090      	str	r0, [r2, #8]
   1bc22:	4b08      	ldr	r3, [pc, #32]	; (1bc44 <os_deltatime+0x48>)
   1bc24:	4298      	cmp	r0, r3
   1bc26:	dd0a      	ble.n	1bc3e <os_deltatime+0x42>
   1bc28:	f11b 0401 	adds.w	r4, fp, #1
   1bc2c:	f14c 0500 	adc.w	r5, ip, #0
   1bc30:	e9c2 4500 	strd	r4, r5, [r2]
   1bc34:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   1bc38:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   1bc3c:	6090      	str	r0, [r2, #8]
}
   1bc3e:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1bc42:	4770      	bx	lr
   1bc44:	000f423f 	.word	0x000f423f

0001bc48 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   1bc48:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   1bc4a:	1e04      	subs	r4, r0, #0
   1bc4c:	db0d      	blt.n	1bc6a <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   1bc4e:	f000 f8a1 	bl	1bd94 <os_arch_save_sr>
   1bc52:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   1bc54:	4a11      	ldr	r2, [pc, #68]	; (1bc9c <os_time_tick+0x54>)
   1bc56:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
   1bc58:	18e0      	adds	r0, r4, r3
   1bc5a:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   1bc5c:	ea90 0f03 	teq	r0, r3
   1bc60:	d409      	bmi.n	1bc76 <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   1bc62:	4628      	mov	r0, r5
   1bc64:	f000 f89c 	bl	1bda0 <os_arch_restore_sr>
}
   1bc68:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   1bc6a:	2300      	movs	r3, #0
   1bc6c:	461a      	mov	r2, r3
   1bc6e:	4619      	mov	r1, r3
   1bc70:	4618      	mov	r0, r3
   1bc72:	f7fe fdf9 	bl	1a868 <__assert_func>
        delta = g_os_time - basetod.ostime;
   1bc76:	4e0a      	ldr	r6, [pc, #40]	; (1bca0 <os_time_tick+0x58>)
   1bc78:	4631      	mov	r1, r6
   1bc7a:	f851 4b08 	ldr.w	r4, [r1], #8
   1bc7e:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   1bc80:	460a      	mov	r2, r1
   1bc82:	4620      	mov	r0, r4
   1bc84:	f7ff ffba 	bl	1bbfc <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   1bc88:	f106 0118 	add.w	r1, r6, #24
   1bc8c:	460a      	mov	r2, r1
   1bc8e:	4620      	mov	r0, r4
   1bc90:	f7ff ffb4 	bl	1bbfc <os_deltatime>
        basetod.ostime = g_os_time;
   1bc94:	4b01      	ldr	r3, [pc, #4]	; (1bc9c <os_time_tick+0x54>)
   1bc96:	681b      	ldr	r3, [r3, #0]
   1bc98:	6033      	str	r3, [r6, #0]
   1bc9a:	e7e2      	b.n	1bc62 <os_time_tick+0x1a>
   1bc9c:	2000dec0 	.word	0x2000dec0
   1bca0:	2000d9b8 	.word	0x2000d9b8

0001bca4 <os_time_get>:
}
   1bca4:	4b01      	ldr	r3, [pc, #4]	; (1bcac <os_time_get+0x8>)
   1bca6:	6818      	ldr	r0, [r3, #0]
   1bca8:	4770      	bx	lr
   1bcaa:	bf00      	nop
   1bcac:	2000dec0 	.word	0x2000dec0

0001bcb0 <os_time_advance>:

void
os_time_advance(int ticks)
{
   1bcb0:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   1bcb2:	1e04      	subs	r4, r0, #0
   1bcb4:	db09      	blt.n	1bcca <os_time_advance+0x1a>

    if (ticks > 0) {
   1bcb6:	2c00      	cmp	r4, #0
   1bcb8:	dd06      	ble.n	1bcc8 <os_time_advance+0x18>
        if (!os_started()) {
   1bcba:	f7fe fe8f 	bl	1a9dc <os_started>
   1bcbe:	b950      	cbnz	r0, 1bcd6 <os_time_advance+0x26>
            g_os_time += ticks;
   1bcc0:	4a0a      	ldr	r2, [pc, #40]	; (1bcec <os_time_advance+0x3c>)
   1bcc2:	6813      	ldr	r3, [r2, #0]
   1bcc4:	441c      	add	r4, r3
   1bcc6:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   1bcc8:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   1bcca:	2300      	movs	r3, #0
   1bccc:	461a      	mov	r2, r3
   1bcce:	4619      	mov	r1, r3
   1bcd0:	4618      	mov	r0, r3
   1bcd2:	f7fe fdc9 	bl	1a868 <__assert_func>
            os_time_tick(ticks);
   1bcd6:	4620      	mov	r0, r4
   1bcd8:	f7ff ffb6 	bl	1bc48 <os_time_tick>
            os_callout_tick();
   1bcdc:	f7fe ffa6 	bl	1ac2c <os_callout_tick>
            os_sched_os_timer_exp();
   1bce0:	f7ff fe12 	bl	1b908 <os_sched_os_timer_exp>
            os_sched(NULL);
   1bce4:	2000      	movs	r0, #0
   1bce6:	f7ff fe53 	bl	1b990 <os_sched>
}
   1bcea:	e7ed      	b.n	1bcc8 <os_time_advance+0x18>
   1bcec:	2000dec0 	.word	0x2000dec0

0001bcf0 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   1bcf0:	b900      	cbnz	r0, 1bcf4 <os_time_delay+0x4>
   1bcf2:	4770      	bx	lr
{
   1bcf4:	b538      	push	{r3, r4, r5, lr}
   1bcf6:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1bcf8:	f000 f84c 	bl	1bd94 <os_arch_save_sr>
   1bcfc:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   1bcfe:	f7ff fd73 	bl	1b7e8 <os_sched_get_current_task>
   1bd02:	4621      	mov	r1, r4
   1bd04:	f7ff fd7c 	bl	1b800 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   1bd08:	4628      	mov	r0, r5
   1bd0a:	f000 f849 	bl	1bda0 <os_arch_restore_sr>
        os_sched(NULL);
   1bd0e:	2000      	movs	r0, #0
   1bd10:	f7ff fe3e 	bl	1b990 <os_sched>
    }
}
   1bd14:	bd38      	pop	{r3, r4, r5, pc}
	...

0001bd18 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   1bd18:	b570      	push	{r4, r5, r6, lr}
   1bd1a:	4605      	mov	r5, r0
   1bd1c:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   1bd1e:	f000 f839 	bl	1bd94 <os_arch_save_sr>
   1bd22:	4606      	mov	r6, r0
    if (tv != NULL) {
   1bd24:	b145      	cbz	r5, 1bd38 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   1bd26:	f7ff ffbd 	bl	1bca4 <os_time_get>
   1bd2a:	4908      	ldr	r1, [pc, #32]	; (1bd4c <os_gettimeofday+0x34>)
   1bd2c:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   1bd30:	462a      	mov	r2, r5
   1bd32:	1ac0      	subs	r0, r0, r3
   1bd34:	f7ff ff62 	bl	1bbfc <os_deltatime>
    }

    if (tz != NULL) {
   1bd38:	b114      	cbz	r4, 1bd40 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   1bd3a:	4b04      	ldr	r3, [pc, #16]	; (1bd4c <os_gettimeofday+0x34>)
   1bd3c:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1bd3e:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   1bd40:	4630      	mov	r0, r6
   1bd42:	f000 f82d 	bl	1bda0 <os_arch_restore_sr>

    return (0);
}
   1bd46:	2000      	movs	r0, #0
   1bd48:	bd70      	pop	{r4, r5, r6, pc}
   1bd4a:	bf00      	nop
   1bd4c:	2000d9b8 	.word	0x2000d9b8

0001bd50 <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   1bd50:	b538      	push	{r3, r4, r5, lr}
   1bd52:	4604      	mov	r4, r0
   1bd54:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   1bd56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bd5a:	2300      	movs	r3, #0
   1bd5c:	01c0      	lsls	r0, r0, #7
   1bd5e:	0e61      	lsrs	r1, r4, #25
   1bd60:	f002 f88a 	bl	1de78 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   1bd64:	2901      	cmp	r1, #1
   1bd66:	bf08      	it	eq
   1bd68:	2800      	cmpeq	r0, #0
   1bd6a:	d202      	bcs.n	1bd72 <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   1bd6c:	6028      	str	r0, [r5, #0]
    return 0;
   1bd6e:	2000      	movs	r0, #0
}
   1bd70:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   1bd72:	2002      	movs	r0, #2
   1bd74:	e7fc      	b.n	1bd70 <os_time_ms_to_ticks+0x20>

0001bd76 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
   1bd76:	b508      	push	{r3, lr}
    os_time_advance(1);
   1bd78:	2001      	movs	r0, #1
   1bd7a:	f7ff ff99 	bl	1bcb0 <os_time_advance>
}
   1bd7e:	bd08      	pop	{r3, pc}

0001bd80 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
   1bd80:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   1bd82:	f7ff fd19 	bl	1b7b8 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   1bd86:	4b02      	ldr	r3, [pc, #8]	; (1bd90 <os_arch_ctx_sw+0x10>)
   1bd88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1bd8c:	605a      	str	r2, [r3, #4]
}
   1bd8e:	bd08      	pop	{r3, pc}
   1bd90:	e000ed00 	.word	0xe000ed00

0001bd94 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1bd94:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1bd98:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
   1bd9a:	f000 0001 	and.w	r0, r0, #1
   1bd9e:	4770      	bx	lr

0001bda0 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
   1bda0:	b900      	cbnz	r0, 1bda4 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   1bda2:	b662      	cpsie	i
        __enable_irq();
    }
}
   1bda4:	4770      	bx	lr

0001bda6 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1bda6:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
   1bdaa:	f000 0001 	and.w	r0, r0, #1
   1bdae:	4770      	bx	lr

0001bdb0 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   1bdb0:	b570      	push	{r4, r5, r6, lr}
   1bdb2:	4606      	mov	r6, r0
   1bdb4:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   1bdb6:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
   1bdba:	2309      	movs	r3, #9
   1bdbc:	e003      	b.n	1bdc6 <os_arch_task_stack_init+0x16>
        s[i] = 0;
   1bdbe:	2200      	movs	r2, #0
   1bdc0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
   1bdc4:	3301      	adds	r3, #1
   1bdc6:	2b0d      	cmp	r3, #13
   1bdc8:	ddf9      	ble.n	1bdbe <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   1bdca:	4620      	mov	r0, r4
   1bdcc:	f000 f8b6 	bl	1bf3c <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   1bdd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1bdd4:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
   1bdd8:	6973      	ldr	r3, [r6, #20]
   1bdda:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   1bdde:	69b3      	ldr	r3, [r6, #24]
   1bde0:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
   1bde4:	f06f 0302 	mvn.w	r3, #2
   1bde8:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
   1bdec:	4620      	mov	r0, r4
   1bdee:	bd70      	pop	{r4, r5, r6, pc}

0001bdf0 <os_arch_init>:

void
os_arch_init(void)
{
   1bdf0:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1bdf2:	4a04      	ldr	r2, [pc, #16]	; (1be04 <os_arch_init+0x14>)
   1bdf4:	6953      	ldr	r3, [r2, #20]
   1bdf6:	f043 0310 	orr.w	r3, r3, #16
   1bdfa:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   1bdfc:	f7fe fdf4 	bl	1a9e8 <os_init_idle_task>
}
   1be00:	bd08      	pop	{r3, pc}
   1be02:	bf00      	nop
   1be04:	e000ed00 	.word	0xe000ed00

0001be08 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   1be08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1be0a:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1be0e:	b90c      	cbnz	r4, 1be14 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1be10:	2400      	movs	r4, #0
   1be12:	e009      	b.n	1be28 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   1be14:	2007      	movs	r0, #7
   1be16:	e02e      	b.n	1be76 <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   1be18:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   1be1c:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   1be20:	26ff      	movs	r6, #255	; 0xff
   1be22:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1be26:	3401      	adds	r4, #1
   1be28:	2cef      	cmp	r4, #239	; 0xef
   1be2a:	d9f5      	bls.n	1be18 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1be2c:	f06f 040d 	mvn.w	r4, #13
   1be30:	e007      	b.n	1be42 <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   1be32:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1be34:	4e12      	ldr	r6, [pc, #72]	; (1be80 <os_arch_os_init+0x78>)
   1be36:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1be38:	3510      	adds	r5, #16
   1be3a:	4f12      	ldr	r7, [pc, #72]	; (1be84 <os_arch_os_init+0x7c>)
   1be3c:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   1be40:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1be42:	2c25      	cmp	r4, #37	; 0x25
   1be44:	ddf5      	ble.n	1be32 <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1be46:	4c0e      	ldr	r4, [pc, #56]	; (1be80 <os_arch_os_init+0x78>)
   1be48:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1be4a:	4e0f      	ldr	r6, [pc, #60]	; (1be88 <os_arch_os_init+0x80>)
   1be4c:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1be4e:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1be50:	4e0e      	ldr	r6, [pc, #56]	; (1be8c <os_arch_os_init+0x84>)
   1be52:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1be54:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1be56:	4e0e      	ldr	r6, [pc, #56]	; (1be90 <os_arch_os_init+0x88>)
   1be58:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1be5a:	25e0      	movs	r5, #224	; 0xe0
   1be5c:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   1be60:	2520      	movs	r5, #32
   1be62:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1be64:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   1be68:	f014 0f01 	tst.w	r4, #1
   1be6c:	d004      	beq.n	1be78 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   1be6e:	f8df c024 	ldr.w	ip, [pc, #36]	; 1be94 <os_arch_os_init+0x8c>
   1be72:	df00      	svc	0
        err = OS_OK;
   1be74:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   1be76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   1be78:	f7ff ffba 	bl	1bdf0 <os_arch_init>
        err = OS_OK;
   1be7c:	2000      	movs	r0, #0
   1be7e:	e7fa      	b.n	1be76 <os_arch_os_init+0x6e>
   1be80:	e000ed00 	.word	0xe000ed00
   1be84:	0001bfdb 	.word	0x0001bfdb
   1be88:	0001bf43 	.word	0x0001bf43
   1be8c:	0001bf89 	.word	0x0001bf89
   1be90:	0001bfcf 	.word	0x0001bfcf
   1be94:	0001bdf1 	.word	0x0001bdf1

0001be98 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   1be98:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1be9a:	f7ff fd73 	bl	1b984 <os_sched_next_task>
   1be9e:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   1bea0:	f7ff fca8 	bl	1b7f4 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   1bea4:	6823      	ldr	r3, [r4, #0]
   1bea6:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1bea8:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   1beac:	2106      	movs	r1, #6
   1beae:	2080      	movs	r0, #128	; 0x80
   1beb0:	f000 fde8 	bl	1ca84 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   1beb4:	4b03      	ldr	r3, [pc, #12]	; (1bec4 <os_arch_start+0x2c>)
   1beb6:	2201      	movs	r2, #1
   1beb8:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   1beba:	4620      	mov	r0, r4
   1bebc:	f7ff ff60 	bl	1bd80 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   1bec0:	69a0      	ldr	r0, [r4, #24]
   1bec2:	bd10      	pop	{r4, pc}
   1bec4:	2000de88 	.word	0x2000de88

0001bec8 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   1bec8:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   1beca:	4814      	ldr	r0, [pc, #80]	; (1bf1c <os_arch_os_start+0x54>)
   1becc:	6800      	ldr	r0, [r0, #0]
   1bece:	3804      	subs	r0, #4
   1bed0:	f000 f82a 	bl	1bf28 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1bed4:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1bed8:	b9d4      	cbnz	r4, 1bf10 <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1beda:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   1bede:	f004 0403 	and.w	r4, r4, #3
   1bee2:	2c03      	cmp	r4, #3
   1bee4:	d808      	bhi.n	1bef8 <os_arch_os_start+0x30>
   1bee6:	e8df f004 	tbb	[pc, r4]
   1beea:	1515      	.short	0x1515
   1beec:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   1beee:	4c0c      	ldr	r4, [pc, #48]	; (1bf20 <os_arch_os_start+0x58>)
   1bef0:	6824      	ldr	r4, [r4, #0]
   1bef2:	f014 0f01 	tst.w	r4, #1
   1bef6:	d10f      	bne.n	1bf18 <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
   1bef8:	f8df c028 	ldr.w	ip, [pc, #40]	; 1bf24 <os_arch_os_start+0x5c>
   1befc:	df00      	svc	0
   1befe:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
   1bf00:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   1bf02:	4c07      	ldr	r4, [pc, #28]	; (1bf20 <os_arch_os_start+0x58>)
   1bf04:	6824      	ldr	r4, [r4, #0]
   1bf06:	f014 0f01 	tst.w	r4, #1
   1bf0a:	d1f5      	bne.n	1bef8 <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
   1bf0c:	2008      	movs	r0, #8
   1bf0e:	e7f7      	b.n	1bf00 <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
   1bf10:	2007      	movs	r0, #7
   1bf12:	e7f5      	b.n	1bf00 <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
   1bf14:	2008      	movs	r0, #8
   1bf16:	e7f3      	b.n	1bf00 <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
   1bf18:	2008      	movs	r0, #8
   1bf1a:	e7f1      	b.n	1bf00 <os_arch_os_start+0x38>
   1bf1c:	2000dde8 	.word	0x2000dde8
   1bf20:	2000d9e8 	.word	0x2000d9e8
   1bf24:	0001be99 	.word	0x0001be99

0001bf28 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   1bf28:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   1bf2c:	4832      	ldr	r0, [pc, #200]	; (1bff8 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1bf2e:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   1bf30:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1bf32:	f380 8814 	msr	CONTROL, r0
        ISB
   1bf36:	f3bf 8f6f 	isb	sy
        BX      LR
   1bf3a:	4770      	bx	lr

0001bf3c <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   1bf3c:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   1bf40:	4770      	bx	lr

0001bf42 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   1bf42:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   1bf46:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   1bf48:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   1bf4c:	b951      	cbnz	r1, 1bf64 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1bf4e:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1bf52:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   1bf54:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1bf56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   1bf5a:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   1bf5e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   1bf62:	4770      	bx	lr

0001bf64 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1bf64:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   1bf66:	4a25      	ldr	r2, [pc, #148]	; (1bffc <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   1bf68:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   1bf6a:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   1bf6c:	d809      	bhi.n	1bf82 <SVC_Done>

        LDR     R4,=SVC_Table-4
   1bf6e:	4c24      	ldr	r4, [pc, #144]	; (1c000 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   1bf70:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1bf74:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   1bf78:	47a0      	blx	r4

        MRS     R12,PSP
   1bf7a:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   1bf7e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0001bf82 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1bf82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   1bf86:	4770      	bx	lr

0001bf88 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1bf88:	4b1e      	ldr	r3, [pc, #120]	; (1c004 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   1bf8a:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   1bf8c:	4b1e      	ldr	r3, [pc, #120]	; (1c008 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   1bf8e:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   1bf90:	4291      	cmp	r1, r2
        IT      EQ
   1bf92:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   1bf94:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   1bf96:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
   1bf9a:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
   1bf9e:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
   1bfa0:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
   1bfa4:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1bfa8:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1bfac:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   1bfae:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
   1bfb2:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
   1bfb6:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
   1bfba:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
   1bfbc:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
   1bfc0:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
   1bfc4:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
   1bfc8:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1bfcc:	4770      	bx	lr

0001bfce <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1bfce:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   1bfd0:	f7ff fed1 	bl	1bd76 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1bfd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   1bfd8:	4770      	bx	lr

0001bfda <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1bfda:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1bfde:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   1bfe0:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   1bfe4:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   1bfe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1bfec:	4668      	mov	r0, sp
        BL      os_default_irq
   1bfee:	f7fe fc61 	bl	1a8b4 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   1bff2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   1bff6:	4770      	bx	lr
        LDR     R0,=os_flags
   1bff8:	2000d9e8 	.word	0x2000d9e8
        LDR     R2,=SVC_Count
   1bffc:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   1c000:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1c004:	20000114 	.word	0x20000114
        LDR     R3,=g_current_task      /* Get current task */
   1c008:	2000deb0 	.word	0x2000deb0

0001c00c <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   1c00c:	b470      	push	{r4, r5, r6}
   1c00e:	f04f 0500 	mov.w	r5, #0
   1c012:	f022 0603 	bic.w	r6, r2, #3
   1c016:	e005      	b.n	1c024 <test1>

0001c018 <loop1>:
   1c018:	5943      	ldr	r3, [r0, r5]
   1c01a:	594c      	ldr	r4, [r1, r5]
   1c01c:	42a3      	cmp	r3, r4
   1c01e:	d104      	bne.n	1c02a <res1>
   1c020:	f105 0504 	add.w	r5, r5, #4

0001c024 <test1>:
   1c024:	42b5      	cmp	r5, r6
   1c026:	d1f7      	bne.n	1c018 <loop1>
   1c028:	e00d      	b.n	1c046 <test2>

0001c02a <res1>:
   1c02a:	ba1b      	rev	r3, r3
   1c02c:	ba24      	rev	r4, r4
   1c02e:	1b1b      	subs	r3, r3, r4
   1c030:	bf8c      	ite	hi
   1c032:	2301      	movhi	r3, #1
   1c034:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   1c038:	e009      	b.n	1c04e <done>

0001c03a <loop2>:
   1c03a:	5d43      	ldrb	r3, [r0, r5]
   1c03c:	5d4c      	ldrb	r4, [r1, r5]
   1c03e:	1b1b      	subs	r3, r3, r4
   1c040:	d105      	bne.n	1c04e <done>
   1c042:	f105 0501 	add.w	r5, r5, #1

0001c046 <test2>:
   1c046:	4295      	cmp	r5, r2
   1c048:	d1f7      	bne.n	1c03a <loop2>
   1c04a:	f04f 0300 	mov.w	r3, #0

0001c04e <done>:
   1c04e:	4618      	mov	r0, r3
   1c050:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   1c052:	4770      	bx	lr

0001c054 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   1c054:	e001      	b.n	1c05a <test1>

0001c056 <loop1>:
   1c056:	588b      	ldr	r3, [r1, r2]
   1c058:	5083      	str	r3, [r0, r2]

0001c05a <test1>:
   1c05a:	3a04      	subs	r2, #4
   1c05c:	d5fb      	bpl.n	1c056 <loop1>
   1c05e:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   1c062:	e001      	b.n	1c068 <test2>

0001c064 <loop2>:
   1c064:	5c8b      	ldrb	r3, [r1, r2]
   1c066:	5483      	strb	r3, [r0, r2]

0001c068 <test2>:
   1c068:	3a01      	subs	r2, #1
   1c06a:	d5fb      	bpl.n	1c064 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   1c06c:	4770      	bx	lr

0001c06e <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   1c06e:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   1c070:	4605      	mov	r5, r0
   1c072:	b2c9      	uxtb	r1, r1
   1c074:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1c078:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1c07c:	18ab      	adds	r3, r5, r2
   1c07e:	2403      	movs	r4, #3
   1c080:	4023      	ands	r3, r4
   1c082:	1ad3      	subs	r3, r2, r3
   1c084:	d40b      	bmi.n	1c09e <memset+0x30>
   1c086:	e001      	b.n	1c08c <memset+0x1e>
   1c088:	3a01      	subs	r2, #1
   1c08a:	54a9      	strb	r1, [r5, r2]
   1c08c:	429a      	cmp	r2, r3
   1c08e:	d1fb      	bne.n	1c088 <memset+0x1a>
   1c090:	e000      	b.n	1c094 <memset+0x26>
   1c092:	50a9      	str	r1, [r5, r2]
   1c094:	3a04      	subs	r2, #4
   1c096:	d5fc      	bpl.n	1c092 <memset+0x24>
   1c098:	3204      	adds	r2, #4
   1c09a:	e000      	b.n	1c09e <memset+0x30>
   1c09c:	54a9      	strb	r1, [r5, r2]
   1c09e:	3a01      	subs	r2, #1
   1c0a0:	d5fc      	bpl.n	1c09c <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   1c0a2:	bc30      	pop	{r4, r5}
   1c0a4:	4770      	bx	lr

0001c0a6 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   1c0a6:	b430      	push	{r4, r5}
   1c0a8:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   1c0aa:	1c55      	adds	r5, r2, #1
   1c0ac:	7813      	ldrb	r3, [r2, #0]
   1c0ae:	1c4c      	adds	r4, r1, #1
   1c0b0:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
   1c0b2:	1a18      	subs	r0, r3, r0
   1c0b4:	d103      	bne.n	1c0be <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
   1c0b6:	462a      	mov	r2, r5
   1c0b8:	4621      	mov	r1, r4
		if (d || !ch)
   1c0ba:	2b00      	cmp	r3, #0
   1c0bc:	d1f5      	bne.n	1c0aa <strcmp+0x4>
			break;
	}

	return d;
}
   1c0be:	bc30      	pop	{r4, r5}
   1c0c0:	4770      	bx	lr

0001c0c2 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   1c0c2:	4603      	mov	r3, r0
	while (*ss)
   1c0c4:	e000      	b.n	1c0c8 <strlen+0x6>
		ss++;
   1c0c6:	3301      	adds	r3, #1
	while (*ss)
   1c0c8:	781a      	ldrb	r2, [r3, #0]
   1c0ca:	2a00      	cmp	r2, #0
   1c0cc:	d1fb      	bne.n	1c0c6 <strlen+0x4>
	return ss - s;
}
   1c0ce:	1a18      	subs	r0, r3, r0
   1c0d0:	4770      	bx	lr

0001c0d2 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   1c0d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c0d6:	b082      	sub	sp, #8
   1c0d8:	e9cd 0100 	strd	r0, r1, [sp]
   1c0dc:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   1c0de:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   1c0e2:	2401      	movs	r4, #1
   1c0e4:	2500      	movs	r5, #0
    while (num / d >= p->base)
   1c0e6:	e004      	b.n	1c0f2 <ui2a+0x20>
        d *= p->base;
   1c0e8:	fb06 f305 	mul.w	r3, r6, r5
   1c0ec:	fba4 4506 	umull	r4, r5, r4, r6
   1c0f0:	441d      	add	r5, r3
    while (num / d >= p->base)
   1c0f2:	4622      	mov	r2, r4
   1c0f4:	462b      	mov	r3, r5
   1c0f6:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c0fa:	f001 febd 	bl	1de78 <__aeabi_uldivmod>
   1c0fe:	f899 6003 	ldrb.w	r6, [r9, #3]
   1c102:	2700      	movs	r7, #0
   1c104:	42b9      	cmp	r1, r7
   1c106:	bf08      	it	eq
   1c108:	42b0      	cmpeq	r0, r6
   1c10a:	d2ed      	bcs.n	1c0e8 <ui2a+0x16>
    int n = 0;
   1c10c:	f04f 0a00 	mov.w	sl, #0
   1c110:	e007      	b.n	1c122 <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1c112:	2330      	movs	r3, #48	; 0x30
   1c114:	441e      	add	r6, r3
   1c116:	f888 6000 	strb.w	r6, [r8]
            ++n;
   1c11a:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1c11e:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   1c122:	ea54 0305 	orrs.w	r3, r4, r5
   1c126:	d02e      	beq.n	1c186 <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   1c128:	4622      	mov	r2, r4
   1c12a:	462b      	mov	r3, r5
   1c12c:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c130:	f001 fea2 	bl	1de78 <__aeabi_uldivmod>
   1c134:	4606      	mov	r6, r0
   1c136:	460f      	mov	r7, r1
        num %= d;
   1c138:	4622      	mov	r2, r4
   1c13a:	462b      	mov	r3, r5
   1c13c:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c140:	f001 fe9a 	bl	1de78 <__aeabi_uldivmod>
   1c144:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   1c148:	f899 2003 	ldrb.w	r2, [r9, #3]
   1c14c:	2300      	movs	r3, #0
   1c14e:	4620      	mov	r0, r4
   1c150:	4629      	mov	r1, r5
   1c152:	f001 fe91 	bl	1de78 <__aeabi_uldivmod>
   1c156:	4604      	mov	r4, r0
   1c158:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   1c15a:	f1ba 0f00 	cmp.w	sl, #0
   1c15e:	d105      	bne.n	1c16c <ui2a+0x9a>
   1c160:	ea56 0307 	orrs.w	r3, r6, r7
   1c164:	d102      	bne.n	1c16c <ui2a+0x9a>
   1c166:	ea54 0305 	orrs.w	r3, r4, r5
   1c16a:	d1da      	bne.n	1c122 <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1c16c:	2f00      	cmp	r7, #0
   1c16e:	bf08      	it	eq
   1c170:	2e0a      	cmpeq	r6, #10
   1c172:	d3ce      	bcc.n	1c112 <ui2a+0x40>
   1c174:	f899 3002 	ldrb.w	r3, [r9, #2]
   1c178:	f013 0f04 	tst.w	r3, #4
   1c17c:	d001      	beq.n	1c182 <ui2a+0xb0>
   1c17e:	2337      	movs	r3, #55	; 0x37
   1c180:	e7c8      	b.n	1c114 <ui2a+0x42>
   1c182:	2357      	movs	r3, #87	; 0x57
   1c184:	e7c6      	b.n	1c114 <ui2a+0x42>
        }
    }
    *bf = 0;
   1c186:	2300      	movs	r3, #0
   1c188:	f888 3000 	strb.w	r3, [r8]
}
   1c18c:	b002      	add	sp, #8
   1c18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c192 <i2a>:

static void i2a(long long int num, struct param *p)
{
   1c192:	b508      	push	{r3, lr}
    if (num < 0) {
   1c194:	2800      	cmp	r0, #0
   1c196:	f171 0300 	sbcs.w	r3, r1, #0
   1c19a:	db02      	blt.n	1c1a2 <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   1c19c:	f7ff ff99 	bl	1c0d2 <ui2a>
}
   1c1a0:	bd08      	pop	{r3, pc}
        num = -num;
   1c1a2:	4240      	negs	r0, r0
   1c1a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   1c1a8:	7893      	ldrb	r3, [r2, #2]
   1c1aa:	f043 0301 	orr.w	r3, r3, #1
   1c1ae:	7093      	strb	r3, [r2, #2]
   1c1b0:	e7f4      	b.n	1c19c <i2a+0xa>

0001c1b2 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1c1b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1c1b6:	b2db      	uxtb	r3, r3
   1c1b8:	2b09      	cmp	r3, #9
   1c1ba:	d90b      	bls.n	1c1d4 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   1c1bc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1c1c0:	b2db      	uxtb	r3, r3
   1c1c2:	2b05      	cmp	r3, #5
   1c1c4:	d908      	bls.n	1c1d8 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   1c1c6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1c1ca:	b2db      	uxtb	r3, r3
   1c1cc:	2b05      	cmp	r3, #5
   1c1ce:	d805      	bhi.n	1c1dc <a2d+0x2a>
        return ch - 'A' + 10;
   1c1d0:	3837      	subs	r0, #55	; 0x37
   1c1d2:	4770      	bx	lr
        return ch - '0';
   1c1d4:	3830      	subs	r0, #48	; 0x30
   1c1d6:	4770      	bx	lr
        return ch - 'a' + 10;
   1c1d8:	3857      	subs	r0, #87	; 0x57
   1c1da:	4770      	bx	lr
    else
        return -1;
   1c1dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1c1e0:	4770      	bx	lr

0001c1e2 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1c1e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c1e6:	4605      	mov	r5, r0
   1c1e8:	4688      	mov	r8, r1
   1c1ea:	4617      	mov	r7, r2
   1c1ec:	4699      	mov	r9, r3
    const char *p = *src;
   1c1ee:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   1c1f0:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1c1f2:	4628      	mov	r0, r5
   1c1f4:	f7ff ffdd 	bl	1c1b2 <a2d>
   1c1f8:	2800      	cmp	r0, #0
   1c1fa:	db06      	blt.n	1c20a <a2i+0x28>
        if (digit > base)
   1c1fc:	42b8      	cmp	r0, r7
   1c1fe:	dc04      	bgt.n	1c20a <a2i+0x28>
            break;
        num = num * base + digit;
   1c200:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   1c204:	7825      	ldrb	r5, [r4, #0]
   1c206:	3401      	adds	r4, #1
   1c208:	e7f3      	b.n	1c1f2 <a2i+0x10>
    }
    *src = p;
   1c20a:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   1c20e:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   1c212:	4628      	mov	r0, r5
   1c214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c218 <putf>:

static int putf(FILE *putp, char c)
{
   1c218:	b500      	push	{lr}
   1c21a:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   1c21c:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   1c220:	6803      	ldr	r3, [r0, #0]
   1c222:	681b      	ldr	r3, [r3, #0]
   1c224:	b14b      	cbz	r3, 1c23a <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1c226:	2201      	movs	r2, #1
   1c228:	f10d 0107 	add.w	r1, sp, #7
   1c22c:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   1c22e:	2801      	cmp	r0, #1
   1c230:	d005      	beq.n	1c23e <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   1c232:	2000      	movs	r0, #0
    else
        return 1;
}
   1c234:	b003      	add	sp, #12
   1c236:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   1c23a:	2000      	movs	r0, #0
   1c23c:	e7fa      	b.n	1c234 <putf+0x1c>
        return 1;
   1c23e:	2001      	movs	r0, #1
   1c240:	e7f8      	b.n	1c234 <putf+0x1c>
	...

0001c244 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   1c244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c248:	4606      	mov	r6, r0
   1c24a:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   1c24c:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   1c24e:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   1c250:	e001      	b.n	1c256 <putchw+0x12>
        n--;
   1c252:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   1c254:	4613      	mov	r3, r2
   1c256:	1c5a      	adds	r2, r3, #1
   1c258:	781b      	ldrb	r3, [r3, #0]
   1c25a:	b10b      	cbz	r3, 1c260 <putchw+0x1c>
   1c25c:	2c00      	cmp	r4, #0
   1c25e:	dcf8      	bgt.n	1c252 <putchw+0xe>
    if (p->sign)
   1c260:	78bb      	ldrb	r3, [r7, #2]
   1c262:	f013 0f01 	tst.w	r3, #1
   1c266:	d000      	beq.n	1c26a <putchw+0x26>
        n--;
   1c268:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   1c26a:	887b      	ldrh	r3, [r7, #2]
   1c26c:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1c270:	b29b      	uxth	r3, r3
   1c272:	f241 0202 	movw	r2, #4098	; 0x1002
   1c276:	4293      	cmp	r3, r2
   1c278:	d01c      	beq.n	1c2b4 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   1c27a:	f640 0202 	movw	r2, #2050	; 0x802
   1c27e:	4293      	cmp	r3, r2
   1c280:	d01a      	beq.n	1c2b8 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   1c282:	683b      	ldr	r3, [r7, #0]
   1c284:	4d35      	ldr	r5, [pc, #212]	; (1c35c <putchw+0x118>)
   1c286:	401d      	ands	r5, r3
   1c288:	b1f5      	cbz	r5, 1c2c8 <putchw+0x84>
    unsigned written = 0;
   1c28a:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   1c28c:	78bb      	ldrb	r3, [r7, #2]
   1c28e:	f013 0f01 	tst.w	r3, #1
   1c292:	d11f      	bne.n	1c2d4 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   1c294:	887b      	ldrh	r3, [r7, #2]
   1c296:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1c29a:	b29b      	uxth	r3, r3
   1c29c:	f241 0202 	movw	r2, #4098	; 0x1002
   1c2a0:	4293      	cmp	r3, r2
   1c2a2:	d01d      	beq.n	1c2e0 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   1c2a4:	f640 0202 	movw	r2, #2050	; 0x802
   1c2a8:	4293      	cmp	r3, r2
   1c2aa:	d02a      	beq.n	1c302 <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   1c2ac:	787b      	ldrb	r3, [r7, #1]
   1c2ae:	bba3      	cbnz	r3, 1c31a <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   1c2b0:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   1c2b2:	e03d      	b.n	1c330 <putchw+0xec>
        n -= 2;
   1c2b4:	3c02      	subs	r4, #2
   1c2b6:	e7e4      	b.n	1c282 <putchw+0x3e>
        n--;
   1c2b8:	3c01      	subs	r4, #1
   1c2ba:	e7e2      	b.n	1c282 <putchw+0x3e>
            written += putf(putp, ' ');
   1c2bc:	2120      	movs	r1, #32
   1c2be:	4630      	mov	r0, r6
   1c2c0:	f7ff ffaa 	bl	1c218 <putf>
   1c2c4:	4405      	add	r5, r0
        while (n-- > 0)
   1c2c6:	4644      	mov	r4, r8
   1c2c8:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1c2cc:	2c00      	cmp	r4, #0
   1c2ce:	dcf5      	bgt.n	1c2bc <putchw+0x78>
   1c2d0:	4644      	mov	r4, r8
   1c2d2:	e7db      	b.n	1c28c <putchw+0x48>
        written += putf(putp, '-');
   1c2d4:	212d      	movs	r1, #45	; 0x2d
   1c2d6:	4630      	mov	r0, r6
   1c2d8:	f7ff ff9e 	bl	1c218 <putf>
   1c2dc:	4405      	add	r5, r0
   1c2de:	e7d9      	b.n	1c294 <putchw+0x50>
        written += putf(putp, '0');
   1c2e0:	2130      	movs	r1, #48	; 0x30
   1c2e2:	4630      	mov	r0, r6
   1c2e4:	f7ff ff98 	bl	1c218 <putf>
   1c2e8:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   1c2ea:	78bb      	ldrb	r3, [r7, #2]
   1c2ec:	f013 0f04 	tst.w	r3, #4
   1c2f0:	d005      	beq.n	1c2fe <putchw+0xba>
   1c2f2:	2158      	movs	r1, #88	; 0x58
   1c2f4:	4630      	mov	r0, r6
   1c2f6:	f7ff ff8f 	bl	1c218 <putf>
   1c2fa:	4405      	add	r5, r0
   1c2fc:	e7d6      	b.n	1c2ac <putchw+0x68>
   1c2fe:	2178      	movs	r1, #120	; 0x78
   1c300:	e7f8      	b.n	1c2f4 <putchw+0xb0>
        written += putf(putp, '0');
   1c302:	2130      	movs	r1, #48	; 0x30
   1c304:	4630      	mov	r0, r6
   1c306:	f7ff ff87 	bl	1c218 <putf>
   1c30a:	4405      	add	r5, r0
   1c30c:	e7ce      	b.n	1c2ac <putchw+0x68>
            written += putf(putp, '0');
   1c30e:	2130      	movs	r1, #48	; 0x30
   1c310:	4630      	mov	r0, r6
   1c312:	f7ff ff81 	bl	1c218 <putf>
   1c316:	4405      	add	r5, r0
        while (n-- > 0)
   1c318:	4644      	mov	r4, r8
   1c31a:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1c31e:	2c00      	cmp	r4, #0
   1c320:	dcf5      	bgt.n	1c30e <putchw+0xca>
   1c322:	4644      	mov	r4, r8
   1c324:	e7c4      	b.n	1c2b0 <putchw+0x6c>
        written += putf(putp, ch);
   1c326:	4630      	mov	r0, r6
   1c328:	f7ff ff76 	bl	1c218 <putf>
   1c32c:	4405      	add	r5, r0
    while ((ch = *bf++))
   1c32e:	4643      	mov	r3, r8
   1c330:	f103 0801 	add.w	r8, r3, #1
   1c334:	7819      	ldrb	r1, [r3, #0]
   1c336:	2900      	cmp	r1, #0
   1c338:	d1f5      	bne.n	1c326 <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   1c33a:	78bb      	ldrb	r3, [r7, #2]
   1c33c:	f013 0f08 	tst.w	r3, #8
   1c340:	d106      	bne.n	1c350 <putchw+0x10c>
   1c342:	e008      	b.n	1c356 <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   1c344:	2120      	movs	r1, #32
   1c346:	4630      	mov	r0, r6
   1c348:	f7ff ff66 	bl	1c218 <putf>
   1c34c:	4405      	add	r5, r0
        while (n-- > 0)
   1c34e:	463c      	mov	r4, r7
   1c350:	1e67      	subs	r7, r4, #1
   1c352:	2c00      	cmp	r4, #0
   1c354:	dcf6      	bgt.n	1c344 <putchw+0x100>
    }
    
    return written;
}
   1c356:	4628      	mov	r0, r5
   1c358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c35c:	0008ff00 	.word	0x0008ff00

0001c360 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   1c360:	b160      	cbz	r0, 1c37c <intarg+0x1c>
   1c362:	2801      	cmp	r0, #1
   1c364:	d017      	beq.n	1c396 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   1c366:	bb19      	cbnz	r1, 1c3b0 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   1c368:	6813      	ldr	r3, [r2, #0]
   1c36a:	3307      	adds	r3, #7
   1c36c:	f023 0307 	bic.w	r3, r3, #7
   1c370:	f103 0108 	add.w	r1, r3, #8
   1c374:	6011      	str	r1, [r2, #0]
   1c376:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   1c37a:	4770      	bx	lr
        if (sign) {
   1c37c:	b129      	cbz	r1, 1c38a <intarg+0x2a>
            val = va_arg(*va, int);
   1c37e:	6813      	ldr	r3, [r2, #0]
   1c380:	1d19      	adds	r1, r3, #4
   1c382:	6011      	str	r1, [r2, #0]
   1c384:	6818      	ldr	r0, [r3, #0]
   1c386:	17c1      	asrs	r1, r0, #31
   1c388:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   1c38a:	6813      	ldr	r3, [r2, #0]
   1c38c:	1d19      	adds	r1, r3, #4
   1c38e:	6011      	str	r1, [r2, #0]
   1c390:	6818      	ldr	r0, [r3, #0]
   1c392:	2100      	movs	r1, #0
   1c394:	4770      	bx	lr
        if (sign) {
   1c396:	b129      	cbz	r1, 1c3a4 <intarg+0x44>
            val = va_arg(*va, long);
   1c398:	6813      	ldr	r3, [r2, #0]
   1c39a:	1d19      	adds	r1, r3, #4
   1c39c:	6011      	str	r1, [r2, #0]
   1c39e:	6818      	ldr	r0, [r3, #0]
   1c3a0:	17c1      	asrs	r1, r0, #31
   1c3a2:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   1c3a4:	6813      	ldr	r3, [r2, #0]
   1c3a6:	1d19      	adds	r1, r3, #4
   1c3a8:	6011      	str	r1, [r2, #0]
   1c3aa:	6818      	ldr	r0, [r3, #0]
   1c3ac:	2100      	movs	r1, #0
   1c3ae:	4770      	bx	lr
            val = va_arg(*va, long long);
   1c3b0:	6813      	ldr	r3, [r2, #0]
   1c3b2:	3307      	adds	r3, #7
   1c3b4:	f023 0307 	bic.w	r3, r3, #7
   1c3b8:	f103 0108 	add.w	r1, r3, #8
   1c3bc:	6011      	str	r1, [r2, #0]
   1c3be:	e9d3 0100 	ldrd	r0, r1, [r3]
   1c3c2:	4770      	bx	lr

0001c3c4 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   1c3c4:	b570      	push	{r4, r5, r6, lr}
   1c3c6:	b08a      	sub	sp, #40	; 0x28
   1c3c8:	4605      	mov	r5, r0
   1c3ca:	9101      	str	r1, [sp, #4]
   1c3cc:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   1c3ce:	ab02      	add	r3, sp, #8
   1c3d0:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   1c3d2:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   1c3d4:	9b01      	ldr	r3, [sp, #4]
   1c3d6:	1c5a      	adds	r2, r3, #1
   1c3d8:	9201      	str	r2, [sp, #4]
   1c3da:	7819      	ldrb	r1, [r3, #0]
   1c3dc:	2900      	cmp	r1, #0
   1c3de:	f000 811c 	beq.w	1c61a <tfp_format+0x256>
        if (ch != '%') {
   1c3e2:	2925      	cmp	r1, #37	; 0x25
   1c3e4:	d004      	beq.n	1c3f0 <tfp_format+0x2c>
            written += putf(putp, ch);
   1c3e6:	4628      	mov	r0, r5
   1c3e8:	f7ff ff16 	bl	1c218 <putf>
   1c3ec:	4404      	add	r4, r0
   1c3ee:	e7f1      	b.n	1c3d4 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   1c3f0:	2200      	movs	r2, #0
   1c3f2:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   1c3f6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   1c3fa:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   1c3fe:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   1c402:	f362 0382 	bfi	r3, r2, #2, #1
   1c406:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   1c40a:	9b01      	ldr	r3, [sp, #4]
   1c40c:	1c5a      	adds	r2, r3, #1
   1c40e:	9201      	str	r2, [sp, #4]
   1c410:	7818      	ldrb	r0, [r3, #0]
   1c412:	b128      	cbz	r0, 1c420 <tfp_format+0x5c>
                switch (ch) {
   1c414:	282d      	cmp	r0, #45	; 0x2d
   1c416:	d04e      	beq.n	1c4b6 <tfp_format+0xf2>
   1c418:	2830      	cmp	r0, #48	; 0x30
   1c41a:	d03c      	beq.n	1c496 <tfp_format+0xd2>
   1c41c:	2823      	cmp	r0, #35	; 0x23
   1c41e:	d043      	beq.n	1c4a8 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   1c420:	282a      	cmp	r0, #42	; 0x2a
   1c422:	d052      	beq.n	1c4ca <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   1c424:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1c428:	b2db      	uxtb	r3, r3
   1c42a:	2b09      	cmp	r3, #9
   1c42c:	d961      	bls.n	1c4f2 <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   1c42e:	286c      	cmp	r0, #108	; 0x6c
   1c430:	d065      	beq.n	1c4fe <tfp_format+0x13a>
            lng = 0;
   1c432:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   1c434:	287a      	cmp	r0, #122	; 0x7a
   1c436:	d06f      	beq.n	1c518 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   1c438:	2869      	cmp	r0, #105	; 0x69
   1c43a:	f000 808e 	beq.w	1c55a <tfp_format+0x196>
   1c43e:	d970      	bls.n	1c522 <tfp_format+0x15e>
   1c440:	2873      	cmp	r0, #115	; 0x73
   1c442:	f000 80dd 	beq.w	1c600 <tfp_format+0x23c>
   1c446:	f200 8099 	bhi.w	1c57c <tfp_format+0x1b8>
   1c44a:	286f      	cmp	r0, #111	; 0x6f
   1c44c:	f000 80c7 	beq.w	1c5de <tfp_format+0x21a>
   1c450:	2870      	cmp	r0, #112	; 0x70
   1c452:	d1bf      	bne.n	1c3d4 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   1c454:	9b00      	ldr	r3, [sp, #0]
   1c456:	1d1a      	adds	r2, r3, #4
   1c458:	9200      	str	r2, [sp, #0]
   1c45a:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   1c45c:	2310      	movs	r3, #16
   1c45e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   1c462:	aa08      	add	r2, sp, #32
   1c464:	2100      	movs	r1, #0
   1c466:	f7ff fe34 	bl	1c0d2 <ui2a>
                p.width = 2 * sizeof(void*);
   1c46a:	2308      	movs	r3, #8
   1c46c:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   1c470:	2301      	movs	r3, #1
   1c472:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   1c476:	2130      	movs	r1, #48	; 0x30
   1c478:	4628      	mov	r0, r5
   1c47a:	f7ff fecd 	bl	1c218 <putf>
   1c47e:	4404      	add	r4, r0
                written += putf(putp, 'x');
   1c480:	2178      	movs	r1, #120	; 0x78
   1c482:	4628      	mov	r0, r5
   1c484:	f7ff fec8 	bl	1c218 <putf>
   1c488:	4404      	add	r4, r0
                written += putchw(putp, &p);
   1c48a:	a908      	add	r1, sp, #32
   1c48c:	4628      	mov	r0, r5
   1c48e:	f7ff fed9 	bl	1c244 <putchw>
   1c492:	4404      	add	r4, r0
                break;
   1c494:	e79e      	b.n	1c3d4 <tfp_format+0x10>
                    if (!p.left) {
   1c496:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1c49a:	f013 0f08 	tst.w	r3, #8
   1c49e:	d1b4      	bne.n	1c40a <tfp_format+0x46>
                        p.lz = 1;
   1c4a0:	2301      	movs	r3, #1
   1c4a2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1c4a6:	e7b0      	b.n	1c40a <tfp_format+0x46>
                    p.alt = 1;
   1c4a8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1c4ac:	f043 0302 	orr.w	r3, r3, #2
   1c4b0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   1c4b4:	e7a9      	b.n	1c40a <tfp_format+0x46>
                    p.left = 1;
   1c4b6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1c4ba:	f043 0308 	orr.w	r3, r3, #8
   1c4be:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   1c4c2:	2300      	movs	r3, #0
   1c4c4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1c4c8:	e79f      	b.n	1c40a <tfp_format+0x46>
                i = intarg(0, 1, &va);
   1c4ca:	466a      	mov	r2, sp
   1c4cc:	2101      	movs	r1, #1
   1c4ce:	2000      	movs	r0, #0
   1c4d0:	f7ff ff46 	bl	1c360 <intarg>
                if (i > UCHAR_MAX) {
   1c4d4:	28ff      	cmp	r0, #255	; 0xff
   1c4d6:	dd07      	ble.n	1c4e8 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   1c4d8:	23ff      	movs	r3, #255	; 0xff
   1c4da:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   1c4de:	9b01      	ldr	r3, [sp, #4]
   1c4e0:	1c5a      	adds	r2, r3, #1
   1c4e2:	9201      	str	r2, [sp, #4]
   1c4e4:	7818      	ldrb	r0, [r3, #0]
   1c4e6:	e7a2      	b.n	1c42e <tfp_format+0x6a>
                } else if (i > 0) {
   1c4e8:	2800      	cmp	r0, #0
   1c4ea:	ddf8      	ble.n	1c4de <tfp_format+0x11a>
                    p.width = i;
   1c4ec:	f88d 0020 	strb.w	r0, [sp, #32]
   1c4f0:	e7f5      	b.n	1c4de <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   1c4f2:	ab08      	add	r3, sp, #32
   1c4f4:	220a      	movs	r2, #10
   1c4f6:	a901      	add	r1, sp, #4
   1c4f8:	f7ff fe73 	bl	1c1e2 <a2i>
   1c4fc:	e797      	b.n	1c42e <tfp_format+0x6a>
                ch = *(fmt++);
   1c4fe:	9b01      	ldr	r3, [sp, #4]
   1c500:	1c5a      	adds	r2, r3, #1
   1c502:	9201      	str	r2, [sp, #4]
   1c504:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   1c506:	286c      	cmp	r0, #108	; 0x6c
   1c508:	d001      	beq.n	1c50e <tfp_format+0x14a>
                lng = 1;
   1c50a:	2601      	movs	r6, #1
   1c50c:	e792      	b.n	1c434 <tfp_format+0x70>
                    ch = *(fmt++);
   1c50e:	1c9a      	adds	r2, r3, #2
   1c510:	9201      	str	r2, [sp, #4]
   1c512:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   1c514:	2602      	movs	r6, #2
   1c516:	e78d      	b.n	1c434 <tfp_format+0x70>
                ch = *(fmt++);
   1c518:	9b01      	ldr	r3, [sp, #4]
   1c51a:	1c5a      	adds	r2, r3, #1
   1c51c:	9201      	str	r2, [sp, #4]
   1c51e:	7818      	ldrb	r0, [r3, #0]
   1c520:	e78a      	b.n	1c438 <tfp_format+0x74>
            switch (ch) {
   1c522:	2858      	cmp	r0, #88	; 0x58
   1c524:	d040      	beq.n	1c5a8 <tfp_format+0x1e4>
   1c526:	d80a      	bhi.n	1c53e <tfp_format+0x17a>
   1c528:	2800      	cmp	r0, #0
   1c52a:	d076      	beq.n	1c61a <tfp_format+0x256>
   1c52c:	2825      	cmp	r0, #37	; 0x25
   1c52e:	f47f af51 	bne.w	1c3d4 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   1c532:	4601      	mov	r1, r0
   1c534:	4628      	mov	r0, r5
   1c536:	f7ff fe6f 	bl	1c218 <putf>
   1c53a:	4404      	add	r4, r0
                break;
   1c53c:	e74a      	b.n	1c3d4 <tfp_format+0x10>
            switch (ch) {
   1c53e:	2863      	cmp	r0, #99	; 0x63
   1c540:	d108      	bne.n	1c554 <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   1c542:	9b00      	ldr	r3, [sp, #0]
   1c544:	1d1a      	adds	r2, r3, #4
   1c546:	9200      	str	r2, [sp, #0]
   1c548:	7819      	ldrb	r1, [r3, #0]
   1c54a:	4628      	mov	r0, r5
   1c54c:	f7ff fe64 	bl	1c218 <putf>
   1c550:	4404      	add	r4, r0
                break;
   1c552:	e73f      	b.n	1c3d4 <tfp_format+0x10>
            switch (ch) {
   1c554:	2864      	cmp	r0, #100	; 0x64
   1c556:	f47f af3d 	bne.w	1c3d4 <tfp_format+0x10>
                p.base = 10;
   1c55a:	230a      	movs	r3, #10
   1c55c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   1c560:	466a      	mov	r2, sp
   1c562:	2101      	movs	r1, #1
   1c564:	4630      	mov	r0, r6
   1c566:	f7ff fefb 	bl	1c360 <intarg>
   1c56a:	aa08      	add	r2, sp, #32
   1c56c:	f7ff fe11 	bl	1c192 <i2a>
                written += putchw(putp, &p);
   1c570:	a908      	add	r1, sp, #32
   1c572:	4628      	mov	r0, r5
   1c574:	f7ff fe66 	bl	1c244 <putchw>
   1c578:	4404      	add	r4, r0
                break;
   1c57a:	e72b      	b.n	1c3d4 <tfp_format+0x10>
            switch (ch) {
   1c57c:	2875      	cmp	r0, #117	; 0x75
   1c57e:	d110      	bne.n	1c5a2 <tfp_format+0x1de>
                p.base = 10;
   1c580:	230a      	movs	r3, #10
   1c582:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1c586:	466a      	mov	r2, sp
   1c588:	2100      	movs	r1, #0
   1c58a:	4630      	mov	r0, r6
   1c58c:	f7ff fee8 	bl	1c360 <intarg>
   1c590:	aa08      	add	r2, sp, #32
   1c592:	f7ff fd9e 	bl	1c0d2 <ui2a>
                written += putchw(putp, &p);
   1c596:	a908      	add	r1, sp, #32
   1c598:	4628      	mov	r0, r5
   1c59a:	f7ff fe53 	bl	1c244 <putchw>
   1c59e:	4404      	add	r4, r0
                break;
   1c5a0:	e718      	b.n	1c3d4 <tfp_format+0x10>
            switch (ch) {
   1c5a2:	2878      	cmp	r0, #120	; 0x78
   1c5a4:	f47f af16 	bne.w	1c3d4 <tfp_format+0x10>
                p.base = 16;
   1c5a8:	2310      	movs	r3, #16
   1c5aa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   1c5ae:	2858      	cmp	r0, #88	; 0x58
   1c5b0:	bf14      	ite	ne
   1c5b2:	2300      	movne	r3, #0
   1c5b4:	2301      	moveq	r3, #1
   1c5b6:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1c5ba:	f363 0282 	bfi	r2, r3, #2, #1
   1c5be:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   1c5c2:	466a      	mov	r2, sp
   1c5c4:	2100      	movs	r1, #0
   1c5c6:	4630      	mov	r0, r6
   1c5c8:	f7ff feca 	bl	1c360 <intarg>
   1c5cc:	aa08      	add	r2, sp, #32
   1c5ce:	f7ff fd80 	bl	1c0d2 <ui2a>
                written += putchw(putp, &p);
   1c5d2:	a908      	add	r1, sp, #32
   1c5d4:	4628      	mov	r0, r5
   1c5d6:	f7ff fe35 	bl	1c244 <putchw>
   1c5da:	4404      	add	r4, r0
                break;
   1c5dc:	e6fa      	b.n	1c3d4 <tfp_format+0x10>
                p.base = 8;
   1c5de:	2308      	movs	r3, #8
   1c5e0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1c5e4:	466a      	mov	r2, sp
   1c5e6:	2100      	movs	r1, #0
   1c5e8:	4630      	mov	r0, r6
   1c5ea:	f7ff feb9 	bl	1c360 <intarg>
   1c5ee:	aa08      	add	r2, sp, #32
   1c5f0:	f7ff fd6f 	bl	1c0d2 <ui2a>
                written += putchw(putp, &p);
   1c5f4:	a908      	add	r1, sp, #32
   1c5f6:	4628      	mov	r0, r5
   1c5f8:	f7ff fe24 	bl	1c244 <putchw>
   1c5fc:	4404      	add	r4, r0
                break;
   1c5fe:	e6e9      	b.n	1c3d4 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   1c600:	9b00      	ldr	r3, [sp, #0]
   1c602:	1d1a      	adds	r2, r3, #4
   1c604:	9200      	str	r2, [sp, #0]
   1c606:	681b      	ldr	r3, [r3, #0]
   1c608:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   1c60a:	a908      	add	r1, sp, #32
   1c60c:	4628      	mov	r0, r5
   1c60e:	f7ff fe19 	bl	1c244 <putchw>
   1c612:	4404      	add	r4, r0
                p.bf = bf;
   1c614:	ab02      	add	r3, sp, #8
   1c616:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   1c618:	e6dc      	b.n	1c3d4 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   1c61a:	4620      	mov	r0, r4
   1c61c:	b00a      	add	sp, #40	; 0x28
   1c61e:	bd70      	pop	{r4, r5, r6, pc}

0001c620 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   1c620:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   1c622:	f7ff fecf 	bl	1c3c4 <tfp_format>
}
   1c626:	bd08      	pop	{r3, pc}

0001c628 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   1c628:	b40f      	push	{r0, r1, r2, r3}
   1c62a:	b500      	push	{lr}
   1c62c:	b083      	sub	sp, #12
   1c62e:	aa04      	add	r2, sp, #16
   1c630:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1c634:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   1c636:	4b04      	ldr	r3, [pc, #16]	; (1c648 <printf+0x20>)
   1c638:	6818      	ldr	r0, [r3, #0]
   1c63a:	f7ff fff1 	bl	1c620 <vfprintf>
    va_end(va);
    return rv;
}
   1c63e:	b003      	add	sp, #12
   1c640:	f85d eb04 	ldr.w	lr, [sp], #4
   1c644:	b004      	add	sp, #16
   1c646:	4770      	bx	lr
   1c648:	00022304 	.word	0x00022304

0001c64c <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   1c64c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c64e:	b085      	sub	sp, #20
   1c650:	4605      	mov	r5, r0
   1c652:	460c      	mov	r4, r1
   1c654:	4616      	mov	r6, r2
   1c656:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   1c658:	460a      	mov	r2, r1
   1c65a:	4601      	mov	r1, r0
   1c65c:	4668      	mov	r0, sp
   1c65e:	f000 f835 	bl	1c6cc <fmemopen_w>
    tfp_format(f, fmt, va);
   1c662:	463a      	mov	r2, r7
   1c664:	4631      	mov	r1, r6
   1c666:	f7ff fead 	bl	1c3c4 <tfp_format>
    if (size > 0) {
   1c66a:	b12c      	cbz	r4, 1c678 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   1c66c:	9b02      	ldr	r3, [sp, #8]
   1c66e:	42a3      	cmp	r3, r4
   1c670:	d305      	bcc.n	1c67e <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   1c672:	3c01      	subs	r4, #1
   1c674:	2300      	movs	r3, #0
   1c676:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   1c678:	9802      	ldr	r0, [sp, #8]
   1c67a:	b005      	add	sp, #20
   1c67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   1c67e:	9b01      	ldr	r3, [sp, #4]
   1c680:	2200      	movs	r2, #0
   1c682:	701a      	strb	r2, [r3, #0]
   1c684:	e7f8      	b.n	1c678 <vsnprintf+0x2c>
	...

0001c688 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   1c688:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   1c68a:	460a      	mov	r2, r1
   1c68c:	4601      	mov	r1, r0
   1c68e:	4b02      	ldr	r3, [pc, #8]	; (1c698 <vprintf+0x10>)
   1c690:	6818      	ldr	r0, [r3, #0]
   1c692:	f7ff ffc5 	bl	1c620 <vfprintf>
}
   1c696:	bd08      	pop	{r3, pc}
   1c698:	00022304 	.word	0x00022304

0001c69c <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   1c69c:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   1c69e:	2500      	movs	r5, #0
    
    while (n--)
   1c6a0:	e000      	b.n	1c6a4 <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   1c6a2:	4622      	mov	r2, r4
    while (n--)
   1c6a4:	1e54      	subs	r4, r2, #1
   1c6a6:	b16a      	cbz	r2, 1c6c4 <memfile_write+0x28>
        f->bytes_written++;
   1c6a8:	6883      	ldr	r3, [r0, #8]
   1c6aa:	3301      	adds	r3, #1
   1c6ac:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   1c6ae:	68c2      	ldr	r2, [r0, #12]
   1c6b0:	4293      	cmp	r3, r2
   1c6b2:	d8f6      	bhi.n	1c6a2 <memfile_write+0x6>
            *f->buffer++ = *bp++;
   1c6b4:	6843      	ldr	r3, [r0, #4]
   1c6b6:	1c5a      	adds	r2, r3, #1
   1c6b8:	6042      	str	r2, [r0, #4]
   1c6ba:	780a      	ldrb	r2, [r1, #0]
   1c6bc:	701a      	strb	r2, [r3, #0]
            i++;
   1c6be:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   1c6c0:	3101      	adds	r1, #1
   1c6c2:	e7ee      	b.n	1c6a2 <memfile_write+0x6>
        }
    }
    
    return i;
}
   1c6c4:	4628      	mov	r0, r5
   1c6c6:	bc30      	pop	{r4, r5}
   1c6c8:	4770      	bx	lr
	...

0001c6cc <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   1c6cc:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   1c6ce:	4c04      	ldr	r4, [pc, #16]	; (1c6e0 <fmemopen_w+0x14>)
   1c6d0:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   1c6d2:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   1c6d4:	2100      	movs	r1, #0
   1c6d6:	6081      	str	r1, [r0, #8]
    storage->size = size;
   1c6d8:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   1c6da:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c6de:	4770      	bx	lr
   1c6e0:	000222fc 	.word	0x000222fc

0001c6e4 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   1c6e4:	2000      	movs	r0, #0
   1c6e6:	4770      	bx	lr

0001c6e8 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   1c6e8:	b510      	push	{r4, lr}
   1c6ea:	4608      	mov	r0, r1
   1c6ec:	4614      	mov	r4, r2
    console_write(bp, n);
   1c6ee:	4611      	mov	r1, r2
   1c6f0:	f7fd f9b8 	bl	19a64 <console_write>
    return n;
}
   1c6f4:	4620      	mov	r0, r4
   1c6f6:	bd10      	pop	{r4, pc}

0001c6f8 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
   1c6f8:	b508      	push	{r3, lr}
    sysinit();
   1c6fa:	f7fd fa1b 	bl	19b34 <sysinit_start>
   1c6fe:	f000 f81b 	bl	1c738 <sysinit_app>
   1c702:	f7fd fa1d 	bl	19b40 <sysinit_end>
}
   1c706:	bd08      	pop	{r3, pc}

0001c708 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1c708:	b570      	push	{r4, r5, r6, lr}
   1c70a:	b082      	sub	sp, #8
   1c70c:	460c      	mov	r4, r1
   1c70e:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   1c710:	b29d      	uxth	r5, r3
   1c712:	9b07      	ldr	r3, [sp, #28]
   1c714:	9300      	str	r3, [sp, #0]
   1c716:	4603      	mov	r3, r0
   1c718:	9a06      	ldr	r2, [sp, #24]
   1c71a:	4629      	mov	r1, r5
   1c71c:	4620      	mov	r0, r4
   1c71e:	f7fe fdeb 	bl	1b2f8 <os_mempool_init>
    if (rc != 0) {
   1c722:	b108      	cbz	r0, 1c728 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1c724:	b002      	add	sp, #8
   1c726:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1c728:	462b      	mov	r3, r5
   1c72a:	9a06      	ldr	r2, [sp, #24]
   1c72c:	b292      	uxth	r2, r2
   1c72e:	4621      	mov	r1, r4
   1c730:	4630      	mov	r0, r6
   1c732:	f7fe fc96 	bl	1b062 <os_mbuf_pool_init>
   1c736:	e7f5      	b.n	1c724 <mem_init_mbuf_pool+0x1c>

0001c738 <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
   1c738:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1c73a:	f7fe f9f3 	bl	1ab24 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   1c73e:	f001 f985 	bl	1da4c <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   1c742:	f7fd f9a3 	bl	19a8c <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
   1c746:	f001 fac7 	bl	1dcd8 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   1c74a:	f001 f9b7 	bl	1dabc <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   1c74e:	f001 f8e1 	bl	1d914 <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
   1c752:	f001 f8f1 	bl	1d938 <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   1c756:	f001 f8f0 	bl	1d93a <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   1c75a:	f001 f8ef 	bl	1d93c <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
   1c75e:	f001 f8ee 	bl	1d93e <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
   1c762:	f001 f8ed 	bl	1d940 <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   1c766:	f000 fbd1 	bl	1cf0c <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   1c76a:	f000 fd1f 	bl	1d1ac <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   1c76e:	f000 ff3d 	bl	1d5ec <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   1c772:	f000 feb3 	bl	1d4dc <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   1c776:	f000 fe3d 	bl	1d3f4 <init_sensor_coap>
}
   1c77a:	bd08      	pop	{r3, pc}

0001c77c <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   1c77c:	b908      	cbnz	r0, 1c782 <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   1c77e:	4802      	ldr	r0, [pc, #8]	; (1c788 <hal_bsp_flash_dev+0xc>)
   1c780:	4770      	bx	lr
    }

    return NULL;
   1c782:	2000      	movs	r0, #0
}
   1c784:	4770      	bx	lr
   1c786:	bf00      	nop
   1c788:	00022308 	.word	0x00022308

0001c78c <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   1c78c:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   1c78e:	f7eb fd17 	bl	81c0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   1c792:	f000 fbb3 	bl	1cefc <nrf52_periph_create>
}
   1c796:	bd08      	pop	{r3, pc}

0001c798 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   1c798:	2300      	movs	r3, #0
   1c79a:	4a07      	ldr	r2, [pc, #28]	; (1c7b8 <nrf52k_flash_wait_ready+0x20>)
   1c79c:	4293      	cmp	r3, r2
   1c79e:	dc06      	bgt.n	1c7ae <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1c7a0:	4a06      	ldr	r2, [pc, #24]	; (1c7bc <nrf52k_flash_wait_ready+0x24>)
   1c7a2:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1c7a6:	2a01      	cmp	r2, #1
   1c7a8:	d004      	beq.n	1c7b4 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1c7aa:	3301      	adds	r3, #1
   1c7ac:	e7f5      	b.n	1c79a <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1c7ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c7b2:	4770      	bx	lr
            return 0;
   1c7b4:	2000      	movs	r0, #0
}
   1c7b6:	4770      	bx	lr
   1c7b8:	0001869f 	.word	0x0001869f
   1c7bc:	4001e000 	.word	0x4001e000

0001c7c0 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1c7c0:	b538      	push	{r3, r4, r5, lr}
   1c7c2:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1c7c4:	f7ff ffe8 	bl	1c798 <nrf52k_flash_wait_ready>
   1c7c8:	b9f0      	cbnz	r0, 1c808 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1c7ca:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1c7ce:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1c7d0:	4b0f      	ldr	r3, [pc, #60]	; (1c810 <nrf52k_flash_erase_sector+0x50>)
   1c7d2:	2202      	movs	r2, #2
   1c7d4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1c7d8:	f7ff ffde 	bl	1c798 <nrf52k_flash_wait_ready>
   1c7dc:	b148      	cbz	r0, 1c7f2 <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   1c7de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1c7e2:	4a0b      	ldr	r2, [pc, #44]	; (1c810 <nrf52k_flash_erase_sector+0x50>)
   1c7e4:	2100      	movs	r1, #0
   1c7e6:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1c7ea:	b904      	cbnz	r4, 1c7ee <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1c7ec:	b662      	cpsie	i
    return rc;
}
   1c7ee:	4618      	mov	r0, r3
   1c7f0:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   1c7f2:	4b07      	ldr	r3, [pc, #28]	; (1c810 <nrf52k_flash_erase_sector+0x50>)
   1c7f4:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1c7f8:	f7ff ffce 	bl	1c798 <nrf52k_flash_wait_ready>
   1c7fc:	4603      	mov	r3, r0
   1c7fe:	2800      	cmp	r0, #0
   1c800:	d0ef      	beq.n	1c7e2 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1c802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c806:	e7ec      	b.n	1c7e2 <nrf52k_flash_erase_sector+0x22>
        return -1;
   1c808:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c80c:	e7ef      	b.n	1c7ee <nrf52k_flash_erase_sector+0x2e>
   1c80e:	bf00      	nop
   1c810:	4001e000 	.word	0x4001e000

0001c814 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1c814:	2000      	movs	r0, #0
   1c816:	4770      	bx	lr

0001c818 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1c818:	297f      	cmp	r1, #127	; 0x7f
   1c81a:	dc06      	bgt.n	1c82a <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1c81c:	0309      	lsls	r1, r1, #12
   1c81e:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1c820:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1c824:	601a      	str	r2, [r3, #0]
}
   1c826:	2000      	movs	r0, #0
   1c828:	4770      	bx	lr
{
   1c82a:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1c82c:	2300      	movs	r3, #0
   1c82e:	461a      	mov	r2, r3
   1c830:	4619      	mov	r1, r3
   1c832:	4618      	mov	r0, r3
   1c834:	f7fe f818 	bl	1a868 <__assert_func>

0001c838 <nrf52k_flash_write>:
{
   1c838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c83c:	b082      	sub	sp, #8
   1c83e:	460d      	mov	r5, r1
   1c840:	4616      	mov	r6, r2
   1c842:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   1c844:	f7ff ffa8 	bl	1c798 <nrf52k_flash_wait_ready>
   1c848:	2800      	cmp	r0, #0
   1c84a:	d158      	bne.n	1c8fe <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1c84c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1c850:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1c852:	4b2c      	ldr	r3, [pc, #176]	; (1c904 <nrf52k_flash_write+0xcc>)
   1c854:	2201      	movs	r2, #1
   1c856:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1c85a:	f015 0803 	ands.w	r8, r5, #3
   1c85e:	d10b      	bne.n	1c878 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   1c860:	2c03      	cmp	r4, #3
   1c862:	d925      	bls.n	1c8b0 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   1c864:	f7ff ff98 	bl	1c798 <nrf52k_flash_wait_ready>
   1c868:	2800      	cmp	r0, #0
   1c86a:	d139      	bne.n	1c8e0 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   1c86c:	f856 3b04 	ldr.w	r3, [r6], #4
   1c870:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1c874:	3c04      	subs	r4, #4
   1c876:	e7f3      	b.n	1c860 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   1c878:	f7ff ff8e 	bl	1c798 <nrf52k_flash_wait_ready>
   1c87c:	bb68      	cbnz	r0, 1c8da <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   1c87e:	f025 0a03 	bic.w	sl, r5, #3
   1c882:	f8da 3000 	ldr.w	r3, [sl]
   1c886:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   1c888:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   1c88c:	45a1      	cmp	r9, r4
   1c88e:	d900      	bls.n	1c892 <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   1c890:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1c892:	464a      	mov	r2, r9
   1c894:	4631      	mov	r1, r6
   1c896:	ab01      	add	r3, sp, #4
   1c898:	eb03 0008 	add.w	r0, r3, r8
   1c89c:	f7ff fbda 	bl	1c054 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1c8a0:	9b01      	ldr	r3, [sp, #4]
   1c8a2:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   1c8a6:	444d      	add	r5, r9
        num_bytes -= cnt;
   1c8a8:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   1c8ac:	444e      	add	r6, r9
   1c8ae:	e7d7      	b.n	1c860 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1c8b0:	b164      	cbz	r4, 1c8cc <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   1c8b2:	682b      	ldr	r3, [r5, #0]
   1c8b4:	a802      	add	r0, sp, #8
   1c8b6:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   1c8ba:	4622      	mov	r2, r4
   1c8bc:	4631      	mov	r1, r6
   1c8be:	f7ff fbc9 	bl	1c054 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1c8c2:	f7ff ff69 	bl	1c798 <nrf52k_flash_wait_ready>
   1c8c6:	b9b8      	cbnz	r0, 1c8f8 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   1c8c8:	9b01      	ldr	r3, [sp, #4]
   1c8ca:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   1c8cc:	f7ff ff64 	bl	1c798 <nrf52k_flash_wait_ready>
   1c8d0:	4603      	mov	r3, r0
   1c8d2:	b138      	cbz	r0, 1c8e4 <nrf52k_flash_write+0xac>
        rc = -1;
   1c8d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c8d8:	e004      	b.n	1c8e4 <nrf52k_flash_write+0xac>
    int rc = -1;
   1c8da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c8de:	e001      	b.n	1c8e4 <nrf52k_flash_write+0xac>
   1c8e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1c8e4:	4a07      	ldr	r2, [pc, #28]	; (1c904 <nrf52k_flash_write+0xcc>)
   1c8e6:	2100      	movs	r1, #0
   1c8e8:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1c8ec:	b907      	cbnz	r7, 1c8f0 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   1c8ee:	b662      	cpsie	i
}
   1c8f0:	4618      	mov	r0, r3
   1c8f2:	b002      	add	sp, #8
   1c8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1c8f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c8fc:	e7f2      	b.n	1c8e4 <nrf52k_flash_write+0xac>
        return -1;
   1c8fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c902:	e7f5      	b.n	1c8f0 <nrf52k_flash_write+0xb8>
   1c904:	4001e000 	.word	0x4001e000

0001c908 <nrf52k_flash_read>:
{
   1c908:	b508      	push	{r3, lr}
   1c90a:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1c90c:	461a      	mov	r2, r3
   1c90e:	f7ff fba1 	bl	1c054 <memcpy>
}
   1c912:	2000      	movs	r0, #0
   1c914:	bd08      	pop	{r3, pc}
	...

0001c918 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   1c918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1c91a:	f7ff fa3b 	bl	1bd94 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   1c91e:	4b31      	ldr	r3, [pc, #196]	; (1c9e4 <nrf52_timer_handler+0xcc>)
   1c920:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1c924:	4b30      	ldr	r3, [pc, #192]	; (1c9e8 <nrf52_timer_handler+0xd0>)
   1c926:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   1c928:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   1c92c:	d225      	bcs.n	1c97a <nrf52_timer_handler+0x62>
   1c92e:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   1c930:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1c934:	d227      	bcs.n	1c986 <nrf52_timer_handler+0x6e>
    result = x - y;
   1c936:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   1c938:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   1c93c:	d129      	bne.n	1c992 <nrf52_timer_handler+0x7a>
        return (result & 0x007fffff);
   1c93e:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1c942:	4f29      	ldr	r7, [pc, #164]	; (1c9e8 <nrf52_timer_handler+0xd0>)
   1c944:	683c      	ldr	r4, [r7, #0]
   1c946:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   1c94a:	4628      	mov	r0, r5
   1c94c:	f7ff f9b0 	bl	1bcb0 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1c950:	4b24      	ldr	r3, [pc, #144]	; (1c9e4 <nrf52_timer_handler+0xcc>)
   1c952:	2200      	movs	r2, #0
   1c954:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1c958:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1c95a:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1c95c:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1c960:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1c964:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1c966:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   1c968:	f7ff fa1d 	bl	1bda6 <os_arch_in_critical>
   1c96c:	bb28      	cbnz	r0, 1c9ba <nrf52_timer_handler+0xa2>
   1c96e:	2300      	movs	r3, #0
   1c970:	461a      	mov	r2, r3
   1c972:	4619      	mov	r1, r3
   1c974:	4618      	mov	r0, r3
   1c976:	f7fd ff77 	bl	1a868 <__assert_func>
    assert(x <= 0xffffff);
   1c97a:	2300      	movs	r3, #0
   1c97c:	461a      	mov	r2, r3
   1c97e:	4619      	mov	r1, r3
   1c980:	4618      	mov	r0, r3
   1c982:	f7fd ff71 	bl	1a868 <__assert_func>
    assert(y <= 0xffffff);
   1c986:	2300      	movs	r3, #0
   1c988:	461a      	mov	r2, r3
   1c98a:	4619      	mov	r1, r3
   1c98c:	4618      	mov	r0, r3
   1c98e:	f7fd ff6b 	bl	1a868 <__assert_func>
        return (result | 0xff800000);
   1c992:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   1c996:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   1c99a:	e7d2      	b.n	1c942 <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   1c99c:	2300      	movs	r3, #0
   1c99e:	461a      	mov	r2, r3
   1c9a0:	4619      	mov	r1, r3
   1c9a2:	4618      	mov	r0, r3
   1c9a4:	f7fd ff60 	bl	1a868 <__assert_func>
        return (result | 0xff800000);
   1c9a8:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   1c9ac:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   1c9b0:	2a02      	cmp	r2, #2
   1c9b2:	dc13      	bgt.n	1c9dc <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1c9b4:	4a0c      	ldr	r2, [pc, #48]	; (1c9e8 <nrf52_timer_handler+0xd0>)
   1c9b6:	6814      	ldr	r4, [r2, #0]
   1c9b8:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   1c9ba:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1c9be:	4a09      	ldr	r2, [pc, #36]	; (1c9e4 <nrf52_timer_handler+0xcc>)
   1c9c0:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1c9c4:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   1c9c8:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1c9cc:	d2e6      	bcs.n	1c99c <nrf52_timer_handler+0x84>
    result = x - y;
   1c9ce:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   1c9d0:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1c9d4:	d1e8      	bne.n	1c9a8 <nrf52_timer_handler+0x90>
        return (result & 0x007fffff);
   1c9d6:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1c9da:	e7e9      	b.n	1c9b0 <nrf52_timer_handler+0x98>

    OS_EXIT_CRITICAL(sr);
   1c9dc:	4630      	mov	r0, r6
   1c9de:	f7ff f9df 	bl	1bda0 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   1c9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c9e4:	40011000 	.word	0x40011000
   1c9e8:	2000dec4 	.word	0x2000dec4

0001c9ec <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1c9ec:	b538      	push	{r3, r4, r5, lr}
   1c9ee:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1c9f0:	f7ff f9d9 	bl	1bda6 <os_arch_in_critical>
   1c9f4:	b1a0      	cbz	r0, 1ca20 <os_tick_idle+0x34>

    if (ticks > 0) {
   1c9f6:	2d00      	cmp	r5, #0
   1c9f8:	d038      	beq.n	1ca6c <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1c9fa:	4b20      	ldr	r3, [pc, #128]	; (1ca7c <os_tick_idle+0x90>)
   1c9fc:	685b      	ldr	r3, [r3, #4]
   1c9fe:	42ab      	cmp	r3, r5
   1ca00:	d200      	bcs.n	1ca04 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   1ca02:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1ca04:	4b1d      	ldr	r3, [pc, #116]	; (1ca7c <os_tick_idle+0x90>)
   1ca06:	689c      	ldr	r4, [r3, #8]
   1ca08:	681a      	ldr	r2, [r3, #0]
   1ca0a:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   1ca0e:	f7ff f9ca 	bl	1bda6 <os_arch_in_critical>
   1ca12:	b9d0      	cbnz	r0, 1ca4a <os_tick_idle+0x5e>
   1ca14:	2300      	movs	r3, #0
   1ca16:	461a      	mov	r2, r3
   1ca18:	4619      	mov	r1, r3
   1ca1a:	4618      	mov	r0, r3
   1ca1c:	f7fd ff24 	bl	1a868 <__assert_func>
    OS_ASSERT_CRITICAL();
   1ca20:	2300      	movs	r3, #0
   1ca22:	461a      	mov	r2, r3
   1ca24:	4619      	mov	r1, r3
   1ca26:	4618      	mov	r0, r3
   1ca28:	f7fd ff1e 	bl	1a868 <__assert_func>
    assert(y <= 0xffffff);
   1ca2c:	2300      	movs	r3, #0
   1ca2e:	461a      	mov	r2, r3
   1ca30:	4619      	mov	r1, r3
   1ca32:	4618      	mov	r0, r3
   1ca34:	f7fd ff18 	bl	1a868 <__assert_func>
        return (result | 0xff800000);
   1ca38:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1ca3c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   1ca40:	2b02      	cmp	r3, #2
   1ca42:	dc13      	bgt.n	1ca6c <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1ca44:	4b0d      	ldr	r3, [pc, #52]	; (1ca7c <os_tick_idle+0x90>)
   1ca46:	681c      	ldr	r4, [r3, #0]
   1ca48:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1ca4a:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1ca4e:	4b0c      	ldr	r3, [pc, #48]	; (1ca80 <os_tick_idle+0x94>)
   1ca50:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1ca54:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1ca58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1ca5c:	d2e6      	bcs.n	1ca2c <os_tick_idle+0x40>
    result = x - y;
   1ca5e:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1ca60:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1ca64:	d1e8      	bne.n	1ca38 <os_tick_idle+0x4c>
        return (result & 0x007fffff);
   1ca66:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1ca6a:	e7e9      	b.n	1ca40 <os_tick_idle+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
   1ca6c:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1ca70:	bf30      	wfi

    if (ticks > 0) {
   1ca72:	b905      	cbnz	r5, 1ca76 <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1ca74:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1ca76:	f7ff ff4f 	bl	1c918 <nrf52_timer_handler>
}
   1ca7a:	e7fb      	b.n	1ca74 <os_tick_idle+0x88>
   1ca7c:	2000dec4 	.word	0x2000dec4
   1ca80:	40011000 	.word	0x40011000

0001ca84 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1ca84:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1ca86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1ca8a:	fbb3 f3f0 	udiv	r3, r3, r0
   1ca8e:	fb00 f303 	mul.w	r3, r0, r3
   1ca92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ca96:	d136      	bne.n	1cb06 <os_tick_init+0x82>
   1ca98:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1ca9a:	4d1e      	ldr	r5, [pc, #120]	; (1cb14 <os_tick_init+0x90>)
   1ca9c:	2600      	movs	r6, #0
   1ca9e:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1caa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1caa4:	fbb3 f0f0 	udiv	r0, r3, r0
   1caa8:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1caaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1caae:	fbb3 f0f0 	udiv	r0, r3, r0
   1cab2:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1cab4:	f7ff f96e 	bl	1bd94 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1cab8:	0164      	lsls	r4, r4, #5
   1caba:	b2e4      	uxtb	r4, r4
   1cabc:	4b16      	ldr	r3, [pc, #88]	; (1cb18 <os_tick_init+0x94>)
   1cabe:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1cac2:	4a16      	ldr	r2, [pc, #88]	; (1cb1c <os_tick_init+0x98>)
   1cac4:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1cac6:	4916      	ldr	r1, [pc, #88]	; (1cb20 <os_tick_init+0x9c>)
   1cac8:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cacc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1cad0:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1cad2:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1cad6:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1cada:	2201      	movs	r2, #1
   1cadc:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1cade:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1cae0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cae4:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1cae8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1caec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1caf0:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1caf4:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1caf8:	6829      	ldr	r1, [r5, #0]
   1cafa:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1cafe:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1cb00:	f7ff f94e 	bl	1bda0 <os_arch_restore_sr>
}
   1cb04:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1cb06:	2300      	movs	r3, #0
   1cb08:	461a      	mov	r2, r3
   1cb0a:	4619      	mov	r1, r3
   1cb0c:	4618      	mov	r0, r3
   1cb0e:	f7fd feab 	bl	1a868 <__assert_func>
   1cb12:	bf00      	nop
   1cb14:	2000dec4 	.word	0x2000dec4
   1cb18:	e000e100 	.word	0xe000e100
   1cb1c:	e000ed00 	.word	0xe000ed00
   1cb20:	0001c919 	.word	0x0001c919

0001cb24 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1cb24:	2301      	movs	r3, #1
   1cb26:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1cb28:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1cb2c:	4770      	bx	lr
	...

0001cb30 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1cb30:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1cb32:	7883      	ldrb	r3, [r0, #2]
   1cb34:	b393      	cbz	r3, 1cb9c <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1cb36:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1cb38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1cb3c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1cb40:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1cb42:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1cb46:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1cb4a:	b11d      	cbz	r5, 1cb54 <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
   1cb4c:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1cb50:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1cb54:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1cb56:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1cb58:	2b02      	cmp	r3, #2
   1cb5a:	dc0e      	bgt.n	1cb7a <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1cb5c:	7842      	ldrb	r2, [r0, #1]
   1cb5e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1cb60:	2b00      	cmp	r3, #0
   1cb62:	db15      	blt.n	1cb90 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cb64:	f002 021f 	and.w	r2, r2, #31
   1cb68:	095b      	lsrs	r3, r3, #5
   1cb6a:	2101      	movs	r1, #1
   1cb6c:	fa01 f202 	lsl.w	r2, r1, r2
   1cb70:	3340      	adds	r3, #64	; 0x40
   1cb72:	491b      	ldr	r1, [pc, #108]	; (1cbe0 <nrf_timer_set_ocmp+0xb0>)
   1cb74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1cb78:	e00a      	b.n	1cb90 <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
   1cb7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1cb7e:	d208      	bcs.n	1cb92 <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1cb80:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1cb84:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1cb88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1cb8c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1cb90:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1cb92:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1cb96:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1cb9a:	e7f5      	b.n	1cb88 <nrf_timer_set_ocmp+0x58>
   1cb9c:	460d      	mov	r5, r1
   1cb9e:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1cba0:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1cba2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1cba6:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1cbaa:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1cbae:	2200      	movs	r2, #0
   1cbb0:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1cbb4:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1cbb8:	f7ff ffb4 	bl	1cb24 <nrf_read_timer_cntr>
   1cbbc:	1b40      	subs	r0, r0, r5
   1cbbe:	2800      	cmp	r0, #0
   1cbc0:	dbe6      	blt.n	1cb90 <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1cbc2:	7862      	ldrb	r2, [r4, #1]
   1cbc4:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1cbc6:	2b00      	cmp	r3, #0
   1cbc8:	dbe2      	blt.n	1cb90 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cbca:	f002 021f 	and.w	r2, r2, #31
   1cbce:	095b      	lsrs	r3, r3, #5
   1cbd0:	2101      	movs	r1, #1
   1cbd2:	fa01 f202 	lsl.w	r2, r1, r2
   1cbd6:	3340      	adds	r3, #64	; 0x40
   1cbd8:	4901      	ldr	r1, [pc, #4]	; (1cbe0 <nrf_timer_set_ocmp+0xb0>)
   1cbda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1cbde:	e7d7      	b.n	1cb90 <nrf_timer_set_ocmp+0x60>
   1cbe0:	e000e100 	.word	0xe000e100

0001cbe4 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1cbe4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1cbe8:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1cbec:	4770      	bx	lr

0001cbee <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1cbee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1cbf2:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1cbf6:	4770      	bx	lr

0001cbf8 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1cbf8:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1cbfa:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1cbfc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1cc00:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1cc02:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1cc04:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1cc08:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1cc0c:	b1ad      	cbz	r5, 1cc3a <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1cc0e:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1cc12:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1cc14:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1cc18:	2500      	movs	r5, #0
   1cc1a:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1cc1e:	7840      	ldrb	r0, [r0, #1]
   1cc20:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1cc22:	42aa      	cmp	r2, r5
   1cc24:	db09      	blt.n	1cc3a <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cc26:	f000 001f 	and.w	r0, r0, #31
   1cc2a:	0952      	lsrs	r2, r2, #5
   1cc2c:	2501      	movs	r5, #1
   1cc2e:	fa05 f000 	lsl.w	r0, r5, r0
   1cc32:	3240      	adds	r2, #64	; 0x40
   1cc34:	4d04      	ldr	r5, [pc, #16]	; (1cc48 <hal_timer_read_bsptimer+0x50>)
   1cc36:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1cc3a:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1cc3e:	b904      	cbnz	r4, 1cc42 <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1cc40:	b662      	cpsie	i

    return tcntr;
}
   1cc42:	bc30      	pop	{r4, r5}
   1cc44:	4770      	bx	lr
   1cc46:	bf00      	nop
   1cc48:	e000e100 	.word	0xe000e100

0001cc4c <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1cc4c:	b570      	push	{r4, r5, r6, lr}
   1cc4e:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1cc50:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1cc54:	b672      	cpsid	i
   1cc56:	e013      	b.n	1cc80 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1cc58:	6928      	ldr	r0, [r5, #16]
   1cc5a:	f7ff ff63 	bl	1cb24 <nrf_read_timer_cntr>
            delta = 0;
   1cc5e:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1cc60:	68e3      	ldr	r3, [r4, #12]
   1cc62:	1ac0      	subs	r0, r0, r3
   1cc64:	4290      	cmp	r0, r2
   1cc66:	db19      	blt.n	1cc9c <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1cc68:	6923      	ldr	r3, [r4, #16]
   1cc6a:	b1a3      	cbz	r3, 1cc96 <hal_timer_chk_queue+0x4a>
   1cc6c:	6962      	ldr	r2, [r4, #20]
   1cc6e:	615a      	str	r2, [r3, #20]
   1cc70:	6963      	ldr	r3, [r4, #20]
   1cc72:	6922      	ldr	r2, [r4, #16]
   1cc74:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1cc76:	2300      	movs	r3, #0
   1cc78:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1cc7a:	6863      	ldr	r3, [r4, #4]
   1cc7c:	68a0      	ldr	r0, [r4, #8]
   1cc7e:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1cc80:	696c      	ldr	r4, [r5, #20]
   1cc82:	b15c      	cbz	r4, 1cc9c <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1cc84:	78ab      	ldrb	r3, [r5, #2]
   1cc86:	2b00      	cmp	r3, #0
   1cc88:	d0e6      	beq.n	1cc58 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1cc8a:	4628      	mov	r0, r5
   1cc8c:	f7ff ffb4 	bl	1cbf8 <hal_timer_read_bsptimer>
            delta = -3;
   1cc90:	f06f 0202 	mvn.w	r2, #2
   1cc94:	e7e4      	b.n	1cc60 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1cc96:	6963      	ldr	r3, [r4, #20]
   1cc98:	61ab      	str	r3, [r5, #24]
   1cc9a:	e7e9      	b.n	1cc70 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1cc9c:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1cc9e:	b133      	cbz	r3, 1ccae <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1cca0:	68d9      	ldr	r1, [r3, #12]
   1cca2:	4628      	mov	r0, r5
   1cca4:	f7ff ff44 	bl	1cb30 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1cca8:	b906      	cbnz	r6, 1ccac <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1ccaa:	b662      	cpsie	i
}
   1ccac:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1ccae:	78ab      	ldrb	r3, [r5, #2]
   1ccb0:	b11b      	cbz	r3, 1ccba <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1ccb2:	6928      	ldr	r0, [r5, #16]
   1ccb4:	f7ff ff9b 	bl	1cbee <nrf_rtc_disable_ocmp>
   1ccb8:	e7f6      	b.n	1cca8 <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1ccba:	6928      	ldr	r0, [r5, #16]
   1ccbc:	f7ff ff92 	bl	1cbe4 <nrf_timer_disable_ocmp>
   1ccc0:	e7f2      	b.n	1cca8 <hal_timer_chk_queue+0x5c>

0001ccc2 <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1ccc2:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1ccc4:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1ccc6:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1ccca:	b113      	cbz	r3, 1ccd2 <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1cccc:	2300      	movs	r3, #0
   1ccce:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1ccd2:	6883      	ldr	r3, [r0, #8]
   1ccd4:	3301      	adds	r3, #1
   1ccd6:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1ccd8:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1ccdc:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1cce0:	d100      	bne.n	1cce4 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1cce2:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1cce4:	f7ff ffb2 	bl	1cc4c <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1cce8:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1ccec:	e7f9      	b.n	1cce2 <hal_timer_irq_handler+0x20>
	...

0001ccf0 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1ccf0:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1ccf2:	4802      	ldr	r0, [pc, #8]	; (1ccfc <nrf52_timer0_irq_handler+0xc>)
   1ccf4:	f7ff ffe5 	bl	1ccc2 <hal_timer_irq_handler>
}
   1ccf8:	bd08      	pop	{r3, pc}
   1ccfa:	bf00      	nop
   1ccfc:	2000ded0 	.word	0x2000ded0

0001cd00 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1cd00:	2805      	cmp	r0, #5
   1cd02:	dc1c      	bgt.n	1cd3e <hal_timer_init+0x3e>
   1cd04:	4b12      	ldr	r3, [pc, #72]	; (1cd50 <hal_timer_init+0x50>)
   1cd06:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1cd0a:	b1d3      	cbz	r3, 1cd42 <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1cd0c:	781a      	ldrb	r2, [r3, #0]
   1cd0e:	b9d2      	cbnz	r2, 1cd46 <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1cd10:	b9d8      	cbnz	r0, 1cd4a <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1cd12:	4a10      	ldr	r2, [pc, #64]	; (1cd54 <hal_timer_init+0x54>)
   1cd14:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1cd16:	2208      	movs	r2, #8
   1cd18:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1cd1a:	4b0f      	ldr	r3, [pc, #60]	; (1cd58 <hal_timer_init+0x58>)
   1cd1c:	f44f 7280 	mov.w	r2, #256	; 0x100
   1cd20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1cd24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1cd28:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1cd2c:	22e0      	movs	r2, #224	; 0xe0
   1cd2e:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1cd32:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1cd36:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1cd38:	4a08      	ldr	r2, [pc, #32]	; (1cd5c <hal_timer_init+0x5c>)
   1cd3a:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1cd3c:	4770      	bx	lr

err:
    return rc;
   1cd3e:	2016      	movs	r0, #22
   1cd40:	4770      	bx	lr
   1cd42:	2016      	movs	r0, #22
   1cd44:	4770      	bx	lr
   1cd46:	2016      	movs	r0, #22
   1cd48:	4770      	bx	lr
   1cd4a:	2016      	movs	r0, #22
}
   1cd4c:	4770      	bx	lr
   1cd4e:	bf00      	nop
   1cd50:	0002233c 	.word	0x0002233c
   1cd54:	40008000 	.word	0x40008000
   1cd58:	e000e100 	.word	0xe000e100
   1cd5c:	0001ccf1 	.word	0x0001ccf1

0001cd60 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1cd60:	2805      	cmp	r0, #5
   1cd62:	dc65      	bgt.n	1ce30 <hal_timer_config+0xd0>
   1cd64:	4b39      	ldr	r3, [pc, #228]	; (1ce4c <hal_timer_config+0xec>)
   1cd66:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1cd6a:	2800      	cmp	r0, #0
   1cd6c:	d062      	beq.n	1ce34 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1cd6e:	4b38      	ldr	r3, [pc, #224]	; (1ce50 <hal_timer_config+0xf0>)
   1cd70:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1cd74:	7803      	ldrb	r3, [r0, #0]
   1cd76:	2b00      	cmp	r3, #0
   1cd78:	d15e      	bne.n	1ce38 <hal_timer_config+0xd8>
   1cd7a:	2900      	cmp	r1, #0
   1cd7c:	d05e      	beq.n	1ce3c <hal_timer_config+0xdc>
   1cd7e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1cd82:	d85d      	bhi.n	1ce40 <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
   1cd84:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1cd86:	2a00      	cmp	r2, #0
   1cd88:	d05c      	beq.n	1ce44 <hal_timer_config+0xe4>
{
   1cd8a:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1cd8c:	2901      	cmp	r1, #1
   1cd8e:	d013      	beq.n	1cdb8 <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1cd90:	2301      	movs	r3, #1
   1cd92:	2b09      	cmp	r3, #9
   1cd94:	d810      	bhi.n	1cdb8 <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
   1cd96:	2201      	movs	r2, #1
   1cd98:	409a      	lsls	r2, r3
   1cd9a:	428a      	cmp	r2, r1
   1cd9c:	d202      	bcs.n	1cda4 <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1cd9e:	3301      	adds	r3, #1
   1cda0:	b2db      	uxtb	r3, r3
   1cda2:	e7f6      	b.n	1cd92 <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
   1cda4:	1e5c      	subs	r4, r3, #1
   1cda6:	2501      	movs	r5, #1
   1cda8:	fa05 f404 	lsl.w	r4, r5, r4
   1cdac:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
   1cdae:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1cdb0:	428c      	cmp	r4, r1
   1cdb2:	d201      	bcs.n	1cdb8 <hal_timer_config+0x58>
                    prescaler -= 1;
   1cdb4:	3b01      	subs	r3, #1
   1cdb6:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1cdb8:	4a25      	ldr	r2, [pc, #148]	; (1ce50 <hal_timer_config+0xf0>)
   1cdba:	411a      	asrs	r2, r3
   1cdbc:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
   1cdbe:	2201      	movs	r2, #1
   1cdc0:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1cdc2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1cdc6:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1cdc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1cdcc:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1cdd0:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1cdd4:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1cdd8:	d00c      	beq.n	1cdf4 <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1cdda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1cdde:	2100      	movs	r1, #0
   1cde0:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1cde4:	2101      	movs	r1, #1
   1cde6:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1cde8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1cdec:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1cdf0:	2a00      	cmp	r2, #0
   1cdf2:	d0f9      	beq.n	1cde8 <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1cdf4:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1cdf6:	2101      	movs	r1, #1
   1cdf8:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1cdfa:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1cdfc:	2500      	movs	r5, #0
   1cdfe:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1ce02:	2503      	movs	r5, #3
   1ce04:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1ce08:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1ce0c:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1ce0e:	7842      	ldrb	r2, [r0, #1]
   1ce10:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1ce12:	2b00      	cmp	r3, #0
   1ce14:	db07      	blt.n	1ce26 <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ce16:	f002 021f 	and.w	r2, r2, #31
   1ce1a:	095b      	lsrs	r3, r3, #5
   1ce1c:	fa01 f202 	lsl.w	r2, r1, r2
   1ce20:	490c      	ldr	r1, [pc, #48]	; (1ce54 <hal_timer_config+0xf4>)
   1ce22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1ce26:	b97c      	cbnz	r4, 1ce48 <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
   1ce28:	b662      	cpsie	i

    return 0;
   1ce2a:	2000      	movs	r0, #0

err:
    return rc;
}
   1ce2c:	bc30      	pop	{r4, r5}
   1ce2e:	4770      	bx	lr
    return rc;
   1ce30:	2016      	movs	r0, #22
   1ce32:	4770      	bx	lr
   1ce34:	2016      	movs	r0, #22
   1ce36:	4770      	bx	lr
   1ce38:	2016      	movs	r0, #22
   1ce3a:	4770      	bx	lr
   1ce3c:	2016      	movs	r0, #22
   1ce3e:	4770      	bx	lr
   1ce40:	2016      	movs	r0, #22
   1ce42:	4770      	bx	lr
   1ce44:	2016      	movs	r0, #22
}
   1ce46:	4770      	bx	lr
    return 0;
   1ce48:	2000      	movs	r0, #0
   1ce4a:	e7ef      	b.n	1ce2c <hal_timer_config+0xcc>
   1ce4c:	0002233c 	.word	0x0002233c
   1ce50:	00f42400 	.word	0x00f42400
   1ce54:	e000e100 	.word	0xe000e100

0001ce58 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1ce58:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1ce5a:	2805      	cmp	r0, #5
   1ce5c:	dc0c      	bgt.n	1ce78 <hal_timer_read+0x20>
   1ce5e:	4b09      	ldr	r3, [pc, #36]	; (1ce84 <hal_timer_read+0x2c>)
   1ce60:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1ce64:	b140      	cbz	r0, 1ce78 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1ce66:	7883      	ldrb	r3, [r0, #2]
   1ce68:	b91b      	cbnz	r3, 1ce72 <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1ce6a:	6900      	ldr	r0, [r0, #16]
   1ce6c:	f7ff fe5a 	bl	1cb24 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1ce70:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1ce72:	f7ff fec1 	bl	1cbf8 <hal_timer_read_bsptimer>
   1ce76:	e7fb      	b.n	1ce70 <hal_timer_read+0x18>
    assert(0);
   1ce78:	2300      	movs	r3, #0
   1ce7a:	461a      	mov	r2, r3
   1ce7c:	4619      	mov	r1, r3
   1ce7e:	4618      	mov	r0, r3
   1ce80:	f7fd fcf2 	bl	1a868 <__assert_func>
   1ce84:	0002233c 	.word	0x0002233c

0001ce88 <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
   1ce88:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1ce8a:	2100      	movs	r1, #0
   1ce8c:	4608      	mov	r0, r1
   1ce8e:	f7ff ff37 	bl	1cd00 <hal_timer_init>
    assert(rc == 0);
   1ce92:	b920      	cbnz	r0, 1ce9e <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1ce94:	4808      	ldr	r0, [pc, #32]	; (1ceb8 <nrf52_periph_create_timers+0x30>)
   1ce96:	f7fd ff11 	bl	1acbc <os_cputime_init>
    assert(rc == 0);
   1ce9a:	b930      	cbnz	r0, 1ceaa <nrf52_periph_create_timers+0x22>
#endif
}
   1ce9c:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1ce9e:	2300      	movs	r3, #0
   1cea0:	461a      	mov	r2, r3
   1cea2:	4619      	mov	r1, r3
   1cea4:	4618      	mov	r0, r3
   1cea6:	f7fd fcdf 	bl	1a868 <__assert_func>
    assert(rc == 0);
   1ceaa:	2300      	movs	r3, #0
   1ceac:	461a      	mov	r2, r3
   1ceae:	4619      	mov	r1, r3
   1ceb0:	4618      	mov	r0, r3
   1ceb2:	f7fd fcd9 	bl	1a868 <__assert_func>
   1ceb6:	bf00      	nop
   1ceb8:	000f4240 	.word	0x000f4240

0001cebc <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   1cebc:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   1cebe:	4906      	ldr	r1, [pc, #24]	; (1ced8 <nrf52_periph_create_i2c+0x1c>)
   1cec0:	2001      	movs	r0, #1
   1cec2:	f7fd f82b 	bl	19f1c <hal_i2c_init>
    assert(rc == 0);
   1cec6:	b900      	cbnz	r0, 1ceca <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   1cec8:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1ceca:	2300      	movs	r3, #0
   1cecc:	461a      	mov	r2, r3
   1cece:	4619      	mov	r1, r3
   1ced0:	4618      	mov	r0, r3
   1ced2:	f7fd fcc9 	bl	1a868 <__assert_func>
   1ced6:	bf00      	nop
   1ced8:	00022354 	.word	0x00022354

0001cedc <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   1cedc:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1cede:	2200      	movs	r2, #0
   1cee0:	4905      	ldr	r1, [pc, #20]	; (1cef8 <nrf52_periph_create_spi+0x1c>)
   1cee2:	4610      	mov	r0, r2
   1cee4:	f7fd fb4e 	bl	1a584 <hal_spi_init>
    assert(rc == 0);
   1cee8:	b900      	cbnz	r0, 1ceec <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
   1ceea:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1ceec:	2300      	movs	r3, #0
   1ceee:	461a      	mov	r2, r3
   1cef0:	4619      	mov	r1, r3
   1cef2:	4618      	mov	r0, r3
   1cef4:	f7fd fcb8 	bl	1a868 <__assert_func>
   1cef8:	00022360 	.word	0x00022360

0001cefc <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1cefc:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1cefe:	f7ff ffc3 	bl	1ce88 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1cf02:	f7ff ffdb 	bl	1cebc <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1cf06:	f7ff ffe9 	bl	1cedc <nrf52_periph_create_spi>
}
   1cf0a:	bd08      	pop	{r3, pc}

0001cf0c <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1cf0c:	4770      	bx	lr
	...

0001cf10 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   1cf10:	4b08      	ldr	r3, [pc, #32]	; (1cf34 <sensor_mgr_remove+0x24>)
   1cf12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1cf14:	4282      	cmp	r2, r0
   1cf16:	d104      	bne.n	1cf22 <sensor_mgr_remove+0x12>
   1cf18:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   1cf1c:	631a      	str	r2, [r3, #48]	; 0x30
   1cf1e:	4770      	bx	lr
   1cf20:	461a      	mov	r2, r3
   1cf22:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1cf26:	4283      	cmp	r3, r0
   1cf28:	d1fa      	bne.n	1cf20 <sensor_mgr_remove+0x10>
   1cf2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1cf2e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1cf32:	4770      	bx	lr
   1cf34:	2000def0 	.word	0x2000def0

0001cf38 <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   1cf38:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   1cf3a:	6a03      	ldr	r3, [r0, #32]
   1cf3c:	b993      	cbnz	r3, 1cf64 <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1cf3e:	4b15      	ldr	r3, [pc, #84]	; (1cf94 <sensor_mgr_insert+0x5c>)
   1cf40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1cf42:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1cf44:	e002      	b.n	1cf4c <sensor_mgr_insert+0x14>
            prev = cursor;
   1cf46:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1cf48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1cf4c:	2b00      	cmp	r3, #0
   1cf4e:	d1fa      	bne.n	1cf46 <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   1cf50:	b1c9      	cbz	r1, 1cf86 <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1cf52:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1cf56:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   1cf5a:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   1cf5e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1cf62:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1cf64:	4b0b      	ldr	r3, [pc, #44]	; (1cf94 <sensor_mgr_insert+0x5c>)
   1cf66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1cf68:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1cf6a:	2b00      	cmp	r3, #0
   1cf6c:	d0f0      	beq.n	1cf50 <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   1cf6e:	6a1a      	ldr	r2, [r3, #32]
   1cf70:	2a00      	cmp	r2, #0
   1cf72:	d0ed      	beq.n	1cf50 <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   1cf74:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1cf76:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1cf78:	1b12      	subs	r2, r2, r4
   1cf7a:	2a00      	cmp	r2, #0
   1cf7c:	dbe8      	blt.n	1cf50 <sensor_mgr_insert+0x18>
        prev = cursor;
   1cf7e:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1cf80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1cf84:	e7f1      	b.n	1cf6a <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   1cf86:	4b03      	ldr	r3, [pc, #12]	; (1cf94 <sensor_mgr_insert+0x5c>)
   1cf88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1cf8a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   1cf8e:	6318      	str	r0, [r3, #48]	; 0x30
   1cf90:	e7e5      	b.n	1cf5e <sensor_mgr_insert+0x26>
   1cf92:	bf00      	nop
   1cf94:	2000def0 	.word	0x2000def0

0001cf98 <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   1cf98:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   1cf9a:	fab0 f080 	clz	r0, r0
   1cf9e:	0940      	lsrs	r0, r0, #5
   1cfa0:	4770      	bx	lr
	...

0001cfa4 <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   1cfa4:	4b01      	ldr	r3, [pc, #4]	; (1cfac <sensor_mgr_evq_set+0x8>)
   1cfa6:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   1cfa8:	4770      	bx	lr
   1cfaa:	bf00      	nop
   1cfac:	2000def0 	.word	0x2000def0

0001cfb0 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   1cfb0:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   1cfb4:	e9d1 2300 	ldrd	r2, r3, [r1]
   1cfb8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1cfbc:	ea02 0b04 	and.w	fp, r2, r4
   1cfc0:	ea03 0c05 	and.w	ip, r3, r5
   1cfc4:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   1cfc8:	ea0b 0200 	and.w	r2, fp, r0
   1cfcc:	ea0c 0301 	and.w	r3, ip, r1
   1cfd0:	4313      	orrs	r3, r2
}
   1cfd2:	bf14      	ite	ne
   1cfd4:	2001      	movne	r0, #1
   1cfd6:	2000      	moveq	r0, #0
   1cfd8:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1cfdc:	4770      	bx	lr

0001cfde <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   1cfde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cfe2:	b083      	sub	sp, #12
   1cfe4:	4605      	mov	r5, r0
   1cfe6:	4689      	mov	r9, r1
   1cfe8:	4690      	mov	r8, r2
   1cfea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   1cfee:	790b      	ldrb	r3, [r1, #4]
   1cff0:	2b01      	cmp	r3, #1
   1cff2:	d013      	beq.n	1d01c <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1cff4:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1cff6:	e000      	b.n	1cffa <sensor_read_data_func+0x1c>
   1cff8:	6924      	ldr	r4, [r4, #16]
   1cffa:	b17c      	cbz	r4, 1d01c <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   1cffc:	e9d4 0100 	ldrd	r0, r1, [r4]
   1d000:	ea00 0206 	and.w	r2, r0, r6
   1d004:	ea01 0307 	and.w	r3, r1, r7
   1d008:	4313      	orrs	r3, r2
   1d00a:	d0f5      	beq.n	1cff8 <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   1d00c:	68a3      	ldr	r3, [r4, #8]
   1d00e:	68e1      	ldr	r1, [r4, #12]
   1d010:	e9cd 6700 	strd	r6, r7, [sp]
   1d014:	4642      	mov	r2, r8
   1d016:	4628      	mov	r0, r5
   1d018:	4798      	blx	r3
   1d01a:	e7ed      	b.n	1cff8 <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   1d01c:	f8d9 3000 	ldr.w	r3, [r9]
   1d020:	b14b      	cbz	r3, 1d036 <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1d022:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1d026:	e9cd 6700 	strd	r6, r7, [sp]
   1d02a:	4642      	mov	r2, r8
   1d02c:	4628      	mov	r0, r5
   1d02e:	4798      	blx	r3
    }

    return (0);
}
   1d030:	b003      	add	sp, #12
   1d032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1d036:	2000      	movs	r0, #0
   1d038:	e7fa      	b.n	1d030 <sensor_read_data_func+0x52>
	...

0001d03c <sensor_base_ts_update_event>:
{
   1d03c:	b530      	push	{r4, r5, lr}
   1d03e:	b087      	sub	sp, #28
    ticks = os_time_get();
   1d040:	f7fe fe30 	bl	1bca4 <os_time_get>
   1d044:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1d046:	a901      	add	r1, sp, #4
   1d048:	a802      	add	r0, sp, #8
   1d04a:	f7fe fe65 	bl	1bd18 <os_gettimeofday>
    if (rc) {
   1d04e:	b138      	cbz	r0, 1d060 <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   1d050:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1d054:	4621      	mov	r1, r4
   1d056:	4809      	ldr	r0, [pc, #36]	; (1d07c <sensor_base_ts_update_event+0x40>)
   1d058:	f7fd fdac 	bl	1abb4 <os_callout_reset>
}
   1d05c:	b007      	add	sp, #28
   1d05e:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   1d060:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   1d064:	4d06      	ldr	r5, [pc, #24]	; (1d080 <sensor_base_ts_update_event+0x44>)
   1d066:	ab06      	add	r3, sp, #24
   1d068:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1d06c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1d070:	9b01      	ldr	r3, [sp, #4]
   1d072:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1d074:	f7fd fe28 	bl	1acc8 <os_cputime_get32>
   1d078:	6168      	str	r0, [r5, #20]
   1d07a:	e7eb      	b.n	1d054 <sensor_base_ts_update_event+0x18>
   1d07c:	2000df24 	.word	0x2000df24
   1d080:	2000df48 	.word	0x2000df48

0001d084 <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   1d084:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1d088:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   1d08a:	f7fd fe1d 	bl	1acc8 <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   1d08e:	4a0e      	ldr	r2, [pc, #56]	; (1d0c8 <sensor_up_timestamp+0x44>)
   1d090:	6955      	ldr	r5, [r2, #20]
   1d092:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   1d094:	6460      	str	r0, [r4, #68]	; 0x44
   1d096:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1d098:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1d09c:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1d09e:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1d0a0:	4b0a      	ldr	r3, [pc, #40]	; (1d0cc <sensor_up_timestamp+0x48>)
   1d0a2:	fba3 c305 	umull	ip, r3, r3, r5
   1d0a6:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1d0a8:	eb10 0b03 	adds.w	fp, r0, r3
   1d0ac:	f141 0c00 	adc.w	ip, r1, #0
   1d0b0:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   1d0b4:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   1d0b8:	4905      	ldr	r1, [pc, #20]	; (1d0d0 <sensor_up_timestamp+0x4c>)
   1d0ba:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
   1d0be:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1d0c0:	63a1      	str	r1, [r4, #56]	; 0x38

}
   1d0c2:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1d0c6:	bf00      	nop
   1d0c8:	2000df48 	.word	0x2000df48
   1d0cc:	431bde83 	.word	0x431bde83
   1d0d0:	000f4240 	.word	0x000f4240

0001d0d4 <sensor_mgr_lock>:
{
   1d0d4:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1d0d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d0da:	4804      	ldr	r0, [pc, #16]	; (1d0ec <sensor_mgr_lock+0x18>)
   1d0dc:	f7fe fa5c 	bl	1b598 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1d0e0:	b108      	cbz	r0, 1d0e6 <sensor_mgr_lock+0x12>
   1d0e2:	2809      	cmp	r0, #9
   1d0e4:	d000      	beq.n	1d0e8 <sensor_mgr_lock+0x14>
}
   1d0e6:	bd08      	pop	{r3, pc}
        return (0);
   1d0e8:	2000      	movs	r0, #0
   1d0ea:	e7fc      	b.n	1d0e6 <sensor_mgr_lock+0x12>
   1d0ec:	2000def0 	.word	0x2000def0

0001d0f0 <sensor_mgr_unlock>:
{
   1d0f0:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1d0f2:	4802      	ldr	r0, [pc, #8]	; (1d0fc <sensor_mgr_unlock+0xc>)
   1d0f4:	f7fe f9f4 	bl	1b4e0 <os_mutex_release>
}
   1d0f8:	bd08      	pop	{r3, pc}
   1d0fa:	bf00      	nop
   1d0fc:	2000def0 	.word	0x2000def0

0001d100 <sensor_mgr_evq_get>:
}
   1d100:	4b01      	ldr	r3, [pc, #4]	; (1d108 <sensor_mgr_evq_get+0x8>)
   1d102:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1d104:	4770      	bx	lr
   1d106:	bf00      	nop
   1d108:	2000def0 	.word	0x2000def0

0001d10c <sensor_mgr_init>:
{
   1d10c:	b570      	push	{r4, r5, r6, lr}
   1d10e:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1d110:	f7fd ff68 	bl	1afe4 <os_eventq_dflt_get>
   1d114:	f7ff ff46 	bl	1cfa4 <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   1d118:	4b1c      	ldr	r3, [pc, #112]	; (1d18c <sensor_mgr_init+0x80>)
   1d11a:	9300      	str	r3, [sp, #0]
   1d11c:	4b1c      	ldr	r3, [pc, #112]	; (1d190 <sensor_mgr_init+0x84>)
   1d11e:	2218      	movs	r2, #24
   1d120:	2105      	movs	r1, #5
   1d122:	481c      	ldr	r0, [pc, #112]	; (1d194 <sensor_mgr_init+0x88>)
   1d124:	f7fe f8e8 	bl	1b2f8 <os_mempool_init>
    assert(rc == OS_OK);
   1d128:	bb50      	cbnz	r0, 1d180 <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   1d12a:	f7ff ffe9 	bl	1d100 <sensor_mgr_evq_get>
   1d12e:	4e1a      	ldr	r6, [pc, #104]	; (1d198 <sensor_mgr_init+0x8c>)
   1d130:	2300      	movs	r3, #0
   1d132:	4a1a      	ldr	r2, [pc, #104]	; (1d19c <sensor_mgr_init+0x90>)
   1d134:	4601      	mov	r1, r0
   1d136:	4630      	mov	r0, r6
   1d138:	f7fd fd10 	bl	1ab5c <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   1d13c:	ad04      	add	r5, sp, #16
   1d13e:	a903      	add	r1, sp, #12
   1d140:	4628      	mov	r0, r5
   1d142:	f7fe fde9 	bl	1bd18 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1d146:	4c16      	ldr	r4, [pc, #88]	; (1d1a0 <sensor_mgr_init+0x94>)
   1d148:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1d14c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1d150:	9b03      	ldr	r3, [sp, #12]
   1d152:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1d154:	f7fd fdb8 	bl	1acc8 <os_cputime_get32>
   1d158:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   1d15a:	f7ff ffd1 	bl	1d100 <sensor_mgr_evq_get>
   1d15e:	4c11      	ldr	r4, [pc, #68]	; (1d1a4 <sensor_mgr_init+0x98>)
   1d160:	2300      	movs	r3, #0
   1d162:	4a11      	ldr	r2, [pc, #68]	; (1d1a8 <sensor_mgr_init+0x9c>)
   1d164:	4601      	mov	r1, r0
   1d166:	4620      	mov	r0, r4
   1d168:	f7fd fcf8 	bl	1ab5c <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   1d16c:	2180      	movs	r1, #128	; 0x80
   1d16e:	4620      	mov	r0, r4
   1d170:	f7fd fd20 	bl	1abb4 <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   1d174:	f1a6 000c 	sub.w	r0, r6, #12
   1d178:	f7fe f9a8 	bl	1b4cc <os_mutex_init>
}
   1d17c:	b008      	add	sp, #32
   1d17e:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   1d180:	2300      	movs	r3, #0
   1d182:	461a      	mov	r2, r3
   1d184:	4619      	mov	r1, r3
   1d186:	4618      	mov	r0, r3
   1d188:	f7fd fb6e 	bl	1a868 <__assert_func>
   1d18c:	00022364 	.word	0x00022364
   1d190:	2000d9ec 	.word	0x2000d9ec
   1d194:	2000da64 	.word	0x2000da64
   1d198:	2000defc 	.word	0x2000defc
   1d19c:	0001d379 	.word	0x0001d379
   1d1a0:	2000df48 	.word	0x2000df48
   1d1a4:	2000df24 	.word	0x2000df24
   1d1a8:	0001d03d 	.word	0x0001d03d

0001d1ac <sensor_pkg_init>:
{
   1d1ac:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1d1ae:	f7ff ffad 	bl	1d10c <sensor_mgr_init>
}
   1d1b2:	bd08      	pop	{r3, pc}

0001d1b4 <sensor_lock>:
{
   1d1b4:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   1d1b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d1ba:	3004      	adds	r0, #4
   1d1bc:	f7fe f9ec 	bl	1b598 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1d1c0:	b108      	cbz	r0, 1d1c6 <sensor_lock+0x12>
   1d1c2:	2809      	cmp	r0, #9
   1d1c4:	d000      	beq.n	1d1c8 <sensor_lock+0x14>
}
   1d1c6:	bd08      	pop	{r3, pc}
        return (0);
   1d1c8:	2000      	movs	r0, #0
   1d1ca:	e7fc      	b.n	1d1c6 <sensor_lock+0x12>

0001d1cc <sensor_unlock>:
{
   1d1cc:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1d1ce:	3004      	adds	r0, #4
   1d1d0:	f7fe f986 	bl	1b4e0 <os_mutex_release>
}
   1d1d4:	bd08      	pop	{r3, pc}

0001d1d6 <sensor_update_nextrun>:
{
   1d1d6:	b530      	push	{r4, r5, lr}
   1d1d8:	b083      	sub	sp, #12
   1d1da:	4604      	mov	r4, r0
   1d1dc:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1d1de:	a901      	add	r1, sp, #4
   1d1e0:	6a00      	ldr	r0, [r0, #32]
   1d1e2:	f7fe fdb5 	bl	1bd50 <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1d1e6:	4620      	mov	r0, r4
   1d1e8:	f7ff ffe4 	bl	1d1b4 <sensor_lock>
    sensor_mgr_remove(sensor);
   1d1ec:	4620      	mov	r0, r4
   1d1ee:	f7ff fe8f 	bl	1cf10 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1d1f2:	9b01      	ldr	r3, [sp, #4]
   1d1f4:	441d      	add	r5, r3
   1d1f6:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   1d1f8:	4620      	mov	r0, r4
   1d1fa:	f7ff fe9d 	bl	1cf38 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1d1fe:	4620      	mov	r0, r4
   1d200:	f7ff ffe4 	bl	1d1cc <sensor_unlock>
}
   1d204:	b003      	add	sp, #12
   1d206:	bd30      	pop	{r4, r5, pc}

0001d208 <sensor_calc_nextrun_delta>:
{
   1d208:	b538      	push	{r3, r4, r5, lr}
   1d20a:	4605      	mov	r5, r0
   1d20c:	460c      	mov	r4, r1
    sensor_lock(sensor);
   1d20e:	f7ff ffd1 	bl	1d1b4 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1d212:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1d214:	1b0c      	subs	r4, r1, r4
   1d216:	d404      	bmi.n	1d222 <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   1d218:	4628      	mov	r0, r5
   1d21a:	f7ff ffd7 	bl	1d1cc <sensor_unlock>
}
   1d21e:	4620      	mov	r0, r4
   1d220:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1d222:	2400      	movs	r4, #0
   1d224:	e7f8      	b.n	1d218 <sensor_calc_nextrun_delta+0x10>
	...

0001d228 <sensor_find_min_nextrun_sensor>:
{
   1d228:	b570      	push	{r4, r5, r6, lr}
   1d22a:	4606      	mov	r6, r0
   1d22c:	460d      	mov	r5, r1
    sensor_mgr_lock();
   1d22e:	f7ff ff51 	bl	1d0d4 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1d232:	4b05      	ldr	r3, [pc, #20]	; (1d248 <sensor_find_min_nextrun_sensor+0x20>)
   1d234:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1d236:	4631      	mov	r1, r6
   1d238:	4620      	mov	r0, r4
   1d23a:	f7ff ffe5 	bl	1d208 <sensor_calc_nextrun_delta>
   1d23e:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   1d240:	f7ff ff56 	bl	1d0f0 <sensor_mgr_unlock>
}
   1d244:	4620      	mov	r0, r4
   1d246:	bd70      	pop	{r4, r5, r6, pc}
   1d248:	2000def0 	.word	0x2000def0

0001d24c <sensor_mgr_register>:
{
   1d24c:	b538      	push	{r3, r4, r5, lr}
   1d24e:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   1d250:	f7ff ff40 	bl	1d0d4 <sensor_mgr_lock>
    if (rc != 0) {
   1d254:	4604      	mov	r4, r0
   1d256:	b108      	cbz	r0, 1d25c <sensor_mgr_register+0x10>
}
   1d258:	4620      	mov	r0, r4
   1d25a:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   1d25c:	4628      	mov	r0, r5
   1d25e:	f7ff ffa9 	bl	1d1b4 <sensor_lock>
    if (rc != 0) {
   1d262:	4604      	mov	r4, r0
   1d264:	2800      	cmp	r0, #0
   1d266:	d1f7      	bne.n	1d258 <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1d268:	4628      	mov	r0, r5
   1d26a:	f7ff fe65 	bl	1cf38 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1d26e:	4628      	mov	r0, r5
   1d270:	f7ff ffac 	bl	1d1cc <sensor_unlock>
    sensor_mgr_unlock();
   1d274:	f7ff ff3c 	bl	1d0f0 <sensor_mgr_unlock>
    return (0);
   1d278:	e7ee      	b.n	1d258 <sensor_mgr_register+0xc>

0001d27a <sensor_init>:
{
   1d27a:	b538      	push	{r3, r4, r5, lr}
   1d27c:	4604      	mov	r4, r0
   1d27e:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   1d280:	2288      	movs	r2, #136	; 0x88
   1d282:	2100      	movs	r1, #0
   1d284:	f7fe fef3 	bl	1c06e <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1d288:	1d20      	adds	r0, r4, #4
   1d28a:	f7fe f91f 	bl	1b4cc <os_mutex_init>
    if (rc != 0) {
   1d28e:	4603      	mov	r3, r0
   1d290:	b900      	cbnz	r0, 1d294 <sensor_init+0x1a>
    sensor->s_dev = dev;
   1d292:	6025      	str	r5, [r4, #0]
}
   1d294:	4618      	mov	r0, r3
   1d296:	bd38      	pop	{r3, r4, r5, pc}

0001d298 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   1d298:	b530      	push	{r4, r5, lr}
   1d29a:	b089      	sub	sp, #36	; 0x24
   1d29c:	4604      	mov	r4, r0
   1d29e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   1d2a2:	f7ff ff87 	bl	1d1b4 <sensor_lock>
    if (rc) {
   1d2a6:	4605      	mov	r5, r0
   1d2a8:	b9f8      	cbnz	r0, 1d2ea <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   1d2aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d2ac:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   1d2ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1d2b0:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   1d2b2:	a904      	add	r1, sp, #16
   1d2b4:	4620      	mov	r0, r4
   1d2b6:	f7ff fe7b 	bl	1cfb0 <sensor_mgr_match_bytype>
   1d2ba:	b1e0      	cbz	r0, 1d2f6 <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   1d2bc:	4620      	mov	r0, r4
   1d2be:	f7ff fee1 	bl	1d084 <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1d2c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d2c4:	6819      	ldr	r1, [r3, #0]
   1d2c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d2c8:	9302      	str	r3, [sp, #8]
   1d2ca:	ab06      	add	r3, sp, #24
   1d2cc:	9301      	str	r3, [sp, #4]
   1d2ce:	4b0b      	ldr	r3, [pc, #44]	; (1d2fc <sensor_read+0x64>)
   1d2d0:	9300      	str	r3, [sp, #0]
   1d2d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1d2d6:	4620      	mov	r0, r4
   1d2d8:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1d2da:	4605      	mov	r5, r0
   1d2dc:	b128      	cbz	r0, 1d2ea <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   1d2de:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1d2e0:	b11b      	cbz	r3, 1d2ea <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1d2e2:	4602      	mov	r2, r0
   1d2e4:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1d2e6:	4620      	mov	r0, r4
   1d2e8:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1d2ea:	4620      	mov	r0, r4
   1d2ec:	f7ff ff6e 	bl	1d1cc <sensor_unlock>
    return (rc);
}
   1d2f0:	4628      	mov	r0, r5
   1d2f2:	b009      	add	sp, #36	; 0x24
   1d2f4:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1d2f6:	f06f 0503 	mvn.w	r5, #3
   1d2fa:	e7f6      	b.n	1d2ea <sensor_read+0x52>
   1d2fc:	0001cfdf 	.word	0x0001cfdf

0001d300 <sensor_mgr_poll_bytype>:
{
   1d300:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d302:	b085      	sub	sp, #20
   1d304:	4616      	mov	r6, r2
   1d306:	461f      	mov	r7, r3
   1d308:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1d30a:	b10c      	cbz	r4, 1d310 <sensor_mgr_poll_bytype+0x10>
   1d30c:	8aa3      	ldrh	r3, [r4, #20]
   1d30e:	b9cb      	cbnz	r3, 1d344 <sensor_mgr_poll_bytype+0x44>
   1d310:	4632      	mov	r2, r6
   1d312:	463b      	mov	r3, r7
   1d314:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1d316:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d31a:	9102      	str	r1, [sp, #8]
   1d31c:	2100      	movs	r1, #0
   1d31e:	9101      	str	r1, [sp, #4]
   1d320:	9100      	str	r1, [sp, #0]
   1d322:	f7ff ffb9 	bl	1d298 <sensor_read>
        sensor_lock(sensor);
   1d326:	4628      	mov	r0, r5
   1d328:	f7ff ff44 	bl	1d1b4 <sensor_lock>
        if (stt) {
   1d32c:	b12c      	cbz	r4, 1d33a <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   1d32e:	8aa3      	ldrh	r3, [r4, #20]
   1d330:	b91b      	cbnz	r3, 1d33a <sensor_mgr_poll_bytype+0x3a>
   1d332:	8a63      	ldrh	r3, [r4, #18]
   1d334:	b10b      	cbz	r3, 1d33a <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1d336:	3b01      	subs	r3, #1
   1d338:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1d33a:	4628      	mov	r0, r5
   1d33c:	f7ff ff46 	bl	1d1cc <sensor_unlock>
}
   1d340:	b005      	add	sp, #20
   1d342:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1d344:	3b01      	subs	r3, #1
   1d346:	82a3      	strh	r3, [r4, #20]
}
   1d348:	e7fa      	b.n	1d340 <sensor_mgr_poll_bytype+0x40>

0001d34a <sensor_poll_per_type_trait>:
{
   1d34a:	b570      	push	{r4, r5, r6, lr}
   1d34c:	b082      	sub	sp, #8
   1d34e:	4605      	mov	r5, r0
   1d350:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1d352:	f7ff ff2f 	bl	1d1b4 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1d356:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1d358:	e007      	b.n	1d36a <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1d35a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d35e:	9601      	str	r6, [sp, #4]
   1d360:	9400      	str	r4, [sp, #0]
   1d362:	4628      	mov	r0, r5
   1d364:	f7ff ffcc 	bl	1d300 <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1d368:	6a24      	ldr	r4, [r4, #32]
   1d36a:	2c00      	cmp	r4, #0
   1d36c:	d1f5      	bne.n	1d35a <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   1d36e:	4628      	mov	r0, r5
   1d370:	f7ff ff2c 	bl	1d1cc <sensor_unlock>
}
   1d374:	b002      	add	sp, #8
   1d376:	bd70      	pop	{r4, r5, r6, pc}

0001d378 <sensor_mgr_wakeup_event>:
{
   1d378:	b570      	push	{r4, r5, r6, lr}
   1d37a:	b084      	sub	sp, #16
    now = os_time_get();
   1d37c:	f7fe fc92 	bl	1bca4 <os_time_get>
   1d380:	4605      	mov	r5, r0
    sensor_mgr_lock();
   1d382:	f7ff fea7 	bl	1d0d4 <sensor_mgr_lock>
   1d386:	e012      	b.n	1d3ae <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   1d388:	4620      	mov	r0, r4
   1d38a:	f7ff ff1f 	bl	1d1cc <sensor_unlock>
            sensor_mgr_unlock();
   1d38e:	f7ff feaf 	bl	1d0f0 <sensor_mgr_unlock>
}
   1d392:	b004      	add	sp, #16
   1d394:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   1d396:	4632      	mov	r2, r6
   1d398:	4629      	mov	r1, r5
   1d39a:	4620      	mov	r0, r4
   1d39c:	f7ff ffd5 	bl	1d34a <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   1d3a0:	4629      	mov	r1, r5
   1d3a2:	4620      	mov	r0, r4
   1d3a4:	f7ff ff17 	bl	1d1d6 <sensor_update_nextrun>
        sensor_unlock(cursor);
   1d3a8:	4620      	mov	r0, r4
   1d3aa:	f7ff ff0f 	bl	1d1cc <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1d3ae:	a903      	add	r1, sp, #12
   1d3b0:	4628      	mov	r0, r5
   1d3b2:	f7ff ff39 	bl	1d228 <sensor_find_min_nextrun_sensor>
   1d3b6:	4604      	mov	r4, r0
        sensor_lock(cursor);
   1d3b8:	f7ff fefc 	bl	1d1b4 <sensor_lock>
        if (!cursor->s_poll_rate) {
   1d3bc:	6a23      	ldr	r3, [r4, #32]
   1d3be:	2b00      	cmp	r3, #0
   1d3c0:	d0e2      	beq.n	1d388 <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1d3c2:	9e03      	ldr	r6, [sp, #12]
   1d3c4:	b96e      	cbnz	r6, 1d3e2 <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1d3c6:	4620      	mov	r0, r4
   1d3c8:	f7ff fde6 	bl	1cf98 <sensor_type_traits_empty>
   1d3cc:	2800      	cmp	r0, #0
   1d3ce:	d0e2      	beq.n	1d396 <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   1d3d0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1d3d4:	9501      	str	r5, [sp, #4]
   1d3d6:	2100      	movs	r1, #0
   1d3d8:	9100      	str	r1, [sp, #0]
   1d3da:	4620      	mov	r0, r4
   1d3dc:	f7ff ff90 	bl	1d300 <sensor_mgr_poll_bytype>
   1d3e0:	e7de      	b.n	1d3a0 <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1d3e2:	f7ff fe85 	bl	1d0f0 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1d3e6:	9903      	ldr	r1, [sp, #12]
   1d3e8:	4801      	ldr	r0, [pc, #4]	; (1d3f0 <sensor_mgr_wakeup_event+0x78>)
   1d3ea:	f7fd fbe3 	bl	1abb4 <os_callout_reset>
   1d3ee:	e7d0      	b.n	1d392 <sensor_mgr_wakeup_event+0x1a>
   1d3f0:	2000defc 	.word	0x2000defc

0001d3f4 <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1d3f4:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1d3f6:	2101      	movs	r1, #1
   1d3f8:	4806      	ldr	r0, [pc, #24]	; (1d414 <init_sensor_coap+0x20>)
   1d3fa:	f7fe faf1 	bl	1b9e0 <os_sem_init>
    assert(rc == OS_OK);
   1d3fe:	b918      	cbnz	r0, 1d408 <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   1d400:	4b05      	ldr	r3, [pc, #20]	; (1d418 <init_sensor_coap+0x24>)
   1d402:	2201      	movs	r2, #1
   1d404:	701a      	strb	r2, [r3, #0]
}
   1d406:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   1d408:	2300      	movs	r3, #0
   1d40a:	461a      	mov	r2, r3
   1d40c:	4619      	mov	r1, r3
   1d40e:	4618      	mov	r0, r3
   1d410:	f7fd fa2a 	bl	1a868 <__assert_func>
   1d414:	2000da80 	.word	0x2000da80
   1d418:	2000da88 	.word	0x2000da88

0001d41c <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1d41c:	4b04      	ldr	r3, [pc, #16]	; (1d430 <is_sensor_node+0x14>)
   1d41e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d422:	4313      	orrs	r3, r2
   1d424:	d101      	bne.n	1d42a <is_sensor_node+0xe>
    return false;
   1d426:	2000      	movs	r0, #0
}
   1d428:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1d42a:	2001      	movs	r0, #1
   1d42c:	4770      	bx	lr
   1d42e:	bf00      	nop
   1d430:	2000daa0 	.word	0x2000daa0

0001d434 <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1d434:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1d436:	4b16      	ldr	r3, [pc, #88]	; (1d490 <get_hardware_id+0x5c>)
   1d438:	681b      	ldr	r3, [r3, #0]
   1d43a:	b10b      	cbz	r3, 1d440 <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   1d43c:	4815      	ldr	r0, [pc, #84]	; (1d494 <get_hardware_id+0x60>)
   1d43e:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   1d440:	f000 fcee 	bl	1de20 <hal_bsp_hw_id_len>
   1d444:	4b12      	ldr	r3, [pc, #72]	; (1d490 <get_hardware_id+0x5c>)
   1d446:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1d448:	280b      	cmp	r0, #11
   1d44a:	d914      	bls.n	1d476 <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1d44c:	210c      	movs	r1, #12
   1d44e:	4811      	ldr	r0, [pc, #68]	; (1d494 <get_hardware_id+0x60>)
   1d450:	f000 fce8 	bl	1de24 <hal_bsp_hw_id>
   1d454:	4b0e      	ldr	r3, [pc, #56]	; (1d490 <get_hardware_id+0x5c>)
   1d456:	6018      	str	r0, [r3, #0]
   1d458:	2800      	cmp	r0, #0
   1d45a:	dd12      	ble.n	1d482 <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   1d45c:	490e      	ldr	r1, [pc, #56]	; (1d498 <get_hardware_id+0x64>)
   1d45e:	480f      	ldr	r0, [pc, #60]	; (1d49c <get_hardware_id+0x68>)
   1d460:	f7fc fb3a 	bl	19ad8 <console_printf>
   1d464:	4b0a      	ldr	r3, [pc, #40]	; (1d490 <get_hardware_id+0x5c>)
   1d466:	6819      	ldr	r1, [r3, #0]
   1d468:	480a      	ldr	r0, [pc, #40]	; (1d494 <get_hardware_id+0x60>)
   1d46a:	f7fc fac5 	bl	199f8 <console_dump>
   1d46e:	480c      	ldr	r0, [pc, #48]	; (1d4a0 <get_hardware_id+0x6c>)
   1d470:	f7fc fb32 	bl	19ad8 <console_printf>
   1d474:	e7e2      	b.n	1d43c <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1d476:	2300      	movs	r3, #0
   1d478:	461a      	mov	r2, r3
   1d47a:	4619      	mov	r1, r3
   1d47c:	4618      	mov	r0, r3
   1d47e:	f7fd f9f3 	bl	1a868 <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1d482:	2300      	movs	r3, #0
   1d484:	461a      	mov	r2, r3
   1d486:	4619      	mov	r1, r3
   1d488:	4618      	mov	r0, r3
   1d48a:	f7fd f9ed 	bl	1a868 <__assert_func>
   1d48e:	bf00      	nop
   1d490:	2000da98 	.word	0x2000da98
   1d494:	2000da8c 	.word	0x2000da8c
   1d498:	00022408 	.word	0x00022408
   1d49c:	000223c0 	.word	0x000223c0
   1d4a0:	00022520 	.word	0x00022520

0001d4a4 <is_collector_node>:
bool is_collector_node(void) {
   1d4a4:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   1d4a6:	f7ff ffc5 	bl	1d434 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1d4aa:	220c      	movs	r2, #12
   1d4ac:	4903      	ldr	r1, [pc, #12]	; (1d4bc <is_collector_node+0x18>)
   1d4ae:	f7fe fdad 	bl	1c00c <memcmp>
   1d4b2:	b108      	cbz	r0, 1d4b8 <is_collector_node+0x14>
    return false; 
   1d4b4:	2000      	movs	r0, #0
}
   1d4b6:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1d4b8:	2001      	movs	r0, #1
   1d4ba:	e7fc      	b.n	1d4b6 <is_collector_node+0x12>
   1d4bc:	00022378 	.word	0x00022378

0001d4c0 <is_standalone_node>:
bool is_standalone_node(void) {
   1d4c0:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1d4c2:	f7ff ffef 	bl	1d4a4 <is_collector_node>
   1d4c6:	b928      	cbnz	r0, 1d4d4 <is_standalone_node+0x14>
   1d4c8:	4604      	mov	r4, r0
   1d4ca:	f7ff ffa7 	bl	1d41c <is_sensor_node>
   1d4ce:	b910      	cbnz	r0, 1d4d6 <is_standalone_node+0x16>
   1d4d0:	2401      	movs	r4, #1
   1d4d2:	e000      	b.n	1d4d6 <is_standalone_node+0x16>
    return false;
   1d4d4:	2400      	movs	r4, #0
}
   1d4d6:	4620      	mov	r0, r4
   1d4d8:	bd10      	pop	{r4, pc}
	...

0001d4dc <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   1d4dc:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1d4de:	2400      	movs	r4, #0
   1d4e0:	2c04      	cmp	r4, #4
   1d4e2:	dc15      	bgt.n	1d510 <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1d4e4:	4b23      	ldr	r3, [pc, #140]	; (1d574 <sensor_network_init+0x98>)
   1d4e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1d4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d4ee:	4922      	ldr	r1, [pc, #136]	; (1d578 <sensor_network_init+0x9c>)
   1d4f0:	4822      	ldr	r0, [pc, #136]	; (1d57c <sensor_network_init+0xa0>)
   1d4f2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1d4f6:	f000 fcaf 	bl	1de58 <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1d4fa:	3001      	adds	r0, #1
   1d4fc:	280b      	cmp	r0, #11
   1d4fe:	dc01      	bgt.n	1d504 <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1d500:	3401      	adds	r4, #1
   1d502:	e7ed      	b.n	1d4e0 <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1d504:	2300      	movs	r3, #0
   1d506:	461a      	mov	r2, r3
   1d508:	4619      	mov	r1, r3
   1d50a:	4618      	mov	r0, r3
   1d50c:	f7fd f9ac 	bl	1a868 <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   1d510:	f7ff ff90 	bl	1d434 <get_hardware_id>
   1d514:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1d516:	2400      	movs	r4, #0
   1d518:	2c04      	cmp	r4, #4
   1d51a:	dc19      	bgt.n	1d550 <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   1d51c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1d520:	0093      	lsls	r3, r2, #2
   1d522:	220c      	movs	r2, #12
   1d524:	4916      	ldr	r1, [pc, #88]	; (1d580 <sensor_network_init+0xa4>)
   1d526:	4419      	add	r1, r3
   1d528:	4628      	mov	r0, r5
   1d52a:	f7fe fd6f 	bl	1c00c <memcmp>
   1d52e:	b108      	cbz	r0, 1d534 <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1d530:	3401      	adds	r4, #1
   1d532:	e7f1      	b.n	1d518 <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
   1d534:	4b0f      	ldr	r3, [pc, #60]	; (1d574 <sensor_network_init+0x98>)
   1d536:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1d53a:	e9d3 0100 	ldrd	r0, r1, [r3]
   1d53e:	4b11      	ldr	r3, [pc, #68]	; (1d584 <sensor_network_init+0xa8>)
   1d540:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1d544:	1c63      	adds	r3, r4, #1
   1d546:	4a10      	ldr	r2, [pc, #64]	; (1d588 <sensor_network_init+0xac>)
   1d548:	4910      	ldr	r1, [pc, #64]	; (1d58c <sensor_network_init+0xb0>)
   1d54a:	4811      	ldr	r0, [pc, #68]	; (1d590 <sensor_network_init+0xb4>)
   1d54c:	f7fc fac4 	bl	19ad8 <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1d550:	f7ff ffa8 	bl	1d4a4 <is_collector_node>
   1d554:	b940      	cbnz	r0, 1d568 <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1d556:	f7ff ffb3 	bl	1d4c0 <is_standalone_node>
   1d55a:	b150      	cbz	r0, 1d572 <sensor_network_init+0x96>
   1d55c:	4a0a      	ldr	r2, [pc, #40]	; (1d588 <sensor_network_init+0xac>)
   1d55e:	490b      	ldr	r1, [pc, #44]	; (1d58c <sensor_network_init+0xb0>)
   1d560:	480c      	ldr	r0, [pc, #48]	; (1d594 <sensor_network_init+0xb8>)
   1d562:	f7fc fab9 	bl	19ad8 <console_printf>
}
   1d566:	e004      	b.n	1d572 <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1d568:	4a07      	ldr	r2, [pc, #28]	; (1d588 <sensor_network_init+0xac>)
   1d56a:	4908      	ldr	r1, [pc, #32]	; (1d58c <sensor_network_init+0xb0>)
   1d56c:	480a      	ldr	r0, [pc, #40]	; (1d598 <sensor_network_init+0xbc>)
   1d56e:	f7fc fab3 	bl	19ad8 <console_printf>
}
   1d572:	bd38      	pop	{r3, r4, r5, pc}
   1d574:	00022420 	.word	0x00022420
   1d578:	000223c8 	.word	0x000223c8
   1d57c:	20000130 	.word	0x20000130
   1d580:	00022384 	.word	0x00022384
   1d584:	2000daa0 	.word	0x2000daa0
   1d588:	000223d0 	.word	0x000223d0
   1d58c:	00022408 	.word	0x00022408
   1d590:	000223d8 	.word	0x000223d8
   1d594:	000223f8 	.word	0x000223f8
   1d598:	000223e8 	.word	0x000223e8

0001d59c <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1d59c:	b530      	push	{r4, r5, lr}
   1d59e:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1d5a0:	2200      	movs	r2, #0
   1d5a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d5a6:	4810      	ldr	r0, [pc, #64]	; (1d5e8 <config_device+0x4c>)
   1d5a8:	f7fd fc2c 	bl	1ae04 <os_dev_open>
    assert(dev != NULL);
   1d5ac:	b178      	cbz	r0, 1d5ce <config_device+0x32>
   1d5ae:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1d5b0:	4668      	mov	r0, sp
   1d5b2:	f000 f86c 	bl	1d68e <temp_stub_default_cfg>
    assert(rc == 0);
   1d5b6:	b980      	cbnz	r0, 1d5da <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1d5b8:	4669      	mov	r1, sp
   1d5ba:	4620      	mov	r0, r4
   1d5bc:	f000 f900 	bl	1d7c0 <temp_stub_config>
   1d5c0:	4605      	mov	r5, r0
    os_dev_close(dev);
   1d5c2:	4620      	mov	r0, r4
   1d5c4:	f7fd fc40 	bl	1ae48 <os_dev_close>
    return rc;
}
   1d5c8:	4628      	mov	r0, r5
   1d5ca:	b003      	add	sp, #12
   1d5cc:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1d5ce:	2300      	movs	r3, #0
   1d5d0:	461a      	mov	r2, r3
   1d5d2:	4619      	mov	r1, r3
   1d5d4:	4618      	mov	r0, r3
   1d5d6:	f7fd f947 	bl	1a868 <__assert_func>
    assert(rc == 0);
   1d5da:	2300      	movs	r3, #0
   1d5dc:	461a      	mov	r2, r3
   1d5de:	4619      	mov	r1, r3
   1d5e0:	4618      	mov	r0, r3
   1d5e2:	f7fd f941 	bl	1a868 <__assert_func>
   1d5e6:	bf00      	nop
   1d5e8:	00022448 	.word	0x00022448

0001d5ec <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1d5ec:	b510      	push	{r4, lr}
   1d5ee:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1d5f0:	4c10      	ldr	r4, [pc, #64]	; (1d634 <temp_stub_create+0x48>)
   1d5f2:	4621      	mov	r1, r4
   1d5f4:	4810      	ldr	r0, [pc, #64]	; (1d638 <temp_stub_create+0x4c>)
   1d5f6:	f7fc fa6f 	bl	19ad8 <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1d5fa:	4b10      	ldr	r3, [pc, #64]	; (1d63c <temp_stub_create+0x50>)
   1d5fc:	9301      	str	r3, [sp, #4]
   1d5fe:	4b10      	ldr	r3, [pc, #64]	; (1d640 <temp_stub_create+0x54>)
   1d600:	9300      	str	r3, [sp, #0]
   1d602:	2300      	movs	r3, #0
   1d604:	2201      	movs	r2, #1
   1d606:	4621      	mov	r1, r4
   1d608:	480e      	ldr	r0, [pc, #56]	; (1d644 <temp_stub_create+0x58>)
   1d60a:	f7fd fbb5 	bl	1ad78 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1d60e:	b920      	cbnz	r0, 1d61a <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1d610:	f7ff ffc4 	bl	1d59c <config_device>
    assert(rc == 0);
   1d614:	b938      	cbnz	r0, 1d626 <temp_stub_create+0x3a>
}
   1d616:	b002      	add	sp, #8
   1d618:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1d61a:	2300      	movs	r3, #0
   1d61c:	461a      	mov	r2, r3
   1d61e:	4619      	mov	r1, r3
   1d620:	4618      	mov	r0, r3
   1d622:	f7fd f921 	bl	1a868 <__assert_func>
    assert(rc == 0);
   1d626:	2300      	movs	r3, #0
   1d628:	461a      	mov	r2, r3
   1d62a:	4619      	mov	r1, r3
   1d62c:	4618      	mov	r0, r3
   1d62e:	f7fd f91b 	bl	1a868 <__assert_func>
   1d632:	bf00      	nop
   1d634:	00022448 	.word	0x00022448
   1d638:	00022454 	.word	0x00022454
   1d63c:	2000dae0 	.word	0x2000dae0
   1d640:	0001d69d 	.word	0x0001d69d
   1d644:	2000daf8 	.word	0x2000daf8

0001d648 <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1d648:	2000      	movs	r0, #0
   1d64a:	4770      	bx	lr

0001d64c <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1d64c:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1d650:	2100      	movs	r1, #0
   1d652:	ea50 0301 	orrs.w	r3, r0, r1
   1d656:	d004      	beq.n	1d662 <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1d658:	9b00      	ldr	r3, [sp, #0]
   1d65a:	2201      	movs	r2, #1
   1d65c:	701a      	strb	r2, [r3, #0]
    return (0);
   1d65e:	2000      	movs	r0, #0
   1d660:	4770      	bx	lr
err:
    return (rc);
   1d662:	f06f 0001 	mvn.w	r0, #1
}
   1d666:	4770      	bx	lr

0001d668 <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1d668:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1d66a:	b120      	cbz	r0, 1d676 <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1d66c:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1d670:	d007      	beq.n	1d682 <temp_stub_open+0x1a>
}
   1d672:	2000      	movs	r0, #0
   1d674:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1d676:	2300      	movs	r3, #0
   1d678:	461a      	mov	r2, r3
   1d67a:	4619      	mov	r1, r3
   1d67c:	4618      	mov	r0, r3
   1d67e:	f7fd f8f3 	bl	1a868 <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1d682:	2300      	movs	r3, #0
   1d684:	461a      	mov	r2, r3
   1d686:	4619      	mov	r1, r3
   1d688:	4618      	mov	r0, r3
   1d68a:	f7fd f8ed 	bl	1a868 <__assert_func>

0001d68e <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1d68e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d692:	2300      	movs	r3, #0
   1d694:	e9c0 2300 	strd	r2, r3, [r0]
}
   1d698:	2000      	movs	r0, #0
   1d69a:	4770      	bx	lr

0001d69c <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1d69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1d69e:	b379      	cbz	r1, 1d700 <temp_stub_init+0x64>
   1d6a0:	460d      	mov	r5, r1
   1d6a2:	b380      	cbz	r0, 1d706 <temp_stub_init+0x6a>
   1d6a4:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1d6a6:	30b0      	adds	r0, #176	; 0xb0
   1d6a8:	f7ff fff1 	bl	1d68e <temp_stub_default_cfg>
    if (rc) { goto err; }
   1d6ac:	4603      	mov	r3, r0
   1d6ae:	b108      	cbz	r0, 1d6b4 <temp_stub_init+0x18>
}
   1d6b0:	4618      	mov	r0, r3
   1d6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1d6b4:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1d6b8:	4621      	mov	r1, r4
   1d6ba:	4630      	mov	r0, r6
   1d6bc:	f7ff fddd 	bl	1d27a <sensor_init>
    if (rc != 0) { goto err; }
   1d6c0:	4603      	mov	r3, r0
   1d6c2:	2800      	cmp	r0, #0
   1d6c4:	d1f4      	bne.n	1d6b0 <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1d6c6:	4b11      	ldr	r3, [pc, #68]	; (1d70c <temp_stub_init+0x70>)
   1d6c8:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1d6ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1d6ce:	2300      	movs	r3, #0
   1d6d0:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1d6d4:	682a      	ldr	r2, [r5, #0]
   1d6d6:	686f      	ldr	r7, [r5, #4]
   1d6d8:	68a8      	ldr	r0, [r5, #8]
   1d6da:	68e9      	ldr	r1, [r5, #12]
   1d6dc:	6722      	str	r2, [r4, #112]	; 0x70
   1d6de:	6767      	str	r7, [r4, #116]	; 0x74
   1d6e0:	67a0      	str	r0, [r4, #120]	; 0x78
   1d6e2:	67e1      	str	r1, [r4, #124]	; 0x7c
   1d6e4:	692a      	ldr	r2, [r5, #16]
   1d6e6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1d6ea:	4630      	mov	r0, r6
   1d6ec:	f7ff fdae 	bl	1d24c <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1d6f0:	4603      	mov	r3, r0
   1d6f2:	2800      	cmp	r0, #0
   1d6f4:	d1dc      	bne.n	1d6b0 <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1d6f6:	4a06      	ldr	r2, [pc, #24]	; (1d710 <temp_stub_init+0x74>)
   1d6f8:	6022      	str	r2, [r4, #0]
   1d6fa:	4a06      	ldr	r2, [pc, #24]	; (1d714 <temp_stub_init+0x78>)
   1d6fc:	60e2      	str	r2, [r4, #12]
    return (0);
   1d6fe:	e7d7      	b.n	1d6b0 <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1d700:	f06f 0308 	mvn.w	r3, #8
   1d704:	e7d4      	b.n	1d6b0 <temp_stub_init+0x14>
   1d706:	f06f 0308 	mvn.w	r3, #8
   1d70a:	e7d1      	b.n	1d6b0 <temp_stub_init+0x14>
   1d70c:	00022464 	.word	0x00022464
   1d710:	0001d669 	.word	0x0001d669
   1d714:	0001d649 	.word	0x0001d649

0001d718 <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1d718:	b538      	push	{r3, r4, r5, lr}
   1d71a:	460d      	mov	r5, r1
   1d71c:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1d71e:	4808      	ldr	r0, [pc, #32]	; (1d740 <temp_stub_get_raw_temperature+0x28>)
   1d720:	f7fc f9da 	bl	19ad8 <console_printf>
    assert(temp_sum);
   1d724:	b134      	cbz	r4, 1d734 <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1d726:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1d72a:	fb01 f105 	mul.w	r1, r1, r5
   1d72e:	6021      	str	r1, [r4, #0]
}
   1d730:	2000      	movs	r0, #0
   1d732:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1d734:	2300      	movs	r3, #0
   1d736:	461a      	mov	r2, r3
   1d738:	4619      	mov	r1, r3
   1d73a:	4618      	mov	r0, r3
   1d73c:	f7fd f894 	bl	1a868 <__assert_func>
   1d740:	0002248c 	.word	0x0002248c

0001d744 <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1d744:	b530      	push	{r4, r5, lr}
   1d746:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1d748:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1d74c:	2500      	movs	r5, #0
   1d74e:	ea54 0305 	orrs.w	r3, r4, r5
   1d752:	d032      	beq.n	1d7ba <temp_stub_sensor_read+0x76>
   1d754:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1d756:	6805      	ldr	r5, [r0, #0]
   1d758:	b165      	cbz	r5, 1d774 <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1d75a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d75e:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1d760:	2200      	movs	r2, #0
   1d762:	4611      	mov	r1, r2
   1d764:	4628      	mov	r0, r5
   1d766:	f7ff ff7f 	bl	1d668 <temp_stub_open>
        if (rc) { goto err; }
   1d76a:	4603      	mov	r3, r0
   1d76c:	b140      	cbz	r0, 1d780 <temp_stub_sensor_read+0x3c>
}
   1d76e:	4618      	mov	r0, r3
   1d770:	b007      	add	sp, #28
   1d772:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1d774:	2300      	movs	r3, #0
   1d776:	461a      	mov	r2, r3
   1d778:	4619      	mov	r1, r3
   1d77a:	4618      	mov	r0, r3
   1d77c:	f7fd f874 	bl	1a868 <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1d780:	2300      	movs	r3, #0
   1d782:	aa03      	add	r2, sp, #12
   1d784:	2101      	movs	r1, #1
   1d786:	4628      	mov	r0, r5
   1d788:	f7ff ffc6 	bl	1d718 <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1d78c:	4603      	mov	r3, r0
   1d78e:	2800      	cmp	r0, #0
   1d790:	d1ed      	bne.n	1d76e <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1d792:	9a03      	ldr	r2, [sp, #12]
   1d794:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1d796:	2201      	movs	r2, #1
   1d798:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1d79c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d79e:	2a00      	cmp	r2, #0
   1d7a0:	d0e5      	beq.n	1d76e <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1d7a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1d7a6:	2300      	movs	r3, #0
   1d7a8:	e9cd 2300 	strd	r2, r3, [sp]
   1d7ac:	aa04      	add	r2, sp, #16
   1d7ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1d7b0:	4620      	mov	r0, r4
   1d7b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d7b4:	4798      	blx	r3
   1d7b6:	4603      	mov	r3, r0
   1d7b8:	e7d9      	b.n	1d76e <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1d7ba:	f06f 0301 	mvn.w	r3, #1
   1d7be:	e7d6      	b.n	1d76e <temp_stub_sensor_read+0x2a>

0001d7c0 <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1d7c0:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1d7c2:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1d7c6:	d009      	beq.n	1d7dc <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1d7c8:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1d7cc:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1d7d0:	e9d1 2300 	ldrd	r2, r3, [r1]
   1d7d4:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1d7d8:	2000      	movs	r0, #0
   1d7da:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1d7dc:	2300      	movs	r3, #0
   1d7de:	461a      	mov	r2, r3
   1d7e0:	4619      	mov	r1, r3
   1d7e2:	4618      	mov	r0, r3
   1d7e4:	f7fd f840 	bl	1a868 <__assert_func>

0001d7e8 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   1d7e8:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1d7ea:	e002      	b.n	1d7f2 <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   1d7ec:	4618      	mov	r0, r3
   1d7ee:	f000 f85b 	bl	1d8a8 <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1d7f2:	4808      	ldr	r0, [pc, #32]	; (1d814 <oc_buffer_tx+0x2c>)
   1d7f4:	f7fd fc03 	bl	1affe <os_mqueue_get>
   1d7f8:	4603      	mov	r3, r0
   1d7fa:	b148      	cbz	r0, 1d810 <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   1d7fc:	2200      	movs	r2, #0
   1d7fe:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   1d800:	7e1a      	ldrb	r2, [r3, #24]
   1d802:	f012 0f08 	tst.w	r2, #8
   1d806:	d0f1      	beq.n	1d7ec <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   1d808:	4618      	mov	r0, r3
   1d80a:	f000 f85d 	bl	1d8c8 <oc_send_multicast_message>
   1d80e:	e7f0      	b.n	1d7f2 <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   1d810:	bd08      	pop	{r3, pc}
   1d812:	bf00      	nop
   1d814:	2000dbd0 	.word	0x2000dbd0

0001d818 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   1d818:	b500      	push	{lr}
   1d81a:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   1d81c:	4808      	ldr	r0, [pc, #32]	; (1d840 <oc_buffer_rx+0x28>)
   1d81e:	f7fd fbee 	bl	1affe <os_mqueue_get>
   1d822:	9001      	str	r0, [sp, #4]
   1d824:	b140      	cbz	r0, 1d838 <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   1d826:	a801      	add	r0, sp, #4
   1d828:	f000 faa2 	bl	1dd70 <__wrap_coap_receive>
#endif
        if (m) {
   1d82c:	9801      	ldr	r0, [sp, #4]
   1d82e:	2800      	cmp	r0, #0
   1d830:	d0f4      	beq.n	1d81c <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   1d832:	f7fd fc59 	bl	1b0e8 <os_mbuf_free_chain>
   1d836:	e7f1      	b.n	1d81c <oc_buffer_rx+0x4>
        }
    }
}
   1d838:	b003      	add	sp, #12
   1d83a:	f85d fb04 	ldr.w	pc, [sp], #4
   1d83e:	bf00      	nop
   1d840:	2000dbb8 	.word	0x2000dbb8

0001d844 <oc_buffer_init>:

void
oc_buffer_init(void)
{
   1d844:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   1d846:	2200      	movs	r2, #0
   1d848:	4904      	ldr	r1, [pc, #16]	; (1d85c <oc_buffer_init+0x18>)
   1d84a:	4805      	ldr	r0, [pc, #20]	; (1d860 <oc_buffer_init+0x1c>)
   1d84c:	f7fd fbce 	bl	1afec <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   1d850:	2200      	movs	r2, #0
   1d852:	4904      	ldr	r1, [pc, #16]	; (1d864 <oc_buffer_init+0x20>)
   1d854:	4804      	ldr	r0, [pc, #16]	; (1d868 <oc_buffer_init+0x24>)
   1d856:	f7fd fbc9 	bl	1afec <os_mqueue_init>
}
   1d85a:	bd08      	pop	{r3, pc}
   1d85c:	0001d819 	.word	0x0001d819
   1d860:	2000dbb8 	.word	0x2000dbb8
   1d864:	0001d7e9 	.word	0x0001d7e9
   1d868:	2000dbd0 	.word	0x2000dbd0

0001d86c <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   1d86c:	b500      	push	{lr}
   1d86e:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   1d870:	4b07      	ldr	r3, [pc, #28]	; (1d890 <oc_ri_mem_init+0x24>)
   1d872:	9300      	str	r3, [sp, #0]
   1d874:	4b07      	ldr	r3, [pc, #28]	; (1d894 <oc_ri_mem_init+0x28>)
   1d876:	2264      	movs	r2, #100	; 0x64
   1d878:	2102      	movs	r1, #2
   1d87a:	4807      	ldr	r0, [pc, #28]	; (1d898 <oc_ri_mem_init+0x2c>)
   1d87c:	f7fd fd3c 	bl	1b2f8 <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   1d880:	f000 f860 	bl	1d944 <oc_rep_init>
#endif
    oc_buffer_init();
   1d884:	f7ff ffde 	bl	1d844 <oc_buffer_init>
}
   1d888:	b003      	add	sp, #12
   1d88a:	f85d fb04 	ldr.w	pc, [sp], #4
   1d88e:	bf00      	nop
   1d890:	000224a4 	.word	0x000224a4
   1d894:	2000dbe8 	.word	0x2000dbe8
   1d898:	2000dcb0 	.word	0x2000dcb0

0001d89c <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   1d89c:	4b01      	ldr	r3, [pc, #4]	; (1d8a4 <oc_evq_set+0x8>)
   1d89e:	6018      	str	r0, [r3, #0]
}
   1d8a0:	4770      	bx	lr
   1d8a2:	bf00      	nop
   1d8a4:	2000dccc 	.word	0x2000dccc

0001d8a8 <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   1d8a8:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   1d8aa:	7e03      	ldrb	r3, [r0, #24]
   1d8ac:	f003 0307 	and.w	r3, r3, #7
   1d8b0:	4a04      	ldr	r2, [pc, #16]	; (1d8c4 <oc_send_buffer+0x1c>)
   1d8b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   1d8b6:	b113      	cbz	r3, 1d8be <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   1d8b8:	68db      	ldr	r3, [r3, #12]
   1d8ba:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   1d8bc:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   1d8be:	f7fd fc13 	bl	1b0e8 <os_mbuf_free_chain>
}
   1d8c2:	e7fb      	b.n	1d8bc <oc_send_buffer+0x14>
   1d8c4:	2000df60 	.word	0x2000df60

0001d8c8 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   1d8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d8cc:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1d8ce:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   1d8d0:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1d8d2:	e002      	b.n	1d8da <oc_send_multicast_message+0x12>
   1d8d4:	4635      	mov	r5, r6
   1d8d6:	3401      	adds	r4, #1
   1d8d8:	462e      	mov	r6, r5
   1d8da:	2c07      	cmp	r4, #7
   1d8dc:	dc12      	bgt.n	1d904 <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   1d8de:	4b0c      	ldr	r3, [pc, #48]	; (1d910 <oc_send_multicast_message+0x48>)
   1d8e0:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1d8e4:	2d00      	cmp	r5, #0
   1d8e6:	d0f5      	beq.n	1d8d4 <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   1d8e8:	2e00      	cmp	r6, #0
   1d8ea:	d0f4      	beq.n	1d8d6 <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   1d8ec:	4638      	mov	r0, r7
   1d8ee:	f7fd fc6b 	bl	1b1c8 <os_mbuf_dup>
   1d8f2:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   1d8f4:	6933      	ldr	r3, [r6, #16]
   1d8f6:	4638      	mov	r0, r7
   1d8f8:	4798      	blx	r3
            if (!n) {
   1d8fa:	f1b8 0f00 	cmp.w	r8, #0
   1d8fe:	d005      	beq.n	1d90c <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   1d900:	4647      	mov	r7, r8
   1d902:	e7e8      	b.n	1d8d6 <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   1d904:	b116      	cbz	r6, 1d90c <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   1d906:	6933      	ldr	r3, [r6, #16]
   1d908:	4638      	mov	r0, r7
   1d90a:	4798      	blx	r3
    }
}
   1d90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d910:	2000df60 	.word	0x2000df60

0001d914 <oc_init>:
    return rc;
}

void
oc_init(void)
{
   1d914:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1d916:	4b07      	ldr	r3, [pc, #28]	; (1d934 <oc_init+0x20>)
   1d918:	781b      	ldrb	r3, [r3, #0]
   1d91a:	b133      	cbz	r3, 1d92a <oc_init+0x16>
    oc_ri_mem_init();
   1d91c:	f7ff ffa6 	bl	1d86c <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   1d920:	f7fd fb60 	bl	1afe4 <os_eventq_dflt_get>
   1d924:	f7ff ffba 	bl	1d89c <oc_evq_set>
}
   1d928:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1d92a:	461a      	mov	r2, r3
   1d92c:	4619      	mov	r1, r3
   1d92e:	4618      	mov	r0, r3
   1d930:	f7fc ff9a 	bl	1a868 <__assert_func>
   1d934:	2000ddbc 	.word	0x2000ddbc

0001d938 <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1d938:	4770      	bx	lr

0001d93a <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1d93a:	4770      	bx	lr

0001d93c <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1d93c:	4770      	bx	lr

0001d93e <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1d93e:	4770      	bx	lr

0001d940 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1d940:	4770      	bx	lr
	...

0001d944 <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   1d944:	b500      	push	{lr}
   1d946:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   1d948:	4b05      	ldr	r3, [pc, #20]	; (1d960 <oc_rep_init+0x1c>)
   1d94a:	9300      	str	r3, [sp, #0]
   1d94c:	4b05      	ldr	r3, [pc, #20]	; (1d964 <oc_rep_init+0x20>)
   1d94e:	2218      	movs	r2, #24
   1d950:	2102      	movs	r1, #2
   1d952:	4805      	ldr	r0, [pc, #20]	; (1d968 <oc_rep_init+0x24>)
   1d954:	f7fd fcd0 	bl	1b2f8 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   1d958:	b003      	add	sp, #12
   1d95a:	f85d fb04 	ldr.w	pc, [sp], #4
   1d95e:	bf00      	nop
   1d960:	000224b0 	.word	0x000224b0
   1d964:	2000dcec 	.word	0x2000dcec
   1d968:	2000dcd0 	.word	0x2000dcd0

0001d96c <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1d96c:	b570      	push	{r4, r5, r6, lr}
   1d96e:	b086      	sub	sp, #24
   1d970:	4605      	mov	r5, r0
   1d972:	460e      	mov	r6, r1
   1d974:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1d976:	2300      	movs	r3, #0
   1d978:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1d97a:	f000 f9ad 	bl	1dcd8 <mfg_init>

    mfg_open(&reader);
   1d97e:	a801      	add	r0, sp, #4
   1d980:	f000 f9c6 	bl	1dd10 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1d984:	6823      	ldr	r3, [r4, #0]
   1d986:	42ab      	cmp	r3, r5
   1d988:	da29      	bge.n	1d9de <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1d98a:	2102      	movs	r1, #2
   1d98c:	a801      	add	r0, sp, #4
   1d98e:	f000 f98c 	bl	1dcaa <mfg_seek_next_with_type>
   1d992:	4603      	mov	r3, r0
        switch (rc) {
   1d994:	f110 0f0f 	cmn.w	r0, #15
   1d998:	d003      	beq.n	1d9a2 <flash_map_read_mfg+0x36>
   1d99a:	b120      	cbz	r0, 1d9a6 <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
   1d99c:	4618      	mov	r0, r3
   1d99e:	b006      	add	sp, #24
   1d9a0:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   1d9a2:	2300      	movs	r3, #0
   1d9a4:	e7fa      	b.n	1d99c <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1d9a6:	a903      	add	r1, sp, #12
   1d9a8:	a801      	add	r0, sp, #4
   1d9aa:	f000 f98b 	bl	1dcc4 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1d9ae:	4603      	mov	r3, r0
   1d9b0:	2800      	cmp	r0, #0
   1d9b2:	d1f3      	bne.n	1d99c <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   1d9b4:	6823      	ldr	r3, [r4, #0]
   1d9b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1d9ba:	009a      	lsls	r2, r3, #2
   1d9bc:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   1d9be:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1d9c2:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   1d9c4:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1d9c8:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   1d9ca:	f8dd 200e 	ldr.w	r2, [sp, #14]
   1d9ce:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   1d9d0:	f8dd 2012 	ldr.w	r2, [sp, #18]
   1d9d4:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   1d9d6:	6823      	ldr	r3, [r4, #0]
   1d9d8:	3301      	adds	r3, #1
   1d9da:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1d9dc:	e7d2      	b.n	1d984 <flash_map_read_mfg+0x18>
            return -1;
   1d9de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d9e2:	e7db      	b.n	1d99c <flash_map_read_mfg+0x30>

0001d9e4 <flash_area_open>:
{
   1d9e4:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1d9e6:	4b0d      	ldr	r3, [pc, #52]	; (1da1c <flash_area_open+0x38>)
   1d9e8:	681d      	ldr	r5, [r3, #0]
   1d9ea:	b1a5      	cbz	r5, 1da16 <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
   1d9ec:	2300      	movs	r3, #0
   1d9ee:	4a0c      	ldr	r2, [pc, #48]	; (1da20 <flash_area_open+0x3c>)
   1d9f0:	6812      	ldr	r2, [r2, #0]
   1d9f2:	429a      	cmp	r2, r3
   1d9f4:	dd0b      	ble.n	1da0e <flash_area_open+0x2a>
        area = flash_map + i;
   1d9f6:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1d9fa:	00a2      	lsls	r2, r4, #2
   1d9fc:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
   1d9fe:	5caa      	ldrb	r2, [r5, r2]
   1da00:	4282      	cmp	r2, r0
   1da02:	d001      	beq.n	1da08 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
   1da04:	3301      	adds	r3, #1
   1da06:	e7f2      	b.n	1d9ee <flash_area_open+0xa>
            *fap = area;
   1da08:	600c      	str	r4, [r1, #0]
            return 0;
   1da0a:	2000      	movs	r0, #0
   1da0c:	e001      	b.n	1da12 <flash_area_open+0x2e>
    return SYS_ENOENT;
   1da0e:	f06f 0003 	mvn.w	r0, #3
}
   1da12:	bc30      	pop	{r4, r5}
   1da14:	4770      	bx	lr
        return SYS_EACCES;
   1da16:	f06f 0006 	mvn.w	r0, #6
   1da1a:	e7fa      	b.n	1da12 <flash_area_open+0x2e>
   1da1c:	2000df84 	.word	0x2000df84
   1da20:	2000df80 	.word	0x2000df80

0001da24 <flash_area_read>:
{
   1da24:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1da26:	6884      	ldr	r4, [r0, #8]
   1da28:	428c      	cmp	r4, r1
   1da2a:	d308      	bcc.n	1da3e <flash_area_read+0x1a>
   1da2c:	18cd      	adds	r5, r1, r3
   1da2e:	42ac      	cmp	r4, r5
   1da30:	d308      	bcc.n	1da44 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1da32:	6844      	ldr	r4, [r0, #4]
   1da34:	4421      	add	r1, r4
   1da36:	7840      	ldrb	r0, [r0, #1]
   1da38:	f000 f9c8 	bl	1ddcc <hal_flash_read>
}
   1da3c:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   1da3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1da42:	e7fb      	b.n	1da3c <flash_area_read+0x18>
   1da44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1da48:	e7f8      	b.n	1da3c <flash_area_read+0x18>
	...

0001da4c <flash_map_init>:

void
flash_map_init(void)
{
   1da4c:	b510      	push	{r4, lr}
   1da4e:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1da50:	4b14      	ldr	r3, [pc, #80]	; (1daa4 <flash_map_init+0x58>)
   1da52:	781b      	ldrb	r3, [r3, #0]
   1da54:	b303      	cbz	r3, 1da98 <flash_map_init+0x4c>

    rc = hal_flash_init();
   1da56:	f000 f9a5 	bl	1dda4 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1da5a:	b138      	cbz	r0, 1da6c <flash_map_init+0x20>
   1da5c:	2000      	movs	r0, #0
   1da5e:	9000      	str	r0, [sp, #0]
   1da60:	4b11      	ldr	r3, [pc, #68]	; (1daa8 <flash_map_init+0x5c>)
   1da62:	681c      	ldr	r4, [r3, #0]
   1da64:	4603      	mov	r3, r0
   1da66:	4602      	mov	r2, r0
   1da68:	4601      	mov	r1, r0
   1da6a:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1da6c:	4b0f      	ldr	r3, [pc, #60]	; (1daac <flash_map_init+0x60>)
   1da6e:	4a10      	ldr	r2, [pc, #64]	; (1dab0 <flash_map_init+0x64>)
   1da70:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1da72:	4b10      	ldr	r3, [pc, #64]	; (1dab4 <flash_map_init+0x68>)
   1da74:	2206      	movs	r2, #6
   1da76:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1da78:	aa03      	add	r2, sp, #12
   1da7a:	490f      	ldr	r1, [pc, #60]	; (1dab8 <flash_map_init+0x6c>)
   1da7c:	200a      	movs	r0, #10
   1da7e:	f7ff ff75 	bl	1d96c <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1da82:	b938      	cbnz	r0, 1da94 <flash_map_init+0x48>
   1da84:	9b03      	ldr	r3, [sp, #12]
   1da86:	2b00      	cmp	r3, #0
   1da88:	dd04      	ble.n	1da94 <flash_map_init+0x48>
        flash_map = mfg_areas;
   1da8a:	4a08      	ldr	r2, [pc, #32]	; (1daac <flash_map_init+0x60>)
   1da8c:	490a      	ldr	r1, [pc, #40]	; (1dab8 <flash_map_init+0x6c>)
   1da8e:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1da90:	4a08      	ldr	r2, [pc, #32]	; (1dab4 <flash_map_init+0x68>)
   1da92:	6013      	str	r3, [r2, #0]
    }
}
   1da94:	b004      	add	sp, #16
   1da96:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1da98:	461a      	mov	r2, r3
   1da9a:	4619      	mov	r1, r3
   1da9c:	4618      	mov	r0, r3
   1da9e:	f7fc fee3 	bl	1a868 <__assert_func>
   1daa2:	bf00      	nop
   1daa4:	2000ddbc 	.word	0x2000ddbc
   1daa8:	20000104 	.word	0x20000104
   1daac:	2000df84 	.word	0x2000df84
   1dab0:	000224bc 	.word	0x000224bc
   1dab4:	2000df80 	.word	0x2000df80
   1dab8:	2000dd1c 	.word	0x2000dd1c

0001dabc <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   1dabc:	4770      	bx	lr
	...

0001dac0 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1dac0:	b530      	push	{r4, r5, lr}
   1dac2:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1dac4:	7885      	ldrb	r5, [r0, #2]
   1dac6:	4b21      	ldr	r3, [pc, #132]	; (1db4c <mfg_seek_next_aux+0x8c>)
   1dac8:	681b      	ldr	r3, [r3, #0]
   1daca:	429d      	cmp	r5, r3
   1dacc:	da32      	bge.n	1db34 <mfg_seek_next_aux+0x74>
   1dace:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1dad0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1dad4:	0093      	lsls	r3, r2, #2
   1dad6:	a901      	add	r1, sp, #4
   1dad8:	4a1d      	ldr	r2, [pc, #116]	; (1db50 <mfg_seek_next_aux+0x90>)
   1dada:	5cd0      	ldrb	r0, [r2, r3]
   1dadc:	f7ff ff82 	bl	1d9e4 <flash_area_open>
    if (rc != 0) {
   1dae0:	bb58      	cbnz	r0, 1db3a <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1dae2:	6862      	ldr	r2, [r4, #4]
   1dae4:	b9c2      	cbnz	r2, 1db18 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1dae6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1daea:	00aa      	lsls	r2, r5, #2
   1daec:	4b18      	ldr	r3, [pc, #96]	; (1db50 <mfg_seek_next_aux+0x90>)
   1daee:	4413      	add	r3, r2
   1daf0:	685b      	ldr	r3, [r3, #4]
   1daf2:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1daf4:	6861      	ldr	r1, [r4, #4]
   1daf6:	9801      	ldr	r0, [sp, #4]
   1daf8:	6883      	ldr	r3, [r0, #8]
   1dafa:	3b08      	subs	r3, #8
   1dafc:	4299      	cmp	r1, r3
   1dafe:	d310      	bcc.n	1db22 <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1db00:	78a3      	ldrb	r3, [r4, #2]
   1db02:	1c59      	adds	r1, r3, #1
   1db04:	4a11      	ldr	r2, [pc, #68]	; (1db4c <mfg_seek_next_aux+0x8c>)
   1db06:	6812      	ldr	r2, [r2, #0]
   1db08:	4291      	cmp	r1, r2
   1db0a:	da19      	bge.n	1db40 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1db0c:	2200      	movs	r2, #0
   1db0e:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1db10:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1db12:	f06f 0305 	mvn.w	r3, #5
   1db16:	e015      	b.n	1db44 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1db18:	7863      	ldrb	r3, [r4, #1]
   1db1a:	4413      	add	r3, r2
   1db1c:	3302      	adds	r3, #2
   1db1e:	6063      	str	r3, [r4, #4]
   1db20:	e7e8      	b.n	1daf4 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1db22:	2302      	movs	r3, #2
   1db24:	4622      	mov	r2, r4
   1db26:	f7ff ff7d 	bl	1da24 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1db2a:	4603      	mov	r3, r0
   1db2c:	b150      	cbz	r0, 1db44 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   1db2e:	f06f 0304 	mvn.w	r3, #4
   1db32:	e007      	b.n	1db44 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   1db34:	f06f 0301 	mvn.w	r3, #1
   1db38:	e004      	b.n	1db44 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   1db3a:	f06f 0304 	mvn.w	r3, #4
   1db3e:	e001      	b.n	1db44 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   1db40:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   1db44:	4618      	mov	r0, r3
   1db46:	b003      	add	sp, #12
   1db48:	bd30      	pop	{r4, r5, pc}
   1db4a:	bf00      	nop
   1db4c:	2000ddb0 	.word	0x2000ddb0
   1db50:	2000dd98 	.word	0x2000dd98

0001db54 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1db54:	b530      	push	{r4, r5, lr}
   1db56:	b085      	sub	sp, #20
   1db58:	4605      	mov	r5, r0
   1db5a:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1db5c:	a903      	add	r1, sp, #12
   1db5e:	f7ff ff41 	bl	1d9e4 <flash_area_open>
    if (rc != 0) {
   1db62:	b9e8      	cbnz	r0, 1dba0 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1db64:	9803      	ldr	r0, [sp, #12]
   1db66:	6881      	ldr	r1, [r0, #8]
   1db68:	2308      	movs	r3, #8
   1db6a:	aa01      	add	r2, sp, #4
   1db6c:	3908      	subs	r1, #8
   1db6e:	f7ff ff59 	bl	1da24 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1db72:	4601      	mov	r1, r0
   1db74:	b9b8      	cbnz	r0, 1dba6 <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1db76:	9a02      	ldr	r2, [sp, #8]
   1db78:	4b11      	ldr	r3, [pc, #68]	; (1dbc0 <mfg_read_mmr+0x6c>)
   1db7a:	429a      	cmp	r2, r3
   1db7c:	d116      	bne.n	1dbac <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1db7e:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1db82:	2b02      	cmp	r3, #2
   1db84:	d115      	bne.n	1dbb2 <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1db86:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1db8a:	9b03      	ldr	r3, [sp, #12]
   1db8c:	689b      	ldr	r3, [r3, #8]
   1db8e:	429a      	cmp	r2, r3
   1db90:	d812      	bhi.n	1dbb8 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1db92:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1db94:	7025      	strb	r5, [r4, #0]
   1db96:	6063      	str	r3, [r4, #4]
   1db98:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1db9a:	4608      	mov	r0, r1
   1db9c:	b005      	add	sp, #20
   1db9e:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1dba0:	f06f 0104 	mvn.w	r1, #4
   1dba4:	e7f9      	b.n	1db9a <mfg_read_mmr+0x46>
        return SYS_EIO;
   1dba6:	f06f 0104 	mvn.w	r1, #4
   1dbaa:	e7f6      	b.n	1db9a <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1dbac:	f06f 0108 	mvn.w	r1, #8
   1dbb0:	e7f3      	b.n	1db9a <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   1dbb2:	f06f 010b 	mvn.w	r1, #11
   1dbb6:	e7f0      	b.n	1db9a <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1dbb8:	f06f 0108 	mvn.w	r1, #8
   1dbbc:	e7ed      	b.n	1db9a <mfg_read_mmr+0x46>
   1dbbe:	bf00      	nop
   1dbc0:	3bb2a269 	.word	0x3bb2a269

0001dbc4 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1dbc4:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1dbc6:	2300      	movs	r3, #0
   1dbc8:	4a11      	ldr	r2, [pc, #68]	; (1dc10 <mfg_read_next_mmr+0x4c>)
   1dbca:	6812      	ldr	r2, [r2, #0]
   1dbcc:	429a      	cmp	r2, r3
   1dbce:	dd08      	ble.n	1dbe2 <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   1dbd0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1dbd4:	008a      	lsls	r2, r1, #2
   1dbd6:	490f      	ldr	r1, [pc, #60]	; (1dc14 <mfg_read_next_mmr+0x50>)
   1dbd8:	5c8a      	ldrb	r2, [r1, r2]
   1dbda:	4282      	cmp	r2, r0
   1dbdc:	d011      	beq.n	1dc02 <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1dbde:	3301      	adds	r3, #1
   1dbe0:	e7f2      	b.n	1dbc8 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1dbe2:	2a01      	cmp	r2, #1
   1dbe4:	dc11      	bgt.n	1dc0a <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1dbe6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1dbea:	0093      	lsls	r3, r2, #2
   1dbec:	4909      	ldr	r1, [pc, #36]	; (1dc14 <mfg_read_next_mmr+0x50>)
   1dbee:	4419      	add	r1, r3
   1dbf0:	f7ff ffb0 	bl	1db54 <mfg_read_mmr>
    if (rc != 0) {
   1dbf4:	4603      	mov	r3, r0
   1dbf6:	b930      	cbnz	r0, 1dc06 <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   1dbf8:	4905      	ldr	r1, [pc, #20]	; (1dc10 <mfg_read_next_mmr+0x4c>)
   1dbfa:	680a      	ldr	r2, [r1, #0]
   1dbfc:	3201      	adds	r2, #1
   1dbfe:	600a      	str	r2, [r1, #0]
    return 0;
   1dc00:	e001      	b.n	1dc06 <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   1dc02:	f06f 030a 	mvn.w	r3, #10
}
   1dc06:	4618      	mov	r0, r3
   1dc08:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1dc0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dc0e:	e7fa      	b.n	1dc06 <mfg_read_next_mmr+0x42>
   1dc10:	2000ddb0 	.word	0x2000ddb0
   1dc14:	2000dd98 	.word	0x2000dd98

0001dc18 <mfg_open_flash_area>:
{
   1dc18:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1dc1a:	7883      	ldrb	r3, [r0, #2]
   1dc1c:	4a0b      	ldr	r2, [pc, #44]	; (1dc4c <mfg_open_flash_area+0x34>)
   1dc1e:	6812      	ldr	r2, [r2, #0]
   1dc20:	4293      	cmp	r3, r2
   1dc22:	da0a      	bge.n	1dc3a <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   1dc24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1dc28:	009a      	lsls	r2, r3, #2
   1dc2a:	4b09      	ldr	r3, [pc, #36]	; (1dc50 <mfg_open_flash_area+0x38>)
   1dc2c:	5c98      	ldrb	r0, [r3, r2]
   1dc2e:	f7ff fed9 	bl	1d9e4 <flash_area_open>
    if (rc != 0) {
   1dc32:	4603      	mov	r3, r0
   1dc34:	b938      	cbnz	r0, 1dc46 <mfg_open_flash_area+0x2e>
}
   1dc36:	4618      	mov	r0, r3
   1dc38:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1dc3a:	2300      	movs	r3, #0
   1dc3c:	461a      	mov	r2, r3
   1dc3e:	4619      	mov	r1, r3
   1dc40:	4618      	mov	r0, r3
   1dc42:	f7fc fe11 	bl	1a868 <__assert_func>
        return SYS_EIO;
   1dc46:	f06f 0304 	mvn.w	r3, #4
   1dc4a:	e7f4      	b.n	1dc36 <mfg_open_flash_area+0x1e>
   1dc4c:	2000ddb0 	.word	0x2000ddb0
   1dc50:	2000dd98 	.word	0x2000dd98

0001dc54 <mfg_read_tlv_body>:
{
   1dc54:	b570      	push	{r4, r5, r6, lr}
   1dc56:	b082      	sub	sp, #8
   1dc58:	4606      	mov	r6, r0
   1dc5a:	460c      	mov	r4, r1
   1dc5c:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1dc5e:	a901      	add	r1, sp, #4
   1dc60:	f7ff ffda 	bl	1dc18 <mfg_open_flash_area>
    if (rc != 0) {
   1dc64:	4603      	mov	r3, r0
   1dc66:	b110      	cbz	r0, 1dc6e <mfg_read_tlv_body+0x1a>
}
   1dc68:	4618      	mov	r0, r3
   1dc6a:	b002      	add	sp, #8
   1dc6c:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1dc6e:	462a      	mov	r2, r5
   1dc70:	2100      	movs	r1, #0
   1dc72:	4620      	mov	r0, r4
   1dc74:	f7fe f9fb 	bl	1c06e <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1dc78:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1dc7a:	6871      	ldr	r1, [r6, #4]
   1dc7c:	42ab      	cmp	r3, r5
   1dc7e:	bfa8      	it	ge
   1dc80:	462b      	movge	r3, r5
   1dc82:	4622      	mov	r2, r4
   1dc84:	3102      	adds	r1, #2
   1dc86:	9801      	ldr	r0, [sp, #4]
   1dc88:	f7ff fecc 	bl	1da24 <flash_area_read>
    if (rc != 0) {
   1dc8c:	4603      	mov	r3, r0
   1dc8e:	2800      	cmp	r0, #0
   1dc90:	d0ea      	beq.n	1dc68 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   1dc92:	f06f 0304 	mvn.w	r3, #4
   1dc96:	e7e7      	b.n	1dc68 <mfg_read_tlv_body+0x14>

0001dc98 <mfg_seek_next>:
{
   1dc98:	b510      	push	{r4, lr}
   1dc9a:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1dc9c:	4620      	mov	r0, r4
   1dc9e:	f7ff ff0f 	bl	1dac0 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1dca2:	f110 0f06 	cmn.w	r0, #6
   1dca6:	d0f9      	beq.n	1dc9c <mfg_seek_next+0x4>
}
   1dca8:	bd10      	pop	{r4, pc}

0001dcaa <mfg_seek_next_with_type>:
{
   1dcaa:	b538      	push	{r3, r4, r5, lr}
   1dcac:	4604      	mov	r4, r0
   1dcae:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1dcb0:	4620      	mov	r0, r4
   1dcb2:	f7ff fff1 	bl	1dc98 <mfg_seek_next>
        if (rc != 0) {
   1dcb6:	4602      	mov	r2, r0
   1dcb8:	b910      	cbnz	r0, 1dcc0 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1dcba:	7823      	ldrb	r3, [r4, #0]
   1dcbc:	42ab      	cmp	r3, r5
   1dcbe:	d1f7      	bne.n	1dcb0 <mfg_seek_next_with_type+0x6>
}
   1dcc0:	4610      	mov	r0, r2
   1dcc2:	bd38      	pop	{r3, r4, r5, pc}

0001dcc4 <mfg_read_tlv_flash_area>:
{
   1dcc4:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1dcc6:	220a      	movs	r2, #10
   1dcc8:	f7ff ffc4 	bl	1dc54 <mfg_read_tlv_body>
}
   1dccc:	bd08      	pop	{r3, pc}

0001dcce <mfg_read_tlv_mmr_ref>:
{
   1dcce:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1dcd0:	2201      	movs	r2, #1
   1dcd2:	f7ff ffbf 	bl	1dc54 <mfg_read_tlv_body>
}
   1dcd6:	bd08      	pop	{r3, pc}

0001dcd8 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1dcd8:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1dcda:	4b0b      	ldr	r3, [pc, #44]	; (1dd08 <mfg_init+0x30>)
   1dcdc:	781b      	ldrb	r3, [r3, #0]
   1dcde:	b94b      	cbnz	r3, 1dcf4 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   1dce0:	4b09      	ldr	r3, [pc, #36]	; (1dd08 <mfg_init+0x30>)
   1dce2:	2201      	movs	r2, #1
   1dce4:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1dce6:	4b09      	ldr	r3, [pc, #36]	; (1dd0c <mfg_init+0x34>)
   1dce8:	781b      	ldrb	r3, [r3, #0]
   1dcea:	b123      	cbz	r3, 1dcf6 <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1dcec:	2000      	movs	r0, #0
   1dcee:	f7ff ff69 	bl	1dbc4 <mfg_read_next_mmr>
    if (rc != 0) {
   1dcf2:	b128      	cbz	r0, 1dd00 <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
   1dcf4:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1dcf6:	461a      	mov	r2, r3
   1dcf8:	4619      	mov	r1, r3
   1dcfa:	4618      	mov	r0, r3
   1dcfc:	f7fc fdb4 	bl	1a868 <__assert_func>
    rc = mfg_read_mmr_refs();
   1dd00:	f000 f80e 	bl	1dd20 <mfg_read_mmr_refs>
err:
   1dd04:	e7f6      	b.n	1dcf4 <mfg_init+0x1c>
   1dd06:	bf00      	nop
   1dd08:	2000dd94 	.word	0x2000dd94
   1dd0c:	2000ddbc 	.word	0x2000ddbc

0001dd10 <mfg_open>:
{
   1dd10:	b510      	push	{r4, lr}
   1dd12:	4604      	mov	r4, r0
    mfg_init();
   1dd14:	f7ff ffe0 	bl	1dcd8 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1dd18:	2300      	movs	r3, #0
   1dd1a:	6023      	str	r3, [r4, #0]
   1dd1c:	6063      	str	r3, [r4, #4]
}
   1dd1e:	bd10      	pop	{r4, pc}

0001dd20 <mfg_read_mmr_refs>:
{
   1dd20:	b500      	push	{lr}
   1dd22:	b085      	sub	sp, #20
    mfg_open(&reader);
   1dd24:	a801      	add	r0, sp, #4
   1dd26:	f7ff fff3 	bl	1dd10 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1dd2a:	2104      	movs	r1, #4
   1dd2c:	eb0d 0001 	add.w	r0, sp, r1
   1dd30:	f7ff ffbb 	bl	1dcaa <mfg_seek_next_with_type>
   1dd34:	4603      	mov	r3, r0
        switch (rc) {
   1dd36:	f110 0f0f 	cmn.w	r0, #15
   1dd3a:	d004      	beq.n	1dd46 <mfg_read_mmr_refs+0x26>
   1dd3c:	b128      	cbz	r0, 1dd4a <mfg_read_mmr_refs+0x2a>
}
   1dd3e:	4618      	mov	r0, r3
   1dd40:	b005      	add	sp, #20
   1dd42:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   1dd46:	2300      	movs	r3, #0
   1dd48:	e7f9      	b.n	1dd3e <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1dd4a:	a903      	add	r1, sp, #12
   1dd4c:	a801      	add	r0, sp, #4
   1dd4e:	f7ff ffbe 	bl	1dcce <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1dd52:	4603      	mov	r3, r0
   1dd54:	2800      	cmp	r0, #0
   1dd56:	d1f2      	bne.n	1dd3e <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1dd58:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1dd5c:	f7ff ff32 	bl	1dbc4 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1dd60:	4603      	mov	r3, r0
   1dd62:	2800      	cmp	r0, #0
   1dd64:	d0e1      	beq.n	1dd2a <mfg_read_mmr_refs+0xa>
   1dd66:	f110 0f0b 	cmn.w	r0, #11
   1dd6a:	d0de      	beq.n	1dd2a <mfg_read_mmr_refs+0xa>
   1dd6c:	e7e7      	b.n	1dd3e <mfg_read_mmr_refs+0x1e>
	...

0001dd70 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   1dd70:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   1dd72:	4803      	ldr	r0, [pc, #12]	; (1dd80 <__wrap_coap_receive+0x10>)
   1dd74:	f7fb feb0 	bl	19ad8 <console_printf>
    return -1;
}
   1dd78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1dd7c:	bd08      	pop	{r3, pc}
   1dd7e:	bf00      	nop
   1dd80:	00022504 	.word	0x00022504

0001dd84 <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   1dd84:	4770      	bx	lr

0001dd86 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1dd86:	6843      	ldr	r3, [r0, #4]
   1dd88:	428b      	cmp	r3, r1
   1dd8a:	d808      	bhi.n	1dd9e <hal_flash_check_addr+0x18>
   1dd8c:	6882      	ldr	r2, [r0, #8]
   1dd8e:	4413      	add	r3, r2
   1dd90:	428b      	cmp	r3, r1
   1dd92:	d301      	bcc.n	1dd98 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1dd94:	2000      	movs	r0, #0
}
   1dd96:	4770      	bx	lr
        return SYS_EINVAL;
   1dd98:	f06f 0001 	mvn.w	r0, #1
   1dd9c:	4770      	bx	lr
   1dd9e:	f06f 0001 	mvn.w	r0, #1
   1dda2:	4770      	bx	lr

0001dda4 <hal_flash_init>:
{
   1dda4:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1dda6:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1dda8:	462c      	mov	r4, r5
   1ddaa:	e001      	b.n	1ddb0 <hal_flash_init+0xc>
   1ddac:	3401      	adds	r4, #1
   1ddae:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1ddb0:	4620      	mov	r0, r4
   1ddb2:	f7fe fce3 	bl	1c77c <hal_bsp_flash_dev>
        if (!hf) {
   1ddb6:	b138      	cbz	r0, 1ddc8 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1ddb8:	6802      	ldr	r2, [r0, #0]
   1ddba:	6952      	ldr	r2, [r2, #20]
   1ddbc:	4790      	blx	r2
   1ddbe:	2800      	cmp	r0, #0
   1ddc0:	d0f4      	beq.n	1ddac <hal_flash_init+0x8>
            rc = SYS_EIO;
   1ddc2:	f06f 0504 	mvn.w	r5, #4
   1ddc6:	e7f1      	b.n	1ddac <hal_flash_init+0x8>
}
   1ddc8:	4628      	mov	r0, r5
   1ddca:	bd38      	pop	{r3, r4, r5, pc}

0001ddcc <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1ddcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ddd0:	460d      	mov	r5, r1
   1ddd2:	4690      	mov	r8, r2
   1ddd4:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1ddd6:	f7fe fcd1 	bl	1c77c <hal_bsp_flash_dev>
    if (!hf) {
   1ddda:	b1c0      	cbz	r0, 1de0e <hal_flash_read+0x42>
   1dddc:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1ddde:	4629      	mov	r1, r5
   1dde0:	f7ff ffd1 	bl	1dd86 <hal_flash_check_addr>
   1dde4:	b9b0      	cbnz	r0, 1de14 <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1dde6:	19a9      	adds	r1, r5, r6
   1dde8:	4620      	mov	r0, r4
   1ddea:	f7ff ffcc 	bl	1dd86 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1ddee:	b9a0      	cbnz	r0, 1de1a <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1ddf0:	6823      	ldr	r3, [r4, #0]
   1ddf2:	681f      	ldr	r7, [r3, #0]
   1ddf4:	4633      	mov	r3, r6
   1ddf6:	4642      	mov	r2, r8
   1ddf8:	4629      	mov	r1, r5
   1ddfa:	4620      	mov	r0, r4
   1ddfc:	47b8      	blx	r7
    if (rc != 0) {
   1ddfe:	4603      	mov	r3, r0
   1de00:	b910      	cbnz	r0, 1de08 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1de02:	4618      	mov	r0, r3
   1de04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1de08:	f06f 0304 	mvn.w	r3, #4
   1de0c:	e7f9      	b.n	1de02 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1de0e:	f06f 0301 	mvn.w	r3, #1
   1de12:	e7f6      	b.n	1de02 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1de14:	f06f 0301 	mvn.w	r3, #1
   1de18:	e7f3      	b.n	1de02 <hal_flash_read+0x36>
   1de1a:	f06f 0301 	mvn.w	r3, #1
   1de1e:	e7f0      	b.n	1de02 <hal_flash_read+0x36>

0001de20 <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   1de20:	2010      	movs	r0, #16
   1de22:	4770      	bx	lr

0001de24 <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   1de24:	b570      	push	{r4, r5, r6, lr}
   1de26:	4606      	mov	r6, r0
   1de28:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   1de2a:	460d      	mov	r5, r1
   1de2c:	2908      	cmp	r1, #8
   1de2e:	bf28      	it	cs
   1de30:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   1de32:	462a      	mov	r2, r5
   1de34:	4906      	ldr	r1, [pc, #24]	; (1de50 <hal_bsp_hw_id+0x2c>)
   1de36:	f7fe f90d 	bl	1c054 <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   1de3a:	1b64      	subs	r4, r4, r5
   1de3c:	2c08      	cmp	r4, #8
   1de3e:	bf28      	it	cs
   1de40:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   1de42:	4622      	mov	r2, r4
   1de44:	4903      	ldr	r1, [pc, #12]	; (1de54 <hal_bsp_hw_id+0x30>)
   1de46:	1970      	adds	r0, r6, r5
   1de48:	f7fe f904 	bl	1c054 <memcpy>

    return len + cnt;
}
   1de4c:	1928      	adds	r0, r5, r4
   1de4e:	bd70      	pop	{r4, r5, r6, pc}
   1de50:	10000060 	.word	0x10000060
   1de54:	100000a4 	.word	0x100000a4

0001de58 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1de58:	b40e      	push	{r1, r2, r3}
   1de5a:	b500      	push	{lr}
   1de5c:	b082      	sub	sp, #8
   1de5e:	ab03      	add	r3, sp, #12
   1de60:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1de64:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1de66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1de6a:	f7fe fbef 	bl	1c64c <vsnprintf>
	va_end(ap);

	return rv;
}
   1de6e:	b002      	add	sp, #8
   1de70:	f85d eb04 	ldr.w	lr, [sp], #4
   1de74:	b003      	add	sp, #12
   1de76:	4770      	bx	lr

0001de78 <__aeabi_uldivmod>:
   1de78:	b953      	cbnz	r3, 1de90 <__aeabi_uldivmod+0x18>
   1de7a:	b94a      	cbnz	r2, 1de90 <__aeabi_uldivmod+0x18>
   1de7c:	2900      	cmp	r1, #0
   1de7e:	bf08      	it	eq
   1de80:	2800      	cmpeq	r0, #0
   1de82:	bf1c      	itt	ne
   1de84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1de88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1de8c:	f000 b972 	b.w	1e174 <__aeabi_idiv0>
   1de90:	f1ad 0c08 	sub.w	ip, sp, #8
   1de94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1de98:	f000 f806 	bl	1dea8 <__udivmoddi4>
   1de9c:	f8dd e004 	ldr.w	lr, [sp, #4]
   1dea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1dea4:	b004      	add	sp, #16
   1dea6:	4770      	bx	lr

0001dea8 <__udivmoddi4>:
   1dea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1deac:	9e08      	ldr	r6, [sp, #32]
   1deae:	4604      	mov	r4, r0
   1deb0:	4688      	mov	r8, r1
   1deb2:	2b00      	cmp	r3, #0
   1deb4:	d14b      	bne.n	1df4e <__udivmoddi4+0xa6>
   1deb6:	428a      	cmp	r2, r1
   1deb8:	4615      	mov	r5, r2
   1deba:	d967      	bls.n	1df8c <__udivmoddi4+0xe4>
   1debc:	fab2 f282 	clz	r2, r2
   1dec0:	b14a      	cbz	r2, 1ded6 <__udivmoddi4+0x2e>
   1dec2:	f1c2 0720 	rsb	r7, r2, #32
   1dec6:	fa01 f302 	lsl.w	r3, r1, r2
   1deca:	fa20 f707 	lsr.w	r7, r0, r7
   1dece:	4095      	lsls	r5, r2
   1ded0:	ea47 0803 	orr.w	r8, r7, r3
   1ded4:	4094      	lsls	r4, r2
   1ded6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1deda:	0c23      	lsrs	r3, r4, #16
   1dedc:	fbb8 f7fe 	udiv	r7, r8, lr
   1dee0:	fa1f fc85 	uxth.w	ip, r5
   1dee4:	fb0e 8817 	mls	r8, lr, r7, r8
   1dee8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   1deec:	fb07 f10c 	mul.w	r1, r7, ip
   1def0:	4299      	cmp	r1, r3
   1def2:	d909      	bls.n	1df08 <__udivmoddi4+0x60>
   1def4:	18eb      	adds	r3, r5, r3
   1def6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1defa:	f080 811b 	bcs.w	1e134 <__udivmoddi4+0x28c>
   1defe:	4299      	cmp	r1, r3
   1df00:	f240 8118 	bls.w	1e134 <__udivmoddi4+0x28c>
   1df04:	3f02      	subs	r7, #2
   1df06:	442b      	add	r3, r5
   1df08:	1a5b      	subs	r3, r3, r1
   1df0a:	b2a4      	uxth	r4, r4
   1df0c:	fbb3 f0fe 	udiv	r0, r3, lr
   1df10:	fb0e 3310 	mls	r3, lr, r0, r3
   1df14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1df18:	fb00 fc0c 	mul.w	ip, r0, ip
   1df1c:	45a4      	cmp	ip, r4
   1df1e:	d909      	bls.n	1df34 <__udivmoddi4+0x8c>
   1df20:	192c      	adds	r4, r5, r4
   1df22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1df26:	f080 8107 	bcs.w	1e138 <__udivmoddi4+0x290>
   1df2a:	45a4      	cmp	ip, r4
   1df2c:	f240 8104 	bls.w	1e138 <__udivmoddi4+0x290>
   1df30:	3802      	subs	r0, #2
   1df32:	442c      	add	r4, r5
   1df34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1df38:	eba4 040c 	sub.w	r4, r4, ip
   1df3c:	2700      	movs	r7, #0
   1df3e:	b11e      	cbz	r6, 1df48 <__udivmoddi4+0xa0>
   1df40:	40d4      	lsrs	r4, r2
   1df42:	2300      	movs	r3, #0
   1df44:	e9c6 4300 	strd	r4, r3, [r6]
   1df48:	4639      	mov	r1, r7
   1df4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1df4e:	428b      	cmp	r3, r1
   1df50:	d909      	bls.n	1df66 <__udivmoddi4+0xbe>
   1df52:	2e00      	cmp	r6, #0
   1df54:	f000 80eb 	beq.w	1e12e <__udivmoddi4+0x286>
   1df58:	2700      	movs	r7, #0
   1df5a:	e9c6 0100 	strd	r0, r1, [r6]
   1df5e:	4638      	mov	r0, r7
   1df60:	4639      	mov	r1, r7
   1df62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1df66:	fab3 f783 	clz	r7, r3
   1df6a:	2f00      	cmp	r7, #0
   1df6c:	d147      	bne.n	1dffe <__udivmoddi4+0x156>
   1df6e:	428b      	cmp	r3, r1
   1df70:	d302      	bcc.n	1df78 <__udivmoddi4+0xd0>
   1df72:	4282      	cmp	r2, r0
   1df74:	f200 80fa 	bhi.w	1e16c <__udivmoddi4+0x2c4>
   1df78:	1a84      	subs	r4, r0, r2
   1df7a:	eb61 0303 	sbc.w	r3, r1, r3
   1df7e:	2001      	movs	r0, #1
   1df80:	4698      	mov	r8, r3
   1df82:	2e00      	cmp	r6, #0
   1df84:	d0e0      	beq.n	1df48 <__udivmoddi4+0xa0>
   1df86:	e9c6 4800 	strd	r4, r8, [r6]
   1df8a:	e7dd      	b.n	1df48 <__udivmoddi4+0xa0>
   1df8c:	b902      	cbnz	r2, 1df90 <__udivmoddi4+0xe8>
   1df8e:	deff      	udf	#255	; 0xff
   1df90:	fab2 f282 	clz	r2, r2
   1df94:	2a00      	cmp	r2, #0
   1df96:	f040 808f 	bne.w	1e0b8 <__udivmoddi4+0x210>
   1df9a:	1b49      	subs	r1, r1, r5
   1df9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1dfa0:	fa1f f885 	uxth.w	r8, r5
   1dfa4:	2701      	movs	r7, #1
   1dfa6:	fbb1 fcfe 	udiv	ip, r1, lr
   1dfaa:	0c23      	lsrs	r3, r4, #16
   1dfac:	fb0e 111c 	mls	r1, lr, ip, r1
   1dfb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1dfb4:	fb08 f10c 	mul.w	r1, r8, ip
   1dfb8:	4299      	cmp	r1, r3
   1dfba:	d907      	bls.n	1dfcc <__udivmoddi4+0x124>
   1dfbc:	18eb      	adds	r3, r5, r3
   1dfbe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1dfc2:	d202      	bcs.n	1dfca <__udivmoddi4+0x122>
   1dfc4:	4299      	cmp	r1, r3
   1dfc6:	f200 80cd 	bhi.w	1e164 <__udivmoddi4+0x2bc>
   1dfca:	4684      	mov	ip, r0
   1dfcc:	1a59      	subs	r1, r3, r1
   1dfce:	b2a3      	uxth	r3, r4
   1dfd0:	fbb1 f0fe 	udiv	r0, r1, lr
   1dfd4:	fb0e 1410 	mls	r4, lr, r0, r1
   1dfd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   1dfdc:	fb08 f800 	mul.w	r8, r8, r0
   1dfe0:	45a0      	cmp	r8, r4
   1dfe2:	d907      	bls.n	1dff4 <__udivmoddi4+0x14c>
   1dfe4:	192c      	adds	r4, r5, r4
   1dfe6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1dfea:	d202      	bcs.n	1dff2 <__udivmoddi4+0x14a>
   1dfec:	45a0      	cmp	r8, r4
   1dfee:	f200 80b6 	bhi.w	1e15e <__udivmoddi4+0x2b6>
   1dff2:	4618      	mov	r0, r3
   1dff4:	eba4 0408 	sub.w	r4, r4, r8
   1dff8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1dffc:	e79f      	b.n	1df3e <__udivmoddi4+0x96>
   1dffe:	f1c7 0c20 	rsb	ip, r7, #32
   1e002:	40bb      	lsls	r3, r7
   1e004:	fa22 fe0c 	lsr.w	lr, r2, ip
   1e008:	ea4e 0e03 	orr.w	lr, lr, r3
   1e00c:	fa01 f407 	lsl.w	r4, r1, r7
   1e010:	fa20 f50c 	lsr.w	r5, r0, ip
   1e014:	fa21 f30c 	lsr.w	r3, r1, ip
   1e018:	ea4f 481e 	mov.w	r8, lr, lsr #16
   1e01c:	4325      	orrs	r5, r4
   1e01e:	fbb3 f9f8 	udiv	r9, r3, r8
   1e022:	0c2c      	lsrs	r4, r5, #16
   1e024:	fb08 3319 	mls	r3, r8, r9, r3
   1e028:	fa1f fa8e 	uxth.w	sl, lr
   1e02c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1e030:	fb09 f40a 	mul.w	r4, r9, sl
   1e034:	429c      	cmp	r4, r3
   1e036:	fa02 f207 	lsl.w	r2, r2, r7
   1e03a:	fa00 f107 	lsl.w	r1, r0, r7
   1e03e:	d90b      	bls.n	1e058 <__udivmoddi4+0x1b0>
   1e040:	eb1e 0303 	adds.w	r3, lr, r3
   1e044:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1e048:	f080 8087 	bcs.w	1e15a <__udivmoddi4+0x2b2>
   1e04c:	429c      	cmp	r4, r3
   1e04e:	f240 8084 	bls.w	1e15a <__udivmoddi4+0x2b2>
   1e052:	f1a9 0902 	sub.w	r9, r9, #2
   1e056:	4473      	add	r3, lr
   1e058:	1b1b      	subs	r3, r3, r4
   1e05a:	b2ad      	uxth	r5, r5
   1e05c:	fbb3 f0f8 	udiv	r0, r3, r8
   1e060:	fb08 3310 	mls	r3, r8, r0, r3
   1e064:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1e068:	fb00 fa0a 	mul.w	sl, r0, sl
   1e06c:	45a2      	cmp	sl, r4
   1e06e:	d908      	bls.n	1e082 <__udivmoddi4+0x1da>
   1e070:	eb1e 0404 	adds.w	r4, lr, r4
   1e074:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1e078:	d26b      	bcs.n	1e152 <__udivmoddi4+0x2aa>
   1e07a:	45a2      	cmp	sl, r4
   1e07c:	d969      	bls.n	1e152 <__udivmoddi4+0x2aa>
   1e07e:	3802      	subs	r0, #2
   1e080:	4474      	add	r4, lr
   1e082:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1e086:	fba0 8902 	umull	r8, r9, r0, r2
   1e08a:	eba4 040a 	sub.w	r4, r4, sl
   1e08e:	454c      	cmp	r4, r9
   1e090:	46c2      	mov	sl, r8
   1e092:	464b      	mov	r3, r9
   1e094:	d354      	bcc.n	1e140 <__udivmoddi4+0x298>
   1e096:	d051      	beq.n	1e13c <__udivmoddi4+0x294>
   1e098:	2e00      	cmp	r6, #0
   1e09a:	d069      	beq.n	1e170 <__udivmoddi4+0x2c8>
   1e09c:	ebb1 050a 	subs.w	r5, r1, sl
   1e0a0:	eb64 0403 	sbc.w	r4, r4, r3
   1e0a4:	fa04 fc0c 	lsl.w	ip, r4, ip
   1e0a8:	40fd      	lsrs	r5, r7
   1e0aa:	40fc      	lsrs	r4, r7
   1e0ac:	ea4c 0505 	orr.w	r5, ip, r5
   1e0b0:	e9c6 5400 	strd	r5, r4, [r6]
   1e0b4:	2700      	movs	r7, #0
   1e0b6:	e747      	b.n	1df48 <__udivmoddi4+0xa0>
   1e0b8:	f1c2 0320 	rsb	r3, r2, #32
   1e0bc:	fa20 f703 	lsr.w	r7, r0, r3
   1e0c0:	4095      	lsls	r5, r2
   1e0c2:	fa01 f002 	lsl.w	r0, r1, r2
   1e0c6:	fa21 f303 	lsr.w	r3, r1, r3
   1e0ca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1e0ce:	4338      	orrs	r0, r7
   1e0d0:	0c01      	lsrs	r1, r0, #16
   1e0d2:	fbb3 f7fe 	udiv	r7, r3, lr
   1e0d6:	fa1f f885 	uxth.w	r8, r5
   1e0da:	fb0e 3317 	mls	r3, lr, r7, r3
   1e0de:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1e0e2:	fb07 f308 	mul.w	r3, r7, r8
   1e0e6:	428b      	cmp	r3, r1
   1e0e8:	fa04 f402 	lsl.w	r4, r4, r2
   1e0ec:	d907      	bls.n	1e0fe <__udivmoddi4+0x256>
   1e0ee:	1869      	adds	r1, r5, r1
   1e0f0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   1e0f4:	d22f      	bcs.n	1e156 <__udivmoddi4+0x2ae>
   1e0f6:	428b      	cmp	r3, r1
   1e0f8:	d92d      	bls.n	1e156 <__udivmoddi4+0x2ae>
   1e0fa:	3f02      	subs	r7, #2
   1e0fc:	4429      	add	r1, r5
   1e0fe:	1acb      	subs	r3, r1, r3
   1e100:	b281      	uxth	r1, r0
   1e102:	fbb3 f0fe 	udiv	r0, r3, lr
   1e106:	fb0e 3310 	mls	r3, lr, r0, r3
   1e10a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1e10e:	fb00 f308 	mul.w	r3, r0, r8
   1e112:	428b      	cmp	r3, r1
   1e114:	d907      	bls.n	1e126 <__udivmoddi4+0x27e>
   1e116:	1869      	adds	r1, r5, r1
   1e118:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1e11c:	d217      	bcs.n	1e14e <__udivmoddi4+0x2a6>
   1e11e:	428b      	cmp	r3, r1
   1e120:	d915      	bls.n	1e14e <__udivmoddi4+0x2a6>
   1e122:	3802      	subs	r0, #2
   1e124:	4429      	add	r1, r5
   1e126:	1ac9      	subs	r1, r1, r3
   1e128:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   1e12c:	e73b      	b.n	1dfa6 <__udivmoddi4+0xfe>
   1e12e:	4637      	mov	r7, r6
   1e130:	4630      	mov	r0, r6
   1e132:	e709      	b.n	1df48 <__udivmoddi4+0xa0>
   1e134:	4607      	mov	r7, r0
   1e136:	e6e7      	b.n	1df08 <__udivmoddi4+0x60>
   1e138:	4618      	mov	r0, r3
   1e13a:	e6fb      	b.n	1df34 <__udivmoddi4+0x8c>
   1e13c:	4541      	cmp	r1, r8
   1e13e:	d2ab      	bcs.n	1e098 <__udivmoddi4+0x1f0>
   1e140:	ebb8 0a02 	subs.w	sl, r8, r2
   1e144:	eb69 020e 	sbc.w	r2, r9, lr
   1e148:	3801      	subs	r0, #1
   1e14a:	4613      	mov	r3, r2
   1e14c:	e7a4      	b.n	1e098 <__udivmoddi4+0x1f0>
   1e14e:	4660      	mov	r0, ip
   1e150:	e7e9      	b.n	1e126 <__udivmoddi4+0x27e>
   1e152:	4618      	mov	r0, r3
   1e154:	e795      	b.n	1e082 <__udivmoddi4+0x1da>
   1e156:	4667      	mov	r7, ip
   1e158:	e7d1      	b.n	1e0fe <__udivmoddi4+0x256>
   1e15a:	4681      	mov	r9, r0
   1e15c:	e77c      	b.n	1e058 <__udivmoddi4+0x1b0>
   1e15e:	3802      	subs	r0, #2
   1e160:	442c      	add	r4, r5
   1e162:	e747      	b.n	1dff4 <__udivmoddi4+0x14c>
   1e164:	f1ac 0c02 	sub.w	ip, ip, #2
   1e168:	442b      	add	r3, r5
   1e16a:	e72f      	b.n	1dfcc <__udivmoddi4+0x124>
   1e16c:	4638      	mov	r0, r7
   1e16e:	e708      	b.n	1df82 <__udivmoddi4+0xda>
   1e170:	4637      	mov	r7, r6
   1e172:	e6e9      	b.n	1df48 <__udivmoddi4+0xa0>

0001e174 <__aeabi_idiv0>:
   1e174:	4770      	bx	lr
   1e176:	bf00      	nop

0001e178 <__aeabi_memclr>:
   1e178:	2200      	movs	r2, #0
   1e17a:	f000 b803 	b.w	1e184 <__aeabi_memset>
   1e17e:	bf00      	nop

0001e180 <__aeabi_memcpy>:
   1e180:	f7fd bf68 	b.w	1c054 <memcpy>

0001e184 <__aeabi_memset>:
   1e184:	b470      	push	{r4, r5, r6}
   1e186:	0784      	lsls	r4, r0, #30
   1e188:	d046      	beq.n	1e218 <__aeabi_memset+0x94>
   1e18a:	1e4c      	subs	r4, r1, #1
   1e18c:	2900      	cmp	r1, #0
   1e18e:	d041      	beq.n	1e214 <__aeabi_memset+0x90>
   1e190:	b2d5      	uxtb	r5, r2
   1e192:	4603      	mov	r3, r0
   1e194:	e002      	b.n	1e19c <__aeabi_memset+0x18>
   1e196:	1e61      	subs	r1, r4, #1
   1e198:	b3e4      	cbz	r4, 1e214 <__aeabi_memset+0x90>
   1e19a:	460c      	mov	r4, r1
   1e19c:	f803 5b01 	strb.w	r5, [r3], #1
   1e1a0:	0799      	lsls	r1, r3, #30
   1e1a2:	d1f8      	bne.n	1e196 <__aeabi_memset+0x12>
   1e1a4:	2c03      	cmp	r4, #3
   1e1a6:	d92e      	bls.n	1e206 <__aeabi_memset+0x82>
   1e1a8:	b2d5      	uxtb	r5, r2
   1e1aa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1e1ae:	2c0f      	cmp	r4, #15
   1e1b0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1e1b4:	d919      	bls.n	1e1ea <__aeabi_memset+0x66>
   1e1b6:	4626      	mov	r6, r4
   1e1b8:	f103 0110 	add.w	r1, r3, #16
   1e1bc:	3e10      	subs	r6, #16
   1e1be:	2e0f      	cmp	r6, #15
   1e1c0:	f841 5c10 	str.w	r5, [r1, #-16]
   1e1c4:	f841 5c0c 	str.w	r5, [r1, #-12]
   1e1c8:	f841 5c08 	str.w	r5, [r1, #-8]
   1e1cc:	f841 5c04 	str.w	r5, [r1, #-4]
   1e1d0:	f101 0110 	add.w	r1, r1, #16
   1e1d4:	d8f2      	bhi.n	1e1bc <__aeabi_memset+0x38>
   1e1d6:	f1a4 0110 	sub.w	r1, r4, #16
   1e1da:	f021 010f 	bic.w	r1, r1, #15
   1e1de:	f004 040f 	and.w	r4, r4, #15
   1e1e2:	3110      	adds	r1, #16
   1e1e4:	2c03      	cmp	r4, #3
   1e1e6:	440b      	add	r3, r1
   1e1e8:	d90d      	bls.n	1e206 <__aeabi_memset+0x82>
   1e1ea:	461e      	mov	r6, r3
   1e1ec:	4621      	mov	r1, r4
   1e1ee:	3904      	subs	r1, #4
   1e1f0:	2903      	cmp	r1, #3
   1e1f2:	f846 5b04 	str.w	r5, [r6], #4
   1e1f6:	d8fa      	bhi.n	1e1ee <__aeabi_memset+0x6a>
   1e1f8:	1f21      	subs	r1, r4, #4
   1e1fa:	f021 0103 	bic.w	r1, r1, #3
   1e1fe:	3104      	adds	r1, #4
   1e200:	440b      	add	r3, r1
   1e202:	f004 0403 	and.w	r4, r4, #3
   1e206:	b12c      	cbz	r4, 1e214 <__aeabi_memset+0x90>
   1e208:	b2d2      	uxtb	r2, r2
   1e20a:	441c      	add	r4, r3
   1e20c:	f803 2b01 	strb.w	r2, [r3], #1
   1e210:	42a3      	cmp	r3, r4
   1e212:	d1fb      	bne.n	1e20c <__aeabi_memset+0x88>
   1e214:	bc70      	pop	{r4, r5, r6}
   1e216:	4770      	bx	lr
   1e218:	460c      	mov	r4, r1
   1e21a:	4603      	mov	r3, r0
   1e21c:	e7c2      	b.n	1e1a4 <__aeabi_memset+0x20>
   1e21e:	5344      	.short	0x5344
   1e220:	61662050 	.word	0x61662050
   1e224:	43546c69 	.word	0x43546c69
   1e228:	61662048 	.word	0x61662048
   1e22c:	45476c69 	.word	0x45476c69
   1e230:	61662054 	.word	0x61662054
   1e234:	55526c69 	.word	0x55526c69
   1e238:	6166204e 	.word	0x6166204e
   1e23c:	6c69      	.short	0x6c69
   1e23e:	7572      	.short	0x7572
   1e240:	612f7473 	.word	0x612f7473
   1e244:	732f7070 	.word	0x732f7070
   1e248:	6c2f6372 	.word	0x6c2f6372
   1e24c:	722e6269 	.word	0x722e6269
   1e250:	00000073 	.word	0x00000073
   1e254:	0001e23e 	.word	0x0001e23e
   1e258:	00000013 	.word	0x00000013
   1e25c:	0000005b 	.word	0x0000005b
   1e260:	00000005 	.word	0x00000005
   1e264:	0001e23e 	.word	0x0001e23e
   1e268:	00000013 	.word	0x00000013
   1e26c:	00000064 	.word	0x00000064
   1e270:	00000005 	.word	0x00000005
   1e274:	50494843 	.word	0x50494843
   1e278:	61662038 	.word	0x61662038
   1e27c:	00006c69 	.word	0x00006c69
   1e280:	0001e23e 	.word	0x0001e23e
   1e284:	00000013 	.word	0x00000013
   1e288:	00000076 	.word	0x00000076
   1e28c:	00000005 	.word	0x00000005
   1e290:	0001e23e 	.word	0x0001e23e
   1e294:	00000013 	.word	0x00000013
   1e298:	0000007c 	.word	0x0000007c
   1e29c:	0000000d 	.word	0x0000000d
   1e2a0:	0001e23e 	.word	0x0001e23e
   1e2a4:	00000013 	.word	0x00000013
   1e2a8:	0000007b 	.word	0x0000007b
   1e2ac:	00000009 	.word	0x00000009
   1e2b0:	696e6170 	.word	0x696e6170
   1e2b4:	2063      	.short	0x2063
   1e2b6:	6f6e      	.short	0x6f6e
   1e2b8:	636f6c20 	.word	0x636f6c20
   1e2bc:	0a          	.byte	0x0a
   1e2bd:	61          	.byte	0x61
   1e2be:	2074      	.short	0x2074
   1e2c0:	6e696c20 	.word	0x6e696c20
   1e2c4:	2065      	.short	0x2065
   1e2c6:	000a      	.short	0x000a
   1e2c8:	0001e23e 	.word	0x0001e23e
   1e2cc:	00000013 	.word	0x00000013
   1e2d0:	00000094 	.word	0x00000094
   1e2d4:	00000014 	.word	0x00000014
   1e2d8:	00008827 	.word	0x00008827
   1e2dc:	00000004 	.word	0x00000004
   1e2e0:	00000004 	.word	0x00000004
   1e2e4:	00008a91 	.word	0x00008a91
   1e2e8:	00000000 	.word	0x00000000
   1e2ec:	0001e2e8 	.word	0x0001e2e8
   1e2f0:	0001e2ec 	.word	0x0001e2ec
   1e2f4:	65737361 	.word	0x65737361
   1e2f8:	6f697472 	.word	0x6f697472
   1e2fc:	6166206e 	.word	0x6166206e
   1e300:	64656c69 	.word	0x64656c69
   1e304:	2860203a 	.word	0x2860203a
   1e308:	7466656c 	.word	0x7466656c
   1e30c:	203d3d20 	.word	0x203d3d20
   1e310:	68676972 	.word	0x68676972
   1e314:	0a602974 	.word	0x0a602974
   1e318:	656c2020 	.word	0x656c2020
   1e31c:	203a7466 	.word	0x203a7466
   1e320:	60          	.byte	0x60
   1e321:	60          	.byte	0x60
   1e322:	0a2c      	.short	0x0a2c
   1e324:	67697220 	.word	0x67697220
   1e328:	203a7468 	.word	0x203a7468
   1e32c:	60          	.byte	0x60
   1e32d:	60          	.byte	0x60
   1e32e:	203a      	.short	0x203a
   1e330:	0001e2f4 	.word	0x0001e2f4
   1e334:	0000002d 	.word	0x0000002d
   1e338:	0001e321 	.word	0x0001e321
   1e33c:	0000000c 	.word	0x0000000c
   1e340:	0001e32d 	.word	0x0001e32d
   1e344:	00000003 	.word	0x00000003
   1e348:	0001e330 	.word	0x0001e330
   1e34c:	6e206f6e 	.word	0x6e206f6e
   1e350:	006c6c75 	.word	0x006c6c75
   1e354:	0001e34c 	.word	0x0001e34c
   1e358:	00000007 	.word	0x00000007
   1e35c:	0001e354 	.word	0x0001e354
   1e360:	0001e360 	.word	0x0001e360
   1e364:	74737572 	.word	0x74737572
   1e368:	6e796d2f 	.word	0x6e796d2f
   1e36c:	2f747765 	.word	0x2f747765
   1e370:	2f637273 	.word	0x2f637273
   1e374:	2e62696c 	.word	0x2e62696c
   1e378:	00007372 	.word	0x00007372
   1e37c:	0001e364 	.word	0x0001e364
   1e380:	00000016 	.word	0x00000016
   1e384:	000000db 	.word	0x000000db
   1e388:	00000011 	.word	0x00000011
   1e38c:	00008d4d 	.word	0x00008d4d
   1e390:	00000004 	.word	0x00000004
   1e394:	00000004 	.word	0x00000004
   1e398:	00008a91 	.word	0x00008a91
   1e39c:	65737361 	.word	0x65737361
   1e3a0:	6f697472 	.word	0x6f697472
   1e3a4:	6166206e 	.word	0x6166206e
   1e3a8:	64656c69 	.word	0x64656c69
   1e3ac:	2860203a 	.word	0x2860203a
   1e3b0:	7466656c 	.word	0x7466656c
   1e3b4:	203d3d20 	.word	0x203d3d20
   1e3b8:	68676972 	.word	0x68676972
   1e3bc:	0a602974 	.word	0x0a602974
   1e3c0:	656c2020 	.word	0x656c2020
   1e3c4:	203a7466 	.word	0x203a7466
   1e3c8:	60          	.byte	0x60
   1e3c9:	60          	.byte	0x60
   1e3ca:	0a2c      	.short	0x0a2c
   1e3cc:	67697220 	.word	0x67697220
   1e3d0:	203a7468 	.word	0x203a7468
   1e3d4:	60          	.byte	0x60
   1e3d5:	60          	.byte	0x60
   1e3d6:	203a      	.short	0x203a
   1e3d8:	0001e39c 	.word	0x0001e39c
   1e3dc:	0000002d 	.word	0x0000002d
   1e3e0:	0001e3c9 	.word	0x0001e3c9
   1e3e4:	0000000c 	.word	0x0000000c
   1e3e8:	0001e3d5 	.word	0x0001e3d5
   1e3ec:	00000003 	.word	0x00000003
   1e3f0:	0001e3d8 	.word	0x0001e3d8
   1e3f4:	74736564 	.word	0x74736564
   1e3f8:	74616e69 	.word	0x74616e69
   1e3fc:	206e6f69 	.word	0x206e6f69
   1e400:	20646e61 	.word	0x20646e61
   1e404:	72756f73 	.word	0x72756f73
   1e408:	73206563 	.word	0x73206563
   1e40c:	6563696c 	.word	0x6563696c
   1e410:	61682073 	.word	0x61682073
   1e414:	64206576 	.word	0x64206576
   1e418:	65666669 	.word	0x65666669
   1e41c:	746e6572 	.word	0x746e6572
   1e420:	6e656c20 	.word	0x6e656c20
   1e424:	73687467 	.word	0x73687467
   1e428:	0001e3f4 	.word	0x0001e3f4
   1e42c:	00000034 	.word	0x00000034
   1e430:	0001e428 	.word	0x0001e428
   1e434:	0001e434 	.word	0x0001e434
   1e438:	7375722f 	.word	0x7375722f
   1e43c:	352f6374 	.word	0x352f6374
   1e440:	66613765 	.word	0x66613765
   1e444:	39363634 	.word	0x39363634
   1e448:	65303866 	.word	0x65303866
   1e44c:	38366635 	.word	0x38366635
   1e450:	31343132 	.word	0x31343132
   1e454:	30353066 	.word	0x30353066
   1e458:	61333931 	.word	0x61333931
   1e45c:	39373662 	.word	0x39373662
   1e460:	62646661 	.word	0x62646661
   1e464:	2f316234 	.word	0x2f316234
   1e468:	2f637273 	.word	0x2f637273
   1e46c:	6362696c 	.word	0x6362696c
   1e470:	2f65726f 	.word	0x2f65726f
   1e474:	7263616d 	.word	0x7263616d
   1e478:	6d2f736f 	.word	0x6d2f736f
   1e47c:	722e646f 	.word	0x722e646f
   1e480:	00000073 	.word	0x00000073
   1e484:	0001e438 	.word	0x0001e438
   1e488:	00000049 	.word	0x00000049
   1e48c:	00000012 	.word	0x00000012
   1e490:	0000000d 	.word	0x0000000d
   1e494:	656d6f53 	.word	0x656d6f53
   1e498:	656e6f4e 	.word	0x656e6f4e
   1e49c:	00008d45 	.word	0x00008d45
   1e4a0:	00000004 	.word	0x00000004
   1e4a4:	00000004 	.word	0x00000004
   1e4a8:	00009323 	.word	0x00009323
   1e4ac:	00000060 	.word	0x00000060
   1e4b0:	0001e4ac 	.word	0x0001e4ac
   1e4b4:	20697073 	.word	0x20697073
   1e4b8:	73756c66 	.word	0x73756c66
   1e4bc:	61662068 	.word	0x61662068
   1e4c0:	6c69      	.short	0x6c69
   1e4c2:	552f      	.short	0x552f
   1e4c4:	73726573 	.word	0x73726573
   1e4c8:	70754c2f 	.word	0x70754c2f
   1e4cc:	502f7970 	.word	0x502f7970
   1e4d0:	54656e69 	.word	0x54656e69
   1e4d4:	2f656d69 	.word	0x2f656d69
   1e4d8:	656e6970 	.word	0x656e6970
   1e4dc:	656d6974 	.word	0x656d6974
   1e4e0:	7375722d 	.word	0x7375722d
   1e4e4:	796d2d74 	.word	0x796d2d74
   1e4e8:	7477656e 	.word	0x7477656e
   1e4ec:	7375722f 	.word	0x7375722f
   1e4f0:	74732f74 	.word	0x74732f74
   1e4f4:	35333737 	.word	0x35333737
   1e4f8:	64636c2d 	.word	0x64636c2d
   1e4fc:	7461622d 	.word	0x7461622d
   1e500:	722d6863 	.word	0x722d6863
   1e504:	72732f73 	.word	0x72732f73
   1e508:	696c2f63 	.word	0x696c2f63
   1e50c:	73722e62 	.word	0x73722e62
   1e510:	0001e4c2 	.word	0x0001e4c2
   1e514:	0000004e 	.word	0x0000004e
   1e518:	000000fe 	.word	0x000000fe
   1e51c:	00000009 	.word	0x00000009
   1e520:	20697073 	.word	0x20697073
   1e524:	61746164 	.word	0x61746164
   1e528:	69616620 	.word	0x69616620
   1e52c:	0000006c 	.word	0x0000006c
   1e530:	0001e4c2 	.word	0x0001e4c2
   1e534:	0000004e 	.word	0x0000004e
   1e538:	000000b0 	.word	0x000000b0
   1e53c:	00000009 	.word	0x00000009
   1e540:	0001e4c2 	.word	0x0001e4c2
   1e544:	0000004e 	.word	0x0000004e
   1e548:	000000f3 	.word	0x000000f3
   1e54c:	00000009 	.word	0x00000009
   1e550:	0001e4c2 	.word	0x0001e4c2
   1e554:	0000004e 	.word	0x0000004e
   1e558:	00000098 	.word	0x00000098
   1e55c:	0000000d 	.word	0x0000000d
   1e560:	20697073 	.word	0x20697073
   1e564:	20646d63 	.word	0x20646d63
   1e568:	6c696166 	.word	0x6c696166
   1e56c:	0001e4c2 	.word	0x0001e4c2
   1e570:	0000004e 	.word	0x0000004e
   1e574:	00000097 	.word	0x00000097
   1e578:	00000009 	.word	0x00000009
   1e57c:	0001e4c2 	.word	0x0001e4c2
   1e580:	0000004e 	.word	0x0000004e
   1e584:	0000009d 	.word	0x0000009d
   1e588:	00000011 	.word	0x00000011
   1e58c:	0001e4c2 	.word	0x0001e4c2
   1e590:	0000004e 	.word	0x0000004e
   1e594:	0000009c 	.word	0x0000009c
   1e598:	0000000d 	.word	0x0000000d
   1e59c:	0001e4c2 	.word	0x0001e4c2
   1e5a0:	0000004e 	.word	0x0000004e
   1e5a4:	000000c5 	.word	0x000000c5
   1e5a8:	0000002d 	.word	0x0000002d
   1e5ac:	0001e4c2 	.word	0x0001e4c2
   1e5b0:	0000004e 	.word	0x0000004e
   1e5b4:	000000c9 	.word	0x000000c9
   1e5b8:	0000002d 	.word	0x0000002d
   1e5bc:	0001e4c2 	.word	0x0001e4c2
   1e5c0:	0000004e 	.word	0x0000004e
   1e5c4:	000000d8 	.word	0x000000d8
   1e5c8:	00000019 	.word	0x00000019
   1e5cc:	00000000 	.word	0x00000000

0001e5d0 <str.0>:
   1e5d0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1e5e0:	20687469 7265766f 776f6c66 0001e4c2     ith overflow....
   1e5f0:	0000004e 000000d9 00000019 0001e4c2     N...............
   1e600:	0000004e 000000db 00000019 0001e4c2     N...............
   1e610:	0000004e 000000dc 00000019 20697073     N...........spi 
   1e620:	74696e69 69616620 0000006c 0001e4c2     init fail.......
   1e630:	0000004e 00000066 00000009 002d2c01     N...f........,-.
   1e640:	0001e63c 012d2c01 00002d2c 0001e644     <....,-.,-..D...
   1e650:	00000007 0001e650 008402a2 0001e658     ....P.......X...
   1e660:	000000c5 0001e660 0000000a 0001e668     ....`.......h...
   1e670:	00002a8a 0001e670 0000ee8a 0001e678     .*..p.......x...
   1e680:	0000000e 0001e680 00000000 0001e688     ................
   1e690:	00000008 0001e690 00000005 0001e698     ................
   1e6a0:	0001e4c2 0000004e 00000088 00000009     ....N...........
   1e6b0:	74737552 756f7420 73206863 6f736e65     Rust touch senso
   1e6c0:	00000a72 00000000 0001e6c4 65737361     r...........asse
   1e6d0:	6f697472 6166206e 64656c69 2860203a     rtion failed: `(
   1e6e0:	7466656c 203d3d20 68676972 0a602974     left == right)`.
   1e6f0:	656c2020 203a7466 0a2c6060 67697220       left: ``,. rig
   1e700:	203a7468 203a6060 0001e6cc 0000002d     ht: ``: ....-...
   1e710:	0001e6f9 0000000c 0001e705 00000003     ................
   1e720:	0001e708 20515249 74696e69 69616620     ....IRQ init fai
   1e730:	0000006c 0001e724 0000000d 0001e734     l...$.......4...
   1e740:	0001e740 74737572 7070612f 6372732f     @...rust/app/src
   1e750:	756f742f 735f6863 6f736e65 73722e72     /touch_sensor.rs
   1e760:	0001e744 0000001c 0000003f 00000005     D.......?.......
   1e770:	20633269 72646461 0001e744 0000001c     i2c addrD.......
   1e780:	0000004b 00000011 63756f74 74616468     K.......touchdat
   1e790:	61662061 00006c69 0001e744 0000001c     a fail..D.......
   1e7a0:	00000056 00000009 0001e744 0000001c     V.......D.......
   1e7b0:	0000005a 00000031 64616572 756f7420     Z...1...read tou
   1e7c0:	61646863 66206174 006c6961 0001e744     chdata fail.D...
   1e7d0:	0000001c 00000089 00000005 0001e744     ............D...
   1e7e0:	0000001c 00000095 00000037 00000000     ........7.......

0001e7f0 <str.0>:
   1e7f0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1e800:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1e810:	00000077 0001e744 0000001c 00000095     w...D...........
   1e820:	00000024 00000000 00000000 00000000     $...............

0001e830 <str.1>:
   1e830:	65747461 2074706d 61206f74 77206464     attempt to add w
   1e840:	20687469 7265766f 776f6c66 0001e744     ith overflowD...
   1e850:	0000001c 00000095 00000020 0001e744     ........ ...D...
   1e860:	0000001c 00000099 00000009 0001e744     ............D...
   1e870:	0000001c 0000009a 00000037 0001e744     ........7...D...
   1e880:	0000001c 0000009a 00000023 0001e744     ........#...D...
   1e890:	0000001c 0000009a 0000001f 0001e744     ............D...
   1e8a0:	0000001c 0000009b 00000037 0001e744     ........7...D...
   1e8b0:	0000001c 0000009b 00000023 0001e744     ........#...D...
   1e8c0:	0000001c 0000009b 0000001f 0001e744     ............D...
   1e8d0:	0000001c 0000009c 00000009 0001e744     ............D...
   1e8e0:	0000001c 0000009e 00000037 0001e744     ........7...D...
   1e8f0:	0000001c 0000009e 00000023 0001e744     ........#...D...
   1e900:	0000001c 0000009e 0000001f 0001e744     ............D...
   1e910:	0000001c 0000009f 00000037 0001e744     ........7...D...
   1e920:	0000001c 0000009f 00000023 0001e744     ........#...D...
   1e930:	0000001c 0000009f 0000001f 0001e744     ............D...
   1e940:	0000001c 000000a0 00000009 0001e744     ............D...
   1e950:	0000001c 000000a4 00000030 0001e744     ........0...D...
   1e960:	0000001c 000000a4 0000001a 0001e744     ............D...
   1e970:	0000001c 000000a4 00000016 0001e744     ............D...
   1e980:	0000001c 000000a3 00000009 0001e744     ............D...
   1e990:	0000001c 000000a6 00000030 0001e744     ........0...D...
   1e9a0:	0000001c 000000a6 0000001a 0001e744     ............D...
   1e9b0:	0000001c 000000a6 00000016 0001e744     ............D...
   1e9c0:	0000001c 000000a5 00000009 0001e744     ............D...
   1e9d0:	0000001c 000000aa 0000002d 0001e744     ........-...D...
   1e9e0:	0000001c 000000aa 0000001a 0001e744     ............D...
   1e9f0:	0000001c 000000aa 00000016 0001e744     ............D...
   1ea00:	0000001c 000000a9 00000009 0001e744     ............D...
   1ea10:	0000001c 000000ac 0000002d 0001e744     ........-...D...
   1ea20:	0000001c 000000ac 0000001a 0001e744     ............D...
   1ea30:	0000001c 000000ac 00000016 0001e744     ............D...
   1ea40:	0000001c 000000ab 00000009 0001e744     ............D...
   1ea50:	0000001c 000000af 0000000d 0001e744     ............D...
   1ea60:	0000001c 000000af 0000002c 20633269     ........,...i2c 
   1ea70:	00667562 0001e744 0000001c 000000f1     buf.D...........
   1ea80:	00000005 0001e744 0000001c 000000f2     ....D...........
   1ea90:	0000000d 0001e744 0000001c 000000f2     ....D...........
   1eaa0:	00000005 20633269 6c696166 7375520a     ....i2c fail.Rus
   1eab0:	48432074 0a385049 70696863 00000038     t CHIP8.chip8...
   1eac0:	00000000 0001eab8 00000006 0001eac0     ................
   1ead0:	50494843 74732038 65747261 25120a64     CHIP8 started..%
   1eae0:	43415053 4e492045 45444156 30205352     SPACE INVADERS 0
   1eaf0:	2031392e 44207942 64697661 4e495720     .91 By David WIN
   1eb00:	60524554 62006100 d0dda308 f2087118     TER`.a.b.....q..
   1eb10:	1220311e 6108702d 12403000 6c05692d     .1 .-p.a.0@.-i.l
   1eb20:	23006e15 f00a6091 3007f015 234b1200     .n.#.`.....0..K#
   1eb30:	12017e91 68006645 6a00691c 6c0a6b04     .~..Ef.h.i.j.k.l
   1eb40:	6e3c6d04 23e0000f fd512375 e0046015     .m<n...#u#Q..`..
   1eb50:	237d129e 78003875 607523ff 129ee006     ..}#u8.x.#u`....
   1eb60:	3875238b 23017839 12003675 e005609f     .#u89x.#u6...`..
   1eb70:	66e9129e 841b6501 d4d9a380 d4d9a351     ...f.e......Q...
   1eb80:	35ff7551 66ad12ff d4e91200 12013f51     Qu.5...f....Q?..
   1eb90:	6651d4e9 73408300 62b58303 622283f8     ..Qf..@s...b.."b
   1eba0:	12003308 827d23c9 12084306 121033d3     .3...#}..C...3..
   1ebb0:	827d23d5 12183306 827d23dd 12204306     .#}..3...#}..C .
   1ebc0:	122833e7 3e7d23e9 79071300 69184906     .3(..#}>...y.I.i
   1ebd0:	6b046a00 7d046c0a 000f6ef4 235123e0     .j.k.l.}.n...#Q#
   1ebe0:	1215fd75 3707f76f fd6f1200 8b512315     u...o..7..o..#Q.
   1ebf0:	13123ba4 6a027c1b 13023bfc 6a027c23     .;...|.j.;..#|.j
   1ec00:	3c512304 006f1218 60dda4e0 62086114     .#Q<..o....`.a.b
   1ec10:	701fd00f 301ef208 6033132c f015f0ff     ...p...0,.3`....
   1ec20:	13003007 000af041 fe06a7e0 a3251265     .0..A.......e.%.
   1ec30:	611ef9c1 81692308 81692306 81692306     ...a.#i..#i..#i.
   1ec40:	7b692306 80ee00d0 301280e0 7bc6db00     .#i{.......0...{
   1ec50:	a3ee000c d81c60d9 23ee0004 23238e51     .....`.....#Q.##
   1ec60:	f0056051 f015f018 13003007 6aee0089     Q`.......0.....j
   1ec70:	6be08d00 12a1e904 fd0ca657 3065f01e     ...k....W.....e0
   1ec80:	6aaf13ff 6d046b00 13016e01 f00aa597     ...j.k.m.n......
   1ec90:	7bc6db1e 7a017d08 13073a01 3cee0097     ...{.}.z.:.....<
   1eca0:	99ffff7e ffff7e99 7ee72424 7e3c3cff     ~....~..$$.~.<<~
   1ecb0:	3c4281db 10dbff7e 00fe7c38 3f007f00     ..B<~...8|.....?
   1ecc0:	00007f00 01010100 03030303 203f0000     ..............? 
   1ecd0:	20202020 3f202020 00ff0808 fc00fe00            ?........
   1ece0:	0000fe00 42427e00 62626262 00ff0000     .....~BBbbbb....
   1ecf0:	00000000 ff000000 00ff0000 7d41007d     ............}.A}
   1ed00:	007d7d05 c6c2c200 38286c44 00ff0000     .}}.....Dl(8....
   1ed10:	00000000 ff000000 00ff0000 f71410f7     ................
   1ed20:	000404f7 fe447c00 c2c2c2c2 00ff0000     .....|D.........
   1ed30:	00000000 ff000000 00ff0000 e82820ef     ............. (.
   1ed40:	002f2fe8 c585f900 f9c5c5c5 00ff0000     .//.............
   1ed50:	00000000 ff000000 00ff0000 302000be     .............. 0
   1ed60:	00bebe20 e704f700 f4848585 00ff0000      ...............
   1ed70:	00000000 ff000000 00ff0000 3f007f00     ...............?
   1ed80:	00007f00 ef28ef00 6f60e000 00ff0000     ......(...`o....
   1ed90:	00000000 ff000000 00ff0000 fc00fe00     ................
   1eda0:	0000fe00 c000c000 c0c0c0c0 04fc0000     ................
   1edb0:	04040404 fc040404 f9ff1010 9a8bb981     ................
   1edc0:	fa00fa9a 9b9a9a8a 25e6f899 3434f425     ...........%%.44
   1edd0:	14170034 26363734 5050dfc7 dfd8d85c     4...476&..PP\...
   1ede0:	1f11df00 d9191b12 86fe447c 84fc8686     ........|D......
   1edf0:	fe8282fe c0c080fe 82fcfec0 fcc2c2c2     ................
   1ee00:	c0f880fe 80fefec0 c0c0c0f0 86be80fe     ................
   1ee10:	8686fe86 868686fe 10101010 18181010     ................
   1ee20:	78484818 c0b0909c 80809cb0 fec0c0c0     .HHx............
   1ee30:	869292ee 82fe8686 86868686 8686827c     ............|...
   1ee40:	82fe7c86 c0c0c0fe cac2827c 86fe7ac4     .|......|....z..
   1ee50:	849c90fe 02fec0fe 10fefe02 30303030     ............0000
   1ee60:	c2c28282 8282fec2 1038ee82 92968686     ..........8.....
   1ee70:	4482ee92 82443838 30fe8282 02fe3030     ...D88D....000..
   1ee80:	fe80f01e 00000000 00000606 c0606000     .............``.
   1ee90:	00000000 18180000 18001818 180cc67c     ............|...
   1eea0:	00001800 0000fefe 868682fe 0808fe86     ................
   1eeb0:	18181808 c0fe02fe 02fefec0 fe06061e     ................
   1eec0:	fec4c484 80fe0404 fe0606fe fec0c0c0     ................
   1eed0:	02fefe82 06060602 86fe447c 82fefe86     ........|D......
   1eee0:	060606fe 4444fe44 a8a844fe a8a8a8a8     ....D.DD.D......
   1eef0:	005a6ca8 30a8180c 12007e4e a86c6618     .lZ....0N~...fl.
   1ef00:	2454665a 48480066 06a81218 0012a890     ZfT$f.HH........
   1ef10:	a812307e 724e3084 a8a86618 a8a8a8a8     ~0...0Nr.f......
   1ef20:	a8785490 726c7848 6c1812a8 90546672     .Tx.Hxlr...lrfT.
   1ef30:	182a72a8 7e4e30a8 66181200 5472a86c     .r*..0N~...fl.rT
   1ef40:	18665aa8 724e187e 182a72a8 30a86630     .Zf.~.Nr.r*.0f.0
   1ef50:	6c007e4e 9c4e5430 a8a8a8a8 48a8a8a8     N~.l0TN........H
   1ef60:	a8187e54 66785490 302a6ca8 3084a85a     T~...Txf.l*0Z..0
   1ef70:	d8a82a72 124e00a8 a8a2e4a8 a8124e00     r*....N......N..
   1ef80:	54542a6c 3084a872 dea82a72 2a72a89c     l*TTr..0r*....r*
   1ef90:	540ca818 72785a48 66a86618 66545a18     ...THZxr.f.f.ZTf
   1efa0:	72a86c72 a872002a a8182a72 007e4e30     rl.r*.r.r*..0N~.
   1efb0:	6c661812 186600a8 0c4e30a8 6c001866     ..fl..f..0N.f..l
   1efc0:	a8244e30 30182a72 541ea866 9c180c66     0N$.r*.0f..Tf...
   1efd0:	545424a8 7842a812 aea83c0c a8a8a8a8     .$TT..Bx.<......
   1efe0:	ffa8a8a8 00000000 00000000 00000000     ................
   1eff0:	43000000 38504948 6e6f6420 48430a65     ...CHIP8 done.CH
   1f000:	20385049 756f6873 6e20646c 6520746f     IP8 should not e
   1f010:	7572646e 612f7473 732f7070 632f6372     ndrust/app/src/c
   1f020:	38706968 0073722e 0001f012 00000015     hip8.rs.........
   1f030:	00000058 00000005 0a79656b 766f2078     X.......key.x ov
   1f040:	6c667265 0000776f 0001f012 00000015     erflow..........
   1f050:	000000a3 00000009 766f2079 6c667265     ........y overfl
   1f060:	0000776f 0001f012 00000015 000000a4     ow..............
   1f070:	00000009 0001f012 00000015 000000a5     ................
   1f080:	00000015 00000000 00000000 00000000     ................

0001f090 <str.0>:
   1f090:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1f0a0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1f0b0:	00000077 0001f012 00000015 000000a5     w...............
   1f0c0:	00000011 00000000 00000000 00000000     ................

0001f0d0 <str.1>:
   1f0d0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f0e0:	20687469 7265766f 776f6c66 0001f012     ith overflow....
   1f0f0:	00000015 000000a6 00000012 0001f012     ................
   1f100:	00000015 000000bf 00000009 0001f012     ................
   1f110:	00000015 000000c0 00000009 0001f012     ................
   1f120:	00000015 000000c1 00000015 0001f012     ................
   1f130:	00000015 000000c1 00000011 0001f012     ................
   1f140:	00000015 000000c2 00000012 20646162     ............bad 
   1f150:	657a6973 73746573 20657a69 7265766f     sizesetsize over
   1f160:	776f6c66 666f5f78 74657366 666f5f79     flowx_offsety_of
   1f170:	74657366 0001f012 00000015 000000c8     fset............
   1f180:	00000009 000a202c 0001f012 00000015     ...., ..........
   1f190:	000000d3 00000012 0001f012 00000015     ................
   1f1a0:	00000105 00000011 00000000 00000000     ................

0001f1b0 <str.2>:
   1f1b0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1f1c0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1f1d0:	00000077 0001f012 00000015 00000106     w...............
   1f1e0:	00000012 0001f012 00000015 00000108     ................
   1f1f0:	00000008 0001f012 00000015 0000010f     ................
   1f200:	0000001f 0001f012 00000015 00000110     ................
   1f210:	00000020 0001f012 00000015 00000115      ...............
   1f220:	0000000d 0001f012 00000015 00000118     ................
   1f230:	00000011 20746573 65786970 6620736c     ....set pixels f
   1f240:	656c6961 00000064 0001f012 00000015     ailed...........
   1f250:	00000129 00000005 0001f012 00000015     )...............
   1f260:	00000163 00000018 0001f012 00000015     c...............
   1f270:	00000164 00000017 0001f012 00000015     d...............
   1f280:	00000165 00000021 0001f012 00000015     e...!...........
   1f290:	00000165 00000020 0001f012 00000015     e... ...........
   1f2a0:	00000165 00000019 0001f012 00000015     e...............
   1f2b0:	00000166 00000021 0001f012 00000015     f...!...........
   1f2c0:	00000166 00000020 0001f012 00000015     f... ...........
   1f2d0:	00000166 0000001a 0001f012 00000015     f...............
   1f2e0:	00000167 00000009 0001f012 00000015     g...............
   1f2f0:	00000177 00000009 0001f012 00000015     w...............
   1f300:	00000178 00000009 0001f012 00000015     x...............
   1f310:	00000179 00000023 0001f012 00000015     y...#...........
   1f320:	00000179 00000011 0001f012 00000015     y...............
   1f330:	0000017b 00000010 0001f012 00000015     {...............
   1f340:	0000017e 00000009 0001f012 00000015     ~...............
   1f350:	00000183 0000000d 0001f012 00000015     ................
   1f360:	00000188 00000011 0001f012 00000015     ................
   1f370:	0000018d 00000015 50494843 6f742038     ........CHIP8 to
   1f380:	20686375 20746f6e 646e6168 0a64656c     uch not handled.
   1f390:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   1f3a0:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   1f3b0:	656e6f4e 61762060 7365756c 66206970     None` valuespi f
   1f3c0:	6873756c 69616620 73552f6c 2f737265     lush fail/Users/
   1f3d0:	7070754c 69502f79 6954656e 702f656d     Luppy/PineTime/p
   1f3e0:	74656e69 2d656d69 74737572 6e796d2d     inetime-rust-myn
   1f3f0:	2f747765 74737572 3774732f 2d353337     ewt/rust/st7735-
   1f400:	2d64636c 63746162 73722d68 6372732f     lcd-batch-rs/src
   1f410:	62696c2f 0073722e 0001f3c9 0000004e     /lib.rs.....N...
   1f420:	000000fe 00000009 0001f3c9 0000004e     ............N...
   1f430:	000000f3 00000009 6573552f 4c2f7372     ......../Users/L
   1f440:	79707075 61632e2f 2f6f6772 69676572     uppy/.cargo/regi
   1f450:	79727473 6372732f 7469672f 2e627568     stry/src/github.
   1f460:	2d6d6f63 63636531 39393236 65396264     com-1ecc6299db9e
   1f470:	33323863 62696c2f 70696863 2e302d38     c823/libchip8-0.
   1f480:	2f322e31 2f637273 2e62696c 00007372     1.2/src/lib.rs..
   1f490:	0001f438 00000056 0000009d 00000014     8...V...........
   1f4a0:	0001f438 00000056 000000d4 00000011     8...V...........
   1f4b0:	0001f438 00000056 000000d5 0000001a     8...V...........

0001f4c0 <str.0>:
   1f4c0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f4d0:	20687469 7265766f 776f6c66 0001f438     ith overflow8...
   1f4e0:	00000056 000000d5 00000011 00000005     V...............
   1f4f0:	0001f4ec 4c205d5b 78562044 495b202c     ....[] LD Vx, [I
   1f500:	0000005d 0001f4f4 00000001 0001f4f5     ]...............
   1f510:	0000000c 0001f504 00000000 00000020     ............ ...
   1f520:	00000008 00000002 00000000 00000000     ................
   1f530:	00000004 00000003 0001f518 6362696c     ............libc
   1f540:	38706968 4b53205d 78562050 504a205d     hip8] SKP Vx] JP
   1f550:	6e6e6e20 00000040 00000020 0001f53c      nnn@... ...<...
   1f560:	00000008 0001f53c 00000008 0001f438     ....<.......8...
   1f570:	00000056 000001a1 0001f55c 0001f438     V.......\...8...
   1f580:	00000056 000001a3 0000001d 0001f438     V...........8...
   1f590:	00000056 000001a4 0000002a 0001f438     V.......*...8...
   1f5a0:	00000056 000001a4 00000021 0001f438     V.......!...8...
   1f5b0:	00000056 000001a4 00000015 444c205d     V...........] LD
   1f5c0:	5d495b20 7856202c 0001f4f4 00000001      [I], Vx........
   1f5d0:	0001f5bc 0000000c 0001f5c8 0001f53c     ............<...
   1f5e0:	00000008 0001f53c 00000008 0001f438     ....<.......8...
   1f5f0:	00000056 0000019a 0001f5dc 0001f438     V...........8...
   1f600:	00000056 0000019c 0000001d 0001f438     V...........8...
   1f610:	00000056 0000019d 00000035 0001f438     V.......5...8...
   1f620:	00000056 0000019d 0000001e 0001f438     V...........8...
   1f630:	00000056 0000019d 00000015 444c205d     V...........] LD
   1f640:	202c4220 00007856 0001f4f4 00000001      B, Vx..........
   1f650:	0001f63c 0000000a 0001f648 0001f53c     <.......H...<...
   1f660:	00000008 0001f53c 00000008 0001f438     ....<.......8...
   1f670:	00000056 00000193 0001f65c 0001f438     V.......\...8...
   1f680:	00000056 00000194 0000001b 0001f438     V...........8...
   1f690:	00000056 00000195 00000011 0001f438     V...........8...
   1f6a0:	00000056 00000196 0000001a 0001f438     V...........8...
   1f6b0:	00000056 00000196 00000011 0001f438     V...........8...
   1f6c0:	00000056 00000197 0000001a 0001f438     V...........8...
   1f6d0:	00000056 00000197 00000011 444c205d     V...........] LD
   1f6e0:	202c4620 00007856 0001f4f4 00000001      F, Vx..........
   1f6f0:	0001f6dc 0000000a 0001f6e8 0001f53c     ............<...
   1f700:	00000008 0001f53c 00000008 0001f438     ....<.......8...
   1f710:	00000056 0000018f 0001f6fc 0001f438     V...........8...
   1f720:	00000056 00000190 0000001b 0001f438     V...........8...
   1f730:	00000056 00000190 0000001a 00000000     V...............

0001f740 <str.1>:
   1f740:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1f750:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1f760:	41205d77 49204444 7856202c 0001f4f4     w] ADD I, Vx....
   1f770:	00000001 0001f761 0000000b 0001f76c     ....a.......l...
   1f780:	0001f53c 00000008 0001f53c 00000008     <.......<.......
   1f790:	0001f438 00000056 0000018b 0001f780     8...V...........
   1f7a0:	0001f438 00000056 0000018c 0000002e     8...V...........
   1f7b0:	444c205d 2c545320 00785620 0001f4f4     ] LD ST, Vx.....
   1f7c0:	00000001 0001f7b0 0000000b 0001f7bc     ................
   1f7d0:	0001f53c 00000008 0001f53c 00000008     <.......<.......
   1f7e0:	0001f438 00000056 00000187 0001f7d0     8...V...........
   1f7f0:	0001f438 00000056 00000188 0000001b     8...V...........
   1f800:	444c205d 2c544420 00785620 0001f4f4     ] LD DT, Vx.....
   1f810:	00000001 0001f800 0000000b 0001f80c     ................
   1f820:	0001f53c 00000008 0001f53c 00000008     <.......<.......
   1f830:	0001f438 00000056 00000183 0001f820     8...V....... ...
   1f840:	0001f438 00000056 00000184 0000001b     8...V...........
   1f850:	444c205d 2c785620 00004b20 0001f4f4     ] LD Vx, K......
   1f860:	00000001 0001f850 0000000a 0001f85c     ....P.......\...
   1f870:	0001f53c 00000008 0001f53c 00000008     <.......<.......
   1f880:	0001f438 00000056 0000017f 0001f870     8...V.......p...
   1f890:	0001f438 00000056 00000180 00000011     8...V...........
   1f8a0:	444c205d 2c785620 00544420 0001f4f4     ] LD Vx, DT.....
   1f8b0:	00000001 0001f8a0 0000000b 0001f8ac     ................
   1f8c0:	0001f53c 00000008 0001f53c 00000008     <.......<.......
   1f8d0:	0001f438 00000056 0000017b 0001f8c0     8...V...{.......
   1f8e0:	0001f438 00000056 0000017c 00000011     8...V...|.......
   1f8f0:	4b53205d 5620504e 00000078 0001f4f4     ] SKNP Vx.......
   1f900:	00000001 0001f8f0 00000009 0001f8fc     ................
   1f910:	0001f53c 00000008 0001f53c 00000008     <.......<.......
   1f920:	0001f438 00000056 00000175 0001f910     8...V...u.......
   1f930:	0001f438 00000056 00000176 00000021     8...V...v...!...
   1f940:	0001f4f4 00000001 0001f544 00000008     ........D.......
   1f950:	0001f940 0001f53c 00000008 0001f53c     @...<.......<...
   1f960:	00000008 0001f438 00000056 0000016f     ....8...V...o...
   1f970:	0001f954 0001f438 00000056 00000170     T...8...V...p...
   1f980:	00000020 5244205d 78562057 7956202c      ...] DRW Vx, Vy
   1f990:	006e202c 0001f4f4 00000001 0001f984     , n.............
   1f9a0:	0000000f 0001f994 0001f53c 00000008     ........<.......
   1f9b0:	0001f53c 00000008 0001f438 00000056     <.......8...V...
   1f9c0:	00000156 0001f9a8 0001f438 00000056     V.......8...V...
   1f9d0:	00000157 0000001d 0001f438 00000056     W.......8...V...
   1f9e0:	00000158 0000001d 0001f438 00000056     X.......8...V...
   1f9f0:	0000015e 00000026 0001f438 00000056     ^...&...8...V...
   1fa00:	0000015e 0000001d 0001f438 00000056     ^.......8...V...
   1fa10:	00000160 00000021 00000000 00000000     `...!...........

0001fa20 <str.2>:
   1fa20:	65747461 2074706d 63206f74 75636c61     attempt to calcu
   1fa30:	6574616c 65687420 6d657220 646e6961     late the remaind
   1fa40:	77207265 20687469 69642061 6f736976     er with a diviso
   1fa50:	666f2072 72657a20 0000006f 0001f438     r of zero...8...
   1fa60:	00000056 00000163 00000025 0001f438     V...c...%...8...
   1fa70:	00000056 00000165 0000002d 00000000     V...e...-.......

0001fa80 <str.3>:
   1fa80:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1fa90:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1faa0:	00000077 0001f438 00000056 00000165     w...8...V...e...
   1fab0:	00000028 00000000 00000000 00000000     (...............

0001fac0 <str.4>:
   1fac0:	65747461 2074706d 73206f74 74666968     attempt to shift
   1fad0:	66656c20 69772074 6f206874 66726576      left with overf
   1fae0:	5d776f6c 444e5220 2c785620 006b6b20     low] RND Vx, kk.
   1faf0:	0001f4f4 00000001 0001fae3 0000000c     ................
   1fb00:	0001faf0 0001f53c 00000008 0001f53c     ....<.......<...
   1fb10:	00000008 0001f438 00000056 00000152     ....8...V...R...
   1fb20:	0001fb04 0001f438 00000056 00000153     ....8...V...S...
   1fb30:	00000011 504a205d 2c305620 6e6e6e20     ....] JP V0, nnn
   1fb40:	0001f4f4 00000001 0001fb34 0000000c     ........4.......
   1fb50:	0001fb40 0001f53c 00000008 0001f53c     @...<.......<...
   1fb60:	00000008 0001f438 00000056 0000014e     ....8...V...N...
   1fb70:	0001fb54 444c205d 202c4920 006e6e6e     T...] LD I, nnn.
   1fb80:	0001f4f4 00000001 0001fb74 0000000b     ........t.......
   1fb90:	0001fb80 0001f53c 00000008 0001f53c     ....<.......<...
   1fba0:	00000008 0001f438 00000056 0000014a     ....8...V...J...
   1fbb0:	0001fb94 4e53205d 78562045 7956202c     ....] SNE Vx, Vy
   1fbc0:	0001f4f4 00000001 0001fbb4 0000000c     ................
   1fbd0:	0001fbc0 0001f53c 00000008 0001f53c     ....<.......<...
   1fbe0:	00000008 0001f438 00000056 00000144     ....8...V...D...
   1fbf0:	0001fbd4 0001f438 00000056 00000145     ....8...V...E...
   1fc00:	00000014 0001f438 00000056 00000145     ....8...V...E...
   1fc10:	00000021 4853205d 7856204c 7956202c     !...] SHL Vx, Vy
   1fc20:	0001f4f4 00000001 0001fc14 0000000c     ................
   1fc30:	0001fc20 0001f53c 00000008 0001f53c      ...<.......<...
   1fc40:	00000008 0001f438 00000056 0000013f     ....8...V...?...
   1fc50:	0001fc34 0001f438 00000056 00000140     4...8...V...@...
   1fc60:	00000020 0001f438 00000056 00000141      ...8...V...A...
   1fc70:	0000001d 0001f438 00000056 00000141     ....8...V...A...
   1fc80:	00000011 5553205d 56204e42 56202c78     ....] SUBN Vx, V
   1fc90:	00000079 0001f4f4 00000001 0001fc84     y...............
   1fca0:	0000000d 0001fc94 0001f53c 00000008     ........<.......
   1fcb0:	0001f53c 00000008 0001f438 00000056     <.......8...V...
   1fcc0:	00000139 0001fca8 0001f438 00000056     9.......8...V...
   1fcd0:	0000013a 0000001e 0001f438 00000056     :.......8...V...
   1fce0:	0000013a 00000038 0001f438 00000056     :...8...8...V...
   1fcf0:	0000013b 00000011 4853205d 78562052     ;.......] SHR Vx
   1fd00:	7956202c 0001f4f4 00000001 0001fcf8     , Vy............
   1fd10:	0000000c 0001fd04 0001f53c 00000008     ........<.......
   1fd20:	0001f53c 00000008 0001f438 00000056     <.......8...V...
   1fd30:	00000134 0001fd18 0001f438 00000056     4.......8...V...
   1fd40:	00000135 0000001f 0001f438 00000056     5.......8...V...
   1fd50:	00000136 0000001d 0001f438 00000056     6.......8...V...
   1fd60:	00000136 00000011 5553205d 78562042     6.......] SUB Vx
   1fd70:	7956202c 0001f4f4 00000001 0001fd68     , Vy........h...
   1fd80:	0000000c 0001fd74 0001f53c 00000008     ....t...<.......
   1fd90:	0001f53c 00000008 0001f438 00000056     <.......8...V...
   1fda0:	0000012e 0001fd88 0001f438 00000056     ........8...V...
   1fdb0:	0000012f 0000001e 0001f438 00000056     /.......8...V...
   1fdc0:	0000012f 00000038 0001f438 00000056     /...8...8...V...
   1fdd0:	00000130 00000011 4441205d 78562044     0.......] ADD Vx
   1fde0:	7956202c 0001f4f4 00000001 0001fdd8     , Vy............
   1fdf0:	0000000c 0001fde4 0001f53c 00000008     ........<.......
   1fe00:	0001f53c 00000008 0001f438 00000056     <.......8...V...
   1fe10:	00000128 0001fdf8 0001f438 00000056     (.......8...V...
   1fe20:	00000129 0000001e 0001f438 00000056     ).......8...V...
   1fe30:	00000129 00000038 0001f438 00000056     )...8...8...V...
   1fe40:	0000012a 00000011 4f58205d 78562052     *.......] XOR Vx
   1fe50:	7956202c 0001f4f4 00000001 0001fe48     , Vy........H...
   1fe60:	0000000c 0001fe54 0001f53c 00000008     ....T...<.......
   1fe70:	0001f53c 00000008 0001f438 00000056     <.......8...V...
   1fe80:	00000124 0001fe68 0001f438 00000056     $...h...8...V...
   1fe90:	00000125 0000001e 0001f438 00000056     %.......8...V...
   1fea0:	00000125 00000011 4e41205d 78562044     %.......] AND Vx
   1feb0:	7956202c 0001f4f4 00000001 0001fea8     , Vy............
   1fec0:	0000000c 0001feb4 0001f53c 00000008     ........<.......
   1fed0:	0001f53c 00000008 0001f438 00000056     <.......8...V...
   1fee0:	00000120 0001fec8 0001f438 00000056      .......8...V...
   1fef0:	00000121 0000001e 0001f438 00000056     !.......8...V...
   1ff00:	00000121 00000011 524f205d 2c785620     !.......] OR Vx,
   1ff10:	00795620 0001f4f4 00000001 0001ff08      Vy.............
   1ff20:	0000000b 0001ff14 0001f53c 00000008     ........<.......
   1ff30:	0001f53c 00000008 0001f438 00000056     <.......8...V...
   1ff40:	0000011c 0001ff28 0001f438 00000056     ....(...8...V...
   1ff50:	0000011d 0000001e 0001f438 00000056     ........8...V...
   1ff60:	0000011d 00000011 444c205d 2c785620     ........] LD Vx,
   1ff70:	00795620 0001f4f4 00000001 0001ff68      Vy.........h...
   1ff80:	0000000b 0001ff74 0001f53c 00000008     ....t...<.......
   1ff90:	0001f53c 00000008 0001f438 00000056     <.......8...V...
   1ffa0:	00000118 0001ff88 0001f438 00000056     ........8...V...
   1ffb0:	00000119 0000001d 0001f438 00000056     ........8...V...
   1ffc0:	00000119 00000011 4441205d 78562044     ........] ADD Vx
   1ffd0:	6b6b202c 0001f4f4 00000001 0001ffc8     , kk............
   1ffe0:	0000000c 0001ffd4 0001f53c 00000008     ........<.......
   1fff0:	0001f53c 00000008 0001f438 00000056     <.......8...V...
   20000:	00000114 0001ffe8 0001f438 00000056     ........8...V...
   20010:	00000115 0000001d 0001f438 00000056     ........8...V...
   20020:	00000115 00000011 444c205d 2c785620     ........] LD Vx,
   20030:	006b6b20 0001f4f4 00000001 00020028      kk.........(...
   20040:	0000000b 00020034 0001f53c 00000008     ....4...<.......
   20050:	0001f53c 00000008 0001f438 00000056     <.......8...V...
   20060:	00000110 00020048 0001f438 00000056     ....H...8...V...
   20070:	00000111 00000011 6e49205d 696c6176     ........] Invali
   20080:	706f2064 0000203a 0001f4f4 00000001     d op: ..........
   20090:	00020078 0000000e 00020088 00000000     x...............
   200a0:	00000020 00000008 00000002 00000000      ...............
   200b0:	00000000 00000004 00000003 00000001     ................
   200c0:	00000020 00000008 00000002 00000000      ...............
   200d0:	00000000 00000004 00000003 0002009c     ................
   200e0:	633a3a3c 3a65726f 63616d3a 3a736f72     <::core::macros:
   200f0:	6e61703a 6d206369 6f726361 00003e73     :panic macros>..
   20100:	000200e0 0000001e 00000005 00000032     ............2...
   20110:	4553205d 2c785620 00795620 0001f4f4     ] SE Vx, Vy.....
   20120:	00000001 00020110 0000000b 0002011c     ................
   20130:	0001f53c 00000008 0001f53c 00000008     <.......<.......
   20140:	0001f438 00000056 0000010a 00020130     8...V.......0...
   20150:	0001f438 00000056 0000010b 00000014     8...V...........
   20160:	0001f438 00000056 0000010b 00000021     8...V.......!...
   20170:	4e53205d 78562045 6b6b202c 0001f4f4     ] SNE Vx, kk....
   20180:	00000001 00020170 0000000c 0002017c     ....p.......|...
   20190:	0001f53c 00000008 0001f53c 00000008     <.......<.......
   201a0:	0001f438 00000056 00000104 00020190     8...V...........
   201b0:	0001f438 00000056 00000105 00000014     8...V...........
   201c0:	4553205d 20785620 00006b6b 0001f4f4     ] SE Vx kk......
   201d0:	00000001 000201c0 0000000a 000201cc     ................
   201e0:	0001f53c 00000008 0001f53c 00000008     <.......<.......
   201f0:	0001f438 00000056 000000fe 000201e0     8...V...........
   20200:	0001f438 00000056 000000ff 00000014     8...V...........
   20210:	4143205d 6e204c4c 00006e6e 0001f4f4     ] CALL nnn......
   20220:	00000001 00020210 0000000a 0002021c     ................
   20230:	0001f53c 00000008 0001f53c 00000008     <.......<.......
   20240:	0001f438 00000056 000000f9 00020230     8...V.......0...
   20250:	0001f4f4 00000001 0001f54c 00000008     ........L.......
   20260:	00020250 0001f53c 00000008 0001f53c     P...<.......<...
   20270:	00000008 0001f438 00000056 000000f5     ....8...V.......
   20280:	00020264 5953205d 6e6e2053 0000006e     d...] SYS nnn...
   20290:	0001f4f4 00000001 00020284 00000009     ................
   202a0:	00020290 0001f53c 00000008 0001f53c     ....<.......<...
   202b0:	00000008 0001f438 00000056 000000f1     ....8...V.......
   202c0:	000202a4 20746f6e 6c706d69 6e656d65     ....not implemen
   202d0:	00646574 000200e0 0000001e 00000002     ted.............
   202e0:	00000002 4552205d 00000054 0001f4f4     ....] RET.......
   202f0:	00000001 000202e4 00000005 000202ec     ................
   20300:	0001f53c 00000008 0001f53c 00000008     <.......<.......
   20310:	0001f438 00000056 000000ec 00020300     8...V...........
   20320:	4c43205d 00000053 0001f4f4 00000001     ] CLS...........
   20330:	00020320 00000005 00020328 0001f53c      .......(...<...
   20340:	00000008 0001f53c 00000008 0001f438     ....<.......8...
   20350:	00000056 000000e5 0002033c 0001f438     V.......<...8...
   20360:	00000056 00000093 0000001b 0001f438     V...........8...
   20370:	00000056 00000097 00000009 0001f438     V...........8...
   20380:	00000056 000000bb 0000000d 0001f438     V...........8...
   20390:	00000056 000000be 0000000d 6573552f     V.........../Use
   203a0:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   203b0:	69676572 79727473 6372732f 7469672f     registry/src/git
   203c0:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   203d0:	65396264 33323863 626d652f 65646465     db9ec823/embedde
   203e0:	72672d64 69687061 302d7363 322e352e     d-graphics-0.5.2
   203f0:	6372732f 6f6f632f 722e6472 726e5573     /src/coord.rsUnr
   20400:	68636165 656c6261 646e6920 00207865     eachable index .
   20410:	000203fd 00000012 00020410 0002039c     ................
   20420:	00000061 00000070 00000016              a...p.......

0002042c <_ZN8libchip87CHARBUF17h227c6d0d7e24574cE>:
   2042c:	909090f0 206020f0 10f07020 f0f080f0     ..... `  p......
   2043c:	f010f010 10f09090 f080f010 80f0f010     ................
   2044c:	f0f090f0 40402010 90f090f0 f090f0f0     ..... @@........
   2045c:	90f0f010 e09090f0 e090e090 808080f0     ................
   2046c:	9090e0f0 80f0e090 f0f080f0 8080f080     ................
   2047c:	72656874 73692065 206f6e20 68637573     there is no such
   2048c:	69687420 6120676e 6e612073 71636120      thing as an acq
   2049c:	65726975 6c65722f 65736165 616f6c20     uire/release loa
   204ac:	75722f64 2f637473 61376535 36363466     d/rustc/5e7af466
   204bc:	30386639 36663565 34313238 35306631     9f80e5f682141f05
   204cc:	33393130 37366261 64666139 31623462     0193ab679afdb4b1
   204dc:	6372732f 62696c2f 65726f63 63616d2f     /src/libcore/mac
   204ec:	2f736f72 2e646f6d 00007372 000204ad     ros/mod.rs......
   204fc:	00000049 0000000a 00000009 72656874     I...........ther
   2050c:	73692065 206f6e20 68637573 69687420     e is no such thi
   2051c:	6120676e 20612073 656c6572 20657361     ng as a release 
   2052c:	64616f6c 0001205b 00000000 00000001     load[ ..........
   2053c:	0001241d 00012429 00012433 00020530     .$..)$..3$..0...
   2054c:	0001205b 00000000 00000001 0001241d     [ ...........$..
   2055c:	00012429 00012433                       )$..3$..

00020564 <_ZN3log6logger3NOP17h5a3de47970f20990E>:
   20564:	00697073 0001e6c4 65737361 6f697472     spi.....assertio
   20574:	6166206e 64656c69 2860203a 7466656c     n failed: `(left
   20584:	203d3d20 68676972 0a602974 656c2020      == right)`.  le
   20594:	203a7466 0a2c6060 67697220 203a7468     ft: ``,. right: 
   205a4:	203a6060 0002056c 0000002d 00020599     ``: l...-.......
   205b4:	0000000c 000205a5 00000003 000205a8     ................
   205c4:	20697073 666e6f63 66206769 006c6961     spi config fail.
   205d4:	000205c4 0000000f 000205d4 000205e0     ................
   205e4:	74737572 6e796d2f 2f747765 2f637273     rust/mynewt/src/
   205f4:	2e697073 00007372 000205e4 00000016     spi.rs..........
   20604:	00000050 0000004a 20697073 66206263     P...J...spi cb f
   20614:	006c6961 0002060c 0000000b 00020618     ail.............
   20624:	000205e4 00000016 00000057 00000005     ........W.......
   20634:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   20644:	00020634 0000000f 00020644 000205e4     4.......D.......
   20654:	00000016 0000005a 00000037 6f697067     ....Z...7...gpio
   20664:	69616620 0000006c 00020660 00000009      fail...`.......
   20674:	0002066c 000205e4 00000016 0000005b     l...........[...
   20684:	00000040 000205e4 00000016 0000005c     @...........\...
   20694:	00000040 6575716d 66206575 006c6961     @...mqueue fail.
   206a4:	00020698 0000000b 000206a4 000205e4     ................
   206b4:	00000016 00000065 00000005 206d6573     ....e.......sem 
   206c4:	6c696166 20697073 6c696166 000206c0     failspi fail....
   206d4:	00000008 000206d0 000205e4 00000016     ................
   206e4:	00000069 00000005 000205e4 00000016     i...............
   206f4:	0000006d 00000005 00000000 00020564     m...........d...
   20704:	00000004 000206fc 6e657665 66207174     ........eventq f
   20714:	006c6961 000205e4 00000016 00000081     ail.............
   20724:	00000009 63206f6e 6220646d 00657479     ....no cmd byte.
   20734:	000205e4 00000016 00000097 00000005     ................
   20744:	000205e4 00000016 00000099 00000016     ................
	...

00020760 <str.0>:
   20760:	65747461 2074706d 61206f74 77206464     attempt to add w
   20770:	20687469 7265766f 776f6c66 20697073     ith overflowspi 
   20780:	7265766f 776f6c66 000205e4 00000016     overflow........
   20790:	00000099 00000005 000205e4 00000016     ................
   207a0:	000000a8 00000012 000205e4 00000016     ................
   207b0:	000000c1 00000035 00000000 00000000     ....5...........

000207c0 <str.1>:
   207c0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   207d0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   207e0:	00000077 000205e4 00000016 000000c4     w...............
   207f0:	0000000f 20746e69 20697073 6c696166     ....int spi fail
   20800:	000205e4 00000016 00000101 00000011     ................
   20810:	000205e4 00000016 00000111 00000015     ................

00020820 <str.2>:
   20820:	65747461 2074706d 73206f74 72746275     attempt to subtr
   20830:	20746361 68746977 65766f20 6f6c6672     act with overflo
   20840:	00000077 000205e4 00000016 0000010f     w...............
   20850:	00000011 000205e4 00000016 00000117     ................
   20860:	00000011 000205e4 00000016 00000124     ............$...
   20870:	00000009 20646162 20697073 006e656c     ....bad spi len.
   20880:	000205e4 00000016 0000012b 00000005     ........+.......
   20890:	000206c8 00000008 00020890 000205e4     ................
   208a0:	00000016 00000141 00000009 000205e4     ....A...........
   208b0:	00000016 0000014a 00000009 000205e4     ....J...........
   208c0:	00000016 0000014e 00000030 000205e4     ....N...0.......
   208d0:	00000016 0000015a 00000005 000205e4     ....Z...........
   208e0:	00000016 0000015f 00000017 0001e6c4     ...._...........
   208f0:	65737361 6f697472 6166206e 64656c69     assertion failed
   20900:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   20910:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   20920:	67697220 203a7468 203a6060 000208f0      right: ``: ....
   20930:	0000002d 0002091d 0000000c 00020929     -...........)...
   20940:	00000003 0002092c 20697073 666e6f63     ....,...spi conf
   20950:	66206769 006c6961 00020948 0000000f     ig fail.H.......
   20960:	00020958 00020964 74737572 6e796d2f     X...d...rust/myn
   20970:	2f747765 2f637273 2e6c6168 00007372     ewt/src/hal.rs..
   20980:	00020968 00000016 00000016 00000009     h...............
   20990:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   209a0:	00020990 0000000f 000209a0 00020968     ............h...
   209b0:	00000016 00000019 00000009 20697073     ............spi 
   209c0:	74696e69 69616620 0000006c 000209bc     init fail.......
   209d0:	0000000d 000209cc 00020968 00000016     ........h.......
   209e0:	0000001c 00000009 6f697067 69616620     ........gpio fai
   209f0:	0000006c 000209e8 00000009 000209f4     l...............
   20a00:	00020968 00000016 00000045 00000009     h.......E.......
   20a10:	00020968 00000016 0000006c 0000001b     h.......l.......

00020a20 <str.0>:
   20a20:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   20a30:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   20a40:	6c616377 2064656c 74704f60 3a6e6f69     wcalled `Option:
   20a50:	776e753a 28706172 6f206029 2061206e     :unwrap()` on a 
   20a60:	6e6f4e60 76206065 65756c61 6573552f     `None` value/Use
   20a70:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   20a80:	69676572 79727473 6372732f 7469672f     registry/src/git
   20a90:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   20aa0:	65396264 33323863 6165682f 73656c70     db9ec823/heaples
   20ab0:	2e302d73 2f312e35 2f637273 2e636576     s-0.5.1/src/vec.
   20ac0:	00007372 00020a6c 00000056 000001e8     rs..l...V.......
   20ad0:	0000000d 00000000 00000000 00000000     ................

00020ae0 <str.0>:
   20ae0:	65747461 2074706d 61206f74 77206464     attempt to add w
   20af0:	20687469 7265766f 776f6c66 552f2928     ith overflow()/U
   20b00:	73726573 70754c2f 2e2f7970 67726163     sers/Luppy/.carg
   20b10:	65722f6f 74736967 732f7972 672f6372     o/registry/src/g
   20b20:	75687469 6f632e62 65312d6d 32366363     ithub.com-1ecc62
   20b30:	62643939 38636539 682f3332 6c706165     99db9ec823/heapl
   20b40:	2d737365 2e352e30 72732f31 65762f63     ess-0.5.1/src/ve
   20b50:	73722e63 00000000 00000000 00000000     c.rs............

00020b60 <str.0>:
   20b60:	65747461 2074706d 73206f74 72746275     attempt to subtr
   20b70:	20746361 68746977 65766f20 6f6c6672     act with overflo
   20b80:	00000077 00020afe 00000056 00000066     w.......V...f...
   20b90:	00000009 00000000 00000000 00000000     ................

00020ba0 <str.1>:
   20ba0:	65747461 2074706d 61206f74 77206464     attempt to add w
   20bb0:	20687469 7265766f 776f6c66 00020afe     ith overflow....
   20bc0:	00000056 0000003e 0000000c 00020afe     V...>...........
   20bd0:	00000056 0000002d 00000009 00020afe     V...-...........
   20be0:	00000056 0000007e 00000011 0000a7c1     V...~...........
   20bf0:	00000000 00000001 00014c6b 0000a705     ........kL......
   20c00:	00000002 00000002 00017479 6c6c6163     ........yt..call
   20c10:	60206465 75736552 3a3a746c 72776e75     ed `Result::unwr
   20c20:	29287061 6e6f2060 206e6120 72724560     ap()` on an `Err
   20c30:	61762060 6465756c 20776172 636f6c62     ` valuedraw bloc
   20c40:	6620736b 726c6961 2f747375 74656970     ks failrust/piet
   20c50:	626d652d 65646465 69702f64 652d7465     -embedded/piet-e
   20c60:	6465626d 2d646564 70617267 73636968     mbedded-graphics
   20c70:	6372732f 7369642f 79616c70 0073722e     /src/display.rs.
   20c80:	00020c47 00000038 00000080 00000005     G...8...........
   20c90:	6576656e 73757272 69702f74 652d7465     neverrust/piet-e
   20ca0:	6465626d 2f646564 74656970 626d652d     mbedded/piet-emb
   20cb0:	65646465 72672d64 69687061 732f7363     edded-graphics/s
   20cc0:	622f6372 68637461 0073722e 00020c95     rc/batch.rs.....
   20cd0:	00000036 000000be 00000019 00020c95     6...............
   20ce0:	00000036 000000c3 0000001d 00000000     6...............

00020cf0 <str.0>:
   20cf0:	65747461 2074706d 61206f74 77206464     attempt to add w
   20d00:	20687469 7265766f 776f6c66 00020c95     ith overflow....
   20d10:	00000036 000000d5 00000015 00020c95     6...............
   20d20:	00000036 00000104 00000019 00020c95     6...............
   20d30:	00000036 00000109 0000001d 00020c95     6...............
   20d40:	00000036 0000011d 00000015 6573552f     6.........../Use
   20d50:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   20d60:	69676572 79727473 6372732f 7469672f     registry/src/git
   20d70:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   20d80:	65396264 33323863 626d652f 65646465     db9ec823/embedde
   20d90:	72672d64 69687061 302d7363 322e352e     d-graphics-0.5.2
   20da0:	6372732f 6972702f 6974696d 2f736576     /src/primitives/
   20db0:	74636572 6c676e61 73722e65 00020d4c     rectangle.rsL...
   20dc0:	00000070 000000c0 00000032 00000000     p.......2.......

00020dd0 <str.0>:
   20dd0:	65747461 2074706d 61206f74 77206464     attempt to add w
   20de0:	20687469 7265766f 776f6c66 00020d4c     ith overflowL...
   20df0:	00000070 000000c2 00000031 00000000     p.......1.......

00020e00 <str.1>:
   20e00:	65747461 2074706d 73206f74 72746275     attempt to subtr
   20e10:	20746361 68746977 65766f20 6f6c6672     act with overflo
   20e20:	00000077 00020d4c 00000070 000000c4     w...L...p.......
   20e30:	00000031 00020d4c 00000070 000000c6     1...L...p.......
   20e40:	00000031 65707845 64657463 72747320     1...Expected str
   20e50:	00656b6f 00020d4c 00000070 000000cc     oke.L...p.......
   20e60:	00000019 00020d4c 00000070 000000d5     ....L...p.......
   20e70:	0000000d 00020d4c 00000070 000000da     ....L...p.......
   20e80:	00000011 6573552f 4c2f7372 79707075     ..../Users/Luppy
   20e90:	61632e2f 2f6f6772 69676572 79727473     /.cargo/registry
   20ea0:	6372732f 7469672f 2e627568 2d6d6f63     /src/github.com-
   20eb0:	63636531 39393236 65396264 33323863     1ecc6299db9ec823
   20ec0:	6165682f 73656c70 2e302d73 2f312e35     /heapless-0.5.1/
   20ed0:	2f637273 2e636576 00007372 00020e84     src/vec.rs......
   20ee0:	00000056 00000066 00000009 00000000     V...f...........

00020ef0 <str.0>:
   20ef0:	65747461 2074706d 61206f74 77206464     attempt to add w
   20f00:	20687469 7265766f 776f6c66 00020e84     ith overflow....
   20f10:	00000056 0000003e 0000000c 00020e84     V...>...........
   20f20:	00000056 0000007e 00000011 00000000     V...~...........

00020f30 <str.1>:
   20f30:	65747461 2074706d 73206f74 72746275     attempt to subtr
   20f40:	20746361 68746977 65766f20 6f6c6672     act with overflo
   20f50:	00000077 2f637273 6362696c 2f65726f     w...src/libcore/
   20f60:	2f6d756e 32636564 2f746c66 66776172     num/dec2flt/rawf
   20f70:	73722e70 65646e69 756f2078 666f2074     p.rsindex out of
   20f80:	756f6220 3a73646e 65687420 6e656c20      bounds: the len
   20f90:	20736920 00000000 00000020 00000008      is .... .......
   20fa0:	00000002 00000000 00000000 00000002     ................
   20fb0:	00000003 2f637273 6362696c 2f65726f     ....src/libcore/
   20fc0:	63696e75 2f65646f 6e697270 6c626174     unicode/printabl
   20fd0:	73722e65 00000000 00000020 00000004     e.rs.... .......
   20fe0:	00000002 00000000 00000002 00000000     ................
   20ff0:	00000003 00000000 00000020 00000008     ........ .......
   21000:	00000002 00000000 00000001 00000001     ................
   21010:	00000003 002e2e60 00021015 00000002     ....`...........
   21020:	65726c61 20796461 72726f62 6465776f     already borrowed
   21030:	68772029 73206e65 6963696c 6020676e     ) when slicing `
   21040:	72616843 46797254 456d6f72 726f7272     CharTryFromError
   21050:	6f636544 74556564 45363166 726f7272     DecodeUtf16Error

00021060 <_ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE>:
   21060:	00010201 00000000 00000000 00000000     ................
   21070:	72657469 20202020 2e2e202c 65757274     iter    , ..true
   21080:	72657449 203d3c20 61746164 646e696b     Iter <= datakind
   21090:	746e616d 73756c70 6f72655a 79706f43     mantplusZeroCopy
   210a0:	7373654c 65646f63 65707954 656e6f44     LesscodeTypeDone
   210b0:	72616843 6b636142 68746f42 6d657449     CharBackBothItem
   210c0:	656c6966 656e696c 7466654c 6c696174     filelineLefttail
   210d0:	656b6177 706f7264 32783875 32783869     wakedropu8x2i8x2
   210e0:	34783875 34783869 38783875 38783869     u8x4i8x4u8x8i8x8
   210f0:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   21100:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   21110:	656e6f4e 61762060 0065756c 00020f54     None` value.T...
   21120:	00000000 0000203a 00020f54 00000000     ....: ..T.......
   21130:	00021124 00000002 000177cf 00000000     $........w......
   21140:	00000001 0001781f 74756220 65687420     .....x.. but the
   21150:	646e6920 69207865 00002073 00020f74      index is ..t...
   21160:	00000020 00021148 00000012 000177cf      ...H........w..
   21170:	0000000c 00000004 00017a67 00017dbd     ........gz...}..
   21180:	00017e6d 202c0a2c 2c280a28 30783029     m~..,., (.(,)0x0
   21190:	30313030 30333032 30353034 30373036     0010203040506070
   211a0:	31393038 31313130 31333132 31353134     8091011121314151
   211b0:	31373136 32393138 32313230 32333232     6171819202122232
   211c0:	32353234 32373236 33393238 33313330     4252627282930313
   211d0:	33333332 33353334 33373336 34393338     2333435363738394
   211e0:	34313430 34333432 34353434 34373436     0414243444546474
   211f0:	35393438 35313530 35333532 35353534     8495051525354555
   21200:	35373536 36393538 36313630 36333632     6575859606162636
   21210:	36353634 36373636 37393638 37313730     4656667686970717
   21220:	37333732 37353734 37373736 38393738     2737475767778798
   21230:	38313830 38333832 38353834 38373836     0818283848586878
   21240:	39393838 39313930 39333932 39353934     8899091929394959
   21250:	39373936 00393938 000177cf 00000004     6979899..w......
   21260:	00000004 00017e91 00017e97 00017e9d     .....~...~...~..
   21270:	2f637273 6362696c 2f65726f 2f746d66     src/libcore/fmt/
   21280:	2e646f6d 00007372 00021270 00000016     mod.rs..p.......
   21290:	0000043b 00000011 00021270 00000016     ;.......p.......
   212a0:	00000445 00000024 2f637273 6362696c     E...$...src/libc
   212b0:	2f65726f 63696c73 6f6d2f65 73722e64     ore/slice/mod.rs
   212c0:	65646e69 6f202078 6f207475 61722066     index  out of ra
   212d0:	2065676e 20726f66 63696c73 666f2065     nge for slice of
   212e0:	6e656c20 20687467 000212c0 00000006      length ........
   212f0:	000212c6 00000022 000212a8 00000018     ...."...........
   21300:	00000a72 00000005 63696c73 6e692065     r.......slice in
   21310:	20786564 72617473 61207374 62202074     dex starts at  b
   21320:	65207475 2073646e 00207461 00021308     ut ends at .....
   21330:	00000016 0002131e 0000000d 000212a8     ................
   21340:	00000018 00000a78 00000005 696e6966     ....x.......fini
   21350:	64656873 73796168 6b636174 79622820     shedhaystack (by
   21360:	20736574 6167654e 65766974 69736f50     tes NegativePosi
   21370:	65766974 65746e69 6c617267 61706e55     tiveintegralUnpa
   21380:	64656b63 69666e49 6574696e 756e694d     ckedInfiniteMinu
   21390:	77615273 7265764f 776f6c66 6b636162     sRawOverflowback
   213a0:	72657469 6f746e49 72657449 61636f6c     iterIntoIterloca
   213b0:	6e6f6974 61636f4c 6e6f6974 72616573     tionLocationsear
   213c0:	72656863 69736f70 6e6f6974 74697263     cherpositioncrit
   213d0:	736f705f 656e694c 796e4173 57776152     _posLinesAnyRawW
   213e0:	72656b61 6f6c6c41 72724563 38746e69     akerAllocErrint8
   213f0:	745f3478 2f637273 6362696c 2f65726f     x4_tsrc/libcore/
   21400:	2f727473 2e646f6d 2e5b7372 625d2e2e     str/mod.rs[...]b
   21410:	20657479 65646e69 69202078 756f2073     yte index  is ou
   21420:	666f2074 756f6220 2073646e 6020666f     t of bounds of `
   21430:	0002140f 0000000b 0002141a 00000016     ................
   21440:	00021014 00000001 000213f4 00000016     ................
   21450:	00000853 00000009 69676562 3d3c206e     S.......begin <=
   21460:	646e6520 00002820 00021458 0000000e      end (..X.......
   21470:	00021084 00000004 00021030 00000010     ........0.......
   21480:	00021014 00000001 000213f4 00000016     ................
   21490:	00000857 00000005 000213f4 00000016     W...............
   214a0:	00000868 0000000e 20736920 20746f6e     h....... is not 
   214b0:	68632061 62207261 646e756f 3b797261     a char boundary;
   214c0:	20746920 69207369 6469736e 20292065      it is inside ) 
   214d0:	6020666f 0002140f 0000000b 000214a8     of `............
   214e0:	00000026 0002135c 00000008 000214ce     &...\...........
   214f0:	00000006 00021014 00000001 000213f4     ................
   21500:	00000016 0000086a 00000005 00020fb4     ....j...........
   21510:	00000020 0000001a 00000028 05030100      .......(.......
   21520:	03060605 08080607 1c0a1109 140c190b     ................
   21530:	0d0e120d 0310040f 09131212 05170116     ................
   21540:	03190218 021c071a 161f011d 042b0320     ............ .+.
   21550:	0b2d022c 0330012e 01320231 02a902a7     ,.-...0.1.2.....
   21560:	08ab04aa 05fb02fa 03fe04fd 78ad09ff     ...............x
   21570:	a28d8b79 8b585730 1d1c908c 4b0f0edd     y...0WX........K
   21580:	2efcfb4c 5d5c3f2f 84e2b55f 92918e8d     L.../?\]_.......
   21590:	bbbab1a9 cac9c6c5 ffe5e4de 12110400     ................
   215a0:	37343129 493d3b3a 8e845d4a b4b1a992     )147:;=IJ]......
   215b0:	cac6bbba e5e4cfce 0e0d0400 31291211     ..............)1
   215c0:	453b3a34 5e4a4946 91846564 cec99d9b     4:;EFIJ^de......
   215d0:	29110dcf 64574945 a9918d65 c5bbbab4     ...)EIWde.......
   215e0:	e5e4dfc9 110d04f0 65644945 b2848180     ........EIde....
   215f0:	d5bfbebc 83f1f0d7 a6a48b85 c7c5bfbe     ................
   21600:	dbdacfce cdbd9848 49cfcec6 59574f4e     ....H......INOWY
   21610:	8e895f5e b7b6b18f c7c6c1bf 171611d7     ^_..............
   21620:	f7f65c5b 0d80fffe dfde716d 6e1f0f0e     [\......mq.....n
   21630:	5f1d1c6f afae7e7d 16fabcbb 461f1e17     o.._}~.........F
   21640:	584f4e47 7e5e5c5a d4c5b57f f1f0dcd5     GNOXZ\^~........
   21650:	8f7372f5 97967574 2e265f2f b7afa72f     .rs.tu../_&./...
   21660:	d7cfc7bf 97409adf 1f8f3098 ffcec1c0     ......@..0......
   21670:	5b5a4f4e 100f0807 efee2f27 3d376f6e     NOZ[....'/..no7=
   21680:	9045423f 53fffe91 c9c87567 d9d8d1d0     ?BE....Sgu......
   21690:	00fffee7 82225f20 448204df 06041b08     .... _"....D....
   216a0:	0eac8111 1e35ab80 03e08015 04010819     ......5.........
   216b0:	0434042f 07010307 0a110706 07120f50     /.4.........P...
   216c0:	04020855 03090a1c 03070308 03030302     U...............
   216d0:	0305040c 0e01060b 033a0515 05060711     ..........:.....
   216e0:	07570710 0d150702 03430450 0401032d     ..W.....P.C.-...
   216f0:	0c0f0611 251d043a 046d205f c880256a     ....:..%_ m.j%..
   21700:	03b08205 fd82061a 15075903 1409170b     .........Y......
   21710:	6a0c140c 1a060a06 2b075906 2c0a4605     ...j.....Y.+.F.,
   21720:	01040c04 2c0b3103 0b061a04 06ac8003     .....1.,........
   21730:	411f060a 032d044c 033c0874 073c030f     ...AL.-.t.<...<.
   21740:	052b0838 1811ff82 2d112f08 21102003     8.+....../.-. .!
   21750:	048c800f 0b199782 05948815 073b052f     ............/.;.
   21760:	09180e02 7430b080 1ad6800c ff80050c     ......0t........
   21770:	05b68005 c69b0c24 1030d20a 37038d84     ....$.....0....7
   21780:	145c8109 8008b880 043530c7 0838060a     ..\......05...8.
   21790:	060c0846 031e0b74 0959045a 1c188380     F...t...Z.Y.....
   217a0:	4809160a 068a8008 170ca4ab 04a13104     ...H.........1..
   217b0:	0726da81 8005050c 6d8111a5 2a287810     ..&........m.x(*
   217c0:	80044c06 be80048d 0f031b03 0106000d     .L..............
   217d0:	04010301 09080802 0b050a02 11011002     ................
   217e0:	13051204 15021411 19021702 1d051c04     ................
   217f0:	6a012408 bc026b03 d402d102 d609d50c     .$.j.k..........
   21800:	da02d702 e105e001 ee02e802 f904f020     ............ ...
   21810:	0c02fa06 4e3e3b27 9e9e8f4f 0907069f     ....';>NO.......
   21820:	563e3d36 04d1d0f3 37361814 35bd5756     6=>V......67VW.5
   21830:	12e0cfce 9e8e8987 110e0d04 34312912     .............)14
   21840:	4946453a 644f4e4a b65c5a65 a81c1bb7     :EFIJNOdeZ\.....
   21850:	09d9d8a9 a8919037 3e3b0a07 928f6966     ....7.....;>fi..
   21860:	efee5f6f 9b9a625a 9d552827 a4a3a1a0     o_..Zb..'(U.....
   21870:	baada8a7 0b06c4bc 3a1d150c a651453f     ...........:?EQ.
   21880:	a0cdcca7 221a1907 c53f3e25 232004c6     ......."%>?... #
   21890:	33282625 4a483a38 5553504c 5c5a5856     %&(38:HJLPSUVXZ\
   218a0:	6563605e 78736b66 a48a7f7d c0b0afaa     ^`cefksx}.......
   218b0:	a3720cd0 6ecccba4 7b225e6f 2d040305     ..r....no^"{...-
   218c0:	01046503 82802e2f 0f31031d 0924041c     .e../.....1...$.
   218d0:	052b051e 2a0e0444 2406aa80 28042404     ..+.D..*...$.$.(
   218e0:	010b3408 37819080 080a1609 03399880     .4.....7......9.
   218f0:	30090863 03210516 4001051b 054b0438     c..0..!....@8.K.
   21900:	070a042f 20400709 090c0427 053a0336     /.....@ '...6.:.
   21910:	0c04071a 37495007 07330d33 810a082e     .....PI73.3.....
   21920:	81801f26 802a0828 4e091786 430f1e04     &...(.*....N...C
   21930:	0a07190e 27094706 3f0b7509 3b062a41     .....G.'.u.?A*.;
   21940:	51060a05 10050106 8b800503 08482060     ...Q........` H.
   21950:	5ea6800a 0a0b4522 39130d06 2c360a07     ...^"E.....9..6,
   21960:	c0801004 0c53643c 45a08001 5308481b     ....<dS....E.H.S
   21970:	0781391d 031d0a46 03374947 060a080e     .9..F...GI7.....
   21980:	810a0739 c7801936 9b830d32 800b7566     9...6...2...fu..
   21990:	84bc8ac4 82d18f2f 82b9a147 042a0739     ..../...G...9.*.
   219a0:	0a266002 05280a46 5bb08213 39044b65     .`&.F.(....[eK.9
   219b0:	04401107 08f8971c 0da5f382 03311f81     ..@...........1.
   219c0:	81080411 6b04898c 09030d05 60931007     .......k.......`
   219d0:	730af680 46176e08 0c149a80 80190957     ...s.n.F....W...
   219e0:	03478187 150f4285 802b5085 1a032dd5     ..G..B...P+..-..
   219f0:	70810204 8501053a 29d78000 040a044c     ...p:......)L...
   21a00:	44118302 c2803d4c 0401063c 341b0555     ...DL=..<...U..4
   21a10:	2c0e8102 560c6404 5d030d0a 1d393d03     ...,.d.V...].=9.
   21a20:	09042c0d 060e0207 d6839a80 0b030d0a     .,..............
   21a30:	590c7405 0c140c07 0a083804 1e082806     .t.Y.....8...(..
   21a40:	31037752 0ca68003 05030414 85060d03     Rw.1............
   21a50:	6372736a 62696c2f 65726f63 696e752f     jsrc/libcore/uni
   21a60:	65646f63 646f6d2f 0073722e 00021a51     code/mod.rs.Q...
   21a70:	0000001a 00000038 0000000f 00021a51     ....8.......Q...
   21a80:	0000001a 00000039 00000010              ....9.......

00021a8c <_ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E>:
   21a8c:	1b150f04 17120319 0e000011 00000016     ................
	...
   21ab4:	00130600 00000000 00000000 00000000     ................
   21ac4:	00000000 07020000 0c08000a 1a181c1d     ................
	...
   21ae4:	01050000 00000000 00000000 00000000     ................
   21af4:	00000000 10000000 00000000 0009000b     ................
   21b04:	                                         ...

00021b07 <_ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E>:
	...
   21b23:	00120f00 00000000 00000000 00000000     ................
   21b33:	0000001f 00000000 00000000 00000000     ................
   21b43:	1d664649 00000000 00000000 00000000     IFf.............
   21b53:	00003e8a 00000000 00000000 4b000000     .>.............K
   21b63:	00000053 00000000 00000000 42236700     S............g#B
	...
   21b7f:	0000003d 00230000 00000000 00000000     =.....#.........
   21b8f:	2d000075 00000000 00000000 00000000     u..-............
   21b9f:	003c4e82 00000000 00000000 63000000     .N<............c
   21baf:	25000000 00005a00 00000000 00368100     ...%.Z........6.
   21bbf:	00000300 00000000 00000000 0000002f     ............/...
   21bcf:	00000000 00001000 13000000 00000800     ................
	...
   21be7:	43000000 89007200 00000000 00000000     ...C.r..........
   21bf7:	00070000 057d0000 37003f18 64400987     ......}..?.7..@d
   21c07:	00210000 00000000 00000000 00000000     ..!.............
   21c17:	4100000a 00000000 00000000 00000000     ...A............
   21c27:	0030000c 0000005c 00717719 44354760     ..0.\....wq.`G5D
   21c37:	7400002e 2c651139 507f5e51 34000000     ...t9.e,Q^.P...4
   21c47:	00000031 00000053 3a000000 00000000     1...S......:....
   21c57:	88001a38 696b2b5f 845d4f5d 14682a80     8..._+ki]O]..*h.
   21c67:	0017003b 00000000 00000000 00000000     ;...............
   21c77:	57000055 83000000 00000000 00000000     U..W............
   21c87:	00000059 26000000 00161b6e 00000000     Y......&n.......
   21c97:	001c4a6d 00000000 00000000 00002400     mJ...........$..
   21ca7:	0052007c 0015067b 48000000 00000000     |.R.{......H....
   21cb7:	2776287e 2200296c 0d610e5b 04627056     ~(v'l)."[.a.Vpb.
   21cc7:	02782085 1e7a0000 00540179 00000033     . x...z.y.T.3...
   21cd7:	00587386 0b6f454d 3200006a 00004c6c     .sX.MEo.j..2lL..
   21ce7:	00008a89 3e8a8a8a 00000000 00000000     .......>........
	...

00021cf8 <_ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E>:
	...
   21d00:	00000001 00000000 0000000d 00000000     ................
   21d10:	0000001c 00000000 00000040 00000000     ........@.......
   21d20:	000000b6 00000000 000000bf 00000000     ................
   21d30:	000003f8 00000000 000007f0 00000000     ................
   21d40:	000007ff 00000000 00001000 00000000     ................
   21d50:	00001e00 00000000 00003800 00000000     .........8......
   21d60:	00003f00 00000000 00007f80 00000000     .?..............
   21d70:	00008000 00000000 0001ffc0 00000000     ................
   21d80:	0003ff80 00000000 00078000 00000000     ................
   21d90:	007f0000 00000000 00802001 00000000     ......... ......
   21da0:	00a30000 00000000 037ffc00 00000000     ................
   21db0:	06000000 00000000 07ff0000 00000000     ................
   21dc0:	09800000 00000000 0e000000 00000000     ................
   21dd0:	0e7e0080 00000000 20002064 00000000     ..~.....d . ....
   21de0:	200ffe40 00000000 30000001 00000000     @.. .......0....
   21df0:	40000000 00000000 4000005c 00000000     ...@....\..@....
   21e00:	60000000 00000000 805c8400 00000000     ...`......\.....
   21e10:	c0000000 00000000 e0000000 00000000     ................
   21e20:	00000000 00000001 0cf00000 00000001     ................
   21e30:	00603044 0000000c 00603dc1 0000000c     D0`......=`.....
   21e40:	0080201e 0000000c 00c0201e 0000000c     . ....... ......
   21e50:	00fe21fe 0000000c 00000000 00000020     .!.......... ...
   21e60:	00000000 00000060 00000844 00000060     ....`...D...`...
   21e70:	00000000 000000f0 00000060 00000200     ........`.......
   21e80:	f9ffff7f 000007db 80000000 000007f8     ................
   21e90:	e0000000 00000fbc 00000000 00002120     ............ !..
   21ea0:	00000003 00003b3c 00000fe7 00003c00     ....<;.......<..
   21eb0:	9fc00000 00003d9f fbc00000 00003eef     .....=.......>..
   21ec0:	00000000 00003fc0 00000000 0000f000     .....?..........
   21ed0:	00000000 0000fc00 f8000010 0000fffe     ................
   21ee0:	0000ffff 0000ffff ffffffff 0000ffff     ................
   21ef0:	fffff800 00010000 00000000 0001ffc0     ................
   21f00:	ffff0000 0001ffff 00000000 00030000     ................
   21f10:	00000000 00038000 00000000 0003a340     ............@...
   21f20:	00000000 00080000 000c0000 000c0000     ................
   21f30:	00000004 000ff800 00000000 00180000     ................
   21f40:	001c0000 001c0000 c3000000 001e0001     ................
   21f50:	00000000 001f0000 00800001 001f1fc0     ................
   21f60:	00000007 001fef80 ffffffff 00201fff     .............. .
   21f70:	00023986 00230000 00000002 00403000     .9....#......0@.
   21f80:	00000000 00667e00 fffc0000 006dfcff     .....~f.......m.
   21f90:	00000000 007f0000 00000000 00bf2800     .............(..
   21fa0:	00000000 00cff000 03000000 02a00000     ................
   21fb0:	fff70000 031021fd 00000003 06780000     .....!........x.
   21fc0:	00000000 06ff8000 00000000 07c00000     ................
   21fd0:	00000000 07f20000 00000000 0e040187     ................
   21fe0:	00000006 10000000 00001008 10000000     ................
   21ff0:	00000007 14000000 0000000f 17f00000     ................
   22000:	00000000 1ff20000 feffe0df 1fffffff     ................
   22010:	00000000 20000000 00000000 200ff800     ....... ....... 
   22020:	00000007 33c80000 00000000 3fb00000     .......3.......?
   22030:	00000000 3ff78000 00000004 40000000     .......?.......@
   22040:	0080201e 4000000c 00000000 40d38000     . .....@.......@
   22050:	00000002 50000000 00000003 58000000     .......P.......X
   22060:	00000000 66fde000 000007fe 79f80000     .......f.......y
   22070:	00000003 7fc00000 00000000 7ffe0000     ................
   22080:	00000000 7fff0000 00000000 80000000     ................
   22090:	0000007f 80000000 00000030 8003ffff     ........0.......
   220a0:	0000f06e 87000000 00000002 90000000     n...............
   220b0:	7f400000 9ff81fe5 00000000 a5f90000     ..@.............
   220c0:	00000000 a7f80000 00000000 b03c8000     ..............<.
   220d0:	00000000 b47e0000 00000000 bf7f0000     ......~.........
   220e0:	fffe0000 bfffffff 00000011 c0000000     ................
   220f0:	00000000 c19d0000 00000002 d0000000     ................
   22100:	00000000 f807c3a0 ffffffff f87fffff     ................
   22110:	ffffffff fbffffff 000021be fc00000c     .........!......
   22120:	00000000 ff000000 00000002 ff000000     ................
   22130:	00020000 ffff0000 fff80000 fffffffb     ................
   22140:	00000000 ffffffff ffffffff ffffffff     ................
   22150:	00000020 00006425 6c363025 00002075      ...%d..%06lu ..

00022160 <nrf52_hal_i2cs>:
   22160:	00000000 20000108                       ....... 

00022168 <nrf52_hal_spis>:
   22168:	2000ddc0 00000000 00000000 65737341     ... ........Asse
   22178:	40207472 25783020 00000a78 65737341     rt @ 0x%x...Asse
   22188:	40207472 25783020 202d2078 253a7325     rt @ 0x%x - %s:%
   22198:	00000a64 61686e55 656c646e 6e692064     d...Unhandled in
   221a8:	72726574 20747075 646c2528 65202c29     terrupt (%ld), e
   221b8:	70656378 6e6f6974 20707320 30257830     xception sp 0x%0
   221c8:	0a786c38 00000000 3a307220 30257830     8lx..... r0:0x%0
   221d8:	20786c38 3a317220 30257830 20786c38     8lx  r1:0x%08lx 
   221e8:	3a327220 30257830 20786c38 3a337220      r2:0x%08lx  r3:
   221f8:	30257830 0a786c38 00000000 3a347220     0x%08lx..... r4:
   22208:	30257830 20786c38 3a357220 30257830     0x%08lx  r5:0x%0
   22218:	20786c38 3a367220 30257830 20786c38     8lx  r6:0x%08lx 
   22228:	3a377220 30257830 0a786c38 00000000      r7:0x%08lx.....
   22238:	3a387220 30257830 20786c38 3a397220      r8:0x%08lx  r9:
   22248:	30257830 20786c38 3a303172 30257830     0x%08lx r10:0x%0
   22258:	20786c38 3a313172 30257830 0a786c38     8lx r11:0x%08lx.
   22268:	00000000 3a323172 30257830 20786c38     ....r12:0x%08lx 
   22278:	3a726c20 30257830 20786c38 3a637020      lr:0x%08lx  pc:
   22288:	30257830 20786c38 3a727370 30257830     0x%08lx psr:0x%0
   22298:	0a786c38 00000000 52534349 2578303a     8lx.....ICSR:0x%
   222a8:	786c3830 53464820 78303a52 6c383025     08lx HFSR:0x%08l
   222b8:	46432078 303a5253 38302578 000a786c     x CFSR:0x%08lx..
   222c8:	52414642 2578303a 786c3830 464d4d20     BFAR:0x%08lx MMF
   222d8:	303a5241 38302578 000a786c 6e69616d     AR:0x%08lx..main
   222e8:	00000000 656c6469 00000000 7379736d     ....idle....msys
   222f8:	0000315f                                _1..

000222fc <MemFile_methods>:
   222fc:	0001c69d 00000000                       ........

00022304 <stdout>:
   22304:	20000124                                $.. 

00022308 <nrf52k_flash_dev>:
   22308:	00022320 00000000 00080000 00000080      #..............
   22318:	00000001 000000ff                       ........

00022320 <nrf52k_flash_funcs>:
   22320:	0001c909 0001c839 0001c7c1 0001c819     ....9...........
   22330:	00000000 0001c815 00000000              ............

0002233c <nrf52_hal_timers>:
   2233c:	2000ded0 00000000 00000000 00000000     ... ............
	...

00022354 <hal_i2c1_cfg>:
   22354:	00000007 00000006 00000064              ........d...

00022360 <os_bsp_spi0m_cfg>:
   22360:	001d0302 736e6573 6e5f726f 6669746f     ....sensor_notif
   22370:	7476655f 00000073                       _evts...

00022378 <COLLECTOR_NODE_HW_ID>:
   22378:	066aff57 50547878 67242949              W.j.xxTPI)$g

00022384 <SENSOR_NODE_HW_IDS>:
   22384:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   22394:	08070605 020b0a09 04030201 08070605     ................
   223a4:	030b0a09 04030201 08070605 040b0a09     ................
   223b4:	04030201 08070605 050b0a09 77687325     ............%shw
   223c4:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   223d4:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   223e4:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   223f4:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   22404:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   22414:	0a732520 00000000 00000000               %s.........

00022420 <sensor_node_addresses>:
   22420:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   22430:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   22440:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   22450:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   22460:	00000a73                                s...

00022464 <g_temp_stub_sensor_driver>:
   22464:	0001d745 0001d64d 00000000 00000000     E...M...........
	...
   2248c:	20425453 64616572 6d657420 65732070     STB read temp se
   2249c:	726f736e 0000000a 635f636f 62635f6c     nsor....oc_cl_cb
   224ac:	00000073 725f636f 6f5f7065 00000000     s...oc_rep_o....

000224bc <sysflash_map_dflt>:
	...
   224c4:	00004000 00000001 00008000 00073c00     .@...........<..
   224d4:	00000002 0007bc00 00000400 00000003     ................
   224e4:	0007c000 00001000 00000010 00004000     .............@..
   224f4:	00004000 00000011 0007d000 00003000     .@...........0..
   22504:	70616f63 6365725f 65766965 544f4e20     coap_receive NOT
   22514:	504d4920 454d454c 4445544e 0000000a      IMPLEMENTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 107804	    108	  57144	 165056	  284c0	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
