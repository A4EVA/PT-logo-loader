
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x0001f64c vaddr 0x0001f64c paddr 0x0001f64c align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0001f664 memsz 0x0001f664 flags rwx
    LOAD off    0x000200d8 vaddr 0x200000d8 paddr 0x0001f664 align 2**16
         filesz 0x0000006c memsz 0x0000006c flags rw-
    LOAD off    0x00020148 vaddr 0x20000148 paddr 0x0001f6d0 align 2**16
         filesz 0x00000000 memsz 0x0000e640 flags rw-
    LOAD off    0x00030000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              0001762c  00008020  00008020  00008020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  0001f64c  0001f64c  00020144  2**0  CONTENTS
  3 .ARM.exidx         00000018  0001f64c  0001f64c  0001f64c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00030000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  00020144  2**0  CONTENTS
  6 .data              0000006c  200000d8  0001f664  000200d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20000144  20000144  00020144  2**0  CONTENTS
  8 .bss               0000e640  20000148  0001f6d0  00020148  2**3  ALLOC
  9 .stack_dummy       000001b0  2000e788  2000e788  00020148  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  000202f8  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  00020333  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000203b2  2**0  CONTENTS, READONLY
 13 .debug_line        00049b67  00000000  00000000  000203b6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        00087847  00000000  00000000  00069f1d  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0000ea80  00000000  00000000  000f1764  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00005cb8  00000000  00000000  001001e8  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         0005b024  00000000  00000000  00105ea0  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00013555  00000000  00000000  00160ec4  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      00019e08  00000000  00000000  00174419  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000eefc  00000000  00000000  0018e224  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_macinfo     0000005f  00000000  00000000  0019d120  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubnames    00015e6d  00000000  00000000  0019d17f  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes    0003103e  00000000  00000000  001b2fec  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
0001f64c l    d  .ARM.extab	00000000 .ARM.extab
0001f64c l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000144 l    d  .bssnz	00000000 .bssnz
20000148 l    d  .bss	00000000 .bss
2000e788 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000820c l     F .text	0000003c errata_16
00008248 l     F .text	0000004c errata_31
00008294 l     F .text	0000003c errata_32
000082d0 l     F .text	0000004c errata_36
0000831c l     F .text	0000003c errata_37
00008358 l     F .text	0000003c errata_57
00008394 l     F .text	0000003c errata_66
000083d0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 3592ao74dt466zwu
00000d09 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00021161 l       .debug_str	00000000 
00021155 l       .debug_str	00000000 
0002dbc3 l       .debug_str	00000000 
0005384f l       .debug_str	00000000 
00053fb6 l       .debug_str	00000000 
00053283 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
0002dbf0 l       .debug_str	00000000 
0002dbe2 l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00000e0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
00033153 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000564a8 l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
00055331 l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
000056b5 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0002dbaf l       .debug_str	00000000 
00058f69 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00032c69 l       .debug_str	00000000 
00056352 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
0000351d l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c893 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00053fc4 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cz1tg82iqprprj5
00001118 l       .debug_str	00000000 
0000126a l       .debug_str	00000000 
000012aa l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00018613 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00002082 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003bd87 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00058c44 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00053689 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
000034f3 l       .debug_str	00000000 
00059a7f l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
00006f4a l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00056fce l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
00037d9d l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 40zocxwjz4ckzrhd
000019d3 l       .debug_str	00000000 
00001c58 l       .debug_str	00000000 
00001c88 l       .debug_str	00000000 
00002ff7 l       .debug_str	00000000 
00002ad8 l       .debug_str	00000000 
00001d61 l       .debug_str	00000000 
00001d91 l       .debug_str	00000000 
00001e6f l       .debug_str	00000000 
00001e9f l       .debug_str	00000000 
00001eca l       .debug_str	00000000 
00001f99 l       .debug_str	00000000 
0000206d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00002082 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7ec l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000598ca l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00001342 l       .debug_str	00000000 
0000135f l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
000013ad l       .debug_str	00000000 
000013be l       .debug_str	00000000 
0000142e l       .debug_str	00000000 
000014c8 l       .debug_str	00000000 
000014d0 l       .debug_str	00000000 
000014d5 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0002f0c2 l       .debug_str	00000000 
000014df l       .debug_str	00000000 
000014e2 l       .debug_str	00000000 
0000150b l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
00001541 l       .debug_str	00000000 
0000156e l       .debug_str	00000000 
000015be l       .debug_str	00000000 
0000161b l       .debug_str	00000000 
0000166f l       .debug_str	00000000 
00001672 l       .debug_str	00000000 
000016e9 l       .debug_str	00000000 
0000176d l       .debug_str	00000000 
000017e8 l       .debug_str	00000000 
00001886 l       .debug_str	00000000 
00001931 l       .debug_str	00000000 
00001a97 l       .debug_str	00000000 
00001b78 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
00012ae7 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0000293e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 457xxol86znd5t7g
000022ec l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
00002360 l       .debug_str	00000000 
000023d2 l       .debug_str	00000000 
00002492 l       .debug_str	00000000 
0000249d l       .debug_str	00000000 
000024e7 l       .debug_str	00000000 
000025af l       .debug_str	00000000 
000025ea l       .debug_str	00000000 
000026a4 l       .debug_str	00000000 
00002725 l       .debug_str	00000000 
00002ff7 l       .debug_str	00000000 
00002ad8 l       .debug_str	00000000 
000027e5 l       .debug_str	00000000 
00002863 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000291e l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000292a l       .debug_str	00000000 
000029f9 l       .debug_str	00000000 
00002ac4 l       .debug_str	00000000 
00021014 l       .debug_str	00000000 
00002b98 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7ec l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000598ca l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00001342 l       .debug_str	00000000 
0000135f l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
000013ad l       .debug_str	00000000 
000013be l       .debug_str	00000000 
0000142e l       .debug_str	00000000 
000014c8 l       .debug_str	00000000 
000014d0 l       .debug_str	00000000 
000014d5 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0002f0c2 l       .debug_str	00000000 
000014df l       .debug_str	00000000 
000014e2 l       .debug_str	00000000 
0000150b l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
00001541 l       .debug_str	00000000 
0000156e l       .debug_str	00000000 
000015be l       .debug_str	00000000 
0000161b l       .debug_str	00000000 
0000166f l       .debug_str	00000000 
00001672 l       .debug_str	00000000 
000016e9 l       .debug_str	00000000 
0000176d l       .debug_str	00000000 
000017e8 l       .debug_str	00000000 
00001886 l       .debug_str	00000000 
00001931 l       .debug_str	00000000 
000019d3 l       .debug_str	00000000 
00001a97 l       .debug_str	00000000 
00001b78 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
00012ae7 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0000293e l       .debug_str	00000000 
00002097 l       .debug_str	00000000 
000020ff l       .debug_str	00000000 
000021ba l       .debug_str	00000000 
00002225 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
0001b930 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 5k460cii92qewjl
000012f5 l       .debug_str	00000000 
00002c05 l       .debug_str	00000000 
00002c41 l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
00002c4a l       .debug_str	00000000 
0001c1f3 l       .debug_str	00000000 
00002c75 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0002dbaf l       .debug_str	00000000 
00002cd3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
00011fdc l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00002b9d l       .debug_str	00000000 
00002be4 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000210c9 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00002bf7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16zjnp1vbo7kc1gp
00000c82 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00032c69 l       .debug_str	00000000 
00056352 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
0000351d l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c893 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00053fc4 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00021161 l       .debug_str	00000000 
00021155 l       .debug_str	00000000 
00002e2d l       .debug_str	00000000 
0001425f l       .debug_str	00000000 
0001238c l       .debug_str	00000000 
0005677f l       .debug_str	00000000 
0005aa72 l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
000054e8 l       .debug_str	00000000 
0005a97d l       .debug_str	00000000 
00002ff5 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
00033153 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00059668 l       .debug_str	00000000 
00002cf3 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0005a63c l       .debug_str	00000000 
00002d00 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000239c0 l       .debug_str	00000000 
00017737 l       .debug_str	00000000 
00002d08 l       .debug_str	00000000 
00002fae l       .debug_str	00000000 
00002d10 l       .debug_str	00000000 
00002d95 l       .debug_str	00000000 
00002dab l       .debug_str	00000000 
000564b1 l       .debug_str	00000000 
00002dd2 l       .debug_str	00000000 
0003908d l       .debug_str	00000000 
00002dfa l       .debug_str	00000000 
00002e28 l       .debug_str	00000000 
00002e32 l       .debug_str	00000000 
00002e5d l       .debug_str	00000000 
00002e64 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00002e8c l       .debug_str	00000000 
0005a9fd l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
00002eb9 l       .debug_str	00000000 
00002ee5 l       .debug_str	00000000 
00002eed l       .debug_str	00000000 
00002f1d l       .debug_str	00000000 
00002f28 l       .debug_str	00000000 
00002f55 l       .debug_str	00000000 
00002f5e l       .debug_str	00000000 
00002f94 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00002fa5 l       .debug_str	00000000 
00002e2c l       .debug_str	00000000 
000533d0 l       .debug_str	00000000 
00002fb3 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000ac36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00002fdb l       .debug_str	00000000 
00002fcc l       .debug_str	00000000 
00002fbc l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
00002fcb l       .debug_str	00000000 
00002fe7 l       .debug_str	00000000 
00002fec l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1oq54qwymghnfn7s
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00002082 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
00033153 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00002ffc l       .debug_str	00000000 
000557f6 l       .debug_str	00000000 
00003081 l       .debug_str	00000000 
000030ee l       .debug_str	00000000 
00003160 l       .debug_str	00000000 
000545d2 l       .debug_str	00000000 
00058156 l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000031be l       .debug_str	00000000 
000481ad l       .debug_str	00000000 
0000351d l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
0000c893 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2d0u1dup22f6p5uq
00000d12 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00021161 l       .debug_str	00000000 
000031db l       .debug_str	00000000 
0000320d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
00033153 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00032c69 l       .debug_str	00000000 
00056352 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
0000351d l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c893 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00053fc4 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2q7rzzztqsy7quqz
0000490a l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
00004e23 l       .debug_str	00000000 
00004e63 l       .debug_str	00000000 
00004eb1 l       .debug_str	00000000 
00004ef1 l       .debug_str	00000000 
00004f18 l       .debug_str	00000000 
00004f58 l       .debug_str	00000000 
00004f66 l       .debug_str	00000000 
00004fd5 l       .debug_str	00000000 
00005000 l       .debug_str	00000000 
00005070 l       .debug_str	00000000 
00005083 l       .debug_str	00000000 
000050f3 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000511f l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00018613 l       .debug_str	00000000 
00005a9a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00002082 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00037d9d l       .debug_str	00000000 
0000512e l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00054376 l       .debug_str	00000000 
00004d59 l       .debug_str	00000000 
00003214 l       .debug_str	00000000 
00003562 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003bd87 l       .debug_str	00000000 
0000321d l       .debug_str	00000000 
00003229 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00003231 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000328b l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
000032f8 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
0000338e l       .debug_str	00000000 
00003398 l       .debug_str	00000000 
000033d5 l       .debug_str	00000000 
0000341a l       .debug_str	00000000 
00003423 l       .debug_str	00000000 
00003433 l       .debug_str	00000000 
0000343b l       .debug_str	00000000 
00003490 l       .debug_str	00000000 
000034ed l       .debug_str	00000000 
000034f9 l       .debug_str	00000000 
00003502 l       .debug_str	00000000 
0000350e l       .debug_str	00000000 
0000351a l       .debug_str	00000000 
00003523 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0000352b l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003561 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
00003568 l       .debug_str	00000000 
0000356f l       .debug_str	00000000 
00003577 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00058c44 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00053689 l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
000034f3 l       .debug_str	00000000 
00059a7f l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
00006f4a l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00003581 l       .debug_str	00000000 
00048d2c l       .debug_str	00000000 
00003598 l       .debug_str	00000000 
000035a0 l       .debug_str	00000000 
000035a9 l       .debug_str	00000000 
000049ad l       .debug_str	00000000 
000035b2 l       .debug_str	00000000 
0000bfd6 l       .debug_str	00000000 
00059732 l       .debug_str	00000000 
000035ba l       .debug_str	00000000 
000035c6 l       .debug_str	00000000 
000035d1 l       .debug_str	00000000 
000035d9 l       .debug_str	00000000 
0000b66c l       .debug_str	00000000 
0000bb97 l       .debug_str	00000000 
000035e1 l       .debug_str	00000000 
000036dd l       .debug_str	00000000 
000037e1 l       .debug_str	00000000 
000037ef l       .debug_str	00000000 
000037fa l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00003827 l       .debug_str	00000000 
00003804 l       .debug_str	00000000 
00003832 l       .debug_str	00000000 
000038ad l       .debug_str	00000000 
00003930 l       .debug_str	00000000 
0000393e l       .debug_str	00000000 
0000399d l       .debug_str	00000000 
00003a04 l       .debug_str	00000000 
00003a1a l       .debug_str	00000000 
00003a2a l       .debug_str	00000000 
00057f68 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
00003a39 l       .debug_str	00000000 
00026431 l       .debug_str	00000000 
00003a3f l       .debug_str	00000000 
00003a45 l       .debug_str	00000000 
00003a4b l       .debug_str	00000000 
00003a57 l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
00003a5f l       .debug_str	00000000 
00003a67 l       .debug_str	00000000 
00003a6d l       .debug_str	00000000 
00003ab3 l       .debug_str	00000000 
00003a90 l       .debug_str	00000000 
00003ac3 l       .debug_str	00000000 
00003b03 l       .debug_str	00000000 
00057af5 l       .debug_str	00000000 
00003b4b l       .debug_str	00000000 
00003b51 l       .debug_str	00000000 
00003b57 l       .debug_str	00000000 
00003b80 l       .debug_str	00000000 
00003b5d l       .debug_str	00000000 
00003b92 l       .debug_str	00000000 
00003bd4 l       .debug_str	00000000 
000579de l       .debug_str	00000000 
00003c1e l       .debug_str	00000000 
00003c24 l       .debug_str	00000000 
00003c2a l       .debug_str	00000000 
00003c53 l       .debug_str	00000000 
00003c30 l       .debug_str	00000000 
00003c65 l       .debug_str	00000000 
00003ca7 l       .debug_str	00000000 
00056ea2 l       .debug_str	00000000 
00003cf1 l       .debug_str	00000000 
00003cf7 l       .debug_str	00000000 
00003cfd l       .debug_str	00000000 
00003d03 l       .debug_str	00000000 
00003d2c l       .debug_str	00000000 
00003d09 l       .debug_str	00000000 
00003d3d l       .debug_str	00000000 
00003d7e l       .debug_str	00000000 
00003dc7 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00057d2c l       .debug_str	00000000 
00003dd1 l       .debug_str	00000000 
00003dd7 l       .debug_str	00000000 
00003ddd l       .debug_str	00000000 
00003e06 l       .debug_str	00000000 
00003de3 l       .debug_str	00000000 
00003e17 l       .debug_str	00000000 
00003e58 l       .debug_str	00000000 
00056f5a l       .debug_str	00000000 
00003ea1 l       .debug_str	00000000 
00003ecd l       .debug_str	00000000 
00003eaa l       .debug_str	00000000 
00003ede l       .debug_str	00000000 
00003f1f l       .debug_str	00000000 
00003f68 l       .debug_str	00000000 
00057f00 l       .debug_str	00000000 
00003f6d l       .debug_str	00000000 
00003f76 l       .debug_str	00000000 
00003f7d l       .debug_str	00000000 
00003fa8 l       .debug_str	00000000 
00003f85 l       .debug_str	00000000 
00003fba l       .debug_str	00000000 
00003ffc l       .debug_str	00000000 
00057bc8 l       .debug_str	00000000 
00004046 l       .debug_str	00000000 
0000404c l       .debug_str	00000000 
00004052 l       .debug_str	00000000 
00004058 l       .debug_str	00000000 
0000405e l       .debug_str	00000000 
00004066 l       .debug_str	00000000 
00004074 l       .debug_str	00000000 
00004083 l       .debug_str	00000000 
00004094 l       .debug_str	00000000 
0000409f l       .debug_str	00000000 
000040aa l       .debug_str	00000000 
000040b5 l       .debug_str	00000000 
000040bc l       .debug_str	00000000 
00004102 l       .debug_str	00000000 
000040df l       .debug_str	00000000 
00004114 l       .debug_str	00000000 
00004156 l       .debug_str	00000000 
0005705d l       .debug_str	00000000 
000041a0 l       .debug_str	00000000 
000041cd l       .debug_str	00000000 
000041aa l       .debug_str	00000000 
000041df l       .debug_str	00000000 
00004221 l       .debug_str	00000000 
0000426b l       .debug_str	00000000 
00004270 l       .debug_str	00000000 
0000429d l       .debug_str	00000000 
0000427a l       .debug_str	00000000 
000042af l       .debug_str	00000000 
000042f1 l       .debug_str	00000000 
0000433b l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
000043ba l       .debug_str	00000000 
0000434f l       .debug_str	00000000 
0000435f l       .debug_str	00000000 
00004368 l       .debug_str	00000000 
00004373 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00004397 l       .debug_str	00000000 
000043c8 l       .debug_str	00000000 
00004465 l       .debug_str	00000000 
0000450a l       .debug_str	00000000 
00004515 l       .debug_str	00000000 
0000451e l       .debug_str	00000000 
00004562 l       .debug_str	00000000 
0000453f l       .debug_str	00000000 
00004575 l       .debug_str	00000000 
000045f8 l       .debug_str	00000000 
00004683 l       .debug_str	00000000 
0000469f l       .debug_str	00000000 
000046eb l       .debug_str	00000000 
0000473f l       .debug_str	00000000 
0000475c l       .debug_str	00000000 
00004770 l       .debug_str	00000000 
000047bc l       .debug_str	00000000 
00004810 l       .debug_str	00000000 
00004826 l       .debug_str	00000000 
0000483a l       .debug_str	00000000 
00004881 l       .debug_str	00000000 
000048d0 l       .debug_str	00000000 
000048fc l       .debug_str	00000000 
000048d9 l       .debug_str	00000000 
00004910 l       .debug_str	00000000 
00004918 l       .debug_str	00000000 
0000491f l       .debug_str	00000000 
00005598 l       .debug_str	00000000 
00004927 l       .debug_str	00000000 
0000492f l       .debug_str	00000000 
0002d6ae l       .debug_str	00000000 
0000493e l       .debug_str	00000000 
000055ca l       .debug_str	00000000 
00004949 l       .debug_str	00000000 
00004954 l       .debug_str	00000000 
00004965 l       .debug_str	00000000 
0000496b l       .debug_str	00000000 
00004973 l       .debug_str	00000000 
0000497a l       .debug_str	00000000 
00004984 l       .debug_str	00000000 
0000498c l       .debug_str	00000000 
00004994 l       .debug_str	00000000 
000049b6 l       .debug_str	00000000 
000049c1 l       .debug_str	00000000 
000049cd l       .debug_str	00000000 
000049d5 l       .debug_str	00000000 
000049de l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
000049e9 l       .debug_str	00000000 
000049f4 l       .debug_str	00000000 
000049ff l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
00056fce l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
00004a0f l       .debug_str	00000000 
00004a1f l       .debug_str	00000000 
00004a2e l       .debug_str	00000000 
00004a36 l       .debug_str	00000000 
00004a3d l       .debug_str	00000000 
00004a45 l       .debug_str	00000000 
00004a86 l       .debug_str	00000000 
00004a63 l       .debug_str	00000000 
00004a96 l       .debug_str	00000000 
00004aab l       .debug_str	00000000 
00004ab4 l       .debug_str	00000000 
00004b11 l       .debug_str	00000000 
00004b76 l       .debug_str	00000000 
00004b80 l       .debug_str	00000000 
00004b90 l       .debug_str	00000000 
00004ba5 l       .debug_str	00000000 
00004bad l       .debug_str	00000000 
00004c11 l       .debug_str	00000000 
00004c7d l       .debug_str	00000000 
00004c84 l       .debug_str	00000000 
00004c8c l       .debug_str	00000000 
00004ccd l       .debug_str	00000000 
00004caa l       .debug_str	00000000 
00004cdd l       .debug_str	00000000 
00004cf2 l       .debug_str	00000000 
00004d05 l       .debug_str	00000000 
00004d1a l       .debug_str	00000000 
00004d21 l       .debug_str	00000000 
00004d36 l       .debug_str	00000000 
00004d60 l       .debug_str	00000000 
00004daf l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00004dd7 l       .debug_str	00000000 
00004e16 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vuqh37eag1b6y30
00005317 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005677f l       .debug_str	00000000 
0005aa72 l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
000054e8 l       .debug_str	00000000 
000241ed l       .debug_str	00000000 
0000528c l       .debug_str	00000000 
000052ef l       .debug_str	00000000 
00005395 l       .debug_str	00000000 
00005425 l       .debug_str	00000000 
0000543b l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000054c2 l       .debug_str	00000000 
000054d1 l       .debug_str	00000000 
00053e37 l       .debug_str	00000000 
000054f3 l       .debug_str	00000000 
00017e9a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0000513d l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0001425f l       .debug_str	00000000 
0001238c l       .debug_str	00000000 
0000456e l       .debug_str	00000000 
00005143 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000514b l       .debug_str	00000000 
000051d5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000051e3 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
000051ed l       .debug_str	00000000 
00005282 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002117f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3l5pa7f4r4pjxp5p
000061c2 l       .debug_str	00000000 
000061ef l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
000061fa l       .debug_str	00000000 
000014db l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000620a l       .debug_str	00000000 
0000623e l       .debug_str	00000000 
00006225 l       .debug_str	00000000 
00006246 l       .debug_str	00000000 
0000625c l       .debug_str	00000000 
000062c4 l       .debug_str	00000000 
0000633c l       .debug_str	00000000 
00006369 l       .debug_str	00000000 
00006381 l       .debug_str	00000000 
000063eb l       .debug_str	00000000 
000063f3 l       .debug_str	00000000 
000063f9 l       .debug_str	00000000 
00006403 l       .debug_str	00000000 
0000647d l       .debug_str	00000000 
000064e9 l       .debug_str	00000000 
00006562 l       .debug_str	00000000 
000065db l       .debug_str	00000000 
00006646 l       .debug_str	00000000 
000066b5 l       .debug_str	00000000 
000066bc l       .debug_str	00000000 
000066c7 l       .debug_str	00000000 
000066ef l       .debug_str	00000000 
00006764 l       .debug_str	00000000 
000067e1 l       .debug_str	00000000 
000066e0 l       .debug_str	00000000 
000067ed l       .debug_str	00000000 
00003581 l       .debug_str	00000000 
00006864 l       .debug_str	00000000 
0000356f l       .debug_str	00000000 
00048d2c l       .debug_str	00000000 
00003598 l       .debug_str	00000000 
000035a0 l       .debug_str	00000000 
000035a9 l       .debug_str	00000000 
000049ad l       .debug_str	00000000 
000068cd l       .debug_str	00000000 
0000694b l       .debug_str	00000000 
000069bb l       .debug_str	00000000 
00006a35 l       .debug_str	00000000 
00006a4f l       .debug_str	00000000 
00006abb l       .debug_str	00000000 
00006ac4 l       .debug_str	00000000 
00006ad0 l       .debug_str	00000000 
00006b46 l       .debug_str	00000000 
00006bbc l       .debug_str	00000000 
00006c32 l       .debug_str	00000000 
00006c9a l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00006d09 l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
00006d76 l       .debug_str	00000000 
00006deb l       .debug_str	00000000 
00006e00 l       .debug_str	00000000 
00006e67 l       .debug_str	00000000 
00006e70 l       .debug_str	00000000 
00006e7b l       .debug_str	00000000 
00006e82 l       .debug_str	00000000 
00055339 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00037d9d l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00004daf l       .debug_str	00000000 
00006eb7 l       .debug_str	00000000 
00054d72 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
00006ef1 l       .debug_str	00000000 
00054c19 l       .debug_str	00000000 
0005a0b0 l       .debug_str	00000000 
00006f24 l       .debug_str	00000000 
00002fe7 l       .debug_str	00000000 
00006f31 l       .debug_str	00000000 
00002fec l       .debug_str	00000000 
0005a63c l       .debug_str	00000000 
00002d00 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000239c0 l       .debug_str	00000000 
00017737 l       .debug_str	00000000 
00002d08 l       .debug_str	00000000 
00002fae l       .debug_str	00000000 
00002fa5 l       .debug_str	00000000 
00006f52 l       .debug_str	00000000 
00006f57 l       .debug_str	00000000 
00006f5c l       .debug_str	00000000 
00006f61 l       .debug_str	00000000 
00006f66 l       .debug_str	00000000 
00006f6b l       .debug_str	00000000 
00006f76 l       .debug_str	00000000 
00006f81 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00002082 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003bd87 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
000054fd l       .debug_str	00000000 
000152bd l       .debug_str	00000000 
00005571 l       .debug_str	00000000 
00004918 l       .debug_str	00000000 
0000bfd6 l       .debug_str	00000000 
0000491f l       .debug_str	00000000 
00005598 l       .debug_str	00000000 
0000557d l       .debug_str	00000000 
000055a3 l       .debug_str	00000000 
0000492f l       .debug_str	00000000 
0002d6ae l       .debug_str	00000000 
0000493e l       .debug_str	00000000 
000055ca l       .debug_str	00000000 
000055af l       .debug_str	00000000 
000055d6 l       .debug_str	00000000 
000055e1 l       .debug_str	00000000 
000055ec l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
000056a6 l       .debug_str	00000000 
000055fd l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00005684 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000568b l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
000056ba l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005717 l       .debug_str	00000000 
0000577c l       .debug_str	00000000 
00005784 l       .debug_str	00000000 
000057a6 l       .debug_str	00000000 
0000578d l       .debug_str	00000000 
000057be l       .debug_str	00000000 
000057e4 l       .debug_str	00000000 
0000585c l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
00056fce l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000058d3 l       .debug_str	00000000 
0000593c l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
000059b4 l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00058c44 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00053689 l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
000034f3 l       .debug_str	00000000 
00059a7f l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
00006f4a l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
00005a1e l       .debug_str	00000000 
00005a97 l       .debug_str	00000000 
0005a0ae l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
00005a9c l       .debug_str	00000000 
00000aa4 l       .debug_str	00000000 
00005ac2 l       .debug_str	00000000 
00005aa9 l       .debug_str	00000000 
00005aa4 l       .debug_str	00000000 
00005acd l       .debug_str	00000000 
00005ae6 l       .debug_str	00000000 
00005b51 l       .debug_str	00000000 
00000896 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
00005bc1 l       .debug_str	00000000 
00005bd1 l       .debug_str	00000000 
00005c49 l       .debug_str	00000000 
000548c9 l       .debug_str	00000000 
00054623 l       .debug_str	00000000 
00005c53 l       .debug_str	00000000 
00005c5a l       .debug_str	00000000 
00005c7d l       .debug_str	00000000 
00005c64 l       .debug_str	00000000 
00005c5f l       .debug_str	00000000 
00005c87 l       .debug_str	00000000 
00005c9f l       .debug_str	00000000 
00005d09 l       .debug_str	00000000 
0000321d l       .debug_str	00000000 
00003229 l       .debug_str	00000000 
00003231 l       .debug_str	00000000 
0000328b l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
000032f8 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
0000338e l       .debug_str	00000000 
00003398 l       .debug_str	00000000 
000033d5 l       .debug_str	00000000 
0000341a l       .debug_str	00000000 
00003423 l       .debug_str	00000000 
00003433 l       .debug_str	00000000 
0000343b l       .debug_str	00000000 
00003490 l       .debug_str	00000000 
000034ed l       .debug_str	00000000 
000034f9 l       .debug_str	00000000 
00003502 l       .debug_str	00000000 
0000350e l       .debug_str	00000000 
0000351a l       .debug_str	00000000 
00003523 l       .debug_str	00000000 
0000352b l       .debug_str	00000000 
00003561 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00005d7e l       .debug_str	00000000 
00005de5 l       .debug_str	00000000 
00005e60 l       .debug_str	00000000 
00005e70 l       .debug_str	00000000 
00005e79 l       .debug_str	00000000 
00005e87 l       .debug_str	00000000 
00005e95 l       .debug_str	00000000 
00005ea1 l       .debug_str	00000000 
000060af l       .debug_str	00000000 
00005ead l       .debug_str	00000000 
00005ebc l       .debug_str	00000000 
00005ec4 l       .debug_str	00000000 
00005edd l       .debug_str	00000000 
00003577 l       .debug_str	00000000 
00005eee l       .debug_str	00000000 
00005ef6 l       .debug_str	00000000 
00005f29 l       .debug_str	00000000 
00005f10 l       .debug_str	00000000 
00005f35 l       .debug_str	00000000 
00003526 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00005f67 l       .debug_str	00000000 
00005f4e l       .debug_str	00000000 
00005f72 l       .debug_str	00000000 
00005f94 l       .debug_str	00000000 
00005f7b l       .debug_str	00000000 
00005fa1 l       .debug_str	00000000 
00005fbc l       .debug_str	00000000 
00006029 l       .debug_str	00000000 
000060a6 l       .debug_str	00000000 
000060ae l       .debug_str	00000000 
0000635a l       .debug_str	00000000 
00006341 l       .debug_str	00000000 
000060b8 l       .debug_str	00000000 
000060d5 l       .debug_str	00000000 
00006144 l       .debug_str	00000000 
000061ba l       .debug_str	00000000 
000061cb l       .debug_str	00000000 
000061d9 l       .debug_str	00000000 
000061e0 l       .debug_str	00000000 
000061e7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 413mqmtb04w1hzsl
00009850 l       .debug_str	00000000 
0000a844 l       .debug_str	00000000 
0000a892 l       .debug_str	00000000 
0000a8fd l       .debug_str	00000000 
0002b0c5 l       .debug_str	00000000 
000233d0 l       .debug_str	00000000 
0000a967 l       .debug_str	00000000 
0000a997 l       .debug_str	00000000 
0000a9fa l       .debug_str	00000000 
00001e9f l       .debug_str	00000000 
0000aa2a l       .debug_str	00000000 
0000ac30 l       .debug_str	00000000 
0000ac3a l       .debug_str	00000000 
0000206d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00002082 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7ec l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000598ca l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00006f86 l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
000061fa l       .debug_str	00000000 
00006fa2 l       .debug_str	00000000 
00006fe7 l       .debug_str	00000000 
00007055 l       .debug_str	00000000 
000070ec l       .debug_str	00000000 
000071ac l       .debug_str	00000000 
00007295 l       .debug_str	00000000 
000073a7 l       .debug_str	00000000 
000074e2 l       .debug_str	00000000 
00007646 l       .debug_str	00000000 
000077d3 l       .debug_str	00000000 
00007989 l       .debug_str	00000000 
000014c8 l       .debug_str	00000000 
000014d0 l       .debug_str	00000000 
000014d5 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0002f0c2 l       .debug_str	00000000 
000014df l       .debug_str	00000000 
000014e2 l       .debug_str	00000000 
0000150b l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
00001541 l       .debug_str	00000000 
0000166f l       .debug_str	00000000 
00007b68 l       .debug_str	00000000 
00007bb8 l       .debug_str	00000000 
00007c15 l       .debug_str	00000000 
00007c69 l       .debug_str	00000000 
00007ce0 l       .debug_str	00000000 
00007d64 l       .debug_str	00000000 
00007ddf l       .debug_str	00000000 
00007e7d l       .debug_str	00000000 
00007f28 l       .debug_str	00000000 
00007fca l       .debug_str	00000000 
0000808f l       .debug_str	00000000 
00008161 l       .debug_str	00000000 
0000822a l       .debug_str	00000000 
00008316 l       .debug_str	00000000 
0000840f l       .debug_str	00000000 
000084ff l       .debug_str	00000000 
00008612 l       .debug_str	00000000 
00008732 l       .debug_str	00000000 
00008849 l       .debug_str	00000000 
00008983 l       .debug_str	00000000 
00008aca l       .debug_str	00000000 
00008c08 l       .debug_str	00000000 
00008d69 l       .debug_str	00000000 
00008ed7 l       .debug_str	00000000 
0000903c l       .debug_str	00000000 
000091c4 l       .debug_str	00000000 
00009359 l       .debug_str	00000000 
000094e5 l       .debug_str	00000000 
00009694 l       .debug_str	00000000 
00009a03 l       .debug_str	00000000 
00009bd9 l       .debug_str	00000000 
00009dbc l       .debug_str	00000000 
00009f96 l       .debug_str	00000000 
0000a191 l       .debug_str	00000000 
0000a3a9 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
0002b139 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000231ca l       .debug_str	00000000 
0000a5c0 l       .debug_str	00000000 
0000a5f0 l       .debug_str	00000000 
0000ac36 l       .debug_str	00000000 
0000ac35 l       .debug_str	00000000 
0000a800 l       .debug_str	00000000 
0000a830 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n7qec2sa6vjglqv
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00053fc4 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00021161 l       .debug_str	00000000 
00021155 l       .debug_str	00000000 
00053e08 l       .debug_str	00000000 
000545d2 l       .debug_str	00000000 
0000b09b l       .debug_str	00000000 
0005a97d l       .debug_str	00000000 
0000b0a5 l       .debug_str	00000000 
0000b0ae l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
00033153 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000513d l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000ac93 l       .debug_str	00000000 
0000b5b7 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000051e3 l       .debug_str	00000000 
0000acca l       .debug_str	00000000 
0000ad1d l       .debug_str	00000000 
000241ed l       .debug_str	00000000 
0000ad31 l       .debug_str	00000000 
0000ad77 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000ac36 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00002fdb l       .debug_str	00000000 
0000ad85 l       .debug_str	00000000 
0000adcc l       .debug_str	00000000 
0000add5 l       .debug_str	00000000 
0000ae1e l       .debug_str	00000000 
00006f6b l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0001238c l       .debug_str	00000000 
000054f3 l       .debug_str	00000000 
0000ae2a l       .debug_str	00000000 
0000aea6 l       .debug_str	00000000 
0005aa72 l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
000054c2 l       .debug_str	00000000 
0000aed0 l       .debug_str	00000000 
0000af4c l       .debug_str	00000000 
0000af7b l       .debug_str	00000000 
0000b001 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000b00f l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002ef08 l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
0000b018 l       .debug_str	00000000 
000152ad l       .debug_str	00000000 
0000b029 l       .debug_str	00000000 
0000b08b l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000239c0 l       .debug_str	00000000 
00002fb3 l       .debug_str	00000000 
00017d75 l       .debug_str	00000000 
00002fbc l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
0000b093 l       .debug_str	00000000 
00002fe7 l       .debug_str	00000000 
00002fec l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00032c69 l       .debug_str	00000000 
00056352 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
0000351d l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c893 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4oqy1cznfkuv6rc
00056794 l       .debug_str	00000000 
0000b2c1 l       .debug_str	00000000 
0005334a l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
0005adc2 l       .debug_str	00000000 
0005adc1 l       .debug_str	00000000 
0005a63c l       .debug_str	00000000 
00002d00 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000239c0 l       .debug_str	00000000 
00017737 l       .debug_str	00000000 
00002d08 l       .debug_str	00000000 
00002fae l       .debug_str	00000000 
00002fa5 l       .debug_str	00000000 
00005a9a l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
00026431 l       .debug_str	00000000 
00026436 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000b0b5 l       .debug_str	00000000 
0005326d l       .debug_str	00000000 
0000b0b9 l       .debug_str	00000000 
0000b0ea l       .debug_str	00000000 
0000b0f0 l       .debug_str	00000000 
0000b131 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
0000b146 l       .debug_str	00000000 
0000b17d l       .debug_str	00000000 
0000b188 l       .debug_str	00000000 
000598ca l       .debug_str	00000000 
0000b1ba l       .debug_str	00000000 
000533b1 l       .debug_str	00000000 
0000b1ee l       .debug_str	00000000 
000533a0 l       .debug_str	00000000 
0000b222 l       .debug_str	00000000 
00053358 l       .debug_str	00000000 
0000b259 l       .debug_str	00000000 
000533ea l       .debug_str	00000000 
0000b291 l       .debug_str	00000000 
0005321b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4qlpitlm4hs8kdcv
000055ca l       .debug_str	00000000 
0000b608 l       .debug_str	00000000 
0000b62f l       .debug_str	00000000 
0000b63a l       .debug_str	00000000 
0000b661 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000b66c l       .debug_str	00000000 
0000b66b l       .debug_str	00000000 
00021014 l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
00054359 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00003b5b l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00006f6b l       .debug_str	00000000 
000572a9 l       .debug_str	00000000 
000545b3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000b2f2 l       .debug_str	00000000 
0000b31b l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
0000b328 l       .debug_str	00000000 
0000b33a l       .debug_str	00000000 
0000b34b l       .debug_str	00000000 
0000b397 l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
0000b3a3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00054376 l       .debug_str	00000000 
00004d59 l       .debug_str	00000000 
00003214 l       .debug_str	00000000 
00003562 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003bd87 l       .debug_str	00000000 
0000321d l       .debug_str	00000000 
00003229 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00003231 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000328b l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
000032f8 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
0000338e l       .debug_str	00000000 
00003398 l       .debug_str	00000000 
000033d5 l       .debug_str	00000000 
0000341a l       .debug_str	00000000 
00003423 l       .debug_str	00000000 
00003433 l       .debug_str	00000000 
0000343b l       .debug_str	00000000 
00003490 l       .debug_str	00000000 
000034ed l       .debug_str	00000000 
000034f9 l       .debug_str	00000000 
00003502 l       .debug_str	00000000 
0000350e l       .debug_str	00000000 
0000351a l       .debug_str	00000000 
00003523 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0000352b l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003561 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
00003568 l       .debug_str	00000000 
0000356f l       .debug_str	00000000 
00003577 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00058c44 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00053689 l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
000034f3 l       .debug_str	00000000 
00059a7f l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
00006f4a l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00003581 l       .debug_str	00000000 
00048d2c l       .debug_str	00000000 
00003598 l       .debug_str	00000000 
000035a0 l       .debug_str	00000000 
000035a9 l       .debug_str	00000000 
000049ad l       .debug_str	00000000 
000035b2 l       .debug_str	00000000 
0000bfd6 l       .debug_str	00000000 
00059732 l       .debug_str	00000000 
000035ba l       .debug_str	00000000 
000035c6 l       .debug_str	00000000 
000035d1 l       .debug_str	00000000 
000035d9 l       .debug_str	00000000 
0000b3a7 l       .debug_str	00000000 
0000bb97 l       .debug_str	00000000 
000035e1 l       .debug_str	00000000 
000036dd l       .debug_str	00000000 
000037e1 l       .debug_str	00000000 
000037ef l       .debug_str	00000000 
000037fa l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00003827 l       .debug_str	00000000 
00003804 l       .debug_str	00000000 
00003832 l       .debug_str	00000000 
000038ad l       .debug_str	00000000 
00003930 l       .debug_str	00000000 
0000393e l       .debug_str	00000000 
0000399d l       .debug_str	00000000 
00003a04 l       .debug_str	00000000 
00003a1a l       .debug_str	00000000 
00003a2a l       .debug_str	00000000 
00057f68 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
00003a39 l       .debug_str	00000000 
00026431 l       .debug_str	00000000 
00003a3f l       .debug_str	00000000 
00003a45 l       .debug_str	00000000 
00003a4b l       .debug_str	00000000 
00003a57 l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
00003a5f l       .debug_str	00000000 
00003a67 l       .debug_str	00000000 
00003a6d l       .debug_str	00000000 
00003ab3 l       .debug_str	00000000 
00003a90 l       .debug_str	00000000 
00003ac3 l       .debug_str	00000000 
00003b03 l       .debug_str	00000000 
00057af5 l       .debug_str	00000000 
00003b4b l       .debug_str	00000000 
00003b51 l       .debug_str	00000000 
00003b57 l       .debug_str	00000000 
00003b80 l       .debug_str	00000000 
00003b5d l       .debug_str	00000000 
00003b92 l       .debug_str	00000000 
00003bd4 l       .debug_str	00000000 
000579de l       .debug_str	00000000 
00003c1e l       .debug_str	00000000 
00003c24 l       .debug_str	00000000 
00003c2a l       .debug_str	00000000 
00003c53 l       .debug_str	00000000 
00003c30 l       .debug_str	00000000 
00003c65 l       .debug_str	00000000 
00003ca7 l       .debug_str	00000000 
00056ea2 l       .debug_str	00000000 
00003cf1 l       .debug_str	00000000 
00003cf7 l       .debug_str	00000000 
00003cfd l       .debug_str	00000000 
00003d03 l       .debug_str	00000000 
00003d2c l       .debug_str	00000000 
00003d09 l       .debug_str	00000000 
00003d3d l       .debug_str	00000000 
00003d7e l       .debug_str	00000000 
00003dc7 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00057d2c l       .debug_str	00000000 
00003dd1 l       .debug_str	00000000 
00003dd7 l       .debug_str	00000000 
00003ddd l       .debug_str	00000000 
00003e06 l       .debug_str	00000000 
00003de3 l       .debug_str	00000000 
00003e17 l       .debug_str	00000000 
00003e58 l       .debug_str	00000000 
00056f5a l       .debug_str	00000000 
00003ea1 l       .debug_str	00000000 
00003ecd l       .debug_str	00000000 
00003eaa l       .debug_str	00000000 
00003ede l       .debug_str	00000000 
00003f1f l       .debug_str	00000000 
00003f68 l       .debug_str	00000000 
00057f00 l       .debug_str	00000000 
00003f6d l       .debug_str	00000000 
00003f76 l       .debug_str	00000000 
00003f7d l       .debug_str	00000000 
00003fa8 l       .debug_str	00000000 
00003f85 l       .debug_str	00000000 
00003fba l       .debug_str	00000000 
00003ffc l       .debug_str	00000000 
00057bc8 l       .debug_str	00000000 
00004046 l       .debug_str	00000000 
0000404c l       .debug_str	00000000 
00004052 l       .debug_str	00000000 
00004058 l       .debug_str	00000000 
0000405e l       .debug_str	00000000 
00004066 l       .debug_str	00000000 
00004074 l       .debug_str	00000000 
00004083 l       .debug_str	00000000 
00004094 l       .debug_str	00000000 
0000409f l       .debug_str	00000000 
000040aa l       .debug_str	00000000 
000040b5 l       .debug_str	00000000 
000040bc l       .debug_str	00000000 
00004102 l       .debug_str	00000000 
000040df l       .debug_str	00000000 
00004114 l       .debug_str	00000000 
00004156 l       .debug_str	00000000 
0005705d l       .debug_str	00000000 
000041a0 l       .debug_str	00000000 
000041cd l       .debug_str	00000000 
000041aa l       .debug_str	00000000 
000041df l       .debug_str	00000000 
00004221 l       .debug_str	00000000 
0000426b l       .debug_str	00000000 
00004270 l       .debug_str	00000000 
0000429d l       .debug_str	00000000 
0000427a l       .debug_str	00000000 
000042af l       .debug_str	00000000 
000042f1 l       .debug_str	00000000 
0000433b l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
000043ba l       .debug_str	00000000 
0000434f l       .debug_str	00000000 
0000435f l       .debug_str	00000000 
00004368 l       .debug_str	00000000 
00004373 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00004397 l       .debug_str	00000000 
000043c8 l       .debug_str	00000000 
00004465 l       .debug_str	00000000 
0000450a l       .debug_str	00000000 
00004515 l       .debug_str	00000000 
0000451e l       .debug_str	00000000 
00004562 l       .debug_str	00000000 
0000453f l       .debug_str	00000000 
00004575 l       .debug_str	00000000 
000045f8 l       .debug_str	00000000 
00004683 l       .debug_str	00000000 
0000469f l       .debug_str	00000000 
000046eb l       .debug_str	00000000 
0000473f l       .debug_str	00000000 
0000475c l       .debug_str	00000000 
00004770 l       .debug_str	00000000 
000047bc l       .debug_str	00000000 
00004810 l       .debug_str	00000000 
00004826 l       .debug_str	00000000 
0000483a l       .debug_str	00000000 
00004881 l       .debug_str	00000000 
000048d0 l       .debug_str	00000000 
000048fc l       .debug_str	00000000 
000048d9 l       .debug_str	00000000 
0000490a l       .debug_str	00000000 
00004910 l       .debug_str	00000000 
00004918 l       .debug_str	00000000 
0000491f l       .debug_str	00000000 
00005598 l       .debug_str	00000000 
00004927 l       .debug_str	00000000 
0000492f l       .debug_str	00000000 
0002d6ae l       .debug_str	00000000 
0000493e l       .debug_str	00000000 
00004949 l       .debug_str	00000000 
00004954 l       .debug_str	00000000 
00004965 l       .debug_str	00000000 
0000496b l       .debug_str	00000000 
00004973 l       .debug_str	00000000 
0000497a l       .debug_str	00000000 
00004984 l       .debug_str	00000000 
0000498c l       .debug_str	00000000 
00004994 l       .debug_str	00000000 
000049b6 l       .debug_str	00000000 
000049c1 l       .debug_str	00000000 
000049cd l       .debug_str	00000000 
000049d5 l       .debug_str	00000000 
000049de l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
000049e9 l       .debug_str	00000000 
000049f4 l       .debug_str	00000000 
000049ff l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
00056fce l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
00004a0f l       .debug_str	00000000 
00004a1f l       .debug_str	00000000 
00004a2e l       .debug_str	00000000 
00004a36 l       .debug_str	00000000 
00004a3d l       .debug_str	00000000 
00004a45 l       .debug_str	00000000 
00004a86 l       .debug_str	00000000 
00004a63 l       .debug_str	00000000 
00004a96 l       .debug_str	00000000 
00004aab l       .debug_str	00000000 
00004ab4 l       .debug_str	00000000 
00004b11 l       .debug_str	00000000 
00004b76 l       .debug_str	00000000 
00004b80 l       .debug_str	00000000 
00004b90 l       .debug_str	00000000 
00004ba5 l       .debug_str	00000000 
00004bad l       .debug_str	00000000 
00004c11 l       .debug_str	00000000 
00004c7d l       .debug_str	00000000 
00004c84 l       .debug_str	00000000 
00004c8c l       .debug_str	00000000 
00004ccd l       .debug_str	00000000 
00004caa l       .debug_str	00000000 
00004cdd l       .debug_str	00000000 
00004cf2 l       .debug_str	00000000 
00004d05 l       .debug_str	00000000 
00004d1a l       .debug_str	00000000 
00004d21 l       .debug_str	00000000 
00004d36 l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
0000c68a l       .debug_str	00000000 
000540d6 l       .debug_str	00000000 
0000b3b4 l       .debug_str	00000000 
0000b46c l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
0000b4d0 l       .debug_str	00000000 
0000b506 l       .debug_str	00000000 
0000b51f l       .debug_str	00000000 
0000b559 l       .debug_str	00000000 
0000b576 l       .debug_str	00000000 
0000b5b1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
0000b5ce l       .debug_str	00000000 
0000b5d8 l       .debug_str	00000000 
0000b5fe l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z8krxbvbr97ayck
00058e02 l       .debug_str	00000000 
0000b732 l       .debug_str	00000000 
0000b76e l       .debug_str	00000000 
00002e5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0000b6e8 l       .debug_str	00000000 
0000b729 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000239c0 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 54b6z89c74d8bdz1
00004927 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
000545d2 l       .debug_str	00000000 
00005a9a l       .debug_str	00000000 
0000bb4c l       .debug_str	00000000 
0000bb60 l       .debug_str	00000000 
00017f99 l       .debug_str	00000000 
0000bb69 l       .debug_str	00000000 
0000bb74 l       .debug_str	00000000 
0000bb7f l       .debug_str	00000000 
0000bb88 l       .debug_str	00000000 
00021014 l       .debug_str	00000000 
0000bc1b l       .debug_str	00000000 
0000bc25 l       .debug_str	00000000 
0000bc2b l       .debug_str	00000000 
0000b66b l       .debug_str	00000000 
0000bc36 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000ac36 l       .debug_str	00000000 
0000ac35 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
00033153 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
00002fdb l       .debug_str	00000000 
0000b7ad l       .debug_str	00000000 
0000b7f5 l       .debug_str	00000000 
0000b09b l       .debug_str	00000000 
00037d9d l       .debug_str	00000000 
0000b814 l       .debug_str	00000000 
0000b84f l       .debug_str	00000000 
0000b874 l       .debug_str	00000000 
0000b89b l       .debug_str	00000000 
0000b8fb l       .debug_str	00000000 
0000b904 l       .debug_str	00000000 
0000b96f l       .debug_str	00000000 
0000b97f l       .debug_str	00000000 
0000b9eb l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00054376 l       .debug_str	00000000 
00004d59 l       .debug_str	00000000 
00003214 l       .debug_str	00000000 
00003562 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003bd87 l       .debug_str	00000000 
0000321d l       .debug_str	00000000 
00003229 l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00003231 l       .debug_str	00000000 
0000328b l       .debug_str	00000000 
000032ed l       .debug_str	00000000 
000032f8 l       .debug_str	00000000 
0000333f l       .debug_str	00000000 
0000338e l       .debug_str	00000000 
00003398 l       .debug_str	00000000 
000033d5 l       .debug_str	00000000 
0000341a l       .debug_str	00000000 
00003423 l       .debug_str	00000000 
00003433 l       .debug_str	00000000 
0000343b l       .debug_str	00000000 
00003490 l       .debug_str	00000000 
000034ed l       .debug_str	00000000 
000034f9 l       .debug_str	00000000 
00003502 l       .debug_str	00000000 
0000350e l       .debug_str	00000000 
0000351a l       .debug_str	00000000 
00003523 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0000352b l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003561 l       .debug_str	00000000 
00003548 l       .debug_str	00000000 
00003568 l       .debug_str	00000000 
0000356f l       .debug_str	00000000 
00003577 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00058c44 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00053689 l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
000034f3 l       .debug_str	00000000 
00059a7f l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
00006f4a l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00003581 l       .debug_str	00000000 
00048d2c l       .debug_str	00000000 
00003598 l       .debug_str	00000000 
000035a0 l       .debug_str	00000000 
000035a9 l       .debug_str	00000000 
000049ad l       .debug_str	00000000 
000035b2 l       .debug_str	00000000 
0000bfd6 l       .debug_str	00000000 
00059732 l       .debug_str	00000000 
000035ba l       .debug_str	00000000 
000035c6 l       .debug_str	00000000 
000035d1 l       .debug_str	00000000 
000035d9 l       .debug_str	00000000 
0000bb97 l       .debug_str	00000000 
000035e1 l       .debug_str	00000000 
000036dd l       .debug_str	00000000 
000037e1 l       .debug_str	00000000 
000037ef l       .debug_str	00000000 
000037fa l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00003827 l       .debug_str	00000000 
00003804 l       .debug_str	00000000 
00003832 l       .debug_str	00000000 
000038ad l       .debug_str	00000000 
00003930 l       .debug_str	00000000 
0000393e l       .debug_str	00000000 
0000399d l       .debug_str	00000000 
00003a04 l       .debug_str	00000000 
00003a1a l       .debug_str	00000000 
00003a2a l       .debug_str	00000000 
00057f68 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
00003a39 l       .debug_str	00000000 
00026431 l       .debug_str	00000000 
00003a3f l       .debug_str	00000000 
00003a45 l       .debug_str	00000000 
00003a4b l       .debug_str	00000000 
00003a57 l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
00003a5f l       .debug_str	00000000 
00003a67 l       .debug_str	00000000 
00003a6d l       .debug_str	00000000 
00003ab3 l       .debug_str	00000000 
00003a90 l       .debug_str	00000000 
00003ac3 l       .debug_str	00000000 
00003b03 l       .debug_str	00000000 
00057af5 l       .debug_str	00000000 
00003b4b l       .debug_str	00000000 
00003b51 l       .debug_str	00000000 
00003b57 l       .debug_str	00000000 
00003b80 l       .debug_str	00000000 
00003b5d l       .debug_str	00000000 
00003b92 l       .debug_str	00000000 
00003bd4 l       .debug_str	00000000 
000579de l       .debug_str	00000000 
00003c1e l       .debug_str	00000000 
00003c24 l       .debug_str	00000000 
00003c2a l       .debug_str	00000000 
00003c53 l       .debug_str	00000000 
00003c30 l       .debug_str	00000000 
00003c65 l       .debug_str	00000000 
00003ca7 l       .debug_str	00000000 
00056ea2 l       .debug_str	00000000 
00003cf1 l       .debug_str	00000000 
00003cf7 l       .debug_str	00000000 
00003cfd l       .debug_str	00000000 
00003d03 l       .debug_str	00000000 
00003d2c l       .debug_str	00000000 
00003d09 l       .debug_str	00000000 
00003d3d l       .debug_str	00000000 
00003d7e l       .debug_str	00000000 
00003dc7 l       .debug_str	00000000 
00003dcc l       .debug_str	00000000 
00057d2c l       .debug_str	00000000 
00003dd1 l       .debug_str	00000000 
00003dd7 l       .debug_str	00000000 
00003ddd l       .debug_str	00000000 
00003e06 l       .debug_str	00000000 
00003de3 l       .debug_str	00000000 
00003e17 l       .debug_str	00000000 
00003e58 l       .debug_str	00000000 
00056f5a l       .debug_str	00000000 
00003ea1 l       .debug_str	00000000 
00003ecd l       .debug_str	00000000 
00003eaa l       .debug_str	00000000 
00003ede l       .debug_str	00000000 
00003f1f l       .debug_str	00000000 
00003f68 l       .debug_str	00000000 
00057f00 l       .debug_str	00000000 
00003f6d l       .debug_str	00000000 
00003f76 l       .debug_str	00000000 
00003f7d l       .debug_str	00000000 
00003fa8 l       .debug_str	00000000 
00003f85 l       .debug_str	00000000 
00003fba l       .debug_str	00000000 
00003ffc l       .debug_str	00000000 
00057bc8 l       .debug_str	00000000 
00004046 l       .debug_str	00000000 
0000404c l       .debug_str	00000000 
00004052 l       .debug_str	00000000 
00004058 l       .debug_str	00000000 
0000405e l       .debug_str	00000000 
00004066 l       .debug_str	00000000 
00004074 l       .debug_str	00000000 
00004083 l       .debug_str	00000000 
00004094 l       .debug_str	00000000 
0000409f l       .debug_str	00000000 
000040aa l       .debug_str	00000000 
000040b5 l       .debug_str	00000000 
000040bc l       .debug_str	00000000 
00004102 l       .debug_str	00000000 
000040df l       .debug_str	00000000 
00004114 l       .debug_str	00000000 
00004156 l       .debug_str	00000000 
0005705d l       .debug_str	00000000 
000041a0 l       .debug_str	00000000 
000041cd l       .debug_str	00000000 
000041aa l       .debug_str	00000000 
000041df l       .debug_str	00000000 
00004221 l       .debug_str	00000000 
0000426b l       .debug_str	00000000 
00004270 l       .debug_str	00000000 
0000429d l       .debug_str	00000000 
0000427a l       .debug_str	00000000 
000042af l       .debug_str	00000000 
000042f1 l       .debug_str	00000000 
0000433b l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
000043ba l       .debug_str	00000000 
0000434f l       .debug_str	00000000 
0000435f l       .debug_str	00000000 
00004368 l       .debug_str	00000000 
00004373 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00004397 l       .debug_str	00000000 
000043c8 l       .debug_str	00000000 
00004465 l       .debug_str	00000000 
0000450a l       .debug_str	00000000 
00004515 l       .debug_str	00000000 
0000451e l       .debug_str	00000000 
00004562 l       .debug_str	00000000 
0000453f l       .debug_str	00000000 
00004575 l       .debug_str	00000000 
000045f8 l       .debug_str	00000000 
00004683 l       .debug_str	00000000 
0000469f l       .debug_str	00000000 
000046eb l       .debug_str	00000000 
0000473f l       .debug_str	00000000 
0000475c l       .debug_str	00000000 
00004770 l       .debug_str	00000000 
000047bc l       .debug_str	00000000 
00004810 l       .debug_str	00000000 
00004826 l       .debug_str	00000000 
0000483a l       .debug_str	00000000 
00004881 l       .debug_str	00000000 
000048d0 l       .debug_str	00000000 
000048fc l       .debug_str	00000000 
000048d9 l       .debug_str	00000000 
0000490a l       .debug_str	00000000 
00004910 l       .debug_str	00000000 
00004918 l       .debug_str	00000000 
0000491f l       .debug_str	00000000 
00005598 l       .debug_str	00000000 
0000492f l       .debug_str	00000000 
0002d6ae l       .debug_str	00000000 
0000493e l       .debug_str	00000000 
000055ca l       .debug_str	00000000 
00004949 l       .debug_str	00000000 
00004954 l       .debug_str	00000000 
00004965 l       .debug_str	00000000 
0000496b l       .debug_str	00000000 
00004973 l       .debug_str	00000000 
0000497a l       .debug_str	00000000 
00004984 l       .debug_str	00000000 
0000498c l       .debug_str	00000000 
00004994 l       .debug_str	00000000 
000049b6 l       .debug_str	00000000 
000049c1 l       .debug_str	00000000 
000049cd l       .debug_str	00000000 
000049d5 l       .debug_str	00000000 
000049de l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
000049e9 l       .debug_str	00000000 
000049f4 l       .debug_str	00000000 
000049ff l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
00056fce l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
00004a0f l       .debug_str	00000000 
00004a1f l       .debug_str	00000000 
00004a2e l       .debug_str	00000000 
00004a36 l       .debug_str	00000000 
00004a3d l       .debug_str	00000000 
00004a45 l       .debug_str	00000000 
00004a86 l       .debug_str	00000000 
00004a63 l       .debug_str	00000000 
00004a96 l       .debug_str	00000000 
00004aab l       .debug_str	00000000 
00004ab4 l       .debug_str	00000000 
00004b11 l       .debug_str	00000000 
00004b76 l       .debug_str	00000000 
00004b80 l       .debug_str	00000000 
00004b90 l       .debug_str	00000000 
00004ba5 l       .debug_str	00000000 
00004bad l       .debug_str	00000000 
00004c11 l       .debug_str	00000000 
00004c7d l       .debug_str	00000000 
00004c84 l       .debug_str	00000000 
00004c8c l       .debug_str	00000000 
00004ccd l       .debug_str	00000000 
00004caa l       .debug_str	00000000 
00004cdd l       .debug_str	00000000 
00004cf2 l       .debug_str	00000000 
00004d05 l       .debug_str	00000000 
00004d1a l       .debug_str	00000000 
00004d21 l       .debug_str	00000000 
00004d36 l       .debug_str	00000000 
0000b66c l       .debug_str	00000000 
0000b9fe l       .debug_str	00000000 
0000ba61 l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
0000bae1 l       .debug_str	00000000 
0000bb44 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00002fcc l       .debug_str	00000000 
00002fcb l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
0000351d l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000c893 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 57lqf44sdwu8qayr
00000c71 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00021161 l       .debug_str	00000000 
0000bedb l       .debug_str	00000000 
0000bf0c l       .debug_str	00000000 
0000c19f l       .debug_str	00000000 
0000bf26 l       .debug_str	00000000 
0000bf57 l       .debug_str	00000000 
0000bfd5 l       .debug_str	00000000 
0000bf87 l       .debug_str	00000000 
0000bfb8 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bfc2 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
0000ac35 l       .debug_str	00000000 
0000bfc8 l       .debug_str	00000000 
0000bfce l       .debug_str	00000000 
0000bfd4 l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
0000bfda l       .debug_str	00000000 
0000c02c l       .debug_str	00000000 
00002fcb l       .debug_str	00000000 
0000c07f l       .debug_str	00000000 
0000c0e8 l       .debug_str	00000000 
00021155 l       .debug_str	00000000 
0000c13b l       .debug_str	00000000 
0000c19e l       .debug_str	00000000 
0000c1ca l       .debug_str	00000000 
0000c243 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
00033153 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00059668 l       .debug_str	00000000 
00002cf3 l       .debug_str	00000000 
00000e2c l       .debug_str	00000000 
0000bc40 l       .debug_str	00000000 
0000c1c0 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000351d l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
0000c893 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
0000bc4f l       .debug_str	00000000 
0000bc97 l       .debug_str	00000000 
0000bca0 l       .debug_str	00000000 
0000bce8 l       .debug_str	00000000 
0000ac36 l       .debug_str	00000000 
0000bcf0 l       .debug_str	00000000 
0000b8fb l       .debug_str	00000000 
0000bd38 l       .debug_str	00000000 
0000bd80 l       .debug_str	00000000 
0000bfd6 l       .debug_str	00000000 
0000bd89 l       .debug_str	00000000 
0000bdd1 l       .debug_str	00000000 
0000bdda l       .debug_str	00000000 
0000be0b l       .debug_str	00000000 
0001a85f l       .debug_str	00000000 
0000be14 l       .debug_str	00000000 
0000be45 l       .debug_str	00000000 
00002fdb l       .debug_str	00000000 
00002fcc l       .debug_str	00000000 
0000be4f l       .debug_str	00000000 
0000be80 l       .debug_str	00000000 
0001a873 l       .debug_str	00000000 
0000bea0 l       .debug_str	00000000 
0000bed1 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00032c69 l       .debug_str	00000000 
00056352 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00053fc4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dmg7ylzo67ab86f
0000c3ea l       .debug_str	00000000 
0000c2e7 l       .debug_str	00000000 
0000c330 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
0000c340 l       .debug_str	00000000 
0000c34c l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
0000c39f l       .debug_str	00000000 
0000c3fa l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000c408 l       .debug_str	00000000 
00056340 l       .debug_str	00000000 
00004056 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00058156 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0000c296 l       .debug_str	00000000 
0000c2db l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002117f l       .debug_str	00000000 
00009606 l     F .text	00000044 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E
00000000 l    df *ABS*	00000000 1gec8qpvo4ti2nbg
0001e07a l       .debug_str	00000000 
0000c558 l       .debug_str	00000000 
0000c564 l       .debug_str	00000000 
0000c5ba l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bc25 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00054359 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000c441 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000c44b l       .debug_str	00000000 
0000c49d l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
0000c4a6 l       .debug_str	00000000 
0000c4f9 l       .debug_str	00000000 
0000c503 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2zydbnxo7qpu1b5q
0000c840 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c85c l       .debug_str	00000000 
0000c862 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c86d l       .debug_str	00000000 
0000c878 l       .debug_str	00000000 
0001a923 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00026c58 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
0000c88c l       .debug_str	00000000 
0002e20e l       .debug_str	00000000 
00029658 l       .debug_str	00000000 
0000c899 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
0000c89f l       .debug_str	00000000 
0001aa12 l       .debug_str	00000000 
0000c8a9 l       .debug_str	00000000 
0000c68a l       .debug_str	00000000 
0001aa4d l       .debug_str	00000000 
0000c8e9 l       .debug_str	00000000 
0000c958 l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
0001a869 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c5c7 l       .debug_str	00000000 
00018080 l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00054376 l       .debug_str	00000000 
0000c5eb l       .debug_str	00000000 
0000c5ef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c5f9 l       .debug_str	00000000 
0000c604 l       .debug_str	00000000 
0000c60e l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00024205 l       .debug_str	00000000 
0000c617 l       .debug_str	00000000 
0000c65d l       .debug_str	00000000 
0000c665 l       .debug_str	00000000 
00056d63 l       .debug_str	00000000 
0000c670 l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
0000497d l       .debug_str	00000000 
000241eb l       .debug_str	00000000 
0000c678 l       .debug_str	00000000 
00054196 l       .debug_str	00000000 
0002422e l       .debug_str	00000000 
00059c3e l       .debug_str	00000000 
0000c67c l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
0000c680 l       .debug_str	00000000 
00002ff2 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
0005907a l       .debug_str	00000000 
0000c689 l       .debug_str	00000000 
000586d2 l       .debug_str	00000000 
0000eb81 l       .debug_str	00000000 
0000c68c l       .debug_str	00000000 
0000c6cc l       .debug_str	00000000 
0000c6db l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00002082 l       .debug_str	00000000 
0000c723 l       .debug_str	00000000 
0000c76a l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00037d9d l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00004daf l       .debug_str	00000000 
0000c778 l       .debug_str	00000000 
0000c7bc l       .debug_str	00000000 
0000c7c7 l       .debug_str	00000000 
0000c7d0 l       .debug_str	00000000 
0000c7d8 l       .debug_str	00000000 
00055f7b l       .debug_str	00000000 
0000ebe8 l       .debug_str	00000000 
000545d2 l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
0000c7e1 l       .debug_str	00000000 
0000c7e7 l       .debug_str	00000000 
0000c7f0 l       .debug_str	00000000 
0000c7fd l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0003d30a l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c800 l       .debug_str	00000000 
0000c817 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
00010e4b l       .debug_str	00000000 
0000c82d l       .debug_str	00000000 
0000c833 l       .debug_str	00000000 
0000c5cc l       .debug_str	00000000 
0000c83a l       .debug_str	00000000 
00017f91 l       .debug_str	00000000 
0000ecc0 l       .debug_str	00000000 
0000c84d l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0001a8d8 l       .debug_str	00000000 
000594fb l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
200000e8 l     O .data	00000008 _ZN22piet_embedded_graphics7display12SPI_SETTINGS17h78a64d1040fbeee1E
20000160 l     O .bss	00000004 _ZN22piet_embedded_graphics7display14BACKLIGHT_HIGH17hd6bdc29c96588211E
00000000 l    df *ABS*	00000000 3cgt5uexdtuxl7pe
0000cc5f l       .debug_str	00000000 
0000cb65 l       .debug_str	00000000 
0000cb82 l       .debug_str	00000000 
0000cbbd l       .debug_str	00000000 
0000cbeb l       .debug_str	00000000 
0000cc06 l       .debug_str	00000000 
0000cc41 l       .debug_str	00000000 
0000cc6a l       .debug_str	00000000 
0000c4f9 l       .debug_str	00000000 
0000cc90 l       .debug_str	00000000 
0000ccb6 l       .debug_str	00000000 
0000ccd0 l       .debug_str	00000000 
0000ccf7 l       .debug_str	00000000 
0000cd02 l       .debug_str	00000000 
0000cd29 l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
0000cd44 l       .debug_str	00000000 
0000cd5d l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000572a9 l       .debug_str	00000000 
000545b3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000c95f l       .debug_str	00000000 
0000c971 l       .debug_str	00000000 
0000c982 l       .debug_str	00000000 
0000c9ce l       .debug_str	00000000 
0000c9da l       .debug_str	00000000 
0005821a l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00026436 l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
0000cb5f l       .debug_str	00000000 
0000c9e0 l       .debug_str	00000000 
0000ca02 l       .debug_str	00000000 
0000ca23 l       .debug_str	00000000 
0000ca6f l       .debug_str	00000000 
0000ca8b l       .debug_str	00000000 
0000cac2 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
0000cadc l       .debug_str	00000000 
0000cae9 l       .debug_str	00000000 
0000cb20 l       .debug_str	00000000 
0000cb4a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3eyht9wxrw4fbo0o
0000e7ef l       .debug_str	00000000 
0000e753 l       .debug_str	00000000 
0000e799 l       .debug_str	00000000 
0000e838 l       .debug_str	00000000 
0000e87e l       .debug_str	00000000 
0000ebe8 l       .debug_str	00000000 
00012042 l       .debug_str	00000000 
0000e8b8 l       .debug_str	00000000 
0000e8ff l       .debug_str	00000000 
0000e94d l       .debug_str	00000000 
0000e999 l       .debug_str	00000000 
0000c5cc l       .debug_str	00000000 
0000c83a l       .debug_str	00000000 
0000c840 l       .debug_str	00000000 
00017f91 l       .debug_str	00000000 
0000ecc0 l       .debug_str	00000000 
0000c84d l       .debug_str	00000000 
0001a8d8 l       .debug_str	00000000 
000594fb l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c85c l       .debug_str	00000000 
0000c862 l       .debug_str	00000000 
0000c86d l       .debug_str	00000000 
0000c878 l       .debug_str	00000000 
0001a923 l       .debug_str	00000000 
00026c58 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
0000c88c l       .debug_str	00000000 
00029658 l       .debug_str	00000000 
0000c899 l       .debug_str	00000000 
0000c89f l       .debug_str	00000000 
0001aa12 l       .debug_str	00000000 
0000c8a9 l       .debug_str	00000000 
0000c68a l       .debug_str	00000000 
0001aa4d l       .debug_str	00000000 
0000c8e9 l       .debug_str	00000000 
0000e9d9 l       .debug_str	00000000 
0000ea85 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000eb57 l       .debug_str	00000000 
0000eb70 l       .debug_str	00000000 
000545d2 l       .debug_str	00000000 
0002109d l       .debug_str	00000000 
00013302 l       .debug_str	00000000 
0001eb8c l       .debug_str	00000000 
0000ebc0 l       .debug_str	00000000 
0003a4c4 l       .debug_str	00000000 
0001bafd l       .debug_str	00000000 
00037074 l       .debug_str	00000000 
00013234 l       .debug_str	00000000 
000239c0 l       .debug_str	00000000 
00018572 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0001425f l       .debug_str	00000000 
00002ff7 l       .debug_str	00000000 
00010bd7 l       .debug_str	00000000 
0005a97d l       .debug_str	00000000 
00002ff5 l       .debug_str	00000000 
0000c886 l       .debug_str	00000000 
00023d07 l       .debug_str	00000000 
0000ebc3 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00026c9d l       .debug_str	00000000 
0000ebca l       .debug_str	00000000 
00056d64 l       .debug_str	00000000 
0000c679 l       .debug_str	00000000 
00018080 l       .debug_str	00000000 
00055f7b l       .debug_str	00000000 
0000ebd6 l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
0000ebee l       .debug_str	00000000 
0000ebfa l       .debug_str	00000000 
0000ec06 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000ec13 l       .debug_str	00000000 
0005aeea l       .debug_str	00000000 
0000ec20 l       .debug_str	00000000 
0000ec97 l       .debug_str	00000000 
0000eca0 l       .debug_str	00000000 
0000ecae l       .debug_str	00000000 
0001a989 l       .debug_str	00000000 
0000ecc6 l       .debug_str	00000000 
0000ecfb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c665 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000cd66 l       .debug_str	00000000 
0000cd6f l       .debug_str	00000000 
0000cd79 l       .debug_str	00000000 
0000cd89 l       .debug_str	00000000 
0000eb64 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00002082 l       .debug_str	00000000 
0000cd9a l       .debug_str	00000000 
0000cda6 l       .debug_str	00000000 
0000cdaa l       .debug_str	00000000 
0000cdb2 l       .debug_str	00000000 
0000cdb8 l       .debug_str	00000000 
0000cdbe l       .debug_str	00000000 
0000cdc4 l       .debug_str	00000000 
0000cdcb l       .debug_str	00000000 
0000cdd1 l       .debug_str	00000000 
0000cdd7 l       .debug_str	00000000 
0000cdde l       .debug_str	00000000 
0000cde4 l       .debug_str	00000000 
0000cdec l       .debug_str	00000000 
0000cdf3 l       .debug_str	00000000 
0000cdf9 l       .debug_str	00000000 
0000cdff l       .debug_str	00000000 
0000ce05 l       .debug_str	00000000 
0000ce0b l       .debug_str	00000000 
0000ce11 l       .debug_str	00000000 
0000ce18 l       .debug_str	00000000 
0000ce1f l       .debug_str	00000000 
0000ce27 l       .debug_str	00000000 
0000ce2f l       .debug_str	00000000 
0000ce37 l       .debug_str	00000000 
0000ce3e l       .debug_str	00000000 
0000ce46 l       .debug_str	00000000 
0000ce4d l       .debug_str	00000000 
0000ce54 l       .debug_str	00000000 
0000ce5b l       .debug_str	00000000 
0000ce62 l       .debug_str	00000000 
0000ce69 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
0000ce76 l       .debug_str	00000000 
0000ce7c l       .debug_str	00000000 
0000ce82 l       .debug_str	00000000 
0000ce88 l       .debug_str	00000000 
0000ce8f l       .debug_str	00000000 
0000ce97 l       .debug_str	00000000 
0000ed89 l       .debug_str	00000000 
0000ce9f l       .debug_str	00000000 
000585d7 l       .debug_str	00000000 
0000ceaa l       .debug_str	00000000 
00056d63 l       .debug_str	00000000 
0000c5eb l       .debug_str	00000000 
0000c670 l       .debug_str	00000000 
0000497d l       .debug_str	00000000 
000241eb l       .debug_str	00000000 
0000c678 l       .debug_str	00000000 
00054196 l       .debug_str	00000000 
0002422e l       .debug_str	00000000 
00059c3e l       .debug_str	00000000 
0000c67c l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
0000c680 l       .debug_str	00000000 
00002ff2 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
0005907a l       .debug_str	00000000 
0000c689 l       .debug_str	00000000 
000586d2 l       .debug_str	00000000 
0000eb81 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0000ceb6 l       .debug_str	00000000 
0000cec1 l       .debug_str	00000000 
0000cec6 l       .debug_str	00000000 
0000cf02 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ee4e l       .debug_str	00000000 
0000cf21 l       .debug_str	00000000 
0000cf6f l       .debug_str	00000000 
0000cfb0 l       .debug_str	00000000 
0000d01c l       .debug_str	00000000 
0000d05e l       .debug_str	00000000 
0000d0ca l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7ec l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000598ca l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00001342 l       .debug_str	00000000 
0000135f l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
000013ad l       .debug_str	00000000 
000013be l       .debug_str	00000000 
0000142e l       .debug_str	00000000 
0000d136 l       .debug_str	00000000 
0000d1f9 l       .debug_str	00000000 
0000d2e6 l       .debug_str	00000000 
000014c8 l       .debug_str	00000000 
000014d0 l       .debug_str	00000000 
000014d5 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0002f0c2 l       .debug_str	00000000 
000014df l       .debug_str	00000000 
000014e2 l       .debug_str	00000000 
0000150b l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
00001541 l       .debug_str	00000000 
0000156e l       .debug_str	00000000 
000015be l       .debug_str	00000000 
0000161b l       .debug_str	00000000 
0000166f l       .debug_str	00000000 
00001672 l       .debug_str	00000000 
000016e9 l       .debug_str	00000000 
0000176d l       .debug_str	00000000 
000017e8 l       .debug_str	00000000 
00001886 l       .debug_str	00000000 
00001931 l       .debug_str	00000000 
0000d3fd l       .debug_str	00000000 
0000d4c2 l       .debug_str	00000000 
0000d594 l       .debug_str	00000000 
0000d65d l       .debug_str	00000000 
0000d749 l       .debug_str	00000000 
0000d842 l       .debug_str	00000000 
0000d932 l       .debug_str	00000000 
0000da45 l       .debug_str	00000000 
0000db65 l       .debug_str	00000000 
0000dc7c l       .debug_str	00000000 
0000ddb5 l       .debug_str	00000000 
0000df0b l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
0000e060 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0001084e l       .debug_str	00000000 
0002e20e l       .debug_str	00000000 
0000e1ad l       .debug_str	00000000 
0000e1fb l       .debug_str	00000000 
0000e37b l       .debug_str	00000000 
0000e3c9 l       .debug_str	00000000 
0000e40a l       .debug_str	00000000 
0000e458 l       .debug_str	00000000 
0000e499 l       .debug_str	00000000 
0000e4e9 l       .debug_str	00000000 
0000e66b l       .debug_str	00000000 
0000e6bc l       .debug_str	00000000 
0000e700 l       .debug_str	00000000 
0001bc10 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3sr9zgbizuzi7j5h
0000ceaa l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ee4e l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000ed6f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c665 l       .debug_str	00000000 
0000cd9a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000cda6 l       .debug_str	00000000 
0000cdaa l       .debug_str	00000000 
0000cdb2 l       .debug_str	00000000 
0000cdb8 l       .debug_str	00000000 
0000cdbe l       .debug_str	00000000 
0000cdc4 l       .debug_str	00000000 
0000cdcb l       .debug_str	00000000 
0000cdd1 l       .debug_str	00000000 
0000cdd7 l       .debug_str	00000000 
0000cdde l       .debug_str	00000000 
0000cde4 l       .debug_str	00000000 
0000cdec l       .debug_str	00000000 
0000cdf3 l       .debug_str	00000000 
0000cdf9 l       .debug_str	00000000 
0000cdff l       .debug_str	00000000 
0000ce05 l       .debug_str	00000000 
0000ce0b l       .debug_str	00000000 
0000ce11 l       .debug_str	00000000 
0000ce18 l       .debug_str	00000000 
0000ce1f l       .debug_str	00000000 
0000ce27 l       .debug_str	00000000 
0000ce2f l       .debug_str	00000000 
0000ce37 l       .debug_str	00000000 
0000ce3e l       .debug_str	00000000 
0000ce46 l       .debug_str	00000000 
0000ce4d l       .debug_str	00000000 
0000ce54 l       .debug_str	00000000 
0000ce5b l       .debug_str	00000000 
0000ce62 l       .debug_str	00000000 
0000ce69 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
0000ce76 l       .debug_str	00000000 
0000ce7c l       .debug_str	00000000 
0000ce82 l       .debug_str	00000000 
0000ce88 l       .debug_str	00000000 
0000ce8f l       .debug_str	00000000 
0000ce97 l       .debug_str	00000000 
0000ed89 l       .debug_str	00000000 
0000ce9f l       .debug_str	00000000 
000585d7 l       .debug_str	00000000 
0000cec1 l       .debug_str	00000000 
0000ed07 l       .debug_str	00000000 
0000ed43 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44cnu8660c26myi6
0000ede4 l       .debug_str	00000000 
0000edd9 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
0000ee22 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00058156 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0000ed95 l       .debug_str	00000000 
0000a6d6 l     F .text	0000001e _ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E
00000000 l    df *ABS*	00000000 469um0xjm96v8cgk
0000f9ad l       .debug_str	00000000 
0001036e l       .debug_str	00000000 
000104c1 l       .debug_str	00000000 
000104f1 l       .debug_str	00000000 
0000c7e7 l       .debug_str	00000000 
0000c7f0 l       .debug_str	00000000 
0000c7fd l       .debug_str	00000000 
0003d30a l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c800 l       .debug_str	00000000 
0000c817 l       .debug_str	00000000 
00010e4b l       .debug_str	00000000 
00010e2e l       .debug_str	00000000 
00010618 l       .debug_str	00000000 
00010648 l       .debug_str	00000000 
00010ed2 l       .debug_str	00000000 
00010e74 l       .debug_str	00000000 
0001068a l       .debug_str	00000000 
000106ba l       .debug_str	00000000 
00010709 l       .debug_str	00000000 
00010739 l       .debug_str	00000000 
0001074b l       .debug_str	00000000 
0001077b l       .debug_str	00000000 
0000cd5d l       .debug_str	00000000 
000107b4 l       .debug_str	00000000 
000107e1 l       .debug_str	00000000 
00010824 l       .debug_str	00000000 
0001083a l       .debug_str	00000000 
0001097e l       .debug_str	00000000 
00010a1a l       .debug_str	00000000 
0000cd44 l       .debug_str	00000000 
00010ae4 l       .debug_str	00000000 
00010bc3 l       .debug_str	00000000 
00010d0c l       .debug_str	00000000 
00010e29 l       .debug_str	00000000 
00010e61 l       .debug_str	00000000 
00010ea6 l       .debug_str	00000000 
00010eae l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0000ee28 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ee4e l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
0000ee2f l       .debug_str	00000000 
0000ee34 l       .debug_str	00000000 
0000cec1 l       .debug_str	00000000 
0000ee59 l       .debug_str	00000000 
0000ee60 l       .debug_str	00000000 
0000ee65 l       .debug_str	00000000 
0000eea0 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
0000eed7 l       .debug_str	00000000 
0000ef07 l       .debug_str	00000000 
0000c5c7 l       .debug_str	00000000 
0000ef1a l       .debug_str	00000000 
0000ef20 l       .debug_str	00000000 
0000ef27 l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
00013234 l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7ec l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000598ca l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00001342 l       .debug_str	00000000 
0000135f l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
000013ad l       .debug_str	00000000 
000013be l       .debug_str	00000000 
0000142e l       .debug_str	00000000 
0000d136 l       .debug_str	00000000 
0000d1f9 l       .debug_str	00000000 
000014c8 l       .debug_str	00000000 
000014d0 l       .debug_str	00000000 
000014d5 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0002f0c2 l       .debug_str	00000000 
000014df l       .debug_str	00000000 
000014e2 l       .debug_str	00000000 
0000150b l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
00001541 l       .debug_str	00000000 
0000156e l       .debug_str	00000000 
000015be l       .debug_str	00000000 
0000161b l       .debug_str	00000000 
0000166f l       .debug_str	00000000 
00001672 l       .debug_str	00000000 
000016e9 l       .debug_str	00000000 
0000176d l       .debug_str	00000000 
000017e8 l       .debug_str	00000000 
00001886 l       .debug_str	00000000 
00001931 l       .debug_str	00000000 
0000d3fd l       .debug_str	00000000 
0000d4c2 l       .debug_str	00000000 
0000d594 l       .debug_str	00000000 
0000d65d l       .debug_str	00000000 
0000d749 l       .debug_str	00000000 
0000d842 l       .debug_str	00000000 
0000ef2f l       .debug_str	00000000 
0000f041 l       .debug_str	00000000 
0000f170 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
0000f29e l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00010d20 l       .debug_str	00000000 
000107d8 l       .debug_str	00000000 
0000f3c4 l       .debug_str	00000000 
0000f3f4 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
000107f4 l       .debug_str	00000000 
0000f42b l       .debug_str	00000000 
0000f45b l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
0001799d l       .debug_str	00000000 
0000f4a8 l       .debug_str	00000000 
0000f4d8 l       .debug_str	00000000 
0000d2e6 l       .debug_str	00000000 
0000d932 l       .debug_str	00000000 
0000da45 l       .debug_str	00000000 
0000db65 l       .debug_str	00000000 
0000dc7c l       .debug_str	00000000 
0000ddb5 l       .debug_str	00000000 
0000df0b l       .debug_str	00000000 
0000e060 l       .debug_str	00000000 
0001084e l       .debug_str	00000000 
0000f4f8 l       .debug_str	00000000 
0000f528 l       .debug_str	00000000 
0000ed00 l       .debug_str	00000000 
0000c5cc l       .debug_str	00000000 
0000f676 l       .debug_str	00000000 
0000f681 l       .debug_str	00000000 
0000f68b l       .debug_str	00000000 
0000ecc0 l       .debug_str	00000000 
0000c84d l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
0001a8d8 l       .debug_str	00000000 
0000f694 l       .debug_str	00000000 
0000c85c l       .debug_str	00000000 
0000c862 l       .debug_str	00000000 
0000c86d l       .debug_str	00000000 
0000c878 l       .debug_str	00000000 
0001a923 l       .debug_str	00000000 
00026c58 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
0000c88c l       .debug_str	00000000 
0002e20e l       .debug_str	00000000 
00029658 l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
0000c68a l       .debug_str	00000000 
000295ec l       .debug_str	00000000 
0000f6a1 l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
000109a2 l       .debug_str	00000000 
0000f6ad l       .debug_str	00000000 
0000f6dd l       .debug_str	00000000 
0000f783 l       .debug_str	00000000 
0000f788 l       .debug_str	00000000 
0000f78e l       .debug_str	00000000 
0000f797 l       .debug_str	00000000 
000569dc l       .debug_str	00000000 
00010a3e l       .debug_str	00000000 
0000f7a1 l       .debug_str	00000000 
0000f7d1 l       .debug_str	00000000 
0000c9da l       .debug_str	00000000 
0005821a l       .debug_str	00000000 
00026436 l       .debug_str	00000000 
0000cb5f l       .debug_str	00000000 
0000f8a5 l       .debug_str	00000000 
0000f8d5 l       .debug_str	00000000 
0000f8f8 l       .debug_str	00000000 
0000f925 l       .debug_str	00000000 
0000f946 l       .debug_str	00000000 
0000fa4d l       .debug_str	00000000 
00007b68 l       .debug_str	00000000 
00007bb8 l       .debug_str	00000000 
00007c15 l       .debug_str	00000000 
0000fb27 l       .debug_str	00000000 
0000fb9e l       .debug_str	00000000 
0000fc22 l       .debug_str	00000000 
0000fc9d l       .debug_str	00000000 
0000fd3b l       .debug_str	00000000 
0000fde6 l       .debug_str	00000000 
0000fe88 l       .debug_str	00000000 
0000ff5c l       .debug_str	00000000 
0001004d l       .debug_str	00000000 
0001013d l       .debug_str	00000000 
00010af8 l       .debug_str	00000000 
00010225 l       .debug_str	00000000 
00010255 l       .debug_str	00000000 
00002ff7 l       .debug_str	00000000 
00010bd7 l       .debug_str	00000000 
0001033e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 49htiubyezwzqodr
00053f3b l       .debug_str	00000000 
00010edd l       .debug_str	00000000 
00010f0e l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
0001a869 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
00010f17 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
00033153 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000351d l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
0000c893 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n9jsiq8blzioqfk
000113df l       .debug_str	00000000 
00011323 l       .debug_str	00000000 
00011340 l       .debug_str	00000000 
00011349 l       .debug_str	00000000 
0001138f l       .debug_str	00000000 
00011398 l       .debug_str	00000000 
00011625 l       .debug_str	00000000 
00011428 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0001238c l       .debug_str	00000000 
000054f3 l       .debug_str	00000000 
00011434 l       .debug_str	00000000 
000114b0 l       .debug_str	00000000 
0005677f l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
000114db l       .debug_str	00000000 
000114ec l       .debug_str	00000000 
00011568 l       .debug_str	00000000 
0001159a l       .debug_str	00000000 
00011620 l       .debug_str	00000000 
0001162f l       .debug_str	00000000 
000116a0 l       .debug_str	00000000 
000116b7 l       .debug_str	00000000 
0001172b l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011735 l       .debug_str	00000000 
00011742 l       .debug_str	00000000 
000117b9 l       .debug_str	00000000 
000117d3 l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00053e08 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0000513d l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00010f69 l       .debug_str	00000000 
00010f92 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000b00f l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
00010f9f l       .debug_str	00000000 
0005aa72 l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
0001a869 l       .debug_str	00000000 
00010fac l       .debug_str	00000000 
00011026 l       .debug_str	00000000 
00010fbe l       .debug_str	00000000 
00011000 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00011014 l       .debug_str	00000000 
00058dcf l       .debug_str	00000000 
0000bc25 l       .debug_str	00000000 
0004465c l       .debug_str	00000000 
0000cd5d l       .debug_str	00000000 
0000c9da l       .debug_str	00000000 
0005821a l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00026436 l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
0000cb5f l       .debug_str	00000000 
00011030 l       .debug_str	00000000 
00011059 l       .debug_str	00000000 
0000cb4a l       .debug_str	00000000 
00011076 l       .debug_str	00000000 
0000cd44 l       .debug_str	00000000 
00011093 l       .debug_str	00000000 
000110ac l       .debug_str	00000000 
0001114d l       .debug_str	00000000 
000110d2 l       .debug_str	00000000 
00011117 l       .debug_str	00000000 
0001113b l       .debug_str	00000000 
0001116a l       .debug_str	00000000 
0000cac8 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
000022ec l       .debug_str	00000000 
0001119d l       .debug_str	00000000 
0000cb26 l       .debug_str	00000000 
000111d0 l       .debug_str	00000000 
000111e7 l       .debug_str	00000000 
0000cbc3 l       .debug_str	00000000 
0001121e l       .debug_str	00000000 
00011239 l       .debug_str	00000000 
0000cc47 l       .debug_str	00000000 
00002492 l       .debug_str	00000000 
00011270 l       .debug_str	00000000 
000112be l       .debug_str	00000000 
000241ed l       .debug_str	00000000 
000112ce l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z4uczzv8d994j8w
000012f5 l       .debug_str	00000000 
000118eb l       .debug_str	00000000 
0000c5ba l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
00054359 l       .debug_str	00000000 
0000bc25 l       .debug_str	00000000 
0005a97d l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000117f4 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000117fc l       .debug_str	00000000 
0000c49d l       .debug_str	00000000 
0000cd5d l       .debug_str	00000000 
0001184a l       .debug_str	00000000 
0000ccf7 l       .debug_str	00000000 
0001189a l       .debug_str	00000000 
0000c558 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 vnkfcw75uydipan
00011a4c l       .debug_str	00000000 
0000cb5f l       .debug_str	00000000 
0000cb4a l       .debug_str	00000000 
00011076 l       .debug_str	00000000 
0001193d l       .debug_str	00000000 
00011988 l       .debug_str	00000000 
0001199b l       .debug_str	00000000 
000119e6 l       .debug_str	00000000 
00011a09 l       .debug_str	00000000 
0000cd44 l       .debug_str	00000000 
00011a68 l       .debug_str	00000000 
00011428 l       .debug_str	00000000 
0000cd5d l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000b00f l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00010f9f l       .debug_str	00000000 
0000c9da l       .debug_str	00000000 
0005821a l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00026436 l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1vm1jsf9206jqt1a
00014fed l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bfd6 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011bbd l       .debug_str	00000000 
00011bc9 l       .debug_str	00000000 
00011c8a l       .debug_str	00000000 
00026c3d l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000ed6f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00011aab l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c665 l       .debug_str	00000000 
0000cd9a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000cda6 l       .debug_str	00000000 
0000cdaa l       .debug_str	00000000 
0000cdb2 l       .debug_str	00000000 
0000cdb8 l       .debug_str	00000000 
0000cdbe l       .debug_str	00000000 
0000cdc4 l       .debug_str	00000000 
0000cdcb l       .debug_str	00000000 
0000cdd1 l       .debug_str	00000000 
0000cdd7 l       .debug_str	00000000 
0000cdde l       .debug_str	00000000 
0000cde4 l       .debug_str	00000000 
0000cdec l       .debug_str	00000000 
0000cdf3 l       .debug_str	00000000 
0000cdf9 l       .debug_str	00000000 
0000cdff l       .debug_str	00000000 
0000ce05 l       .debug_str	00000000 
0000ce0b l       .debug_str	00000000 
0000ce11 l       .debug_str	00000000 
0000ce18 l       .debug_str	00000000 
0000ce1f l       .debug_str	00000000 
0000ce27 l       .debug_str	00000000 
0000ce2f l       .debug_str	00000000 
0000ce37 l       .debug_str	00000000 
0000ce3e l       .debug_str	00000000 
0000ce46 l       .debug_str	00000000 
0000ce4d l       .debug_str	00000000 
0000ce54 l       .debug_str	00000000 
0000ce5b l       .debug_str	00000000 
0000ce62 l       .debug_str	00000000 
0000ce69 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
0000ce76 l       .debug_str	00000000 
0000ce7c l       .debug_str	00000000 
0000ce82 l       .debug_str	00000000 
0000ce88 l       .debug_str	00000000 
0000ce8f l       .debug_str	00000000 
0000ce97 l       .debug_str	00000000 
0000ed89 l       .debug_str	00000000 
00011acf l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00011af5 l       .debug_str	00000000 
00011bb6 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3on1efjgx1q5grpf
00026c3d l       .debug_str	00000000 
00011c8a l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000eb57 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00011aab l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c665 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000cd66 l       .debug_str	00000000 
0000cd6f l       .debug_str	00000000 
0000cd79 l       .debug_str	00000000 
0000cd89 l       .debug_str	00000000 
0000eb64 l       .debug_str	00000000 
00011c91 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00011cb7 l       .debug_str	00000000 
00011bb6 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bfd6 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011bbd l       .debug_str	00000000 
00011d5e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dxw5xp80tje79rx
000012f5 l       .debug_str	00000000 
00011e55 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00011aab l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bfd6 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011bbd l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
0000c665 l       .debug_str	00000000 
0000cd9a l       .debug_str	00000000 
00011acf l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00011c8a l       .debug_str	00000000 
00013302 l       .debug_str	00000000 
00058ec5 l       .debug_str	00000000 
00011e05 l       .debug_str	00000000 
00011e3e l       .debug_str	00000000 
00026c3d l       .debug_str	00000000 
00011c91 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2y6wwi1wx5h1fq
00003b4f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00011aab l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c665 l       .debug_str	00000000 
0000cd9a l       .debug_str	00000000 
00011acf l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0000bfd6 l       .debug_str	00000000 
00011c8a l       .debug_str	00000000 
00011e8e l       .debug_str	00000000 
00011f6d l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
00013302 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1ai0eloc31rxz52x
00011fee l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00011f79 l       .debug_str	00000000 
0002d43c l       .debug_str	00000000 
0000ee2f l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
00011fdc l       .debug_str	00000000 
00011fd0 l       .debug_str	00000000 
00021014 l       .debug_str	00000000 
00011fe3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1v17h907p30pylh6
00000d77 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00021161 l       .debug_str	00000000 
00021155 l       .debug_str	00000000 
000597a0 l       .debug_str	00000000 
00056c5b l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00058c44 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00053689 l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
000034f3 l       .debug_str	00000000 
00059a7f l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
00006f4a l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
000011ff l       .debug_str	00000000 
00057dab l       .debug_str	00000000 
0001425f l       .debug_str	00000000 
0001238c l       .debug_str	00000000 
0005677f l       .debug_str	00000000 
0005aa72 l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00017e9a l       .debug_str	00000000 
0005a97d l       .debug_str	00000000 
00002ff5 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
00012392 l       .debug_str	00000000 
000123b9 l       .debug_str	00000000 
000123c1 l       .debug_str	00000000 
000123c8 l       .debug_str	00000000 
000123ce l       .debug_str	00000000 
000123d5 l       .debug_str	00000000 
00056795 l       .debug_str	00000000 
000123db l       .debug_str	00000000 
000123ea l       .debug_str	00000000 
000051e3 l       .debug_str	00000000 
000123f8 l       .debug_str	00000000 
000123fd l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000564a8 l       .debug_str	00000000 
00012239 l       .debug_str	00000000 
00011ff9 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000c5eb l       .debug_str	00000000 
00054196 l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
0002422e l       .debug_str	00000000 
00012005 l       .debug_str	00000000 
0001203c l       .debug_str	00000000 
0000ebe8 l       .debug_str	00000000 
00012048 l       .debug_str	00000000 
0001207f l       .debug_str	00000000 
0001208a l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
00012092 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00012099 l       .debug_str	00000000 
000120a0 l       .debug_str	00000000 
00059b1d l       .debug_str	00000000 
000120a9 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00054359 l       .debug_str	00000000 
000120b3 l       .debug_str	00000000 
000123aa l       .debug_str	00000000 
000120bd l       .debug_str	00000000 
0001bcd6 l       .debug_str	00000000 
000120f3 l       .debug_str	00000000 
00012121 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003bd87 l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
00056fce l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
0001212d l       .debug_str	00000000 
00012164 l       .debug_str	00000000 
00054376 l       .debug_str	00000000 
00059651 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
000598ca l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0001216d l       .debug_str	00000000 
00012181 l       .debug_str	00000000 
000121b4 l       .debug_str	00000000 
000121bf l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00002082 l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
00033153 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000121f5 l       .debug_str	00000000 
00012233 l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00037d9d l       .debug_str	00000000 
00004daf l       .debug_str	00000000 
00012246 l       .debug_str	00000000 
00012289 l       .debug_str	00000000 
000122a1 l       .debug_str	00000000 
000122e1 l       .debug_str	00000000 
000122f6 l       .debug_str	00000000 
00012330 l       .debug_str	00000000 
0001233f l       .debug_str	00000000 
0001237e l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000545d2 l       .debug_str	00000000 
00002fb3 l       .debug_str	00000000 
0001a85f l       .debug_str	00000000 
00002fbc l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
0000bfc2 l       .debug_str	00000000 
00002fe7 l       .debug_str	00000000 
00002fec l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00032c69 l       .debug_str	00000000 
00056352 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
0000351d l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c893 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00053fc4 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
20000214 l     O .bss	00000001 _ZN3app12touch_sensor10I2C_BUFFER17h8c3d62e53c42ce39E
20000168 l     O .bss	00000052 _ZN3app12touch_sensor10TOUCH_DATA17h1dd6b74134f2575dE
20000168 l     O .bss	00000000 _ZN3app12touch_sensor11TOUCH_DELAY17h6bb1c96a489889baE
200001fc l     O .bss	00000010 _ZN3app12touch_sensor11TOUCH_EVENT17hb169e5084280c5b1E
20000164 l     O .bss	00000004 _ZN3app12touch_sensor11TOUCH_RESET17h950734ac5f86de57E
0000b3c4 l     F .text	00000752 _ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E
0000bb16 l     F .text	0000019a _ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E
0000b28a l     F .text	0000013a _ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E
0000b23e l     F .text	0000004c _ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE
200001ba l     O .bss	0000003f _ZN3app12touch_sensor3BUF17h9edf4dcfe692b5b1E
2000020c l     O .bss	00000008 _ZN3app12touch_sensor8I2C_DATA17hb66b2debc1d16188E
0001be30 l     O .text	00000021 str.0
0001be70 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 1yoikry7qn8ql4zf
000024e7 l       .debug_str	00000000 
000022ec l       .debug_str	00000000 
00012994 l       .debug_str	00000000 
00012a16 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00012ad5 l       .debug_str	00000000 
00002b98 l       .debug_str	00000000 
00021014 l       .debug_str	00000000 
0001425f l       .debug_str	00000000 
0000513d l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000b00f l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00010f9f l       .debug_str	00000000 
0005aa72 l       .debug_str	00000000 
0001a869 l       .debug_str	00000000 
00010fac l       .debug_str	00000000 
00011026 l       .debug_str	00000000 
0005a97d l       .debug_str	00000000 
00002ff5 l       .debug_str	00000000 
00012bbf l       .debug_str	00000000 
00012bc4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000598ca l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00001342 l       .debug_str	00000000 
0000135f l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
000013ad l       .debug_str	00000000 
000013be l       .debug_str	00000000 
0000142e l       .debug_str	00000000 
000014c8 l       .debug_str	00000000 
000014d0 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000014d5 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0002f0c2 l       .debug_str	00000000 
000014df l       .debug_str	00000000 
000014e2 l       .debug_str	00000000 
0000150b l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
00001541 l       .debug_str	00000000 
0000156e l       .debug_str	00000000 
000015be l       .debug_str	00000000 
0000161b l       .debug_str	00000000 
0000166f l       .debug_str	00000000 
00001672 l       .debug_str	00000000 
000016e9 l       .debug_str	00000000 
0000176d l       .debug_str	00000000 
000017e8 l       .debug_str	00000000 
00001886 l       .debug_str	00000000 
00001931 l       .debug_str	00000000 
000019d3 l       .debug_str	00000000 
00001a97 l       .debug_str	00000000 
00001b78 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
00012ae7 l       .debug_str	00000000 
00012401 l       .debug_str	00000000 
00012457 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0001252f l       .debug_str	00000000 
000125b6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00002492 l       .debug_str	00000000 
00012679 l       .debug_str	00000000 
00012702 l       .debug_str	00000000 
000127c7 l       .debug_str	00000000 
00012853 l       .debug_str	00000000 
000128d5 l       .debug_str	00000000 
0001c160 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 25jm3tkgfnhczjfh
00013206 l       .debug_str	00000000 
0002e20e l       .debug_str	00000000 
00029658 l       .debug_str	00000000 
0000c68a l       .debug_str	00000000 
00029581 l       .debug_str	00000000 
000545d2 l       .debug_str	00000000 
0005979f l       .debug_str	00000000 
000131fd l       .debug_str	00000000 
00005a9a l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000148b9 l       .debug_str	00000000 
00013209 l       .debug_str	00000000 
000463ff l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00054e11 l       .debug_str	00000000 
0005972a l       .debug_str	00000000 
00026c3d l       .debug_str	00000000 
0001320c l       .debug_str	00000000 
00054376 l       .debug_str	00000000 
00013225 l       .debug_str	00000000 
00014224 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00013214 l       .debug_str	00000000 
00037072 l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
00011fe1 l       .debug_str	00000000 
0001322e l       .debug_str	00000000 
0001323b l       .debug_str	00000000 
00013234 l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7ec l       .debug_str	00000000 
000598ca l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00001342 l       .debug_str	00000000 
0000135f l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
000013ad l       .debug_str	00000000 
000013be l       .debug_str	00000000 
0000142e l       .debug_str	00000000 
000014c8 l       .debug_str	00000000 
000014d0 l       .debug_str	00000000 
000014d5 l       .debug_str	00000000 
0002f0c2 l       .debug_str	00000000 
000014df l       .debug_str	00000000 
000014e2 l       .debug_str	00000000 
0000150b l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
00001541 l       .debug_str	00000000 
0000156e l       .debug_str	00000000 
000015be l       .debug_str	00000000 
0000161b l       .debug_str	00000000 
0000166f l       .debug_str	00000000 
00001672 l       .debug_str	00000000 
000016e9 l       .debug_str	00000000 
0000176d l       .debug_str	00000000 
000017e8 l       .debug_str	00000000 
00001886 l       .debug_str	00000000 
00001931 l       .debug_str	00000000 
000019d3 l       .debug_str	00000000 
00001a97 l       .debug_str	00000000 
00001b78 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
00012ae7 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0000293e l       .debug_str	00000000 
00013246 l       .debug_str	00000000 
0001324f l       .debug_str	00000000 
0003ffad l       .debug_str	00000000 
00003b4e l       .debug_str	00000000 
00003b54 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000564a8 l       .debug_str	00000000 
00013200 l       .debug_str	00000000 
00012caa l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003bd87 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00058c44 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00053689 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
000034f3 l       .debug_str	00000000 
00059a7f l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
00006f4a l       .debug_str	00000000 
00012cb5 l       .debug_str	00000000 
00012ce3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00012cf4 l       .debug_str	00000000 
00012d28 l       .debug_str	00000000 
00012d36 l       .debug_str	00000000 
00012d67 l       .debug_str	00000000 
00012d70 l       .debug_str	00000000 
00012d9b l       .debug_str	00000000 
00012da5 l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00002082 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00012dd1 l       .debug_str	00000000 
00012dfc l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00037d9d l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00004daf l       .debug_str	00000000 
00012e05 l       .debug_str	00000000 
00023cad l       .debug_str	00000000 
00012e31 l       .debug_str	00000000 
00054055 l       .debug_str	00000000 
00012e8b l       .debug_str	00000000 
00037073 l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
00012ee4 l       .debug_str	00000000 
00012f42 l       .debug_str	00000000 
00012f4b l       .debug_str	00000000 
00012fa9 l       .debug_str	00000000 
00012fb2 l       .debug_str	00000000 
00013015 l       .debug_str	00000000 
00013022 l       .debug_str	00000000 
00013081 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0001308b l       .debug_str	00000000 
0001309a l       .debug_str	00000000 
000130f5 l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
000130fb l       .debug_str	00000000 
00013155 l       .debug_str	00000000 
0001315a l       .debug_str	00000000 
00055318 l       .debug_str	00000000 
000131b5 l       .debug_str	00000000 
000131e5 l       .debug_str	00000000 
000131f2 l       .debug_str	00000000 
0000c5cc l       .debug_str	00000000 
0000f676 l       .debug_str	00000000 
0000f681 l       .debug_str	00000000 
0000f68b l       .debug_str	00000000 
0000ecc0 l       .debug_str	00000000 
0000c84d l       .debug_str	00000000 
0001a8d8 l       .debug_str	00000000 
0000f694 l       .debug_str	00000000 
0000c85c l       .debug_str	00000000 
0000c862 l       .debug_str	00000000 
0000c86d l       .debug_str	00000000 
0000c878 l       .debug_str	00000000 
0001a923 l       .debug_str	00000000 
00026c58 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
0000c88c l       .debug_str	00000000 
20000218 l     O .bss	00000050 _ZN3app5chip810CHIP8_TASK17hdc3e015a60662be5E
20006268 l     O .bss	00000800 _ZN3app5chip813SCREEN_BUFFER17hf6360141ad32453fE
20000268 l     O .bss	00006000 _ZN3app5chip816CHIP8_TASK_STACK17hb31f2a0cca07481dE
0001c718 l     O .text	00000018 _ZN3app5chip88PIXEL_ON17hd77974d73295a467E
0001c730 l     O .text	00000018 _ZN3app5chip89PIXEL_OFF17h40a5f2316b800b23E
0000bf78 l     F .text	00000084 _ZN3app5chip89task_func17h385831a0096277b5E
0001c790 l     O .text	00000021 str.0
0001c7d0 l     O .text	0000001c str.1
0001c870 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 2c6bdy6rt6z3zh1y
00013458 l       .debug_str	00000000 
0000b09b l       .debug_str	00000000 
00037d9d l       .debug_str	00000000 
0001341d l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000134c1 l       .debug_str	00000000 
0001352c l       .debug_str	00000000 
00013568 l       .debug_str	00000000 
000135b5 l       .debug_str	00000000 
000135f1 l       .debug_str	00000000 
000135ff l       .debug_str	00000000 
0001366a l       .debug_str	00000000 
00013685 l       .debug_str	00000000 
000136f1 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
000545d2 l       .debug_str	00000000 
00005a9a l       .debug_str	00000000 
00013748 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
0001425f l       .debug_str	00000000 
00013258 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0001238c l       .debug_str	00000000 
0005677f l       .debug_str	00000000 
0005aa72 l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00017e9a l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
000131fd l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0000559e l       .debug_str	00000000 
00011f6d l       .debug_str	00000000 
00013302 l       .debug_str	00000000 
000241ed l       .debug_str	00000000 
00058ec5 l       .debug_str	00000000 
0001327c l       .debug_str	00000000 
00013261 l       .debug_str	00000000 
000132ab l       .debug_str	00000000 
0001375b l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000210c9 l       .debug_str	00000000 
00002bf7 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00017d75 l       .debug_str	00000000 
000132fd l       .debug_str	00000000 
0001330c l       .debug_str	00000000 
00013345 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0001308b l       .debug_str	00000000 
000133a4 l       .debug_str	00000000 
000133dd l       .debug_str	00000000 
00013406 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xbkmlpi4vyn2qbv
00001a97 l       .debug_str	00000000 
000137a8 l       .debug_str	00000000 
000137f4 l       .debug_str	00000000 
0000ebc0 l       .debug_str	00000000 
0003a4c4 l       .debug_str	00000000 
0001bafd l       .debug_str	00000000 
00037074 l       .debug_str	00000000 
00013234 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c5c7 l       .debug_str	00000000 
00018080 l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7ec l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000598ca l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00001342 l       .debug_str	00000000 
0000135f l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
000013ad l       .debug_str	00000000 
000013be l       .debug_str	00000000 
0000142e l       .debug_str	00000000 
000014c8 l       .debug_str	00000000 
000014d0 l       .debug_str	00000000 
000014d5 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0002f0c2 l       .debug_str	00000000 
000014df l       .debug_str	00000000 
000014e2 l       .debug_str	00000000 
0000150b l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
00001541 l       .debug_str	00000000 
0000156e l       .debug_str	00000000 
000015be l       .debug_str	00000000 
0000161b l       .debug_str	00000000 
0000166f l       .debug_str	00000000 
00001672 l       .debug_str	00000000 
000016e9 l       .debug_str	00000000 
0000176d l       .debug_str	00000000 
000017e8 l       .debug_str	00000000 
00001886 l       .debug_str	00000000 
00001931 l       .debug_str	00000000 
000019d3 l       .debug_str	00000000 
00001b78 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
00012ae7 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0000293e l       .debug_str	00000000 
0002e20e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 36ol61x1a5do2305
000542dc l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000eb70 l       .debug_str	00000000 
0000ebc0 l       .debug_str	00000000 
0003a4c4 l       .debug_str	00000000 
0001bafd l       .debug_str	00000000 
00037074 l       .debug_str	00000000 
000545d2 l       .debug_str	00000000 
00013234 l       .debug_str	00000000 
0001425f l       .debug_str	00000000 
00002ff7 l       .debug_str	00000000 
00002ad8 l       .debug_str	00000000 
0005a97d l       .debug_str	00000000 
00002ff5 l       .debug_str	00000000 
0000c886 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c665 l       .debug_str	00000000 
00056d63 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000c5eb l       .debug_str	00000000 
0000c670 l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
0000497d l       .debug_str	00000000 
000241eb l       .debug_str	00000000 
0000c678 l       .debug_str	00000000 
00054196 l       .debug_str	00000000 
0002422e l       .debug_str	00000000 
00059c3e l       .debug_str	00000000 
0000c67c l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
0000c680 l       .debug_str	00000000 
00002ff2 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
0005907a l       .debug_str	00000000 
0000c689 l       .debug_str	00000000 
000586d2 l       .debug_str	00000000 
0000eb81 l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7ec l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000598ca l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00001342 l       .debug_str	00000000 
0000135f l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
000013ad l       .debug_str	00000000 
000013be l       .debug_str	00000000 
0000142e l       .debug_str	00000000 
000014c8 l       .debug_str	00000000 
000014d0 l       .debug_str	00000000 
000014d5 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0002f0c2 l       .debug_str	00000000 
000014df l       .debug_str	00000000 
000014e2 l       .debug_str	00000000 
0000150b l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
00001541 l       .debug_str	00000000 
0000156e l       .debug_str	00000000 
000015be l       .debug_str	00000000 
0000161b l       .debug_str	00000000 
0000166f l       .debug_str	00000000 
00001672 l       .debug_str	00000000 
000016e9 l       .debug_str	00000000 
0000176d l       .debug_str	00000000 
000017e8 l       .debug_str	00000000 
00001886 l       .debug_str	00000000 
00001931 l       .debug_str	00000000 
000019d3 l       .debug_str	00000000 
00001a97 l       .debug_str	00000000 
00001b78 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00012ae7 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0000293e l       .debug_str	00000000 
0002e20e l       .debug_str	00000000 
000138d2 l       .debug_str	00000000 
00013920 l       .debug_str	00000000 
00013a2b l       .debug_str	00000000 
00013a7b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4vqyywb7xxbk2fnk
0001406e l       .debug_str	00000000 
0001375b l       .debug_str	00000000 
00014251 l       .debug_str	00000000 
0003d30a l       .debug_str	00000000 
00014249 l       .debug_str	00000000 
00003c22 l       .debug_str	00000000 
00014245 l       .debug_str	00000000 
00014240 l       .debug_str	00000000 
000239c0 l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000557f7 l       .debug_str	00000000 
00014215 l       .debug_str	00000000 
0005aa72 l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00017e9a l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
000241ed l       .debug_str	00000000 
0001327c l       .debug_str	00000000 
00013c78 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0001308b l       .debug_str	00000000 
00013d04 l       .debug_str	00000000 
00013d39 l       .debug_str	00000000 
00013d53 l       .debug_str	00000000 
00013d88 l       .debug_str	00000000 
00013da2 l       .debug_str	00000000 
00013dd7 l       .debug_str	00000000 
00013df1 l       .debug_str	00000000 
00013e27 l       .debug_str	00000000 
00013e42 l       .debug_str	00000000 
00013e96 l       .debug_str	00000000 
00013eb8 l       .debug_str	00000000 
00013f2a l       .debug_str	00000000 
00013f60 l       .debug_str	00000000 
00013f7b l       .debug_str	00000000 
00013fb1 l       .debug_str	00000000 
00053fc4 l       .debug_str	00000000 
000132fd l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000141f6 l       .debug_str	00000000 
00013fcc l       .debug_str	00000000 
000141bc l       .debug_str	00000000 
0001419e l       .debug_str	00000000 
00014165 l       .debug_str	00000000 
00014002 l       .debug_str	00000000 
00014149 l       .debug_str	00000000 
00014112 l       .debug_str	00000000 
0001401d l       .debug_str	00000000 
000140f6 l       .debug_str	00000000 
000140bf l       .debug_str	00000000 
000140a4 l       .debug_str	00000000 
00014053 l       .debug_str	00000000 
00014f39 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00002b98 l       .debug_str	00000000 
00014283 l       .debug_str	00000000 
000545b3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000532af l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00013b88 l       .debug_str	00000000 
0001799d l       .debug_str	00000000 
00013b8c l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0002db7b l       .debug_str	00000000 
00013b91 l       .debug_str	00000000 
000212ab l       .debug_str	00000000 
00021100 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0002cb8e l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
000131fd l       .debug_str	00000000 
00005a9a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
00013206 l       .debug_str	00000000 
000148b9 l       .debug_str	00000000 
00013209 l       .debug_str	00000000 
000463ff l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00054e11 l       .debug_str	00000000 
0005972a l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001427d l       .debug_str	00000000 
00014277 l       .debug_str	00000000 
00014271 l       .debug_str	00000000 
0001426b l       .debug_str	00000000 
00004056 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00056795 l       .debug_str	00000000 
00002ff5 l       .debug_str	00000000 
0005a97d l       .debug_str	00000000 
00003d07 l       .debug_str	00000000 
00002fe7 l       .debug_str	00000000 
0001a869 l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
00014268 l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00026c3d l       .debug_str	00000000 
0001320c l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
00054376 l       .debug_str	00000000 
000564a8 l       .debug_str	00000000 
00013200 l       .debug_str	00000000 
00013225 l       .debug_str	00000000 
00014224 l       .debug_str	00000000 
00053e37 l       .debug_str	00000000 
00013b97 l       .debug_str	00000000 
00013bbd l       .debug_str	00000000 
0000559e l       .debug_str	00000000 
00011f6d l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00013bc7 l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
00017d75 l       .debug_str	00000000 
00013302 l       .debug_str	00000000 
00058ec5 l       .debug_str	00000000 
00013bcf l       .debug_str	00000000 
00013c5b l       .debug_str	00000000 
0001425f l       .debug_str	00000000 
00013258 l       .debug_str	00000000 
0001238c l       .debug_str	00000000 
0005677f l       .debug_str	00000000 
00014264 l       .debug_str	00000000 
00054f49 l       .debug_str	00000000 
00014714 l       .debug_str	00000000 
00014786 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
0001425b l       .debug_str	00000000 
0001ca80 l     O .text	0000001c str.0
0001cd00 l     O .text	00000021 str.1
0001cfe0 l     O .text	00000039 str.2
0001d040 l     O .text	00000021 str.3
0001d080 l     O .text	00000023 str.4
00000000 l    df *ABS*	00000000 53nui5ao3x14l5p9
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00014287 l       .debug_str	00000000 
0002cb8e l       .debug_str	00000000 
0001a869 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0001428d l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5amxpeuxwufgc2g7
000144a0 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0001308b l       .debug_str	00000000 
00013406 l       .debug_str	00000000 
0001440c l       .debug_str	00000000 
000144e9 l       .debug_str	00000000 
00014533 l       .debug_str	00000000 
00014586 l       .debug_str	00000000 
00014615 l       .debug_str	00000000 
00014678 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000146f0 l       .debug_str	00000000 
00014762 l       .debug_str	00000000 
00014820 l       .debug_str	00000000 
000545d2 l       .debug_str	00000000 
0000b09b l       .debug_str	00000000 
00013261 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0001425f l       .debug_str	00000000 
00013258 l       .debug_str	00000000 
00014249 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0003d30a l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0001238c l       .debug_str	00000000 
0005677f l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
0005aa72 l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00017e9a l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
000131fd l       .debug_str	00000000 
0000559e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00017d75 l       .debug_str	00000000 
00013302 l       .debug_str	00000000 
000241ed l       .debug_str	00000000 
00058ec5 l       .debug_str	00000000 
0001327c l       .debug_str	00000000 
00014251 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00011f6d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001375b l       .debug_str	00000000 
0001425b l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00014786 l       .debug_str	00000000 
00014714 l       .debug_str	00000000 
0000456e l       .debug_str	00000000 
00005143 l       .debug_str	00000000 
000142f2 l       .debug_str	00000000 
0001437c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5eukf9ymd90dvsi0
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00014824 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0001487d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
0001482c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5fcitodfeuns782f
000148fc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0001488a l       .debug_str	00000000 
0001488f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00014896 l       .debug_str	00000000 
0001489e l       .debug_str	00000000 
0000c5fe l       .debug_str	00000000 
000148a6 l       .debug_str	00000000 
000148ae l       .debug_str	00000000 
000148b5 l       .debug_str	00000000 
00018275 l       .debug_str	00000000 
00005a9a l       .debug_str	00000000 
000148bc l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00021198 l       .debug_str	00000000 
00014911 l       .debug_str	00000000 
000148c1 l       .debug_str	00000000 
0002d522 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 tdisvxegs4w5usn
00014a26 l       .debug_str	00000000 
0001425b l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00014786 l       .debug_str	00000000 
00014714 l       .debug_str	00000000 
000149b7 l       .debug_str	00000000 
000149f8 l       .debug_str	00000000 
00014a67 l       .debug_str	00000000 
00014aca l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
00014b1a l       .debug_str	00000000 
00014b9a l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0001308b l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
00014c8e l       .debug_str	00000000 
00013406 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00013261 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0001425f l       .debug_str	00000000 
0000456e l       .debug_str	00000000 
0001491d l       .debug_str	00000000 
0002fd82 l       .debug_str	00000000 
00013258 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0001238c l       .debug_str	00000000 
0005677f l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
0005aa72 l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00017e9a l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
000131fd l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0000559e l       .debug_str	00000000 
00011f6d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00013302 l       .debug_str	00000000 
000241ed l       .debug_str	00000000 
00058ec5 l       .debug_str	00000000 
0001327c l       .debug_str	00000000 
00017d75 l       .debug_str	00000000 
00005143 l       .debug_str	00000000 
0000cec1 l       .debug_str	00000000 
00014926 l       .debug_str	00000000 
00014969 l       .debug_str	00000000 
00014249 l       .debug_str	00000000 
0003d30a l       .debug_str	00000000 
00014251 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001375b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 u3mfxzl87iwp64s
00014d6a l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
00017d75 l       .debug_str	00000000 
00014da9 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0001308b l       .debug_str	00000000 
00014e1c l       .debug_str	00000000 
00014e5b l       .debug_str	00000000 
00014f39 l       .debug_str	00000000 
00014e98 l       .debug_str	00000000 
00014efb l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00014f22 l       .debug_str	00000000 
00053e37 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0001425f l       .debug_str	00000000 
0001238c l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0000456e l       .debug_str	00000000 
0001491d l       .debug_str	00000000 
0002fd82 l       .debug_str	00000000 
00005143 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
00014ccc l       .debug_str	00000000 
00014d61 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ee4e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005677f l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
0005aa72 l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00017e9a l       .debug_str	00000000 
0000cec1 l       .debug_str	00000000 
00013258 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
000131fd l       .debug_str	00000000 
0000559e l       .debug_str	00000000 
00011f6d l       .debug_str	00000000 
00013302 l       .debug_str	00000000 
000241ed l       .debug_str	00000000 
00058ec5 l       .debug_str	00000000 
0001327c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.8j8txwjh-cgu.0
00016589 l       .debug_str	00000000 
0001557a l       .debug_str	00000000 
000155a4 l       .debug_str	00000000 
000155f2 l       .debug_str	00000000 
000155fa l       .debug_str	00000000 
0000c39b l       .debug_str	00000000 
00015647 l       .debug_str	00000000 
000156a1 l       .debug_str	00000000 
000156af l       .debug_str	00000000 
00015702 l       .debug_str	00000000 
0001570a l       .debug_str	00000000 
0001575f l       .debug_str	00000000 
00015769 l       .debug_str	00000000 
000157a7 l       .debug_str	00000000 
000157c2 l       .debug_str	00000000 
00015821 l       .debug_str	00000000 
00014821 l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
00015886 l       .debug_str	00000000 
000158b7 l       .debug_str	00000000 
000158c2 l       .debug_str	00000000 
0000320d l       .debug_str	00000000 
000158f4 l       .debug_str	00000000 
00015922 l       .debug_str	00000000 
00015934 l       .debug_str	00000000 
0001595a l       .debug_str	00000000 
00015966 l       .debug_str	00000000 
0000c2db l       .debug_str	00000000 
000159ad l       .debug_str	00000000 
0000c330 l       .debug_str	00000000 
0000c3fa l       .debug_str	00000000 
000159f8 l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
000159fe l       .debug_str	00000000 
00015a8a l       .debug_str	00000000 
00015aa5 l       .debug_str	00000000 
00015ad5 l       .debug_str	00000000 
00015b0a l       .debug_str	00000000 
00015b3a l       .debug_str	00000000 
00015b50 l       .debug_str	00000000 
00015b86 l       .debug_str	00000000 
00015ba1 l       .debug_str	00000000 
00015bdb l       .debug_str	00000000 
00015bfa l       .debug_str	00000000 
00015c36 l       .debug_str	00000000 
00015c5c l       .debug_str	00000000 
00015c68 l       .debug_str	00000000 
00015c8f l       .debug_str	00000000 
00015c9c l       .debug_str	00000000 
00015ea9 l       .debug_str	00000000 
00015cea l       .debug_str	00000000 
00015f19 l       .debug_str	00000000 
00015d3b l       .debug_str	00000000 
00015d8d l       .debug_str	00000000 
00015d99 l       .debug_str	00000000 
00015de4 l       .debug_str	00000000 
00015df6 l       .debug_str	00000000 
00015e39 l       .debug_str	00000000 
00015e44 l       .debug_str	00000000 
00015ea0 l       .debug_str	00000000 
00015eb1 l       .debug_str	00000000 
00015f10 l       .debug_str	00000000 
00015f24 l       .debug_str	00000000 
00015f7a l       .debug_str	00000000 
0001600f l       .debug_str	00000000 
0001601b l       .debug_str	00000000 
000160b5 l       .debug_str	00000000 
000160c6 l       .debug_str	00000000 
000160eb l       .debug_str	00000000 
00016194 l       .debug_str	00000000 
0000cec1 l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
000161a5 l       .debug_str	00000000 
0001622d l       .debug_str	00000000 
000161e4 l       .debug_str	00000000 
00016228 l       .debug_str	00000000 
00016272 l       .debug_str	00000000 
000162b3 l       .debug_str	00000000 
000162d8 l       .debug_str	00000000 
00016329 l       .debug_str	00000000 
0001636e l       .debug_str	00000000 
000163c1 l       .debug_str	00000000 
00016422 l       .debug_str	00000000 
00016489 l       .debug_str	00000000 
0000b006 l       .debug_str	00000000 
000164d0 l       .debug_str	00000000 
0001651b l       .debug_str	00000000 
00016528 l       .debug_str	00000000 
00016602 l       .debug_str	00000000 
000165fa l       .debug_str	00000000 
0001660a l       .debug_str	00000000 
000054c2 l       .debug_str	00000000 
00016626 l       .debug_str	00000000 
0001669b l       .debug_str	00000000 
000166c6 l       .debug_str	00000000 
0001673f l       .debug_str	00000000 
00016749 l       .debug_str	00000000 
0001676f l       .debug_str	00000000 
000167a8 l       .debug_str	00000000 
000132fd l       .debug_str	00000000 
000167c0 l       .debug_str	00000000 
000167f9 l       .debug_str	00000000 
00016831 l       .debug_str	00000000 
0000b09b l       .debug_str	00000000 
0001686a l       .debug_str	00000000 
000168a5 l       .debug_str	00000000 
000168e9 l       .debug_str	00000000 
0001692f l       .debug_str	00000000 
0001696b l       .debug_str	00000000 
00016993 l       .debug_str	00000000 
000169cf l       .debug_str	00000000 
000169f3 l       .debug_str	00000000 
00016a50 l       .debug_str	00000000 
00016a64 l       .debug_str	00000000 
00016ab5 l       .debug_str	00000000 
0001799d l       .debug_str	00000000 
00016ac1 l       .debug_str	00000000 
00016b12 l       .debug_str	00000000 
00016b29 l       .debug_str	00000000 
00016b7a l       .debug_str	00000000 
00016b98 l       .debug_str	00000000 
00016be9 l       .debug_str	00000000 
00016bfb l       .debug_str	00000000 
00016c53 l       .debug_str	00000000 
00016c69 l       .debug_str	00000000 
00016ccc l       .debug_str	00000000 
00016cf7 l       .debug_str	00000000 
00016d5a l       .debug_str	00000000 
00016dcf l       .debug_str	00000000 
00016e33 l       .debug_str	00000000 
00016e3d l       .debug_str	00000000 
00016ea8 l       .debug_str	00000000 
00016eb7 l       .debug_str	00000000 
00016f23 l       .debug_str	00000000 
00016f55 l       .debug_str	00000000 
00016f7b l       .debug_str	00000000 
00016fea l       .debug_str	00000000 
0001700a l       .debug_str	00000000 
0001707a l       .debug_str	00000000 
0001709b l       .debug_str	00000000 
00014d61 l       .debug_str	00000000 
0001710f l       .debug_str	00000000 
0001718f l       .debug_str	00000000 
000171d5 l       .debug_str	00000000 
000171fe l       .debug_str	00000000 
00017205 l       .debug_str	00000000 
0001723d l       .debug_str	00000000 
0001727c l       .debug_str	00000000 
00017283 l       .debug_str	00000000 
000172fc l       .debug_str	00000000 
00011f6d l       .debug_str	00000000 
00017393 l       .debug_str	00000000 
00017411 l       .debug_str	00000000 
0001741b l       .debug_str	00000000 
000174a9 l       .debug_str	00000000 
00017555 l       .debug_str	00000000 
0001759c l       .debug_str	00000000 
000175a9 l       .debug_str	00000000 
000175f6 l       .debug_str	00000000 
00017609 l       .debug_str	00000000 
0001765b l       .debug_str	00000000 
000176cb l       .debug_str	00000000 
000152bd l       .debug_str	00000000 
0001772b l       .debug_str	00000000 
0001773c l       .debug_str	00000000 
000177a1 l       .debug_str	00000000 
000177d1 l       .debug_str	00000000 
000177da l       .debug_str	00000000 
00017816 l       .debug_str	00000000 
0001782a l       .debug_str	00000000 
00017865 l       .debug_str	00000000 
000178ab l       .debug_str	00000000 
000178c9 l       .debug_str	00000000 
000178f9 l       .debug_str	00000000 
00017902 l       .debug_str	00000000 
0001793c l       .debug_str	00000000 
0001794e l       .debug_str	00000000 
0001797c l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00017983 l       .debug_str	00000000 
0001798f l       .debug_str	00000000 
00017999 l       .debug_str	00000000 
000179a3 l       .debug_str	00000000 
000179c6 l       .debug_str	00000000 
0002d43c l       .debug_str	00000000 
00017a1b l       .debug_str	00000000 
00017a7b l       .debug_str	00000000 
00017a87 l       .debug_str	00000000 
00017ad7 l       .debug_str	00000000 
00017b3a l       .debug_str	00000000 
00017ba1 l       .debug_str	00000000 
00017c10 l       .debug_str	00000000 
000545d2 l       .debug_str	00000000 
00014820 l       .debug_str	00000000 
00017ca0 l       .debug_str	00000000 
0005566f l       .debug_str	00000000 
00049bce l       .debug_str	00000000 
0000c5fe l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
00021014 l       .debug_str	00000000 
00053e37 l       .debug_str	00000000 
00017cc7 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00017cce l       .debug_str	00000000 
000545b3 l       .debug_str	00000000 
00017cdb l       .debug_str	00000000 
00054359 l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00017ce6 l       .debug_str	00000000 
0005a97d l       .debug_str	00000000 
00017d3a l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
0000c408 l       .debug_str	00000000 
00056340 l       .debug_str	00000000 
00004056 l       .debug_str	00000000 
00017d45 l       .debug_str	00000000 
00017d70 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00003b5b l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00017d7c l       .debug_str	00000000 
00017db6 l       .debug_str	00000000 
00017def l       .debug_str	00000000 
00017dfe l       .debug_str	00000000 
00017e41 l       .debug_str	00000000 
00055884 l       .debug_str	00000000 
0003220f l       .debug_str	00000000 
000572a9 l       .debug_str	00000000 
00017e83 l       .debug_str	00000000 
00017ea7 l       .debug_str	00000000 
00017416 l       .debug_str	00000000 
00053e08 l       .debug_str	00000000 
00005a9a l       .debug_str	00000000 
00017ec7 l       .debug_str	00000000 
0003ffad l       .debug_str	00000000 
00017f02 l       .debug_str	00000000 
00017f09 l       .debug_str	00000000 
00030ba9 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00017f4a l       .debug_str	00000000 
00017f91 l       .debug_str	00000000 
00002ff5 l       .debug_str	00000000 
000214f8 l       .debug_str	00000000 
00017f6b l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
00018572 l       .debug_str	00000000 
00017f8d l       .debug_str	00000000 
0000bb4c l       .debug_str	00000000 
0000bb60 l       .debug_str	00000000 
00017f95 l       .debug_str	00000000 
00017fa0 l       .debug_str	00000000 
00011fee l       .debug_str	00000000 
00017f99 l       .debug_str	00000000 
0000bb69 l       .debug_str	00000000 
0000bb74 l       .debug_str	00000000 
0000bb7f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00014f43 l       .debug_str	00000000 
00014f9b l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00014fe8 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00014ff2 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00014ffe l       .debug_str	00000000 
00017d56 l       .debug_str	00000000 
00017d4a l       .debug_str	00000000 
00017d75 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
00033153 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00057f3a l       .debug_str	00000000 
0002ef2e l       .debug_str	00000000 
0001500f l       .debug_str	00000000 
00015014 l       .debug_str	00000000 
0001501a l       .debug_str	00000000 
00018275 l       .debug_str	00000000 
0000513d l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0001425f l       .debug_str	00000000 
00013258 l       .debug_str	00000000 
00014249 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00015022 l       .debug_str	00000000 
0001238c l       .debug_str	00000000 
00015028 l       .debug_str	00000000 
0002cb8e l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000351d l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
0000c893 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00032c69 l       .debug_str	00000000 
00056352 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00053fc4 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00021161 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00058156 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00015033 l       .debug_str	00000000 
0001505c l       .debug_str	00000000 
0001506b l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
00015085 l       .debug_str	00000000 
00015089 l       .debug_str	00000000 
00017df8 l       .debug_str	00000000 
0001508d l       .debug_str	00000000 
000150b6 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
000150eb l       .debug_str	00000000 
000150ff l       .debug_str	00000000 
00015112 l       .debug_str	00000000 
0001515e l       .debug_str	00000000 
000117f4 l       .debug_str	00000000 
0000b00f l       .debug_str	00000000 
0002ef08 l       .debug_str	00000000 
0000c441 l       .debug_str	00000000 
0000456e l       .debug_str	00000000 
0001491d l       .debug_str	00000000 
0002fd82 l       .debug_str	00000000 
0005aa72 l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
0000ac36 l       .debug_str	00000000 
0000b018 l       .debug_str	00000000 
000152ad l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
00013302 l       .debug_str	00000000 
000241ed l       .debug_str	00000000 
00058ec5 l       .debug_str	00000000 
00017f24 l       .debug_str	00000000 
0003d30a l       .debug_str	00000000 
00014251 l       .debug_str	00000000 
0001516c l       .debug_str	00000000 
0005677f l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00017e9a l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
00016761 l       .debug_str	00000000 
00017eda l       .debug_str	00000000 
0001425b l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00017c34 l       .debug_str	00000000 
00017bc5 l       .debug_str	00000000 
00014287 l       .debug_str	00000000 
00015172 l       .debug_str	00000000 
0001519b l       .debug_str	00000000 
00002fdb l       .debug_str	00000000 
0001674a l       .debug_str	00000000 
000151a7 l       .debug_str	00000000 
00014824 l       .debug_str	00000000 
000151d4 l       .debug_str	00000000 
00037d9d l       .debug_str	00000000 
000151df l       .debug_str	00000000 
00005143 l       .debug_str	00000000 
00015208 l       .debug_str	00000000 
0001520f l       .debug_str	00000000 
00015239 l       .debug_str	00000000 
00022207 l       .debug_str	00000000 
0001523d l       .debug_str	00000000 
000239c0 l       .debug_str	00000000 
00015246 l       .debug_str	00000000 
00015288 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001529b l       .debug_str	00000000 
00058dcf l       .debug_str	00000000 
0000bc25 l       .debug_str	00000000 
0004465c l       .debug_str	00000000 
000152b6 l       .debug_str	00000000 
00002ff7 l       .debug_str	00000000 
000152c5 l       .debug_str	00000000 
000152cf l       .debug_str	00000000 
00017f77 l       .debug_str	00000000 
00017737 l       .debug_str	00000000 
000152d4 l       .debug_str	00000000 
0001535a l       .debug_str	00000000 
00015364 l       .debug_str	00000000 
000153f6 l       .debug_str	00000000 
0000ee4e l       .debug_str	00000000 
0001543c l       .debug_str	00000000 
000154d0 l       .debug_str	00000000 
00015532 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 embedded_graphics.94s3esdv-cgu.0
0001896a l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00058156 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00032c69 l       .debug_str	00000000 
00056352 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00053fc4 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00021161 l       .debug_str	00000000 
0000ee28 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000c5cc l       .debug_str	00000000 
0000ecc0 l       .debug_str	00000000 
0000c84d l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0001a8d8 l       .debug_str	00000000 
0000c83a l       .debug_str	00000000 
0000c89f l       .debug_str	00000000 
00018061 l       .debug_str	00000000 
0001806a l       .debug_str	00000000 
00018072 l       .debug_str	00000000 
0001807b l       .debug_str	00000000 
0002e20e l       .debug_str	00000000 
00018088 l       .debug_str	00000000 
00018098 l       .debug_str	00000000 
000180a9 l       .debug_str	00000000 
0000c86d l       .debug_str	00000000 
0000c878 l       .debug_str	00000000 
0001a923 l       .debug_str	00000000 
0000f676 l       .debug_str	00000000 
000180ba l       .debug_str	00000000 
0000eca0 l       .debug_str	00000000 
0000ecae l       .debug_str	00000000 
0001a989 l       .debug_str	00000000 
000180c3 l       .debug_str	00000000 
000180c9 l       .debug_str	00000000 
000180d4 l       .debug_str	00000000 
000180de l       .debug_str	00000000 
000180e8 l       .debug_str	00000000 
0000bc97 l       .debug_str	00000000 
00018130 l       .debug_str	00000000 
0000bd80 l       .debug_str	00000000 
00018178 l       .debug_str	00000000 
000181c0 l       .debug_str	00000000 
0000cec1 l       .debug_str	00000000 
000181c9 l       .debug_str	00000000 
000181f2 l       .debug_str	00000000 
000181fb l       .debug_str	00000000 
00018258 l       .debug_str	00000000 
00058ec5 l       .debug_str	00000000 
0001827e l       .debug_str	00000000 
000182a6 l       .debug_str	00000000 
000182d8 l       .debug_str	00000000 
000158b7 l       .debug_str	00000000 
00018309 l       .debug_str	00000000 
00018366 l       .debug_str	00000000 
000183c3 l       .debug_str	00000000 
00018420 l       .debug_str	00000000 
0000320d l       .debug_str	00000000 
00018452 l       .debug_str	00000000 
00018497 l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
000184a3 l       .debug_str	00000000 
000533cf l       .debug_str	00000000 
000184df l       .debug_str	00000000 
0000edd9 l       .debug_str	00000000 
00018523 l       .debug_str	00000000 
0001856a l       .debug_str	00000000 
00018578 l       .debug_str	00000000 
000185bf l       .debug_str	00000000 
000185cd l       .debug_str	00000000 
0001860d l       .debug_str	00000000 
00018615 l       .debug_str	00000000 
0000ee60 l       .debug_str	00000000 
00018622 l       .debug_str	00000000 
0001865d l       .debug_str	00000000 
0001869b l       .debug_str	00000000 
000186cb l       .debug_str	00000000 
000186df l       .debug_str	00000000 
0001870f l       .debug_str	00000000 
00018723 l       .debug_str	00000000 
00018753 l       .debug_str	00000000 
00018767 l       .debug_str	00000000 
0003908d l       .debug_str	00000000 
000187b2 l       .debug_str	00000000 
00018809 l       .debug_str	00000000 
00018818 l       .debug_str	00000000 
00018863 l       .debug_str	00000000 
0000c2e3 l       .debug_str	00000000 
000188da l       .debug_str	00000000 
0001895f l       .debug_str	00000000 
0000c39b l       .debug_str	00000000 
000189e1 l       .debug_str	00000000 
00018a66 l       .debug_str	00000000 
00018a71 l       .debug_str	00000000 
00053e08 l       .debug_str	00000000 
00018afa l       .debug_str	00000000 
00021966 l       .debug_str	00000000 
00018b71 l       .debug_str	00000000 
000557f6 l       .debug_str	00000000 
00018c06 l       .debug_str	00000000 
00018c9d l       .debug_str	00000000 
00018d38 l       .debug_str	00000000 
00018dcd l       .debug_str	00000000 
00018e64 l       .debug_str	00000000 
00018eff l       .debug_str	00000000 
00018fc7 l       .debug_str	00000000 
00018fd2 l       .debug_str	00000000 
0001909e l       .debug_str	00000000 
0001912e l       .debug_str	00000000 
0001913a l       .debug_str	00000000 
000191e0 l       .debug_str	00000000 
000191ec l       .debug_str	00000000 
00019290 l       .debug_str	00000000 
00019332 l       .debug_str	00000000 
000193d6 l       .debug_str	00000000 
0001942a l       .debug_str	00000000 
0001947f l       .debug_str	00000000 
000194d4 l       .debug_str	00000000 
000152bd l       .debug_str	00000000 
00019557 l       .debug_str	00000000 
000195db l       .debug_str	00000000 
0001965f l       .debug_str	00000000 
0000404a l       .debug_str	00000000 
000196a6 l       .debug_str	00000000 
00004050 l       .debug_str	00000000 
000196ed l       .debug_str	00000000 
00004056 l       .debug_str	00000000 
00019734 l       .debug_str	00000000 
000197b2 l       .debug_str	00000000 
00019831 l       .debug_str	00000000 
000198cc l       .debug_str	00000000 
00019960 l       .debug_str	00000000 
000199ad l       .debug_str	00000000 
000199b9 l       .debug_str	00000000 
00019a1c l       .debug_str	00000000 
00019a64 l       .debug_str	00000000 
00015085 l       .debug_str	00000000 
00019a6c l       .debug_str	00000000 
00019b00 l       .debug_str	00000000 
00019b66 l       .debug_str	00000000 
00019bf7 l       .debug_str	00000000 
00019c96 l       .debug_str	00000000 
00019d27 l       .debug_str	00000000 
00019dc6 l       .debug_str	00000000 
00019e68 l       .debug_str	00000000 
00019ef9 l       .debug_str	00000000 
00019fa7 l       .debug_str	00000000 
0001a057 l       .debug_str	00000000 
0001a10b l       .debug_str	00000000 
0001a1fe l       .debug_str	00000000 
0001a209 l       .debug_str	00000000 
0001a300 l       .debug_str	00000000 
0001a3ac l       .debug_str	00000000 
0001a3b6 l       .debug_str	00000000 
0001a428 l       .debug_str	00000000 
0001a49d l       .debug_str	00000000 
0001a510 l       .debug_str	00000000 
0001a581 l       .debug_str	00000000 
0001a5f4 l       .debug_str	00000000 
0001a66b l       .debug_str	00000000 
0001a6e0 l       .debug_str	00000000 
0001a755 l       .debug_str	00000000 
0001a7c5 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000bfc2 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
0000bfce l       .debug_str	00000000 
0001a851 l       .debug_str	00000000 
00021014 l       .debug_str	00000000 
0001a857 l       .debug_str	00000000 
000155f2 l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00017d75 l       .debug_str	00000000 
00017ce6 l       .debug_str	00000000 
00018572 l       .debug_str	00000000 
0001a85a l       .debug_str	00000000 
0001a864 l       .debug_str	00000000 
0001a86e l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
0001a878 l       .debug_str	00000000 
0001a8a9 l       .debug_str	00000000 
0005aeea l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
0001a8de l       .debug_str	00000000 
0001a8e8 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0001a8f2 l       .debug_str	00000000 
0001a8fb l       .debug_str	00000000 
0001a92a l       .debug_str	00000000 
0001a937 l       .debug_str	00000000 
0001a93a l       .debug_str	00000000 
0001a93d l       .debug_str	00000000 
0001a940 l       .debug_str	00000000 
0001a943 l       .debug_str	00000000 
0001a946 l       .debug_str	00000000 
0001a949 l       .debug_str	00000000 
0001a997 l       .debug_str	00000000 
0000bb4c l       .debug_str	00000000 
0000bb60 l       .debug_str	00000000 
00017f99 l       .debug_str	00000000 
0000bb69 l       .debug_str	00000000 
0000bb74 l       .debug_str	00000000 
00011fee l       .debug_str	00000000 
0001a9e1 l       .debug_str	00000000 
0001aa12 l       .debug_str	00000000 
0001a9ec l       .debug_str	00000000 
0001aa45 l       .debug_str	00000000 
0001aa20 l       .debug_str	00000000 
0001aa76 l       .debug_str	00000000 
0001aa52 l       .debug_str	00000000 
0001aaa7 l       .debug_str	00000000 
0001aa82 l       .debug_str	00000000 
0001aadb l       .debug_str	00000000 
0001aab4 l       .debug_str	00000000 
0001ab10 l       .debug_str	00000000 
0001aaea l       .debug_str	00000000 
0001ab44 l       .debug_str	00000000 
0001ab1e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00017fac l       .debug_str	00000000 
0001800c l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
0001a85f l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
0001a869 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
0001a873 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
00033153 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00057f3a l       .debug_str	00000000 
0002ef2e l       .debug_str	00000000 
0001500f l       .debug_str	00000000 
00015014 l       .debug_str	00000000 
0001501a l       .debug_str	00000000 
00018275 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00031e1f l       .debug_str	00000000 
0002cb8e l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000351d l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
0000c893 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00011138 l     F .text	0000006e _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E
00000000 l    df *ABS*	00000000 hash32.79y5bd3b-cgu.0
00016be9 l       .debug_str	00000000 
0001b02c l       .debug_str	00000000 
0000c330 l       .debug_str	00000000 
0000c3fa l       .debug_str	00000000 
0001b077 l       .debug_str	00000000 
00015b86 l       .debug_str	00000000 
0001b0ad l       .debug_str	00000000 
00015bdb l       .debug_str	00000000 
0001b0e7 l       .debug_str	00000000 
0001b123 l       .debug_str	00000000 
00015c5c l       .debug_str	00000000 
0001b149 l       .debug_str	00000000 
00015c8f l       .debug_str	00000000 
0001b170 l       .debug_str	00000000 
00015ea9 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0001b1be l       .debug_str	00000000 
00015f19 l       .debug_str	00000000 
0001b20f l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0001b261 l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
0001b2b6 l       .debug_str	00000000 
0001600f l       .debug_str	00000000 
0001b34b l       .debug_str	00000000 
0001b399 l       .debug_str	00000000 
000241ed l       .debug_str	00000000 
0001b3a8 l       .debug_str	00000000 
0001b3f9 l       .debug_str	00000000 
0000ac36 l       .debug_str	00000000 
0001b411 l       .debug_str	00000000 
0001b466 l       .debug_str	00000000 
0001b482 l       .debug_str	00000000 
0001b48a l       .debug_str	00000000 
0001b4d0 l       .debug_str	00000000 
0001b4d8 l       .debug_str	00000000 
00015e39 l       .debug_str	00000000 
0001b521 l       .debug_str	00000000 
000557f6 l       .debug_str	00000000 
0001b590 l       .debug_str	00000000 
00016ab5 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
0001b5e1 l       .debug_str	00000000 
0001b632 l       .debug_str	00000000 
00016c53 l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
000151d4 l       .debug_str	00000000 
00037d9d l       .debug_str	00000000 
000151df l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005677f l       .debug_str	00000000 
0005aa72 l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00017e9a l       .debug_str	00000000 
0001b68a l       .debug_str	00000000 
0001b6ed l       .debug_str	00000000 
0001b717 l       .debug_str	00000000 
0001b77a l       .debug_str	00000000 
0001b783 l       .debug_str	00000000 
0001b7f0 l       .debug_str	00000000 
0001b802 l       .debug_str	00000000 
00005425 l       .debug_str	00000000 
0001b873 l       .debug_str	00000000 
000152bd l       .debug_str	00000000 
0001b8d3 l       .debug_str	00000000 
0001b906 l       .debug_str	00000000 
0001b970 l       .debug_str	00000000 
0001b9a3 l       .debug_str	00000000 
0001b9a8 l       .debug_str	00000000 
0001ba0c l       .debug_str	00000000 
000580af l       .debug_str	00000000 
0001ba67 l       .debug_str	00000000 
0001baa3 l       .debug_str	00000000 
0001bab1 l       .debug_str	00000000 
0001bae0 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00017d75 l       .debug_str	00000000 
00053e37 l       .debug_str	00000000 
00017cc7 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000545b3 l       .debug_str	00000000 
00054359 l       .debug_str	00000000 
00017cce l       .debug_str	00000000 
00017cdb l       .debug_str	00000000 
00021014 l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00017d3a l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
0000c408 l       .debug_str	00000000 
00056340 l       .debug_str	00000000 
00004056 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00003b5b l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00017d7c l       .debug_str	00000000 
00017db6 l       .debug_str	00000000 
00017def l       .debug_str	00000000 
00017dfe l       .debug_str	00000000 
00017e41 l       .debug_str	00000000 
00055884 l       .debug_str	00000000 
0003220f l       .debug_str	00000000 
000572a9 l       .debug_str	00000000 
0000bc25 l       .debug_str	00000000 
00017e83 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
000051e3 l       .debug_str	00000000 
000239c0 l       .debug_str	00000000 
0002f4a1 l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
0001bae8 l       .debug_str	00000000 
0001bb00 l       .debug_str	00000000 
0005a97d l       .debug_str	00000000 
00002ff5 l       .debug_str	00000000 
0001bb1d l       .debug_str	00000000 
0001baab l       .debug_str	00000000 
0001bb36 l       .debug_str	00000000 
0001bb52 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001ab52 l       .debug_str	00000000 
0001aba7 l       .debug_str	00000000 
0001abf1 l       .debug_str	00000000 
0001abf8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00011ff6 l       .debug_str	00000000 
0001a9e9 l       .debug_str	00000000 
00021349 l       .debug_str	00000000 
00021354 l       .debug_str	00000000 
0001bafa l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0001425f l       .debug_str	00000000 
0001238c l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00015028 l       .debug_str	00000000 
00057f3a l       .debug_str	00000000 
0002cb8e l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00058156 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001ac00 l       .debug_str	00000000 
0001505c l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0001506b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
00015085 l       .debug_str	00000000 
00015089 l       .debug_str	00000000 
00017df8 l       .debug_str	00000000 
0001ac29 l       .debug_str	00000000 
000150b6 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
000150eb l       .debug_str	00000000 
000150ff l       .debug_str	00000000 
0001ac52 l       .debug_str	00000000 
0001515e l       .debug_str	00000000 
000117f4 l       .debug_str	00000000 
0000c441 l       .debug_str	00000000 
0000513d l       .debug_str	00000000 
00014824 l       .debug_str	00000000 
0000456e l       .debug_str	00000000 
00005143 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
0001ac9e l       .debug_str	00000000 
0000b31b l       .debug_str	00000000 
0001acc7 l       .debug_str	00000000 
0001acd1 l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00018572 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000574 l       .debug_str	00000000 
00053e08 l       .debug_str	00000000 
0001acd5 l       .debug_str	00000000 
0005432d l       .debug_str	00000000 
0001bb4c l       .debug_str	00000000 
0001bb16 l       .debug_str	00000000 
0001acdf l       .debug_str	00000000 
0001575f l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
0001ad34 l       .debug_str	00000000 
0001ad72 l       .debug_str	00000000 
0001ad8a l       .debug_str	00000000 
000157a7 l       .debug_str	00000000 
0001adc8 l       .debug_str	00000000 
00014821 l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
0001ae2d l       .debug_str	00000000 
0001ae5d l       .debug_str	00000000 
0001ae84 l       .debug_str	00000000 
0001595a l       .debug_str	00000000 
0001aeaa l       .debug_str	00000000 
0001aeef l       .debug_str	00000000 
0001aefb l       .debug_str	00000000 
0001af41 l       .debug_str	00000000 
0001af4e l       .debug_str	00000000 
0001af94 l       .debug_str	00000000 
0001afa1 l       .debug_str	00000000 
0001afdf l       .debug_str	00000000 
0001afe5 l       .debug_str	00000000 
0000c2db l       .debug_str	00000000 
00011246 l     F .text	00000034 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE
000112b0 l     F .text	00000018 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E
000112da l     F .text	0000003e _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE
00011318 l     F .text	00000040 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE
000113e8 l     F .text	0000011c _ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE
00000000 l    df *ABS*	00000000 4iim1qfb3qo0ur8y
0001bbd6 l       .debug_str	00000000 
0001bbd4 l       .debug_str	00000000 
0001bc27 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001bb5b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00014824 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001bb7a l       .debug_str	00000000 
0001bbcb l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 log.9af4yuww-cgu.0
0001dda5 l       .debug_str	00000000 
000148a6 l       .debug_str	00000000 
000148ae l       .debug_str	00000000 
000148b5 l       .debug_str	00000000 
00013b88 l       .debug_str	00000000 
000212ab l       .debug_str	00000000 
00013258 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0001bf4f l       .debug_str	00000000 
0000513d l       .debug_str	00000000 
0001bf53 l       .debug_str	00000000 
0001b4d0 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000b00f l       .debug_str	00000000 
0002ef08 l       .debug_str	00000000 
0005aa72 l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
0000ac36 l       .debug_str	00000000 
0000b018 l       .debug_str	00000000 
000152ad l       .debug_str	00000000 
0001bfd1 l       .debug_str	00000000 
0005677f l       .debug_str	00000000 
0003ffad l       .debug_str	00000000 
00059853 l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
0001bfe8 l       .debug_str	00000000 
0001519b l       .debug_str	00000000 
0001c011 l       .debug_str	00000000 
0001c043 l       .debug_str	00000000 
00015028 l       .debug_str	00000000 
00031e1f l       .debug_str	00000000 
0002cb8e l       .debug_str	00000000 
00058156 l       .debug_str	00000000 
0000ee28 l       .debug_str	00000000 
0001c055 l       .debug_str	00000000 
0001c07e l       .debug_str	00000000 
0001506b l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
00015085 l       .debug_str	00000000 
00015089 l       .debug_str	00000000 
00017df8 l       .debug_str	00000000 
0001c0a3 l       .debug_str	00000000 
000150b6 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
0001c0cc l       .debug_str	00000000 
0001c0f6 l       .debug_str	00000000 
0001c11f l       .debug_str	00000000 
0001c16b l       .debug_str	00000000 
000117f4 l       .debug_str	00000000 
0001c18f l       .debug_str	00000000 
0000c441 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b6e8 l       .debug_str	00000000 
0000b729 l       .debug_str	00000000 
000239c0 l       .debug_str	00000000 
0000c68a l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
0001c19d l       .debug_str	00000000 
0000456e l       .debug_str	00000000 
0001491d l       .debug_str	00000000 
0002fd82 l       .debug_str	00000000 
0005511e l       .debug_str	00000000 
00048171 l       .debug_str	00000000 
00055e83 l       .debug_str	00000000 
0005779c l       .debug_str	00000000 
000241ed l       .debug_str	00000000 
00020f05 l       .debug_str	00000000 
0003d30a l       .debug_str	00000000 
00032a29 l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
00021215 l       .debug_str	00000000 
000211bd l       .debug_str	00000000 
0001c1b2 l       .debug_str	00000000 
0001c1bc l       .debug_str	00000000 
0002109d l       .debug_str	00000000 
0002e20e l       .debug_str	00000000 
00020e75 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
0001eb8c l       .debug_str	00000000 
00058ec5 l       .debug_str	00000000 
0002124e l       .debug_str	00000000 
00056340 l       .debug_str	00000000 
0002122d l       .debug_str	00000000 
00004056 l       .debug_str	00000000 
00053e08 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00020ec6 l       .debug_str	00000000 
00014287 l       .debug_str	00000000 
0001c1c5 l       .debug_str	00000000 
0001c1ee l       .debug_str	00000000 
0001c1fc l       .debug_str	00000000 
0001c209 l       .debug_str	00000000 
0001c21c l       .debug_str	00000000 
00037d9d l       .debug_str	00000000 
0001c235 l       .debug_str	00000000 
00014824 l       .debug_str	00000000 
00005143 l       .debug_str	00000000 
0001c24a l       .debug_str	00000000 
0001c2c6 l       .debug_str	00000000 
0001c25d l       .debug_str	00000000 
0001c29f l       .debug_str	00000000 
0001c2b4 l       .debug_str	00000000 
00058dcf l       .debug_str	00000000 
0000bc25 l       .debug_str	00000000 
0004465c l       .debug_str	00000000 
0001c2d1 l       .debug_str	00000000 
0001c2db l       .debug_str	00000000 
0001c30d l       .debug_str	00000000 
0001c321 l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
00020470 l       .debug_str	00000000 
00020679 l       .debug_str	00000000 
0001c33d l       .debug_str	00000000 
0001c348 l       .debug_str	00000000 
0001c3cc l       .debug_str	00000000 
0001c3fa l       .debug_str	00000000 
0001c480 l       .debug_str	00000000 
0003c20b l       .debug_str	00000000 
0001c4a8 l       .debug_str	00000000 
0001c4b9 l       .debug_str	00000000 
0001c543 l       .debug_str	00000000 
0001c561 l       .debug_str	00000000 
0001c5ef l       .debug_str	00000000 
0001c616 l       .debug_str	00000000 
0001c6a5 l       .debug_str	00000000 
0001c6ed l       .debug_str	00000000 
0001c71c l       .debug_str	00000000 
0001c764 l       .debug_str	00000000 
0001c783 l       .debug_str	00000000 
0001c7cb l       .debug_str	00000000 
0001c7db l       .debug_str	00000000 
0001c823 l       .debug_str	00000000 
0001c834 l       .debug_str	00000000 
0001c87c l       .debug_str	00000000 
0001c884 l       .debug_str	00000000 
0001c8cc l       .debug_str	00000000 
0001c8d6 l       .debug_str	00000000 
0001c91e l       .debug_str	00000000 
0001c938 l       .debug_str	00000000 
0001c980 l       .debug_str	00000000 
0001c999 l       .debug_str	00000000 
0001c9e1 l       .debug_str	00000000 
0001c9f4 l       .debug_str	00000000 
0001ca3c l       .debug_str	00000000 
0001ca45 l       .debug_str	00000000 
0000bd80 l       .debug_str	00000000 
0001ca8d l       .debug_str	00000000 
0001cad7 l       .debug_str	00000000 
0001cb22 l       .debug_str	00000000 
0001cb60 l       .debug_str	00000000 
0001cb91 l       .debug_str	00000000 
0001ad72 l       .debug_str	00000000 
0000cec1 l       .debug_str	00000000 
0001cbcf l       .debug_str	00000000 
0001cbf8 l       .debug_str	00000000 
0001cc03 l       .debug_str	00000000 
0001cc28 l       .debug_str	00000000 
0001cc87 l       .debug_str	00000000 
0002d43c l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
00017d75 l       .debug_str	00000000 
0001ccee l       .debug_str	00000000 
0001cd18 l       .debug_str	00000000 
0001cd40 l       .debug_str	00000000 
0001cd78 l       .debug_str	00000000 
0001cda9 l       .debug_str	00000000 
0001cdb3 l       .debug_str	00000000 
0001ce10 l       .debug_str	00000000 
0000320d l       .debug_str	00000000 
0001ce42 l       .debug_str	00000000 
0001ce68 l       .debug_str	00000000 
0001ce8a l       .debug_str	00000000 
0001ceb0 l       .debug_str	00000000 
0001ced2 l       .debug_str	00000000 
0001cefb l       .debug_str	00000000 
0001cf20 l       .debug_str	00000000 
0001cf68 l       .debug_str	00000000 
0001cf75 l       .debug_str	00000000 
0001cf7e l       .debug_str	00000000 
0001d008 l       .debug_str	00000000 
00013bc7 l       .debug_str	00000000 
0001d025 l       .debug_str	00000000 
0001d0b1 l       .debug_str	00000000 
0001d0ce l       .debug_str	00000000 
0001d0ee l       .debug_str	00000000 
0000ee60 l       .debug_str	00000000 
0001d0f5 l       .debug_str	00000000 
0001d130 l       .debug_str	00000000 
0001d162 l       .debug_str	00000000 
0001d173 l       .debug_str	00000000 
0001d1ae l       .debug_str	00000000 
0001d1f4 l       .debug_str	00000000 
00018753 l       .debug_str	00000000 
0001d224 l       .debug_str	00000000 
0001d254 l       .debug_str	00000000 
0001d272 l       .debug_str	00000000 
0001d2a2 l       .debug_str	00000000 
0001d2b5 l       .debug_str	00000000 
0001d2e5 l       .debug_str	00000000 
0001d2fa l       .debug_str	00000000 
0001d32a l       .debug_str	00000000 
0001d346 l       .debug_str	00000000 
0001d376 l       .debug_str	00000000 
0001d394 l       .debug_str	00000000 
0001d3c4 l       .debug_str	00000000 
0001d3df l       .debug_str	00000000 
0001d40f l       .debug_str	00000000 
0001d433 l       .debug_str	00000000 
0001d463 l       .debug_str	00000000 
0001d49d l       .debug_str	00000000 
0001d4cd l       .debug_str	00000000 
0001d4f2 l       .debug_str	00000000 
0001d522 l       .debug_str	00000000 
0001d54c l       .debug_str	00000000 
0001d582 l       .debug_str	00000000 
0001d5b3 l       .debug_str	00000000 
0001d5ed l       .debug_str	00000000 
0001d622 l       .debug_str	00000000 
0001d65e l       .debug_str	00000000 
0001d684 l       .debug_str	00000000 
0001d6a6 l       .debug_str	00000000 
0001d6cd l       .debug_str	00000000 
0001d6f0 l       .debug_str	00000000 
00015ea9 l       .debug_str	00000000 
0001d73e l       .debug_str	00000000 
00015f19 l       .debug_str	00000000 
0001d78f l       .debug_str	00000000 
0001d7e0 l       .debug_str	00000000 
0001d7ed l       .debug_str	00000000 
0001d83f l       .debug_str	00000000 
0001d84d l       .debug_str	00000000 
00015de4 l       .debug_str	00000000 
0001d898 l       .debug_str	00000000 
0001d8e3 l       .debug_str	00000000 
0001d8f7 l       .debug_str	00000000 
0001d93a l       .debug_str	00000000 
0001d947 l       .debug_str	00000000 
00015e39 l       .debug_str	00000000 
0001d98a l       .debug_str	00000000 
00015ea0 l       .debug_str	00000000 
0001d9e6 l       .debug_str	00000000 
00015f10 l       .debug_str	00000000 
0001da45 l       .debug_str	00000000 
0001da97 l       .debug_str	00000000 
0001dae9 l       .debug_str	00000000 
0001daf3 l       .debug_str	00000000 
0001db48 l       .debug_str	00000000 
0001db9d l       .debug_str	00000000 
0001dbf3 l       .debug_str	00000000 
00015d8d l       .debug_str	00000000 
0001dc49 l       .debug_str	00000000 
0001dc85 l       .debug_str	00000000 
00018572 l       .debug_str	00000000 
0001dcc3 l       .debug_str	00000000 
0001dcfe l       .debug_str	00000000 
00017cdb l       .debug_str	00000000 
0001dd09 l       .debug_str	00000000 
0001dd50 l       .debug_str	00000000 
00013302 l       .debug_str	00000000 
0001dd66 l       .debug_str	00000000 
0001ddf7 l       .debug_str	00000000 
0001de0d l       .debug_str	00000000 
0001de52 l       .debug_str	00000000 
0001de6c l       .debug_str	00000000 
0001decf l       .debug_str	00000000 
0001deef l       .debug_str	00000000 
0001df2e l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
0001df8f l       .debug_str	00000000 
0001dfce l       .debug_str	00000000 
00021098 l       .debug_str	00000000 
0001dff5 l       .debug_str	00000000 
0001e035 l       .debug_str	00000000 
0001e068 l       .debug_str	00000000 
0001e07f l       .debug_str	00000000 
0001e0c5 l       .debug_str	00000000 
0001e0e1 l       .debug_str	00000000 
0001e145 l       .debug_str	00000000 
0001e167 l       .debug_str	00000000 
0001e1a9 l       .debug_str	00000000 
0001e1ca l       .debug_str	00000000 
0001e20c l       .debug_str	00000000 
000569dc l       .debug_str	00000000 
0001e23c l       .debug_str	00000000 
0001e280 l       .debug_str	00000000 
0001e2d5 l       .debug_str	00000000 
0001e319 l       .debug_str	00000000 
0001e36f l       .debug_str	00000000 
0001e3b3 l       .debug_str	00000000 
0001e42b l       .debug_str	00000000 
0001e46f l       .debug_str	00000000 
0001e4af l       .debug_str	00000000 
0001e4ca l       .debug_str	00000000 
0001e50b l       .debug_str	00000000 
0001e561 l       .debug_str	00000000 
0001e5a5 l       .debug_str	00000000 
0001e5d2 l       .debug_str	00000000 
0001e617 l       .debug_str	00000000 
0001e65f l       .debug_str	00000000 
0001e670 l       .debug_str	00000000 
0001e6b8 l       .debug_str	00000000 
0001e6c9 l       .debug_str	00000000 
0002d522 l       .debug_str	00000000 
0001e704 l       .debug_str	00000000 
0001e740 l       .debug_str	00000000 
0001e746 l       .debug_str	00000000 
0001e77c l       .debug_str	00000000 
0001e78f l       .debug_str	00000000 
0001e7c6 l       .debug_str	00000000 
0001e7da l       .debug_str	00000000 
0001e81c l       .debug_str	00000000 
0001e83b l       .debug_str	00000000 
0001e880 l       .debug_str	00000000 
0001e89b l       .debug_str	00000000 
0001e900 l       .debug_str	00000000 
0001e967 l       .debug_str	00000000 
0001e972 l       .debug_str	00000000 
0001e9b8 l       .debug_str	00000000 
0001e9fe l       .debug_str	00000000 
0001ea08 l       .debug_str	00000000 
0001ea4f l       .debug_str	00000000 
0001ea5a l       .debug_str	00000000 
0000b006 l       .debug_str	00000000 
0001eaa1 l       .debug_str	00000000 
0001eaea l       .debug_str	00000000 
0001eb33 l       .debug_str	00000000 
0001eb6c l       .debug_str	00000000 
0001eb87 l       .debug_str	00000000 
0001eb96 l       .debug_str	00000000 
0001ebcf l       .debug_str	00000000 
0001ebf4 l       .debug_str	00000000 
0001ec2d l       .debug_str	00000000 
0001ec66 l       .debug_str	00000000 
0001ec8c l       .debug_str	00000000 
0001ecc5 l       .debug_str	00000000 
0001ed03 l       .debug_str	00000000 
0001ed3d l       .debug_str	00000000 
0001ed49 l       .debug_str	00000000 
0001ed85 l       .debug_str	00000000 
0001ed98 l       .debug_str	00000000 
0001edd4 l       .debug_str	00000000 
0001eded l       .debug_str	00000000 
0001ee2a l       .debug_str	00000000 
0001ee3b l       .debug_str	00000000 
00016ab5 l       .debug_str	00000000 
0001ee8c l       .debug_str	00000000 
0001bbcb l       .debug_str	00000000 
0001eedd l       .debug_str	00000000 
0001ef38 l       .debug_str	00000000 
0001ef9b l       .debug_str	00000000 
0001efb7 l       .debug_str	00000000 
0001f017 l       .debug_str	00000000 
0001f077 l       .debug_str	00000000 
0001f0db l       .debug_str	00000000 
0001f0f6 l       .debug_str	00000000 
0001f15a l       .debug_str	00000000 
0001f165 l       .debug_str	00000000 
0001f1cf l       .debug_str	00000000 
0001f1de l       .debug_str	00000000 
0001f24d l       .debug_str	00000000 
0001f265 l       .debug_str	00000000 
0001f2d5 l       .debug_str	00000000 
0001f2ee l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
0001f36e l       .debug_str	00000000 
0001f3de l       .debug_str	00000000 
0001f3f3 l       .debug_str	00000000 
0001f463 l       .debug_str	00000000 
0001f475 l       .debug_str	00000000 
00005070 l       .debug_str	00000000 
0001f4e6 l       .debug_str	00000000 
0001f557 l       .debug_str	00000000 
0001f56d l       .debug_str	00000000 
0001f57f l       .debug_str	00000000 
0001f5eb l       .debug_str	00000000 
0001f5fd l       .debug_str	00000000 
0001f669 l       .debug_str	00000000 
0001f678 l       .debug_str	00000000 
0001f6e0 l       .debug_str	00000000 
0001f6ea l       .debug_str	00000000 
0001f75e l       .debug_str	00000000 
00002bf7 l       .debug_str	00000000 
0001f769 l       .debug_str	00000000 
0001f7e1 l       .debug_str	00000000 
0001f7fa l       .debug_str	00000000 
0001f872 l       .debug_str	00000000 
0001f908 l       .debug_str	00000000 
0001f924 l       .debug_str	00000000 
0001f9ba l       .debug_str	00000000 
0001fa50 l       .debug_str	00000000 
0001fae6 l       .debug_str	00000000 
0001600f l       .debug_str	00000000 
0001fb5b l       .debug_str	00000000 
0001fbcf l       .debug_str	00000000 
0001fc48 l       .debug_str	00000000 
0001fcc7 l       .debug_str	00000000 
0001fcd8 l       .debug_str	00000000 
0001fd58 l       .debug_str	00000000 
0001fdba l       .debug_str	00000000 
00021318 l       .debug_str	00000000 
0001fe0b l       .debug_str	00000000 
0001fe2d l       .debug_str	00000000 
0001fe5a l       .debug_str	00000000 
0001fe89 l       .debug_str	00000000 
0001feab l       .debug_str	00000000 
0001fed2 l       .debug_str	00000000 
0001fefb l       .debug_str	00000000 
0001ff2d l       .debug_str	00000000 
00011f6d l       .debug_str	00000000 
0001ff7d l       .debug_str	00000000 
0001ffc3 l       .debug_str	00000000 
0001ffd6 l       .debug_str	00000000 
0002002a l       .debug_str	00000000 
0002009c l       .debug_str	00000000 
0002010e l       .debug_str	00000000 
00020180 l       .debug_str	00000000 
000201cf l       .debug_str	00000000 
000201fd l       .debug_str	00000000 
00020208 l       .debug_str	00000000 
00020262 l       .debug_str	00000000 
000202da l       .debug_str	00000000 
00020352 l       .debug_str	00000000 
000203a7 l       .debug_str	00000000 
000203dc l       .debug_str	00000000 
0000bb58 l       .debug_str	00000000 
00020407 l       .debug_str	00000000 
0003908d l       .debug_str	00000000 
00020436 l       .debug_str	00000000 
00020466 l       .debug_str	00000000 
0002047e l       .debug_str	00000000 
000204af l       .debug_str	00000000 
000204e1 l       .debug_str	00000000 
00020520 l       .debug_str	00000000 
00020533 l       .debug_str	00000000 
0002056b l       .debug_str	00000000 
00020577 l       .debug_str	00000000 
000205a7 l       .debug_str	00000000 
000205d8 l       .debug_str	00000000 
000205de l       .debug_str	00000000 
0002060b l       .debug_str	00000000 
0002063c l       .debug_str	00000000 
0002066f l       .debug_str	00000000 
00020689 l       .debug_str	00000000 
000206bd l       .debug_str	00000000 
000206f0 l       .debug_str	00000000 
00053367 l       .debug_str	00000000 
0002073d l       .debug_str	00000000 
00020786 l       .debug_str	00000000 
0005334a l       .debug_str	00000000 
000207d1 l       .debug_str	00000000 
000207f9 l       .debug_str	00000000 
0002083f l       .debug_str	00000000 
00020845 l       .debug_str	00000000 
00020873 l       .debug_str	00000000 
0002088f l       .debug_str	00000000 
000208bc l       .debug_str	00000000 
000208cc l       .debug_str	00000000 
00020924 l       .debug_str	00000000 
0002097d l       .debug_str	00000000 
000209a0 l       .debug_str	00000000 
000209cf l       .debug_str	00000000 
000209e1 l       .debug_str	00000000 
00020a14 l       .debug_str	00000000 
00020a2a l       .debug_str	00000000 
00020a77 l       .debug_str	00000000 
00020aca l       .debug_str	00000000 
00020afd l       .debug_str	00000000 
00020b0d l       .debug_str	00000000 
00020b63 l       .debug_str	00000000 
00020bbd l       .debug_str	00000000 
00020c0b l       .debug_str	00000000 
00020c5d l       .debug_str	00000000 
00020cb2 l       .debug_str	00000000 
00020d02 l       .debug_str	00000000 
00020d56 l       .debug_str	00000000 
00020dad l       .debug_str	00000000 
00020e03 l       .debug_str	00000000 
00020e5a l       .debug_str	00000000 
00020ea6 l       .debug_str	00000000 
00020eee l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
00020f23 l       .debug_str	00000000 
00020f4f l       .debug_str	00000000 
00020f6b l       .debug_str	00000000 
00020f78 l       .debug_str	00000000 
00020f86 l       .debug_str	00000000 
00020f8b l       .debug_str	00000000 
00020f92 l       .debug_str	00000000 
00020fa9 l       .debug_str	00000000 
00020fbf l       .debug_str	00000000 
0000bfce l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00020fcf l       .debug_str	00000000 
000545b3 l       .debug_str	00000000 
00020ff2 l       .debug_str	00000000 
00054359 l       .debug_str	00000000 
00021014 l       .debug_str	00000000 
0001a857 l       .debug_str	00000000 
00021013 l       .debug_str	00000000 
000155f2 l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
0002101a l       .debug_str	00000000 
0002106d l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
0002108e l       .debug_str	00000000 
0000c408 l       .debug_str	00000000 
00021093 l       .debug_str	00000000 
0001a86e l       .debug_str	00000000 
000210a7 l       .debug_str	00000000 
000210bb l       .debug_str	00000000 
000210c4 l       .debug_str	00000000 
000210cf l       .debug_str	00000000 
000210e1 l       .debug_str	00000000 
000210f5 l       .debug_str	00000000 
00021106 l       .debug_str	00000000 
00021120 l       .debug_str	00000000 
00021150 l       .debug_str	00000000 
0002116b l       .debug_str	00000000 
00003b5b l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00017d7c l       .debug_str	00000000 
00017db6 l       .debug_str	00000000 
00017def l       .debug_str	00000000 
00017dfe l       .debug_str	00000000 
00017e41 l       .debug_str	00000000 
00055884 l       .debug_str	00000000 
0003220f l       .debug_str	00000000 
000572a9 l       .debug_str	00000000 
0002118b l       .debug_str	00000000 
000211aa l       .debug_str	00000000 
000597d9 l       .debug_str	00000000 
000211cd l       .debug_str	00000000 
000545d2 l       .debug_str	00000000 
000148fc l       .debug_str	00000000 
000211d3 l       .debug_str	00000000 
0000c5fe l       .debug_str	00000000 
000211db l       .debug_str	00000000 
0005518b l       .debug_str	00000000 
0005a97d l       .debug_str	00000000 
00017cce l       .debug_str	00000000 
00055bfa l       .debug_str	00000000 
0000bb4c l       .debug_str	00000000 
0000bb60 l       .debug_str	00000000 
00017f99 l       .debug_str	00000000 
0000bb69 l       .debug_str	00000000 
0000bb74 l       .debug_str	00000000 
0000bb7f l       .debug_str	00000000 
000211e3 l       .debug_str	00000000 
0000bc1b l       .debug_str	00000000 
0000bc2b l       .debug_str	00000000 
0000bc36 l       .debug_str	00000000 
00053e37 l       .debug_str	00000000 
00021202 l       .debug_str	00000000 
00021221 l       .debug_str	00000000 
00021233 l       .debug_str	00000000 
00018613 l       .debug_str	00000000 
000132fd l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00003526 l       .debug_str	00000000 
0005aeea l       .debug_str	00000000 
00055aa5 l       .debug_str	00000000 
00030ba9 l       .debug_str	00000000 
000212a5 l       .debug_str	00000000 
0001bf40 l       .debug_str	00000000 
000212b7 l       .debug_str	00000000 
000597a0 l       .debug_str	00000000 
000212cb l       .debug_str	00000000 
000212e1 l       .debug_str	00000000 
000212f1 l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
00021303 l       .debug_str	00000000 
000212fd l       .debug_str	00000000 
00021312 l       .debug_str	00000000 
00021329 l       .debug_str	00000000 
00021328 l       .debug_str	00000000 
00017f95 l       .debug_str	00000000 
00017fa0 l       .debug_str	00000000 
00011fee l       .debug_str	00000000 
0001a9e1 l       .debug_str	00000000 
00021341 l       .debug_str	00000000 
0002134c l       .debug_str	00000000 
00021357 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001bd03 l       .debug_str	00000000 
0001bd55 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000532af l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
0001bd9c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001bda3 l       .debug_str	00000000 
0001d0df l       .debug_str	00000000 
0002110b l       .debug_str	00000000 
0001a873 l       .debug_str	00000000 
0001bdac l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00020840 l       .debug_str	00000000 
0001bdb3 l       .debug_str	00000000 
0001bdd6 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0001488a l       .debug_str	00000000 
0001488f l       .debug_str	00000000 
00005a9a l       .debug_str	00000000 
000148bc l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00021198 l       .debug_str	00000000 
00014911 l       .debug_str	00000000 
0001bddc l       .debug_str	00000000 
0001bdfe l       .debug_str	00000000 
0001be13 l       .debug_str	00000000 
0001be45 l       .debug_str	00000000 
0001be55 l       .debug_str	00000000 
0001be82 l       .debug_str	00000000 
0001be93 l       .debug_str	00000000 
0001bec1 l       .debug_str	00000000 
0001bed3 l       .debug_str	00000000 
000210b1 l       .debug_str	00000000 
000212f6 l       .debug_str	00000000 
0000cda6 l       .debug_str	00000000 
0001bf02 l       .debug_str	00000000 
000210c9 l       .debug_str	00000000 
000035a3 l       .debug_str	00000000 
0001799d l       .debug_str	00000000 
00013b8c l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0002db7b l       .debug_str	00000000 
00013b91 l       .debug_str	00000000 
00021100 l       .debug_str	00000000 
0001bf29 l       .debug_str	00000000 
000210ec l       .debug_str	00000000 
000210e6 l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00033153 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
00032c69 l       .debug_str	00000000 
00056352 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0000351d l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c893 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00053fc4 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00021161 l       .debug_str	00000000 
00021155 l       .debug_str	00000000 
00021134 l       .debug_str	00000000 
00021125 l       .debug_str	00000000 
0002117f l       .debug_str	00000000 
00021170 l       .debug_str	00000000 
0001bf30 l       .debug_str	00000000 
0001bf39 l       .debug_str	00000000 
00053fb6 l       .debug_str	00000000 
00053283 l       .debug_str	00000000 
000210da l       .debug_str	00000000 
000210d4 l       .debug_str	00000000 
000210fa l       .debug_str	00000000 
000210c0 l       .debug_str	00000000 
00057f3a l       .debug_str	00000000 
0002ef2e l       .debug_str	00000000 
0001500f l       .debug_str	00000000 
00015014 l       .debug_str	00000000 
0001501a l       .debug_str	00000000 
00018275 l       .debug_str	00000000 
0001425f l       .debug_str	00000000 
0002d22e l       .debug_str	00000000 
00058482 l       .debug_str	00000000 
0001bf45 l       .debug_str	00000000 
00014896 l       .debug_str	00000000 
0001489e l       .debug_str	00000000 
00011a98 l     F .text	0000002a _ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E
00011a6e l     F .text	0000002a _ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE
00011994 l     F .text	0000009c _ZN3log13RecordBuilder3new17haca8312579858419E
00011a30 l     F .text	00000022 _ZN3log13RecordBuilder4args17h0d0d49873389eda9E
00011ac2 l     F .text	00000010 _ZN3log13RecordBuilder4line17h44de9f431bb34307E
00011ad2 l     F .text	00000010 _ZN3log13RecordBuilder5build17h83529556a009112eE
00011a52 l     F .text	0000000c _ZN3log13RecordBuilder5level17h0f95d7860f854eb5E
00011a5e l     F .text	00000010 _ZN3log13RecordBuilder6target17hd1b0e0684e399993E
00011c86 l     F .text	00000012 _ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E
00011aec l     F .text	00000028 _ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E
00011b14 l     F .text	00000010 _ZN3log15MetadataBuilder5build17h2478972692162fc0E
20006a68 l     O .bss	00000004 _ZN3log5STATE17hc9404a0f5c97cef6E
200000f0 l     O .data	00000008 _ZN3log6LOGGER17hc33d4d9c061fc628E
0001198a l     F .text	0000000a _ZN3log6Record7builder17hde62ab0132265febE
0001da94 l     O .text	00000000 _ZN3log6logger3NOP17h5a3de47970f20990E
00011ae2 l     F .text	0000000a _ZN3log8Metadata7builder17ha56bd59835d60a3cE
00011980 l     F .text	0000000a _ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E
00011714 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E
0001174c l     F .text	00000016 _ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE
00011762 l     F .text	00000008 _ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE
00011772 l     F .text	00000028 _ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E
00011818 l     F .text	0000000a _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E
00011cac l     F .text	000000aa _ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E
00011d56 l     F .text	0000003a _ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E
00011c98 l     F .text	00000014 _ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE
000118e4 l     F .text	00000012 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E
00000000 l    df *ABS*	00000000 memchr.2yzmedhn-cgu.0
000219b5 l       .debug_str	00000000 
00015208 l       .debug_str	00000000 
0001a8f2 l       .debug_str	00000000 
00021401 l       .debug_str	00000000 
00021436 l       .debug_str	00000000 
00004056 l       .debug_str	00000000 
0000ac36 l       .debug_str	00000000 
00013302 l       .debug_str	00000000 
00058ec5 l       .debug_str	00000000 
00021442 l       .debug_str	00000000 
0002147a l       .debug_str	00000000 
00021494 l       .debug_str	00000000 
0002149e l       .debug_str	00000000 
000214a6 l       .debug_str	00000000 
000214ae l       .debug_str	00000000 
000214ea l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
000214fd l       .debug_str	00000000 
000014db l       .debug_str	00000000 
00021505 l       .debug_str	00000000 
0002153d l       .debug_str	00000000 
00015085 l       .debug_str	00000000 
00021545 l       .debug_str	00000000 
0002157d l       .debug_str	00000000 
00021585 l       .debug_str	00000000 
000215bd l       .debug_str	00000000 
000215d7 l       .debug_str	00000000 
000215e0 l       .debug_str	00000000 
00021618 l       .debug_str	00000000 
00021621 l       .debug_str	00000000 
00021659 l       .debug_str	00000000 
0001535a l       .debug_str	00000000 
000239c0 l       .debug_str	00000000 
000216e1 l       .debug_str	00000000 
00021729 l       .debug_str	00000000 
00021734 l       .debug_str	00000000 
0001ad72 l       .debug_str	00000000 
0000cec1 l       .debug_str	00000000 
00021772 l       .debug_str	00000000 
0001cbf8 l       .debug_str	00000000 
0002179b l       .debug_str	00000000 
000217c0 l       .debug_str	00000000 
00017d75 l       .debug_str	00000000 
0001ccee l       .debug_str	00000000 
0002181f l       .debug_str	00000000 
0001cd40 l       .debug_str	00000000 
00021847 l       .debug_str	00000000 
00021878 l       .debug_str	00000000 
00021884 l       .debug_str	00000000 
000218e3 l       .debug_str	00000000 
0000320d l       .debug_str	00000000 
00021915 l       .debug_str	00000000 
0002195d l       .debug_str	00000000 
0000bc25 l       .debug_str	00000000 
0002196a l       .debug_str	00000000 
000219c5 l       .debug_str	00000000 
000219d3 l       .debug_str	00000000 
0001cf68 l       .debug_str	00000000 
0001d162 l       .debug_str	00000000 
0000ee60 l       .debug_str	00000000 
00021a1b l       .debug_str	00000000 
0001d1ae l       .debug_str	00000000 
00021a56 l       .debug_str	00000000 
00021a8d l       .debug_str	00000000 
00021aa6 l       .debug_str	00000000 
00021ab2 l       .debug_str	00000000 
00015ea9 l       .debug_str	00000000 
00021b04 l       .debug_str	00000000 
00015f19 l       .debug_str	00000000 
00021b59 l       .debug_str	00000000 
00021a93 l       .debug_str	00000000 
00021b8c l       .debug_str	00000000 
0001b4d0 l       .debug_str	00000000 
00021bd2 l       .debug_str	00000000 
00015e39 l       .debug_str	00000000 
0001238c l       .debug_str	00000000 
0005677f l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
000114db l       .debug_str	00000000 
000241ed l       .debug_str	00000000 
00021c1b l       .debug_str	00000000 
00021c90 l       .debug_str	00000000 
00021cbd l       .debug_str	00000000 
0001b7f0 l       .debug_str	00000000 
00021d49 l       .debug_str	00000000 
00021dcc l       .debug_str	00000000 
00021dfb l       .debug_str	00000000 
00011f6d l       .debug_str	00000000 
00021e48 l       .debug_str	00000000 
00021e78 l       .debug_str	00000000 
00021ec6 l       .debug_str	00000000 
00021ef6 l       .debug_str	00000000 
00021f44 l       .debug_str	00000000 
00021f74 l       .debug_str	00000000 
00021fc2 l       .debug_str	00000000 
00021ff3 l       .debug_str	00000000 
00022042 l       .debug_str	00000000 
00022073 l       .debug_str	00000000 
000220c2 l       .debug_str	00000000 
000220f2 l       .debug_str	00000000 
000220fa l       .debug_str	00000000 
0002212a l       .debug_str	00000000 
00022132 l       .debug_str	00000000 
00022170 l       .debug_str	00000000 
00022185 l       .debug_str	00000000 
0000c39b l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000b093 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000545b3 l       .debug_str	00000000 
00054359 l       .debug_str	00000000 
00021014 l       .debug_str	00000000 
0001a857 l       .debug_str	00000000 
000155f2 l       .debug_str	00000000 
000221b1 l       .debug_str	00000000 
0000c408 l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00053e08 l       .debug_str	00000000 
0005aa72 l       .debug_str	00000000 
00017e9a l       .debug_str	00000000 
00022207 l       .debug_str	00000000 
0001523d l       .debug_str	00000000 
00022206 l       .debug_str	00000000 
0002220a l       .debug_str	00000000 
00022214 l       .debug_str	00000000 
00002fb3 l       .debug_str	00000000 
00002fbc l       .debug_str	00000000 
00056340 l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
00002fe7 l       .debug_str	00000000 
0002221a l       .debug_str	00000000 
0002221e l       .debug_str	00000000 
000214f8 l       .debug_str	00000000 
00022223 l       .debug_str	00000000 
00022222 l       .debug_str	00000000 
00022226 l       .debug_str	00000000 
0002222a l       .debug_str	00000000 
0002222f l       .debug_str	00000000 
0002222e l       .debug_str	00000000 
00022232 l       .debug_str	00000000 
00022236 l       .debug_str	00000000 
00053e37 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00021362 l       .debug_str	00000000 
000213b7 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
00033153 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00057f3a l       .debug_str	00000000 
0002ef2e l       .debug_str	00000000 
0001500f l       .debug_str	00000000 
00015014 l       .debug_str	00000000 
0001501a l       .debug_str	00000000 
00018275 l       .debug_str	00000000 
0000513d l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00015028 l       .debug_str	00000000 
00031e1f l       .debug_str	00000000 
0002cb8e l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000351d l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
0000c893 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00058156 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00032c69 l       .debug_str	00000000 
00056352 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00053fc4 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00021161 l       .debug_str	00000000 
0000ee28 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000c441 l       .debug_str	00000000 
00011dd6 l     F .text	0000006e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE
00000000 l    df *ABS*	00000000 1sklumn9v47r13ke
00021014 l       .debug_str	00000000 
0000ac36 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
0001a873 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00057f3a l       .debug_str	00000000 
0002cb8e l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0002223a l       .debug_str	00000000 
0002d43c l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
0002229b l       .debug_str	00000000 
00014821 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2la8qm50nrg05wyh
000222fe l       .debug_str	00000000 
000239c0 l       .debug_str	00000000 
00022863 l       .debug_str	00000000 
000228ce l       .debug_str	00000000 
00022914 l       .debug_str	00000000 
00022986 l       .debug_str	00000000 
000051e3 l       .debug_str	00000000 
00022b7d l       .debug_str	00000000 
00022bef l       .debug_str	00000000 
00022c39 l       .debug_str	00000000 
00022c83 l       .debug_str	00000000 
00022e82 l       .debug_str	00000000 
00022ebe l       .debug_str	00000000 
00037d9d l       .debug_str	00000000 
0000512e l       .debug_str	00000000 
00022f03 l       .debug_str	00000000 
00022f40 l       .debug_str	00000000 
00023133 l       .debug_str	00000000 
00023170 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000231b6 l       .debug_str	00000000 
000233bc l       .debug_str	00000000 
00023415 l       .debug_str	00000000 
00023617 l       .debug_str	00000000 
00021014 l       .debug_str	00000000 
00002b98 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7ec l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000598ca l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00006f86 l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
000061fa l       .debug_str	00000000 
00006fa2 l       .debug_str	00000000 
00006fe7 l       .debug_str	00000000 
00007055 l       .debug_str	00000000 
000070ec l       .debug_str	00000000 
000071ac l       .debug_str	00000000 
00007295 l       .debug_str	00000000 
000073a7 l       .debug_str	00000000 
000074e2 l       .debug_str	00000000 
00007646 l       .debug_str	00000000 
000077d3 l       .debug_str	00000000 
00007989 l       .debug_str	00000000 
000014c8 l       .debug_str	00000000 
000014d0 l       .debug_str	00000000 
000014d5 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0002f0c2 l       .debug_str	00000000 
000014df l       .debug_str	00000000 
000014e2 l       .debug_str	00000000 
0000150b l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
00001541 l       .debug_str	00000000 
0000166f l       .debug_str	00000000 
00007b68 l       .debug_str	00000000 
00007bb8 l       .debug_str	00000000 
00007c15 l       .debug_str	00000000 
00007c69 l       .debug_str	00000000 
00007ce0 l       .debug_str	00000000 
00007d64 l       .debug_str	00000000 
00007ddf l       .debug_str	00000000 
00007e7d l       .debug_str	00000000 
00007f28 l       .debug_str	00000000 
00007fca l       .debug_str	00000000 
0000808f l       .debug_str	00000000 
00008161 l       .debug_str	00000000 
0000822a l       .debug_str	00000000 
00008316 l       .debug_str	00000000 
0000840f l       .debug_str	00000000 
000084ff l       .debug_str	00000000 
00008612 l       .debug_str	00000000 
00008732 l       .debug_str	00000000 
00008849 l       .debug_str	00000000 
00008983 l       .debug_str	00000000 
00008aca l       .debug_str	00000000 
00008c08 l       .debug_str	00000000 
00008d69 l       .debug_str	00000000 
00008ed7 l       .debug_str	00000000 
0000903c l       .debug_str	00000000 
000091c4 l       .debug_str	00000000 
00009359 l       .debug_str	00000000 
000094e5 l       .debug_str	00000000 
00009694 l       .debug_str	00000000 
00009850 l       .debug_str	00000000 
00009a03 l       .debug_str	00000000 
00009bd9 l       .debug_str	00000000 
00009dbc l       .debug_str	00000000 
00009f96 l       .debug_str	00000000 
0000a191 l       .debug_str	00000000 
0000a3a9 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
0002b139 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000231ca l       .debug_str	00000000 
0000a844 l       .debug_str	00000000 
0000a892 l       .debug_str	00000000 
0000a8fd l       .debug_str	00000000 
0002b0c5 l       .debug_str	00000000 
000233d0 l       .debug_str	00000000 
00022366 l       .debug_str	00000000 
00022558 l       .debug_str	00000000 
000225c0 l       .debug_str	00000000 
00022605 l       .debug_str	00000000 
00022670 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xneats2au1n52xr
000236bd l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00002082 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00014824 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002366c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3hq83qlgyhwbaj1j
00000beb l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
0001a85f l       .debug_str	00000000 
0000bfd6 l       .debug_str	00000000 
0000bfd5 l       .debug_str	00000000 
0001a873 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
00033153 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058156 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
000236df l       .debug_str	00000000 
0002373b l       .debug_str	00000000 
00023798 l       .debug_str	00000000 
000237f5 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000ac36 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
0000351d l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
0000c893 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4dguvrsipkvuzwcx
000210c9 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00021014 l       .debug_str	00000000 
0000ac36 l       .debug_str	00000000 
0000ac35 l       .debug_str	00000000 
000239c0 l       .debug_str	00000000 
000239bf l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00057f3a l       .debug_str	00000000 
0002cb8e l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0002ef2e l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
00023852 l       .debug_str	00000000 
000238c3 l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000238cf l       .debug_str	00000000 
0001673f l       .debug_str	00000000 
00023940 l       .debug_str	00000000 
000239b1 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 501bil2zkh495ov3
00023e7d l       .debug_str	00000000 
00023e22 l       .debug_str	00000000 
00023e35 l       .debug_str	00000000 
00023e74 l       .debug_str	00000000 
00023e8f l       .debug_str	00000000 
00023ec7 l       .debug_str	00000000 
00023edb l       .debug_str	00000000 
00023f07 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
00002fb3 l       .debug_str	00000000 
0001a85f l       .debug_str	00000000 
00002fbc l       .debug_str	00000000 
000597a0 l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
0000bfc2 l       .debug_str	00000000 
00002fe7 l       .debug_str	00000000 
00002fec l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00032c69 l       .debug_str	00000000 
00056352 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
0000351d l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c893 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00053fc4 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00021161 l       .debug_str	00000000 
00021155 l       .debug_str	00000000 
0001a873 l       .debug_str	00000000 
0000bfce l       .debug_str	00000000 
000545d2 l       .debug_str	00000000 
0005979f l       .debug_str	00000000 
00023f10 l       .debug_str	00000000 
000239c0 l       .debug_str	00000000 
00018613 l       .debug_str	00000000 
00023f14 l       .debug_str	00000000 
00058ccd l       .debug_str	00000000 
000061ba l       .debug_str	00000000 
000061c2 l       .debug_str	00000000 
000061cb l       .debug_str	00000000 
000061d9 l       .debug_str	00000000 
000061e0 l       .debug_str	00000000 
00005e60 l       .debug_str	00000000 
00005e70 l       .debug_str	00000000 
00005e79 l       .debug_str	00000000 
00005e87 l       .debug_str	00000000 
00005e95 l       .debug_str	00000000 
00005ea1 l       .debug_str	00000000 
000060af l       .debug_str	00000000 
00005ead l       .debug_str	00000000 
00005ebc l       .debug_str	00000000 
00005ec4 l       .debug_str	00000000 
00005edd l       .debug_str	00000000 
00005eee l       .debug_str	00000000 
00005ef6 l       .debug_str	00000000 
00005f29 l       .debug_str	00000000 
00005f10 l       .debug_str	00000000 
00005f35 l       .debug_str	00000000 
00003526 l       .debug_str	00000000 
00005f67 l       .debug_str	00000000 
00005f4e l       .debug_str	00000000 
00005fa1 l       .debug_str	00000000 
00005f94 l       .debug_str	00000000 
00005f7b l       .debug_str	00000000 
000061e7 l       .debug_str	00000000 
00006246 l       .debug_str	00000000 
000061ef l       .debug_str	00000000 
0000620a l       .debug_str	00000000 
0000623e l       .debug_str	00000000 
00006225 l       .debug_str	00000000 
00057dab l       .debug_str	00000000 
000463f8 l       .debug_str	00000000 
00024abb l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
000555bd l       .debug_str	00000000 
0000ac36 l       .debug_str	00000000 
00023f1c l       .debug_str	00000000 
00058e01 l       .debug_str	00000000 
00057141 l       .debug_str	00000000 
00055033 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00056d64 l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
00054376 l       .debug_str	00000000 
0000c5eb l       .debug_str	00000000 
0000c5ef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c5f9 l       .debug_str	00000000 
0000c604 l       .debug_str	00000000 
0000c60e l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00024205 l       .debug_str	00000000 
000239c6 l       .debug_str	00000000 
000239f7 l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0000c7ec l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000598ca l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00006f86 l       .debug_str	00000000 
000014c8 l       .debug_str	00000000 
000014d0 l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
000014d5 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0002f0c2 l       .debug_str	00000000 
000014df l       .debug_str	00000000 
000014e2 l       .debug_str	00000000 
0000150b l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
00001541 l       .debug_str	00000000 
0000a844 l       .debug_str	00000000 
0000a892 l       .debug_str	00000000 
0000a8fd l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
0002b0c5 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000233d0 l       .debug_str	00000000 
00023a03 l       .debug_str	00000000 
00023a33 l       .debug_str	00000000 
000061fa l       .debug_str	00000000 
00006fa2 l       .debug_str	00000000 
00006fe7 l       .debug_str	00000000 
00007055 l       .debug_str	00000000 
000070ec l       .debug_str	00000000 
000071ac l       .debug_str	00000000 
00007295 l       .debug_str	00000000 
000073a7 l       .debug_str	00000000 
000074e2 l       .debug_str	00000000 
00007646 l       .debug_str	00000000 
000077d3 l       .debug_str	00000000 
00007989 l       .debug_str	00000000 
0000166f l       .debug_str	00000000 
00007b68 l       .debug_str	00000000 
00007bb8 l       .debug_str	00000000 
00007c15 l       .debug_str	00000000 
00007c69 l       .debug_str	00000000 
00007ce0 l       .debug_str	00000000 
00007d64 l       .debug_str	00000000 
00007ddf l       .debug_str	00000000 
00007e7d l       .debug_str	00000000 
00007f28 l       .debug_str	00000000 
00007fca l       .debug_str	00000000 
0000808f l       .debug_str	00000000 
00008161 l       .debug_str	00000000 
0000822a l       .debug_str	00000000 
00008316 l       .debug_str	00000000 
0000840f l       .debug_str	00000000 
000084ff l       .debug_str	00000000 
00008612 l       .debug_str	00000000 
00008732 l       .debug_str	00000000 
00008849 l       .debug_str	00000000 
00008983 l       .debug_str	00000000 
00008aca l       .debug_str	00000000 
00008c08 l       .debug_str	00000000 
00008d69 l       .debug_str	00000000 
00008ed7 l       .debug_str	00000000 
0000903c l       .debug_str	00000000 
000091c4 l       .debug_str	00000000 
00009359 l       .debug_str	00000000 
000094e5 l       .debug_str	00000000 
00009694 l       .debug_str	00000000 
00009850 l       .debug_str	00000000 
00009a03 l       .debug_str	00000000 
00009bd9 l       .debug_str	00000000 
00009dbc l       .debug_str	00000000 
00009f96 l       .debug_str	00000000 
0000a191 l       .debug_str	00000000 
0000a3a9 l       .debug_str	00000000 
0002b139 l       .debug_str	00000000 
000231ca l       .debug_str	00000000 
00023a40 l       .debug_str	00000000 
00023a71 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003bd87 l       .debug_str	00000000 
00006e67 l       .debug_str	00000000 
00003577 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00058c44 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00053689 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
00000f31 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000f5e l       .debug_str	00000000 
000034f3 l       .debug_str	00000000 
00059a7f l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
00000f93 l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
0000101a l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001080 l       .debug_str	00000000 
00000fac l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000109e l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000010b4 l       .debug_str	00000000 
000010da l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
000010f0 l       .debug_str	00000000 
00006f4a l       .debug_str	00000000 
000010b9 l       .debug_str	00000000 
00006deb l       .debug_str	00000000 
00048d2c l       .debug_str	00000000 
00006e70 l       .debug_str	00000000 
00006e7b l       .debug_str	00000000 
00023a79 l       .debug_str	00000000 
00023aa4 l       .debug_str	00000000 
00023ab5 l       .debug_str	00000000 
00023aea l       .debug_str	00000000 
000063eb l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
000060a6 l       .debug_str	00000000 
000060ae l       .debug_str	00000000 
00005f72 l       .debug_str	00000000 
000060b8 l       .debug_str	00000000 
0000635a l       .debug_str	00000000 
00006341 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
0000633c l       .debug_str	00000000 
00006369 l       .debug_str	00000000 
000063f3 l       .debug_str	00000000 
00001118 l       .debug_str	00000000 
00056fce l       .debug_str	00000000 
000011c5 l       .debug_str	00000000 
00001122 l       .debug_str	00000000 
0000115a l       .debug_str	00000000 
0000119a l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011a9 l       .debug_str	00000000 
000011de l       .debug_str	00000000 
000063f9 l       .debug_str	00000000 
00023af9 l       .debug_str	00000000 
00023b2c l       .debug_str	00000000 
00000f07 l       .debug_str	00000000 
00001106 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
000011c0 l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001218 l       .debug_str	00000000 
00023b3c l       .debug_str	00000000 
00023b70 l       .debug_str	00000000 
00023b79 l       .debug_str	00000000 
00023ba5 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00023bb4 l       .debug_str	00000000 
00023be7 l       .debug_str	00000000 
00023bf4 l       .debug_str	00000000 
00023c00 l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00002082 l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
00033153 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00023c31 l       .debug_str	00000000 
00023c66 l       .debug_str	00000000 
00037d9d l       .debug_str	00000000 
00004daf l       .debug_str	00000000 
00023c77 l       .debug_str	00000000 
00023ca9 l       .debug_str	00000000 
00023cb7 l       .debug_str	00000000 
00023cf5 l       .debug_str	00000000 
00023d0f l       .debug_str	00000000 
00023d4a l       .debug_str	00000000 
00023d61 l       .debug_str	00000000 
00023d9d l       .debug_str	00000000 
00023db5 l       .debug_str	00000000 
00023deb l       .debug_str	00000000 
20006a70 l     O .bss	00000008 _ZN6mynewt3spi11PENDING_CMD17hd08bb758c99a7708E
20006a78 l     O .bss	00000804 _ZN6mynewt3spi12PENDING_DATA17h17892bfe7f609123E
20007704 l     O .bss	00000000 _ZN6mynewt3spi12SPI_CALLBACK17h9820a4217e4879a6E
200000f8 l     O .data	00000008 _ZN6mynewt3spi12SPI_SETTINGS17h4a4473e27299c06dE
00012b4e l     F .text	0000003a _ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E
2000728c l     O .bss	00000018 _ZN6mynewt3spi14SPI_DATA_QUEUE17h4880c24292cc1218E
20007304 l     O .bss	00000400 _ZN6mynewt3spi14SPI_TASK_STACK17h041a1fc76b4d16c1E
200072a4 l     O .bss	00000010 _ZN6mynewt3spi15SPI_EVENT_QUEUE17h4e2cf68a255fc2fdE
20007284 l     O .bss	00000008 _ZN6mynewt3spi16SPI_THROTTLE_SEM17h1f0932d6e65cb8daE
00012de2 l     F .text	000001ea _ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E
00012fcc l     F .text	000002e8 _ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E
000135ea l     F .text	00000128 _ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E
000132b4 l     F .text	00000336 _ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E
2000727c l     O .bss	00000008 _ZN6mynewt3spi7SPI_SEM17hd7399e388b8e657cE
200072b4 l     O .bss	00000050 _ZN6mynewt3spi8SPI_TASK17h4c45c24ee73ad430E
00013712 l     F .text	00000054 _ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E
0001dcc0 l     O .text	00000021 str.0
0001dd00 l     O .text	0000001c str.1
0001dd50 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 53x3bckk5lzipnpa
00000c52 l       .debug_str	00000000 
00032c69 l       .debug_str	00000000 
00056352 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
0000351d l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c893 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00053fc4 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00021161 l       .debug_str	00000000 
00021155 l       .debug_str	00000000 
00024216 l       .debug_str	00000000 
000239c0 l       .debug_str	00000000 
0002421c l       .debug_str	00000000 
0000ebd6 l       .debug_str	00000000 
00057141 l       .debug_str	00000000 
00055033 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00002082 l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
00033153 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c5eb l       .debug_str	00000000 
0000c670 l       .debug_str	00000000 
0000497d l       .debug_str	00000000 
000241eb l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00054196 l       .debug_str	00000000 
0002422e l       .debug_str	00000000 
0000ebe8 l       .debug_str	00000000 
00023f27 l       .debug_str	00000000 
0003908d l       .debug_str	00000000 
00023f52 l       .debug_str	00000000 
000597d9 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00037d9d l       .debug_str	00000000 
00004daf l       .debug_str	00000000 
00023f7e l       .debug_str	00000000 
0005aad5 l       .debug_str	00000000 
00023fef l       .debug_str	00000000 
0002401b l       .debug_str	00000000 
00024048 l       .debug_str	00000000 
000240b4 l       .debug_str	00000000 
000240bc l       .debug_str	00000000 
00024129 l       .debug_str	00000000 
00024132 l       .debug_str	00000000 
0002415f l       .debug_str	00000000 
00023f07 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000241d9 l       .debug_str	00000000 
00024209 l       .debug_str	00000000 
00054376 l       .debug_str	00000000 
0000c5ef l       .debug_str	00000000 
0000c5f9 l       .debug_str	00000000 
0000c604 l       .debug_str	00000000 
0000c60e l       .debug_str	00000000 
00024205 l       .debug_str	00000000 
000241ef l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
00002fb3 l       .debug_str	00000000 
0001a85f l       .debug_str	00000000 
00002fbc l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
0000bfc2 l       .debug_str	00000000 
00002fe7 l       .debug_str	00000000 
00002fec l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001df50 l     O .text	00000021 str.0
00000000 l    df *ABS*	00000000 n1xzuhnvw82wqrn
000061ef l       .debug_str	00000000 
0000620a l       .debug_str	00000000 
0000623e l       .debug_str	00000000 
00024233 l       .debug_str	00000000 
00024285 l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000117f4 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
0003bd87 l       .debug_str	00000000 
000061ba l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
000061c2 l       .debug_str	00000000 
000061cb l       .debug_str	00000000 
000061d9 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
000061e0 l       .debug_str	00000000 
00005e60 l       .debug_str	00000000 
00005e70 l       .debug_str	00000000 
00005e79 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00005e87 l       .debug_str	00000000 
00005e95 l       .debug_str	00000000 
00005ea1 l       .debug_str	00000000 
000060af l       .debug_str	00000000 
00005ead l       .debug_str	00000000 
00005ebc l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00005ec4 l       .debug_str	00000000 
00005edd l       .debug_str	00000000 
00003577 l       .debug_str	00000000 
00005eee l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00005ef6 l       .debug_str	00000000 
00005f29 l       .debug_str	00000000 
00005f10 l       .debug_str	00000000 
00005f35 l       .debug_str	00000000 
00003526 l       .debug_str	00000000 
00005f67 l       .debug_str	00000000 
00005f4e l       .debug_str	00000000 
00005f72 l       .debug_str	00000000 
00005fa1 l       .debug_str	00000000 
00005f94 l       .debug_str	00000000 
00005f7b l       .debug_str	00000000 
000061e7 l       .debug_str	00000000 
00006225 l       .debug_str	00000000 
00006246 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000061fa l       .debug_str	00000000 
000014db l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 num_traits.eydd4btj-cgu.0
000255d5 l       .debug_str	00000000 
000247f6 l       .debug_str	00000000 
00015e39 l       .debug_str	00000000 
00024839 l       .debug_str	00000000 
00015ea0 l       .debug_str	00000000 
00024895 l       .debug_str	00000000 
00015f10 l       .debug_str	00000000 
000248f4 l       .debug_str	00000000 
00015ea9 l       .debug_str	00000000 
00024946 l       .debug_str	00000000 
0002499b l       .debug_str	00000000 
000249f1 l       .debug_str	00000000 
00024a1f l       .debug_str	00000000 
00024a2b l       .debug_str	00000000 
00024a5d l       .debug_str	00000000 
00024a84 l       .debug_str	00000000 
00024ab6 l       .debug_str	00000000 
00024ac6 l       .debug_str	00000000 
00024afb l       .debug_str	00000000 
00024b0e l       .debug_str	00000000 
00024b44 l       .debug_str	00000000 
00024b58 l       .debug_str	00000000 
00024ba2 l       .debug_str	00000000 
00024bb3 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00024bef l       .debug_str	00000000 
000536b5 l       .debug_str	00000000 
00058ec5 l       .debug_str	00000000 
00024c2d l       .debug_str	00000000 
00024c6b l       .debug_str	00000000 
000152cf l       .debug_str	00000000 
00024c78 l       .debug_str	00000000 
00037d9d l       .debug_str	00000000 
00024c86 l       .debug_str	00000000 
00024cae l       .debug_str	00000000 
00002e5d l       .debug_str	00000000 
00024ced l       .debug_str	00000000 
00024d1b l       .debug_str	00000000 
00024d22 l       .debug_str	00000000 
00024dc5 l       .debug_str	00000000 
00024dd3 l       .debug_str	00000000 
0003a596 l       .debug_str	00000000 
00024e6b l       .debug_str	00000000 
00024f05 l       .debug_str	00000000 
00011f6d l       .debug_str	00000000 
00024fbd l       .debug_str	00000000 
0002d43c l       .debug_str	00000000 
0001238c l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
000114db l       .debug_str	00000000 
00025020 l       .debug_str	00000000 
00025092 l       .debug_str	00000000 
000250bc l       .debug_str	00000000 
000250fa l       .debug_str	00000000 
0002510d l       .debug_str	00000000 
00025158 l       .debug_str	00000000 
0000cec1 l       .debug_str	00000000 
00025161 l       .debug_str	00000000 
000251a3 l       .debug_str	00000000 
00026464 l       .debug_str	00000000 
000251dd l       .debug_str	00000000 
00025222 l       .debug_str	00000000 
0002523e l       .debug_str	00000000 
00025281 l       .debug_str	00000000 
00025297 l       .debug_str	00000000 
000252fc l       .debug_str	00000000 
00025361 l       .debug_str	00000000 
0002539c l       .debug_str	00000000 
000253a9 l       .debug_str	00000000 
00021a93 l       .debug_str	00000000 
000253dc l       .debug_str	00000000 
0000ad77 l       .debug_str	00000000 
00025422 l       .debug_str	00000000 
0001b4d0 l       .debug_str	00000000 
00025468 l       .debug_str	00000000 
0000b006 l       .debug_str	00000000 
000254af l       .debug_str	00000000 
000254f8 l       .debug_str	00000000 
0001673f l       .debug_str	00000000 
000210c9 l       .debug_str	00000000 
00017d75 l       .debug_str	00000000 
00015085 l       .debug_str	00000000 
00013302 l       .debug_str	00000000 
00025571 l       .debug_str	00000000 
000255b6 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
0002560e l       .debug_str	00000000 
0000b09b l       .debug_str	00000000 
00025626 l       .debug_str	00000000 
00025661 l       .debug_str	00000000 
00025685 l       .debug_str	00000000 
000256ab l       .debug_str	00000000 
000256e6 l       .debug_str	00000000 
00025709 l       .debug_str	00000000 
0002572e l       .debug_str	00000000 
0002576b l       .debug_str	00000000 
00025782 l       .debug_str	00000000 
000257bf l       .debug_str	00000000 
000257d6 l       .debug_str	00000000 
00016b7a l       .debug_str	00000000 
00025827 l       .debug_str	00000000 
0001895f l       .debug_str	00000000 
00025882 l       .debug_str	00000000 
000258e5 l       .debug_str	00000000 
00025927 l       .debug_str	00000000 
00016e33 l       .debug_str	00000000 
0002598b l       .debug_str	00000000 
0001b7f0 l       .debug_str	00000000 
000259f8 l       .debug_str	00000000 
0000b08b l       .debug_str	00000000 
00025a5a l       .debug_str	00000000 
00025a68 l       .debug_str	00000000 
00025ad3 l       .debug_str	00000000 
00025aed l       .debug_str	00000000 
00025b03 l       .debug_str	00000000 
00025b6e l       .debug_str	00000000 
00025b7e l       .debug_str	00000000 
00025bea l       .debug_str	00000000 
00025bfc l       .debug_str	00000000 
00025c68 l       .debug_str	00000000 
00025c79 l       .debug_str	00000000 
00025ce0 l       .debug_str	00000000 
00025d18 l       .debug_str	00000000 
00025d82 l       .debug_str	00000000 
00025e0a l       .debug_str	00000000 
00014d61 l       .debug_str	00000000 
00025e7e l       .debug_str	00000000 
00025f00 l       .debug_str	00000000 
00025f17 l       .debug_str	00000000 
00025f55 l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
0002d6ae l       .debug_str	00000000 
0002ef2e l       .debug_str	00000000 
00025f68 l       .debug_str	00000000 
00025f77 l       .debug_str	00000000 
00025fb5 l       .debug_str	00000000 
00025fc8 l       .debug_str	00000000 
00025ff4 l       .debug_str	00000000 
00025ffd l       .debug_str	00000000 
00026029 l       .debug_str	00000000 
00026032 l       .debug_str	00000000 
00026092 l       .debug_str	00000000 
0002d0ef l       .debug_str	00000000 
000260e3 l       .debug_str	00000000 
00026134 l       .debug_str	00000000 
00026191 l       .debug_str	00000000 
000261ef l       .debug_str	00000000 
000264d4 l       .debug_str	00000000 
00026240 l       .debug_str	00000000 
00026269 l       .debug_str	00000000 
000262cc l       .debug_str	00000000 
000262dd l       .debug_str	00000000 
000262ea l       .debug_str	00000000 
000262ff l       .debug_str	00000000 
00026350 l       .debug_str	00000000 
00026379 l       .debug_str	00000000 
000263dc l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
0000351d l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
0000c893 l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00021014 l       .debug_str	00000000 
000239bf l       .debug_str	00000000 
0005a97d l       .debug_str	00000000 
0000c408 l       .debug_str	00000000 
000263f9 l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
00032a29 l       .debug_str	00000000 
000214f8 l       .debug_str	00000000 
00018572 l       .debug_str	00000000 
000545d2 l       .debug_str	00000000 
00053389 l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
000597d9 l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
00003b5b l       .debug_str	00000000 
0002641a l       .debug_str	00000000 
00003d07 l       .debug_str	00000000 
00005a9a l       .debug_str	00000000 
00004056 l       .debug_str	00000000 
0002641e l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0002448b l       .debug_str	00000000 
00026430 l       .debug_str	00000000 
00026435 l       .debug_str	00000000 
0002643a l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00017d3a l       .debug_str	00000000 
0002645f l       .debug_str	00000000 
0002649b l       .debug_str	00000000 
00056340 l       .debug_str	00000000 
00037455 l       .debug_str	00000000 
000264b1 l       .debug_str	00000000 
000264ba l       .debug_str	00000000 
00030a5a l       .debug_str	00000000 
00054425 l       .debug_str	00000000 
0004666c l       .debug_str	00000000 
000264c3 l       .debug_str	00000000 
000264c7 l       .debug_str	00000000 
00030d20 l       .debug_str	00000000 
0000bb4c l       .debug_str	00000000 
0000bb60 l       .debug_str	00000000 
00017f99 l       .debug_str	00000000 
0000bb69 l       .debug_str	00000000 
0000bb74 l       .debug_str	00000000 
00017f95 l       .debug_str	00000000 
00017fa0 l       .debug_str	00000000 
00011fee l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000264e9 l       .debug_str	00000000 
000264e4 l       .debug_str	00000000 
000541a6 l       .debug_str	00000000 
000264ed l       .debug_str	00000000 
000327f7 l       .debug_str	00000000 
000264f6 l       .debug_str	00000000 
00002ff5 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
000352b1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000242aa l       .debug_str	00000000 
00024304 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000ce9f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002d359 l       .debug_str	00000000 
00024353 l       .debug_str	00000000 
0002640b l       .debug_str	00000000 
000263fe l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
00033153 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058156 l       .debug_str	00000000 
0002435b l       .debug_str	00000000 
00024368 l       .debug_str	00000000 
00024371 l       .debug_str	00000000 
000532a3 l       .debug_str	00000000 
0002d725 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00015022 l       .debug_str	00000000 
00057f3a l       .debug_str	00000000 
0002cb8e l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000117f4 l       .debug_str	00000000 
0000b00f l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002ef08 l       .debug_str	00000000 
0000c441 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b6e8 l       .debug_str	00000000 
0000b729 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000239c0 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001425f l       .debug_str	00000000 
0000513d l       .debug_str	00000000 
0005aa72 l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
0000ac36 l       .debug_str	00000000 
0000b018 l       .debug_str	00000000 
000152ad l       .debug_str	00000000 
000264ab l       .debug_str	00000000 
0000456e l       .debug_str	00000000 
00053e08 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00014824 l       .debug_str	00000000 
000563ce l       .debug_str	00000000 
0001491d l       .debug_str	00000000 
0002fd82 l       .debug_str	00000000 
00013258 l       .debug_str	00000000 
00054359 l       .debug_str	00000000 
000241ed l       .debug_str	00000000 
0002647f l       .debug_str	00000000 
00014287 l       .debug_str	00000000 
0002437b l       .debug_str	00000000 
000243b9 l       .debug_str	00000000 
0001bfd1 l       .debug_str	00000000 
0005677f l       .debug_str	00000000 
0003ffad l       .debug_str	00000000 
00059853 l       .debug_str	00000000 
000243c8 l       .debug_str	00000000 
0001519b l       .debug_str	00000000 
000243f1 l       .debug_str	00000000 
0001c043 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001c1fc l       .debug_str	00000000 
0002117f l       .debug_str	00000000 
0000ec13 l       .debug_str	00000000 
00002fdb l       .debug_str	00000000 
000014db l       .debug_str	00000000 
00024423 l       .debug_str	00000000 
00026449 l       .debug_str	00000000 
00005143 l       .debug_str	00000000 
00002ff7 l       .debug_str	00000000 
00024431 l       .debug_str	00000000 
00015288 l       .debug_str	00000000 
0001529b l       .debug_str	00000000 
00058dcf l       .debug_str	00000000 
0000bc25 l       .debug_str	00000000 
0004465c l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005343e l       .debug_str	00000000 
00024473 l       .debug_str	00000000 
00024477 l       .debug_str	00000000 
00024482 l       .debug_str	00000000 
00024491 l       .debug_str	00000000 
000244d9 l       .debug_str	00000000 
000244f9 l       .debug_str	00000000 
00033543 l       .debug_str	00000000 
00026431 l       .debug_str	00000000 
00024544 l       .debug_str	00000000 
00026436 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
0002458f l       .debug_str	00000000 
000239b1 l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
00024600 l       .debug_str	00000000 
00015922 l       .debug_str	00000000 
0002462e l       .debug_str	00000000 
0001cf68 l       .debug_str	00000000 
00024676 l       .debug_str	00000000 
000246a6 l       .debug_str	00000000 
000246d1 l       .debug_str	00000000 
00021a8d l       .debug_str	00000000 
00021aa6 l       .debug_str	00000000 
00024708 l       .debug_str	00000000 
00015f19 l       .debug_str	00000000 
00024759 l       .debug_str	00000000 
00015d8d l       .debug_str	00000000 
000247ab l       .debug_str	00000000 
00015de4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19c5s2vweequjzfw
0000ee2f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00026502 l       .debug_str	00000000 
0002652b l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000265bc l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00026538 l       .debug_str	00000000 
0001519b l       .debug_str	00000000 
0000ce9f l       .debug_str	00000000 
000585d7 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00026561 l       .debug_str	00000000 
000265b6 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ee4e l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1bm86yaetip2rc3f
00026931 l       .debug_str	00000000 
00026799 l       .debug_str	00000000 
000267d5 l       .debug_str	00000000 
000267f1 l       .debug_str	00000000 
0002682d l       .debug_str	00000000 
00026863 l       .debug_str	00000000 
0002689f l       .debug_str	00000000 
000268aa l       .debug_str	00000000 
000268e6 l       .debug_str	00000000 
000268f4 l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
00026968 l       .debug_str	00000000 
000269a5 l       .debug_str	00000000 
000269b4 l       .debug_str	00000000 
000269f1 l       .debug_str	00000000 
00026a34 l       .debug_str	00000000 
00026a71 l       .debug_str	00000000 
0000ee34 l       .debug_str	00000000 
00026aa8 l       .debug_str	00000000 
00026ae6 l       .debug_str	00000000 
00026b1d l       .debug_str	00000000 
00026b5c l       .debug_str	00000000 
00026b95 l       .debug_str	00000000 
00026bf9 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00026c2e l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00026c49 l       .debug_str	00000000 
00026c8e l       .debug_str	00000000 
00026cab l       .debug_str	00000000 
000152bd l       .debug_str	00000000 
0001a8fb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
000014db l       .debug_str	00000000 
00015085 l       .debug_str	00000000 
0000c5cc l       .debug_str	00000000 
0000c86d l       .debug_str	00000000 
0000c878 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
0001a923 l       .debug_str	00000000 
000265c0 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00026cba l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
00026c3d l       .debug_str	00000000 
0000c9da l       .debug_str	00000000 
0005821a l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00026436 l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
0000cb5f l       .debug_str	00000000 
000265fa l       .debug_str	00000000 
00026c58 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000ee4e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000239c0 l       .debug_str	00000000 
00026c9d l       .debug_str	00000000 
0000ee2f l       .debug_str	00000000 
00026616 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0000ec97 l       .debug_str	00000000 
0000eca0 l       .debug_str	00000000 
0000ecae l       .debug_str	00000000 
0001a989 l       .debug_str	00000000 
0000c68a l       .debug_str	00000000 
0000ecc6 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
0000f676 l       .debug_str	00000000 
0000f681 l       .debug_str	00000000 
00002ff7 l       .debug_str	00000000 
00013302 l       .debug_str	00000000 
00058ec5 l       .debug_str	00000000 
00026623 l       .debug_str	00000000 
0002665c l       .debug_str	00000000 
000266f7 l       .debug_str	00000000 
00026751 l       .debug_str	00000000 
0002678d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1w4juabyv8bmed5v
00000d37 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00021161 l       .debug_str	00000000 
00026cfc l       .debug_str	00000000 
00026d47 l       .debug_str	00000000 
0000320d l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000210c0 l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
00033153 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00032c69 l       .debug_str	00000000 
00056352 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
0000351d l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c893 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00053fc4 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 25lz0dio8kzdubcg
00017cd5 l       .debug_str	00000000 
00054359 l       .debug_str	00000000 
0000cb4a l       .debug_str	00000000 
0000cd44 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00015028 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00026d79 l       .debug_str	00000000 
00026db7 l       .debug_str	00000000 
0000c9da l       .debug_str	00000000 
0005821a l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00026436 l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
0000cb5f l       .debug_str	00000000 
00026dd0 l       .debug_str	00000000 
00026e0e l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000545b3 l       .debug_str	00000000 
0000cd5d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2jbqb9ep0zzhh36j
0001e07a l       .debug_str	00000000 
00027a74 l       .debug_str	00000000 
00027a81 l       .debug_str	00000000 
00027ac1 l       .debug_str	00000000 
00027bbe l       .debug_str	00000000 
00027bfe l       .debug_str	00000000 
00027c0d l       .debug_str	00000000 
00027c4d l       .debug_str	00000000 
00027c6c l       .debug_str	00000000 
00027cac l       .debug_str	00000000 
00027cc8 l       .debug_str	00000000 
00027d08 l       .debug_str	00000000 
00027d16 l       .debug_str	00000000 
00027d56 l       .debug_str	00000000 
00058ec5 l       .debug_str	00000000 
0000c665 l       .debug_str	00000000 
0000ceb6 l       .debug_str	00000000 
0001eb8c l       .debug_str	00000000 
00000788 l       .debug_str	00000000 
00027d64 l       .debug_str	00000000 
00027da5 l       .debug_str	00000000 
0000c7f0 l       .debug_str	00000000 
00027dda l       .debug_str	00000000 
00013302 l       .debug_str	00000000 
00027de4 l       .debug_str	00000000 
00027e25 l       .debug_str	00000000 
0002109d l       .debug_str	00000000 
00027e72 l       .debug_str	00000000 
00027eb3 l       .debug_str	00000000 
00027ee8 l       .debug_str	00000000 
00027ef3 l       .debug_str	00000000 
00027f34 l       .debug_str	00000000 
00027f81 l       .debug_str	00000000 
00027fc2 l       .debug_str	00000000 
00027ff7 l       .debug_str	00000000 
00028066 l       .debug_str	00000000 
00028167 l       .debug_str	00000000 
0001f463 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000281d6 l       .debug_str	00000000 
000281f5 l       .debug_str	00000000 
000012f1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00018613 l       .debug_str	00000000 
00054211 l       .debug_str	00000000 
00005a9a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
0000c9da l       .debug_str	00000000 
0005821a l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00026436 l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
0000cb5f l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
0001799d l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e2f l       .debug_str	00000000 
00000e3a l       .debug_str	00000000 
00000e45 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e65 l       .debug_str	00000000 
00000e70 l       .debug_str	00000000 
00000e7b l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000e90 l       .debug_str	00000000 
00000e9b l       .debug_str	00000000 
00000ea8 l       .debug_str	00000000 
00000eb4 l       .debug_str	00000000 
00000ec1 l       .debug_str	00000000 
00000ecf l       .debug_str	00000000 
00000ed9 l       .debug_str	00000000 
00002082 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00037d9d l       .debug_str	00000000 
000281e5 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
0005a27c l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000c7ec l       .debug_str	00000000 
000598ca l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00006f86 l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
000061fa l       .debug_str	00000000 
00006fa2 l       .debug_str	00000000 
00026e37 l       .debug_str	00000000 
00026ea4 l       .debug_str	00000000 
00026f3a l       .debug_str	00000000 
000014c8 l       .debug_str	00000000 
000014d0 l       .debug_str	00000000 
000014d5 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0002f0c2 l       .debug_str	00000000 
000014df l       .debug_str	00000000 
000014e2 l       .debug_str	00000000 
0000150b l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
00001541 l       .debug_str	00000000 
0000166f l       .debug_str	00000000 
00007b68 l       .debug_str	00000000 
00007bb8 l       .debug_str	00000000 
00007c15 l       .debug_str	00000000 
0000fb27 l       .debug_str	00000000 
0000fb9e l       .debug_str	00000000 
0000fc22 l       .debug_str	00000000 
0000fc9d l       .debug_str	00000000 
0000fd3b l       .debug_str	00000000 
0000fde6 l       .debug_str	00000000 
00026ff9 l       .debug_str	00000000 
000270be l       .debug_str	00000000 
00027190 l       .debug_str	00000000 
00027259 l       .debug_str	00000000 
00027343 l       .debug_str	00000000 
0002744a l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
00027550 l       .debug_str	00000000 
0002764e l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002774f l       .debug_str	00000000 
0002782f l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
0002792d l       .debug_str	00000000 
00004daf l       .debug_str	00000000 
0000c7e7 l       .debug_str	00000000 
0002794d l       .debug_str	00000000 
00027954 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0002795c l       .debug_str	00000000 
00027970 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000279a2 l       .debug_str	00000000 
000279b6 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
000279e8 l       .debug_str	00000000 
00027a27 l       .debug_str	00000000 
00027a35 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2nk42jtdlqpdrpvo
0000fb27 l       .debug_str	00000000 
00028381 l       .debug_str	00000000 
0000d65d l       .debug_str	00000000 
0000d749 l       .debug_str	00000000 
0000d842 l       .debug_str	00000000 
00028474 l       .debug_str	00000000 
000284ec l       .debug_str	00000000 
00028606 l       .debug_str	00000000 
0002867e l       .debug_str	00000000 
0000fb9e l       .debug_str	00000000 
0000fc22 l       .debug_str	00000000 
0000fc9d l       .debug_str	00000000 
0000fd3b l       .debug_str	00000000 
0000fde6 l       .debug_str	00000000 
0002874a l       .debug_str	00000000 
000287c2 l       .debug_str	00000000 
0002888e l       .debug_str	00000000 
00028906 l       .debug_str	00000000 
000289ab l       .debug_str	00000000 
00028a23 l       .debug_str	00000000 
00028aa1 l       .debug_str	00000000 
00028b19 l       .debug_str	00000000 
00028b70 l       .debug_str	00000000 
00028be8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000014c8 l       .debug_str	00000000 
000014d0 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000014d5 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0002f0c2 l       .debug_str	00000000 
000014df l       .debug_str	00000000 
000014e2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000150b l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
00001541 l       .debug_str	00000000 
0000166f l       .debug_str	00000000 
00007b68 l       .debug_str	00000000 
00007bb8 l       .debug_str	00000000 
00007c15 l       .debug_str	00000000 
00028213 l       .debug_str	00000000 
0002828b l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
0000156e l       .debug_str	00000000 
000015be l       .debug_str	00000000 
0000161b l       .debug_str	00000000 
00001672 l       .debug_str	00000000 
000016e9 l       .debug_str	00000000 
0000176d l       .debug_str	00000000 
000017e8 l       .debug_str	00000000 
00001886 l       .debug_str	00000000 
00001931 l       .debug_str	00000000 
0000d3fd l       .debug_str	00000000 
0000d4c2 l       .debug_str	00000000 
0000d594 l       .debug_str	00000000 
00028309 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4f0czol4b3uljl4v
00000d05 l       .debug_str	00000000 
00028da6 l       .debug_str	00000000 
0000cb4a l       .debug_str	00000000 
0001121e l       .debug_str	00000000 
00028dc5 l       .debug_str	00000000 
00028e43 l       .debug_str	00000000 
000116a0 l       .debug_str	00000000 
00028ed3 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0001238c l       .debug_str	00000000 
0005677f l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
000114db l       .debug_str	00000000 
000054f3 l       .debug_str	00000000 
0005aa72 l       .debug_str	00000000 
00017e9a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0000513d l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00028c8d l       .debug_str	00000000 
00028d19 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000022e1 l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00002492 l       .debug_str	00000000 
0000c9da l       .debug_str	00000000 
0005821a l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00026436 l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
0000cb5f l       .debug_str	00000000 
00028d28 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53kqumdi8360wwys
000294d3 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
0000ec97 l       .debug_str	00000000 
0000eca0 l       .debug_str	00000000 
0000ecae l       .debug_str	00000000 
0001a989 l       .debug_str	00000000 
0000ecc6 l       .debug_str	00000000 
000266f7 l       .debug_str	00000000 
0002934f l       .debug_str	00000000 
0002940c l       .debug_str	00000000 
00029447 l       .debug_str	00000000 
000294a0 l       .debug_str	00000000 
00026bf9 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00029556 l       .debug_str	00000000 
000295ba l       .debug_str	00000000 
0000c886 l       .debug_str	00000000 
000295bd l       .debug_str	00000000 
0000f6a7 l       .debug_str	00000000 
00015085 l       .debug_str	00000000 
000265c0 l       .debug_str	00000000 
00026cba l       .debug_str	00000000 
000535b4 l       .debug_str	00000000 
0005aed4 l       .debug_str	00000000 
0002962d l       .debug_str	00000000 
00029630 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00013302 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00011fee l       .debug_str	00000000 
0001a878 l       .debug_str	00000000 
0001a9e1 l       .debug_str	00000000 
00021341 l       .debug_str	00000000 
0002963d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c5cc l       .debug_str	00000000 
0000f676 l       .debug_str	00000000 
0000f681 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00002ff7 l       .debug_str	00000000 
0000f68b l       .debug_str	00000000 
0000ecc0 l       .debug_str	00000000 
0000c84d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0001a8d8 l       .debug_str	00000000 
0000f694 l       .debug_str	00000000 
0000c85c l       .debug_str	00000000 
0000c862 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c86d l       .debug_str	00000000 
0000c878 l       .debug_str	00000000 
0001a923 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00026c58 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
0000c88c l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002e20e l       .debug_str	00000000 
00029658 l       .debug_str	00000000 
0000c68a l       .debug_str	00000000 
00029581 l       .debug_str	00000000 
00028f5a l       .debug_str	00000000 
00028ff7 l       .debug_str	00000000 
00029030 l       .debug_str	00000000 
000290cf l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
000295ec l       .debug_str	00000000 
00029108 l       .debug_str	00000000 
000291a5 l       .debug_str	00000000 
000291d9 l       .debug_str	00000000 
0002927c l       .debug_str	00000000 
0002931b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 tool5db1zbl71ep
0002963d l       .debug_str	00000000 
00029658 l       .debug_str	00000000 
000296fc l       .debug_str	00000000 
00029771 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00011fee l       .debug_str	00000000 
00026c49 l       .debug_str	00000000 
0001a9e1 l       .debug_str	00000000 
00021341 l       .debug_str	00000000 
0000ac36 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c5cc l       .debug_str	00000000 
0000c85c l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0000c86d l       .debug_str	00000000 
0000c878 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
0001a923 l       .debug_str	00000000 
0002e20e l       .debug_str	00000000 
0002968d l       .debug_str	00000000 
00026bf9 l       .debug_str	00000000 
0000c862 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00026c58 l       .debug_str	00000000 
0000c87f l       .debug_str	00000000 
0000c88c l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ik332mkg6tevaet
0000bfd6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00011aab l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c665 l       .debug_str	00000000 
00011c91 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00011c8a l       .debug_str	00000000 
000297a8 l       .debug_str	00000000 
00011f6d l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
00013302 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1d7thnxtm1658vov
00000d1e l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00021161 l       .debug_str	00000000 
0002986d l       .debug_str	00000000 
000298aa l       .debug_str	00000000 
000298bb l       .debug_str	00000000 
0000320d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
00033153 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00032c69 l       .debug_str	00000000 
00056352 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
0000351d l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c893 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00053fc4 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1mpt8t9sy9fl5s1y
00029ab2 l       .debug_str	00000000 
0000ee4e l       .debug_str	00000000 
00029931 l       .debug_str	00000000 
0001af41 l       .debug_str	00000000 
00029976 l       .debug_str	00000000 
000299bb l       .debug_str	00000000 
000299c8 l       .debug_str	00000000 
00029a0d l       .debug_str	00000000 
00029a1a l       .debug_str	00000000 
0001cf68 l       .debug_str	00000000 
00029a5f l       .debug_str	00000000 
0000c330 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
00029aa7 l       .debug_str	00000000 
0000c3ea l       .debug_str	00000000 
00029afa l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
00029b40 l       .debug_str	00000000 
00029b86 l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000c408 l       .debug_str	00000000 
00056340 l       .debug_str	00000000 
00004056 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00058156 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
000298ed l       .debug_str	00000000 
0000c2db l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1yr11byuhnx447wf
00021014 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000532af l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
0001799d l       .debug_str	00000000 
00013b8c l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
000212a5 l       .debug_str	00000000 
0002db7b l       .debug_str	00000000 
00013b91 l       .debug_str	00000000 
00021100 l       .debug_str	00000000 
00013b88 l       .debug_str	00000000 
000212ab l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00029bcc l       .debug_str	00000000 
0001afe2 l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
000210fa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2c4l9zx47vkj1m82
0002f4a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00014824 l       .debug_str	00000000 
00058156 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00029c35 l       .debug_str	00000000 
000557f6 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2zdnjadro4igct6r
0001b482 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00029ca4 l       .debug_str	00000000 
00029cca l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3w7pruxfhz9uhnv5
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0000513d l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00053e08 l       .debug_str	00000000 
0001238c l       .debug_str	00000000 
0005677f l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
0005aa72 l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00017e9a l       .debug_str	00000000 
000241ed l       .debug_str	00000000 
00029cd3 l       .debug_str	00000000 
00029d4f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
000051e3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4wduwt141qumn59z
0000ac36 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00057f3a l       .debug_str	00000000 
0002cb8e l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00021014 l       .debug_str	00000000 
00029d7c l       .debug_str	00000000 
00014821 l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 pcinnba97cylogg
00017cd5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0001425f l       .debug_str	00000000 
0001238c l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00029dde l       .debug_str	00000000 
00017cc7 l       .debug_str	00000000 
0001575f l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ee4e l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0000ac36 l       .debug_str	00000000 
00053e37 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 13ma8mzaba1sllzw
00022c83 l       .debug_str	00000000 
00037d9d l       .debug_str	00000000 
0000512e l       .debug_str	00000000 
0002a5ec l       .debug_str	00000000 
00023170 l       .debug_str	00000000 
0002a66b l       .debug_str	00000000 
00022f40 l       .debug_str	00000000 
0002a6ea l       .debug_str	00000000 
0002a76c l       .debug_str	00000000 
000239c0 l       .debug_str	00000000 
0002a962 l       .debug_str	00000000 
0002a9e4 l       .debug_str	00000000 
0002aa2d l       .debug_str	00000000 
0002aaaf l       .debug_str	00000000 
0002aca5 l       .debug_str	00000000 
0002ad27 l       .debug_str	00000000 
0002ad70 l       .debug_str	00000000 
0002adf2 l       .debug_str	00000000 
0002afe8 l       .debug_str	00000000 
0002b06a l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
0002b0b3 l       .debug_str	00000000 
0002b127 l       .debug_str	00000000 
00002b98 l       .debug_str	00000000 
00021014 l       .debug_str	00000000 
0001425f l       .debug_str	00000000 
0000513d l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000b00f l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002ef08 l       .debug_str	00000000 
0005aa72 l       .debug_str	00000000 
0000ac36 l       .debug_str	00000000 
0000b018 l       .debug_str	00000000 
000152ad l       .debug_str	00000000 
0005a97d l       .debug_str	00000000 
00002ff5 l       .debug_str	00000000 
00012bbf l       .debug_str	00000000 
0002b348 l       .debug_str	00000000 
0002b565 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000012fa l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
000598ca l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00001322 l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
00001330 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
00006f86 l       .debug_str	00000000 
000014c8 l       .debug_str	00000000 
000014d0 l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000014d5 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0002f0c2 l       .debug_str	00000000 
000014df l       .debug_str	00000000 
000014e2 l       .debug_str	00000000 
0000150b l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
00001541 l       .debug_str	00000000 
0000a844 l       .debug_str	00000000 
0000a892 l       .debug_str	00000000 
0000a8fd l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
0002b0c5 l       .debug_str	00000000 
000061fa l       .debug_str	00000000 
00006fa2 l       .debug_str	00000000 
00006fe7 l       .debug_str	00000000 
00007055 l       .debug_str	00000000 
000070ec l       .debug_str	00000000 
000071ac l       .debug_str	00000000 
00007295 l       .debug_str	00000000 
000073a7 l       .debug_str	00000000 
000074e2 l       .debug_str	00000000 
00007646 l       .debug_str	00000000 
000077d3 l       .debug_str	00000000 
00007989 l       .debug_str	00000000 
0000166f l       .debug_str	00000000 
00007b68 l       .debug_str	00000000 
00007bb8 l       .debug_str	00000000 
00007c15 l       .debug_str	00000000 
00007c69 l       .debug_str	00000000 
00007ce0 l       .debug_str	00000000 
00007d64 l       .debug_str	00000000 
00007ddf l       .debug_str	00000000 
00007e7d l       .debug_str	00000000 
00007f28 l       .debug_str	00000000 
00007fca l       .debug_str	00000000 
0000808f l       .debug_str	00000000 
00008161 l       .debug_str	00000000 
0000822a l       .debug_str	00000000 
00008316 l       .debug_str	00000000 
0000840f l       .debug_str	00000000 
000084ff l       .debug_str	00000000 
00008612 l       .debug_str	00000000 
00008732 l       .debug_str	00000000 
00008849 l       .debug_str	00000000 
00008983 l       .debug_str	00000000 
00008aca l       .debug_str	00000000 
00008c08 l       .debug_str	00000000 
00008d69 l       .debug_str	00000000 
00008ed7 l       .debug_str	00000000 
0000903c l       .debug_str	00000000 
000091c4 l       .debug_str	00000000 
00009359 l       .debug_str	00000000 
000094e5 l       .debug_str	00000000 
00009694 l       .debug_str	00000000 
00009850 l       .debug_str	00000000 
00009a03 l       .debug_str	00000000 
00009bd9 l       .debug_str	00000000 
00009dbc l       .debug_str	00000000 
00009f96 l       .debug_str	00000000 
0000a191 l       .debug_str	00000000 
0000a3a9 l       .debug_str	00000000 
0002b139 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00029e30 l       .debug_str	00000000 
00029eb7 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
000051e3 l       .debug_str	00000000 
00029f04 l       .debug_str	00000000 
00029f8b l       .debug_str	00000000 
0002a185 l       .debug_str	00000000 
0002a20e l       .debug_str	00000000 
0002a40a l       .debug_str	00000000 
0002a493 l       .debug_str	00000000 
0002a4e2 l       .debug_str	00000000 
0002a56e l       .debug_str	00000000 
00022ebe l       .debug_str	00000000 
0001e020 l     O .text	0000001c str.0
0001e060 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 4miap3quw76e3k6m
00000beb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000117f4 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0005a97d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002b5d5 l       .debug_str	00000000 
0000b661 l       .debug_str	00000000 
000012f5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4yl298udq4i2eqhh
000012f5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00014287 l       .debug_str	00000000 
0002cb8e l       .debug_str	00000000 
0000ac36 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0002b625 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 f8ebwo3yn0ryfmw
0002bcd1 l       .debug_str	00000000 
00008aca l       .debug_str	00000000 
00008c08 l       .debug_str	00000000 
00008d69 l       .debug_str	00000000 
00008ed7 l       .debug_str	00000000 
0002b8ea l       .debug_str	00000000 
0002b962 l       .debug_str	00000000 
0002baf1 l       .debug_str	00000000 
0002bb69 l       .debug_str	00000000 
0002bd49 l       .debug_str	00000000 
0002bdc7 l       .debug_str	00000000 
0002be3f l       .debug_str	00000000 
0000903c l       .debug_str	00000000 
000091c4 l       .debug_str	00000000 
00009359 l       .debug_str	00000000 
000094e5 l       .debug_str	00000000 
00009694 l       .debug_str	00000000 
00009850 l       .debug_str	00000000 
0002bf32 l       .debug_str	00000000 
0002bfaa l       .debug_str	00000000 
0002c187 l       .debug_str	00000000 
0002c1ff l       .debug_str	00000000 
0002c2cb l       .debug_str	00000000 
0002c343 l       .debug_str	00000000 
0002c373 l       .debug_str	00000000 
0002c3eb l       .debug_str	00000000 
0002c490 l       .debug_str	00000000 
0002c508 l       .debug_str	00000000 
0002c649 l       .debug_str	00000000 
0002c6c1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000014c8 l       .debug_str	00000000 
000014d0 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000014d5 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0002f0c2 l       .debug_str	00000000 
000014df l       .debug_str	00000000 
000014e2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000150b l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
00001541 l       .debug_str	00000000 
0000166f l       .debug_str	00000000 
0002b689 l       .debug_str	00000000 
0002b701 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00007b68 l       .debug_str	00000000 
00007bb8 l       .debug_str	00000000 
00007c15 l       .debug_str	00000000 
00007c69 l       .debug_str	00000000 
00007ce0 l       .debug_str	00000000 
00007d64 l       .debug_str	00000000 
00007ddf l       .debug_str	00000000 
00007e7d l       .debug_str	00000000 
00007f28 l       .debug_str	00000000 
00007fca l       .debug_str	00000000 
0000808f l       .debug_str	00000000 
00008161 l       .debug_str	00000000 
0000822a l       .debug_str	00000000 
00008316 l       .debug_str	00000000 
0000840f l       .debug_str	00000000 
0002b758 l       .debug_str	00000000 
0002b7d0 l       .debug_str	00000000 
000084ff l       .debug_str	00000000 
00008612 l       .debug_str	00000000 
00008732 l       .debug_str	00000000 
00008849 l       .debug_str	00000000 
00008983 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16gyyaet005v3lvf
000265b6 l       .debug_str	00000000 
0002c877 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002c8d7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000014c8 l       .debug_str	00000000 
0002f0c2 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2leljxexqh8ze7wz
0002f4a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c40c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00014824 l       .debug_str	00000000 
00058156 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0002c937 l       .debug_str	00000000 
000557f6 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 26y0fjfhtczgcip1
00054359 l       .debug_str	00000000 
0002cad1 l       .debug_str	00000000 
0002caed l       .debug_str	00000000 
0002cb13 l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00003b5b l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000572a9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002c9a8 l       .debug_str	00000000 
0001519b l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
0002c9d1 l       .debug_str	00000000 
0002c9e2 l       .debug_str	00000000 
0002c9f2 l       .debug_str	00000000 
0002ca3e l       .debug_str	00000000 
0002ca49 l       .debug_str	00000000 
0002ca7f l       .debug_str	00000000 
0002ca97 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3529eu2hb2fyibnd
00017d7c l       .debug_str	00000000 
00017db6 l       .debug_str	00000000 
00017def l       .debug_str	00000000 
00017dfe l       .debug_str	00000000 
00017e41 l       .debug_str	00000000 
00055884 l       .debug_str	00000000 
0003220f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0001506b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
00015085 l       .debug_str	00000000 
00015089 l       .debug_str	00000000 
00017df8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002cb1c l       .debug_str	00000000 
000150b6 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
0002cb45 l       .debug_str	00000000 
00003b4f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00000ee8 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cyvbl47c30y60eb
00055aa5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00014824 l       .debug_str	00000000 
00058156 l       .debug_str	00000000 
0002cb81 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0002cb94 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
0002cc20 l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
0002cc29 l       .debug_str	00000000 
00037d9d l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
0002cc39 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19nunfeq6523tst5
000265b6 l       .debug_str	00000000 
0002cc60 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002ccc0 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000014c8 l       .debug_str	00000000 
0002f0c2 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1xpo0qpsduc6enem
0002cd8c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000014c8 l       .debug_str	00000000 
000014d0 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0002cd20 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4xxoizn3g1nl6m5i
0002f4a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00002cdc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00014824 l       .debug_str	00000000 
00058156 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0002cd95 l       .debug_str	00000000 
000557f6 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.b09zx0wt-cgu.0
00000afc l       .debug_str	00000000 
0002ce06 l       .debug_str	00000000 
0002ce19 l       .debug_str	00000000 
00014fed l       .debug_str	00000000 
00058156 l       .debug_str	00000000 
0002ce4a l       .debug_str	00000000 
0002ce52 l       .debug_str	00000000 
0002ce5b l       .debug_str	00000000 
0002cea4 l       .debug_str	00000000 
00006760 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0002ce62 l       .debug_str	00000000 
0002cea1 l       .debug_str	00000000 
0002ceaa l       .debug_str	00000000 
0002ceec l       .debug_str	00000000 
0002cef6 l       .debug_str	00000000 
0002cf39 l       .debug_str	00000000 
0002cf43 l       .debug_str	00000000 
0002cf86 l       .debug_str	00000000 
0002cf90 l       .debug_str	00000000 
0002cfd3 l       .debug_str	00000000 
0002cfde l       .debug_str	00000000 
0002d023 l       .debug_str	00000000 
0002d02e l       .debug_str	00000000 
0002d073 l       .debug_str	00000000 
0002d079 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ee30 l       .debug_str	00000000 
000014db l       .debug_str	00000000 
0002d6ae l       .debug_str	00000000 
00015085 l       .debug_str	00000000 
0002d086 l       .debug_str	00000000 
0002d096 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001425f l       .debug_str	00000000 
00013258 l       .debug_str	00000000 
00014249 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000513d l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000b00f l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002ef08 l       .debug_str	00000000 
0005aa72 l       .debug_str	00000000 
000013a5 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
0000ac36 l       .debug_str	00000000 
0000b018 l       .debug_str	00000000 
000152ad l       .debug_str	00000000 
000264ab l       .debug_str	00000000 
00003518 l       .debug_str	00000000 
0002d0dc l       .debug_str	00000000 
000241ed l       .debug_str	00000000 
00058ec5 l       .debug_str	00000000 
0002dab2 l       .debug_str	00000000 
00014251 l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005432d l       .debug_str	00000000 
0002d0ee l       .debug_str	00000000 
0002d0f3 l       .debug_str	00000000 
0005a44d l       .debug_str	00000000 
0002d0fe l       .debug_str	00000000 
00000326 l       .debug_str	00000000 
0002d108 l       .debug_str	00000000 
0002d77c l       .debug_str	00000000 
0002d112 l       .debug_str	00000000 
00017cd5 l       .debug_str	00000000 
0002d7bc l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0002daf5 l       .debug_str	00000000 
0001425b l       .debug_str	00000000 
00001340 l       .debug_str	00000000 
0002d120 l       .debug_str	00000000 
0002d194 l       .debug_str	00000000 
0002d9d6 l       .debug_str	00000000 
0002d1a6 l       .debug_str	00000000 
0002d7c2 l       .debug_str	00000000 
0002d79c l       .debug_str	00000000 
00016761 l       .debug_str	00000000 
0002da19 l       .debug_str	00000000 
0002d1ab l       .debug_str	00000000 
0002d21f l       .debug_str	00000000 
0002db2e l       .debug_str	00000000 
0002db75 l       .debug_str	00000000 
0002da7b l       .debug_str	00000000 
0002d237 l       .debug_str	00000000 
0003d30a l       .debug_str	00000000 
00032a29 l       .debug_str	00000000 
000542dc l       .debug_str	00000000 
0002db90 l       .debug_str	00000000 
0002da4a l       .debug_str	00000000 
0002d2af l       .debug_str	00000000 
00005a9a l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000580e3 l       .debug_str	00000000 
000239c0 l       .debug_str	00000000 
0002d307 l       .debug_str	00000000 
0002d30c l       .debug_str	00000000 
0002d31e l       .debug_str	00000000 
0001e07a l       .debug_str	00000000 
0002e20e l       .debug_str	00000000 
0002d327 l       .debug_str	00000000 
0001c1b2 l       .debug_str	00000000 
0002d34f l       .debug_str	00000000 
0002d35f l       .debug_str	00000000 
0005677f l       .debug_str	00000000 
0002d3b8 l       .debug_str	00000000 
0002d3c0 l       .debug_str	00000000 
0001523d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00012099 l       .debug_str	00000000 
0002d3c8 l       .debug_str	00000000 
00017f02 l       .debug_str	00000000 
0002d3d4 l       .debug_str	00000000 
0002d3de l       .debug_str	00000000 
0002d3eb l       .debug_str	00000000 
0002d3f8 l       .debug_str	00000000 
0002d40d l       .debug_str	00000000 
0002d421 l       .debug_str	00000000 
0002d437 l       .debug_str	00000000 
0002d43f l       .debug_str	00000000 
0002d44c l       .debug_str	00000000 
0002d459 l       .debug_str	00000000 
0002dd62 l       .debug_str	00000000 
0000c68a l       .debug_str	00000000 
0002d466 l       .debug_str	00000000 
0002d493 l       .debug_str	00000000 
0002d4c2 l       .debug_str	00000000 
0002d4e9 l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
0002d508 l       .debug_str	00000000 
0002d51d l       .debug_str	00000000 
0001bbd4 l       .debug_str	00000000 
000481ae l       .debug_str	00000000 
0000bb60 l       .debug_str	00000000 
00053f3b l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
0002d527 l       .debug_str	00000000 
0002d54c l       .debug_str	00000000 
0002d532 l       .debug_str	00000000 
0002d5cb l       .debug_str	00000000 
0002d55c l       .debug_str	00000000 
0002d562 l       .debug_str	00000000 
0002d571 l       .debug_str	00000000 
0002d57c l       .debug_str	00000000 
0002d5b1 l       .debug_str	00000000 
0002d5d6 l       .debug_str	00000000 
0002d5e6 l       .debug_str	00000000 
00054b45 l       .debug_str	00000000 
0002d618 l       .debug_str	00000000 
0002d61d l       .debug_str	00000000 
000559e8 l       .debug_str	00000000 
0002ee82 l       .debug_str	00000000 
0002ee7b l       .debug_str	00000000 
00014287 l       .debug_str	00000000 
0002eea9 l       .debug_str	00000000 
0002eedd l       .debug_str	00000000 
0002d623 l       .debug_str	00000000 
0000131d l       .debug_str	00000000 
0002d661 l       .debug_str	00000000 
0002ee86 l       .debug_str	00000000 
0002eed3 l       .debug_str	00000000 
0002d642 l       .debug_str	00000000 
0002d62f l       .debug_str	00000000 
0002d648 l       .debug_str	00000000 
000239bf l       .debug_str	00000000 
0000bfd6 l       .debug_str	00000000 
0000bfd5 l       .debug_str	00000000 
0002d670 l       .debug_str	00000000 
0002d678 l       .debug_str	00000000 
00038b41 l       .debug_str	00000000 
0002d67e l       .debug_str	00000000 
0004666c l       .debug_str	00000000 
0002d6a5 l       .debug_str	00000000 
0002d689 l       .debug_str	00000000 
0000ee2f l       .debug_str	00000000 
0002d6ad l       .debug_str	00000000 
0002d359 l       .debug_str	00000000 
00024353 l       .debug_str	00000000 
0002640b l       .debug_str	00000000 
0002d6b2 l       .debug_str	00000000 
0002d6d6 l       .debug_str	00000000 
0002d6dc l       .debug_str	00000000 
0002d6e4 l       .debug_str	00000000 
00048cd7 l       .debug_str	00000000 
0003873d l       .debug_str	00000000 
0002d6e9 l       .debug_str	00000000 
0002d711 l       .debug_str	00000000 
0002d6f3 l       .debug_str	00000000 
000022e8 l       .debug_str	00000000 
0001a869 l       .debug_str	00000000 
00017d75 l       .debug_str	00000000 
000210c0 l       .debug_str	00000000 
0002435b l       .debug_str	00000000 
00024368 l       .debug_str	00000000 
00024371 l       .debug_str	00000000 
000532a3 l       .debug_str	00000000 
0002d725 l       .debug_str	00000000 
0002d719 l       .debug_str	00000000 
00014824 l       .debug_str	00000000 
0002d732 l       .debug_str	00000000 
0002d73e l       .debug_str	00000000 
0002d761 l       .debug_str	00000000 
0002d74b l       .debug_str	00000000 
0002d76f l       .debug_str	00000000 
0002d78f l       .debug_str	00000000 
0002d7af l       .debug_str	00000000 
0002d7ca l       .debug_str	00000000 
0002d7e5 l       .debug_str	00000000 
0002d7eb l       .debug_str	00000000 
0002d7ef l       .debug_str	00000000 
0002d800 l       .debug_str	00000000 
0002d7f3 l       .debug_str	00000000 
00000ee6 l       .debug_str	00000000 
00000eea l       .debug_str	00000000 
00000ef5 l       .debug_str	00000000 
00000f2a l       .debug_str	00000000 
00000f1a l       .debug_str	00000000 
0002d815 l       .debug_str	00000000 
0002d810 l       .debug_str	00000000 
0002d828 l       .debug_str	00000000 
0002d874 l       .debug_str	00000000 
0002d84d l       .debug_str	00000000 
0002d864 l       .debug_str	00000000 
0002d88e l       .debug_str	00000000 
0002d87f l       .debug_str	00000000 
0002d8d6 l       .debug_str	00000000 
0002d8b6 l       .debug_str	00000000 
0002d92f l       .debug_str	00000000 
0002d90f l       .debug_str	00000000 
00053295 l       .debug_str	00000000 
0002d986 l       .debug_str	00000000 
0002d98b l       .debug_str	00000000 
0002d991 l       .debug_str	00000000 
0002d9b4 l       .debug_str	00000000 
0002d996 l       .debug_str	00000000 
0002d9bf l       .debug_str	00000000 
0002da0a l       .debug_str	00000000 
0002da3b l       .debug_str	00000000 
0002da6c l       .debug_str	00000000 
0002da9b l       .debug_str	00000000 
0002dae6 l       .debug_str	00000000 
0002db17 l       .debug_str	00000000 
0001bfd1 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00033153 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
00032c69 l       .debug_str	00000000 
00056352 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0005a98c l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0000351d l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c893 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
00053fc4 l       .debug_str	00000000 
00053ec5 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00020fe4 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
00021161 l       .debug_str	00000000 
00021155 l       .debug_str	00000000 
00020f92 l       .debug_str	00000000 
0002db68 l       .debug_str	00000000 
0002db81 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
0002dbaf l       .debug_str	00000000 
0002dbae l       .debug_str	00000000 
0002dbc3 l       .debug_str	00000000 
0002dbb4 l       .debug_str	00000000 
00053fb6 l       .debug_str	00000000 
00053283 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
0002dbf0 l       .debug_str	00000000 
0002dbe2 l       .debug_str	00000000 
0002dbe1 l       .debug_str	00000000 
000210c9 l       .debug_str	00000000 
0001a873 l       .debug_str	00000000 
0005adc2 l       .debug_str	00000000 
0002dbf9 l       .debug_str	00000000 
0002dbfd l       .debug_str	00000000 
0002dc00 l       .debug_str	00000000 
000598b2 l       .debug_str	00000000 
0001a857 l       .debug_str	00000000 
0002dc03 l       .debug_str	00000000 
0001bb4c l       .debug_str	00000000 
0002dc07 l       .debug_str	00000000 
0002dc06 l       .debug_str	00000000 
0002dc0c l       .debug_str	00000000 
0002dcde l       .debug_str	00000000 
00000238 l       .debug_str	00000000 
0002dc2a l       .debug_str	00000000 
0002dc18 l       .debug_str	00000000 
0002dc4f l       .debug_str	00000000 
0002dd17 l       .debug_str	00000000 
0002dc6d l       .debug_str	00000000 
0002dc5b l       .debug_str	00000000 
0002dc92 l       .debug_str	00000000 
0002dcab l       .debug_str	00000000 
0002dc99 l       .debug_str	00000000 
0002dcb7 l       .debug_str	00000000 
0002dccf l       .debug_str	00000000 
0002dd08 l       .debug_str	00000000 
0001bb52 l       .debug_str	00000000 
0002dd41 l       .debug_str	00000000 
0002dd4e l       .debug_str	00000000 
0002dd4d l       .debug_str	00000000 
0002dd56 l       .debug_str	00000000 
0002dd83 l       .debug_str	00000000 
0002dd6e l       .debug_str	00000000 
0002dda0 l       .debug_str	00000000 
0002ddac l       .debug_str	00000000 
0002de56 l       .debug_str	00000000 
0002ddb8 l       .debug_str	00000000 
0002ddbf l       .debug_str	00000000 
0002ddc8 l       .debug_str	00000000 
0002ddd6 l       .debug_str	00000000 
0002dddd l       .debug_str	00000000 
0002dde5 l       .debug_str	00000000 
0002ddec l       .debug_str	00000000 
0002de32 l       .debug_str	00000000 
0002de0d l       .debug_str	00000000 
0002ddf8 l       .debug_str	00000000 
0002de1d l       .debug_str	00000000 
0002de41 l       .debug_str	00000000 
0000ee4e l       .debug_str	00000000 
0002de62 l       .debug_str	00000000 
0002641e l       .debug_str	00000000 
0005779c l       .debug_str	00000000 
00020f05 l       .debug_str	00000000 
00020eee l       .debug_str	00000000 
0002de7c l       .debug_str	00000000 
0002de9f l       .debug_str	00000000 
0002de88 l       .debug_str	00000000 
0002dee9 l       .debug_str	00000000 
0002dedd l       .debug_str	00000000 
0002d354 l       .debug_str	00000000 
0002df06 l       .debug_str	00000000 
0002deef l       .debug_str	00000000 
0002df4f l       .debug_str	00000000 
0002df77 l       .debug_str	00000000 
0002df60 l       .debug_str	00000000 
00056340 l       .debug_str	00000000 
00004056 l       .debug_str	00000000 
000543cb l       .debug_str	00000000 
0002e026 l       .debug_str	00000000 
0002e008 l       .debug_str	00000000 
0002e11c l       .debug_str	00000000 
0002e0fc l       .debug_str	00000000 
0002e18f l       .debug_str	00000000 
0002e16f l       .debug_str	00000000 
00044795 l       .debug_str	00000000 
0002e1e2 l       .debug_str	00000000 
0002e1ef l       .debug_str	00000000 
0002e1fa l       .debug_str	00000000 
0002e210 l       .debug_str	00000000 
0002e21a l       .debug_str	00000000 
0002e270 l       .debug_str	00000000 
0002e282 l       .debug_str	00000000 
0002e2d4 l       .debug_str	00000000 
0002e2e8 l       .debug_str	00000000 
0002e33c l       .debug_str	00000000 
0002e343 l       .debug_str	00000000 
0002e389 l       .debug_str	00000000 
0002e398 l       .debug_str	00000000 
0002e3f2 l       .debug_str	00000000 
0002e448 l       .debug_str	00000000 
0002e4a0 l       .debug_str	00000000 
0002e4ea l       .debug_str	00000000 
0002e4f0 l       .debug_str	00000000 
0002e540 l       .debug_str	00000000 
0002e58c l       .debug_str	00000000 
0002e5da l       .debug_str	00000000 
000264c4 l       .debug_str	00000000 
0002e61a l       .debug_str	00000000 
0002e667 l       .debug_str	00000000 
0002e6b0 l       .debug_str	00000000 
0002e6fb l       .debug_str	00000000 
0002e738 l       .debug_str	00000000 
0002e748 l       .debug_str	00000000 
0002e7a3 l       .debug_str	00000000 
0002e7fa l       .debug_str	00000000 
0002e853 l       .debug_str	00000000 
0003bb29 l       .debug_str	00000000 
0002e89e l       .debug_str	00000000 
0002e8f2 l       .debug_str	00000000 
0002e942 l       .debug_str	00000000 
0002e994 l       .debug_str	00000000 
00053e37 l       .debug_str	00000000 
0002e9d8 l       .debug_str	00000000 
0002ea24 l       .debug_str	00000000 
0002ea6c l       .debug_str	00000000 
0002eab6 l       .debug_str	00000000 
0003b95f l       .debug_str	00000000 
0002eaf2 l       .debug_str	00000000 
0002eb46 l       .debug_str	00000000 
0002eb96 l       .debug_str	00000000 
0002ebe8 l       .debug_str	00000000 
0002ec2c l       .debug_str	00000000 
0002ec38 l       .debug_str	00000000 
0002ec8f l       .debug_str	00000000 
0002ece2 l       .debug_str	00000000 
0002ed37 l       .debug_str	00000000 
0002ed7e l       .debug_str	00000000 
0002ed8a l       .debug_str	00000000 
0002eda1 l       .debug_str	00000000 
0002ed9a l       .debug_str	00000000 
0002edb3 l       .debug_str	00000000 
0002edc8 l       .debug_str	00000000 
0002ee19 l       .debug_str	00000000 
0002ee29 l       .debug_str	00000000 
0002ee7a l       .debug_str	00000000 
0002ee85 l       .debug_str	00000000 
0002eea8 l       .debug_str	00000000 
0002eedc l       .debug_str	00000000 
0002eef2 l       .debug_str	00000000 
0002ef20 l       .debug_str	00000000 
0002ef14 l       .debug_str	00000000 
0002ef2e l       .debug_str	00000000 
0002ef2d l       .debug_str	00000000 
0000333b l       .debug_str	00000000 
0001a85f l       .debug_str	00000000 
00026431 l       .debug_str	00000000 
00026430 l       .debug_str	00000000 
00026436 l       .debug_str	00000000 
00026435 l       .debug_str	00000000 
0002ef31 l       .debug_str	00000000 
0002ef71 l       .debug_str	00000000 
0002ef79 l       .debug_str	00000000 
0002efb9 l       .debug_str	00000000 
0002efc3 l       .debug_str	00000000 
000533cf l       .debug_str	00000000 
00057f3a l       .debug_str	00000000 
0002efff l       .debug_str	00000000 
0001cd40 l       .debug_str	00000000 
00031e1f l       .debug_str	00000000 
0002f027 l       .debug_str	00000000 
0001cbf8 l       .debug_str	00000000 
0002f050 l       .debug_str	00000000 
0002f075 l       .debug_str	00000000 
0003ffad l       .debug_str	00000000 
00054425 l       .debug_str	00000000 
0002f07c l       .debug_str	00000000 
0002f085 l       .debug_str	00000000 
0002f0be l       .debug_str	00000000 
0001238c l       .debug_str	00000000 
0002f0c6 l       .debug_str	00000000 
0001600f l       .debug_str	00000000 
0002f15b l       .debug_str	00000000 
0000c330 l       .debug_str	00000000 
0002f1a6 l       .debug_str	00000000 
0000c2db l       .debug_str	00000000 
0002f1ed l       .debug_str	00000000 
0001575f l       .debug_str	00000000 
0002f242 l       .debug_str	00000000 
0002f27f l       .debug_str	00000000 
0000c441 l       .debug_str	00000000 
0002f28a l       .debug_str	00000000 
00015f19 l       .debug_str	00000000 
0002f2df l       .debug_str	00000000 
00015ea9 l       .debug_str	00000000 
0002f331 l       .debug_str	00000000 
0000b006 l       .debug_str	00000000 
0002f378 l       .debug_str	00000000 
0000b001 l       .debug_str	00000000 
0000456e l       .debug_str	00000000 
0001491d l       .debug_str	00000000 
0002fd82 l       .debug_str	00000000 
0002f3fe l       .debug_str	00000000 
0002f43f l       .debug_str	00000000 
0002f462 l       .debug_str	00000000 
0002f49d l       .debug_str	00000000 
0002f4a7 l       .debug_str	00000000 
0002f531 l       .debug_str	00000000 
0002f563 l       .debug_str	00000000 
00014d61 l       .debug_str	00000000 
000117f4 l       .debug_str	00000000 
0002f5d7 l       .debug_str	00000000 
0002f628 l       .debug_str	00000000 
00015288 l       .debug_str	00000000 
0002f66a l       .debug_str	00000000 
0002f6f1 l       .debug_str	00000000 
0002f700 l       .debug_str	00000000 
0002f78a l       .debug_str	00000000 
0002f806 l       .debug_str	00000000 
0002f836 l       .debug_str	00000000 
0002f871 l       .debug_str	00000000 
0002f87b l       .debug_str	00000000 
00005282 l       .debug_str	00000000 
0002f8f2 l       .debug_str	00000000 
0002f947 l       .debug_str	00000000 
0002f950 l       .debug_str	00000000 
0002f9a1 l       .debug_str	00000000 
00006f6b l       .debug_str	00000000 
0002f9ad l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
0002f9ba l       .debug_str	00000000 
0002f9c3 l       .debug_str	00000000 
0002f9d9 l       .debug_str	00000000 
0002f9e6 l       .debug_str	00000000 
0002fa2b l       .debug_str	00000000 
0002fa3f l       .debug_str	00000000 
0002fa94 l       .debug_str	00000000 
0002fa9d l       .debug_str	00000000 
00046c4c l       .debug_str	00000000 
0002fad5 l       .debug_str	00000000 
0002fb12 l       .debug_str	00000000 
0002fb1d l       .debug_str	00000000 
0002fba0 l       .debug_str	00000000 
0002fbab l       .debug_str	00000000 
0002fc31 l       .debug_str	00000000 
0002fca6 l       .debug_str	00000000 
0002fcd2 l       .debug_str	00000000 
0002fd5b l       .debug_str	00000000 
0002fd6a l       .debug_str	00000000 
0002fd77 l       .debug_str	00000000 
0002fd8b l       .debug_str	00000000 
0002fde1 l       .debug_str	00000000 
0002fe50 l       .debug_str	00000000 
0002fed0 l       .debug_str	00000000 
0002ff3e l       .debug_str	00000000 
0002ffc9 l       .debug_str	00000000 
0003003e l       .debug_str	00000000 
0003007e l       .debug_str	00000000 
00030101 l       .debug_str	00000000 
00030142 l       .debug_str	00000000 
00044657 l       .debug_str	00000000 
00048171 l       .debug_str	00000000 
000301a7 l       .debug_str	00000000 
00030256 l       .debug_str	00000000 
000302a1 l       .debug_str	00000000 
00016194 l       .debug_str	00000000 
0003034a l       .debug_str	00000000 
000303c6 l       .debug_str	00000000 
00015022 l       .debug_str	00000000 
000303eb l       .debug_str	00000000 
0000c39b l       .debug_str	00000000 
00030438 l       .debug_str	00000000 
00015702 l       .debug_str	00000000 
0003048b l       .debug_str	00000000 
000304c6 l       .debug_str	00000000 
000304d1 l       .debug_str	00000000 
0001b7f0 l       .debug_str	00000000 
0003055d l       .debug_str	00000000 
0001535a l       .debug_str	00000000 
000305e0 l       .debug_str	00000000 
00030668 l       .debug_str	00000000 
00021c90 l       .debug_str	00000000 
000306dd l       .debug_str	00000000 
00030763 l       .debug_str	00000000 
0001669b l       .debug_str	00000000 
000307d8 l       .debug_str	00000000 
0000bb44 l       .debug_str	00000000 
0003083b l       .debug_str	00000000 
0000b08b l       .debug_str	00000000 
0003089d l       .debug_str	00000000 
0000ad77 l       .debug_str	00000000 
000308e3 l       .debug_str	00000000 
0003092b l       .debug_str	00000000 
00030935 l       .debug_str	00000000 
00030976 l       .debug_str	00000000 
00030990 l       .debug_str	00000000 
000264e9 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00030996 l       .debug_str	00000000 
0003099f l       .debug_str	00000000 
00030a04 l       .debug_str	00000000 
00030a13 l       .debug_str	00000000 
00030a55 l       .debug_str	00000000 
00030a5f l       .debug_str	00000000 
00030ac4 l       .debug_str	00000000 
00030b06 l       .debug_str	00000000 
00030b50 l       .debug_str	00000000 
00030b5f l       .debug_str	00000000 
00030b95 l       .debug_str	00000000 
00030b9e l       .debug_str	00000000 
00018613 l       .debug_str	00000000 
00030ba8 l       .debug_str	00000000 
00030bab l       .debug_str	00000000 
00030be3 l       .debug_str	00000000 
00030bed l       .debug_str	00000000 
00030c31 l       .debug_str	00000000 
00030c47 l       .debug_str	00000000 
00030c90 l       .debug_str	00000000 
000152cf l       .debug_str	00000000 
000264d4 l       .debug_str	00000000 
00030cd5 l       .debug_str	00000000 
00030d1e l       .debug_str	00000000 
00030d2c l       .debug_str	00000000 
00030d74 l       .debug_str	00000000 
00024ba2 l       .debug_str	00000000 
00030dbe l       .debug_str	00000000 
0003a596 l       .debug_str	00000000 
00030e56 l       .debug_str	00000000 
00053e08 l       .debug_str	00000000 
00030ef0 l       .debug_str	00000000 
00025092 l       .debug_str	00000000 
00030f62 l       .debug_str	00000000 
00024dc5 l       .debug_str	00000000 
00031005 l       .debug_str	00000000 
0000320d l       .debug_str	00000000 
00031037 l       .debug_str	00000000 
0003107e l       .debug_str	00000000 
0003108c l       .debug_str	00000000 
00031096 l       .debug_str	00000000 
000310e4 l       .debug_str	00000000 
000310f4 l       .debug_str	00000000 
0003113f l       .debug_str	00000000 
0003114d l       .debug_str	00000000 
000311db l       .debug_str	00000000 
000311ea l       .debug_str	00000000 
0000c3ea l       .debug_str	00000000 
00031233 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00031278 l       .debug_str	00000000 
000312b2 l       .debug_str	00000000 
000312bb l       .debug_str	00000000 
00031307 l       .debug_str	00000000 
0003131f l       .debug_str	00000000 
00031381 l       .debug_str	00000000 
0000c2e3 l       .debug_str	00000000 
000313b6 l       .debug_str	00000000 
000313de l       .debug_str	00000000 
00031416 l       .debug_str	00000000 
0003143f l       .debug_str	00000000 
0003144a l       .debug_str	00000000 
0001bf4f l       .debug_str	00000000 
0003146f l       .debug_str	00000000 
000314fe l       .debug_str	00000000 
00031535 l       .debug_str	00000000 
000315bb l       .debug_str	00000000 
00031609 l       .debug_str	00000000 
00031612 l       .debug_str	00000000 
00031698 l       .debug_str	00000000 
000316ab l       .debug_str	00000000 
00031734 l       .debug_str	00000000 
00031790 l       .debug_str	00000000 
000317d2 l       .debug_str	00000000 
00031884 l       .debug_str	00000000 
000318c3 l       .debug_str	00000000 
00031968 l       .debug_str	00000000 
000319fc l       .debug_str	00000000 
00031a22 l       .debug_str	00000000 
00031a9e l       .debug_str	00000000 
00031ad9 l       .debug_str	00000000 
00031ae6 l       .debug_str	00000000 
00031b1f l       .debug_str	00000000 
00031b37 l       .debug_str	00000000 
00031b77 l       .debug_str	00000000 
0002cb8e l       .debug_str	00000000 
00031b83 l       .debug_str	00000000 
00031be0 l       .debug_str	00000000 
00031c3d l       .debug_str	00000000 
00031cea l       .debug_str	00000000 
00031d47 l       .debug_str	00000000 
00017a7b l       .debug_str	00000000 
00031db4 l       .debug_str	00000000 
00031e18 l       .debug_str	00000000 
00031e23 l       .debug_str	00000000 
00031e53 l       .debug_str	00000000 
00031e7f l       .debug_str	00000000 
00031eeb l       .debug_str	00000000 
00031f1b l       .debug_str	00000000 
00031f57 l       .debug_str	00000000 
00031fa1 l       .debug_str	00000000 
00031fb1 l       .debug_str	00000000 
00031fe6 l       .debug_str	00000000 
0003202b l       .debug_str	00000000 
00032036 l       .debug_str	00000000 
00032076 l       .debug_str	00000000 
00032084 l       .debug_str	00000000 
00032110 l       .debug_str	00000000 
0003218c l       .debug_str	00000000 
000321ac l       .debug_str	00000000 
00032206 l       .debug_str	00000000 
00032213 l       .debug_str	00000000 
0003224c l       .debug_str	00000000 
00032254 l       .debug_str	00000000 
000322a9 l       .debug_str	00000000 
000322fb l       .debug_str	00000000 
000311e0 l       .debug_str	00000000 
00032342 l       .debug_str	00000000 
000323b6 l       .debug_str	00000000 
000323fa l       .debug_str	00000000 
00032446 l       .debug_str	00000000 
00032485 l       .debug_str	00000000 
000324ab l       .debug_str	00000000 
000324bd l       .debug_str	00000000 
000324c7 l       .debug_str	00000000 
00032509 l       .debug_str	00000000 
000051d5 l       .debug_str	00000000 
00032590 l       .debug_str	00000000 
00029d4f l       .debug_str	00000000 
0003260c l       .debug_str	00000000 
00032683 l       .debug_str	00000000 
000326d1 l       .debug_str	00000000 
00005425 l       .debug_str	00000000 
00032761 l       .debug_str	00000000 
0003279d l       .debug_str	00000000 
000327aa l       .debug_str	00000000 
000327f0 l       .debug_str	00000000 
000327fd l       .debug_str	00000000 
00033543 l       .debug_str	00000000 
0003282f l       .debug_str	00000000 
0003287f l       .debug_str	00000000 
00032896 l       .debug_str	00000000 
00032920 l       .debug_str	00000000 
0000af4c l       .debug_str	00000000 
0003299c l       .debug_str	00000000 
000329b0 l       .debug_str	00000000 
00032a0d l       .debug_str	00000000 
00032a1c l       .debug_str	00000000 
00032a2d l       .debug_str	00000000 
00032a87 l       .debug_str	00000000 
00032a96 l       .debug_str	00000000 
00032b1f l       .debug_str	00000000 
00032b2d l       .debug_str	00000000 
00032b83 l       .debug_str	00000000 
00032bd7 l       .debug_str	00000000 
00032c50 l       .debug_str	00000000 
00032c68 l       .debug_str	00000000 
00032c72 l       .debug_str	00000000 
00032d09 l       .debug_str	00000000 
00032d23 l       .debug_str	00000000 
0001eb6c l       .debug_str	00000000 
00032d5c l       .debug_str	00000000 
00014821 l       .debug_str	00000000 
00032dc1 l       .debug_str	00000000 
00032e58 l       .debug_str	00000000 
00032e5c l       .debug_str	00000000 
00033151 l       .debug_str	00000000 
00032e61 l       .debug_str	00000000 
00058e02 l       .debug_str	00000000 
00015028 l       .debug_str	00000000 
00032e93 l       .debug_str	00000000 
0001ad72 l       .debug_str	00000000 
00032ed1 l       .debug_str	00000000 
0000ad1d l       .debug_str	00000000 
00032f24 l       .debug_str	00000000 
00032fb0 l       .debug_str	00000000 
0003302c l       .debug_str	00000000 
0003304b l       .debug_str	00000000 
00033096 l       .debug_str	00000000 
000330a3 l       .debug_str	00000000 
00033117 l       .debug_str	00000000 
00037455 l       .debug_str	00000000 
00048b90 l       .debug_str	00000000 
00033136 l       .debug_str	00000000 
00033156 l       .debug_str	00000000 
00033172 l       .debug_str	00000000 
0003317c l       .debug_str	00000000 
00033208 l       .debug_str	00000000 
00033284 l       .debug_str	00000000 
000332b5 l       .debug_str	00000000 
00033338 l       .debug_str	00000000 
00033358 l       .debug_str	00000000 
000333de l       .debug_str	00000000 
00033453 l       .debug_str	00000000 
0002cc29 l       .debug_str	00000000 
000563ce l       .debug_str	00000000 
00033494 l       .debug_str	00000000 
00025158 l       .debug_str	00000000 
000334df l       .debug_str	00000000 
0003353b l       .debug_str	00000000 
00033547 l       .debug_str	00000000 
00033590 l       .debug_str	00000000 
000335a0 l       .debug_str	00000000 
000335e5 l       .debug_str	00000000 
0003362e l       .debug_str	00000000 
00033673 l       .debug_str	00000000 
000336cf l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00033761 l       .debug_str	00000000 
000337bf l       .debug_str	00000000 
0003380a l       .debug_str	00000000 
00033851 l       .debug_str	00000000 
000338af l       .debug_str	00000000 
000338fa l       .debug_str	00000000 
00033941 l       .debug_str	00000000 
0003399f l       .debug_str	00000000 
000339e8 l       .debug_str	00000000 
00033a2d l       .debug_str	00000000 
00033a89 l       .debug_str	00000000 
00033ad2 l       .debug_str	00000000 
00033b17 l       .debug_str	00000000 
00033b73 l       .debug_str	00000000 
00033bbd l       .debug_str	00000000 
00033c03 l       .debug_str	00000000 
00033c60 l       .debug_str	00000000 
00033caa l       .debug_str	00000000 
00033cf0 l       .debug_str	00000000 
00033d4d l       .debug_str	00000000 
00033da8 l       .debug_str	00000000 
00033df0 l       .debug_str	00000000 
00033e34 l       .debug_str	00000000 
00033e7c l       .debug_str	00000000 
00033ec0 l       .debug_str	00000000 
00033f1b l       .debug_str	00000000 
00033f64 l       .debug_str	00000000 
00033fa9 l       .debug_str	00000000 
00034005 l       .debug_str	00000000 
0003404e l       .debug_str	00000000 
00034093 l       .debug_str	00000000 
000340ef l       .debug_str	00000000 
00034138 l       .debug_str	00000000 
0003417d l       .debug_str	00000000 
000341d9 l       .debug_str	00000000 
00034223 l       .debug_str	00000000 
00034269 l       .debug_str	00000000 
000342c6 l       .debug_str	00000000 
00034310 l       .debug_str	00000000 
00034356 l       .debug_str	00000000 
000343b3 l       .debug_str	00000000 
000343fd l       .debug_str	00000000 
00034443 l       .debug_str	00000000 
000344a0 l       .debug_str	00000000 
000344fb l       .debug_str	00000000 
00034543 l       .debug_str	00000000 
00034587 l       .debug_str	00000000 
000345cf l       .debug_str	00000000 
00034613 l       .debug_str	00000000 
0003466e l       .debug_str	00000000 
000346c9 l       .debug_str	00000000 
00034711 l       .debug_str	00000000 
00034755 l       .debug_str	00000000 
0003479e l       .debug_str	00000000 
000347e3 l       .debug_str	00000000 
0003483f l       .debug_str	00000000 
0003489b l       .debug_str	00000000 
000348e4 l       .debug_str	00000000 
00034929 l       .debug_str	00000000 
00034985 l       .debug_str	00000000 
000349ce l       .debug_str	00000000 
00034a13 l       .debug_str	00000000 
00034a6f l       .debug_str	00000000 
00034ab8 l       .debug_str	00000000 
00034afd l       .debug_str	00000000 
00024c78 l       .debug_str	00000000 
00034b59 l       .debug_str	00000000 
00034b98 l       .debug_str	00000000 
00034bcd l       .debug_str	00000000 
0000132a l       .debug_str	00000000 
0001516c l       .debug_str	00000000 
000152b6 l       .debug_str	00000000 
00034bd7 l       .debug_str	00000000 
0001727c l       .debug_str	00000000 
00002ff7 l       .debug_str	00000000 
00034c11 l       .debug_str	00000000 
00011f6d l       .debug_str	00000000 
00034ca3 l       .debug_str	00000000 
000167a8 l       .debug_str	00000000 
00034cdc l       .debug_str	00000000 
00015c8f l       .debug_str	00000000 
00034d03 l       .debug_str	00000000 
00015bdb l       .debug_str	00000000 
00001303 l       .debug_str	00000000 
00034d3d l       .debug_str	00000000 
0001595a l       .debug_str	00000000 
00034d63 l       .debug_str	00000000 
000156a1 l       .debug_str	00000000 
00034dbd l       .debug_str	00000000 
000160b5 l       .debug_str	00000000 
00034e57 l       .debug_str	00000000 
000152c5 l       .debug_str	00000000 
00034ee0 l       .debug_str	00000000 
00034f87 l       .debug_str	00000000 
00034fc0 l       .debug_str	00000000 
00035035 l       .debug_str	00000000 
0003505e l       .debug_str	00000000 
00027dda l       .debug_str	00000000 
00035093 l       .debug_str	00000000 
000350cf l       .debug_str	00000000 
000350e0 l       .debug_str	00000000 
00035119 l       .debug_str	00000000 
000148bc l       .debug_str	00000000 
00035126 l       .debug_str	00000000 
00035135 l       .debug_str	00000000 
00030a0c l       .debug_str	00000000 
0003517e l       .debug_str	00000000 
000351b1 l       .debug_str	00000000 
000351be l       .debug_str	00000000 
0005a0c1 l       .debug_str	00000000 
00035209 l       .debug_str	00000000 
00035261 l       .debug_str	00000000 
00035276 l       .debug_str	00000000 
000352ac l       .debug_str	00000000 
000352b7 l       .debug_str	00000000 
00027ee8 l       .debug_str	00000000 
00035316 l       .debug_str	00000000 
00035389 l       .debug_str	00000000 
000353f0 l       .debug_str	00000000 
00035410 l       .debug_str	00000000 
0003544f l       .debug_str	00000000 
0003546e l       .debug_str	00000000 
00000ad8 l       .debug_str	00000000 
000354e1 l       .debug_str	00000000 
0003555e l       .debug_str	00000000 
000355c3 l       .debug_str	00000000 
00035623 l       .debug_str	00000000 
00035696 l       .debug_str	00000000 
00035713 l       .debug_str	00000000 
00017411 l       .debug_str	00000000 
0003578b l       .debug_str	00000000 
00035800 l       .debug_str	00000000 
0003587a l       .debug_str	00000000 
00017f95 l       .debug_str	00000000 
00017fa0 l       .debug_str	00000000 
000358da l       .debug_str	00000000 
000580af l       .debug_str	00000000 
00035918 l       .debug_str	00000000 
0003595a l       .debug_str	00000000 
00035985 l       .debug_str	00000000 
000359c6 l       .debug_str	00000000 
000359d0 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00058f69 l       .debug_str	00000000 
0005384f l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00035a2c l       .debug_str	00000000 
00002c41 l       .debug_str	00000000 
00035a68 l       .debug_str	00000000 
00002be4 l       .debug_str	00000000 
00035aaf l       .debug_str	00000000 
00035b0d l       .debug_str	00000000 
0002d43c l       .debug_str	00000000 
00035b64 l       .debug_str	00000000 
00035bbe l       .debug_str	00000000 
00035bc8 l       .debug_str	00000000 
0001488a l       .debug_str	00000000 
0001488f l       .debug_str	00000000 
00035c0b l       .debug_str	00000000 
00035c41 l       .debug_str	00000000 
00035c51 l       .debug_str	00000000 
00035c60 l       .debug_str	00000000 
00035c6b l       .debug_str	00000000 
0002d522 l       .debug_str	00000000 
00035ca5 l       .debug_str	00000000 
00035cee l       .debug_str	00000000 
00026c9d l       .debug_str	00000000 
00035d35 l       .debug_str	00000000 
00035d70 l       .debug_str	00000000 
00035d95 l       .debug_str	00000000 
00035e01 l       .debug_str	00000000 
00035e14 l       .debug_str	00000000 
00035e8b l       .debug_str	00000000 
00035e96 l       .debug_str	00000000 
00035ed3 l       .debug_str	00000000 
00035ede l       .debug_str	00000000 
00035f5f l       .debug_str	00000000 
00035fa5 l       .debug_str	00000000 
00035fcc l       .debug_str	00000000 
00035ffb l       .debug_str	00000000 
0003600c l       .debug_str	00000000 
00015208 l       .debug_str	00000000 
00036068 l       .debug_str	00000000 
00036099 l       .debug_str	00000000 
0001cf68 l       .debug_str	00000000 
000360e1 l       .debug_str	00000000 
000214ea l       .debug_str	00000000 
0003611f l       .debug_str	00000000 
00036163 l       .debug_str	00000000 
000361b6 l       .debug_str	00000000 
00032c51 l       .debug_str	00000000 
0003622e l       .debug_str	00000000 
0003627d l       .debug_str	00000000 
00036313 l       .debug_str	00000000 
00036357 l       .debug_str	00000000 
0003a095 l       .debug_str	00000000 
000363cf l       .debug_str	00000000 
0003641e l       .debug_str	00000000 
000364b4 l       .debug_str	00000000 
000364ce l       .debug_str	00000000 
0003651d l       .debug_str	00000000 
00036556 l       .debug_str	00000000 
00036571 l       .debug_str	00000000 
00016e33 l       .debug_str	00000000 
000365d5 l       .debug_str	00000000 
0001673f l       .debug_str	00000000 
0003664e l       .debug_str	00000000 
000239b1 l       .debug_str	00000000 
000366bf l       .debug_str	00000000 
00036755 l       .debug_str	00000000 
000367ed l       .debug_str	00000000 
0003685f l       .debug_str	00000000 
00036887 l       .debug_str	00000000 
0001c1fc l       .debug_str	00000000 
0003693f l       .debug_str	00000000 
000255b6 l       .debug_str	00000000 
00036984 l       .debug_str	00000000 
00036a3a l       .debug_str	00000000 
00036a7f l       .debug_str	00000000 
00004349 l       .debug_str	00000000 
00036ac1 l       .debug_str	00000000 
00036b1c l       .debug_str	00000000 
00036b21 l       .debug_str	00000000 
00036b7a l       .debug_str	00000000 
00036bae l       .debug_str	00000000 
00036bc2 l       .debug_str	00000000 
00036bfd l       .debug_str	00000000 
00036c3f l       .debug_str	00000000 
00036c55 l       .debug_str	00000000 
00036cc1 l       .debug_str	00000000 
00017f99 l       .debug_str	00000000 
0000bb69 l       .debug_str	00000000 
0000bb74 l       .debug_str	00000000 
00036d03 l       .debug_str	00000000 
00036d43 l       .debug_str	00000000 
00036d9d l       .debug_str	00000000 
00036ddf l       .debug_str	00000000 
00036e3a l       .debug_str	00000000 
00036e7c l       .debug_str	00000000 
00036e87 l       .debug_str	00000000 
00036ec7 l       .debug_str	00000000 
00036ecd l       .debug_str	00000000 
00036f27 l       .debug_str	00000000 
00036f30 l       .debug_str	00000000 
00036f72 l       .debug_str	00000000 
00036fca l       .debug_str	00000000 
0003700c l       .debug_str	00000000 
00037065 l       .debug_str	00000000 
0003706f l       .debug_str	00000000 
00037077 l       .debug_str	00000000 
00037080 l       .debug_str	00000000 
00037073 l       .debug_str	00000000 
000370c2 l       .debug_str	00000000 
00037117 l       .debug_str	00000000 
00037154 l       .debug_str	00000000 
00037196 l       .debug_str	00000000 
000371ed l       .debug_str	00000000 
0003722f l       .debug_str	00000000 
00037287 l       .debug_str	00000000 
000372bf l       .debug_str	00000000 
000372cb l       .debug_str	00000000 
00037308 l       .debug_str	00000000 
0003736a l       .debug_str	00000000 
000373ab l       .debug_str	00000000 
000373b4 l       .debug_str	00000000 
00037412 l       .debug_str	00000000 
0003744b l       .debug_str	00000000 
0003745a l       .debug_str	00000000 
00037499 l       .debug_str	00000000 
000374ae l       .debug_str	00000000 
000374f4 l       .debug_str	00000000 
00037501 l       .debug_str	00000000 
00037507 l       .debug_str	00000000 
00037540 l       .debug_str	00000000 
000375cc l       .debug_str	00000000 
00037608 l       .debug_str	00000000 
0005343e l       .debug_str	00000000 
0003761a l       .debug_str	00000000 
00037652 l       .debug_str	00000000 
0003765e l       .debug_str	00000000 
0003769b l       .debug_str	00000000 
000376fd l       .debug_str	00000000 
0003773e l       .debug_str	00000000 
0003779c l       .debug_str	00000000 
000377d6 l       .debug_str	00000000 
00037830 l       .debug_str	00000000 
00037879 l       .debug_str	00000000 
00037889 l       .debug_str	00000000 
000378c2 l       .debug_str	00000000 
00037944 l       .debug_str	00000000 
0003797e l       .debug_str	00000000 
000379d8 l       .debug_str	00000000 
00037a13 l       .debug_str	00000000 
00037a73 l       .debug_str	00000000 
00037aae l       .debug_str	00000000 
00037b0e l       .debug_str	00000000 
00037b4c l       .debug_str	00000000 
00037baa l       .debug_str	00000000 
00037be8 l       .debug_str	00000000 
00037c46 l       .debug_str	00000000 
00037c91 l       .debug_str	00000000 
00037c9a l       .debug_str	00000000 
00037ce9 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00037cf5 l       .debug_str	00000000 
00037d26 l       .debug_str	00000000 
00037d51 l       .debug_str	00000000 
00037d9f l       .debug_str	00000000 
00015239 l       .debug_str	00000000 
00037da6 l       .debug_str	00000000 
00037e0b l       .debug_str	00000000 
00037e3c l       .debug_str	00000000 
00037e44 l       .debug_str	00000000 
000158b7 l       .debug_str	00000000 
00037e75 l       .debug_str	00000000 
00037ece l       .debug_str	00000000 
00037f5c l       .debug_str	00000000 
00037fa8 l       .debug_str	00000000 
00037fcd l       .debug_str	00000000 
00037fea l       .debug_str	00000000 
00038014 l       .debug_str	00000000 
0001c18f l       .debug_str	00000000 
0001c24a l       .debug_str	00000000 
0001c2c6 l       .debug_str	00000000 
00038036 l       .debug_str	00000000 
00038083 l       .debug_str	00000000 
000380c8 l       .debug_str	00000000 
00038107 l       .debug_str	00000000 
00038153 l       .debug_str	00000000 
000381e2 l       .debug_str	00000000 
0003822f l       .debug_str	00000000 
000382b5 l       .debug_str	00000000 
00055340 l       .debug_str	00000000 
000382da l       .debug_str	00000000 
00038304 l       .debug_str	00000000 
0003830d l       .debug_str	00000000 
00038343 l       .debug_str	00000000 
0003834c l       .debug_str	00000000 
000383da l       .debug_str	00000000 
00038420 l       .debug_str	00000000 
0003843f l       .debug_str	00000000 
00038456 l       .debug_str	00000000 
0003847a l       .debug_str	00000000 
00038496 l       .debug_str	00000000 
000384dd l       .debug_str	00000000 
00038522 l       .debug_str	00000000 
00038561 l       .debug_str	00000000 
000385a7 l       .debug_str	00000000 
00038636 l       .debug_str	00000000 
0003867d l       .debug_str	00000000 
00038703 l       .debug_str	00000000 
00038738 l       .debug_str	00000000 
00038742 l       .debug_str	00000000 
00054359 l       .debug_str	00000000 
000387ad l       .debug_str	00000000 
000387e2 l       .debug_str	00000000 
000387ec l       .debug_str	00000000 
0003881f l       .debug_str	00000000 
00038827 l       .debug_str	00000000 
0003885b l       .debug_str	00000000 
0003886d l       .debug_str	00000000 
000388a7 l       .debug_str	00000000 
000388c5 l       .debug_str	00000000 
000388eb l       .debug_str	00000000 
000388f6 l       .debug_str	00000000 
0003891f l       .debug_str	00000000 
0003892d l       .debug_str	00000000 
00038967 l       .debug_str	00000000 
0003899d l       .debug_str	00000000 
000389c3 l       .debug_str	00000000 
000389e6 l       .debug_str	00000000 
00038a0f l       .debug_str	00000000 
00038a35 l       .debug_str	00000000 
00038a73 l       .debug_str	00000000 
00038a8d l       .debug_str	00000000 
00038acb l       .debug_str	00000000 
00038afd l       .debug_str	00000000 
00038b09 l       .debug_str	00000000 
0005aad5 l       .debug_str	00000000 
00038b3d l       .debug_str	00000000 
00038b4a l       .debug_str	00000000 
00024a5d l       .debug_str	00000000 
00038b7c l       .debug_str	00000000 
00038be6 l       .debug_str	00000000 
00038c56 l       .debug_str	00000000 
00038cbd l       .debug_str	00000000 
00038cda l       .debug_str	00000000 
00038d19 l       .debug_str	00000000 
00038d35 l       .debug_str	00000000 
00024a1f l       .debug_str	00000000 
00038d63 l       .debug_str	00000000 
00024afb l       .debug_str	00000000 
00038d98 l       .debug_str	00000000 
00038dd4 l       .debug_str	00000000 
00038dfa l       .debug_str	00000000 
00038e39 l       .debug_str	00000000 
00038e49 l       .debug_str	00000000 
00038ead l       .debug_str	00000000 
00038ee4 l       .debug_str	00000000 
00038efa l       .debug_str	00000000 
00038f49 l       .debug_str	00000000 
00038f55 l       .debug_str	00000000 
00039027 l       .debug_str	00000000 
00038f9c l       .debug_str	00000000 
00039022 l       .debug_str	00000000 
00039046 l       .debug_str	00000000 
00039081 l       .debug_str	00000000 
00039091 l       .debug_str	00000000 
0005a9fd l       .debug_str	00000000 
000390d2 l       .debug_str	00000000 
0003910c l       .debug_str	00000000 
0003911b l       .debug_str	00000000 
00039154 l       .debug_str	00000000 
00039162 l       .debug_str	00000000 
0003919b l       .debug_str	00000000 
000391a9 l       .debug_str	00000000 
000391f9 l       .debug_str	00000000 
00039206 l       .debug_str	00000000 
0003927c l       .debug_str	00000000 
00039287 l       .debug_str	00000000 
00039299 l       .debug_str	00000000 
000392e5 l       .debug_str	00000000 
00039302 l       .debug_str	00000000 
00039396 l       .debug_str	00000000 
0003942c l       .debug_str	00000000 
0003949e l       .debug_str	00000000 
000394c4 l       .debug_str	00000000 
00039563 l       .debug_str	00000000 
000395d4 l       .debug_str	00000000 
00005143 l       .debug_str	00000000 
00039619 l       .debug_str	00000000 
0003967c l       .debug_str	00000000 
0003969f l       .debug_str	00000000 
000396f3 l       .debug_str	00000000 
0003970a l       .debug_str	00000000 
000265b6 l       .debug_str	00000000 
00039757 l       .debug_str	00000000 
00039764 l       .debug_str	00000000 
0003979f l       .debug_str	00000000 
000397c7 l       .debug_str	00000000 
00039829 l       .debug_str	00000000 
000352b1 l       .debug_str	00000000 
00039892 l       .debug_str	00000000 
0003c0c0 l       .debug_str	00000000 
00001307 l       .debug_str	00000000 
0000130d l       .debug_str	00000000 
00001314 l       .debug_str	00000000 
0002c9d1 l       .debug_str	00000000 
0002c9e2 l       .debug_str	00000000 
000398df l       .debug_str	00000000 
0000b661 l       .debug_str	00000000 
0003992a l       .debug_str	00000000 
000399ad l       .debug_str	00000000 
000399dd l       .debug_str	00000000 
00039a65 l       .debug_str	00000000 
00039ada l       .debug_str	00000000 
00039b2d l       .debug_str	00000000 
00039bb9 l       .debug_str	00000000 
00039bf1 l       .debug_str	00000000 
00039c46 l       .debug_str	00000000 
00039c77 l       .debug_str	00000000 
00039cc9 l       .debug_str	00000000 
00039cf7 l       .debug_str	00000000 
00039d4b l       .debug_str	00000000 
00039d71 l       .debug_str	00000000 
00021436 l       .debug_str	00000000 
00039da8 l       .debug_str	00000000 
00039df3 l       .debug_str	00000000 
00039e0f l       .debug_str	00000000 
00039e65 l       .debug_str	00000000 
0002157d l       .debug_str	00000000 
00039ede l       .debug_str	00000000 
00039f2e l       .debug_str	00000000 
00039fc5 l       .debug_str	00000000 
0003a01b l       .debug_str	00000000 
0003a094 l       .debug_str	00000000 
0003a0ac l       .debug_str	00000000 
0003a143 l       .debug_str	00000000 
0003a17c l       .debug_str	00000000 
0003a3ac l       .debug_str	00000000 
0003a1c5 l       .debug_str	00000000 
0003908d l       .debug_str	00000000 
0003a202 l       .debug_str	00000000 
0003a246 l       .debug_str	00000000 
0003a291 l       .debug_str	00000000 
0003a2d1 l       .debug_str	00000000 
0003a2fb l       .debug_str	00000000 
0003a344 l       .debug_str	00000000 
0003a353 l       .debug_str	00000000 
0003a3a4 l       .debug_str	00000000 
0003a3bb l       .debug_str	00000000 
0004465b l       .debug_str	00000000 
00055bfa l       .debug_str	00000000 
0003a422 l       .debug_str	00000000 
0003a483 l       .debug_str	00000000 
0003a4a2 l       .debug_str	00000000 
0003a4ab l       .debug_str	00000000 
0003a4b7 l       .debug_str	00000000 
00018572 l       .debug_str	00000000 
0003a4bd l       .debug_str	00000000 
0003a4c7 l       .debug_str	00000000 
0003a4f9 l       .debug_str	00000000 
0003a509 l       .debug_str	00000000 
0003a591 l       .debug_str	00000000 
0003a59a l       .debug_str	00000000 
00002fdb l       .debug_str	00000000 
0003a607 l       .debug_str	00000000 
0003a646 l       .debug_str	00000000 
00017983 l       .debug_str	00000000 
0001798f l       .debug_str	00000000 
00017999 l       .debug_str	00000000 
0003a655 l       .debug_str	00000000 
0003a6c5 l       .debug_str	00000000 
0003a6ea l       .debug_str	00000000 
0003a759 l       .debug_str	00000000 
0003a77f l       .debug_str	00000000 
0003a7ee l       .debug_str	00000000 
0003a818 l       .debug_str	00000000 
0003a84f l       .debug_str	00000000 
0003a85a l       .debug_str	00000000 
0003a896 l       .debug_str	00000000 
0003a8b5 l       .debug_str	00000000 
0003a8ef l       .debug_str	00000000 
0003a92a l       .debug_str	00000000 
0003a966 l       .debug_str	00000000 
0000ec13 l       .debug_str	00000000 
0003a980 l       .debug_str	00000000 
0003a9bc l       .debug_str	00000000 
0003a9c9 l       .debug_str	00000000 
000536b5 l       .debug_str	00000000 
0003aa07 l       .debug_str	00000000 
0003aa4d l       .debug_str	00000000 
0003aad5 l       .debug_str	00000000 
0003aaee l       .debug_str	00000000 
0003ab48 l       .debug_str	00000000 
0003ab8e l       .debug_str	00000000 
0003aba6 l       .debug_str	00000000 
0003ac26 l       .debug_str	00000000 
0003b0fa l       .debug_str	00000000 
0003ac36 l       .debug_str	00000000 
0003ac75 l       .debug_str	00000000 
0003acb5 l       .debug_str	00000000 
0003ad3f l       .debug_str	00000000 
0003ad56 l       .debug_str	00000000 
0003ada7 l       .debug_str	00000000 
0003adb5 l       .debug_str	00000000 
0003adba l       .debug_str	00000000 
0003ae15 l       .debug_str	00000000 
0003b7cf l       .debug_str	00000000 
0003ae6c l       .debug_str	00000000 
0003ae9f l       .debug_str	00000000 
0003aee6 l       .debug_str	00000000 
0003af20 l       .debug_str	00000000 
0003af4f l       .debug_str	00000000 
0003afcd l       .debug_str	00000000 
0003b051 l       .debug_str	00000000 
0003b0de l       .debug_str	00000000 
0003b0f3 l       .debug_str	00000000 
0003b103 l       .debug_str	00000000 
0003b14f l       .debug_str	00000000 
0003b194 l       .debug_str	00000000 
0003b22b l       .debug_str	00000000 
0003b247 l       .debug_str	00000000 
0003b28e l       .debug_str	00000000 
0003b2bc l       .debug_str	00000000 
0003b2f5 l       .debug_str	00000000 
0003b317 l       .debug_str	00000000 
0001b4d0 l       .debug_str	00000000 
0003b395 l       .debug_str	00000000 
0003b415 l       .debug_str	00000000 
0003b454 l       .debug_str	00000000 
0003b4de l       .debug_str	00000000 
0003b52a l       .debug_str	00000000 
0003b548 l       .debug_str	00000000 
0003b553 l       .debug_str	00000000 
0003b5b5 l       .debug_str	00000000 
0003b60c l       .debug_str	00000000 
0003b699 l       .debug_str	00000000 
0003b6e5 l       .debug_str	00000000 
0003b77c l       .debug_str	00000000 
0003b7c6 l       .debug_str	00000000 
0003b7e2 l       .debug_str	00000000 
0003b83c l       .debug_str	00000000 
0003b845 l       .debug_str	00000000 
0003b8a4 l       .debug_str	00000000 
0003b8fb l       .debug_str	00000000 
0003b954 l       .debug_str	00000000 
0003b969 l       .debug_str	00000000 
0003b9b6 l       .debug_str	00000000 
0003ba01 l       .debug_str	00000000 
0003ba14 l       .debug_str	00000000 
0001ffc3 l       .debug_str	00000000 
0001b482 l       .debug_str	00000000 
0003ba5f l       .debug_str	00000000 
0003ba74 l       .debug_str	00000000 
0003ba80 l       .debug_str	00000000 
0003bac5 l       .debug_str	00000000 
0003bb1e l       .debug_str	00000000 
0003bb33 l       .debug_str	00000000 
0003bb80 l       .debug_str	00000000 
0003bbcb l       .debug_str	00000000 
0003bbde l       .debug_str	00000000 
0003bc29 l       .debug_str	00000000 
0003bc3c l       .debug_str	00000000 
0003bca0 l       .debug_str	00000000 
0003bcd9 l       .debug_str	00000000 
0003bd05 l       .debug_str	00000000 
0005972a l       .debug_str	00000000 
00054aef l       .debug_str	00000000 
0003bd84 l       .debug_str	00000000 
0003bd8a l       .debug_str	00000000 
0003bd93 l       .debug_str	00000000 
0003bdcb l       .debug_str	00000000 
0003bde8 l       .debug_str	00000000 
0003be24 l       .debug_str	00000000 
0003be41 l       .debug_str	00000000 
0003be9d l       .debug_str	00000000 
0003bed5 l       .debug_str	00000000 
0003bf31 l       .debug_str	00000000 
00026c3d l       .debug_str	00000000 
0003bf69 l       .debug_str	00000000 
0003bfa7 l       .debug_str	00000000 
0003bfc3 l       .debug_str	00000000 
0003c019 l       .debug_str	00000000 
0003c080 l       .debug_str	00000000 
0003c0b8 l       .debug_str	00000000 
0003c0c4 l       .debug_str	00000000 
0003c12b l       .debug_str	00000000 
0003c16a l       .debug_str	00000000 
0003c17b l       .debug_str	00000000 
0003c1b4 l       .debug_str	00000000 
0004a15c l       .debug_str	00000000 
0003c1cf l       .debug_str	00000000 
0003c20b l       .debug_str	00000000 
0003c204 l       .debug_str	00000000 
0003c214 l       .debug_str	00000000 
0003c226 l       .debug_str	00000000 
0003c271 l       .debug_str	00000000 
0003c289 l       .debug_str	00000000 
0003c293 l       .debug_str	00000000 
0003c2aa l       .debug_str	00000000 
0003c2b9 l       .debug_str	00000000 
0003c2fb l       .debug_str	00000000 
0003c314 l       .debug_str	00000000 
0003c388 l       .debug_str	00000000 
0003c397 l       .debug_str	00000000 
0003c3d0 l       .debug_str	00000000 
0003c3e6 l       .debug_str	00000000 
0003c426 l       .debug_str	00000000 
0003c431 l       .debug_str	00000000 
0003c4b0 l       .debug_str	00000000 
00054268 l       .debug_str	00000000 
0003c4cf l       .debug_str	00000000 
0003c4e4 l       .debug_str	00000000 
0003c4ee l       .debug_str	00000000 
0001bafd l       .debug_str	00000000 
0003c4f3 l       .debug_str	00000000 
0003c524 l       .debug_str	00000000 
0003c537 l       .debug_str	00000000 
0003c541 l       .debug_str	00000000 
0003c55e l       .debug_str	00000000 
0003c599 l       .debug_str	00000000 
0003c5ce l       .debug_str	00000000 
0003c5ff l       .debug_str	00000000 
0003c613 l       .debug_str	00000000 
0003c61e l       .debug_str	00000000 
0003c63c l       .debug_str	00000000 
0003c677 l       .debug_str	00000000 
0003c6ad l       .debug_str	00000000 
0003c6de l       .debug_str	00000000 
0003c6f2 l       .debug_str	00000000 
0003c6fd l       .debug_str	00000000 
0003c71b l       .debug_str	00000000 
0003c756 l       .debug_str	00000000 
0003c78c l       .debug_str	00000000 
0003c7bd l       .debug_str	00000000 
0003c7d1 l       .debug_str	00000000 
0003c7dc l       .debug_str	00000000 
0003c7fa l       .debug_str	00000000 
0003c835 l       .debug_str	00000000 
0003c86b l       .debug_str	00000000 
0003c89c l       .debug_str	00000000 
000410e9 l       .debug_str	00000000 
0003c8b1 l       .debug_str	00000000 
0003c8bd l       .debug_str	00000000 
0003c8dc l       .debug_str	00000000 
0003c917 l       .debug_str	00000000 
0003c94e l       .debug_str	00000000 
0003c97f l       .debug_str	00000000 
0003c992 l       .debug_str	00000000 
0003c99c l       .debug_str	00000000 
0003c9b9 l       .debug_str	00000000 
0003c9f4 l       .debug_str	00000000 
0003ca29 l       .debug_str	00000000 
0003ca5a l       .debug_str	00000000 
0003ca6e l       .debug_str	00000000 
0003ca79 l       .debug_str	00000000 
0003ca97 l       .debug_str	00000000 
0003cad2 l       .debug_str	00000000 
0003cb08 l       .debug_str	00000000 
0003cb39 l       .debug_str	00000000 
0003cb4d l       .debug_str	00000000 
0003cbbc l       .debug_str	00000000 
0003cbf7 l       .debug_str	00000000 
0003cc40 l       .debug_str	00000000 
0003cc85 l       .debug_str	00000000 
0003cce1 l       .debug_str	00000000 
0003cd2a l       .debug_str	00000000 
0003cd6f l       .debug_str	00000000 
0003cdcb l       .debug_str	00000000 
0003ce14 l       .debug_str	00000000 
0003ce59 l       .debug_str	00000000 
0003ceb5 l       .debug_str	00000000 
0003cec0 l       .debug_str	00000000 
0003cede l       .debug_str	00000000 
0003cf19 l       .debug_str	00000000 
0003cf4f l       .debug_str	00000000 
0003cf80 l       .debug_str	00000000 
0003cf94 l       .debug_str	00000000 
0003cf9f l       .debug_str	00000000 
0003cfbd l       .debug_str	00000000 
0003cff8 l       .debug_str	00000000 
0003d02e l       .debug_str	00000000 
0003d09d l       .debug_str	00000000 
0003d0d8 l       .debug_str	00000000 
0003d109 l       .debug_str	00000000 
0003d11e l       .debug_str	00000000 
0003d123 l       .debug_str	00000000 
0003d12f l       .debug_str	00000000 
0003d14e l       .debug_str	00000000 
0003d189 l       .debug_str	00000000 
0003d1c0 l       .debug_str	00000000 
0003d22f l       .debug_str	00000000 
0003d26b l       .debug_str	00000000 
0000ae1e l       .debug_str	00000000 
0003d2b4 l       .debug_str	00000000 
0003d2bf l       .debug_str	00000000 
0003d306 l       .debug_str	00000000 
0003d310 l       .debug_str	00000000 
0003d392 l       .debug_str	00000000 
0003d3af l       .debug_str	00000000 
0001895f l       .debug_str	00000000 
0003d40a l       .debug_str	00000000 
0003d464 l       .debug_str	00000000 
0003d471 l       .debug_str	00000000 
0003d4e3 l       .debug_str	00000000 
0003d547 l       .debug_str	00000000 
0003d552 l       .debug_str	00000000 
0003d5cb l       .debug_str	00000000 
0003d5d7 l       .debug_str	00000000 
0003d653 l       .debug_str	00000000 
0003d659 l       .debug_str	00000000 
0003d660 l       .debug_str	00000000 
0003d69c l       .debug_str	00000000 
00015e39 l       .debug_str	00000000 
0003d6e5 l       .debug_str	00000000 
0003d729 l       .debug_str	00000000 
0003d774 l       .debug_str	00000000 
0003d7b3 l       .debug_str	00000000 
0003d7d8 l       .debug_str	00000000 
0003d82e l       .debug_str	00000000 
0003d89c l       .debug_str	00000000 
0003d91c l       .debug_str	00000000 
0003d989 l       .debug_str	00000000 
0003da14 l       .debug_str	00000000 
0003da88 l       .debug_str	00000000 
0003dac8 l       .debug_str	00000000 
0003db49 l       .debug_str	00000000 
0003db8a l       .debug_str	00000000 
0003dbee l       .debug_str	00000000 
0003dc9d l       .debug_str	00000000 
0003dce7 l       .debug_str	00000000 
0003dd34 l       .debug_str	00000000 
0003dd7a l       .debug_str	00000000 
0003dd84 l       .debug_str	00000000 
0003ddbd l       .debug_str	00000000 
0003ddec l       .debug_str	00000000 
0003de4d l       .debug_str	00000000 
0003de7c l       .debug_str	00000000 
0003deb9 l       .debug_str	00000000 
0003df48 l       .debug_str	00000000 
0003df7d l       .debug_str	00000000 
0003e003 l       .debug_str	00000000 
0003e089 l       .debug_str	00000000 
0003e0dd l       .debug_str	00000000 
0003e166 l       .debug_str	00000000 
0001b399 l       .debug_str	00000000 
0003e1b4 l       .debug_str	00000000 
0003e242 l       .debug_str	00000000 
0003e296 l       .debug_str	00000000 
0003e2d5 l       .debug_str	00000000 
0003e320 l       .debug_str	00000000 
0003e3a2 l       .debug_str	00000000 
0003e3be l       .debug_str	00000000 
0003e417 l       .debug_str	00000000 
0003e470 l       .debug_str	00000000 
0003e4ad l       .debug_str	00000000 
0003e4ee l       .debug_str	00000000 
0003e54f l       .debug_str	00000000 
0003e5c0 l       .debug_str	00000000 
0003e5f0 l       .debug_str	00000000 
0003e636 l       .debug_str	00000000 
0003e6a8 l       .debug_str	00000000 
0003e73c l       .debug_str	00000000 
0003e760 l       .debug_str	00000000 
0003e7dc l       .debug_str	00000000 
0003e816 l       .debug_str	00000000 
0003e858 l       .debug_str	00000000 
0003e908 l       .debug_str	00000000 
0003e947 l       .debug_str	00000000 
0003e9ea l       .debug_str	00000000 
0003ea46 l       .debug_str	00000000 
0003eaa3 l       .debug_str	00000000 
0003eb4e l       .debug_str	00000000 
0003eb87 l       .debug_str	00000000 
0003ec03 l       .debug_str	00000000 
0003ec3b l       .debug_str	00000000 
0003ec47 l       .debug_str	00000000 
0003ec84 l       .debug_str	00000000 
0003ecdc l       .debug_str	00000000 
0003ecfc l       .debug_str	00000000 
0003ed55 l       .debug_str	00000000 
0003edae l       .debug_str	00000000 
0003ee07 l       .debug_str	00000000 
0003ee61 l       .debug_str	00000000 
0003ee97 l       .debug_str	00000000 
0003eea7 l       .debug_str	00000000 
0003eeb6 l       .debug_str	00000000 
0003eebf l       .debug_str	00000000 
0003eef6 l       .debug_str	00000000 
0003ef32 l       .debug_str	00000000 
0003ef42 l       .debug_str	00000000 
0003ef9e l       .debug_str	00000000 
0003f000 l       .debug_str	00000000 
0003220f l       .debug_str	00000000 
0003f04a l       .debug_str	00000000 
0003f085 l       .debug_str	00000000 
0003f0aa l       .debug_str	00000000 
0003f109 l       .debug_str	00000000 
0003f153 l       .debug_str	00000000 
0003f18e l       .debug_str	00000000 
0003f1b3 l       .debug_str	00000000 
0003f212 l       .debug_str	00000000 
0003f27b l       .debug_str	00000000 
0003f284 l       .debug_str	00000000 
0003f2bb l       .debug_str	00000000 
0003f317 l       .debug_str	00000000 
0003f379 l       .debug_str	00000000 
0003f3d8 l       .debug_str	00000000 
0003f437 l       .debug_str	00000000 
0003f46d l       .debug_str	00000000 
0003f47e l       .debug_str	00000000 
0003f48e l       .debug_str	00000000 
0003f498 l       .debug_str	00000000 
0003f4d0 l       .debug_str	00000000 
0003f52d l       .debug_str	00000000 
0003f590 l       .debug_str	00000000 
0003f5db l       .debug_str	00000000 
0003f616 l       .debug_str	00000000 
0003f63c l       .debug_str	00000000 
0003f69c l       .debug_str	00000000 
0003f6e7 l       .debug_str	00000000 
0003f722 l       .debug_str	00000000 
0003f748 l       .debug_str	00000000 
0003f7a8 l       .debug_str	00000000 
0003f7de l       .debug_str	00000000 
0003f7ef l       .debug_str	00000000 
0003f7ff l       .debug_str	00000000 
0003f809 l       .debug_str	00000000 
0003f841 l       .debug_str	00000000 
0003f89e l       .debug_str	00000000 
0003f901 l       .debug_str	00000000 
0003f961 l       .debug_str	00000000 
0003f9c1 l       .debug_str	00000000 
0003f9f7 l       .debug_str	00000000 
0003fa08 l       .debug_str	00000000 
0003fa18 l       .debug_str	00000000 
0003fa22 l       .debug_str	00000000 
0003fa5a l       .debug_str	00000000 
0003fab7 l       .debug_str	00000000 
0003fb1a l       .debug_str	00000000 
0003fb65 l       .debug_str	00000000 
0003fba0 l       .debug_str	00000000 
0003fbc6 l       .debug_str	00000000 
0003fc26 l       .debug_str	00000000 
0003fc71 l       .debug_str	00000000 
0003fcac l       .debug_str	00000000 
0003fcd2 l       .debug_str	00000000 
0003fd32 l       .debug_str	00000000 
0003fd68 l       .debug_str	00000000 
0003fd79 l       .debug_str	00000000 
0003fd89 l       .debug_str	00000000 
0003fd93 l       .debug_str	00000000 
0003fdcb l       .debug_str	00000000 
0003fe28 l       .debug_str	00000000 
0003fe8b l       .debug_str	00000000 
0003feeb l       .debug_str	00000000 
0003ff4b l       .debug_str	00000000 
0003ff81 l       .debug_str	00000000 
0000bc25 l       .debug_str	00000000 
0003ff94 l       .debug_str	00000000 
0003ffa6 l       .debug_str	00000000 
0003ffb2 l       .debug_str	00000000 
0003ffed l       .debug_str	00000000 
0004004c l       .debug_str	00000000 
000400b1 l       .debug_str	00000000 
00040113 l       .debug_str	00000000 
0004014e l       .debug_str	00000000 
00040176 l       .debug_str	00000000 
000401d8 l       .debug_str	00000000 
0001e77c l       .debug_str	00000000 
00021198 l       .debug_str	00000000 
00014911 l       .debug_str	00000000 
0004020e l       .debug_str	00000000 
00040249 l       .debug_str	00000000 
00040289 l       .debug_str	00000000 
000402a6 l       .debug_str	00000000 
000402ea l       .debug_str	00000000 
0004030b l       .debug_str	00000000 
0004034b l       .debug_str	00000000 
00040368 l       .debug_str	00000000 
000403ac l       .debug_str	00000000 
000403cd l       .debug_str	00000000 
0004042f l       .debug_str	00000000 
00040496 l       .debug_str	00000000 
000404d1 l       .debug_str	00000000 
000404f4 l       .debug_str	00000000 
0004055a l       .debug_str	00000000 
00040595 l       .debug_str	00000000 
000405b7 l       .debug_str	00000000 
000405f2 l       .debug_str	00000000 
00040616 l       .debug_str	00000000 
00040651 l       .debug_str	00000000 
00040674 l       .debug_str	00000000 
000406af l       .debug_str	00000000 
000406d3 l       .debug_str	00000000 
0004070e l       .debug_str	00000000 
00040731 l       .debug_str	00000000 
0004076c l       .debug_str	00000000 
00040790 l       .debug_str	00000000 
000407db l       .debug_str	00000000 
0004083d l       .debug_str	00000000 
00040878 l       .debug_str	00000000 
0004089b l       .debug_str	00000000 
000408e6 l       .debug_str	00000000 
00040921 l       .debug_str	00000000 
00040947 l       .debug_str	00000000 
00040982 l       .debug_str	00000000 
000409a8 l       .debug_str	00000000 
000409f9 l       .debug_str	00000000 
00040a47 l       .debug_str	00000000 
00040a92 l       .debug_str	00000000 
00040ac5 l       .debug_str	00000000 
00040b00 l       .debug_str	00000000 
00040b25 l       .debug_str	00000000 
00040bb1 l       .debug_str	00000000 
00040be5 l       .debug_str	00000000 
00040c61 l       .debug_str	00000000 
00040ca6 l       .debug_str	00000000 
00040cf2 l       .debug_str	00000000 
00040d55 l       .debug_str	00000000 
00040d90 l       .debug_str	00000000 
00040db4 l       .debug_str	00000000 
00040def l       .debug_str	00000000 
00040e16 l       .debug_str	00000000 
00040e62 l       .debug_str	00000000 
00040e9d l       .debug_str	00000000 
00040ec4 l       .debug_str	00000000 
00040f0f l       .debug_str	00000000 
00040f5b l       .debug_str	00000000 
00040fa7 l       .debug_str	00000000 
00040fd8 l       .debug_str	00000000 
00040fe0 l       .debug_str	00000000 
00011c8a l       .debug_str	00000000 
0004102c l       .debug_str	00000000 
00041061 l       .debug_str	00000000 
0004108f l       .debug_str	00000000 
00041098 l       .debug_str	00000000 
000410e6 l       .debug_str	00000000 
000410ee l       .debug_str	00000000 
00041153 l       .debug_str	00000000 
000411a6 l       .debug_str	00000000 
00041206 l       .debug_str	00000000 
00041225 l       .debug_str	00000000 
00041288 l       .debug_str	00000000 
000412aa l       .debug_str	00000000 
000412f5 l       .debug_str	00000000 
0004135a l       .debug_str	00000000 
0004137c l       .debug_str	00000000 
000413e5 l       .debug_str	00000000 
00041422 l       .debug_str	00000000 
0004148b l       .debug_str	00000000 
0004151b l       .debug_str	00000000 
0000bce8 l       .debug_str	00000000 
0004157b l       .debug_str	00000000 
000415de l       .debug_str	00000000 
00041647 l       .debug_str	00000000 
0004167a l       .debug_str	00000000 
000416c2 l       .debug_str	00000000 
0004173c l       .debug_str	00000000 
0004178d l       .debug_str	00000000 
000417e4 l       .debug_str	00000000 
0001c91e l       .debug_str	00000000 
0004182c l       .debug_str	00000000 
0004188a l       .debug_str	00000000 
000418a7 l       .debug_str	00000000 
00041913 l       .debug_str	00000000 
00041958 l       .debug_str	00000000 
000419a6 l       .debug_str	00000000 
000419ee l       .debug_str	00000000 
000419f8 l       .debug_str	00000000 
00041a66 l       .debug_str	00000000 
00041aa2 l       .debug_str	00000000 
00041ac5 l       .debug_str	00000000 
00041b35 l       .debug_str	00000000 
00041b7d l       .debug_str	00000000 
00041b86 l       .debug_str	00000000 
00041be3 l       .debug_str	00000000 
00041c46 l       .debug_str	00000000 
00041ca6 l       .debug_str	00000000 
00041d06 l       .debug_str	00000000 
00041d62 l       .debug_str	00000000 
00041dc1 l       .debug_str	00000000 
00041e21 l       .debug_str	00000000 
00041e3c l       .debug_str	00000000 
0001c87c l       .debug_str	00000000 
00041e90 l       .debug_str	00000000 
00041f0e l       .debug_str	00000000 
00041f38 l       .debug_str	00000000 
00041f9a l       .debug_str	00000000 
00041ffb l       .debug_str	00000000 
00042055 l       .debug_str	00000000 
000420ba l       .debug_str	00000000 
0004210c l       .debug_str	00000000 
00042154 l       .debug_str	00000000 
0004216f l       .debug_str	00000000 
000421e9 l       .debug_str	00000000 
00042236 l       .debug_str	00000000 
000422b0 l       .debug_str	00000000 
000422fd l       .debug_str	00000000 
00042351 l       .debug_str	00000000 
000423a3 l       .debug_str	00000000 
0004240b l       .debug_str	00000000 
0004246b l       .debug_str	00000000 
000424c5 l       .debug_str	00000000 
00042524 l       .debug_str	00000000 
0004257e l       .debug_str	00000000 
000425db l       .debug_str	00000000 
000243b9 l       .debug_str	00000000 
00042619 l       .debug_str	00000000 
0002539c l       .debug_str	00000000 
00042654 l       .debug_str	00000000 
000426c6 l       .debug_str	00000000 
00042799 l       .debug_str	00000000 
0001ca3c l       .debug_str	00000000 
000427e1 l       .debug_str	00000000 
0004282f l       .debug_str	00000000 
00042839 l       .debug_str	00000000 
00042881 l       .debug_str	00000000 
0004288d l       .debug_str	00000000 
00042901 l       .debug_str	00000000 
0004290c l       .debug_str	00000000 
00042948 l       .debug_str	00000000 
0004296f l       .debug_str	00000000 
000429c0 l       .debug_str	00000000 
000429cd l       .debug_str	00000000 
000429db l       .debug_str	00000000 
000429ee l       .debug_str	00000000 
000429f9 l       .debug_str	00000000 
00042a3b l       .debug_str	00000000 
00042a50 l       .debug_str	00000000 
00042aba l       .debug_str	00000000 
00042b17 l       .debug_str	00000000 
00042b77 l       .debug_str	00000000 
00042bd7 l       .debug_str	00000000 
00042c49 l       .debug_str	00000000 
00042c96 l       .debug_str	00000000 
00042cf5 l       .debug_str	00000000 
00042d4f l       .debug_str	00000000 
00042dc2 l       .debug_str	00000000 
00042dcf l       .debug_str	00000000 
00042e2f l       .debug_str	00000000 
00042e4e l       .debug_str	00000000 
00042eb6 l       .debug_str	00000000 
00042ed1 l       .debug_str	00000000 
00042f29 l       .debug_str	00000000 
00042f73 l       .debug_str	00000000 
00042fd7 l       .debug_str	00000000 
00042ff6 l       .debug_str	00000000 
00043058 l       .debug_str	00000000 
000430be l       .debug_str	00000000 
0004313e l       .debug_str	00000000 
0004318d l       .debug_str	00000000 
00043203 l       .debug_str	00000000 
00043279 l       .debug_str	00000000 
0004334e l       .debug_str	00000000 
000433ab l       .debug_str	00000000 
00043409 l       .debug_str	00000000 
00043489 l       .debug_str	00000000 
000434f8 l       .debug_str	00000000 
00043576 l       .debug_str	00000000 
000435c9 l       .debug_str	00000000 
0004362e l       .debug_str	00000000 
0004368e l       .debug_str	00000000 
000436fc l       .debug_str	00000000 
00043794 l       .debug_str	00000000 
00043823 l       .debug_str	00000000 
000438b1 l       .debug_str	00000000 
0004393f l       .debug_str	00000000 
00043a4f l       .debug_str	00000000 
00043ac3 l       .debug_str	00000000 
00043b05 l       .debug_str	00000000 
00043b4e l       .debug_str	00000000 
00043ba8 l       .debug_str	00000000 
00043c21 l       .debug_str	00000000 
00043c2e l       .debug_str	00000000 
00043c33 l       .debug_str	00000000 
00043c9f l       .debug_str	00000000 
00043ce6 l       .debug_str	00000000 
00043d70 l       .debug_str	00000000 
00043d8f l       .debug_str	00000000 
00043e19 l       .debug_str	00000000 
00043e3d l       .debug_str	00000000 
00043e81 l       .debug_str	00000000 
00043ee5 l       .debug_str	00000000 
00043f29 l       .debug_str	00000000 
00043f9b l       .debug_str	00000000 
00044059 l       .debug_str	00000000 
000440bb l       .debug_str	00000000 
00044153 l       .debug_str	00000000 
00044202 l       .debug_str	00000000 
00044298 l       .debug_str	00000000 
0004432b l       .debug_str	00000000 
0004436f l       .debug_str	00000000 
000443c2 l       .debug_str	00000000 
00044446 l       .debug_str	00000000 
000444d4 l       .debug_str	00000000 
00044528 l       .debug_str	00000000 
00044539 l       .debug_str	00000000 
000445be l       .debug_str	00000000 
0004464a l       .debug_str	00000000 
00044653 l       .debug_str	00000000 
00044660 l       .debug_str	00000000 
000446b7 l       .debug_str	00000000 
0004473c l       .debug_str	00000000 
0004478e l       .debug_str	00000000 
0004479d l       .debug_str	00000000 
000447e4 l       .debug_str	00000000 
00044848 l       .debug_str	00000000 
00044869 l       .debug_str	00000000 
000448e9 l       .debug_str	00000000 
00044954 l       .debug_str	00000000 
000449d2 l       .debug_str	00000000 
00044a21 l       .debug_str	00000000 
00044a80 l       .debug_str	00000000 
00044b18 l       .debug_str	00000000 
00044bbe l       .debug_str	00000000 
00044c54 l       .debug_str	00000000 
00044cde l       .debug_str	00000000 
00044d54 l       .debug_str	00000000 
00044d9d l       .debug_str	00000000 
00044df9 l       .debug_str	00000000 
00044e74 l       .debug_str	00000000 
00044ee0 l       .debug_str	00000000 
00044f6a l       .debug_str	00000000 
00044fae l       .debug_str	00000000 
0004500f l       .debug_str	00000000 
00045053 l       .debug_str	00000000 
000450d7 l       .debug_str	00000000 
00045161 l       .debug_str	00000000 
000451b3 l       .debug_str	00000000 
00045231 l       .debug_str	00000000 
000452b6 l       .debug_str	00000000 
0004530d l       .debug_str	00000000 
0004538e l       .debug_str	00000000 
0004544c l       .debug_str	00000000 
000454ab l       .debug_str	00000000 
0004550e l       .debug_str	00000000 
00045533 l       .debug_str	00000000 
00045597 l       .debug_str	00000000 
000455b8 l       .debug_str	00000000 
00045638 l       .debug_str	00000000 
000456a3 l       .debug_str	00000000 
00045721 l       .debug_str	00000000 
00045770 l       .debug_str	00000000 
000457cf l       .debug_str	00000000 
00045867 l       .debug_str	00000000 
0004590d l       .debug_str	00000000 
000459a3 l       .debug_str	00000000 
00045a2d l       .debug_str	00000000 
00045aa3 l       .debug_str	00000000 
00045aec l       .debug_str	00000000 
00045b48 l       .debug_str	00000000 
00045bc3 l       .debug_str	00000000 
00045c2f l       .debug_str	00000000 
00045cb9 l       .debug_str	00000000 
00045cfd l       .debug_str	00000000 
00045d5e l       .debug_str	00000000 
00045da2 l       .debug_str	00000000 
00045e26 l       .debug_str	00000000 
00045eb0 l       .debug_str	00000000 
00045f2e l       .debug_str	00000000 
00045fb3 l       .debug_str	00000000 
0004600a l       .debug_str	00000000 
0004608b l       .debug_str	00000000 
00046149 l       .debug_str	00000000 
000461a8 l       .debug_str	00000000 
000461db l       .debug_str	00000000 
0004620e l       .debug_str	00000000 
00046241 l       .debug_str	00000000 
00046274 l       .debug_str	00000000 
000462a7 l       .debug_str	00000000 
000462da l       .debug_str	00000000 
0004630d l       .debug_str	00000000 
00046361 l       .debug_str	00000000 
0004638f l       .debug_str	00000000 
000463e3 l       .debug_str	00000000 
00058dc0 l       .debug_str	00000000 
000123ee l       .debug_str	00000000 
000463f6 l       .debug_str	00000000 
000463fa l       .debug_str	00000000 
000463fe l       .debug_str	00000000 
00046402 l       .debug_str	00000000 
00046409 l       .debug_str	00000000 
0004640e l       .debug_str	00000000 
0004643e l       .debug_str	00000000 
00046490 l       .debug_str	00000000 
000464d1 l       .debug_str	00000000 
000464de l       .debug_str	00000000 
0004651d l       .debug_str	00000000 
00046528 l       .debug_str	00000000 
00046564 l       .debug_str	00000000 
00046572 l       .debug_str	00000000 
000465a6 l       .debug_str	00000000 
000465e1 l       .debug_str	00000000 
0004661f l       .debug_str	00000000 
0004662d l       .debug_str	00000000 
00046666 l       .debug_str	00000000 
00046670 l       .debug_str	00000000 
000466ac l       .debug_str	00000000 
00046708 l       .debug_str	00000000 
0004670f l       .debug_str	00000000 
0004676d l       .debug_str	00000000 
00046776 l       .debug_str	00000000 
000467dd l       .debug_str	00000000 
000467ee l       .debug_str	00000000 
0004684b l       .debug_str	00000000 
000468aa l       .debug_str	00000000 
00046906 l       .debug_str	00000000 
00046964 l       .debug_str	00000000 
000469cb l       .debug_str	00000000 
00046a28 l       .debug_str	00000000 
00046a87 l       .debug_str	00000000 
00046ac0 l       .debug_str	00000000 
00046aca l       .debug_str	00000000 
00046b32 l       .debug_str	00000000 
00046b65 l       .debug_str	00000000 
00046b6f l       .debug_str	00000000 
00046ba5 l       .debug_str	00000000 
00046bb1 l       .debug_str	00000000 
00046be8 l       .debug_str	00000000 
00046bf5 l       .debug_str	00000000 
00046c39 l       .debug_str	00000000 
00046c53 l       .debug_str	00000000 
00046cc4 l       .debug_str	00000000 
00046cd7 l       .debug_str	00000000 
00046d48 l       .debug_str	00000000 
00046d8b l       .debug_str	00000000 
00046d95 l       .debug_str	00000000 
00046ddf l       .debug_str	00000000 
00046e26 l       .debug_str	00000000 
00046e73 l       .debug_str	00000000 
00046ebd l       .debug_str	00000000 
00046eef l       .debug_str	00000000 
00046ef8 l       .debug_str	00000000 
00046f2c l       .debug_str	00000000 
00046f65 l       .debug_str	00000000 
00046fa1 l       .debug_str	00000000 
00046fb3 l       .debug_str	00000000 
00046ff4 l       .debug_str	00000000 
00047053 l       .debug_str	00000000 
00047084 l       .debug_str	00000000 
0004709a l       .debug_str	00000000 
000470cf l       .debug_str	00000000 
0004712c l       .debug_str	00000000 
00047190 l       .debug_str	00000000 
000471ef l       .debug_str	00000000 
0004724f l       .debug_str	00000000 
000472ad l       .debug_str	00000000 
00021729 l       .debug_str	00000000 
00047312 l       .debug_str	00000000 
00047358 l       .debug_str	00000000 
00047398 l       .debug_str	00000000 
00047420 l       .debug_str	00000000 
000557f6 l       .debug_str	00000000 
000474a7 l       .debug_str	00000000 
000474da l       .debug_str	00000000 
0004754e l       .debug_str	00000000 
000475c7 l       .debug_str	00000000 
0004763b l       .debug_str	00000000 
0004769a l       .debug_str	00000000 
000476f7 l       .debug_str	00000000 
00047751 l       .debug_str	00000000 
000477ad l       .debug_str	00000000 
0004780a l       .debug_str	00000000 
00047869 l       .debug_str	00000000 
000478d1 l       .debug_str	00000000 
0004793b l       .debug_str	00000000 
000479a4 l       .debug_str	00000000 
00047a02 l       .debug_str	00000000 
00047a74 l       .debug_str	00000000 
00047a78 l       .debug_str	00000000 
00047aeb l       .debug_str	00000000 
00047b49 l       .debug_str	00000000 
00047ba5 l       .debug_str	00000000 
00047c16 l       .debug_str	00000000 
00047c8c l       .debug_str	00000000 
00047cc3 l       .debug_str	00000000 
00047d1f l       .debug_str	00000000 
00047d73 l       .debug_str	00000000 
00047dd1 l       .debug_str	00000000 
00047e3d l       .debug_str	00000000 
00047e92 l       .debug_str	00000000 
00047ec5 l       .debug_str	00000000 
00047ed3 l       .debug_str	00000000 
00047f0b l       .debug_str	00000000 
00047f1e l       .debug_str	00000000 
00047f53 l       .debug_str	00000000 
00047f89 l       .debug_str	00000000 
00047fe4 l       .debug_str	00000000 
00048017 l       .debug_str	00000000 
0004801e l       .debug_str	00000000 
00048060 l       .debug_str	00000000 
00048091 l       .debug_str	00000000 
000480c2 l       .debug_str	00000000 
000480f5 l       .debug_str	00000000 
000480fc l       .debug_str	00000000 
00048129 l       .debug_str	00000000 
00048164 l       .debug_str	00000000 
00048177 l       .debug_str	00000000 
000481a8 l       .debug_str	00000000 
000481b2 l       .debug_str	00000000 
00048213 l       .debug_str	00000000 
0004827b l       .debug_str	00000000 
000482b8 l       .debug_str	00000000 
00048306 l       .debug_str	00000000 
00048342 l       .debug_str	00000000 
0004837e l       .debug_str	00000000 
000483b7 l       .debug_str	00000000 
000483f1 l       .debug_str	00000000 
0004842a l       .debug_str	00000000 
00048461 l       .debug_str	00000000 
0004849a l       .debug_str	00000000 
000484d4 l       .debug_str	00000000 
0004851a l       .debug_str	00000000 
0004853d l       .debug_str	00000000 
00048583 l       .debug_str	00000000 
000485a6 l       .debug_str	00000000 
000485ef l       .debug_str	00000000 
00048615 l       .debug_str	00000000 
0004865e l       .debug_str	00000000 
00048684 l       .debug_str	00000000 
000486ce l       .debug_str	00000000 
000486f5 l       .debug_str	00000000 
0004873f l       .debug_str	00000000 
00048766 l       .debug_str	00000000 
000487b3 l       .debug_str	00000000 
000487dd l       .debug_str	00000000 
0004882a l       .debug_str	00000000 
00048854 l       .debug_str	00000000 
00048887 l       .debug_str	00000000 
000488b3 l       .debug_str	00000000 
00048909 l       .debug_str	00000000 
00048934 l       .debug_str	00000000 
0004898c l       .debug_str	00000000 
000489e2 l       .debug_str	00000000 
00048a1b l       .debug_str	00000000 
00048a26 l       .debug_str	00000000 
000201fd l       .debug_str	00000000 
00048a5f l       .debug_str	00000000 
00048a86 l       .debug_str	00000000 
00048abf l       .debug_str	00000000 
00048b06 l       .debug_str	00000000 
00048b13 l       .debug_str	00000000 
00048d2d l       .debug_str	00000000 
00048b42 l       .debug_str	00000000 
00048b82 l       .debug_str	00000000 
00048b96 l       .debug_str	00000000 
00048bd8 l       .debug_str	00000000 
00048c09 l       .debug_str	00000000 
00048c39 l       .debug_str	00000000 
00048c6a l       .debug_str	00000000 
00048c9b l       .debug_str	00000000 
00048cd2 l       .debug_str	00000000 
00048cdd l       .debug_str	00000000 
00048d1d l       .debug_str	00000000 
00048d31 l       .debug_str	00000000 
00048d6d l       .debug_str	00000000 
00048d7d l       .debug_str	00000000 
00048db2 l       .debug_str	00000000 
00048dbc l       .debug_str	00000000 
00048df1 l       .debug_str	00000000 
00048dfb l       .debug_str	00000000 
00048e50 l       .debug_str	00000000 
00048e98 l       .debug_str	00000000 
00048ede l       .debug_str	00000000 
00048f25 l       .debug_str	00000000 
00048f6e l       .debug_str	00000000 
00048fc0 l       .debug_str	00000000 
00049012 l       .debug_str	00000000 
000490b0 l       .debug_str	00000000 
000490e2 l       .debug_str	00000000 
0004911b l       .debug_str	00000000 
00049130 l       .debug_str	00000000 
0004916b l       .debug_str	00000000 
00049182 l       .debug_str	00000000 
000491c0 l       .debug_str	00000000 
000491da l       .debug_str	00000000 
0004923c l       .debug_str	00000000 
00049261 l       .debug_str	00000000 
000492bc l       .debug_str	00000000 
000492cb l       .debug_str	00000000 
00049340 l       .debug_str	00000000 
0004935d l       .debug_str	00000000 
00049397 l       .debug_str	00000000 
000493d4 l       .debug_str	00000000 
000493df l       .debug_str	00000000 
00049417 l       .debug_str	00000000 
0004941e l       .debug_str	00000000 
0004949d l       .debug_str	00000000 
000494fd l       .debug_str	00000000 
0004955b l       .debug_str	00000000 
000495b9 l       .debug_str	00000000 
000495f1 l       .debug_str	00000000 
00049626 l       .debug_str	00000000 
00049651 l       .debug_str	00000000 
0004965b l       .debug_str	00000000 
0004968b l       .debug_str	00000000 
00049699 l       .debug_str	00000000 
000496f2 l       .debug_str	00000000 
00049745 l       .debug_str	00000000 
000497c1 l       .debug_str	00000000 
00049825 l       .debug_str	00000000 
00049889 l       .debug_str	00000000 
000498bf l       .debug_str	00000000 
000498d3 l       .debug_str	00000000 
00049914 l       .debug_str	00000000 
0004992c l       .debug_str	00000000 
000499e0 l       .debug_str	00000000 
00049a13 l       .debug_str	00000000 
00049a24 l       .debug_str	00000000 
00049a6a l       .debug_str	00000000 
00049a77 l       .debug_str	00000000 
00049ab4 l       .debug_str	00000000 
00049af8 l       .debug_str	00000000 
00049b39 l       .debug_str	00000000 
00049b7b l       .debug_str	00000000 
00049b85 l       .debug_str	00000000 
00049bc9 l       .debug_str	00000000 
00049bd4 l       .debug_str	00000000 
00049c22 l       .debug_str	00000000 
00049c70 l       .debug_str	00000000 
00049cb6 l       .debug_str	00000000 
00049cfe l       .debug_str	00000000 
00049d46 l       .debug_str	00000000 
000152bd l       .debug_str	00000000 
00049dad l       .debug_str	00000000 
00049e06 l       .debug_str	00000000 
00049e70 l       .debug_str	00000000 
00018a66 l       .debug_str	00000000 
00049eda l       .debug_str	00000000 
00049f55 l       .debug_str	00000000 
00049fca l       .debug_str	00000000 
00049fd5 l       .debug_str	00000000 
0004a04a l       .debug_str	00000000 
0004a055 l       .debug_str	00000000 
0004a0ac l       .debug_str	00000000 
0004a110 l       .debug_str	00000000 
0004a11c l       .debug_str	00000000 
0004a159 l       .debug_str	00000000 
0004a166 l       .debug_str	00000000 
0004a19a l       .debug_str	00000000 
0004a1d5 l       .debug_str	00000000 
0004a231 l       .debug_str	00000000 
0004a28c l       .debug_str	00000000 
0004a2e6 l       .debug_str	00000000 
00030d20 l       .debug_str	00000000 
0004a32c l       .debug_str	00000000 
0004a392 l       .debug_str	00000000 
0004a3c9 l       .debug_str	00000000 
0004a3d1 l       .debug_str	00000000 
0004a409 l       .debug_str	00000000 
0004a412 l       .debug_str	00000000 
0004a44a l       .debug_str	00000000 
0004a453 l       .debug_str	00000000 
0004a48a l       .debug_str	00000000 
0004a492 l       .debug_str	00000000 
0004a4ca l       .debug_str	00000000 
0004a4d3 l       .debug_str	00000000 
0004a50b l       .debug_str	00000000 
0004a514 l       .debug_str	00000000 
0004a54b l       .debug_str	00000000 
0004a553 l       .debug_str	00000000 
0004a5cd l       .debug_str	00000000 
0004a647 l       .debug_str	00000000 
0004a6c1 l       .debug_str	00000000 
0004a73d l       .debug_str	00000000 
0001c1bc l       .debug_str	00000000 
0004a79b l       .debug_str	00000000 
0004a7fa l       .debug_str	00000000 
0004a859 l       .debug_str	00000000 
0004a8b8 l       .debug_str	00000000 
0004a918 l       .debug_str	00000000 
0004a976 l       .debug_str	00000000 
0004a9d5 l       .debug_str	00000000 
0004aa34 l       .debug_str	00000000 
0004aa93 l       .debug_str	00000000 
0004aaf3 l       .debug_str	00000000 
0004ab48 l       .debug_str	00000000 
0004ab9d l       .debug_str	00000000 
0004abf7 l       .debug_str	00000000 
0004ac51 l       .debug_str	00000000 
0004ac8b l       .debug_str	00000000 
0004ac94 l       .debug_str	00000000 
0004acce l       .debug_str	00000000 
0004acd7 l       .debug_str	00000000 
0004ad14 l       .debug_str	00000000 
0003220b l       .debug_str	00000000 
0004ad4d l       .debug_str	00000000 
0004adae l       .debug_str	00000000 
0004ae0c l       .debug_str	00000000 
0004ae4d l       .debug_str	00000000 
0004ae8b l       .debug_str	00000000 
0004aec4 l       .debug_str	00000000 
0004af03 l       .debug_str	00000000 
0004af41 l       .debug_str	00000000 
0004af7f l       .debug_str	00000000 
0004afc0 l       .debug_str	00000000 
0004b004 l       .debug_str	00000000 
0004b041 l       .debug_str	00000000 
0004b0a7 l       .debug_str	00000000 
0004b10e l       .debug_str	00000000 
0004b171 l       .debug_str	00000000 
0004b1d3 l       .debug_str	00000000 
0004b238 l       .debug_str	00000000 
0004b2a1 l       .debug_str	00000000 
0004b307 l       .debug_str	00000000 
0004b36d l       .debug_str	00000000 
0004b3c8 l       .debug_str	00000000 
0004b42f l       .debug_str	00000000 
0004b49a l       .debug_str	00000000 
0004b4f5 l       .debug_str	00000000 
0004b550 l       .debug_str	00000000 
00024482 l       .debug_str	00000000 
0004b597 l       .debug_str	00000000 
0004b5df l       .debug_str	00000000 
0004b627 l       .debug_str	00000000 
0004b66f l       .debug_str	00000000 
0004b6b8 l       .debug_str	00000000 
0004b702 l       .debug_str	00000000 
0004b749 l       .debug_str	00000000 
0004b79c l       .debug_str	00000000 
0004b7b7 l       .debug_str	00000000 
0004b7ff l       .debug_str	00000000 
0004b853 l       .debug_str	00000000 
0004b89b l       .debug_str	00000000 
0004b8ef l       .debug_str	00000000 
0004b937 l       .debug_str	00000000 
0004b98b l       .debug_str	00000000 
0004b9d4 l       .debug_str	00000000 
0004ba29 l       .debug_str	00000000 
0004ba73 l       .debug_str	00000000 
0004bacb l       .debug_str	00000000 
0004bb2d l       .debug_str	00000000 
0004bb8c l       .debug_str	00000000 
0004bbec l       .debug_str	00000000 
0004bc4c l       .debug_str	00000000 
0004bcac l       .debug_str	00000000 
0004bd0d l       .debug_str	00000000 
0004bd6c l       .debug_str	00000000 
0004bdcc l       .debug_str	00000000 
0004be2c l       .debug_str	00000000 
0004be8c l       .debug_str	00000000 
0004beed l       .debug_str	00000000 
0004bf4a l       .debug_str	00000000 
0004bfa5 l       .debug_str	00000000 
0004bffb l       .debug_str	00000000 
0004c059 l       .debug_str	00000000 
0004c0ad l       .debug_str	00000000 
0004c10e l       .debug_str	00000000 
0004c174 l       .debug_str	00000000 
0004c1dc l       .debug_str	00000000 
0004c243 l       .debug_str	00000000 
0004c29f l       .debug_str	00000000 
0004c300 l       .debug_str	00000000 
0004c35a l       .debug_str	00000000 
0004c3b4 l       .debug_str	00000000 
0004c412 l       .debug_str	00000000 
0004c466 l       .debug_str	00000000 
0004c4e2 l       .debug_str	00000000 
0004c54b l       .debug_str	00000000 
0004c5c7 l       .debug_str	00000000 
0004c643 l       .debug_str	00000000 
0004c6ac l       .debug_str	00000000 
0004c728 l       .debug_str	00000000 
0004c795 l       .debug_str	00000000 
0004c7ef l       .debug_str	00000000 
0004c848 l       .debug_str	00000000 
0004c8a0 l       .debug_str	00000000 
0004c8ff l       .debug_str	00000000 
0004c95e l       .debug_str	00000000 
0004c9bd l       .debug_str	00000000 
0004ca1d l       .debug_str	00000000 
0004ca7d l       .debug_str	00000000 
0004cadd l       .debug_str	00000000 
0004cb3d l       .debug_str	00000000 
0004cb9f l       .debug_str	00000000 
0004cc01 l       .debug_str	00000000 
0004cc62 l       .debug_str	00000000 
0004ccc4 l       .debug_str	00000000 
0004cd26 l       .debug_str	00000000 
0004cd87 l       .debug_str	00000000 
0004cde9 l       .debug_str	00000000 
0004ce4b l       .debug_str	00000000 
0003224f l       .debug_str	00000000 
0004ce94 l       .debug_str	00000000 
0004cee0 l       .debug_str	00000000 
0004cee8 l       .debug_str	00000000 
0004cf32 l       .debug_str	00000000 
0004cf7d l       .debug_str	00000000 
0004cf84 l       .debug_str	00000000 
0004cfcf l       .debug_str	00000000 
0004d01a l       .debug_str	00000000 
0004d066 l       .debug_str	00000000 
0004d0b0 l       .debug_str	00000000 
0004d0fd l       .debug_str	00000000 
0004d148 l       .debug_str	00000000 
0004d194 l       .debug_str	00000000 
0004d1e0 l       .debug_str	00000000 
0004d22c l       .debug_str	00000000 
0004d279 l       .debug_str	00000000 
0004d2c3 l       .debug_str	00000000 
0004d310 l       .debug_str	00000000 
0004d35b l       .debug_str	00000000 
0004d3a7 l       .debug_str	00000000 
0004d3f3 l       .debug_str	00000000 
0004d43f l       .debug_str	00000000 
0004d48c l       .debug_str	00000000 
0004d4d6 l       .debug_str	00000000 
0004d523 l       .debug_str	00000000 
0004d56e l       .debug_str	00000000 
0004d5ba l       .debug_str	00000000 
0004d606 l       .debug_str	00000000 
0004d652 l       .debug_str	00000000 
0004d69f l       .debug_str	00000000 
0004d6ea l       .debug_str	00000000 
0004d738 l       .debug_str	00000000 
0004d784 l       .debug_str	00000000 
0004d7d1 l       .debug_str	00000000 
0004d81e l       .debug_str	00000000 
0004d86b l       .debug_str	00000000 
0004d8b9 l       .debug_str	00000000 
0004d904 l       .debug_str	00000000 
0004d94f l       .debug_str	00000000 
0004d99b l       .debug_str	00000000 
0004d9e7 l       .debug_str	00000000 
0004da34 l       .debug_str	00000000 
0004da80 l       .debug_str	00000000 
0004dacd l       .debug_str	00000000 
0004db1a l       .debug_str	00000000 
0004db79 l       .debug_str	00000000 
0004dbd6 l       .debug_str	00000000 
0004dc32 l       .debug_str	00000000 
0004dc90 l       .debug_str	00000000 
0004dced l       .debug_str	00000000 
0004dd4b l       .debug_str	00000000 
0004dda8 l       .debug_str	00000000 
0004de06 l       .debug_str	00000000 
0004de63 l       .debug_str	00000000 
0004dec2 l       .debug_str	00000000 
0004df20 l       .debug_str	00000000 
0004df81 l       .debug_str	00000000 
0004dfe2 l       .debug_str	00000000 
0004e045 l       .debug_str	00000000 
0004e076 l       .debug_str	00000000 
0004e07e l       .debug_str	00000000 
0004e0e1 l       .debug_str	00000000 
0004e144 l       .debug_str	00000000 
0004e1a8 l       .debug_str	00000000 
0004e20c l       .debug_str	00000000 
0004e270 l       .debug_str	00000000 
0004e2d4 l       .debug_str	00000000 
0004e337 l       .debug_str	00000000 
0004e39a l       .debug_str	00000000 
0004e3fe l       .debug_str	00000000 
0004e462 l       .debug_str	00000000 
0004e4c6 l       .debug_str	00000000 
0004e52a l       .debug_str	00000000 
0004e55b l       .debug_str	00000000 
0004e563 l       .debug_str	00000000 
0004e5c7 l       .debug_str	00000000 
0004e62b l       .debug_str	00000000 
0004e68f l       .debug_str	00000000 
0004e6f3 l       .debug_str	00000000 
0004e753 l       .debug_str	00000000 
0004e7b3 l       .debug_str	00000000 
0004e7e1 l       .debug_str	00000000 
0004e7ea l       .debug_str	00000000 
0004e84b l       .debug_str	00000000 
0004e8ac l       .debug_str	00000000 
0004e90d l       .debug_str	00000000 
0004e96e l       .debug_str	00000000 
0004e9c5 l       .debug_str	00000000 
0004ea18 l       .debug_str	00000000 
0004ea60 l       .debug_str	00000000 
0004ea88 l       .debug_str	00000000 
0004ead0 l       .debug_str	00000000 
0004eae6 l       .debug_str	00000000 
0004eb2e l       .debug_str	00000000 
0004eb63 l       .debug_str	00000000 
0004ebab l       .debug_str	00000000 
0004ebe6 l       .debug_str	00000000 
0004ec2e l       .debug_str	00000000 
0004ec76 l       .debug_str	00000000 
0004ec97 l       .debug_str	00000000 
0004ecdf l       .debug_str	00000000 
0004ecea l       .debug_str	00000000 
0004ed32 l       .debug_str	00000000 
0004ed6f l       .debug_str	00000000 
0004edb7 l       .debug_str	00000000 
0004ee10 l       .debug_str	00000000 
0004ee58 l       .debug_str	00000000 
0004ee74 l       .debug_str	00000000 
0004eebc l       .debug_str	00000000 
0004ef68 l       .debug_str	00000000 
0004efb0 l       .debug_str	00000000 
0004efce l       .debug_str	00000000 
0004f016 l       .debug_str	00000000 
0004f020 l       .debug_str	00000000 
0004f068 l       .debug_str	00000000 
0004f0a3 l       .debug_str	00000000 
0004f0eb l       .debug_str	00000000 
0004f13a l       .debug_str	00000000 
0004f182 l       .debug_str	00000000 
0004f1a9 l       .debug_str	00000000 
0004f1f1 l       .debug_str	00000000 
0004f21b l       .debug_str	00000000 
0004f263 l       .debug_str	00000000 
0004f2de l       .debug_str	00000000 
0004f326 l       .debug_str	00000000 
0004f36e l       .debug_str	00000000 
0004f384 l       .debug_str	00000000 
000181c0 l       .debug_str	00000000 
0004f3cc l       .debug_str	00000000 
0004f414 l       .debug_str	00000000 
0004f45c l       .debug_str	00000000 
0004f48d l       .debug_str	00000000 
0004f4d5 l       .debug_str	00000000 
0004f539 l       .debug_str	00000000 
0004f581 l       .debug_str	00000000 
0000bc97 l       .debug_str	00000000 
0004f5c9 l       .debug_str	00000000 
0004f611 l       .debug_str	00000000 
0004f61e l       .debug_str	00000000 
0004f666 l       .debug_str	00000000 
0004f670 l       .debug_str	00000000 
0004f6b8 l       .debug_str	00000000 
0004f6c1 l       .debug_str	00000000 
0004f709 l       .debug_str	00000000 
0004f731 l       .debug_str	00000000 
0004f779 l       .debug_str	00000000 
0004f7c1 l       .debug_str	00000000 
0004f7e3 l       .debug_str	00000000 
0004f82b l       .debug_str	00000000 
0004f85c l       .debug_str	00000000 
0004f8a4 l       .debug_str	00000000 
0004f8ec l       .debug_str	00000000 
0004f924 l       .debug_str	00000000 
0004f96c l       .debug_str	00000000 
0004f9a1 l       .debug_str	00000000 
0004f9e9 l       .debug_str	00000000 
0004fa12 l       .debug_str	00000000 
0004fa5a l       .debug_str	00000000 
0004fa7e l       .debug_str	00000000 
0004fac6 l       .debug_str	00000000 
0004faeb l       .debug_str	00000000 
0004fb33 l       .debug_str	00000000 
0004fb50 l       .debug_str	00000000 
0004fb98 l       .debug_str	00000000 
0004fba3 l       .debug_str	00000000 
0004fbeb l       .debug_str	00000000 
0004fc13 l       .debug_str	00000000 
0004fc5b l       .debug_str	00000000 
0004fc6a l       .debug_str	00000000 
0004fcb2 l       .debug_str	00000000 
0004fcfa l       .debug_str	00000000 
0004fd16 l       .debug_str	00000000 
0004fd5e l       .debug_str	00000000 
0004fdd5 l       .debug_str	00000000 
0004fe1d l       .debug_str	00000000 
0004fe94 l       .debug_str	00000000 
0004fedc l       .debug_str	00000000 
0004fee5 l       .debug_str	00000000 
0004ff2d l       .debug_str	00000000 
0004ff53 l       .debug_str	00000000 
0004ff9b l       .debug_str	00000000 
0004ffce l       .debug_str	00000000 
00050016 l       .debug_str	00000000 
00050033 l       .debug_str	00000000 
0005007b l       .debug_str	00000000 
00050084 l       .debug_str	00000000 
000500cc l       .debug_str	00000000 
00050114 l       .debug_str	00000000 
00050138 l       .debug_str	00000000 
0000bd80 l       .debug_str	00000000 
00050180 l       .debug_str	00000000 
000501c8 l       .debug_str	00000000 
00050210 l       .debug_str	00000000 
00050308 l       .debug_str	00000000 
0001c8cc l       .debug_str	00000000 
00050350 l       .debug_str	00000000 
00050398 l       .debug_str	00000000 
000503e0 l       .debug_str	00000000 
0005040d l       .debug_str	00000000 
0000bdd1 l       .debug_str	00000000 
00050455 l       .debug_str	00000000 
0005049d l       .debug_str	00000000 
000504fa l       .debug_str	00000000 
00050542 l       .debug_str	00000000 
0005054b l       .debug_str	00000000 
00050593 l       .debug_str	00000000 
000505b0 l       .debug_str	00000000 
000505f8 l       .debug_str	00000000 
0005062e l       .debug_str	00000000 
00050676 l       .debug_str	00000000 
000506ab l       .debug_str	00000000 
000506f3 l       .debug_str	00000000 
0005072c l       .debug_str	00000000 
00050774 l       .debug_str	00000000 
00050790 l       .debug_str	00000000 
000507d8 l       .debug_str	00000000 
000507e0 l       .debug_str	00000000 
00050828 l       .debug_str	00000000 
00050843 l       .debug_str	00000000 
0005088b l       .debug_str	00000000 
000508b3 l       .debug_str	00000000 
000508fd l       .debug_str	00000000 
00050947 l       .debug_str	00000000 
000509a6 l       .debug_str	00000000 
00050a03 l       .debug_str	00000000 
00050a5c l       .debug_str	00000000 
00050abb l       .debug_str	00000000 
00050b1a l       .debug_str	00000000 
00050b7b l       .debug_str	00000000 
00050bde l       .debug_str	00000000 
00050c46 l       .debug_str	00000000 
00050ca8 l       .debug_str	00000000 
00050d0e l       .debug_str	00000000 
00050d70 l       .debug_str	00000000 
00050dd5 l       .debug_str	00000000 
00050e38 l       .debug_str	00000000 
00050e94 l       .debug_str	00000000 
00050eeb l       .debug_str	00000000 
00050f44 l       .debug_str	00000000 
00050f97 l       .debug_str	00000000 
00050ff3 l       .debug_str	00000000 
00051059 l       .debug_str	00000000 
000510af l       .debug_str	00000000 
0005110c l       .debug_str	00000000 
0005116e l       .debug_str	00000000 
000511c7 l       .debug_str	00000000 
00051222 l       .debug_str	00000000 
0005127d l       .debug_str	00000000 
000512d8 l       .debug_str	00000000 
00051335 l       .debug_str	00000000 
00051392 l       .debug_str	00000000 
000513d8 l       .debug_str	00000000 
00051422 l       .debug_str	00000000 
00051462 l       .debug_str	00000000 
0005149f l       .debug_str	00000000 
000514e3 l       .debug_str	00000000 
0005151f l       .debug_str	00000000 
00051563 l       .debug_str	00000000 
000515ac l       .debug_str	00000000 
000515b5 l       .debug_str	00000000 
000515fe l       .debug_str	00000000 
00051607 l       .debug_str	00000000 
00051670 l       .debug_str	00000000 
000516cd l       .debug_str	00000000 
00051730 l       .debug_str	00000000 
00051786 l       .debug_str	00000000 
000517dc l       .debug_str	00000000 
00051835 l       .debug_str	00000000 
0005188d l       .debug_str	00000000 
000518f1 l       .debug_str	00000000 
00051977 l       .debug_str	00000000 
0005197d l       .debug_str	00000000 
00051a03 l       .debug_str	00000000 
00051a09 l       .debug_str	00000000 
00051a8b l       .debug_str	00000000 
00051b0d l       .debug_str	00000000 
00051b90 l       .debug_str	00000000 
00051b97 l       .debug_str	00000000 
00051c1a l       .debug_str	00000000 
00051c21 l       .debug_str	00000000 
00051ca7 l       .debug_str	00000000 
00051d2d l       .debug_str	00000000 
00051db0 l       .debug_str	00000000 
00051e33 l       .debug_str	00000000 
00051eb5 l       .debug_str	00000000 
00051f3b l       .debug_str	00000000 
00051fc1 l       .debug_str	00000000 
0005204b l       .debug_str	00000000 
000520d3 l       .debug_str	00000000 
0005215b l       .debug_str	00000000 
000521c3 l       .debug_str	00000000 
0005222c l       .debug_str	00000000 
00052296 l       .debug_str	00000000 
00052301 l       .debug_str	00000000 
0005235f l       .debug_str	00000000 
000523bd l       .debug_str	00000000 
0005241b l       .debug_str	00000000 
0005247a l       .debug_str	00000000 
000524d8 l       .debug_str	00000000 
00052537 l       .debug_str	00000000 
00052595 l       .debug_str	00000000 
000525f4 l       .debug_str	00000000 
00052653 l       .debug_str	00000000 
000526b2 l       .debug_str	00000000 
00052710 l       .debug_str	00000000 
0005276f l       .debug_str	00000000 
000527ce l       .debug_str	00000000 
0005282d l       .debug_str	00000000 
0005288c l       .debug_str	00000000 
000528eb l       .debug_str	00000000 
0005294a l       .debug_str	00000000 
000529a9 l       .debug_str	00000000 
00052a08 l       .debug_str	00000000 
00052a67 l       .debug_str	00000000 
00052ac6 l       .debug_str	00000000 
00052b25 l       .debug_str	00000000 
00052b84 l       .debug_str	00000000 
00052be3 l       .debug_str	00000000 
00052c42 l       .debug_str	00000000 
00052ca1 l       .debug_str	00000000 
00052d00 l       .debug_str	00000000 
00052d5f l       .debug_str	00000000 
00052dbe l       .debug_str	00000000 
00052e1d l       .debug_str	00000000 
00052e7d l       .debug_str	00000000 
00052edc l       .debug_str	00000000 
00052f3b l       .debug_str	00000000 
00052f9a l       .debug_str	00000000 
00052ffa l       .debug_str	00000000 
00053059 l       .debug_str	00000000 
000530b8 l       .debug_str	00000000 
00053117 l       .debug_str	00000000 
00053177 l       .debug_str	00000000 
00014fbc l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE
00016e16 l     F .text	0000000a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E
00016e20 l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E
0001562a l     F .text	000000e4 _ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE
00016652 l     F .text	0000024c _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE
00015524 l     F .text	000000b0 _ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E
000155d4 l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE
00015b4c l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E
00014f6c l     F .text	00000002 _ZN4core3ptr13drop_in_place17h000c7c147ade2111E
00014fd0 l     F .text	00000114 _ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E
0001ebb4 l     O .text	0000007b _ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E
0001ec2f l     O .text	000001f0 _ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E
0001ee20 l     O .text	00000458 _ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E
0001e190 l     O .text	00000010 _ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE
000155fe l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE
00015604 l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE
000155f8 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E
00014f6e l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE
00000000 l    df *ABS*	00000000 semihosting_console.c
00016e2c l     F .text	00000024 __semihost
00016e50 l     F .text	00000010 debugger_connected
00016e60 l     F .text	0000002e semihost_write
00016f34 l     F .text	0000001c semihosting_console_write_ch
20007704 l     O .bss	00000004 semihost_mbuf
20000100 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
20007708 l     O .bss	00000010 avail_queue
20007718 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20007724 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
00017104 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_gpio.c
00017158 l     F .text	00000050 hal_gpio_irq_handler
000171a8 l     F .text	0000002c hal_gpio_irq_setup
000171d4 l     F .text	0000001c hal_gpio_find_empty_slot
000171f0 l     F .text	00000038 hal_gpio_find_pin
20007728 l     O .bss	00000040 hal_gpio_irqs
20007768 l     O .bss	00000001 irq_setup.8906
00000000 l    df *ABS*	00000000 hal_i2c.c
00017384 l     F .text	0000007a hal_i2c_delay_us
00017400 l     F .text	00000024 hal_i2c_resolve
00017424 l     F .text	0000001c hal_i2c_convert_status
00017440 l     F .text	00000012 read_gpio_inbuffer
00017452 l     F .text	000000a2 hal_i2c_clear_bus
0001f288 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_spi.c
000177f0 l     F .text	0000006e nrf52_irqm_handler
00017878 l     F .text	00000014 hal_spi_stop_transfer
0001788c l     F .text	0000004c hal_spi_config_slave
000178d8 l     F .text	000000b8 hal_spi_init_master
00017990 l     F .text	000000e0 hal_spi_config_master
0001f290 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
00017d74 l     F .text	0000000e nrf52_hal_wdt_default_handler
00017d84 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00017f9c l     F .text	00000016 os_main
20007870 l     O .bss	00002000 g_os_main_stack
20007770 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
000182ac l     F .text	0000005c os_dev_add
00018308 l     F .text	00000026 os_dev_initialize
0001832e l     F .text	00000020 os_dev_init
20009870 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20009878 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
00018858 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0001896c l     F .text	00000010 os_msys_find_biggest_pool
0001897c l     F .text	0000002c os_msys_find_pool
000189f4 l     F .text	00000044 os_msys_init_once
20009888 l     O .bss	00004900 os_msys_1_data
2000e188 l     O .bss	0000000c os_msys_1_mbuf_pool
2000e194 l     O .bss	0000001c os_msys_1_mempool
2000010c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
00018c50 l     F .text	00000020 os_sanity_check_list_lock
00018c70 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
000190e4 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
000191d4 l     F .text	0000004c os_deltatime
00019220 l     F .text	0000005c os_time_tick
2000e1b8 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0001953c l       .text	00000000 SVC_User
0001955a l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
000195fc l       .text	00000000 test1
000195f0 l       .text	00000000 loop1
00019602 l       .text	00000000 res1
0001961e l       .text	00000000 test2
00019626 l       .text	00000000 done
00019612 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00019632 l       .text	00000000 test1
0001962e l       .text	00000000 loop1
00019640 l       .text	00000000 test2
0001963c l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
000196aa l     F .text	000000c0 ui2a
0001976a l     F .text	00000020 i2a
0001978a l     F .text	00000030 a2d
000197ba l     F .text	00000036 a2i
000197f0 l     F .text	0000002a putf
0001981c l     F .text	0000011c putchw
00019938 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
00019cbc l     F .text	00000004 stdin_read
00019cc0 l     F .text	00000010 stdout_write
20000124 l     O .data	00000004 _stdin
20000128 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
00019d70 l     F .text	00000028 nrf52k_flash_wait_ready
00019d98 l     F .text	00000054 nrf52k_flash_erase_sector
00019dec l     F .text	00000004 nrf52k_flash_init
00019df0 l     F .text	00000020 nrf52k_flash_sector_info
00019e10 l     F .text	000000d0 nrf52k_flash_write
00019ee0 l     F .text	0000000e nrf52k_flash_read
0001f448 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
00019ef0 l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
0001a0fc l     F .text	0000000a nrf_read_timer_cntr
0001a108 l     F .text	000000b4 nrf_timer_set_ocmp
0001a1bc l     F .text	0000000a nrf_timer_disable_ocmp
0001a1c6 l     F .text	0000000a nrf_rtc_disable_ocmp
0001a1d0 l     F .text	00000054 hal_timer_read_bsptimer
0001a224 l     F .text	00000076 hal_timer_chk_queue
0001a29a l     F .text	0000002c hal_timer_irq_handler
0001f464 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001a460 l     F .text	00000034 nrf52_periph_create_timers
0001a494 l     F .text	00000020 nrf52_periph_create_i2c
0001a4b4 l     F .text	00000020 nrf52_periph_create_spi
0001f47c l     O .text	0000000c hal_i2c1_cfg
0001f488 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
0001a4e8 l     F .text	00000028 sensor_mgr_remove
0001a510 l     F .text	00000060 sensor_mgr_insert
0001a570 l     F .text	0000000a sensor_type_traits_empty
0001a57c l     F .text	0000000c sensor_mgr_evq_set
0001a5b6 l     F .text	0000005c sensor_read_data_func
0001a614 l     F .text	00000048 sensor_base_ts_update_event
0001a65c l     F .text	00000050 sensor_up_timestamp
0001a6e4 l     F .text	000000a0 sensor_mgr_init
0001a950 l     F .text	0000007c sensor_mgr_wakeup_event
0001a7ae l     F .text	00000032 sensor_update_nextrun
0001a7e0 l     F .text	0000001e sensor_calc_nextrun_delta
0001a800 l     F .text	00000024 sensor_find_min_nextrun_sensor
0001a8d8 l     F .text	0000004a sensor_mgr_poll_bytype
0001a922 l     F .text	0000002e sensor_poll_per_type_trait
2000e1ec l     O .bss	00000078 sensor_notify_evt_area
2000e264 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 sensor_coap.c
2000e280 l     O .bss	00000008 oc_sem
2000e288 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000e28c l     O .bss	0000000c hw_id
2000e298 l     O .bss	00000004 hw_id_len
2000e2a0 l     O .bss	00000008 sensor_node_address
2000e2a8 l     O .bss	00000037 sensor_node_names_buf
20000130 l     O .data	00000014 sensor_node_names
0001f4a0 l     O .text	0000000c COLLECTOR_NODE_HW_ID
0001f4ac l     O .text	0000003c SENSOR_NODE_HW_IDS
0001f548 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
0001ab74 l     F .text	00000050 config_device
2000e2e0 l     O .bss	00000014 adc_1_itf_temp_stub
2000e2f8 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001ac20 l     F .text	00000004 temp_stub_close
0001ac24 l     F .text	0000001c temp_stub_sensor_get_config
0001ac40 l     F .text	00000026 temp_stub_open
0001ad1c l     F .text	0000007c temp_stub_sensor_read
0001f58c l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
0001adc0 l     F .text	00000030 oc_buffer_tx
0001adf0 l     F .text	0000002c oc_buffer_rx
2000e3b8 l     O .bss	00000018 oc_inq
2000e3d0 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
2000e3e8 l     O .bss	000000c8 oc_client_cb_area
2000e4b0 l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
2000e4cc l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000e4d0 l     O .bss	0000001c oc_rep_objects
2000e4ec l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 flash_map.c
0001af44 l     F .text	00000078 flash_map_read_mfg
2000e51c l     O .bss	00000078 mfg_areas.9056
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0001b098 l     F .text	00000094 mfg_seek_next_aux
0001b12c l     F .text	00000070 mfg_read_mmr
0001b19c l     F .text	00000054 mfg_read_next_mmr
0001b1f0 l     F .text	0000003c mfg_open_flash_area
0001b22c l     F .text	00000044 mfg_read_tlv_body
0001b2f8 l     F .text	0000004e mfg_read_mmr_refs
2000e594 l     O .bss	00000001 mfg_initialized
2000e598 l     O .bss	00000018 mfg_mmrs
2000e5b0 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001b35e l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memclr.c
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 lib_a-aeabi_memset-soft.o
00000000 l    df *ABS*	00000000 libchip8.bde0u64m-cgu.0
00000afc l       .debug_str	00000000 
0001bc2f l       .debug_str	00000000 
0001bc86 l       .debug_str	00000000 
000131fd l       .debug_str	00000000 
0001bcd2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0001bcda l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
0001513c g     F .text	00000004 _ZN4core5panic8Location4line17h650a566d9637c91dE
000141b8 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE
00008616 g     F .text	000000ba main
00009f96 g     F .text	0000070a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E
0001857c g     F .text	00000040 os_eventq_remove
000193c8 g     F .text	00000018 os_arch_init
000195e4 g     F .text	00000048 memcmp
00011822 g     F .text	00000012 _ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE
0001430c g     F .text	00000024 _ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE
00010f4e g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E
000088d8 g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17hffa79893ce20402cE
00011b98 g     F .text	000000ee _ZN3log17__private_api_log17h076f8f4ccc99f19bE
00014abc g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE
00014944 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E
00013cb0 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE
00013c44 g     F .text	00000002 _ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E
0001516c g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E
0000a70e g     F .text	0000001e .hidden _ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE
00009266 g     F .text	00000010 _ZN4core3ptr5write17h7ef3fa6b6f80daebE
00016c3e g     F .text	000000f4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hc96955e2b836ab47E
2000e6d0 g     O .bss	0000001c nrf52_hal_timer0
0000924c g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE
0001a7a4 g     F .text	0000000a sensor_unlock
0000ad6a g     F .text	00000036 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E
00010fa2 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E
0000a9ca g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E
000090b8 g     F .text	0000006c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E
00018c9c g     F .text	00000024 os_sanity_check_register
0001ac74 g     F .text	0000007c temp_stub_init
00018d3c g     F .text	00000054 os_sched_insert
0000cc3c g     F .text	00000052 _ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E
2000e5b4 g     O .bss	00000001 g_silence_console
00011eb4 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE
0000c006 g     F .text	00000010 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h6ab5fe7f9b6adc84E
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001b3fc g     F .text	00000034 hal_bsp_hw_id
00008164  w    F .text	00000002 NFCT_IRQHandler
00014f5a g     F .text	00000004 .hidden _ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE
000143fc g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E
0000a79c g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE
00008e24 g     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE
000140ce g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE
0000c848 g     F .text	00000126 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE
00013f0c g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E
00008c62 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E
20000114 g     O .data	00000008 g_os_run_list
0001ae80 g     F .text	00000020 oc_send_buffer
00008836 g     F .text	0000001a _ZN4core3ptr13drop_in_place17hd9978a8f7b458b49E
00019470 g     F .text	00000030 os_arch_start
0001aa98 g     F .text	0000001a is_standalone_node
000087d2 g     F .text	00000054 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE
00018468 g     F .text	00000010 os_eventq_init
0001602a g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E
00011f54 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E
0001570e g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E
00010f8c g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E
00008f1a g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE
00014c8e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE
0001a9cc g     F .text	00000028 init_sensor_coap
0001aea0 g     F .text	0000004c oc_send_multicast_message
0000a7ac g     F .text	0000008c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE
00011542 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E
00015fe6 g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE
2000e6f0 g     O .bss	00000034 sensor_mgr
00016fd0 g     F .text	0000002c console_dump
00018e68 g     F .text	00000078 os_sched_wakeup
00014e04 g     F .text	0000011c .hidden _ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE
00011e44 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E
00016aee g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6ff113c3a96d4445E
00008890 g     F .text	00000030 _ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h959001782aae6f36E
00008c9a g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E
0001b35c g     F .text	00000002 _fini
000182a0 g     F .text	0000000a os_cputime_get32
00010de2 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17he3a44d3ea8f47cacE
00011052 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E
00013ae6 g     F .text	00000132 _ZN6mynewt3hal4GPIO4init17h54c34caf27320956E
2000e5b5 g     O .bss	00000001 g_console_input_ignore
00019358 g     F .text	00000014 os_arch_ctx_sw
00010d8c g     F .text	00000028 .hidden _ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E
0000c6d0 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E
00011e8a g     F .text	0000001a _ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E
0000bffc g     F .text	0000000a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17hdef6640b381cd2e3E
000195a6 g     F .text	0000000c SysTick_Handler
0001aa0c g     F .text	00000070 get_hardware_id
00008168 g     F .text	00000010 _sbrkInit
00011944 g     F .text	0000003c _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E
00010fb8 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE
0000959e g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE
00008c3a g     F .text	00000012 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E
0001967e g     F .text	0000001c strcmp
0000be60 g     F .text	00000118 .hidden _ZN3app5chip88on_start17h473d234c4f7ef3a3E
2000e5e8 g     O .bss	00000050 g_idle_task
00018458 g     F .text	00000010 os_dev_reset
00009978 g     F .text	00000010 _ZN4core3ptr5write17h147d4643d861e927E
000096a0 g     F .text	00000262 _ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E
000107da g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$4jump17heb92b408b228e4d7E
00018fb8 g     F .text	00000010 os_sem_init
00010886 g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$4push17hf7601df6bb546f8dE
00014516 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E
00011ed4 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE
00016f50 g     F .text	00000070 console_printhex
0000afce g     F .text	00000270 .hidden _ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E
00008a22 g     F .text	0000003a _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE
00013cdc g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE
0001f64c g       .text	00000000 __exidx_start
0001aa7c g     F .text	0000001c is_collector_node
00014d34 g     F .text	00000036 _ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE
00019646 g     F .text	00000038 memset
00008164  w    F .text	00000002 WDT_IRQHandler
000168fc g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h096b8fea83a9dea7E
00011f44 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E
00010f14 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h2bffa2f7235b9482E
00016ee0 g     F .text	00000054 console_buffer
00018478 g     F .text	0000000a os_eventq_inited
00017118 g     F .text	0000000c sysinit_end
000148f2 g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE
00008020 g       .text	00000000 __isr_vector_start
00008164  w    F .text	00000002 TIMER3_IRQHandler
00008164  w    F .text	00000002 MWU_IRQHandler
000150e4 g     F .text	0000004a _ZN4core6result13unwrap_failed17h10957bfda7d5e5f2E
2000e788 g       .bss	00000000 __HeapBase
0000954a g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E
000089f4 g     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E
0000bcb0 g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17he96540eeeab4858dE
00010b9e g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$8shutdown17h203a3011efe54ce1E
00013c18 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E
00013e4c g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E
0001affc g     F .text	00000026 flash_area_read
00011e74 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E
0001af12 g     F .text	00000002 oc_register_ip4
00009170 g     F .text	00000046 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E
0001af14 g     F .text	00000002 oc_register_ip6
0000842c g     F .text	000001d4 SystemInit
0001b37c g     F .text	00000028 hal_flash_init
00018420 g     F .text	00000036 os_dev_close
0001f5e4 g     O .text	00000048 sysflash_map_dflt
0000c418 g     F .text	0000005a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc84691ce0c1cd157E
00019d64 g     F .text	0000000c hal_bsp_init
00008d46 g     F .text	00000032 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E
0001163e g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
00009bc0 g     F .text	0000012c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE
00011504 g     F .text	00000032 _ZN4core3ptr4read17h2038b0ecb0975c4fE
0001b758 g     F .text	00000004 __aeabi_memcpy4
0000a89e g     F .text	000000c6 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE
00017bbc g     F .text	0000002c hal_spi_set_txrx_cb
0001b750 g     F .text	00000006 __aeabi_memclr8
000086d0 g     F .text	00000102 rust_begin_unwind
2000e5b8 g     O .bss	00000004 console_is_midline
0001b750 g     F .text	00000006 __aeabi_memclr4
000080f8 g       .text	00000000 __isr_vector_end
000176b4 g     F .text	0000013c hal_i2c_master_read
0001999c g     F .text	0000025c tfp_format
00010bae g     F .text	0000000a .hidden _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17h830ef09e153bc6fbE
00014c5e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE
0001a870 g     F .text	00000068 sensor_read
0001456c g     F .text	00000058 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E
00009232 g     F .text	00000010 _ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E
000142a2 g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE
0001b758 g     F .text	00000004 __aeabi_memcpy
0001b758 g     F .text	00000004 __aeabi_memcpy8
2000e724 g     O .bss	00000020 st_up_osco
000194a0 g     F .text	0000005c os_arch_os_start
0000cae4 g     F .text	00000014 _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hc72815860861018cE
0001a852 g     F .text	0000001e sensor_init
00014f20 g     F .text	00000032 .hidden _ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE
20000000 g       .bss	00000000 _ram_start
000192c8 g     F .text	00000026 os_time_delay
0001af10 g     F .text	00000002 oc_register_gatt
20006a6c g     O .bss	00000004 _ZN3log20MAX_LOG_LEVEL_FILTER17h20753a6176f34564E
0001b3f8 g     F .text	00000004 hal_bsp_hw_id_len
00018260 g     F .text	00000034 os_callout_wakeup_ticks
000185d6 g     F .text	00000026 os_mqueue_get
000174f4 g     F .text	00000098 hal_i2c_init
0000c486 g     F .text	000000c4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h36d752fe6c920e7cE
00010dd0 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17had576ea3abe2661aE
00015eb8 g     F .text	0000012e _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E
000168fc g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E
00008164  w    F .text	00000002 TIMER4_IRQHandler
0001d95c g     O .text	00000050 _ZN8libchip87CHARBUF17h227c6d0d7e24574cE
00014c2e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E
00018f68 g     F .text	00000022 os_sched
00008e36 g     F .text	00000020 _ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00010d72 g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E
00011684 g     F .text	00000014 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE
2000fe50 g       *ABS*	000001b0 __StackLimit
0001a588 g     F .text	0000002e sensor_mgr_match_bytype
00011558 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE
0000aeec g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE
00018aa4 g     F .text	00000014 os_mutex_init
00009124 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E
00009f52 g     F .text	00000044 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE
2000e5c0 g     O .bss	00000028 nrf52_hal_spi0
00008614 g     F .text	00000002 _init
00000020 g       *ABS*	00000000 _imghdr_size
00008164  w    F .text	00000002 RTC1_IRQHandler
0001176a g     F .text	00000008 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E
00008164  w    F .text	00000002 PDM_IRQHandler
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
00014b9e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE
20000124 g       .data	00000000 __aeabi_unwind_cpp_pr0
000093da g     F .text	0000001a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E
00009520 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE
00008d3e g     F .text	00000008 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E
00012048 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E
00018a48 g     F .text	00000028 os_msys_get_pkthdr
0001acf0 g     F .text	0000002c temp_stub_get_raw_temperature
00018ee0 g     F .text	0000003c os_sched_os_timer_exp
00018350 g     F .text	00000040 os_dev_create
00009902 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
000149e4 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE
00018c8c g     F .text	00000010 os_sanity_check_init
000151ce g     F .text	0000022c _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE
00008164  w    F .text	00000002 SAADC_IRQHandler
00018294 g     F .text	0000000c os_cputime_init
00018564 g     F .text	00000018 os_eventq_run
00011b24 g     F .text	0000000c _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE
00018a70 g     F .text	00000034 os_msys_init
000143b4 g     F .text	0000000e .hidden _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E
00014968 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE
000147c8 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E
0001934e g     F .text	0000000a timer_handler
0001111c g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE
00014f5e g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E
000094b0 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E
00008d78 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E
00014f56 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E
000151ac g     F .text	00000022 _ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E
000080f8 g     F .text	0000005c Reset_Handler
0000c56c g     F .text	0000002e .hidden _ZN3app5chip812handle_touch17habca32c74e5cefadE
00014388 g     F .text	0000002c _ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE
00008020 g       .text	000000d8 __isr_vector
00016aee g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17heaf2297ac445d947E
0000caf8 g     F .text	0000001c _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17heea96aaa2e3c2266E
00013ee2 g     F .text	0000002a .hidden _ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE
00019bf8 g     F .text	00000008 vfprintf
00013c9c g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E
000116b0 g     F .text	0000000a _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E
0001170e g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E
00018676 g     F .text	00000036 os_mbuf_get_pkthdr
00008164  w    F .text	00000002 PWM0_IRQHandler
00014bfe g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E
00000000 g       .svc_table	00000000 SVC_Count
000163ba g     F .text	00000298 _ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE
00015140 g     F .text	0000002c _ZN4core9panicking5panic17h24d1dd0a9d540834E
0001937e g     F .text	0000000a os_arch_in_critical
00018d2c g     F .text	00000010 os_sanity_init
00010df4 g     F .text	0000000e _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcc80626d7c50dc19E
00010e5a g     F .text	000000ba _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E
0000a9be g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE
00016aee g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E
0000894e g     F .text	000000a6 _ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3eb31cb79971f92E
0001469a g     F .text	00000018 .hidden _ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE
00008878 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h26804ad7d7935157E
0000cbe6 g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$3pop17h70e7cf8d6b1182e4E
00017e40 g     F .text	0000004c __assert_func
000149d0 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E
00014024 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
00018916 g     F .text	0000001e os_memblock_put_from_cb
0000c016 g     F .text	00000332 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E
00019500 g     F .text	00000014 os_set_env
2000e6ac g     O .bss	00000004 g_os_last_ctx_sw_time
00008c4c g     F .text	0000000a _ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE
000170b0 g     F .text	00000048 console_printf
00011ebe g     F .text	00000016 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E
0000ae3c g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE
00011584 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE
00011d90 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E
00014b3e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E
00019514 g     F .text	00000006 os_arch_init_task_stack
0001b2e8 g     F .text	00000010 mfg_open
00016aee g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb33f6f1f0114a92bE
000146b2 g     F .text	0000005e .hidden _ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE
0001ae44 g     F .text	00000030 oc_ri_mem_init
0000bcf8 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hfb3f985a9127bae7E
00009988 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE
00019d54 g     F .text	00000010 hal_bsp_flash_dev
0001b024 g     F .text	00000070 flash_map_init
2000e6c0 g     O .bss	00000004 g_os_time
0000c7b6 g     F .text	0000000a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E
00010f28 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h6d8406b1bb96c52eE
000195b2 g     F .text	0000001e os_default_irq_asm
00017e8c g     F .text	00000098 os_default_irq
200000e4 g     O .data	00000004 SystemCoreClock
00017af4 g     F .text	00000068 hal_spi_disable
00009204 g     F .text	0000002e _ZN6mynewt3sys7console6buffer17h6e460748855d110aE
0001af16 g     F .text	00000002 oc_register_lora
000186f8 g     F .text	000000a8 os_mbuf_append
0001abc4 g     F .text	0000005c temp_stub_create
00010db4 g     F .text	0000001c _ZN4core4iter6traits8iterator8Iterator7flatten17h1299c8c4daf1c93cE
0001b3a4 g     F .text	00000054 hal_flash_read
00010bb8 g     F .text	00000010 _ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf0fe5cd21a17e0a6E
00016e90 g     F .text	00000048 console_flush
00009674 g     F .text	00000018 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE
000180e0 g     F .text	0000001a os_start
0001a2d8 g     F .text	00000060 hal_timer_init
00010fcc g     F .text	00000086 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E
00019cd0 g     F .text	00000010 rust_sysinit
00008164  w    F .text	00000002 I2S_IRQHandler
00016fc0 g     F .text	00000010 console_printint
00018f8c g     F .text	0000002c os_sched_resort
0001f424 g     O .text	00000008 MemFile_methods
00019ca4 g     F .text	00000018 fmemopen_w
00012cbc g     F .text	00000126 _ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E
00017a70 g     F .text	00000038 hal_spi_config
0001b74c  w    F .text	00000002 .hidden __aeabi_ldiv0
0001895c g     F .text	00000010 os_mempool_module_init
00018f5c g     F .text	0000000c os_sched_next_task
0000a842 g     F .text	0000001a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E
000172ae g     F .text	00000034 hal_gpio_read
00018134 g     F .text	0000001a os_callout_init
00018a38 g     F .text	00000010 os_msys_reset
00019c00 g     F .text	00000024 printf
00008156  w    F .text	00000002 HardFault_Handler
0001b450 g     F .text	00000000 .hidden __aeabi_uldivmod
000192f0 g     F .text	00000038 os_gettimeofday
0001703c g     F .text	0000001e console_write
00014cee g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E
00015e82 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE
00009a84 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE
00017fc0 g     F .text	00000070 os_init_idle_task
000193e0 g     F .text	0000008c os_arch_os_init
00010bc8 g     F .text	00000112 _ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE
000094e8 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E
00018030 g     F .text	000000b0 os_init
2000e698 g     O .bss	00000008 g_os_mempool_list
00010d12 g     F .text	0000004c _ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17hd9b164ddc3c07b23E
00009a7a g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE
00008184 g     F .text	00000010 hal_debugger_connected
0001159a g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E
0000c636 g     F .text	0000009a _ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE
00017038 g     F .text	00000004 semihosting_console_init
0001b282 g     F .text	0000001a mfg_seek_next_with_type
00018b70 g     F .text	000000e0 os_mutex_pend
00011f04 g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
000144ce g     F .text	00000026 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E
0001728c g     F .text	00000022 hal_gpio_write
00008600 g     F .text	00000014 _start
0001167c g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE
000116e4 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE
000088f4 g     F .text	00000028 _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h29061cea1b7f00a0E
0001b348 g     F .text	00000014 __wrap_coap_receive
00014b6e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E
2000e5bc g     O .bss	00000001 sysinit_active
0001465e g     F .text	00000012 _ZN4core3mem4swap17h206518364108b51fE
00011f6c g     F .text	0000006e .hidden _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E
00013d60 g     F .text	0000002a _ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE
00019c74 g     F .text	0000002e memfile_write
0001b74c  w    F .text	00000002 .hidden __aeabi_idiv0
00014608 g     F .text	00000030 .hidden _ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE
0000a992 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE
00017fb4 g     F .text	0000000c os_started
0001ae1c g     F .text	00000028 oc_buffer_init
00013c46 g     F .text	00000056 _ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE
000094cc g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E
2000e6a0 g     O .bss	0000000c g_os_sanity_check_mu
00009276 g     F .text	0000002c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E
000145e6 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
0001b750 g     F .text	00000006 __aeabi_memclr
0001b75c g     F .text	0000009a __aeabi_memset4
000120d4 g     F .text	00000a7a _ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E
00015e8a g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE
0000968c g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E
00019288 g     F .text	00000040 os_time_advance
00017aa8 g     F .text	0000004c hal_spi_enable
0001b2b0 g     F .text	00000038 mfg_init
00013766 g     F .text	00000010 _ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E
2000e638 g     O .bss	00000050 g_os_main_task
0001b75c g     F .text	0000009a __aeabi_memset8
0001695a g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hcd88e3dc15351fceE
00008d32 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE
0001f664 g       .ARM.exidx	00000000 __exidx_end
00008164  w    F .text	00000002 PWM1_IRQHandler
20000148 g     O .bss	00000018 _ZN22piet_embedded_graphics7display7DISPLAY17ha0ff10e671b220f2E
000154cc g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE
00008cc0 g     F .text	0000004e _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE
00016d32 g     F .text	000000e4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17hea84eef47d2fd641E
00017124 g     F .text	00000034 NVIC_Relocate
0001710c g     F .text	0000000c sysinit_start
0000a97a g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E
0000c74c g     F .text	00000028 _ZN4core6option15Option$LT$T$GT$6as_mut17h1de41a42d046f353E
0000a9aa g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE
0001f430 g     O .text	00000018 nrf52k_flash_dev
0001a338 g     F .text	000000f8 hal_timer_config
00013ddc g     F .text	0000004c _ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E
00019c60 g     F .text	00000014 vprintf
00009156 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E
00016ed8 g     F .text	00000008 disable_buffer
2000e688 g     O .bss	00000004 g_os_started
00015134 g     F .text	00000008 _ZN4core5panic9PanicInfo7payload17h9302c8d957737573E
00010ae4 g     F .text	000000ba _ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E
20000144 g       .bssnz	00000000 __bssnz_end__
00010e2e g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he4b6bba524de7333E
000183bc g     F .text	00000020 os_dev_lookup
00014188 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E
000093ce g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E
00017e1c g     F .text	00000010 hal_watchdog_enable
2000e6c4 g     O .bss	0000000c g_hal_os_tick
00019378 g     F .text	00000006 os_arch_restore_sr
0001818c g     F .text	00000078 os_callout_reset
00009a8e g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE
0001b29c g     F .text	0000000a mfg_read_tlv_flash_area
00011f20 g     F .text	00000024 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E
0000815a  w    F .text	00000002 BusFault_Handler
000088c0 g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h3f61333c1bf65f82E
0000a964 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E
000185c4 g     F .text	00000012 os_mqueue_init
00014bce g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E
00013f28 g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E
0000c348 g     F .text	000000d0 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE
0001ac66 g     F .text	0000000e temp_stub_default_cfg
00008020 g       .imghdr	00000000 __text
00018150 g     F .text	0000003c os_callout_stop
000081c0 g     F .text	0000004c hal_system_clock_start
000186c0 g     F .text	00000024 os_mbuf_free_chain
000092a2 g     F .text	0000000a .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E
00019ce0 g     F .text	00000030 mem_init_mbuf_pool
00011f64 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E
0000be22 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h91956914bff669c1E
00008c56 g     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E
0001758c g     F .text	00000128 hal_i2c_master_write
000141e8 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E
0000c59a g     F .text	0000009c _ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE
00008164  w    F .text	00000002 QDEC_IRQHandler
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
000144ac g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E
000120b6 g     F .text	0000001e _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E
00011358 g     F .text	0000003a _ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E
00008826 g     F .text	00000010 _ZN4core3ptr13drop_in_place17h2cd480d2a1fa8018E
0000a75e g     F .text	0000001a _ZN4core5slice14from_raw_parts17h1425df913744b73aE
000185bc g     F .text	00000008 os_eventq_dflt_get
0001a78c g     F .text	00000018 sensor_lock
00010f64 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE
00008a8c g     F .text	00000016 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE
0000c7d4 g     F .text	00000074 _ZN22piet_embedded_graphics7display18set_display_pixels17h114fde9e037a1031E
0000bd5c g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17ha6504bdbfeeb86a0E
00017064 g     F .text	0000004c console_pkg_init
20000104 g     O .data	00000004 sysinit_panic_cb
000186e4 g     F .text	00000014 os_mbuf_len
000186ac g     F .text	00000014 os_mbuf_free
0001156e g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE
00011b30 g     F .text	0000000a _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE
00008194 g     F .text	0000002c hal_system_reset
0001705a g     F .text	00000008 console_blocking_mode
0000a734 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE
00009cec g     F .text	00000266 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE
00010f78 g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E
0000cc90 g     F .text	00003b12 _ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E
0001a4d4 g     F .text	00000010 nrf52_periph_create
00014260 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E
00018cc0 g     F .text	0000006c os_sanity_run
000143c2 g     F .text	0000003a .hidden _ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE
00014650 g     F .text	0000000e .hidden _ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E
0000841c g     F .text	00000010 SystemCoreClockUpdate
0000c96e g     F .text	00000176 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E
00013ce2 g     F .text	0000007e .hidden _ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE
00013e28 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E
0000991c g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE
00008a5c g     F .text	00000030 _ZN4core3any6TypeId2of17haae5124a9f275cb8E
0000cb14 g     F .text	000000d2 _ZN8libchip814Chip8$LT$T$GT$3new17h80d41819f2580e6eE
000188d0 g     F .text	00000014 os_mempool_init
0001f42c g     O .text	00000004 stdout
0000af9c g     F .text	0000000e .hidden _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE
0000c774 g     F .text	00000042 _ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E
00018390 g     F .text	0000002c os_dev_initialize_all
00008e56 g     F .text	000000b4 _ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E
00014992 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE
00017f24 g     F .text	00000078 os_idle_task
00008f0a g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h1982c2483e0a2028E
00014ad4 g     F .text	0000000a .hidden _ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE
00009660 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E
00009b0a g     F .text	000000b6 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE
00015b80 g     F .text	00000302 _ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE
0001afbc g     F .text	00000040 flash_area_open
0000a85c g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E
00014256 g     F .text	0000000a _ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E
00008858 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h107ea34dbb1ce094E
00008164 g     F .text	00000002 Default_Handler
00015132 g     F .text	00000002 _ZN4core5panic8Location6caller17h4b6b61f9498709a3E
000093f4 g     F .text	000000bc _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E
000189a8 g     F .text	0000004c os_msys_register
0000a884 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE
000092ac g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E
2000e1b0 g     O .bss	00000004 g_os_sanity_check_list
0000ada0 g     F .text	00000066 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E
000116ba g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE
00011294 g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E
00017b5c g     F .text	00000060 hal_spi_init
00008164  w    F .text	00000002 RNG_IRQHandler
0001a6c8 g     F .text	00000010 sensor_mgr_unlock
2000e780 g     O .bss	00000004 flash_map_entries
000108dc g     F .text	000000a2 _ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E
0001689e g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17hb1f1dec5462292d8E
00014ade g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E
0001af18 g     F .text	00000002 oc_register_serial
00008178 g     F .text	0000000c hal_system_init
00014956 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E
0000891c g     F .text	00000032 _ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0b58a3acb69538adE
00014178 g     F .text	00000010 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E
0000a9d4 g     F .text	00000396 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E
00013cc6 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE
00008164  w    F .text	00000002 GPIOTE_IRQHandler
00011834 g     F .text	000000aa _ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001b270 g     F .text	00000012 mfg_seek_next
00011b3a g     F .text	00000008 _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE
2000011c g     O .data	00000008 g_os_sleep_list
000158f0 g     F .text	0000025c _ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E
00014d6a g     F .text	00000058 _ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE
0001863a g     F .text	0000000a os_mbuf_pool_init
2000e690 g     O .bss	00000008 g_callout_list
00018dcc g     F .text	0000000c os_sched_set_current_task
00018204 g     F .text	0000005c os_callout_tick
00014dc2 g     F .text	00000042 _ZN4core3ptr4read17h38cf3848f1a0f2ccE
000092c8 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE
0001179c g     F .text	0000007c _ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E
0000964a g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E
000107a2 g     F .text	00000024 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hb16abfee8f88907eE
00017da4 g     F .text	00000078 hal_watchdog_init
2000e6b4 g     O .bss	00000001 g_task_id
00016bc4 g     F .text	0000007a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E
0000a72c g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17hef1277471241eea2E
0000afaa g     F .text	00000024 .hidden _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E
000183dc g     F .text	00000044 os_dev_open
2000e6b0 g     O .bss	00000004 g_current_task
00014f52 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE
20000148 g       .bss	00000000 __bss_start__
00010d5e g     F .text	00000014 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdaeeeffeba3c3f70E
00014a50 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E
00010a6a g     F .text	0000007a _ZN8libchip814Chip8$LT$T$GT$5setup17ha7902fed1bdb33a6E
00008d26 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE
00017860 g     F .text	00000018 nrf52_spi0_irq_handler
0001a784 g     F .text	00000008 sensor_pkg_init
00014670 g     F .text	0000002a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE
0001ad98 g     F .text	00000028 temp_stub_config
000185fc g     F .text	0000003e os_mqueue_put
00016d32 g     F .text	000000e4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE
00017be8 g     F .text	000000ac hal_spi_txrx
00008164  w    F .text	00000002 RTC2_IRQHandler
00018dc0 g     F .text	0000000c os_sched_get_current_task
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00011dac g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E
0001b094 g     F .text	00000002 modlog_init
00014218 g     F .text	0000003e _ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE
00017c94 g     F .text	000000e0 hal_spi_txrx_noblock
00015e92 g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE
00009242 g     F .text	0000000a _ZN6mynewt3sys7console5flush17h78b2f38352f0d691E
00008164  w    F .text	00000002 TEMP_IRQHandler
0001097e g     F .text	000000ec _ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E
00009094 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE
00018d90 g     F .text	00000030 os_sched_ctx_sw_hook
0001a824 g     F .text	0000002e sensor_mgr_register
000150e4 g     F .text	0000004a _ZN4core6option18expect_none_failed17h54d938081af97677E
00015730 g     F .text	000001c0 _ZN4core3fmt5write17hd95ac78ed22a2252E
00010860 g     F .text	00000026 _ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E
00008154  w    F .text	00000002 NMI_Handler
00013c2e g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE
00009344 g     F .text	0000008a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE
00014d26 g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E
00008f12 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E
00011536 g     F .text	0000000c _ZN4core3ptr5write17h4a80332de2cee3d3E
000144f4 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E
00018644 g     F .text	00000032 os_mbuf_get
2000e6b8 g     O .bss	00000008 g_os_task_list
00008aee g     F .text	0000014c _ZN6mynewt4Strn8validate17h1102378208cc75cdE
000153fa g     F .text	000000d2 _ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E
00019c24 g     F .text	0000003a vsnprintf
000107ea g     F .text	00000076 _ZN8libchip814Chip8$LT$T$GT$4load17h28b293d7e5188fe6E
00012b88 g     F .text	00000090 _ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E
00018ab8 g     F .text	000000b8 os_mutex_release
00011b42 g     F .text	00000056 _ZN3log6logger17hf609e7cc1c031552E
000118f6 g     F .text	0000004e _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E
0001a6d8 g     F .text	0000000c sensor_mgr_evq_get
00014330 g     F .text	00000058 _ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E
00011698 g     F .text	00000018 _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E
2000e68c g     O .bss	00000004 g_os_idle_ctr
0000c7c0 g     F .text	00000014 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha7a9542e2459a97dE
00017228 g     F .text	0000002c hal_gpio_init_in
00011634 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE
00009a98 g     F .text	00000036 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E
00008164  w    F .text	00000002 TIMER1_IRQHandler
0001a4e4 g     F .text	00000002 sensor_dev_create
000111b8 g     F .text	0000008e _ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE
00008164  w    F .text	00000002 TIMER0_IRQHandler
00008aa2 g     F .text	00000010 _ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE
00017254 g     F .text	00000038 hal_gpio_init_out
00008f34 g     F .text	00000160 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE
000112c8 g     F .text	00000012 _ZN4core3mem4swap17hc4afbec7b5ffb125E
00014d1e g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E
0000a838 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E
00014434 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E
000095c8 g     F .text	0000003e .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE
200000d8 g       .data	00000000 __data_start__
0001927c g     F .text	0000000c os_time_get
000107c6 g     F .text	00000014 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h06eb33e167ea87a6E
00015134 g     F .text	00000008 _ZN4core5panic8Location4file17h61e77cb122865fdbE
0000a6a0 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E
00018934 g     F .text	00000026 os_memblock_put
00012c18 g     F .text	000000a4 _ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE
00018dd8 g     F .text	00000090 os_sched_sleep
00011672 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE
0001a6ac g     F .text	0000001c sensor_mgr_lock
0001b480 g     F .text	000002cc .hidden __udivmoddi4
00010f84 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E
00010cda g     F .text	00000038 _ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h5eca9088e433250cE
0001a05c g     F .text	000000a0 os_tick_init
00013d8a g     F .text	00000052 _ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E
0001512e g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E
00008164  w    F .text	00000002 RTC0_IRQHandler
000091b6 g     F .text	00000044 _ZN6mynewt3sys7console5print17hc13a6743274d87fcE
00018f1c g     F .text	00000040 os_sched_wakeup_ticks
000149bc g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE
00009504 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE
0001a430 g     F .text	00000030 hal_timer_read
20000144 g       .data	00000000 __data_end__
0001735c g     F .text	00000028 hal_gpio_irq_enable
0001ae74 g     F .text	0000000c oc_evq_set
0001a9f4 g     F .text	00000018 is_sensor_node
0001689e g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE
00010e02 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2feea8e9eaacbdd0E
0001aeec g     F .text	00000024 oc_init
00016a18 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h54b904d9d5d295daE
00016a18 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h85ec06f2c95e1ecaE
000099be g     F .text	000000bc _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE
0001606e g     F .text	0000034c _ZN4core3str16slice_error_fail17h232f9181d55b3da9E
0001473a g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE
2000e748 g     O .bss	00000018 sensor_base_ts
00016c3e g     F .text	000000f4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E
0000be4c g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hcf3d218d896cc0e9E
0001f664 g       .ARM.exidx	00000000 __etext
00010f3c g     F .text	00000012 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE
0001695a g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E
000170f8 g     F .text	0000000c console_get_ticks
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
000091fa g     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E
20000108 g     O .data	00000004 hal_twi_i2c1
0000bcce g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h08b4ae7d93862706E
000190fc g     F .text	000000d8 os_task_init
0000912e g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E
0001127a g     F .text	0000001a _ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE
00011662 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E
00009936 g     F .text	00000042 _ZN4core3ptr4read17h27a035d1812d8297E
00014cbe g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E
00018fc8 g     F .text	00000064 os_sem_release
0001b75c g     F .text	0000009a __aeabi_memset
000187a0 g     F .text	000000b8 os_mbuf_dup
00019560 g     F .text	00000046 PendSV_Handler
0000c54a g     F .text	00000008 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17h46449aaa1682a400E
0001951a g     F .text	00000046 SVC_Handler
00008850 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17he6c5bffce3c304d4E
0001936c g     F .text	0000000c os_arch_save_sr
00008164  w    F .text	00000002 PWM2_IRQHandler
0000815c  w    F .text	00000002 UsageFault_Handler
0001a2c8 g     F .text	00000010 nrf52_timer0_irq_handler
00019388 g     F .text	00000040 os_arch_task_stack_init
2000e788 g       .bss	00000000 __bss_end__
000145c4 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E
000188e4 g     F .text	00000032 os_memblock_get
2000e784 g     O .bss	00000004 flash_map
00008164  w    F .text	00000002 RADIO_IRQHandler
0001482c g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E
00011392 g     F .text	00000056 _ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE
00008164  w    F .text	00000002 TIMER2_IRQHandler
00011058 g     F .text	000000c4 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E
00017e2c g     F .text	00000014 hal_watchdog_tickle
000184ea g     F .text	0000007a os_eventq_get
0001b430 g     F .text	00000020 sprintf
00019328 g     F .text	00000026 os_time_ms_to_ticks
00008ab2 g     F .text	0000003c _ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E
0000c552 g     F .text	0000001a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h7a2ee6dc937954dfE
00014d22 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E
0000ae06 g     F .text	00000036 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE
2000e1e8 g     O .bss	00000004 os_flags
0001af1c g     F .text	00000028 oc_rep_init
0001962c g     F .text	0000001a memcpy
00019d10 g     F .text	00000044 sysinit_app
0000a792 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE
00014764 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE
000118de g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E
00014b0e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E
00013776 g     F .text	0000036c _ZN6mynewt3hal3SPI4init17h97467ea724680fb5E
00011e5e g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE
00016ffc g     F .text	0000003c console_out_nolock
2000e760 g     O .bss	00000020 oc_transports
000172e4 g     F .text	00000078 hal_gpio_irq_init
0001969a g     F .text	00000010 strlen
0001902c g     F .text	000000b8 os_sem_pend
00019fc4 g     F .text	00000098 os_tick_idle
00011ea4 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E
0001448a g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00000000 g       .svc_table	00000000 SVC_Table
00011fda g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE
0000a778 g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E
2000fe50 g       *ABS*	00000000 __HeapLimit
000180fc g     F .text	00000038 os_pkg_init
20000144 g       .bssnz	00000000 __bssnz_start__
00009574 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17had883e363867a05eE
0000a6f4 g     F .text	0000001a .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E
0000c472 g     F .text	00000014 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbe871a76fb26495aE
00013f7a g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE
00008164  w    F .text	00000002 ECB_IRQHandler
00013ae2 g     F .text	00000004 _ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E
00014638 g     F .text	00000018 .hidden _ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E
00008158  w    F .text	00000002 MemoryManagement_Handler
00016a18 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hc11e05ad6528dc14E
00018482 g     F .text	00000068 os_eventq_put
20010000 g       .bss	00000000 __StackTop
00009ace g     F .text	0000003c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E
000111a6 g     F .text	00000012 _ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE
0001b2a6 g     F .text	0000000a mfg_read_tlv_mmr_ref
00008d0e g     F .text	00000018 _ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E
0001aab4 g     F .text	000000c0 sensor_network_init
00016a18 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE
00014710 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE
00008dba g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE
00011eec g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0001951b 	.word	0x0001951b
	...
    8058:	00019561 	.word	0x00019561
    805c:	000195a7 	.word	0x000195a7
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f826 	bl	8178 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20000148 	.word	0x20000148
    ldr     r3, =__bss_end__
    8134:	2000e788 	.word	0x2000e788
    ldr    r1, =__etext
    8138:	0001f664 	.word	0x0001f664
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	20000144 	.word	0x20000144
    LDR     R0, =__HeapBase
    8144:	2000e788 	.word	0x2000e788
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	0000842d 	.word	0x0000842d
    LDR     R0, =_start
    8150:	00008601 	.word	0x00008601

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    8178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    817c:	2201      	movs	r2, #1
    817e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    8182:	4770      	bx	lr

00008184 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <hal_debugger_connected+0xc>)
    8186:	6818      	ldr	r0, [r3, #0]
}
    8188:	f000 0001 	and.w	r0, r0, #1
    818c:	4770      	bx	lr
    818e:	bf00      	nop
    8190:	e000edf0 	.word	0xe000edf0

00008194 <hal_system_reset>:
{
    8194:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    8196:	f7ff fff5 	bl	8184 <hal_debugger_connected>
    819a:	b100      	cbz	r0, 819e <hal_system_reset+0xa>
            asm("bkpt");
    819c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    819e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81a2:	4905      	ldr	r1, [pc, #20]	; (81b8 <hal_system_reset+0x24>)
    81a4:	68ca      	ldr	r2, [r1, #12]
    81a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81aa:	4b04      	ldr	r3, [pc, #16]	; (81bc <hal_system_reset+0x28>)
    81ac:	4313      	orrs	r3, r2
    81ae:	60cb      	str	r3, [r1, #12]
    81b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81b4:	bf00      	nop
    81b6:	e7fd      	b.n	81b4 <hal_system_reset+0x20>
    81b8:	e000ed00 	.word	0xe000ed00
    81bc:	05fa0004 	.word	0x05fa0004

000081c0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <hal_system_clock_start+0x48>)
    81ca:	4013      	ands	r3, r2
    81cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    81d0:	d018      	beq.n	8204 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81d6:	2201      	movs	r2, #1
    81d8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    81da:	2100      	movs	r1, #0
    81dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    81e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    81e4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    81e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    81ee:	2b00      	cmp	r3, #0
    81f0:	d0f9      	beq.n	81e6 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    81f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81fa:	4b03      	ldr	r3, [pc, #12]	; (8208 <hal_system_clock_start+0x48>)
    81fc:	4013      	ands	r3, r2
    81fe:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    8202:	d1f0      	bne.n	81e6 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8204:	4770      	bx	lr
    8206:	bf00      	nop
    8208:	00010003 	.word	0x00010003

0000820c <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    820c:	4b0b      	ldr	r3, [pc, #44]	; (823c <errata_16+0x30>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	2b06      	cmp	r3, #6
    8212:	d001      	beq.n	8218 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8214:	2000      	movs	r0, #0
    8216:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8218:	4b09      	ldr	r3, [pc, #36]	; (8240 <errata_16+0x34>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	f013 0f0f 	tst.w	r3, #15
    8220:	d107      	bne.n	8232 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8222:	4b08      	ldr	r3, [pc, #32]	; (8244 <errata_16+0x38>)
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    822a:	2b30      	cmp	r3, #48	; 0x30
    822c:	d003      	beq.n	8236 <errata_16+0x2a>
    return false;
    822e:	2000      	movs	r0, #0
    8230:	4770      	bx	lr
    8232:	2000      	movs	r0, #0
    8234:	4770      	bx	lr
            return true;
    8236:	2001      	movs	r0, #1
}
    8238:	4770      	bx	lr
    823a:	bf00      	nop
    823c:	f0000fe0 	.word	0xf0000fe0
    8240:	f0000fe4 	.word	0xf0000fe4
    8244:	f0000fe8 	.word	0xf0000fe8

00008248 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0f      	ldr	r3, [pc, #60]	; (8288 <errata_31+0x40>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b0d      	ldr	r3, [pc, #52]	; (828c <errata_31+0x44>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d10b      	bne.n	8276 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b0c      	ldr	r3, [pc, #48]	; (8290 <errata_31+0x48>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d007      	beq.n	827a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    826a:	2b40      	cmp	r3, #64	; 0x40
    826c:	d007      	beq.n	827e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    826e:	2b50      	cmp	r3, #80	; 0x50
    8270:	d007      	beq.n	8282 <errata_31+0x3a>
    return false;
    8272:	2000      	movs	r0, #0
    8274:	4770      	bx	lr
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
            return true;
    827a:	2001      	movs	r0, #1
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
    8280:	4770      	bx	lr
            return true;
    8282:	2001      	movs	r0, #1
}
    8284:	4770      	bx	lr
    8286:	bf00      	nop
    8288:	f0000fe0 	.word	0xf0000fe0
    828c:	f0000fe4 	.word	0xf0000fe4
    8290:	f0000fe8 	.word	0xf0000fe8

00008294 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8294:	4b0b      	ldr	r3, [pc, #44]	; (82c4 <errata_32+0x30>)
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b06      	cmp	r3, #6
    829a:	d001      	beq.n	82a0 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    829c:	2000      	movs	r0, #0
    829e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82a0:	4b09      	ldr	r3, [pc, #36]	; (82c8 <errata_32+0x34>)
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	f013 0f0f 	tst.w	r3, #15
    82a8:	d107      	bne.n	82ba <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82aa:	4b08      	ldr	r3, [pc, #32]	; (82cc <errata_32+0x38>)
    82ac:	681b      	ldr	r3, [r3, #0]
    82ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82b2:	2b30      	cmp	r3, #48	; 0x30
    82b4:	d003      	beq.n	82be <errata_32+0x2a>
    return false;
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
    82ba:	2000      	movs	r0, #0
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0f      	ldr	r3, [pc, #60]	; (8310 <errata_36+0x40>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b0d      	ldr	r3, [pc, #52]	; (8314 <errata_36+0x44>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d10b      	bne.n	82fe <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b0c      	ldr	r3, [pc, #48]	; (8318 <errata_36+0x48>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d007      	beq.n	8302 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82f2:	2b40      	cmp	r3, #64	; 0x40
    82f4:	d007      	beq.n	8306 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82f6:	2b50      	cmp	r3, #80	; 0x50
    82f8:	d007      	beq.n	830a <errata_36+0x3a>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
    8304:	4770      	bx	lr
            return true;
    8306:	2001      	movs	r0, #1
    8308:	4770      	bx	lr
            return true;
    830a:	2001      	movs	r0, #1
}
    830c:	4770      	bx	lr
    830e:	bf00      	nop
    8310:	f0000fe0 	.word	0xf0000fe0
    8314:	f0000fe4 	.word	0xf0000fe4
    8318:	f0000fe8 	.word	0xf0000fe8

0000831c <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    831c:	4b0b      	ldr	r3, [pc, #44]	; (834c <errata_37+0x30>)
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	2b06      	cmp	r3, #6
    8322:	d001      	beq.n	8328 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8324:	2000      	movs	r0, #0
    8326:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <errata_37+0x34>)
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	f013 0f0f 	tst.w	r3, #15
    8330:	d107      	bne.n	8342 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8332:	4b08      	ldr	r3, [pc, #32]	; (8354 <errata_37+0x38>)
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    833a:	2b30      	cmp	r3, #48	; 0x30
    833c:	d003      	beq.n	8346 <errata_37+0x2a>
    return false;
    833e:	2000      	movs	r0, #0
    8340:	4770      	bx	lr
    8342:	2000      	movs	r0, #0
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_57+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_57+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_57+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_57+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_66+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_66+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_66+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b50      	cmp	r3, #80	; 0x50
    83b4:	d003      	beq.n	83be <errata_66+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0f      	ldr	r3, [pc, #60]	; (8410 <errata_108+0x40>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b0d      	ldr	r3, [pc, #52]	; (8414 <errata_108+0x44>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d10b      	bne.n	83fe <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83e6:	4b0c      	ldr	r3, [pc, #48]	; (8418 <errata_108+0x48>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b30      	cmp	r3, #48	; 0x30
    83f0:	d007      	beq.n	8402 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    83f2:	2b40      	cmp	r3, #64	; 0x40
    83f4:	d007      	beq.n	8406 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83f6:	2b50      	cmp	r3, #80	; 0x50
    83f8:	d007      	beq.n	840a <errata_108+0x3a>
    return false;
    83fa:	2000      	movs	r0, #0
    83fc:	4770      	bx	lr
    83fe:	2000      	movs	r0, #0
    8400:	4770      	bx	lr
            return true;
    8402:	2001      	movs	r0, #1
    8404:	4770      	bx	lr
            return true;
    8406:	2001      	movs	r0, #1
    8408:	4770      	bx	lr
            return true;
    840a:	2001      	movs	r0, #1
}
    840c:	4770      	bx	lr
    840e:	bf00      	nop
    8410:	f0000fe0 	.word	0xf0000fe0
    8414:	f0000fe4 	.word	0xf0000fe4
    8418:	f0000fe8 	.word	0xf0000fe8

0000841c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    841c:	4b01      	ldr	r3, [pc, #4]	; (8424 <SystemCoreClockUpdate+0x8>)
    841e:	4a02      	ldr	r2, [pc, #8]	; (8428 <SystemCoreClockUpdate+0xc>)
    8420:	601a      	str	r2, [r3, #0]
}
    8422:	4770      	bx	lr
    8424:	200000e4 	.word	0x200000e4
    8428:	03d09000 	.word	0x03d09000

0000842c <SystemInit>:
{
    842c:	b508      	push	{r3, lr}
    if (errata_16()){
    842e:	f7ff feed 	bl	820c <errata_16>
    8432:	b110      	cbz	r0, 843a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8434:	4b65      	ldr	r3, [pc, #404]	; (85cc <SystemInit+0x1a0>)
    8436:	4a66      	ldr	r2, [pc, #408]	; (85d0 <SystemInit+0x1a4>)
    8438:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    843a:	f7ff ff05 	bl	8248 <errata_31>
    843e:	b128      	cbz	r0, 844c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    8440:	4b64      	ldr	r3, [pc, #400]	; (85d4 <SystemInit+0x1a8>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8448:	4a63      	ldr	r2, [pc, #396]	; (85d8 <SystemInit+0x1ac>)
    844a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    844c:	f7ff ff22 	bl	8294 <errata_32>
    8450:	b120      	cbz	r0, 845c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8452:	4a62      	ldr	r2, [pc, #392]	; (85dc <SystemInit+0x1b0>)
    8454:	68d3      	ldr	r3, [r2, #12]
    8456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    845a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    845c:	f7ff ff38 	bl	82d0 <errata_36>
    8460:	b140      	cbz	r0, 8474 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    8462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8466:	2200      	movs	r2, #0
    8468:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    846c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    8470:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    8474:	f7ff ff52 	bl	831c <errata_37>
    8478:	b110      	cbz	r0, 8480 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    847a:	4b59      	ldr	r3, [pc, #356]	; (85e0 <SystemInit+0x1b4>)
    847c:	2203      	movs	r2, #3
    847e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    8480:	f7ff ff6a 	bl	8358 <errata_57>
    8484:	b158      	cbz	r0, 849e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    8486:	4b57      	ldr	r3, [pc, #348]	; (85e4 <SystemInit+0x1b8>)
    8488:	2205      	movs	r2, #5
    848a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    848c:	3378      	adds	r3, #120	; 0x78
    848e:	2201      	movs	r2, #1
    8490:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8492:	3b70      	subs	r3, #112	; 0x70
    8494:	2200      	movs	r2, #0
    8496:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8498:	3b04      	subs	r3, #4
    849a:	223f      	movs	r2, #63	; 0x3f
    849c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    849e:	f7ff ff79 	bl	8394 <errata_66>
    84a2:	2800      	cmp	r0, #0
    84a4:	d046      	beq.n	8534 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ae:	4b4e      	ldr	r3, [pc, #312]	; (85e8 <SystemInit+0x1bc>)
    84b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    84c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    84c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    84cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    84d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    84d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    84dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    84e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    84e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    84e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    84ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    84f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    84f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    84f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    84fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8500:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8504:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8508:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    850c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8510:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8514:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8518:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    851c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8520:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8524:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8528:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    852c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8530:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8534:	f7ff ff4c 	bl	83d0 <errata_108>
    8538:	b128      	cbz	r0, 8546 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    853a:	4b2c      	ldr	r3, [pc, #176]	; (85ec <SystemInit+0x1c0>)
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8542:	4a2b      	ldr	r2, [pc, #172]	; (85f0 <SystemInit+0x1c4>)
    8544:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8546:	4a2b      	ldr	r2, [pc, #172]	; (85f4 <SystemInit+0x1c8>)
    8548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    854c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8558:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    855c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8560:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    8564:	f013 0f01 	tst.w	r3, #1
    8568:	d104      	bne.n	8574 <SystemInit+0x148>
    SystemCoreClockUpdate();
    856a:	f7ff ff57 	bl	841c <SystemCoreClockUpdate>
    NVIC_Relocate();
    856e:	f00e fdd9 	bl	17124 <NVIC_Relocate>
}
    8572:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8574:	4b20      	ldr	r3, [pc, #128]	; (85f8 <SystemInit+0x1cc>)
    8576:	2201      	movs	r2, #1
    8578:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    857c:	4b1e      	ldr	r3, [pc, #120]	; (85f8 <SystemInit+0x1cc>)
    857e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8582:	2b00      	cmp	r3, #0
    8584:	d0fa      	beq.n	857c <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8586:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    858a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    858e:	f023 0301 	bic.w	r3, r3, #1
    8592:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8596:	4b18      	ldr	r3, [pc, #96]	; (85f8 <SystemInit+0x1cc>)
    8598:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    859c:	2b00      	cmp	r3, #0
    859e:	d0fa      	beq.n	8596 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85a0:	4b15      	ldr	r3, [pc, #84]	; (85f8 <SystemInit+0x1cc>)
    85a2:	2200      	movs	r2, #0
    85a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85a8:	4b13      	ldr	r3, [pc, #76]	; (85f8 <SystemInit+0x1cc>)
    85aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ae:	2b00      	cmp	r3, #0
    85b0:	d0fa      	beq.n	85a8 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85b2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85b6:	490f      	ldr	r1, [pc, #60]	; (85f4 <SystemInit+0x1c8>)
    85b8:	68ca      	ldr	r2, [r1, #12]
    85ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85be:	4b0f      	ldr	r3, [pc, #60]	; (85fc <SystemInit+0x1d0>)
    85c0:	4313      	orrs	r3, r2
    85c2:	60cb      	str	r3, [r1, #12]
    85c4:	f3bf 8f4f 	dsb	sy
    __NOP();
    85c8:	bf00      	nop
    85ca:	e7fd      	b.n	85c8 <SystemInit+0x19c>
    85cc:	4007c074 	.word	0x4007c074
    85d0:	baadf00d 	.word	0xbaadf00d
    85d4:	10000244 	.word	0x10000244
    85d8:	4000053c 	.word	0x4000053c
    85dc:	e000edf0 	.word	0xe000edf0
    85e0:	400005a0 	.word	0x400005a0
    85e4:	40005610 	.word	0x40005610
    85e8:	4000c000 	.word	0x4000c000
    85ec:	10000258 	.word	0x10000258
    85f0:	40000ee4 	.word	0x40000ee4
    85f4:	e000ed00 	.word	0xe000ed00
    85f8:	4001e000 	.word	0x4001e000
    85fc:	05fa0004 	.word	0x05fa0004

00008600 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8600:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8602:	4803      	ldr	r0, [pc, #12]	; (8610 <_start+0x10>)
    8604:	f00f fd14 	bl	18030 <os_init>
    os_start();
    8608:	f00f fd6a 	bl	180e0 <os_start>
#endif
}
    860c:	bd08      	pop	{r3, pc}
    860e:	bf00      	nop
    8610:	00008617 	.word	0x00008617

00008614 <_init>:

void
_init(void)
{
}
    8614:	4770      	bx	lr

00008616 <main>:
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8616:	b088      	sub	sp, #32
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8618:	f000 fa43 	bl	8aa2 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>
    861c:	e7ff      	b.n	861e <main+0x8>
    //  extern { fn start_ble() -> i32; }
    //  let rc = unsafe { start_ble() };
    //  assert!(rc == 0, "BLE fail");

    //  Start the display
    druid::start_display()
    861e:	f001 f83f 	bl	96a0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>
    8622:	9005      	str	r0, [sp, #20]
    8624:	e7ff      	b.n	8626 <main+0x10>
    8626:	f24b 71f6 	movw	r1, #47094	; 0xb7f6
    862a:	f2c0 0101 	movt	r1, #1
    862e:	f64b 032c 	movw	r3, #47148	; 0xb82c
    8632:	f2c0 0301 	movt	r3, #1
    8636:	2208      	movs	r2, #8
    8638:	9805      	ldr	r0, [sp, #20]
    863a:	f000 fb41 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    863e:	e7ff      	b.n	8640 <main+0x2a>
    #[cfg(feature = "display_app")]  //  If graphics display app is enabled...
    display::test_display()
        .expect("DSP test fail");

    //  Start the touch sensor
    touch_sensor::start_touch_sensor()
    8640:	f002 fcc5 	bl	afce <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E>
    8644:	9004      	str	r0, [sp, #16]
    8646:	e7ff      	b.n	8648 <main+0x32>
    8648:	f24b 71fe 	movw	r1, #47102	; 0xb7fe
    864c:	f2c0 0101 	movt	r1, #1
    8650:	f64b 033c 	movw	r3, #47164	; 0xb83c
    8654:	f2c0 0301 	movt	r3, #1
    8658:	2208      	movs	r2, #8
    865a:	9804      	ldr	r0, [sp, #16]
    865c:	f000 fb30 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8660:	e7ff      	b.n	8662 <main+0x4c>
    visual::on_start()
        .expect("VIS fail");

    //  Launch the CHIP8 Emulator app
    #[cfg(feature = "chip8_app")]  //  If CHIP8 Emulator app is enabled...
    chip8::on_start()
    8662:	f003 fbfd 	bl	be60 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E>
    8666:	9003      	str	r0, [sp, #12]
    8668:	e7ff      	b.n	866a <main+0x54>
    866a:	f64b 014c 	movw	r1, #47180	; 0xb84c
    866e:	f2c0 0101 	movt	r1, #1
    8672:	f64b 0358 	movw	r3, #47192	; 0xb858
    8676:	f2c0 0301 	movt	r3, #1
    867a:	220a      	movs	r2, #10
    867c:	9803      	ldr	r0, [sp, #12]
    867e:	f000 fb1f 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8682:	e7ff      	b.n	8684 <main+0x6e>
        .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
    8684:	e7ff      	b.n	8686 <main+0x70>
    8686:	a806      	add	r0, sp, #24
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8688:	f000 fbd5 	bl	8e36 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    868c:	e7ff      	b.n	868e <main+0x78>
    868e:	f64b 0106 	movw	r1, #47110	; 0xb806
    8692:	f2c0 0101 	movt	r1, #1
    8696:	f64b 0368 	movw	r3, #47208	; 0xb868
    869a:	f2c0 0301 	movt	r3, #1
    869e:	a806      	add	r0, sp, #24
    86a0:	2208      	movs	r2, #8
    86a2:	f000 f896 	bl	87d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>
    86a6:	9002      	str	r0, [sp, #8]
    86a8:	e7ff      	b.n	86aa <main+0x94>
        os::eventq_run(               //  Processing events...
    86aa:	9802      	ldr	r0, [sp, #8]
    86ac:	f000 fbba 	bl	8e24 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    86b0:	9001      	str	r0, [sp, #4]
    86b2:	e7ff      	b.n	86b4 <main+0x9e>
    86b4:	f64b 010e 	movw	r1, #47118	; 0xb80e
    86b8:	f2c0 0101 	movt	r1, #1
    86bc:	f64b 0378 	movw	r3, #47224	; 0xb878
    86c0:	f2c0 0301 	movt	r3, #1
    86c4:	2208      	movs	r2, #8
    86c6:	9801      	ldr	r0, [sp, #4]
    86c8:	f000 fafa 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    86cc:	e7ff      	b.n	86ce <main+0xb8>
    loop {                            //  Loop forever...
    86ce:	e7da      	b.n	8686 <main+0x70>

000086d0 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    86d0:	b08e      	sub	sp, #56	; 0x38
    86d2:	900b      	str	r0, [sp, #44]	; 0x2c
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    86d4:	f64b 0188 	movw	r1, #47240	; 0xb888
    86d8:	f2c0 0101 	movt	r1, #1
    86dc:	2206      	movs	r2, #6
    86de:	9007      	str	r0, [sp, #28]
    86e0:	4608      	mov	r0, r1
    86e2:	4611      	mov	r1, r2
    86e4:	f000 fd67 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    86e8:	e7ff      	b.n	86ea <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
    86ea:	9807      	ldr	r0, [sp, #28]
    86ec:	f00c fd1f 	bl	1512e <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>
    86f0:	9008      	str	r0, [sp, #32]
    86f2:	e7ff      	b.n	86f4 <rust_begin_unwind+0x24>
    86f4:	9808      	ldr	r0, [sp, #32]
    86f6:	2800      	cmp	r0, #0
    86f8:	d108      	bne.n	870c <rust_begin_unwind+0x3c>
    86fa:	e7ff      	b.n	86fc <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    86fc:	f64b 008e 	movw	r0, #47246	; 0xb88e
    8700:	f2c0 0001 	movt	r0, #1
    8704:	2107      	movs	r1, #7
    8706:	f000 fd56 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    870a:	e033      	b.n	8774 <rust_begin_unwind+0xa4>
    if let Some(location) = info.location() {
    870c:	9808      	ldr	r0, [sp, #32]
    870e:	900c      	str	r0, [sp, #48]	; 0x30
        let file = location.file();
    8710:	9006      	str	r0, [sp, #24]
    8712:	f00c fd0f 	bl	15134 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8716:	910a      	str	r1, [sp, #40]	; 0x28
    8718:	9009      	str	r0, [sp, #36]	; 0x24
    871a:	e7ff      	b.n	871c <rust_begin_unwind+0x4c>
        let line = location.line();
    871c:	9806      	ldr	r0, [sp, #24]
    871e:	f00c fd0d 	bl	1513c <_ZN4core5panic8Location4line17h650a566d9637c91dE>
    8722:	4601      	mov	r1, r0
    8724:	900d      	str	r0, [sp, #52]	; 0x34
    8726:	9105      	str	r1, [sp, #20]
    8728:	e7ff      	b.n	872a <rust_begin_unwind+0x5a>
        console::print("at ");       console::buffer(&file);
    872a:	f64b 0095 	movw	r0, #47253	; 0xb895
    872e:	f2c0 0001 	movt	r0, #1
    8732:	2103      	movs	r1, #3
    8734:	f000 fd3f 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8738:	e7ff      	b.n	873a <rust_begin_unwind+0x6a>
    873a:	9809      	ldr	r0, [sp, #36]	; 0x24
    873c:	990a      	ldr	r1, [sp, #40]	; 0x28
    873e:	f000 fd61 	bl	9204 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>
    8742:	e7ff      	b.n	8744 <rust_begin_unwind+0x74>
        console::print(" line ");    console::printint(line as i32);
    8744:	f64b 0098 	movw	r0, #47256	; 0xb898
    8748:	f2c0 0001 	movt	r0, #1
    874c:	2106      	movs	r1, #6
    874e:	f000 fd32 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8752:	e7ff      	b.n	8754 <rust_begin_unwind+0x84>
    8754:	9805      	ldr	r0, [sp, #20]
    8756:	f000 fd6c 	bl	9232 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    875a:	e7ff      	b.n	875c <rust_begin_unwind+0x8c>
        console::print("\n");        console::flush();
    875c:	f64b 009e 	movw	r0, #47262	; 0xb89e
    8760:	f2c0 0001 	movt	r0, #1
    8764:	2101      	movs	r1, #1
    8766:	f000 fd26 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    876a:	e7ff      	b.n	876c <rust_begin_unwind+0x9c>
    876c:	f000 fd69 	bl	9242 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8770:	e7ff      	b.n	8772 <rust_begin_unwind+0xa2>
    if let Some(location) = info.location() {
    8772:	e003      	b.n	877c <rust_begin_unwind+0xac>
        console::print("no loc\n");  console::flush();
    8774:	f000 fd65 	bl	9242 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8778:	e7ff      	b.n	877a <rust_begin_unwind+0xaa>
    if let Some(location) = info.location() {
    877a:	e7ff      	b.n	877c <rust_begin_unwind+0xac>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
    877c:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    877e:	e7ff      	b.n	8780 <rust_begin_unwind+0xb0>
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    8780:	9807      	ldr	r0, [sp, #28]
    8782:	f00c fcd7 	bl	15134 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8786:	9004      	str	r0, [sp, #16]
    8788:	9103      	str	r1, [sp, #12]
    878a:	e7ff      	b.n	878c <rust_begin_unwind+0xbc>
    878c:	9804      	ldr	r0, [sp, #16]
    878e:	9903      	ldr	r1, [sp, #12]
    8790:	f000 f97c 	bl	8a8c <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE>
    8794:	9002      	str	r0, [sp, #8]
    8796:	e7ff      	b.n	8798 <rust_begin_unwind+0xc8>
    8798:	f64b 01a0 	movw	r1, #47264	; 0xb8a0
    879c:	f2c0 0101 	movt	r1, #1
    87a0:	9802      	ldr	r0, [sp, #8]
    87a2:	f003 ffe7 	bl	c774 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E>
    87a6:	9001      	str	r0, [sp, #4]
    87a8:	e7ff      	b.n	87aa <rust_begin_unwind+0xda>
    87aa:	9801      	ldr	r0, [sp, #4]
    87ac:	6800      	ldr	r0, [r0, #0]
    87ae:	9901      	ldr	r1, [sp, #4]
    87b0:	6849      	ldr	r1, [r1, #4]
    87b2:	f000 fd00 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87b6:	e7ff      	b.n	87b8 <rust_begin_unwind+0xe8>
    console::print("\n");  console::flush();
    87b8:	f64b 009e 	movw	r0, #47262	; 0xb89e
    87bc:	f2c0 0001 	movt	r0, #1
    87c0:	2101      	movs	r1, #1
    87c2:	f000 fcf8 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87c6:	e7ff      	b.n	87c8 <rust_begin_unwind+0xf8>
    87c8:	f000 fd3b 	bl	9242 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    87cc:	e7ff      	b.n	87ce <rust_begin_unwind+0xfe>
    //  Loop forever so that device won't restart.
    loop {}
    87ce:	e7ff      	b.n	87d0 <rust_begin_unwind+0x100>
    87d0:	e7fe      	b.n	87d0 <rust_begin_unwind+0x100>

000087d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>:
    87d2:	b08a      	sub	sp, #40	; 0x28
    87d4:	9107      	str	r1, [sp, #28]
    87d6:	9208      	str	r2, [sp, #32]
    87d8:	f8d0 c000 	ldr.w	ip, [r0]
    87dc:	f1bc 0f00 	cmp.w	ip, #0
    87e0:	9305      	str	r3, [sp, #20]
    87e2:	9204      	str	r2, [sp, #16]
    87e4:	9103      	str	r1, [sp, #12]
    87e6:	9002      	str	r0, [sp, #8]
    87e8:	d011      	beq.n	880e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x3c>
    87ea:	e7ff      	b.n	87ec <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x1a>
    87ec:	9802      	ldr	r0, [sp, #8]
    87ee:	6841      	ldr	r1, [r0, #4]
    87f0:	9106      	str	r1, [sp, #24]
    87f2:	4669      	mov	r1, sp
    87f4:	9a05      	ldr	r2, [sp, #20]
    87f6:	600a      	str	r2, [r1, #0]
    87f8:	f64b 03b0 	movw	r3, #47280	; 0xb8b0
    87fc:	f2c0 0301 	movt	r3, #1
    8800:	aa06      	add	r2, sp, #24
    8802:	9803      	ldr	r0, [sp, #12]
    8804:	9904      	ldr	r1, [sp, #16]
    8806:	f00c fc6d 	bl	150e4 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    880a:	defe      	udf	#254	; 0xfe
    880c:	defe      	udf	#254	; 0xfe
    880e:	9802      	ldr	r0, [sp, #8]
    8810:	6841      	ldr	r1, [r0, #4]
    8812:	9109      	str	r1, [sp, #36]	; 0x24
    8814:	6802      	ldr	r2, [r0, #0]
    8816:	2a00      	cmp	r2, #0
    8818:	9101      	str	r1, [sp, #4]
    881a:	d103      	bne.n	8824 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x52>
    881c:	e7ff      	b.n	881e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x4c>
    881e:	9801      	ldr	r0, [sp, #4]
    8820:	b00a      	add	sp, #40	; 0x28
    8822:	4770      	bx	lr
    8824:	e7fb      	b.n	881e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x4c>

00008826 <_ZN4core3ptr13drop_in_place17h2cd480d2a1fa8018E>:
    8826:	b580      	push	{r7, lr}
    8828:	b082      	sub	sp, #8
    882a:	9001      	str	r0, [sp, #4]
    882c:	f000 f814 	bl	8858 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h107ea34dbb1ce094E>
    8830:	e7ff      	b.n	8832 <_ZN4core3ptr13drop_in_place17h2cd480d2a1fa8018E+0xc>
    8832:	b002      	add	sp, #8
    8834:	bd80      	pop	{r7, pc}

00008836 <_ZN4core3ptr13drop_in_place17hd9978a8f7b458b49E>:
    8836:	b580      	push	{r7, lr}
    8838:	b082      	sub	sp, #8
    883a:	9001      	str	r0, [sp, #4]
    883c:	9000      	str	r0, [sp, #0]
    883e:	f000 f827 	bl	8890 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h959001782aae6f36E>
    8842:	e001      	b.n	8848 <_ZN4core3ptr13drop_in_place17hd9978a8f7b458b49E+0x12>
    8844:	b002      	add	sp, #8
    8846:	bd80      	pop	{r7, pc}
    8848:	9800      	ldr	r0, [sp, #0]
    884a:	f7ff ffec 	bl	8826 <_ZN4core3ptr13drop_in_place17h2cd480d2a1fa8018E>
    884e:	e7f9      	b.n	8844 <_ZN4core3ptr13drop_in_place17hd9978a8f7b458b49E+0xe>

00008850 <_ZN4core3ptr13drop_in_place17he6c5bffce3c304d4E>:
    8850:	b081      	sub	sp, #4
    8852:	9000      	str	r0, [sp, #0]
    8854:	b001      	add	sp, #4
    8856:	4770      	bx	lr

00008858 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h107ea34dbb1ce094E>:

impl<T, N> Drop for Vec<T, N>
where
    N: ArrayLength<T>,
{
    fn drop(&mut self) {
    8858:	b580      	push	{r7, lr}
    885a:	b084      	sub	sp, #16
    885c:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
    885e:	f000 f82f 	bl	88c0 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h3f61333c1bf65f82E>
    8862:	9002      	str	r0, [sp, #8]
    8864:	9101      	str	r1, [sp, #4]
    8866:	e7ff      	b.n	8868 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h107ea34dbb1ce094E+0x10>
    8868:	9802      	ldr	r0, [sp, #8]
    886a:	9901      	ldr	r1, [sp, #4]
    886c:	f001 ffe9 	bl	a842 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
    8870:	e7ff      	b.n	8872 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h107ea34dbb1ce094E+0x1a>
    8872:	e7ff      	b.n	8874 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h107ea34dbb1ce094E+0x1c>
    }
    8874:	b004      	add	sp, #16
    8876:	bd80      	pop	{r7, pc}

00008878 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h26804ad7d7935157E>:
where
    N: ArrayLength<T>,
{
    type Target = [T];

    fn deref(&self) -> &[T] {
    8878:	b580      	push	{r7, lr}
    887a:	b084      	sub	sp, #16
    887c:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
    887e:	f003 fad0 	bl	be22 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h91956914bff669c1E>
    8882:	9002      	str	r0, [sp, #8]
    8884:	9101      	str	r1, [sp, #4]
    8886:	e7ff      	b.n	8888 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h26804ad7d7935157E+0x10>
    }
    8888:	9802      	ldr	r0, [sp, #8]
    888a:	9901      	ldr	r1, [sp, #4]
    888c:	b004      	add	sp, #16
    888e:	bd80      	pop	{r7, pc}

00008890 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h959001782aae6f36E>:
    fn drop(&mut self) {
    8890:	b580      	push	{r7, lr}
    8892:	b086      	sub	sp, #24
    8894:	9005      	str	r0, [sp, #20]
            ptr::drop_in_place(&mut self.vec[self.next..]);
    8896:	9003      	str	r0, [sp, #12]
    8898:	f000 f812 	bl	88c0 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h3f61333c1bf65f82E>
    889c:	9002      	str	r0, [sp, #8]
    889e:	9101      	str	r1, [sp, #4]
    88a0:	e7ff      	b.n	88a2 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h959001782aae6f36E+0x12>
    88a2:	9803      	ldr	r0, [sp, #12]
    88a4:	69c1      	ldr	r1, [r0, #28]
    88a6:	9104      	str	r1, [sp, #16]
    88a8:	9a04      	ldr	r2, [sp, #16]
    88aa:	9802      	ldr	r0, [sp, #8]
    88ac:	9901      	ldr	r1, [sp, #4]
    88ae:	f001 ffd5 	bl	a85c <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>
    88b2:	e7ff      	b.n	88b4 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h959001782aae6f36E+0x24>
    88b4:	e7ff      	b.n	88b6 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h959001782aae6f36E+0x26>
    88b6:	2000      	movs	r0, #0
            self.vec.0.len = 0;
    88b8:	9903      	ldr	r1, [sp, #12]
    88ba:	6008      	str	r0, [r1, #0]
    }
    88bc:	b006      	add	sp, #24
    88be:	bd80      	pop	{r7, pc}

000088c0 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h3f61333c1bf65f82E>:

impl<T, N> ops::DerefMut for Vec<T, N>
where
    N: ArrayLength<T>,
{
    fn deref_mut(&mut self) -> &mut [T] {
    88c0:	b580      	push	{r7, lr}
    88c2:	b084      	sub	sp, #16
    88c4:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
    88c6:	f003 fa02 	bl	bcce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h08b4ae7d93862706E>
    88ca:	9002      	str	r0, [sp, #8]
    88cc:	9101      	str	r1, [sp, #4]
    88ce:	e7ff      	b.n	88d0 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h3f61333c1bf65f82E+0x10>
    }
    88d0:	9802      	ldr	r0, [sp, #8]
    88d2:	9901      	ldr	r1, [sp, #4]
    88d4:	b004      	add	sp, #16
    88d6:	bd80      	pop	{r7, pc}

000088d8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17hffa79893ce20402cE>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
    88d8:	b580      	push	{r7, lr}
    88da:	b084      	sub	sp, #16
    88dc:	9001      	str	r0, [sp, #4]
    88de:	9102      	str	r1, [sp, #8]
    88e0:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
    88e2:	f003 fa3b 	bl	bd5c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17ha6504bdbfeeb86a0E>
    88e6:	9000      	str	r0, [sp, #0]
    88e8:	e7ff      	b.n	88ea <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17hffa79893ce20402cE+0x12>
    }
    88ea:	9800      	ldr	r0, [sp, #0]
    88ec:	f000 0001 	and.w	r0, r0, #1
    88f0:	b004      	add	sp, #16
    88f2:	bd80      	pop	{r7, pc}

000088f4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h29061cea1b7f00a0E>:
    pub fn new() -> Self {
    88f4:	b580      	push	{r7, lr}
    88f6:	b088      	sub	sp, #32
    88f8:	a901      	add	r1, sp, #4
        Vec(crate::i::Vec::new())
    88fa:	9000      	str	r0, [sp, #0]
    88fc:	4608      	mov	r0, r1
    88fe:	f003 f9d7 	bl	bcb0 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17he96540eeeab4858dE>
    8902:	e7ff      	b.n	8904 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h29061cea1b7f00a0E+0x10>
    8904:	a801      	add	r0, sp, #4
    8906:	9900      	ldr	r1, [sp, #0]
    8908:	e8b0 100c 	ldmia.w	r0!, {r2, r3, ip}
    890c:	e8a1 100c 	stmia.w	r1!, {r2, r3, ip}
    8910:	e890 500c 	ldmia.w	r0, {r2, r3, ip, lr}
    8914:	e881 500c 	stmia.w	r1, {r2, r3, ip, lr}
    }
    8918:	b008      	add	sp, #32
    891a:	bd80      	pop	{r7, pc}

0000891c <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0b58a3acb69538adE>:
    fn into_iter(self) -> Self::IntoIter {
    891c:	b5b0      	push	{r4, r5, r7, lr}
    891e:	b087      	sub	sp, #28
    8920:	466a      	mov	r2, sp
        IntoIter { vec: self, next: 0 }
    8922:	4613      	mov	r3, r2
    8924:	e8b1 5010 	ldmia.w	r1!, {r4, ip, lr}
    8928:	e8a3 5010 	stmia.w	r3!, {r4, ip, lr}
    892c:	e891 5030 	ldmia.w	r1, {r4, r5, ip, lr}
    8930:	e883 5030 	stmia.w	r3, {r4, r5, ip, lr}
    8934:	4601      	mov	r1, r0
    8936:	e8b2 5008 	ldmia.w	r2!, {r3, ip, lr}
    893a:	e8a1 5008 	stmia.w	r1!, {r3, ip, lr}
    893e:	e892 5018 	ldmia.w	r2, {r3, r4, ip, lr}
    8942:	e881 5018 	stmia.w	r1, {r3, r4, ip, lr}
    8946:	2100      	movs	r1, #0
    8948:	61c1      	str	r1, [r0, #28]
    }
    894a:	b007      	add	sp, #28
    894c:	bdb0      	pop	{r4, r5, r7, pc}

0000894e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3eb31cb79971f92E>:
    fn next(&mut self) -> Option<Self::Item> {
    894e:	b580      	push	{r7, lr}
    8950:	b08e      	sub	sp, #56	; 0x38
    8952:	900a      	str	r0, [sp, #40]	; 0x28
        if self.next < self.vec.len() {
    8954:	69c1      	ldr	r1, [r0, #28]
    8956:	9008      	str	r0, [sp, #32]
    8958:	9107      	str	r1, [sp, #28]
    895a:	f7ff ff8d 	bl	8878 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h26804ad7d7935157E>
    895e:	9006      	str	r0, [sp, #24]
    8960:	9105      	str	r1, [sp, #20]
    8962:	e7ff      	b.n	8964 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3eb31cb79971f92E+0x16>
    8964:	9806      	ldr	r0, [sp, #24]
    8966:	9905      	ldr	r1, [sp, #20]
    8968:	f001 ff18 	bl	a79c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
    896c:	9004      	str	r0, [sp, #16]
    896e:	e7ff      	b.n	8970 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3eb31cb79971f92E+0x22>
    8970:	9807      	ldr	r0, [sp, #28]
    8972:	9904      	ldr	r1, [sp, #16]
    8974:	4288      	cmp	r0, r1
    8976:	d304      	bcc.n	8982 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3eb31cb79971f92E+0x34>
    8978:	e7ff      	b.n	897a <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3eb31cb79971f92E+0x2c>
    897a:	2000      	movs	r0, #0
            None
    897c:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
    8980:	e026      	b.n	89d0 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3eb31cb79971f92E+0x82>
                (self.vec.0.buffer.as_ptr() as *const T)
    8982:	9808      	ldr	r0, [sp, #32]
    8984:	1d01      	adds	r1, r0, #4
    8986:	910c      	str	r1, [sp, #48]	; 0x30
    8988:	910d      	str	r1, [sp, #52]	; 0x34
    898a:	9103      	str	r1, [sp, #12]
    898c:	e7ff      	b.n	898e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3eb31cb79971f92E+0x40>
                    .add(self.next)
    898e:	9808      	ldr	r0, [sp, #32]
    8990:	69c1      	ldr	r1, [r0, #28]
                (self.vec.0.buffer.as_ptr() as *const T)
    8992:	9803      	ldr	r0, [sp, #12]
    8994:	f000 fe59 	bl	964a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
    8998:	9002      	str	r0, [sp, #8]
    899a:	e7ff      	b.n	899c <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3eb31cb79971f92E+0x4e>
    899c:	9802      	ldr	r0, [sp, #8]
    899e:	f000 fe5f 	bl	9660 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>
    89a2:	4601      	mov	r1, r0
    89a4:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
    89a8:	9101      	str	r1, [sp, #4]
    89aa:	e7ff      	b.n	89ac <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3eb31cb79971f92E+0x5e>
            self.next += 1;
    89ac:	9808      	ldr	r0, [sp, #32]
    89ae:	69c1      	ldr	r1, [r0, #28]
    89b0:	1c4a      	adds	r2, r1, #1
    89b2:	4613      	mov	r3, r2
    89b4:	428a      	cmp	r2, r1
    89b6:	9300      	str	r3, [sp, #0]
    89b8:	d310      	bcc.n	89dc <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3eb31cb79971f92E+0x8e>
    89ba:	e7ff      	b.n	89bc <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3eb31cb79971f92E+0x6e>
    89bc:	9800      	ldr	r0, [sp, #0]
    89be:	9908      	ldr	r1, [sp, #32]
    89c0:	61c8      	str	r0, [r1, #28]
            Some(item)
    89c2:	9a01      	ldr	r2, [sp, #4]
    89c4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
    89c8:	2301      	movs	r3, #1
    89ca:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
    89ce:	e7ff      	b.n	89d0 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3eb31cb79971f92E+0x82>
    }
    89d0:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
    89d4:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
    89d8:	b00e      	add	sp, #56	; 0x38
    89da:	bd80      	pop	{r7, pc}
            self.next += 1;
    89dc:	f64b 1030 	movw	r0, #47408	; 0xb930
    89e0:	f2c0 0001 	movt	r0, #1
    89e4:	f64b 1218 	movw	r2, #47384	; 0xb918
    89e8:	f2c0 0201 	movt	r2, #1
    89ec:	211c      	movs	r1, #28
    89ee:	f00c fba7 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    89f2:	defe      	udf	#254	; 0xfe

000089f4 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E>:
    89f4:	b580      	push	{r7, lr}
    89f6:	b086      	sub	sp, #24
    89f8:	9004      	str	r0, [sp, #16]
    89fa:	9105      	str	r1, [sp, #20]
    89fc:	9002      	str	r0, [sp, #8]
    89fe:	f000 f810 	bl	8a22 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE>
    8a02:	9001      	str	r0, [sp, #4]
    8a04:	e7ff      	b.n	8a06 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x12>
    8a06:	9801      	ldr	r0, [sp, #4]
    8a08:	07c1      	lsls	r1, r0, #31
    8a0a:	2900      	cmp	r1, #0
    8a0c:	d103      	bne.n	8a16 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x22>
    8a0e:	e7ff      	b.n	8a10 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x1c>
    8a10:	2000      	movs	r0, #0
    8a12:	9003      	str	r0, [sp, #12]
    8a14:	e002      	b.n	8a1c <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x28>
    8a16:	9802      	ldr	r0, [sp, #8]
    8a18:	9003      	str	r0, [sp, #12]
    8a1a:	e7ff      	b.n	8a1c <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x28>
    8a1c:	9803      	ldr	r0, [sp, #12]
    8a1e:	b006      	add	sp, #24
    8a20:	bd80      	pop	{r7, pc}

00008a22 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE>:
    8a22:	b580      	push	{r7, lr}
    8a24:	b08a      	sub	sp, #40	; 0x28
    8a26:	9008      	str	r0, [sp, #32]
    8a28:	9109      	str	r1, [sp, #36]	; 0x24
    8a2a:	9103      	str	r1, [sp, #12]
    8a2c:	9002      	str	r0, [sp, #8]
    8a2e:	f000 f815 	bl	8a5c <_ZN4core3any6TypeId2of17haae5124a9f275cb8E>
    8a32:	9105      	str	r1, [sp, #20]
    8a34:	9004      	str	r0, [sp, #16]
    8a36:	e7ff      	b.n	8a38 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x16>
    8a38:	9803      	ldr	r0, [sp, #12]
    8a3a:	68c1      	ldr	r1, [r0, #12]
    8a3c:	9802      	ldr	r0, [sp, #8]
    8a3e:	4788      	blx	r1
    8a40:	9107      	str	r1, [sp, #28]
    8a42:	9006      	str	r0, [sp, #24]
    8a44:	e7ff      	b.n	8a46 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x24>
    8a46:	a804      	add	r0, sp, #16
    8a48:	a906      	add	r1, sp, #24
    8a4a:	f002 faae 	bl	afaa <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E>
    8a4e:	9001      	str	r0, [sp, #4]
    8a50:	e7ff      	b.n	8a52 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x30>
    8a52:	9801      	ldr	r0, [sp, #4]
    8a54:	f000 0001 	and.w	r0, r0, #1
    8a58:	b00a      	add	sp, #40	; 0x28
    8a5a:	bd80      	pop	{r7, pc}

00008a5c <_ZN4core3any6TypeId2of17haae5124a9f275cb8E>:
    8a5c:	b086      	sub	sp, #24
    8a5e:	f249 40d9 	movw	r0, #38105	; 0x94d9
    8a62:	f2c1 1010 	movt	r0, #4368	; 0x1110
    8a66:	9005      	str	r0, [sp, #20]
    8a68:	f249 7064 	movw	r0, #38756	; 0x9764
    8a6c:	f2c7 00b0 	movt	r0, #28848	; 0x70b0
    8a70:	9004      	str	r0, [sp, #16]
    8a72:	9804      	ldr	r0, [sp, #16]
    8a74:	9905      	ldr	r1, [sp, #20]
    8a76:	9001      	str	r0, [sp, #4]
    8a78:	9100      	str	r1, [sp, #0]
    8a7a:	e7ff      	b.n	8a7c <_ZN4core3any6TypeId2of17haae5124a9f275cb8E+0x20>
    8a7c:	9801      	ldr	r0, [sp, #4]
    8a7e:	9002      	str	r0, [sp, #8]
    8a80:	9900      	ldr	r1, [sp, #0]
    8a82:	9103      	str	r1, [sp, #12]
    8a84:	9802      	ldr	r0, [sp, #8]
    8a86:	9903      	ldr	r1, [sp, #12]
    8a88:	b006      	add	sp, #24
    8a8a:	4770      	bx	lr

00008a8c <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE>:
    8a8c:	b580      	push	{r7, lr}
    8a8e:	b084      	sub	sp, #16
    8a90:	9002      	str	r0, [sp, #8]
    8a92:	9103      	str	r1, [sp, #12]
    8a94:	f7ff ffae 	bl	89f4 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E>
    8a98:	9001      	str	r0, [sp, #4]
    8a9a:	e7ff      	b.n	8a9c <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE+0x10>
    8a9c:	9801      	ldr	r0, [sp, #4]
    8a9e:	b004      	add	sp, #16
    8aa0:	bd80      	pop	{r7, pc}

00008aa2 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>:
pub use hal::{ Delay, GPIO, SPI };  //  Export `hal` types GPIO and SPI

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    8aa2:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
    8aa4:	f011 f914 	bl	19cd0 <rust_sysinit>
    8aa8:	e7ff      	b.n	8aaa <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0x8>
    sys::console::flush();
    8aaa:	f000 fbca 	bl	9242 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8aae:	e7ff      	b.n	8ab0 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0xe>
}
    8ab0:	bd80      	pop	{r7, pc}

00008ab2 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>:
            rep: StrnRep::CStr(cstr)
        }
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
    8ab2:	b580      	push	{r7, lr}
    8ab4:	b086      	sub	sp, #24
    8ab6:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    8ab8:	7801      	ldrb	r1, [r0, #0]
    8aba:	07ca      	lsls	r2, r1, #31
    8abc:	2a00      	cmp	r2, #0
    8abe:	9000      	str	r0, [sp, #0]
    8ac0:	d006      	beq.n	8ad0 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x1e>
    8ac2:	e7ff      	b.n	8ac4 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x12>
            StrnRep::CStr(cstr)  => { cstr }
    8ac4:	9800      	ldr	r0, [sp, #0]
    8ac6:	6841      	ldr	r1, [r0, #4]
    8ac8:	9103      	str	r1, [sp, #12]
    8aca:	9101      	str	r1, [sp, #4]
        match self.rep {
    8acc:	e00c      	b.n	8ae8 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
    8ace:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    8ad0:	9800      	ldr	r0, [sp, #0]
    8ad2:	6841      	ldr	r1, [r0, #4]
    8ad4:	6882      	ldr	r2, [r0, #8]
    8ad6:	9104      	str	r1, [sp, #16]
    8ad8:	9205      	str	r2, [sp, #20]
    8ada:	4608      	mov	r0, r1
    8adc:	4611      	mov	r1, r2
    8ade:	f008 fdc8 	bl	11672 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8ae2:	9001      	str	r0, [sp, #4]
    8ae4:	e7ff      	b.n	8ae6 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x34>
        match self.rep {
    8ae6:	e7ff      	b.n	8ae8 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
        }
    }
    8ae8:	9801      	ldr	r0, [sp, #4]
    8aea:	b006      	add	sp, #24
    8aec:	bd80      	pop	{r7, pc}

00008aee <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
    8aee:	b5b0      	push	{r4, r5, r7, lr}
    8af0:	b0b2      	sub	sp, #200	; 0xc8
    8af2:	9029      	str	r0, [sp, #164]	; 0xa4
        match self.rep {
            StrnRep::ByteStr(bs) => {         
    8af4:	7801      	ldrb	r1, [r0, #0]
    8af6:	07ca      	lsls	r2, r1, #31
    8af8:	2a00      	cmp	r2, #0
    8afa:	900e      	str	r0, [sp, #56]	; 0x38
    8afc:	d005      	beq.n	8b0a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x1c>
    8afe:	e7ff      	b.n	8b00 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
    8b00:	980e      	ldr	r0, [sp, #56]	; 0x38
    8b02:	6841      	ldr	r1, [r0, #4]
    8b04:	912a      	str	r1, [sp, #168]	; 0xa8
        match self.rep {
    8b06:	e096      	b.n	8c36 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
    8b08:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
    8b0a:	980e      	ldr	r0, [sp, #56]	; 0x38
    8b0c:	6841      	ldr	r1, [r0, #4]
    8b0e:	6882      	ldr	r2, [r0, #8]
    8b10:	912b      	str	r1, [sp, #172]	; 0xac
    8b12:	922c      	str	r2, [sp, #176]	; 0xb0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    8b14:	4608      	mov	r0, r1
    8b16:	4611      	mov	r1, r2
    8b18:	f000 face 	bl	90b8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>
    8b1c:	9011      	str	r0, [sp, #68]	; 0x44
    8b1e:	e7ff      	b.n	8b20 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x32>
    8b20:	f64b 1054 	movw	r0, #47444	; 0xb954
    8b24:	f2c0 0001 	movt	r0, #1
    8b28:	6800      	ldr	r0, [r0, #0]
    8b2a:	a911      	add	r1, sp, #68	; 0x44
    8b2c:	910f      	str	r1, [sp, #60]	; 0x3c
    8b2e:	9010      	str	r0, [sp, #64]	; 0x40
    8b30:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8b32:	902d      	str	r0, [sp, #180]	; 0xb4
    8b34:	9910      	ldr	r1, [sp, #64]	; 0x40
    8b36:	912e      	str	r1, [sp, #184]	; 0xb8
    8b38:	900d      	str	r0, [sp, #52]	; 0x34
    8b3a:	910c      	str	r1, [sp, #48]	; 0x30
    8b3c:	f000 fc5a 	bl	93f4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>
    8b40:	900b      	str	r0, [sp, #44]	; 0x2c
    8b42:	e7ff      	b.n	8b44 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x56>
    8b44:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8b46:	07c1      	lsls	r1, r0, #31
    8b48:	2900      	cmp	r1, #0
    8b4a:	d001      	beq.n	8b50 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x62>
    8b4c:	e7ff      	b.n	8b4e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x60>
        }
    }
    8b4e:	e072      	b.n	8c36 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    8b50:	f64b 10ac 	movw	r0, #47532	; 0xb9ac
    8b54:	f2c0 0001 	movt	r0, #1
    8b58:	6801      	ldr	r1, [r0, #0]
    8b5a:	980d      	ldr	r0, [sp, #52]	; 0x34
    8b5c:	9021      	str	r0, [sp, #132]	; 0x84
    8b5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8b60:	9222      	str	r2, [sp, #136]	; 0x88
    8b62:	f64b 13c0 	movw	r3, #47552	; 0xb9c0
    8b66:	f2c0 0301 	movt	r3, #1
    8b6a:	681b      	ldr	r3, [r3, #0]
    8b6c:	f64b 1cc4 	movw	ip, #47556	; 0xb9c4
    8b70:	f2c0 0c01 	movt	ip, #1
    8b74:	f8dc c000 	ldr.w	ip, [ip]
    8b78:	46ee      	mov	lr, sp
    8b7a:	2400      	movs	r4, #0
    8b7c:	f8ce 4000 	str.w	r4, [lr]
    8b80:	a823      	add	r0, sp, #140	; 0x8c
    8b82:	2201      	movs	r2, #1
    8b84:	910a      	str	r1, [sp, #40]	; 0x28
    8b86:	4619      	mov	r1, r3
    8b88:	4663      	mov	r3, ip
    8b8a:	f000 f86a 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8b8e:	e7ff      	b.n	8b90 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xa2>
    8b90:	a821      	add	r0, sp, #132	; 0x84
    8b92:	901e      	str	r0, [sp, #120]	; 0x78
    8b94:	a822      	add	r0, sp, #136	; 0x88
    8b96:	901f      	str	r0, [sp, #124]	; 0x7c
    8b98:	a823      	add	r0, sp, #140	; 0x8c
    8b9a:	9020      	str	r0, [sp, #128]	; 0x80
    8b9c:	981e      	ldr	r0, [sp, #120]	; 0x78
    8b9e:	902f      	str	r0, [sp, #188]	; 0xbc
    8ba0:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8ba2:	9130      	str	r1, [sp, #192]	; 0xc0
    8ba4:	9a20      	ldr	r2, [sp, #128]	; 0x80
    8ba6:	9231      	str	r2, [sp, #196]	; 0xc4
    8ba8:	f249 23ad 	movw	r3, #37549	; 0x92ad
    8bac:	f2c0 0300 	movt	r3, #0
    8bb0:	9109      	str	r1, [sp, #36]	; 0x24
    8bb2:	4619      	mov	r1, r3
    8bb4:	9208      	str	r2, [sp, #32]
    8bb6:	f000 fcc8 	bl	954a <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8bba:	9007      	str	r0, [sp, #28]
    8bbc:	9106      	str	r1, [sp, #24]
    8bbe:	e7ff      	b.n	8bc0 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xd2>
    8bc0:	f249 21ad 	movw	r1, #37549	; 0x92ad
    8bc4:	f2c0 0100 	movt	r1, #0
    8bc8:	9809      	ldr	r0, [sp, #36]	; 0x24
    8bca:	f000 fcbe 	bl	954a <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8bce:	9005      	str	r0, [sp, #20]
    8bd0:	9104      	str	r1, [sp, #16]
    8bd2:	e7ff      	b.n	8bd4 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xe6>
    8bd4:	f245 710f 	movw	r1, #22287	; 0x570f
    8bd8:	f2c0 0101 	movt	r1, #1
    8bdc:	9808      	ldr	r0, [sp, #32]
    8bde:	f000 fcde 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8be2:	9003      	str	r0, [sp, #12]
    8be4:	9102      	str	r1, [sp, #8]
    8be6:	e7ff      	b.n	8be8 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xfa>
    8be8:	9807      	ldr	r0, [sp, #28]
    8bea:	9018      	str	r0, [sp, #96]	; 0x60
    8bec:	9906      	ldr	r1, [sp, #24]
    8bee:	9119      	str	r1, [sp, #100]	; 0x64
    8bf0:	9a05      	ldr	r2, [sp, #20]
    8bf2:	921a      	str	r2, [sp, #104]	; 0x68
    8bf4:	9b04      	ldr	r3, [sp, #16]
    8bf6:	931b      	str	r3, [sp, #108]	; 0x6c
    8bf8:	f8dd c00c 	ldr.w	ip, [sp, #12]
    8bfc:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    8c00:	f8dd e008 	ldr.w	lr, [sp, #8]
    8c04:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    8c08:	466c      	mov	r4, sp
    8c0a:	2503      	movs	r5, #3
    8c0c:	6025      	str	r5, [r4, #0]
    8c0e:	a812      	add	r0, sp, #72	; 0x48
    8c10:	ab18      	add	r3, sp, #96	; 0x60
    8c12:	990a      	ldr	r1, [sp, #40]	; 0x28
    8c14:	462a      	mov	r2, r5
    8c16:	f000 f824 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8c1a:	e7ff      	b.n	8c1c <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12e>
    8c1c:	f64b 10e0 	movw	r0, #47584	; 0xb9e0
    8c20:	f2c0 0001 	movt	r0, #1
    8c24:	f00c fa85 	bl	15132 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8c28:	9001      	str	r0, [sp, #4]
    8c2a:	e7ff      	b.n	8c2c <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x13e>
    8c2c:	a812      	add	r0, sp, #72	; 0x48
    8c2e:	9901      	ldr	r1, [sp, #4]
    8c30:	f00c fabc 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8c34:	defe      	udf	#254	; 0xfe
    }
    8c36:	b032      	add	sp, #200	; 0xc8
    8c38:	bdb0      	pop	{r4, r5, r7, pc}

00008c3a <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>:
        fn from(num: i32) -> Self {
    8c3a:	b083      	sub	sp, #12
    8c3c:	9001      	str	r0, [sp, #4]
                ::core::mem::transmute::
    8c3e:	9002      	str	r0, [sp, #8]
    8c40:	9802      	ldr	r0, [sp, #8]
    8c42:	9000      	str	r0, [sp, #0]
    8c44:	e7ff      	b.n	8c46 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E+0xc>
        }
    8c46:	9800      	ldr	r0, [sp, #0]
    8c48:	b003      	add	sp, #12
    8c4a:	4770      	bx	lr

00008c4c <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>:
        fn from(_: ()) -> Self {
    8c4c:	b081      	sub	sp, #4
    8c4e:	f06f 000c 	mvn.w	r0, #12
        }
    8c52:	b001      	add	sp, #4
    8c54:	4770      	bx	lr

00008c56 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E>:
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    8c56:	b082      	sub	sp, #8
    8c58:	9000      	str	r0, [sp, #0]
    8c5a:	9101      	str	r1, [sp, #4]
    8c5c:	2000      	movs	r0, #0
        }
    8c5e:	b002      	add	sp, #8
    8c60:	4770      	bx	lr

00008c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>:
    8c62:	b580      	push	{r7, lr}
    8c64:	b086      	sub	sp, #24
    8c66:	f8dd c020 	ldr.w	ip, [sp, #32]
    8c6a:	9102      	str	r1, [sp, #8]
    8c6c:	9203      	str	r2, [sp, #12]
    8c6e:	9304      	str	r3, [sp, #16]
    8c70:	f8cd c014 	str.w	ip, [sp, #20]
    8c74:	f04f 0e00 	mov.w	lr, #0
    8c78:	f8cd e004 	str.w	lr, [sp, #4]
    8c7c:	f8cd e000 	str.w	lr, [sp]
    8c80:	f8cd e000 	str.w	lr, [sp]
    8c84:	6001      	str	r1, [r0, #0]
    8c86:	6042      	str	r2, [r0, #4]
    8c88:	9900      	ldr	r1, [sp, #0]
    8c8a:	9a01      	ldr	r2, [sp, #4]
    8c8c:	6081      	str	r1, [r0, #8]
    8c8e:	60c2      	str	r2, [r0, #12]
    8c90:	6103      	str	r3, [r0, #16]
    8c92:	f8c0 c014 	str.w	ip, [r0, #20]
    8c96:	b006      	add	sp, #24
    8c98:	bd80      	pop	{r7, pc}

00008c9a <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>:
    8c9a:	b082      	sub	sp, #8
    8c9c:	9001      	str	r0, [sp, #4]
    8c9e:	7800      	ldrb	r0, [r0, #0]
    8ca0:	07c0      	lsls	r0, r0, #31
    8ca2:	2800      	cmp	r0, #0
    8ca4:	d004      	beq.n	8cb0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x16>
    8ca6:	e7ff      	b.n	8ca8 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0xe>
    8ca8:	2000      	movs	r0, #0
    8caa:	f88d 0003 	strb.w	r0, [sp, #3]
    8cae:	e003      	b.n	8cb8 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8cb0:	2001      	movs	r0, #1
    8cb2:	f88d 0003 	strb.w	r0, [sp, #3]
    8cb6:	e7ff      	b.n	8cb8 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8cb8:	f89d 0003 	ldrb.w	r0, [sp, #3]
    8cbc:	b002      	add	sp, #8
    8cbe:	4770      	bx	lr

00008cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>:
    8cc0:	b08a      	sub	sp, #40	; 0x28
    8cc2:	9005      	str	r0, [sp, #20]
    8cc4:	9107      	str	r1, [sp, #28]
    8cc6:	9208      	str	r2, [sp, #32]
    8cc8:	9805      	ldr	r0, [sp, #20]
    8cca:	f1b0 0c01 	subs.w	ip, r0, #1
    8cce:	bf18      	it	ne
    8cd0:	f04f 0c01 	movne.w	ip, #1
    8cd4:	2801      	cmp	r0, #1
    8cd6:	9304      	str	r3, [sp, #16]
    8cd8:	9203      	str	r2, [sp, #12]
    8cda:	9102      	str	r1, [sp, #8]
    8cdc:	d010      	beq.n	8d00 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x40>
    8cde:	e7ff      	b.n	8ce0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x20>
    8ce0:	9805      	ldr	r0, [sp, #20]
    8ce2:	9006      	str	r0, [sp, #24]
    8ce4:	4668      	mov	r0, sp
    8ce6:	9904      	ldr	r1, [sp, #16]
    8ce8:	6001      	str	r1, [r0, #0]
    8cea:	f64b 13f0 	movw	r3, #47600	; 0xb9f0
    8cee:	f2c0 0301 	movt	r3, #1
    8cf2:	aa06      	add	r2, sp, #24
    8cf4:	9802      	ldr	r0, [sp, #8]
    8cf6:	9903      	ldr	r1, [sp, #12]
    8cf8:	f00c f9f4 	bl	150e4 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    8cfc:	defe      	udf	#254	; 0xfe
    8cfe:	defe      	udf	#254	; 0xfe
    8d00:	9805      	ldr	r0, [sp, #20]
    8d02:	2801      	cmp	r0, #1
    8d04:	d102      	bne.n	8d0c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x4c>
    8d06:	e7ff      	b.n	8d08 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>
    8d08:	b00a      	add	sp, #40	; 0x28
    8d0a:	4770      	bx	lr
    8d0c:	e7fc      	b.n	8d08 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>

00008d0e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>:
    8d0e:	b580      	push	{r7, lr}
    8d10:	b082      	sub	sp, #8
    8d12:	9001      	str	r0, [sp, #4]
    8d14:	f7ff ffc1 	bl	8c9a <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>
    8d18:	9000      	str	r0, [sp, #0]
    8d1a:	e7ff      	b.n	8d1c <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E+0xe>
    8d1c:	2001      	movs	r0, #1
    8d1e:	9900      	ldr	r1, [sp, #0]
    8d20:	4388      	bics	r0, r1
    8d22:	b002      	add	sp, #8
    8d24:	bd80      	pop	{r7, pc}

00008d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>:
    8d26:	b082      	sub	sp, #8
    8d28:	9001      	str	r0, [sp, #4]
    8d2a:	9000      	str	r0, [sp, #0]
    8d2c:	9800      	ldr	r0, [sp, #0]
    8d2e:	b002      	add	sp, #8
    8d30:	4770      	bx	lr

00008d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>:
    8d32:	b081      	sub	sp, #4
    8d34:	4601      	mov	r1, r0
    8d36:	f88d 0003 	strb.w	r0, [sp, #3]
    8d3a:	b001      	add	sp, #4
    8d3c:	4770      	bx	lr

00008d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>:
    8d3e:	b081      	sub	sp, #4
    8d40:	9000      	str	r0, [sp, #0]
    8d42:	b001      	add	sp, #4
    8d44:	4770      	bx	lr

00008d46 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>:
    8d46:	b580      	push	{r7, lr}
    8d48:	b08a      	sub	sp, #40	; 0x28
    8d4a:	9007      	str	r0, [sp, #28]
    8d4c:	9108      	str	r1, [sp, #32]
    8d4e:	9209      	str	r2, [sp, #36]	; 0x24
    8d50:	2300      	movs	r3, #0
    8d52:	9305      	str	r3, [sp, #20]
    8d54:	9006      	str	r0, [sp, #24]
    8d56:	9805      	ldr	r0, [sp, #20]
    8d58:	9b06      	ldr	r3, [sp, #24]
    8d5a:	9104      	str	r1, [sp, #16]
    8d5c:	4619      	mov	r1, r3
    8d5e:	9b04      	ldr	r3, [sp, #16]
    8d60:	9203      	str	r2, [sp, #12]
    8d62:	461a      	mov	r2, r3
    8d64:	9b03      	ldr	r3, [sp, #12]
    8d66:	f000 f828 	bl	8dba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    8d6a:	9002      	str	r0, [sp, #8]
    8d6c:	9101      	str	r1, [sp, #4]
    8d6e:	e7ff      	b.n	8d70 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E+0x2a>
    8d70:	9802      	ldr	r0, [sp, #8]
    8d72:	9901      	ldr	r1, [sp, #4]
    8d74:	b00a      	add	sp, #40	; 0x28
    8d76:	bd80      	pop	{r7, pc}

00008d78 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>:
    8d78:	b580      	push	{r7, lr}
    8d7a:	b08a      	sub	sp, #40	; 0x28
    8d7c:	9006      	str	r0, [sp, #24]
    8d7e:	9107      	str	r1, [sp, #28]
    8d80:	9208      	str	r2, [sp, #32]
    8d82:	9309      	str	r3, [sp, #36]	; 0x24
    8d84:	9005      	str	r0, [sp, #20]
    8d86:	4610      	mov	r0, r2
    8d88:	9104      	str	r1, [sp, #16]
    8d8a:	4619      	mov	r1, r3
    8d8c:	f008 fc52 	bl	11634 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8d90:	9003      	str	r0, [sp, #12]
    8d92:	e7ff      	b.n	8d94 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x1c>
    8d94:	9803      	ldr	r0, [sp, #12]
    8d96:	9905      	ldr	r1, [sp, #20]
    8d98:	f008 fbd3 	bl	11542 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    8d9c:	9002      	str	r0, [sp, #8]
    8d9e:	e7ff      	b.n	8da0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x28>
    8da0:	9804      	ldr	r0, [sp, #16]
    8da2:	9905      	ldr	r1, [sp, #20]
    8da4:	1a41      	subs	r1, r0, r1
    8da6:	9802      	ldr	r0, [sp, #8]
    8da8:	f000 f8b7 	bl	8f1a <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
    8dac:	9001      	str	r0, [sp, #4]
    8dae:	9100      	str	r1, [sp, #0]
    8db0:	e7ff      	b.n	8db2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x3a>
    8db2:	9801      	ldr	r0, [sp, #4]
    8db4:	9900      	ldr	r1, [sp, #0]
    8db6:	b00a      	add	sp, #40	; 0x28
    8db8:	bd80      	pop	{r7, pc}

00008dba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>:
    8dba:	b580      	push	{r7, lr}
    8dbc:	b08c      	sub	sp, #48	; 0x30
    8dbe:	9008      	str	r0, [sp, #32]
    8dc0:	9109      	str	r1, [sp, #36]	; 0x24
    8dc2:	920a      	str	r2, [sp, #40]	; 0x28
    8dc4:	930b      	str	r3, [sp, #44]	; 0x2c
    8dc6:	4288      	cmp	r0, r1
    8dc8:	9307      	str	r3, [sp, #28]
    8dca:	9206      	str	r2, [sp, #24]
    8dcc:	9105      	str	r1, [sp, #20]
    8dce:	9004      	str	r0, [sp, #16]
    8dd0:	d806      	bhi.n	8de0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x26>
    8dd2:	e7ff      	b.n	8dd4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x1a>
    8dd4:	9806      	ldr	r0, [sp, #24]
    8dd6:	9907      	ldr	r1, [sp, #28]
    8dd8:	f008 fc43 	bl	11662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8ddc:	9003      	str	r0, [sp, #12]
    8dde:	e004      	b.n	8dea <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x30>
    8de0:	9804      	ldr	r0, [sp, #16]
    8de2:	9905      	ldr	r1, [sp, #20]
    8de4:	f00d f921 	bl	1602a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
    8de8:	defe      	udf	#254	; 0xfe
    8dea:	9805      	ldr	r0, [sp, #20]
    8dec:	9903      	ldr	r1, [sp, #12]
    8dee:	4288      	cmp	r0, r1
    8df0:	d809      	bhi.n	8e06 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x4c>
    8df2:	e7ff      	b.n	8df4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x3a>
    8df4:	9804      	ldr	r0, [sp, #16]
    8df6:	9905      	ldr	r1, [sp, #20]
    8df8:	9a06      	ldr	r2, [sp, #24]
    8dfa:	9b07      	ldr	r3, [sp, #28]
    8dfc:	f7ff ffbc 	bl	8d78 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>
    8e00:	9002      	str	r0, [sp, #8]
    8e02:	9101      	str	r1, [sp, #4]
    8e04:	e00a      	b.n	8e1c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x62>
    8e06:	9806      	ldr	r0, [sp, #24]
    8e08:	9907      	ldr	r1, [sp, #28]
    8e0a:	f008 fc2a 	bl	11662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8e0e:	9000      	str	r0, [sp, #0]
    8e10:	e7ff      	b.n	8e12 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x58>
    8e12:	9805      	ldr	r0, [sp, #20]
    8e14:	9900      	ldr	r1, [sp, #0]
    8e16:	f00d f8e6 	bl	15fe6 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
    8e1a:	defe      	udf	#254	; 0xfe
    8e1c:	9802      	ldr	r0, [sp, #8]
    8e1e:	9901      	ldr	r1, [sp, #4]
    8e20:	b00c      	add	sp, #48	; 0x30
    8e22:	bd80      	pop	{r7, pc}

00008e24 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8e24:	b580      	push	{r7, lr}
    8e26:	b082      	sub	sp, #8
    8e28:	9001      	str	r0, [sp, #4]
    8e2a:	f00f fb9b 	bl	18564 <os_eventq_run>
    8e2e:	e7ff      	b.n	8e30 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE+0xc>
    8e30:	2001      	movs	r0, #1
    8e32:	b002      	add	sp, #8
    8e34:	bd80      	pop	{r7, pc}

00008e36 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8e36:	b580      	push	{r7, lr}
    8e38:	b084      	sub	sp, #16
    8e3a:	9002      	str	r0, [sp, #8]
    8e3c:	f00f fbbe 	bl	185bc <os_eventq_dflt_get>
    8e40:	4601      	mov	r1, r0
    8e42:	9003      	str	r0, [sp, #12]
    8e44:	9101      	str	r1, [sp, #4]
    8e46:	e7ff      	b.n	8e48 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE+0x12>
    8e48:	9801      	ldr	r0, [sp, #4]
    8e4a:	9902      	ldr	r1, [sp, #8]
    8e4c:	6048      	str	r0, [r1, #4]
    8e4e:	2200      	movs	r2, #0
    8e50:	600a      	str	r2, [r1, #0]
    8e52:	b004      	add	sp, #16
    8e54:	bd80      	pop	{r7, pc}

00008e56 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>:
impl Default for os_task_stailq {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8e56:	b570      	push	{r4, r5, r6, lr}
    8e58:	b09c      	sub	sp, #112	; 0x70
    8e5a:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
    8e5e:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
    8e62:	9c22      	ldr	r4, [sp, #136]	; 0x88
    8e64:	9d21      	ldr	r5, [sp, #132]	; 0x84
    8e66:	9e20      	ldr	r6, [sp, #128]	; 0x80
    8e68:	9013      	str	r0, [sp, #76]	; 0x4c
    8e6a:	9114      	str	r1, [sp, #80]	; 0x50
    8e6c:	9215      	str	r2, [sp, #84]	; 0x54
    8e6e:	9316      	str	r3, [sp, #88]	; 0x58
    8e70:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
    8e74:	9418      	str	r4, [sp, #96]	; 0x60
    8e76:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
    8e7a:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
    8e7e:	9011      	str	r0, [sp, #68]	; 0x44
    8e80:	4608      	mov	r0, r1
    8e82:	9310      	str	r3, [sp, #64]	; 0x40
    8e84:	920f      	str	r2, [sp, #60]	; 0x3c
    8e86:	910e      	str	r1, [sp, #56]	; 0x38
    8e88:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    8e8c:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    8e90:	940b      	str	r4, [sp, #44]	; 0x2c
    8e92:	950a      	str	r5, [sp, #40]	; 0x28
    8e94:	9609      	str	r6, [sp, #36]	; 0x24
    8e96:	f7ff fe2a 	bl	8aee <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>
    8e9a:	e7ff      	b.n	8e9c <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x46>
    8e9c:	980e      	ldr	r0, [sp, #56]	; 0x38
    8e9e:	f7ff fe08 	bl	8ab2 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>
    8ea2:	9008      	str	r0, [sp, #32]
    8ea4:	e7ff      	b.n	8ea6 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x50>
    8ea6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8ea8:	990c      	ldr	r1, [sp, #48]	; 0x30
    8eaa:	f000 f93b 	bl	9124 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>
    8eae:	9007      	str	r0, [sp, #28]
    8eb0:	e7ff      	b.n	8eb2 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x5c>
    8eb2:	980d      	ldr	r0, [sp, #52]	; 0x34
    8eb4:	b281      	uxth	r1, r0
    8eb6:	466a      	mov	r2, sp
    8eb8:	60d1      	str	r1, [r2, #12]
    8eba:	9907      	ldr	r1, [sp, #28]
    8ebc:	6091      	str	r1, [r2, #8]
    8ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8ec0:	6053      	str	r3, [r2, #4]
    8ec2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    8ec6:	fa5f fe8c 	uxtb.w	lr, ip
    8eca:	f8c2 e000 	str.w	lr, [r2]
    8ece:	9811      	ldr	r0, [sp, #68]	; 0x44
    8ed0:	9908      	ldr	r1, [sp, #32]
    8ed2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8ed4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8ed6:	f010 f911 	bl	190fc <os_task_init>
    8eda:	4601      	mov	r1, r0
    8edc:	901b      	str	r0, [sp, #108]	; 0x6c
    8ede:	9106      	str	r1, [sp, #24]
    8ee0:	e7ff      	b.n	8ee2 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x8c>
    8ee2:	9806      	ldr	r0, [sp, #24]
    8ee4:	2800      	cmp	r0, #0
    8ee6:	d005      	beq.n	8ef4 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x9e>
    8ee8:	e7ff      	b.n	8eea <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x94>
    8eea:	9806      	ldr	r0, [sp, #24]
    8eec:	f7ff fea5 	bl	8c3a <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>
    8ef0:	9005      	str	r0, [sp, #20]
    8ef2:	e004      	b.n	8efe <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xa8>
    8ef4:	2000      	movs	r0, #0
    8ef6:	9012      	str	r0, [sp, #72]	; 0x48
    8ef8:	2001      	movs	r0, #1
    8efa:	9012      	str	r0, [sp, #72]	; 0x48
    8efc:	e002      	b.n	8f04 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8efe:	9805      	ldr	r0, [sp, #20]
    8f00:	9012      	str	r0, [sp, #72]	; 0x48
    8f02:	e7ff      	b.n	8f04 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8f04:	9812      	ldr	r0, [sp, #72]	; 0x48
    8f06:	b01c      	add	sp, #112	; 0x70
    8f08:	bd70      	pop	{r4, r5, r6, pc}

00008f0a <_ZN4core3ptr13drop_in_place17h1982c2483e0a2028E>:
    8f0a:	b081      	sub	sp, #4
    8f0c:	9000      	str	r0, [sp, #0]
    8f0e:	b001      	add	sp, #4
    8f10:	4770      	bx	lr

00008f12 <_ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E>:
    8f12:	b081      	sub	sp, #4
    8f14:	9000      	str	r0, [sp, #0]
    8f16:	b001      	add	sp, #4
    8f18:	4770      	bx	lr

00008f1a <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>:
    8f1a:	b580      	push	{r7, lr}
    8f1c:	b084      	sub	sp, #16
    8f1e:	9002      	str	r0, [sp, #8]
    8f20:	9103      	str	r1, [sp, #12]
    8f22:	f000 f993 	bl	924c <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>
    8f26:	9001      	str	r0, [sp, #4]
    8f28:	9100      	str	r1, [sp, #0]
    8f2a:	e7ff      	b.n	8f2c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE+0x12>
    8f2c:	9801      	ldr	r0, [sp, #4]
    8f2e:	9900      	ldr	r1, [sp, #0]
    8f30:	b004      	add	sp, #16
    8f32:	bd80      	pop	{r7, pc}

00008f34 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>:
    8f34:	b5b0      	push	{r4, r5, r7, lr}
    8f36:	b0b8      	sub	sp, #224	; 0xe0
    8f38:	902f      	str	r0, [sp, #188]	; 0xbc
    8f3a:	9130      	str	r1, [sp, #192]	; 0xc0
    8f3c:	9231      	str	r2, [sp, #196]	; 0xc4
    8f3e:	9332      	str	r3, [sp, #200]	; 0xc8
    8f40:	9013      	str	r0, [sp, #76]	; 0x4c
    8f42:	9112      	str	r1, [sp, #72]	; 0x48
    8f44:	9311      	str	r3, [sp, #68]	; 0x44
    8f46:	9210      	str	r2, [sp, #64]	; 0x40
    8f48:	f008 fb8b 	bl	11662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8f4c:	9016      	str	r0, [sp, #88]	; 0x58
    8f4e:	e7ff      	b.n	8f50 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x1c>
    8f50:	9810      	ldr	r0, [sp, #64]	; 0x40
    8f52:	9911      	ldr	r1, [sp, #68]	; 0x44
    8f54:	f008 fb85 	bl	11662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8f58:	9017      	str	r0, [sp, #92]	; 0x5c
    8f5a:	e7ff      	b.n	8f5c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x28>
    8f5c:	a816      	add	r0, sp, #88	; 0x58
    8f5e:	9014      	str	r0, [sp, #80]	; 0x50
    8f60:	a817      	add	r0, sp, #92	; 0x5c
    8f62:	9015      	str	r0, [sp, #84]	; 0x54
    8f64:	9814      	ldr	r0, [sp, #80]	; 0x50
    8f66:	9033      	str	r0, [sp, #204]	; 0xcc
    8f68:	9915      	ldr	r1, [sp, #84]	; 0x54
    8f6a:	9134      	str	r1, [sp, #208]	; 0xd0
    8f6c:	6802      	ldr	r2, [r0, #0]
    8f6e:	680b      	ldr	r3, [r1, #0]
    8f70:	429a      	cmp	r2, r3
    8f72:	900f      	str	r0, [sp, #60]	; 0x3c
    8f74:	910e      	str	r1, [sp, #56]	; 0x38
    8f76:	d106      	bne.n	8f86 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x52>
    8f78:	e7ff      	b.n	8f7a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x46>
    8f7a:	9810      	ldr	r0, [sp, #64]	; 0x40
    8f7c:	9911      	ldr	r1, [sp, #68]	; 0x44
    8f7e:	f008 fb78 	bl	11672 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8f82:	900d      	str	r0, [sp, #52]	; 0x34
    8f84:	e072      	b.n	906c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x138>
    8f86:	f64b 2054 	movw	r0, #47700	; 0xba54
    8f8a:	f2c0 0001 	movt	r0, #1
    8f8e:	6801      	ldr	r1, [r0, #0]
    8f90:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8f92:	9027      	str	r0, [sp, #156]	; 0x9c
    8f94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8f96:	9228      	str	r2, [sp, #160]	; 0xa0
    8f98:	f64b 2394 	movw	r3, #47764	; 0xba94
    8f9c:	f2c0 0301 	movt	r3, #1
    8fa0:	681b      	ldr	r3, [r3, #0]
    8fa2:	f64b 2c98 	movw	ip, #47768	; 0xba98
    8fa6:	f2c0 0c01 	movt	ip, #1
    8faa:	f8dc c000 	ldr.w	ip, [ip]
    8fae:	46ee      	mov	lr, sp
    8fb0:	2400      	movs	r4, #0
    8fb2:	f8ce 4000 	str.w	r4, [lr]
    8fb6:	a829      	add	r0, sp, #164	; 0xa4
    8fb8:	2201      	movs	r2, #1
    8fba:	910c      	str	r1, [sp, #48]	; 0x30
    8fbc:	4619      	mov	r1, r3
    8fbe:	4663      	mov	r3, ip
    8fc0:	f7ff fe4f 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8fc4:	e7ff      	b.n	8fc6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x92>
    8fc6:	a827      	add	r0, sp, #156	; 0x9c
    8fc8:	9024      	str	r0, [sp, #144]	; 0x90
    8fca:	a828      	add	r0, sp, #160	; 0xa0
    8fcc:	9025      	str	r0, [sp, #148]	; 0x94
    8fce:	a829      	add	r0, sp, #164	; 0xa4
    8fd0:	9026      	str	r0, [sp, #152]	; 0x98
    8fd2:	9824      	ldr	r0, [sp, #144]	; 0x90
    8fd4:	9035      	str	r0, [sp, #212]	; 0xd4
    8fd6:	9925      	ldr	r1, [sp, #148]	; 0x94
    8fd8:	9136      	str	r1, [sp, #216]	; 0xd8
    8fda:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8fdc:	9237      	str	r2, [sp, #220]	; 0xdc
    8fde:	f641 5391 	movw	r3, #7569	; 0x1d91
    8fe2:	f2c0 0301 	movt	r3, #1
    8fe6:	910b      	str	r1, [sp, #44]	; 0x2c
    8fe8:	4619      	mov	r1, r3
    8fea:	920a      	str	r2, [sp, #40]	; 0x28
    8fec:	f008 fede 	bl	11dac <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8ff0:	9009      	str	r0, [sp, #36]	; 0x24
    8ff2:	9108      	str	r1, [sp, #32]
    8ff4:	e7ff      	b.n	8ff6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xc2>
    8ff6:	f641 5191 	movw	r1, #7569	; 0x1d91
    8ffa:	f2c0 0101 	movt	r1, #1
    8ffe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9000:	f008 fed4 	bl	11dac <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    9004:	9007      	str	r0, [sp, #28]
    9006:	9106      	str	r1, [sp, #24]
    9008:	e7ff      	b.n	900a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xd6>
    900a:	f245 710f 	movw	r1, #22287	; 0x570f
    900e:	f2c0 0101 	movt	r1, #1
    9012:	980a      	ldr	r0, [sp, #40]	; 0x28
    9014:	f000 fac3 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    9018:	9005      	str	r0, [sp, #20]
    901a:	9104      	str	r1, [sp, #16]
    901c:	e7ff      	b.n	901e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xea>
    901e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9020:	901e      	str	r0, [sp, #120]	; 0x78
    9022:	9908      	ldr	r1, [sp, #32]
    9024:	911f      	str	r1, [sp, #124]	; 0x7c
    9026:	9a07      	ldr	r2, [sp, #28]
    9028:	9220      	str	r2, [sp, #128]	; 0x80
    902a:	9b06      	ldr	r3, [sp, #24]
    902c:	9321      	str	r3, [sp, #132]	; 0x84
    902e:	f8dd c014 	ldr.w	ip, [sp, #20]
    9032:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    9036:	f8dd e010 	ldr.w	lr, [sp, #16]
    903a:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
    903e:	466c      	mov	r4, sp
    9040:	2503      	movs	r5, #3
    9042:	6025      	str	r5, [r4, #0]
    9044:	a818      	add	r0, sp, #96	; 0x60
    9046:	ab1e      	add	r3, sp, #120	; 0x78
    9048:	990c      	ldr	r1, [sp, #48]	; 0x30
    904a:	462a      	mov	r2, r5
    904c:	f7ff fe09 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    9050:	e7ff      	b.n	9052 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x11e>
    9052:	f64b 20e8 	movw	r0, #47848	; 0xbae8
    9056:	f2c0 0001 	movt	r0, #1
    905a:	f00c f86a 	bl	15132 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    905e:	9003      	str	r0, [sp, #12]
    9060:	e7ff      	b.n	9062 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x12e>
    9062:	a818      	add	r0, sp, #96	; 0x60
    9064:	9903      	ldr	r1, [sp, #12]
    9066:	f00c f8a1 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    906a:	defe      	udf	#254	; 0xfe
    906c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    906e:	9912      	ldr	r1, [sp, #72]	; 0x48
    9070:	f008 fae0 	bl	11634 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    9074:	9002      	str	r0, [sp, #8]
    9076:	e7ff      	b.n	9078 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x144>
    9078:	9813      	ldr	r0, [sp, #76]	; 0x4c
    907a:	9912      	ldr	r1, [sp, #72]	; 0x48
    907c:	f008 faf1 	bl	11662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    9080:	9001      	str	r0, [sp, #4]
    9082:	e7ff      	b.n	9084 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x150>
    9084:	980d      	ldr	r0, [sp, #52]	; 0x34
    9086:	9902      	ldr	r1, [sp, #8]
    9088:	9a01      	ldr	r2, [sp, #4]
    908a:	f008 f8f6 	bl	1127a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    908e:	e7ff      	b.n	9090 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x15c>
    9090:	b038      	add	sp, #224	; 0xe0
    9092:	bdb0      	pop	{r4, r5, r7, pc}

00009094 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>:
    9094:	b580      	push	{r7, lr}
    9096:	b086      	sub	sp, #24
    9098:	9003      	str	r0, [sp, #12]
    909a:	9104      	str	r1, [sp, #16]
    909c:	9205      	str	r2, [sp, #20]
    909e:	9002      	str	r0, [sp, #8]
    90a0:	4610      	mov	r0, r2
    90a2:	9a02      	ldr	r2, [sp, #8]
    90a4:	9101      	str	r1, [sp, #4]
    90a6:	4611      	mov	r1, r2
    90a8:	9a01      	ldr	r2, [sp, #4]
    90aa:	f000 f861 	bl	9170 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>
    90ae:	9000      	str	r0, [sp, #0]
    90b0:	e7ff      	b.n	90b2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE+0x1e>
    90b2:	9800      	ldr	r0, [sp, #0]
    90b4:	b006      	add	sp, #24
    90b6:	bd80      	pop	{r7, pc}

000090b8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>:
    90b8:	b580      	push	{r7, lr}
    90ba:	b08e      	sub	sp, #56	; 0x38
    90bc:	9009      	str	r0, [sp, #36]	; 0x24
    90be:	910a      	str	r1, [sp, #40]	; 0x28
    90c0:	9005      	str	r0, [sp, #20]
    90c2:	9104      	str	r1, [sp, #16]
    90c4:	f008 facd 	bl	11662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    90c8:	9003      	str	r0, [sp, #12]
    90ca:	e7ff      	b.n	90cc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x14>
    90cc:	2101      	movs	r1, #1
    90ce:	9803      	ldr	r0, [sp, #12]
    90d0:	f000 fa7a 	bl	95c8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>
    90d4:	9002      	str	r0, [sp, #8]
    90d6:	9101      	str	r1, [sp, #4]
    90d8:	e7ff      	b.n	90da <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x22>
    90da:	9802      	ldr	r0, [sp, #8]
    90dc:	9901      	ldr	r1, [sp, #4]
    90de:	f000 f97c 	bl	93da <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>
    90e2:	9108      	str	r1, [sp, #32]
    90e4:	9007      	str	r0, [sp, #28]
    90e6:	e7ff      	b.n	90e8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x30>
    90e8:	9807      	ldr	r0, [sp, #28]
    90ea:	2800      	cmp	r0, #0
    90ec:	d001      	beq.n	90f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x3a>
    90ee:	e7ff      	b.n	90f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x38>
    90f0:	e00c      	b.n	910c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x54>
    90f2:	9808      	ldr	r0, [sp, #32]
    90f4:	900c      	str	r0, [sp, #48]	; 0x30
    90f6:	900d      	str	r0, [sp, #52]	; 0x34
    90f8:	9905      	ldr	r1, [sp, #20]
    90fa:	9000      	str	r0, [sp, #0]
    90fc:	4608      	mov	r0, r1
    90fe:	9904      	ldr	r1, [sp, #16]
    9100:	9a00      	ldr	r2, [sp, #0]
    9102:	f7ff ffc7 	bl	9094 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>
    9106:	9006      	str	r0, [sp, #24]
    9108:	e00b      	b.n	9122 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x6a>
    910a:	defe      	udf	#254	; 0xfe
    910c:	f007 ffa1 	bl	11052 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>
    9110:	e002      	b.n	9118 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x60>
    9112:	9806      	ldr	r0, [sp, #24]
    9114:	b00e      	add	sp, #56	; 0x38
    9116:	bd80      	pop	{r7, pc}
    9118:	f000 f959 	bl	93ce <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>
    911c:	9006      	str	r0, [sp, #24]
    911e:	e7ff      	b.n	9120 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x68>
    9120:	e7f7      	b.n	9112 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>
    9122:	e7f6      	b.n	9112 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>

00009124 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>:
    9124:	b082      	sub	sp, #8
    9126:	9000      	str	r0, [sp, #0]
    9128:	9101      	str	r1, [sp, #4]
    912a:	b002      	add	sp, #8
    912c:	4770      	bx	lr

0000912e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>:
    912e:	b580      	push	{r7, lr}
    9130:	b088      	sub	sp, #32
    9132:	9005      	str	r0, [sp, #20]
    9134:	9106      	str	r1, [sp, #24]
    9136:	9207      	str	r2, [sp, #28]
    9138:	9004      	str	r0, [sp, #16]
    913a:	4610      	mov	r0, r2
    913c:	9a04      	ldr	r2, [sp, #16]
    913e:	9103      	str	r1, [sp, #12]
    9140:	4611      	mov	r1, r2
    9142:	9a03      	ldr	r2, [sp, #12]
    9144:	f7ff fdff 	bl	8d46 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>
    9148:	9002      	str	r0, [sp, #8]
    914a:	9101      	str	r1, [sp, #4]
    914c:	e7ff      	b.n	914e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E+0x20>
    914e:	9802      	ldr	r0, [sp, #8]
    9150:	9901      	ldr	r1, [sp, #4]
    9152:	b008      	add	sp, #32
    9154:	bd80      	pop	{r7, pc}

00009156 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>:
    9156:	b580      	push	{r7, lr}
    9158:	b084      	sub	sp, #16
    915a:	9002      	str	r0, [sp, #8]
    915c:	9103      	str	r1, [sp, #12]
    915e:	f007 ff35 	bl	10fcc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>
    9162:	9001      	str	r0, [sp, #4]
    9164:	9100      	str	r1, [sp, #0]
    9166:	e7ff      	b.n	9168 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E+0x12>
    9168:	9801      	ldr	r0, [sp, #4]
    916a:	9900      	ldr	r1, [sp, #0]
    916c:	b004      	add	sp, #16
    916e:	bd80      	pop	{r7, pc}

00009170 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>:
    9170:	b580      	push	{r7, lr}
    9172:	b08a      	sub	sp, #40	; 0x28
    9174:	9007      	str	r0, [sp, #28]
    9176:	9108      	str	r1, [sp, #32]
    9178:	9209      	str	r2, [sp, #36]	; 0x24
    917a:	9005      	str	r0, [sp, #20]
    917c:	4608      	mov	r0, r1
    917e:	9104      	str	r1, [sp, #16]
    9180:	4611      	mov	r1, r2
    9182:	9203      	str	r2, [sp, #12]
    9184:	f008 fa6d 	bl	11662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    9188:	9002      	str	r0, [sp, #8]
    918a:	e7ff      	b.n	918c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x1c>
    918c:	9805      	ldr	r0, [sp, #20]
    918e:	9902      	ldr	r1, [sp, #8]
    9190:	4288      	cmp	r0, r1
    9192:	d303      	bcc.n	919c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x2c>
    9194:	e7ff      	b.n	9196 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x26>
    9196:	2000      	movs	r0, #0
    9198:	9006      	str	r0, [sp, #24]
    919a:	e009      	b.n	91b0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    919c:	9805      	ldr	r0, [sp, #20]
    919e:	9904      	ldr	r1, [sp, #16]
    91a0:	9a03      	ldr	r2, [sp, #12]
    91a2:	f008 fa8a 	bl	116ba <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>
    91a6:	9001      	str	r0, [sp, #4]
    91a8:	e7ff      	b.n	91aa <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x3a>
    91aa:	9801      	ldr	r0, [sp, #4]
    91ac:	9006      	str	r0, [sp, #24]
    91ae:	e7ff      	b.n	91b0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    91b0:	9806      	ldr	r0, [sp, #24]
    91b2:	b00a      	add	sp, #40	; 0x28
    91b4:	bd80      	pop	{r7, pc}

000091b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    91b6:	b580      	push	{r7, lr}
    91b8:	b08a      	sub	sp, #40	; 0x28
    91ba:	9004      	str	r0, [sp, #16]
    91bc:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    91be:	9003      	str	r0, [sp, #12]
    91c0:	9102      	str	r1, [sp, #8]
    91c2:	f000 f86e 	bl	92a2 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    91c6:	4601      	mov	r1, r0
    91c8:	9006      	str	r0, [sp, #24]
    91ca:	9101      	str	r1, [sp, #4]
    91cc:	e7ff      	b.n	91ce <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x18>
    let len = msg.len() as u32;
    91ce:	9803      	ldr	r0, [sp, #12]
    91d0:	9902      	ldr	r1, [sp, #8]
    91d2:	f000 f850 	bl	9276 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    91d6:	9000      	str	r0, [sp, #0]
    91d8:	e7ff      	b.n	91da <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x24>
    91da:	9800      	ldr	r0, [sp, #0]
    91dc:	9007      	str	r0, [sp, #28]
    91de:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    91e0:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    91e2:	4608      	mov	r0, r1
    91e4:	f000 f809 	bl	91fa <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>
    91e8:	9009      	str	r0, [sp, #36]	; 0x24
    91ea:	e7ff      	b.n	91ec <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x36>
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    91ec:	9801      	ldr	r0, [sp, #4]
    91ee:	9900      	ldr	r1, [sp, #0]
    91f0:	f00d fe76 	bl	16ee0 <console_buffer>
    91f4:	e7ff      	b.n	91f6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x40>
}
    91f6:	b00a      	add	sp, #40	; 0x28
    91f8:	bd80      	pop	{r7, pc}

000091fa <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    91fa:	b081      	sub	sp, #4
    91fc:	9000      	str	r0, [sp, #0]
    91fe:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    9200:	b001      	add	sp, #4
    9202:	4770      	bx	lr

00009204 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    9204:	b580      	push	{r7, lr}
    9206:	b086      	sub	sp, #24
    9208:	9004      	str	r0, [sp, #16]
    920a:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    920c:	9003      	str	r0, [sp, #12]
    920e:	9102      	str	r1, [sp, #8]
    9210:	f000 f847 	bl	92a2 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    9214:	9001      	str	r0, [sp, #4]
    9216:	e7ff      	b.n	9218 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x14>
    9218:	9803      	ldr	r0, [sp, #12]
    921a:	9902      	ldr	r1, [sp, #8]
    921c:	f000 f82b 	bl	9276 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    9220:	9000      	str	r0, [sp, #0]
    9222:	e7ff      	b.n	9224 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x20>
    9224:	9801      	ldr	r0, [sp, #4]
    9226:	9900      	ldr	r1, [sp, #0]
    9228:	f00d fe5a 	bl	16ee0 <console_buffer>
    922c:	e7ff      	b.n	922e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x2a>
}
    922e:	b006      	add	sp, #24
    9230:	bd80      	pop	{r7, pc}

00009232 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    9232:	b580      	push	{r7, lr}
    9234:	b082      	sub	sp, #8
    9236:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    9238:	f00d fec2 	bl	16fc0 <console_printint>
    923c:	e7ff      	b.n	923e <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E+0xc>
}
    923e:	b002      	add	sp, #8
    9240:	bd80      	pop	{r7, pc}

00009242 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    9242:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
    9244:	f00d fe24 	bl	16e90 <console_flush>
    9248:	e7ff      	b.n	924a <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E+0x8>
}
    924a:	bd80      	pop	{r7, pc}

0000924c <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>:
    924c:	b086      	sub	sp, #24
    924e:	9004      	str	r0, [sp, #16]
    9250:	9105      	str	r1, [sp, #20]
    9252:	9002      	str	r0, [sp, #8]
    9254:	9103      	str	r1, [sp, #12]
    9256:	9802      	ldr	r0, [sp, #8]
    9258:	9903      	ldr	r1, [sp, #12]
    925a:	9000      	str	r0, [sp, #0]
    925c:	9101      	str	r1, [sp, #4]
    925e:	9800      	ldr	r0, [sp, #0]
    9260:	9901      	ldr	r1, [sp, #4]
    9262:	b006      	add	sp, #24
    9264:	4770      	bx	lr

00009266 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>:
    9266:	b082      	sub	sp, #8
    9268:	460a      	mov	r2, r1
    926a:	9000      	str	r0, [sp, #0]
    926c:	f88d 1007 	strb.w	r1, [sp, #7]
    9270:	7001      	strb	r1, [r0, #0]
    9272:	b002      	add	sp, #8
    9274:	4770      	bx	lr

00009276 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>:
    9276:	b580      	push	{r7, lr}
    9278:	b08a      	sub	sp, #40	; 0x28
    927a:	9004      	str	r0, [sp, #16]
    927c:	9105      	str	r1, [sp, #20]
    927e:	9008      	str	r0, [sp, #32]
    9280:	9109      	str	r1, [sp, #36]	; 0x24
    9282:	9006      	str	r0, [sp, #24]
    9284:	9107      	str	r1, [sp, #28]
    9286:	9806      	ldr	r0, [sp, #24]
    9288:	9907      	ldr	r1, [sp, #28]
    928a:	9003      	str	r0, [sp, #12]
    928c:	9102      	str	r1, [sp, #8]
    928e:	e7ff      	b.n	9290 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x1a>
    9290:	9803      	ldr	r0, [sp, #12]
    9292:	9902      	ldr	r1, [sp, #8]
    9294:	f008 f9e5 	bl	11662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    9298:	9001      	str	r0, [sp, #4]
    929a:	e7ff      	b.n	929c <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x26>
    929c:	9801      	ldr	r0, [sp, #4]
    929e:	b00a      	add	sp, #40	; 0x28
    92a0:	bd80      	pop	{r7, pc}

000092a2 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>:
    92a2:	b082      	sub	sp, #8
    92a4:	9000      	str	r0, [sp, #0]
    92a6:	9101      	str	r1, [sp, #4]
    92a8:	b002      	add	sp, #8
    92aa:	4770      	bx	lr

000092ac <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E>:
    92ac:	b580      	push	{r7, lr}
    92ae:	b084      	sub	sp, #16
    92b0:	9002      	str	r0, [sp, #8]
    92b2:	9103      	str	r1, [sp, #12]
    92b4:	6800      	ldr	r0, [r0, #0]
    92b6:	f000 f845 	bl	9344 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>
    92ba:	9001      	str	r0, [sp, #4]
    92bc:	e7ff      	b.n	92be <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E+0x12>
    92be:	9801      	ldr	r0, [sp, #4]
    92c0:	f000 0001 	and.w	r0, r0, #1
    92c4:	b004      	add	sp, #16
    92c6:	bd80      	pop	{r7, pc}

000092c8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>:
    92c8:	b087      	sub	sp, #28
    92ca:	9000      	str	r0, [sp, #0]
    92cc:	9101      	str	r1, [sp, #4]
    92ce:	2000      	movs	r0, #0
    92d0:	f88d 0013 	strb.w	r0, [sp, #19]
    92d4:	f88d 0012 	strb.w	r0, [sp, #18]
    92d8:	2001      	movs	r0, #1
    92da:	f88d 0013 	strb.w	r0, [sp, #19]
    92de:	f88d 0012 	strb.w	r0, [sp, #18]
    92e2:	9800      	ldr	r0, [sp, #0]
    92e4:	2800      	cmp	r0, #0
    92e6:	d001      	beq.n	92ec <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x24>
    92e8:	e7ff      	b.n	92ea <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x22>
    92ea:	e006      	b.n	92fa <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x32>
    92ec:	2000      	movs	r0, #0
    92ee:	f88d 0012 	strb.w	r0, [sp, #18]
    92f2:	2001      	movs	r0, #1
    92f4:	9002      	str	r0, [sp, #8]
    92f6:	e008      	b.n	930a <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    92f8:	defe      	udf	#254	; 0xfe
    92fa:	2000      	movs	r0, #0
    92fc:	f88d 0013 	strb.w	r0, [sp, #19]
    9300:	9901      	ldr	r1, [sp, #4]
    9302:	9106      	str	r1, [sp, #24]
    9304:	9103      	str	r1, [sp, #12]
    9306:	9002      	str	r0, [sp, #8]
    9308:	e7ff      	b.n	930a <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    930a:	f89d 0012 	ldrb.w	r0, [sp, #18]
    930e:	07c0      	lsls	r0, r0, #31
    9310:	2800      	cmp	r0, #0
    9312:	d104      	bne.n	931e <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x56>
    9314:	e7ff      	b.n	9316 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9316:	9800      	ldr	r0, [sp, #0]
    9318:	2801      	cmp	r0, #1
    931a:	d008      	beq.n	932e <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x66>
    931c:	e011      	b.n	9342 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x7a>
    931e:	2000      	movs	r0, #0
    9320:	f88d 0012 	strb.w	r0, [sp, #18]
    9324:	e7f7      	b.n	9316 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9326:	9802      	ldr	r0, [sp, #8]
    9328:	9903      	ldr	r1, [sp, #12]
    932a:	b007      	add	sp, #28
    932c:	4770      	bx	lr
    932e:	f89d 0013 	ldrb.w	r0, [sp, #19]
    9332:	07c0      	lsls	r0, r0, #31
    9334:	2800      	cmp	r0, #0
    9336:	d0f6      	beq.n	9326 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    9338:	e7ff      	b.n	933a <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x72>
    933a:	2000      	movs	r0, #0
    933c:	f88d 0013 	strb.w	r0, [sp, #19]
    9340:	e7f1      	b.n	9326 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    9342:	e7f0      	b.n	9326 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>

00009344 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>:
    9344:	b580      	push	{r7, lr}
    9346:	b08e      	sub	sp, #56	; 0x38
    9348:	900b      	str	r0, [sp, #44]	; 0x2c
    934a:	910c      	str	r1, [sp, #48]	; 0x30
    934c:	9003      	str	r0, [sp, #12]
    934e:	9803      	ldr	r0, [sp, #12]
    9350:	6800      	ldr	r0, [r0, #0]
    9352:	2800      	cmp	r0, #0
    9354:	4602      	mov	r2, r0
    9356:	bf18      	it	ne
    9358:	2201      	movne	r2, #1
    935a:	2800      	cmp	r0, #0
    935c:	9101      	str	r1, [sp, #4]
    935e:	d00f      	beq.n	9380 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x3c>
    9360:	e7ff      	b.n	9362 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x1e>
    9362:	9803      	ldr	r0, [sp, #12]
    9364:	900d      	str	r0, [sp, #52]	; 0x34
    9366:	f64b 22f8 	movw	r2, #47864	; 0xbaf8
    936a:	f2c0 0201 	movt	r2, #1
    936e:	a907      	add	r1, sp, #28
    9370:	2304      	movs	r3, #4
    9372:	9000      	str	r0, [sp, #0]
    9374:	4608      	mov	r0, r1
    9376:	9901      	ldr	r1, [sp, #4]
    9378:	f00c fd8b 	bl	15e92 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    937c:	e011      	b.n	93a2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5e>
    937e:	defe      	udf	#254	; 0xfe
    9380:	f64b 22fc 	movw	r2, #47868	; 0xbafc
    9384:	f2c0 0201 	movt	r2, #1
    9388:	a804      	add	r0, sp, #16
    938a:	2304      	movs	r3, #4
    938c:	9901      	ldr	r1, [sp, #4]
    938e:	f00c fd80 	bl	15e92 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    9392:	e7ff      	b.n	9394 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x50>
    9394:	a804      	add	r0, sp, #16
    9396:	f00c f899 	bl	154cc <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    939a:	f88d 000b 	strb.w	r0, [sp, #11]
    939e:	e7ff      	b.n	93a0 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5c>
    93a0:	e011      	b.n	93c6 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    93a2:	9800      	ldr	r0, [sp, #0]
    93a4:	900a      	str	r0, [sp, #40]	; 0x28
    93a6:	f64b 3200 	movw	r2, #47872	; 0xbb00
    93aa:	f2c0 0201 	movt	r2, #1
    93ae:	a807      	add	r0, sp, #28
    93b0:	a90a      	add	r1, sp, #40	; 0x28
    93b2:	f00c f822 	bl	153fa <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>
    93b6:	e7ff      	b.n	93b8 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x74>
    93b8:	a807      	add	r0, sp, #28
    93ba:	f00c f887 	bl	154cc <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    93be:	f88d 000b 	strb.w	r0, [sp, #11]
    93c2:	e7ff      	b.n	93c4 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x80>
    93c4:	e7ff      	b.n	93c6 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    93c6:	f89d 000b 	ldrb.w	r0, [sp, #11]
    93ca:	b00e      	add	sp, #56	; 0x38
    93cc:	bd80      	pop	{r7, pc}

000093ce <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>:
    93ce:	b082      	sub	sp, #8
    93d0:	2000      	movs	r0, #0
    93d2:	9000      	str	r0, [sp, #0]
    93d4:	9800      	ldr	r0, [sp, #0]
    93d6:	b002      	add	sp, #8
    93d8:	4770      	bx	lr

000093da <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>:
    93da:	b580      	push	{r7, lr}
    93dc:	b084      	sub	sp, #16
    93de:	9002      	str	r0, [sp, #8]
    93e0:	9103      	str	r1, [sp, #12]
    93e2:	f7ff ff71 	bl	92c8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>
    93e6:	9001      	str	r0, [sp, #4]
    93e8:	9100      	str	r1, [sp, #0]
    93ea:	e7ff      	b.n	93ec <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E+0x12>
    93ec:	9801      	ldr	r0, [sp, #4]
    93ee:	9900      	ldr	r1, [sp, #0]
    93f0:	b004      	add	sp, #16
    93f2:	bd80      	pop	{r7, pc}

000093f4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>:
    93f4:	b580      	push	{r7, lr}
    93f6:	b094      	sub	sp, #80	; 0x50
    93f8:	9008      	str	r0, [sp, #32]
    93fa:	9109      	str	r1, [sp, #36]	; 0x24
    93fc:	6802      	ldr	r2, [r0, #0]
    93fe:	2a00      	cmp	r2, #0
    9400:	bf18      	it	ne
    9402:	2201      	movne	r2, #1
    9404:	f04f 0300 	mov.w	r3, #0
    9408:	930b      	str	r3, [sp, #44]	; 0x2c
    940a:	920a      	str	r2, [sp, #40]	; 0x28
    940c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    940e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9410:	9104      	str	r1, [sp, #16]
    9412:	9003      	str	r0, [sp, #12]
    9414:	9202      	str	r2, [sp, #8]
    9416:	e7ff      	b.n	9418 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x24>
    9418:	9802      	ldr	r0, [sp, #8]
    941a:	9902      	ldr	r1, [sp, #8]
    941c:	910d      	str	r1, [sp, #52]	; 0x34
    941e:	9a04      	ldr	r2, [sp, #16]
    9420:	6813      	ldr	r3, [r2, #0]
    9422:	2b00      	cmp	r3, #0
    9424:	bf18      	it	ne
    9426:	2301      	movne	r3, #1
    9428:	f04f 0c00 	mov.w	ip, #0
    942c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    9430:	930e      	str	r3, [sp, #56]	; 0x38
    9432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9434:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    9438:	9001      	str	r0, [sp, #4]
    943a:	9300      	str	r3, [sp, #0]
    943c:	e7ff      	b.n	943e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x4a>
    943e:	9800      	ldr	r0, [sp, #0]
    9440:	9011      	str	r0, [sp, #68]	; 0x44
    9442:	9901      	ldr	r1, [sp, #4]
    9444:	4281      	cmp	r1, r0
    9446:	d104      	bne.n	9452 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x5e>
    9448:	e7ff      	b.n	944a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x56>
    944a:	2001      	movs	r0, #1
    944c:	f88d 0017 	strb.w	r0, [sp, #23]
    9450:	e003      	b.n	945a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    9452:	2000      	movs	r0, #0
    9454:	f88d 0017 	strb.w	r0, [sp, #23]
    9458:	e7ff      	b.n	945a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    945a:	f89d 0017 	ldrb.w	r0, [sp, #23]
    945e:	07c0      	lsls	r0, r0, #31
    9460:	2800      	cmp	r0, #0
    9462:	d104      	bne.n	946e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x7a>
    9464:	e7ff      	b.n	9466 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x72>
    9466:	2000      	movs	r0, #0
    9468:	f88d 0016 	strb.w	r0, [sp, #22]
    946c:	e01c      	b.n	94a8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    946e:	9803      	ldr	r0, [sp, #12]
    9470:	9006      	str	r0, [sp, #24]
    9472:	9904      	ldr	r1, [sp, #16]
    9474:	9107      	str	r1, [sp, #28]
    9476:	9a06      	ldr	r2, [sp, #24]
    9478:	6812      	ldr	r2, [r2, #0]
    947a:	2a00      	cmp	r2, #0
    947c:	d104      	bne.n	9488 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x94>
    947e:	e7ff      	b.n	9480 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    9480:	2001      	movs	r0, #1
    9482:	f88d 0016 	strb.w	r0, [sp, #22]
    9486:	e00e      	b.n	94a6 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    9488:	9807      	ldr	r0, [sp, #28]
    948a:	6800      	ldr	r0, [r0, #0]
    948c:	2800      	cmp	r0, #0
    948e:	d0f7      	beq.n	9480 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    9490:	e7ff      	b.n	9492 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x9e>
    9492:	9806      	ldr	r0, [sp, #24]
    9494:	9012      	str	r0, [sp, #72]	; 0x48
    9496:	9907      	ldr	r1, [sp, #28]
    9498:	9113      	str	r1, [sp, #76]	; 0x4c
    949a:	f008 fe0c 	bl	120b6 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>
    949e:	f88d 0016 	strb.w	r0, [sp, #22]
    94a2:	e7ff      	b.n	94a4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb0>
    94a4:	e7ff      	b.n	94a6 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    94a6:	e7ff      	b.n	94a8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    94a8:	f89d 0016 	ldrb.w	r0, [sp, #22]
    94ac:	b014      	add	sp, #80	; 0x50
    94ae:	bd80      	pop	{r7, pc}

000094b0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E>:
    94b0:	b580      	push	{r7, lr}
    94b2:	b084      	sub	sp, #16
    94b4:	9002      	str	r0, [sp, #8]
    94b6:	9103      	str	r1, [sp, #12]
    94b8:	6800      	ldr	r0, [r0, #0]
    94ba:	f008 fd8e 	bl	11fda <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>
    94be:	9001      	str	r0, [sp, #4]
    94c0:	e7ff      	b.n	94c2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E+0x12>
    94c2:	9801      	ldr	r0, [sp, #4]
    94c4:	f000 0001 	and.w	r0, r0, #1
    94c8:	b004      	add	sp, #16
    94ca:	bd80      	pop	{r7, pc}

000094cc <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>:
    94cc:	b580      	push	{r7, lr}
    94ce:	b084      	sub	sp, #16
    94d0:	9002      	str	r0, [sp, #8]
    94d2:	9103      	str	r1, [sp, #12]
    94d4:	6800      	ldr	r0, [r0, #0]
    94d6:	f008 fd49 	bl	11f6c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>
    94da:	9001      	str	r0, [sp, #4]
    94dc:	e7ff      	b.n	94de <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E+0x12>
    94de:	9801      	ldr	r0, [sp, #4]
    94e0:	f000 0001 	and.w	r0, r0, #1
    94e4:	b004      	add	sp, #16
    94e6:	bd80      	pop	{r7, pc}

000094e8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E>:
    94e8:	b580      	push	{r7, lr}
    94ea:	b084      	sub	sp, #16
    94ec:	9002      	str	r0, [sp, #8]
    94ee:	9103      	str	r1, [sp, #12]
    94f0:	6800      	ldr	r0, [r0, #0]
    94f2:	f7ff ffeb 	bl	94cc <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>
    94f6:	9001      	str	r0, [sp, #4]
    94f8:	e7ff      	b.n	94fa <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E+0x12>
    94fa:	9801      	ldr	r0, [sp, #4]
    94fc:	f000 0001 	and.w	r0, r0, #1
    9500:	b004      	add	sp, #16
    9502:	bd80      	pop	{r7, pc}

00009504 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE>:
    9504:	b580      	push	{r7, lr}
    9506:	b084      	sub	sp, #16
    9508:	9002      	str	r0, [sp, #8]
    950a:	9103      	str	r1, [sp, #12]
    950c:	6800      	ldr	r0, [r0, #0]
    950e:	f008 fd9b 	bl	12048 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>
    9512:	9001      	str	r0, [sp, #4]
    9514:	e7ff      	b.n	9516 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE+0x12>
    9516:	9801      	ldr	r0, [sp, #4]
    9518:	f000 0001 	and.w	r0, r0, #1
    951c:	b004      	add	sp, #16
    951e:	bd80      	pop	{r7, pc}

00009520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>:
    9520:	b089      	sub	sp, #36	; 0x24
    9522:	9005      	str	r0, [sp, #20]
    9524:	9106      	str	r1, [sp, #24]
    9526:	9107      	str	r1, [sp, #28]
    9528:	9907      	ldr	r1, [sp, #28]
    952a:	9002      	str	r0, [sp, #8]
    952c:	9101      	str	r1, [sp, #4]
    952e:	e7ff      	b.n	9530 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x10>
    9530:	9802      	ldr	r0, [sp, #8]
    9532:	9008      	str	r0, [sp, #32]
    9534:	9908      	ldr	r1, [sp, #32]
    9536:	9100      	str	r1, [sp, #0]
    9538:	e7ff      	b.n	953a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x1a>
    953a:	9800      	ldr	r0, [sp, #0]
    953c:	9003      	str	r0, [sp, #12]
    953e:	9901      	ldr	r1, [sp, #4]
    9540:	9104      	str	r1, [sp, #16]
    9542:	9803      	ldr	r0, [sp, #12]
    9544:	9904      	ldr	r1, [sp, #16]
    9546:	b009      	add	sp, #36	; 0x24
    9548:	4770      	bx	lr

0000954a <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>:
    954a:	b089      	sub	sp, #36	; 0x24
    954c:	9005      	str	r0, [sp, #20]
    954e:	9106      	str	r1, [sp, #24]
    9550:	9107      	str	r1, [sp, #28]
    9552:	9907      	ldr	r1, [sp, #28]
    9554:	9002      	str	r0, [sp, #8]
    9556:	9101      	str	r1, [sp, #4]
    9558:	e7ff      	b.n	955a <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x10>
    955a:	9802      	ldr	r0, [sp, #8]
    955c:	9008      	str	r0, [sp, #32]
    955e:	9908      	ldr	r1, [sp, #32]
    9560:	9100      	str	r1, [sp, #0]
    9562:	e7ff      	b.n	9564 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x1a>
    9564:	9800      	ldr	r0, [sp, #0]
    9566:	9003      	str	r0, [sp, #12]
    9568:	9901      	ldr	r1, [sp, #4]
    956a:	9104      	str	r1, [sp, #16]
    956c:	9803      	ldr	r0, [sp, #12]
    956e:	9904      	ldr	r1, [sp, #16]
    9570:	b009      	add	sp, #36	; 0x24
    9572:	4770      	bx	lr

00009574 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>:
    9574:	b089      	sub	sp, #36	; 0x24
    9576:	9005      	str	r0, [sp, #20]
    9578:	9106      	str	r1, [sp, #24]
    957a:	9107      	str	r1, [sp, #28]
    957c:	9907      	ldr	r1, [sp, #28]
    957e:	9002      	str	r0, [sp, #8]
    9580:	9101      	str	r1, [sp, #4]
    9582:	e7ff      	b.n	9584 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x10>
    9584:	9802      	ldr	r0, [sp, #8]
    9586:	9008      	str	r0, [sp, #32]
    9588:	9908      	ldr	r1, [sp, #32]
    958a:	9100      	str	r1, [sp, #0]
    958c:	e7ff      	b.n	958e <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x1a>
    958e:	9800      	ldr	r0, [sp, #0]
    9590:	9003      	str	r0, [sp, #12]
    9592:	9901      	ldr	r1, [sp, #4]
    9594:	9104      	str	r1, [sp, #16]
    9596:	9803      	ldr	r0, [sp, #12]
    9598:	9904      	ldr	r1, [sp, #16]
    959a:	b009      	add	sp, #36	; 0x24
    959c:	4770      	bx	lr

0000959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>:
    959e:	b089      	sub	sp, #36	; 0x24
    95a0:	9005      	str	r0, [sp, #20]
    95a2:	9106      	str	r1, [sp, #24]
    95a4:	9107      	str	r1, [sp, #28]
    95a6:	9907      	ldr	r1, [sp, #28]
    95a8:	9002      	str	r0, [sp, #8]
    95aa:	9101      	str	r1, [sp, #4]
    95ac:	e7ff      	b.n	95ae <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x10>
    95ae:	9802      	ldr	r0, [sp, #8]
    95b0:	9008      	str	r0, [sp, #32]
    95b2:	9908      	ldr	r1, [sp, #32]
    95b4:	9100      	str	r1, [sp, #0]
    95b6:	e7ff      	b.n	95b8 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x1a>
    95b8:	9800      	ldr	r0, [sp, #0]
    95ba:	9003      	str	r0, [sp, #12]
    95bc:	9901      	ldr	r1, [sp, #4]
    95be:	9104      	str	r1, [sp, #16]
    95c0:	9803      	ldr	r0, [sp, #12]
    95c2:	9904      	ldr	r1, [sp, #16]
    95c4:	b009      	add	sp, #36	; 0x24
    95c6:	4770      	bx	lr

000095c8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>:
    95c8:	b580      	push	{r7, lr}
    95ca:	b088      	sub	sp, #32
    95cc:	9004      	str	r0, [sp, #16]
    95ce:	9105      	str	r1, [sp, #20]
    95d0:	f000 f819 	bl	9606 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>
    95d4:	9001      	str	r0, [sp, #4]
    95d6:	9100      	str	r1, [sp, #0]
    95d8:	e7ff      	b.n	95da <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x12>
    95da:	9801      	ldr	r0, [sp, #4]
    95dc:	9006      	str	r0, [sp, #24]
    95de:	9900      	ldr	r1, [sp, #0]
    95e0:	f001 0201 	and.w	r2, r1, #1
    95e4:	f88d 201f 	strb.w	r2, [sp, #31]
    95e8:	2a00      	cmp	r2, #0
    95ea:	d105      	bne.n	95f8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x30>
    95ec:	e7ff      	b.n	95ee <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x26>
    95ee:	9801      	ldr	r0, [sp, #4]
    95f0:	9003      	str	r0, [sp, #12]
    95f2:	2101      	movs	r1, #1
    95f4:	9102      	str	r1, [sp, #8]
    95f6:	e002      	b.n	95fe <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    95f8:	2000      	movs	r0, #0
    95fa:	9002      	str	r0, [sp, #8]
    95fc:	e7ff      	b.n	95fe <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    95fe:	9802      	ldr	r0, [sp, #8]
    9600:	9903      	ldr	r1, [sp, #12]
    9602:	b008      	add	sp, #32
    9604:	bd80      	pop	{r7, pc}

00009606 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>:
    9606:	b08a      	sub	sp, #40	; 0x28
    9608:	9004      	str	r0, [sp, #16]
    960a:	9105      	str	r1, [sp, #20]
    960c:	1a40      	subs	r0, r0, r1
    960e:	f04f 0100 	mov.w	r1, #0
    9612:	f141 0100 	adc.w	r1, r1, #0
    9616:	f1c1 0101 	rsb	r1, r1, #1
    961a:	9006      	str	r0, [sp, #24]
    961c:	f88d 101c 	strb.w	r1, [sp, #28]
    9620:	9806      	ldr	r0, [sp, #24]
    9622:	f89d 101c 	ldrb.w	r1, [sp, #28]
    9626:	9001      	str	r0, [sp, #4]
    9628:	9100      	str	r1, [sp, #0]
    962a:	e7ff      	b.n	962c <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E+0x26>
    962c:	9801      	ldr	r0, [sp, #4]
    962e:	9008      	str	r0, [sp, #32]
    9630:	9900      	ldr	r1, [sp, #0]
    9632:	f001 0201 	and.w	r2, r1, #1
    9636:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    963a:	9002      	str	r0, [sp, #8]
    963c:	f88d 200c 	strb.w	r2, [sp, #12]
    9640:	9802      	ldr	r0, [sp, #8]
    9642:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9646:	b00a      	add	sp, #40	; 0x28
    9648:	4770      	bx	lr

0000964a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>:
    964a:	b580      	push	{r7, lr}
    964c:	b084      	sub	sp, #16
    964e:	9002      	str	r0, [sp, #8]
    9650:	9103      	str	r1, [sp, #12]
    9652:	f000 f80f 	bl	9674 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>
    9656:	9001      	str	r0, [sp, #4]
    9658:	e7ff      	b.n	965a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E+0x10>
    965a:	9801      	ldr	r0, [sp, #4]
    965c:	b004      	add	sp, #16
    965e:	bd80      	pop	{r7, pc}

00009660 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>:
    9660:	b580      	push	{r7, lr}
    9662:	b082      	sub	sp, #8
    9664:	9001      	str	r0, [sp, #4]
    9666:	f000 f966 	bl	9936 <_ZN4core3ptr4read17h27a035d1812d8297E>
    966a:	9000      	str	r0, [sp, #0]
    966c:	e7ff      	b.n	966e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E+0xe>
    966e:	9800      	ldr	r0, [sp, #0]
    9670:	b002      	add	sp, #8
    9672:	bd80      	pop	{r7, pc}

00009674 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>:
    9674:	b084      	sub	sp, #16
    9676:	9001      	str	r0, [sp, #4]
    9678:	9102      	str	r1, [sp, #8]
    967a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    967e:	9003      	str	r0, [sp, #12]
    9680:	9803      	ldr	r0, [sp, #12]
    9682:	9000      	str	r0, [sp, #0]
    9684:	e7ff      	b.n	9686 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE+0x12>
    9686:	9800      	ldr	r0, [sp, #0]
    9688:	b004      	add	sp, #16
    968a:	4770      	bx	lr

0000968c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>:
    968c:	b082      	sub	sp, #8
    968e:	9001      	str	r0, [sp, #4]
    9690:	9000      	str	r0, [sp, #0]
    9692:	e7ff      	b.n	9694 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E+0x8>
    9694:	9800      	ldr	r0, [sp, #0]
    9696:	fab0 f180 	clz	r1, r0
    969a:	0948      	lsrs	r0, r1, #5
    969c:	b002      	add	sp, #8
    969e:	4770      	bx	lr

000096a0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>:
    baudrate:   8000,  //  In kHZ. Use SPI at 8MHz (the fastest clock available on the nRF52832) because otherwise refreshing will be super slow.
    word_size:  hal::HAL_SPI_WORD_SIZE_8BIT as u8,
};

/// Initialise the display controller
pub fn start_display() -> MynewtResult<()> {
    96a0:	b5b0      	push	{r4, r5, r7, lr}
    96a2:	b0b2      	sub	sp, #200	; 0xc8
    //  Create SPI port and GPIO pins
    let mut spi_port = mynewt::SPI::new();
    96a4:	f00a f85f 	bl	13766 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>
    96a8:	9115      	str	r1, [sp, #84]	; 0x54
    96aa:	9014      	str	r0, [sp, #80]	; 0x50
    96ac:	e7ff      	b.n	96ae <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe>
    let mut dc_gpio =  mynewt::GPIO::new();
    96ae:	f00a fa18 	bl	13ae2 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    96b2:	9016      	str	r0, [sp, #88]	; 0x58
    96b4:	e7ff      	b.n	96b6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16>
    let mut rst_gpio = mynewt::GPIO::new();
    96b6:	f00a fa14 	bl	13ae2 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    96ba:	9017      	str	r0, [sp, #92]	; 0x5c
    96bc:	e7ff      	b.n	96be <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e>

    //  Init SPI port and GPIO pins
    spi_port.init(
    96be:	f240 03e8 	movw	r3, #232	; 0xe8
    96c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    96c6:	a814      	add	r0, sp, #80	; 0x50
    96c8:	2100      	movs	r1, #0
    96ca:	2219      	movs	r2, #25
    96cc:	f00a f853 	bl	13776 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>
    96d0:	9012      	str	r0, [sp, #72]	; 0x48
    96d2:	e7ff      	b.n	96d4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x34>
    96d4:	9812      	ldr	r0, [sp, #72]	; 0x48
    96d6:	f7ff fb32 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    96da:	9018      	str	r0, [sp, #96]	; 0x60
    96dc:	e7ff      	b.n	96de <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x3e>
        DISPLAY_SPI, //  Mynewt SPI port 0
        DISPLAY_CS,  //  LCD_CS (P0.25): Chip select
        unsafe { &mut SPI_SETTINGS }
    ) ? ;
    96de:	9818      	ldr	r0, [sp, #96]	; 0x60
    96e0:	1e41      	subs	r1, r0, #1
    96e2:	bf18      	it	ne
    96e4:	2101      	movne	r1, #1
    96e6:	2801      	cmp	r0, #1
    96e8:	d001      	beq.n	96ee <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4e>
    96ea:	e7ff      	b.n	96ec <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4c>
    96ec:	e006      	b.n	96fc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x5c>
    96ee:	a816      	add	r0, sp, #88	; 0x58
    96f0:	2112      	movs	r1, #18
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    96f2:	f00a f9f8 	bl	13ae6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    96f6:	9011      	str	r0, [sp, #68]	; 0x44
    96f8:	e010      	b.n	971c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7c>
    spi_port.init(
    96fa:	defe      	udf	#254	; 0xfe
    ) ? ;
    96fc:	9818      	ldr	r0, [sp, #96]	; 0x60
    96fe:	902d      	str	r0, [sp, #180]	; 0xb4
    9700:	f008 fc30 	bl	11f64 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9704:	9010      	str	r0, [sp, #64]	; 0x40
    9706:	e002      	b.n	970e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x6e>
    unsafe {
        DISPLAY.init(&mut delay) ? ;
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    }
    Ok(())
}
    9708:	9813      	ldr	r0, [sp, #76]	; 0x4c
    970a:	b032      	add	sp, #200	; 0xc8
    970c:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;
    970e:	9810      	ldr	r0, [sp, #64]	; 0x40
    9710:	f7ff fb09 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9714:	9013      	str	r0, [sp, #76]	; 0x4c
    9716:	e7ff      	b.n	9718 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x78>
    9718:	e7ff      	b.n	971a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    971a:	e7f5      	b.n	9708 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    971c:	9811      	ldr	r0, [sp, #68]	; 0x44
    971e:	f7ff fb0e 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9722:	9019      	str	r0, [sp, #100]	; 0x64
    9724:	e7ff      	b.n	9726 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x86>
    9726:	9819      	ldr	r0, [sp, #100]	; 0x64
    9728:	1e41      	subs	r1, r0, #1
    972a:	bf18      	it	ne
    972c:	2101      	movne	r1, #1
    972e:	2801      	cmp	r0, #1
    9730:	d001      	beq.n	9736 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x96>
    9732:	e7ff      	b.n	9734 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x94>
    9734:	e006      	b.n	9744 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xa4>
    9736:	a817      	add	r0, sp, #92	; 0x5c
    9738:	211a      	movs	r1, #26
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    973a:	f00a f9d4 	bl	13ae6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    973e:	900f      	str	r0, [sp, #60]	; 0x3c
    9740:	e00c      	b.n	975c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xbc>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    9742:	defe      	udf	#254	; 0xfe
    9744:	9819      	ldr	r0, [sp, #100]	; 0x64
    9746:	902e      	str	r0, [sp, #184]	; 0xb8
    9748:	f008 fc0c 	bl	11f64 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    974c:	900e      	str	r0, [sp, #56]	; 0x38
    974e:	e7ff      	b.n	9750 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xb0>
    9750:	980e      	ldr	r0, [sp, #56]	; 0x38
    9752:	f7ff fae8 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9756:	9013      	str	r0, [sp, #76]	; 0x4c
    9758:	e7ff      	b.n	975a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xba>
    975a:	e7de      	b.n	971a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    975c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    975e:	f7ff faee 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9762:	901a      	str	r0, [sp, #104]	; 0x68
    9764:	e7ff      	b.n	9766 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xc6>
    9766:	981a      	ldr	r0, [sp, #104]	; 0x68
    9768:	1e41      	subs	r1, r0, #1
    976a:	bf18      	it	ne
    976c:	2101      	movne	r1, #1
    976e:	2801      	cmp	r0, #1
    9770:	d001      	beq.n	9776 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd6>
    9772:	e7ff      	b.n	9774 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd4>
    9774:	e004      	b.n	9780 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe0>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    9776:	f00a f9b4 	bl	13ae2 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    977a:	900d      	str	r0, [sp, #52]	; 0x34
    977c:	e00c      	b.n	9798 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf8>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    977e:	defe      	udf	#254	; 0xfe
    9780:	981a      	ldr	r0, [sp, #104]	; 0x68
    9782:	902f      	str	r0, [sp, #188]	; 0xbc
    9784:	f008 fbee 	bl	11f64 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9788:	900c      	str	r0, [sp, #48]	; 0x30
    978a:	e7ff      	b.n	978c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xec>
    978c:	980c      	ldr	r0, [sp, #48]	; 0x30
    978e:	f7ff faca 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9792:	9013      	str	r0, [sp, #76]	; 0x4c
    9794:	e7ff      	b.n	9796 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf6>
    9796:	e7c0      	b.n	971a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    9798:	f240 1060 	movw	r0, #352	; 0x160
    979c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    97a0:	990d      	ldr	r1, [sp, #52]	; 0x34
    97a2:	6001      	str	r1, [r0, #0]
    97a4:	2117      	movs	r1, #23
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    97a6:	f00a f99e 	bl	13ae6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    97aa:	900b      	str	r0, [sp, #44]	; 0x2c
    97ac:	e7ff      	b.n	97ae <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x10e>
    97ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
    97b0:	f7ff fac5 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    97b4:	901b      	str	r0, [sp, #108]	; 0x6c
    97b6:	e7ff      	b.n	97b8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x118>
    97b8:	981b      	ldr	r0, [sp, #108]	; 0x6c
    97ba:	1e41      	subs	r1, r0, #1
    97bc:	bf18      	it	ne
    97be:	2101      	movne	r1, #1
    97c0:	2801      	cmp	r0, #1
    97c2:	d001      	beq.n	97c8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x128>
    97c4:	e7ff      	b.n	97c6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x126>
    97c6:	e008      	b.n	97da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x13a>
        BACKLIGHT_HIGH.set_low() ? ;    
    97c8:	f240 1060 	movw	r0, #352	; 0x160
    97cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    97d0:	f00a fa22 	bl	13c18 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    97d4:	900a      	str	r0, [sp, #40]	; 0x28
    97d6:	e00d      	b.n	97f4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x154>
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    97d8:	defe      	udf	#254	; 0xfe
    97da:	981b      	ldr	r0, [sp, #108]	; 0x6c
    97dc:	9030      	str	r0, [sp, #192]	; 0xc0
    97de:	f008 fbc1 	bl	11f64 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    97e2:	9009      	str	r0, [sp, #36]	; 0x24
    97e4:	e7ff      	b.n	97e6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x146>
    97e6:	9809      	ldr	r0, [sp, #36]	; 0x24
    97e8:	f7ff fa9d 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    97ec:	9013      	str	r0, [sp, #76]	; 0x4c
    97ee:	e7ff      	b.n	97f0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x150>
    97f0:	e7ff      	b.n	97f2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    97f2:	e792      	b.n	971a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH.set_low() ? ;    
    97f4:	980a      	ldr	r0, [sp, #40]	; 0x28
    97f6:	f7ff faa2 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    97fa:	901c      	str	r0, [sp, #112]	; 0x70
    97fc:	e7ff      	b.n	97fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x15e>
    97fe:	981c      	ldr	r0, [sp, #112]	; 0x70
    9800:	1e41      	subs	r1, r0, #1
    9802:	bf18      	it	ne
    9804:	2101      	movne	r1, #1
    9806:	2801      	cmp	r0, #1
    9808:	d001      	beq.n	980e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16e>
    980a:	e7ff      	b.n	980c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16c>
    980c:	e011      	b.n	9832 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x192>
        spi_port,    //  SPI Port
    980e:	9914      	ldr	r1, [sp, #80]	; 0x50
    9810:	9a15      	ldr	r2, [sp, #84]	; 0x54
        dc_gpio,     //  GPIO Pin for DC
    9812:	9b16      	ldr	r3, [sp, #88]	; 0x58
        rst_gpio,    //  GPIO Pin for RST
    9814:	9817      	ldr	r0, [sp, #92]	; 0x5c
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    9816:	46ec      	mov	ip, sp
    9818:	f04f 0e01 	mov.w	lr, #1
    981c:	f8cc e008 	str.w	lr, [ip, #8]
    9820:	f8cc e004 	str.w	lr, [ip, #4]
    9824:	f8cc 0000 	str.w	r0, [ip]
    9828:	a81d      	add	r0, sp, #116	; 0x74
    982a:	f000 fb92 	bl	9f52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>
    982e:	e00c      	b.n	984a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1aa>
        BACKLIGHT_HIGH.set_low() ? ;    
    9830:	defe      	udf	#254	; 0xfe
    9832:	981c      	ldr	r0, [sp, #112]	; 0x70
    9834:	9031      	str	r0, [sp, #196]	; 0xc4
    9836:	f008 fb95 	bl	11f64 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    983a:	9008      	str	r0, [sp, #32]
    983c:	e7ff      	b.n	983e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x19e>
    983e:	9808      	ldr	r0, [sp, #32]
    9840:	f7ff fa71 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9844:	9013      	str	r0, [sp, #76]	; 0x4c
    9846:	e7ff      	b.n	9848 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1a8>
    9848:	e7d3      	b.n	97f2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    984a:	f240 1048 	movw	r0, #328	; 0x148
    984e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9852:	a91d      	add	r1, sp, #116	; 0x74
    9854:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    9858:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    let mut delay = mynewt::Delay::new();
    985c:	f00a f9f2 	bl	13c44 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>
    9860:	e7ff      	b.n	9862 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1c2>
        DISPLAY.init(&mut delay) ? ;
    9862:	f240 1048 	movw	r0, #328	; 0x148
    9866:	f2c2 0000 	movt	r0, #8192	; 0x2000
    986a:	a923      	add	r1, sp, #140	; 0x8c
    986c:	f000 fb93 	bl	9f96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>
    9870:	9007      	str	r0, [sp, #28]
    9872:	e7ff      	b.n	9874 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1d4>
    9874:	9807      	ldr	r0, [sp, #28]
    9876:	f000 0001 	and.w	r0, r0, #1
    987a:	f7ff fa5a 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    987e:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
    9882:	e7ff      	b.n	9884 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e4>
    9884:	f89d 008e 	ldrb.w	r0, [sp, #142]	; 0x8e
    9888:	07c1      	lsls	r1, r0, #31
    988a:	2900      	cmp	r1, #0
    988c:	d001      	beq.n	9892 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f2>
    988e:	e7ff      	b.n	9890 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f0>
    9890:	e00d      	b.n	98ae <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x20e>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    9892:	f64b 3014 	movw	r0, #47892	; 0xbb14
    9896:	f2c0 0001 	movt	r0, #1
    989a:	6801      	ldr	r1, [r0, #0]
    989c:	f240 1048 	movw	r0, #328	; 0x148
    98a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    98a4:	f000 f98c 	bl	9bc0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>
    98a8:	9006      	str	r0, [sp, #24]
    98aa:	e00b      	b.n	98c4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x224>
        DISPLAY.init(&mut delay) ? ;
    98ac:	defe      	udf	#254	; 0xfe
    98ae:	f7ff f9cd 	bl	8c4c <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    98b2:	9005      	str	r0, [sp, #20]
    98b4:	e7ff      	b.n	98b6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x216>
    98b6:	9805      	ldr	r0, [sp, #20]
    98b8:	f7ff fa35 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    98bc:	9013      	str	r0, [sp, #76]	; 0x4c
    98be:	e7ff      	b.n	98c0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x220>
    98c0:	e7ff      	b.n	98c2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>
    98c2:	e72a      	b.n	971a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    98c4:	9806      	ldr	r0, [sp, #24]
    98c6:	f000 0001 	and.w	r0, r0, #1
    98ca:	f7ff fa32 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    98ce:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
    98d2:	e7ff      	b.n	98d4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x234>
    98d4:	f89d 008f 	ldrb.w	r0, [sp, #143]	; 0x8f
    98d8:	07c1      	lsls	r1, r0, #31
    98da:	2900      	cmp	r1, #0
    98dc:	d001      	beq.n	98e2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x242>
    98de:	e7ff      	b.n	98e0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x240>
    98e0:	e005      	b.n	98ee <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x24e>
    98e2:	2000      	movs	r0, #0
    Ok(())
    98e4:	9013      	str	r0, [sp, #76]	; 0x4c
    98e6:	2001      	movs	r0, #1
    98e8:	9013      	str	r0, [sp, #76]	; 0x4c
}
    98ea:	e70d      	b.n	9708 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    98ec:	defe      	udf	#254	; 0xfe
    98ee:	f7ff f9ad 	bl	8c4c <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    98f2:	9004      	str	r0, [sp, #16]
    98f4:	e7ff      	b.n	98f6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x256>
    98f6:	9804      	ldr	r0, [sp, #16]
    98f8:	f7ff fa15 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    98fc:	9013      	str	r0, [sp, #76]	; 0x4c
    98fe:	e7ff      	b.n	9900 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x260>
    9900:	e7df      	b.n	98c2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>

00009902 <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>:
    9902:	b086      	sub	sp, #24
    9904:	9004      	str	r0, [sp, #16]
    9906:	9105      	str	r1, [sp, #20]
    9908:	9002      	str	r0, [sp, #8]
    990a:	9103      	str	r1, [sp, #12]
    990c:	9802      	ldr	r0, [sp, #8]
    990e:	9903      	ldr	r1, [sp, #12]
    9910:	9000      	str	r0, [sp, #0]
    9912:	9101      	str	r1, [sp, #4]
    9914:	9800      	ldr	r0, [sp, #0]
    9916:	9901      	ldr	r1, [sp, #4]
    9918:	b006      	add	sp, #24
    991a:	4770      	bx	lr

0000991c <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>:
    991c:	b086      	sub	sp, #24
    991e:	9004      	str	r0, [sp, #16]
    9920:	9105      	str	r1, [sp, #20]
    9922:	9002      	str	r0, [sp, #8]
    9924:	9103      	str	r1, [sp, #12]
    9926:	9802      	ldr	r0, [sp, #8]
    9928:	9903      	ldr	r1, [sp, #12]
    992a:	9000      	str	r0, [sp, #0]
    992c:	9101      	str	r1, [sp, #4]
    992e:	9800      	ldr	r0, [sp, #0]
    9930:	9901      	ldr	r1, [sp, #4]
    9932:	b006      	add	sp, #24
    9934:	4770      	bx	lr

00009936 <_ZN4core3ptr4read17h27a035d1812d8297E>:
    9936:	b580      	push	{r7, lr}
    9938:	b088      	sub	sp, #32
    993a:	9003      	str	r0, [sp, #12]
    993c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    9940:	f8ad 100a 	strh.w	r1, [sp, #10]
    9944:	9001      	str	r0, [sp, #4]
    9946:	e7ff      	b.n	9948 <_ZN4core3ptr4read17h27a035d1812d8297E+0x12>
    9948:	f10d 000a 	add.w	r0, sp, #10
    994c:	9006      	str	r0, [sp, #24]
    994e:	9007      	str	r0, [sp, #28]
    9950:	e7ff      	b.n	9952 <_ZN4core3ptr4read17h27a035d1812d8297E+0x1c>
    9952:	f10d 010a 	add.w	r1, sp, #10
    9956:	2201      	movs	r2, #1
    9958:	9801      	ldr	r0, [sp, #4]
    995a:	f00a fad7 	bl	13f0c <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>
    995e:	e7ff      	b.n	9960 <_ZN4core3ptr4read17h27a035d1812d8297E+0x2a>
    9960:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    9964:	4601      	mov	r1, r0
    9966:	f8ad 0014 	strh.w	r0, [sp, #20]
    996a:	f8ad 0016 	strh.w	r0, [sp, #22]
    996e:	9100      	str	r1, [sp, #0]
    9970:	e7ff      	b.n	9972 <_ZN4core3ptr4read17h27a035d1812d8297E+0x3c>
    9972:	9800      	ldr	r0, [sp, #0]
    9974:	b008      	add	sp, #32
    9976:	bd80      	pop	{r7, pc}

00009978 <_ZN4core3ptr5write17h147d4643d861e927E>:
    9978:	b082      	sub	sp, #8
    997a:	460a      	mov	r2, r1
    997c:	9000      	str	r0, [sp, #0]
    997e:	f8ad 1006 	strh.w	r1, [sp, #6]
    9982:	8001      	strh	r1, [r0, #0]
    9984:	b002      	add	sp, #8
    9986:	4770      	bx	lr

00009988 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>:
    }

    /// Converts the value of `self` to a `u8`. If the value cannot be
    /// represented by a `u8`, then `None` is returned.
    #[inline]
    fn to_u8(&self) -> Option<u8> {
    9988:	b580      	push	{r7, lr}
    998a:	b08a      	sub	sp, #40	; 0x28
    998c:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    998e:	f001 fa3a 	bl	ae06 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>
    9992:	9307      	str	r3, [sp, #28]
    9994:	9206      	str	r2, [sp, #24]
    9996:	9105      	str	r1, [sp, #20]
    9998:	9004      	str	r0, [sp, #16]
    999a:	e7ff      	b.n	999c <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x14>
    999c:	a804      	add	r0, sp, #16
    999e:	f00a f9df 	bl	13d60 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    99a2:	9003      	str	r0, [sp, #12]
    99a4:	e7ff      	b.n	99a6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x1e>
    99a6:	9803      	ldr	r0, [sp, #12]
    99a8:	f00a fa50 	bl	13e4c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    99ac:	9002      	str	r0, [sp, #8]
    99ae:	9101      	str	r1, [sp, #4]
    99b0:	e7ff      	b.n	99b2 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x2a>
    }
    99b2:	9802      	ldr	r0, [sp, #8]
    99b4:	f000 0001 	and.w	r0, r0, #1
    99b8:	9901      	ldr	r1, [sp, #4]
    99ba:	b00a      	add	sp, #40	; 0x28
    99bc:	bd80      	pop	{r7, pc}

000099be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>:
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }

    pub fn hard_reset(&mut self) -> Result<(), ()>
    99be:	b580      	push	{r7, lr}
    99c0:	b090      	sub	sp, #64	; 0x40
    99c2:	900b      	str	r0, [sp, #44]	; 0x2c
    {
        self.rst.set_high().map_err(|_| ())?;
    99c4:	f100 010c 	add.w	r1, r0, #12
    99c8:	9006      	str	r0, [sp, #24]
    99ca:	4608      	mov	r0, r1
    99cc:	f00a f92f 	bl	13c2e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    99d0:	9005      	str	r0, [sp, #20]
    99d2:	e7ff      	b.n	99d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x16>
    99d4:	9805      	ldr	r0, [sp, #20]
    99d6:	f00a fb7a 	bl	140ce <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>
    99da:	9004      	str	r0, [sp, #16]
    99dc:	e7ff      	b.n	99de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x20>
    99de:	9804      	ldr	r0, [sp, #16]
    99e0:	f000 0001 	and.w	r0, r0, #1
    99e4:	f7ff f9a5 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    99e8:	f88d 001f 	strb.w	r0, [sp, #31]
    99ec:	e7ff      	b.n	99ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x30>
    99ee:	f89d 001f 	ldrb.w	r0, [sp, #31]
    99f2:	07c1      	lsls	r1, r0, #31
    99f4:	2900      	cmp	r1, #0
    99f6:	d001      	beq.n	99fc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3e>
    99f8:	e7ff      	b.n	99fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3c>
    99fa:	e006      	b.n	9a0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x4c>
        self.rst.set_low().map_err(|_| ())?;
    99fc:	9806      	ldr	r0, [sp, #24]
    99fe:	300c      	adds	r0, #12
    9a00:	f00a f90a 	bl	13c18 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    9a04:	9003      	str	r0, [sp, #12]
    9a06:	e00d      	b.n	9a24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x66>
        self.rst.set_high().map_err(|_| ())?;
    9a08:	defe      	udf	#254	; 0xfe
    9a0a:	f007 fe80 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9a0e:	e003      	b.n	9a18 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x5a>
        self.rst.set_high().map_err(|_| ())
    }
    9a10:	f89d 001e 	ldrb.w	r0, [sp, #30]
    9a14:	b010      	add	sp, #64	; 0x40
    9a16:	bd80      	pop	{r7, pc}
        self.rst.set_high().map_err(|_| ())?;
    9a18:	f00a fbae 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9a1c:	f88d 001e 	strb.w	r0, [sp, #30]
    9a20:	e7ff      	b.n	9a22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x64>
    9a22:	e7f5      	b.n	9a10 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_low().map_err(|_| ())?;
    9a24:	9803      	ldr	r0, [sp, #12]
    9a26:	f00a fafd 	bl	14024 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>
    9a2a:	9002      	str	r0, [sp, #8]
    9a2c:	e7ff      	b.n	9a2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x70>
    9a2e:	9802      	ldr	r0, [sp, #8]
    9a30:	f000 0001 	and.w	r0, r0, #1
    9a34:	f7ff f97d 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9a38:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    9a3c:	e7ff      	b.n	9a3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x80>
    9a3e:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    9a42:	07c1      	lsls	r1, r0, #31
    9a44:	2900      	cmp	r1, #0
    9a46:	d001      	beq.n	9a4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8e>
    9a48:	e7ff      	b.n	9a4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8c>
    9a4a:	e006      	b.n	9a5a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x9c>
        self.rst.set_high().map_err(|_| ())
    9a4c:	9806      	ldr	r0, [sp, #24]
    9a4e:	300c      	adds	r0, #12
    9a50:	f00a f8ed 	bl	13c2e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    9a54:	9001      	str	r0, [sp, #4]
    9a56:	e009      	b.n	9a6c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xae>
        self.rst.set_low().map_err(|_| ())?;
    9a58:	defe      	udf	#254	; 0xfe
    9a5a:	f007 fe58 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9a5e:	e7ff      	b.n	9a60 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xa2>
    9a60:	f00a fb8a 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9a64:	f88d 001e 	strb.w	r0, [sp, #30]
    9a68:	e7ff      	b.n	9a6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xac>
    9a6a:	e7d1      	b.n	9a10 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_high().map_err(|_| ())
    9a6c:	9801      	ldr	r0, [sp, #4]
    9a6e:	f00a fa84 	bl	13f7a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>
    9a72:	f88d 001e 	strb.w	r0, [sp, #30]
    9a76:	e7ff      	b.n	9a78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xba>
    }
    9a78:	e7ca      	b.n	9a10 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>

00009a7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>:
        self.rst.set_low().map_err(|_| ())?;
    9a7a:	b082      	sub	sp, #8
    9a7c:	9001      	str	r0, [sp, #4]
    9a7e:	e7ff      	b.n	9a80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE+0x6>
    9a80:	b002      	add	sp, #8
    9a82:	4770      	bx	lr

00009a84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>:
        self.rst.set_high().map_err(|_| ())?;
    9a84:	b082      	sub	sp, #8
    9a86:	9001      	str	r0, [sp, #4]
    9a88:	e7ff      	b.n	9a8a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE+0x6>
    9a8a:	b002      	add	sp, #8
    9a8c:	4770      	bx	lr

00009a8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>:
        self.rst.set_high().map_err(|_| ())
    9a8e:	b082      	sub	sp, #8
    9a90:	9001      	str	r0, [sp, #4]
    9a92:	e7ff      	b.n	9a94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE+0x6>
    9a94:	b002      	add	sp, #8
    9a96:	4770      	bx	lr

00009a98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>:
        }
        Ok(())
    }

    #[cfg(feature = "noblock_spi")]  //  If non-blocking SPI is enabled...
    fn write_data(&mut self, data: &[u8]) -> Result<(), ()> {
    9a98:	b580      	push	{r7, lr}
    9a9a:	b084      	sub	sp, #16
    9a9c:	9001      	str	r0, [sp, #4]
    9a9e:	9102      	str	r1, [sp, #8]
    9aa0:	9203      	str	r2, [sp, #12]
        //  Write the data bytes,
        mynewt::spi::spi_noblock_write_data(
    9aa2:	4608      	mov	r0, r1
    9aa4:	4611      	mov	r1, r2
    9aa6:	f009 f8b7 	bl	12c18 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9aaa:	9000      	str	r0, [sp, #0]
    9aac:	e7ff      	b.n	9aae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x16>
    9aae:	f64b 3174 	movw	r1, #47988	; 0xbb74
    9ab2:	f2c0 0101 	movt	r1, #1
    9ab6:	f64b 3384 	movw	r3, #48004	; 0xbb84
    9aba:	f2c0 0301 	movt	r3, #1
    9abe:	220d      	movs	r2, #13
    9ac0:	9800      	ldr	r0, [sp, #0]
    9ac2:	f7ff f8fd 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9ac6:	e7ff      	b.n	9ac8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x30>
    9ac8:	2000      	movs	r0, #0
            data
        ).expect("spi data fail");
        Ok(())
    }
    9aca:	b004      	add	sp, #16
    9acc:	bd80      	pop	{r7, pc}

00009ace <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>:
        self.dc.set_high().map_err(|_| ())?;
        self.spi.write(data).map_err(|_| ())
    }

    /// Writes a data word to the display.
    fn write_word(&mut self, value: u16) -> Result<(), ()> {
    9ace:	b580      	push	{r7, lr}
    9ad0:	b088      	sub	sp, #32
    9ad2:	460a      	mov	r2, r1
    9ad4:	9006      	str	r0, [sp, #24]
    9ad6:	f8ad 101e 	strh.w	r1, [sp, #30]
        let bytes: [u8; 2] = unsafe { transmute(value.to_be()) };
    9ada:	9004      	str	r0, [sp, #16]
    9adc:	4608      	mov	r0, r1
    9ade:	9203      	str	r2, [sp, #12]
    9ae0:	f000 fe08 	bl	a6f4 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>
    9ae4:	9002      	str	r0, [sp, #8]
    9ae6:	e7ff      	b.n	9ae8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x1a>
    9ae8:	9802      	ldr	r0, [sp, #8]
    9aea:	f8ad 0016 	strh.w	r0, [sp, #22]
    9aee:	e7ff      	b.n	9af0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x22>
    9af0:	f10d 0116 	add.w	r1, sp, #22
    9af4:	2202      	movs	r2, #2
        self.write_data(&bytes)
    9af6:	9804      	ldr	r0, [sp, #16]
    9af8:	f7ff ffce 	bl	9a98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>
    9afc:	9001      	str	r0, [sp, #4]
    9afe:	e7ff      	b.n	9b00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x32>
    }
    9b00:	9801      	ldr	r0, [sp, #4]
    9b02:	f000 0001 	and.w	r0, r0, #1
    9b06:	b008      	add	sp, #32
    9b08:	bd80      	pop	{r7, pc}

00009b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>:
    fn write_command(&mut self, command: Instruction, params: Option<&[u8]>) -> Result<(), ()> {
    9b0a:	b580      	push	{r7, lr}
    9b0c:	b08e      	sub	sp, #56	; 0x38
    9b0e:	468c      	mov	ip, r1
    9b10:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
    9b14:	920b      	str	r2, [sp, #44]	; 0x2c
    9b16:	930c      	str	r3, [sp, #48]	; 0x30
    9b18:	900d      	str	r0, [sp, #52]	; 0x34
    9b1a:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
            command.to_u8().unwrap()
    9b1e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    9b22:	f000 fdbd 	bl	a6a0 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>
    9b26:	9008      	str	r0, [sp, #32]
    9b28:	9107      	str	r1, [sp, #28]
    9b2a:	e7ff      	b.n	9b2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x22>
    9b2c:	9808      	ldr	r0, [sp, #32]
    9b2e:	f000 0001 	and.w	r0, r0, #1
    9b32:	f64b 3294 	movw	r2, #48020	; 0xbb94
    9b36:	f2c0 0201 	movt	r2, #1
    9b3a:	9907      	ldr	r1, [sp, #28]
    9b3c:	f00a f925 	bl	13d8a <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9b40:	9006      	str	r0, [sp, #24]
    9b42:	e7ff      	b.n	9b44 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x3a>
        mynewt::spi::spi_noblock_write_command(
    9b44:	9806      	ldr	r0, [sp, #24]
    9b46:	f009 f81f 	bl	12b88 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>
    9b4a:	9005      	str	r0, [sp, #20]
    9b4c:	e7ff      	b.n	9b4e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x44>
    9b4e:	f64b 31a4 	movw	r1, #48036	; 0xbba4
    9b52:	f2c0 0101 	movt	r1, #1
    9b56:	f64b 33b0 	movw	r3, #48048	; 0xbbb0
    9b5a:	f2c0 0301 	movt	r3, #1
    9b5e:	220c      	movs	r2, #12
    9b60:	9805      	ldr	r0, [sp, #20]
    9b62:	f7ff f8ad 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9b66:	e7ff      	b.n	9b68 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x5e>
    9b68:	a80b      	add	r0, sp, #44	; 0x2c
        if params.is_some() {
    9b6a:	f00a f95d 	bl	13e28 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>
    9b6e:	9004      	str	r0, [sp, #16]
    9b70:	e7ff      	b.n	9b72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x68>
    9b72:	9804      	ldr	r0, [sp, #16]
    9b74:	07c1      	lsls	r1, r0, #31
    9b76:	2900      	cmp	r1, #0
    9b78:	d01f      	beq.n	9bba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9b7a:	e7ff      	b.n	9b7c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x72>
                params.unwrap()
    9b7c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9b7e:	990c      	ldr	r1, [sp, #48]	; 0x30
    9b80:	f64b 32c0 	movw	r2, #48064	; 0xbbc0
    9b84:	f2c0 0201 	movt	r2, #1
    9b88:	f00a f928 	bl	13ddc <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>
    9b8c:	9003      	str	r0, [sp, #12]
    9b8e:	9102      	str	r1, [sp, #8]
    9b90:	e7ff      	b.n	9b92 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x88>
            mynewt::spi::spi_noblock_write_data(
    9b92:	9803      	ldr	r0, [sp, #12]
    9b94:	9902      	ldr	r1, [sp, #8]
    9b96:	f009 f83f 	bl	12c18 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9b9a:	9001      	str	r0, [sp, #4]
    9b9c:	e7ff      	b.n	9b9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x94>
    9b9e:	f64b 3174 	movw	r1, #47988	; 0xbb74
    9ba2:	f2c0 0101 	movt	r1, #1
    9ba6:	f64b 33d0 	movw	r3, #48080	; 0xbbd0
    9baa:	f2c0 0301 	movt	r3, #1
    9bae:	220d      	movs	r2, #13
    9bb0:	9801      	ldr	r0, [sp, #4]
    9bb2:	f7ff f885 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9bb6:	e7ff      	b.n	9bb8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xae>
        if params.is_some() {
    9bb8:	e7ff      	b.n	9bba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9bba:	2000      	movs	r0, #0
    }
    9bbc:	b00e      	add	sp, #56	; 0x38
    9bbe:	bd80      	pop	{r7, pc}

00009bc0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>:

    pub fn set_orientation(&mut self, orientation: &Orientation) -> Result<(), ()> {
    9bc0:	b580      	push	{r7, lr}
    9bc2:	b098      	sub	sp, #96	; 0x60
    9bc4:	9012      	str	r0, [sp, #72]	; 0x48
    9bc6:	9113      	str	r1, [sp, #76]	; 0x4c
        if self.rgb {
    9bc8:	7d02      	ldrb	r2, [r0, #20]
    9bca:	07d2      	lsls	r2, r2, #31
    9bcc:	2a00      	cmp	r2, #0
    9bce:	910a      	str	r1, [sp, #40]	; 0x28
    9bd0:	9009      	str	r0, [sp, #36]	; 0x24
    9bd2:	d109      	bne.n	9be8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x28>
    9bd4:	e7ff      	b.n	9bd6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x16>
    9bd6:	2036      	movs	r0, #54	; 0x36
            self.write_command(
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
            ))?;
        } else {
            self.write_command(
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9bd8:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    9bdc:	980a      	ldr	r0, [sp, #40]	; 0x28
    9bde:	f7ff fed3 	bl	9988 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9be2:	9008      	str	r0, [sp, #32]
    9be4:	9107      	str	r1, [sp, #28]
    9be6:	e044      	b.n	9c72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb2>
    9be8:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
    9bea:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    9bee:	980a      	ldr	r0, [sp, #40]	; 0x28
    9bf0:	f7ff feca 	bl	9988 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9bf4:	9006      	str	r0, [sp, #24]
    9bf6:	9105      	str	r1, [sp, #20]
    9bf8:	e7ff      	b.n	9bfa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x3a>
    9bfa:	9806      	ldr	r0, [sp, #24]
    9bfc:	f000 0001 	and.w	r0, r0, #1
    9c00:	f64b 32e0 	movw	r2, #48096	; 0xbbe0
    9c04:	f2c0 0201 	movt	r2, #1
    9c08:	9905      	ldr	r1, [sp, #20]
    9c0a:	f00a f8be 	bl	13d8a <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9c0e:	9004      	str	r0, [sp, #16]
    9c10:	e7ff      	b.n	9c12 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x52>
    9c12:	9804      	ldr	r0, [sp, #16]
    9c14:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9c18:	f10d 0139 	add.w	r1, sp, #57	; 0x39
    9c1c:	910c      	str	r1, [sp, #48]	; 0x30
    9c1e:	2101      	movs	r1, #1
    9c20:	910d      	str	r1, [sp, #52]	; 0x34
            self.write_command(
    9c22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9c24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9c26:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    9c2a:	9809      	ldr	r0, [sp, #36]	; 0x24
    9c2c:	f7ff ff6d 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9c30:	9003      	str	r0, [sp, #12]
    9c32:	e7ff      	b.n	9c34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x74>
    9c34:	9803      	ldr	r0, [sp, #12]
    9c36:	f000 0001 	and.w	r0, r0, #1
    9c3a:	f7ff f87a 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9c3e:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    9c42:	e7ff      	b.n	9c44 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x84>
            ))?;
    9c44:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    9c48:	07c1      	lsls	r1, r0, #31
    9c4a:	2900      	cmp	r1, #0
    9c4c:	d001      	beq.n	9c52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x92>
    9c4e:	e7ff      	b.n	9c50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x90>
    9c50:	e001      	b.n	9c56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x96>
        if self.rgb {
    9c52:	e047      	b.n	9ce4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9c54:	defe      	udf	#254	; 0xfe
            ))?;
    9c56:	f007 fd5a 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9c5a:	e003      	b.n	9c64 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xa4>
            ))?;
        }
        Ok(())
    }
    9c5c:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    9c60:	b018      	add	sp, #96	; 0x60
    9c62:	bd80      	pop	{r7, pc}
            ))?;
    9c64:	f00a fa88 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9c68:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9c6c:	e7ff      	b.n	9c6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xae>
    9c6e:	e7ff      	b.n	9c70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9c70:	e7f4      	b.n	9c5c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9c72:	9808      	ldr	r0, [sp, #32]
    9c74:	f000 0001 	and.w	r0, r0, #1
    9c78:	f64b 32f0 	movw	r2, #48112	; 0xbbf0
    9c7c:	f2c0 0201 	movt	r2, #1
    9c80:	9907      	ldr	r1, [sp, #28]
    9c82:	f00a f882 	bl	13d8a <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9c86:	9002      	str	r0, [sp, #8]
    9c88:	e7ff      	b.n	9c8a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xca>
    9c8a:	9802      	ldr	r0, [sp, #8]
    9c8c:	f040 0108 	orr.w	r1, r0, #8
    9c90:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    9c94:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    9c98:	910f      	str	r1, [sp, #60]	; 0x3c
    9c9a:	2101      	movs	r1, #1
    9c9c:	9110      	str	r1, [sp, #64]	; 0x40
            self.write_command(
    9c9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9ca0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9ca2:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9ca6:	9809      	ldr	r0, [sp, #36]	; 0x24
    9ca8:	f7ff ff2f 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9cac:	9001      	str	r0, [sp, #4]
    9cae:	e7ff      	b.n	9cb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xf0>
    9cb0:	9801      	ldr	r0, [sp, #4]
    9cb2:	f000 0001 	and.w	r0, r0, #1
    9cb6:	f7ff f83c 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9cba:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9cbe:	e7ff      	b.n	9cc0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x100>
            ))?;
    9cc0:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9cc4:	07c1      	lsls	r1, r0, #31
    9cc6:	2900      	cmp	r1, #0
    9cc8:	d001      	beq.n	9cce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10e>
    9cca:	e7ff      	b.n	9ccc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10c>
    9ccc:	e001      	b.n	9cd2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x112>
        if self.rgb {
    9cce:	e009      	b.n	9ce4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9cd0:	defe      	udf	#254	; 0xfe
            ))?;
    9cd2:	f007 fd1c 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9cd6:	e7ff      	b.n	9cd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x118>
    9cd8:	f00a fa4e 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9cdc:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9ce0:	e7ff      	b.n	9ce2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x122>
    9ce2:	e7c5      	b.n	9c70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9ce4:	2000      	movs	r0, #0
        Ok(())
    9ce6:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    9cea:	e7b7      	b.n	9c5c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>

00009cec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>:
        self.dx = dx;
        self.dy = dy;
    }

    /// Sets the address window for the display.
    fn set_address_window(&mut self, sx: u16, sy: u16, ex: u16, ey: u16) -> Result<(), ()> {
    9cec:	b5b0      	push	{r4, r5, r7, lr}
    9cee:	b0a2      	sub	sp, #136	; 0x88
    9cf0:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
    9cf4:	469e      	mov	lr, r3
    9cf6:	4614      	mov	r4, r2
    9cf8:	460d      	mov	r5, r1
    9cfa:	9015      	str	r0, [sp, #84]	; 0x54
    9cfc:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
    9d00:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    9d04:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    9d08:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
    9d0c:	212a      	movs	r1, #42	; 0x2a
        self.write_command(Instruction::CASET, None)?;
    9d0e:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
    9d12:	2100      	movs	r1, #0
    9d14:	9110      	str	r1, [sp, #64]	; 0x40
    9d16:	910f      	str	r1, [sp, #60]	; 0x3c
    9d18:	910f      	str	r1, [sp, #60]	; 0x3c
    9d1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9d1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9d1e:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9d22:	900d      	str	r0, [sp, #52]	; 0x34
    9d24:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    9d28:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    9d2c:	940a      	str	r4, [sp, #40]	; 0x28
    9d2e:	9509      	str	r5, [sp, #36]	; 0x24
    9d30:	f7ff feeb 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9d34:	9008      	str	r0, [sp, #32]
    9d36:	e7ff      	b.n	9d38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x4c>
    9d38:	9808      	ldr	r0, [sp, #32]
    9d3a:	f000 0001 	and.w	r0, r0, #1
    9d3e:	f7fe fff8 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d42:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9d46:	e7ff      	b.n	9d48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x5c>
    9d48:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9d4c:	07c1      	lsls	r1, r0, #31
    9d4e:	2900      	cmp	r1, #0
    9d50:	d001      	beq.n	9d56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x6a>
    9d52:	e7ff      	b.n	9d54 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x68>
    9d54:	e00d      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x86>
        self.write_word(sx + self.dx)?;
    9d56:	980d      	ldr	r0, [sp, #52]	; 0x34
    9d58:	8a01      	ldrh	r1, [r0, #16]
    9d5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9d5c:	fa11 f182 	uxtah	r1, r1, r2
    9d60:	b28b      	uxth	r3, r1
    9d62:	468c      	mov	ip, r1
    9d64:	428b      	cmp	r3, r1
    9d66:	f8cd c01c 	str.w	ip, [sp, #28]
    9d6a:	f040 80c2 	bne.w	9ef2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x206>
    9d6e:	e00d      	b.n	9d8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xa0>
        self.write_command(Instruction::CASET, None)?;
    9d70:	defe      	udf	#254	; 0xfe
    9d72:	f007 fccc 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9d76:	e003      	b.n	9d80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x94>
        self.write_word(ex + self.dx)?;
        self.write_command(Instruction::RASET, None)?;
        self.write_word(sy + self.dy)?;
        self.write_word(ey + self.dy)
    }
    9d78:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    9d7c:	b022      	add	sp, #136	; 0x88
    9d7e:	bdb0      	pop	{r4, r5, r7, pc}
        self.write_command(Instruction::CASET, None)?;
    9d80:	f00a f9fa 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9d84:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9d88:	e7ff      	b.n	9d8a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x9e>
    9d8a:	e7f5      	b.n	9d78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9d8c:	980d      	ldr	r0, [sp, #52]	; 0x34
    9d8e:	9907      	ldr	r1, [sp, #28]
    9d90:	f7ff fe9d 	bl	9ace <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9d94:	9006      	str	r0, [sp, #24]
    9d96:	e7ff      	b.n	9d98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xac>
    9d98:	9806      	ldr	r0, [sp, #24]
    9d9a:	f000 0001 	and.w	r0, r0, #1
    9d9e:	f7fe ffc8 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9da2:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    9da6:	e7ff      	b.n	9da8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xbc>
    9da8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9dac:	07c1      	lsls	r1, r0, #31
    9dae:	2900      	cmp	r1, #0
    9db0:	d001      	beq.n	9db6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xca>
    9db2:	e7ff      	b.n	9db4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xc8>
    9db4:	e00d      	b.n	9dd2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xe6>
        self.write_word(ex + self.dx)?;
    9db6:	980d      	ldr	r0, [sp, #52]	; 0x34
    9db8:	8a01      	ldrh	r1, [r0, #16]
    9dba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9dbc:	fa11 f182 	uxtah	r1, r1, r2
    9dc0:	b28b      	uxth	r3, r1
    9dc2:	468c      	mov	ip, r1
    9dc4:	428b      	cmp	r3, r1
    9dc6:	f8cd c014 	str.w	ip, [sp, #20]
    9dca:	f040 809e 	bne.w	9f0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x21e>
    9dce:	e009      	b.n	9de4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf8>
        self.write_word(sx + self.dx)?;
    9dd0:	defe      	udf	#254	; 0xfe
    9dd2:	f007 fc9c 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9dd6:	e7ff      	b.n	9dd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xec>
    9dd8:	f00a f9ce 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ddc:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9de0:	e7ff      	b.n	9de2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf6>
    9de2:	e7c9      	b.n	9d78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ex + self.dx)?;
    9de4:	980d      	ldr	r0, [sp, #52]	; 0x34
    9de6:	9905      	ldr	r1, [sp, #20]
    9de8:	f7ff fe71 	bl	9ace <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9dec:	9004      	str	r0, [sp, #16]
    9dee:	e7ff      	b.n	9df0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x104>
    9df0:	9804      	ldr	r0, [sp, #16]
    9df2:	f000 0001 	and.w	r0, r0, #1
    9df6:	f7fe ff9c 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9dfa:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    9dfe:	e7ff      	b.n	9e00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x114>
    9e00:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    9e04:	07c1      	lsls	r1, r0, #31
    9e06:	2900      	cmp	r1, #0
    9e08:	d001      	beq.n	9e0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x122>
    9e0a:	e7ff      	b.n	9e0c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x120>
    9e0c:	e010      	b.n	9e30 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x144>
    9e0e:	202b      	movs	r0, #43	; 0x2b
        self.write_command(Instruction::RASET, None)?;
    9e10:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
    9e14:	2000      	movs	r0, #0
    9e16:	9013      	str	r0, [sp, #76]	; 0x4c
    9e18:	9012      	str	r0, [sp, #72]	; 0x48
    9e1a:	9012      	str	r0, [sp, #72]	; 0x48
    9e1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9e1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9e20:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
    9e24:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e26:	f7ff fe70 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9e2a:	9003      	str	r0, [sp, #12]
    9e2c:	e009      	b.n	9e42 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x156>
        self.write_word(ex + self.dx)?;
    9e2e:	defe      	udf	#254	; 0xfe
    9e30:	f007 fc6d 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e34:	e7ff      	b.n	9e36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x14a>
    9e36:	f00a f99f 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e3a:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9e3e:	e7ff      	b.n	9e40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x154>
    9e40:	e79a      	b.n	9d78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_command(Instruction::RASET, None)?;
    9e42:	9803      	ldr	r0, [sp, #12]
    9e44:	f000 0001 	and.w	r0, r0, #1
    9e48:	f7fe ff73 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e4c:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9e50:	e7ff      	b.n	9e52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x166>
    9e52:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    9e56:	07c1      	lsls	r1, r0, #31
    9e58:	2900      	cmp	r1, #0
    9e5a:	d001      	beq.n	9e60 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x174>
    9e5c:	e7ff      	b.n	9e5e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x172>
    9e5e:	e00c      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x18e>
        self.write_word(sy + self.dy)?;
    9e60:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e62:	8a41      	ldrh	r1, [r0, #18]
    9e64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9e66:	fa11 f182 	uxtah	r1, r1, r2
    9e6a:	b28b      	uxth	r3, r1
    9e6c:	468c      	mov	ip, r1
    9e6e:	428b      	cmp	r3, r1
    9e70:	f8cd c008 	str.w	ip, [sp, #8]
    9e74:	d155      	bne.n	9f22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x236>
    9e76:	e009      	b.n	9e8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1a0>
        self.write_command(Instruction::RASET, None)?;
    9e78:	defe      	udf	#254	; 0xfe
    9e7a:	f007 fc48 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e7e:	e7ff      	b.n	9e80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x194>
    9e80:	f00a f97a 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e84:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9e88:	e7ff      	b.n	9e8a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x19e>
    9e8a:	e775      	b.n	9d78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sy + self.dy)?;
    9e8c:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e8e:	9902      	ldr	r1, [sp, #8]
    9e90:	f7ff fe1d 	bl	9ace <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9e94:	9001      	str	r0, [sp, #4]
    9e96:	e7ff      	b.n	9e98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ac>
    9e98:	9801      	ldr	r0, [sp, #4]
    9e9a:	f000 0001 	and.w	r0, r0, #1
    9e9e:	f7fe ff48 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9ea2:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    9ea6:	e7ff      	b.n	9ea8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1bc>
    9ea8:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    9eac:	07c1      	lsls	r1, r0, #31
    9eae:	2900      	cmp	r1, #0
    9eb0:	d001      	beq.n	9eb6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ca>
    9eb2:	e7ff      	b.n	9eb4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1c8>
    9eb4:	e00c      	b.n	9ed0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1e4>
        self.write_word(ey + self.dy)
    9eb6:	980d      	ldr	r0, [sp, #52]	; 0x34
    9eb8:	8a41      	ldrh	r1, [r0, #18]
    9eba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9ebc:	fa11 f182 	uxtah	r1, r1, r2
    9ec0:	b28b      	uxth	r3, r1
    9ec2:	468c      	mov	ip, r1
    9ec4:	428b      	cmp	r3, r1
    9ec6:	f8cd c000 	str.w	ip, [sp]
    9eca:	d136      	bne.n	9f3a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x24e>
    9ecc:	e009      	b.n	9ee2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f6>
        self.write_word(sy + self.dy)?;
    9ece:	defe      	udf	#254	; 0xfe
    9ed0:	f007 fc1d 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9ed4:	e7ff      	b.n	9ed6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ea>
    9ed6:	f00a f94f 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9eda:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9ede:	e7ff      	b.n	9ee0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f4>
    9ee0:	e74a      	b.n	9d78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ey + self.dy)
    9ee2:	980d      	ldr	r0, [sp, #52]	; 0x34
    9ee4:	9900      	ldr	r1, [sp, #0]
    9ee6:	f7ff fdf2 	bl	9ace <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9eea:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9eee:	e7ff      	b.n	9ef0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x204>
    }
    9ef0:	e742      	b.n	9d78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9ef2:	f64b 4010 	movw	r0, #48144	; 0xbc10
    9ef6:	f2c0 0001 	movt	r0, #1
    9efa:	f64b 4200 	movw	r2, #48128	; 0xbc00
    9efe:	f2c0 0201 	movt	r2, #1
    9f02:	211c      	movs	r1, #28
    9f04:	f00b f91c 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9f08:	defe      	udf	#254	; 0xfe
        self.write_word(ex + self.dx)?;
    9f0a:	f64b 4010 	movw	r0, #48144	; 0xbc10
    9f0e:	f2c0 0001 	movt	r0, #1
    9f12:	f64b 422c 	movw	r2, #48172	; 0xbc2c
    9f16:	f2c0 0201 	movt	r2, #1
    9f1a:	211c      	movs	r1, #28
    9f1c:	f00b f910 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9f20:	defe      	udf	#254	; 0xfe
        self.write_word(sy + self.dy)?;
    9f22:	f64b 4010 	movw	r0, #48144	; 0xbc10
    9f26:	f2c0 0001 	movt	r0, #1
    9f2a:	f64b 423c 	movw	r2, #48188	; 0xbc3c
    9f2e:	f2c0 0201 	movt	r2, #1
    9f32:	211c      	movs	r1, #28
    9f34:	f00b f904 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9f38:	defe      	udf	#254	; 0xfe
        self.write_word(ey + self.dy)
    9f3a:	f64b 4010 	movw	r0, #48144	; 0xbc10
    9f3e:	f2c0 0001 	movt	r0, #1
    9f42:	f64b 424c 	movw	r2, #48204	; 0xbc4c
    9f46:	f2c0 0201 	movt	r2, #1
    9f4a:	211c      	movs	r1, #28
    9f4c:	f00b f8f8 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9f50:	defe      	udf	#254	; 0xfe

00009f52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>:
    pub fn new(
    9f52:	b5b0      	push	{r4, r5, r7, lr}
    9f54:	b08a      	sub	sp, #40	; 0x28
    9f56:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    9f5a:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    9f5e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    9f60:	9106      	str	r1, [sp, #24]
    9f62:	9207      	str	r2, [sp, #28]
    9f64:	9308      	str	r3, [sp, #32]
    9f66:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    9f6a:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
        let display = ST7735 {
    9f6e:	9100      	str	r1, [sp, #0]
    9f70:	9201      	str	r2, [sp, #4]
    9f72:	9302      	str	r3, [sp, #8]
    9f74:	9403      	str	r4, [sp, #12]
    9f76:	f88d e014 	strb.w	lr, [sp, #20]
    9f7a:	f88d c015 	strb.w	ip, [sp, #21]
    9f7e:	2100      	movs	r1, #0
    9f80:	f8ad 1010 	strh.w	r1, [sp, #16]
    9f84:	f8ad 1012 	strh.w	r1, [sp, #18]
    9f88:	4669      	mov	r1, sp
        display
    9f8a:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    9f8e:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    }
    9f92:	b00a      	add	sp, #40	; 0x28
    9f94:	bdb0      	pop	{r4, r5, r7, pc}

00009f96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>:
    pub fn init<DELAY>(&mut self, delay: &mut DELAY) -> Result<(), ()>
    9f96:	b580      	push	{r7, lr}
    9f98:	b0f6      	sub	sp, #472	; 0x1d8
    9f9a:	904e      	str	r0, [sp, #312]	; 0x138
    9f9c:	914f      	str	r1, [sp, #316]	; 0x13c
        mynewt::spi::spi_noblock_init()  //  Init the SPI queue
    9f9e:	9117      	str	r1, [sp, #92]	; 0x5c
    9fa0:	9016      	str	r0, [sp, #88]	; 0x58
    9fa2:	f008 f897 	bl	120d4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>
    9fa6:	9015      	str	r0, [sp, #84]	; 0x54
    9fa8:	e7ff      	b.n	9faa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x14>
    9faa:	f64b 415c 	movw	r1, #48220	; 0xbc5c
    9fae:	f2c0 0101 	movt	r1, #1
    9fb2:	f64b 436c 	movw	r3, #48236	; 0xbc6c
    9fb6:	f2c0 0301 	movt	r3, #1
    9fba:	220d      	movs	r2, #13
    9fbc:	9815      	ldr	r0, [sp, #84]	; 0x54
    9fbe:	f7fe fe7f 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9fc2:	e7ff      	b.n	9fc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2e>
        self.hard_reset()?;
    9fc4:	9816      	ldr	r0, [sp, #88]	; 0x58
    9fc6:	f7ff fcfa 	bl	99be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>
    9fca:	9014      	str	r0, [sp, #80]	; 0x50
    9fcc:	e7ff      	b.n	9fce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38>
    9fce:	9814      	ldr	r0, [sp, #80]	; 0x50
    9fd0:	f000 0001 	and.w	r0, r0, #1
    9fd4:	f7fe fead 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9fd8:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
    9fdc:	e7ff      	b.n	9fde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48>
    9fde:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
    9fe2:	07c1      	lsls	r1, r0, #31
    9fe4:	2900      	cmp	r1, #0
    9fe6:	d001      	beq.n	9fec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x56>
    9fe8:	e7ff      	b.n	9fea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54>
    9fea:	e010      	b.n	a00e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x78>
    9fec:	2001      	movs	r0, #1
        self.write_command(Instruction::SWRESET, None)?;
    9fee:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
    9ff2:	2000      	movs	r0, #0
    9ff4:	901a      	str	r0, [sp, #104]	; 0x68
    9ff6:	9019      	str	r0, [sp, #100]	; 0x64
    9ff8:	9019      	str	r0, [sp, #100]	; 0x64
    9ffa:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9ffc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9ffe:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
    a002:	9816      	ldr	r0, [sp, #88]	; 0x58
    a004:	f7ff fd81 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a008:	9013      	str	r0, [sp, #76]	; 0x4c
    a00a:	e00d      	b.n	a028 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x92>
        self.hard_reset()?;
    a00c:	defe      	udf	#254	; 0xfe
    a00e:	f007 fb7e 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a012:	e003      	b.n	a01c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x86>
    }
    a014:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    a018:	b076      	add	sp, #472	; 0x1d8
    a01a:	bd80      	pop	{r7, pc}
        self.hard_reset()?;
    a01c:	f00a f8ac 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a020:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a024:	e7ff      	b.n	a026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x90>
    a026:	e7f5      	b.n	a014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::SWRESET, None)?;
    a028:	9813      	ldr	r0, [sp, #76]	; 0x4c
    a02a:	f000 0001 	and.w	r0, r0, #1
    a02e:	f7fe fe80 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a032:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    a036:	e7ff      	b.n	a038 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xa2>
    a038:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    a03c:	07c1      	lsls	r1, r0, #31
    a03e:	2900      	cmp	r1, #0
    a040:	d001      	beq.n	a046 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xb0>
    a042:	e7ff      	b.n	a044 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xae>
    a044:	e005      	b.n	a052 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xbc>
    a046:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a048:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a04a:	f009 fdfc 	bl	13c46 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a04e:	e009      	b.n	a064 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xce>
        self.write_command(Instruction::SWRESET, None)?;
    a050:	defe      	udf	#254	; 0xfe
    a052:	f007 fb5c 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a056:	e7ff      	b.n	a058 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xc2>
    a058:	f00a f88e 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a05c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a060:	e7ff      	b.n	a062 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xcc>
    a062:	e7d7      	b.n	a014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a064:	2011      	movs	r0, #17
        self.write_command(Instruction::SLPOUT, None)?;
    a066:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    a06a:	2000      	movs	r0, #0
    a06c:	901d      	str	r0, [sp, #116]	; 0x74
    a06e:	901c      	str	r0, [sp, #112]	; 0x70
    a070:	901c      	str	r0, [sp, #112]	; 0x70
    a072:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    a074:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a076:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
    a07a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a07c:	f7ff fd45 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a080:	9012      	str	r0, [sp, #72]	; 0x48
    a082:	e7ff      	b.n	a084 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xee>
    a084:	9812      	ldr	r0, [sp, #72]	; 0x48
    a086:	f000 0001 	and.w	r0, r0, #1
    a08a:	f7fe fe52 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a08e:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
    a092:	e7ff      	b.n	a094 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xfe>
    a094:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
    a098:	07c1      	lsls	r1, r0, #31
    a09a:	2900      	cmp	r1, #0
    a09c:	d001      	beq.n	a0a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10c>
    a09e:	e7ff      	b.n	a0a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10a>
    a0a0:	e005      	b.n	a0ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x118>
    a0a2:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a0a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a0a6:	f009 fdce 	bl	13c46 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a0aa:	e009      	b.n	a0c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x12a>
        self.write_command(Instruction::SLPOUT, None)?;
    a0ac:	defe      	udf	#254	; 0xfe
    a0ae:	f007 fb2e 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a0b2:	e7ff      	b.n	a0b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x11e>
    a0b4:	f00a f860 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a0b8:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a0bc:	e7ff      	b.n	a0be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x128>
    a0be:	e7a9      	b.n	a014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a0c0:	20b1      	movs	r0, #177	; 0xb1
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    a0c2:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
    a0c6:	f64b 4080 	movw	r0, #48256	; 0xbc80
    a0ca:	f2c0 0001 	movt	r0, #1
    a0ce:	6800      	ldr	r0, [r0, #0]
    a0d0:	901f      	str	r0, [sp, #124]	; 0x7c
    a0d2:	2003      	movs	r0, #3
    a0d4:	9020      	str	r0, [sp, #128]	; 0x80
    a0d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    a0d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a0da:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
    a0de:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0e0:	f7ff fd13 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a0e4:	9011      	str	r0, [sp, #68]	; 0x44
    a0e6:	e7ff      	b.n	a0e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x152>
    a0e8:	9811      	ldr	r0, [sp, #68]	; 0x44
    a0ea:	f000 0001 	and.w	r0, r0, #1
    a0ee:	f7fe fe20 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a0f2:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    a0f6:	e7ff      	b.n	a0f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x162>
    a0f8:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    a0fc:	07c1      	lsls	r1, r0, #31
    a0fe:	2900      	cmp	r1, #0
    a100:	d001      	beq.n	a106 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x170>
    a102:	e7ff      	b.n	a104 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x16e>
    a104:	e014      	b.n	a130 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x19a>
    a106:	20b2      	movs	r0, #178	; 0xb2
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a108:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    a10c:	f64b 4080 	movw	r0, #48256	; 0xbc80
    a110:	f2c0 0001 	movt	r0, #1
    a114:	6800      	ldr	r0, [r0, #0]
    a116:	9022      	str	r0, [sp, #136]	; 0x88
    a118:	2003      	movs	r0, #3
    a11a:	9023      	str	r0, [sp, #140]	; 0x8c
    a11c:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a11e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a120:	f89d 1087 	ldrb.w	r1, [sp, #135]	; 0x87
    a124:	9816      	ldr	r0, [sp, #88]	; 0x58
    a126:	f7ff fcf0 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a12a:	9010      	str	r0, [sp, #64]	; 0x40
    a12c:	e009      	b.n	a142 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ac>
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    a12e:	defe      	udf	#254	; 0xfe
    a130:	f007 faed 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a134:	e7ff      	b.n	a136 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1a0>
    a136:	f00a f81f 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a13a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a13e:	e7ff      	b.n	a140 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1aa>
    a140:	e768      	b.n	a014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a142:	9810      	ldr	r0, [sp, #64]	; 0x40
    a144:	f000 0001 	and.w	r0, r0, #1
    a148:	f7fe fdf3 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a14c:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
    a150:	e7ff      	b.n	a152 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1bc>
    a152:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
    a156:	07c1      	lsls	r1, r0, #31
    a158:	2900      	cmp	r1, #0
    a15a:	d001      	beq.n	a160 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ca>
    a15c:	e7ff      	b.n	a15e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1c8>
    a15e:	e014      	b.n	a18a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1f4>
    a160:	20b3      	movs	r0, #179	; 0xb3
        self.write_command(Instruction::FRMCTR3,
    a162:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a166:	f64b 408c 	movw	r0, #48268	; 0xbc8c
    a16a:	f2c0 0001 	movt	r0, #1
    a16e:	6800      	ldr	r0, [r0, #0]
    a170:	9025      	str	r0, [sp, #148]	; 0x94
    a172:	2006      	movs	r0, #6
    a174:	9026      	str	r0, [sp, #152]	; 0x98
        self.write_command(Instruction::FRMCTR3,
    a176:	9a25      	ldr	r2, [sp, #148]	; 0x94
    a178:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a17a:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
    a17e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a180:	f7ff fcc3 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a184:	900f      	str	r0, [sp, #60]	; 0x3c
    a186:	e009      	b.n	a19c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x206>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a188:	defe      	udf	#254	; 0xfe
    a18a:	f007 fac0 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a18e:	e7ff      	b.n	a190 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1fa>
    a190:	f009 fff2 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a194:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a198:	e7ff      	b.n	a19a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x204>
    a19a:	e73b      	b.n	a014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR3,
    a19c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a19e:	f000 0001 	and.w	r0, r0, #1
    a1a2:	f7fe fdc6 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a1a6:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
    a1aa:	e7ff      	b.n	a1ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x216>
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a1ac:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
    a1b0:	07c1      	lsls	r1, r0, #31
    a1b2:	2900      	cmp	r1, #0
    a1b4:	d001      	beq.n	a1ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x224>
    a1b6:	e7ff      	b.n	a1b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x222>
    a1b8:	e014      	b.n	a1e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x24e>
    a1ba:	20b4      	movs	r0, #180	; 0xb4
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a1bc:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
    a1c0:	f64b 4094 	movw	r0, #48276	; 0xbc94
    a1c4:	f2c0 0001 	movt	r0, #1
    a1c8:	6800      	ldr	r0, [r0, #0]
    a1ca:	9028      	str	r0, [sp, #160]	; 0xa0
    a1cc:	2001      	movs	r0, #1
    a1ce:	9029      	str	r0, [sp, #164]	; 0xa4
    a1d0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    a1d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    a1d4:	f89d 109f 	ldrb.w	r1, [sp, #159]	; 0x9f
    a1d8:	9816      	ldr	r0, [sp, #88]	; 0x58
    a1da:	f7ff fc96 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a1de:	900e      	str	r0, [sp, #56]	; 0x38
    a1e0:	e009      	b.n	a1f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x260>
        self.write_command(Instruction::FRMCTR3,
    a1e2:	defe      	udf	#254	; 0xfe
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a1e4:	f007 fa93 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a1e8:	e7ff      	b.n	a1ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x254>
    a1ea:	f009 ffc5 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a1ee:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a1f2:	e7ff      	b.n	a1f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x25e>
    a1f4:	e70e      	b.n	a014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a1f6:	980e      	ldr	r0, [sp, #56]	; 0x38
    a1f8:	f000 0001 	and.w	r0, r0, #1
    a1fc:	f7fe fd99 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a200:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
    a204:	e7ff      	b.n	a206 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x270>
    a206:	f89d 009e 	ldrb.w	r0, [sp, #158]	; 0x9e
    a20a:	07c1      	lsls	r1, r0, #31
    a20c:	2900      	cmp	r1, #0
    a20e:	d001      	beq.n	a214 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27e>
    a210:	e7ff      	b.n	a212 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27c>
    a212:	e014      	b.n	a23e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2a8>
    a214:	20c0      	movs	r0, #192	; 0xc0
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a216:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
    a21a:	f64b 409c 	movw	r0, #48284	; 0xbc9c
    a21e:	f2c0 0001 	movt	r0, #1
    a222:	6800      	ldr	r0, [r0, #0]
    a224:	902b      	str	r0, [sp, #172]	; 0xac
    a226:	2003      	movs	r0, #3
    a228:	902c      	str	r0, [sp, #176]	; 0xb0
    a22a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    a22c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    a22e:	f89d 10ab 	ldrb.w	r1, [sp, #171]	; 0xab
    a232:	9816      	ldr	r0, [sp, #88]	; 0x58
    a234:	f7ff fc69 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a238:	900d      	str	r0, [sp, #52]	; 0x34
    a23a:	e009      	b.n	a250 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ba>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a23c:	defe      	udf	#254	; 0xfe
    a23e:	f007 fa66 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a242:	e7ff      	b.n	a244 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ae>
    a244:	f009 ff98 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a248:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a24c:	e7ff      	b.n	a24e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2b8>
    a24e:	e6e1      	b.n	a014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a250:	980d      	ldr	r0, [sp, #52]	; 0x34
    a252:	f000 0001 	and.w	r0, r0, #1
    a256:	f7fe fd6c 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a25a:	f88d 00aa 	strb.w	r0, [sp, #170]	; 0xaa
    a25e:	e7ff      	b.n	a260 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ca>
    a260:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
    a264:	07c1      	lsls	r1, r0, #31
    a266:	2900      	cmp	r1, #0
    a268:	d001      	beq.n	a26e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d8>
    a26a:	e7ff      	b.n	a26c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d6>
    a26c:	e014      	b.n	a298 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x302>
    a26e:	20c1      	movs	r0, #193	; 0xc1
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a270:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
    a274:	f64b 40a4 	movw	r0, #48292	; 0xbca4
    a278:	f2c0 0001 	movt	r0, #1
    a27c:	6800      	ldr	r0, [r0, #0]
    a27e:	902e      	str	r0, [sp, #184]	; 0xb8
    a280:	2001      	movs	r0, #1
    a282:	902f      	str	r0, [sp, #188]	; 0xbc
    a284:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    a286:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    a288:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
    a28c:	9816      	ldr	r0, [sp, #88]	; 0x58
    a28e:	f7ff fc3c 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a292:	900c      	str	r0, [sp, #48]	; 0x30
    a294:	e009      	b.n	a2aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x314>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a296:	defe      	udf	#254	; 0xfe
    a298:	f007 fa39 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a29c:	e7ff      	b.n	a29e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x308>
    a29e:	f009 ff6b 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a2a2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a2a6:	e7ff      	b.n	a2a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x312>
    a2a8:	e6b4      	b.n	a014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a2aa:	980c      	ldr	r0, [sp, #48]	; 0x30
    a2ac:	f000 0001 	and.w	r0, r0, #1
    a2b0:	f7fe fd3f 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a2b4:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
    a2b8:	e7ff      	b.n	a2ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x324>
    a2ba:	f89d 00b6 	ldrb.w	r0, [sp, #182]	; 0xb6
    a2be:	07c1      	lsls	r1, r0, #31
    a2c0:	2900      	cmp	r1, #0
    a2c2:	d001      	beq.n	a2c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x332>
    a2c4:	e7ff      	b.n	a2c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x330>
    a2c6:	e014      	b.n	a2f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x35c>
    a2c8:	20c2      	movs	r0, #194	; 0xc2
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a2ca:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
    a2ce:	f64b 40ac 	movw	r0, #48300	; 0xbcac
    a2d2:	f2c0 0001 	movt	r0, #1
    a2d6:	6800      	ldr	r0, [r0, #0]
    a2d8:	9031      	str	r0, [sp, #196]	; 0xc4
    a2da:	2002      	movs	r0, #2
    a2dc:	9032      	str	r0, [sp, #200]	; 0xc8
    a2de:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    a2e0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    a2e2:	f89d 10c3 	ldrb.w	r1, [sp, #195]	; 0xc3
    a2e6:	9816      	ldr	r0, [sp, #88]	; 0x58
    a2e8:	f7ff fc0f 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a2ec:	900b      	str	r0, [sp, #44]	; 0x2c
    a2ee:	e009      	b.n	a304 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a2f0:	defe      	udf	#254	; 0xfe
    a2f2:	f007 fa0c 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a2f6:	e7ff      	b.n	a2f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x362>
    a2f8:	f009 ff3e 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a2fc:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a300:	e7ff      	b.n	a302 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36c>
    a302:	e687      	b.n	a014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a304:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a306:	f000 0001 	and.w	r0, r0, #1
    a30a:	f7fe fd12 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a30e:	f88d 00c2 	strb.w	r0, [sp, #194]	; 0xc2
    a312:	e7ff      	b.n	a314 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x37e>
    a314:	f89d 00c2 	ldrb.w	r0, [sp, #194]	; 0xc2
    a318:	07c1      	lsls	r1, r0, #31
    a31a:	2900      	cmp	r1, #0
    a31c:	d001      	beq.n	a322 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38c>
    a31e:	e7ff      	b.n	a320 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38a>
    a320:	e014      	b.n	a34c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3b6>
    a322:	20c3      	movs	r0, #195	; 0xc3
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a324:	f88d 00cf 	strb.w	r0, [sp, #207]	; 0xcf
    a328:	f64b 40b4 	movw	r0, #48308	; 0xbcb4
    a32c:	f2c0 0001 	movt	r0, #1
    a330:	6800      	ldr	r0, [r0, #0]
    a332:	9034      	str	r0, [sp, #208]	; 0xd0
    a334:	2002      	movs	r0, #2
    a336:	9035      	str	r0, [sp, #212]	; 0xd4
    a338:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    a33a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    a33c:	f89d 10cf 	ldrb.w	r1, [sp, #207]	; 0xcf
    a340:	9816      	ldr	r0, [sp, #88]	; 0x58
    a342:	f7ff fbe2 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a346:	900a      	str	r0, [sp, #40]	; 0x28
    a348:	e009      	b.n	a35e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c8>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a34a:	defe      	udf	#254	; 0xfe
    a34c:	f007 f9df 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a350:	e7ff      	b.n	a352 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3bc>
    a352:	f009 ff11 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a356:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a35a:	e7ff      	b.n	a35c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c6>
    a35c:	e65a      	b.n	a014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a35e:	980a      	ldr	r0, [sp, #40]	; 0x28
    a360:	f000 0001 	and.w	r0, r0, #1
    a364:	f7fe fce5 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a368:	f88d 00ce 	strb.w	r0, [sp, #206]	; 0xce
    a36c:	e7ff      	b.n	a36e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3d8>
    a36e:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
    a372:	07c1      	lsls	r1, r0, #31
    a374:	2900      	cmp	r1, #0
    a376:	d001      	beq.n	a37c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e6>
    a378:	e7ff      	b.n	a37a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e4>
    a37a:	e014      	b.n	a3a6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x410>
    a37c:	20c4      	movs	r0, #196	; 0xc4
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a37e:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
    a382:	f64b 40bc 	movw	r0, #48316	; 0xbcbc
    a386:	f2c0 0001 	movt	r0, #1
    a38a:	6800      	ldr	r0, [r0, #0]
    a38c:	9037      	str	r0, [sp, #220]	; 0xdc
    a38e:	2002      	movs	r0, #2
    a390:	9038      	str	r0, [sp, #224]	; 0xe0
    a392:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    a394:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    a396:	f89d 10db 	ldrb.w	r1, [sp, #219]	; 0xdb
    a39a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a39c:	f7ff fbb5 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a3a0:	9009      	str	r0, [sp, #36]	; 0x24
    a3a2:	e009      	b.n	a3b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x422>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a3a4:	defe      	udf	#254	; 0xfe
    a3a6:	f007 f9b2 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a3aa:	e7ff      	b.n	a3ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x416>
    a3ac:	f009 fee4 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a3b0:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a3b4:	e7ff      	b.n	a3b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x420>
    a3b6:	e62d      	b.n	a014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a3b8:	9809      	ldr	r0, [sp, #36]	; 0x24
    a3ba:	f000 0001 	and.w	r0, r0, #1
    a3be:	f7fe fcb8 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a3c2:	f88d 00da 	strb.w	r0, [sp, #218]	; 0xda
    a3c6:	e7ff      	b.n	a3c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x432>
    a3c8:	f89d 00da 	ldrb.w	r0, [sp, #218]	; 0xda
    a3cc:	07c1      	lsls	r1, r0, #31
    a3ce:	2900      	cmp	r1, #0
    a3d0:	d001      	beq.n	a3d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x440>
    a3d2:	e7ff      	b.n	a3d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x43e>
    a3d4:	e014      	b.n	a400 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x46a>
    a3d6:	20c5      	movs	r0, #197	; 0xc5
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a3d8:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
    a3dc:	f64b 40c4 	movw	r0, #48324	; 0xbcc4
    a3e0:	f2c0 0001 	movt	r0, #1
    a3e4:	6800      	ldr	r0, [r0, #0]
    a3e6:	903a      	str	r0, [sp, #232]	; 0xe8
    a3e8:	2001      	movs	r0, #1
    a3ea:	903b      	str	r0, [sp, #236]	; 0xec
    a3ec:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    a3ee:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    a3f0:	f89d 10e7 	ldrb.w	r1, [sp, #231]	; 0xe7
    a3f4:	9816      	ldr	r0, [sp, #88]	; 0x58
    a3f6:	f7ff fb88 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a3fa:	9008      	str	r0, [sp, #32]
    a3fc:	e009      	b.n	a412 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47c>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a3fe:	defe      	udf	#254	; 0xfe
    a400:	f007 f985 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a404:	e7ff      	b.n	a406 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x470>
    a406:	f009 feb7 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a40a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a40e:	e7ff      	b.n	a410 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47a>
    a410:	e600      	b.n	a014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a412:	9808      	ldr	r0, [sp, #32]
    a414:	f000 0001 	and.w	r0, r0, #1
    a418:	f7fe fc8b 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a41c:	f88d 00e6 	strb.w	r0, [sp, #230]	; 0xe6
    a420:	e7ff      	b.n	a422 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48c>
    a422:	f89d 00e6 	ldrb.w	r0, [sp, #230]	; 0xe6
    a426:	07c1      	lsls	r1, r0, #31
    a428:	2900      	cmp	r1, #0
    a42a:	d001      	beq.n	a430 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x49a>
    a42c:	e7ff      	b.n	a42e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x498>
    a42e:	e006      	b.n	a43e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4a8>
        if self.inverted {
    a430:	9816      	ldr	r0, [sp, #88]	; 0x58
    a432:	7d41      	ldrb	r1, [r0, #21]
    a434:	07c9      	lsls	r1, r1, #31
    a436:	2900      	cmp	r1, #0
    a438:	d11a      	bne.n	a470 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4da>
    a43a:	e009      	b.n	a450 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ba>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a43c:	defe      	udf	#254	; 0xfe
    a43e:	f007 f966 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a442:	e7ff      	b.n	a444 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ae>
    a444:	f009 fe98 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a448:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a44c:	e7ff      	b.n	a44e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4b8>
    a44e:	e5e1      	b.n	a014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a450:	2020      	movs	r0, #32
            self.write_command(Instruction::INVOFF, None)?;
    a452:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    a456:	2000      	movs	r0, #0
    a458:	9041      	str	r0, [sp, #260]	; 0x104
    a45a:	9040      	str	r0, [sp, #256]	; 0x100
    a45c:	9040      	str	r0, [sp, #256]	; 0x100
    a45e:	9a40      	ldr	r2, [sp, #256]	; 0x100
    a460:	9b41      	ldr	r3, [sp, #260]	; 0x104
    a462:	f89d 10ff 	ldrb.w	r1, [sp, #255]	; 0xff
    a466:	9816      	ldr	r0, [sp, #88]	; 0x58
    a468:	f7ff fb4f 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a46c:	9007      	str	r0, [sp, #28]
    a46e:	e02a      	b.n	a4c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x530>
    a470:	2021      	movs	r0, #33	; 0x21
            self.write_command(Instruction::INVON, None)?;
    a472:	f88d 00f3 	strb.w	r0, [sp, #243]	; 0xf3
    a476:	2000      	movs	r0, #0
    a478:	903e      	str	r0, [sp, #248]	; 0xf8
    a47a:	903d      	str	r0, [sp, #244]	; 0xf4
    a47c:	903d      	str	r0, [sp, #244]	; 0xf4
    a47e:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    a480:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    a482:	f89d 10f3 	ldrb.w	r1, [sp, #243]	; 0xf3
    a486:	9816      	ldr	r0, [sp, #88]	; 0x58
    a488:	f7ff fb3f 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a48c:	9006      	str	r0, [sp, #24]
    a48e:	e7ff      	b.n	a490 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4fa>
    a490:	9806      	ldr	r0, [sp, #24]
    a492:	f000 0001 	and.w	r0, r0, #1
    a496:	f7fe fc4c 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a49a:	f88d 00f2 	strb.w	r0, [sp, #242]	; 0xf2
    a49e:	e7ff      	b.n	a4a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x50a>
    a4a0:	f89d 00f2 	ldrb.w	r0, [sp, #242]	; 0xf2
    a4a4:	07c1      	lsls	r1, r0, #31
    a4a6:	2900      	cmp	r1, #0
    a4a8:	d001      	beq.n	a4ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x518>
    a4aa:	e7ff      	b.n	a4ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x516>
    a4ac:	e001      	b.n	a4b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x51c>
        if self.inverted {
    a4ae:	e024      	b.n	a4fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVON, None)?;
    a4b0:	defe      	udf	#254	; 0xfe
    a4b2:	f007 f92c 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a4b6:	e7ff      	b.n	a4b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x522>
    a4b8:	f009 fe5e 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a4bc:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a4c0:	e7ff      	b.n	a4c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52c>
    a4c2:	e7ff      	b.n	a4c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
    a4c4:	e5a6      	b.n	a014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::INVOFF, None)?;
    a4c6:	9807      	ldr	r0, [sp, #28]
    a4c8:	f000 0001 	and.w	r0, r0, #1
    a4cc:	f7fe fc31 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a4d0:	f88d 00fe 	strb.w	r0, [sp, #254]	; 0xfe
    a4d4:	e7ff      	b.n	a4d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x540>
    a4d6:	f89d 00fe 	ldrb.w	r0, [sp, #254]	; 0xfe
    a4da:	07c1      	lsls	r1, r0, #31
    a4dc:	2900      	cmp	r1, #0
    a4de:	d001      	beq.n	a4e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54e>
    a4e0:	e7ff      	b.n	a4e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54c>
    a4e2:	e001      	b.n	a4e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x552>
        if self.inverted {
    a4e4:	e009      	b.n	a4fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVOFF, None)?;
    a4e6:	defe      	udf	#254	; 0xfe
    a4e8:	f007 f911 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a4ec:	e7ff      	b.n	a4ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x558>
    a4ee:	f009 fe43 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a4f2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a4f6:	e7ff      	b.n	a4f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x562>
    a4f8:	e7e4      	b.n	a4c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
        if self.rgb {
    a4fa:	9816      	ldr	r0, [sp, #88]	; 0x58
    a4fc:	7d01      	ldrb	r1, [r0, #20]
    a4fe:	07c9      	lsls	r1, r1, #31
    a500:	2900      	cmp	r1, #0
    a502:	d114      	bne.n	a52e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x598>
    a504:	e7ff      	b.n	a506 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x570>
    a506:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a508:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
    a50c:	f64b 40d4 	movw	r0, #48340	; 0xbcd4
    a510:	f2c0 0001 	movt	r0, #1
    a514:	6800      	ldr	r0, [r0, #0]
    a516:	9046      	str	r0, [sp, #280]	; 0x118
    a518:	2001      	movs	r0, #1
    a51a:	9047      	str	r0, [sp, #284]	; 0x11c
    a51c:	9a46      	ldr	r2, [sp, #280]	; 0x118
    a51e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    a520:	f89d 1117 	ldrb.w	r1, [sp, #279]	; 0x117
    a524:	9816      	ldr	r0, [sp, #88]	; 0x58
    a526:	f7ff faf0 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a52a:	9005      	str	r0, [sp, #20]
    a52c:	e02e      	b.n	a58c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f6>
    a52e:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a530:	f88d 010b 	strb.w	r0, [sp, #267]	; 0x10b
    a534:	f64b 40cc 	movw	r0, #48332	; 0xbccc
    a538:	f2c0 0001 	movt	r0, #1
    a53c:	6800      	ldr	r0, [r0, #0]
    a53e:	9043      	str	r0, [sp, #268]	; 0x10c
    a540:	2001      	movs	r0, #1
    a542:	9044      	str	r0, [sp, #272]	; 0x110
    a544:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    a546:	9b44      	ldr	r3, [sp, #272]	; 0x110
    a548:	f89d 110b 	ldrb.w	r1, [sp, #267]	; 0x10b
    a54c:	9816      	ldr	r0, [sp, #88]	; 0x58
    a54e:	f7ff fadc 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a552:	9004      	str	r0, [sp, #16]
    a554:	e7ff      	b.n	a556 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5c0>
    a556:	9804      	ldr	r0, [sp, #16]
    a558:	f000 0001 	and.w	r0, r0, #1
    a55c:	f7fe fbe9 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a560:	f88d 010a 	strb.w	r0, [sp, #266]	; 0x10a
    a564:	e7ff      	b.n	a566 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5d0>
    a566:	f89d 010a 	ldrb.w	r0, [sp, #266]	; 0x10a
    a56a:	07c1      	lsls	r1, r0, #31
    a56c:	2900      	cmp	r1, #0
    a56e:	d001      	beq.n	a574 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5de>
    a570:	e7ff      	b.n	a572 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5dc>
    a572:	e001      	b.n	a578 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e2>
        if self.rgb {
    a574:	e024      	b.n	a5c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a576:	defe      	udf	#254	; 0xfe
    a578:	f007 f8c9 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a57c:	e7ff      	b.n	a57e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e8>
    a57e:	f009 fdfb 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a582:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a586:	e7ff      	b.n	a588 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f2>
    a588:	e7ff      	b.n	a58a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a58a:	e543      	b.n	a014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a58c:	9805      	ldr	r0, [sp, #20]
    a58e:	f000 0001 	and.w	r0, r0, #1
    a592:	f7fe fbce 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a596:	f88d 0116 	strb.w	r0, [sp, #278]	; 0x116
    a59a:	e7ff      	b.n	a59c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x606>
    a59c:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    a5a0:	07c1      	lsls	r1, r0, #31
    a5a2:	2900      	cmp	r1, #0
    a5a4:	d001      	beq.n	a5aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x614>
    a5a6:	e7ff      	b.n	a5a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x612>
    a5a8:	e001      	b.n	a5ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x618>
        if self.rgb {
    a5aa:	e009      	b.n	a5c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a5ac:	defe      	udf	#254	; 0xfe
    a5ae:	f007 f8ae 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a5b2:	e7ff      	b.n	a5b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x61e>
    a5b4:	f009 fde0 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a5b8:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a5bc:	e7ff      	b.n	a5be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x628>
    a5be:	e7e4      	b.n	a58a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a5c0:	203a      	movs	r0, #58	; 0x3a
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a5c2:	f88d 0123 	strb.w	r0, [sp, #291]	; 0x123
    a5c6:	f64b 40dc 	movw	r0, #48348	; 0xbcdc
    a5ca:	f2c0 0001 	movt	r0, #1
    a5ce:	6800      	ldr	r0, [r0, #0]
    a5d0:	9049      	str	r0, [sp, #292]	; 0x124
    a5d2:	2001      	movs	r0, #1
    a5d4:	904a      	str	r0, [sp, #296]	; 0x128
    a5d6:	9a49      	ldr	r2, [sp, #292]	; 0x124
    a5d8:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    a5da:	f89d 1123 	ldrb.w	r1, [sp, #291]	; 0x123
    a5de:	9816      	ldr	r0, [sp, #88]	; 0x58
    a5e0:	f7ff fa93 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a5e4:	9003      	str	r0, [sp, #12]
    a5e6:	e7ff      	b.n	a5e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x652>
    a5e8:	9803      	ldr	r0, [sp, #12]
    a5ea:	f000 0001 	and.w	r0, r0, #1
    a5ee:	f7fe fba0 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a5f2:	f88d 0122 	strb.w	r0, [sp, #290]	; 0x122
    a5f6:	e7ff      	b.n	a5f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x662>
    a5f8:	f89d 0122 	ldrb.w	r0, [sp, #290]	; 0x122
    a5fc:	07c1      	lsls	r1, r0, #31
    a5fe:	2900      	cmp	r1, #0
    a600:	d001      	beq.n	a606 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x670>
    a602:	e7ff      	b.n	a604 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x66e>
    a604:	e010      	b.n	a628 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x692>
    a606:	2029      	movs	r0, #41	; 0x29
        self.write_command(Instruction::DISPON, None)?;
    a608:	f88d 012f 	strb.w	r0, [sp, #303]	; 0x12f
    a60c:	2000      	movs	r0, #0
    a60e:	904d      	str	r0, [sp, #308]	; 0x134
    a610:	904c      	str	r0, [sp, #304]	; 0x130
    a612:	904c      	str	r0, [sp, #304]	; 0x130
    a614:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    a616:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    a618:	f89d 112f 	ldrb.w	r1, [sp, #303]	; 0x12f
    a61c:	9816      	ldr	r0, [sp, #88]	; 0x58
    a61e:	f7ff fa74 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a622:	9002      	str	r0, [sp, #8]
    a624:	e009      	b.n	a63a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a4>
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a626:	defe      	udf	#254	; 0xfe
    a628:	f007 f871 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a62c:	e7ff      	b.n	a62e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x698>
    a62e:	f009 fda3 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a632:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a636:	e7ff      	b.n	a638 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a2>
    a638:	e4ec      	b.n	a014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::DISPON, None)?;
    a63a:	9802      	ldr	r0, [sp, #8]
    a63c:	f000 0001 	and.w	r0, r0, #1
    a640:	f7fe fb77 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a644:	f88d 012e 	strb.w	r0, [sp, #302]	; 0x12e
    a648:	e7ff      	b.n	a64a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6b4>
    a64a:	f89d 012e 	ldrb.w	r0, [sp, #302]	; 0x12e
    a64e:	07c1      	lsls	r1, r0, #31
    a650:	2900      	cmp	r1, #0
    a652:	d001      	beq.n	a658 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c2>
    a654:	e7ff      	b.n	a656 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c0>
    a656:	e005      	b.n	a664 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6ce>
    a658:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a65a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a65c:	f009 faf3 	bl	13c46 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a660:	e009      	b.n	a676 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e0>
        self.write_command(Instruction::DISPON, None)?;
    a662:	defe      	udf	#254	; 0xfe
    a664:	f007 f853 	bl	1170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a668:	e7ff      	b.n	a66a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6d4>
    a66a:	f009 fd85 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a66e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a672:	e7ff      	b.n	a674 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6de>
    a674:	e4ce      	b.n	a014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    a676:	f008 fb21 	bl	12cbc <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    a67a:	9001      	str	r0, [sp, #4]
    a67c:	e7ff      	b.n	a67e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e8>
    a67e:	f64b 3118 	movw	r1, #47896	; 0xbb18
    a682:	f2c0 0101 	movt	r1, #1
    a686:	f64b 43e0 	movw	r3, #48352	; 0xbce0
    a68a:	f2c0 0301 	movt	r3, #1
    a68e:	220e      	movs	r2, #14
    a690:	9801      	ldr	r0, [sp, #4]
    a692:	f7fe fb15 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    a696:	e7ff      	b.n	a698 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x702>
    a698:	2000      	movs	r0, #0
        Ok(())
    a69a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    }
    a69e:	e4b9      	b.n	a014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>

0000a6a0 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>:
    fn to_u8(&self) -> Option<u8> {
    a6a0:	b580      	push	{r7, lr}
    a6a2:	b08a      	sub	sp, #40	; 0x28
    a6a4:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    a6a6:	f000 fb60 	bl	ad6a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>
    a6aa:	9307      	str	r3, [sp, #28]
    a6ac:	9206      	str	r2, [sp, #24]
    a6ae:	9105      	str	r1, [sp, #20]
    a6b0:	9004      	str	r0, [sp, #16]
    a6b2:	e7ff      	b.n	a6b4 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x14>
    a6b4:	a804      	add	r0, sp, #16
    a6b6:	f009 fb53 	bl	13d60 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    a6ba:	9003      	str	r0, [sp, #12]
    a6bc:	e7ff      	b.n	a6be <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x1e>
    a6be:	9803      	ldr	r0, [sp, #12]
    a6c0:	f009 fbc4 	bl	13e4c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    a6c4:	9002      	str	r0, [sp, #8]
    a6c6:	9101      	str	r1, [sp, #4]
    a6c8:	e7ff      	b.n	a6ca <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x2a>
    }
    a6ca:	9802      	ldr	r0, [sp, #8]
    a6cc:	f000 0001 	and.w	r0, r0, #1
    a6d0:	9901      	ldr	r1, [sp, #4]
    a6d2:	b00a      	add	sp, #40	; 0x28
    a6d4:	bd80      	pop	{r7, pc}

0000a6d6 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>:
    a6d6:	b082      	sub	sp, #8
    a6d8:	4601      	mov	r1, r0
    a6da:	f8ad 0004 	strh.w	r0, [sp, #4]
    a6de:	ba00      	rev	r0, r0
    a6e0:	0c00      	lsrs	r0, r0, #16
    a6e2:	f8ad 0006 	strh.w	r0, [sp, #6]
    a6e6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a6ea:	9000      	str	r0, [sp, #0]
    a6ec:	e7ff      	b.n	a6ee <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E+0x18>
    a6ee:	9800      	ldr	r0, [sp, #0]
    a6f0:	b002      	add	sp, #8
    a6f2:	4770      	bx	lr

0000a6f4 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>:
    a6f4:	b580      	push	{r7, lr}
    a6f6:	b084      	sub	sp, #16
    a6f8:	4601      	mov	r1, r0
    a6fa:	f8ad 000e 	strh.w	r0, [sp, #14]
    a6fe:	9102      	str	r1, [sp, #8]
    a700:	f7ff ffe9 	bl	a6d6 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>
    a704:	9001      	str	r0, [sp, #4]
    a706:	e7ff      	b.n	a708 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E+0x14>
    a708:	9801      	ldr	r0, [sp, #4]
    a70a:	b004      	add	sp, #16
    a70c:	bd80      	pop	{r7, pc}

0000a70e <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>:
    a70e:	b580      	push	{r7, lr}
    a710:	b084      	sub	sp, #16
    a712:	9002      	str	r0, [sp, #8]
    a714:	9802      	ldr	r0, [sp, #8]
    a716:	f009 fae4 	bl	13ce2 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>
    a71a:	9001      	str	r0, [sp, #4]
    a71c:	9100      	str	r1, [sp, #0]
    a71e:	e7ff      	b.n	a720 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE+0x12>
    a720:	9801      	ldr	r0, [sp, #4]
    a722:	f000 0001 	and.w	r0, r0, #1
    a726:	9900      	ldr	r1, [sp, #0]
    a728:	b004      	add	sp, #16
    a72a:	bd80      	pop	{r7, pc}

0000a72c <_ZN4core3ptr13drop_in_place17hef1277471241eea2E>:
    a72c:	b081      	sub	sp, #4
    a72e:	9000      	str	r0, [sp, #0]
    a730:	b001      	add	sp, #4
    a732:	4770      	bx	lr

0000a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>:
    a734:	b089      	sub	sp, #36	; 0x24
    a736:	9005      	str	r0, [sp, #20]
    a738:	9106      	str	r1, [sp, #24]
    a73a:	9107      	str	r1, [sp, #28]
    a73c:	9907      	ldr	r1, [sp, #28]
    a73e:	9002      	str	r0, [sp, #8]
    a740:	9101      	str	r1, [sp, #4]
    a742:	e7ff      	b.n	a744 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x10>
    a744:	9802      	ldr	r0, [sp, #8]
    a746:	9008      	str	r0, [sp, #32]
    a748:	9908      	ldr	r1, [sp, #32]
    a74a:	9100      	str	r1, [sp, #0]
    a74c:	e7ff      	b.n	a74e <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x1a>
    a74e:	9800      	ldr	r0, [sp, #0]
    a750:	9003      	str	r0, [sp, #12]
    a752:	9901      	ldr	r1, [sp, #4]
    a754:	9104      	str	r1, [sp, #16]
    a756:	9803      	ldr	r0, [sp, #12]
    a758:	9904      	ldr	r1, [sp, #16]
    a75a:	b009      	add	sp, #36	; 0x24
    a75c:	4770      	bx	lr

0000a75e <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>:
    a75e:	b580      	push	{r7, lr}
    a760:	b084      	sub	sp, #16
    a762:	9002      	str	r0, [sp, #8]
    a764:	9103      	str	r1, [sp, #12]
    a766:	f7ff f8cc 	bl	9902 <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>
    a76a:	9001      	str	r0, [sp, #4]
    a76c:	9100      	str	r1, [sp, #0]
    a76e:	e7ff      	b.n	a770 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE+0x12>
    a770:	9801      	ldr	r0, [sp, #4]
    a772:	9900      	ldr	r1, [sp, #0]
    a774:	b004      	add	sp, #16
    a776:	bd80      	pop	{r7, pc}

0000a778 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>:
    a778:	b580      	push	{r7, lr}
    a77a:	b084      	sub	sp, #16
    a77c:	9002      	str	r0, [sp, #8]
    a77e:	9103      	str	r1, [sp, #12]
    a780:	f7ff f8cc 	bl	991c <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>
    a784:	9001      	str	r0, [sp, #4]
    a786:	9100      	str	r1, [sp, #0]
    a788:	e7ff      	b.n	a78a <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E+0x12>
    a78a:	9801      	ldr	r0, [sp, #4]
    a78c:	9900      	ldr	r1, [sp, #0]
    a78e:	b004      	add	sp, #16
    a790:	bd80      	pop	{r7, pc}

0000a792 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>:
    a792:	b082      	sub	sp, #8
    a794:	9000      	str	r0, [sp, #0]
    a796:	9101      	str	r1, [sp, #4]
    a798:	b002      	add	sp, #8
    a79a:	4770      	bx	lr

0000a79c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>:
    a79c:	b084      	sub	sp, #16
    a79e:	9002      	str	r0, [sp, #8]
    a7a0:	9103      	str	r1, [sp, #12]
    a7a2:	9000      	str	r0, [sp, #0]
    a7a4:	9101      	str	r1, [sp, #4]
    a7a6:	9801      	ldr	r0, [sp, #4]
    a7a8:	b004      	add	sp, #16
    a7aa:	4770      	bx	lr

0000a7ac <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>:
    a7ac:	b580      	push	{r7, lr}
    a7ae:	b092      	sub	sp, #72	; 0x48
    a7b0:	900e      	str	r0, [sp, #56]	; 0x38
    a7b2:	910f      	str	r1, [sp, #60]	; 0x3c
    a7b4:	9009      	str	r0, [sp, #36]	; 0x24
    a7b6:	9108      	str	r1, [sp, #32]
    a7b8:	f000 f83e 	bl	a838 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>
    a7bc:	4601      	mov	r1, r0
    a7be:	9010      	str	r0, [sp, #64]	; 0x40
    a7c0:	9107      	str	r1, [sp, #28]
    a7c2:	e7ff      	b.n	a7c4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x18>
    a7c4:	9807      	ldr	r0, [sp, #28]
    a7c6:	f7fe ff61 	bl	968c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
    a7ca:	e7ff      	b.n	a7cc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x20>
    a7cc:	e7ff      	b.n	a7ce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x22>
    a7ce:	2002      	movs	r0, #2
    a7d0:	9011      	str	r0, [sp, #68]	; 0x44
    a7d2:	9811      	ldr	r0, [sp, #68]	; 0x44
    a7d4:	9006      	str	r0, [sp, #24]
    a7d6:	e7ff      	b.n	a7d8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x2c>
    a7d8:	9806      	ldr	r0, [sp, #24]
    a7da:	2800      	cmp	r0, #0
    a7dc:	d006      	beq.n	a7ec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x40>
    a7de:	e7ff      	b.n	a7e0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x34>
    a7e0:	9809      	ldr	r0, [sp, #36]	; 0x24
    a7e2:	9908      	ldr	r1, [sp, #32]
    a7e4:	f7ff ffda 	bl	a79c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
    a7e8:	9005      	str	r0, [sp, #20]
    a7ea:	e011      	b.n	a810 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x64>
    a7ec:	9807      	ldr	r0, [sp, #28]
    a7ee:	9909      	ldr	r1, [sp, #36]	; 0x24
    a7f0:	9004      	str	r0, [sp, #16]
    a7f2:	4608      	mov	r0, r1
    a7f4:	9908      	ldr	r1, [sp, #32]
    a7f6:	f7ff ffd1 	bl	a79c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
    a7fa:	9003      	str	r0, [sp, #12]
    a7fc:	e7ff      	b.n	a7fe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x52>
    a7fe:	9804      	ldr	r0, [sp, #16]
    a800:	9903      	ldr	r1, [sp, #12]
    a802:	f009 fa55 	bl	13cb0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>
    a806:	9002      	str	r0, [sp, #8]
    a808:	e7ff      	b.n	a80a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x5e>
    a80a:	9802      	ldr	r0, [sp, #8]
    a80c:	900c      	str	r0, [sp, #48]	; 0x30
    a80e:	e006      	b.n	a81e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
    a810:	9807      	ldr	r0, [sp, #28]
    a812:	9905      	ldr	r1, [sp, #20]
    a814:	f7fe ff19 	bl	964a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
    a818:	900c      	str	r0, [sp, #48]	; 0x30
    a81a:	e7ff      	b.n	a81c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x70>
    a81c:	e7ff      	b.n	a81e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
    a81e:	9807      	ldr	r0, [sp, #28]
    a820:	f000 f8cd 	bl	a9be <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
    a824:	9001      	str	r0, [sp, #4]
    a826:	e7ff      	b.n	a828 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x7c>
    a828:	980c      	ldr	r0, [sp, #48]	; 0x30
    a82a:	9901      	ldr	r1, [sp, #4]
    a82c:	910a      	str	r1, [sp, #40]	; 0x28
    a82e:	900b      	str	r0, [sp, #44]	; 0x2c
    a830:	980a      	ldr	r0, [sp, #40]	; 0x28
    a832:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a834:	b012      	add	sp, #72	; 0x48
    a836:	bd80      	pop	{r7, pc}

0000a838 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>:
    a838:	b082      	sub	sp, #8
    a83a:	9000      	str	r0, [sp, #0]
    a83c:	9101      	str	r1, [sp, #4]
    a83e:	b002      	add	sp, #8
    a840:	4770      	bx	lr

0000a842 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>:
    a842:	b580      	push	{r7, lr}
    a844:	b086      	sub	sp, #24
    a846:	9003      	str	r0, [sp, #12]
    a848:	9104      	str	r1, [sp, #16]
    a84a:	f009 fd04 	bl	14256 <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>
    a84e:	9002      	str	r0, [sp, #8]
    a850:	9101      	str	r1, [sp, #4]
    a852:	e7ff      	b.n	a854 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E+0x12>
    a854:	9802      	ldr	r0, [sp, #8]
    a856:	9901      	ldr	r1, [sp, #4]
    a858:	b006      	add	sp, #24
    a85a:	bd80      	pop	{r7, pc}

0000a85c <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>:
    a85c:	b580      	push	{r7, lr}
    a85e:	b088      	sub	sp, #32
    a860:	9005      	str	r0, [sp, #20]
    a862:	9106      	str	r1, [sp, #24]
    a864:	9207      	str	r2, [sp, #28]
    a866:	9004      	str	r0, [sp, #16]
    a868:	4610      	mov	r0, r2
    a86a:	9a04      	ldr	r2, [sp, #16]
    a86c:	9103      	str	r1, [sp, #12]
    a86e:	4611      	mov	r1, r2
    a870:	9a03      	ldr	r2, [sp, #12]
    a872:	f009 fcd1 	bl	14218 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>
    a876:	9002      	str	r0, [sp, #8]
    a878:	9101      	str	r1, [sp, #4]
    a87a:	e7ff      	b.n	a87c <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E+0x20>
    a87c:	9802      	ldr	r0, [sp, #8]
    a87e:	9901      	ldr	r1, [sp, #4]
    a880:	b008      	add	sp, #32
    a882:	bd80      	pop	{r7, pc}

0000a884 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>:
    a884:	b580      	push	{r7, lr}
    a886:	b084      	sub	sp, #16
    a888:	9002      	str	r0, [sp, #8]
    a88a:	9103      	str	r1, [sp, #12]
    a88c:	f7ff ff8e 	bl	a7ac <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>
    a890:	9001      	str	r0, [sp, #4]
    a892:	9100      	str	r1, [sp, #0]
    a894:	e7ff      	b.n	a896 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE+0x12>
    a896:	9801      	ldr	r0, [sp, #4]
    a898:	9900      	ldr	r1, [sp, #0]
    a89a:	b004      	add	sp, #16
    a89c:	bd80      	pop	{r7, pc}

0000a89e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>:
    a89e:	b580      	push	{r7, lr}
    a8a0:	b08e      	sub	sp, #56	; 0x38
    a8a2:	9007      	str	r0, [sp, #28]
    a8a4:	6801      	ldr	r1, [r0, #0]
    a8a6:	9005      	str	r0, [sp, #20]
    a8a8:	4608      	mov	r0, r1
    a8aa:	f000 f88e 	bl	a9ca <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
    a8ae:	9004      	str	r0, [sp, #16]
    a8b0:	e7ff      	b.n	a8b2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x14>
    a8b2:	9804      	ldr	r0, [sp, #16]
    a8b4:	f000 f879 	bl	a9aa <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>
    a8b8:	e7ff      	b.n	a8ba <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1c>
    a8ba:	e7ff      	b.n	a8bc <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1e>
    a8bc:	2002      	movs	r0, #2
    a8be:	9008      	str	r0, [sp, #32]
    a8c0:	9808      	ldr	r0, [sp, #32]
    a8c2:	9003      	str	r0, [sp, #12]
    a8c4:	e7ff      	b.n	a8c6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x28>
    a8c6:	9803      	ldr	r0, [sp, #12]
    a8c8:	2800      	cmp	r0, #0
    a8ca:	d007      	beq.n	a8dc <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
    a8cc:	e7ff      	b.n	a8ce <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x30>
    a8ce:	9805      	ldr	r0, [sp, #20]
    a8d0:	6840      	ldr	r0, [r0, #4]
    a8d2:	f7fe fedb 	bl	968c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
    a8d6:	e7ff      	b.n	a8d8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3a>
    a8d8:	e7ff      	b.n	a8da <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3c>
    a8da:	e7ff      	b.n	a8dc <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
    a8dc:	9805      	ldr	r0, [sp, #20]
    a8de:	6800      	ldr	r0, [r0, #0]
    a8e0:	f000 f873 	bl	a9ca <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
    a8e4:	9002      	str	r0, [sp, #8]
    a8e6:	e7ff      	b.n	a8e8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x4a>
    a8e8:	9805      	ldr	r0, [sp, #20]
    a8ea:	6841      	ldr	r1, [r0, #4]
    a8ec:	9a02      	ldr	r2, [sp, #8]
    a8ee:	428a      	cmp	r2, r1
    a8f0:	d02f      	beq.n	a952 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xb4>
    a8f2:	e7ff      	b.n	a8f4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x56>
    a8f4:	9805      	ldr	r0, [sp, #20]
    a8f6:	900a      	str	r0, [sp, #40]	; 0x28
    a8f8:	2101      	movs	r1, #1
    a8fa:	910b      	str	r1, [sp, #44]	; 0x2c
    a8fc:	2102      	movs	r1, #2
    a8fe:	910d      	str	r1, [sp, #52]	; 0x34
    a900:	990d      	ldr	r1, [sp, #52]	; 0x34
    a902:	2900      	cmp	r1, #0
    a904:	d015      	beq.n	a932 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x94>
    a906:	e7ff      	b.n	a908 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x6a>
    a908:	9805      	ldr	r0, [sp, #20]
    a90a:	6800      	ldr	r0, [r0, #0]
    a90c:	f000 f85d 	bl	a9ca <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
    a910:	900c      	str	r0, [sp, #48]	; 0x30
    a912:	9905      	ldr	r1, [sp, #20]
    a914:	680a      	ldr	r2, [r1, #0]
    a916:	9001      	str	r0, [sp, #4]
    a918:	4610      	mov	r0, r2
    a91a:	f000 f856 	bl	a9ca <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
    a91e:	2101      	movs	r1, #1
    a920:	f000 f837 	bl	a992 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
    a924:	f000 f84b 	bl	a9be <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
    a928:	9905      	ldr	r1, [sp, #20]
    a92a:	6008      	str	r0, [r1, #0]
    a92c:	9801      	ldr	r0, [sp, #4]
    a92e:	9009      	str	r0, [sp, #36]	; 0x24
    a930:	e00c      	b.n	a94c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
    a932:	9805      	ldr	r0, [sp, #20]
    a934:	6840      	ldr	r0, [r0, #4]
    a936:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a93a:	f009 f9c4 	bl	13cc6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
    a93e:	9905      	ldr	r1, [sp, #20]
    a940:	6048      	str	r0, [r1, #4]
    a942:	6808      	ldr	r0, [r1, #0]
    a944:	f000 f841 	bl	a9ca <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
    a948:	9009      	str	r0, [sp, #36]	; 0x24
    a94a:	e7ff      	b.n	a94c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
    a94c:	9809      	ldr	r0, [sp, #36]	; 0x24
    a94e:	9000      	str	r0, [sp, #0]
    a950:	e002      	b.n	a958 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xba>
    a952:	2000      	movs	r0, #0
    a954:	9006      	str	r0, [sp, #24]
    a956:	e002      	b.n	a95e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
    a958:	9800      	ldr	r0, [sp, #0]
    a95a:	9006      	str	r0, [sp, #24]
    a95c:	e7ff      	b.n	a95e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
    a95e:	9806      	ldr	r0, [sp, #24]
    a960:	b00e      	add	sp, #56	; 0x38
    a962:	bd80      	pop	{r7, pc}

0000a964 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>:
    a964:	b580      	push	{r7, lr}
    a966:	b084      	sub	sp, #16
    a968:	9002      	str	r0, [sp, #8]
    a96a:	9103      	str	r1, [sp, #12]
    a96c:	f000 f811 	bl	a992 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
    a970:	9001      	str	r0, [sp, #4]
    a972:	e7ff      	b.n	a974 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E+0x10>
    a974:	9801      	ldr	r0, [sp, #4]
    a976:	b004      	add	sp, #16
    a978:	bd80      	pop	{r7, pc}

0000a97a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>:
    a97a:	b580      	push	{r7, lr}
    a97c:	b084      	sub	sp, #16
    a97e:	460a      	mov	r2, r1
    a980:	9002      	str	r0, [sp, #8]
    a982:	f8ad 100e 	strh.w	r1, [sp, #14]
    a986:	9201      	str	r2, [sp, #4]
    a988:	f7fe fff6 	bl	9978 <_ZN4core3ptr5write17h147d4643d861e927E>
    a98c:	e7ff      	b.n	a98e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E+0x14>
    a98e:	b004      	add	sp, #16
    a990:	bd80      	pop	{r7, pc}

0000a992 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>:
    a992:	b084      	sub	sp, #16
    a994:	9001      	str	r0, [sp, #4]
    a996:	9102      	str	r1, [sp, #8]
    a998:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    a99c:	9003      	str	r0, [sp, #12]
    a99e:	9803      	ldr	r0, [sp, #12]
    a9a0:	9000      	str	r0, [sp, #0]
    a9a2:	e7ff      	b.n	a9a4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE+0x12>
    a9a4:	9800      	ldr	r0, [sp, #0]
    a9a6:	b004      	add	sp, #16
    a9a8:	4770      	bx	lr

0000a9aa <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>:
    a9aa:	b082      	sub	sp, #8
    a9ac:	9001      	str	r0, [sp, #4]
    a9ae:	9000      	str	r0, [sp, #0]
    a9b0:	e7ff      	b.n	a9b2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE+0x8>
    a9b2:	9800      	ldr	r0, [sp, #0]
    a9b4:	fab0 f180 	clz	r1, r0
    a9b8:	0948      	lsrs	r0, r1, #5
    a9ba:	b002      	add	sp, #8
    a9bc:	4770      	bx	lr

0000a9be <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>:
    a9be:	b082      	sub	sp, #8
    a9c0:	9001      	str	r0, [sp, #4]
    a9c2:	9000      	str	r0, [sp, #0]
    a9c4:	9800      	ldr	r0, [sp, #0]
    a9c6:	b002      	add	sp, #8
    a9c8:	4770      	bx	lr

0000a9ca <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>:
    a9ca:	b081      	sub	sp, #4
    a9cc:	9000      	str	r0, [sp, #0]
    a9ce:	b001      	add	sp, #4
    a9d0:	4770      	bx	lr
	...

0000a9d4 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>:
use num_derive::ToPrimitive;

/// ST7735 instructions.
#[derive(ToPrimitive)]
    a9d4:	b08a      	sub	sp, #40	; 0x28
    a9d6:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Instruction {
    a9d8:	7800      	ldrb	r0, [r0, #0]
    a9da:	9001      	str	r0, [sp, #4]
    a9dc:	9901      	ldr	r1, [sp, #4]
    a9de:	e8df f011 	tbh	[pc, r1, lsl #1]
    a9e2:	0103      	.short	0x0103
    a9e4:	01020107 	.word	0x01020107
    a9e8:	010c0102 	.word	0x010c0102
    a9ec:	01020102 	.word	0x01020102
    a9f0:	01020102 	.word	0x01020102
    a9f4:	01020111 	.word	0x01020111
    a9f8:	01020102 	.word	0x01020102
    a9fc:	01020102 	.word	0x01020102
    aa00:	01160102 	.word	0x01160102
    aa04:	0120011b 	.word	0x0120011b
    aa08:	01020125 	.word	0x01020125
    aa0c:	01020102 	.word	0x01020102
    aa10:	01020102 	.word	0x01020102
    aa14:	01020102 	.word	0x01020102
    aa18:	01020102 	.word	0x01020102
    aa1c:	01020102 	.word	0x01020102
    aa20:	012a0102 	.word	0x012a0102
    aa24:	0102012f 	.word	0x0102012f
    aa28:	01020102 	.word	0x01020102
    aa2c:	01020102 	.word	0x01020102
    aa30:	01340102 	.word	0x01340102
    aa34:	013e0139 	.word	0x013e0139
    aa38:	01480143 	.word	0x01480143
    aa3c:	014d0102 	.word	0x014d0102
    aa40:	01520102 	.word	0x01520102
    aa44:	01020102 	.word	0x01020102
    aa48:	01020102 	.word	0x01020102
    aa4c:	015c0102 	.word	0x015c0102
    aa50:	01020102 	.word	0x01020102
    aa54:	01570102 	.word	0x01570102
    aa58:	01020102 	.word	0x01020102
    aa5c:	01020102 	.word	0x01020102
    aa60:	01020102 	.word	0x01020102
    aa64:	01020102 	.word	0x01020102
    aa68:	01020102 	.word	0x01020102
    aa6c:	01020102 	.word	0x01020102
    aa70:	01020102 	.word	0x01020102
    aa74:	01020102 	.word	0x01020102
    aa78:	01020102 	.word	0x01020102
    aa7c:	01020102 	.word	0x01020102
    aa80:	01020102 	.word	0x01020102
    aa84:	01020102 	.word	0x01020102
    aa88:	01020102 	.word	0x01020102
    aa8c:	01020102 	.word	0x01020102
    aa90:	01020102 	.word	0x01020102
    aa94:	01020102 	.word	0x01020102
    aa98:	01020102 	.word	0x01020102
    aa9c:	01020102 	.word	0x01020102
    aaa0:	01020102 	.word	0x01020102
    aaa4:	01020102 	.word	0x01020102
    aaa8:	01020102 	.word	0x01020102
    aaac:	01020102 	.word	0x01020102
    aab0:	01020102 	.word	0x01020102
    aab4:	01020102 	.word	0x01020102
    aab8:	01020102 	.word	0x01020102
    aabc:	01020102 	.word	0x01020102
    aac0:	01020102 	.word	0x01020102
    aac4:	01020102 	.word	0x01020102
    aac8:	01020102 	.word	0x01020102
    aacc:	01020102 	.word	0x01020102
    aad0:	01020102 	.word	0x01020102
    aad4:	01020102 	.word	0x01020102
    aad8:	01020102 	.word	0x01020102
    aadc:	01020102 	.word	0x01020102
    aae0:	01020102 	.word	0x01020102
    aae4:	01020102 	.word	0x01020102
    aae8:	01020102 	.word	0x01020102
    aaec:	01020102 	.word	0x01020102
    aaf0:	01020102 	.word	0x01020102
    aaf4:	01020102 	.word	0x01020102
    aaf8:	01020102 	.word	0x01020102
    aafc:	01020102 	.word	0x01020102
    ab00:	01020102 	.word	0x01020102
    ab04:	01020102 	.word	0x01020102
    ab08:	01020102 	.word	0x01020102
    ab0c:	01020102 	.word	0x01020102
    ab10:	01020102 	.word	0x01020102
    ab14:	01020102 	.word	0x01020102
    ab18:	01020102 	.word	0x01020102
    ab1c:	01020102 	.word	0x01020102
    ab20:	01020102 	.word	0x01020102
    ab24:	01020102 	.word	0x01020102
    ab28:	01020102 	.word	0x01020102
    ab2c:	01020102 	.word	0x01020102
    ab30:	01020102 	.word	0x01020102
    ab34:	01020102 	.word	0x01020102
    ab38:	01020102 	.word	0x01020102
    ab3c:	01020102 	.word	0x01020102
    ab40:	01020102 	.word	0x01020102
    ab44:	01660161 	.word	0x01660161
    ab48:	0170016b 	.word	0x0170016b
    ab4c:	01750102 	.word	0x01750102
    ab50:	01020102 	.word	0x01020102
    ab54:	01020102 	.word	0x01020102
    ab58:	01020102 	.word	0x01020102
    ab5c:	01020102 	.word	0x01020102
    ab60:	017a0102 	.word	0x017a0102
    ab64:	0184017f 	.word	0x0184017f
    ab68:	018e0189 	.word	0x018e0189
    ab6c:	01020193 	.word	0x01020193
    ab70:	01020102 	.word	0x01020102
    ab74:	01020102 	.word	0x01020102
    ab78:	01020102 	.word	0x01020102
    ab7c:	01020102 	.word	0x01020102
    ab80:	01020102 	.word	0x01020102
    ab84:	01020102 	.word	0x01020102
    ab88:	01020102 	.word	0x01020102
    ab8c:	01020102 	.word	0x01020102
    ab90:	01020102 	.word	0x01020102
    ab94:	01980102 	.word	0x01980102
    ab98:	01a2019d 	.word	0x01a2019d
    ab9c:	010201a7 	.word	0x010201a7
    aba0:	01b10102 	.word	0x01b10102
    aba4:	010200fd 	.word	0x010200fd
    aba8:	01020102 	.word	0x01020102
    abac:	01020102 	.word	0x01020102
    abb0:	01020102 	.word	0x01020102
    abb4:	01020102 	.word	0x01020102
    abb8:	01020102 	.word	0x01020102
    abbc:	01020102 	.word	0x01020102
    abc0:	01020102 	.word	0x01020102
    abc4:	01020102 	.word	0x01020102
    abc8:	01020102 	.word	0x01020102
    abcc:	01020102 	.word	0x01020102
    abd0:	01020102 	.word	0x01020102
    abd4:	01020102 	.word	0x01020102
    abd8:	01ac0102 	.word	0x01ac0102
    abdc:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    abde:	9007      	str	r0, [sp, #28]
    abe0:	20e1      	movs	r0, #225	; 0xe1
    abe2:	9006      	str	r0, [sp, #24]
    abe4:	e0b3      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    abe6:	defe      	udf	#254	; 0xfe
    abe8:	2000      	movs	r0, #0
    abea:	9007      	str	r0, [sp, #28]
    abec:	9006      	str	r0, [sp, #24]
    abee:	e0ae      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    abf0:	2000      	movs	r0, #0
    abf2:	9007      	str	r0, [sp, #28]
    abf4:	2001      	movs	r0, #1
    abf6:	9006      	str	r0, [sp, #24]
    abf8:	e0a9      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    abfa:	2000      	movs	r0, #0
    abfc:	9007      	str	r0, [sp, #28]
    abfe:	2004      	movs	r0, #4
    ac00:	9006      	str	r0, [sp, #24]
    ac02:	e0a4      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac04:	2000      	movs	r0, #0
    ac06:	9007      	str	r0, [sp, #28]
    ac08:	2009      	movs	r0, #9
    ac0a:	9006      	str	r0, [sp, #24]
    ac0c:	e09f      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac0e:	2000      	movs	r0, #0
    ac10:	9007      	str	r0, [sp, #28]
    ac12:	2010      	movs	r0, #16
    ac14:	9006      	str	r0, [sp, #24]
    ac16:	e09a      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac18:	2000      	movs	r0, #0
    ac1a:	9007      	str	r0, [sp, #28]
    ac1c:	2011      	movs	r0, #17
    ac1e:	9006      	str	r0, [sp, #24]
    ac20:	e095      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac22:	2000      	movs	r0, #0
    ac24:	9007      	str	r0, [sp, #28]
    ac26:	2012      	movs	r0, #18
    ac28:	9006      	str	r0, [sp, #24]
    ac2a:	e090      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac2c:	2000      	movs	r0, #0
    ac2e:	9007      	str	r0, [sp, #28]
    ac30:	2013      	movs	r0, #19
    ac32:	9006      	str	r0, [sp, #24]
    ac34:	e08b      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac36:	2000      	movs	r0, #0
    ac38:	9007      	str	r0, [sp, #28]
    ac3a:	2020      	movs	r0, #32
    ac3c:	9006      	str	r0, [sp, #24]
    ac3e:	e086      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac40:	2000      	movs	r0, #0
    ac42:	9007      	str	r0, [sp, #28]
    ac44:	2021      	movs	r0, #33	; 0x21
    ac46:	9006      	str	r0, [sp, #24]
    ac48:	e081      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac4a:	2000      	movs	r0, #0
    ac4c:	9007      	str	r0, [sp, #28]
    ac4e:	2028      	movs	r0, #40	; 0x28
    ac50:	9006      	str	r0, [sp, #24]
    ac52:	e07c      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac54:	2000      	movs	r0, #0
    ac56:	9007      	str	r0, [sp, #28]
    ac58:	2029      	movs	r0, #41	; 0x29
    ac5a:	9006      	str	r0, [sp, #24]
    ac5c:	e077      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac5e:	2000      	movs	r0, #0
    ac60:	9007      	str	r0, [sp, #28]
    ac62:	202a      	movs	r0, #42	; 0x2a
    ac64:	9006      	str	r0, [sp, #24]
    ac66:	e072      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac68:	2000      	movs	r0, #0
    ac6a:	9007      	str	r0, [sp, #28]
    ac6c:	202b      	movs	r0, #43	; 0x2b
    ac6e:	9006      	str	r0, [sp, #24]
    ac70:	e06d      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac72:	2000      	movs	r0, #0
    ac74:	9007      	str	r0, [sp, #28]
    ac76:	202c      	movs	r0, #44	; 0x2c
    ac78:	9006      	str	r0, [sp, #24]
    ac7a:	e068      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac7c:	2000      	movs	r0, #0
    ac7e:	9007      	str	r0, [sp, #28]
    ac80:	202e      	movs	r0, #46	; 0x2e
    ac82:	9006      	str	r0, [sp, #24]
    ac84:	e063      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac86:	2000      	movs	r0, #0
    ac88:	9007      	str	r0, [sp, #28]
    ac8a:	2030      	movs	r0, #48	; 0x30
    ac8c:	9006      	str	r0, [sp, #24]
    ac8e:	e05e      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac90:	2000      	movs	r0, #0
    ac92:	9007      	str	r0, [sp, #28]
    ac94:	203a      	movs	r0, #58	; 0x3a
    ac96:	9006      	str	r0, [sp, #24]
    ac98:	e059      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac9a:	2000      	movs	r0, #0
    ac9c:	9007      	str	r0, [sp, #28]
    ac9e:	2036      	movs	r0, #54	; 0x36
    aca0:	9006      	str	r0, [sp, #24]
    aca2:	e054      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aca4:	2000      	movs	r0, #0
    aca6:	9007      	str	r0, [sp, #28]
    aca8:	20b1      	movs	r0, #177	; 0xb1
    acaa:	9006      	str	r0, [sp, #24]
    acac:	e04f      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    acae:	2000      	movs	r0, #0
    acb0:	9007      	str	r0, [sp, #28]
    acb2:	20b2      	movs	r0, #178	; 0xb2
    acb4:	9006      	str	r0, [sp, #24]
    acb6:	e04a      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    acb8:	2000      	movs	r0, #0
    acba:	9007      	str	r0, [sp, #28]
    acbc:	20b3      	movs	r0, #179	; 0xb3
    acbe:	9006      	str	r0, [sp, #24]
    acc0:	e045      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    acc2:	2000      	movs	r0, #0
    acc4:	9007      	str	r0, [sp, #28]
    acc6:	20b4      	movs	r0, #180	; 0xb4
    acc8:	9006      	str	r0, [sp, #24]
    acca:	e040      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    accc:	2000      	movs	r0, #0
    acce:	9007      	str	r0, [sp, #28]
    acd0:	20b6      	movs	r0, #182	; 0xb6
    acd2:	9006      	str	r0, [sp, #24]
    acd4:	e03b      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    acd6:	2000      	movs	r0, #0
    acd8:	9007      	str	r0, [sp, #28]
    acda:	20c0      	movs	r0, #192	; 0xc0
    acdc:	9006      	str	r0, [sp, #24]
    acde:	e036      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ace0:	2000      	movs	r0, #0
    ace2:	9007      	str	r0, [sp, #28]
    ace4:	20c1      	movs	r0, #193	; 0xc1
    ace6:	9006      	str	r0, [sp, #24]
    ace8:	e031      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    acea:	2000      	movs	r0, #0
    acec:	9007      	str	r0, [sp, #28]
    acee:	20c2      	movs	r0, #194	; 0xc2
    acf0:	9006      	str	r0, [sp, #24]
    acf2:	e02c      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    acf4:	2000      	movs	r0, #0
    acf6:	9007      	str	r0, [sp, #28]
    acf8:	20c3      	movs	r0, #195	; 0xc3
    acfa:	9006      	str	r0, [sp, #24]
    acfc:	e027      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    acfe:	2000      	movs	r0, #0
    ad00:	9007      	str	r0, [sp, #28]
    ad02:	20c4      	movs	r0, #196	; 0xc4
    ad04:	9006      	str	r0, [sp, #24]
    ad06:	e022      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ad08:	2000      	movs	r0, #0
    ad0a:	9007      	str	r0, [sp, #28]
    ad0c:	20c5      	movs	r0, #197	; 0xc5
    ad0e:	9006      	str	r0, [sp, #24]
    ad10:	e01d      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ad12:	2000      	movs	r0, #0
    ad14:	9007      	str	r0, [sp, #28]
    ad16:	20da      	movs	r0, #218	; 0xda
    ad18:	9006      	str	r0, [sp, #24]
    ad1a:	e018      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ad1c:	2000      	movs	r0, #0
    ad1e:	9007      	str	r0, [sp, #28]
    ad20:	20db      	movs	r0, #219	; 0xdb
    ad22:	9006      	str	r0, [sp, #24]
    ad24:	e013      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ad26:	2000      	movs	r0, #0
    ad28:	9007      	str	r0, [sp, #28]
    ad2a:	20dc      	movs	r0, #220	; 0xdc
    ad2c:	9006      	str	r0, [sp, #24]
    ad2e:	e00e      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ad30:	2000      	movs	r0, #0
    ad32:	9007      	str	r0, [sp, #28]
    ad34:	20dd      	movs	r0, #221	; 0xdd
    ad36:	9006      	str	r0, [sp, #24]
    ad38:	e009      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ad3a:	2000      	movs	r0, #0
    ad3c:	9007      	str	r0, [sp, #28]
    ad3e:	20fc      	movs	r0, #252	; 0xfc
    ad40:	9006      	str	r0, [sp, #24]
    ad42:	e004      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ad44:	2000      	movs	r0, #0
    ad46:	9007      	str	r0, [sp, #28]
    ad48:	20e0      	movs	r0, #224	; 0xe0
    ad4a:	9006      	str	r0, [sp, #24]
    ad4c:	e7ff      	b.n	ad4e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ad4e:	9806      	ldr	r0, [sp, #24]
    ad50:	9907      	ldr	r1, [sp, #28]
    ad52:	9105      	str	r1, [sp, #20]
    ad54:	9004      	str	r0, [sp, #16]
    ad56:	2000      	movs	r0, #0
    ad58:	9003      	str	r0, [sp, #12]
    ad5a:	2001      	movs	r0, #1
    ad5c:	9002      	str	r0, [sp, #8]
    ad5e:	9802      	ldr	r0, [sp, #8]
    ad60:	9903      	ldr	r1, [sp, #12]
    ad62:	9a04      	ldr	r2, [sp, #16]
    ad64:	9b05      	ldr	r3, [sp, #20]
    ad66:	b00a      	add	sp, #40	; 0x28
    ad68:	4770      	bx	lr

0000ad6a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>:
    ad6a:	b580      	push	{r7, lr}
    ad6c:	b08a      	sub	sp, #40	; 0x28
    ad6e:	9009      	str	r0, [sp, #36]	; 0x24
    ad70:	f7ff fe30 	bl	a9d4 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>
    ad74:	9108      	str	r1, [sp, #32]
    ad76:	9007      	str	r0, [sp, #28]
    ad78:	9306      	str	r3, [sp, #24]
    ad7a:	9205      	str	r2, [sp, #20]
    ad7c:	e7ff      	b.n	ad7e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x14>
    ad7e:	9807      	ldr	r0, [sp, #28]
    ad80:	9908      	ldr	r1, [sp, #32]
    ad82:	9a05      	ldr	r2, [sp, #20]
    ad84:	9b06      	ldr	r3, [sp, #24]
    ad86:	f000 f859 	bl	ae3c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>
    ad8a:	9104      	str	r1, [sp, #16]
    ad8c:	9003      	str	r0, [sp, #12]
    ad8e:	9302      	str	r3, [sp, #8]
    ad90:	9201      	str	r2, [sp, #4]
    ad92:	e7ff      	b.n	ad94 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x2a>
    ad94:	9803      	ldr	r0, [sp, #12]
    ad96:	9904      	ldr	r1, [sp, #16]
    ad98:	9a01      	ldr	r2, [sp, #4]
    ad9a:	9b02      	ldr	r3, [sp, #8]
    ad9c:	b00a      	add	sp, #40	; 0x28
    ad9e:	bd80      	pop	{r7, pc}

0000ada0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>:
#[derive(ToPrimitive)]
    ada0:	b08a      	sub	sp, #40	; 0x28
    ada2:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Orientation {
    ada4:	7800      	ldrb	r0, [r0, #0]
    ada6:	4601      	mov	r1, r0
    ada8:	2800      	cmp	r0, #0
    adaa:	9101      	str	r1, [sp, #4]
    adac:	d00f      	beq.n	adce <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x2e>
    adae:	e7ff      	b.n	adb0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x10>
    adb0:	9801      	ldr	r0, [sp, #4]
    adb2:	2860      	cmp	r0, #96	; 0x60
    adb4:	d00f      	beq.n	add6 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x36>
    adb6:	e7ff      	b.n	adb8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x18>
    adb8:	9801      	ldr	r0, [sp, #4]
    adba:	28a0      	cmp	r0, #160	; 0xa0
    adbc:	d001      	beq.n	adc2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x22>
    adbe:	e7ff      	b.n	adc0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x20>
    adc0:	e00e      	b.n	ade0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x40>
    adc2:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    adc4:	9007      	str	r0, [sp, #28]
    adc6:	20a0      	movs	r0, #160	; 0xa0
    adc8:	9006      	str	r0, [sp, #24]
    adca:	e00e      	b.n	adea <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    adcc:	defe      	udf	#254	; 0xfe
    adce:	2000      	movs	r0, #0
    add0:	9007      	str	r0, [sp, #28]
    add2:	9006      	str	r0, [sp, #24]
    add4:	e009      	b.n	adea <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    add6:	2000      	movs	r0, #0
    add8:	9007      	str	r0, [sp, #28]
    adda:	2060      	movs	r0, #96	; 0x60
    addc:	9006      	str	r0, [sp, #24]
    adde:	e004      	b.n	adea <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    ade0:	2000      	movs	r0, #0
    ade2:	9007      	str	r0, [sp, #28]
    ade4:	20c0      	movs	r0, #192	; 0xc0
    ade6:	9006      	str	r0, [sp, #24]
    ade8:	e7ff      	b.n	adea <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    adea:	9806      	ldr	r0, [sp, #24]
    adec:	9907      	ldr	r1, [sp, #28]
    adee:	9105      	str	r1, [sp, #20]
    adf0:	9004      	str	r0, [sp, #16]
    adf2:	2000      	movs	r0, #0
    adf4:	9003      	str	r0, [sp, #12]
    adf6:	2001      	movs	r0, #1
    adf8:	9002      	str	r0, [sp, #8]
    adfa:	9802      	ldr	r0, [sp, #8]
    adfc:	9903      	ldr	r1, [sp, #12]
    adfe:	9a04      	ldr	r2, [sp, #16]
    ae00:	9b05      	ldr	r3, [sp, #20]
    ae02:	b00a      	add	sp, #40	; 0x28
    ae04:	4770      	bx	lr

0000ae06 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>:
    ae06:	b580      	push	{r7, lr}
    ae08:	b08a      	sub	sp, #40	; 0x28
    ae0a:	9009      	str	r0, [sp, #36]	; 0x24
    ae0c:	f7ff ffc8 	bl	ada0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>
    ae10:	9108      	str	r1, [sp, #32]
    ae12:	9007      	str	r0, [sp, #28]
    ae14:	9306      	str	r3, [sp, #24]
    ae16:	9205      	str	r2, [sp, #20]
    ae18:	e7ff      	b.n	ae1a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x14>
    ae1a:	9807      	ldr	r0, [sp, #28]
    ae1c:	9908      	ldr	r1, [sp, #32]
    ae1e:	9a05      	ldr	r2, [sp, #20]
    ae20:	9b06      	ldr	r3, [sp, #24]
    ae22:	f000 f863 	bl	aeec <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>
    ae26:	9104      	str	r1, [sp, #16]
    ae28:	9003      	str	r0, [sp, #12]
    ae2a:	9302      	str	r3, [sp, #8]
    ae2c:	9201      	str	r2, [sp, #4]
    ae2e:	e7ff      	b.n	ae30 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x2a>
    ae30:	9803      	ldr	r0, [sp, #12]
    ae32:	9904      	ldr	r1, [sp, #16]
    ae34:	9a01      	ldr	r2, [sp, #4]
    ae36:	9b02      	ldr	r3, [sp, #8]
    ae38:	b00a      	add	sp, #40	; 0x28
    ae3a:	bd80      	pop	{r7, pc}

0000ae3c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>:
    ae3c:	b5b0      	push	{r4, r5, r7, lr}
    ae3e:	b090      	sub	sp, #64	; 0x40
    ae40:	469c      	mov	ip, r3
    ae42:	4696      	mov	lr, r2
    ae44:	460c      	mov	r4, r1
    ae46:	4605      	mov	r5, r0
    ae48:	9103      	str	r1, [sp, #12]
    ae4a:	9002      	str	r0, [sp, #8]
    ae4c:	9305      	str	r3, [sp, #20]
    ae4e:	9204      	str	r2, [sp, #16]
    ae50:	2000      	movs	r0, #0
    ae52:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ae56:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ae5a:	2001      	movs	r0, #1
    ae5c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ae60:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ae64:	9802      	ldr	r0, [sp, #8]
    ae66:	2800      	cmp	r0, #0
    ae68:	d001      	beq.n	ae6e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x32>
    ae6a:	e7ff      	b.n	ae6c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x30>
    ae6c:	e004      	b.n	ae78 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x3c>
    ae6e:	2000      	movs	r0, #0
    ae70:	9007      	str	r0, [sp, #28]
    ae72:	9006      	str	r0, [sp, #24]
    ae74:	e023      	b.n	aebe <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    ae76:	defe      	udf	#254	; 0xfe
    ae78:	2000      	movs	r0, #0
    ae7a:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ae7e:	9904      	ldr	r1, [sp, #16]
    ae80:	9a05      	ldr	r2, [sp, #20]
    ae82:	920f      	str	r2, [sp, #60]	; 0x3c
    ae84:	910e      	str	r1, [sp, #56]	; 0x38
    ae86:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ae8a:	920b      	str	r2, [sp, #44]	; 0x2c
    ae8c:	910a      	str	r1, [sp, #40]	; 0x28
    ae8e:	980a      	ldr	r0, [sp, #40]	; 0x28
    ae90:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ae92:	f000 f883 	bl	af9c <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>
    ae96:	9101      	str	r1, [sp, #4]
    ae98:	9000      	str	r0, [sp, #0]
    ae9a:	e7ff      	b.n	ae9c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x60>
    ae9c:	9800      	ldr	r0, [sp, #0]
    ae9e:	9008      	str	r0, [sp, #32]
    aea0:	9901      	ldr	r1, [sp, #4]
    aea2:	9109      	str	r1, [sp, #36]	; 0x24
    aea4:	2200      	movs	r2, #0
    aea6:	9207      	str	r2, [sp, #28]
    aea8:	2201      	movs	r2, #1
    aeaa:	9206      	str	r2, [sp, #24]
    aeac:	e007      	b.n	aebe <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    aeae:	9802      	ldr	r0, [sp, #8]
    aeb0:	2801      	cmp	r0, #1
    aeb2:	d010      	beq.n	aed6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x9a>
    aeb4:	e019      	b.n	aeea <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xae>
    aeb6:	2000      	movs	r0, #0
    aeb8:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aebc:	e7f7      	b.n	aeae <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    aebe:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    aec2:	07c0      	lsls	r0, r0, #31
    aec4:	2800      	cmp	r0, #0
    aec6:	d1f6      	bne.n	aeb6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x7a>
    aec8:	e7f1      	b.n	aeae <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    aeca:	9806      	ldr	r0, [sp, #24]
    aecc:	9907      	ldr	r1, [sp, #28]
    aece:	9a08      	ldr	r2, [sp, #32]
    aed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aed2:	b010      	add	sp, #64	; 0x40
    aed4:	bdb0      	pop	{r4, r5, r7, pc}
    aed6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    aeda:	07c0      	lsls	r0, r0, #31
    aedc:	2800      	cmp	r0, #0
    aede:	d0f4      	beq.n	aeca <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    aee0:	e7ff      	b.n	aee2 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xa6>
    aee2:	2000      	movs	r0, #0
    aee4:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aee8:	e7ef      	b.n	aeca <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    aeea:	e7ee      	b.n	aeca <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>

0000aeec <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>:
    aeec:	b5b0      	push	{r4, r5, r7, lr}
    aeee:	b090      	sub	sp, #64	; 0x40
    aef0:	469c      	mov	ip, r3
    aef2:	4696      	mov	lr, r2
    aef4:	460c      	mov	r4, r1
    aef6:	4605      	mov	r5, r0
    aef8:	9103      	str	r1, [sp, #12]
    aefa:	9002      	str	r0, [sp, #8]
    aefc:	9305      	str	r3, [sp, #20]
    aefe:	9204      	str	r2, [sp, #16]
    af00:	2000      	movs	r0, #0
    af02:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    af06:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    af0a:	2001      	movs	r0, #1
    af0c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    af10:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    af14:	9802      	ldr	r0, [sp, #8]
    af16:	2800      	cmp	r0, #0
    af18:	d001      	beq.n	af1e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x32>
    af1a:	e7ff      	b.n	af1c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x30>
    af1c:	e004      	b.n	af28 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x3c>
    af1e:	2000      	movs	r0, #0
    af20:	9007      	str	r0, [sp, #28]
    af22:	9006      	str	r0, [sp, #24]
    af24:	e023      	b.n	af6e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    af26:	defe      	udf	#254	; 0xfe
    af28:	2000      	movs	r0, #0
    af2a:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    af2e:	9904      	ldr	r1, [sp, #16]
    af30:	9a05      	ldr	r2, [sp, #20]
    af32:	920f      	str	r2, [sp, #60]	; 0x3c
    af34:	910e      	str	r1, [sp, #56]	; 0x38
    af36:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    af3a:	920b      	str	r2, [sp, #44]	; 0x2c
    af3c:	910a      	str	r1, [sp, #40]	; 0x28
    af3e:	980a      	ldr	r0, [sp, #40]	; 0x28
    af40:	990b      	ldr	r1, [sp, #44]	; 0x2c
    af42:	f009 fa37 	bl	143b4 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>
    af46:	9101      	str	r1, [sp, #4]
    af48:	9000      	str	r0, [sp, #0]
    af4a:	e7ff      	b.n	af4c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x60>
    af4c:	9800      	ldr	r0, [sp, #0]
    af4e:	9008      	str	r0, [sp, #32]
    af50:	9901      	ldr	r1, [sp, #4]
    af52:	9109      	str	r1, [sp, #36]	; 0x24
    af54:	2200      	movs	r2, #0
    af56:	9207      	str	r2, [sp, #28]
    af58:	2201      	movs	r2, #1
    af5a:	9206      	str	r2, [sp, #24]
    af5c:	e007      	b.n	af6e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    af5e:	9802      	ldr	r0, [sp, #8]
    af60:	2801      	cmp	r0, #1
    af62:	d010      	beq.n	af86 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x9a>
    af64:	e019      	b.n	af9a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xae>
    af66:	2000      	movs	r0, #0
    af68:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    af6c:	e7f7      	b.n	af5e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    af6e:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    af72:	07c0      	lsls	r0, r0, #31
    af74:	2800      	cmp	r0, #0
    af76:	d1f6      	bne.n	af66 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x7a>
    af78:	e7f1      	b.n	af5e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    af7a:	9806      	ldr	r0, [sp, #24]
    af7c:	9907      	ldr	r1, [sp, #28]
    af7e:	9a08      	ldr	r2, [sp, #32]
    af80:	9b09      	ldr	r3, [sp, #36]	; 0x24
    af82:	b010      	add	sp, #64	; 0x40
    af84:	bdb0      	pop	{r4, r5, r7, pc}
    af86:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    af8a:	07c0      	lsls	r0, r0, #31
    af8c:	2800      	cmp	r0, #0
    af8e:	d0f4      	beq.n	af7a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    af90:	e7ff      	b.n	af92 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xa6>
    af92:	2000      	movs	r0, #0
    af94:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    af98:	e7ef      	b.n	af7a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    af9a:	e7ee      	b.n	af7a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>

0000af9c <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>:
    af9c:	b084      	sub	sp, #16
    af9e:	460a      	mov	r2, r1
    afa0:	4603      	mov	r3, r0
    afa2:	9103      	str	r1, [sp, #12]
    afa4:	9002      	str	r0, [sp, #8]
    afa6:	b004      	add	sp, #16
    afa8:	4770      	bx	lr

0000afaa <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E>:
    afaa:	b084      	sub	sp, #16
    afac:	9000      	str	r0, [sp, #0]
    afae:	9101      	str	r1, [sp, #4]
    afb0:	9102      	str	r1, [sp, #8]
    afb2:	9003      	str	r0, [sp, #12]
    afb4:	6802      	ldr	r2, [r0, #0]
    afb6:	6840      	ldr	r0, [r0, #4]
    afb8:	680b      	ldr	r3, [r1, #0]
    afba:	6849      	ldr	r1, [r1, #4]
    afbc:	4048      	eors	r0, r1
    afbe:	ea82 0103 	eor.w	r1, r2, r3
    afc2:	4308      	orrs	r0, r1
    afc4:	fab0 f080 	clz	r0, r0
    afc8:	0940      	lsrs	r0, r0, #5
    afca:	b004      	add	sp, #16
    afcc:	4770      	bx	lr

0000afce <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E>:
/// ```rust
/// let peripherals = nrf52::Peripherals::take().unwrap();
/// let nfcpins = peripherals.UICR.nfcpins.read().bits();
/// console::print("nfcpins = "); console::printhex(nfcpins as u8); console::print("\n");
/// ```
pub fn start_touch_sensor() -> MynewtResult<()> {
    afce:	b5b0      	push	{r4, r5, r7, lr}
    afd0:	b0be      	sub	sp, #248	; 0xf8
    console::print("Rust touch sensor\n");
    afd2:	f64b 40f0 	movw	r0, #48368	; 0xbcf0
    afd6:	f2c0 0001 	movt	r0, #1
    afda:	2112      	movs	r1, #18
    afdc:	f7fe f8eb 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    afe0:	e7ff      	b.n	afe2 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x14>

    //  Init GPIO for the Reset Pin
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    afe2:	f240 1064 	movw	r0, #356	; 0x164
    afe6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    afea:	210a      	movs	r1, #10
    afec:	f008 fd7b 	bl	13ae6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    aff0:	9012      	str	r0, [sp, #72]	; 0x48
    aff2:	e7ff      	b.n	aff4 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x26>
    aff4:	9812      	ldr	r0, [sp, #72]	; 0x48
    aff6:	f7fd fea2 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    affa:	9014      	str	r0, [sp, #80]	; 0x50
    affc:	e7ff      	b.n	affe <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x30>
    affe:	9814      	ldr	r0, [sp, #80]	; 0x50
    b000:	1e41      	subs	r1, r0, #1
    b002:	bf18      	it	ne
    b004:	2101      	movne	r1, #1
    b006:	2801      	cmp	r0, #1
    b008:	d001      	beq.n	b00e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x40>
    b00a:	e7ff      	b.n	b00c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x3e>
    b00c:	e008      	b.n	b020 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x52>

    //  Reset the touch controller by switching the Reset Pin low then high with pauses. Based on https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L1017-L1167
    unsafe {
        TOUCH_RESET.set_low() ? ;
    b00e:	f240 1064 	movw	r0, #356	; 0x164
    b012:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b016:	f008 fdff 	bl	13c18 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    b01a:	9011      	str	r0, [sp, #68]	; 0x44
    b01c:	e00f      	b.n	b03e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x70>
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    b01e:	defe      	udf	#254	; 0xfe
    b020:	9814      	ldr	r0, [sp, #80]	; 0x50
    b022:	9036      	str	r0, [sp, #216]	; 0xd8
    b024:	f006 ff9e 	bl	11f64 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    b028:	9010      	str	r0, [sp, #64]	; 0x40
    b02a:	e002      	b.n	b032 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x64>
    assert_eq!(rc, 0, "IRQ init fail");

    //  Start monitoring for touch controller interrupts
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    Ok(())
}
    b02c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    b02e:	b03e      	add	sp, #248	; 0xf8
    b030:	bdb0      	pop	{r4, r5, r7, pc}
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    b032:	9810      	ldr	r0, [sp, #64]	; 0x40
    b034:	f7fd fe77 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    b038:	9013      	str	r0, [sp, #76]	; 0x4c
    b03a:	e7ff      	b.n	b03c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x6e>
    b03c:	e7f6      	b.n	b02c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>
        TOUCH_RESET.set_low() ? ;
    b03e:	9811      	ldr	r0, [sp, #68]	; 0x44
    b040:	f7fd fe7d 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    b044:	9015      	str	r0, [sp, #84]	; 0x54
    b046:	e7ff      	b.n	b048 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x7a>
    b048:	9815      	ldr	r0, [sp, #84]	; 0x54
    b04a:	1e41      	subs	r1, r0, #1
    b04c:	bf18      	it	ne
    b04e:	2101      	movne	r1, #1
    b050:	2801      	cmp	r0, #1
    b052:	d001      	beq.n	b058 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x8a>
    b054:	e7ff      	b.n	b056 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x88>
    b056:	e008      	b.n	b06a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x9c>
        TOUCH_DELAY.delay_ms(20);
    b058:	f240 1068 	movw	r0, #360	; 0x168
    b05c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b060:	2114      	movs	r1, #20
    b062:	f008 fdf0 	bl	13c46 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    b066:	e00d      	b.n	b084 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb6>
        TOUCH_RESET.set_low() ? ;
    b068:	defe      	udf	#254	; 0xfe
    b06a:	9815      	ldr	r0, [sp, #84]	; 0x54
    b06c:	9037      	str	r0, [sp, #220]	; 0xdc
    b06e:	f006 ff79 	bl	11f64 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    b072:	900f      	str	r0, [sp, #60]	; 0x3c
    b074:	e7ff      	b.n	b076 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xa8>
    b076:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b078:	f7fd fe55 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    b07c:	9013      	str	r0, [sp, #76]	; 0x4c
    b07e:	e7ff      	b.n	b080 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb2>
    b080:	e7ff      	b.n	b082 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb4>
    b082:	e7d3      	b.n	b02c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>
        TOUCH_RESET.set_high() ? ;
    b084:	f240 1064 	movw	r0, #356	; 0x164
    b088:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b08c:	f008 fdcf 	bl	13c2e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    b090:	900e      	str	r0, [sp, #56]	; 0x38
    b092:	e7ff      	b.n	b094 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xc6>
    b094:	980e      	ldr	r0, [sp, #56]	; 0x38
    b096:	f7fd fe52 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    b09a:	9016      	str	r0, [sp, #88]	; 0x58
    b09c:	e7ff      	b.n	b09e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xd0>
    b09e:	9816      	ldr	r0, [sp, #88]	; 0x58
    b0a0:	1e41      	subs	r1, r0, #1
    b0a2:	bf18      	it	ne
    b0a4:	2101      	movne	r1, #1
    b0a6:	2801      	cmp	r0, #1
    b0a8:	d001      	beq.n	b0ae <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xe0>
    b0aa:	e7ff      	b.n	b0ac <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xde>
    b0ac:	e008      	b.n	b0c0 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xf2>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    b0ae:	f240 1068 	movw	r0, #360	; 0x168
    b0b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b0b6:	21c8      	movs	r1, #200	; 0xc8
    b0b8:	f008 fdc5 	bl	13c46 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    b0bc:	e00c      	b.n	b0d8 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x10a>
        TOUCH_RESET.set_high() ? ;
    b0be:	defe      	udf	#254	; 0xfe
    b0c0:	9816      	ldr	r0, [sp, #88]	; 0x58
    b0c2:	9038      	str	r0, [sp, #224]	; 0xe0
    b0c4:	f006 ff4e 	bl	11f64 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    b0c8:	900d      	str	r0, [sp, #52]	; 0x34
    b0ca:	e7ff      	b.n	b0cc <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xfe>
    b0cc:	980d      	ldr	r0, [sp, #52]	; 0x34
    b0ce:	f7fd fe2a 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    b0d2:	9013      	str	r0, [sp, #76]	; 0x4c
    b0d4:	e7ff      	b.n	b0d6 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x108>
    b0d6:	e7d4      	b.n	b082 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb4>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    b0d8:	f240 1068 	movw	r0, #360	; 0x168
    b0dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b0e0:	21c8      	movs	r1, #200	; 0xc8
    b0e2:	f008 fdb0 	bl	13c46 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    b0e6:	e7ff      	b.n	b0e8 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x11a>
    unsafe { TOUCH_EVENT.ev_cb = Some( touch_event_callback ) };
    b0e8:	f24b 208b 	movw	r0, #45707	; 0xb28b
    b0ec:	f2c0 0000 	movt	r0, #0
    b0f0:	9017      	str	r0, [sp, #92]	; 0x5c
    b0f2:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b0f4:	f240 11fc 	movw	r1, #508	; 0x1fc
    b0f8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    b0fc:	6048      	str	r0, [r1, #4]
        Some( touch_interrupt_handler ),  //  Call `touch_interrupt_handler()` upon detecting interrupt
    b0fe:	f24b 203f 	movw	r0, #45631	; 0xb23f
    b102:	f2c0 0000 	movt	r0, #0
    b106:	9019      	str	r0, [sp, #100]	; 0x64
        core::ptr::null_mut(),            //  No arguments for `touch_interrupt_handler()`
    b108:	e7ff      	b.n	b10a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x13c>
    let rc = unsafe { hal::hal_gpio_irq_init(
    b10a:	9919      	ldr	r1, [sp, #100]	; 0x64
    b10c:	4668      	mov	r0, sp
    b10e:	2201      	movs	r2, #1
    b110:	6002      	str	r2, [r0, #0]
    b112:	201c      	movs	r0, #28
    b114:	2200      	movs	r2, #0
    b116:	2302      	movs	r3, #2
    b118:	f00c f8e4 	bl	172e4 <hal_gpio_irq_init>
    b11c:	9018      	str	r0, [sp, #96]	; 0x60
    b11e:	e7ff      	b.n	b120 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x152>
    assert_eq!(rc, 0, "IRQ init fail");
    b120:	f64b 5008 	movw	r0, #48392	; 0xbd08
    b124:	f2c0 0001 	movt	r0, #1
    b128:	6800      	ldr	r0, [r0, #0]
    b12a:	a918      	add	r1, sp, #96	; 0x60
    b12c:	911a      	str	r1, [sp, #104]	; 0x68
    b12e:	901b      	str	r0, [sp, #108]	; 0x6c
    b130:	981a      	ldr	r0, [sp, #104]	; 0x68
    b132:	9039      	str	r0, [sp, #228]	; 0xe4
    b134:	991b      	ldr	r1, [sp, #108]	; 0x6c
    b136:	913a      	str	r1, [sp, #232]	; 0xe8
    b138:	6802      	ldr	r2, [r0, #0]
    b13a:	680b      	ldr	r3, [r1, #0]
    b13c:	429a      	cmp	r2, r3
    b13e:	900c      	str	r0, [sp, #48]	; 0x30
    b140:	910b      	str	r1, [sp, #44]	; 0x2c
    b142:	d104      	bne.n	b14e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x180>
    b144:	e7ff      	b.n	b146 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x178>
    b146:	201c      	movs	r0, #28
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    b148:	f00c f908 	bl	1735c <hal_gpio_irq_enable>
    b14c:	e072      	b.n	b234 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x266>
    assert_eq!(rc, 0, "IRQ init fail");
    b14e:	f64b 5060 	movw	r0, #48480	; 0xbd60
    b152:	f2c0 0001 	movt	r0, #1
    b156:	6801      	ldr	r1, [r0, #0]
    b158:	980c      	ldr	r0, [sp, #48]	; 0x30
    b15a:	902b      	str	r0, [sp, #172]	; 0xac
    b15c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b15e:	922c      	str	r2, [sp, #176]	; 0xb0
    b160:	f64b 537c 	movw	r3, #48508	; 0xbd7c
    b164:	f2c0 0301 	movt	r3, #1
    b168:	681b      	ldr	r3, [r3, #0]
    b16a:	f64b 5c80 	movw	ip, #48512	; 0xbd80
    b16e:	f2c0 0c01 	movt	ip, #1
    b172:	f8dc c000 	ldr.w	ip, [ip]
    b176:	46ee      	mov	lr, sp
    b178:	2400      	movs	r4, #0
    b17a:	f8ce 4000 	str.w	r4, [lr]
    b17e:	a82d      	add	r0, sp, #180	; 0xb4
    b180:	2201      	movs	r2, #1
    b182:	910a      	str	r1, [sp, #40]	; 0x28
    b184:	4619      	mov	r1, r3
    b186:	4663      	mov	r3, ip
    b188:	f009 f938 	bl	143fc <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>
    b18c:	e7ff      	b.n	b18e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x1c0>
    b18e:	a82b      	add	r0, sp, #172	; 0xac
    b190:	9028      	str	r0, [sp, #160]	; 0xa0
    b192:	a82c      	add	r0, sp, #176	; 0xb0
    b194:	9029      	str	r0, [sp, #164]	; 0xa4
    b196:	a82d      	add	r0, sp, #180	; 0xb4
    b198:	902a      	str	r0, [sp, #168]	; 0xa8
    b19a:	9828      	ldr	r0, [sp, #160]	; 0xa0
    b19c:	903b      	str	r0, [sp, #236]	; 0xec
    b19e:	9929      	ldr	r1, [sp, #164]	; 0xa4
    b1a0:	913c      	str	r1, [sp, #240]	; 0xf0
    b1a2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    b1a4:	923d      	str	r2, [sp, #244]	; 0xf4
    b1a6:	f241 131d 	movw	r3, #4381	; 0x111d
    b1aa:	f2c0 0301 	movt	r3, #1
    b1ae:	9109      	str	r1, [sp, #36]	; 0x24
    b1b0:	4619      	mov	r1, r3
    b1b2:	9208      	str	r2, [sp, #32]
    b1b4:	f7fe f9b4 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    b1b8:	9007      	str	r0, [sp, #28]
    b1ba:	9106      	str	r1, [sp, #24]
    b1bc:	e7ff      	b.n	b1be <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x1f0>
    b1be:	f241 111d 	movw	r1, #4381	; 0x111d
    b1c2:	f2c0 0101 	movt	r1, #1
    b1c6:	9809      	ldr	r0, [sp, #36]	; 0x24
    b1c8:	f7fe f9aa 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    b1cc:	9005      	str	r0, [sp, #20]
    b1ce:	9104      	str	r1, [sp, #16]
    b1d0:	e7ff      	b.n	b1d2 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x204>
    b1d2:	f245 710f 	movw	r1, #22287	; 0x570f
    b1d6:	f2c0 0101 	movt	r1, #1
    b1da:	9808      	ldr	r0, [sp, #32]
    b1dc:	f7fe f9df 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    b1e0:	9003      	str	r0, [sp, #12]
    b1e2:	9102      	str	r1, [sp, #8]
    b1e4:	e7ff      	b.n	b1e6 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x218>
    b1e6:	9807      	ldr	r0, [sp, #28]
    b1e8:	9022      	str	r0, [sp, #136]	; 0x88
    b1ea:	9906      	ldr	r1, [sp, #24]
    b1ec:	9123      	str	r1, [sp, #140]	; 0x8c
    b1ee:	9a05      	ldr	r2, [sp, #20]
    b1f0:	9224      	str	r2, [sp, #144]	; 0x90
    b1f2:	9b04      	ldr	r3, [sp, #16]
    b1f4:	9325      	str	r3, [sp, #148]	; 0x94
    b1f6:	f8dd c00c 	ldr.w	ip, [sp, #12]
    b1fa:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
    b1fe:	f8dd e008 	ldr.w	lr, [sp, #8]
    b202:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
    b206:	466c      	mov	r4, sp
    b208:	2503      	movs	r5, #3
    b20a:	6025      	str	r5, [r4, #0]
    b20c:	a81c      	add	r0, sp, #112	; 0x70
    b20e:	ab22      	add	r3, sp, #136	; 0x88
    b210:	990a      	ldr	r1, [sp, #40]	; 0x28
    b212:	462a      	mov	r2, r5
    b214:	f009 f8f2 	bl	143fc <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>
    b218:	e7ff      	b.n	b21a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x24c>
    b21a:	f64b 50a0 	movw	r0, #48544	; 0xbda0
    b21e:	f2c0 0001 	movt	r0, #1
    b222:	f009 ff86 	bl	15132 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    b226:	9001      	str	r0, [sp, #4]
    b228:	e7ff      	b.n	b22a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x25c>
    b22a:	a81c      	add	r0, sp, #112	; 0x70
    b22c:	9901      	ldr	r1, [sp, #4]
    b22e:	f009 ffbd 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    b232:	defe      	udf	#254	; 0xfe
    b234:	2000      	movs	r0, #0
    Ok(())
    b236:	9013      	str	r0, [sp, #76]	; 0x4c
    b238:	2001      	movs	r0, #1
    b23a:	9013      	str	r0, [sp, #76]	; 0x4c
}
    b23c:	e6f6      	b.n	b02c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>

0000b23e <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE>:

/// Interrupt handler for the touch controller, triggered when a touch is detected
extern "C" fn touch_interrupt_handler(arg: *mut core::ffi::c_void) {
    b23e:	b580      	push	{r7, lr}
    b240:	b086      	sub	sp, #24
    b242:	9004      	str	r0, [sp, #16]
    //  We forward a touch event to the Default Event Queue for deferred processing.  Don't do any processing here.
    unsafe { TOUCH_EVENT.ev_arg = arg };
    b244:	f240 11fc 	movw	r1, #508	; 0x1fc
    b248:	f2c2 0100 	movt	r1, #8192	; 0x2000
    b24c:	6088      	str	r0, [r1, #8]
    b24e:	a802      	add	r0, sp, #8
    //  Fetch the Default Event Queue. TODO: Use dedicated Event Queue for higher priority processing.
    let queue = os::eventq_dflt_get()
    b250:	f7fd fdf1 	bl	8e36 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    b254:	e7ff      	b.n	b256 <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x18>
    b256:	f64b 0106 	movw	r1, #47110	; 0xb806
    b25a:	f2c0 0101 	movt	r1, #1
    b25e:	f64b 53b8 	movw	r3, #48568	; 0xbdb8
    b262:	f2c0 0301 	movt	r3, #1
    b266:	a802      	add	r0, sp, #8
    b268:	2208      	movs	r2, #8
    b26a:	f7fd fab2 	bl	87d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>
    b26e:	4601      	mov	r1, r0
    b270:	9005      	str	r0, [sp, #20]
    b272:	9101      	str	r1, [sp, #4]
    b274:	e7ff      	b.n	b276 <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x38>
        .expect("GET fail");
    unsafe { os::os_eventq_put(queue, &mut TOUCH_EVENT) };  //  Trigger the callback function `touch_event_callback()`
    b276:	f240 11fc 	movw	r1, #508	; 0x1fc
    b27a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    b27e:	9801      	ldr	r0, [sp, #4]
    b280:	f00d f8ff 	bl	18482 <os_eventq_put>
    b284:	e7ff      	b.n	b286 <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x48>
    //console::print("touch\n"); ////
}
    b286:	b006      	add	sp, #24
    b288:	bd80      	pop	{r7, pc}

0000b28a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E>:

/// Callback for the touch event that is triggered when a touch is detected
extern "C" fn touch_event_callback(_event: *mut os_event) {
    b28a:	b580      	push	{r7, lr}
    b28c:	b094      	sub	sp, #80	; 0x50
    b28e:	900e      	str	r0, [sp, #56]	; 0x38
    //  console::printhex(unsafe { os::os_time_get() } as u8); console::print(" touch\n");
    unsafe { 
        //  Fetch the touch data from the touch controller
        read_touchdata(&mut TOUCH_DATA)
    b290:	f240 1068 	movw	r0, #360	; 0x168
    b294:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b298:	f000 f894 	bl	b3c4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E>
    b29c:	9006      	str	r0, [sp, #24]
    b29e:	e7ff      	b.n	b2a0 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x16>
    b2a0:	f64b 51c8 	movw	r1, #48584	; 0xbdc8
    b2a4:	f2c0 0101 	movt	r1, #1
    b2a8:	f64b 53d8 	movw	r3, #48600	; 0xbdd8
    b2ac:	f2c0 0301 	movt	r3, #1
    b2b0:	220e      	movs	r2, #14
    b2b2:	9806      	ldr	r0, [sp, #24]
    b2b4:	f7fd fd04 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    b2b8:	e7ff      	b.n	b2ba <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x30>
            .expect("touchdata fail");
        //  Handle each touch data info
        for i in 0..TOUCH_DATA.count as usize {
    b2ba:	f240 1068 	movw	r0, #360	; 0x168
    b2be:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b2c2:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
    b2c6:	2100      	movs	r1, #0
    b2c8:	9107      	str	r1, [sp, #28]
    b2ca:	9008      	str	r0, [sp, #32]
    b2cc:	9807      	ldr	r0, [sp, #28]
    b2ce:	9908      	ldr	r1, [sp, #32]
    b2d0:	f006 f9ee 	bl	116b0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    b2d4:	9005      	str	r0, [sp, #20]
    b2d6:	9104      	str	r1, [sp, #16]
    b2d8:	e7ff      	b.n	b2da <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x50>
    b2da:	9805      	ldr	r0, [sp, #20]
    b2dc:	9009      	str	r0, [sp, #36]	; 0x24
    b2de:	9904      	ldr	r1, [sp, #16]
    b2e0:	910a      	str	r1, [sp, #40]	; 0x28
    b2e2:	e7ff      	b.n	b2e4 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
    b2e4:	a809      	add	r0, sp, #36	; 0x24
    b2e6:	f006 f958 	bl	1159a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    b2ea:	910c      	str	r1, [sp, #48]	; 0x30
    b2ec:	900b      	str	r0, [sp, #44]	; 0x2c
    b2ee:	e7ff      	b.n	b2f0 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x66>
    b2f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b2f2:	2800      	cmp	r0, #0
    b2f4:	d001      	beq.n	b2fa <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x70>
    b2f6:	e7ff      	b.n	b2f8 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x6e>
    b2f8:	e002      	b.n	b300 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x76>
            console::print(", x: "); console::printint(x as i32); 
            console::print(", y: "); console::printint(y as i32); console::print("\n");
        }
        console::flush();   
    } */
}
    b2fa:	b014      	add	sp, #80	; 0x50
    b2fc:	bd80      	pop	{r7, pc}
        for i in 0..TOUCH_DATA.count as usize {
    b2fe:	defe      	udf	#254	; 0xfe
    b300:	980c      	ldr	r0, [sp, #48]	; 0x30
    b302:	900f      	str	r0, [sp, #60]	; 0x3c
    b304:	9010      	str	r0, [sp, #64]	; 0x40
    b306:	9011      	str	r0, [sp, #68]	; 0x44
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    b308:	2809      	cmp	r0, #9
    b30a:	9003      	str	r0, [sp, #12]
    b30c:	d851      	bhi.n	b3b2 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x128>
    b30e:	e7ff      	b.n	b310 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x86>
    b310:	f240 1068 	movw	r0, #360	; 0x168
    b314:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b318:	9903      	ldr	r1, [sp, #12]
    b31a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b31e:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
    b322:	4603      	mov	r3, r0
    b324:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    b328:	f8b2 c002 	ldrh.w	ip, [r2, #2]
    b32c:	46e6      	mov	lr, ip
    b32e:	f8ad c04c 	strh.w	ip, [sp, #76]	; 0x4c
    b332:	7912      	ldrb	r2, [r2, #4]
    b334:	4694      	mov	ip, r2
    b336:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
            if x == 0 && y == 0 { continue; }
    b33a:	2800      	cmp	r0, #0
    b33c:	9302      	str	r3, [sp, #8]
    b33e:	f8cd e004 	str.w	lr, [sp, #4]
    b342:	f8cd c000 	str.w	ip, [sp]
    b346:	d008      	beq.n	b35a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xd0>
    b348:	e003      	b.n	b352 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc8>
    b34a:	2001      	movs	r0, #1
    b34c:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    b350:	e008      	b.n	b364 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xda>
    b352:	2000      	movs	r0, #0
    b354:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    b358:	e004      	b.n	b364 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xda>
    b35a:	9801      	ldr	r0, [sp, #4]
    b35c:	0401      	lsls	r1, r0, #16
    b35e:	2900      	cmp	r1, #0
    b360:	d0f3      	beq.n	b34a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc0>
    b362:	e7f6      	b.n	b352 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc8>
    b364:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    b368:	07c0      	lsls	r0, r0, #31
    b36a:	2800      	cmp	r0, #0
    b36c:	d105      	bne.n	b37a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf0>
    b36e:	e7ff      	b.n	b370 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xe6>
            if action != 0 && action != 2 { continue; }
    b370:	9800      	ldr	r0, [sp, #0]
    b372:	0601      	lsls	r1, r0, #24
    b374:	2900      	cmp	r1, #0
    b376:	d10a      	bne.n	b38e <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x104>
    b378:	e005      	b.n	b386 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xfc>
            if x == 0 && y == 0 { continue; }
    b37a:	e7ff      	b.n	b37c <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf2>
    b37c:	e7b2      	b.n	b2e4 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
    b37e:	2001      	movs	r0, #1
            if action != 0 && action != 2 { continue; }
    b380:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    b384:	e008      	b.n	b398 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x10e>
    b386:	2000      	movs	r0, #0
    b388:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    b38c:	e004      	b.n	b398 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x10e>
    b38e:	9800      	ldr	r0, [sp, #0]
    b390:	b2c1      	uxtb	r1, r0
    b392:	2902      	cmp	r1, #2
    b394:	d1f3      	bne.n	b37e <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf4>
    b396:	e7f6      	b.n	b386 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xfc>
    b398:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
    b39c:	07c0      	lsls	r0, r0, #31
    b39e:	2800      	cmp	r0, #0
    b3a0:	d105      	bne.n	b3ae <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x124>
    b3a2:	e7ff      	b.n	b3a4 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x11a>
            super::handle_touch(x, y);
    b3a4:	9802      	ldr	r0, [sp, #8]
    b3a6:	9901      	ldr	r1, [sp, #4]
    b3a8:	f001 f8e0 	bl	c56c <_ZN3app5chip812handle_touch17habca32c74e5cefadE>
    b3ac:	e000      	b.n	b3b0 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x126>
            if action != 0 && action != 2 { continue; }
    b3ae:	e7e5      	b.n	b37c <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf2>
        for i in 0..TOUCH_DATA.count as usize {
    b3b0:	e798      	b.n	b2e4 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    b3b2:	f64b 50e8 	movw	r0, #48616	; 0xbde8
    b3b6:	f2c0 0001 	movt	r0, #1
    b3ba:	220a      	movs	r2, #10
    b3bc:	9903      	ldr	r1, [sp, #12]
    b3be:	f009 fed5 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b3c2:	defe      	udf	#254	; 0xfe

0000b3c4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E>:
/// Touch data will be populated here
static mut TOUCH_DATA: TouchEventInfo = fill_zero!(TouchEventInfo);

/// Read touch controller data. This only works when the screen has been tapped and the touch controller wakes up.
/// Ported from https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L407-L466
fn read_touchdata(data: &mut TouchEventInfo) -> MynewtResult<()> {
    b3c4:	b580      	push	{r7, lr}
    b3c6:	b0de      	sub	sp, #376	; 0x178
    b3c8:	9057      	str	r0, [sp, #348]	; 0x15c
    read_register_range(           //  Read the range of I2C registers...
    b3ca:	4669      	mov	r1, sp
    b3cc:	223f      	movs	r2, #63	; 0x3f
    b3ce:	600a      	str	r2, [r1, #0]
    b3d0:	f240 13ba 	movw	r3, #442	; 0x1ba
    b3d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b3d8:	2115      	movs	r1, #21
    b3da:	f04f 0c00 	mov.w	ip, #0
    b3de:	9026      	str	r0, [sp, #152]	; 0x98
    b3e0:	4608      	mov	r0, r1
    b3e2:	4661      	mov	r1, ip
    b3e4:	f000 fb97 	bl	bb16 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E>
    b3e8:	9025      	str	r0, [sp, #148]	; 0x94
    b3ea:	e7ff      	b.n	b3ec <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x28>
    b3ec:	f64b 51f8 	movw	r1, #48632	; 0xbdf8
    b3f0:	f2c0 0101 	movt	r1, #1
    b3f4:	f64b 630c 	movw	r3, #48652	; 0xbe0c
    b3f8:	f2c0 0301 	movt	r3, #1
    b3fc:	2213      	movs	r2, #19
    b3fe:	9825      	ldr	r0, [sp, #148]	; 0x94
    b400:	f7fd fc5e 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    b404:	e7ff      	b.n	b406 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x42>
    b406:	f10d 00ee 	add.w	r0, sp, #238	; 0xee
    b40a:	2152      	movs	r1, #82	; 0x52
        TOUCH_CONTROLLER_ADDRESS,  //  From the touch controller
        0,                         //  Starting from register 0
        POINT_READ_BUF as u8,      //  Number of registers to read
        unsafe { &mut BUF }        //  Save the read data into `buf`
    ).expect("read touchdata fail");
    *data = fill_zero!(TouchEventInfo);
    b40c:	9024      	str	r0, [sp, #144]	; 0x90
    b40e:	9123      	str	r1, [sp, #140]	; 0x8c
    b410:	f010 f99e 	bl	1b750 <__aeabi_memclr>
    b414:	a827      	add	r0, sp, #156	; 0x9c
    b416:	9924      	ldr	r1, [sp, #144]	; 0x90
    b418:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    b41a:	f010 f99d 	bl	1b758 <__aeabi_memcpy>
    b41e:	e7ff      	b.n	b420 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5c>
    b420:	a927      	add	r1, sp, #156	; 0x9c
    b422:	2252      	movs	r2, #82	; 0x52
    b424:	9826      	ldr	r0, [sp, #152]	; 0x98
    b426:	f010 f997 	bl	1b758 <__aeabi_memcpy>
    data.point_num = unsafe { BUF[FT_TOUCH_POINT_NUM] & 0x0F };
    b42a:	f240 11ba 	movw	r1, #442	; 0x1ba
    b42e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    b432:	7889      	ldrb	r1, [r1, #2]
    b434:	f001 010f 	and.w	r1, r1, #15
    b438:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b43a:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    b43e:	2100      	movs	r1, #0
    data.count     = 0;
    b440:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50

    //  Populate the first 5 touch points
    for i in 0..CFG_MAX_TOUCH_POINTS {
    b444:	9150      	str	r1, [sp, #320]	; 0x140
    b446:	2105      	movs	r1, #5
    b448:	9151      	str	r1, [sp, #324]	; 0x144
    b44a:	9950      	ldr	r1, [sp, #320]	; 0x140
    b44c:	9b51      	ldr	r3, [sp, #324]	; 0x144
    b44e:	9022      	str	r0, [sp, #136]	; 0x88
    b450:	4608      	mov	r0, r1
    b452:	4619      	mov	r1, r3
    b454:	f006 f92c 	bl	116b0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    b458:	9021      	str	r0, [sp, #132]	; 0x84
    b45a:	9120      	str	r1, [sp, #128]	; 0x80
    b45c:	e7ff      	b.n	b45e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x9a>
    b45e:	9821      	ldr	r0, [sp, #132]	; 0x84
    b460:	9052      	str	r0, [sp, #328]	; 0x148
    b462:	9920      	ldr	r1, [sp, #128]	; 0x80
    b464:	9153      	str	r1, [sp, #332]	; 0x14c
    b466:	e7ff      	b.n	b468 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xa4>
    b468:	a852      	add	r0, sp, #328	; 0x148
    b46a:	f006 f896 	bl	1159a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    b46e:	9155      	str	r1, [sp, #340]	; 0x154
    b470:	9054      	str	r0, [sp, #336]	; 0x150
    b472:	e7ff      	b.n	b474 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xb0>
    b474:	9854      	ldr	r0, [sp, #336]	; 0x150
    b476:	2800      	cmp	r0, #0
    b478:	d001      	beq.n	b47e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xba>
    b47a:	e7ff      	b.n	b47c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xb8>
    b47c:	e001      	b.n	b482 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xbe>
    b47e:	e00d      	b.n	b49c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xd8>
    b480:	defe      	udf	#254	; 0xfe
    b482:	9855      	ldr	r0, [sp, #340]	; 0x154
    b484:	9058      	str	r0, [sp, #352]	; 0x160
    b486:	9059      	str	r0, [sp, #356]	; 0x164
    b488:	905a      	str	r0, [sp, #360]	; 0x168
    b48a:	2106      	movs	r1, #6
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b48c:	fba1 1200 	umull	r1, r2, r1, r0
    b490:	2a00      	cmp	r2, #0
    b492:	901f      	str	r0, [sp, #124]	; 0x7c
    b494:	911e      	str	r1, [sp, #120]	; 0x78
    b496:	f040 81c1 	bne.w	b81c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x458>
    b49a:	e002      	b.n	b4a2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xde>
    b49c:	2001      	movs	r0, #1
            && (data.point_num == 0) {
            break;
        }
    }
    Ok(())
}
    b49e:	b05e      	add	sp, #376	; 0x178
    b4a0:	bd80      	pop	{r7, pc}
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b4a2:	981e      	ldr	r0, [sp, #120]	; 0x78
    b4a4:	1d41      	adds	r1, r0, #5
    b4a6:	460a      	mov	r2, r1
    b4a8:	4281      	cmp	r1, r0
    b4aa:	921d      	str	r2, [sp, #116]	; 0x74
    b4ac:	f0c0 81c2 	bcc.w	b834 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x470>
    b4b0:	e7ff      	b.n	b4b2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xee>
    b4b2:	981d      	ldr	r0, [sp, #116]	; 0x74
    b4b4:	283e      	cmp	r0, #62	; 0x3e
    b4b6:	f200 81c9 	bhi.w	b84c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x488>
    b4ba:	e7ff      	b.n	b4bc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xf8>
    b4bc:	f240 10ba 	movw	r0, #442	; 0x1ba
    b4c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b4c4:	991d      	ldr	r1, [sp, #116]	; 0x74
    b4c6:	5c40      	ldrb	r0, [r0, r1]
    b4c8:	0900      	lsrs	r0, r0, #4
    b4ca:	901c      	str	r0, [sp, #112]	; 0x70
    b4cc:	e7ff      	b.n	b4ce <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x10a>
    b4ce:	981c      	ldr	r0, [sp, #112]	; 0x70
    b4d0:	f88d 016f 	strb.w	r0, [sp, #367]	; 0x16f
    b4d4:	b2c1      	uxtb	r1, r0
        if pointid >= HYN_MAX_ID { break; }
    b4d6:	290e      	cmp	r1, #14
    b4d8:	d80b      	bhi.n	b4f2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x12e>
    b4da:	e7ff      	b.n	b4dc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x118>
        data.count += 1;
    b4dc:	9826      	ldr	r0, [sp, #152]	; 0x98
    b4de:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
    b4e2:	3101      	adds	r1, #1
    b4e4:	b2ca      	uxtb	r2, r1
    b4e6:	460b      	mov	r3, r1
    b4e8:	428a      	cmp	r2, r1
    b4ea:	931b      	str	r3, [sp, #108]	; 0x6c
    b4ec:	f040 81b7 	bne.w	b85e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x49a>
    b4f0:	e001      	b.n	b4f6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x132>
        if pointid >= HYN_MAX_ID { break; }
    b4f2:	e7ff      	b.n	b4f4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x130>
    b4f4:	e7d2      	b.n	b49c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xd8>
        data.count += 1;
    b4f6:	981b      	ldr	r0, [sp, #108]	; 0x6c
    b4f8:	9926      	ldr	r1, [sp, #152]	; 0x98
    b4fa:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    b4fe:	2206      	movs	r2, #6
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b500:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b502:	fba2 2c03 	umull	r2, ip, r2, r3
    b506:	f1bc 0f00 	cmp.w	ip, #0
    b50a:	921a      	str	r2, [sp, #104]	; 0x68
    b50c:	f040 81b3 	bne.w	b876 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4b2>
    b510:	e7ff      	b.n	b512 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x14e>
    b512:	981a      	ldr	r0, [sp, #104]	; 0x68
    b514:	1cc1      	adds	r1, r0, #3
    b516:	460a      	mov	r2, r1
    b518:	4281      	cmp	r1, r0
    b51a:	9219      	str	r2, [sp, #100]	; 0x64
    b51c:	f0c0 81b7 	bcc.w	b88e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4ca>
    b520:	e7ff      	b.n	b522 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x15e>
    b522:	9819      	ldr	r0, [sp, #100]	; 0x64
    b524:	283e      	cmp	r0, #62	; 0x3e
    b526:	f200 81be 	bhi.w	b8a6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4e2>
    b52a:	e7ff      	b.n	b52c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x168>
    b52c:	f240 10ba 	movw	r0, #442	; 0x1ba
    b530:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b534:	9919      	ldr	r1, [sp, #100]	; 0x64
    b536:	5c40      	ldrb	r0, [r0, r1]
    b538:	f000 000f 	and.w	r0, r0, #15
    b53c:	4602      	mov	r2, r0
    b53e:	f8ad 0170 	strh.w	r0, [sp, #368]	; 0x170
    b542:	2006      	movs	r0, #6
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b544:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b546:	fba0 0c03 	umull	r0, ip, r0, r3
    b54a:	f1bc 0f00 	cmp.w	ip, #0
    b54e:	9218      	str	r2, [sp, #96]	; 0x60
    b550:	9017      	str	r0, [sp, #92]	; 0x5c
    b552:	f040 81b1 	bne.w	b8b8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4f4>
    b556:	e7ff      	b.n	b558 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x194>
    b558:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b55a:	1d01      	adds	r1, r0, #4
    b55c:	460a      	mov	r2, r1
    b55e:	4281      	cmp	r1, r0
    b560:	9216      	str	r2, [sp, #88]	; 0x58
    b562:	f0c0 81b5 	bcc.w	b8d0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x50c>
    b566:	e7ff      	b.n	b568 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1a4>
    b568:	9816      	ldr	r0, [sp, #88]	; 0x58
    b56a:	283e      	cmp	r0, #62	; 0x3e
    b56c:	f200 81bc 	bhi.w	b8e8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x524>
    b570:	e7ff      	b.n	b572 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1ae>
    b572:	f240 10ba 	movw	r0, #442	; 0x1ba
    b576:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b57a:	9916      	ldr	r1, [sp, #88]	; 0x58
    b57c:	5c40      	ldrb	r0, [r0, r1]
    b57e:	4602      	mov	r2, r0
    b580:	f8ad 0172 	strh.w	r0, [sp, #370]	; 0x172
        data.touches[i].x  = (x_high << 8) | x_low;
    b584:	9818      	ldr	r0, [sp, #96]	; 0x60
    b586:	0203      	lsls	r3, r0, #8
    b588:	9215      	str	r2, [sp, #84]	; 0x54
    b58a:	9314      	str	r3, [sp, #80]	; 0x50
    b58c:	e7ff      	b.n	b58e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1ca>
    b58e:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b590:	2809      	cmp	r0, #9
    b592:	f200 81b2 	bhi.w	b8fa <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x536>
    b596:	e7ff      	b.n	b598 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1d4>
    b598:	9814      	ldr	r0, [sp, #80]	; 0x50
    b59a:	9915      	ldr	r1, [sp, #84]	; 0x54
    b59c:	ea40 0201 	orr.w	r2, r0, r1
    b5a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
    b5a2:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
    b5a6:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
    b5aa:	2206      	movs	r2, #6
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b5ac:	fba2 2e0c 	umull	r2, lr, r2, ip
    b5b0:	f1be 0f00 	cmp.w	lr, #0
    b5b4:	9213      	str	r2, [sp, #76]	; 0x4c
    b5b6:	f040 81a9 	bne.w	b90c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x548>
    b5ba:	e7ff      	b.n	b5bc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1f8>
    b5bc:	9813      	ldr	r0, [sp, #76]	; 0x4c
    b5be:	1d41      	adds	r1, r0, #5
    b5c0:	460a      	mov	r2, r1
    b5c2:	4281      	cmp	r1, r0
    b5c4:	9212      	str	r2, [sp, #72]	; 0x48
    b5c6:	f0c0 81ad 	bcc.w	b924 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x560>
    b5ca:	e7ff      	b.n	b5cc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x208>
    b5cc:	9812      	ldr	r0, [sp, #72]	; 0x48
    b5ce:	283e      	cmp	r0, #62	; 0x3e
    b5d0:	f200 81b4 	bhi.w	b93c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x578>
    b5d4:	e7ff      	b.n	b5d6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x212>
    b5d6:	f240 10ba 	movw	r0, #442	; 0x1ba
    b5da:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b5de:	9912      	ldr	r1, [sp, #72]	; 0x48
    b5e0:	5c40      	ldrb	r0, [r0, r1]
    b5e2:	f000 000f 	and.w	r0, r0, #15
    b5e6:	4602      	mov	r2, r0
    b5e8:	f8ad 0174 	strh.w	r0, [sp, #372]	; 0x174
    b5ec:	2006      	movs	r0, #6
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b5ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b5f0:	fba0 0c03 	umull	r0, ip, r0, r3
    b5f4:	f1bc 0f00 	cmp.w	ip, #0
    b5f8:	9211      	str	r2, [sp, #68]	; 0x44
    b5fa:	9010      	str	r0, [sp, #64]	; 0x40
    b5fc:	f040 81a7 	bne.w	b94e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x58a>
    b600:	e7ff      	b.n	b602 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x23e>
    b602:	9810      	ldr	r0, [sp, #64]	; 0x40
    b604:	1d81      	adds	r1, r0, #6
    b606:	460a      	mov	r2, r1
    b608:	4281      	cmp	r1, r0
    b60a:	920f      	str	r2, [sp, #60]	; 0x3c
    b60c:	f0c0 81ab 	bcc.w	b966 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5a2>
    b610:	e7ff      	b.n	b612 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x24e>
    b612:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b614:	283e      	cmp	r0, #62	; 0x3e
    b616:	f200 81b2 	bhi.w	b97e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5ba>
    b61a:	e7ff      	b.n	b61c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x258>
    b61c:	f240 10ba 	movw	r0, #442	; 0x1ba
    b620:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b624:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b626:	5c40      	ldrb	r0, [r0, r1]
    b628:	4602      	mov	r2, r0
    b62a:	f8ad 0176 	strh.w	r0, [sp, #374]	; 0x176
        data.touches[i].y  = (y_high << 8) | y_low;
    b62e:	9811      	ldr	r0, [sp, #68]	; 0x44
    b630:	0203      	lsls	r3, r0, #8
    b632:	920e      	str	r2, [sp, #56]	; 0x38
    b634:	930d      	str	r3, [sp, #52]	; 0x34
    b636:	e7ff      	b.n	b638 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x274>
    b638:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b63a:	2809      	cmp	r0, #9
    b63c:	f200 81a8 	bhi.w	b990 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5cc>
    b640:	e7ff      	b.n	b642 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x27e>
    b642:	9826      	ldr	r0, [sp, #152]	; 0x98
    b644:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b646:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b64a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b64c:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    b650:	ea43 0e0c 	orr.w	lr, r3, ip
    b654:	f8a2 e002 	strh.w	lr, [r2, #2]
    b658:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    b65a:	fba2 2e01 	umull	r2, lr, r2, r1
    b65e:	f1be 0f00 	cmp.w	lr, #0
    b662:	920c      	str	r2, [sp, #48]	; 0x30
    b664:	f040 819d 	bne.w	b9a2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5de>
    b668:	e7ff      	b.n	b66a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2a6>
    b66a:	980c      	ldr	r0, [sp, #48]	; 0x30
    b66c:	1cc1      	adds	r1, r0, #3
    b66e:	460a      	mov	r2, r1
    b670:	4281      	cmp	r1, r0
    b672:	920b      	str	r2, [sp, #44]	; 0x2c
    b674:	f0c0 81a1 	bcc.w	b9ba <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5f6>
    b678:	e7ff      	b.n	b67a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2b6>
    b67a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b67c:	283e      	cmp	r0, #62	; 0x3e
    b67e:	f200 81a8 	bhi.w	b9d2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x60e>
    b682:	e7ff      	b.n	b684 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2c0>
    b684:	f240 10ba 	movw	r0, #442	; 0x1ba
    b688:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b68c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b68e:	5c40      	ldrb	r0, [r0, r1]
    b690:	0980      	lsrs	r0, r0, #6
    b692:	900a      	str	r0, [sp, #40]	; 0x28
    b694:	e7ff      	b.n	b696 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2d2>
        data.touches[i].action =
    b696:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b698:	2809      	cmp	r0, #9
    b69a:	f200 81a3 	bhi.w	b9e4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x620>
    b69e:	e7ff      	b.n	b6a0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2dc>
    b6a0:	9826      	ldr	r0, [sp, #152]	; 0x98
    b6a2:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b6a4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b6a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b6aa:	7113      	strb	r3, [r2, #4]
    b6ac:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    b6ae:	fba2 2c01 	umull	r2, ip, r2, r1
    b6b2:	f1bc 0f00 	cmp.w	ip, #0
    b6b6:	9209      	str	r2, [sp, #36]	; 0x24
    b6b8:	f040 819d 	bne.w	b9f6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x632>
    b6bc:	e7ff      	b.n	b6be <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2fa>
    b6be:	9809      	ldr	r0, [sp, #36]	; 0x24
    b6c0:	1d41      	adds	r1, r0, #5
    b6c2:	460a      	mov	r2, r1
    b6c4:	4281      	cmp	r1, r0
    b6c6:	9208      	str	r2, [sp, #32]
    b6c8:	f0c0 81a1 	bcc.w	ba0e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x64a>
    b6cc:	e7ff      	b.n	b6ce <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x30a>
    b6ce:	9808      	ldr	r0, [sp, #32]
    b6d0:	283e      	cmp	r0, #62	; 0x3e
    b6d2:	f200 81a8 	bhi.w	ba26 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x662>
    b6d6:	e7ff      	b.n	b6d8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x314>
    b6d8:	f240 10ba 	movw	r0, #442	; 0x1ba
    b6dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b6e0:	9908      	ldr	r1, [sp, #32]
    b6e2:	5c40      	ldrb	r0, [r0, r1]
    b6e4:	0900      	lsrs	r0, r0, #4
    b6e6:	9007      	str	r0, [sp, #28]
    b6e8:	e7ff      	b.n	b6ea <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x326>
        data.touches[i].finger =
    b6ea:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b6ec:	2809      	cmp	r0, #9
    b6ee:	f200 81a3 	bhi.w	ba38 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x674>
    b6f2:	e7ff      	b.n	b6f4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x330>
    b6f4:	9826      	ldr	r0, [sp, #152]	; 0x98
    b6f6:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b6f8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b6fc:	9b07      	ldr	r3, [sp, #28]
    b6fe:	7153      	strb	r3, [r2, #5]
    b700:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    b702:	fba2 2c01 	umull	r2, ip, r2, r1
    b706:	f1bc 0f00 	cmp.w	ip, #0
    b70a:	9206      	str	r2, [sp, #24]
    b70c:	f040 819d 	bne.w	ba4a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x686>
    b710:	e7ff      	b.n	b712 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x34e>
    b712:	9806      	ldr	r0, [sp, #24]
    b714:	1dc1      	adds	r1, r0, #7
    b716:	460a      	mov	r2, r1
    b718:	4281      	cmp	r1, r0
    b71a:	9205      	str	r2, [sp, #20]
    b71c:	f0c0 81a1 	bcc.w	ba62 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x69e>
    b720:	e7ff      	b.n	b722 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x35e>
    b722:	9805      	ldr	r0, [sp, #20]
    b724:	283e      	cmp	r0, #62	; 0x3e
    b726:	f200 81a8 	bhi.w	ba7a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6b6>
    b72a:	e7ff      	b.n	b72c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x368>
    b72c:	f240 10ba 	movw	r0, #442	; 0x1ba
    b730:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b734:	9905      	ldr	r1, [sp, #20]
    b736:	5c40      	ldrb	r0, [r0, r1]
        data.touches[i].pressure =
    b738:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    b73a:	2a09      	cmp	r2, #9
    b73c:	9004      	str	r0, [sp, #16]
    b73e:	f200 81a5 	bhi.w	ba8c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6c8>
    b742:	e7ff      	b.n	b744 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x380>
    b744:	9826      	ldr	r0, [sp, #152]	; 0x98
    b746:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b748:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b74c:	9b04      	ldr	r3, [sp, #16]
    b74e:	7193      	strb	r3, [r2, #6]
    b750:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    b752:	fba2 2c01 	umull	r2, ip, r2, r1
    b756:	f1bc 0f00 	cmp.w	ip, #0
    b75a:	9203      	str	r2, [sp, #12]
    b75c:	f040 819f 	bne.w	ba9e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6da>
    b760:	e7ff      	b.n	b762 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x39e>
    b762:	9803      	ldr	r0, [sp, #12]
    b764:	f100 0108 	add.w	r1, r0, #8
    b768:	460a      	mov	r2, r1
    b76a:	4281      	cmp	r1, r0
    b76c:	9202      	str	r2, [sp, #8]
    b76e:	f0c0 81a2 	bcc.w	bab6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6f2>
    b772:	e7ff      	b.n	b774 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3b0>
    b774:	9802      	ldr	r0, [sp, #8]
    b776:	283e      	cmp	r0, #62	; 0x3e
    b778:	f200 81a9 	bhi.w	bace <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x70a>
    b77c:	e7ff      	b.n	b77e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3ba>
    b77e:	f240 10ba 	movw	r0, #442	; 0x1ba
    b782:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b786:	9902      	ldr	r1, [sp, #8]
    b788:	5c40      	ldrb	r0, [r0, r1]
    b78a:	0900      	lsrs	r0, r0, #4
    b78c:	9001      	str	r0, [sp, #4]
    b78e:	e7ff      	b.n	b790 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3cc>
        data.touches[i].area =
    b790:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b792:	2809      	cmp	r0, #9
    b794:	f200 81a4 	bhi.w	bae0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x71c>
    b798:	e7ff      	b.n	b79a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3d6>
    b79a:	9826      	ldr	r0, [sp, #152]	; 0x98
    b79c:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b79e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b7a2:	9b01      	ldr	r3, [sp, #4]
    b7a4:	71d3      	strb	r3, [r2, #7]
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b7a6:	290a      	cmp	r1, #10
    b7a8:	d326      	bcc.n	b7f8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x434>
    b7aa:	e1a2      	b.n	baf2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x72e>
    b7ac:	2001      	movs	r0, #1
    b7ae:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    b7b2:	e009      	b.n	b7c8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x404>
    b7b4:	2000      	movs	r0, #0
    b7b6:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    b7ba:	e005      	b.n	b7c8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x404>
            && (data.point_num == 0) {
    b7bc:	9826      	ldr	r0, [sp, #152]	; 0x98
    b7be:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b7c2:	2900      	cmp	r1, #0
    b7c4:	d0f2      	beq.n	b7ac <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3e8>
    b7c6:	e7f5      	b.n	b7b4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f0>
    b7c8:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
    b7cc:	07c0      	lsls	r0, r0, #31
    b7ce:	2800      	cmp	r0, #0
    b7d0:	d123      	bne.n	b81a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x456>
    b7d2:	e021      	b.n	b818 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x454>
    b7d4:	2001      	movs	r0, #1
    b7d6:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    b7da:	e007      	b.n	b7ec <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x428>
    b7dc:	2000      	movs	r0, #0
    b7de:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    b7e2:	e003      	b.n	b7ec <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x428>
    b7e4:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b7e6:	280a      	cmp	r0, #10
    b7e8:	d30e      	bcc.n	b808 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x444>
    b7ea:	e18b      	b.n	bb04 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x740>
    b7ec:	f89d 015b 	ldrb.w	r0, [sp, #347]	; 0x15b
    b7f0:	07c0      	lsls	r0, r0, #31
    b7f2:	2800      	cmp	r0, #0
    b7f4:	d1e2      	bne.n	b7bc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f8>
    b7f6:	e7dd      	b.n	b7b4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f0>
    b7f8:	9826      	ldr	r0, [sp, #152]	; 0x98
    b7fa:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b7fc:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b800:	7912      	ldrb	r2, [r2, #4]
    b802:	2a00      	cmp	r2, #0
    b804:	d0e6      	beq.n	b7d4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x410>
    b806:	e7ed      	b.n	b7e4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x420>
    b808:	9826      	ldr	r0, [sp, #152]	; 0x98
    b80a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b80c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b810:	7912      	ldrb	r2, [r2, #4]
    b812:	2a02      	cmp	r2, #2
    b814:	d0de      	beq.n	b7d4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x410>
    b816:	e7e1      	b.n	b7dc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x418>
    for i in 0..CFG_MAX_TOUCH_POINTS {
    b818:	e626      	b.n	b468 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xa4>
            break;
    b81a:	e66b      	b.n	b4f4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x130>
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b81c:	f64b 6030 	movw	r0, #48688	; 0xbe30
    b820:	f2c0 0001 	movt	r0, #1
    b824:	f64b 621c 	movw	r2, #48668	; 0xbe1c
    b828:	f2c0 0201 	movt	r2, #1
    b82c:	2121      	movs	r1, #33	; 0x21
    b82e:	f009 fc87 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b832:	defe      	udf	#254	; 0xfe
    b834:	f64b 6070 	movw	r0, #48752	; 0xbe70
    b838:	f2c0 0001 	movt	r0, #1
    b83c:	f64b 6254 	movw	r2, #48724	; 0xbe54
    b840:	f2c0 0201 	movt	r2, #1
    b844:	211c      	movs	r1, #28
    b846:	f009 fc7b 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b84a:	defe      	udf	#254	; 0xfe
    b84c:	f64b 608c 	movw	r0, #48780	; 0xbe8c
    b850:	f2c0 0001 	movt	r0, #1
    b854:	223f      	movs	r2, #63	; 0x3f
    b856:	991d      	ldr	r1, [sp, #116]	; 0x74
    b858:	f009 fc88 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b85c:	defe      	udf	#254	; 0xfe
        data.count += 1;
    b85e:	f64b 6070 	movw	r0, #48752	; 0xbe70
    b862:	f2c0 0001 	movt	r0, #1
    b866:	f64b 629c 	movw	r2, #48796	; 0xbe9c
    b86a:	f2c0 0201 	movt	r2, #1
    b86e:	211c      	movs	r1, #28
    b870:	f009 fc66 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b874:	defe      	udf	#254	; 0xfe
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b876:	f64b 6030 	movw	r0, #48688	; 0xbe30
    b87a:	f2c0 0001 	movt	r0, #1
    b87e:	f64b 62ac 	movw	r2, #48812	; 0xbeac
    b882:	f2c0 0201 	movt	r2, #1
    b886:	2121      	movs	r1, #33	; 0x21
    b888:	f009 fc5a 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b88c:	defe      	udf	#254	; 0xfe
    b88e:	f64b 6070 	movw	r0, #48752	; 0xbe70
    b892:	f2c0 0001 	movt	r0, #1
    b896:	f64b 62bc 	movw	r2, #48828	; 0xbebc
    b89a:	f2c0 0201 	movt	r2, #1
    b89e:	211c      	movs	r1, #28
    b8a0:	f009 fc4e 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b8a4:	defe      	udf	#254	; 0xfe
    b8a6:	f64b 60cc 	movw	r0, #48844	; 0xbecc
    b8aa:	f2c0 0001 	movt	r0, #1
    b8ae:	223f      	movs	r2, #63	; 0x3f
    b8b0:	9919      	ldr	r1, [sp, #100]	; 0x64
    b8b2:	f009 fc5b 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b8b6:	defe      	udf	#254	; 0xfe
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b8b8:	f64b 6030 	movw	r0, #48688	; 0xbe30
    b8bc:	f2c0 0001 	movt	r0, #1
    b8c0:	f64b 62dc 	movw	r2, #48860	; 0xbedc
    b8c4:	f2c0 0201 	movt	r2, #1
    b8c8:	2121      	movs	r1, #33	; 0x21
    b8ca:	f009 fc39 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b8ce:	defe      	udf	#254	; 0xfe
    b8d0:	f64b 6070 	movw	r0, #48752	; 0xbe70
    b8d4:	f2c0 0001 	movt	r0, #1
    b8d8:	f64b 62ec 	movw	r2, #48876	; 0xbeec
    b8dc:	f2c0 0201 	movt	r2, #1
    b8e0:	211c      	movs	r1, #28
    b8e2:	f009 fc2d 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b8e6:	defe      	udf	#254	; 0xfe
    b8e8:	f64b 60fc 	movw	r0, #48892	; 0xbefc
    b8ec:	f2c0 0001 	movt	r0, #1
    b8f0:	223f      	movs	r2, #63	; 0x3f
    b8f2:	9916      	ldr	r1, [sp, #88]	; 0x58
    b8f4:	f009 fc3a 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b8f8:	defe      	udf	#254	; 0xfe
        data.touches[i].x  = (x_high << 8) | x_low;
    b8fa:	f64b 700c 	movw	r0, #48908	; 0xbf0c
    b8fe:	f2c0 0001 	movt	r0, #1
    b902:	220a      	movs	r2, #10
    b904:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b906:	f009 fc31 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b90a:	defe      	udf	#254	; 0xfe
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b90c:	f64b 6030 	movw	r0, #48688	; 0xbe30
    b910:	f2c0 0001 	movt	r0, #1
    b914:	f64b 721c 	movw	r2, #48924	; 0xbf1c
    b918:	f2c0 0201 	movt	r2, #1
    b91c:	2121      	movs	r1, #33	; 0x21
    b91e:	f009 fc0f 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b922:	defe      	udf	#254	; 0xfe
    b924:	f64b 6070 	movw	r0, #48752	; 0xbe70
    b928:	f2c0 0001 	movt	r0, #1
    b92c:	f64b 722c 	movw	r2, #48940	; 0xbf2c
    b930:	f2c0 0201 	movt	r2, #1
    b934:	211c      	movs	r1, #28
    b936:	f009 fc03 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b93a:	defe      	udf	#254	; 0xfe
    b93c:	f64b 703c 	movw	r0, #48956	; 0xbf3c
    b940:	f2c0 0001 	movt	r0, #1
    b944:	223f      	movs	r2, #63	; 0x3f
    b946:	9912      	ldr	r1, [sp, #72]	; 0x48
    b948:	f009 fc10 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b94c:	defe      	udf	#254	; 0xfe
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b94e:	f64b 6030 	movw	r0, #48688	; 0xbe30
    b952:	f2c0 0001 	movt	r0, #1
    b956:	f64b 724c 	movw	r2, #48972	; 0xbf4c
    b95a:	f2c0 0201 	movt	r2, #1
    b95e:	2121      	movs	r1, #33	; 0x21
    b960:	f009 fbee 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b964:	defe      	udf	#254	; 0xfe
    b966:	f64b 6070 	movw	r0, #48752	; 0xbe70
    b96a:	f2c0 0001 	movt	r0, #1
    b96e:	f64b 725c 	movw	r2, #48988	; 0xbf5c
    b972:	f2c0 0201 	movt	r2, #1
    b976:	211c      	movs	r1, #28
    b978:	f009 fbe2 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b97c:	defe      	udf	#254	; 0xfe
    b97e:	f64b 706c 	movw	r0, #49004	; 0xbf6c
    b982:	f2c0 0001 	movt	r0, #1
    b986:	223f      	movs	r2, #63	; 0x3f
    b988:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b98a:	f009 fbef 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b98e:	defe      	udf	#254	; 0xfe
        data.touches[i].y  = (y_high << 8) | y_low;
    b990:	f64b 707c 	movw	r0, #49020	; 0xbf7c
    b994:	f2c0 0001 	movt	r0, #1
    b998:	220a      	movs	r2, #10
    b99a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b99c:	f009 fbe6 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b9a0:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    b9a2:	f64b 6030 	movw	r0, #48688	; 0xbe30
    b9a6:	f2c0 0001 	movt	r0, #1
    b9aa:	f64b 728c 	movw	r2, #49036	; 0xbf8c
    b9ae:	f2c0 0201 	movt	r2, #1
    b9b2:	2121      	movs	r1, #33	; 0x21
    b9b4:	f009 fbc4 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b9b8:	defe      	udf	#254	; 0xfe
    b9ba:	f64b 6070 	movw	r0, #48752	; 0xbe70
    b9be:	f2c0 0001 	movt	r0, #1
    b9c2:	f64b 729c 	movw	r2, #49052	; 0xbf9c
    b9c6:	f2c0 0201 	movt	r2, #1
    b9ca:	211c      	movs	r1, #28
    b9cc:	f009 fbb8 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b9d0:	defe      	udf	#254	; 0xfe
    b9d2:	f64b 70ac 	movw	r0, #49068	; 0xbfac
    b9d6:	f2c0 0001 	movt	r0, #1
    b9da:	223f      	movs	r2, #63	; 0x3f
    b9dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b9de:	f009 fbc5 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b9e2:	defe      	udf	#254	; 0xfe
        data.touches[i].action =
    b9e4:	f64b 70bc 	movw	r0, #49084	; 0xbfbc
    b9e8:	f2c0 0001 	movt	r0, #1
    b9ec:	220a      	movs	r2, #10
    b9ee:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b9f0:	f009 fbbc 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b9f4:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    b9f6:	f64b 6030 	movw	r0, #48688	; 0xbe30
    b9fa:	f2c0 0001 	movt	r0, #1
    b9fe:	f64b 72cc 	movw	r2, #49100	; 0xbfcc
    ba02:	f2c0 0201 	movt	r2, #1
    ba06:	2121      	movs	r1, #33	; 0x21
    ba08:	f009 fb9a 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ba0c:	defe      	udf	#254	; 0xfe
    ba0e:	f64b 6070 	movw	r0, #48752	; 0xbe70
    ba12:	f2c0 0001 	movt	r0, #1
    ba16:	f64b 72dc 	movw	r2, #49116	; 0xbfdc
    ba1a:	f2c0 0201 	movt	r2, #1
    ba1e:	211c      	movs	r1, #28
    ba20:	f009 fb8e 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ba24:	defe      	udf	#254	; 0xfe
    ba26:	f64b 70ec 	movw	r0, #49132	; 0xbfec
    ba2a:	f2c0 0001 	movt	r0, #1
    ba2e:	223f      	movs	r2, #63	; 0x3f
    ba30:	9908      	ldr	r1, [sp, #32]
    ba32:	f009 fb9b 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ba36:	defe      	udf	#254	; 0xfe
        data.touches[i].finger =
    ba38:	f64b 70fc 	movw	r0, #49148	; 0xbffc
    ba3c:	f2c0 0001 	movt	r0, #1
    ba40:	220a      	movs	r2, #10
    ba42:	991f      	ldr	r1, [sp, #124]	; 0x7c
    ba44:	f009 fb92 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ba48:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    ba4a:	f64b 6030 	movw	r0, #48688	; 0xbe30
    ba4e:	f2c0 0001 	movt	r0, #1
    ba52:	f24c 020c 	movw	r2, #49164	; 0xc00c
    ba56:	f2c0 0201 	movt	r2, #1
    ba5a:	2121      	movs	r1, #33	; 0x21
    ba5c:	f009 fb70 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ba60:	defe      	udf	#254	; 0xfe
    ba62:	f64b 6070 	movw	r0, #48752	; 0xbe70
    ba66:	f2c0 0001 	movt	r0, #1
    ba6a:	f24c 021c 	movw	r2, #49180	; 0xc01c
    ba6e:	f2c0 0201 	movt	r2, #1
    ba72:	211c      	movs	r1, #28
    ba74:	f009 fb64 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ba78:	defe      	udf	#254	; 0xfe
    ba7a:	f24c 002c 	movw	r0, #49196	; 0xc02c
    ba7e:	f2c0 0001 	movt	r0, #1
    ba82:	223f      	movs	r2, #63	; 0x3f
    ba84:	9905      	ldr	r1, [sp, #20]
    ba86:	f009 fb71 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ba8a:	defe      	udf	#254	; 0xfe
        data.touches[i].pressure =
    ba8c:	f24c 003c 	movw	r0, #49212	; 0xc03c
    ba90:	f2c0 0001 	movt	r0, #1
    ba94:	220a      	movs	r2, #10
    ba96:	991f      	ldr	r1, [sp, #124]	; 0x7c
    ba98:	f009 fb68 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ba9c:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    ba9e:	f64b 6030 	movw	r0, #48688	; 0xbe30
    baa2:	f2c0 0001 	movt	r0, #1
    baa6:	f24c 024c 	movw	r2, #49228	; 0xc04c
    baaa:	f2c0 0201 	movt	r2, #1
    baae:	2121      	movs	r1, #33	; 0x21
    bab0:	f009 fb46 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bab4:	defe      	udf	#254	; 0xfe
    bab6:	f64b 6070 	movw	r0, #48752	; 0xbe70
    baba:	f2c0 0001 	movt	r0, #1
    babe:	f24c 025c 	movw	r2, #49244	; 0xc05c
    bac2:	f2c0 0201 	movt	r2, #1
    bac6:	211c      	movs	r1, #28
    bac8:	f009 fb3a 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bacc:	defe      	udf	#254	; 0xfe
    bace:	f24c 006c 	movw	r0, #49260	; 0xc06c
    bad2:	f2c0 0001 	movt	r0, #1
    bad6:	223f      	movs	r2, #63	; 0x3f
    bad8:	9902      	ldr	r1, [sp, #8]
    bada:	f009 fb47 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bade:	defe      	udf	#254	; 0xfe
        data.touches[i].area =
    bae0:	f24c 007c 	movw	r0, #49276	; 0xc07c
    bae4:	f2c0 0001 	movt	r0, #1
    bae8:	220a      	movs	r2, #10
    baea:	991f      	ldr	r1, [sp, #124]	; 0x7c
    baec:	f009 fb3e 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    baf0:	defe      	udf	#254	; 0xfe
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    baf2:	f24c 008c 	movw	r0, #49292	; 0xc08c
    baf6:	f2c0 0001 	movt	r0, #1
    bafa:	220a      	movs	r2, #10
    bafc:	991f      	ldr	r1, [sp, #124]	; 0x7c
    bafe:	f009 fb35 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bb02:	defe      	udf	#254	; 0xfe
    bb04:	f24c 009c 	movw	r0, #49308	; 0xc09c
    bb08:	f2c0 0001 	movt	r0, #1
    bb0c:	220a      	movs	r2, #10
    bb0e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    bb10:	f009 fb2c 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bb14:	defe      	udf	#254	; 0xfe

0000bb16 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E>:

/// Event that will be forwarded to the Event Queue when a touch interrupt is triggered
static mut TOUCH_EVENT: os_event = fill_zero!(os_event);  //  Init all fields to 0 or NULL

/// Read a range of I2C registers from the I2C address `addr` (7-bit address), starting at `start_register` for count `num_registers`. Save into `buffer`.
fn read_register_range(addr: u8, start_register: u8, num_registers: u8, buffer: &mut[u8]) -> MynewtResult<()> {
    bb16:	b5b0      	push	{r4, r5, r7, lr}
    bb18:	b094      	sub	sp, #80	; 0x50
    bb1a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
    bb1e:	4696      	mov	lr, r2
    bb20:	460c      	mov	r4, r1
    bb22:	4605      	mov	r5, r0
    bb24:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    bb28:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
    bb2c:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
    bb30:	9310      	str	r3, [sp, #64]	; 0x40
    bb32:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    bb36:	4618      	mov	r0, r3
    bb38:	4661      	mov	r1, ip
    bb3a:	930d      	str	r3, [sp, #52]	; 0x34
    bb3c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    bb40:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    bb44:	940a      	str	r4, [sp, #40]	; 0x28
    bb46:	9509      	str	r5, [sp, #36]	; 0x24
    bb48:	f005 fd8b 	bl	11662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    bb4c:	9008      	str	r0, [sp, #32]
    bb4e:	e7ff      	b.n	bb50 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x3a>
    bb50:	980b      	ldr	r0, [sp, #44]	; 0x2c
    bb52:	b2c1      	uxtb	r1, r0
    bb54:	9a08      	ldr	r2, [sp, #32]
    bb56:	428a      	cmp	r2, r1
    bb58:	d30d      	bcc.n	bb76 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x60>
    bb5a:	e7ff      	b.n	bb5c <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x46>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    bb5c:	980a      	ldr	r0, [sp, #40]	; 0x28
    bb5e:	b2c1      	uxtb	r1, r0
    bb60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bb62:	fa51 f182 	uxtab	r1, r1, r2
    bb66:	b2cb      	uxtb	r3, r1
    bb68:	468c      	mov	ip, r1
    bb6a:	428b      	cmp	r3, r1
    bb6c:	f8cd c01c 	str.w	ip, [sp, #28]
    bb70:	f040 8092 	bne.w	bc98 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x182>
    bb74:	e00b      	b.n	bb8e <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x78>
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    bb76:	f24c 00ac 	movw	r0, #49324	; 0xc0ac
    bb7a:	f2c0 0001 	movt	r0, #1
    bb7e:	f24c 02b4 	movw	r2, #49332	; 0xc0b4
    bb82:	f2c0 0201 	movt	r2, #1
    bb86:	2107      	movs	r1, #7
    bb88:	f009 fada 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bb8c:	defe      	udf	#254	; 0xfe
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    bb8e:	9807      	ldr	r0, [sp, #28]
    bb90:	b241      	sxtb	r1, r0
    bb92:	2900      	cmp	r1, #0
    bb94:	d411      	bmi.n	bbba <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xa4>
    bb96:	e7ff      	b.n	bb98 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x82>
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Write Mode (1 bit, value 0)...
    //    Followed by starting Register Number (8 bits)
    unsafe { 
        I2C_BUFFER[0] = start_register;  //  I2C Packet buffer contains starting Register Number (1 byte)
    bb98:	f240 2014 	movw	r0, #532	; 0x214
    bb9c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bba0:	990a      	ldr	r1, [sp, #40]	; 0x28
    bba2:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;         //  I2C Packet address (7 bits)
    bba4:	f240 220c 	movw	r2, #524	; 0x20c
    bba8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    bbac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bbae:	7013      	strb	r3, [r2, #0]
    bbb0:	2101      	movs	r1, #1
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    bbb2:	f005 fd56 	bl	11662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    bbb6:	9006      	str	r0, [sp, #24]
    bbb8:	e00b      	b.n	bbd2 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xbc>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    bbba:	f64b 50b0 	movw	r0, #48560	; 0xbdb0
    bbbe:	f2c0 0001 	movt	r0, #1
    bbc2:	f24c 02d4 	movw	r2, #49364	; 0xc0d4
    bbc6:	f2c0 0201 	movt	r2, #1
    bbca:	2108      	movs	r1, #8
    bbcc:	f009 fab8 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bbd0:	defe      	udf	#254	; 0xfe
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    bbd2:	f240 200c 	movw	r0, #524	; 0x20c
    bbd6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bbda:	9906      	ldr	r1, [sp, #24]
    bbdc:	8041      	strh	r1, [r0, #2]
        I2C_DATA.buffer = I2C_BUFFER.as_mut_ptr();  //  I2C Packet data points to packet buffer
    bbde:	f240 2014 	movw	r0, #532	; 0x214
    bbe2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bbe6:	2101      	movs	r1, #1
    bbe8:	f005 fd24 	bl	11634 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    bbec:	9005      	str	r0, [sp, #20]
    bbee:	e7ff      	b.n	bbf0 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xda>
    bbf0:	f240 200c 	movw	r0, #524	; 0x20c
    bbf4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bbf8:	9905      	ldr	r1, [sp, #20]
    bbfa:	6041      	str	r1, [r0, #4]
    bbfc:	2201      	movs	r2, #1
    bbfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    bc02:	f04f 0c00 	mov.w	ip, #0
    };
    let _rc1 = unsafe { hal::hal_i2c_master_write(1, &mut I2C_DATA, 1000, 0) };  //  No stop yet, must continue even if we hit an error
    bc06:	9004      	str	r0, [sp, #16]
    bc08:	4610      	mov	r0, r2
    bc0a:	9904      	ldr	r1, [sp, #16]
    bc0c:	461a      	mov	r2, r3
    bc0e:	4663      	mov	r3, ip
    bc10:	f00b fcbc 	bl	1758c <hal_i2c_master_write>
    bc14:	9012      	str	r0, [sp, #72]	; 0x48
    bc16:	e7ff      	b.n	bc18 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x102>
    //  Step 3: Prepare to receive the stream of I2C Device Register values...
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Read Mode (1 bit, value 1)
    unsafe { 
        I2C_BUFFER[0] = 0x00;     //  I2C Packet buffer should be empty (provided by caller)
    bc18:	f240 2014 	movw	r0, #532	; 0x214
    bc1c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bc20:	2100      	movs	r1, #0
    bc22:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;  //  I2C Packet address (7 bits)
    bc24:	f240 200c 	movw	r0, #524	; 0x20c
    bc28:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bc2c:	9909      	ldr	r1, [sp, #36]	; 0x24
    bc2e:	7001      	strb	r1, [r0, #0]
        I2C_DATA.len = num_registers as u16;    //  I2C Packet data size is number of Registers to read
    bc30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bc32:	b2d3      	uxtb	r3, r2
    bc34:	8043      	strh	r3, [r0, #2]
        I2C_DATA.buffer = buffer.as_mut_ptr();  //  I2C Packet data points to packet buffer
    bc36:	980d      	ldr	r0, [sp, #52]	; 0x34
    bc38:	990c      	ldr	r1, [sp, #48]	; 0x30
    bc3a:	f005 fcfb 	bl	11634 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    bc3e:	9003      	str	r0, [sp, #12]
    bc40:	e7ff      	b.n	bc42 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x12c>
    bc42:	f240 200c 	movw	r0, #524	; 0x20c
    bc46:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bc4a:	9903      	ldr	r1, [sp, #12]
    bc4c:	6041      	str	r1, [r0, #4]
    bc4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bc52:	2301      	movs	r3, #1
    };
    //  Step 4: Receive the requested number of Register values from I2C Device (1 byte per register)
    //  Step 5: Send the Stop Condition (Low to High SDA Transition)
    let rc2 = unsafe { hal::hal_i2c_master_read(1, &mut I2C_DATA, 1000, 1) };
    bc54:	9002      	str	r0, [sp, #8]
    bc56:	4618      	mov	r0, r3
    bc58:	9902      	ldr	r1, [sp, #8]
    bc5a:	f00b fd2b 	bl	176b4 <hal_i2c_master_read>
    bc5e:	4601      	mov	r1, r0
    bc60:	9013      	str	r0, [sp, #76]	; 0x4c
    bc62:	9101      	str	r1, [sp, #4]
    bc64:	e7ff      	b.n	bc66 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x150>
    if rc2 == hal::HAL_I2C_ERR_ADDR_NACK as i32 {
    bc66:	9801      	ldr	r0, [sp, #4]
    bc68:	2804      	cmp	r0, #4
    bc6a:	d005      	beq.n	bc78 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x162>
    bc6c:	e7ff      	b.n	bc6e <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x158>
    bc6e:	2000      	movs	r0, #0
        ////assert!(false, "i2c fail");  //  I2C read failed
        console::print("i2c fail\n"); ////
        return Ok(());               //  TODO: Return an error
    }
    Ok(())
    bc70:	900e      	str	r0, [sp, #56]	; 0x38
    bc72:	2001      	movs	r0, #1
    bc74:	900e      	str	r0, [sp, #56]	; 0x38
}
    bc76:	e00c      	b.n	bc92 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x17c>
        console::print("i2c fail\n"); ////
    bc78:	f24c 00e4 	movw	r0, #49380	; 0xc0e4
    bc7c:	f2c0 0001 	movt	r0, #1
    bc80:	2109      	movs	r1, #9
    bc82:	f7fd fa98 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    bc86:	e7ff      	b.n	bc88 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x172>
    bc88:	2000      	movs	r0, #0
        return Ok(());               //  TODO: Return an error
    bc8a:	900e      	str	r0, [sp, #56]	; 0x38
    bc8c:	2001      	movs	r0, #1
    bc8e:	900e      	str	r0, [sp, #56]	; 0x38
    bc90:	e7ff      	b.n	bc92 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x17c>
}
    bc92:	980e      	ldr	r0, [sp, #56]	; 0x38
    bc94:	b014      	add	sp, #80	; 0x50
    bc96:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    bc98:	f64b 6070 	movw	r0, #48752	; 0xbe70
    bc9c:	f2c0 0001 	movt	r0, #1
    bca0:	f24c 02c4 	movw	r2, #49348	; 0xc0c4
    bca4:	f2c0 0201 	movt	r2, #1
    bca8:	211c      	movs	r1, #28
    bcaa:	f009 fa49 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bcae:	defe      	udf	#254	; 0xfe

0000bcb0 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17he96540eeeab4858dE>:
    pub const fn new() -> Self {
    bcb0:	b580      	push	{r7, lr}
    bcb2:	b088      	sub	sp, #32
            buffer: MaybeUninit::uninit(),
    bcb4:	9001      	str	r0, [sp, #4]
    bcb6:	e7ff      	b.n	bcb8 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17he96540eeeab4858dE+0x8>
        Self {
    bcb8:	9801      	ldr	r0, [sp, #4]
    bcba:	3004      	adds	r0, #4
    bcbc:	a902      	add	r1, sp, #8
    bcbe:	2218      	movs	r2, #24
    bcc0:	f00f fd4a 	bl	1b758 <__aeabi_memcpy>
    bcc4:	2100      	movs	r1, #0
    bcc6:	9a01      	ldr	r2, [sp, #4]
    bcc8:	6011      	str	r1, [r2, #0]
    }
    bcca:	b008      	add	sp, #32
    bccc:	bd80      	pop	{r7, pc}

0000bcce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h08b4ae7d93862706E>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
    bcce:	b580      	push	{r7, lr}
    bcd0:	b088      	sub	sp, #32
    bcd2:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
    bcd4:	1d01      	adds	r1, r0, #4
    bcd6:	9106      	str	r1, [sp, #24]
    bcd8:	9107      	str	r1, [sp, #28]
    bcda:	9004      	str	r0, [sp, #16]
    bcdc:	9103      	str	r1, [sp, #12]
    bcde:	e7ff      	b.n	bce0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h08b4ae7d93862706E+0x12>
    bce0:	9804      	ldr	r0, [sp, #16]
    bce2:	6801      	ldr	r1, [r0, #0]
    bce4:	9803      	ldr	r0, [sp, #12]
    bce6:	f7fe fd47 	bl	a778 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
    bcea:	9002      	str	r0, [sp, #8]
    bcec:	9101      	str	r1, [sp, #4]
    bcee:	e7ff      	b.n	bcf0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h08b4ae7d93862706E+0x22>
    }
    bcf0:	9802      	ldr	r0, [sp, #8]
    bcf2:	9901      	ldr	r1, [sp, #4]
    bcf4:	b008      	add	sp, #32
    bcf6:	bd80      	pop	{r7, pc}

0000bcf8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hfb3f985a9127bae7E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
    bcf8:	b580      	push	{r7, lr}
    bcfa:	b08a      	sub	sp, #40	; 0x28
    bcfc:	460a      	mov	r2, r1
    bcfe:	9006      	str	r0, [sp, #24]
    bd00:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
    bd04:	1d01      	adds	r1, r0, #4
    bd06:	9108      	str	r1, [sp, #32]
    bd08:	9109      	str	r1, [sp, #36]	; 0x24
    bd0a:	9005      	str	r0, [sp, #20]
    bd0c:	9204      	str	r2, [sp, #16]
    bd0e:	9103      	str	r1, [sp, #12]
    bd10:	e7ff      	b.n	bd12 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hfb3f985a9127bae7E+0x1a>
            .add(self.len)
    bd12:	9805      	ldr	r0, [sp, #20]
    bd14:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
    bd16:	9803      	ldr	r0, [sp, #12]
    bd18:	f7fe fe24 	bl	a964 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
    bd1c:	9002      	str	r0, [sp, #8]
    bd1e:	e7ff      	b.n	bd20 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hfb3f985a9127bae7E+0x28>
    bd20:	9802      	ldr	r0, [sp, #8]
    bd22:	9904      	ldr	r1, [sp, #16]
    bd24:	f7fe fe29 	bl	a97a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
    bd28:	e7ff      	b.n	bd2a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hfb3f985a9127bae7E+0x32>
        self.len += 1;
    bd2a:	9805      	ldr	r0, [sp, #20]
    bd2c:	6801      	ldr	r1, [r0, #0]
    bd2e:	1c4a      	adds	r2, r1, #1
    bd30:	4613      	mov	r3, r2
    bd32:	428a      	cmp	r2, r1
    bd34:	9301      	str	r3, [sp, #4]
    bd36:	d305      	bcc.n	bd44 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hfb3f985a9127bae7E+0x4c>
    bd38:	e7ff      	b.n	bd3a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hfb3f985a9127bae7E+0x42>
    bd3a:	9801      	ldr	r0, [sp, #4]
    bd3c:	9905      	ldr	r1, [sp, #20]
    bd3e:	6008      	str	r0, [r1, #0]
    }
    bd40:	b00a      	add	sp, #40	; 0x28
    bd42:	bd80      	pop	{r7, pc}
        self.len += 1;
    bd44:	f24c 1060 	movw	r0, #49504	; 0xc160
    bd48:	f2c0 0001 	movt	r0, #1
    bd4c:	f24c 1244 	movw	r2, #49476	; 0xc144
    bd50:	f2c0 0201 	movt	r2, #1
    bd54:	211c      	movs	r1, #28
    bd56:	f009 f9f3 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bd5a:	defe      	udf	#254	; 0xfe

0000bd5c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17ha6504bdbfeeb86a0E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
    bd5c:	b580      	push	{r7, lr}
    bd5e:	b094      	sub	sp, #80	; 0x50
    bd60:	900e      	str	r0, [sp, #56]	; 0x38
    bd62:	910f      	str	r1, [sp, #60]	; 0x3c
    bd64:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
    bd66:	6803      	ldr	r3, [r0, #0]
    bd68:	9009      	str	r0, [sp, #36]	; 0x24
    bd6a:	4608      	mov	r0, r1
    bd6c:	9108      	str	r1, [sp, #32]
    bd6e:	4611      	mov	r1, r2
    bd70:	9207      	str	r2, [sp, #28]
    bd72:	9306      	str	r3, [sp, #24]
    bd74:	f7fe fd12 	bl	a79c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
    bd78:	9005      	str	r0, [sp, #20]
    bd7a:	e7ff      	b.n	bd7c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17ha6504bdbfeeb86a0E+0x20>
    bd7c:	9806      	ldr	r0, [sp, #24]
    bd7e:	9905      	ldr	r1, [sp, #20]
    bd80:	1842      	adds	r2, r0, r1
    bd82:	4613      	mov	r3, r2
    bd84:	4282      	cmp	r2, r0
    bd86:	9304      	str	r3, [sp, #16]
    bd88:	d33f      	bcc.n	be0a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17ha6504bdbfeeb86a0E+0xae>
    bd8a:	e7ff      	b.n	bd8c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17ha6504bdbfeeb86a0E+0x30>
    bd8c:	9809      	ldr	r0, [sp, #36]	; 0x24
    bd8e:	f000 f85d 	bl	be4c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hcf3d218d896cc0e9E>
    bd92:	9003      	str	r0, [sp, #12]
    bd94:	e7ff      	b.n	bd96 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17ha6504bdbfeeb86a0E+0x3a>
    bd96:	9804      	ldr	r0, [sp, #16]
    bd98:	9903      	ldr	r1, [sp, #12]
    bd9a:	4288      	cmp	r0, r1
    bd9c:	d807      	bhi.n	bdae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17ha6504bdbfeeb86a0E+0x52>
    bd9e:	e7ff      	b.n	bda0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17ha6504bdbfeeb86a0E+0x44>
            for elem in other {
    bda0:	9808      	ldr	r0, [sp, #32]
    bda2:	9907      	ldr	r1, [sp, #28]
    bda4:	f7fe fd6e 	bl	a884 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
    bda8:	9002      	str	r0, [sp, #8]
    bdaa:	9101      	str	r1, [sp, #4]
    bdac:	e003      	b.n	bdb6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17ha6504bdbfeeb86a0E+0x5a>
    bdae:	2001      	movs	r0, #1
            Err(())
    bdb0:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
    bdb4:	e025      	b.n	be02 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17ha6504bdbfeeb86a0E+0xa6>
            for elem in other {
    bdb6:	9802      	ldr	r0, [sp, #8]
    bdb8:	900b      	str	r0, [sp, #44]	; 0x2c
    bdba:	9901      	ldr	r1, [sp, #4]
    bdbc:	910c      	str	r1, [sp, #48]	; 0x30
    bdbe:	e7ff      	b.n	bdc0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17ha6504bdbfeeb86a0E+0x64>
    bdc0:	a80b      	add	r0, sp, #44	; 0x2c
    bdc2:	f7fe fd6c 	bl	a89e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
    bdc6:	900d      	str	r0, [sp, #52]	; 0x34
    bdc8:	e7ff      	b.n	bdca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17ha6504bdbfeeb86a0E+0x6e>
    bdca:	980d      	ldr	r0, [sp, #52]	; 0x34
    bdcc:	2800      	cmp	r0, #0
    bdce:	4601      	mov	r1, r0
    bdd0:	bf18      	it	ne
    bdd2:	2101      	movne	r1, #1
    bdd4:	2800      	cmp	r0, #0
    bdd6:	d001      	beq.n	bddc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17ha6504bdbfeeb86a0E+0x80>
    bdd8:	e7ff      	b.n	bdda <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17ha6504bdbfeeb86a0E+0x7e>
    bdda:	e004      	b.n	bde6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17ha6504bdbfeeb86a0E+0x8a>
    bddc:	2000      	movs	r0, #0
            Ok(())
    bdde:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
    bde2:	e00e      	b.n	be02 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17ha6504bdbfeeb86a0E+0xa6>
            for elem in other {
    bde4:	defe      	udf	#254	; 0xfe
    bde6:	980d      	ldr	r0, [sp, #52]	; 0x34
    bde8:	9011      	str	r0, [sp, #68]	; 0x44
    bdea:	9012      	str	r0, [sp, #72]	; 0x48
    bdec:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
    bdee:	f004 fede 	bl	10bae <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17h830ef09e153bc6fbE>
    bdf2:	9000      	str	r0, [sp, #0]
    bdf4:	e7ff      	b.n	bdf6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17ha6504bdbfeeb86a0E+0x9a>
    bdf6:	9809      	ldr	r0, [sp, #36]	; 0x24
    bdf8:	9900      	ldr	r1, [sp, #0]
    bdfa:	f7ff ff7d 	bl	bcf8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hfb3f985a9127bae7E>
    bdfe:	e7ff      	b.n	be00 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17ha6504bdbfeeb86a0E+0xa4>
            for elem in other {
    be00:	e7de      	b.n	bdc0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17ha6504bdbfeeb86a0E+0x64>
    }
    be02:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
    be06:	b014      	add	sp, #80	; 0x50
    be08:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
    be0a:	f24c 1060 	movw	r0, #49504	; 0xc160
    be0e:	f2c0 0001 	movt	r0, #1
    be12:	f24c 127c 	movw	r2, #49532	; 0xc17c
    be16:	f2c0 0201 	movt	r2, #1
    be1a:	211c      	movs	r1, #28
    be1c:	f009 f990 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    be20:	defe      	udf	#254	; 0xfe

0000be22 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h91956914bff669c1E>:
    pub(crate) fn as_slice(&self) -> &[T] {
    be22:	b580      	push	{r7, lr}
    be24:	b088      	sub	sp, #32
    be26:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
    be28:	1d01      	adds	r1, r0, #4
    be2a:	9106      	str	r1, [sp, #24]
    be2c:	9107      	str	r1, [sp, #28]
    be2e:	9004      	str	r0, [sp, #16]
    be30:	9103      	str	r1, [sp, #12]
    be32:	e7ff      	b.n	be34 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h91956914bff669c1E+0x12>
    be34:	9804      	ldr	r0, [sp, #16]
    be36:	6801      	ldr	r1, [r0, #0]
    be38:	9803      	ldr	r0, [sp, #12]
    be3a:	f7fe fc90 	bl	a75e <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
    be3e:	9002      	str	r0, [sp, #8]
    be40:	9101      	str	r1, [sp, #4]
    be42:	e7ff      	b.n	be44 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h91956914bff669c1E+0x22>
    }
    be44:	9802      	ldr	r0, [sp, #8]
    be46:	9901      	ldr	r1, [sp, #4]
    be48:	b008      	add	sp, #32
    be4a:	bd80      	pop	{r7, pc}

0000be4c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hcf3d218d896cc0e9E>:
    pub(crate) fn capacity(&self) -> usize {
    be4c:	b580      	push	{r7, lr}
    be4e:	b082      	sub	sp, #8
    be50:	9001      	str	r0, [sp, #4]
        N::to_usize()
    be52:	f008 f9c9 	bl	141e8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>
    be56:	9000      	str	r0, [sp, #0]
    be58:	e7ff      	b.n	be5a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hcf3d218d896cc0e9E+0xe>
    }
    be5a:	9800      	ldr	r0, [sp, #0]
    be5c:	b002      	add	sp, #8
    be5e:	bd80      	pop	{r7, pc}

0000be60 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E>:

/// Size of the stack (in 4-byte units). Previously `OS_STACK_ALIGN(256)`  
const CHIP8_TASK_STACK_SIZE: usize = 6144;  //  Must be 3072 and above because CHIP8 Emulator requires substantial stack space

/// Render some graphics and text to the PineTime display. `start_display()` must have been called earlier.
pub fn on_start() -> MynewtResult<()> {
    be60:	b580      	push	{r7, lr}
    be62:	b0a4      	sub	sp, #144	; 0x90
    console::print("Rust CHIP8\n"); console::flush();
    be64:	f24c 108c 	movw	r0, #49548	; 0xc18c
    be68:	f2c0 0001 	movt	r0, #1
    be6c:	210b      	movs	r1, #11
    be6e:	f7fd f9a2 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    be72:	e7ff      	b.n	be74 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x14>
    be74:	f7fd f9e5 	bl	9242 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    be78:	e7ff      	b.n	be7a <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x1a>
    be7a:	2000      	movs	r0, #0
    
    //  Create black background
    let background = Rectangle::<Rgb565>
        ::new( Coord::new( 0, 0 ), Coord::new( 239, 239 ) )   //  Rectangle coordinates
    be7c:	900e      	str	r0, [sp, #56]	; 0x38
    be7e:	990e      	ldr	r1, [sp, #56]	; 0x38
    be80:	f005 f991 	bl	111a6 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    be84:	900d      	str	r0, [sp, #52]	; 0x34
    be86:	910c      	str	r1, [sp, #48]	; 0x30
    be88:	e7ff      	b.n	be8a <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x2a>
    be8a:	20ef      	movs	r0, #239	; 0xef
    be8c:	900b      	str	r0, [sp, #44]	; 0x2c
    be8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    be90:	f005 f989 	bl	111a6 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    be94:	900a      	str	r0, [sp, #40]	; 0x28
    be96:	9109      	str	r1, [sp, #36]	; 0x24
    be98:	e7ff      	b.n	be9a <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x3a>
    let background = Rectangle::<Rgb565>
    be9a:	4668      	mov	r0, sp
    be9c:	9909      	ldr	r1, [sp, #36]	; 0x24
    be9e:	6001      	str	r1, [r0, #0]
    bea0:	a817      	add	r0, sp, #92	; 0x5c
    bea2:	990d      	ldr	r1, [sp, #52]	; 0x34
    bea4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bea8:	f008 fa42 	bl	14330 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    beac:	e7ff      	b.n	beae <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x4e>
    beae:	2000      	movs	r0, #0
        .fill( Some( Rgb565::from(( 0x00, 0x00, 0x00 )) ) );  //  Black
    beb0:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
    beb4:	f88d 007d 	strb.w	r0, [sp, #125]	; 0x7d
    beb8:	f88d 007e 	strb.w	r0, [sp, #126]	; 0x7e
    bebc:	f89d 007e 	ldrb.w	r0, [sp, #126]	; 0x7e
    bec0:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
    bec4:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    bec8:	f005 f976 	bl	111b8 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    becc:	9008      	str	r0, [sp, #32]
    bece:	e7ff      	b.n	bed0 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x70>
    bed0:	9808      	ldr	r0, [sp, #32]
    bed2:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
    bed6:	2101      	movs	r1, #1
    bed8:	f8ad 1078 	strh.w	r1, [sp, #120]	; 0x78
    let background = Rectangle::<Rgb565>
    bedc:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    bee0:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    bee4:	a810      	add	r0, sp, #64	; 0x40
    bee6:	a917      	add	r1, sp, #92	; 0x5c
    bee8:	f008 fa10 	bl	1430c <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    beec:	e7ff      	b.n	beee <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x8e>
    //  druid::draw_to_display(background);

    //  Start the emulator in a background task
    os::task_init(                  //  Create a new task and start it...
        unsafe { &mut CHIP8_TASK }, //  Task object will be saved here
        &init_strn!( "chip8" ),     //  Name of task
    beee:	f24c 10ac 	movw	r0, #49580	; 0xc1ac
    bef2:	f2c0 0001 	movt	r0, #1
    bef6:	6801      	ldr	r1, [r0, #0]
        Some( task_func ),    //  Function to execute when task starts
    bef8:	f64b 7079 	movw	r0, #49017	; 0xbf79
    befc:	f2c0 0000 	movt	r0, #0
    bf00:	9021      	str	r0, [sp, #132]	; 0x84
    os::task_init(                  //  Create a new task and start it...
    bf02:	9a21      	ldr	r2, [sp, #132]	; 0x84
    bf04:	4668      	mov	r0, sp
    bf06:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    bf0a:	6103      	str	r3, [r0, #16]
    bf0c:	60c3      	str	r3, [r0, #12]
    bf0e:	f240 2368 	movw	r3, #616	; 0x268
    bf12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    bf16:	6083      	str	r3, [r0, #8]
    bf18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bf1c:	6043      	str	r3, [r0, #4]
    bf1e:	2380      	movs	r3, #128	; 0x80
    bf20:	6003      	str	r3, [r0, #0]
    bf22:	f240 2018 	movw	r0, #536	; 0x218
    bf26:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bf2a:	2300      	movs	r3, #0
    bf2c:	f7fc ff93 	bl	8e56 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
    bf30:	9007      	str	r0, [sp, #28]
    bf32:	e7ff      	b.n	bf34 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xd4>
    bf34:	9807      	ldr	r0, [sp, #28]
    bf36:	f7fc ff02 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    bf3a:	9020      	str	r0, [sp, #128]	; 0x80
    bf3c:	e7ff      	b.n	bf3e <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xde>
        NULL,  //  Argument to be passed to above function
        128,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut CHIP8_TASK_STACK }, //  Stack space for the task
        CHIP8_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
    bf3e:	9820      	ldr	r0, [sp, #128]	; 0x80
    bf40:	1e41      	subs	r1, r0, #1
    bf42:	bf18      	it	ne
    bf44:	2101      	movne	r1, #1
    bf46:	2801      	cmp	r0, #1
    bf48:	d001      	beq.n	bf4e <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xee>
    bf4a:	e7ff      	b.n	bf4c <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xec>
    bf4c:	e005      	b.n	bf5a <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xfa>
    bf4e:	2000      	movs	r0, #0

    //  Return success to the caller
    Ok(())
    bf50:	900f      	str	r0, [sp, #60]	; 0x3c
    bf52:	2001      	movs	r0, #1
    bf54:	900f      	str	r0, [sp, #60]	; 0x3c
}
    bf56:	e006      	b.n	bf66 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x106>
    os::task_init(                  //  Create a new task and start it...
    bf58:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
    bf5a:	9820      	ldr	r0, [sp, #128]	; 0x80
    bf5c:	9023      	str	r0, [sp, #140]	; 0x8c
    bf5e:	f006 f801 	bl	11f64 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    bf62:	9006      	str	r0, [sp, #24]
    bf64:	e002      	b.n	bf6c <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x10c>
}
    bf66:	980f      	ldr	r0, [sp, #60]	; 0x3c
    bf68:	b024      	add	sp, #144	; 0x90
    bf6a:	bd80      	pop	{r7, pc}
    ) ? ;                               //  `?` means check for error
    bf6c:	9806      	ldr	r0, [sp, #24]
    bf6e:	f7fc feda 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    bf72:	900f      	str	r0, [sp, #60]	; 0x3c
    bf74:	e7ff      	b.n	bf76 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x116>
    bf76:	e7f6      	b.n	bf66 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x106>

0000bf78 <_ZN3app5chip89task_func17h385831a0096277b5E>:

///  Run the emulator
extern "C" fn task_func(_arg: Ptr) {    
    bf78:	b580      	push	{r7, lr}
    bf7a:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
    bf7e:	b088      	sub	sp, #32
    bf80:	f50d 5e00 	add.w	lr, sp, #8192	; 0x2000
    bf84:	f8ce 009c 	str.w	r0, [lr, #156]	; 0x9c
    bf88:	a802      	add	r0, sp, #8
    //  Init the colours
    //  loop { if PIXEL_OFF.push(0x0).is_err() { break; } }
    //  loop { if PIXEL_ON.push(0xffff).is_err() { break; } }

    //  Create the emulator
    let chip8 = libchip8::Chip8::new(Hardware);
    bf8a:	f000 fdc3 	bl	cb14 <_ZN8libchip814Chip8$LT$T$GT$3new17h80d41819f2580e6eE>
    bf8e:	e7ff      	b.n	bf90 <_ZN3app5chip89task_func17h385831a0096277b5E+0x18>

    //  This will block until emulator terminates
    console::print("CHIP8 started\n"); console::flush();
    bf90:	f24c 10b0 	movw	r0, #49584	; 0xc1b0
    bf94:	f2c0 0001 	movt	r0, #1
    bf98:	210e      	movs	r1, #14
    bf9a:	f7fd f90c 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    bf9e:	e7ff      	b.n	bfa0 <_ZN3app5chip89task_func17h385831a0096277b5E+0x28>
    bfa0:	f7fd f94f 	bl	9242 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    bfa4:	e7ff      	b.n	bfa6 <_ZN3app5chip89task_func17h385831a0096277b5E+0x2e>
    bfa6:	f10d 0e10 	add.w	lr, sp, #16
    bfaa:	f50e 5082 	add.w	r0, lr, #4160	; 0x1040
    bfae:	a902      	add	r1, sp, #8
    bfb0:	f241 0248 	movw	r2, #4168	; 0x1048
    chip8.run(include_bytes!("../roms/invaders.ch8"));
    bfb4:	9001      	str	r0, [sp, #4]
    bfb6:	f00f fbcf 	bl	1b758 <__aeabi_memcpy>
    bfba:	f24c 11be 	movw	r1, #49598	; 0xc1be
    bfbe:	f2c0 0101 	movt	r1, #1
    bfc2:	f240 5215 	movw	r2, #1301	; 0x515
    bfc6:	9801      	ldr	r0, [sp, #4]
    bfc8:	f000 fe38 	bl	cc3c <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E>
    bfcc:	e7ff      	b.n	bfce <_ZN3app5chip89task_func17h385831a0096277b5E+0x56>

    //  Should not come here
    console::print("CHIP8 done\n"); console::flush();
    bfce:	f24c 60d3 	movw	r0, #50899	; 0xc6d3
    bfd2:	f2c0 0001 	movt	r0, #1
    bfd6:	210b      	movs	r1, #11
    bfd8:	f7fd f8ed 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    bfdc:	e7ff      	b.n	bfde <_ZN3app5chip89task_func17h385831a0096277b5E+0x66>
    bfde:	f7fd f930 	bl	9242 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    bfe2:	e7ff      	b.n	bfe4 <_ZN3app5chip89task_func17h385831a0096277b5E+0x6c>
    assert!(false, "CHIP8 should not end");
    bfe4:	f24c 60de 	movw	r0, #50910	; 0xc6de
    bfe8:	f2c0 0001 	movt	r0, #1
    bfec:	f24c 7208 	movw	r2, #50952	; 0xc708
    bff0:	f2c0 0201 	movt	r2, #1
    bff4:	2114      	movs	r1, #20
    bff6:	f009 f8a3 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bffa:	defe      	udf	#254	; 0xfe

0000bffc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17hdef6640b381cd2e3E>:
type PixelColors = heapless::Vec::<u16, PixelSize>;

struct Hardware;

impl libchip8::Hardware for Hardware {
    fn rand(&mut self) -> u8 {
    bffc:	b081      	sub	sp, #4
    bffe:	9000      	str	r0, [sp, #0]
    c000:	207b      	movs	r0, #123	; 0x7b
        //  Return a random value.
        123  //  TODO
        //  self.rng.gen()
    }
    c002:	b001      	add	sp, #4
    c004:	4770      	bx	lr

0000c006 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h6ab5fe7f9b6adc84E>:

    fn key(&mut self, _key: u8) -> bool {
    c006:	b082      	sub	sp, #8
    c008:	460a      	mov	r2, r1
    c00a:	9000      	str	r0, [sp, #0]
    c00c:	f88d 1007 	strb.w	r1, [sp, #7]
    c010:	2000      	movs	r0, #0
        match &self.win {
            Some(win) => win.is_key_down(k),
            None => false,
        }
        */
    }
    c012:	b002      	add	sp, #8
    c014:	4770      	bx	lr

0000c016 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E>:

    fn vram_set(&mut self, x: usize, y: usize, d: bool) {
    c016:	b510      	push	{r4, lr}
    c018:	b0a4      	sub	sp, #144	; 0x90
    c01a:	469c      	mov	ip, r3
    c01c:	901e      	str	r0, [sp, #120]	; 0x78
    c01e:	911f      	str	r1, [sp, #124]	; 0x7c
    c020:	9220      	str	r2, [sp, #128]	; 0x80
    c022:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
        //  Set the state of a pixel in the screen.
        //  true for white, and false for black.
        //  console::print("set "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    c026:	293f      	cmp	r1, #63	; 0x3f
    c028:	920d      	str	r2, [sp, #52]	; 0x34
    c02a:	910c      	str	r1, [sp, #48]	; 0x30
    c02c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    c030:	d804      	bhi.n	c03c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x26>
    c032:	e7ff      	b.n	c034 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x1e>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    c034:	980d      	ldr	r0, [sp, #52]	; 0x34
    c036:	281f      	cmp	r0, #31
    c038:	d814      	bhi.n	c064 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x4e>
    c03a:	e00b      	b.n	c054 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x3e>
        assert!(x < SCREEN_WIDTH, "x overflow");
    c03c:	f24c 7048 	movw	r0, #51016	; 0xc748
    c040:	f2c0 0001 	movt	r0, #1
    c044:	f24c 7254 	movw	r2, #51028	; 0xc754
    c048:	f2c0 0201 	movt	r2, #1
    c04c:	210a      	movs	r1, #10
    c04e:	f009 f877 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c052:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    c054:	980d      	ldr	r0, [sp, #52]	; 0x34
    c056:	0181      	lsls	r1, r0, #6
    c058:	0e82      	lsrs	r2, r0, #26
    c05a:	2a00      	cmp	r2, #0
    c05c:	910a      	str	r1, [sp, #40]	; 0x28
    c05e:	f040 8109 	bne.w	c274 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x25e>
    c062:	e00b      	b.n	c07c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x66>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    c064:	f24c 7064 	movw	r0, #51044	; 0xc764
    c068:	f2c0 0001 	movt	r0, #1
    c06c:	f24c 7270 	movw	r2, #51056	; 0xc770
    c070:	f2c0 0201 	movt	r2, #1
    c074:	210a      	movs	r1, #10
    c076:	f009 f863 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c07a:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    c07c:	980c      	ldr	r0, [sp, #48]	; 0x30
    c07e:	990a      	ldr	r1, [sp, #40]	; 0x28
    c080:	1842      	adds	r2, r0, r1
    c082:	4613      	mov	r3, r2
    c084:	4282      	cmp	r2, r0
    c086:	9309      	str	r3, [sp, #36]	; 0x24
    c088:	f0c0 8100 	bcc.w	c28c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x276>
    c08c:	e7ff      	b.n	c08e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x78>
    c08e:	9809      	ldr	r0, [sp, #36]	; 0x24
    c090:	9022      	str	r0, [sp, #136]	; 0x88
        unsafe { SCREEN_BUFFER[i] = if d { 1 } else { 0 } };
    c092:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c094:	07ca      	lsls	r2, r1, #31
    c096:	2a00      	cmp	r2, #0
    c098:	d104      	bne.n	c0a4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x8e>
    c09a:	e7ff      	b.n	c09c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x86>
    c09c:	2000      	movs	r0, #0
    c09e:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    c0a2:	e003      	b.n	c0ac <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x96>
    c0a4:	2001      	movs	r0, #1
    c0a6:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    c0aa:	e7ff      	b.n	c0ac <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x96>
    c0ac:	2000      	movs	r0, #0
    c0ae:	9909      	ldr	r1, [sp, #36]	; 0x24
    c0b0:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    c0b4:	f040 80f6 	bne.w	c2a4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x28e>
    c0b8:	e7ff      	b.n	c0ba <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0xa4>
    c0ba:	f246 2068 	movw	r0, #25192	; 0x6268
    c0be:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c0c2:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    c0c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c0c8:	5481      	strb	r1, [r0, r2]

        let x_scaled: u16 = x as u16 * PIXEL_WIDTH as u16;
    c0ca:	980c      	ldr	r0, [sp, #48]	; 0x30
    c0cc:	b281      	uxth	r1, r0
    c0ce:	2303      	movs	r3, #3
    c0d0:	fba1 1303 	umull	r1, r3, r1, r3
    c0d4:	ea4f 4c11 	mov.w	ip, r1, lsr #16
    c0d8:	f04f 0e00 	mov.w	lr, #0
    c0dc:	ebbe 4f11 	cmp.w	lr, r1, lsr #16
    c0e0:	bf18      	it	ne
    c0e2:	f04f 0c01 	movne.w	ip, #1
    c0e6:	2b00      	cmp	r3, #0
    c0e8:	bf18      	it	ne
    c0ea:	2301      	movne	r3, #1
    c0ec:	ea43 030c 	orr.w	r3, r3, ip
    c0f0:	2b00      	cmp	r3, #0
    c0f2:	9108      	str	r1, [sp, #32]
    c0f4:	f040 80e0 	bne.w	c2b8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x2a2>
    c0f8:	e7ff      	b.n	c0fa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0xe4>
    c0fa:	9808      	ldr	r0, [sp, #32]
    c0fc:	f8ad 008c 	strh.w	r0, [sp, #140]	; 0x8c
        let y_scaled: u16 = y as u16 * PIXEL_HEIGHT as u16; 
    c100:	990d      	ldr	r1, [sp, #52]	; 0x34
    c102:	b28a      	uxth	r2, r1
    c104:	0093      	lsls	r3, r2, #2
    c106:	f3c2 3c8f 	ubfx	ip, r2, #14, #16
    c10a:	f04f 0e00 	mov.w	lr, #0
    c10e:	ebbe 4f13 	cmp.w	lr, r3, lsr #16
    c112:	bf18      	it	ne
    c114:	f04f 0c01 	movne.w	ip, #1
    c118:	1a92      	subs	r2, r2, r2
    c11a:	bf18      	it	ne
    c11c:	2201      	movne	r2, #1
    c11e:	ea42 020c 	orr.w	r2, r2, ip
    c122:	2a00      	cmp	r2, #0
    c124:	9307      	str	r3, [sp, #28]
    c126:	f040 80d3 	bne.w	c2d0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x2ba>
    c12a:	e7ff      	b.n	c12c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x116>
    c12c:	9807      	ldr	r0, [sp, #28]
    c12e:	f8ad 008e 	strh.w	r0, [sp, #142]	; 0x8e
        assert!(x_scaled < 240 - PIXEL_WIDTH as u16, "x overflow");
    c132:	9908      	ldr	r1, [sp, #32]
    c134:	b28a      	uxth	r2, r1
    c136:	2aec      	cmp	r2, #236	; 0xec
    c138:	d805      	bhi.n	c146 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x130>
    c13a:	e7ff      	b.n	c13c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x126>
        assert!(y_scaled < 240 - PIXEL_HEIGHT as u16, "y overflow");
    c13c:	9807      	ldr	r0, [sp, #28]
    c13e:	b281      	uxth	r1, r0
    c140:	29eb      	cmp	r1, #235	; 0xeb
    c142:	d811      	bhi.n	c168 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x152>
    c144:	e00b      	b.n	c15e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x148>
        assert!(x_scaled < 240 - PIXEL_WIDTH as u16, "x overflow");
    c146:	f24c 7048 	movw	r0, #51016	; 0xc748
    c14a:	f2c0 0001 	movt	r0, #1
    c14e:	f64c 021c 	movw	r2, #51228	; 0xc81c
    c152:	f2c0 0201 	movt	r2, #1
    c156:	210a      	movs	r1, #10
    c158:	f008 fff2 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c15c:	defe      	udf	#254	; 0xfe

        let pixel_colors = if d { &PIXEL_ON } else { &PIXEL_OFF };
    c15e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c160:	07c1      	lsls	r1, r0, #31
    c162:	2900      	cmp	r1, #0
    c164:	d112      	bne.n	c18c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x176>
    c166:	e00b      	b.n	c180 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x16a>
        assert!(y_scaled < 240 - PIXEL_HEIGHT as u16, "y overflow");
    c168:	f24c 7064 	movw	r0, #51044	; 0xc764
    c16c:	f2c0 0001 	movt	r0, #1
    c170:	f64c 022c 	movw	r2, #51244	; 0xc82c
    c174:	f2c0 0201 	movt	r2, #1
    c178:	210a      	movs	r1, #10
    c17a:	f008 ffe1 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c17e:	defe      	udf	#254	; 0xfe
        let pixel_colors = if d { &PIXEL_ON } else { &PIXEL_OFF };
    c180:	f24c 7030 	movw	r0, #50992	; 0xc730
    c184:	f2c0 0001 	movt	r0, #1
    c188:	900f      	str	r0, [sp, #60]	; 0x3c
    c18a:	e005      	b.n	c198 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x182>
    c18c:	f24c 7018 	movw	r0, #50968	; 0xc718
    c190:	f2c0 0001 	movt	r0, #1
    c194:	900f      	str	r0, [sp, #60]	; 0x3c
    c196:	e7ff      	b.n	c198 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x182>
    c198:	a810      	add	r0, sp, #64	; 0x40
        let mut colors = PixelColors::new();
    c19a:	f7fc fbab 	bl	88f4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h29061cea1b7f00a0E>
    c19e:	e7ff      	b.n	c1a0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x18a>
        colors.extend_from_slice(pixel_colors).expect("extend failed");
    c1a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c1a2:	a810      	add	r0, sp, #64	; 0x40
    c1a4:	220c      	movs	r2, #12
    c1a6:	f7fc fb97 	bl	88d8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17hffa79893ce20402cE>
    c1aa:	9006      	str	r0, [sp, #24]
    c1ac:	e7ff      	b.n	c1ae <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x198>
    c1ae:	9806      	ldr	r0, [sp, #24]
    c1b0:	f000 0001 	and.w	r0, r0, #1
    c1b4:	f64c 013c 	movw	r1, #51260	; 0xc83c
    c1b8:	f2c0 0101 	movt	r1, #1
    c1bc:	f64c 034c 	movw	r3, #51276	; 0xc84c
    c1c0:	f2c0 0301 	movt	r3, #1
    c1c4:	220d      	movs	r2, #13
    c1c6:	f007 feaf 	bl	13f28 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
    c1ca:	e7ff      	b.n	c1cc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x1b6>
    c1cc:	2003      	movs	r0, #3
        druid::set_display_pixels(x_scaled, y_scaled, 
            x_scaled + PIXEL_WIDTH as u16 - 1,
    c1ce:	9908      	ldr	r1, [sp, #32]
    c1d0:	fa10 f081 	uxtah	r0, r0, r1
    c1d4:	b282      	uxth	r2, r0
    c1d6:	4603      	mov	r3, r0
    c1d8:	4282      	cmp	r2, r0
    c1da:	9305      	str	r3, [sp, #20]
    c1dc:	f040 8084 	bne.w	c2e8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x2d2>
    c1e0:	e7ff      	b.n	c1e2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x1cc>
    c1e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c1e6:	9905      	ldr	r1, [sp, #20]
    c1e8:	fa10 f081 	uxtah	r0, r0, r1
    c1ec:	b282      	uxth	r2, r0
    c1ee:	4603      	mov	r3, r0
    c1f0:	4282      	cmp	r2, r0
    c1f2:	9304      	str	r3, [sp, #16]
    c1f4:	f040 8084 	bne.w	c300 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x2ea>
    c1f8:	e7ff      	b.n	c1fa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x1e4>
    c1fa:	2004      	movs	r0, #4
            y_scaled + PIXEL_HEIGHT as u16 - 1,
    c1fc:	9907      	ldr	r1, [sp, #28]
    c1fe:	fa10 f081 	uxtah	r0, r0, r1
    c202:	b282      	uxth	r2, r0
    c204:	4603      	mov	r3, r0
    c206:	4282      	cmp	r2, r0
    c208:	9303      	str	r3, [sp, #12]
    c20a:	f040 8085 	bne.w	c318 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x302>
    c20e:	e7ff      	b.n	c210 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x1fa>
    c210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c214:	9903      	ldr	r1, [sp, #12]
    c216:	fa10 f081 	uxtah	r0, r0, r1
    c21a:	b282      	uxth	r2, r0
    c21c:	4603      	mov	r3, r0
    c21e:	4282      	cmp	r2, r0
    c220:	9302      	str	r3, [sp, #8]
    c222:	f040 8085 	bne.w	c330 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x31a>
    c226:	e7ff      	b.n	c228 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x212>
    c228:	a810      	add	r0, sp, #64	; 0x40
    c22a:	a917      	add	r1, sp, #92	; 0x5c
            colors
    c22c:	460a      	mov	r2, r1
    c22e:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
    c232:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
    c236:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
    c23a:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
        druid::set_display_pixels(x_scaled, y_scaled, 
    c23e:	4668      	mov	r0, sp
    c240:	6001      	str	r1, [r0, #0]
    c242:	9808      	ldr	r0, [sp, #32]
    c244:	9907      	ldr	r1, [sp, #28]
    c246:	9a04      	ldr	r2, [sp, #16]
    c248:	9b02      	ldr	r3, [sp, #8]
    c24a:	f000 fac3 	bl	c7d4 <_ZN22piet_embedded_graphics7display18set_display_pixels17h114fde9e037a1031E>
    c24e:	9001      	str	r0, [sp, #4]
    c250:	e7ff      	b.n	c252 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x23c>
    c252:	9801      	ldr	r0, [sp, #4]
    c254:	f000 0001 	and.w	r0, r0, #1
    c258:	f64c 01a4 	movw	r1, #51364	; 0xc8a4
    c25c:	f2c0 0101 	movt	r1, #1
    c260:	f64c 03b8 	movw	r3, #51384	; 0xc8b8
    c264:	f2c0 0301 	movt	r3, #1
    c268:	2211      	movs	r2, #17
    c26a:	f007 fe5d 	bl	13f28 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
    c26e:	e7ff      	b.n	c270 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E+0x25a>
            .fill( Some( color ) );
        druid::draw_to_display(pixel);
        */
        //  trace!("Set pixel ({},{})", x, y);
        //  self.vram[(y * self.vramsz.0) + x] = d;
    }
    c270:	b024      	add	sp, #144	; 0x90
    c272:	bd10      	pop	{r4, pc}
        let i = x + y * SCREEN_WIDTH;
    c274:	f24c 7090 	movw	r0, #51088	; 0xc790
    c278:	f2c0 0001 	movt	r0, #1
    c27c:	f24c 7280 	movw	r2, #51072	; 0xc780
    c280:	f2c0 0201 	movt	r2, #1
    c284:	2121      	movs	r1, #33	; 0x21
    c286:	f008 ff5b 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c28a:	defe      	udf	#254	; 0xfe
    c28c:	f24c 70d0 	movw	r0, #51152	; 0xc7d0
    c290:	f2c0 0001 	movt	r0, #1
    c294:	f24c 72b4 	movw	r2, #51124	; 0xc7b4
    c298:	f2c0 0201 	movt	r2, #1
    c29c:	211c      	movs	r1, #28
    c29e:	f008 ff4f 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c2a2:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] = if d { 1 } else { 0 } };
    c2a4:	f24c 70ec 	movw	r0, #51180	; 0xc7ec
    c2a8:	f2c0 0001 	movt	r0, #1
    c2ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c2b0:	9909      	ldr	r1, [sp, #36]	; 0x24
    c2b2:	f008 ff5b 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    c2b6:	defe      	udf	#254	; 0xfe
        let x_scaled: u16 = x as u16 * PIXEL_WIDTH as u16;
    c2b8:	f24c 7090 	movw	r0, #51088	; 0xc790
    c2bc:	f2c0 0001 	movt	r0, #1
    c2c0:	f24c 72fc 	movw	r2, #51196	; 0xc7fc
    c2c4:	f2c0 0201 	movt	r2, #1
    c2c8:	2121      	movs	r1, #33	; 0x21
    c2ca:	f008 ff39 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c2ce:	defe      	udf	#254	; 0xfe
        let y_scaled: u16 = y as u16 * PIXEL_HEIGHT as u16; 
    c2d0:	f24c 7090 	movw	r0, #51088	; 0xc790
    c2d4:	f2c0 0001 	movt	r0, #1
    c2d8:	f64c 020c 	movw	r2, #51212	; 0xc80c
    c2dc:	f2c0 0201 	movt	r2, #1
    c2e0:	2121      	movs	r1, #33	; 0x21
    c2e2:	f008 ff2d 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c2e6:	defe      	udf	#254	; 0xfe
            x_scaled + PIXEL_WIDTH as u16 - 1,
    c2e8:	f24c 70d0 	movw	r0, #51152	; 0xc7d0
    c2ec:	f2c0 0001 	movt	r0, #1
    c2f0:	f64c 025c 	movw	r2, #51292	; 0xc85c
    c2f4:	f2c0 0201 	movt	r2, #1
    c2f8:	211c      	movs	r1, #28
    c2fa:	f008 ff21 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c2fe:	defe      	udf	#254	; 0xfe
    c300:	f64c 0070 	movw	r0, #51312	; 0xc870
    c304:	f2c0 0001 	movt	r0, #1
    c308:	f64c 025c 	movw	r2, #51292	; 0xc85c
    c30c:	f2c0 0201 	movt	r2, #1
    c310:	2121      	movs	r1, #33	; 0x21
    c312:	f008 ff15 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c316:	defe      	udf	#254	; 0xfe
            y_scaled + PIXEL_HEIGHT as u16 - 1,
    c318:	f24c 70d0 	movw	r0, #51152	; 0xc7d0
    c31c:	f2c0 0001 	movt	r0, #1
    c320:	f64c 0294 	movw	r2, #51348	; 0xc894
    c324:	f2c0 0201 	movt	r2, #1
    c328:	211c      	movs	r1, #28
    c32a:	f008 ff09 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c32e:	defe      	udf	#254	; 0xfe
    c330:	f64c 0070 	movw	r0, #51312	; 0xc870
    c334:	f2c0 0001 	movt	r0, #1
    c338:	f64c 0294 	movw	r2, #51348	; 0xc894
    c33c:	f2c0 0201 	movt	r2, #1
    c340:	2121      	movs	r1, #33	; 0x21
    c342:	f008 fefd 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c346:	defe      	udf	#254	; 0xfe

0000c348 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE>:

    fn vram_get(&mut self, x: usize, y: usize) -> bool {
    c348:	b088      	sub	sp, #32
    c34a:	9004      	str	r0, [sp, #16]
    c34c:	9105      	str	r1, [sp, #20]
    c34e:	9206      	str	r2, [sp, #24]
        //  Get the current state of a pixel in the screen.
        //  console::print("get "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    c350:	293f      	cmp	r1, #63	; 0x3f
    c352:	9203      	str	r2, [sp, #12]
    c354:	9102      	str	r1, [sp, #8]
    c356:	d804      	bhi.n	c362 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE+0x1a>
    c358:	e7ff      	b.n	c35a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE+0x12>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    c35a:	9803      	ldr	r0, [sp, #12]
    c35c:	281f      	cmp	r0, #31
    c35e:	d813      	bhi.n	c388 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE+0x40>
    c360:	e00b      	b.n	c37a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE+0x32>
        assert!(x < SCREEN_WIDTH, "x overflow");
    c362:	f24c 7048 	movw	r0, #51016	; 0xc748
    c366:	f2c0 0001 	movt	r0, #1
    c36a:	f64c 02c8 	movw	r2, #51400	; 0xc8c8
    c36e:	f2c0 0201 	movt	r2, #1
    c372:	210a      	movs	r1, #10
    c374:	f008 fee4 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c378:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    c37a:	9803      	ldr	r0, [sp, #12]
    c37c:	0181      	lsls	r1, r0, #6
    c37e:	0e82      	lsrs	r2, r0, #26
    c380:	2a00      	cmp	r2, #0
    c382:	9101      	str	r1, [sp, #4]
    c384:	d126      	bne.n	c3d4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE+0x8c>
    c386:	e00b      	b.n	c3a0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE+0x58>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    c388:	f24c 7064 	movw	r0, #51044	; 0xc764
    c38c:	f2c0 0001 	movt	r0, #1
    c390:	f64c 02d8 	movw	r2, #51416	; 0xc8d8
    c394:	f2c0 0201 	movt	r2, #1
    c398:	210a      	movs	r1, #10
    c39a:	f008 fed1 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c39e:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    c3a0:	9802      	ldr	r0, [sp, #8]
    c3a2:	9901      	ldr	r1, [sp, #4]
    c3a4:	1842      	adds	r2, r0, r1
    c3a6:	4613      	mov	r3, r2
    c3a8:	4282      	cmp	r2, r0
    c3aa:	9300      	str	r3, [sp, #0]
    c3ac:	d31e      	bcc.n	c3ec <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE+0xa4>
    c3ae:	e7ff      	b.n	c3b0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE+0x68>
    c3b0:	9800      	ldr	r0, [sp, #0]
    c3b2:	9007      	str	r0, [sp, #28]
    c3b4:	2100      	movs	r1, #0
        unsafe { SCREEN_BUFFER[i] != 0 }
    c3b6:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    c3ba:	d123      	bne.n	c404 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE+0xbc>
    c3bc:	e7ff      	b.n	c3be <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE+0x76>
    c3be:	f246 2068 	movw	r0, #25192	; 0x6268
    c3c2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c3c6:	9900      	ldr	r1, [sp, #0]
    c3c8:	5c40      	ldrb	r0, [r0, r1]
    c3ca:	2800      	cmp	r0, #0
    c3cc:	bf18      	it	ne
    c3ce:	2001      	movne	r0, #1
        //  self.vram[(y * self.vramsz.0) + x]
    }
    c3d0:	b008      	add	sp, #32
    c3d2:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    c3d4:	f24c 7090 	movw	r0, #51088	; 0xc790
    c3d8:	f2c0 0001 	movt	r0, #1
    c3dc:	f64c 02e8 	movw	r2, #51432	; 0xc8e8
    c3e0:	f2c0 0201 	movt	r2, #1
    c3e4:	2121      	movs	r1, #33	; 0x21
    c3e6:	f008 feab 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c3ea:	defe      	udf	#254	; 0xfe
    c3ec:	f24c 70d0 	movw	r0, #51152	; 0xc7d0
    c3f0:	f2c0 0001 	movt	r0, #1
    c3f4:	f64c 02f8 	movw	r2, #51448	; 0xc8f8
    c3f8:	f2c0 0201 	movt	r2, #1
    c3fc:	211c      	movs	r1, #28
    c3fe:	f008 fe9f 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c402:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] != 0 }
    c404:	f64c 1008 	movw	r0, #51464	; 0xc908
    c408:	f2c0 0001 	movt	r0, #1
    c40c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c410:	9900      	ldr	r1, [sp, #0]
    c412:	f008 feab 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    c416:	defe      	udf	#254	; 0xfe

0000c418 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc84691ce0c1cd157E>:

    fn vram_setsize(&mut self, size: (usize, usize)) {
    c418:	b580      	push	{r7, lr}
    c41a:	b086      	sub	sp, #24
    c41c:	9003      	str	r0, [sp, #12]
    c41e:	9104      	str	r1, [sp, #16]
    c420:	9205      	str	r2, [sp, #20]
        //  Set the size of the screen.
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    c422:	f64c 1018 	movw	r0, #51480	; 0xc918
    c426:	f2c0 0001 	movt	r0, #1
    c42a:	2308      	movs	r3, #8
    c42c:	9102      	str	r1, [sp, #8]
    c42e:	4619      	mov	r1, r3
    c430:	9201      	str	r2, [sp, #4]
    c432:	f7fc fec0 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c436:	e7ff      	b.n	c438 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc84691ce0c1cd157E+0x20>
    c438:	9802      	ldr	r0, [sp, #8]
    c43a:	f7fc fefa 	bl	9232 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    c43e:	e7ff      	b.n	c440 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc84691ce0c1cd157E+0x28>
    c440:	f64c 1020 	movw	r0, #51488	; 0xc920
    c444:	f2c0 0001 	movt	r0, #1
    c448:	2102      	movs	r1, #2
    c44a:	f7fc feb4 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c44e:	e7ff      	b.n	c450 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc84691ce0c1cd157E+0x38>
    c450:	9801      	ldr	r0, [sp, #4]
    c452:	f7fc feee 	bl	9232 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    c456:	e7ff      	b.n	c458 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc84691ce0c1cd157E+0x40>
    c458:	f64c 1022 	movw	r0, #51490	; 0xc922
    c45c:	f2c0 0001 	movt	r0, #1
    c460:	2101      	movs	r1, #1
    c462:	f7fc fea8 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c466:	e7ff      	b.n	c468 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc84691ce0c1cd157E+0x50>
    c468:	f7fc feeb 	bl	9242 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    c46c:	e7ff      	b.n	c46e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc84691ce0c1cd157E+0x56>
                panic!("Unable to create window {}", err);
            }
        };
        self.win = Some(win);
        */
    }
    c46e:	b006      	add	sp, #24
    c470:	bd80      	pop	{r7, pc}

0000c472 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbe871a76fb26495aE>:

    fn vram_size(&mut self) -> (usize, usize) {
    c472:	b083      	sub	sp, #12
    c474:	9002      	str	r0, [sp, #8]
    c476:	2040      	movs	r0, #64	; 0x40
        //  Get the size of the screen.
        (SCREEN_WIDTH, SCREEN_HEIGHT)
    c478:	9000      	str	r0, [sp, #0]
    c47a:	2020      	movs	r0, #32
    c47c:	9001      	str	r0, [sp, #4]
        //  self.vramsz
    }
    c47e:	9800      	ldr	r0, [sp, #0]
    c480:	9901      	ldr	r1, [sp, #4]
    c482:	b003      	add	sp, #12
    c484:	4770      	bx	lr

0000c486 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h36d752fe6c920e7cE>:

    fn clock(&mut self) -> u64 {
    c486:	b5b0      	push	{r4, r5, r7, lr}
    c488:	b086      	sub	sp, #24
    c48a:	9005      	str	r0, [sp, #20]
        //  Return the current clock value in nanoseconds.
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    c48c:	f00c fef6 	bl	1927c <os_time_get>
    c490:	9004      	str	r0, [sp, #16]
    c492:	e7ff      	b.n	c494 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h36d752fe6c920e7cE+0xe>
    c494:	2000      	movs	r0, #0
    c496:	9904      	ldr	r1, [sp, #16]
    c498:	fba0 2301 	umull	r2, r3, r0, r1
    c49c:	2b00      	cmp	r3, #0
    c49e:	bf18      	it	ne
    c4a0:	2301      	movne	r3, #1
    c4a2:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    c4a6:	fba0 e40c 	umull	lr, r4, r0, ip
    c4aa:	2c00      	cmp	r4, #0
    c4ac:	bf18      	it	ne
    c4ae:	2401      	movne	r4, #1
    c4b0:	ea43 0304 	orr.w	r3, r3, r4
    c4b4:	4472      	add	r2, lr
    c4b6:	fba1 ce0c 	umull	ip, lr, r1, ip
    c4ba:	eb12 020e 	adds.w	r2, r2, lr
    c4be:	f140 0000 	adc.w	r0, r0, #0
    c4c2:	ea40 0003 	orr.w	r0, r0, r3
    c4c6:	2800      	cmp	r0, #0
    c4c8:	f8cd c00c 	str.w	ip, [sp, #12]
    c4cc:	9202      	str	r2, [sp, #8]
    c4ce:	d124      	bne.n	c51a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h36d752fe6c920e7cE+0x94>
    c4d0:	e7ff      	b.n	c4d2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h36d752fe6c920e7cE+0x4c>
    c4d2:	2000      	movs	r0, #0
    c4d4:	9903      	ldr	r1, [sp, #12]
    c4d6:	fba0 2301 	umull	r2, r3, r0, r1
    c4da:	2b00      	cmp	r3, #0
    c4dc:	bf18      	it	ne
    c4de:	2301      	movne	r3, #1
    c4e0:	f44f 6cfa 	mov.w	ip, #2000	; 0x7d0
    c4e4:	f8dd e008 	ldr.w	lr, [sp, #8]
    c4e8:	fbae 450c 	umull	r4, r5, lr, ip
    c4ec:	2d00      	cmp	r5, #0
    c4ee:	bf18      	it	ne
    c4f0:	2501      	movne	r5, #1
    c4f2:	ea43 0305 	orr.w	r3, r3, r5
    c4f6:	4422      	add	r2, r4
    c4f8:	fba1 c40c 	umull	ip, r4, r1, ip
    c4fc:	1912      	adds	r2, r2, r4
    c4fe:	f140 0000 	adc.w	r0, r0, #0
    c502:	ea40 0003 	orr.w	r0, r0, r3
    c506:	2800      	cmp	r0, #0
    c508:	f8cd c004 	str.w	ip, [sp, #4]
    c50c:	9200      	str	r2, [sp, #0]
    c50e:	d110      	bne.n	c532 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h36d752fe6c920e7cE+0xac>
    c510:	e7ff      	b.n	c512 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h36d752fe6c920e7cE+0x8c>
        let d = self.inst.elapsed();
        d.as_secs()
            .wrapping_mul(1000_000_000)
            .wrapping_add(d.subsec_nanos().into())
        */
    }
    c512:	9801      	ldr	r0, [sp, #4]
    c514:	9900      	ldr	r1, [sp, #0]
    c516:	b006      	add	sp, #24
    c518:	bdb0      	pop	{r4, r5, r7, pc}
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    c51a:	f24c 7090 	movw	r0, #51088	; 0xc790
    c51e:	f2c0 0001 	movt	r0, #1
    c522:	f64c 1224 	movw	r2, #51492	; 0xc924
    c526:	f2c0 0201 	movt	r2, #1
    c52a:	2121      	movs	r1, #33	; 0x21
    c52c:	f008 fe08 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c530:	defe      	udf	#254	; 0xfe
    c532:	f24c 7090 	movw	r0, #51088	; 0xc790
    c536:	f2c0 0001 	movt	r0, #1
    c53a:	f64c 1224 	movw	r2, #51492	; 0xc924
    c53e:	f2c0 0201 	movt	r2, #1
    c542:	2121      	movs	r1, #33	; 0x21
    c544:	f008 fdfc 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c548:	defe      	udf	#254	; 0xfe

0000c54a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17h46449aaa1682a400E>:

    fn beep(&mut self) {
    c54a:	b081      	sub	sp, #4
    c54c:	9000      	str	r0, [sp, #0]
        //  Play beep sound.
    }
    c54e:	b001      	add	sp, #4
    c550:	4770      	bx	lr

0000c552 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h7a2ee6dc937954dfE>:

    fn sched(&mut self) -> bool {
    c552:	b580      	push	{r7, lr}
    c554:	b082      	sub	sp, #8
    c556:	9001      	str	r0, [sp, #4]
        //  Called in every step; return true for shutdown.
        //  console::print("sched\n"); console::flush(); ////
        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
    c558:	f00b fc68 	bl	17e2c <hal_watchdog_tickle>
    c55c:	e7ff      	b.n	c55e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h7a2ee6dc937954dfE+0xc>
    c55e:	2001      	movs	r0, #1
        unsafe { os::os_time_delay(1) };
    c560:	f00c feb2 	bl	192c8 <os_time_delay>
    c564:	e7ff      	b.n	c566 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h7a2ee6dc937954dfE+0x14>
    c566:	2000      	movs	r0, #0
                .map(|b| if b { 0xffffff } else { 0 })
                .collect();
            win.update_with_buffer(&vram).unwrap();
        }
        */
    }
    c568:	b002      	add	sp, #8
    c56a:	bd80      	pop	{r7, pc}

0000c56c <_ZN3app5chip812handle_touch17habca32c74e5cefadE>:
}

pub fn handle_touch(_x: u16, _y: u16) { 
    c56c:	b580      	push	{r7, lr}
    c56e:	b084      	sub	sp, #16
    c570:	460a      	mov	r2, r1
    c572:	4603      	mov	r3, r0
    c574:	f8ad 000c 	strh.w	r0, [sp, #12]
    c578:	f8ad 100e 	strh.w	r1, [sp, #14]
    console::print("CHIP8 touch not handled\n"); console::flush(); 
    c57c:	f64c 1034 	movw	r0, #51508	; 0xc934
    c580:	f2c0 0001 	movt	r0, #1
    c584:	2118      	movs	r1, #24
    c586:	9202      	str	r2, [sp, #8]
    c588:	9301      	str	r3, [sp, #4]
    c58a:	f7fc fe14 	bl	91b6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c58e:	e7ff      	b.n	c590 <_ZN3app5chip812handle_touch17habca32c74e5cefadE+0x24>
    c590:	f7fc fe57 	bl	9242 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    c594:	e7ff      	b.n	c596 <_ZN3app5chip812handle_touch17habca32c74e5cefadE+0x2a>
}
    c596:	b004      	add	sp, #16
    c598:	bd80      	pop	{r7, pc}

0000c59a <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE>:
    c59a:	b580      	push	{r7, lr}
    c59c:	b08c      	sub	sp, #48	; 0x30
    c59e:	9103      	str	r1, [sp, #12]
    c5a0:	9204      	str	r2, [sp, #16]
    c5a2:	930a      	str	r3, [sp, #40]	; 0x28
    c5a4:	2100      	movs	r1, #0
    c5a6:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    c5aa:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    c5ae:	2101      	movs	r1, #1
    c5b0:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    c5b4:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    c5b8:	9903      	ldr	r1, [sp, #12]
    c5ba:	2900      	cmp	r1, #0
    c5bc:	9302      	str	r3, [sp, #8]
    c5be:	9001      	str	r0, [sp, #4]
    c5c0:	d001      	beq.n	c5c6 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x2c>
    c5c2:	e7ff      	b.n	c5c4 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x2a>
    c5c4:	e004      	b.n	c5d0 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x36>
    c5c6:	2000      	movs	r0, #0
    c5c8:	9901      	ldr	r1, [sp, #4]
    c5ca:	6008      	str	r0, [r1, #0]
    c5cc:	e020      	b.n	c610 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x76>
    c5ce:	defe      	udf	#254	; 0xfe
    c5d0:	2000      	movs	r0, #0
    c5d2:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    c5d6:	9904      	ldr	r1, [sp, #16]
    c5d8:	910b      	str	r1, [sp, #44]	; 0x2c
    c5da:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    c5de:	9108      	str	r1, [sp, #32]
    c5e0:	9a08      	ldr	r2, [sp, #32]
    c5e2:	a805      	add	r0, sp, #20
    c5e4:	9902      	ldr	r1, [sp, #8]
    c5e6:	f000 fa7d 	bl	cae4 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hc72815860861018cE>
    c5ea:	e7ff      	b.n	c5ec <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x52>
    c5ec:	9805      	ldr	r0, [sp, #20]
    c5ee:	9906      	ldr	r1, [sp, #24]
    c5f0:	9a07      	ldr	r2, [sp, #28]
    c5f2:	9b01      	ldr	r3, [sp, #4]
    c5f4:	60da      	str	r2, [r3, #12]
    c5f6:	6099      	str	r1, [r3, #8]
    c5f8:	6058      	str	r0, [r3, #4]
    c5fa:	2001      	movs	r0, #1
    c5fc:	6018      	str	r0, [r3, #0]
    c5fe:	e007      	b.n	c610 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x76>
    c600:	9803      	ldr	r0, [sp, #12]
    c602:	2801      	cmp	r0, #1
    c604:	d00c      	beq.n	c620 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x86>
    c606:	e015      	b.n	c634 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x9a>
    c608:	2000      	movs	r0, #0
    c60a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    c60e:	e7f7      	b.n	c600 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x66>
    c610:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    c614:	07c0      	lsls	r0, r0, #31
    c616:	2800      	cmp	r0, #0
    c618:	d1f6      	bne.n	c608 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x6e>
    c61a:	e7f1      	b.n	c600 <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x66>
    c61c:	b00c      	add	sp, #48	; 0x30
    c61e:	bd80      	pop	{r7, pc}
    c620:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    c624:	07c0      	lsls	r0, r0, #31
    c626:	2800      	cmp	r0, #0
    c628:	d0f8      	beq.n	c61c <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x82>
    c62a:	e7ff      	b.n	c62c <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x92>
    c62c:	2000      	movs	r0, #0
    c62e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    c632:	e7f3      	b.n	c61c <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x82>
    c634:	e7f2      	b.n	c61c <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE+0x82>

0000c636 <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE>:
    c636:	b580      	push	{r7, lr}
    c638:	b08a      	sub	sp, #40	; 0x28
    c63a:	9104      	str	r1, [sp, #16]
    c63c:	9205      	str	r2, [sp, #20]
    c63e:	9308      	str	r3, [sp, #32]
    c640:	2100      	movs	r1, #0
    c642:	f88d 101e 	strb.w	r1, [sp, #30]
    c646:	f88d 101f 	strb.w	r1, [sp, #31]
    c64a:	2101      	movs	r1, #1
    c64c:	f88d 101f 	strb.w	r1, [sp, #31]
    c650:	f88d 101e 	strb.w	r1, [sp, #30]
    c654:	9904      	ldr	r1, [sp, #16]
    c656:	2900      	cmp	r1, #0
    c658:	9303      	str	r3, [sp, #12]
    c65a:	9002      	str	r0, [sp, #8]
    c65c:	d001      	beq.n	c662 <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x2c>
    c65e:	e7ff      	b.n	c660 <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x2a>
    c660:	e004      	b.n	c66c <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x36>
    c662:	2000      	movs	r0, #0
    c664:	9902      	ldr	r1, [sp, #8]
    c666:	6008      	str	r0, [r1, #0]
    c668:	e01f      	b.n	c6aa <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x74>
    c66a:	defe      	udf	#254	; 0xfe
    c66c:	2000      	movs	r0, #0
    c66e:	f88d 001f 	strb.w	r0, [sp, #31]
    c672:	9905      	ldr	r1, [sp, #20]
    c674:	9109      	str	r1, [sp, #36]	; 0x24
    c676:	f88d 001e 	strb.w	r0, [sp, #30]
    c67a:	9106      	str	r1, [sp, #24]
    c67c:	9906      	ldr	r1, [sp, #24]
    c67e:	9803      	ldr	r0, [sp, #12]
    c680:	f000 fa3a 	bl	caf8 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17heea96aaa2e3c2266E>
    c684:	9001      	str	r0, [sp, #4]
    c686:	9100      	str	r1, [sp, #0]
    c688:	e7ff      	b.n	c68a <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x54>
    c68a:	9801      	ldr	r0, [sp, #4]
    c68c:	9902      	ldr	r1, [sp, #8]
    c68e:	6048      	str	r0, [r1, #4]
    c690:	9a00      	ldr	r2, [sp, #0]
    c692:	608a      	str	r2, [r1, #8]
    c694:	2301      	movs	r3, #1
    c696:	600b      	str	r3, [r1, #0]
    c698:	e007      	b.n	c6aa <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x74>
    c69a:	9804      	ldr	r0, [sp, #16]
    c69c:	2801      	cmp	r0, #1
    c69e:	d00c      	beq.n	c6ba <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x84>
    c6a0:	e015      	b.n	c6ce <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x98>
    c6a2:	2000      	movs	r0, #0
    c6a4:	f88d 001e 	strb.w	r0, [sp, #30]
    c6a8:	e7f7      	b.n	c69a <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x64>
    c6aa:	f89d 001e 	ldrb.w	r0, [sp, #30]
    c6ae:	07c0      	lsls	r0, r0, #31
    c6b0:	2800      	cmp	r0, #0
    c6b2:	d1f6      	bne.n	c6a2 <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x6c>
    c6b4:	e7f1      	b.n	c69a <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x64>
    c6b6:	b00a      	add	sp, #40	; 0x28
    c6b8:	bd80      	pop	{r7, pc}
    c6ba:	f89d 001f 	ldrb.w	r0, [sp, #31]
    c6be:	07c0      	lsls	r0, r0, #31
    c6c0:	2800      	cmp	r0, #0
    c6c2:	d0f8      	beq.n	c6b6 <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x80>
    c6c4:	e7ff      	b.n	c6c6 <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x90>
    c6c6:	2000      	movs	r0, #0
    c6c8:	f88d 001f 	strb.w	r0, [sp, #31]
    c6cc:	e7f3      	b.n	c6b6 <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x80>
    c6ce:	e7f2      	b.n	c6b6 <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE+0x80>

0000c6d0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E>:
    c6d0:	b085      	sub	sp, #20
    c6d2:	9000      	str	r0, [sp, #0]
    c6d4:	2000      	movs	r0, #0
    c6d6:	f88d 000b 	strb.w	r0, [sp, #11]
    c6da:	f88d 000a 	strb.w	r0, [sp, #10]
    c6de:	2001      	movs	r0, #1
    c6e0:	f88d 000b 	strb.w	r0, [sp, #11]
    c6e4:	f88d 000a 	strb.w	r0, [sp, #10]
    c6e8:	9800      	ldr	r0, [sp, #0]
    c6ea:	2800      	cmp	r0, #0
    c6ec:	4601      	mov	r1, r0
    c6ee:	bf18      	it	ne
    c6f0:	2101      	movne	r1, #1
    c6f2:	2800      	cmp	r0, #0
    c6f4:	d001      	beq.n	c6fa <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x2a>
    c6f6:	e7ff      	b.n	c6f8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x28>
    c6f8:	e005      	b.n	c706 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x36>
    c6fa:	2000      	movs	r0, #0
    c6fc:	f88d 000a 	strb.w	r0, [sp, #10]
    c700:	9001      	str	r0, [sp, #4]
    c702:	e007      	b.n	c714 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x44>
    c704:	defe      	udf	#254	; 0xfe
    c706:	2000      	movs	r0, #0
    c708:	f88d 000b 	strb.w	r0, [sp, #11]
    c70c:	9800      	ldr	r0, [sp, #0]
    c70e:	9004      	str	r0, [sp, #16]
    c710:	9001      	str	r0, [sp, #4]
    c712:	e7ff      	b.n	c714 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x44>
    c714:	f89d 000a 	ldrb.w	r0, [sp, #10]
    c718:	07c0      	lsls	r0, r0, #31
    c71a:	2800      	cmp	r0, #0
    c71c:	d104      	bne.n	c728 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x58>
    c71e:	e7ff      	b.n	c720 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x50>
    c720:	9800      	ldr	r0, [sp, #0]
    c722:	2800      	cmp	r0, #0
    c724:	d107      	bne.n	c736 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x66>
    c726:	e010      	b.n	c74a <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x7a>
    c728:	2000      	movs	r0, #0
    c72a:	f88d 000a 	strb.w	r0, [sp, #10]
    c72e:	e7f7      	b.n	c720 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x50>
    c730:	9801      	ldr	r0, [sp, #4]
    c732:	b005      	add	sp, #20
    c734:	4770      	bx	lr
    c736:	f89d 000b 	ldrb.w	r0, [sp, #11]
    c73a:	07c0      	lsls	r0, r0, #31
    c73c:	2800      	cmp	r0, #0
    c73e:	d0f7      	beq.n	c730 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x60>
    c740:	e7ff      	b.n	c742 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x72>
    c742:	2000      	movs	r0, #0
    c744:	f88d 000b 	strb.w	r0, [sp, #11]
    c748:	e7f2      	b.n	c730 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x60>
    c74a:	e7f1      	b.n	c730 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E+0x60>

0000c74c <_ZN4core6option15Option$LT$T$GT$6as_mut17h1de41a42d046f353E>:
    c74c:	b084      	sub	sp, #16
    c74e:	9002      	str	r0, [sp, #8]
    c750:	6801      	ldr	r1, [r0, #0]
    c752:	2900      	cmp	r1, #0
    c754:	9000      	str	r0, [sp, #0]
    c756:	d001      	beq.n	c75c <_ZN4core6option15Option$LT$T$GT$6as_mut17h1de41a42d046f353E+0x10>
    c758:	e7ff      	b.n	c75a <_ZN4core6option15Option$LT$T$GT$6as_mut17h1de41a42d046f353E+0xe>
    c75a:	e003      	b.n	c764 <_ZN4core6option15Option$LT$T$GT$6as_mut17h1de41a42d046f353E+0x18>
    c75c:	2000      	movs	r0, #0
    c75e:	9001      	str	r0, [sp, #4]
    c760:	e005      	b.n	c76e <_ZN4core6option15Option$LT$T$GT$6as_mut17h1de41a42d046f353E+0x22>
    c762:	defe      	udf	#254	; 0xfe
    c764:	9800      	ldr	r0, [sp, #0]
    c766:	1d01      	adds	r1, r0, #4
    c768:	9103      	str	r1, [sp, #12]
    c76a:	9101      	str	r1, [sp, #4]
    c76c:	e7ff      	b.n	c76e <_ZN4core6option15Option$LT$T$GT$6as_mut17h1de41a42d046f353E+0x22>
    c76e:	9801      	ldr	r0, [sp, #4]
    c770:	b004      	add	sp, #16
    c772:	4770      	bx	lr

0000c774 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E>:
    c774:	b084      	sub	sp, #16
    c776:	9002      	str	r0, [sp, #8]
    c778:	9802      	ldr	r0, [sp, #8]
    c77a:	2800      	cmp	r0, #0
    c77c:	4602      	mov	r2, r0
    c77e:	bf18      	it	ne
    c780:	2201      	movne	r2, #1
    c782:	2800      	cmp	r0, #0
    c784:	9101      	str	r1, [sp, #4]
    c786:	d001      	beq.n	c78c <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x18>
    c788:	e7ff      	b.n	c78a <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x16>
    c78a:	e009      	b.n	c7a0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x2c>
    c78c:	f64c 104c 	movw	r0, #51532	; 0xc94c
    c790:	f2c0 0001 	movt	r0, #1
    c794:	212b      	movs	r1, #43	; 0x2b
    c796:	9a01      	ldr	r2, [sp, #4]
    c798:	f008 fcd2 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c79c:	defe      	udf	#254	; 0xfe
    c79e:	defe      	udf	#254	; 0xfe
    c7a0:	9802      	ldr	r0, [sp, #8]
    c7a2:	9003      	str	r0, [sp, #12]
    c7a4:	9902      	ldr	r1, [sp, #8]
    c7a6:	2900      	cmp	r1, #0
    c7a8:	9000      	str	r0, [sp, #0]
    c7aa:	d003      	beq.n	c7b4 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x40>
    c7ac:	e7ff      	b.n	c7ae <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x3a>
    c7ae:	9800      	ldr	r0, [sp, #0]
    c7b0:	b004      	add	sp, #16
    c7b2:	4770      	bx	lr
    c7b4:	e7fb      	b.n	c7ae <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x3a>

0000c7b6 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E>:
    c7b6:	b081      	sub	sp, #4
    c7b8:	2100      	movs	r1, #0
    c7ba:	6001      	str	r1, [r0, #0]
    c7bc:	b001      	add	sp, #4
    c7be:	4770      	bx	lr

0000c7c0 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha7a9542e2459a97dE>:
    c7c0:	b580      	push	{r7, lr}
    c7c2:	b082      	sub	sp, #8
    c7c4:	9001      	str	r0, [sp, #4]
    c7c6:	f7ff ff83 	bl	c6d0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h52f384af4c448819E>
    c7ca:	9000      	str	r0, [sp, #0]
    c7cc:	e7ff      	b.n	c7ce <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha7a9542e2459a97dE+0xe>
    c7ce:	9800      	ldr	r0, [sp, #0]
    c7d0:	b002      	add	sp, #8
    c7d2:	bd80      	pop	{r7, pc}

0000c7d4 <_ZN22piet_embedded_graphics7display18set_display_pixels17h114fde9e037a1031E>:
        item
    ).expect("draw blocks fail");
}

/// Draw the pixel colours to the display at the window from (sx,sy) to (ex,ey)
pub fn set_display_pixels<P: IntoIterator<Item = u16>>(sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    c7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7d8:	b093      	sub	sp, #76	; 0x4c
    c7da:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
    c7de:	469e      	mov	lr, r3
    c7e0:	4614      	mov	r4, r2
    c7e2:	460d      	mov	r5, r1
    c7e4:	4606      	mov	r6, r0
    c7e6:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    c7ea:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
    c7ee:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
    c7f2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    c7f6:	af0a      	add	r7, sp, #40	; 0x28
    unsafe { DISPLAY.set_pixels(sx, sy, ex, ey, colors) }
    c7f8:	46b8      	mov	r8, r7
    c7fa:	e8bc 0e00 	ldmia.w	ip!, {r9, sl, fp}
    c7fe:	e8a8 0e00 	stmia.w	r8!, {r9, sl, fp}
    c802:	9009      	str	r0, [sp, #36]	; 0x24
    c804:	e89c 0e01 	ldmia.w	ip, {r0, r9, sl, fp}
    c808:	e888 0e01 	stmia.w	r8, {r0, r9, sl, fp}
    c80c:	4668      	mov	r0, sp
    c80e:	6047      	str	r7, [r0, #4]
    c810:	6003      	str	r3, [r0, #0]
    c812:	f240 1048 	movw	r0, #328	; 0x148
    c816:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c81a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c81c:	9108      	str	r1, [sp, #32]
    c81e:	4619      	mov	r1, r3
    c820:	f8dd c020 	ldr.w	ip, [sp, #32]
    c824:	9207      	str	r2, [sp, #28]
    c826:	4662      	mov	r2, ip
    c828:	9b07      	ldr	r3, [sp, #28]
    c82a:	f8cd e018 	str.w	lr, [sp, #24]
    c82e:	9405      	str	r4, [sp, #20]
    c830:	9504      	str	r5, [sp, #16]
    c832:	9603      	str	r6, [sp, #12]
    c834:	f000 f808 	bl	c848 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE>
    c838:	9002      	str	r0, [sp, #8]
    c83a:	e7ff      	b.n	c83c <_ZN22piet_embedded_graphics7display18set_display_pixels17h114fde9e037a1031E+0x68>
}
    c83c:	9802      	ldr	r0, [sp, #8]
    c83e:	f000 0001 	and.w	r0, r0, #1
    c842:	b013      	add	sp, #76	; 0x4c
    c844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c848 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE>:
            .expect("spi flush fail");
        Ok(())
    }

    /// Sets pixel colors at the given drawing window
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    c848:	b5f0      	push	{r4, r5, r6, r7, lr}
    c84a:	b09b      	sub	sp, #108	; 0x6c
    c84c:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
    c850:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
    c854:	461c      	mov	r4, r3
    c856:	4615      	mov	r5, r2
    c858:	460e      	mov	r6, r1
    c85a:	9014      	str	r0, [sp, #80]	; 0x50
    c85c:	f8ad 1054 	strh.w	r1, [sp, #84]	; 0x54
    c860:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
    c864:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    c868:	f8ad e05a 	strh.w	lr, [sp, #90]	; 0x5a
    c86c:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
    c86e:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    c872:	2701      	movs	r7, #1
    c874:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    c878:	466f      	mov	r7, sp
    c87a:	f8c7 e000 	str.w	lr, [r7]
    c87e:	900a      	str	r0, [sp, #40]	; 0x28
    c880:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    c884:	9408      	str	r4, [sp, #32]
    c886:	9507      	str	r5, [sp, #28]
    c888:	9606      	str	r6, [sp, #24]
    c88a:	f7fd fa2f 	bl	9cec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
    c88e:	9005      	str	r0, [sp, #20]
    c890:	e7ff      	b.n	c892 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0x4a>
    c892:	9805      	ldr	r0, [sp, #20]
    c894:	f000 0001 	and.w	r0, r0, #1
    c898:	f7fc fa4b 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    c89c:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    c8a0:	e7ff      	b.n	c8a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0x5a>
    c8a2:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    c8a6:	07c1      	lsls	r1, r0, #31
    c8a8:	2900      	cmp	r1, #0
    c8aa:	d001      	beq.n	c8b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0x68>
    c8ac:	e7ff      	b.n	c8ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0x66>
    c8ae:	e016      	b.n	c8de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0x96>
    c8b0:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
    c8b2:	f88d 004f 	strb.w	r0, [sp, #79]	; 0x4f
    c8b6:	a80c      	add	r0, sp, #48	; 0x30
    c8b8:	9909      	ldr	r1, [sp, #36]	; 0x24
    c8ba:	4602      	mov	r2, r0
    c8bc:	e8b1 5008 	ldmia.w	r1!, {r3, ip, lr}
    c8c0:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
    c8c4:	e891 5018 	ldmia.w	r1, {r3, r4, ip, lr}
    c8c8:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    c8cc:	990a      	ldr	r1, [sp, #40]	; 0x28
    c8ce:	9004      	str	r0, [sp, #16]
    c8d0:	4608      	mov	r0, r1
    c8d2:	9904      	ldr	r1, [sp, #16]
    c8d4:	f000 f84b 	bl	c96e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E>
    c8d8:	9003      	str	r0, [sp, #12]
    c8da:	e00d      	b.n	c8f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0xb0>
        self.set_address_window(sx, sy, ex, ey)?;
    c8dc:	defe      	udf	#254	; 0xfe
    c8de:	f004 fffe 	bl	118de <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    c8e2:	e003      	b.n	c8ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0xa4>

        #[cfg(feature = "noblock_spi")]         //  If non-blocking SPI is enabled...
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }
    c8e4:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    c8e8:	b01b      	add	sp, #108	; 0x6c
    c8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
    c8ec:	f007 fc44 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    c8f0:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    c8f4:	e7ff      	b.n	c8f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0xae>
    c8f6:	e034      	b.n	c962 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0x11a>
        self.write_pixels(colors) ? ;
    c8f8:	9803      	ldr	r0, [sp, #12]
    c8fa:	f000 0001 	and.w	r0, r0, #1
    c8fe:	f7fc fa18 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    c902:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    c906:	e7ff      	b.n	c908 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0xc0>
    c908:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    c90c:	07c1      	lsls	r1, r0, #31
    c90e:	2900      	cmp	r1, #0
    c910:	d001      	beq.n	c916 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0xce>
    c912:	e7ff      	b.n	c914 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0xcc>
    c914:	e004      	b.n	c920 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0xd8>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    c916:	f006 f9d1 	bl	12cbc <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    c91a:	9002      	str	r0, [sp, #8]
    c91c:	e009      	b.n	c932 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0xea>
        self.write_pixels(colors) ? ;
    c91e:	defe      	udf	#254	; 0xfe
    c920:	f004 ffdd 	bl	118de <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    c924:	e7ff      	b.n	c926 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0xde>
    c926:	f007 fc27 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    c92a:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    c92e:	e7ff      	b.n	c930 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0xe8>
    c930:	e017      	b.n	c962 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0x11a>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    c932:	f64c 1177 	movw	r1, #51575	; 0xc977
    c936:	f2c0 0101 	movt	r1, #1
    c93a:	f64c 13d4 	movw	r3, #51668	; 0xc9d4
    c93e:	f2c0 0301 	movt	r3, #1
    c942:	220e      	movs	r2, #14
    c944:	9802      	ldr	r0, [sp, #8]
    c946:	f7fc f9bb 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    c94a:	e7ff      	b.n	c94c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0x104>
    c94c:	2000      	movs	r0, #0
        Ok(())
    c94e:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    c952:	e7c7      	b.n	c8e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0x9c>
    c954:	2000      	movs	r0, #0
    c956:	f88d 004f 	strb.w	r0, [sp, #79]	; 0x4f
    c95a:	9809      	ldr	r0, [sp, #36]	; 0x24
    c95c:	f7fb ff63 	bl	8826 <_ZN4core3ptr13drop_in_place17h2cd480d2a1fa8018E>
    c960:	e7c0      	b.n	c8e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0x9c>
    c962:	f89d 004f 	ldrb.w	r0, [sp, #79]	; 0x4f
    c966:	07c0      	lsls	r0, r0, #31
    c968:	2800      	cmp	r0, #0
    c96a:	d1f3      	bne.n	c954 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0x10c>
    c96c:	e7ba      	b.n	c8e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h5ae0af2a833463edE+0x9c>

0000c96e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
    c96e:	b510      	push	{r4, lr}
    c970:	b0aa      	sub	sp, #168	; 0xa8
    c972:	9024      	str	r0, [sp, #144]	; 0x90
    c974:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
    c976:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
    c97a:	2301      	movs	r3, #1
    c97c:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    c980:	232c      	movs	r3, #44	; 0x2c
    c982:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    c986:	920a      	str	r2, [sp, #40]	; 0x28
    c988:	9209      	str	r2, [sp, #36]	; 0x24
    c98a:	9209      	str	r2, [sp, #36]	; 0x24
    c98c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c98e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c990:	f89d c023 	ldrb.w	ip, [sp, #35]	; 0x23
    c994:	9007      	str	r0, [sp, #28]
    c996:	9106      	str	r1, [sp, #24]
    c998:	4661      	mov	r1, ip
    c99a:	f7fd f8b6 	bl	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    c99e:	9005      	str	r0, [sp, #20]
    c9a0:	e7ff      	b.n	c9a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x34>
    c9a2:	9805      	ldr	r0, [sp, #20]
    c9a4:	f000 0001 	and.w	r0, r0, #1
    c9a8:	f7fc f9c3 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    c9ac:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    c9b0:	e7ff      	b.n	c9b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x44>
    c9b2:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
    c9b6:	07c1      	lsls	r1, r0, #31
    c9b8:	2900      	cmp	r1, #0
    c9ba:	d001      	beq.n	c9c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x52>
    c9bc:	e7ff      	b.n	c9be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x50>
    c9be:	e015      	b.n	c9ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x7e>
    c9c0:	2000      	movs	r0, #0
        for color in colors {
    c9c2:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
    c9c6:	a813      	add	r0, sp, #76	; 0x4c
    c9c8:	9906      	ldr	r1, [sp, #24]
    c9ca:	4602      	mov	r2, r0
    c9cc:	e8b1 5008 	ldmia.w	r1!, {r3, ip, lr}
    c9d0:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
    c9d4:	e891 5018 	ldmia.w	r1, {r3, r4, ip, lr}
    c9d8:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    c9dc:	a90b      	add	r1, sp, #44	; 0x2c
    c9de:	9004      	str	r0, [sp, #16]
    c9e0:	4608      	mov	r0, r1
    c9e2:	9904      	ldr	r1, [sp, #16]
    c9e4:	f7fb ff9a 	bl	891c <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0b58a3acb69538adE>
    c9e8:	e00d      	b.n	ca06 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x98>
        self.write_command(Instruction::RAMWR, None)?;
    c9ea:	defe      	udf	#254	; 0xfe
    c9ec:	f004 ff77 	bl	118de <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    c9f0:	e003      	b.n	c9fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x8c>
    }
    c9f2:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
    c9f6:	b02a      	add	sp, #168	; 0xa8
    c9f8:	bd10      	pop	{r4, pc}
        self.write_command(Instruction::RAMWR, None)?;
    c9fa:	f007 fbbd 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    c9fe:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    ca02:	e7ff      	b.n	ca04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x96>
    ca04:	e068      	b.n	cad8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x16a>
    ca06:	a80b      	add	r0, sp, #44	; 0x2c
    ca08:	a91a      	add	r1, sp, #104	; 0x68
        for color in colors {
    ca0a:	e8b0 500c 	ldmia.w	r0!, {r2, r3, ip, lr}
    ca0e:	e8a1 500c 	stmia.w	r1!, {r2, r3, ip, lr}
    ca12:	e890 500c 	ldmia.w	r0, {r2, r3, ip, lr}
    ca16:	e881 500c 	stmia.w	r1, {r2, r3, ip, lr}
    ca1a:	e7ff      	b.n	ca1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0xae>
    ca1c:	a81a      	add	r0, sp, #104	; 0x68
    ca1e:	f7fb ff96 	bl	894e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3eb31cb79971f92E>
    ca22:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
    ca26:	f8ad 0088 	strh.w	r0, [sp, #136]	; 0x88
    ca2a:	e7ff      	b.n	ca2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0xbe>
    ca2c:	f8bd 0088 	ldrh.w	r0, [sp, #136]	; 0x88
    ca30:	4601      	mov	r1, r0
    ca32:	2800      	cmp	r0, #0
    ca34:	d001      	beq.n	ca3a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0xcc>
    ca36:	e7ff      	b.n	ca38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0xca>
    ca38:	e004      	b.n	ca44 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0xd6>
    ca3a:	a81a      	add	r0, sp, #104	; 0x68
        }
    ca3c:	f7fb fefb 	bl	8836 <_ZN4core3ptr13drop_in_place17hd9978a8f7b458b49E>
    ca40:	e02e      	b.n	caa0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x132>
        for color in colors {
    ca42:	defe      	udf	#254	; 0xfe
    ca44:	f8bd 008a 	ldrh.w	r0, [sp, #138]	; 0x8a
    ca48:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
    ca4c:	f8ad 00a4 	strh.w	r0, [sp, #164]	; 0xa4
    ca50:	f8ad 00a6 	strh.w	r0, [sp, #166]	; 0xa6
            self.write_word(color)?;
    ca54:	9907      	ldr	r1, [sp, #28]
    ca56:	9003      	str	r0, [sp, #12]
    ca58:	4608      	mov	r0, r1
    ca5a:	9903      	ldr	r1, [sp, #12]
    ca5c:	f7fd f837 	bl	9ace <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    ca60:	9002      	str	r0, [sp, #8]
    ca62:	e7ff      	b.n	ca64 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0xf6>
    ca64:	9802      	ldr	r0, [sp, #8]
    ca66:	f000 0001 	and.w	r0, r0, #1
    ca6a:	f7fc f962 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    ca6e:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
    ca72:	e7ff      	b.n	ca74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x106>
    ca74:	f89d 008e 	ldrb.w	r0, [sp, #142]	; 0x8e
    ca78:	07c1      	lsls	r1, r0, #31
    ca7a:	2900      	cmp	r1, #0
    ca7c:	d001      	beq.n	ca82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x114>
    ca7e:	e7ff      	b.n	ca80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x112>
    ca80:	e001      	b.n	ca86 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x118>
        for color in colors {
    ca82:	e7cb      	b.n	ca1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0xae>
            self.write_word(color)?;
    ca84:	defe      	udf	#254	; 0xfe
    ca86:	f004 ff2a 	bl	118de <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    ca8a:	e7ff      	b.n	ca8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x11e>
    ca8c:	f007 fb74 	bl	14178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    ca90:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    ca94:	e7ff      	b.n	ca96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x128>
    ca96:	a81a      	add	r0, sp, #104	; 0x68
        }
    ca98:	f7fb fecd 	bl	8836 <_ZN4core3ptr13drop_in_place17hd9978a8f7b458b49E>
    ca9c:	e7ff      	b.n	ca9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x130>
    }
    ca9e:	e01b      	b.n	cad8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x16a>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    caa0:	f006 f90c 	bl	12cbc <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    caa4:	9001      	str	r0, [sp, #4]
    caa6:	e7ff      	b.n	caa8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x13a>
    caa8:	f64c 1177 	movw	r1, #51575	; 0xc977
    caac:	f2c0 0101 	movt	r1, #1
    cab0:	f64c 13e4 	movw	r3, #51684	; 0xc9e4
    cab4:	f2c0 0301 	movt	r3, #1
    cab8:	220e      	movs	r2, #14
    caba:	9801      	ldr	r0, [sp, #4]
    cabc:	f7fc f900 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    cac0:	e7ff      	b.n	cac2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x154>
    cac2:	2000      	movs	r0, #0
        Ok(())
    cac4:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    }
    cac8:	e793      	b.n	c9f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x84>
    caca:	2000      	movs	r0, #0
    cacc:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
    cad0:	9806      	ldr	r0, [sp, #24]
    cad2:	f7fb fea8 	bl	8826 <_ZN4core3ptr13drop_in_place17h2cd480d2a1fa8018E>
    cad6:	e78c      	b.n	c9f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x84>
    cad8:	f89d 008f 	ldrb.w	r0, [sp, #143]	; 0x8f
    cadc:	07c0      	lsls	r0, r0, #31
    cade:	2800      	cmp	r0, #0
    cae0:	d1f3      	bne.n	caca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x15c>
    cae2:	e786      	b.n	c9f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h5a7d308291da3c54E+0x84>

0000cae4 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hc72815860861018cE>:
    cae4:	b580      	push	{r7, lr}
    cae6:	b082      	sub	sp, #8
    cae8:	9200      	str	r2, [sp, #0]
    caea:	9101      	str	r1, [sp, #4]
    caec:	9a00      	ldr	r2, [sp, #0]
    caee:	f003 fe58 	bl	107a2 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hb16abfee8f88907eE>
    caf2:	e7ff      	b.n	caf4 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hc72815860861018cE+0x10>
    caf4:	b002      	add	sp, #8
    caf6:	bd80      	pop	{r7, pc}

0000caf8 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17heea96aaa2e3c2266E>:
    caf8:	b580      	push	{r7, lr}
    cafa:	b084      	sub	sp, #16
    cafc:	9102      	str	r1, [sp, #8]
    cafe:	9003      	str	r0, [sp, #12]
    cb00:	9902      	ldr	r1, [sp, #8]
    cb02:	f003 fe60 	bl	107c6 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h06eb33e167ea87a6E>
    cb06:	9001      	str	r0, [sp, #4]
    cb08:	9100      	str	r1, [sp, #0]
    cb0a:	e7ff      	b.n	cb0c <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17heea96aaa2e3c2266E+0x14>
    cb0c:	9801      	ldr	r0, [sp, #4]
    cb0e:	9900      	ldr	r1, [sp, #0]
    cb10:	b004      	add	sp, #16
    cb12:	bd80      	pop	{r7, pc}

0000cb14 <_ZN8libchip814Chip8$LT$T$GT$3new17h80d41819f2580e6eE>:
    0xf0, 0x80, 0xf0, 0x80, 0x80, // f
];

impl<T: Hardware> Chip8<T> {
    /// Create an interpreter instance.
    pub fn new(hw: T) -> Self {
    cb14:	b570      	push	{r4, r5, r6, lr}
    cb16:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
    cb1a:	f10d 0e04 	add.w	lr, sp, #4
    cb1e:	f50e 5182 	add.w	r1, lr, #4160	; 0x1040
    cb22:	2200      	movs	r2, #0
        Self {
            v: [0; REGS],
    cb24:	9209      	str	r2, [sp, #36]	; 0x24
    cb26:	9208      	str	r2, [sp, #32]
    cb28:	9207      	str	r2, [sp, #28]
    cb2a:	9206      	str	r2, [sp, #24]
    cb2c:	ab0a      	add	r3, sp, #40	; 0x28
    cb2e:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
            i: 0,
            dt: 0,
            st: 0,
            pc: 0,
            sp: 0,
            mem: [0; MEMS],
    cb32:	9005      	str	r0, [sp, #20]
    cb34:	4618      	mov	r0, r3
    cb36:	9104      	str	r1, [sp, #16]
    cb38:	4661      	mov	r1, ip
    cb3a:	9203      	str	r2, [sp, #12]
    cb3c:	9302      	str	r3, [sp, #8]
    cb3e:	f8cd c004 	str.w	ip, [sp, #4]
    cb42:	f00e fe05 	bl	1b750 <__aeabi_memclr>
            stack: [0; STACKS],
    cb46:	9803      	ldr	r0, [sp, #12]
    cb48:	9904      	ldr	r1, [sp, #16]
    cb4a:	6008      	str	r0, [r1, #0]
    cb4c:	f841 0c04 	str.w	r0, [r1, #-4]
    cb50:	f841 0c08 	str.w	r0, [r1, #-8]
    cb54:	f841 0c0c 	str.w	r0, [r1, #-12]
    cb58:	f841 0c10 	str.w	r0, [r1, #-16]
    cb5c:	f841 0c14 	str.w	r0, [r1, #-20]
    cb60:	f841 0c18 	str.w	r0, [r1, #-24]
    cb64:	f841 0c1c 	str.w	r0, [r1, #-28]
            time: None,
    cb68:	6088      	str	r0, [r1, #8]
    cb6a:	6048      	str	r0, [r1, #4]
        Self {
    cb6c:	9a06      	ldr	r2, [sp, #24]
    cb6e:	9b07      	ldr	r3, [sp, #28]
    cb70:	f8dd c020 	ldr.w	ip, [sp, #32]
    cb74:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    cb78:	9c05      	ldr	r4, [sp, #20]
    cb7a:	f8c4 e040 	str.w	lr, [r4, #64]	; 0x40
    cb7e:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
    cb82:	63a3      	str	r3, [r4, #56]	; 0x38
    cb84:	6362      	str	r2, [r4, #52]	; 0x34
    cb86:	8220      	strh	r0, [r4, #16]
    cb88:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
    cb8c:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
    cb90:	8260      	strh	r0, [r4, #18]
    cb92:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
    cb96:	f104 0047 	add.w	r0, r4, #71	; 0x47
    cb9a:	9902      	ldr	r1, [sp, #8]
    cb9c:	9a01      	ldr	r2, [sp, #4]
    cb9e:	f00e fddb 	bl	1b758 <__aeabi_memcpy>
    cba2:	9905      	ldr	r1, [sp, #20]
    cba4:	f101 0214 	add.w	r2, r1, #20
    cba8:	f10d 0e08 	add.w	lr, sp, #8
    cbac:	f50e 5181 	add.w	r1, lr, #4128	; 0x1020
    cbb0:	2320      	movs	r3, #32
    cbb2:	9000      	str	r0, [sp, #0]
    cbb4:	4610      	mov	r0, r2
    cbb6:	461a      	mov	r2, r3
    cbb8:	f00e fdce 	bl	1b758 <__aeabi_memcpy>
    cbbc:	9904      	ldr	r1, [sp, #16]
    cbbe:	684a      	ldr	r2, [r1, #4]
    cbc0:	688b      	ldr	r3, [r1, #8]
    cbc2:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    cbc6:	f8d1 e010 	ldr.w	lr, [r1, #16]
    cbca:	9c05      	ldr	r4, [sp, #20]
    cbcc:	6063      	str	r3, [r4, #4]
    cbce:	6022      	str	r2, [r4, #0]
    cbd0:	f8c4 e00c 	str.w	lr, [r4, #12]
    cbd4:	f8c4 c008 	str.w	ip, [r4, #8]
    cbd8:	f241 0247 	movw	r2, #4167	; 0x1047
    cbdc:	9b03      	ldr	r3, [sp, #12]
    cbde:	54a3      	strb	r3, [r4, r2]
            running: false,
            hw,
        }
    }
    cbe0:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
    cbe4:	bd70      	pop	{r4, r5, r6, pc}

0000cbe6 <_ZN8libchip814Chip8$LT$T$GT$3pop17h70e7cf8d6b1182e4E>:
    fn push(&mut self, item: u16) {
        self.stack[self.sp as usize] = item;
        self.sp = self.sp.wrapping_add(1);
    }

    fn pop(&mut self) -> u16 {
    cbe6:	b580      	push	{r7, lr}
    cbe8:	b086      	sub	sp, #24
    cbea:	9004      	str	r0, [sp, #16]
        self.sp = self.sp.wrapping_sub(1);
    cbec:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    cbf0:	2201      	movs	r2, #1
    cbf2:	9003      	str	r0, [sp, #12]
    cbf4:	4608      	mov	r0, r1
    cbf6:	4611      	mov	r1, r2
    cbf8:	f007 fc7c 	bl	144f4 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E>
    cbfc:	9002      	str	r0, [sp, #8]
    cbfe:	e7ff      	b.n	cc00 <_ZN8libchip814Chip8$LT$T$GT$3pop17h70e7cf8d6b1182e4E+0x1a>
    cc00:	9802      	ldr	r0, [sp, #8]
    cc02:	9903      	ldr	r1, [sp, #12]
    cc04:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
        let item = self.stack[self.sp as usize];
    cc08:	f891 2046 	ldrb.w	r2, [r1, #70]	; 0x46
    cc0c:	4613      	mov	r3, r2
    cc0e:	2a0f      	cmp	r2, #15
    cc10:	9301      	str	r3, [sp, #4]
    cc12:	d80a      	bhi.n	cc2a <_ZN8libchip814Chip8$LT$T$GT$3pop17h70e7cf8d6b1182e4E+0x44>
    cc14:	e7ff      	b.n	cc16 <_ZN8libchip814Chip8$LT$T$GT$3pop17h70e7cf8d6b1182e4E+0x30>
    cc16:	9803      	ldr	r0, [sp, #12]
    cc18:	9901      	ldr	r1, [sp, #4]
    cc1a:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    cc1e:	8a92      	ldrh	r2, [r2, #20]
    cc20:	f8ad 2016 	strh.w	r2, [sp, #22]
        item
    }
    cc24:	4610      	mov	r0, r2
    cc26:	b006      	add	sp, #24
    cc28:	bd80      	pop	{r7, pc}
        let item = self.stack[self.sp as usize];
    cc2a:	f64c 204c 	movw	r0, #51788	; 0xca4c
    cc2e:	f2c0 0001 	movt	r0, #1
    cc32:	2210      	movs	r2, #16
    cc34:	9901      	ldr	r1, [sp, #4]
    cc36:	f008 fa99 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    cc3a:	defe      	udf	#254	; 0xfe

0000cc3c <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E>:
    pub fn run(mut self, rom: &[u8]) {
    cc3c:	b580      	push	{r7, lr}
    cc3e:	b086      	sub	sp, #24
    cc40:	9104      	str	r1, [sp, #16]
    cc42:	9205      	str	r2, [sp, #20]
        self.setup();
    cc44:	9003      	str	r0, [sp, #12]
    cc46:	9202      	str	r2, [sp, #8]
    cc48:	9101      	str	r1, [sp, #4]
    cc4a:	f003 ff0e 	bl	10a6a <_ZN8libchip814Chip8$LT$T$GT$5setup17ha7902fed1bdb33a6E>
    cc4e:	e7ff      	b.n	cc50 <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E+0x14>
        self.load(rom);
    cc50:	9803      	ldr	r0, [sp, #12]
    cc52:	9901      	ldr	r1, [sp, #4]
    cc54:	9a02      	ldr	r2, [sp, #8]
    cc56:	f003 fdc8 	bl	107ea <_ZN8libchip814Chip8$LT$T$GT$4load17h28b293d7e5188fe6E>
    cc5a:	e7ff      	b.n	cc5c <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E+0x20>
        while self.running {
    cc5c:	e7ff      	b.n	cc5e <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E+0x22>
    cc5e:	f241 0047 	movw	r0, #4167	; 0x1047
    cc62:	9903      	ldr	r1, [sp, #12]
    cc64:	5c08      	ldrb	r0, [r1, r0]
    cc66:	07c0      	lsls	r0, r0, #31
    cc68:	2800      	cmp	r0, #0
    cc6a:	d101      	bne.n	cc70 <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E+0x34>
    cc6c:	e7ff      	b.n	cc6e <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E+0x32>
    }
    cc6e:	e00c      	b.n	cc8a <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E+0x4e>
            self.sched();
    cc70:	9803      	ldr	r0, [sp, #12]
    cc72:	f003 fe84 	bl	1097e <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E>
    cc76:	e7ff      	b.n	cc78 <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E+0x3c>
            self.eval();
    cc78:	9803      	ldr	r0, [sp, #12]
    cc7a:	f000 f809 	bl	cc90 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E>
    cc7e:	e7ff      	b.n	cc80 <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E+0x44>
            self.next();
    cc80:	9803      	ldr	r0, [sp, #12]
    cc82:	f003 fded 	bl	10860 <_ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E>
    cc86:	e7ff      	b.n	cc88 <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E+0x4c>
        while self.running {
    cc88:	e7e9      	b.n	cc5e <_ZN8libchip814Chip8$LT$T$GT$3run17h8a93b5c7fa2089c5E+0x22>
    }
    cc8a:	b006      	add	sp, #24
    cc8c:	bd80      	pop	{r7, pc}
	...

0000cc90 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E>:
        }

        return b' ';
    }

    fn eval(&mut self) {
    cc90:	b570      	push	{r4, r5, r6, lr}
    cc92:	f5ad 6d6c 	sub.w	sp, sp, #3776	; 0xec0
    cc96:	f8cd 0c70 	str.w	r0, [sp, #3184]	; 0xc70
        let h = self.mem[self.pc as usize] as u16;
    cc9a:	8a41      	ldrh	r1, [r0, #18]
    cc9c:	460a      	mov	r2, r1
    cc9e:	2300      	movs	r3, #0
    cca0:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    cca4:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
    cca8:	f8cd 248c 	str.w	r2, [sp, #1164]	; 0x48c
    ccac:	f043 82a9 	bne.w	10202 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3572>
    ccb0:	e7ff      	b.n	ccb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22>
    ccb2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ccb6:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    ccba:	1842      	adds	r2, r0, r1
    ccbc:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    ccc0:	4613      	mov	r3, r2
    ccc2:	f8ad 2c76 	strh.w	r2, [sp, #3190]	; 0xc76
        let l = self.mem[(self.pc + 1) as usize] as u16;
    ccc6:	8a42      	ldrh	r2, [r0, #18]
    ccc8:	3201      	adds	r2, #1
    ccca:	fa1f fc82 	uxth.w	ip, r2
    ccce:	4696      	mov	lr, r2
    ccd0:	4594      	cmp	ip, r2
    ccd2:	f8cd 3488 	str.w	r3, [sp, #1160]	; 0x488
    ccd6:	f8cd e484 	str.w	lr, [sp, #1156]	; 0x484
    ccda:	f043 829d 	bne.w	10218 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3588>
    ccde:	e7ff      	b.n	cce0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x50>
    cce0:	f8dd 0484 	ldr.w	r0, [sp, #1156]	; 0x484
    cce4:	b281      	uxth	r1, r0
    cce6:	460a      	mov	r2, r1
    cce8:	2300      	movs	r3, #0
    ccea:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    ccee:	f8cd 2480 	str.w	r2, [sp, #1152]	; 0x480
    ccf2:	f043 829d 	bne.w	10230 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x35a0>
    ccf6:	e7ff      	b.n	ccf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x68>
    ccf8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ccfc:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    cd00:	1842      	adds	r2, r0, r1
    cd02:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    cd06:	4613      	mov	r3, r2
    cd08:	f8ad 2c78 	strh.w	r2, [sp, #3192]	; 0xc78
        let inst = h << 8 | l;
    cd0c:	f8dd 2488 	ldr.w	r2, [sp, #1160]	; 0x488
    cd10:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    cd14:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c
    cd18:	f8cd c478 	str.w	ip, [sp, #1144]	; 0x478
    cd1c:	e7ff      	b.n	cd1e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x8e>
    cd1e:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478
    cd22:	f8dd 147c 	ldr.w	r1, [sp, #1148]	; 0x47c
    cd26:	ea40 0201 	orr.w	r2, r0, r1
    cd2a:	f8ad 2496 	strh.w	r2, [sp, #1174]	; 0x496

        let nnn = inst & 0xfff;
    cd2e:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    cd32:	f36f 321f 	bfc	r2, #12, #20
    cd36:	4613      	mov	r3, r2
    cd38:	f8ad 2c7a 	strh.w	r2, [sp, #3194]	; 0xc7a
        let n = (inst & 0xf) as usize;
    cd3c:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    cd40:	f002 020f 	and.w	r2, r2, #15
    cd44:	4694      	mov	ip, r2
    cd46:	f8cd 2c7c 	str.w	r2, [sp, #3196]	; 0xc7c
        let x = ((inst >> 8) & 0xf) as usize;
    cd4a:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    cd4e:	f8cd 3474 	str.w	r3, [sp, #1140]	; 0x474
    cd52:	f8cd c470 	str.w	ip, [sp, #1136]	; 0x470
    cd56:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
    cd5a:	e7ff      	b.n	cd5c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xcc>
    cd5c:	f8dd 046c 	ldr.w	r0, [sp, #1132]	; 0x46c
    cd60:	f000 010f 	and.w	r1, r0, #15
    cd64:	460a      	mov	r2, r1
    cd66:	f8cd 1c80 	str.w	r1, [sp, #3200]	; 0xc80
        let y = ((inst >> 4) & 0xf) as usize;
    cd6a:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    cd6e:	0909      	lsrs	r1, r1, #4
    cd70:	f8cd 2468 	str.w	r2, [sp, #1128]	; 0x468
    cd74:	f8cd 1464 	str.w	r1, [sp, #1124]	; 0x464
    cd78:	e7ff      	b.n	cd7a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xea>
    cd7a:	f8dd 0464 	ldr.w	r0, [sp, #1124]	; 0x464
    cd7e:	f000 010f 	and.w	r1, r0, #15
    cd82:	460a      	mov	r2, r1
    cd84:	f8cd 1c84 	str.w	r1, [sp, #3204]	; 0xc84
        let kk = (inst & 0xff) as u8;
    cd88:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    cd8c:	b2cb      	uxtb	r3, r1
    cd8e:	f88d 1c8b 	strb.w	r1, [sp, #3211]	; 0xc8b

        match (
            (inst >> 12) & 0xf,
    cd92:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    cd96:	0b09      	lsrs	r1, r1, #12
    cd98:	f8cd 2460 	str.w	r2, [sp, #1120]	; 0x460
    cd9c:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c
    cda0:	f8cd 1458 	str.w	r1, [sp, #1112]	; 0x458
    cda4:	e7ff      	b.n	cda6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x116>
    cda6:	f8dd 0458 	ldr.w	r0, [sp, #1112]	; 0x458
    cdaa:	f000 010f 	and.w	r1, r0, #15
            (inst >> 8) & 0xf,
    cdae:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    cdb2:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
    cdb6:	f8cd 2450 	str.w	r2, [sp, #1104]	; 0x450
    cdba:	e7ff      	b.n	cdbc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x12c>
    cdbc:	f8dd 0450 	ldr.w	r0, [sp, #1104]	; 0x450
    cdc0:	f000 010f 	and.w	r1, r0, #15
            (inst >> 4) & 0xf,
    cdc4:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    cdc8:	0912      	lsrs	r2, r2, #4
    cdca:	f8cd 144c 	str.w	r1, [sp, #1100]	; 0x44c
    cdce:	f8cd 2448 	str.w	r2, [sp, #1096]	; 0x448
    cdd2:	e7ff      	b.n	cdd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x144>
    cdd4:	f8dd 0448 	ldr.w	r0, [sp, #1096]	; 0x448
    cdd8:	f000 010f 	and.w	r1, r0, #15
            (inst >> 0) & 0xf,
    cddc:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    cde0:	f8cd 1444 	str.w	r1, [sp, #1092]	; 0x444
    cde4:	f8cd 2440 	str.w	r2, [sp, #1088]	; 0x440
    cde8:	e7ff      	b.n	cdea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x15a>
    cdea:	f8dd 0440 	ldr.w	r0, [sp, #1088]	; 0x440
    cdee:	f000 010f 	and.w	r1, r0, #15
        match (
    cdf2:	f8dd 2454 	ldr.w	r2, [sp, #1108]	; 0x454
    cdf6:	f8ad 2498 	strh.w	r2, [sp, #1176]	; 0x498
    cdfa:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
    cdfe:	f8ad 349a 	strh.w	r3, [sp, #1178]	; 0x49a
    ce02:	f8dd c444 	ldr.w	ip, [sp, #1092]	; 0x444
    ce06:	f8ad c49c 	strh.w	ip, [sp, #1180]	; 0x49c
    ce0a:	f8ad 149e 	strh.w	r1, [sp, #1182]	; 0x49e
        ) {
            (0, 0, 0xe, 0) => {
    ce0e:	f8bd 1498 	ldrh.w	r1, [sp, #1176]	; 0x498
    ce12:	468e      	mov	lr, r1
    ce14:	290f      	cmp	r1, #15
    ce16:	f8cd e43c 	str.w	lr, [sp, #1084]	; 0x43c
    ce1a:	d84f      	bhi.n	cebc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
    ce1c:	f8dd 143c 	ldr.w	r1, [sp, #1084]	; 0x43c
    ce20:	e8df f011 	tbh	[pc, r1, lsl #1]
    ce24:	03010010 	.word	0x03010010
    ce28:	042d0394 	.word	0x042d0394
    ce2c:	002c04cd 	.word	0x002c04cd
    ce30:	06af061a 	.word	0x06af061a
    ce34:	00750032 	.word	0x00750032
    ce38:	0edf0e54 	.word	0x0edf0e54
    ce3c:	101e0f80 	.word	0x101e0f80
    ce40:	0095007b 	.word	0x0095007b
    ce44:	f8bd 049a 	ldrh.w	r0, [sp, #1178]	; 0x49a
    ce48:	2800      	cmp	r0, #0
    ce4a:	f040 825c 	bne.w	d306 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x676>
    ce4e:	e7ff      	b.n	ce50 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1c0>
    ce50:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    ce54:	280e      	cmp	r0, #14
    ce56:	f040 8256 	bne.w	d306 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x676>
    ce5a:	e7ff      	b.n	ce5c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1cc>
    ce5c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    ce60:	4601      	mov	r1, r0
    ce62:	2800      	cmp	r0, #0
    ce64:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438
    ce68:	f000 80c0 	beq.w	cfec <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x35c>
    ce6c:	e7ff      	b.n	ce6e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1de>
    ce6e:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
    ce72:	b281      	uxth	r1, r0
    ce74:	290e      	cmp	r1, #14
    ce76:	f000 81b1 	beq.w	d1dc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x54c>
    ce7a:	e244      	b.n	d306 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x676>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
                if self.v[x] != kk {
                    self.next();
                }
            }
            (5, _, _, 0) => {
    ce7c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    ce80:	2800      	cmp	r0, #0
    ce82:	f000 853c 	beq.w	d8fe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc6e>
    ce86:	e019      	b.n	cebc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
            }
            (7, _, _, _) => {
                trace!("[{:04x}] ADD Vx, kk", self.pc);
                self.v[x] = self.v[x].wrapping_add(kk);
            }
            (8, _, _, 0) => {
    ce88:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    ce8c:	4601      	mov	r1, r0
    ce8e:	280e      	cmp	r0, #14
    ce90:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
    ce94:	d812      	bhi.n	cebc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
    ce96:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
    ce9a:	e8df f011 	tbh	[pc, r1, lsl #1]
    ce9e:	0719      	.short	0x0719
    cea0:	086207bb 	.word	0x086207bb
    cea4:	09b00909 	.word	0x09b00909
    cea8:	0b360a72 	.word	0x0b360a72
    ceac:	000f0beb 	.word	0x000f0beb
    ceb0:	000f000f 	.word	0x000f000f
    ceb4:	000f000f 	.word	0x000f000f
    ceb8:	0caf000f 	.word	0x0caf000f
                let x = x as usize;
                for i in 0..(x + 1) {
                    self.v[i] = self.mem[self.i as usize + i];
                }
            }
            _ => panic!("[{:04x}] Invalid op: {:04x}", self.pc, inst), // Bad ops
    cebc:	f24d 6058 	movw	r0, #54872	; 0xd658
    cec0:	f2c0 0001 	movt	r0, #1
    cec4:	6801      	ldr	r1, [r0, #0]
    cec6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ceca:	f100 0212 	add.w	r2, r0, #18
    cece:	f8cd 2c68 	str.w	r2, [sp, #3176]	; 0xc68
    ced2:	f20d 4296 	addw	r2, sp, #1174	; 0x496
    ced6:	f8cd 2c6c 	str.w	r2, [sp, #3180]	; 0xc6c
    ceda:	f8dd 2c68 	ldr.w	r2, [sp, #3176]	; 0xc68
    cede:	f8cd 2d60 	str.w	r2, [sp, #3424]	; 0xd60
    cee2:	f8dd 3c6c 	ldr.w	r3, [sp, #3180]	; 0xc6c
    cee6:	f8cd 3d64 	str.w	r3, [sp, #3428]	; 0xd64
    ceea:	f646 1c5b 	movw	ip, #26971	; 0x695b
    ceee:	f2c0 0c01 	movt	ip, #1
    cef2:	4610      	mov	r0, r2
    cef4:	f8cd 1434 	str.w	r1, [sp, #1076]	; 0x434
    cef8:	4661      	mov	r1, ip
    cefa:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    cefe:	f7fd fc19 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cf02:	f8cd 042c 	str.w	r0, [sp, #1068]	; 0x42c
    cf06:	f8cd 1428 	str.w	r1, [sp, #1064]	; 0x428
    cf0a:	f003 b938 	b.w	1017e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x34ee>
            (9, _, _, 0) => {
    cf0e:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cf12:	2800      	cmp	r0, #0
    cf14:	f001 852d 	beq.w	e972 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1ce2>
    cf18:	e7d0      	b.n	cebc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
            (0xe, _, 9, 0xe) => {
    cf1a:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    cf1e:	4601      	mov	r1, r0
    cf20:	2809      	cmp	r0, #9
    cf22:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420
    cf26:	d006      	beq.n	cf36 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a6>
    cf28:	e7ff      	b.n	cf2a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x29a>
    cf2a:	f8dd 0420 	ldr.w	r0, [sp, #1056]	; 0x420
    cf2e:	b281      	uxth	r1, r0
    cf30:	290a      	cmp	r1, #10
    cf32:	d006      	beq.n	cf42 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b2>
    cf34:	e7c2      	b.n	cebc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
    cf36:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cf3a:	280e      	cmp	r0, #14
    cf3c:	f002 814a 	beq.w	f1d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2544>
    cf40:	e7bc      	b.n	cebc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
            (0xe, _, 0xa, 0x1) => {
    cf42:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cf46:	2801      	cmp	r0, #1
    cf48:	f002 81ea 	beq.w	f320 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2690>
    cf4c:	e7b6      	b.n	cebc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
            (0xf, _, 0, 7) => {
    cf4e:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    cf52:	4601      	mov	r1, r0
    cf54:	2806      	cmp	r0, #6
    cf56:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c
    cf5a:	d8af      	bhi.n	cebc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
    cf5c:	f8dd 141c 	ldr.w	r1, [sp, #1052]	; 0x41c
    cf60:	e8df f001 	tbb	[pc, r1]
    cf64:	322c1505 	.word	0x322c1505
    cf68:	003e3804 	.word	0x003e3804
    cf6c:	e7a6      	b.n	cebc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
    cf6e:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cf72:	4601      	mov	r1, r0
    cf74:	2807      	cmp	r0, #7
    cf76:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
    cf7a:	f002 8277 	beq.w	f46c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x27dc>
    cf7e:	e7ff      	b.n	cf80 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f0>
    cf80:	f8dd 0418 	ldr.w	r0, [sp, #1048]	; 0x418
    cf84:	b281      	uxth	r1, r0
    cf86:	290a      	cmp	r1, #10
    cf88:	f002 8309 	beq.w	f59e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x290e>
    cf8c:	e796      	b.n	cebc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
            (0xf, _, 1, 5) => {
    cf8e:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cf92:	4601      	mov	r1, r0
    cf94:	2805      	cmp	r0, #5
    cf96:	f8cd 1414 	str.w	r1, [sp, #1044]	; 0x414
    cf9a:	f002 839a 	beq.w	f6d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a42>
    cf9e:	e7ff      	b.n	cfa0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x310>
    cfa0:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    cfa4:	b281      	uxth	r1, r0
    cfa6:	2908      	cmp	r1, #8
    cfa8:	f002 8428 	beq.w	f7fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b6c>
    cfac:	e7ff      	b.n	cfae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x31e>
    cfae:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    cfb2:	b281      	uxth	r1, r0
    cfb4:	290e      	cmp	r1, #14
    cfb6:	f002 84b6 	beq.w	f926 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2c96>
    cfba:	e77f      	b.n	cebc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
            (0xf, _, 2, 9) => {
    cfbc:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cfc0:	2809      	cmp	r0, #9
    cfc2:	f002 8554 	beq.w	fa6e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2dde>
    cfc6:	e779      	b.n	cebc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
            (0xf, _, 3, 3) => {
    cfc8:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cfcc:	2803      	cmp	r0, #3
    cfce:	f002 85ff 	beq.w	fbd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f40>
    cfd2:	e773      	b.n	cebc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
            (0xf, _, 5, 5) => {
    cfd4:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cfd8:	2805      	cmp	r0, #5
    cfda:	f002 8708 	beq.w	fdee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x315e>
    cfde:	e76d      	b.n	cebc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
            (0xf, _, 6, 5) => {
    cfe0:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cfe4:	2805      	cmp	r0, #5
    cfe6:	f002 87e5 	beq.w	ffb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3324>
    cfea:	e767      	b.n	cebc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22c>
    cfec:	2005      	movs	r0, #5
    cfee:	f8cd 04a0 	str.w	r0, [sp, #1184]	; 0x4a0
    cff2:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    cff6:	f2c0 0001 	movt	r0, #1
    cffa:	6801      	ldr	r1, [r0, #0]
    cffc:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    d000:	f007 fb1a 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d004:	f8cd 0410 	str.w	r0, [sp, #1040]	; 0x410
    d008:	e01f      	b.n	d04a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3ba>
    d00a:	2001      	movs	r0, #1
    d00c:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    d010:	e015      	b.n	d03e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3ae>
    d012:	2000      	movs	r0, #0
    d014:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    d018:	e011      	b.n	d03e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3ae>
    d01a:	2000      	movs	r0, #0
/// [`debug!`]: macro.debug.html
/// [`trace!`]: macro.trace.html
/// [`set_max_level`]: fn.set_max_level.html
#[inline(always)]
pub fn max_level() -> LevelFilter {
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
    d01c:	f88d 0dab 	strb.w	r0, [sp, #3499]	; 0xdab
    d020:	f89d 1dab 	ldrb.w	r1, [sp, #3499]	; 0xdab
    d024:	f646 206c 	movw	r0, #27244	; 0x6a6c
    d028:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d02c:	f003 feae 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d030:	f8cd 0dac 	str.w	r0, [sp, #3500]	; 0xdac
    d034:	f8dd 0dac 	ldr.w	r0, [sp, #3500]	; 0xdac
    d038:	f8cd 04a8 	str.w	r0, [sp, #1192]	; 0x4a8
    d03c:	e00b      	b.n	d056 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3c6>
    d03e:	f89d 04a7 	ldrb.w	r0, [sp, #1191]	; 0x4a7
    d042:	07c0      	lsls	r0, r0, #31
    d044:	2800      	cmp	r0, #0
    d046:	d115      	bne.n	d074 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3e4>
    d048:	e05e      	b.n	d108 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x478>
    d04a:	f8dd 0410 	ldr.w	r0, [sp, #1040]	; 0x410
    d04e:	07c1      	lsls	r1, r0, #31
    d050:	2900      	cmp	r1, #0
    d052:	d1e2      	bne.n	d01a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x38a>
    d054:	e7dd      	b.n	d012 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x382>
    d056:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    d05a:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
    d05e:	f007 faeb 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d062:	f8cd 040c 	str.w	r0, [sp, #1036]	; 0x40c
    d066:	e7ff      	b.n	d068 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3d8>
    d068:	f8dd 040c 	ldr.w	r0, [sp, #1036]	; 0x40c
    d06c:	07c1      	lsls	r1, r0, #31
    d06e:	2900      	cmp	r1, #0
    d070:	d1cb      	bne.n	d00a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x37a>
    d072:	e7ce      	b.n	d012 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x382>
                trace!("[{:04x}] CLS", self.pc);
    d074:	f64d 00f8 	movw	r0, #55544	; 0xd8f8
    d078:	f2c0 0001 	movt	r0, #1
    d07c:	6801      	ldr	r1, [r0, #0]
    d07e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d082:	f100 0212 	add.w	r2, r0, #18
    d086:	f8cd 24cc 	str.w	r2, [sp, #1228]	; 0x4cc
    d08a:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
    d08e:	f8cd 2d88 	str.w	r2, [sp, #3464]	; 0xd88
    d092:	f646 135b 	movw	r3, #26971	; 0x695b
    d096:	f2c0 0301 	movt	r3, #1
    d09a:	4610      	mov	r0, r2
    d09c:	f8cd 1408 	str.w	r1, [sp, #1032]	; 0x408
    d0a0:	4619      	mov	r1, r3
    d0a2:	f7fd fb47 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d0a6:	f8cd 0404 	str.w	r0, [sp, #1028]	; 0x404
    d0aa:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400
    d0ae:	e7ff      	b.n	d0b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x420>
    d0b0:	f8dd 0404 	ldr.w	r0, [sp, #1028]	; 0x404
    d0b4:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
    d0b8:	f8dd 1400 	ldr.w	r1, [sp, #1024]	; 0x400
    d0bc:	f8cd 14c8 	str.w	r1, [sp, #1224]	; 0x4c8
    d0c0:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    d0c4:	f2c0 0201 	movt	r2, #1
    d0c8:	6812      	ldr	r2, [r2, #0]
    d0ca:	466b      	mov	r3, sp
    d0cc:	f04f 0c01 	mov.w	ip, #1
    d0d0:	f8c3 c008 	str.w	ip, [r3, #8]
    d0d4:	605a      	str	r2, [r3, #4]
    d0d6:	f8c3 c000 	str.w	ip, [r3]
    d0da:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    d0de:	2202      	movs	r2, #2
    d0e0:	f20d 43c4 	addw	r3, sp, #1220	; 0x4c4
    d0e4:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    d0e8:	f007 f96b 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d0ec:	e7ff      	b.n	d0ee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x45e>
    d0ee:	f8dd 14a0 	ldr.w	r1, [sp, #1184]	; 0x4a0
    d0f2:	f64d 1018 	movw	r0, #55576	; 0xd918
    d0f6:	f2c0 0001 	movt	r0, #1
    d0fa:	6802      	ldr	r2, [r0, #0]
    d0fc:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    d100:	f004 fd4a 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d104:	e7ff      	b.n	d106 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x476>
    d106:	e7ff      	b.n	d108 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x478>
                let (w, h) = self.hw.vram_size();
    d108:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d10c:	f7ff f9b1 	bl	c472 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbe871a76fb26495aE>
    d110:	90ff      	str	r0, [sp, #1020]	; 0x3fc
    d112:	91fe      	str	r1, [sp, #1016]	; 0x3f8
    d114:	e7ff      	b.n	d116 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x486>
    d116:	98ff      	ldr	r0, [sp, #1020]	; 0x3fc
    d118:	f8cd 0d8c 	str.w	r0, [sp, #3468]	; 0xd8c
    d11c:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
    d11e:	f8cd 14d0 	str.w	r1, [sp, #1232]	; 0x4d0
    d122:	2200      	movs	r2, #0
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d124:	f8cd 2538 	str.w	r2, [sp, #1336]	; 0x538
    d128:	f8cd 053c 	str.w	r0, [sp, #1340]	; 0x53c
    d12c:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
    d130:	f8cd 2540 	str.w	r2, [sp, #1344]	; 0x540
    d134:	f8dd 1538 	ldr.w	r1, [sp, #1336]	; 0x538
    d138:	f8dd 253c 	ldr.w	r2, [sp, #1340]	; 0x53c
    d13c:	f8dd 3540 	ldr.w	r3, [sp, #1344]	; 0x540
    d140:	f20d 502c 	addw	r0, sp, #1324	; 0x52c
    d144:	f003 fee6 	bl	10f14 <_ZN4core4iter6traits8iterator8Iterator3map17h2bffa2f7235b9482E>
    d148:	e7ff      	b.n	d14a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x4ba>
    d14a:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
    d14e:	f20d 512c 	addw	r1, sp, #1324	; 0x52c
    d152:	f003 fe2f 	bl	10db4 <_ZN4core4iter6traits8iterator8Iterator7flatten17h1299c8c4daf1c93cE>
    d156:	e7ff      	b.n	d158 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x4c8>
    d158:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    d15c:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
    d160:	f003 fdfd 	bl	10d5e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdaeeeffeba3c3f70E>
    d164:	e7ff      	b.n	d166 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x4d6>
    d166:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    d16a:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    d16e:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    d172:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    d176:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    d17a:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    d17e:	e7ff      	b.n	d180 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x4f0>
    d180:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    d184:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    d188:	f003 fd16 	bl	10bb8 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf0fe5cd21a17e0a6E>
    d18c:	e7ff      	b.n	d18e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x4fe>
    d18e:	f8dd 0570 	ldr.w	r0, [sp, #1392]	; 0x570
    d192:	2800      	cmp	r0, #0
    d194:	d001      	beq.n	d19a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x50a>
    d196:	e7ff      	b.n	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x508>
    d198:	e002      	b.n	d1a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x510>
        match (
    d19a:	f003 b82f 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d19e:	defe      	udf	#254	; 0xfe
    d1a0:	f8dd 0574 	ldr.w	r0, [sp, #1396]	; 0x574
    d1a4:	f8dd 1578 	ldr.w	r1, [sp, #1400]	; 0x578
    d1a8:	f8cd 0d90 	str.w	r0, [sp, #3472]	; 0xd90
    d1ac:	f8cd 1d94 	str.w	r1, [sp, #3476]	; 0xd94
    d1b0:	f8cd 0d98 	str.w	r0, [sp, #3480]	; 0xd98
    d1b4:	f8cd 1d9c 	str.w	r1, [sp, #3484]	; 0xd9c
    d1b8:	f8cd 0da0 	str.w	r0, [sp, #3488]	; 0xda0
    d1bc:	f8cd 1da4 	str.w	r1, [sp, #3492]	; 0xda4
    d1c0:	2300      	movs	r3, #0
                    self.hw.vram_set(x, y, false);
    d1c2:	f8dd 2490 	ldr.w	r2, [sp, #1168]	; 0x490
    d1c6:	90fd      	str	r0, [sp, #1012]	; 0x3f4
    d1c8:	4610      	mov	r0, r2
    d1ca:	f8dd c3f4 	ldr.w	ip, [sp, #1012]	; 0x3f4
    d1ce:	91fc      	str	r1, [sp, #1008]	; 0x3f0
    d1d0:	4661      	mov	r1, ip
    d1d2:	9afc      	ldr	r2, [sp, #1008]	; 0x3f0
    d1d4:	f7fe ff1f 	bl	c016 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E>
    d1d8:	e7ff      	b.n	d1da <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x54a>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d1da:	e7d1      	b.n	d180 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x4f0>
    d1dc:	2005      	movs	r0, #5
    d1de:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
    d1e2:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    d1e6:	f2c0 0001 	movt	r0, #1
    d1ea:	6801      	ldr	r1, [r0, #0]
    d1ec:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    d1f0:	f007 fa22 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d1f4:	90fb      	str	r0, [sp, #1004]	; 0x3ec
    d1f6:	e01f      	b.n	d238 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x5a8>
    d1f8:	2001      	movs	r0, #1
    d1fa:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    d1fe:	e015      	b.n	d22c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x59c>
    d200:	2000      	movs	r0, #0
    d202:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    d206:	e011      	b.n	d22c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x59c>
    d208:	2000      	movs	r0, #0
    d20a:	f88d 0db3 	strb.w	r0, [sp, #3507]	; 0xdb3
    d20e:	f89d 1db3 	ldrb.w	r1, [sp, #3507]	; 0xdb3
    d212:	f646 206c 	movw	r0, #27244	; 0x6a6c
    d216:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d21a:	f003 fdb7 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d21e:	f8cd 0db4 	str.w	r0, [sp, #3508]	; 0xdb4
    d222:	f8dd 0db4 	ldr.w	r0, [sp, #3508]	; 0xdb4
    d226:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
    d22a:	e00a      	b.n	d242 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x5b2>
    d22c:	f89d 0583 	ldrb.w	r0, [sp, #1411]	; 0x583
    d230:	07c0      	lsls	r0, r0, #31
    d232:	2800      	cmp	r0, #0
    d234:	d112      	bne.n	d25c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x5cc>
    d236:	e055      	b.n	d2e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x654>
    d238:	98fb      	ldr	r0, [sp, #1004]	; 0x3ec
    d23a:	07c1      	lsls	r1, r0, #31
    d23c:	2900      	cmp	r1, #0
    d23e:	d1e3      	bne.n	d208 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x578>
    d240:	e7de      	b.n	d200 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x570>
    d242:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    d246:	f20d 5184 	addw	r1, sp, #1412	; 0x584
    d24a:	f007 f9f5 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d24e:	90fa      	str	r0, [sp, #1000]	; 0x3e8
    d250:	e7ff      	b.n	d252 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x5c2>
    d252:	98fa      	ldr	r0, [sp, #1000]	; 0x3e8
    d254:	07c1      	lsls	r1, r0, #31
    d256:	2900      	cmp	r1, #0
    d258:	d1ce      	bne.n	d1f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x568>
    d25a:	e7d1      	b.n	d200 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x570>
                trace!("[{:04x}] RET", self.pc);
    d25c:	f64d 00bc 	movw	r0, #55484	; 0xd8bc
    d260:	f2c0 0001 	movt	r0, #1
    d264:	6801      	ldr	r1, [r0, #0]
    d266:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d26a:	f100 0212 	add.w	r2, r0, #18
    d26e:	f8cd 25a8 	str.w	r2, [sp, #1448]	; 0x5a8
    d272:	f8dd 25a8 	ldr.w	r2, [sp, #1448]	; 0x5a8
    d276:	f8cd 2d80 	str.w	r2, [sp, #3456]	; 0xd80
    d27a:	f646 135b 	movw	r3, #26971	; 0x695b
    d27e:	f2c0 0301 	movt	r3, #1
    d282:	4610      	mov	r0, r2
    d284:	91f9      	str	r1, [sp, #996]	; 0x3e4
    d286:	4619      	mov	r1, r3
    d288:	f7fd fa54 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d28c:	90f8      	str	r0, [sp, #992]	; 0x3e0
    d28e:	91f7      	str	r1, [sp, #988]	; 0x3dc
    d290:	e7ff      	b.n	d292 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x602>
    d292:	98f8      	ldr	r0, [sp, #992]	; 0x3e0
    d294:	f8cd 05a0 	str.w	r0, [sp, #1440]	; 0x5a0
    d298:	99f7      	ldr	r1, [sp, #988]	; 0x3dc
    d29a:	f8cd 15a4 	str.w	r1, [sp, #1444]	; 0x5a4
    d29e:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    d2a2:	f2c0 0201 	movt	r2, #1
    d2a6:	6812      	ldr	r2, [r2, #0]
    d2a8:	466b      	mov	r3, sp
    d2aa:	f04f 0c01 	mov.w	ip, #1
    d2ae:	f8c3 c008 	str.w	ip, [r3, #8]
    d2b2:	605a      	str	r2, [r3, #4]
    d2b4:	f8c3 c000 	str.w	ip, [r3]
    d2b8:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    d2bc:	2202      	movs	r2, #2
    d2be:	f50d 63b4 	add.w	r3, sp, #1440	; 0x5a0
    d2c2:	99f9      	ldr	r1, [sp, #996]	; 0x3e4
    d2c4:	f007 f87d 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d2c8:	e7ff      	b.n	d2ca <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x63a>
    d2ca:	f8dd 157c 	ldr.w	r1, [sp, #1404]	; 0x57c
    d2ce:	f64d 00dc 	movw	r0, #55516	; 0xd8dc
    d2d2:	f2c0 0001 	movt	r0, #1
    d2d6:	6802      	ldr	r2, [r0, #0]
    d2d8:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    d2dc:	f004 fc5c 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d2e0:	e7ff      	b.n	d2e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x652>
    d2e2:	e7ff      	b.n	d2e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x654>
                let addr = self.pop();
    d2e4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d2e8:	f7ff fc7d 	bl	cbe6 <_ZN8libchip814Chip8$LT$T$GT$3pop17h70e7cf8d6b1182e4E>
    d2ec:	4601      	mov	r1, r0
    d2ee:	f8ad 0d86 	strh.w	r0, [sp, #3462]	; 0xd86
    d2f2:	91f6      	str	r1, [sp, #984]	; 0x3d8
    d2f4:	e7ff      	b.n	d2f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x666>
                self.jump(addr);
    d2f6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d2fa:	99f6      	ldr	r1, [sp, #984]	; 0x3d8
    d2fc:	f003 fa6d 	bl	107da <_ZN8libchip814Chip8$LT$T$GT$4jump17heb92b408b228e4d7E>
    d300:	e7ff      	b.n	d302 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x672>
        match (
    d302:	f002 bf7b 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    d306:	2005      	movs	r0, #5
    d308:	f8cd 05ac 	str.w	r0, [sp, #1452]	; 0x5ac
    d30c:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    d310:	f2c0 0001 	movt	r0, #1
    d314:	6801      	ldr	r1, [r0, #0]
    d316:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    d31a:	f007 f98d 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d31e:	90f5      	str	r0, [sp, #980]	; 0x3d4
    d320:	e01f      	b.n	d362 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x6d2>
    d322:	2001      	movs	r0, #1
    d324:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    d328:	e015      	b.n	d356 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x6c6>
    d32a:	2000      	movs	r0, #0
    d32c:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    d330:	e011      	b.n	d356 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x6c6>
    d332:	2000      	movs	r0, #0
    d334:	f88d 0dbb 	strb.w	r0, [sp, #3515]	; 0xdbb
    d338:	f89d 1dbb 	ldrb.w	r1, [sp, #3515]	; 0xdbb
    d33c:	f646 206c 	movw	r0, #27244	; 0x6a6c
    d340:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d344:	f003 fd22 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d348:	f8cd 0dbc 	str.w	r0, [sp, #3516]	; 0xdbc
    d34c:	f8dd 0dbc 	ldr.w	r0, [sp, #3516]	; 0xdbc
    d350:	f8cd 05b4 	str.w	r0, [sp, #1460]	; 0x5b4
    d354:	e00a      	b.n	d36c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x6dc>
    d356:	f89d 05b3 	ldrb.w	r0, [sp, #1459]	; 0x5b3
    d35a:	07c0      	lsls	r0, r0, #31
    d35c:	2800      	cmp	r0, #0
    d35e:	d112      	bne.n	d386 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x6f6>
    d360:	e055      	b.n	d40e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x77e>
    d362:	98f5      	ldr	r0, [sp, #980]	; 0x3d4
    d364:	07c1      	lsls	r1, r0, #31
    d366:	2900      	cmp	r1, #0
    d368:	d1e3      	bne.n	d332 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x6a2>
    d36a:	e7de      	b.n	d32a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x69a>
    d36c:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    d370:	f20d 51b4 	addw	r1, sp, #1460	; 0x5b4
    d374:	f007 f960 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d378:	90f4      	str	r0, [sp, #976]	; 0x3d0
    d37a:	e7ff      	b.n	d37c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x6ec>
    d37c:	98f4      	ldr	r0, [sp, #976]	; 0x3d0
    d37e:	07c1      	lsls	r1, r0, #31
    d380:	2900      	cmp	r1, #0
    d382:	d1ce      	bne.n	d322 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x692>
    d384:	e7d1      	b.n	d32a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x69a>
                trace!("[{:04x}] SYS nnn", self.pc);
    d386:	f64d 0060 	movw	r0, #55392	; 0xd860
    d38a:	f2c0 0001 	movt	r0, #1
    d38e:	6801      	ldr	r1, [r0, #0]
    d390:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d394:	f100 0212 	add.w	r2, r0, #18
    d398:	f8cd 25d8 	str.w	r2, [sp, #1496]	; 0x5d8
    d39c:	f8dd 25d8 	ldr.w	r2, [sp, #1496]	; 0x5d8
    d3a0:	f8cd 2d7c 	str.w	r2, [sp, #3452]	; 0xd7c
    d3a4:	f646 135b 	movw	r3, #26971	; 0x695b
    d3a8:	f2c0 0301 	movt	r3, #1
    d3ac:	4610      	mov	r0, r2
    d3ae:	91f3      	str	r1, [sp, #972]	; 0x3cc
    d3b0:	4619      	mov	r1, r3
    d3b2:	f7fd f9bf 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d3b6:	90f2      	str	r0, [sp, #968]	; 0x3c8
    d3b8:	91f1      	str	r1, [sp, #964]	; 0x3c4
    d3ba:	e7ff      	b.n	d3bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x72c>
    d3bc:	98f2      	ldr	r0, [sp, #968]	; 0x3c8
    d3be:	f8cd 05d0 	str.w	r0, [sp, #1488]	; 0x5d0
    d3c2:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
    d3c4:	f8cd 15d4 	str.w	r1, [sp, #1492]	; 0x5d4
    d3c8:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    d3cc:	f2c0 0201 	movt	r2, #1
    d3d0:	6812      	ldr	r2, [r2, #0]
    d3d2:	466b      	mov	r3, sp
    d3d4:	f04f 0c01 	mov.w	ip, #1
    d3d8:	f8c3 c008 	str.w	ip, [r3, #8]
    d3dc:	605a      	str	r2, [r3, #4]
    d3de:	f8c3 c000 	str.w	ip, [r3]
    d3e2:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    d3e6:	2202      	movs	r2, #2
    d3e8:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
    d3ec:	99f3      	ldr	r1, [sp, #972]	; 0x3cc
    d3ee:	f006 ffe8 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d3f2:	e7ff      	b.n	d3f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x764>
    d3f4:	f8dd 15ac 	ldr.w	r1, [sp, #1452]	; 0x5ac
    d3f8:	f64d 0080 	movw	r0, #55424	; 0xd880
    d3fc:	f2c0 0001 	movt	r0, #1
    d400:	6802      	ldr	r2, [r0, #0]
    d402:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    d406:	f004 fbc7 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d40a:	e7ff      	b.n	d40c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x77c>
    d40c:	e7ff      	b.n	d40e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x77e>
    d40e:	f64d 0084 	movw	r0, #55428	; 0xd884
    d412:	f2c0 0001 	movt	r0, #1
    d416:	f64d 0294 	movw	r2, #55444	; 0xd894
    d41a:	f2c0 0201 	movt	r2, #1
    d41e:	210f      	movs	r1, #15
    d420:	f007 fe8e 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d424:	defe      	udf	#254	; 0xfe
    d426:	2005      	movs	r0, #5
    d428:	f8cd 05dc 	str.w	r0, [sp, #1500]	; 0x5dc
    d42c:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    d430:	f2c0 0001 	movt	r0, #1
    d434:	6801      	ldr	r1, [r0, #0]
    d436:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    d43a:	f007 f8fd 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d43e:	90f0      	str	r0, [sp, #960]	; 0x3c0
    d440:	e01f      	b.n	d482 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x7f2>
    d442:	2001      	movs	r0, #1
    d444:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    d448:	e015      	b.n	d476 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x7e6>
    d44a:	2000      	movs	r0, #0
    d44c:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    d450:	e011      	b.n	d476 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x7e6>
    d452:	2000      	movs	r0, #0
    d454:	f88d 0dc3 	strb.w	r0, [sp, #3523]	; 0xdc3
    d458:	f89d 1dc3 	ldrb.w	r1, [sp, #3523]	; 0xdc3
    d45c:	f646 206c 	movw	r0, #27244	; 0x6a6c
    d460:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d464:	f003 fc92 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d468:	f8cd 0dc4 	str.w	r0, [sp, #3524]	; 0xdc4
    d46c:	f8dd 0dc4 	ldr.w	r0, [sp, #3524]	; 0xdc4
    d470:	f8cd 05e4 	str.w	r0, [sp, #1508]	; 0x5e4
    d474:	e00a      	b.n	d48c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x7fc>
    d476:	f89d 05e3 	ldrb.w	r0, [sp, #1507]	; 0x5e3
    d47a:	07c0      	lsls	r0, r0, #31
    d47c:	2800      	cmp	r0, #0
    d47e:	d112      	bne.n	d4a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x816>
    d480:	e055      	b.n	d52e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x89e>
    d482:	98f0      	ldr	r0, [sp, #960]	; 0x3c0
    d484:	07c1      	lsls	r1, r0, #31
    d486:	2900      	cmp	r1, #0
    d488:	d1e3      	bne.n	d452 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x7c2>
    d48a:	e7de      	b.n	d44a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x7ba>
    d48c:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    d490:	f20d 51e4 	addw	r1, sp, #1508	; 0x5e4
    d494:	f007 f8d0 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d498:	90ef      	str	r0, [sp, #956]	; 0x3bc
    d49a:	e7ff      	b.n	d49c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x80c>
    d49c:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
    d49e:	07c1      	lsls	r1, r0, #31
    d4a0:	2900      	cmp	r1, #0
    d4a2:	d1ce      	bne.n	d442 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x7b2>
    d4a4:	e7d1      	b.n	d44a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x7ba>
                trace!("[{:04x}] JP nnn", self.pc);
    d4a6:	f64d 0020 	movw	r0, #55328	; 0xd820
    d4aa:	f2c0 0001 	movt	r0, #1
    d4ae:	6801      	ldr	r1, [r0, #0]
    d4b0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d4b4:	f100 0212 	add.w	r2, r0, #18
    d4b8:	f8cd 2608 	str.w	r2, [sp, #1544]	; 0x608
    d4bc:	f8dd 2608 	ldr.w	r2, [sp, #1544]	; 0x608
    d4c0:	f8cd 2d78 	str.w	r2, [sp, #3448]	; 0xd78
    d4c4:	f646 135b 	movw	r3, #26971	; 0x695b
    d4c8:	f2c0 0301 	movt	r3, #1
    d4cc:	4610      	mov	r0, r2
    d4ce:	91ee      	str	r1, [sp, #952]	; 0x3b8
    d4d0:	4619      	mov	r1, r3
    d4d2:	f7fd f92f 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d4d6:	90ed      	str	r0, [sp, #948]	; 0x3b4
    d4d8:	91ec      	str	r1, [sp, #944]	; 0x3b0
    d4da:	e7ff      	b.n	d4dc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x84c>
    d4dc:	98ed      	ldr	r0, [sp, #948]	; 0x3b4
    d4de:	f8cd 0600 	str.w	r0, [sp, #1536]	; 0x600
    d4e2:	99ec      	ldr	r1, [sp, #944]	; 0x3b0
    d4e4:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
    d4e8:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    d4ec:	f2c0 0201 	movt	r2, #1
    d4f0:	6812      	ldr	r2, [r2, #0]
    d4f2:	466b      	mov	r3, sp
    d4f4:	f04f 0c01 	mov.w	ip, #1
    d4f8:	f8c3 c008 	str.w	ip, [r3, #8]
    d4fc:	605a      	str	r2, [r3, #4]
    d4fe:	f8c3 c000 	str.w	ip, [r3]
    d502:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    d506:	2202      	movs	r2, #2
    d508:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
    d50c:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
    d50e:	f006 ff58 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d512:	e7ff      	b.n	d514 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x884>
    d514:	f8dd 15dc 	ldr.w	r1, [sp, #1500]	; 0x5dc
    d518:	f64d 0040 	movw	r0, #55360	; 0xd840
    d51c:	f2c0 0001 	movt	r0, #1
    d520:	6802      	ldr	r2, [r0, #0]
    d522:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    d526:	f004 fb37 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d52a:	e7ff      	b.n	d52c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x89c>
    d52c:	e7ff      	b.n	d52e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x89e>
    d52e:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    d530:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    d534:	f007 f857 	bl	145e6 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    d538:	90eb      	str	r0, [sp, #940]	; 0x3ac
    d53a:	e7ff      	b.n	d53c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x8ac>
    d53c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d540:	99eb      	ldr	r1, [sp, #940]	; 0x3ac
    d542:	f003 f94a 	bl	107da <_ZN8libchip814Chip8$LT$T$GT$4jump17heb92b408b228e4d7E>
    d546:	e7ff      	b.n	d548 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x8b8>
        match (
    d548:	f002 be58 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    d54c:	2005      	movs	r0, #5
    d54e:	f8cd 060c 	str.w	r0, [sp, #1548]	; 0x60c
    d552:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    d556:	f2c0 0001 	movt	r0, #1
    d55a:	6801      	ldr	r1, [r0, #0]
    d55c:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    d560:	f007 f86a 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d564:	90ea      	str	r0, [sp, #936]	; 0x3a8
    d566:	e01f      	b.n	d5a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x918>
    d568:	2001      	movs	r0, #1
    d56a:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    d56e:	e015      	b.n	d59c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x90c>
    d570:	2000      	movs	r0, #0
    d572:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    d576:	e011      	b.n	d59c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x90c>
    d578:	2000      	movs	r0, #0
    d57a:	f88d 0dcb 	strb.w	r0, [sp, #3531]	; 0xdcb
    d57e:	f89d 1dcb 	ldrb.w	r1, [sp, #3531]	; 0xdcb
    d582:	f646 206c 	movw	r0, #27244	; 0x6a6c
    d586:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d58a:	f003 fbff 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d58e:	f8cd 0dcc 	str.w	r0, [sp, #3532]	; 0xdcc
    d592:	f8dd 0dcc 	ldr.w	r0, [sp, #3532]	; 0xdcc
    d596:	f8cd 0614 	str.w	r0, [sp, #1556]	; 0x614
    d59a:	e00a      	b.n	d5b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x922>
    d59c:	f89d 0613 	ldrb.w	r0, [sp, #1555]	; 0x613
    d5a0:	07c0      	lsls	r0, r0, #31
    d5a2:	2800      	cmp	r0, #0
    d5a4:	d112      	bne.n	d5cc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x93c>
    d5a6:	e055      	b.n	d654 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x9c4>
    d5a8:	98ea      	ldr	r0, [sp, #936]	; 0x3a8
    d5aa:	07c1      	lsls	r1, r0, #31
    d5ac:	2900      	cmp	r1, #0
    d5ae:	d1e3      	bne.n	d578 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x8e8>
    d5b0:	e7de      	b.n	d570 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x8e0>
    d5b2:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    d5b6:	f20d 6114 	addw	r1, sp, #1556	; 0x614
    d5ba:	f007 f83d 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d5be:	90e9      	str	r0, [sp, #932]	; 0x3a4
    d5c0:	e7ff      	b.n	d5c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x932>
    d5c2:	98e9      	ldr	r0, [sp, #932]	; 0x3a4
    d5c4:	07c1      	lsls	r1, r0, #31
    d5c6:	2900      	cmp	r1, #0
    d5c8:	d1ce      	bne.n	d568 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x8d8>
    d5ca:	e7d1      	b.n	d570 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x8e0>
                trace!("[{:04x}] CALL nnn", self.pc);
    d5cc:	f24d 70ec 	movw	r0, #55276	; 0xd7ec
    d5d0:	f2c0 0001 	movt	r0, #1
    d5d4:	6801      	ldr	r1, [r0, #0]
    d5d6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d5da:	f100 0212 	add.w	r2, r0, #18
    d5de:	f8cd 2638 	str.w	r2, [sp, #1592]	; 0x638
    d5e2:	f8dd 2638 	ldr.w	r2, [sp, #1592]	; 0x638
    d5e6:	f8cd 2d74 	str.w	r2, [sp, #3444]	; 0xd74
    d5ea:	f646 135b 	movw	r3, #26971	; 0x695b
    d5ee:	f2c0 0301 	movt	r3, #1
    d5f2:	4610      	mov	r0, r2
    d5f4:	91e8      	str	r1, [sp, #928]	; 0x3a0
    d5f6:	4619      	mov	r1, r3
    d5f8:	f7fd f89c 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d5fc:	90e7      	str	r0, [sp, #924]	; 0x39c
    d5fe:	91e6      	str	r1, [sp, #920]	; 0x398
    d600:	e7ff      	b.n	d602 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x972>
    d602:	98e7      	ldr	r0, [sp, #924]	; 0x39c
    d604:	f8cd 0630 	str.w	r0, [sp, #1584]	; 0x630
    d608:	99e6      	ldr	r1, [sp, #920]	; 0x398
    d60a:	f8cd 1634 	str.w	r1, [sp, #1588]	; 0x634
    d60e:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    d612:	f2c0 0201 	movt	r2, #1
    d616:	6812      	ldr	r2, [r2, #0]
    d618:	466b      	mov	r3, sp
    d61a:	f04f 0c01 	mov.w	ip, #1
    d61e:	f8c3 c008 	str.w	ip, [r3, #8]
    d622:	605a      	str	r2, [r3, #4]
    d624:	f8c3 c000 	str.w	ip, [r3]
    d628:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    d62c:	2202      	movs	r2, #2
    d62e:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
    d632:	99e8      	ldr	r1, [sp, #928]	; 0x3a0
    d634:	f006 fec5 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d638:	e7ff      	b.n	d63a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x9aa>
    d63a:	f8dd 160c 	ldr.w	r1, [sp, #1548]	; 0x60c
    d63e:	f64d 000c 	movw	r0, #55308	; 0xd80c
    d642:	f2c0 0001 	movt	r0, #1
    d646:	6802      	ldr	r2, [r0, #0]
    d648:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    d64c:	f004 faa4 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d650:	e7ff      	b.n	d652 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x9c2>
    d652:	e7ff      	b.n	d654 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x9c4>
                self.push(self.pc);
    d654:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d658:	8a41      	ldrh	r1, [r0, #18]
    d65a:	f003 f914 	bl	10886 <_ZN8libchip814Chip8$LT$T$GT$4push17hf7601df6bb546f8dE>
    d65e:	e7ff      	b.n	d660 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x9d0>
    d660:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    d662:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    d666:	f006 ffbe 	bl	145e6 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    d66a:	90e5      	str	r0, [sp, #916]	; 0x394
    d66c:	e7ff      	b.n	d66e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x9de>
    d66e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d672:	99e5      	ldr	r1, [sp, #916]	; 0x394
    d674:	f003 f8b1 	bl	107da <_ZN8libchip814Chip8$LT$T$GT$4jump17heb92b408b228e4d7E>
    d678:	e7ff      	b.n	d67a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x9ea>
        match (
    d67a:	f002 bdbf 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    d67e:	2005      	movs	r0, #5
    d680:	f8cd 063c 	str.w	r0, [sp, #1596]	; 0x63c
    d684:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    d688:	f2c0 0001 	movt	r0, #1
    d68c:	6801      	ldr	r1, [r0, #0]
    d68e:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    d692:	f006 ffd1 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d696:	90e4      	str	r0, [sp, #912]	; 0x390
    d698:	e01f      	b.n	d6da <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xa4a>
    d69a:	2001      	movs	r0, #1
    d69c:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    d6a0:	e015      	b.n	d6ce <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xa3e>
    d6a2:	2000      	movs	r0, #0
    d6a4:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    d6a8:	e011      	b.n	d6ce <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xa3e>
    d6aa:	2000      	movs	r0, #0
    d6ac:	f88d 0dd3 	strb.w	r0, [sp, #3539]	; 0xdd3
    d6b0:	f89d 1dd3 	ldrb.w	r1, [sp, #3539]	; 0xdd3
    d6b4:	f646 206c 	movw	r0, #27244	; 0x6a6c
    d6b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d6bc:	f003 fb66 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d6c0:	f8cd 0dd4 	str.w	r0, [sp, #3540]	; 0xdd4
    d6c4:	f8dd 0dd4 	ldr.w	r0, [sp, #3540]	; 0xdd4
    d6c8:	f8cd 0644 	str.w	r0, [sp, #1604]	; 0x644
    d6cc:	e00a      	b.n	d6e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xa54>
    d6ce:	f89d 0643 	ldrb.w	r0, [sp, #1603]	; 0x643
    d6d2:	07c0      	lsls	r0, r0, #31
    d6d4:	2800      	cmp	r0, #0
    d6d6:	d112      	bne.n	d6fe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xa6e>
    d6d8:	e055      	b.n	d786 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xaf6>
    d6da:	98e4      	ldr	r0, [sp, #912]	; 0x390
    d6dc:	07c1      	lsls	r1, r0, #31
    d6de:	2900      	cmp	r1, #0
    d6e0:	d1e3      	bne.n	d6aa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xa1a>
    d6e2:	e7de      	b.n	d6a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xa12>
    d6e4:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    d6e8:	f20d 6144 	addw	r1, sp, #1604	; 0x644
    d6ec:	f006 ffa4 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d6f0:	90e3      	str	r0, [sp, #908]	; 0x38c
    d6f2:	e7ff      	b.n	d6f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xa64>
    d6f4:	98e3      	ldr	r0, [sp, #908]	; 0x38c
    d6f6:	07c1      	lsls	r1, r0, #31
    d6f8:	2900      	cmp	r1, #0
    d6fa:	d1ce      	bne.n	d69a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xa0a>
    d6fc:	e7d1      	b.n	d6a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xa12>
                trace!("[{:04x}] SE Vx kk", self.pc);
    d6fe:	f24d 709c 	movw	r0, #55196	; 0xd79c
    d702:	f2c0 0001 	movt	r0, #1
    d706:	6801      	ldr	r1, [r0, #0]
    d708:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d70c:	f100 0212 	add.w	r2, r0, #18
    d710:	f8cd 2668 	str.w	r2, [sp, #1640]	; 0x668
    d714:	f8dd 2668 	ldr.w	r2, [sp, #1640]	; 0x668
    d718:	f8cd 2d70 	str.w	r2, [sp, #3440]	; 0xd70
    d71c:	f646 135b 	movw	r3, #26971	; 0x695b
    d720:	f2c0 0301 	movt	r3, #1
    d724:	4610      	mov	r0, r2
    d726:	91e2      	str	r1, [sp, #904]	; 0x388
    d728:	4619      	mov	r1, r3
    d72a:	f7fd f803 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d72e:	90e1      	str	r0, [sp, #900]	; 0x384
    d730:	91e0      	str	r1, [sp, #896]	; 0x380
    d732:	e7ff      	b.n	d734 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xaa4>
    d734:	98e1      	ldr	r0, [sp, #900]	; 0x384
    d736:	f8cd 0660 	str.w	r0, [sp, #1632]	; 0x660
    d73a:	99e0      	ldr	r1, [sp, #896]	; 0x380
    d73c:	f8cd 1664 	str.w	r1, [sp, #1636]	; 0x664
    d740:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    d744:	f2c0 0201 	movt	r2, #1
    d748:	6812      	ldr	r2, [r2, #0]
    d74a:	466b      	mov	r3, sp
    d74c:	f04f 0c01 	mov.w	ip, #1
    d750:	f8c3 c008 	str.w	ip, [r3, #8]
    d754:	605a      	str	r2, [r3, #4]
    d756:	f8c3 c000 	str.w	ip, [r3]
    d75a:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    d75e:	2202      	movs	r2, #2
    d760:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
    d764:	99e2      	ldr	r1, [sp, #904]	; 0x388
    d766:	f006 fe2c 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d76a:	e7ff      	b.n	d76c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xadc>
    d76c:	f8dd 163c 	ldr.w	r1, [sp, #1596]	; 0x63c
    d770:	f24d 70bc 	movw	r0, #55228	; 0xd7bc
    d774:	f2c0 0001 	movt	r0, #1
    d778:	6802      	ldr	r2, [r0, #0]
    d77a:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    d77e:	f004 fa0b 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d782:	e7ff      	b.n	d784 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xaf4>
    d784:	e7ff      	b.n	d786 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xaf6>
                if self.v[x] == kk {
    d786:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d78a:	280f      	cmp	r0, #15
    d78c:	f202 87ff 	bhi.w	1078e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3afe>
    d790:	e7ff      	b.n	d792 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb02>
    d792:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d796:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d79a:	1842      	adds	r2, r0, r1
    d79c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d7a0:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    d7a4:	fa5f fc83 	uxtb.w	ip, r3
    d7a8:	4562      	cmp	r2, ip
    d7aa:	d106      	bne.n	d7ba <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb2a>
    d7ac:	e7ff      	b.n	d7ae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb1e>
                    self.next();
    d7ae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d7b2:	f003 f855 	bl	10860 <_ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E>
    d7b6:	e7ff      	b.n	d7b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb28>
                if self.v[x] == kk {
    d7b8:	e7ff      	b.n	d7ba <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb2a>
        match (
    d7ba:	f002 bd1f 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    d7be:	2005      	movs	r0, #5
    d7c0:	f8cd 066c 	str.w	r0, [sp, #1644]	; 0x66c
    d7c4:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    d7c8:	f2c0 0001 	movt	r0, #1
    d7cc:	6801      	ldr	r1, [r0, #0]
    d7ce:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    d7d2:	f006 ff31 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d7d6:	90df      	str	r0, [sp, #892]	; 0x37c
    d7d8:	e01f      	b.n	d81a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb8a>
    d7da:	2001      	movs	r0, #1
    d7dc:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    d7e0:	e015      	b.n	d80e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb7e>
    d7e2:	2000      	movs	r0, #0
    d7e4:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    d7e8:	e011      	b.n	d80e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb7e>
    d7ea:	2000      	movs	r0, #0
    d7ec:	f88d 0ddb 	strb.w	r0, [sp, #3547]	; 0xddb
    d7f0:	f89d 1ddb 	ldrb.w	r1, [sp, #3547]	; 0xddb
    d7f4:	f646 206c 	movw	r0, #27244	; 0x6a6c
    d7f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d7fc:	f003 fac6 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d800:	f8cd 0ddc 	str.w	r0, [sp, #3548]	; 0xddc
    d804:	f8dd 0ddc 	ldr.w	r0, [sp, #3548]	; 0xddc
    d808:	f8cd 0674 	str.w	r0, [sp, #1652]	; 0x674
    d80c:	e00a      	b.n	d824 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb94>
    d80e:	f89d 0673 	ldrb.w	r0, [sp, #1651]	; 0x673
    d812:	07c0      	lsls	r0, r0, #31
    d814:	2800      	cmp	r0, #0
    d816:	d112      	bne.n	d83e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xbae>
    d818:	e055      	b.n	d8c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc36>
    d81a:	98df      	ldr	r0, [sp, #892]	; 0x37c
    d81c:	07c1      	lsls	r1, r0, #31
    d81e:	2900      	cmp	r1, #0
    d820:	d1e3      	bne.n	d7ea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb5a>
    d822:	e7de      	b.n	d7e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb52>
    d824:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    d828:	f20d 6174 	addw	r1, sp, #1652	; 0x674
    d82c:	f006 ff04 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d830:	90de      	str	r0, [sp, #888]	; 0x378
    d832:	e7ff      	b.n	d834 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xba4>
    d834:	98de      	ldr	r0, [sp, #888]	; 0x378
    d836:	07c1      	lsls	r1, r0, #31
    d838:	2900      	cmp	r1, #0
    d83a:	d1ce      	bne.n	d7da <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb4a>
    d83c:	e7d1      	b.n	d7e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xb52>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
    d83e:	f24d 704c 	movw	r0, #55116	; 0xd74c
    d842:	f2c0 0001 	movt	r0, #1
    d846:	6801      	ldr	r1, [r0, #0]
    d848:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d84c:	f100 0212 	add.w	r2, r0, #18
    d850:	f8cd 2698 	str.w	r2, [sp, #1688]	; 0x698
    d854:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
    d858:	f8cd 2d6c 	str.w	r2, [sp, #3436]	; 0xd6c
    d85c:	f646 135b 	movw	r3, #26971	; 0x695b
    d860:	f2c0 0301 	movt	r3, #1
    d864:	4610      	mov	r0, r2
    d866:	91dd      	str	r1, [sp, #884]	; 0x374
    d868:	4619      	mov	r1, r3
    d86a:	f7fc ff63 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d86e:	90dc      	str	r0, [sp, #880]	; 0x370
    d870:	91db      	str	r1, [sp, #876]	; 0x36c
    d872:	e7ff      	b.n	d874 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xbe4>
    d874:	98dc      	ldr	r0, [sp, #880]	; 0x370
    d876:	f8cd 0690 	str.w	r0, [sp, #1680]	; 0x690
    d87a:	99db      	ldr	r1, [sp, #876]	; 0x36c
    d87c:	f8cd 1694 	str.w	r1, [sp, #1684]	; 0x694
    d880:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    d884:	f2c0 0201 	movt	r2, #1
    d888:	6812      	ldr	r2, [r2, #0]
    d88a:	466b      	mov	r3, sp
    d88c:	f04f 0c01 	mov.w	ip, #1
    d890:	f8c3 c008 	str.w	ip, [r3, #8]
    d894:	605a      	str	r2, [r3, #4]
    d896:	f8c3 c000 	str.w	ip, [r3]
    d89a:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    d89e:	2202      	movs	r2, #2
    d8a0:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
    d8a4:	99dd      	ldr	r1, [sp, #884]	; 0x374
    d8a6:	f006 fd8c 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d8aa:	e7ff      	b.n	d8ac <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc1c>
    d8ac:	f8dd 166c 	ldr.w	r1, [sp, #1644]	; 0x66c
    d8b0:	f24d 706c 	movw	r0, #55148	; 0xd76c
    d8b4:	f2c0 0001 	movt	r0, #1
    d8b8:	6802      	ldr	r2, [r0, #0]
    d8ba:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    d8be:	f004 f96b 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d8c2:	e7ff      	b.n	d8c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc34>
    d8c4:	e7ff      	b.n	d8c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc36>
                if self.v[x] != kk {
    d8c6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d8ca:	280f      	cmp	r0, #15
    d8cc:	f202 8755 	bhi.w	1077a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3aea>
    d8d0:	e7ff      	b.n	d8d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc42>
    d8d2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d8d6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d8da:	1842      	adds	r2, r0, r1
    d8dc:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d8e0:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    d8e4:	fa5f fc83 	uxtb.w	ip, r3
    d8e8:	4562      	cmp	r2, ip
    d8ea:	d006      	beq.n	d8fa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc6a>
    d8ec:	e7ff      	b.n	d8ee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc5e>
                    self.next();
    d8ee:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d8f2:	f002 ffb5 	bl	10860 <_ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E>
    d8f6:	e7ff      	b.n	d8f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc68>
                if self.v[x] != kk {
    d8f8:	e7ff      	b.n	d8fa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc6a>
        match (
    d8fa:	f002 bc7f 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    d8fe:	2005      	movs	r0, #5
    d900:	f8cd 069c 	str.w	r0, [sp, #1692]	; 0x69c
    d904:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    d908:	f2c0 0001 	movt	r0, #1
    d90c:	6801      	ldr	r1, [r0, #0]
    d90e:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    d912:	f006 fe91 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d916:	90da      	str	r0, [sp, #872]	; 0x368
    d918:	e01f      	b.n	d95a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xcca>
    d91a:	2001      	movs	r0, #1
    d91c:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    d920:	e015      	b.n	d94e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xcbe>
    d922:	2000      	movs	r0, #0
    d924:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    d928:	e011      	b.n	d94e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xcbe>
    d92a:	2000      	movs	r0, #0
    d92c:	f88d 0de3 	strb.w	r0, [sp, #3555]	; 0xde3
    d930:	f89d 1de3 	ldrb.w	r1, [sp, #3555]	; 0xde3
    d934:	f646 206c 	movw	r0, #27244	; 0x6a6c
    d938:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d93c:	f003 fa26 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d940:	f8cd 0de4 	str.w	r0, [sp, #3556]	; 0xde4
    d944:	f8dd 0de4 	ldr.w	r0, [sp, #3556]	; 0xde4
    d948:	f8cd 06a4 	str.w	r0, [sp, #1700]	; 0x6a4
    d94c:	e00a      	b.n	d964 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xcd4>
    d94e:	f89d 06a3 	ldrb.w	r0, [sp, #1699]	; 0x6a3
    d952:	07c0      	lsls	r0, r0, #31
    d954:	2800      	cmp	r0, #0
    d956:	d112      	bne.n	d97e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xcee>
    d958:	e055      	b.n	da06 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xd76>
    d95a:	98da      	ldr	r0, [sp, #872]	; 0x368
    d95c:	07c1      	lsls	r1, r0, #31
    d95e:	2900      	cmp	r1, #0
    d960:	d1e3      	bne.n	d92a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc9a>
    d962:	e7de      	b.n	d922 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc92>
    d964:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    d968:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
    d96c:	f006 fe64 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d970:	90d9      	str	r0, [sp, #868]	; 0x364
    d972:	e7ff      	b.n	d974 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xce4>
    d974:	98d9      	ldr	r0, [sp, #868]	; 0x364
    d976:	07c1      	lsls	r1, r0, #31
    d978:	2900      	cmp	r1, #0
    d97a:	d1ce      	bne.n	d91a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc8a>
    d97c:	e7d1      	b.n	d922 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xc92>
                trace!("[{:04x}] SE Vx, Vy", self.pc);
    d97e:	f24d 60ec 	movw	r0, #55020	; 0xd6ec
    d982:	f2c0 0001 	movt	r0, #1
    d986:	6801      	ldr	r1, [r0, #0]
    d988:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d98c:	f100 0212 	add.w	r2, r0, #18
    d990:	f8cd 26c8 	str.w	r2, [sp, #1736]	; 0x6c8
    d994:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
    d998:	f8cd 2d68 	str.w	r2, [sp, #3432]	; 0xd68
    d99c:	f646 135b 	movw	r3, #26971	; 0x695b
    d9a0:	f2c0 0301 	movt	r3, #1
    d9a4:	4610      	mov	r0, r2
    d9a6:	91d8      	str	r1, [sp, #864]	; 0x360
    d9a8:	4619      	mov	r1, r3
    d9aa:	f7fc fec3 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d9ae:	90d7      	str	r0, [sp, #860]	; 0x35c
    d9b0:	91d6      	str	r1, [sp, #856]	; 0x358
    d9b2:	e7ff      	b.n	d9b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xd24>
    d9b4:	98d7      	ldr	r0, [sp, #860]	; 0x35c
    d9b6:	f8cd 06c0 	str.w	r0, [sp, #1728]	; 0x6c0
    d9ba:	99d6      	ldr	r1, [sp, #856]	; 0x358
    d9bc:	f8cd 16c4 	str.w	r1, [sp, #1732]	; 0x6c4
    d9c0:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    d9c4:	f2c0 0201 	movt	r2, #1
    d9c8:	6812      	ldr	r2, [r2, #0]
    d9ca:	466b      	mov	r3, sp
    d9cc:	f04f 0c01 	mov.w	ip, #1
    d9d0:	f8c3 c008 	str.w	ip, [r3, #8]
    d9d4:	605a      	str	r2, [r3, #4]
    d9d6:	f8c3 c000 	str.w	ip, [r3]
    d9da:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    d9de:	2202      	movs	r2, #2
    d9e0:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
    d9e4:	99d8      	ldr	r1, [sp, #864]	; 0x360
    d9e6:	f006 fcec 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d9ea:	e7ff      	b.n	d9ec <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xd5c>
    d9ec:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
    d9f0:	f24d 700c 	movw	r0, #55052	; 0xd70c
    d9f4:	f2c0 0001 	movt	r0, #1
    d9f8:	6802      	ldr	r2, [r0, #0]
    d9fa:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    d9fe:	f004 f8cb 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    da02:	e7ff      	b.n	da04 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xd74>
    da04:	e7ff      	b.n	da06 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xd76>
                if self.v[x] == self.v[y] {
    da06:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    da0a:	280f      	cmp	r0, #15
    da0c:	f202 86a1 	bhi.w	10752 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3ac2>
    da10:	e7ff      	b.n	da12 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xd82>
    da12:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    da16:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    da1a:	1842      	adds	r2, r0, r1
    da1c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    da20:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    da24:	2b0f      	cmp	r3, #15
    da26:	92d5      	str	r2, [sp, #852]	; 0x354
    da28:	f202 869d 	bhi.w	10766 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3ad6>
    da2c:	e7ff      	b.n	da2e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xd9e>
    da2e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    da32:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    da36:	1842      	adds	r2, r0, r1
    da38:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    da3c:	9bd5      	ldr	r3, [sp, #852]	; 0x354
    da3e:	fa5f fc83 	uxtb.w	ip, r3
    da42:	4594      	cmp	ip, r2
    da44:	d106      	bne.n	da54 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xdc4>
    da46:	e7ff      	b.n	da48 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xdb8>
                    self.next();
    da48:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    da4c:	f002 ff08 	bl	10860 <_ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E>
    da50:	e7ff      	b.n	da52 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xdc2>
                if self.v[x] == self.v[y] {
    da52:	e7ff      	b.n	da54 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xdc4>
        match (
    da54:	f002 bbd2 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    da58:	2005      	movs	r0, #5
    da5a:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
    da5e:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    da62:	f2c0 0001 	movt	r0, #1
    da66:	6801      	ldr	r1, [r0, #0]
    da68:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    da6c:	f006 fde4 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    da70:	90d4      	str	r0, [sp, #848]	; 0x350
    da72:	e01f      	b.n	dab4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xe24>
    da74:	2001      	movs	r0, #1
    da76:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    da7a:	e015      	b.n	daa8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xe18>
    da7c:	2000      	movs	r0, #0
    da7e:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    da82:	e011      	b.n	daa8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xe18>
    da84:	2000      	movs	r0, #0
    da86:	f88d 0deb 	strb.w	r0, [sp, #3563]	; 0xdeb
    da8a:	f89d 1deb 	ldrb.w	r1, [sp, #3563]	; 0xdeb
    da8e:	f646 206c 	movw	r0, #27244	; 0x6a6c
    da92:	f2c2 0000 	movt	r0, #8192	; 0x2000
    da96:	f003 f979 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    da9a:	f8cd 0dec 	str.w	r0, [sp, #3564]	; 0xdec
    da9e:	f8dd 0dec 	ldr.w	r0, [sp, #3564]	; 0xdec
    daa2:	f8cd 06d4 	str.w	r0, [sp, #1748]	; 0x6d4
    daa6:	e00a      	b.n	dabe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xe2e>
    daa8:	f89d 06d3 	ldrb.w	r0, [sp, #1747]	; 0x6d3
    daac:	07c0      	lsls	r0, r0, #31
    daae:	2800      	cmp	r0, #0
    dab0:	d112      	bne.n	dad8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xe48>
    dab2:	e055      	b.n	db60 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xed0>
    dab4:	98d4      	ldr	r0, [sp, #848]	; 0x350
    dab6:	07c1      	lsls	r1, r0, #31
    dab8:	2900      	cmp	r1, #0
    daba:	d1e3      	bne.n	da84 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xdf4>
    dabc:	e7de      	b.n	da7c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xdec>
    dabe:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    dac2:	f20d 61d4 	addw	r1, sp, #1748	; 0x6d4
    dac6:	f006 fdb7 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    daca:	90d3      	str	r0, [sp, #844]	; 0x34c
    dacc:	e7ff      	b.n	dace <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xe3e>
    dace:	98d3      	ldr	r0, [sp, #844]	; 0x34c
    dad0:	07c1      	lsls	r1, r0, #31
    dad2:	2900      	cmp	r1, #0
    dad4:	d1ce      	bne.n	da74 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xde4>
    dad6:	e7d1      	b.n	da7c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xdec>
                trace!("[{:04x}] LD Vx, kk", self.pc);
    dad8:	f24d 6004 	movw	r0, #54788	; 0xd604
    dadc:	f2c0 0001 	movt	r0, #1
    dae0:	6801      	ldr	r1, [r0, #0]
    dae2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dae6:	f100 0212 	add.w	r2, r0, #18
    daea:	f8cd 26f8 	str.w	r2, [sp, #1784]	; 0x6f8
    daee:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
    daf2:	f8cd 2d5c 	str.w	r2, [sp, #3420]	; 0xd5c
    daf6:	f646 135b 	movw	r3, #26971	; 0x695b
    dafa:	f2c0 0301 	movt	r3, #1
    dafe:	4610      	mov	r0, r2
    db00:	91d2      	str	r1, [sp, #840]	; 0x348
    db02:	4619      	mov	r1, r3
    db04:	f7fc fe16 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    db08:	90d1      	str	r0, [sp, #836]	; 0x344
    db0a:	91d0      	str	r1, [sp, #832]	; 0x340
    db0c:	e7ff      	b.n	db0e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xe7e>
    db0e:	98d1      	ldr	r0, [sp, #836]	; 0x344
    db10:	f8cd 06f0 	str.w	r0, [sp, #1776]	; 0x6f0
    db14:	99d0      	ldr	r1, [sp, #832]	; 0x340
    db16:	f8cd 16f4 	str.w	r1, [sp, #1780]	; 0x6f4
    db1a:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    db1e:	f2c0 0201 	movt	r2, #1
    db22:	6812      	ldr	r2, [r2, #0]
    db24:	466b      	mov	r3, sp
    db26:	f04f 0c01 	mov.w	ip, #1
    db2a:	f8c3 c008 	str.w	ip, [r3, #8]
    db2e:	605a      	str	r2, [r3, #4]
    db30:	f8c3 c000 	str.w	ip, [r3]
    db34:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    db38:	2202      	movs	r2, #2
    db3a:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
    db3e:	99d2      	ldr	r1, [sp, #840]	; 0x348
    db40:	f006 fc3f 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    db44:	e7ff      	b.n	db46 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xeb6>
    db46:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
    db4a:	f24d 6024 	movw	r0, #54820	; 0xd624
    db4e:	f2c0 0001 	movt	r0, #1
    db52:	6802      	ldr	r2, [r0, #0]
    db54:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    db58:	f004 f81e 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    db5c:	e7ff      	b.n	db5e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xece>
    db5e:	e7ff      	b.n	db60 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xed0>
                self.v[x] = kk;
    db60:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    db64:	280f      	cmp	r0, #15
    db66:	f202 85ea 	bhi.w	1073e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3aae>
    db6a:	e7ff      	b.n	db6c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xedc>
    db6c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    db70:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    db74:	1842      	adds	r2, r0, r1
    db76:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    db7a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    db7e:	f002 bb3d 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    db82:	2005      	movs	r0, #5
    db84:	f8cd 06fc 	str.w	r0, [sp, #1788]	; 0x6fc
    db88:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    db8c:	f2c0 0001 	movt	r0, #1
    db90:	6801      	ldr	r1, [r0, #0]
    db92:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    db96:	f006 fd4f 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    db9a:	90cf      	str	r0, [sp, #828]	; 0x33c
    db9c:	e01f      	b.n	dbde <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xf4e>
    db9e:	2001      	movs	r0, #1
    dba0:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    dba4:	e015      	b.n	dbd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xf42>
    dba6:	2000      	movs	r0, #0
    dba8:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    dbac:	e011      	b.n	dbd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xf42>
    dbae:	2000      	movs	r0, #0
    dbb0:	f88d 0df3 	strb.w	r0, [sp, #3571]	; 0xdf3
    dbb4:	f89d 1df3 	ldrb.w	r1, [sp, #3571]	; 0xdf3
    dbb8:	f646 206c 	movw	r0, #27244	; 0x6a6c
    dbbc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dbc0:	f003 f8e4 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dbc4:	f8cd 0df4 	str.w	r0, [sp, #3572]	; 0xdf4
    dbc8:	f8dd 0df4 	ldr.w	r0, [sp, #3572]	; 0xdf4
    dbcc:	f8cd 0704 	str.w	r0, [sp, #1796]	; 0x704
    dbd0:	e00a      	b.n	dbe8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xf58>
    dbd2:	f89d 0703 	ldrb.w	r0, [sp, #1795]	; 0x703
    dbd6:	07c0      	lsls	r0, r0, #31
    dbd8:	2800      	cmp	r0, #0
    dbda:	d112      	bne.n	dc02 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xf72>
    dbdc:	e055      	b.n	dc8a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xffa>
    dbde:	98cf      	ldr	r0, [sp, #828]	; 0x33c
    dbe0:	07c1      	lsls	r1, r0, #31
    dbe2:	2900      	cmp	r1, #0
    dbe4:	d1e3      	bne.n	dbae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xf1e>
    dbe6:	e7de      	b.n	dba6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xf16>
    dbe8:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    dbec:	f20d 7104 	addw	r1, sp, #1796	; 0x704
    dbf0:	f006 fd22 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dbf4:	90ce      	str	r0, [sp, #824]	; 0x338
    dbf6:	e7ff      	b.n	dbf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xf68>
    dbf8:	98ce      	ldr	r0, [sp, #824]	; 0x338
    dbfa:	07c1      	lsls	r1, r0, #31
    dbfc:	2900      	cmp	r1, #0
    dbfe:	d1ce      	bne.n	db9e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xf0e>
    dc00:	e7d1      	b.n	dba6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xf16>
                trace!("[{:04x}] ADD Vx, kk", self.pc);
    dc02:	f24d 50a4 	movw	r0, #54692	; 0xd5a4
    dc06:	f2c0 0001 	movt	r0, #1
    dc0a:	6801      	ldr	r1, [r0, #0]
    dc0c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dc10:	f100 0212 	add.w	r2, r0, #18
    dc14:	f8cd 2728 	str.w	r2, [sp, #1832]	; 0x728
    dc18:	f8dd 2728 	ldr.w	r2, [sp, #1832]	; 0x728
    dc1c:	f8cd 2d58 	str.w	r2, [sp, #3416]	; 0xd58
    dc20:	f646 135b 	movw	r3, #26971	; 0x695b
    dc24:	f2c0 0301 	movt	r3, #1
    dc28:	4610      	mov	r0, r2
    dc2a:	91cd      	str	r1, [sp, #820]	; 0x334
    dc2c:	4619      	mov	r1, r3
    dc2e:	f7fc fd81 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dc32:	90cc      	str	r0, [sp, #816]	; 0x330
    dc34:	91cb      	str	r1, [sp, #812]	; 0x32c
    dc36:	e7ff      	b.n	dc38 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xfa8>
    dc38:	98cc      	ldr	r0, [sp, #816]	; 0x330
    dc3a:	f8cd 0720 	str.w	r0, [sp, #1824]	; 0x720
    dc3e:	99cb      	ldr	r1, [sp, #812]	; 0x32c
    dc40:	f8cd 1724 	str.w	r1, [sp, #1828]	; 0x724
    dc44:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    dc48:	f2c0 0201 	movt	r2, #1
    dc4c:	6812      	ldr	r2, [r2, #0]
    dc4e:	466b      	mov	r3, sp
    dc50:	f04f 0c01 	mov.w	ip, #1
    dc54:	f8c3 c008 	str.w	ip, [r3, #8]
    dc58:	605a      	str	r2, [r3, #4]
    dc5a:	f8c3 c000 	str.w	ip, [r3]
    dc5e:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    dc62:	2202      	movs	r2, #2
    dc64:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
    dc68:	99cd      	ldr	r1, [sp, #820]	; 0x334
    dc6a:	f006 fbaa 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    dc6e:	e7ff      	b.n	dc70 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xfe0>
    dc70:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
    dc74:	f24d 50c4 	movw	r0, #54724	; 0xd5c4
    dc78:	f2c0 0001 	movt	r0, #1
    dc7c:	6802      	ldr	r2, [r0, #0]
    dc7e:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    dc82:	f003 ff89 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dc86:	e7ff      	b.n	dc88 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xff8>
    dc88:	e7ff      	b.n	dc8a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0xffa>
                self.v[x] = self.v[x].wrapping_add(kk);
    dc8a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dc8e:	280f      	cmp	r0, #15
    dc90:	f202 8541 	bhi.w	10716 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3a86>
    dc94:	e7ff      	b.n	dc96 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1006>
    dc96:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dc9a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dc9e:	1842      	adds	r2, r0, r1
    dca0:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    dca4:	f8dd 145c 	ldr.w	r1, [sp, #1116]	; 0x45c
    dca8:	f006 fbef 	bl	1448a <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>
    dcac:	90ca      	str	r0, [sp, #808]	; 0x328
    dcae:	e7ff      	b.n	dcb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1020>
    dcb0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dcb4:	280f      	cmp	r0, #15
    dcb6:	f202 8538 	bhi.w	1072a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3a9a>
    dcba:	e7ff      	b.n	dcbc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x102c>
    dcbc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dcc0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dcc4:	1842      	adds	r2, r0, r1
    dcc6:	9bca      	ldr	r3, [sp, #808]	; 0x328
    dcc8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    dccc:	f002 ba96 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    dcd0:	2005      	movs	r0, #5
    dcd2:	f8cd 072c 	str.w	r0, [sp, #1836]	; 0x72c
    dcd6:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    dcda:	f2c0 0001 	movt	r0, #1
    dcde:	6801      	ldr	r1, [r0, #0]
    dce0:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    dce4:	f006 fca8 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dce8:	90c9      	str	r0, [sp, #804]	; 0x324
    dcea:	e01f      	b.n	dd2c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x109c>
    dcec:	2001      	movs	r0, #1
    dcee:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    dcf2:	e015      	b.n	dd20 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1090>
    dcf4:	2000      	movs	r0, #0
    dcf6:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    dcfa:	e011      	b.n	dd20 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1090>
    dcfc:	2000      	movs	r0, #0
    dcfe:	f88d 0dfb 	strb.w	r0, [sp, #3579]	; 0xdfb
    dd02:	f89d 1dfb 	ldrb.w	r1, [sp, #3579]	; 0xdfb
    dd06:	f646 206c 	movw	r0, #27244	; 0x6a6c
    dd0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dd0e:	f003 f83d 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dd12:	f8cd 0dfc 	str.w	r0, [sp, #3580]	; 0xdfc
    dd16:	f8dd 0dfc 	ldr.w	r0, [sp, #3580]	; 0xdfc
    dd1a:	f8cd 0734 	str.w	r0, [sp, #1844]	; 0x734
    dd1e:	e00a      	b.n	dd36 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x10a6>
    dd20:	f89d 0733 	ldrb.w	r0, [sp, #1843]	; 0x733
    dd24:	07c0      	lsls	r0, r0, #31
    dd26:	2800      	cmp	r0, #0
    dd28:	d112      	bne.n	dd50 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x10c0>
    dd2a:	e055      	b.n	ddd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1148>
    dd2c:	98c9      	ldr	r0, [sp, #804]	; 0x324
    dd2e:	07c1      	lsls	r1, r0, #31
    dd30:	2900      	cmp	r1, #0
    dd32:	d1e3      	bne.n	dcfc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x106c>
    dd34:	e7de      	b.n	dcf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1064>
    dd36:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    dd3a:	f20d 7134 	addw	r1, sp, #1844	; 0x734
    dd3e:	f006 fc7b 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dd42:	90c8      	str	r0, [sp, #800]	; 0x320
    dd44:	e7ff      	b.n	dd46 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x10b6>
    dd46:	98c8      	ldr	r0, [sp, #800]	; 0x320
    dd48:	07c1      	lsls	r1, r0, #31
    dd4a:	2900      	cmp	r1, #0
    dd4c:	d1ce      	bne.n	dcec <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x105c>
    dd4e:	e7d1      	b.n	dcf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1064>
                trace!("[{:04x}] LD Vx, Vy", self.pc);
    dd50:	f24d 5044 	movw	r0, #54596	; 0xd544
    dd54:	f2c0 0001 	movt	r0, #1
    dd58:	6801      	ldr	r1, [r0, #0]
    dd5a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dd5e:	f100 0212 	add.w	r2, r0, #18
    dd62:	f8cd 2758 	str.w	r2, [sp, #1880]	; 0x758
    dd66:	f8dd 2758 	ldr.w	r2, [sp, #1880]	; 0x758
    dd6a:	f8cd 2d54 	str.w	r2, [sp, #3412]	; 0xd54
    dd6e:	f646 135b 	movw	r3, #26971	; 0x695b
    dd72:	f2c0 0301 	movt	r3, #1
    dd76:	4610      	mov	r0, r2
    dd78:	91c7      	str	r1, [sp, #796]	; 0x31c
    dd7a:	4619      	mov	r1, r3
    dd7c:	f7fc fcda 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dd80:	90c6      	str	r0, [sp, #792]	; 0x318
    dd82:	91c5      	str	r1, [sp, #788]	; 0x314
    dd84:	e7ff      	b.n	dd86 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x10f6>
    dd86:	98c6      	ldr	r0, [sp, #792]	; 0x318
    dd88:	f8cd 0750 	str.w	r0, [sp, #1872]	; 0x750
    dd8c:	99c5      	ldr	r1, [sp, #788]	; 0x314
    dd8e:	f8cd 1754 	str.w	r1, [sp, #1876]	; 0x754
    dd92:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    dd96:	f2c0 0201 	movt	r2, #1
    dd9a:	6812      	ldr	r2, [r2, #0]
    dd9c:	466b      	mov	r3, sp
    dd9e:	f04f 0c01 	mov.w	ip, #1
    dda2:	f8c3 c008 	str.w	ip, [r3, #8]
    dda6:	605a      	str	r2, [r3, #4]
    dda8:	f8c3 c000 	str.w	ip, [r3]
    ddac:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    ddb0:	2202      	movs	r2, #2
    ddb2:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
    ddb6:	99c7      	ldr	r1, [sp, #796]	; 0x31c
    ddb8:	f006 fb03 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ddbc:	e7ff      	b.n	ddbe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x112e>
    ddbe:	f8dd 172c 	ldr.w	r1, [sp, #1836]	; 0x72c
    ddc2:	f24d 5064 	movw	r0, #54628	; 0xd564
    ddc6:	f2c0 0001 	movt	r0, #1
    ddca:	6802      	ldr	r2, [r0, #0]
    ddcc:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    ddd0:	f003 fee2 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ddd4:	e7ff      	b.n	ddd6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1146>
    ddd6:	e7ff      	b.n	ddd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1148>
                self.v[x] = self.v[y];
    ddd8:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    dddc:	280f      	cmp	r0, #15
    ddde:	f202 8486 	bhi.w	106ee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3a5e>
    dde2:	e7ff      	b.n	dde4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1154>
    dde4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dde8:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ddec:	1842      	adds	r2, r0, r1
    ddee:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ddf2:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    ddf6:	2b0f      	cmp	r3, #15
    ddf8:	92c4      	str	r2, [sp, #784]	; 0x310
    ddfa:	f202 8482 	bhi.w	10702 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3a72>
    ddfe:	e7ff      	b.n	de00 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1170>
    de00:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    de04:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    de08:	1842      	adds	r2, r0, r1
    de0a:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    de0c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    de10:	f002 b9f4 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    de14:	2005      	movs	r0, #5
    de16:	f8cd 075c 	str.w	r0, [sp, #1884]	; 0x75c
    de1a:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    de1e:	f2c0 0001 	movt	r0, #1
    de22:	6801      	ldr	r1, [r0, #0]
    de24:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    de28:	f006 fc06 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    de2c:	90c3      	str	r0, [sp, #780]	; 0x30c
    de2e:	e01f      	b.n	de70 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x11e0>
    de30:	2001      	movs	r0, #1
    de32:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    de36:	e015      	b.n	de64 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x11d4>
    de38:	2000      	movs	r0, #0
    de3a:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    de3e:	e011      	b.n	de64 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x11d4>
    de40:	2000      	movs	r0, #0
    de42:	f88d 0e03 	strb.w	r0, [sp, #3587]	; 0xe03
    de46:	f89d 1e03 	ldrb.w	r1, [sp, #3587]	; 0xe03
    de4a:	f646 206c 	movw	r0, #27244	; 0x6a6c
    de4e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    de52:	f002 ff9b 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    de56:	f8cd 0e04 	str.w	r0, [sp, #3588]	; 0xe04
    de5a:	f8dd 0e04 	ldr.w	r0, [sp, #3588]	; 0xe04
    de5e:	f8cd 0764 	str.w	r0, [sp, #1892]	; 0x764
    de62:	e00a      	b.n	de7a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x11ea>
    de64:	f89d 0763 	ldrb.w	r0, [sp, #1891]	; 0x763
    de68:	07c0      	lsls	r0, r0, #31
    de6a:	2800      	cmp	r0, #0
    de6c:	d112      	bne.n	de94 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1204>
    de6e:	e055      	b.n	df1c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x128c>
    de70:	98c3      	ldr	r0, [sp, #780]	; 0x30c
    de72:	07c1      	lsls	r1, r0, #31
    de74:	2900      	cmp	r1, #0
    de76:	d1e3      	bne.n	de40 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x11b0>
    de78:	e7de      	b.n	de38 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x11a8>
    de7a:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    de7e:	f20d 7164 	addw	r1, sp, #1892	; 0x764
    de82:	f006 fbd9 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    de86:	90c2      	str	r0, [sp, #776]	; 0x308
    de88:	e7ff      	b.n	de8a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x11fa>
    de8a:	98c2      	ldr	r0, [sp, #776]	; 0x308
    de8c:	07c1      	lsls	r1, r0, #31
    de8e:	2900      	cmp	r1, #0
    de90:	d1ce      	bne.n	de30 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x11a0>
    de92:	e7d1      	b.n	de38 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x11a8>
                trace!("[{:04x}] OR Vx, Vy", self.pc);
    de94:	f24d 40e4 	movw	r0, #54500	; 0xd4e4
    de98:	f2c0 0001 	movt	r0, #1
    de9c:	6801      	ldr	r1, [r0, #0]
    de9e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dea2:	f100 0212 	add.w	r2, r0, #18
    dea6:	f8cd 2788 	str.w	r2, [sp, #1928]	; 0x788
    deaa:	f8dd 2788 	ldr.w	r2, [sp, #1928]	; 0x788
    deae:	f8cd 2d50 	str.w	r2, [sp, #3408]	; 0xd50
    deb2:	f646 135b 	movw	r3, #26971	; 0x695b
    deb6:	f2c0 0301 	movt	r3, #1
    deba:	4610      	mov	r0, r2
    debc:	91c1      	str	r1, [sp, #772]	; 0x304
    debe:	4619      	mov	r1, r3
    dec0:	f7fc fc38 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dec4:	90c0      	str	r0, [sp, #768]	; 0x300
    dec6:	91bf      	str	r1, [sp, #764]	; 0x2fc
    dec8:	e7ff      	b.n	deca <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x123a>
    deca:	98c0      	ldr	r0, [sp, #768]	; 0x300
    decc:	f8cd 0780 	str.w	r0, [sp, #1920]	; 0x780
    ded0:	99bf      	ldr	r1, [sp, #764]	; 0x2fc
    ded2:	f8cd 1784 	str.w	r1, [sp, #1924]	; 0x784
    ded6:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    deda:	f2c0 0201 	movt	r2, #1
    dede:	6812      	ldr	r2, [r2, #0]
    dee0:	466b      	mov	r3, sp
    dee2:	f04f 0c01 	mov.w	ip, #1
    dee6:	f8c3 c008 	str.w	ip, [r3, #8]
    deea:	605a      	str	r2, [r3, #4]
    deec:	f8c3 c000 	str.w	ip, [r3]
    def0:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    def4:	2202      	movs	r2, #2
    def6:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
    defa:	99c1      	ldr	r1, [sp, #772]	; 0x304
    defc:	f006 fa61 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    df00:	e7ff      	b.n	df02 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1272>
    df02:	f8dd 175c 	ldr.w	r1, [sp, #1884]	; 0x75c
    df06:	f24d 5004 	movw	r0, #54532	; 0xd504
    df0a:	f2c0 0001 	movt	r0, #1
    df0e:	6802      	ldr	r2, [r0, #0]
    df10:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    df14:	f003 fe40 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    df18:	e7ff      	b.n	df1a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x128a>
    df1a:	e7ff      	b.n	df1c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x128c>
                self.v[x] |= self.v[y];
    df1c:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    df20:	280f      	cmp	r0, #15
    df22:	f202 83d0 	bhi.w	106c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3a36>
    df26:	e7ff      	b.n	df28 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1298>
    df28:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df2c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    df30:	1842      	adds	r2, r0, r1
    df32:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    df36:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    df3a:	2b0f      	cmp	r3, #15
    df3c:	92be      	str	r2, [sp, #760]	; 0x2f8
    df3e:	f202 83cc 	bhi.w	106da <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3a4a>
    df42:	e7ff      	b.n	df44 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x12b4>
    df44:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df48:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    df4c:	1842      	adds	r2, r0, r1
    df4e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    df52:	f8dd c2f8 	ldr.w	ip, [sp, #760]	; 0x2f8
    df56:	ea43 030c 	orr.w	r3, r3, ip
    df5a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    df5e:	f002 b94d 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    df62:	2005      	movs	r0, #5
    df64:	f8cd 078c 	str.w	r0, [sp, #1932]	; 0x78c
    df68:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    df6c:	f2c0 0001 	movt	r0, #1
    df70:	6801      	ldr	r1, [r0, #0]
    df72:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    df76:	f006 fb5f 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    df7a:	90bd      	str	r0, [sp, #756]	; 0x2f4
    df7c:	e01f      	b.n	dfbe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x132e>
    df7e:	2001      	movs	r0, #1
    df80:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    df84:	e015      	b.n	dfb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1322>
    df86:	2000      	movs	r0, #0
    df88:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    df8c:	e011      	b.n	dfb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1322>
    df8e:	2000      	movs	r0, #0
    df90:	f88d 0e0b 	strb.w	r0, [sp, #3595]	; 0xe0b
    df94:	f89d 1e0b 	ldrb.w	r1, [sp, #3595]	; 0xe0b
    df98:	f646 206c 	movw	r0, #27244	; 0x6a6c
    df9c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dfa0:	f002 fef4 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dfa4:	f8cd 0e0c 	str.w	r0, [sp, #3596]	; 0xe0c
    dfa8:	f8dd 0e0c 	ldr.w	r0, [sp, #3596]	; 0xe0c
    dfac:	f8cd 0794 	str.w	r0, [sp, #1940]	; 0x794
    dfb0:	e00a      	b.n	dfc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1338>
    dfb2:	f89d 0793 	ldrb.w	r0, [sp, #1939]	; 0x793
    dfb6:	07c0      	lsls	r0, r0, #31
    dfb8:	2800      	cmp	r0, #0
    dfba:	d112      	bne.n	dfe2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1352>
    dfbc:	e055      	b.n	e06a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x13da>
    dfbe:	98bd      	ldr	r0, [sp, #756]	; 0x2f4
    dfc0:	07c1      	lsls	r1, r0, #31
    dfc2:	2900      	cmp	r1, #0
    dfc4:	d1e3      	bne.n	df8e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x12fe>
    dfc6:	e7de      	b.n	df86 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x12f6>
    dfc8:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    dfcc:	f20d 7194 	addw	r1, sp, #1940	; 0x794
    dfd0:	f006 fb32 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dfd4:	90bc      	str	r0, [sp, #752]	; 0x2f0
    dfd6:	e7ff      	b.n	dfd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1348>
    dfd8:	98bc      	ldr	r0, [sp, #752]	; 0x2f0
    dfda:	07c1      	lsls	r1, r0, #31
    dfdc:	2900      	cmp	r1, #0
    dfde:	d1ce      	bne.n	df7e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x12ee>
    dfe0:	e7d1      	b.n	df86 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x12f6>
                trace!("[{:04x}] AND Vx, Vy", self.pc);
    dfe2:	f24d 4084 	movw	r0, #54404	; 0xd484
    dfe6:	f2c0 0001 	movt	r0, #1
    dfea:	6801      	ldr	r1, [r0, #0]
    dfec:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dff0:	f100 0212 	add.w	r2, r0, #18
    dff4:	f8cd 27b8 	str.w	r2, [sp, #1976]	; 0x7b8
    dff8:	f8dd 27b8 	ldr.w	r2, [sp, #1976]	; 0x7b8
    dffc:	f8cd 2d4c 	str.w	r2, [sp, #3404]	; 0xd4c
    e000:	f646 135b 	movw	r3, #26971	; 0x695b
    e004:	f2c0 0301 	movt	r3, #1
    e008:	4610      	mov	r0, r2
    e00a:	91bb      	str	r1, [sp, #748]	; 0x2ec
    e00c:	4619      	mov	r1, r3
    e00e:	f7fc fb91 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e012:	90ba      	str	r0, [sp, #744]	; 0x2e8
    e014:	91b9      	str	r1, [sp, #740]	; 0x2e4
    e016:	e7ff      	b.n	e018 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1388>
    e018:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
    e01a:	f8cd 07b0 	str.w	r0, [sp, #1968]	; 0x7b0
    e01e:	99b9      	ldr	r1, [sp, #740]	; 0x2e4
    e020:	f8cd 17b4 	str.w	r1, [sp, #1972]	; 0x7b4
    e024:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    e028:	f2c0 0201 	movt	r2, #1
    e02c:	6812      	ldr	r2, [r2, #0]
    e02e:	466b      	mov	r3, sp
    e030:	f04f 0c01 	mov.w	ip, #1
    e034:	f8c3 c008 	str.w	ip, [r3, #8]
    e038:	605a      	str	r2, [r3, #4]
    e03a:	f8c3 c000 	str.w	ip, [r3]
    e03e:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    e042:	2202      	movs	r2, #2
    e044:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
    e048:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
    e04a:	f006 f9ba 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e04e:	e7ff      	b.n	e050 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x13c0>
    e050:	f8dd 178c 	ldr.w	r1, [sp, #1932]	; 0x78c
    e054:	f24d 40a4 	movw	r0, #54436	; 0xd4a4
    e058:	f2c0 0001 	movt	r0, #1
    e05c:	6802      	ldr	r2, [r0, #0]
    e05e:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    e062:	f003 fd99 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e066:	e7ff      	b.n	e068 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x13d8>
    e068:	e7ff      	b.n	e06a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x13da>
                self.v[x] &= self.v[y];
    e06a:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e06e:	280f      	cmp	r0, #15
    e070:	f202 8315 	bhi.w	1069e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3a0e>
    e074:	e7ff      	b.n	e076 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x13e6>
    e076:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e07a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e07e:	1842      	adds	r2, r0, r1
    e080:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e084:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e088:	2b0f      	cmp	r3, #15
    e08a:	92b8      	str	r2, [sp, #736]	; 0x2e0
    e08c:	f202 8311 	bhi.w	106b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3a22>
    e090:	e7ff      	b.n	e092 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1402>
    e092:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e096:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e09a:	1842      	adds	r2, r0, r1
    e09c:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e0a0:	f8dd c2e0 	ldr.w	ip, [sp, #736]	; 0x2e0
    e0a4:	ea03 030c 	and.w	r3, r3, ip
    e0a8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e0ac:	f002 b8a6 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    e0b0:	2005      	movs	r0, #5
    e0b2:	f8cd 07bc 	str.w	r0, [sp, #1980]	; 0x7bc
    e0b6:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    e0ba:	f2c0 0001 	movt	r0, #1
    e0be:	6801      	ldr	r1, [r0, #0]
    e0c0:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    e0c4:	f006 fab8 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e0c8:	90b7      	str	r0, [sp, #732]	; 0x2dc
    e0ca:	e01f      	b.n	e10c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x147c>
    e0cc:	2001      	movs	r0, #1
    e0ce:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    e0d2:	e015      	b.n	e100 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1470>
    e0d4:	2000      	movs	r0, #0
    e0d6:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    e0da:	e011      	b.n	e100 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1470>
    e0dc:	2000      	movs	r0, #0
    e0de:	f88d 0e13 	strb.w	r0, [sp, #3603]	; 0xe13
    e0e2:	f89d 1e13 	ldrb.w	r1, [sp, #3603]	; 0xe13
    e0e6:	f646 206c 	movw	r0, #27244	; 0x6a6c
    e0ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e0ee:	f002 fe4d 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e0f2:	f8cd 0e14 	str.w	r0, [sp, #3604]	; 0xe14
    e0f6:	f8dd 0e14 	ldr.w	r0, [sp, #3604]	; 0xe14
    e0fa:	f8cd 07c4 	str.w	r0, [sp, #1988]	; 0x7c4
    e0fe:	e00a      	b.n	e116 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1486>
    e100:	f89d 07c3 	ldrb.w	r0, [sp, #1987]	; 0x7c3
    e104:	07c0      	lsls	r0, r0, #31
    e106:	2800      	cmp	r0, #0
    e108:	d112      	bne.n	e130 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x14a0>
    e10a:	e055      	b.n	e1b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1528>
    e10c:	98b7      	ldr	r0, [sp, #732]	; 0x2dc
    e10e:	07c1      	lsls	r1, r0, #31
    e110:	2900      	cmp	r1, #0
    e112:	d1e3      	bne.n	e0dc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x144c>
    e114:	e7de      	b.n	e0d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1444>
    e116:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    e11a:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
    e11e:	f006 fa8b 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e122:	90b6      	str	r0, [sp, #728]	; 0x2d8
    e124:	e7ff      	b.n	e126 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1496>
    e126:	98b6      	ldr	r0, [sp, #728]	; 0x2d8
    e128:	07c1      	lsls	r1, r0, #31
    e12a:	2900      	cmp	r1, #0
    e12c:	d1ce      	bne.n	e0cc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x143c>
    e12e:	e7d1      	b.n	e0d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1444>
                trace!("[{:04x}] XOR Vx, Vy", self.pc);
    e130:	f24d 4024 	movw	r0, #54308	; 0xd424
    e134:	f2c0 0001 	movt	r0, #1
    e138:	6801      	ldr	r1, [r0, #0]
    e13a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e13e:	f100 0212 	add.w	r2, r0, #18
    e142:	f8cd 27e8 	str.w	r2, [sp, #2024]	; 0x7e8
    e146:	f8dd 27e8 	ldr.w	r2, [sp, #2024]	; 0x7e8
    e14a:	f8cd 2d48 	str.w	r2, [sp, #3400]	; 0xd48
    e14e:	f646 135b 	movw	r3, #26971	; 0x695b
    e152:	f2c0 0301 	movt	r3, #1
    e156:	4610      	mov	r0, r2
    e158:	91b5      	str	r1, [sp, #724]	; 0x2d4
    e15a:	4619      	mov	r1, r3
    e15c:	f7fc faea 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e160:	90b4      	str	r0, [sp, #720]	; 0x2d0
    e162:	91b3      	str	r1, [sp, #716]	; 0x2cc
    e164:	e7ff      	b.n	e166 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x14d6>
    e166:	98b4      	ldr	r0, [sp, #720]	; 0x2d0
    e168:	f8cd 07e0 	str.w	r0, [sp, #2016]	; 0x7e0
    e16c:	99b3      	ldr	r1, [sp, #716]	; 0x2cc
    e16e:	f8cd 17e4 	str.w	r1, [sp, #2020]	; 0x7e4
    e172:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    e176:	f2c0 0201 	movt	r2, #1
    e17a:	6812      	ldr	r2, [r2, #0]
    e17c:	466b      	mov	r3, sp
    e17e:	f04f 0c01 	mov.w	ip, #1
    e182:	f8c3 c008 	str.w	ip, [r3, #8]
    e186:	605a      	str	r2, [r3, #4]
    e188:	f8c3 c000 	str.w	ip, [r3]
    e18c:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    e190:	2202      	movs	r2, #2
    e192:	f50d 63fc 	add.w	r3, sp, #2016	; 0x7e0
    e196:	99b5      	ldr	r1, [sp, #724]	; 0x2d4
    e198:	f006 f913 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e19c:	e7ff      	b.n	e19e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x150e>
    e19e:	f8dd 17bc 	ldr.w	r1, [sp, #1980]	; 0x7bc
    e1a2:	f24d 4044 	movw	r0, #54340	; 0xd444
    e1a6:	f2c0 0001 	movt	r0, #1
    e1aa:	6802      	ldr	r2, [r0, #0]
    e1ac:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    e1b0:	f003 fcf2 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e1b4:	e7ff      	b.n	e1b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1526>
    e1b6:	e7ff      	b.n	e1b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1528>
                self.v[x] ^= self.v[y];
    e1b8:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e1bc:	280f      	cmp	r0, #15
    e1be:	f202 825a 	bhi.w	10676 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x39e6>
    e1c2:	e7ff      	b.n	e1c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1534>
    e1c4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e1c8:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e1cc:	1842      	adds	r2, r0, r1
    e1ce:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e1d2:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e1d6:	2b0f      	cmp	r3, #15
    e1d8:	92b2      	str	r2, [sp, #712]	; 0x2c8
    e1da:	f202 8256 	bhi.w	1068a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x39fa>
    e1de:	e7ff      	b.n	e1e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1550>
    e1e0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e1e4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e1e8:	1842      	adds	r2, r0, r1
    e1ea:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e1ee:	f8dd c2c8 	ldr.w	ip, [sp, #712]	; 0x2c8
    e1f2:	ea83 030c 	eor.w	r3, r3, ip
    e1f6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e1fa:	f001 bfff 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    e1fe:	2005      	movs	r0, #5
    e200:	f8cd 07ec 	str.w	r0, [sp, #2028]	; 0x7ec
    e204:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    e208:	f2c0 0001 	movt	r0, #1
    e20c:	6801      	ldr	r1, [r0, #0]
    e20e:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    e212:	f006 fa11 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e216:	90b1      	str	r0, [sp, #708]	; 0x2c4
    e218:	e01f      	b.n	e25a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x15ca>
    e21a:	2001      	movs	r0, #1
    e21c:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    e220:	e015      	b.n	e24e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x15be>
    e222:	2000      	movs	r0, #0
    e224:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    e228:	e011      	b.n	e24e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x15be>
    e22a:	2000      	movs	r0, #0
    e22c:	f88d 0e1b 	strb.w	r0, [sp, #3611]	; 0xe1b
    e230:	f89d 1e1b 	ldrb.w	r1, [sp, #3611]	; 0xe1b
    e234:	f646 206c 	movw	r0, #27244	; 0x6a6c
    e238:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e23c:	f002 fda6 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e240:	f8cd 0e1c 	str.w	r0, [sp, #3612]	; 0xe1c
    e244:	f8dd 0e1c 	ldr.w	r0, [sp, #3612]	; 0xe1c
    e248:	f8cd 07f4 	str.w	r0, [sp, #2036]	; 0x7f4
    e24c:	e00a      	b.n	e264 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x15d4>
    e24e:	f89d 07f3 	ldrb.w	r0, [sp, #2035]	; 0x7f3
    e252:	07c0      	lsls	r0, r0, #31
    e254:	2800      	cmp	r0, #0
    e256:	d112      	bne.n	e27e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x15ee>
    e258:	e055      	b.n	e306 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1676>
    e25a:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
    e25c:	07c1      	lsls	r1, r0, #31
    e25e:	2900      	cmp	r1, #0
    e260:	d1e3      	bne.n	e22a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x159a>
    e262:	e7de      	b.n	e222 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1592>
    e264:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    e268:	f20d 71f4 	addw	r1, sp, #2036	; 0x7f4
    e26c:	f006 f9e4 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e270:	90b0      	str	r0, [sp, #704]	; 0x2c0
    e272:	e7ff      	b.n	e274 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x15e4>
    e274:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
    e276:	07c1      	lsls	r1, r0, #31
    e278:	2900      	cmp	r1, #0
    e27a:	d1ce      	bne.n	e21a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x158a>
    e27c:	e7d1      	b.n	e222 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1592>
                trace!("[{:04x}] ADD Vx, Vy", self.pc);
    e27e:	f24d 30b4 	movw	r0, #54196	; 0xd3b4
    e282:	f2c0 0001 	movt	r0, #1
    e286:	6801      	ldr	r1, [r0, #0]
    e288:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e28c:	f100 0212 	add.w	r2, r0, #18
    e290:	f8cd 2818 	str.w	r2, [sp, #2072]	; 0x818
    e294:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
    e298:	f8cd 2d40 	str.w	r2, [sp, #3392]	; 0xd40
    e29c:	f646 135b 	movw	r3, #26971	; 0x695b
    e2a0:	f2c0 0301 	movt	r3, #1
    e2a4:	4610      	mov	r0, r2
    e2a6:	91af      	str	r1, [sp, #700]	; 0x2bc
    e2a8:	4619      	mov	r1, r3
    e2aa:	f7fc fa43 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e2ae:	90ae      	str	r0, [sp, #696]	; 0x2b8
    e2b0:	91ad      	str	r1, [sp, #692]	; 0x2b4
    e2b2:	e7ff      	b.n	e2b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1624>
    e2b4:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
    e2b6:	f8cd 0810 	str.w	r0, [sp, #2064]	; 0x810
    e2ba:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
    e2bc:	f8cd 1814 	str.w	r1, [sp, #2068]	; 0x814
    e2c0:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    e2c4:	f2c0 0201 	movt	r2, #1
    e2c8:	6812      	ldr	r2, [r2, #0]
    e2ca:	466b      	mov	r3, sp
    e2cc:	f04f 0c01 	mov.w	ip, #1
    e2d0:	f8c3 c008 	str.w	ip, [r3, #8]
    e2d4:	605a      	str	r2, [r3, #4]
    e2d6:	f8c3 c000 	str.w	ip, [r3]
    e2da:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    e2de:	2202      	movs	r2, #2
    e2e0:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
    e2e4:	99af      	ldr	r1, [sp, #700]	; 0x2bc
    e2e6:	f006 f86c 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e2ea:	e7ff      	b.n	e2ec <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x165c>
    e2ec:	f8dd 17ec 	ldr.w	r1, [sp, #2028]	; 0x7ec
    e2f0:	f24d 30d4 	movw	r0, #54228	; 0xd3d4
    e2f4:	f2c0 0001 	movt	r0, #1
    e2f8:	6802      	ldr	r2, [r0, #0]
    e2fa:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    e2fe:	f003 fc4b 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e302:	e7ff      	b.n	e304 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1674>
    e304:	e7ff      	b.n	e306 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1676>
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    e306:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e30a:	280f      	cmp	r0, #15
    e30c:	f202 8195 	bhi.w	1063a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x39aa>
    e310:	e7ff      	b.n	e312 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1682>
    e312:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e316:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e31a:	1842      	adds	r2, r0, r1
    e31c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e320:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    e324:	2b0f      	cmp	r3, #15
    e326:	92ac      	str	r2, [sp, #688]	; 0x2b0
    e328:	f202 8191 	bhi.w	1064e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x39be>
    e32c:	e7ff      	b.n	e32e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x169e>
    e32e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e332:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e336:	1842      	adds	r2, r0, r1
    e338:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    e33c:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
    e33e:	f006 f8ea 	bl	14516 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>
    e342:	90ab      	str	r0, [sp, #684]	; 0x2ac
    e344:	91aa      	str	r1, [sp, #680]	; 0x2a8
    e346:	e7ff      	b.n	e348 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x16b8>
    e348:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
    e34a:	f88d 0d46 	strb.w	r0, [sp, #3398]	; 0xd46
    e34e:	99aa      	ldr	r1, [sp, #680]	; 0x2a8
    e350:	f001 0201 	and.w	r2, r1, #1
    e354:	f88d 2d47 	strb.w	r2, [sp, #3399]	; 0xd47
                self.v[x] = v;
    e358:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    e35c:	2a0f      	cmp	r2, #15
    e35e:	f202 8180 	bhi.w	10662 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x39d2>
    e362:	e7ff      	b.n	e364 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x16d4>
    e364:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e368:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e36c:	1842      	adds	r2, r0, r1
    e36e:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
    e370:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                self.v[0xf] = c as u8;
    e374:	9aaa      	ldr	r2, [sp, #680]	; 0x2a8
    e376:	f002 0c01 	and.w	ip, r2, #1
    e37a:	f880 c043 	strb.w	ip, [r0, #67]	; 0x43
        match (
    e37e:	f001 bf3d 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    e382:	2005      	movs	r0, #5
    e384:	f8cd 081c 	str.w	r0, [sp, #2076]	; 0x81c
    e388:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    e38c:	f2c0 0001 	movt	r0, #1
    e390:	6801      	ldr	r1, [r0, #0]
    e392:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    e396:	f006 f94f 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e39a:	90a9      	str	r0, [sp, #676]	; 0x2a4
    e39c:	e01f      	b.n	e3de <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x174e>
    e39e:	2001      	movs	r0, #1
    e3a0:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    e3a4:	e015      	b.n	e3d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1742>
    e3a6:	2000      	movs	r0, #0
    e3a8:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    e3ac:	e011      	b.n	e3d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1742>
    e3ae:	2000      	movs	r0, #0
    e3b0:	f88d 0e23 	strb.w	r0, [sp, #3619]	; 0xe23
    e3b4:	f89d 1e23 	ldrb.w	r1, [sp, #3619]	; 0xe23
    e3b8:	f646 206c 	movw	r0, #27244	; 0x6a6c
    e3bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e3c0:	f002 fce4 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e3c4:	f8cd 0e24 	str.w	r0, [sp, #3620]	; 0xe24
    e3c8:	f8dd 0e24 	ldr.w	r0, [sp, #3620]	; 0xe24
    e3cc:	f8cd 0824 	str.w	r0, [sp, #2084]	; 0x824
    e3d0:	e00a      	b.n	e3e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1758>
    e3d2:	f89d 0823 	ldrb.w	r0, [sp, #2083]	; 0x823
    e3d6:	07c0      	lsls	r0, r0, #31
    e3d8:	2800      	cmp	r0, #0
    e3da:	d112      	bne.n	e402 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1772>
    e3dc:	e055      	b.n	e48a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x17fa>
    e3de:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
    e3e0:	07c1      	lsls	r1, r0, #31
    e3e2:	2900      	cmp	r1, #0
    e3e4:	d1e3      	bne.n	e3ae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x171e>
    e3e6:	e7de      	b.n	e3a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1716>
    e3e8:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    e3ec:	f60d 0124 	addw	r1, sp, #2084	; 0x824
    e3f0:	f006 f922 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e3f4:	90a8      	str	r0, [sp, #672]	; 0x2a0
    e3f6:	e7ff      	b.n	e3f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1768>
    e3f8:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
    e3fa:	07c1      	lsls	r1, r0, #31
    e3fc:	2900      	cmp	r1, #0
    e3fe:	d1ce      	bne.n	e39e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x170e>
    e400:	e7d1      	b.n	e3a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1716>
                trace!("[{:04x}] SUB Vx, Vy", self.pc);
    e402:	f24d 3044 	movw	r0, #54084	; 0xd344
    e406:	f2c0 0001 	movt	r0, #1
    e40a:	6801      	ldr	r1, [r0, #0]
    e40c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e410:	f100 0212 	add.w	r2, r0, #18
    e414:	f8cd 2848 	str.w	r2, [sp, #2120]	; 0x848
    e418:	f8dd 2848 	ldr.w	r2, [sp, #2120]	; 0x848
    e41c:	f8cd 2d38 	str.w	r2, [sp, #3384]	; 0xd38
    e420:	f646 135b 	movw	r3, #26971	; 0x695b
    e424:	f2c0 0301 	movt	r3, #1
    e428:	4610      	mov	r0, r2
    e42a:	91a7      	str	r1, [sp, #668]	; 0x29c
    e42c:	4619      	mov	r1, r3
    e42e:	f7fc f981 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e432:	90a6      	str	r0, [sp, #664]	; 0x298
    e434:	91a5      	str	r1, [sp, #660]	; 0x294
    e436:	e7ff      	b.n	e438 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x17a8>
    e438:	98a6      	ldr	r0, [sp, #664]	; 0x298
    e43a:	f8cd 0840 	str.w	r0, [sp, #2112]	; 0x840
    e43e:	99a5      	ldr	r1, [sp, #660]	; 0x294
    e440:	f8cd 1844 	str.w	r1, [sp, #2116]	; 0x844
    e444:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    e448:	f2c0 0201 	movt	r2, #1
    e44c:	6812      	ldr	r2, [r2, #0]
    e44e:	466b      	mov	r3, sp
    e450:	f04f 0c01 	mov.w	ip, #1
    e454:	f8c3 c008 	str.w	ip, [r3, #8]
    e458:	605a      	str	r2, [r3, #4]
    e45a:	f8c3 c000 	str.w	ip, [r3]
    e45e:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    e462:	2202      	movs	r2, #2
    e464:	f50d 6304 	add.w	r3, sp, #2112	; 0x840
    e468:	99a7      	ldr	r1, [sp, #668]	; 0x29c
    e46a:	f005 ffaa 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e46e:	e7ff      	b.n	e470 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x17e0>
    e470:	f8dd 181c 	ldr.w	r1, [sp, #2076]	; 0x81c
    e474:	f24d 3064 	movw	r0, #54116	; 0xd364
    e478:	f2c0 0001 	movt	r0, #1
    e47c:	6802      	ldr	r2, [r0, #0]
    e47e:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    e482:	f003 fb89 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e486:	e7ff      	b.n	e488 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x17f8>
    e488:	e7ff      	b.n	e48a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x17fa>
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    e48a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e48e:	280f      	cmp	r0, #15
    e490:	f202 80b5 	bhi.w	105fe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x396e>
    e494:	e7ff      	b.n	e496 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1806>
    e496:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e49a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e49e:	1842      	adds	r2, r0, r1
    e4a0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e4a4:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    e4a8:	2b0f      	cmp	r3, #15
    e4aa:	92a4      	str	r2, [sp, #656]	; 0x290
    e4ac:	f202 80b1 	bhi.w	10612 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3982>
    e4b0:	e7ff      	b.n	e4b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1822>
    e4b2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e4b6:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e4ba:	1842      	adds	r2, r0, r1
    e4bc:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    e4c0:	98a4      	ldr	r0, [sp, #656]	; 0x290
    e4c2:	f006 f853 	bl	1456c <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>
    e4c6:	90a3      	str	r0, [sp, #652]	; 0x28c
    e4c8:	91a2      	str	r1, [sp, #648]	; 0x288
    e4ca:	e7ff      	b.n	e4cc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x183c>
    e4cc:	98a3      	ldr	r0, [sp, #652]	; 0x28c
    e4ce:	f88d 0d3e 	strb.w	r0, [sp, #3390]	; 0xd3e
    e4d2:	99a2      	ldr	r1, [sp, #648]	; 0x288
    e4d4:	f001 0201 	and.w	r2, r1, #1
    e4d8:	f88d 2d3f 	strb.w	r2, [sp, #3391]	; 0xd3f
                self.v[x] = v;
    e4dc:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    e4e0:	2a0f      	cmp	r2, #15
    e4e2:	f202 80a0 	bhi.w	10626 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3996>
    e4e6:	e7ff      	b.n	e4e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1858>
    e4e8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e4ec:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e4f0:	1842      	adds	r2, r0, r1
    e4f2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    e4f4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    e4f8:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    e4fa:	f8dd c288 	ldr.w	ip, [sp, #648]	; 0x288
    e4fe:	ea22 020c 	bic.w	r2, r2, ip
    e502:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    e506:	f001 be79 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    e50a:	2005      	movs	r0, #5
    e50c:	f8cd 084c 	str.w	r0, [sp, #2124]	; 0x84c
    e510:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    e514:	f2c0 0001 	movt	r0, #1
    e518:	6801      	ldr	r1, [r0, #0]
    e51a:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    e51e:	f006 f88b 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e522:	90a1      	str	r0, [sp, #644]	; 0x284
    e524:	e01f      	b.n	e566 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x18d6>
    e526:	2001      	movs	r0, #1
    e528:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    e52c:	e015      	b.n	e55a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x18ca>
    e52e:	2000      	movs	r0, #0
    e530:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    e534:	e011      	b.n	e55a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x18ca>
    e536:	2000      	movs	r0, #0
    e538:	f88d 0e2b 	strb.w	r0, [sp, #3627]	; 0xe2b
    e53c:	f89d 1e2b 	ldrb.w	r1, [sp, #3627]	; 0xe2b
    e540:	f646 206c 	movw	r0, #27244	; 0x6a6c
    e544:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e548:	f002 fc20 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e54c:	f8cd 0e2c 	str.w	r0, [sp, #3628]	; 0xe2c
    e550:	f8dd 0e2c 	ldr.w	r0, [sp, #3628]	; 0xe2c
    e554:	f8cd 0854 	str.w	r0, [sp, #2132]	; 0x854
    e558:	e00a      	b.n	e570 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x18e0>
    e55a:	f89d 0853 	ldrb.w	r0, [sp, #2131]	; 0x853
    e55e:	07c0      	lsls	r0, r0, #31
    e560:	2800      	cmp	r0, #0
    e562:	d112      	bne.n	e58a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x18fa>
    e564:	e055      	b.n	e612 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1982>
    e566:	98a1      	ldr	r0, [sp, #644]	; 0x284
    e568:	07c1      	lsls	r1, r0, #31
    e56a:	2900      	cmp	r1, #0
    e56c:	d1e3      	bne.n	e536 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x18a6>
    e56e:	e7de      	b.n	e52e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x189e>
    e570:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    e574:	f60d 0154 	addw	r1, sp, #2132	; 0x854
    e578:	f006 f85e 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e57c:	90a0      	str	r0, [sp, #640]	; 0x280
    e57e:	e7ff      	b.n	e580 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x18f0>
    e580:	98a0      	ldr	r0, [sp, #640]	; 0x280
    e582:	07c1      	lsls	r1, r0, #31
    e584:	2900      	cmp	r1, #0
    e586:	d1ce      	bne.n	e526 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1896>
    e588:	e7d1      	b.n	e52e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x189e>
                trace!("[{:04x}] SHR Vx, Vy", self.pc);
    e58a:	f24d 20d4 	movw	r0, #53972	; 0xd2d4
    e58e:	f2c0 0001 	movt	r0, #1
    e592:	6801      	ldr	r1, [r0, #0]
    e594:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e598:	f100 0212 	add.w	r2, r0, #18
    e59c:	f8cd 2878 	str.w	r2, [sp, #2168]	; 0x878
    e5a0:	f8dd 2878 	ldr.w	r2, [sp, #2168]	; 0x878
    e5a4:	f8cd 2d34 	str.w	r2, [sp, #3380]	; 0xd34
    e5a8:	f646 135b 	movw	r3, #26971	; 0x695b
    e5ac:	f2c0 0301 	movt	r3, #1
    e5b0:	4610      	mov	r0, r2
    e5b2:	919f      	str	r1, [sp, #636]	; 0x27c
    e5b4:	4619      	mov	r1, r3
    e5b6:	f7fc f8bd 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e5ba:	909e      	str	r0, [sp, #632]	; 0x278
    e5bc:	919d      	str	r1, [sp, #628]	; 0x274
    e5be:	e7ff      	b.n	e5c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1930>
    e5c0:	989e      	ldr	r0, [sp, #632]	; 0x278
    e5c2:	f8cd 0870 	str.w	r0, [sp, #2160]	; 0x870
    e5c6:	999d      	ldr	r1, [sp, #628]	; 0x274
    e5c8:	f8cd 1874 	str.w	r1, [sp, #2164]	; 0x874
    e5cc:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    e5d0:	f2c0 0201 	movt	r2, #1
    e5d4:	6812      	ldr	r2, [r2, #0]
    e5d6:	466b      	mov	r3, sp
    e5d8:	f04f 0c01 	mov.w	ip, #1
    e5dc:	f8c3 c008 	str.w	ip, [r3, #8]
    e5e0:	605a      	str	r2, [r3, #4]
    e5e2:	f8c3 c000 	str.w	ip, [r3]
    e5e6:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    e5ea:	2202      	movs	r2, #2
    e5ec:	f50d 6307 	add.w	r3, sp, #2160	; 0x870
    e5f0:	999f      	ldr	r1, [sp, #636]	; 0x27c
    e5f2:	f005 fee6 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e5f6:	e7ff      	b.n	e5f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1968>
    e5f8:	f8dd 184c 	ldr.w	r1, [sp, #2124]	; 0x84c
    e5fc:	f24d 20f4 	movw	r0, #54004	; 0xd2f4
    e600:	f2c0 0001 	movt	r0, #1
    e604:	6802      	ldr	r2, [r0, #0]
    e606:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    e60a:	f003 fac5 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e60e:	e7ff      	b.n	e610 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1980>
    e610:	e7ff      	b.n	e612 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1982>
                self.v[0xf] = self.v[x] & 1;
    e612:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e616:	280f      	cmp	r0, #15
    e618:	f201 87d3 	bhi.w	105c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3932>
    e61c:	e7ff      	b.n	e61e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x198e>
    e61e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e622:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e626:	1842      	adds	r2, r0, r1
    e628:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e62c:	f002 0201 	and.w	r2, r2, #1
    e630:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shr(1);
    e634:	290f      	cmp	r1, #15
    e636:	f201 87ce 	bhi.w	105d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3946>
    e63a:	e7ff      	b.n	e63c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x19ac>
    e63c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e640:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e644:	1842      	adds	r2, r0, r1
    e646:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    e64a:	2101      	movs	r1, #1
    e64c:	f005 ff3f 	bl	144ce <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E>
    e650:	909c      	str	r0, [sp, #624]	; 0x270
    e652:	e7ff      	b.n	e654 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x19c4>
    e654:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e658:	280f      	cmp	r0, #15
    e65a:	f201 87c6 	bhi.w	105ea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x395a>
    e65e:	e7ff      	b.n	e660 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x19d0>
    e660:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e664:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e668:	1842      	adds	r2, r0, r1
    e66a:	9b9c      	ldr	r3, [sp, #624]	; 0x270
    e66c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e670:	f001 bdc4 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    e674:	2005      	movs	r0, #5
    e676:	f8cd 087c 	str.w	r0, [sp, #2172]	; 0x87c
    e67a:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    e67e:	f2c0 0001 	movt	r0, #1
    e682:	6801      	ldr	r1, [r0, #0]
    e684:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    e688:	f005 ffd6 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e68c:	909b      	str	r0, [sp, #620]	; 0x26c
    e68e:	e01f      	b.n	e6d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a40>
    e690:	2001      	movs	r0, #1
    e692:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    e696:	e015      	b.n	e6c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a34>
    e698:	2000      	movs	r0, #0
    e69a:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    e69e:	e011      	b.n	e6c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a34>
    e6a0:	2000      	movs	r0, #0
    e6a2:	f88d 0e33 	strb.w	r0, [sp, #3635]	; 0xe33
    e6a6:	f89d 1e33 	ldrb.w	r1, [sp, #3635]	; 0xe33
    e6aa:	f646 206c 	movw	r0, #27244	; 0x6a6c
    e6ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e6b2:	f002 fb6b 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e6b6:	f8cd 0e34 	str.w	r0, [sp, #3636]	; 0xe34
    e6ba:	f8dd 0e34 	ldr.w	r0, [sp, #3636]	; 0xe34
    e6be:	f8cd 0884 	str.w	r0, [sp, #2180]	; 0x884
    e6c2:	e00a      	b.n	e6da <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a4a>
    e6c4:	f89d 0883 	ldrb.w	r0, [sp, #2179]	; 0x883
    e6c8:	07c0      	lsls	r0, r0, #31
    e6ca:	2800      	cmp	r0, #0
    e6cc:	d112      	bne.n	e6f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a64>
    e6ce:	e055      	b.n	e77c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1aec>
    e6d0:	989b      	ldr	r0, [sp, #620]	; 0x26c
    e6d2:	07c1      	lsls	r1, r0, #31
    e6d4:	2900      	cmp	r1, #0
    e6d6:	d1e3      	bne.n	e6a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a10>
    e6d8:	e7de      	b.n	e698 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a08>
    e6da:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    e6de:	f60d 0184 	addw	r1, sp, #2180	; 0x884
    e6e2:	f005 ffa9 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e6e6:	909a      	str	r0, [sp, #616]	; 0x268
    e6e8:	e7ff      	b.n	e6ea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a5a>
    e6ea:	989a      	ldr	r0, [sp, #616]	; 0x268
    e6ec:	07c1      	lsls	r1, r0, #31
    e6ee:	2900      	cmp	r1, #0
    e6f0:	d1ce      	bne.n	e690 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a00>
    e6f2:	e7d1      	b.n	e698 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a08>
                trace!("[{:04x}] SUBN Vx, Vy", self.pc);
    e6f4:	f24d 2064 	movw	r0, #53860	; 0xd264
    e6f8:	f2c0 0001 	movt	r0, #1
    e6fc:	6801      	ldr	r1, [r0, #0]
    e6fe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e702:	f100 0212 	add.w	r2, r0, #18
    e706:	f8cd 28a8 	str.w	r2, [sp, #2216]	; 0x8a8
    e70a:	f8dd 28a8 	ldr.w	r2, [sp, #2216]	; 0x8a8
    e70e:	f8cd 2d2c 	str.w	r2, [sp, #3372]	; 0xd2c
    e712:	f646 135b 	movw	r3, #26971	; 0x695b
    e716:	f2c0 0301 	movt	r3, #1
    e71a:	4610      	mov	r0, r2
    e71c:	9199      	str	r1, [sp, #612]	; 0x264
    e71e:	4619      	mov	r1, r3
    e720:	f7fc f808 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e724:	9098      	str	r0, [sp, #608]	; 0x260
    e726:	9197      	str	r1, [sp, #604]	; 0x25c
    e728:	e7ff      	b.n	e72a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1a9a>
    e72a:	9898      	ldr	r0, [sp, #608]	; 0x260
    e72c:	f8cd 08a0 	str.w	r0, [sp, #2208]	; 0x8a0
    e730:	9997      	ldr	r1, [sp, #604]	; 0x25c
    e732:	f8cd 18a4 	str.w	r1, [sp, #2212]	; 0x8a4
    e736:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    e73a:	f2c0 0201 	movt	r2, #1
    e73e:	6812      	ldr	r2, [r2, #0]
    e740:	466b      	mov	r3, sp
    e742:	f04f 0c01 	mov.w	ip, #1
    e746:	f8c3 c008 	str.w	ip, [r3, #8]
    e74a:	605a      	str	r2, [r3, #4]
    e74c:	f8c3 c000 	str.w	ip, [r3]
    e750:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    e754:	2202      	movs	r2, #2
    e756:	f50d 630a 	add.w	r3, sp, #2208	; 0x8a0
    e75a:	9999      	ldr	r1, [sp, #612]	; 0x264
    e75c:	f005 fe31 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e760:	e7ff      	b.n	e762 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1ad2>
    e762:	f8dd 187c 	ldr.w	r1, [sp, #2172]	; 0x87c
    e766:	f24d 2084 	movw	r0, #53892	; 0xd284
    e76a:	f2c0 0001 	movt	r0, #1
    e76e:	6802      	ldr	r2, [r0, #0]
    e770:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    e774:	f003 fa10 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e778:	e7ff      	b.n	e77a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1aea>
    e77a:	e7ff      	b.n	e77c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1aec>
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    e77c:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e780:	280f      	cmp	r0, #15
    e782:	f201 8700 	bhi.w	10586 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x38f6>
    e786:	e7ff      	b.n	e788 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1af8>
    e788:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e78c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e790:	1842      	adds	r2, r0, r1
    e792:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e796:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e79a:	2b0f      	cmp	r3, #15
    e79c:	9296      	str	r2, [sp, #600]	; 0x258
    e79e:	f201 86fc 	bhi.w	1059a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x390a>
    e7a2:	e7ff      	b.n	e7a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1b14>
    e7a4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e7a8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e7ac:	1842      	adds	r2, r0, r1
    e7ae:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    e7b2:	9896      	ldr	r0, [sp, #600]	; 0x258
    e7b4:	f005 feda 	bl	1456c <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>
    e7b8:	9095      	str	r0, [sp, #596]	; 0x254
    e7ba:	9194      	str	r1, [sp, #592]	; 0x250
    e7bc:	e7ff      	b.n	e7be <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1b2e>
    e7be:	9895      	ldr	r0, [sp, #596]	; 0x254
    e7c0:	f88d 0d32 	strb.w	r0, [sp, #3378]	; 0xd32
    e7c4:	9994      	ldr	r1, [sp, #592]	; 0x250
    e7c6:	f001 0201 	and.w	r2, r1, #1
    e7ca:	f88d 2d33 	strb.w	r2, [sp, #3379]	; 0xd33
                self.v[x] = v;
    e7ce:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    e7d2:	2a0f      	cmp	r2, #15
    e7d4:	f201 86eb 	bhi.w	105ae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x391e>
    e7d8:	e7ff      	b.n	e7da <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1b4a>
    e7da:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e7de:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e7e2:	1842      	adds	r2, r0, r1
    e7e4:	9b95      	ldr	r3, [sp, #596]	; 0x254
    e7e6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    e7ea:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    e7ec:	f8dd c250 	ldr.w	ip, [sp, #592]	; 0x250
    e7f0:	ea22 020c 	bic.w	r2, r2, ip
    e7f4:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    e7f8:	f001 bd00 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    e7fc:	2005      	movs	r0, #5
    e7fe:	f8cd 08ac 	str.w	r0, [sp, #2220]	; 0x8ac
    e802:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    e806:	f2c0 0001 	movt	r0, #1
    e80a:	6801      	ldr	r1, [r0, #0]
    e80c:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    e810:	f005 ff12 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e814:	9093      	str	r0, [sp, #588]	; 0x24c
    e816:	e01f      	b.n	e858 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1bc8>
    e818:	2001      	movs	r0, #1
    e81a:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    e81e:	e015      	b.n	e84c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1bbc>
    e820:	2000      	movs	r0, #0
    e822:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    e826:	e011      	b.n	e84c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1bbc>
    e828:	2000      	movs	r0, #0
    e82a:	f88d 0e3b 	strb.w	r0, [sp, #3643]	; 0xe3b
    e82e:	f89d 1e3b 	ldrb.w	r1, [sp, #3643]	; 0xe3b
    e832:	f646 206c 	movw	r0, #27244	; 0x6a6c
    e836:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e83a:	f002 faa7 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e83e:	f8cd 0e3c 	str.w	r0, [sp, #3644]	; 0xe3c
    e842:	f8dd 0e3c 	ldr.w	r0, [sp, #3644]	; 0xe3c
    e846:	f8cd 08b4 	str.w	r0, [sp, #2228]	; 0x8b4
    e84a:	e00a      	b.n	e862 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1bd2>
    e84c:	f89d 08b3 	ldrb.w	r0, [sp, #2227]	; 0x8b3
    e850:	07c0      	lsls	r0, r0, #31
    e852:	2800      	cmp	r0, #0
    e854:	d112      	bne.n	e87c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1bec>
    e856:	e055      	b.n	e904 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1c74>
    e858:	9893      	ldr	r0, [sp, #588]	; 0x24c
    e85a:	07c1      	lsls	r1, r0, #31
    e85c:	2900      	cmp	r1, #0
    e85e:	d1e3      	bne.n	e828 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1b98>
    e860:	e7de      	b.n	e820 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1b90>
    e862:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    e866:	f60d 01b4 	addw	r1, sp, #2228	; 0x8b4
    e86a:	f005 fee5 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e86e:	9092      	str	r0, [sp, #584]	; 0x248
    e870:	e7ff      	b.n	e872 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1be2>
    e872:	9892      	ldr	r0, [sp, #584]	; 0x248
    e874:	07c1      	lsls	r1, r0, #31
    e876:	2900      	cmp	r1, #0
    e878:	d1ce      	bne.n	e818 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1b88>
    e87a:	e7d1      	b.n	e820 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1b90>
                trace!("[{:04x}] SHL Vx, Vy", self.pc);
    e87c:	f24d 10f0 	movw	r0, #53744	; 0xd1f0
    e880:	f2c0 0001 	movt	r0, #1
    e884:	6801      	ldr	r1, [r0, #0]
    e886:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e88a:	f100 0212 	add.w	r2, r0, #18
    e88e:	f8cd 28d8 	str.w	r2, [sp, #2264]	; 0x8d8
    e892:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
    e896:	f8cd 2d28 	str.w	r2, [sp, #3368]	; 0xd28
    e89a:	f646 135b 	movw	r3, #26971	; 0x695b
    e89e:	f2c0 0301 	movt	r3, #1
    e8a2:	4610      	mov	r0, r2
    e8a4:	9191      	str	r1, [sp, #580]	; 0x244
    e8a6:	4619      	mov	r1, r3
    e8a8:	f7fb ff44 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e8ac:	9090      	str	r0, [sp, #576]	; 0x240
    e8ae:	918f      	str	r1, [sp, #572]	; 0x23c
    e8b0:	e7ff      	b.n	e8b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1c22>
    e8b2:	9890      	ldr	r0, [sp, #576]	; 0x240
    e8b4:	f8cd 08d0 	str.w	r0, [sp, #2256]	; 0x8d0
    e8b8:	998f      	ldr	r1, [sp, #572]	; 0x23c
    e8ba:	f8cd 18d4 	str.w	r1, [sp, #2260]	; 0x8d4
    e8be:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    e8c2:	f2c0 0201 	movt	r2, #1
    e8c6:	6812      	ldr	r2, [r2, #0]
    e8c8:	466b      	mov	r3, sp
    e8ca:	f04f 0c01 	mov.w	ip, #1
    e8ce:	f8c3 c008 	str.w	ip, [r3, #8]
    e8d2:	605a      	str	r2, [r3, #4]
    e8d4:	f8c3 c000 	str.w	ip, [r3]
    e8d8:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    e8dc:	2202      	movs	r2, #2
    e8de:	f50d 630d 	add.w	r3, sp, #2256	; 0x8d0
    e8e2:	9991      	ldr	r1, [sp, #580]	; 0x244
    e8e4:	f005 fd6d 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e8e8:	e7ff      	b.n	e8ea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1c5a>
    e8ea:	f8dd 18ac 	ldr.w	r1, [sp, #2220]	; 0x8ac
    e8ee:	f24d 2010 	movw	r0, #53776	; 0xd210
    e8f2:	f2c0 0001 	movt	r0, #1
    e8f6:	6802      	ldr	r2, [r0, #0]
    e8f8:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    e8fc:	f003 f94c 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e900:	e7ff      	b.n	e902 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1c72>
    e902:	e7ff      	b.n	e904 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1c74>
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    e904:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e908:	280f      	cmp	r0, #15
    e90a:	f201 861e 	bhi.w	1054a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x38ba>
    e90e:	e7ff      	b.n	e910 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1c80>
    e910:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e914:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e918:	1842      	adds	r2, r0, r1
    e91a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e91e:	09d2      	lsrs	r2, r2, #7
    e920:	928e      	str	r2, [sp, #568]	; 0x238
    e922:	e7ff      	b.n	e924 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1c94>
    e924:	988e      	ldr	r0, [sp, #568]	; 0x238
    e926:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    e92a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shl(1);
    e92e:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    e932:	2a0f      	cmp	r2, #15
    e934:	f201 8613 	bhi.w	1055e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x38ce>
    e938:	e7ff      	b.n	e93a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1caa>
    e93a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e93e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e942:	1842      	adds	r2, r0, r1
    e944:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    e948:	2101      	movs	r1, #1
    e94a:	f005 fdaf 	bl	144ac <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E>
    e94e:	908d      	str	r0, [sp, #564]	; 0x234
    e950:	e7ff      	b.n	e952 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1cc2>
    e952:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e956:	280f      	cmp	r0, #15
    e958:	f201 860b 	bhi.w	10572 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x38e2>
    e95c:	e7ff      	b.n	e95e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1cce>
    e95e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e962:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e966:	1842      	adds	r2, r0, r1
    e968:	9b8d      	ldr	r3, [sp, #564]	; 0x234
    e96a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e96e:	f001 bc45 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    e972:	2005      	movs	r0, #5
    e974:	f8cd 08dc 	str.w	r0, [sp, #2268]	; 0x8dc
    e978:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    e97c:	f2c0 0001 	movt	r0, #1
    e980:	6801      	ldr	r1, [r0, #0]
    e982:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    e986:	f005 fe57 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e98a:	908c      	str	r0, [sp, #560]	; 0x230
    e98c:	e01f      	b.n	e9ce <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1d3e>
    e98e:	2001      	movs	r0, #1
    e990:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    e994:	e015      	b.n	e9c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1d32>
    e996:	2000      	movs	r0, #0
    e998:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    e99c:	e011      	b.n	e9c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1d32>
    e99e:	2000      	movs	r0, #0
    e9a0:	f88d 0e43 	strb.w	r0, [sp, #3651]	; 0xe43
    e9a4:	f89d 1e43 	ldrb.w	r1, [sp, #3651]	; 0xe43
    e9a8:	f646 206c 	movw	r0, #27244	; 0x6a6c
    e9ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e9b0:	f002 f9ec 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e9b4:	f8cd 0e44 	str.w	r0, [sp, #3652]	; 0xe44
    e9b8:	f8dd 0e44 	ldr.w	r0, [sp, #3652]	; 0xe44
    e9bc:	f8cd 08e4 	str.w	r0, [sp, #2276]	; 0x8e4
    e9c0:	e00a      	b.n	e9d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1d48>
    e9c2:	f89d 08e3 	ldrb.w	r0, [sp, #2275]	; 0x8e3
    e9c6:	07c0      	lsls	r0, r0, #31
    e9c8:	2800      	cmp	r0, #0
    e9ca:	d112      	bne.n	e9f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1d62>
    e9cc:	e055      	b.n	ea7a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1dea>
    e9ce:	988c      	ldr	r0, [sp, #560]	; 0x230
    e9d0:	07c1      	lsls	r1, r0, #31
    e9d2:	2900      	cmp	r1, #0
    e9d4:	d1e3      	bne.n	e99e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1d0e>
    e9d6:	e7de      	b.n	e996 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1d06>
    e9d8:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    e9dc:	f60d 01e4 	addw	r1, sp, #2276	; 0x8e4
    e9e0:	f005 fe2a 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e9e4:	908b      	str	r0, [sp, #556]	; 0x22c
    e9e6:	e7ff      	b.n	e9e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1d58>
    e9e8:	988b      	ldr	r0, [sp, #556]	; 0x22c
    e9ea:	07c1      	lsls	r1, r0, #31
    e9ec:	2900      	cmp	r1, #0
    e9ee:	d1ce      	bne.n	e98e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1cfe>
    e9f0:	e7d1      	b.n	e996 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1d06>
                trace!("[{:04x}] SNE Vx, Vy", self.pc);
    e9f2:	f24d 1090 	movw	r0, #53648	; 0xd190
    e9f6:	f2c0 0001 	movt	r0, #1
    e9fa:	6801      	ldr	r1, [r0, #0]
    e9fc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ea00:	f100 0212 	add.w	r2, r0, #18
    ea04:	f8cd 2908 	str.w	r2, [sp, #2312]	; 0x908
    ea08:	f8dd 2908 	ldr.w	r2, [sp, #2312]	; 0x908
    ea0c:	f8cd 2d24 	str.w	r2, [sp, #3364]	; 0xd24
    ea10:	f646 135b 	movw	r3, #26971	; 0x695b
    ea14:	f2c0 0301 	movt	r3, #1
    ea18:	4610      	mov	r0, r2
    ea1a:	918a      	str	r1, [sp, #552]	; 0x228
    ea1c:	4619      	mov	r1, r3
    ea1e:	f7fb fe89 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ea22:	9089      	str	r0, [sp, #548]	; 0x224
    ea24:	9188      	str	r1, [sp, #544]	; 0x220
    ea26:	e7ff      	b.n	ea28 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1d98>
    ea28:	9889      	ldr	r0, [sp, #548]	; 0x224
    ea2a:	f8cd 0900 	str.w	r0, [sp, #2304]	; 0x900
    ea2e:	9988      	ldr	r1, [sp, #544]	; 0x220
    ea30:	f8cd 1904 	str.w	r1, [sp, #2308]	; 0x904
    ea34:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    ea38:	f2c0 0201 	movt	r2, #1
    ea3c:	6812      	ldr	r2, [r2, #0]
    ea3e:	466b      	mov	r3, sp
    ea40:	f04f 0c01 	mov.w	ip, #1
    ea44:	f8c3 c008 	str.w	ip, [r3, #8]
    ea48:	605a      	str	r2, [r3, #4]
    ea4a:	f8c3 c000 	str.w	ip, [r3]
    ea4e:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    ea52:	2202      	movs	r2, #2
    ea54:	f50d 6310 	add.w	r3, sp, #2304	; 0x900
    ea58:	998a      	ldr	r1, [sp, #552]	; 0x228
    ea5a:	f005 fcb2 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ea5e:	e7ff      	b.n	ea60 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1dd0>
    ea60:	f8dd 18dc 	ldr.w	r1, [sp, #2268]	; 0x8dc
    ea64:	f24d 10b0 	movw	r0, #53680	; 0xd1b0
    ea68:	f2c0 0001 	movt	r0, #1
    ea6c:	6802      	ldr	r2, [r0, #0]
    ea6e:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    ea72:	f003 f891 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ea76:	e7ff      	b.n	ea78 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1de8>
    ea78:	e7ff      	b.n	ea7a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1dea>
                if self.v[x] != self.v[y] {
    ea7a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ea7e:	280f      	cmp	r0, #15
    ea80:	f201 854f 	bhi.w	10522 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3892>
    ea84:	e7ff      	b.n	ea86 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1df6>
    ea86:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ea8a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ea8e:	1842      	adds	r2, r0, r1
    ea90:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ea94:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    ea98:	2b0f      	cmp	r3, #15
    ea9a:	9287      	str	r2, [sp, #540]	; 0x21c
    ea9c:	f201 854b 	bhi.w	10536 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x38a6>
    eaa0:	e7ff      	b.n	eaa2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e12>
    eaa2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eaa6:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    eaaa:	1842      	adds	r2, r0, r1
    eaac:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    eab0:	9b87      	ldr	r3, [sp, #540]	; 0x21c
    eab2:	fa5f fc83 	uxtb.w	ip, r3
    eab6:	4594      	cmp	ip, r2
    eab8:	d006      	beq.n	eac8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e38>
    eaba:	e7ff      	b.n	eabc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e2c>
                    self.next();
    eabc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eac0:	f001 fece 	bl	10860 <_ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E>
    eac4:	e7ff      	b.n	eac6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e36>
                if self.v[x] != self.v[y] {
    eac6:	e7ff      	b.n	eac8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e38>
        match (
    eac8:	f001 bb98 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    eacc:	2005      	movs	r0, #5
    eace:	f8cd 090c 	str.w	r0, [sp, #2316]	; 0x90c
    ead2:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    ead6:	f2c0 0001 	movt	r0, #1
    eada:	6801      	ldr	r1, [r0, #0]
    eadc:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    eae0:	f005 fdaa 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eae4:	9086      	str	r0, [sp, #536]	; 0x218
    eae6:	e01f      	b.n	eb28 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e98>
    eae8:	2001      	movs	r0, #1
    eaea:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    eaee:	e015      	b.n	eb1c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e8c>
    eaf0:	2000      	movs	r0, #0
    eaf2:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    eaf6:	e011      	b.n	eb1c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e8c>
    eaf8:	2000      	movs	r0, #0
    eafa:	f88d 0e4b 	strb.w	r0, [sp, #3659]	; 0xe4b
    eafe:	f89d 1e4b 	ldrb.w	r1, [sp, #3659]	; 0xe4b
    eb02:	f646 206c 	movw	r0, #27244	; 0x6a6c
    eb06:	f2c2 0000 	movt	r0, #8192	; 0x2000
    eb0a:	f002 f93f 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    eb0e:	f8cd 0e4c 	str.w	r0, [sp, #3660]	; 0xe4c
    eb12:	f8dd 0e4c 	ldr.w	r0, [sp, #3660]	; 0xe4c
    eb16:	f8cd 0914 	str.w	r0, [sp, #2324]	; 0x914
    eb1a:	e00a      	b.n	eb32 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1ea2>
    eb1c:	f89d 0913 	ldrb.w	r0, [sp, #2323]	; 0x913
    eb20:	07c0      	lsls	r0, r0, #31
    eb22:	2800      	cmp	r0, #0
    eb24:	d112      	bne.n	eb4c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1ebc>
    eb26:	e055      	b.n	ebd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1f44>
    eb28:	9886      	ldr	r0, [sp, #536]	; 0x218
    eb2a:	07c1      	lsls	r1, r0, #31
    eb2c:	2900      	cmp	r1, #0
    eb2e:	d1e3      	bne.n	eaf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e68>
    eb30:	e7de      	b.n	eaf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e60>
    eb32:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    eb36:	f60d 1114 	addw	r1, sp, #2324	; 0x914
    eb3a:	f005 fd7d 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eb3e:	9085      	str	r0, [sp, #532]	; 0x214
    eb40:	e7ff      	b.n	eb42 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1eb2>
    eb42:	9885      	ldr	r0, [sp, #532]	; 0x214
    eb44:	07c1      	lsls	r1, r0, #31
    eb46:	2900      	cmp	r1, #0
    eb48:	d1ce      	bne.n	eae8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e58>
    eb4a:	e7d1      	b.n	eaf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1e60>
                trace!("[{:04x}] LD I, nnn", self.pc);
    eb4c:	f24d 1050 	movw	r0, #53584	; 0xd150
    eb50:	f2c0 0001 	movt	r0, #1
    eb54:	6801      	ldr	r1, [r0, #0]
    eb56:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eb5a:	f100 0212 	add.w	r2, r0, #18
    eb5e:	f8cd 2938 	str.w	r2, [sp, #2360]	; 0x938
    eb62:	f8dd 2938 	ldr.w	r2, [sp, #2360]	; 0x938
    eb66:	f8cd 2d20 	str.w	r2, [sp, #3360]	; 0xd20
    eb6a:	f646 135b 	movw	r3, #26971	; 0x695b
    eb6e:	f2c0 0301 	movt	r3, #1
    eb72:	4610      	mov	r0, r2
    eb74:	9184      	str	r1, [sp, #528]	; 0x210
    eb76:	4619      	mov	r1, r3
    eb78:	f7fb fddc 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    eb7c:	9083      	str	r0, [sp, #524]	; 0x20c
    eb7e:	9182      	str	r1, [sp, #520]	; 0x208
    eb80:	e7ff      	b.n	eb82 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1ef2>
    eb82:	9883      	ldr	r0, [sp, #524]	; 0x20c
    eb84:	f8cd 0930 	str.w	r0, [sp, #2352]	; 0x930
    eb88:	9982      	ldr	r1, [sp, #520]	; 0x208
    eb8a:	f8cd 1934 	str.w	r1, [sp, #2356]	; 0x934
    eb8e:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    eb92:	f2c0 0201 	movt	r2, #1
    eb96:	6812      	ldr	r2, [r2, #0]
    eb98:	466b      	mov	r3, sp
    eb9a:	f04f 0c01 	mov.w	ip, #1
    eb9e:	f8c3 c008 	str.w	ip, [r3, #8]
    eba2:	605a      	str	r2, [r3, #4]
    eba4:	f8c3 c000 	str.w	ip, [r3]
    eba8:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    ebac:	2202      	movs	r2, #2
    ebae:	f50d 6313 	add.w	r3, sp, #2352	; 0x930
    ebb2:	9984      	ldr	r1, [sp, #528]	; 0x210
    ebb4:	f005 fc05 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ebb8:	e7ff      	b.n	ebba <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1f2a>
    ebba:	f8dd 190c 	ldr.w	r1, [sp, #2316]	; 0x90c
    ebbe:	f24d 1070 	movw	r0, #53616	; 0xd170
    ebc2:	f2c0 0001 	movt	r0, #1
    ebc6:	6802      	ldr	r2, [r0, #0]
    ebc8:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    ebcc:	f002 ffe4 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ebd0:	e7ff      	b.n	ebd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1f42>
    ebd2:	e7ff      	b.n	ebd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1f44>
                self.i = nnn;
    ebd4:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    ebd8:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    ebdc:	8208      	strh	r0, [r1, #16]
        match (
    ebde:	f001 bb0d 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    ebe2:	2005      	movs	r0, #5
    ebe4:	f8cd 093c 	str.w	r0, [sp, #2364]	; 0x93c
    ebe8:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    ebec:	f2c0 0001 	movt	r0, #1
    ebf0:	6801      	ldr	r1, [r0, #0]
    ebf2:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    ebf6:	f005 fd1f 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ebfa:	9081      	str	r0, [sp, #516]	; 0x204
    ebfc:	e01f      	b.n	ec3e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1fae>
    ebfe:	2001      	movs	r0, #1
    ec00:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    ec04:	e015      	b.n	ec32 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1fa2>
    ec06:	2000      	movs	r0, #0
    ec08:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    ec0c:	e011      	b.n	ec32 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1fa2>
    ec0e:	2000      	movs	r0, #0
    ec10:	f88d 0e53 	strb.w	r0, [sp, #3667]	; 0xe53
    ec14:	f89d 1e53 	ldrb.w	r1, [sp, #3667]	; 0xe53
    ec18:	f646 206c 	movw	r0, #27244	; 0x6a6c
    ec1c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ec20:	f002 f8b4 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ec24:	f8cd 0e54 	str.w	r0, [sp, #3668]	; 0xe54
    ec28:	f8dd 0e54 	ldr.w	r0, [sp, #3668]	; 0xe54
    ec2c:	f8cd 0944 	str.w	r0, [sp, #2372]	; 0x944
    ec30:	e00a      	b.n	ec48 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1fb8>
    ec32:	f89d 0943 	ldrb.w	r0, [sp, #2371]	; 0x943
    ec36:	07c0      	lsls	r0, r0, #31
    ec38:	2800      	cmp	r0, #0
    ec3a:	d112      	bne.n	ec62 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1fd2>
    ec3c:	e055      	b.n	ecea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x205a>
    ec3e:	9881      	ldr	r0, [sp, #516]	; 0x204
    ec40:	07c1      	lsls	r1, r0, #31
    ec42:	2900      	cmp	r1, #0
    ec44:	d1e3      	bne.n	ec0e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1f7e>
    ec46:	e7de      	b.n	ec06 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1f76>
    ec48:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    ec4c:	f60d 1144 	addw	r1, sp, #2372	; 0x944
    ec50:	f005 fcf2 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ec54:	9080      	str	r0, [sp, #512]	; 0x200
    ec56:	e7ff      	b.n	ec58 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1fc8>
    ec58:	9880      	ldr	r0, [sp, #512]	; 0x200
    ec5a:	07c1      	lsls	r1, r0, #31
    ec5c:	2900      	cmp	r1, #0
    ec5e:	d1ce      	bne.n	ebfe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1f6e>
    ec60:	e7d1      	b.n	ec06 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x1f76>
                trace!("[{:04x}] JP V0, nnn", self.pc);
    ec62:	f24d 1010 	movw	r0, #53520	; 0xd110
    ec66:	f2c0 0001 	movt	r0, #1
    ec6a:	6801      	ldr	r1, [r0, #0]
    ec6c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ec70:	f100 0212 	add.w	r2, r0, #18
    ec74:	f8cd 2968 	str.w	r2, [sp, #2408]	; 0x968
    ec78:	f8dd 2968 	ldr.w	r2, [sp, #2408]	; 0x968
    ec7c:	f8cd 2d1c 	str.w	r2, [sp, #3356]	; 0xd1c
    ec80:	f646 135b 	movw	r3, #26971	; 0x695b
    ec84:	f2c0 0301 	movt	r3, #1
    ec88:	4610      	mov	r0, r2
    ec8a:	917f      	str	r1, [sp, #508]	; 0x1fc
    ec8c:	4619      	mov	r1, r3
    ec8e:	f7fb fd51 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ec92:	907e      	str	r0, [sp, #504]	; 0x1f8
    ec94:	917d      	str	r1, [sp, #500]	; 0x1f4
    ec96:	e7ff      	b.n	ec98 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2008>
    ec98:	987e      	ldr	r0, [sp, #504]	; 0x1f8
    ec9a:	f8cd 0960 	str.w	r0, [sp, #2400]	; 0x960
    ec9e:	997d      	ldr	r1, [sp, #500]	; 0x1f4
    eca0:	f8cd 1964 	str.w	r1, [sp, #2404]	; 0x964
    eca4:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    eca8:	f2c0 0201 	movt	r2, #1
    ecac:	6812      	ldr	r2, [r2, #0]
    ecae:	466b      	mov	r3, sp
    ecb0:	f04f 0c01 	mov.w	ip, #1
    ecb4:	f8c3 c008 	str.w	ip, [r3, #8]
    ecb8:	605a      	str	r2, [r3, #4]
    ecba:	f8c3 c000 	str.w	ip, [r3]
    ecbe:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    ecc2:	2202      	movs	r2, #2
    ecc4:	f50d 6316 	add.w	r3, sp, #2400	; 0x960
    ecc8:	997f      	ldr	r1, [sp, #508]	; 0x1fc
    ecca:	f005 fb7a 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ecce:	e7ff      	b.n	ecd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2040>
    ecd0:	f8dd 193c 	ldr.w	r1, [sp, #2364]	; 0x93c
    ecd4:	f24d 1030 	movw	r0, #53552	; 0xd130
    ecd8:	f2c0 0001 	movt	r0, #1
    ecdc:	6802      	ldr	r2, [r0, #0]
    ecde:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    ece2:	f002 ff59 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ece6:	e7ff      	b.n	ece8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2058>
    ece8:	e7ff      	b.n	ecea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x205a>
                self.jump(nnn.wrapping_add(self.v[0].into()).wrapping_sub(2));
    ecea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ecee:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    ecf2:	f002 f83e 	bl	10d72 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
    ecf6:	907c      	str	r0, [sp, #496]	; 0x1f0
    ecf8:	e7ff      	b.n	ecfa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x206a>
    ecfa:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    ecfe:	997c      	ldr	r1, [sp, #496]	; 0x1f0
    ed00:	f005 fc60 	bl	145c4 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
    ed04:	907b      	str	r0, [sp, #492]	; 0x1ec
    ed06:	e7ff      	b.n	ed08 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2078>
    ed08:	2102      	movs	r1, #2
    ed0a:	987b      	ldr	r0, [sp, #492]	; 0x1ec
    ed0c:	f005 fc6b 	bl	145e6 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    ed10:	907a      	str	r0, [sp, #488]	; 0x1e8
    ed12:	e7ff      	b.n	ed14 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2084>
    ed14:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ed18:	997a      	ldr	r1, [sp, #488]	; 0x1e8
    ed1a:	f001 fd5e 	bl	107da <_ZN8libchip814Chip8$LT$T$GT$4jump17heb92b408b228e4d7E>
    ed1e:	e7ff      	b.n	ed20 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2090>
        match (
    ed20:	f001 ba6c 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    ed24:	2005      	movs	r0, #5
    ed26:	f8cd 096c 	str.w	r0, [sp, #2412]	; 0x96c
    ed2a:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    ed2e:	f2c0 0001 	movt	r0, #1
    ed32:	6801      	ldr	r1, [r0, #0]
    ed34:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    ed38:	f005 fc7e 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ed3c:	9079      	str	r0, [sp, #484]	; 0x1e4
    ed3e:	e01f      	b.n	ed80 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x20f0>
    ed40:	2001      	movs	r0, #1
    ed42:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    ed46:	e015      	b.n	ed74 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x20e4>
    ed48:	2000      	movs	r0, #0
    ed4a:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    ed4e:	e011      	b.n	ed74 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x20e4>
    ed50:	2000      	movs	r0, #0
    ed52:	f88d 0e5b 	strb.w	r0, [sp, #3675]	; 0xe5b
    ed56:	f89d 1e5b 	ldrb.w	r1, [sp, #3675]	; 0xe5b
    ed5a:	f646 206c 	movw	r0, #27244	; 0x6a6c
    ed5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ed62:	f002 f813 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ed66:	f8cd 0e5c 	str.w	r0, [sp, #3676]	; 0xe5c
    ed6a:	f8dd 0e5c 	ldr.w	r0, [sp, #3676]	; 0xe5c
    ed6e:	f8cd 0974 	str.w	r0, [sp, #2420]	; 0x974
    ed72:	e00a      	b.n	ed8a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x20fa>
    ed74:	f89d 0973 	ldrb.w	r0, [sp, #2419]	; 0x973
    ed78:	07c0      	lsls	r0, r0, #31
    ed7a:	2800      	cmp	r0, #0
    ed7c:	d112      	bne.n	eda4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2114>
    ed7e:	e055      	b.n	ee2c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x219c>
    ed80:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    ed82:	07c1      	lsls	r1, r0, #31
    ed84:	2900      	cmp	r1, #0
    ed86:	d1e3      	bne.n	ed50 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x20c0>
    ed88:	e7de      	b.n	ed48 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x20b8>
    ed8a:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    ed8e:	f60d 1174 	addw	r1, sp, #2420	; 0x974
    ed92:	f005 fc51 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ed96:	9078      	str	r0, [sp, #480]	; 0x1e0
    ed98:	e7ff      	b.n	ed9a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x210a>
    ed9a:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    ed9c:	07c1      	lsls	r1, r0, #31
    ed9e:	2900      	cmp	r1, #0
    eda0:	d1ce      	bne.n	ed40 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x20b0>
    eda2:	e7d1      	b.n	ed48 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x20b8>
                trace!("[{:04x}] RND Vx, kk", self.pc);
    eda4:	f24d 00c0 	movw	r0, #53440	; 0xd0c0
    eda8:	f2c0 0001 	movt	r0, #1
    edac:	6801      	ldr	r1, [r0, #0]
    edae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    edb2:	f100 0212 	add.w	r2, r0, #18
    edb6:	f8cd 2998 	str.w	r2, [sp, #2456]	; 0x998
    edba:	f8dd 2998 	ldr.w	r2, [sp, #2456]	; 0x998
    edbe:	f8cd 2d18 	str.w	r2, [sp, #3352]	; 0xd18
    edc2:	f646 135b 	movw	r3, #26971	; 0x695b
    edc6:	f2c0 0301 	movt	r3, #1
    edca:	4610      	mov	r0, r2
    edcc:	9177      	str	r1, [sp, #476]	; 0x1dc
    edce:	4619      	mov	r1, r3
    edd0:	f7fb fcb0 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    edd4:	9076      	str	r0, [sp, #472]	; 0x1d8
    edd6:	9175      	str	r1, [sp, #468]	; 0x1d4
    edd8:	e7ff      	b.n	edda <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x214a>
    edda:	9876      	ldr	r0, [sp, #472]	; 0x1d8
    eddc:	f8cd 0990 	str.w	r0, [sp, #2448]	; 0x990
    ede0:	9975      	ldr	r1, [sp, #468]	; 0x1d4
    ede2:	f8cd 1994 	str.w	r1, [sp, #2452]	; 0x994
    ede6:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    edea:	f2c0 0201 	movt	r2, #1
    edee:	6812      	ldr	r2, [r2, #0]
    edf0:	466b      	mov	r3, sp
    edf2:	f04f 0c01 	mov.w	ip, #1
    edf6:	f8c3 c008 	str.w	ip, [r3, #8]
    edfa:	605a      	str	r2, [r3, #4]
    edfc:	f8c3 c000 	str.w	ip, [r3]
    ee00:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    ee04:	2202      	movs	r2, #2
    ee06:	f50d 6319 	add.w	r3, sp, #2448	; 0x990
    ee0a:	9977      	ldr	r1, [sp, #476]	; 0x1dc
    ee0c:	f005 fad9 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ee10:	e7ff      	b.n	ee12 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2182>
    ee12:	f8dd 196c 	ldr.w	r1, [sp, #2412]	; 0x96c
    ee16:	f24d 00e0 	movw	r0, #53472	; 0xd0e0
    ee1a:	f2c0 0001 	movt	r0, #1
    ee1e:	6802      	ldr	r2, [r0, #0]
    ee20:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    ee24:	f002 feb8 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ee28:	e7ff      	b.n	ee2a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x219a>
    ee2a:	e7ff      	b.n	ee2c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x219c>
                self.v[x] = self.hw.rand() & kk;
    ee2c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ee30:	f7fd f8e4 	bl	bffc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17hdef6640b381cd2e3E>
    ee34:	9074      	str	r0, [sp, #464]	; 0x1d0
    ee36:	e7ff      	b.n	ee38 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x21a8>
    ee38:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ee3c:	280f      	cmp	r0, #15
    ee3e:	f201 8366 	bhi.w	1050e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x387e>
    ee42:	e7ff      	b.n	ee44 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x21b4>
    ee44:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ee48:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ee4c:	1842      	adds	r2, r0, r1
    ee4e:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
    ee50:	f8dd c45c 	ldr.w	ip, [sp, #1116]	; 0x45c
    ee54:	ea03 0e0c 	and.w	lr, r3, ip
    ee58:	f882 e034 	strb.w	lr, [r2, #52]	; 0x34
        match (
    ee5c:	f001 b9ce 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    ee60:	2005      	movs	r0, #5
    ee62:	f8cd 099c 	str.w	r0, [sp, #2460]	; 0x99c
    ee66:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    ee6a:	f2c0 0001 	movt	r0, #1
    ee6e:	6801      	ldr	r1, [r0, #0]
    ee70:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    ee74:	f005 fbe0 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ee78:	9073      	str	r0, [sp, #460]	; 0x1cc
    ee7a:	e01f      	b.n	eebc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x222c>
    ee7c:	2001      	movs	r0, #1
    ee7e:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    ee82:	e015      	b.n	eeb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2220>
    ee84:	2000      	movs	r0, #0
    ee86:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    ee8a:	e011      	b.n	eeb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2220>
    ee8c:	2000      	movs	r0, #0
    ee8e:	f88d 0e63 	strb.w	r0, [sp, #3683]	; 0xe63
    ee92:	f89d 1e63 	ldrb.w	r1, [sp, #3683]	; 0xe63
    ee96:	f646 206c 	movw	r0, #27244	; 0x6a6c
    ee9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ee9e:	f001 ff75 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    eea2:	f8cd 0e64 	str.w	r0, [sp, #3684]	; 0xe64
    eea6:	f8dd 0e64 	ldr.w	r0, [sp, #3684]	; 0xe64
    eeaa:	f8cd 09a4 	str.w	r0, [sp, #2468]	; 0x9a4
    eeae:	e00a      	b.n	eec6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2236>
    eeb0:	f89d 09a3 	ldrb.w	r0, [sp, #2467]	; 0x9a3
    eeb4:	07c0      	lsls	r0, r0, #31
    eeb6:	2800      	cmp	r0, #0
    eeb8:	d112      	bne.n	eee0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2250>
    eeba:	e055      	b.n	ef68 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22d8>
    eebc:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    eebe:	07c1      	lsls	r1, r0, #31
    eec0:	2900      	cmp	r1, #0
    eec2:	d1e3      	bne.n	ee8c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x21fc>
    eec4:	e7de      	b.n	ee84 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x21f4>
    eec6:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    eeca:	f60d 11a4 	addw	r1, sp, #2468	; 0x9a4
    eece:	f005 fbb3 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eed2:	9072      	str	r0, [sp, #456]	; 0x1c8
    eed4:	e7ff      	b.n	eed6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2246>
    eed6:	9872      	ldr	r0, [sp, #456]	; 0x1c8
    eed8:	07c1      	lsls	r1, r0, #31
    eeda:	2900      	cmp	r1, #0
    eedc:	d1ce      	bne.n	ee7c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x21ec>
    eede:	e7d1      	b.n	ee84 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x21f4>
                trace!("[{:04x}] DRW Vx, Vy, n", self.pc);
    eee0:	f64c 7064 	movw	r0, #53092	; 0xcf64
    eee4:	f2c0 0001 	movt	r0, #1
    eee8:	6801      	ldr	r1, [r0, #0]
    eeea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eeee:	f100 0212 	add.w	r2, r0, #18
    eef2:	f8cd 29c8 	str.w	r2, [sp, #2504]	; 0x9c8
    eef6:	f8dd 29c8 	ldr.w	r2, [sp, #2504]	; 0x9c8
    eefa:	f8cd 2cdc 	str.w	r2, [sp, #3292]	; 0xcdc
    eefe:	f646 135b 	movw	r3, #26971	; 0x695b
    ef02:	f2c0 0301 	movt	r3, #1
    ef06:	4610      	mov	r0, r2
    ef08:	9171      	str	r1, [sp, #452]	; 0x1c4
    ef0a:	4619      	mov	r1, r3
    ef0c:	f7fb fc12 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ef10:	9070      	str	r0, [sp, #448]	; 0x1c0
    ef12:	916f      	str	r1, [sp, #444]	; 0x1bc
    ef14:	e7ff      	b.n	ef16 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2286>
    ef16:	9870      	ldr	r0, [sp, #448]	; 0x1c0
    ef18:	f8cd 09c0 	str.w	r0, [sp, #2496]	; 0x9c0
    ef1c:	996f      	ldr	r1, [sp, #444]	; 0x1bc
    ef1e:	f8cd 19c4 	str.w	r1, [sp, #2500]	; 0x9c4
    ef22:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    ef26:	f2c0 0201 	movt	r2, #1
    ef2a:	6812      	ldr	r2, [r2, #0]
    ef2c:	466b      	mov	r3, sp
    ef2e:	f04f 0c01 	mov.w	ip, #1
    ef32:	f8c3 c008 	str.w	ip, [r3, #8]
    ef36:	605a      	str	r2, [r3, #4]
    ef38:	f8c3 c000 	str.w	ip, [r3]
    ef3c:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    ef40:	2202      	movs	r2, #2
    ef42:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
    ef46:	9971      	ldr	r1, [sp, #452]	; 0x1c4
    ef48:	f005 fa3b 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ef4c:	e7ff      	b.n	ef4e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22be>
    ef4e:	f8dd 199c 	ldr.w	r1, [sp, #2460]	; 0x99c
    ef52:	f64c 7084 	movw	r0, #53124	; 0xcf84
    ef56:	f2c0 0001 	movt	r0, #1
    ef5a:	6802      	ldr	r2, [r0, #0]
    ef5c:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    ef60:	f002 fe1a 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ef64:	e7ff      	b.n	ef66 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22d6>
    ef66:	e7ff      	b.n	ef68 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22d8>
                let basex = self.v[x] as usize;
    ef68:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ef6c:	280f      	cmp	r0, #15
    ef6e:	f201 825c 	bhi.w	1042a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x379a>
    ef72:	e7ff      	b.n	ef74 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x22e4>
    ef74:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ef78:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ef7c:	1842      	adds	r2, r0, r1
    ef7e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ef82:	4613      	mov	r3, r2
    ef84:	f8cd 2ce0 	str.w	r2, [sp, #3296]	; 0xce0
                let basey = self.v[y] as usize;
    ef88:	f8dd 2460 	ldr.w	r2, [sp, #1120]	; 0x460
    ef8c:	2a0f      	cmp	r2, #15
    ef8e:	936e      	str	r3, [sp, #440]	; 0x1b8
    ef90:	f201 8255 	bhi.w	1043e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x37ae>
    ef94:	e7ff      	b.n	ef96 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2306>
    ef96:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ef9a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ef9e:	1842      	adds	r2, r0, r1
    efa0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    efa4:	4613      	mov	r3, r2
    efa6:	f8cd 2ce4 	str.w	r2, [sp, #3300]	; 0xce4
                let (w, h) = self.hw.vram_size();
    efaa:	936d      	str	r3, [sp, #436]	; 0x1b4
    efac:	f7fd fa61 	bl	c472 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbe871a76fb26495aE>
    efb0:	906c      	str	r0, [sp, #432]	; 0x1b0
    efb2:	916b      	str	r1, [sp, #428]	; 0x1ac
    efb4:	e7ff      	b.n	efb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2326>
    efb6:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    efb8:	f8cd 0ce8 	str.w	r0, [sp, #3304]	; 0xce8
    efbc:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    efbe:	f8cd 1cec 	str.w	r1, [sp, #3308]	; 0xcec
    efc2:	2200      	movs	r2, #0
                self.v[0xf] = 0;
    efc4:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    efc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                for y in 0..n {
    efcc:	f8cd 29cc 	str.w	r2, [sp, #2508]	; 0x9cc
    efd0:	f8dd 2470 	ldr.w	r2, [sp, #1136]	; 0x470
    efd4:	f8cd 29d0 	str.w	r2, [sp, #2512]	; 0x9d0
    efd8:	f8dd 09cc 	ldr.w	r0, [sp, #2508]	; 0x9cc
    efdc:	f8dd 19d0 	ldr.w	r1, [sp, #2512]	; 0x9d0
    efe0:	f002 fb66 	bl	116b0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    efe4:	906a      	str	r0, [sp, #424]	; 0x1a8
    efe6:	9169      	str	r1, [sp, #420]	; 0x1a4
    efe8:	e7ff      	b.n	efea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x235a>
    efea:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    efec:	f8cd 09d4 	str.w	r0, [sp, #2516]	; 0x9d4
    eff0:	9969      	ldr	r1, [sp, #420]	; 0x1a4
    eff2:	f8cd 19d8 	str.w	r1, [sp, #2520]	; 0x9d8
    eff6:	e7ff      	b.n	eff8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2368>
    eff8:	f60d 10d4 	addw	r0, sp, #2516	; 0x9d4
    effc:	f002 facd 	bl	1159a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f000:	f8cd 19e0 	str.w	r1, [sp, #2528]	; 0x9e0
    f004:	f8cd 09dc 	str.w	r0, [sp, #2524]	; 0x9dc
    f008:	e7ff      	b.n	f00a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x237a>
    f00a:	f8dd 09dc 	ldr.w	r0, [sp, #2524]	; 0x9dc
    f00e:	2800      	cmp	r0, #0
    f010:	d001      	beq.n	f016 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2386>
    f012:	e7ff      	b.n	f014 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2384>
    f014:	e002      	b.n	f01c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x238c>
        match (
    f016:	f001 b8f1 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
                for y in 0..n {
    f01a:	defe      	udf	#254	; 0xfe
    f01c:	f8dd 09e0 	ldr.w	r0, [sp, #2528]	; 0x9e0
    f020:	f8cd 0cf0 	str.w	r0, [sp, #3312]	; 0xcf0
    f024:	f8cd 0cf4 	str.w	r0, [sp, #3316]	; 0xcf4
    f028:	f8cd 0cf8 	str.w	r0, [sp, #3320]	; 0xcf8
                    let b = self.mem[self.i as usize + y];
    f02c:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f030:	8a0a      	ldrh	r2, [r1, #16]
    f032:	1813      	adds	r3, r2, r0
    f034:	469c      	mov	ip, r3
    f036:	4293      	cmp	r3, r2
    f038:	9068      	str	r0, [sp, #416]	; 0x1a0
    f03a:	f8cd c19c 	str.w	ip, [sp, #412]	; 0x19c
    f03e:	f0c1 8208 	bcc.w	10452 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x37c2>
    f042:	e7ff      	b.n	f044 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x23b4>
    f044:	2000      	movs	r0, #0
    f046:	9967      	ldr	r1, [sp, #412]	; 0x19c
    f048:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    f04c:	f041 820d 	bne.w	1046a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x37da>
    f050:	e7ff      	b.n	f052 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x23c2>
    f052:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f056:	9967      	ldr	r1, [sp, #412]	; 0x19c
    f058:	1842      	adds	r2, r0, r1
    f05a:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    f05e:	4613      	mov	r3, r2
    f060:	f88d 2cff 	strb.w	r2, [sp, #3327]	; 0xcff
                    let vramy = (y + basey) % h;
    f064:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
    f066:	f8dd c1b4 	ldr.w	ip, [sp, #436]	; 0x1b4
    f06a:	eb02 0e0c 	add.w	lr, r2, ip
    f06e:	4674      	mov	r4, lr
    f070:	4596      	cmp	lr, r2
    f072:	9366      	str	r3, [sp, #408]	; 0x198
    f074:	9465      	str	r4, [sp, #404]	; 0x194
    f076:	f0c1 8202 	bcc.w	1047e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x37ee>
    f07a:	e7ff      	b.n	f07c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x23ec>
    f07c:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    f07e:	2800      	cmp	r0, #0
    f080:	f001 8209 	beq.w	10496 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3806>
    f084:	e7ff      	b.n	f086 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x23f6>
    f086:	9865      	ldr	r0, [sp, #404]	; 0x194
    f088:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    f08a:	fbb0 f2f1 	udiv	r2, r0, r1
    f08e:	fb02 0211 	mls	r2, r2, r1, r0
    f092:	4613      	mov	r3, r2
    f094:	f8cd 2d00 	str.w	r2, [sp, #3328]	; 0xd00
    f098:	2200      	movs	r2, #0
                    for x in 0..8 {
    f09a:	f8cd 29e4 	str.w	r2, [sp, #2532]	; 0x9e4
    f09e:	2208      	movs	r2, #8
    f0a0:	f8cd 29e8 	str.w	r2, [sp, #2536]	; 0x9e8
    f0a4:	f8dd 09e4 	ldr.w	r0, [sp, #2532]	; 0x9e4
    f0a8:	f8dd 19e8 	ldr.w	r1, [sp, #2536]	; 0x9e8
    f0ac:	9364      	str	r3, [sp, #400]	; 0x190
    f0ae:	f002 faff 	bl	116b0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    f0b2:	9063      	str	r0, [sp, #396]	; 0x18c
    f0b4:	9162      	str	r1, [sp, #392]	; 0x188
    f0b6:	e7ff      	b.n	f0b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2428>
    f0b8:	9863      	ldr	r0, [sp, #396]	; 0x18c
    f0ba:	f8cd 09ec 	str.w	r0, [sp, #2540]	; 0x9ec
    f0be:	9962      	ldr	r1, [sp, #392]	; 0x188
    f0c0:	f8cd 19f0 	str.w	r1, [sp, #2544]	; 0x9f0
    f0c4:	e7ff      	b.n	f0c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2436>
    f0c6:	f60d 10ec 	addw	r0, sp, #2540	; 0x9ec
    f0ca:	f002 fa66 	bl	1159a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f0ce:	f8cd 19f8 	str.w	r1, [sp, #2552]	; 0x9f8
    f0d2:	f8cd 09f4 	str.w	r0, [sp, #2548]	; 0x9f4
    f0d6:	e7ff      	b.n	f0d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2448>
    f0d8:	f8dd 09f4 	ldr.w	r0, [sp, #2548]	; 0x9f4
    f0dc:	2800      	cmp	r0, #0
    f0de:	d001      	beq.n	f0e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2454>
    f0e0:	e7ff      	b.n	f0e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2452>
    f0e2:	e001      	b.n	f0e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2458>
                for y in 0..n {
    f0e4:	e788      	b.n	eff8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2368>
                    for x in 0..8 {
    f0e6:	defe      	udf	#254	; 0xfe
    f0e8:	f8dd 09f8 	ldr.w	r0, [sp, #2552]	; 0x9f8
    f0ec:	f8cd 0d04 	str.w	r0, [sp, #3332]	; 0xd04
    f0f0:	f8cd 0d08 	str.w	r0, [sp, #3336]	; 0xd08
    f0f4:	f8cd 0d0c 	str.w	r0, [sp, #3340]	; 0xd0c
                        let vramx = (x + basex) % w;
    f0f8:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    f0fa:	1842      	adds	r2, r0, r1
    f0fc:	4613      	mov	r3, r2
    f0fe:	4282      	cmp	r2, r0
    f100:	9061      	str	r0, [sp, #388]	; 0x184
    f102:	9360      	str	r3, [sp, #384]	; 0x180
    f104:	f0c1 81d3 	bcc.w	104ae <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x381e>
    f108:	e7ff      	b.n	f10a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x247a>
    f10a:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    f10c:	2800      	cmp	r0, #0
    f10e:	f001 81da 	beq.w	104c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3836>
    f112:	e7ff      	b.n	f114 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2484>
    f114:	9860      	ldr	r0, [sp, #384]	; 0x180
    f116:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    f118:	fbb0 f2f1 	udiv	r2, r0, r1
    f11c:	fb02 0211 	mls	r2, r2, r1, r0
    f120:	4613      	mov	r3, r2
    f122:	f8cd 2d10 	str.w	r2, [sp, #3344]	; 0xd10
                        let src = (b & 1 << (7 - x)) > 0;
    f126:	9a61      	ldr	r2, [sp, #388]	; 0x184
    f128:	f1c2 0c07 	rsb	ip, r2, #7
    f12c:	f04f 0e07 	mov.w	lr, #7
    f130:	4596      	cmp	lr, r2
    f132:	935f      	str	r3, [sp, #380]	; 0x17c
    f134:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
    f138:	f0c1 81d1 	bcc.w	104de <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x384e>
    f13c:	e7ff      	b.n	f13e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x24ae>
    f13e:	985e      	ldr	r0, [sp, #376]	; 0x178
    f140:	f000 0107 	and.w	r1, r0, #7
    f144:	2201      	movs	r2, #1
    f146:	fa02 f101 	lsl.w	r1, r2, r1
    f14a:	08c2      	lsrs	r2, r0, #3
    f14c:	2a00      	cmp	r2, #0
    f14e:	915d      	str	r1, [sp, #372]	; 0x174
    f150:	f041 81d1 	bne.w	104f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3866>
    f154:	e7ff      	b.n	f156 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x24c6>
    f156:	9866      	ldr	r0, [sp, #408]	; 0x198
    f158:	995d      	ldr	r1, [sp, #372]	; 0x174
    f15a:	ea00 0201 	and.w	r2, r0, r1
    f15e:	b2d2      	uxtb	r2, r2
    f160:	2a00      	cmp	r2, #0
    f162:	bf18      	it	ne
    f164:	2201      	movne	r2, #1
    f166:	4613      	mov	r3, r2
    f168:	f88d 2d16 	strb.w	r2, [sp, #3350]	; 0xd16
                        let dst = self.hw.vram_get(vramx, vramy);
    f16c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f170:	995f      	ldr	r1, [sp, #380]	; 0x17c
    f172:	9a64      	ldr	r2, [sp, #400]	; 0x190
    f174:	935c      	str	r3, [sp, #368]	; 0x170
    f176:	f7fd f8e7 	bl	c348 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h7748859cc2ff300eE>
    f17a:	4601      	mov	r1, r0
    f17c:	f88d 0d17 	strb.w	r0, [sp, #3351]	; 0xd17
    f180:	915b      	str	r1, [sp, #364]	; 0x16c
    f182:	e7ff      	b.n	f184 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x24f4>
                        self.v[0xf] |= (src && dst) as u8;
    f184:	985c      	ldr	r0, [sp, #368]	; 0x170
    f186:	07c1      	lsls	r1, r0, #31
    f188:	2900      	cmp	r1, #0
    f18a:	d108      	bne.n	f19e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x250e>
    f18c:	e003      	b.n	f196 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2506>
    f18e:	2001      	movs	r0, #1
    f190:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    f194:	e008      	b.n	f1a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2518>
    f196:	2000      	movs	r0, #0
    f198:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    f19c:	e004      	b.n	f1a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2518>
    f19e:	985b      	ldr	r0, [sp, #364]	; 0x16c
    f1a0:	07c1      	lsls	r1, r0, #31
    f1a2:	2900      	cmp	r1, #0
    f1a4:	d1f3      	bne.n	f18e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x24fe>
    f1a6:	e7f6      	b.n	f196 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2506>
    f1a8:	f89d 09ff 	ldrb.w	r0, [sp, #2559]	; 0x9ff
    f1ac:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f1b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    f1b4:	4310      	orrs	r0, r2
    f1b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                        self.hw.vram_set(vramx, vramy, src ^ dst);
    f1ba:	985c      	ldr	r0, [sp, #368]	; 0x170
    f1bc:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
    f1be:	ea80 0302 	eor.w	r3, r0, r2
    f1c2:	f003 0301 	and.w	r3, r3, #1
    f1c6:	4608      	mov	r0, r1
    f1c8:	995f      	ldr	r1, [sp, #380]	; 0x17c
    f1ca:	9a64      	ldr	r2, [sp, #400]	; 0x190
    f1cc:	f7fc ff23 	bl	c016 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17h0c2ee2008c2c15b2E>
    f1d0:	e7ff      	b.n	f1d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2542>
                    for x in 0..8 {
    f1d2:	e778      	b.n	f0c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2436>
    f1d4:	2005      	movs	r0, #5
    f1d6:	f8cd 0a00 	str.w	r0, [sp, #2560]	; 0xa00
    f1da:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    f1de:	f2c0 0001 	movt	r0, #1
    f1e2:	6801      	ldr	r1, [r0, #0]
    f1e4:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    f1e8:	f005 fa26 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f1ec:	905a      	str	r0, [sp, #360]	; 0x168
    f1ee:	e01f      	b.n	f230 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x25a0>
    f1f0:	2001      	movs	r0, #1
    f1f2:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    f1f6:	e015      	b.n	f224 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2594>
    f1f8:	2000      	movs	r0, #0
    f1fa:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    f1fe:	e011      	b.n	f224 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2594>
    f200:	2000      	movs	r0, #0
    f202:	f88d 0e6b 	strb.w	r0, [sp, #3691]	; 0xe6b
    f206:	f89d 1e6b 	ldrb.w	r1, [sp, #3691]	; 0xe6b
    f20a:	f646 206c 	movw	r0, #27244	; 0x6a6c
    f20e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f212:	f001 fdbb 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f216:	f8cd 0e6c 	str.w	r0, [sp, #3692]	; 0xe6c
    f21a:	f8dd 0e6c 	ldr.w	r0, [sp, #3692]	; 0xe6c
    f21e:	f8cd 0a08 	str.w	r0, [sp, #2568]	; 0xa08
    f222:	e00a      	b.n	f23a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x25aa>
    f224:	f89d 0a07 	ldrb.w	r0, [sp, #2567]	; 0xa07
    f228:	07c0      	lsls	r0, r0, #31
    f22a:	2800      	cmp	r0, #0
    f22c:	d112      	bne.n	f254 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x25c4>
    f22e:	e055      	b.n	f2dc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x264c>
    f230:	985a      	ldr	r0, [sp, #360]	; 0x168
    f232:	07c1      	lsls	r1, r0, #31
    f234:	2900      	cmp	r1, #0
    f236:	d1e3      	bne.n	f200 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2570>
    f238:	e7de      	b.n	f1f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2568>
    f23a:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    f23e:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
    f242:	f005 f9f9 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f246:	9059      	str	r0, [sp, #356]	; 0x164
    f248:	e7ff      	b.n	f24a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x25ba>
    f24a:	9859      	ldr	r0, [sp, #356]	; 0x164
    f24c:	07c1      	lsls	r1, r0, #31
    f24e:	2900      	cmp	r1, #0
    f250:	d1ce      	bne.n	f1f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2560>
    f252:	e7d1      	b.n	f1f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2568>
                trace!("[{:04x}] SKP Vx", self.pc);
    f254:	f64c 7010 	movw	r0, #53008	; 0xcf10
    f258:	f2c0 0001 	movt	r0, #1
    f25c:	6801      	ldr	r1, [r0, #0]
    f25e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f262:	f100 0212 	add.w	r2, r0, #18
    f266:	f8cd 2a2c 	str.w	r2, [sp, #2604]	; 0xa2c
    f26a:	f8dd 2a2c 	ldr.w	r2, [sp, #2604]	; 0xa2c
    f26e:	f8cd 2cd8 	str.w	r2, [sp, #3288]	; 0xcd8
    f272:	f646 135b 	movw	r3, #26971	; 0x695b
    f276:	f2c0 0301 	movt	r3, #1
    f27a:	4610      	mov	r0, r2
    f27c:	9158      	str	r1, [sp, #352]	; 0x160
    f27e:	4619      	mov	r1, r3
    f280:	f7fb fa58 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f284:	9057      	str	r0, [sp, #348]	; 0x15c
    f286:	9156      	str	r1, [sp, #344]	; 0x158
    f288:	e7ff      	b.n	f28a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x25fa>
    f28a:	9857      	ldr	r0, [sp, #348]	; 0x15c
    f28c:	f8cd 0a24 	str.w	r0, [sp, #2596]	; 0xa24
    f290:	9956      	ldr	r1, [sp, #344]	; 0x158
    f292:	f8cd 1a28 	str.w	r1, [sp, #2600]	; 0xa28
    f296:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    f29a:	f2c0 0201 	movt	r2, #1
    f29e:	6812      	ldr	r2, [r2, #0]
    f2a0:	466b      	mov	r3, sp
    f2a2:	f04f 0c01 	mov.w	ip, #1
    f2a6:	f8c3 c008 	str.w	ip, [r3, #8]
    f2aa:	605a      	str	r2, [r3, #4]
    f2ac:	f8c3 c000 	str.w	ip, [r3]
    f2b0:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    f2b4:	2202      	movs	r2, #2
    f2b6:	f60d 2324 	addw	r3, sp, #2596	; 0xa24
    f2ba:	9958      	ldr	r1, [sp, #352]	; 0x160
    f2bc:	f005 f881 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f2c0:	e7ff      	b.n	f2c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2632>
    f2c2:	f8dd 1a00 	ldr.w	r1, [sp, #2560]	; 0xa00
    f2c6:	f64c 7030 	movw	r0, #53040	; 0xcf30
    f2ca:	f2c0 0001 	movt	r0, #1
    f2ce:	6802      	ldr	r2, [r0, #0]
    f2d0:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    f2d4:	f002 fc60 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f2d8:	e7ff      	b.n	f2da <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x264a>
    f2da:	e7ff      	b.n	f2dc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x264c>
                if self.hw.key(self.v[x]) {
    f2dc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f2e0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f2e4:	290f      	cmp	r1, #15
    f2e6:	9055      	str	r0, [sp, #340]	; 0x154
    f2e8:	f201 8095 	bhi.w	10416 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3786>
    f2ec:	e7ff      	b.n	f2ee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x265e>
    f2ee:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f2f2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f2f6:	1842      	adds	r2, r0, r1
    f2f8:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    f2fc:	9855      	ldr	r0, [sp, #340]	; 0x154
    f2fe:	f7fc fe82 	bl	c006 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h6ab5fe7f9b6adc84E>
    f302:	9054      	str	r0, [sp, #336]	; 0x150
    f304:	e7ff      	b.n	f306 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2676>
    f306:	9854      	ldr	r0, [sp, #336]	; 0x150
    f308:	07c1      	lsls	r1, r0, #31
    f30a:	2900      	cmp	r1, #0
    f30c:	d006      	beq.n	f31c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x268c>
    f30e:	e7ff      	b.n	f310 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2680>
                    self.next();
    f310:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f314:	f001 faa4 	bl	10860 <_ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E>
    f318:	e7ff      	b.n	f31a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x268a>
                if self.hw.key(self.v[x]) {
    f31a:	e7ff      	b.n	f31c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x268c>
        match (
    f31c:	f000 bf6e 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    f320:	2005      	movs	r0, #5
    f322:	f8cd 0a30 	str.w	r0, [sp, #2608]	; 0xa30
    f326:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    f32a:	f2c0 0001 	movt	r0, #1
    f32e:	6801      	ldr	r1, [r0, #0]
    f330:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    f334:	f005 f980 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f338:	9053      	str	r0, [sp, #332]	; 0x14c
    f33a:	e01f      	b.n	f37c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x26ec>
    f33c:	2001      	movs	r0, #1
    f33e:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    f342:	e015      	b.n	f370 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x26e0>
    f344:	2000      	movs	r0, #0
    f346:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    f34a:	e011      	b.n	f370 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x26e0>
    f34c:	2000      	movs	r0, #0
    f34e:	f88d 0e73 	strb.w	r0, [sp, #3699]	; 0xe73
    f352:	f89d 1e73 	ldrb.w	r1, [sp, #3699]	; 0xe73
    f356:	f646 206c 	movw	r0, #27244	; 0x6a6c
    f35a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f35e:	f001 fd15 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f362:	f8cd 0e74 	str.w	r0, [sp, #3700]	; 0xe74
    f366:	f8dd 0e74 	ldr.w	r0, [sp, #3700]	; 0xe74
    f36a:	f8cd 0a38 	str.w	r0, [sp, #2616]	; 0xa38
    f36e:	e00a      	b.n	f386 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x26f6>
    f370:	f89d 0a37 	ldrb.w	r0, [sp, #2615]	; 0xa37
    f374:	07c0      	lsls	r0, r0, #31
    f376:	2800      	cmp	r0, #0
    f378:	d112      	bne.n	f3a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2710>
    f37a:	e055      	b.n	f428 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2798>
    f37c:	9853      	ldr	r0, [sp, #332]	; 0x14c
    f37e:	07c1      	lsls	r1, r0, #31
    f380:	2900      	cmp	r1, #0
    f382:	d1e3      	bne.n	f34c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x26bc>
    f384:	e7de      	b.n	f344 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x26b4>
    f386:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    f38a:	f60d 2138 	addw	r1, sp, #2616	; 0xa38
    f38e:	f005 f953 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f392:	9052      	str	r0, [sp, #328]	; 0x148
    f394:	e7ff      	b.n	f396 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2706>
    f396:	9852      	ldr	r0, [sp, #328]	; 0x148
    f398:	07c1      	lsls	r1, r0, #31
    f39a:	2900      	cmp	r1, #0
    f39c:	d1ce      	bne.n	f33c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x26ac>
    f39e:	e7d1      	b.n	f344 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x26b4>
                trace!("[{:04x}] SKNP Vx", self.pc);
    f3a0:	f64c 60cc 	movw	r0, #52940	; 0xcecc
    f3a4:	f2c0 0001 	movt	r0, #1
    f3a8:	6801      	ldr	r1, [r0, #0]
    f3aa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f3ae:	f100 0212 	add.w	r2, r0, #18
    f3b2:	f8cd 2a5c 	str.w	r2, [sp, #2652]	; 0xa5c
    f3b6:	f8dd 2a5c 	ldr.w	r2, [sp, #2652]	; 0xa5c
    f3ba:	f8cd 2cd4 	str.w	r2, [sp, #3284]	; 0xcd4
    f3be:	f646 135b 	movw	r3, #26971	; 0x695b
    f3c2:	f2c0 0301 	movt	r3, #1
    f3c6:	4610      	mov	r0, r2
    f3c8:	9151      	str	r1, [sp, #324]	; 0x144
    f3ca:	4619      	mov	r1, r3
    f3cc:	f7fb f9b2 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f3d0:	9050      	str	r0, [sp, #320]	; 0x140
    f3d2:	914f      	str	r1, [sp, #316]	; 0x13c
    f3d4:	e7ff      	b.n	f3d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2746>
    f3d6:	9850      	ldr	r0, [sp, #320]	; 0x140
    f3d8:	f8cd 0a54 	str.w	r0, [sp, #2644]	; 0xa54
    f3dc:	994f      	ldr	r1, [sp, #316]	; 0x13c
    f3de:	f8cd 1a58 	str.w	r1, [sp, #2648]	; 0xa58
    f3e2:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    f3e6:	f2c0 0201 	movt	r2, #1
    f3ea:	6812      	ldr	r2, [r2, #0]
    f3ec:	466b      	mov	r3, sp
    f3ee:	f04f 0c01 	mov.w	ip, #1
    f3f2:	f8c3 c008 	str.w	ip, [r3, #8]
    f3f6:	605a      	str	r2, [r3, #4]
    f3f8:	f8c3 c000 	str.w	ip, [r3]
    f3fc:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    f400:	2202      	movs	r2, #2
    f402:	f60d 2354 	addw	r3, sp, #2644	; 0xa54
    f406:	9951      	ldr	r1, [sp, #324]	; 0x144
    f408:	f004 ffdb 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f40c:	e7ff      	b.n	f40e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x277e>
    f40e:	f8dd 1a30 	ldr.w	r1, [sp, #2608]	; 0xa30
    f412:	f64c 60ec 	movw	r0, #52972	; 0xceec
    f416:	f2c0 0001 	movt	r0, #1
    f41a:	6802      	ldr	r2, [r0, #0]
    f41c:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    f420:	f002 fbba 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f424:	e7ff      	b.n	f426 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2796>
    f426:	e7ff      	b.n	f428 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2798>
                if !self.hw.key(self.v[x]) {
    f428:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f42c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f430:	290f      	cmp	r1, #15
    f432:	904e      	str	r0, [sp, #312]	; 0x138
    f434:	f200 87e5 	bhi.w	10402 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3772>
    f438:	e7ff      	b.n	f43a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x27aa>
    f43a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f43e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f442:	1842      	adds	r2, r0, r1
    f444:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    f448:	984e      	ldr	r0, [sp, #312]	; 0x138
    f44a:	f7fc fddc 	bl	c006 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h6ab5fe7f9b6adc84E>
    f44e:	904d      	str	r0, [sp, #308]	; 0x134
    f450:	e7ff      	b.n	f452 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x27c2>
    f452:	984d      	ldr	r0, [sp, #308]	; 0x134
    f454:	07c1      	lsls	r1, r0, #31
    f456:	2900      	cmp	r1, #0
    f458:	d106      	bne.n	f468 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x27d8>
    f45a:	e7ff      	b.n	f45c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x27cc>
                    self.next();
    f45c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f460:	f001 f9fe 	bl	10860 <_ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E>
    f464:	e7ff      	b.n	f466 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x27d6>
                if !self.hw.key(self.v[x]) {
    f466:	e7ff      	b.n	f468 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x27d8>
        match (
    f468:	f000 bec8 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    f46c:	2005      	movs	r0, #5
    f46e:	f8cd 0a60 	str.w	r0, [sp, #2656]	; 0xa60
    f472:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    f476:	f2c0 0001 	movt	r0, #1
    f47a:	6801      	ldr	r1, [r0, #0]
    f47c:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    f480:	f005 f8da 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f484:	904c      	str	r0, [sp, #304]	; 0x130
    f486:	e01f      	b.n	f4c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2838>
    f488:	2001      	movs	r0, #1
    f48a:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    f48e:	e015      	b.n	f4bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x282c>
    f490:	2000      	movs	r0, #0
    f492:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    f496:	e011      	b.n	f4bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x282c>
    f498:	2000      	movs	r0, #0
    f49a:	f88d 0e7b 	strb.w	r0, [sp, #3707]	; 0xe7b
    f49e:	f89d 1e7b 	ldrb.w	r1, [sp, #3707]	; 0xe7b
    f4a2:	f646 206c 	movw	r0, #27244	; 0x6a6c
    f4a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f4aa:	f001 fc6f 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f4ae:	f8cd 0e7c 	str.w	r0, [sp, #3708]	; 0xe7c
    f4b2:	f8dd 0e7c 	ldr.w	r0, [sp, #3708]	; 0xe7c
    f4b6:	f8cd 0a68 	str.w	r0, [sp, #2664]	; 0xa68
    f4ba:	e00a      	b.n	f4d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2842>
    f4bc:	f89d 0a67 	ldrb.w	r0, [sp, #2663]	; 0xa67
    f4c0:	07c0      	lsls	r0, r0, #31
    f4c2:	2800      	cmp	r0, #0
    f4c4:	d112      	bne.n	f4ec <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x285c>
    f4c6:	e055      	b.n	f574 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x28e4>
    f4c8:	984c      	ldr	r0, [sp, #304]	; 0x130
    f4ca:	07c1      	lsls	r1, r0, #31
    f4cc:	2900      	cmp	r1, #0
    f4ce:	d1e3      	bne.n	f498 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2808>
    f4d0:	e7de      	b.n	f490 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2800>
    f4d2:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    f4d6:	f60d 2168 	addw	r1, sp, #2664	; 0xa68
    f4da:	f005 f8ad 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f4de:	904b      	str	r0, [sp, #300]	; 0x12c
    f4e0:	e7ff      	b.n	f4e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2852>
    f4e2:	984b      	ldr	r0, [sp, #300]	; 0x12c
    f4e4:	07c1      	lsls	r1, r0, #31
    f4e6:	2900      	cmp	r1, #0
    f4e8:	d1ce      	bne.n	f488 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x27f8>
    f4ea:	e7d1      	b.n	f490 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2800>
                trace!("[{:04x}] LD Vx, DT", self.pc);
    f4ec:	f64c 607c 	movw	r0, #52860	; 0xce7c
    f4f0:	f2c0 0001 	movt	r0, #1
    f4f4:	6801      	ldr	r1, [r0, #0]
    f4f6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f4fa:	f100 0212 	add.w	r2, r0, #18
    f4fe:	f8cd 2a8c 	str.w	r2, [sp, #2700]	; 0xa8c
    f502:	f8dd 2a8c 	ldr.w	r2, [sp, #2700]	; 0xa8c
    f506:	f8cd 2cd0 	str.w	r2, [sp, #3280]	; 0xcd0
    f50a:	f646 135b 	movw	r3, #26971	; 0x695b
    f50e:	f2c0 0301 	movt	r3, #1
    f512:	4610      	mov	r0, r2
    f514:	914a      	str	r1, [sp, #296]	; 0x128
    f516:	4619      	mov	r1, r3
    f518:	f7fb f90c 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f51c:	9049      	str	r0, [sp, #292]	; 0x124
    f51e:	9148      	str	r1, [sp, #288]	; 0x120
    f520:	e7ff      	b.n	f522 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2892>
    f522:	9849      	ldr	r0, [sp, #292]	; 0x124
    f524:	f8cd 0a84 	str.w	r0, [sp, #2692]	; 0xa84
    f528:	9948      	ldr	r1, [sp, #288]	; 0x120
    f52a:	f8cd 1a88 	str.w	r1, [sp, #2696]	; 0xa88
    f52e:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    f532:	f2c0 0201 	movt	r2, #1
    f536:	6812      	ldr	r2, [r2, #0]
    f538:	466b      	mov	r3, sp
    f53a:	f04f 0c01 	mov.w	ip, #1
    f53e:	f8c3 c008 	str.w	ip, [r3, #8]
    f542:	605a      	str	r2, [r3, #4]
    f544:	f8c3 c000 	str.w	ip, [r3]
    f548:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    f54c:	2202      	movs	r2, #2
    f54e:	f60d 2384 	addw	r3, sp, #2692	; 0xa84
    f552:	994a      	ldr	r1, [sp, #296]	; 0x128
    f554:	f004 ff35 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f558:	e7ff      	b.n	f55a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x28ca>
    f55a:	f8dd 1a60 	ldr.w	r1, [sp, #2656]	; 0xa60
    f55e:	f64c 609c 	movw	r0, #52892	; 0xce9c
    f562:	f2c0 0001 	movt	r0, #1
    f566:	6802      	ldr	r2, [r0, #0]
    f568:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    f56c:	f002 fb14 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f570:	e7ff      	b.n	f572 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x28e2>
    f572:	e7ff      	b.n	f574 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x28e4>
                self.v[x] = self.dt;
    f574:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f578:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    f57c:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    f580:	2a0f      	cmp	r2, #15
    f582:	9147      	str	r1, [sp, #284]	; 0x11c
    f584:	f200 8733 	bhi.w	103ee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x375e>
    f588:	e7ff      	b.n	f58a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x28fa>
    f58a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f58e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f592:	1842      	adds	r2, r0, r1
    f594:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    f596:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    f59a:	f000 be2f 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    f59e:	2005      	movs	r0, #5
    f5a0:	f8cd 0a90 	str.w	r0, [sp, #2704]	; 0xa90
    f5a4:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    f5a8:	f2c0 0001 	movt	r0, #1
    f5ac:	6801      	ldr	r1, [r0, #0]
    f5ae:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    f5b2:	f005 f841 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f5b6:	9046      	str	r0, [sp, #280]	; 0x118
    f5b8:	e01f      	b.n	f5fa <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x296a>
    f5ba:	2001      	movs	r0, #1
    f5bc:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    f5c0:	e015      	b.n	f5ee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x295e>
    f5c2:	2000      	movs	r0, #0
    f5c4:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    f5c8:	e011      	b.n	f5ee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x295e>
    f5ca:	2000      	movs	r0, #0
    f5cc:	f88d 0e83 	strb.w	r0, [sp, #3715]	; 0xe83
    f5d0:	f89d 1e83 	ldrb.w	r1, [sp, #3715]	; 0xe83
    f5d4:	f646 206c 	movw	r0, #27244	; 0x6a6c
    f5d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f5dc:	f001 fbd6 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f5e0:	f8cd 0e84 	str.w	r0, [sp, #3716]	; 0xe84
    f5e4:	f8dd 0e84 	ldr.w	r0, [sp, #3716]	; 0xe84
    f5e8:	f8cd 0a98 	str.w	r0, [sp, #2712]	; 0xa98
    f5ec:	e00a      	b.n	f604 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2974>
    f5ee:	f89d 0a97 	ldrb.w	r0, [sp, #2711]	; 0xa97
    f5f2:	07c0      	lsls	r0, r0, #31
    f5f4:	2800      	cmp	r0, #0
    f5f6:	d112      	bne.n	f61e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x298e>
    f5f8:	e055      	b.n	f6a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a16>
    f5fa:	9846      	ldr	r0, [sp, #280]	; 0x118
    f5fc:	07c1      	lsls	r1, r0, #31
    f5fe:	2900      	cmp	r1, #0
    f600:	d1e3      	bne.n	f5ca <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x293a>
    f602:	e7de      	b.n	f5c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2932>
    f604:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    f608:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
    f60c:	f005 f814 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f610:	9045      	str	r0, [sp, #276]	; 0x114
    f612:	e7ff      	b.n	f614 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2984>
    f614:	9845      	ldr	r0, [sp, #276]	; 0x114
    f616:	07c1      	lsls	r1, r0, #31
    f618:	2900      	cmp	r1, #0
    f61a:	d1ce      	bne.n	f5ba <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x292a>
    f61c:	e7d1      	b.n	f5c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2932>
                trace!("[{:04x}] LD Vx, K", self.pc);
    f61e:	f64c 602c 	movw	r0, #52780	; 0xce2c
    f622:	f2c0 0001 	movt	r0, #1
    f626:	6801      	ldr	r1, [r0, #0]
    f628:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f62c:	f100 0212 	add.w	r2, r0, #18
    f630:	f8cd 2abc 	str.w	r2, [sp, #2748]	; 0xabc
    f634:	f8dd 2abc 	ldr.w	r2, [sp, #2748]	; 0xabc
    f638:	f8cd 2ccc 	str.w	r2, [sp, #3276]	; 0xccc
    f63c:	f646 135b 	movw	r3, #26971	; 0x695b
    f640:	f2c0 0301 	movt	r3, #1
    f644:	4610      	mov	r0, r2
    f646:	9144      	str	r1, [sp, #272]	; 0x110
    f648:	4619      	mov	r1, r3
    f64a:	f7fb f873 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f64e:	9043      	str	r0, [sp, #268]	; 0x10c
    f650:	9142      	str	r1, [sp, #264]	; 0x108
    f652:	e7ff      	b.n	f654 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x29c4>
    f654:	9843      	ldr	r0, [sp, #268]	; 0x10c
    f656:	f8cd 0ab4 	str.w	r0, [sp, #2740]	; 0xab4
    f65a:	9942      	ldr	r1, [sp, #264]	; 0x108
    f65c:	f8cd 1ab8 	str.w	r1, [sp, #2744]	; 0xab8
    f660:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    f664:	f2c0 0201 	movt	r2, #1
    f668:	6812      	ldr	r2, [r2, #0]
    f66a:	466b      	mov	r3, sp
    f66c:	f04f 0c01 	mov.w	ip, #1
    f670:	f8c3 c008 	str.w	ip, [r3, #8]
    f674:	605a      	str	r2, [r3, #4]
    f676:	f8c3 c000 	str.w	ip, [r3]
    f67a:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    f67e:	2202      	movs	r2, #2
    f680:	f60d 23b4 	addw	r3, sp, #2740	; 0xab4
    f684:	9944      	ldr	r1, [sp, #272]	; 0x110
    f686:	f004 fe9c 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f68a:	e7ff      	b.n	f68c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x29fc>
    f68c:	f8dd 1a90 	ldr.w	r1, [sp, #2704]	; 0xa90
    f690:	f64c 604c 	movw	r0, #52812	; 0xce4c
    f694:	f2c0 0001 	movt	r0, #1
    f698:	6802      	ldr	r2, [r0, #0]
    f69a:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    f69e:	f002 fa7b 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f6a2:	e7ff      	b.n	f6a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a14>
    f6a4:	e7ff      	b.n	f6a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a16>
                self.v[x] = self.waitkey();
    f6a6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f6aa:	f001 fa1b 	bl	10ae4 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E>
    f6ae:	9041      	str	r0, [sp, #260]	; 0x104
    f6b0:	e7ff      	b.n	f6b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a22>
    f6b2:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f6b6:	280f      	cmp	r0, #15
    f6b8:	f200 868f 	bhi.w	103da <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x374a>
    f6bc:	e7ff      	b.n	f6be <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a2e>
    f6be:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f6c2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f6c6:	1842      	adds	r2, r0, r1
    f6c8:	9b41      	ldr	r3, [sp, #260]	; 0x104
    f6ca:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    f6ce:	f000 bd95 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    f6d2:	2005      	movs	r0, #5
    f6d4:	f8cd 0ac0 	str.w	r0, [sp, #2752]	; 0xac0
    f6d8:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    f6dc:	f2c0 0001 	movt	r0, #1
    f6e0:	6801      	ldr	r1, [r0, #0]
    f6e2:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    f6e6:	f004 ffa7 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f6ea:	9040      	str	r0, [sp, #256]	; 0x100
    f6ec:	e01f      	b.n	f72e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a9e>
    f6ee:	2001      	movs	r0, #1
    f6f0:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    f6f4:	e015      	b.n	f722 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a92>
    f6f6:	2000      	movs	r0, #0
    f6f8:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    f6fc:	e011      	b.n	f722 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a92>
    f6fe:	2000      	movs	r0, #0
    f700:	f88d 0e8b 	strb.w	r0, [sp, #3723]	; 0xe8b
    f704:	f89d 1e8b 	ldrb.w	r1, [sp, #3723]	; 0xe8b
    f708:	f646 206c 	movw	r0, #27244	; 0x6a6c
    f70c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f710:	f001 fb3c 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f714:	f8cd 0e8c 	str.w	r0, [sp, #3724]	; 0xe8c
    f718:	f8dd 0e8c 	ldr.w	r0, [sp, #3724]	; 0xe8c
    f71c:	f8cd 0ac8 	str.w	r0, [sp, #2760]	; 0xac8
    f720:	e00a      	b.n	f738 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2aa8>
    f722:	f89d 0ac7 	ldrb.w	r0, [sp, #2759]	; 0xac7
    f726:	07c0      	lsls	r0, r0, #31
    f728:	2800      	cmp	r0, #0
    f72a:	d112      	bne.n	f752 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2ac2>
    f72c:	e055      	b.n	f7da <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b4a>
    f72e:	9840      	ldr	r0, [sp, #256]	; 0x100
    f730:	07c1      	lsls	r1, r0, #31
    f732:	2900      	cmp	r1, #0
    f734:	d1e3      	bne.n	f6fe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a6e>
    f736:	e7de      	b.n	f6f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a66>
    f738:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    f73c:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
    f740:	f004 ff7a 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f744:	903f      	str	r0, [sp, #252]	; 0xfc
    f746:	e7ff      	b.n	f748 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2ab8>
    f748:	983f      	ldr	r0, [sp, #252]	; 0xfc
    f74a:	07c1      	lsls	r1, r0, #31
    f74c:	2900      	cmp	r1, #0
    f74e:	d1ce      	bne.n	f6ee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a5e>
    f750:	e7d1      	b.n	f6f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2a66>
                trace!("[{:04x}] LD DT, Vx", self.pc);
    f752:	f64c 50dc 	movw	r0, #52700	; 0xcddc
    f756:	f2c0 0001 	movt	r0, #1
    f75a:	6801      	ldr	r1, [r0, #0]
    f75c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f760:	f100 0212 	add.w	r2, r0, #18
    f764:	f8cd 2aec 	str.w	r2, [sp, #2796]	; 0xaec
    f768:	f8dd 2aec 	ldr.w	r2, [sp, #2796]	; 0xaec
    f76c:	f8cd 2cc8 	str.w	r2, [sp, #3272]	; 0xcc8
    f770:	f646 135b 	movw	r3, #26971	; 0x695b
    f774:	f2c0 0301 	movt	r3, #1
    f778:	4610      	mov	r0, r2
    f77a:	913e      	str	r1, [sp, #248]	; 0xf8
    f77c:	4619      	mov	r1, r3
    f77e:	f7fa ffd9 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f782:	903d      	str	r0, [sp, #244]	; 0xf4
    f784:	913c      	str	r1, [sp, #240]	; 0xf0
    f786:	e7ff      	b.n	f788 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2af8>
    f788:	983d      	ldr	r0, [sp, #244]	; 0xf4
    f78a:	f8cd 0ae4 	str.w	r0, [sp, #2788]	; 0xae4
    f78e:	993c      	ldr	r1, [sp, #240]	; 0xf0
    f790:	f8cd 1ae8 	str.w	r1, [sp, #2792]	; 0xae8
    f794:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    f798:	f2c0 0201 	movt	r2, #1
    f79c:	6812      	ldr	r2, [r2, #0]
    f79e:	466b      	mov	r3, sp
    f7a0:	f04f 0c01 	mov.w	ip, #1
    f7a4:	f8c3 c008 	str.w	ip, [r3, #8]
    f7a8:	605a      	str	r2, [r3, #4]
    f7aa:	f8c3 c000 	str.w	ip, [r3]
    f7ae:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    f7b2:	2202      	movs	r2, #2
    f7b4:	f60d 23e4 	addw	r3, sp, #2788	; 0xae4
    f7b8:	993e      	ldr	r1, [sp, #248]	; 0xf8
    f7ba:	f004 fe02 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f7be:	e7ff      	b.n	f7c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b30>
    f7c0:	f8dd 1ac0 	ldr.w	r1, [sp, #2752]	; 0xac0
    f7c4:	f64c 50fc 	movw	r0, #52732	; 0xcdfc
    f7c8:	f2c0 0001 	movt	r0, #1
    f7cc:	6802      	ldr	r2, [r0, #0]
    f7ce:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    f7d2:	f002 f9e1 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f7d6:	e7ff      	b.n	f7d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b48>
    f7d8:	e7ff      	b.n	f7da <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b4a>
                self.dt = self.v[x];
    f7da:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f7de:	280f      	cmp	r0, #15
    f7e0:	f200 85f1 	bhi.w	103c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3736>
    f7e4:	e7ff      	b.n	f7e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b56>
    f7e6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f7ea:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f7ee:	1842      	adds	r2, r0, r1
    f7f0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f7f4:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
        match (
    f7f8:	f000 bd00 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    f7fc:	2005      	movs	r0, #5
    f7fe:	f8cd 0af0 	str.w	r0, [sp, #2800]	; 0xaf0
    f802:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    f806:	f2c0 0001 	movt	r0, #1
    f80a:	6801      	ldr	r1, [r0, #0]
    f80c:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    f810:	f004 ff12 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f814:	903b      	str	r0, [sp, #236]	; 0xec
    f816:	e01f      	b.n	f858 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2bc8>
    f818:	2001      	movs	r0, #1
    f81a:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    f81e:	e015      	b.n	f84c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2bbc>
    f820:	2000      	movs	r0, #0
    f822:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    f826:	e011      	b.n	f84c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2bbc>
    f828:	2000      	movs	r0, #0
    f82a:	f88d 0e93 	strb.w	r0, [sp, #3731]	; 0xe93
    f82e:	f89d 1e93 	ldrb.w	r1, [sp, #3731]	; 0xe93
    f832:	f646 206c 	movw	r0, #27244	; 0x6a6c
    f836:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f83a:	f001 faa7 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f83e:	f8cd 0e94 	str.w	r0, [sp, #3732]	; 0xe94
    f842:	f8dd 0e94 	ldr.w	r0, [sp, #3732]	; 0xe94
    f846:	f8cd 0af8 	str.w	r0, [sp, #2808]	; 0xaf8
    f84a:	e00a      	b.n	f862 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2bd2>
    f84c:	f89d 0af7 	ldrb.w	r0, [sp, #2807]	; 0xaf7
    f850:	07c0      	lsls	r0, r0, #31
    f852:	2800      	cmp	r0, #0
    f854:	d112      	bne.n	f87c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2bec>
    f856:	e055      	b.n	f904 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2c74>
    f858:	983b      	ldr	r0, [sp, #236]	; 0xec
    f85a:	07c1      	lsls	r1, r0, #31
    f85c:	2900      	cmp	r1, #0
    f85e:	d1e3      	bne.n	f828 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b98>
    f860:	e7de      	b.n	f820 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b90>
    f862:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    f866:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
    f86a:	f004 fee5 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f86e:	903a      	str	r0, [sp, #232]	; 0xe8
    f870:	e7ff      	b.n	f872 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2be2>
    f872:	983a      	ldr	r0, [sp, #232]	; 0xe8
    f874:	07c1      	lsls	r1, r0, #31
    f876:	2900      	cmp	r1, #0
    f878:	d1ce      	bne.n	f818 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b88>
    f87a:	e7d1      	b.n	f820 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2b90>
                trace!("[{:04x}] LD ST, Vx", self.pc);
    f87c:	f64c 508c 	movw	r0, #52620	; 0xcd8c
    f880:	f2c0 0001 	movt	r0, #1
    f884:	6801      	ldr	r1, [r0, #0]
    f886:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f88a:	f100 0212 	add.w	r2, r0, #18
    f88e:	f8cd 2b1c 	str.w	r2, [sp, #2844]	; 0xb1c
    f892:	f8dd 2b1c 	ldr.w	r2, [sp, #2844]	; 0xb1c
    f896:	f8cd 2cc4 	str.w	r2, [sp, #3268]	; 0xcc4
    f89a:	f646 135b 	movw	r3, #26971	; 0x695b
    f89e:	f2c0 0301 	movt	r3, #1
    f8a2:	4610      	mov	r0, r2
    f8a4:	9139      	str	r1, [sp, #228]	; 0xe4
    f8a6:	4619      	mov	r1, r3
    f8a8:	f7fa ff44 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f8ac:	9038      	str	r0, [sp, #224]	; 0xe0
    f8ae:	9137      	str	r1, [sp, #220]	; 0xdc
    f8b0:	e7ff      	b.n	f8b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2c22>
    f8b2:	9838      	ldr	r0, [sp, #224]	; 0xe0
    f8b4:	f8cd 0b14 	str.w	r0, [sp, #2836]	; 0xb14
    f8b8:	9937      	ldr	r1, [sp, #220]	; 0xdc
    f8ba:	f8cd 1b18 	str.w	r1, [sp, #2840]	; 0xb18
    f8be:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    f8c2:	f2c0 0201 	movt	r2, #1
    f8c6:	6812      	ldr	r2, [r2, #0]
    f8c8:	466b      	mov	r3, sp
    f8ca:	f04f 0c01 	mov.w	ip, #1
    f8ce:	f8c3 c008 	str.w	ip, [r3, #8]
    f8d2:	605a      	str	r2, [r3, #4]
    f8d4:	f8c3 c000 	str.w	ip, [r3]
    f8d8:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    f8dc:	2202      	movs	r2, #2
    f8de:	f60d 3314 	addw	r3, sp, #2836	; 0xb14
    f8e2:	9939      	ldr	r1, [sp, #228]	; 0xe4
    f8e4:	f004 fd6d 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f8e8:	e7ff      	b.n	f8ea <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2c5a>
    f8ea:	f8dd 1af0 	ldr.w	r1, [sp, #2800]	; 0xaf0
    f8ee:	f64c 50ac 	movw	r0, #52652	; 0xcdac
    f8f2:	f2c0 0001 	movt	r0, #1
    f8f6:	6802      	ldr	r2, [r0, #0]
    f8f8:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    f8fc:	f002 f94c 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f900:	e7ff      	b.n	f902 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2c72>
    f902:	e7ff      	b.n	f904 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2c74>
                self.st = self.v[x];
    f904:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f908:	280f      	cmp	r0, #15
    f90a:	f200 8552 	bhi.w	103b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3722>
    f90e:	e7ff      	b.n	f910 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2c80>
    f910:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f914:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f918:	1842      	adds	r2, r0, r1
    f91a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f91e:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
        match (
    f922:	f000 bc6b 	b.w	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    f926:	2005      	movs	r0, #5
    f928:	f8cd 0b20 	str.w	r0, [sp, #2848]	; 0xb20
    f92c:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    f930:	f2c0 0001 	movt	r0, #1
    f934:	6801      	ldr	r1, [r0, #0]
    f936:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    f93a:	f004 fe7d 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f93e:	9036      	str	r0, [sp, #216]	; 0xd8
    f940:	e01f      	b.n	f982 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2cf2>
    f942:	2001      	movs	r0, #1
    f944:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    f948:	e015      	b.n	f976 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2ce6>
    f94a:	2000      	movs	r0, #0
    f94c:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    f950:	e011      	b.n	f976 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2ce6>
    f952:	2000      	movs	r0, #0
    f954:	f88d 0e9b 	strb.w	r0, [sp, #3739]	; 0xe9b
    f958:	f89d 1e9b 	ldrb.w	r1, [sp, #3739]	; 0xe9b
    f95c:	f646 206c 	movw	r0, #27244	; 0x6a6c
    f960:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f964:	f001 fa12 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f968:	f8cd 0e9c 	str.w	r0, [sp, #3740]	; 0xe9c
    f96c:	f8dd 0e9c 	ldr.w	r0, [sp, #3740]	; 0xe9c
    f970:	f8cd 0b28 	str.w	r0, [sp, #2856]	; 0xb28
    f974:	e00a      	b.n	f98c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2cfc>
    f976:	f89d 0b27 	ldrb.w	r0, [sp, #2855]	; 0xb27
    f97a:	07c0      	lsls	r0, r0, #31
    f97c:	2800      	cmp	r0, #0
    f97e:	d112      	bne.n	f9a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2d16>
    f980:	e055      	b.n	fa2e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2d9e>
    f982:	9836      	ldr	r0, [sp, #216]	; 0xd8
    f984:	07c1      	lsls	r1, r0, #31
    f986:	2900      	cmp	r1, #0
    f988:	d1e3      	bne.n	f952 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2cc2>
    f98a:	e7de      	b.n	f94a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2cba>
    f98c:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    f990:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
    f994:	f004 fe50 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f998:	9035      	str	r0, [sp, #212]	; 0xd4
    f99a:	e7ff      	b.n	f99c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2d0c>
    f99c:	9835      	ldr	r0, [sp, #212]	; 0xd4
    f99e:	07c1      	lsls	r1, r0, #31
    f9a0:	2900      	cmp	r1, #0
    f9a2:	d1ce      	bne.n	f942 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2cb2>
    f9a4:	e7d1      	b.n	f94a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2cba>
                trace!("[{:04x}] ADD I, Vx", self.pc);
    f9a6:	f64c 503c 	movw	r0, #52540	; 0xcd3c
    f9aa:	f2c0 0001 	movt	r0, #1
    f9ae:	6801      	ldr	r1, [r0, #0]
    f9b0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f9b4:	f100 0212 	add.w	r2, r0, #18
    f9b8:	f8cd 2b4c 	str.w	r2, [sp, #2892]	; 0xb4c
    f9bc:	f8dd 2b4c 	ldr.w	r2, [sp, #2892]	; 0xb4c
    f9c0:	f8cd 2cc0 	str.w	r2, [sp, #3264]	; 0xcc0
    f9c4:	f646 135b 	movw	r3, #26971	; 0x695b
    f9c8:	f2c0 0301 	movt	r3, #1
    f9cc:	4610      	mov	r0, r2
    f9ce:	9134      	str	r1, [sp, #208]	; 0xd0
    f9d0:	4619      	mov	r1, r3
    f9d2:	f7fa feaf 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f9d6:	9033      	str	r0, [sp, #204]	; 0xcc
    f9d8:	9132      	str	r1, [sp, #200]	; 0xc8
    f9da:	e7ff      	b.n	f9dc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2d4c>
    f9dc:	9833      	ldr	r0, [sp, #204]	; 0xcc
    f9de:	f8cd 0b44 	str.w	r0, [sp, #2884]	; 0xb44
    f9e2:	9932      	ldr	r1, [sp, #200]	; 0xc8
    f9e4:	f8cd 1b48 	str.w	r1, [sp, #2888]	; 0xb48
    f9e8:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    f9ec:	f2c0 0201 	movt	r2, #1
    f9f0:	6812      	ldr	r2, [r2, #0]
    f9f2:	466b      	mov	r3, sp
    f9f4:	f04f 0c01 	mov.w	ip, #1
    f9f8:	f8c3 c008 	str.w	ip, [r3, #8]
    f9fc:	605a      	str	r2, [r3, #4]
    f9fe:	f8c3 c000 	str.w	ip, [r3]
    fa02:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    fa06:	2202      	movs	r2, #2
    fa08:	f60d 3344 	addw	r3, sp, #2884	; 0xb44
    fa0c:	9934      	ldr	r1, [sp, #208]	; 0xd0
    fa0e:	f004 fcd8 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fa12:	e7ff      	b.n	fa14 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2d84>
    fa14:	f8dd 1b20 	ldr.w	r1, [sp, #2848]	; 0xb20
    fa18:	f64c 505c 	movw	r0, #52572	; 0xcd5c
    fa1c:	f2c0 0001 	movt	r0, #1
    fa20:	6802      	ldr	r2, [r0, #0]
    fa22:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    fa26:	f002 f8b7 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fa2a:	e7ff      	b.n	fa2c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2d9c>
    fa2c:	e7ff      	b.n	fa2e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2d9e>
                self.i = self.i.wrapping_add(self.v[x].into());
    fa2e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fa32:	8a01      	ldrh	r1, [r0, #16]
    fa34:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    fa38:	2a0f      	cmp	r2, #15
    fa3a:	9131      	str	r1, [sp, #196]	; 0xc4
    fa3c:	f200 84af 	bhi.w	1039e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x370e>
    fa40:	e7ff      	b.n	fa42 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2db2>
    fa42:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fa46:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fa4a:	1842      	adds	r2, r0, r1
    fa4c:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    fa50:	f001 f98f 	bl	10d72 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
    fa54:	9030      	str	r0, [sp, #192]	; 0xc0
    fa56:	e7ff      	b.n	fa58 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2dc8>
    fa58:	9831      	ldr	r0, [sp, #196]	; 0xc4
    fa5a:	9930      	ldr	r1, [sp, #192]	; 0xc0
    fa5c:	f004 fdb2 	bl	145c4 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
    fa60:	902f      	str	r0, [sp, #188]	; 0xbc
    fa62:	e7ff      	b.n	fa64 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2dd4>
    fa64:	982f      	ldr	r0, [sp, #188]	; 0xbc
    fa66:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    fa6a:	8208      	strh	r0, [r1, #16]
        match (
    fa6c:	e3c6      	b.n	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    fa6e:	2005      	movs	r0, #5
    fa70:	f8cd 0b50 	str.w	r0, [sp, #2896]	; 0xb50
    fa74:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    fa78:	f2c0 0001 	movt	r0, #1
    fa7c:	6801      	ldr	r1, [r0, #0]
    fa7e:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    fa82:	f004 fdd9 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fa86:	902e      	str	r0, [sp, #184]	; 0xb8
    fa88:	e01f      	b.n	faca <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2e3a>
    fa8a:	2001      	movs	r0, #1
    fa8c:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    fa90:	e015      	b.n	fabe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2e2e>
    fa92:	2000      	movs	r0, #0
    fa94:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    fa98:	e011      	b.n	fabe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2e2e>
    fa9a:	2000      	movs	r0, #0
    fa9c:	f88d 0ea3 	strb.w	r0, [sp, #3747]	; 0xea3
    faa0:	f89d 1ea3 	ldrb.w	r1, [sp, #3747]	; 0xea3
    faa4:	f646 206c 	movw	r0, #27244	; 0x6a6c
    faa8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    faac:	f001 f96e 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fab0:	f8cd 0ea4 	str.w	r0, [sp, #3748]	; 0xea4
    fab4:	f8dd 0ea4 	ldr.w	r0, [sp, #3748]	; 0xea4
    fab8:	f8cd 0b58 	str.w	r0, [sp, #2904]	; 0xb58
    fabc:	e00a      	b.n	fad4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2e44>
    fabe:	f89d 0b57 	ldrb.w	r0, [sp, #2903]	; 0xb57
    fac2:	07c0      	lsls	r0, r0, #31
    fac4:	2800      	cmp	r0, #0
    fac6:	d112      	bne.n	faee <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2e5e>
    fac8:	e055      	b.n	fb76 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2ee6>
    faca:	982e      	ldr	r0, [sp, #184]	; 0xb8
    facc:	07c1      	lsls	r1, r0, #31
    face:	2900      	cmp	r1, #0
    fad0:	d1e3      	bne.n	fa9a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2e0a>
    fad2:	e7de      	b.n	fa92 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2e02>
    fad4:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    fad8:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
    fadc:	f004 fdac 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fae0:	902d      	str	r0, [sp, #180]	; 0xb4
    fae2:	e7ff      	b.n	fae4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2e54>
    fae4:	982d      	ldr	r0, [sp, #180]	; 0xb4
    fae6:	07c1      	lsls	r1, r0, #31
    fae8:	2900      	cmp	r1, #0
    faea:	d1ce      	bne.n	fa8a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2dfa>
    faec:	e7d1      	b.n	fa92 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2e02>
                trace!("[{:04x}] LD F, Vx", self.pc);
    faee:	f64c 40b8 	movw	r0, #52408	; 0xccb8
    faf2:	f2c0 0001 	movt	r0, #1
    faf6:	6801      	ldr	r1, [r0, #0]
    faf8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fafc:	f100 0212 	add.w	r2, r0, #18
    fb00:	f8cd 2b7c 	str.w	r2, [sp, #2940]	; 0xb7c
    fb04:	f8dd 2b7c 	ldr.w	r2, [sp, #2940]	; 0xb7c
    fb08:	f8cd 2cbc 	str.w	r2, [sp, #3260]	; 0xcbc
    fb0c:	f646 135b 	movw	r3, #26971	; 0x695b
    fb10:	f2c0 0301 	movt	r3, #1
    fb14:	4610      	mov	r0, r2
    fb16:	912c      	str	r1, [sp, #176]	; 0xb0
    fb18:	4619      	mov	r1, r3
    fb1a:	f7fa fe0b 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fb1e:	902b      	str	r0, [sp, #172]	; 0xac
    fb20:	912a      	str	r1, [sp, #168]	; 0xa8
    fb22:	e7ff      	b.n	fb24 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2e94>
    fb24:	982b      	ldr	r0, [sp, #172]	; 0xac
    fb26:	f8cd 0b74 	str.w	r0, [sp, #2932]	; 0xb74
    fb2a:	992a      	ldr	r1, [sp, #168]	; 0xa8
    fb2c:	f8cd 1b78 	str.w	r1, [sp, #2936]	; 0xb78
    fb30:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    fb34:	f2c0 0201 	movt	r2, #1
    fb38:	6812      	ldr	r2, [r2, #0]
    fb3a:	466b      	mov	r3, sp
    fb3c:	f04f 0c01 	mov.w	ip, #1
    fb40:	f8c3 c008 	str.w	ip, [r3, #8]
    fb44:	605a      	str	r2, [r3, #4]
    fb46:	f8c3 c000 	str.w	ip, [r3]
    fb4a:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    fb4e:	2202      	movs	r2, #2
    fb50:	f60d 3374 	addw	r3, sp, #2932	; 0xb74
    fb54:	992c      	ldr	r1, [sp, #176]	; 0xb0
    fb56:	f004 fc34 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fb5a:	e7ff      	b.n	fb5c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2ecc>
    fb5c:	f8dd 1b50 	ldr.w	r1, [sp, #2896]	; 0xb50
    fb60:	f64c 40d8 	movw	r0, #52440	; 0xccd8
    fb64:	f2c0 0001 	movt	r0, #1
    fb68:	6802      	ldr	r2, [r0, #0]
    fb6a:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    fb6e:	f002 f813 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fb72:	e7ff      	b.n	fb74 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2ee4>
    fb74:	e7ff      	b.n	fb76 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2ee6>
                self.i = (self.v[x] * 5).into();
    fb76:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fb7a:	280f      	cmp	r0, #15
    fb7c:	f200 83f9 	bhi.w	10372 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x36e2>
    fb80:	e7ff      	b.n	fb82 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2ef2>
    fb82:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fb86:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fb8a:	1842      	adds	r2, r0, r1
    fb8c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    fb90:	2305      	movs	r3, #5
    fb92:	fba2 2303 	umull	r2, r3, r2, r3
    fb96:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    fb9a:	f04f 0e00 	mov.w	lr, #0
    fb9e:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
    fba2:	bf18      	it	ne
    fba4:	f04f 0c01 	movne.w	ip, #1
    fba8:	2b00      	cmp	r3, #0
    fbaa:	bf18      	it	ne
    fbac:	2301      	movne	r3, #1
    fbae:	ea43 030c 	orr.w	r3, r3, ip
    fbb2:	2b00      	cmp	r3, #0
    fbb4:	9229      	str	r2, [sp, #164]	; 0xa4
    fbb6:	f040 83e6 	bne.w	10386 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x36f6>
    fbba:	e7ff      	b.n	fbbc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f2c>
    fbbc:	9829      	ldr	r0, [sp, #164]	; 0xa4
    fbbe:	f001 f8d8 	bl	10d72 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
    fbc2:	9028      	str	r0, [sp, #160]	; 0xa0
    fbc4:	e7ff      	b.n	fbc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f36>
    fbc6:	9828      	ldr	r0, [sp, #160]	; 0xa0
    fbc8:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    fbcc:	8208      	strh	r0, [r1, #16]
        match (
    fbce:	e315      	b.n	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    fbd0:	2005      	movs	r0, #5
    fbd2:	f8cd 0b80 	str.w	r0, [sp, #2944]	; 0xb80
    fbd6:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    fbda:	f2c0 0001 	movt	r0, #1
    fbde:	6801      	ldr	r1, [r0, #0]
    fbe0:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    fbe4:	f004 fd28 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fbe8:	9027      	str	r0, [sp, #156]	; 0x9c
    fbea:	e01f      	b.n	fc2c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f9c>
    fbec:	2001      	movs	r0, #1
    fbee:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    fbf2:	e015      	b.n	fc20 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f90>
    fbf4:	2000      	movs	r0, #0
    fbf6:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    fbfa:	e011      	b.n	fc20 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f90>
    fbfc:	2000      	movs	r0, #0
    fbfe:	f88d 0eab 	strb.w	r0, [sp, #3755]	; 0xeab
    fc02:	f89d 1eab 	ldrb.w	r1, [sp, #3755]	; 0xeab
    fc06:	f646 206c 	movw	r0, #27244	; 0x6a6c
    fc0a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fc0e:	f001 f8bd 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fc12:	f8cd 0eac 	str.w	r0, [sp, #3756]	; 0xeac
    fc16:	f8dd 0eac 	ldr.w	r0, [sp, #3756]	; 0xeac
    fc1a:	f8cd 0b88 	str.w	r0, [sp, #2952]	; 0xb88
    fc1e:	e00a      	b.n	fc36 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2fa6>
    fc20:	f89d 0b87 	ldrb.w	r0, [sp, #2951]	; 0xb87
    fc24:	07c0      	lsls	r0, r0, #31
    fc26:	2800      	cmp	r0, #0
    fc28:	d112      	bne.n	fc50 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2fc0>
    fc2a:	e055      	b.n	fcd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3048>
    fc2c:	9827      	ldr	r0, [sp, #156]	; 0x9c
    fc2e:	07c1      	lsls	r1, r0, #31
    fc30:	2900      	cmp	r1, #0
    fc32:	d1e3      	bne.n	fbfc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f6c>
    fc34:	e7de      	b.n	fbf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f64>
    fc36:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    fc3a:	f60d 3188 	addw	r1, sp, #2952	; 0xb88
    fc3e:	f004 fcfb 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fc42:	9026      	str	r0, [sp, #152]	; 0x98
    fc44:	e7ff      	b.n	fc46 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2fb6>
    fc46:	9826      	ldr	r0, [sp, #152]	; 0x98
    fc48:	07c1      	lsls	r1, r0, #31
    fc4a:	2900      	cmp	r1, #0
    fc4c:	d1ce      	bne.n	fbec <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f5c>
    fc4e:	e7d1      	b.n	fbf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2f64>
                trace!("[{:04x}] LD B, Vx", self.pc);
    fc50:	f64c 4018 	movw	r0, #52248	; 0xcc18
    fc54:	f2c0 0001 	movt	r0, #1
    fc58:	6801      	ldr	r1, [r0, #0]
    fc5a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fc5e:	f100 0212 	add.w	r2, r0, #18
    fc62:	f8cd 2bac 	str.w	r2, [sp, #2988]	; 0xbac
    fc66:	f8dd 2bac 	ldr.w	r2, [sp, #2988]	; 0xbac
    fc6a:	f8cd 2cb4 	str.w	r2, [sp, #3252]	; 0xcb4
    fc6e:	f646 135b 	movw	r3, #26971	; 0x695b
    fc72:	f2c0 0301 	movt	r3, #1
    fc76:	4610      	mov	r0, r2
    fc78:	9125      	str	r1, [sp, #148]	; 0x94
    fc7a:	4619      	mov	r1, r3
    fc7c:	f7fa fd5a 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fc80:	9024      	str	r0, [sp, #144]	; 0x90
    fc82:	9123      	str	r1, [sp, #140]	; 0x8c
    fc84:	e7ff      	b.n	fc86 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x2ff6>
    fc86:	9824      	ldr	r0, [sp, #144]	; 0x90
    fc88:	f8cd 0ba4 	str.w	r0, [sp, #2980]	; 0xba4
    fc8c:	9923      	ldr	r1, [sp, #140]	; 0x8c
    fc8e:	f8cd 1ba8 	str.w	r1, [sp, #2984]	; 0xba8
    fc92:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    fc96:	f2c0 0201 	movt	r2, #1
    fc9a:	6812      	ldr	r2, [r2, #0]
    fc9c:	466b      	mov	r3, sp
    fc9e:	f04f 0c01 	mov.w	ip, #1
    fca2:	f8c3 c008 	str.w	ip, [r3, #8]
    fca6:	605a      	str	r2, [r3, #4]
    fca8:	f8c3 c000 	str.w	ip, [r3]
    fcac:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    fcb0:	2202      	movs	r2, #2
    fcb2:	f60d 33a4 	addw	r3, sp, #2980	; 0xba4
    fcb6:	9925      	ldr	r1, [sp, #148]	; 0x94
    fcb8:	f004 fb83 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fcbc:	e7ff      	b.n	fcbe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x302e>
    fcbe:	f8dd 1b80 	ldr.w	r1, [sp, #2944]	; 0xb80
    fcc2:	f64c 4038 	movw	r0, #52280	; 0xcc38
    fcc6:	f2c0 0001 	movt	r0, #1
    fcca:	6802      	ldr	r2, [r0, #0]
    fccc:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    fcd0:	f001 ff62 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fcd4:	e7ff      	b.n	fcd6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3046>
    fcd6:	e7ff      	b.n	fcd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3048>
                let bcd = self.v[x];
    fcd8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fcdc:	280f      	cmp	r0, #15
    fcde:	f200 8308 	bhi.w	102f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3662>
    fce2:	e7ff      	b.n	fce4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3054>
    fce4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fce8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fcec:	1842      	adds	r2, r0, r1
    fcee:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    fcf2:	4613      	mov	r3, r2
    fcf4:	f88d 2cbb 	strb.w	r2, [sp, #3259]	; 0xcbb
    fcf8:	f248 5c1f 	movw	ip, #34079	; 0x851f
    fcfc:	f2c5 1ceb 	movt	ip, #20971	; 0x51eb
                self.mem[self.i as usize] = (bcd / 100) % 10;
    fd00:	fba2 2c0c 	umull	r2, ip, r2, ip
    fd04:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    fd08:	f8b0 e010 	ldrh.w	lr, [r0, #16]
    fd0c:	4674      	mov	r4, lr
    fd0e:	2500      	movs	r5, #0
    fd10:	ebb5 3f1e 	cmp.w	r5, lr, lsr #12
    fd14:	9322      	str	r3, [sp, #136]	; 0x88
    fd16:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    fd1a:	9420      	str	r4, [sp, #128]	; 0x80
    fd1c:	f040 82f3 	bne.w	10306 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3676>
    fd20:	e7ff      	b.n	fd22 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3092>
    fd22:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fd26:	9920      	ldr	r1, [sp, #128]	; 0x80
    fd28:	1842      	adds	r2, r0, r1
    fd2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
    fd2c:	fa5f fc83 	uxtb.w	ip, r3
    fd30:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    fd34:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    fd38:	fbac 450e 	umull	r4, r5, ip, lr
    fd3c:	08ed      	lsrs	r5, r5, #3
    fd3e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    fd42:	ebac 0c45 	sub.w	ip, ip, r5, lsl #1
    fd46:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    fd4a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    fd4c:	fa5f fc82 	uxtb.w	ip, r2
    fd50:	fbac ce0e 	umull	ip, lr, ip, lr
    fd54:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    fd58:	8a05      	ldrh	r5, [r0, #16]
    fd5a:	3501      	adds	r5, #1
    fd5c:	2600      	movs	r6, #0
    fd5e:	2e00      	cmp	r6, #0
    fd60:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
    fd64:	951e      	str	r5, [sp, #120]	; 0x78
    fd66:	f040 82d8 	bne.w	1031a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x368a>
    fd6a:	e7ff      	b.n	fd6c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x30dc>
    fd6c:	2000      	movs	r0, #0
    fd6e:	991e      	ldr	r1, [sp, #120]	; 0x78
    fd70:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    fd74:	f040 82dd 	bne.w	10332 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x36a2>
    fd78:	e7ff      	b.n	fd7a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x30ea>
    fd7a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fd7e:	991e      	ldr	r1, [sp, #120]	; 0x78
    fd80:	1842      	adds	r2, r0, r1
    fd82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    fd84:	fa5f fc83 	uxtb.w	ip, r3
    fd88:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    fd8c:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    fd90:	fbac e40e 	umull	lr, r4, ip, lr
    fd94:	08e4      	lsrs	r4, r4, #3
    fd96:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    fd9a:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    fd9e:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 2] = bcd % 10;
    fda2:	8a02      	ldrh	r2, [r0, #16]
    fda4:	3202      	adds	r2, #2
    fda6:	f04f 0c00 	mov.w	ip, #0
    fdaa:	f1bc 0f00 	cmp.w	ip, #0
    fdae:	921d      	str	r2, [sp, #116]	; 0x74
    fdb0:	f040 82c9 	bne.w	10346 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x36b6>
    fdb4:	e7ff      	b.n	fdb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3126>
    fdb6:	2000      	movs	r0, #0
    fdb8:	991d      	ldr	r1, [sp, #116]	; 0x74
    fdba:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    fdbe:	f040 82ce 	bne.w	1035e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x36ce>
    fdc2:	e7ff      	b.n	fdc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3134>
    fdc4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fdc8:	991d      	ldr	r1, [sp, #116]	; 0x74
    fdca:	1842      	adds	r2, r0, r1
    fdcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fdce:	fa5f fc83 	uxtb.w	ip, r3
    fdd2:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    fdd6:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    fdda:	fbac e40e 	umull	lr, r4, ip, lr
    fdde:	08e4      	lsrs	r4, r4, #3
    fde0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    fde4:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    fde8:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
        match (
    fdec:	e206      	b.n	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
    fdee:	2005      	movs	r0, #5
    fdf0:	f8cd 0bb0 	str.w	r0, [sp, #2992]	; 0xbb0
    fdf4:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    fdf8:	f2c0 0001 	movt	r0, #1
    fdfc:	6801      	ldr	r1, [r0, #0]
    fdfe:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    fe02:	f004 fc19 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fe06:	901c      	str	r0, [sp, #112]	; 0x70
    fe08:	e01f      	b.n	fe4a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x31ba>
    fe0a:	2001      	movs	r0, #1
    fe0c:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    fe10:	e015      	b.n	fe3e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x31ae>
    fe12:	2000      	movs	r0, #0
    fe14:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    fe18:	e011      	b.n	fe3e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x31ae>
    fe1a:	2000      	movs	r0, #0
    fe1c:	f88d 0eb3 	strb.w	r0, [sp, #3763]	; 0xeb3
    fe20:	f89d 1eb3 	ldrb.w	r1, [sp, #3763]	; 0xeb3
    fe24:	f646 206c 	movw	r0, #27244	; 0x6a6c
    fe28:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fe2c:	f000 ffae 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fe30:	f8cd 0eb4 	str.w	r0, [sp, #3764]	; 0xeb4
    fe34:	f8dd 0eb4 	ldr.w	r0, [sp, #3764]	; 0xeb4
    fe38:	f8cd 0bb8 	str.w	r0, [sp, #3000]	; 0xbb8
    fe3c:	e00a      	b.n	fe54 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x31c4>
    fe3e:	f89d 0bb7 	ldrb.w	r0, [sp, #2999]	; 0xbb7
    fe42:	07c0      	lsls	r0, r0, #31
    fe44:	2800      	cmp	r0, #0
    fe46:	d112      	bne.n	fe6e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x31de>
    fe48:	e055      	b.n	fef6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3266>
    fe4a:	981c      	ldr	r0, [sp, #112]	; 0x70
    fe4c:	07c1      	lsls	r1, r0, #31
    fe4e:	2900      	cmp	r1, #0
    fe50:	d1e3      	bne.n	fe1a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x318a>
    fe52:	e7de      	b.n	fe12 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3182>
    fe54:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    fe58:	f60d 31b8 	addw	r1, sp, #3000	; 0xbb8
    fe5c:	f004 fbec 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fe60:	901b      	str	r0, [sp, #108]	; 0x6c
    fe62:	e7ff      	b.n	fe64 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x31d4>
    fe64:	981b      	ldr	r0, [sp, #108]	; 0x6c
    fe66:	07c1      	lsls	r1, r0, #31
    fe68:	2900      	cmp	r1, #0
    fe6a:	d1ce      	bne.n	fe0a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x317a>
    fe6c:	e7d1      	b.n	fe12 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3182>
                trace!("[{:04x}] LD [I], Vx", self.pc);
    fe6e:	f64c 3098 	movw	r0, #52120	; 0xcb98
    fe72:	f2c0 0001 	movt	r0, #1
    fe76:	6801      	ldr	r1, [r0, #0]
    fe78:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fe7c:	f100 0212 	add.w	r2, r0, #18
    fe80:	f8cd 2bdc 	str.w	r2, [sp, #3036]	; 0xbdc
    fe84:	f8dd 2bdc 	ldr.w	r2, [sp, #3036]	; 0xbdc
    fe88:	f8cd 2ca0 	str.w	r2, [sp, #3232]	; 0xca0
    fe8c:	f646 135b 	movw	r3, #26971	; 0x695b
    fe90:	f2c0 0301 	movt	r3, #1
    fe94:	4610      	mov	r0, r2
    fe96:	911a      	str	r1, [sp, #104]	; 0x68
    fe98:	4619      	mov	r1, r3
    fe9a:	f7fa fc4b 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fe9e:	9019      	str	r0, [sp, #100]	; 0x64
    fea0:	9118      	str	r1, [sp, #96]	; 0x60
    fea2:	e7ff      	b.n	fea4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3214>
    fea4:	9819      	ldr	r0, [sp, #100]	; 0x64
    fea6:	f8cd 0bd4 	str.w	r0, [sp, #3028]	; 0xbd4
    feaa:	9918      	ldr	r1, [sp, #96]	; 0x60
    feac:	f8cd 1bd8 	str.w	r1, [sp, #3032]	; 0xbd8
    feb0:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
    feb4:	f2c0 0201 	movt	r2, #1
    feb8:	6812      	ldr	r2, [r2, #0]
    feba:	466b      	mov	r3, sp
    febc:	f04f 0c01 	mov.w	ip, #1
    fec0:	f8c3 c008 	str.w	ip, [r3, #8]
    fec4:	605a      	str	r2, [r3, #4]
    fec6:	f8c3 c000 	str.w	ip, [r3]
    feca:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    fece:	2202      	movs	r2, #2
    fed0:	f60d 33d4 	addw	r3, sp, #3028	; 0xbd4
    fed4:	991a      	ldr	r1, [sp, #104]	; 0x68
    fed6:	f004 fa74 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    feda:	e7ff      	b.n	fedc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x324c>
    fedc:	f8dd 1bb0 	ldr.w	r1, [sp, #2992]	; 0xbb0
    fee0:	f64c 30b8 	movw	r0, #52152	; 0xcbb8
    fee4:	f2c0 0001 	movt	r0, #1
    fee8:	6802      	ldr	r2, [r0, #0]
    feea:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    feee:	f001 fe53 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fef2:	e7ff      	b.n	fef4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3264>
    fef4:	e7ff      	b.n	fef6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3266>
                let x = x as usize;
    fef6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fefa:	f8cd 0ca4 	str.w	r0, [sp, #3236]	; 0xca4
                for i in 0..(x + 1) {
    fefe:	1c41      	adds	r1, r0, #1
    ff00:	460a      	mov	r2, r1
    ff02:	4281      	cmp	r1, r0
    ff04:	9217      	str	r2, [sp, #92]	; 0x5c
    ff06:	f0c0 81c9 	bcc.w	1029c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x360c>
    ff0a:	e7ff      	b.n	ff0c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x327c>
    ff0c:	2000      	movs	r0, #0
    ff0e:	f8cd 0be0 	str.w	r0, [sp, #3040]	; 0xbe0
    ff12:	9817      	ldr	r0, [sp, #92]	; 0x5c
    ff14:	f8cd 0be4 	str.w	r0, [sp, #3044]	; 0xbe4
    ff18:	f8dd 0be0 	ldr.w	r0, [sp, #3040]	; 0xbe0
    ff1c:	f8dd 1be4 	ldr.w	r1, [sp, #3044]	; 0xbe4
    ff20:	f001 fbc6 	bl	116b0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    ff24:	9016      	str	r0, [sp, #88]	; 0x58
    ff26:	9115      	str	r1, [sp, #84]	; 0x54
    ff28:	e7ff      	b.n	ff2a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x329a>
    ff2a:	9816      	ldr	r0, [sp, #88]	; 0x58
    ff2c:	f8cd 0be8 	str.w	r0, [sp, #3048]	; 0xbe8
    ff30:	9915      	ldr	r1, [sp, #84]	; 0x54
    ff32:	f8cd 1bec 	str.w	r1, [sp, #3052]	; 0xbec
    ff36:	e7ff      	b.n	ff38 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x32a8>
    ff38:	f60d 30e8 	addw	r0, sp, #3048	; 0xbe8
    ff3c:	f001 fb2d 	bl	1159a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    ff40:	f8cd 1bf4 	str.w	r1, [sp, #3060]	; 0xbf4
    ff44:	f8cd 0bf0 	str.w	r0, [sp, #3056]	; 0xbf0
    ff48:	e7ff      	b.n	ff4a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x32ba>
    ff4a:	f8dd 0bf0 	ldr.w	r0, [sp, #3056]	; 0xbf0
    ff4e:	2800      	cmp	r0, #0
    ff50:	d001      	beq.n	ff56 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x32c6>
    ff52:	e7ff      	b.n	ff54 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x32c4>
    ff54:	e001      	b.n	ff5a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x32ca>
        match (
    ff56:	e151      	b.n	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
                for i in 0..(x + 1) {
    ff58:	defe      	udf	#254	; 0xfe
    ff5a:	f8dd 0bf4 	ldr.w	r0, [sp, #3060]	; 0xbf4
    ff5e:	f8cd 0ca8 	str.w	r0, [sp, #3240]	; 0xca8
    ff62:	f8cd 0cac 	str.w	r0, [sp, #3244]	; 0xcac
    ff66:	f8cd 0cb0 	str.w	r0, [sp, #3248]	; 0xcb0
                    self.mem[self.i as usize + i] = self.v[i];
    ff6a:	280f      	cmp	r0, #15
    ff6c:	9014      	str	r0, [sp, #80]	; 0x50
    ff6e:	f200 81a1 	bhi.w	102b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3624>
    ff72:	e7ff      	b.n	ff74 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x32e4>
    ff74:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ff78:	9914      	ldr	r1, [sp, #80]	; 0x50
    ff7a:	1842      	adds	r2, r0, r1
    ff7c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ff80:	8a03      	ldrh	r3, [r0, #16]
    ff82:	eb03 0c01 	add.w	ip, r3, r1
    ff86:	46e6      	mov	lr, ip
    ff88:	459c      	cmp	ip, r3
    ff8a:	9213      	str	r2, [sp, #76]	; 0x4c
    ff8c:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    ff90:	f0c0 8199 	bcc.w	102c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3636>
    ff94:	e7ff      	b.n	ff96 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3306>
    ff96:	2000      	movs	r0, #0
    ff98:	9912      	ldr	r1, [sp, #72]	; 0x48
    ff9a:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    ff9e:	f040 819e 	bne.w	102de <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x364e>
    ffa2:	e7ff      	b.n	ffa4 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3314>
    ffa4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ffa8:	9912      	ldr	r1, [sp, #72]	; 0x48
    ffaa:	1842      	adds	r2, r0, r1
    ffac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ffae:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
                for i in 0..(x + 1) {
    ffb2:	e7c1      	b.n	ff38 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x32a8>
    ffb4:	2005      	movs	r0, #5
    ffb6:	f8cd 0bf8 	str.w	r0, [sp, #3064]	; 0xbf8
    ffba:	f64c 20b0 	movw	r0, #51888	; 0xcab0
    ffbe:	f2c0 0001 	movt	r0, #1
    ffc2:	6801      	ldr	r1, [r0, #0]
    ffc4:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    ffc8:	f004 fb36 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ffcc:	9011      	str	r0, [sp, #68]	; 0x44
    ffce:	e01f      	b.n	10010 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3380>
    ffd0:	2001      	movs	r0, #1
    ffd2:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    ffd6:	e015      	b.n	10004 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3374>
    ffd8:	2000      	movs	r0, #0
    ffda:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    ffde:	e011      	b.n	10004 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3374>
    ffe0:	2000      	movs	r0, #0
    ffe2:	f88d 0ebb 	strb.w	r0, [sp, #3771]	; 0xebb
    ffe6:	f89d 1ebb 	ldrb.w	r1, [sp, #3771]	; 0xebb
    ffea:	f646 206c 	movw	r0, #27244	; 0x6a6c
    ffee:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fff2:	f000 fecb 	bl	10d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fff6:	f8cd 0ebc 	str.w	r0, [sp, #3772]	; 0xebc
    fffa:	f8dd 0ebc 	ldr.w	r0, [sp, #3772]	; 0xebc
    fffe:	f8cd 0c00 	str.w	r0, [sp, #3072]	; 0xc00
   10002:	e00a      	b.n	1001a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x338a>
   10004:	f89d 0bff 	ldrb.w	r0, [sp, #3071]	; 0xbff
   10008:	07c0      	lsls	r0, r0, #31
   1000a:	2800      	cmp	r0, #0
   1000c:	d112      	bne.n	10034 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x33a4>
   1000e:	e055      	b.n	100bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x342c>
   10010:	9811      	ldr	r0, [sp, #68]	; 0x44
   10012:	07c1      	lsls	r1, r0, #31
   10014:	2900      	cmp	r1, #0
   10016:	d1e3      	bne.n	ffe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3350>
   10018:	e7de      	b.n	ffd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3348>
   1001a:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
   1001e:	f50d 6140 	add.w	r1, sp, #3072	; 0xc00
   10022:	f004 fb09 	bl	14638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
   10026:	9010      	str	r0, [sp, #64]	; 0x40
   10028:	e7ff      	b.n	1002a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x339a>
   1002a:	9810      	ldr	r0, [sp, #64]	; 0x40
   1002c:	07c1      	lsls	r1, r0, #31
   1002e:	2900      	cmp	r1, #0
   10030:	d1ce      	bne.n	ffd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3340>
   10032:	e7d1      	b.n	ffd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3348>
                trace!("[{:04x}] LD Vx, [I]", self.pc);
   10034:	f64c 20d4 	movw	r0, #51924	; 0xcad4
   10038:	f2c0 0001 	movt	r0, #1
   1003c:	6801      	ldr	r1, [r0, #0]
   1003e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10042:	f100 0212 	add.w	r2, r0, #18
   10046:	f8cd 2c24 	str.w	r2, [sp, #3108]	; 0xc24
   1004a:	f8dd 2c24 	ldr.w	r2, [sp, #3108]	; 0xc24
   1004e:	f8cd 2c8c 	str.w	r2, [sp, #3212]	; 0xc8c
   10052:	f646 135b 	movw	r3, #26971	; 0x695b
   10056:	f2c0 0301 	movt	r3, #1
   1005a:	4610      	mov	r0, r2
   1005c:	910f      	str	r1, [sp, #60]	; 0x3c
   1005e:	4619      	mov	r1, r3
   10060:	f7fa fb68 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   10064:	900e      	str	r0, [sp, #56]	; 0x38
   10066:	910d      	str	r1, [sp, #52]	; 0x34
   10068:	e7ff      	b.n	1006a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x33da>
   1006a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1006c:	f8cd 0c1c 	str.w	r0, [sp, #3100]	; 0xc1c
   10070:	990d      	ldr	r1, [sp, #52]	; 0x34
   10072:	f8cd 1c20 	str.w	r1, [sp, #3104]	; 0xc20
   10076:	f64c 22f8 	movw	r2, #51960	; 0xcaf8
   1007a:	f2c0 0201 	movt	r2, #1
   1007e:	6812      	ldr	r2, [r2, #0]
   10080:	466b      	mov	r3, sp
   10082:	f04f 0c01 	mov.w	ip, #1
   10086:	f8c3 c008 	str.w	ip, [r3, #8]
   1008a:	605a      	str	r2, [r3, #4]
   1008c:	f8c3 c000 	str.w	ip, [r3]
   10090:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
   10094:	2202      	movs	r2, #2
   10096:	f60d 431c 	addw	r3, sp, #3100	; 0xc1c
   1009a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1009c:	f004 f991 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   100a0:	e7ff      	b.n	100a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3412>
   100a2:	f8dd 1bf8 	ldr.w	r1, [sp, #3064]	; 0xbf8
   100a6:	f64c 3038 	movw	r0, #52024	; 0xcb38
   100aa:	f2c0 0001 	movt	r0, #1
   100ae:	6802      	ldr	r2, [r0, #0]
   100b0:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
   100b4:	f001 fd70 	bl	11b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
   100b8:	e7ff      	b.n	100ba <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x342a>
   100ba:	e7ff      	b.n	100bc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x342c>
                let x = x as usize;
   100bc:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
   100c0:	f8cd 0c90 	str.w	r0, [sp, #3216]	; 0xc90
                for i in 0..(x + 1) {
   100c4:	1c41      	adds	r1, r0, #1
   100c6:	460a      	mov	r2, r1
   100c8:	4281      	cmp	r1, r0
   100ca:	920c      	str	r2, [sp, #48]	; 0x30
   100cc:	f0c0 80bb 	bcc.w	10246 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x35b6>
   100d0:	e7ff      	b.n	100d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3442>
   100d2:	2000      	movs	r0, #0
   100d4:	f8cd 0c28 	str.w	r0, [sp, #3112]	; 0xc28
   100d8:	980c      	ldr	r0, [sp, #48]	; 0x30
   100da:	f8cd 0c2c 	str.w	r0, [sp, #3116]	; 0xc2c
   100de:	f8dd 0c28 	ldr.w	r0, [sp, #3112]	; 0xc28
   100e2:	f8dd 1c2c 	ldr.w	r1, [sp, #3116]	; 0xc2c
   100e6:	f001 fae3 	bl	116b0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   100ea:	900b      	str	r0, [sp, #44]	; 0x2c
   100ec:	910a      	str	r1, [sp, #40]	; 0x28
   100ee:	e7ff      	b.n	100f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3460>
   100f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   100f2:	f8cd 0c30 	str.w	r0, [sp, #3120]	; 0xc30
   100f6:	990a      	ldr	r1, [sp, #40]	; 0x28
   100f8:	f8cd 1c34 	str.w	r1, [sp, #3124]	; 0xc34
   100fc:	e7ff      	b.n	100fe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x346e>
   100fe:	f50d 6043 	add.w	r0, sp, #3120	; 0xc30
   10102:	f001 fa4a 	bl	1159a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   10106:	f8cd 1c3c 	str.w	r1, [sp, #3132]	; 0xc3c
   1010a:	f8cd 0c38 	str.w	r0, [sp, #3128]	; 0xc38
   1010e:	e7ff      	b.n	10110 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3480>
   10110:	f8dd 0c38 	ldr.w	r0, [sp, #3128]	; 0xc38
   10114:	2800      	cmp	r0, #0
   10116:	d001      	beq.n	1011c <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x348c>
   10118:	e7ff      	b.n	1011a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x348a>
   1011a:	e001      	b.n	10120 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3490>
        match (
   1011c:	e06e      	b.n	101fc <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x356c>
                for i in 0..(x + 1) {
   1011e:	defe      	udf	#254	; 0xfe
   10120:	f8dd 0c3c 	ldr.w	r0, [sp, #3132]	; 0xc3c
   10124:	f8cd 0c94 	str.w	r0, [sp, #3220]	; 0xc94
   10128:	f8cd 0c98 	str.w	r0, [sp, #3224]	; 0xc98
   1012c:	f8cd 0c9c 	str.w	r0, [sp, #3228]	; 0xc9c
                    self.v[i] = self.mem[self.i as usize + i];
   10130:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   10134:	8a0a      	ldrh	r2, [r1, #16]
   10136:	1813      	adds	r3, r2, r0
   10138:	469c      	mov	ip, r3
   1013a:	4293      	cmp	r3, r2
   1013c:	9009      	str	r0, [sp, #36]	; 0x24
   1013e:	f8cd c020 	str.w	ip, [sp, #32]
   10142:	f0c0 808c 	bcc.w	1025e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x35ce>
   10146:	e7ff      	b.n	10148 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x34b8>
   10148:	2000      	movs	r0, #0
   1014a:	9908      	ldr	r1, [sp, #32]
   1014c:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   10150:	f040 8091 	bne.w	10276 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x35e6>
   10154:	e7ff      	b.n	10156 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x34c6>
   10156:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1015a:	9908      	ldr	r1, [sp, #32]
   1015c:	1842      	adds	r2, r0, r1
   1015e:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
   10162:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10164:	2b0f      	cmp	r3, #15
   10166:	9207      	str	r2, [sp, #28]
   10168:	f200 808f 	bhi.w	1028a <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x35fa>
   1016c:	e7ff      	b.n	1016e <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x34de>
   1016e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10172:	9909      	ldr	r1, [sp, #36]	; 0x24
   10174:	1842      	adds	r2, r0, r1
   10176:	9b07      	ldr	r3, [sp, #28]
   10178:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                for i in 0..(x + 1) {
   1017c:	e7bf      	b.n	100fe <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x346e>
   1017e:	f646 115b 	movw	r1, #26971	; 0x695b
   10182:	f2c0 0101 	movt	r1, #1
   10186:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
   1018a:	f7fa fad3 	bl	a734 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   1018e:	9006      	str	r0, [sp, #24]
   10190:	9105      	str	r1, [sp, #20]
   10192:	e7ff      	b.n	10194 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3504>
   10194:	f8dd 042c 	ldr.w	r0, [sp, #1068]	; 0x42c
   10198:	f8cd 0c58 	str.w	r0, [sp, #3160]	; 0xc58
   1019c:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   101a0:	f8cd 1c5c 	str.w	r1, [sp, #3164]	; 0xc5c
   101a4:	9a06      	ldr	r2, [sp, #24]
   101a6:	f8cd 2c60 	str.w	r2, [sp, #3168]	; 0xc60
   101aa:	9b05      	ldr	r3, [sp, #20]
   101ac:	f8cd 3c64 	str.w	r3, [sp, #3172]	; 0xc64
   101b0:	f24d 6c9c 	movw	ip, #54940	; 0xd69c
   101b4:	f2c0 0c01 	movt	ip, #1
   101b8:	f8dc c000 	ldr.w	ip, [ip]
   101bc:	46ee      	mov	lr, sp
   101be:	2402      	movs	r4, #2
   101c0:	f8ce 4008 	str.w	r4, [lr, #8]
   101c4:	f8ce c004 	str.w	ip, [lr, #4]
   101c8:	f8ce 4000 	str.w	r4, [lr]
   101cc:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
   101d0:	f60d 4358 	addw	r3, sp, #3160	; 0xc58
   101d4:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
   101d8:	4622      	mov	r2, r4
   101da:	f004 f8f2 	bl	143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   101de:	e7ff      	b.n	101e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3550>
   101e0:	f24d 60c0 	movw	r0, #54976	; 0xd6c0
   101e4:	f2c0 0001 	movt	r0, #1
   101e8:	f004 ffa3 	bl	15132 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   101ec:	9004      	str	r0, [sp, #16]
   101ee:	e7ff      	b.n	101f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17hb13c9f8d48591b89E+0x3560>
   101f0:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
   101f4:	9904      	ldr	r1, [sp, #16]
   101f6:	f004 ffd9 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   101fa:	defe      	udf	#254	; 0xfe
        }
    }
   101fc:	f50d 6d6c 	add.w	sp, sp, #3776	; 0xec0
   10200:	bd70      	pop	{r4, r5, r6, pc}
        let h = self.mem[self.pc as usize] as u16;
   10202:	f64c 205c 	movw	r0, #51804	; 0xca5c
   10206:	f2c0 0001 	movt	r0, #1
   1020a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1020e:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
   10212:	f004 ffab 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10216:	defe      	udf	#254	; 0xfe
        let l = self.mem[(self.pc + 1) as usize] as u16;
   10218:	f64c 2080 	movw	r0, #51840	; 0xca80
   1021c:	f2c0 0001 	movt	r0, #1
   10220:	f64c 226c 	movw	r2, #51820	; 0xca6c
   10224:	f2c0 0201 	movt	r2, #1
   10228:	211c      	movs	r1, #28
   1022a:	f004 ff89 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1022e:	defe      	udf	#254	; 0xfe
   10230:	f64c 209c 	movw	r0, #51868	; 0xca9c
   10234:	f2c0 0001 	movt	r0, #1
   10238:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1023c:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
   10240:	f004 ff94 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10244:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
   10246:	f64c 2080 	movw	r0, #51840	; 0xca80
   1024a:	f2c0 0001 	movt	r0, #1
   1024e:	f64c 323c 	movw	r2, #52028	; 0xcb3c
   10252:	f2c0 0201 	movt	r2, #1
   10256:	211c      	movs	r1, #28
   10258:	f004 ff72 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1025c:	defe      	udf	#254	; 0xfe
                    self.v[i] = self.mem[self.i as usize + i];
   1025e:	f64c 2080 	movw	r0, #51840	; 0xca80
   10262:	f2c0 0001 	movt	r0, #1
   10266:	f64c 324c 	movw	r2, #52044	; 0xcb4c
   1026a:	f2c0 0201 	movt	r2, #1
   1026e:	211c      	movs	r1, #28
   10270:	f004 ff66 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10274:	defe      	udf	#254	; 0xfe
   10276:	f64c 305c 	movw	r0, #52060	; 0xcb5c
   1027a:	f2c0 0001 	movt	r0, #1
   1027e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10282:	9908      	ldr	r1, [sp, #32]
   10284:	f004 ff72 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10288:	defe      	udf	#254	; 0xfe
   1028a:	f64c 306c 	movw	r0, #52076	; 0xcb6c
   1028e:	f2c0 0001 	movt	r0, #1
   10292:	2210      	movs	r2, #16
   10294:	9909      	ldr	r1, [sp, #36]	; 0x24
   10296:	f004 ff69 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1029a:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
   1029c:	f64c 2080 	movw	r0, #51840	; 0xca80
   102a0:	f2c0 0001 	movt	r0, #1
   102a4:	f64c 32bc 	movw	r2, #52156	; 0xcbbc
   102a8:	f2c0 0201 	movt	r2, #1
   102ac:	211c      	movs	r1, #28
   102ae:	f004 ff47 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   102b2:	defe      	udf	#254	; 0xfe
                    self.mem[self.i as usize + i] = self.v[i];
   102b4:	f64c 30cc 	movw	r0, #52172	; 0xcbcc
   102b8:	f2c0 0001 	movt	r0, #1
   102bc:	2210      	movs	r2, #16
   102be:	9914      	ldr	r1, [sp, #80]	; 0x50
   102c0:	f004 ff54 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   102c4:	defe      	udf	#254	; 0xfe
   102c6:	f64c 2080 	movw	r0, #51840	; 0xca80
   102ca:	f2c0 0001 	movt	r0, #1
   102ce:	f64c 32dc 	movw	r2, #52188	; 0xcbdc
   102d2:	f2c0 0201 	movt	r2, #1
   102d6:	211c      	movs	r1, #28
   102d8:	f004 ff32 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   102dc:	defe      	udf	#254	; 0xfe
   102de:	f64c 30ec 	movw	r0, #52204	; 0xcbec
   102e2:	f2c0 0001 	movt	r0, #1
   102e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   102ea:	9912      	ldr	r1, [sp, #72]	; 0x48
   102ec:	f004 ff3e 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   102f0:	defe      	udf	#254	; 0xfe
                let bcd = self.v[x];
   102f2:	f64c 403c 	movw	r0, #52284	; 0xcc3c
   102f6:	f2c0 0001 	movt	r0, #1
   102fa:	2210      	movs	r2, #16
   102fc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10300:	f004 ff34 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10304:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize] = (bcd / 100) % 10;
   10306:	f64c 404c 	movw	r0, #52300	; 0xcc4c
   1030a:	f2c0 0001 	movt	r0, #1
   1030e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10312:	9920      	ldr	r1, [sp, #128]	; 0x80
   10314:	f004 ff2a 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10318:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
   1031a:	f64c 2080 	movw	r0, #51840	; 0xca80
   1031e:	f2c0 0001 	movt	r0, #1
   10322:	f64c 425c 	movw	r2, #52316	; 0xcc5c
   10326:	f2c0 0201 	movt	r2, #1
   1032a:	211c      	movs	r1, #28
   1032c:	f004 ff08 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10330:	defe      	udf	#254	; 0xfe
   10332:	f64c 406c 	movw	r0, #52332	; 0xcc6c
   10336:	f2c0 0001 	movt	r0, #1
   1033a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1033e:	991e      	ldr	r1, [sp, #120]	; 0x78
   10340:	f004 ff14 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10344:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 2] = bcd % 10;
   10346:	f64c 2080 	movw	r0, #51840	; 0xca80
   1034a:	f2c0 0001 	movt	r0, #1
   1034e:	f64c 427c 	movw	r2, #52348	; 0xcc7c
   10352:	f2c0 0201 	movt	r2, #1
   10356:	211c      	movs	r1, #28
   10358:	f004 fef2 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1035c:	defe      	udf	#254	; 0xfe
   1035e:	f64c 408c 	movw	r0, #52364	; 0xcc8c
   10362:	f2c0 0001 	movt	r0, #1
   10366:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1036a:	991d      	ldr	r1, [sp, #116]	; 0x74
   1036c:	f004 fefe 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10370:	defe      	udf	#254	; 0xfe
                self.i = (self.v[x] * 5).into();
   10372:	f64c 40dc 	movw	r0, #52444	; 0xccdc
   10376:	f2c0 0001 	movt	r0, #1
   1037a:	2210      	movs	r2, #16
   1037c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10380:	f004 fef4 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10384:	defe      	udf	#254	; 0xfe
   10386:	f64c 5000 	movw	r0, #52480	; 0xcd00
   1038a:	f2c0 0001 	movt	r0, #1
   1038e:	f64c 42ec 	movw	r2, #52460	; 0xccec
   10392:	f2c0 0201 	movt	r2, #1
   10396:	2121      	movs	r1, #33	; 0x21
   10398:	f004 fed2 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1039c:	defe      	udf	#254	; 0xfe
                self.i = self.i.wrapping_add(self.v[x].into());
   1039e:	f64c 5060 	movw	r0, #52576	; 0xcd60
   103a2:	f2c0 0001 	movt	r0, #1
   103a6:	2210      	movs	r2, #16
   103a8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   103ac:	f004 fede 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   103b0:	defe      	udf	#254	; 0xfe
                self.st = self.v[x];
   103b2:	f64c 50b0 	movw	r0, #52656	; 0xcdb0
   103b6:	f2c0 0001 	movt	r0, #1
   103ba:	2210      	movs	r2, #16
   103bc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   103c0:	f004 fed4 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   103c4:	defe      	udf	#254	; 0xfe
                self.dt = self.v[x];
   103c6:	f64c 6000 	movw	r0, #52736	; 0xce00
   103ca:	f2c0 0001 	movt	r0, #1
   103ce:	2210      	movs	r2, #16
   103d0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   103d4:	f004 feca 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   103d8:	defe      	udf	#254	; 0xfe
                self.v[x] = self.waitkey();
   103da:	f64c 6050 	movw	r0, #52816	; 0xce50
   103de:	f2c0 0001 	movt	r0, #1
   103e2:	2210      	movs	r2, #16
   103e4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   103e8:	f004 fec0 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   103ec:	defe      	udf	#254	; 0xfe
                self.v[x] = self.dt;
   103ee:	f64c 60a0 	movw	r0, #52896	; 0xcea0
   103f2:	f2c0 0001 	movt	r0, #1
   103f6:	2210      	movs	r2, #16
   103f8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   103fc:	f004 feb6 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10400:	defe      	udf	#254	; 0xfe
                if !self.hw.key(self.v[x]) {
   10402:	f64c 60f0 	movw	r0, #52976	; 0xcef0
   10406:	f2c0 0001 	movt	r0, #1
   1040a:	2210      	movs	r2, #16
   1040c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10410:	f004 feac 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10414:	defe      	udf	#254	; 0xfe
                if self.hw.key(self.v[x]) {
   10416:	f64c 7034 	movw	r0, #53044	; 0xcf34
   1041a:	f2c0 0001 	movt	r0, #1
   1041e:	2210      	movs	r2, #16
   10420:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10424:	f004 fea2 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10428:	defe      	udf	#254	; 0xfe
                let basex = self.v[x] as usize;
   1042a:	f64c 7088 	movw	r0, #53128	; 0xcf88
   1042e:	f2c0 0001 	movt	r0, #1
   10432:	2210      	movs	r2, #16
   10434:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10438:	f004 fe98 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1043c:	defe      	udf	#254	; 0xfe
                let basey = self.v[y] as usize;
   1043e:	f64c 7098 	movw	r0, #53144	; 0xcf98
   10442:	f2c0 0001 	movt	r0, #1
   10446:	2210      	movs	r2, #16
   10448:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   1044c:	f004 fe8e 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10450:	defe      	udf	#254	; 0xfe
                    let b = self.mem[self.i as usize + y];
   10452:	f64c 2080 	movw	r0, #51840	; 0xca80
   10456:	f2c0 0001 	movt	r0, #1
   1045a:	f64c 72a8 	movw	r2, #53160	; 0xcfa8
   1045e:	f2c0 0201 	movt	r2, #1
   10462:	211c      	movs	r1, #28
   10464:	f004 fe6c 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10468:	defe      	udf	#254	; 0xfe
   1046a:	f64c 70b8 	movw	r0, #53176	; 0xcfb8
   1046e:	f2c0 0001 	movt	r0, #1
   10472:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10476:	9967      	ldr	r1, [sp, #412]	; 0x19c
   10478:	f004 fe78 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1047c:	defe      	udf	#254	; 0xfe
                    let vramy = (y + basey) % h;
   1047e:	f64c 2080 	movw	r0, #51840	; 0xca80
   10482:	f2c0 0001 	movt	r0, #1
   10486:	f64c 72c8 	movw	r2, #53192	; 0xcfc8
   1048a:	f2c0 0201 	movt	r2, #1
   1048e:	211c      	movs	r1, #28
   10490:	f004 fe56 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10494:	defe      	udf	#254	; 0xfe
   10496:	f64c 70e0 	movw	r0, #53216	; 0xcfe0
   1049a:	f2c0 0001 	movt	r0, #1
   1049e:	f64c 72c8 	movw	r2, #53192	; 0xcfc8
   104a2:	f2c0 0201 	movt	r2, #1
   104a6:	2139      	movs	r1, #57	; 0x39
   104a8:	f004 fe4a 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   104ac:	defe      	udf	#254	; 0xfe
                        let vramx = (x + basex) % w;
   104ae:	f64c 2080 	movw	r0, #51840	; 0xca80
   104b2:	f2c0 0001 	movt	r0, #1
   104b6:	f24d 021c 	movw	r2, #53276	; 0xd01c
   104ba:	f2c0 0201 	movt	r2, #1
   104be:	211c      	movs	r1, #28
   104c0:	f004 fe3e 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   104c4:	defe      	udf	#254	; 0xfe
   104c6:	f64c 70e0 	movw	r0, #53216	; 0xcfe0
   104ca:	f2c0 0001 	movt	r0, #1
   104ce:	f24d 021c 	movw	r2, #53276	; 0xd01c
   104d2:	f2c0 0201 	movt	r2, #1
   104d6:	2139      	movs	r1, #57	; 0x39
   104d8:	f004 fe32 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   104dc:	defe      	udf	#254	; 0xfe
                        let src = (b & 1 << (7 - x)) > 0;
   104de:	f24d 0040 	movw	r0, #53312	; 0xd040
   104e2:	f2c0 0001 	movt	r0, #1
   104e6:	f24d 022c 	movw	r2, #53292	; 0xd02c
   104ea:	f2c0 0201 	movt	r2, #1
   104ee:	2121      	movs	r1, #33	; 0x21
   104f0:	f004 fe26 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   104f4:	defe      	udf	#254	; 0xfe
   104f6:	f24d 0080 	movw	r0, #53376	; 0xd080
   104fa:	f2c0 0001 	movt	r0, #1
   104fe:	f24d 0264 	movw	r2, #53348	; 0xd064
   10502:	f2c0 0201 	movt	r2, #1
   10506:	2123      	movs	r1, #35	; 0x23
   10508:	f004 fe1a 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1050c:	defe      	udf	#254	; 0xfe
                self.v[x] = self.hw.rand() & kk;
   1050e:	f24d 00e4 	movw	r0, #53476	; 0xd0e4
   10512:	f2c0 0001 	movt	r0, #1
   10516:	2210      	movs	r2, #16
   10518:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1051c:	f004 fe26 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10520:	defe      	udf	#254	; 0xfe
                if self.v[x] != self.v[y] {
   10522:	f24d 10b4 	movw	r0, #53684	; 0xd1b4
   10526:	f2c0 0001 	movt	r0, #1
   1052a:	2210      	movs	r2, #16
   1052c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10530:	f004 fe1c 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10534:	defe      	udf	#254	; 0xfe
   10536:	f24d 10c4 	movw	r0, #53700	; 0xd1c4
   1053a:	f2c0 0001 	movt	r0, #1
   1053e:	2210      	movs	r2, #16
   10540:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10544:	f004 fe12 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10548:	defe      	udf	#254	; 0xfe
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
   1054a:	f24d 2014 	movw	r0, #53780	; 0xd214
   1054e:	f2c0 0001 	movt	r0, #1
   10552:	2210      	movs	r2, #16
   10554:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10558:	f004 fe08 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1055c:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shl(1);
   1055e:	f24d 2024 	movw	r0, #53796	; 0xd224
   10562:	f2c0 0001 	movt	r0, #1
   10566:	2210      	movs	r2, #16
   10568:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1056c:	f004 fdfe 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10570:	defe      	udf	#254	; 0xfe
   10572:	f24d 2034 	movw	r0, #53812	; 0xd234
   10576:	f2c0 0001 	movt	r0, #1
   1057a:	2210      	movs	r2, #16
   1057c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10580:	f004 fdf4 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10584:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
   10586:	f24d 2088 	movw	r0, #53896	; 0xd288
   1058a:	f2c0 0001 	movt	r0, #1
   1058e:	2210      	movs	r2, #16
   10590:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10594:	f004 fdea 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10598:	defe      	udf	#254	; 0xfe
   1059a:	f24d 2098 	movw	r0, #53912	; 0xd298
   1059e:	f2c0 0001 	movt	r0, #1
   105a2:	2210      	movs	r2, #16
   105a4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   105a8:	f004 fde0 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   105ac:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   105ae:	f24d 20a8 	movw	r0, #53928	; 0xd2a8
   105b2:	f2c0 0001 	movt	r0, #1
   105b6:	2210      	movs	r2, #16
   105b8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   105bc:	f004 fdd6 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   105c0:	defe      	udf	#254	; 0xfe
                self.v[0xf] = self.v[x] & 1;
   105c2:	f24d 20f8 	movw	r0, #54008	; 0xd2f8
   105c6:	f2c0 0001 	movt	r0, #1
   105ca:	2210      	movs	r2, #16
   105cc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   105d0:	f004 fdcc 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   105d4:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shr(1);
   105d6:	f24d 3008 	movw	r0, #54024	; 0xd308
   105da:	f2c0 0001 	movt	r0, #1
   105de:	2210      	movs	r2, #16
   105e0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   105e4:	f004 fdc2 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   105e8:	defe      	udf	#254	; 0xfe
   105ea:	f24d 3018 	movw	r0, #54040	; 0xd318
   105ee:	f2c0 0001 	movt	r0, #1
   105f2:	2210      	movs	r2, #16
   105f4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   105f8:	f004 fdb8 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   105fc:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
   105fe:	f24d 3068 	movw	r0, #54120	; 0xd368
   10602:	f2c0 0001 	movt	r0, #1
   10606:	2210      	movs	r2, #16
   10608:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1060c:	f004 fdae 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10610:	defe      	udf	#254	; 0xfe
   10612:	f24d 3078 	movw	r0, #54136	; 0xd378
   10616:	f2c0 0001 	movt	r0, #1
   1061a:	2210      	movs	r2, #16
   1061c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10620:	f004 fda4 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10624:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   10626:	f24d 3088 	movw	r0, #54152	; 0xd388
   1062a:	f2c0 0001 	movt	r0, #1
   1062e:	2210      	movs	r2, #16
   10630:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10634:	f004 fd9a 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10638:	defe      	udf	#254	; 0xfe
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
   1063a:	f24d 30d8 	movw	r0, #54232	; 0xd3d8
   1063e:	f2c0 0001 	movt	r0, #1
   10642:	2210      	movs	r2, #16
   10644:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10648:	f004 fd90 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1064c:	defe      	udf	#254	; 0xfe
   1064e:	f24d 30e8 	movw	r0, #54248	; 0xd3e8
   10652:	f2c0 0001 	movt	r0, #1
   10656:	2210      	movs	r2, #16
   10658:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   1065c:	f004 fd86 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10660:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   10662:	f24d 30f8 	movw	r0, #54264	; 0xd3f8
   10666:	f2c0 0001 	movt	r0, #1
   1066a:	2210      	movs	r2, #16
   1066c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10670:	f004 fd7c 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10674:	defe      	udf	#254	; 0xfe
                self.v[x] ^= self.v[y];
   10676:	f24d 4048 	movw	r0, #54344	; 0xd448
   1067a:	f2c0 0001 	movt	r0, #1
   1067e:	2210      	movs	r2, #16
   10680:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10684:	f004 fd72 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10688:	defe      	udf	#254	; 0xfe
   1068a:	f24d 4058 	movw	r0, #54360	; 0xd458
   1068e:	f2c0 0001 	movt	r0, #1
   10692:	2210      	movs	r2, #16
   10694:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10698:	f004 fd68 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1069c:	defe      	udf	#254	; 0xfe
                self.v[x] &= self.v[y];
   1069e:	f24d 40a8 	movw	r0, #54440	; 0xd4a8
   106a2:	f2c0 0001 	movt	r0, #1
   106a6:	2210      	movs	r2, #16
   106a8:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   106ac:	f004 fd5e 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   106b0:	defe      	udf	#254	; 0xfe
   106b2:	f24d 40b8 	movw	r0, #54456	; 0xd4b8
   106b6:	f2c0 0001 	movt	r0, #1
   106ba:	2210      	movs	r2, #16
   106bc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   106c0:	f004 fd54 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   106c4:	defe      	udf	#254	; 0xfe
                self.v[x] |= self.v[y];
   106c6:	f24d 5008 	movw	r0, #54536	; 0xd508
   106ca:	f2c0 0001 	movt	r0, #1
   106ce:	2210      	movs	r2, #16
   106d0:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   106d4:	f004 fd4a 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   106d8:	defe      	udf	#254	; 0xfe
   106da:	f24d 5018 	movw	r0, #54552	; 0xd518
   106de:	f2c0 0001 	movt	r0, #1
   106e2:	2210      	movs	r2, #16
   106e4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   106e8:	f004 fd40 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   106ec:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[y];
   106ee:	f24d 5068 	movw	r0, #54632	; 0xd568
   106f2:	f2c0 0001 	movt	r0, #1
   106f6:	2210      	movs	r2, #16
   106f8:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   106fc:	f004 fd36 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10700:	defe      	udf	#254	; 0xfe
   10702:	f24d 5078 	movw	r0, #54648	; 0xd578
   10706:	f2c0 0001 	movt	r0, #1
   1070a:	2210      	movs	r2, #16
   1070c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10710:	f004 fd2c 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10714:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_add(kk);
   10716:	f24d 50c8 	movw	r0, #54728	; 0xd5c8
   1071a:	f2c0 0001 	movt	r0, #1
   1071e:	2210      	movs	r2, #16
   10720:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10724:	f004 fd22 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10728:	defe      	udf	#254	; 0xfe
   1072a:	f24d 50d8 	movw	r0, #54744	; 0xd5d8
   1072e:	f2c0 0001 	movt	r0, #1
   10732:	2210      	movs	r2, #16
   10734:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10738:	f004 fd18 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1073c:	defe      	udf	#254	; 0xfe
                self.v[x] = kk;
   1073e:	f24d 6028 	movw	r0, #54824	; 0xd628
   10742:	f2c0 0001 	movt	r0, #1
   10746:	2210      	movs	r2, #16
   10748:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1074c:	f004 fd0e 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10750:	defe      	udf	#254	; 0xfe
                if self.v[x] == self.v[y] {
   10752:	f24d 7010 	movw	r0, #55056	; 0xd710
   10756:	f2c0 0001 	movt	r0, #1
   1075a:	2210      	movs	r2, #16
   1075c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10760:	f004 fd04 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10764:	defe      	udf	#254	; 0xfe
   10766:	f24d 7020 	movw	r0, #55072	; 0xd720
   1076a:	f2c0 0001 	movt	r0, #1
   1076e:	2210      	movs	r2, #16
   10770:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10774:	f004 fcfa 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10778:	defe      	udf	#254	; 0xfe
                if self.v[x] != kk {
   1077a:	f24d 7070 	movw	r0, #55152	; 0xd770
   1077e:	f2c0 0001 	movt	r0, #1
   10782:	2210      	movs	r2, #16
   10784:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10788:	f004 fcf0 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1078c:	defe      	udf	#254	; 0xfe
                if self.v[x] == kk {
   1078e:	f24d 70c0 	movw	r0, #55232	; 0xd7c0
   10792:	f2c0 0001 	movt	r0, #1
   10796:	2210      	movs	r2, #16
   10798:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1079c:	f004 fce6 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   107a0:	defe      	udf	#254	; 0xfe

000107a2 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hb16abfee8f88907eE>:
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
   107a2:	b580      	push	{r7, lr}
   107a4:	b086      	sub	sp, #24
   107a6:	9104      	str	r1, [sp, #16]
   107a8:	9205      	str	r2, [sp, #20]
   107aa:	6809      	ldr	r1, [r1, #0]
   107ac:	6809      	ldr	r1, [r1, #0]
   107ae:	2300      	movs	r3, #0
   107b0:	9301      	str	r3, [sp, #4]
   107b2:	9102      	str	r1, [sp, #8]
   107b4:	9203      	str	r2, [sp, #12]
   107b6:	9901      	ldr	r1, [sp, #4]
   107b8:	9a02      	ldr	r2, [sp, #8]
   107ba:	9b03      	ldr	r3, [sp, #12]
   107bc:	f000 fbb4 	bl	10f28 <_ZN4core4iter6traits8iterator8Iterator3map17h6d8406b1bb96c52eE>
   107c0:	e7ff      	b.n	107c2 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hb16abfee8f88907eE+0x20>
   107c2:	b006      	add	sp, #24
   107c4:	bd80      	pop	{r7, pc}

000107c6 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h06eb33e167ea87a6E>:
   107c6:	b084      	sub	sp, #16
   107c8:	9002      	str	r0, [sp, #8]
   107ca:	9103      	str	r1, [sp, #12]
   107cc:	6800      	ldr	r0, [r0, #0]
   107ce:	9000      	str	r0, [sp, #0]
   107d0:	9101      	str	r1, [sp, #4]
   107d2:	9800      	ldr	r0, [sp, #0]
   107d4:	9901      	ldr	r1, [sp, #4]
   107d6:	b004      	add	sp, #16
   107d8:	4770      	bx	lr

000107da <_ZN8libchip814Chip8$LT$T$GT$4jump17heb92b408b228e4d7E>:
    fn jump(&mut self, pc: u16) {
   107da:	b082      	sub	sp, #8
   107dc:	460a      	mov	r2, r1
   107de:	9000      	str	r0, [sp, #0]
   107e0:	f8ad 1006 	strh.w	r1, [sp, #6]
        self.pc = pc;
   107e4:	8241      	strh	r1, [r0, #18]
    }
   107e6:	b002      	add	sp, #8
   107e8:	4770      	bx	lr

000107ea <_ZN8libchip814Chip8$LT$T$GT$4load17h28b293d7e5188fe6E>:
    fn load(&mut self, rom: &[u8]) {
   107ea:	b580      	push	{r7, lr}
   107ec:	b08a      	sub	sp, #40	; 0x28
   107ee:	9105      	str	r1, [sp, #20]
   107f0:	9206      	str	r2, [sp, #24]
   107f2:	9009      	str	r0, [sp, #36]	; 0x24
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
   107f4:	3047      	adds	r0, #71	; 0x47
   107f6:	9905      	ldr	r1, [sp, #20]
   107f8:	9a06      	ldr	r2, [sp, #24]
   107fa:	9004      	str	r0, [sp, #16]
   107fc:	4608      	mov	r0, r1
   107fe:	4611      	mov	r1, r2
   10800:	f000 ff2f 	bl	11662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   10804:	9003      	str	r0, [sp, #12]
   10806:	e7ff      	b.n	10808 <_ZN8libchip814Chip8$LT$T$GT$4load17h28b293d7e5188fe6E+0x1e>
   10808:	9803      	ldr	r0, [sp, #12]
   1080a:	f500 7100 	add.w	r1, r0, #512	; 0x200
   1080e:	460a      	mov	r2, r1
   10810:	4281      	cmp	r1, r0
   10812:	9202      	str	r2, [sp, #8]
   10814:	d318      	bcc.n	10848 <_ZN8libchip814Chip8$LT$T$GT$4load17h28b293d7e5188fe6E+0x5e>
   10816:	e7ff      	b.n	10818 <_ZN8libchip814Chip8$LT$T$GT$4load17h28b293d7e5188fe6E+0x2e>
   10818:	f44f 7000 	mov.w	r0, #512	; 0x200
   1081c:	9007      	str	r0, [sp, #28]
   1081e:	9802      	ldr	r0, [sp, #8]
   10820:	9008      	str	r0, [sp, #32]
   10822:	9a07      	ldr	r2, [sp, #28]
   10824:	9b08      	ldr	r3, [sp, #32]
   10826:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1082a:	9804      	ldr	r0, [sp, #16]
   1082c:	f003 ff20 	bl	14670 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE>
   10830:	9001      	str	r0, [sp, #4]
   10832:	9100      	str	r1, [sp, #0]
   10834:	e7ff      	b.n	10836 <_ZN8libchip814Chip8$LT$T$GT$4load17h28b293d7e5188fe6E+0x4c>
   10836:	9a05      	ldr	r2, [sp, #20]
   10838:	9b06      	ldr	r3, [sp, #24]
   1083a:	9801      	ldr	r0, [sp, #4]
   1083c:	9900      	ldr	r1, [sp, #0]
   1083e:	f7f8 fb79 	bl	8f34 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
   10842:	e7ff      	b.n	10844 <_ZN8libchip814Chip8$LT$T$GT$4load17h28b293d7e5188fe6E+0x5a>
    }
   10844:	b00a      	add	sp, #40	; 0x28
   10846:	bd80      	pop	{r7, pc}
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
   10848:	f64c 2080 	movw	r0, #51840	; 0xca80
   1084c:	f2c0 0001 	movt	r0, #1
   10850:	f64d 121c 	movw	r2, #55580	; 0xd91c
   10854:	f2c0 0201 	movt	r2, #1
   10858:	211c      	movs	r1, #28
   1085a:	f004 fc71 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1085e:	defe      	udf	#254	; 0xfe

00010860 <_ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E>:
    fn next(&mut self) {
   10860:	b580      	push	{r7, lr}
   10862:	b084      	sub	sp, #16
   10864:	9003      	str	r0, [sp, #12]
        self.jump(self.pc.wrapping_add(2));
   10866:	8a41      	ldrh	r1, [r0, #18]
   10868:	2202      	movs	r2, #2
   1086a:	9002      	str	r0, [sp, #8]
   1086c:	4608      	mov	r0, r1
   1086e:	4611      	mov	r1, r2
   10870:	f003 fea8 	bl	145c4 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
   10874:	9001      	str	r0, [sp, #4]
   10876:	e7ff      	b.n	10878 <_ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E+0x18>
   10878:	9802      	ldr	r0, [sp, #8]
   1087a:	9901      	ldr	r1, [sp, #4]
   1087c:	f7ff ffad 	bl	107da <_ZN8libchip814Chip8$LT$T$GT$4jump17heb92b408b228e4d7E>
   10880:	e7ff      	b.n	10882 <_ZN8libchip814Chip8$LT$T$GT$4next17h4decf67b38bb92c5E+0x22>
    }
   10882:	b004      	add	sp, #16
   10884:	bd80      	pop	{r7, pc}

00010886 <_ZN8libchip814Chip8$LT$T$GT$4push17hf7601df6bb546f8dE>:
    fn push(&mut self, item: u16) {
   10886:	b580      	push	{r7, lr}
   10888:	b086      	sub	sp, #24
   1088a:	460a      	mov	r2, r1
   1088c:	9004      	str	r0, [sp, #16]
   1088e:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.stack[self.sp as usize] = item;
   10892:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
   10896:	460b      	mov	r3, r1
   10898:	290f      	cmp	r1, #15
   1089a:	9003      	str	r0, [sp, #12]
   1089c:	9202      	str	r2, [sp, #8]
   1089e:	9301      	str	r3, [sp, #4]
   108a0:	d813      	bhi.n	108ca <_ZN8libchip814Chip8$LT$T$GT$4push17hf7601df6bb546f8dE+0x44>
   108a2:	e7ff      	b.n	108a4 <_ZN8libchip814Chip8$LT$T$GT$4push17hf7601df6bb546f8dE+0x1e>
   108a4:	9803      	ldr	r0, [sp, #12]
   108a6:	9901      	ldr	r1, [sp, #4]
   108a8:	eb00 0241 	add.w	r2, r0, r1, lsl #1
   108ac:	9b02      	ldr	r3, [sp, #8]
   108ae:	8293      	strh	r3, [r2, #20]
        self.sp = self.sp.wrapping_add(1);
   108b0:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
   108b4:	2101      	movs	r1, #1
   108b6:	f003 fde8 	bl	1448a <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>
   108ba:	9000      	str	r0, [sp, #0]
   108bc:	e7ff      	b.n	108be <_ZN8libchip814Chip8$LT$T$GT$4push17hf7601df6bb546f8dE+0x38>
   108be:	9800      	ldr	r0, [sp, #0]
   108c0:	9903      	ldr	r1, [sp, #12]
   108c2:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
    }
   108c6:	b006      	add	sp, #24
   108c8:	bd80      	pop	{r7, pc}
        self.stack[self.sp as usize] = item;
   108ca:	f64d 102c 	movw	r0, #55596	; 0xd92c
   108ce:	f2c0 0001 	movt	r0, #1
   108d2:	2210      	movs	r2, #16
   108d4:	9901      	ldr	r1, [sp, #4]
   108d6:	f004 fc49 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   108da:	defe      	udf	#254	; 0xfe

000108dc <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E>:
    fn tick(&mut self) {
   108dc:	b580      	push	{r7, lr}
   108de:	b084      	sub	sp, #16
   108e0:	9003      	str	r0, [sp, #12]
        if self.dt > 0 {
   108e2:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
   108e6:	2900      	cmp	r1, #0
   108e8:	9002      	str	r0, [sp, #8]
   108ea:	d00f      	beq.n	1090c <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x30>
   108ec:	e7ff      	b.n	108ee <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x12>
            self.dt -= 1;
   108ee:	9802      	ldr	r0, [sp, #8]
   108f0:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
   108f4:	3901      	subs	r1, #1
   108f6:	b2ca      	uxtb	r2, r1
   108f8:	460b      	mov	r3, r1
   108fa:	428a      	cmp	r2, r1
   108fc:	9301      	str	r3, [sp, #4]
   108fe:	d126      	bne.n	1094e <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x72>
   10900:	e7ff      	b.n	10902 <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x26>
   10902:	9801      	ldr	r0, [sp, #4]
   10904:	9902      	ldr	r1, [sp, #8]
   10906:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
        if self.dt > 0 {
   1090a:	e7ff      	b.n	1090c <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x30>
        if self.st > 0 {
   1090c:	9802      	ldr	r0, [sp, #8]
   1090e:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
   10912:	2900      	cmp	r1, #0
   10914:	d019      	beq.n	1094a <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x6e>
   10916:	e7ff      	b.n	10918 <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x3c>
            self.st -= 1;
   10918:	9802      	ldr	r0, [sp, #8]
   1091a:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
   1091e:	3901      	subs	r1, #1
   10920:	b2ca      	uxtb	r2, r1
   10922:	460b      	mov	r3, r1
   10924:	428a      	cmp	r2, r1
   10926:	9300      	str	r3, [sp, #0]
   10928:	d11d      	bne.n	10966 <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x8a>
   1092a:	e7ff      	b.n	1092c <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x50>
   1092c:	9800      	ldr	r0, [sp, #0]
   1092e:	9902      	ldr	r1, [sp, #8]
   10930:	f881 0045 	strb.w	r0, [r1, #69]	; 0x45
            if self.st == 0 {
   10934:	f891 2045 	ldrb.w	r2, [r1, #69]	; 0x45
   10938:	2a00      	cmp	r2, #0
   1093a:	d105      	bne.n	10948 <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x6c>
   1093c:	e7ff      	b.n	1093e <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x62>
                self.hw.beep();
   1093e:	9802      	ldr	r0, [sp, #8]
   10940:	f7fb fe03 	bl	c54a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17h46449aaa1682a400E>
   10944:	e7ff      	b.n	10946 <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x6a>
            if self.st == 0 {
   10946:	e7ff      	b.n	10948 <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x6c>
        if self.st > 0 {
   10948:	e7ff      	b.n	1094a <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E+0x6e>
    }
   1094a:	b004      	add	sp, #16
   1094c:	bd80      	pop	{r7, pc}
            self.dt -= 1;
   1094e:	f24d 0040 	movw	r0, #53312	; 0xd040
   10952:	f2c0 0001 	movt	r0, #1
   10956:	f64d 123c 	movw	r2, #55612	; 0xd93c
   1095a:	f2c0 0201 	movt	r2, #1
   1095e:	2121      	movs	r1, #33	; 0x21
   10960:	f004 fbee 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10964:	defe      	udf	#254	; 0xfe
            self.st -= 1;
   10966:	f24d 0040 	movw	r0, #53312	; 0xd040
   1096a:	f2c0 0001 	movt	r0, #1
   1096e:	f64d 124c 	movw	r2, #55628	; 0xd94c
   10972:	f2c0 0201 	movt	r2, #1
   10976:	2121      	movs	r1, #33	; 0x21
   10978:	f004 fbe2 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1097c:	defe      	udf	#254	; 0xfe

0001097e <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E>:
    fn sched(&mut self) {
   1097e:	b510      	push	{r4, lr}
   10980:	b098      	sub	sp, #96	; 0x60
   10982:	9015      	str	r0, [sp, #84]	; 0x54
        if self.hw.sched() {
   10984:	900b      	str	r0, [sp, #44]	; 0x2c
   10986:	f7fb fde4 	bl	c552 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h7a2ee6dc937954dfE>
   1098a:	900a      	str	r0, [sp, #40]	; 0x28
   1098c:	e7ff      	b.n	1098e <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x10>
   1098e:	980a      	ldr	r0, [sp, #40]	; 0x28
   10990:	07c1      	lsls	r1, r0, #31
   10992:	2900      	cmp	r1, #0
   10994:	d005      	beq.n	109a2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x24>
   10996:	e7ff      	b.n	10998 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x1a>
            self.shutdown();
   10998:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1099a:	f000 f900 	bl	10b9e <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h203a3011efe54ce1E>
   1099e:	e7ff      	b.n	109a0 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x22>
        if self.hw.sched() {
   109a0:	e7ff      	b.n	109a2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x24>
        if let Some(t) = self.time {
   109a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   109a4:	6801      	ldr	r1, [r0, #0]
   109a6:	2901      	cmp	r1, #1
   109a8:	d006      	beq.n	109b8 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x3a>
   109aa:	e7ff      	b.n	109ac <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x2e>
            self.time = Some(self.hw.clock());
   109ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
   109ae:	f7fb fd6a 	bl	c486 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h36d752fe6c920e7cE>
   109b2:	9109      	str	r1, [sp, #36]	; 0x24
   109b4:	9008      	str	r0, [sp, #32]
   109b6:	e040      	b.n	10a3a <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0xbc>
        if let Some(t) = self.time {
   109b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   109ba:	6881      	ldr	r1, [r0, #8]
   109bc:	68c2      	ldr	r2, [r0, #12]
   109be:	9217      	str	r2, [sp, #92]	; 0x5c
   109c0:	9116      	str	r1, [sp, #88]	; 0x58
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
   109c2:	9107      	str	r1, [sp, #28]
   109c4:	9206      	str	r2, [sp, #24]
   109c6:	f7fb fd5e 	bl	c486 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h36d752fe6c920e7cE>
   109ca:	9105      	str	r1, [sp, #20]
   109cc:	9004      	str	r0, [sp, #16]
   109ce:	e7ff      	b.n	109d0 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x52>
   109d0:	9804      	ldr	r0, [sp, #16]
   109d2:	9905      	ldr	r1, [sp, #20]
   109d4:	9a07      	ldr	r2, [sp, #28]
   109d6:	9b06      	ldr	r3, [sp, #24]
   109d8:	f003 fe16 	bl	14608 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE>
   109dc:	9103      	str	r1, [sp, #12]
   109de:	9002      	str	r0, [sp, #8]
   109e0:	e7ff      	b.n	109e2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x64>
   109e2:	f245 002b 	movw	r0, #20523	; 0x502b
   109e6:	f2c0 00fe 	movt	r0, #254	; 0xfe
   109ea:	9902      	ldr	r1, [sp, #8]
   109ec:	1a08      	subs	r0, r1, r0
   109ee:	9a03      	ldr	r2, [sp, #12]
   109f0:	f172 0300 	sbcs.w	r3, r2, #0
   109f4:	d320      	bcc.n	10a38 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0xba>
   109f6:	e7ff      	b.n	109f8 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x7a>
                self.tick();
   109f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   109fa:	f7ff ff6f 	bl	108dc <_ZN8libchip814Chip8$LT$T$GT$4tick17h93b5276c8f93ef55E>
   109fe:	e7ff      	b.n	10a00 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x82>
                self.time = Some(self.hw.clock());
   10a00:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10a02:	f7fb fd40 	bl	c486 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h36d752fe6c920e7cE>
   10a06:	9101      	str	r1, [sp, #4]
   10a08:	9000      	str	r0, [sp, #0]
   10a0a:	e7ff      	b.n	10a0c <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0x8e>
   10a0c:	9800      	ldr	r0, [sp, #0]
   10a0e:	900e      	str	r0, [sp, #56]	; 0x38
   10a10:	9901      	ldr	r1, [sp, #4]
   10a12:	910f      	str	r1, [sp, #60]	; 0x3c
   10a14:	2200      	movs	r2, #0
   10a16:	920d      	str	r2, [sp, #52]	; 0x34
   10a18:	2201      	movs	r2, #1
   10a1a:	920c      	str	r2, [sp, #48]	; 0x30
   10a1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10a1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10a20:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   10a24:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   10a28:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   10a2a:	6063      	str	r3, [r4, #4]
   10a2c:	6022      	str	r2, [r4, #0]
   10a2e:	f8c4 e00c 	str.w	lr, [r4, #12]
   10a32:	f8c4 c008 	str.w	ip, [r4, #8]
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
   10a36:	e7ff      	b.n	10a38 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0xba>
        if let Some(t) = self.time {
   10a38:	e015      	b.n	10a66 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0xe8>
            self.time = Some(self.hw.clock());
   10a3a:	9808      	ldr	r0, [sp, #32]
   10a3c:	9012      	str	r0, [sp, #72]	; 0x48
   10a3e:	9909      	ldr	r1, [sp, #36]	; 0x24
   10a40:	9113      	str	r1, [sp, #76]	; 0x4c
   10a42:	2200      	movs	r2, #0
   10a44:	9211      	str	r2, [sp, #68]	; 0x44
   10a46:	2201      	movs	r2, #1
   10a48:	9210      	str	r2, [sp, #64]	; 0x40
   10a4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10a4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10a4e:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   10a52:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
   10a56:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   10a58:	6063      	str	r3, [r4, #4]
   10a5a:	6022      	str	r2, [r4, #0]
   10a5c:	f8c4 e00c 	str.w	lr, [r4, #12]
   10a60:	f8c4 c008 	str.w	ip, [r4, #8]
        if let Some(t) = self.time {
   10a64:	e7ff      	b.n	10a66 <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E+0xe8>
    }
   10a66:	b018      	add	sp, #96	; 0x60
   10a68:	bd10      	pop	{r4, pc}

00010a6a <_ZN8libchip814Chip8$LT$T$GT$5setup17ha7902fed1bdb33a6E>:
    fn setup(&mut self) {
   10a6a:	b580      	push	{r7, lr}
   10a6c:	b088      	sub	sp, #32
   10a6e:	9007      	str	r0, [sp, #28]
   10a70:	f44f 7100 	mov.w	r1, #512	; 0x200
        self.pc = ENTRY;
   10a74:	8241      	strh	r1, [r0, #18]
        self.hw.vram_setsize(DISPS);
   10a76:	f64c 3114 	movw	r1, #51988	; 0xcb14
   10a7a:	f2c0 0101 	movt	r1, #1
   10a7e:	680a      	ldr	r2, [r1, #0]
   10a80:	6849      	ldr	r1, [r1, #4]
   10a82:	9005      	str	r0, [sp, #20]
   10a84:	9104      	str	r1, [sp, #16]
   10a86:	4611      	mov	r1, r2
   10a88:	9a04      	ldr	r2, [sp, #16]
   10a8a:	f7fb fcc5 	bl	c418 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc84691ce0c1cd157E>
   10a8e:	e7ff      	b.n	10a90 <_ZN8libchip814Chip8$LT$T$GT$5setup17ha7902fed1bdb33a6E+0x26>
        self.mem[..CHARBUF.len()].copy_from_slice(&CHARBUF);
   10a90:	9805      	ldr	r0, [sp, #20]
   10a92:	f100 0147 	add.w	r1, r0, #71	; 0x47
   10a96:	f64d 105c 	movw	r0, #55644	; 0xd95c
   10a9a:	f2c0 0001 	movt	r0, #1
   10a9e:	2250      	movs	r2, #80	; 0x50
   10aa0:	9103      	str	r1, [sp, #12]
   10aa2:	4611      	mov	r1, r2
   10aa4:	f000 fddd 	bl	11662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   10aa8:	9002      	str	r0, [sp, #8]
   10aaa:	e7ff      	b.n	10aac <_ZN8libchip814Chip8$LT$T$GT$5setup17ha7902fed1bdb33a6E+0x42>
   10aac:	9802      	ldr	r0, [sp, #8]
   10aae:	9006      	str	r0, [sp, #24]
   10ab0:	9a06      	ldr	r2, [sp, #24]
   10ab2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   10ab6:	9803      	ldr	r0, [sp, #12]
   10ab8:	f7f8 fb39 	bl	912e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>
   10abc:	9001      	str	r0, [sp, #4]
   10abe:	9100      	str	r1, [sp, #0]
   10ac0:	e7ff      	b.n	10ac2 <_ZN8libchip814Chip8$LT$T$GT$5setup17ha7902fed1bdb33a6E+0x58>
   10ac2:	f64d 125c 	movw	r2, #55644	; 0xd95c
   10ac6:	f2c0 0201 	movt	r2, #1
   10aca:	2350      	movs	r3, #80	; 0x50
   10acc:	9801      	ldr	r0, [sp, #4]
   10ace:	9900      	ldr	r1, [sp, #0]
   10ad0:	f7f8 fa30 	bl	8f34 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
   10ad4:	e7ff      	b.n	10ad6 <_ZN8libchip814Chip8$LT$T$GT$5setup17ha7902fed1bdb33a6E+0x6c>
   10ad6:	f241 0047 	movw	r0, #4167	; 0x1047
   10ada:	2101      	movs	r1, #1
        self.running = true;
   10adc:	9a05      	ldr	r2, [sp, #20]
   10ade:	5411      	strb	r1, [r2, r0]
    }
   10ae0:	b008      	add	sp, #32
   10ae2:	bd80      	pop	{r7, pc}

00010ae4 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E>:
    fn waitkey(&mut self) -> u8 {
   10ae4:	b580      	push	{r7, lr}
   10ae6:	b08c      	sub	sp, #48	; 0x30
   10ae8:	900a      	str	r0, [sp, #40]	; 0x28
        while self.running {
   10aea:	9005      	str	r0, [sp, #20]
   10aec:	e7ff      	b.n	10aee <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0xa>
   10aee:	f241 0047 	movw	r0, #4167	; 0x1047
   10af2:	9905      	ldr	r1, [sp, #20]
   10af4:	5c08      	ldrb	r0, [r1, r0]
   10af6:	07c0      	lsls	r0, r0, #31
   10af8:	2800      	cmp	r0, #0
   10afa:	d104      	bne.n	10b06 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x22>
   10afc:	e7ff      	b.n	10afe <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x1a>
   10afe:	2020      	movs	r0, #32
        return b' ';
   10b00:	f88d 001b 	strb.w	r0, [sp, #27]
   10b04:	e047      	b.n	10b96 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0xb2>
            self.sched();
   10b06:	9805      	ldr	r0, [sp, #20]
   10b08:	f7ff ff39 	bl	1097e <_ZN8libchip814Chip8$LT$T$GT$5sched17h1cfdeb66a3537b84E>
   10b0c:	e7ff      	b.n	10b0e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x2a>
   10b0e:	2000      	movs	r0, #0
            for i in 0..0xf {
   10b10:	f88d 001c 	strb.w	r0, [sp, #28]
   10b14:	200f      	movs	r0, #15
   10b16:	f88d 001d 	strb.w	r0, [sp, #29]
   10b1a:	f89d 001c 	ldrb.w	r0, [sp, #28]
   10b1e:	f89d 101d 	ldrb.w	r1, [sp, #29]
   10b22:	f000 fa0b 	bl	10f3c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE>
   10b26:	9004      	str	r0, [sp, #16]
   10b28:	9103      	str	r1, [sp, #12]
   10b2a:	e7ff      	b.n	10b2c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x48>
   10b2c:	9804      	ldr	r0, [sp, #16]
   10b2e:	f88d 0020 	strb.w	r0, [sp, #32]
   10b32:	9903      	ldr	r1, [sp, #12]
   10b34:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   10b38:	e7ff      	b.n	10b3a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x56>
   10b3a:	a808      	add	r0, sp, #32
   10b3c:	f000 f98d 	bl	10e5a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E>
   10b40:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
   10b44:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   10b48:	e7ff      	b.n	10b4a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x66>
   10b4a:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   10b4e:	07c1      	lsls	r1, r0, #31
   10b50:	2900      	cmp	r1, #0
   10b52:	d001      	beq.n	10b58 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x74>
   10b54:	e7ff      	b.n	10b56 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x72>
   10b56:	e001      	b.n	10b5c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x78>
        while self.running {
   10b58:	e7c9      	b.n	10aee <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0xa>
            for i in 0..0xf {
   10b5a:	defe      	udf	#254	; 0xfe
   10b5c:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
   10b60:	4601      	mov	r1, r0
   10b62:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   10b66:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   10b6a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if self.hw.key(i) {
   10b6e:	9a05      	ldr	r2, [sp, #20]
   10b70:	9002      	str	r0, [sp, #8]
   10b72:	4610      	mov	r0, r2
   10b74:	9b02      	ldr	r3, [sp, #8]
   10b76:	9101      	str	r1, [sp, #4]
   10b78:	4619      	mov	r1, r3
   10b7a:	f7fb fa44 	bl	c006 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h6ab5fe7f9b6adc84E>
   10b7e:	9000      	str	r0, [sp, #0]
   10b80:	e7ff      	b.n	10b82 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x9e>
   10b82:	9800      	ldr	r0, [sp, #0]
   10b84:	07c1      	lsls	r1, r0, #31
   10b86:	2900      	cmp	r1, #0
   10b88:	d101      	bne.n	10b8e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0xaa>
   10b8a:	e7ff      	b.n	10b8c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0xa8>
            for i in 0..0xf {
   10b8c:	e7d5      	b.n	10b3a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0x56>
                    return i;
   10b8e:	9801      	ldr	r0, [sp, #4]
   10b90:	f88d 001b 	strb.w	r0, [sp, #27]
   10b94:	e7ff      	b.n	10b96 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h58d956347fe49d75E+0xb2>
    }
   10b96:	f89d 001b 	ldrb.w	r0, [sp, #27]
   10b9a:	b00c      	add	sp, #48	; 0x30
   10b9c:	bd80      	pop	{r7, pc}

00010b9e <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h203a3011efe54ce1E>:
    fn shutdown(&mut self) {
   10b9e:	b081      	sub	sp, #4
   10ba0:	9000      	str	r0, [sp, #0]
   10ba2:	f241 0147 	movw	r1, #4167	; 0x1047
   10ba6:	2200      	movs	r2, #0
        self.running = false;
   10ba8:	5442      	strb	r2, [r0, r1]
    }
   10baa:	b001      	add	sp, #4
   10bac:	4770      	bx	lr

00010bae <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17h830ef09e153bc6fbE>:
   10bae:	b081      	sub	sp, #4
   10bb0:	9000      	str	r0, [sp, #0]
   10bb2:	8800      	ldrh	r0, [r0, #0]
   10bb4:	b001      	add	sp, #4
   10bb6:	4770      	bx	lr

00010bb8 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf0fe5cd21a17e0a6E>:
   10bb8:	b580      	push	{r7, lr}
   10bba:	b082      	sub	sp, #8
   10bbc:	9101      	str	r1, [sp, #4]
   10bbe:	f000 f803 	bl	10bc8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE>
   10bc2:	e7ff      	b.n	10bc4 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hf0fe5cd21a17e0a6E+0xc>
   10bc4:	b002      	add	sp, #8
   10bc6:	bd80      	pop	{r7, pc}

00010bc8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE>:
   10bc8:	b580      	push	{r7, lr}
   10bca:	b0a0      	sub	sp, #128	; 0x80
   10bcc:	911c      	str	r1, [sp, #112]	; 0x70
   10bce:	9103      	str	r1, [sp, #12]
   10bd0:	9002      	str	r0, [sp, #8]
   10bd2:	e7ff      	b.n	10bd4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xc>
   10bd4:	9803      	ldr	r0, [sp, #12]
   10bd6:	68c1      	ldr	r1, [r0, #12]
   10bd8:	2901      	cmp	r1, #1
   10bda:	d11e      	bne.n	10c1a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x52>
   10bdc:	e7ff      	b.n	10bde <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x16>
   10bde:	9803      	ldr	r0, [sp, #12]
   10be0:	f100 0110 	add.w	r1, r0, #16
   10be4:	911e      	str	r1, [sp, #120]	; 0x78
   10be6:	a804      	add	r0, sp, #16
   10be8:	f000 f921 	bl	10e2e <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he4b6bba524de7333E>
   10bec:	e7ff      	b.n	10bee <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x26>
   10bee:	9804      	ldr	r0, [sp, #16]
   10bf0:	2801      	cmp	r0, #1
   10bf2:	d001      	beq.n	10bf8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x30>
   10bf4:	e7ff      	b.n	10bf6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x2e>
   10bf6:	e00f      	b.n	10c18 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x50>
   10bf8:	9804      	ldr	r0, [sp, #16]
   10bfa:	9905      	ldr	r1, [sp, #20]
   10bfc:	9a06      	ldr	r2, [sp, #24]
   10bfe:	9209      	str	r2, [sp, #36]	; 0x24
   10c00:	9108      	str	r1, [sp, #32]
   10c02:	9007      	str	r0, [sp, #28]
   10c04:	9807      	ldr	r0, [sp, #28]
   10c06:	9908      	ldr	r1, [sp, #32]
   10c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10c0a:	9b02      	ldr	r3, [sp, #8]
   10c0c:	609a      	str	r2, [r3, #8]
   10c0e:	6059      	str	r1, [r3, #4]
   10c10:	6018      	str	r0, [r3, #0]
   10c12:	e7ff      	b.n	10c14 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x4c>
   10c14:	b020      	add	sp, #128	; 0x80
   10c16:	bd80      	pop	{r7, pc}
   10c18:	e7ff      	b.n	10c1a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x52>
   10c1a:	a80a      	add	r0, sp, #40	; 0x28
   10c1c:	9903      	ldr	r1, [sp, #12]
   10c1e:	f000 f8f0 	bl	10e02 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2feea8e9eaacbdd0E>
   10c22:	e7ff      	b.n	10c24 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x5c>
   10c24:	980a      	ldr	r0, [sp, #40]	; 0x28
   10c26:	2800      	cmp	r0, #0
   10c28:	d012      	beq.n	10c50 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x88>
   10c2a:	e7ff      	b.n	10c2c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x64>
   10c2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10c2e:	990c      	ldr	r1, [sp, #48]	; 0x30
   10c30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10c32:	9211      	str	r2, [sp, #68]	; 0x44
   10c34:	9110      	str	r1, [sp, #64]	; 0x40
   10c36:	900f      	str	r0, [sp, #60]	; 0x3c
   10c38:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10c3a:	9910      	ldr	r1, [sp, #64]	; 0x40
   10c3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   10c3e:	921b      	str	r2, [sp, #108]	; 0x6c
   10c40:	911a      	str	r1, [sp, #104]	; 0x68
   10c42:	9019      	str	r0, [sp, #100]	; 0x64
   10c44:	a816      	add	r0, sp, #88	; 0x58
   10c46:	a919      	add	r1, sp, #100	; 0x64
   10c48:	f000 f8d4 	bl	10df4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcc80626d7c50dc19E>
   10c4c:	e028      	b.n	10ca0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xd8>
   10c4e:	defe      	udf	#254	; 0xfe
   10c50:	9803      	ldr	r0, [sp, #12]
   10c52:	301c      	adds	r0, #28
   10c54:	f7fb fd7a 	bl	c74c <_ZN4core6option15Option$LT$T$GT$6as_mut17h1de41a42d046f353E>
   10c58:	9001      	str	r0, [sp, #4]
   10c5a:	e7ff      	b.n	10c5c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x94>
   10c5c:	9801      	ldr	r0, [sp, #4]
   10c5e:	f7fb fdaf 	bl	c7c0 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha7a9542e2459a97dE>
   10c62:	900e      	str	r0, [sp, #56]	; 0x38
   10c64:	e7ff      	b.n	10c66 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x9e>
   10c66:	980e      	ldr	r0, [sp, #56]	; 0x38
   10c68:	fab0 f180 	clz	r1, r0
   10c6c:	0949      	lsrs	r1, r1, #5
   10c6e:	2800      	cmp	r0, #0
   10c70:	d101      	bne.n	10c76 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xae>
   10c72:	e7ff      	b.n	10c74 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xac>
   10c74:	e009      	b.n	10c8a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xc2>
   10c76:	980e      	ldr	r0, [sp, #56]	; 0x38
   10c78:	901f      	str	r0, [sp, #124]	; 0x7c
   10c7a:	9902      	ldr	r1, [sp, #8]
   10c7c:	9000      	str	r0, [sp, #0]
   10c7e:	4608      	mov	r0, r1
   10c80:	9900      	ldr	r1, [sp, #0]
   10c82:	f000 f8d4 	bl	10e2e <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he4b6bba524de7333E>
   10c86:	e00a      	b.n	10c9e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xd6>
   10c88:	defe      	udf	#254	; 0xfe
   10c8a:	f003 f827 	bl	13cdc <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>
   10c8e:	e7ff      	b.n	10c90 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xc8>
   10c90:	9802      	ldr	r0, [sp, #8]
   10c92:	f7fb fd90 	bl	c7b6 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E>
   10c96:	e7ff      	b.n	10c98 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xd0>
   10c98:	e7ff      	b.n	10c9a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xd2>
   10c9a:	e7ff      	b.n	10c9c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xd4>
   10c9c:	e7ba      	b.n	10c14 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x4c>
   10c9e:	e7fc      	b.n	10c9a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xd2>
   10ca0:	9816      	ldr	r0, [sp, #88]	; 0x58
   10ca2:	9917      	ldr	r1, [sp, #92]	; 0x5c
   10ca4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   10ca6:	9215      	str	r2, [sp, #84]	; 0x54
   10ca8:	9114      	str	r1, [sp, #80]	; 0x50
   10caa:	9013      	str	r0, [sp, #76]	; 0x4c
   10cac:	2001      	movs	r0, #1
   10cae:	9012      	str	r0, [sp, #72]	; 0x48
   10cb0:	e7ff      	b.n	10cb2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xea>
   10cb2:	9812      	ldr	r0, [sp, #72]	; 0x48
   10cb4:	9913      	ldr	r1, [sp, #76]	; 0x4c
   10cb6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   10cb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10cba:	f8dd c00c 	ldr.w	ip, [sp, #12]
   10cbe:	f8cc 3018 	str.w	r3, [ip, #24]
   10cc2:	f8cc 2014 	str.w	r2, [ip, #20]
   10cc6:	f8cc 1010 	str.w	r1, [ip, #16]
   10cca:	f8cc 000c 	str.w	r0, [ip, #12]
   10cce:	980a      	ldr	r0, [sp, #40]	; 0x28
   10cd0:	2801      	cmp	r0, #1
   10cd2:	d101      	bne.n	10cd8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x110>
   10cd4:	e7ff      	b.n	10cd6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x10e>
   10cd6:	e77d      	b.n	10bd4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0xc>
   10cd8:	e7fd      	b.n	10cd6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30f903d0a54f28dE+0x10e>

00010cda <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h5eca9088e433250cE>:
   10cda:	b5b0      	push	{r4, r5, r7, lr}
   10cdc:	b090      	sub	sp, #64	; 0x40
   10cde:	680a      	ldr	r2, [r1, #0]
   10ce0:	684b      	ldr	r3, [r1, #4]
   10ce2:	6889      	ldr	r1, [r1, #8]
   10ce4:	910f      	str	r1, [sp, #60]	; 0x3c
   10ce6:	930e      	str	r3, [sp, #56]	; 0x38
   10ce8:	920d      	str	r2, [sp, #52]	; 0x34
   10cea:	a902      	add	r1, sp, #8
   10cec:	aa0d      	add	r2, sp, #52	; 0x34
   10cee:	9001      	str	r0, [sp, #4]
   10cf0:	4608      	mov	r0, r1
   10cf2:	4611      	mov	r1, r2
   10cf4:	f000 f80d 	bl	10d12 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17hd9b164ddc3c07b23E>
   10cf8:	e7ff      	b.n	10cfa <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h5eca9088e433250cE+0x20>
   10cfa:	a802      	add	r0, sp, #8
   10cfc:	9901      	ldr	r1, [sp, #4]
   10cfe:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
   10d02:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
   10d06:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
   10d0a:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
   10d0e:	b010      	add	sp, #64	; 0x40
   10d10:	bdb0      	pop	{r4, r5, r7, pc}

00010d12 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17hd9b164ddc3c07b23E>:
   10d12:	b08b      	sub	sp, #44	; 0x2c
   10d14:	680a      	ldr	r2, [r1, #0]
   10d16:	684b      	ldr	r3, [r1, #4]
   10d18:	6889      	ldr	r1, [r1, #8]
   10d1a:	9102      	str	r1, [sp, #8]
   10d1c:	9301      	str	r3, [sp, #4]
   10d1e:	9200      	str	r2, [sp, #0]
   10d20:	2100      	movs	r1, #0
   10d22:	9103      	str	r1, [sp, #12]
   10d24:	9107      	str	r1, [sp, #28]
   10d26:	9900      	ldr	r1, [sp, #0]
   10d28:	9a01      	ldr	r2, [sp, #4]
   10d2a:	9b02      	ldr	r3, [sp, #8]
   10d2c:	6083      	str	r3, [r0, #8]
   10d2e:	6042      	str	r2, [r0, #4]
   10d30:	6001      	str	r1, [r0, #0]
   10d32:	9903      	ldr	r1, [sp, #12]
   10d34:	9a04      	ldr	r2, [sp, #16]
   10d36:	9b05      	ldr	r3, [sp, #20]
   10d38:	f8dd c018 	ldr.w	ip, [sp, #24]
   10d3c:	f8c0 c018 	str.w	ip, [r0, #24]
   10d40:	6143      	str	r3, [r0, #20]
   10d42:	6102      	str	r2, [r0, #16]
   10d44:	60c1      	str	r1, [r0, #12]
   10d46:	9907      	ldr	r1, [sp, #28]
   10d48:	9a08      	ldr	r2, [sp, #32]
   10d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10d4c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   10d50:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
   10d54:	6243      	str	r3, [r0, #36]	; 0x24
   10d56:	6202      	str	r2, [r0, #32]
   10d58:	61c1      	str	r1, [r0, #28]
   10d5a:	b00b      	add	sp, #44	; 0x2c
   10d5c:	4770      	bx	lr

00010d5e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdaeeeffeba3c3f70E>:
   10d5e:	b5b0      	push	{r4, r5, r7, lr}
   10d60:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
   10d64:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
   10d68:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   10d6c:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   10d70:	bdb0      	pop	{r4, r5, r7, pc}

00010d72 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>:
   10d72:	b580      	push	{r7, lr}
   10d74:	b084      	sub	sp, #16
   10d76:	4601      	mov	r1, r0
   10d78:	f88d 000f 	strb.w	r0, [sp, #15]
   10d7c:	9102      	str	r1, [sp, #8]
   10d7e:	f003 fc67 	bl	14650 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E>
   10d82:	9001      	str	r0, [sp, #4]
   10d84:	e7ff      	b.n	10d86 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E+0x14>
   10d86:	9801      	ldr	r0, [sp, #4]
   10d88:	b004      	add	sp, #16
   10d8a:	bd80      	pop	{r7, pc}

00010d8c <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>:
   10d8c:	b580      	push	{r7, lr}
   10d8e:	b086      	sub	sp, #24
   10d90:	460a      	mov	r2, r1
   10d92:	9004      	str	r0, [sp, #16]
   10d94:	f88d 1017 	strb.w	r1, [sp, #23]
   10d98:	9203      	str	r2, [sp, #12]
   10d9a:	f000 fce6 	bl	1176a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   10d9e:	9002      	str	r0, [sp, #8]
   10da0:	e7ff      	b.n	10da2 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E+0x16>
   10da2:	9802      	ldr	r0, [sp, #8]
   10da4:	9903      	ldr	r1, [sp, #12]
   10da6:	f000 fcf9 	bl	1179c <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   10daa:	9001      	str	r0, [sp, #4]
   10dac:	e7ff      	b.n	10dae <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E+0x22>
   10dae:	9801      	ldr	r0, [sp, #4]
   10db0:	b006      	add	sp, #24
   10db2:	bd80      	pop	{r7, pc}

00010db4 <_ZN4core4iter6traits8iterator8Iterator7flatten17h1299c8c4daf1c93cE>:
   10db4:	b580      	push	{r7, lr}
   10db6:	b084      	sub	sp, #16
   10db8:	680a      	ldr	r2, [r1, #0]
   10dba:	684b      	ldr	r3, [r1, #4]
   10dbc:	6889      	ldr	r1, [r1, #8]
   10dbe:	9103      	str	r1, [sp, #12]
   10dc0:	9302      	str	r3, [sp, #8]
   10dc2:	9201      	str	r2, [sp, #4]
   10dc4:	a901      	add	r1, sp, #4
   10dc6:	f7ff ff88 	bl	10cda <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h5eca9088e433250cE>
   10dca:	e7ff      	b.n	10dcc <_ZN4core4iter6traits8iterator8Iterator7flatten17h1299c8c4daf1c93cE+0x18>
   10dcc:	b004      	add	sp, #16
   10dce:	bd80      	pop	{r7, pc}

00010dd0 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17had576ea3abe2661aE>:
   10dd0:	b083      	sub	sp, #12
   10dd2:	9100      	str	r1, [sp, #0]
   10dd4:	9201      	str	r2, [sp, #4]
   10dd6:	9302      	str	r3, [sp, #8]
   10dd8:	6001      	str	r1, [r0, #0]
   10dda:	6042      	str	r2, [r0, #4]
   10ddc:	6083      	str	r3, [r0, #8]
   10dde:	b003      	add	sp, #12
   10de0:	4770      	bx	lr

00010de2 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17he3a44d3ea8f47cacE>:
   10de2:	b083      	sub	sp, #12
   10de4:	9100      	str	r1, [sp, #0]
   10de6:	9201      	str	r2, [sp, #4]
   10de8:	9302      	str	r3, [sp, #8]
   10dea:	6001      	str	r1, [r0, #0]
   10dec:	6042      	str	r2, [r0, #4]
   10dee:	6083      	str	r3, [r0, #8]
   10df0:	b003      	add	sp, #12
   10df2:	4770      	bx	lr

00010df4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcc80626d7c50dc19E>:
   10df4:	680a      	ldr	r2, [r1, #0]
   10df6:	684b      	ldr	r3, [r1, #4]
   10df8:	6889      	ldr	r1, [r1, #8]
   10dfa:	6081      	str	r1, [r0, #8]
   10dfc:	6043      	str	r3, [r0, #4]
   10dfe:	6002      	str	r2, [r0, #0]
   10e00:	4770      	bx	lr

00010e02 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2feea8e9eaacbdd0E>:
   10e02:	b580      	push	{r7, lr}
   10e04:	b086      	sub	sp, #24
   10e06:	9105      	str	r1, [sp, #20]
   10e08:	9004      	str	r0, [sp, #16]
   10e0a:	4608      	mov	r0, r1
   10e0c:	9103      	str	r1, [sp, #12]
   10e0e:	f000 fbc4 	bl	1159a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   10e12:	9002      	str	r0, [sp, #8]
   10e14:	9101      	str	r1, [sp, #4]
   10e16:	e7ff      	b.n	10e18 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2feea8e9eaacbdd0E+0x16>
   10e18:	9803      	ldr	r0, [sp, #12]
   10e1a:	f100 0308 	add.w	r3, r0, #8
   10e1e:	9804      	ldr	r0, [sp, #16]
   10e20:	9902      	ldr	r1, [sp, #8]
   10e22:	9a01      	ldr	r2, [sp, #4]
   10e24:	f7fb fbb9 	bl	c59a <_ZN4core6option15Option$LT$T$GT$3map17h01bebc87bebd6e3eE>
   10e28:	e7ff      	b.n	10e2a <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2feea8e9eaacbdd0E+0x28>
   10e2a:	b006      	add	sp, #24
   10e2c:	bd80      	pop	{r7, pc}

00010e2e <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he4b6bba524de7333E>:
   10e2e:	b580      	push	{r7, lr}
   10e30:	b086      	sub	sp, #24
   10e32:	9105      	str	r1, [sp, #20]
   10e34:	9004      	str	r0, [sp, #16]
   10e36:	4608      	mov	r0, r1
   10e38:	9103      	str	r1, [sp, #12]
   10e3a:	f000 fbae 	bl	1159a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   10e3e:	9002      	str	r0, [sp, #8]
   10e40:	9101      	str	r1, [sp, #4]
   10e42:	e7ff      	b.n	10e44 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he4b6bba524de7333E+0x16>
   10e44:	9803      	ldr	r0, [sp, #12]
   10e46:	f100 0308 	add.w	r3, r0, #8
   10e4a:	9804      	ldr	r0, [sp, #16]
   10e4c:	9902      	ldr	r1, [sp, #8]
   10e4e:	9a01      	ldr	r2, [sp, #4]
   10e50:	f7fb fbf1 	bl	c636 <_ZN4core6option15Option$LT$T$GT$3map17h5532bf2777a6c96aE>
   10e54:	e7ff      	b.n	10e56 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he4b6bba524de7333E+0x28>
   10e56:	b006      	add	sp, #24
   10e58:	bd80      	pop	{r7, pc}

00010e5a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E>:
   10e5a:	b580      	push	{r7, lr}
   10e5c:	b086      	sub	sp, #24
   10e5e:	9005      	str	r0, [sp, #20]
   10e60:	2100      	movs	r1, #0
   10e62:	f88d 1013 	strb.w	r1, [sp, #19]
   10e66:	1c41      	adds	r1, r0, #1
   10e68:	9002      	str	r0, [sp, #8]
   10e6a:	f003 fc16 	bl	1469a <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE>
   10e6e:	9001      	str	r0, [sp, #4]
   10e70:	e7ff      	b.n	10e72 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x18>
   10e72:	9801      	ldr	r0, [sp, #4]
   10e74:	07c1      	lsls	r1, r0, #31
   10e76:	2900      	cmp	r1, #0
   10e78:	d104      	bne.n	10e84 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x2a>
   10e7a:	e7ff      	b.n	10e7c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x22>
   10e7c:	2000      	movs	r0, #0
   10e7e:	f88d 000c 	strb.w	r0, [sp, #12]
   10e82:	e02c      	b.n	10ede <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x84>
   10e84:	2001      	movs	r0, #1
   10e86:	f88d 0013 	strb.w	r0, [sp, #19]
   10e8a:	9902      	ldr	r1, [sp, #8]
   10e8c:	9000      	str	r0, [sp, #0]
   10e8e:	4608      	mov	r0, r1
   10e90:	9900      	ldr	r1, [sp, #0]
   10e92:	f003 fc0e 	bl	146b2 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE>
   10e96:	f88d 1011 	strb.w	r1, [sp, #17]
   10e9a:	f88d 0010 	strb.w	r0, [sp, #16]
   10e9e:	e7ff      	b.n	10ea0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x46>
   10ea0:	f89d 0010 	ldrb.w	r0, [sp, #16]
   10ea4:	07c0      	lsls	r0, r0, #31
   10ea6:	2800      	cmp	r0, #0
   10ea8:	d104      	bne.n	10eb4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x5a>
   10eaa:	e7ff      	b.n	10eac <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x52>
   10eac:	2000      	movs	r0, #0
   10eae:	f88d 000c 	strb.w	r0, [sp, #12]
   10eb2:	e029      	b.n	10f08 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xae>
   10eb4:	2000      	movs	r0, #0
   10eb6:	f88d 0013 	strb.w	r0, [sp, #19]
   10eba:	f89d 0011 	ldrb.w	r0, [sp, #17]
   10ebe:	f88d 0012 	strb.w	r0, [sp, #18]
   10ec2:	f10d 0012 	add.w	r0, sp, #18
   10ec6:	9902      	ldr	r1, [sp, #8]
   10ec8:	f003 fbc9 	bl	1465e <_ZN4core3mem4swap17h206518364108b51fE>
   10ecc:	e7ff      	b.n	10ece <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x74>
   10ece:	f89d 0012 	ldrb.w	r0, [sp, #18]
   10ed2:	f88d 000d 	strb.w	r0, [sp, #13]
   10ed6:	2001      	movs	r0, #1
   10ed8:	f88d 000c 	strb.w	r0, [sp, #12]
   10edc:	e014      	b.n	10f08 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xae>
   10ede:	f89d 000c 	ldrb.w	r0, [sp, #12]
   10ee2:	f89d 100d 	ldrb.w	r1, [sp, #13]
   10ee6:	b006      	add	sp, #24
   10ee8:	bd80      	pop	{r7, pc}
   10eea:	2000      	movs	r0, #0
   10eec:	f88d 0013 	strb.w	r0, [sp, #19]
   10ef0:	e7f5      	b.n	10ede <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x84>
   10ef2:	f89d 0013 	ldrb.w	r0, [sp, #19]
   10ef6:	07c0      	lsls	r0, r0, #31
   10ef8:	2800      	cmp	r0, #0
   10efa:	d0f6      	beq.n	10eea <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   10efc:	e7ff      	b.n	10efe <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xa4>
   10efe:	2000      	movs	r0, #0
   10f00:	f88d 0013 	strb.w	r0, [sp, #19]
   10f04:	e7f1      	b.n	10eea <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   10f06:	e7f0      	b.n	10eea <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   10f08:	f89d 0010 	ldrb.w	r0, [sp, #16]
   10f0c:	07c0      	lsls	r0, r0, #31
   10f0e:	2800      	cmp	r0, #0
   10f10:	d1ef      	bne.n	10ef2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x98>
   10f12:	e7f8      	b.n	10f06 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xac>

00010f14 <_ZN4core4iter6traits8iterator8Iterator3map17h2bffa2f7235b9482E>:
   10f14:	b580      	push	{r7, lr}
   10f16:	b084      	sub	sp, #16
   10f18:	9101      	str	r1, [sp, #4]
   10f1a:	9202      	str	r2, [sp, #8]
   10f1c:	9303      	str	r3, [sp, #12]
   10f1e:	f7ff ff60 	bl	10de2 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17he3a44d3ea8f47cacE>
   10f22:	e7ff      	b.n	10f24 <_ZN4core4iter6traits8iterator8Iterator3map17h2bffa2f7235b9482E+0x10>
   10f24:	b004      	add	sp, #16
   10f26:	bd80      	pop	{r7, pc}

00010f28 <_ZN4core4iter6traits8iterator8Iterator3map17h6d8406b1bb96c52eE>:
   10f28:	b580      	push	{r7, lr}
   10f2a:	b084      	sub	sp, #16
   10f2c:	9101      	str	r1, [sp, #4]
   10f2e:	9202      	str	r2, [sp, #8]
   10f30:	9303      	str	r3, [sp, #12]
   10f32:	f7ff ff4d 	bl	10dd0 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17had576ea3abe2661aE>
   10f36:	e7ff      	b.n	10f38 <_ZN4core4iter6traits8iterator8Iterator3map17h6d8406b1bb96c52eE+0x10>
   10f38:	b004      	add	sp, #16
   10f3a:	bd80      	pop	{r7, pc}

00010f3c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE>:
   10f3c:	b081      	sub	sp, #4
   10f3e:	460a      	mov	r2, r1
   10f40:	4603      	mov	r3, r0
   10f42:	f88d 0000 	strb.w	r0, [sp]
   10f46:	f88d 1001 	strb.w	r1, [sp, #1]
   10f4a:	b001      	add	sp, #4
   10f4c:	4770      	bx	lr

00010f4e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>:
   10f4e:	b084      	sub	sp, #16
   10f50:	9001      	str	r0, [sp, #4]
   10f52:	9102      	str	r1, [sp, #8]
   10f54:	4408      	add	r0, r1
   10f56:	9003      	str	r0, [sp, #12]
   10f58:	9803      	ldr	r0, [sp, #12]
   10f5a:	9000      	str	r0, [sp, #0]
   10f5c:	e7ff      	b.n	10f5e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E+0x10>
   10f5e:	9800      	ldr	r0, [sp, #0]
   10f60:	b004      	add	sp, #16
   10f62:	4770      	bx	lr

00010f64 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>:
   10f64:	b082      	sub	sp, #8
   10f66:	9001      	str	r0, [sp, #4]
   10f68:	9000      	str	r0, [sp, #0]
   10f6a:	e7ff      	b.n	10f6c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE+0x8>
   10f6c:	9800      	ldr	r0, [sp, #0]
   10f6e:	fab0 f180 	clz	r1, r0
   10f72:	0948      	lsrs	r0, r1, #5
   10f74:	b002      	add	sp, #8
   10f76:	4770      	bx	lr

00010f78 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>:
   10f78:	b082      	sub	sp, #8
   10f7a:	9001      	str	r0, [sp, #4]
   10f7c:	9000      	str	r0, [sp, #0]
   10f7e:	9800      	ldr	r0, [sp, #0]
   10f80:	b002      	add	sp, #8
   10f82:	4770      	bx	lr

00010f84 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>:
   10f84:	b081      	sub	sp, #4
   10f86:	9000      	str	r0, [sp, #0]
   10f88:	b001      	add	sp, #4
   10f8a:	4770      	bx	lr

00010f8c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>:
   10f8c:	b580      	push	{r7, lr}
   10f8e:	b084      	sub	sp, #16
   10f90:	9002      	str	r0, [sp, #8]
   10f92:	9103      	str	r1, [sp, #12]
   10f94:	f000 f805 	bl	10fa2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   10f98:	9001      	str	r0, [sp, #4]
   10f9a:	e7ff      	b.n	10f9c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E+0x10>
   10f9c:	9801      	ldr	r0, [sp, #4]
   10f9e:	b004      	add	sp, #16
   10fa0:	bd80      	pop	{r7, pc}

00010fa2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>:
   10fa2:	b084      	sub	sp, #16
   10fa4:	9001      	str	r0, [sp, #4]
   10fa6:	9102      	str	r1, [sp, #8]
   10fa8:	4408      	add	r0, r1
   10faa:	9003      	str	r0, [sp, #12]
   10fac:	9803      	ldr	r0, [sp, #12]
   10fae:	9000      	str	r0, [sp, #0]
   10fb0:	e7ff      	b.n	10fb2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E+0x10>
   10fb2:	9800      	ldr	r0, [sp, #0]
   10fb4:	b004      	add	sp, #16
   10fb6:	4770      	bx	lr

00010fb8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>:
   10fb8:	b082      	sub	sp, #8
   10fba:	9001      	str	r0, [sp, #4]
   10fbc:	9000      	str	r0, [sp, #0]
   10fbe:	e7ff      	b.n	10fc0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE+0x8>
   10fc0:	9800      	ldr	r0, [sp, #0]
   10fc2:	fab0 f180 	clz	r1, r0
   10fc6:	0948      	lsrs	r0, r1, #5
   10fc8:	b002      	add	sp, #8
   10fca:	4770      	bx	lr

00010fcc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>:
   10fcc:	b580      	push	{r7, lr}
   10fce:	b090      	sub	sp, #64	; 0x40
   10fd0:	900c      	str	r0, [sp, #48]	; 0x30
   10fd2:	910d      	str	r1, [sp, #52]	; 0x34
   10fd4:	9007      	str	r0, [sp, #28]
   10fd6:	9106      	str	r1, [sp, #24]
   10fd8:	f000 ff6c 	bl	11eb4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>
   10fdc:	4601      	mov	r1, r0
   10fde:	900e      	str	r0, [sp, #56]	; 0x38
   10fe0:	9105      	str	r1, [sp, #20]
   10fe2:	e7ff      	b.n	10fe4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x18>
   10fe4:	9805      	ldr	r0, [sp, #20]
   10fe6:	f7ff ffe7 	bl	10fb8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   10fea:	e7ff      	b.n	10fec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x20>
   10fec:	e7ff      	b.n	10fee <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x22>
   10fee:	2001      	movs	r0, #1
   10ff0:	900f      	str	r0, [sp, #60]	; 0x3c
   10ff2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10ff4:	9004      	str	r0, [sp, #16]
   10ff6:	e7ff      	b.n	10ff8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x2c>
   10ff8:	9804      	ldr	r0, [sp, #16]
   10ffa:	2800      	cmp	r0, #0
   10ffc:	d006      	beq.n	1100c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x40>
   10ffe:	e7ff      	b.n	11000 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x34>
   11000:	9807      	ldr	r0, [sp, #28]
   11002:	9906      	ldr	r1, [sp, #24]
   11004:	f000 ff4e 	bl	11ea4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   11008:	9003      	str	r0, [sp, #12]
   1100a:	e00e      	b.n	1102a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x5e>
   1100c:	9807      	ldr	r0, [sp, #28]
   1100e:	9906      	ldr	r1, [sp, #24]
   11010:	f000 ff48 	bl	11ea4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   11014:	9002      	str	r0, [sp, #8]
   11016:	e7ff      	b.n	11018 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x4c>
   11018:	9805      	ldr	r0, [sp, #20]
   1101a:	9902      	ldr	r1, [sp, #8]
   1101c:	f7ff ffb6 	bl	10f8c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>
   11020:	9001      	str	r0, [sp, #4]
   11022:	e7ff      	b.n	11024 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x58>
   11024:	9801      	ldr	r0, [sp, #4]
   11026:	900a      	str	r0, [sp, #40]	; 0x28
   11028:	e006      	b.n	11038 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   1102a:	9805      	ldr	r0, [sp, #20]
   1102c:	9903      	ldr	r1, [sp, #12]
   1102e:	f000 ff16 	bl	11e5e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>
   11032:	900a      	str	r0, [sp, #40]	; 0x28
   11034:	e7ff      	b.n	11036 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6a>
   11036:	e7ff      	b.n	11038 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   11038:	9805      	ldr	r0, [sp, #20]
   1103a:	f7ff ff9d 	bl	10f78 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   1103e:	9000      	str	r0, [sp, #0]
   11040:	e7ff      	b.n	11042 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x76>
   11042:	980a      	ldr	r0, [sp, #40]	; 0x28
   11044:	9900      	ldr	r1, [sp, #0]
   11046:	9108      	str	r1, [sp, #32]
   11048:	9009      	str	r0, [sp, #36]	; 0x24
   1104a:	9808      	ldr	r0, [sp, #32]
   1104c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1104e:	b010      	add	sp, #64	; 0x40
   11050:	bd80      	pop	{r7, pc}

00011052 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>:
   11052:	b081      	sub	sp, #4
   11054:	b001      	add	sp, #4
   11056:	4770      	bx	lr

00011058 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>:
   11058:	b580      	push	{r7, lr}
   1105a:	b08e      	sub	sp, #56	; 0x38
   1105c:	9007      	str	r0, [sp, #28]
   1105e:	6801      	ldr	r1, [r0, #0]
   11060:	9005      	str	r0, [sp, #20]
   11062:	4608      	mov	r0, r1
   11064:	f7ff ff8e 	bl	10f84 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11068:	9004      	str	r0, [sp, #16]
   1106a:	e7ff      	b.n	1106c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x14>
   1106c:	9804      	ldr	r0, [sp, #16]
   1106e:	f7ff ff79 	bl	10f64 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>
   11072:	e7ff      	b.n	11074 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1c>
   11074:	e7ff      	b.n	11076 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1e>
   11076:	2001      	movs	r0, #1
   11078:	9008      	str	r0, [sp, #32]
   1107a:	9808      	ldr	r0, [sp, #32]
   1107c:	9003      	str	r0, [sp, #12]
   1107e:	e7ff      	b.n	11080 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x28>
   11080:	9803      	ldr	r0, [sp, #12]
   11082:	2800      	cmp	r0, #0
   11084:	d007      	beq.n	11096 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   11086:	e7ff      	b.n	11088 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x30>
   11088:	9805      	ldr	r0, [sp, #20]
   1108a:	6840      	ldr	r0, [r0, #4]
   1108c:	f7ff ff94 	bl	10fb8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   11090:	e7ff      	b.n	11092 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3a>
   11092:	e7ff      	b.n	11094 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3c>
   11094:	e7ff      	b.n	11096 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   11096:	9805      	ldr	r0, [sp, #20]
   11098:	6800      	ldr	r0, [r0, #0]
   1109a:	f7ff ff73 	bl	10f84 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   1109e:	9002      	str	r0, [sp, #8]
   110a0:	e7ff      	b.n	110a2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x4a>
   110a2:	9805      	ldr	r0, [sp, #20]
   110a4:	6841      	ldr	r1, [r0, #4]
   110a6:	9a02      	ldr	r2, [sp, #8]
   110a8:	428a      	cmp	r2, r1
   110aa:	d02e      	beq.n	1110a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb2>
   110ac:	e7ff      	b.n	110ae <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x56>
   110ae:	9805      	ldr	r0, [sp, #20]
   110b0:	900a      	str	r0, [sp, #40]	; 0x28
   110b2:	2101      	movs	r1, #1
   110b4:	910b      	str	r1, [sp, #44]	; 0x2c
   110b6:	910d      	str	r1, [sp, #52]	; 0x34
   110b8:	990d      	ldr	r1, [sp, #52]	; 0x34
   110ba:	2900      	cmp	r1, #0
   110bc:	d015      	beq.n	110ea <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x92>
   110be:	e7ff      	b.n	110c0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x68>
   110c0:	9805      	ldr	r0, [sp, #20]
   110c2:	6800      	ldr	r0, [r0, #0]
   110c4:	f7ff ff5e 	bl	10f84 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   110c8:	900c      	str	r0, [sp, #48]	; 0x30
   110ca:	9905      	ldr	r1, [sp, #20]
   110cc:	680a      	ldr	r2, [r1, #0]
   110ce:	9001      	str	r0, [sp, #4]
   110d0:	4610      	mov	r0, r2
   110d2:	f7ff ff57 	bl	10f84 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   110d6:	2101      	movs	r1, #1
   110d8:	f7ff ff39 	bl	10f4e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>
   110dc:	f7ff ff4c 	bl	10f78 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   110e0:	9905      	ldr	r1, [sp, #20]
   110e2:	6008      	str	r0, [r1, #0]
   110e4:	9801      	ldr	r0, [sp, #4]
   110e6:	9009      	str	r0, [sp, #36]	; 0x24
   110e8:	e00c      	b.n	11104 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   110ea:	9805      	ldr	r0, [sp, #20]
   110ec:	6840      	ldr	r0, [r0, #4]
   110ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   110f2:	f7ff ff56 	bl	10fa2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   110f6:	9905      	ldr	r1, [sp, #20]
   110f8:	6048      	str	r0, [r1, #4]
   110fa:	6808      	ldr	r0, [r1, #0]
   110fc:	f7ff ff42 	bl	10f84 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11100:	9009      	str	r0, [sp, #36]	; 0x24
   11102:	e7ff      	b.n	11104 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   11104:	9809      	ldr	r0, [sp, #36]	; 0x24
   11106:	9000      	str	r0, [sp, #0]
   11108:	e002      	b.n	11110 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb8>
   1110a:	2000      	movs	r0, #0
   1110c:	9006      	str	r0, [sp, #24]
   1110e:	e002      	b.n	11116 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   11110:	9800      	ldr	r0, [sp, #0]
   11112:	9006      	str	r0, [sp, #24]
   11114:	e7ff      	b.n	11116 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   11116:	9806      	ldr	r0, [sp, #24]
   11118:	b00e      	add	sp, #56	; 0x38
   1111a:	bd80      	pop	{r7, pc}

0001111c <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE>:
   1111c:	b580      	push	{r7, lr}
   1111e:	b084      	sub	sp, #16
   11120:	9002      	str	r0, [sp, #8]
   11122:	9103      	str	r1, [sp, #12]
   11124:	6800      	ldr	r0, [r0, #0]
   11126:	f000 f807 	bl	11138 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>
   1112a:	9001      	str	r0, [sp, #4]
   1112c:	e7ff      	b.n	1112e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE+0x12>
   1112e:	9801      	ldr	r0, [sp, #4]
   11130:	f000 0001 	and.w	r0, r0, #1
   11134:	b004      	add	sp, #16
   11136:	bd80      	pop	{r7, pc}

00011138 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>:
   11138:	b580      	push	{r7, lr}
   1113a:	b088      	sub	sp, #32
   1113c:	9006      	str	r0, [sp, #24]
   1113e:	9107      	str	r1, [sp, #28]
   11140:	9004      	str	r0, [sp, #16]
   11142:	4608      	mov	r0, r1
   11144:	9103      	str	r1, [sp, #12]
   11146:	f004 fe9c 	bl	15e82 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1114a:	9002      	str	r0, [sp, #8]
   1114c:	e7ff      	b.n	1114e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x16>
   1114e:	9802      	ldr	r0, [sp, #8]
   11150:	07c1      	lsls	r1, r0, #31
   11152:	2900      	cmp	r1, #0
   11154:	d105      	bne.n	11162 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x2a>
   11156:	e7ff      	b.n	11158 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x20>
   11158:	9803      	ldr	r0, [sp, #12]
   1115a:	f004 fe96 	bl	15e8a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1115e:	9001      	str	r0, [sp, #4]
   11160:	e007      	b.n	11172 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x3a>
   11162:	9804      	ldr	r0, [sp, #16]
   11164:	9903      	ldr	r1, [sp, #12]
   11166:	f005 fc57 	bl	16a18 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   1116a:	f88d 0017 	strb.w	r0, [sp, #23]
   1116e:	e7ff      	b.n	11170 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x38>
   11170:	e015      	b.n	1119e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   11172:	9801      	ldr	r0, [sp, #4]
   11174:	07c1      	lsls	r1, r0, #31
   11176:	2900      	cmp	r1, #0
   11178:	d107      	bne.n	1118a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x52>
   1117a:	e7ff      	b.n	1117c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x44>
   1117c:	9804      	ldr	r0, [sp, #16]
   1117e:	9903      	ldr	r1, [sp, #12]
   11180:	f005 fd5d 	bl	16c3e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   11184:	f88d 0017 	strb.w	r0, [sp, #23]
   11188:	e007      	b.n	1119a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x62>
   1118a:	9804      	ldr	r0, [sp, #16]
   1118c:	9903      	ldr	r1, [sp, #12]
   1118e:	f005 fcae 	bl	16aee <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   11192:	f88d 0017 	strb.w	r0, [sp, #23]
   11196:	e7ff      	b.n	11198 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x60>
   11198:	e000      	b.n	1119c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   1119a:	e7ff      	b.n	1119c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   1119c:	e7ff      	b.n	1119e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   1119e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   111a2:	b008      	add	sp, #32
   111a4:	bd80      	pop	{r7, pc}

000111a6 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct Coord(pub CoordPart, pub CoordPart);

    impl Coord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: CoordPart, y: CoordPart) -> Self {
   111a6:	b084      	sub	sp, #16
   111a8:	9002      	str	r0, [sp, #8]
   111aa:	9103      	str	r1, [sp, #12]
            Coord(x, y)
   111ac:	9000      	str	r0, [sp, #0]
   111ae:	9101      	str	r1, [sp, #4]
        }
   111b0:	9800      	ldr	r0, [sp, #0]
   111b2:	9901      	ldr	r1, [sp, #4]
   111b4:	b004      	add	sp, #16
   111b6:	4770      	bx	lr

000111b8 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>:
/// Take a tuple of 8 bit `(red, green, blue)` color values and convert them to a single 16 bit
/// color
///
/// The 2 or 3 (for the green channel) least significant bits are discarded
impl From<(u8, u8, u8)> for Rgb565 {
    fn from((r, g, b): (u8, u8, u8)) -> Self {
   111b8:	b08b      	sub	sp, #44	; 0x2c
   111ba:	4601      	mov	r1, r0
   111bc:	f8ad 0020 	strh.w	r0, [sp, #32]
   111c0:	0c00      	lsrs	r0, r0, #16
   111c2:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   111c6:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   111ca:	f88d 001e 	strb.w	r0, [sp, #30]
   111ce:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   111d2:	f8ad 001c 	strh.w	r0, [sp, #28]
   111d6:	f89d 001c 	ldrb.w	r0, [sp, #28]
   111da:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   111de:	f89d 201d 	ldrb.w	r2, [sp, #29]
   111e2:	4613      	mov	r3, r2
   111e4:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   111e8:	f89d 201e 	ldrb.w	r2, [sp, #30]
   111ec:	4694      	mov	ip, r2
   111ee:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
        let value =
        // Red
        (((r as u16) << 8) & RED_MASK)
   111f2:	0200      	lsls	r0, r0, #8
   111f4:	9306      	str	r3, [sp, #24]
   111f6:	f8cd c014 	str.w	ip, [sp, #20]
   111fa:	9004      	str	r0, [sp, #16]
   111fc:	e7ff      	b.n	111fe <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x46>
   111fe:	9804      	ldr	r0, [sp, #16]
   11200:	f400 4178 	and.w	r1, r0, #63488	; 0xf800
        // Green
        | (((g as u16) << 3) & GREEN_MASK)
   11204:	9a06      	ldr	r2, [sp, #24]
   11206:	b2d3      	uxtb	r3, r2
   11208:	00db      	lsls	r3, r3, #3
   1120a:	9103      	str	r1, [sp, #12]
   1120c:	9302      	str	r3, [sp, #8]
   1120e:	e7ff      	b.n	11210 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x58>
   11210:	9802      	ldr	r0, [sp, #8]
   11212:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
        (((r as u16) << 8) & RED_MASK)
   11216:	9a03      	ldr	r2, [sp, #12]
   11218:	4311      	orrs	r1, r2
        // Blue
        | ((b as u16) >> 3 & BLUE_MASK);
   1121a:	9b05      	ldr	r3, [sp, #20]
   1121c:	fa5f fc83 	uxtb.w	ip, r3
   11220:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
   11224:	9101      	str	r1, [sp, #4]
   11226:	f8cd c000 	str.w	ip, [sp]
   1122a:	e7ff      	b.n	1122c <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x74>
   1122c:	9800      	ldr	r0, [sp, #0]
   1122e:	f000 011f 	and.w	r1, r0, #31
        (((r as u16) << 8) & RED_MASK)
   11232:	9a01      	ldr	r2, [sp, #4]
   11234:	4311      	orrs	r1, r2
   11236:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a

        Self(value)
   1123a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    }
   1123e:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   11242:	b00b      	add	sp, #44	; 0x2c
   11244:	4770      	bx	lr

00011246 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>:
   11246:	b580      	push	{r7, lr}
   11248:	b088      	sub	sp, #32
   1124a:	9005      	str	r0, [sp, #20]
   1124c:	9106      	str	r1, [sp, #24]
   1124e:	9003      	str	r0, [sp, #12]
   11250:	4608      	mov	r0, r1
   11252:	f000 fa21 	bl	11698 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>
   11256:	9004      	str	r0, [sp, #16]
   11258:	e7ff      	b.n	1125a <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x14>
   1125a:	9804      	ldr	r0, [sp, #16]
   1125c:	9007      	str	r0, [sp, #28]
   1125e:	9903      	ldr	r1, [sp, #12]
   11260:	680a      	ldr	r2, [r1, #0]
   11262:	9002      	str	r0, [sp, #8]
   11264:	4610      	mov	r0, r2
   11266:	9902      	ldr	r1, [sp, #8]
   11268:	f000 f837 	bl	112da <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>
   1126c:	9001      	str	r0, [sp, #4]
   1126e:	9100      	str	r1, [sp, #0]
   11270:	e7ff      	b.n	11272 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x2c>
   11272:	9801      	ldr	r0, [sp, #4]
   11274:	9900      	ldr	r1, [sp, #0]
   11276:	b008      	add	sp, #32
   11278:	bd80      	pop	{r7, pc}

0001127a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>:
   1127a:	b580      	push	{r7, lr}
   1127c:	b084      	sub	sp, #16
   1127e:	9001      	str	r0, [sp, #4]
   11280:	9102      	str	r1, [sp, #8]
   11282:	9203      	str	r2, [sp, #12]
   11284:	9000      	str	r0, [sp, #0]
   11286:	4608      	mov	r0, r1
   11288:	9900      	ldr	r1, [sp, #0]
   1128a:	f00a fa65 	bl	1b758 <__aeabi_memcpy>
   1128e:	e7ff      	b.n	11290 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE+0x16>
   11290:	b004      	add	sp, #16
   11292:	bd80      	pop	{r7, pc}

00011294 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>:
   11294:	b580      	push	{r7, lr}
   11296:	b084      	sub	sp, #16
   11298:	9001      	str	r0, [sp, #4]
   1129a:	9102      	str	r1, [sp, #8]
   1129c:	9203      	str	r2, [sp, #12]
   1129e:	0092      	lsls	r2, r2, #2
   112a0:	9000      	str	r0, [sp, #0]
   112a2:	4608      	mov	r0, r1
   112a4:	9900      	ldr	r1, [sp, #0]
   112a6:	f00a fa57 	bl	1b758 <__aeabi_memcpy>
   112aa:	e7ff      	b.n	112ac <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E+0x18>
   112ac:	b004      	add	sp, #16
   112ae:	bd80      	pop	{r7, pc}

000112b0 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>:
   112b0:	b082      	sub	sp, #8
   112b2:	9000      	str	r0, [sp, #0]
   112b4:	9101      	str	r1, [sp, #4]
   112b6:	6800      	ldr	r0, [r0, #0]
   112b8:	6809      	ldr	r1, [r1, #0]
   112ba:	2200      	movs	r2, #0
   112bc:	4288      	cmp	r0, r1
   112be:	bf38      	it	cc
   112c0:	2201      	movcc	r2, #1
   112c2:	4610      	mov	r0, r2
   112c4:	b002      	add	sp, #8
   112c6:	4770      	bx	lr

000112c8 <_ZN4core3mem4swap17hc4afbec7b5ffb125E>:
   112c8:	b580      	push	{r7, lr}
   112ca:	b082      	sub	sp, #8
   112cc:	9000      	str	r0, [sp, #0]
   112ce:	9101      	str	r1, [sp, #4]
   112d0:	f000 f85f 	bl	11392 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>
   112d4:	e7ff      	b.n	112d6 <_ZN4core3mem4swap17hc4afbec7b5ffb125E+0xe>
   112d6:	b002      	add	sp, #8
   112d8:	bd80      	pop	{r7, pc}

000112da <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>:
   112da:	b580      	push	{r7, lr}
   112dc:	b088      	sub	sp, #32
   112de:	9004      	str	r0, [sp, #16]
   112e0:	9105      	str	r1, [sp, #20]
   112e2:	f000 f819 	bl	11318 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>
   112e6:	9001      	str	r0, [sp, #4]
   112e8:	9100      	str	r1, [sp, #0]
   112ea:	e7ff      	b.n	112ec <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x12>
   112ec:	9801      	ldr	r0, [sp, #4]
   112ee:	9006      	str	r0, [sp, #24]
   112f0:	9900      	ldr	r1, [sp, #0]
   112f2:	f001 0201 	and.w	r2, r1, #1
   112f6:	f88d 201f 	strb.w	r2, [sp, #31]
   112fa:	2a00      	cmp	r2, #0
   112fc:	d105      	bne.n	1130a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x30>
   112fe:	e7ff      	b.n	11300 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x26>
   11300:	9801      	ldr	r0, [sp, #4]
   11302:	9003      	str	r0, [sp, #12]
   11304:	2101      	movs	r1, #1
   11306:	9102      	str	r1, [sp, #8]
   11308:	e002      	b.n	11310 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   1130a:	2000      	movs	r0, #0
   1130c:	9002      	str	r0, [sp, #8]
   1130e:	e7ff      	b.n	11310 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   11310:	9802      	ldr	r0, [sp, #8]
   11312:	9903      	ldr	r1, [sp, #12]
   11314:	b008      	add	sp, #32
   11316:	bd80      	pop	{r7, pc}

00011318 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>:
   11318:	b08a      	sub	sp, #40	; 0x28
   1131a:	9004      	str	r0, [sp, #16]
   1131c:	9105      	str	r1, [sp, #20]
   1131e:	1840      	adds	r0, r0, r1
   11320:	f04f 0100 	mov.w	r1, #0
   11324:	f141 0100 	adc.w	r1, r1, #0
   11328:	9006      	str	r0, [sp, #24]
   1132a:	f88d 101c 	strb.w	r1, [sp, #28]
   1132e:	9806      	ldr	r0, [sp, #24]
   11330:	f89d 101c 	ldrb.w	r1, [sp, #28]
   11334:	9001      	str	r0, [sp, #4]
   11336:	9100      	str	r1, [sp, #0]
   11338:	e7ff      	b.n	1133a <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE+0x22>
   1133a:	9801      	ldr	r0, [sp, #4]
   1133c:	9008      	str	r0, [sp, #32]
   1133e:	9900      	ldr	r1, [sp, #0]
   11340:	f001 0201 	and.w	r2, r1, #1
   11344:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   11348:	9002      	str	r0, [sp, #8]
   1134a:	f88d 200c 	strb.w	r2, [sp, #12]
   1134e:	9802      	ldr	r0, [sp, #8]
   11350:	f89d 100c 	ldrb.w	r1, [sp, #12]
   11354:	b00a      	add	sp, #40	; 0x28
   11356:	4770      	bx	lr

00011358 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>:
   11358:	b580      	push	{r7, lr}
   1135a:	b08c      	sub	sp, #48	; 0x30
   1135c:	9005      	str	r0, [sp, #20]
   1135e:	9106      	str	r1, [sp, #24]
   11360:	9207      	str	r2, [sp, #28]
   11362:	4603      	mov	r3, r0
   11364:	9008      	str	r0, [sp, #32]
   11366:	4608      	mov	r0, r1
   11368:	9109      	str	r1, [sp, #36]	; 0x24
   1136a:	2104      	movs	r1, #4
   1136c:	910b      	str	r1, [sp, #44]	; 0x2c
   1136e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11370:	9204      	str	r2, [sp, #16]
   11372:	9303      	str	r3, [sp, #12]
   11374:	9002      	str	r0, [sp, #8]
   11376:	9101      	str	r1, [sp, #4]
   11378:	e7ff      	b.n	1137a <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x22>
   1137a:	9801      	ldr	r0, [sp, #4]
   1137c:	9904      	ldr	r1, [sp, #16]
   1137e:	fb00 f201 	mul.w	r2, r0, r1
   11382:	920a      	str	r2, [sp, #40]	; 0x28
   11384:	9803      	ldr	r0, [sp, #12]
   11386:	9902      	ldr	r1, [sp, #8]
   11388:	f000 f82e 	bl	113e8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>
   1138c:	e7ff      	b.n	1138e <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x36>
   1138e:	b00c      	add	sp, #48	; 0x30
   11390:	bd80      	pop	{r7, pc}

00011392 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>:
   11392:	b580      	push	{r7, lr}
   11394:	b088      	sub	sp, #32
   11396:	9004      	str	r0, [sp, #16]
   11398:	9105      	str	r1, [sp, #20]
   1139a:	2204      	movs	r2, #4
   1139c:	9207      	str	r2, [sp, #28]
   1139e:	9a07      	ldr	r2, [sp, #28]
   113a0:	9103      	str	r1, [sp, #12]
   113a2:	9002      	str	r0, [sp, #8]
   113a4:	9201      	str	r2, [sp, #4]
   113a6:	e7ff      	b.n	113a8 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x16>
   113a8:	9801      	ldr	r0, [sp, #4]
   113aa:	2820      	cmp	r0, #32
   113ac:	d306      	bcc.n	113bc <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x2a>
   113ae:	e7ff      	b.n	113b0 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x1e>
   113b0:	2201      	movs	r2, #1
   113b2:	9802      	ldr	r0, [sp, #8]
   113b4:	9903      	ldr	r1, [sp, #12]
   113b6:	f7ff ffcf 	bl	11358 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>
   113ba:	e012      	b.n	113e2 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x50>
   113bc:	9802      	ldr	r0, [sp, #8]
   113be:	f000 f8a1 	bl	11504 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>
   113c2:	4601      	mov	r1, r0
   113c4:	9006      	str	r0, [sp, #24]
   113c6:	9100      	str	r1, [sp, #0]
   113c8:	e7ff      	b.n	113ca <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x38>
   113ca:	2201      	movs	r2, #1
   113cc:	9803      	ldr	r0, [sp, #12]
   113ce:	9902      	ldr	r1, [sp, #8]
   113d0:	f7ff ff60 	bl	11294 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   113d4:	e7ff      	b.n	113d6 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x44>
   113d6:	9803      	ldr	r0, [sp, #12]
   113d8:	9900      	ldr	r1, [sp, #0]
   113da:	f000 f8ac 	bl	11536 <_ZN4core3ptr5write17h4a80332de2cee3d3E>
   113de:	e7ff      	b.n	113e0 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x4e>
   113e0:	e000      	b.n	113e4 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   113e2:	e7ff      	b.n	113e4 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   113e4:	b008      	add	sp, #32
   113e6:	bd80      	pop	{r7, pc}

000113e8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>:
   113e8:	b5d0      	push	{r4, r6, r7, lr}
   113ea:	af02      	add	r7, sp, #8
   113ec:	b0b4      	sub	sp, #208	; 0xd0
   113ee:	466c      	mov	r4, sp
   113f0:	f36f 0404 	bfc	r4, #0, #5
   113f4:	46a5      	mov	sp, r4
   113f6:	9024      	str	r0, [sp, #144]	; 0x90
   113f8:	9125      	str	r1, [sp, #148]	; 0x94
   113fa:	9226      	str	r2, [sp, #152]	; 0x98
   113fc:	2320      	movs	r3, #32
   113fe:	932f      	str	r3, [sp, #188]	; 0xbc
   11400:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   11402:	9327      	str	r3, [sp, #156]	; 0x9c
   11404:	920e      	str	r2, [sp, #56]	; 0x38
   11406:	910d      	str	r1, [sp, #52]	; 0x34
   11408:	900c      	str	r0, [sp, #48]	; 0x30
   1140a:	930b      	str	r3, [sp, #44]	; 0x2c
   1140c:	e7ff      	b.n	1140e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x26>
   1140e:	2000      	movs	r0, #0
   11410:	900f      	str	r0, [sp, #60]	; 0x3c
   11412:	e7ff      	b.n	11414 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   11414:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11416:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11418:	4408      	add	r0, r1
   1141a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1141c:	4290      	cmp	r0, r2
   1141e:	d905      	bls.n	1142c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x44>
   11420:	e7ff      	b.n	11422 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x3a>
   11422:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11424:	990e      	ldr	r1, [sp, #56]	; 0x38
   11426:	4288      	cmp	r0, r1
   11428:	d334      	bcc.n	11494 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xac>
   1142a:	e067      	b.n	114fc <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   1142c:	e7ff      	b.n	1142e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x46>
   1142e:	a810      	add	r0, sp, #64	; 0x40
   11430:	9030      	str	r0, [sp, #192]	; 0xc0
   11432:	9031      	str	r0, [sp, #196]	; 0xc4
   11434:	e7ff      	b.n	11436 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x4e>
   11436:	a810      	add	r0, sp, #64	; 0x40
   11438:	4601      	mov	r1, r0
   1143a:	9028      	str	r0, [sp, #160]	; 0xa0
   1143c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1143e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11440:	900a      	str	r0, [sp, #40]	; 0x28
   11442:	4610      	mov	r0, r2
   11444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11446:	9109      	str	r1, [sp, #36]	; 0x24
   11448:	4619      	mov	r1, r3
   1144a:	f000 f87a 	bl	11542 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1144e:	4601      	mov	r1, r0
   11450:	9029      	str	r0, [sp, #164]	; 0xa4
   11452:	9108      	str	r1, [sp, #32]
   11454:	e7ff      	b.n	11456 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x6e>
   11456:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11458:	980d      	ldr	r0, [sp, #52]	; 0x34
   1145a:	f000 f872 	bl	11542 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1145e:	4601      	mov	r1, r0
   11460:	902a      	str	r0, [sp, #168]	; 0xa8
   11462:	9107      	str	r1, [sp, #28]
   11464:	e7ff      	b.n	11466 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x7e>
   11466:	9808      	ldr	r0, [sp, #32]
   11468:	9909      	ldr	r1, [sp, #36]	; 0x24
   1146a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1146c:	f7ff ff05 	bl	1127a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11470:	e7ff      	b.n	11472 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x8a>
   11472:	9807      	ldr	r0, [sp, #28]
   11474:	9908      	ldr	r1, [sp, #32]
   11476:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11478:	f7ff feff 	bl	1127a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1147c:	e7ff      	b.n	1147e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x96>
   1147e:	9809      	ldr	r0, [sp, #36]	; 0x24
   11480:	9907      	ldr	r1, [sp, #28]
   11482:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11484:	f7ff fef9 	bl	1127a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11488:	e7ff      	b.n	1148a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xa2>
   1148a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1148c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1148e:	4408      	add	r0, r1
   11490:	900f      	str	r0, [sp, #60]	; 0x3c
   11492:	e7bf      	b.n	11414 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   11494:	e7ff      	b.n	11496 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xae>
   11496:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11498:	990e      	ldr	r1, [sp, #56]	; 0x38
   1149a:	1a08      	subs	r0, r1, r0
   1149c:	4602      	mov	r2, r0
   1149e:	902b      	str	r0, [sp, #172]	; 0xac
   114a0:	a81c      	add	r0, sp, #112	; 0x70
   114a2:	9032      	str	r0, [sp, #200]	; 0xc8
   114a4:	9033      	str	r0, [sp, #204]	; 0xcc
   114a6:	9206      	str	r2, [sp, #24]
   114a8:	9005      	str	r0, [sp, #20]
   114aa:	e7ff      	b.n	114ac <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xc4>
   114ac:	9805      	ldr	r0, [sp, #20]
   114ae:	9905      	ldr	r1, [sp, #20]
   114b0:	912c      	str	r1, [sp, #176]	; 0xb0
   114b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   114b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   114b6:	9004      	str	r0, [sp, #16]
   114b8:	4610      	mov	r0, r2
   114ba:	f000 f842 	bl	11542 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   114be:	4601      	mov	r1, r0
   114c0:	902d      	str	r0, [sp, #180]	; 0xb4
   114c2:	9103      	str	r1, [sp, #12]
   114c4:	e7ff      	b.n	114c6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xde>
   114c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   114c8:	980d      	ldr	r0, [sp, #52]	; 0x34
   114ca:	f000 f83a 	bl	11542 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   114ce:	4601      	mov	r1, r0
   114d0:	902e      	str	r0, [sp, #184]	; 0xb8
   114d2:	9102      	str	r1, [sp, #8]
   114d4:	e7ff      	b.n	114d6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xee>
   114d6:	9803      	ldr	r0, [sp, #12]
   114d8:	9904      	ldr	r1, [sp, #16]
   114da:	9a06      	ldr	r2, [sp, #24]
   114dc:	f7ff fecd 	bl	1127a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   114e0:	e7ff      	b.n	114e2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xfa>
   114e2:	9802      	ldr	r0, [sp, #8]
   114e4:	9903      	ldr	r1, [sp, #12]
   114e6:	9a06      	ldr	r2, [sp, #24]
   114e8:	f7ff fec7 	bl	1127a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   114ec:	e7ff      	b.n	114ee <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x106>
   114ee:	9804      	ldr	r0, [sp, #16]
   114f0:	9902      	ldr	r1, [sp, #8]
   114f2:	9a06      	ldr	r2, [sp, #24]
   114f4:	f7ff fec1 	bl	1127a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   114f8:	e7ff      	b.n	114fa <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x112>
   114fa:	e7ff      	b.n	114fc <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   114fc:	f1a7 0408 	sub.w	r4, r7, #8
   11500:	46a5      	mov	sp, r4
   11502:	bdd0      	pop	{r4, r6, r7, pc}

00011504 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>:
   11504:	b580      	push	{r7, lr}
   11506:	b08a      	sub	sp, #40	; 0x28
   11508:	9004      	str	r0, [sp, #16]
   1150a:	9905      	ldr	r1, [sp, #20]
   1150c:	9103      	str	r1, [sp, #12]
   1150e:	9002      	str	r0, [sp, #8]
   11510:	e7ff      	b.n	11512 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0xe>
   11512:	a803      	add	r0, sp, #12
   11514:	9008      	str	r0, [sp, #32]
   11516:	9009      	str	r0, [sp, #36]	; 0x24
   11518:	e7ff      	b.n	1151a <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x16>
   1151a:	a903      	add	r1, sp, #12
   1151c:	2201      	movs	r2, #1
   1151e:	9802      	ldr	r0, [sp, #8]
   11520:	f7ff feb8 	bl	11294 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   11524:	e7ff      	b.n	11526 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x22>
   11526:	9803      	ldr	r0, [sp, #12]
   11528:	9006      	str	r0, [sp, #24]
   1152a:	9007      	str	r0, [sp, #28]
   1152c:	9001      	str	r0, [sp, #4]
   1152e:	e7ff      	b.n	11530 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x2c>
   11530:	9801      	ldr	r0, [sp, #4]
   11532:	b00a      	add	sp, #40	; 0x28
   11534:	bd80      	pop	{r7, pc}

00011536 <_ZN4core3ptr5write17h4a80332de2cee3d3E>:
   11536:	b082      	sub	sp, #8
   11538:	9000      	str	r0, [sp, #0]
   1153a:	9101      	str	r1, [sp, #4]
   1153c:	6001      	str	r1, [r0, #0]
   1153e:	b002      	add	sp, #8
   11540:	4770      	bx	lr

00011542 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>:
   11542:	b580      	push	{r7, lr}
   11544:	b084      	sub	sp, #16
   11546:	9002      	str	r0, [sp, #8]
   11548:	9103      	str	r1, [sp, #12]
   1154a:	f000 f805 	bl	11558 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>
   1154e:	9001      	str	r0, [sp, #4]
   11550:	e7ff      	b.n	11552 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E+0x10>
   11552:	9801      	ldr	r0, [sp, #4]
   11554:	b004      	add	sp, #16
   11556:	bd80      	pop	{r7, pc}

00011558 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>:
   11558:	b084      	sub	sp, #16
   1155a:	9001      	str	r0, [sp, #4]
   1155c:	9102      	str	r1, [sp, #8]
   1155e:	4408      	add	r0, r1
   11560:	9003      	str	r0, [sp, #12]
   11562:	9803      	ldr	r0, [sp, #12]
   11564:	9000      	str	r0, [sp, #0]
   11566:	e7ff      	b.n	11568 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE+0x10>
   11568:	9800      	ldr	r0, [sp, #0]
   1156a:	b004      	add	sp, #16
   1156c:	4770      	bx	lr

0001156e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>:
   1156e:	b580      	push	{r7, lr}
   11570:	b084      	sub	sp, #16
   11572:	9002      	str	r0, [sp, #8]
   11574:	9103      	str	r1, [sp, #12]
   11576:	f000 f805 	bl	11584 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>
   1157a:	9001      	str	r0, [sp, #4]
   1157c:	e7ff      	b.n	1157e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE+0x10>
   1157e:	9801      	ldr	r0, [sp, #4]
   11580:	b004      	add	sp, #16
   11582:	bd80      	pop	{r7, pc}

00011584 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>:
   11584:	b084      	sub	sp, #16
   11586:	9001      	str	r0, [sp, #4]
   11588:	9102      	str	r1, [sp, #8]
   1158a:	4408      	add	r0, r1
   1158c:	9003      	str	r0, [sp, #12]
   1158e:	9803      	ldr	r0, [sp, #12]
   11590:	9000      	str	r0, [sp, #0]
   11592:	e7ff      	b.n	11594 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE+0x10>
   11594:	9800      	ldr	r0, [sp, #0]
   11596:	b004      	add	sp, #16
   11598:	4770      	bx	lr

0001159a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>:
   1159a:	b580      	push	{r7, lr}
   1159c:	b08a      	sub	sp, #40	; 0x28
   1159e:	9009      	str	r0, [sp, #36]	; 0x24
   115a0:	2100      	movs	r1, #0
   115a2:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   115a6:	1d01      	adds	r1, r0, #4
   115a8:	9002      	str	r0, [sp, #8]
   115aa:	f7ff fe81 	bl	112b0 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>
   115ae:	9001      	str	r0, [sp, #4]
   115b0:	e7ff      	b.n	115b2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x18>
   115b2:	9801      	ldr	r0, [sp, #4]
   115b4:	07c1      	lsls	r1, r0, #31
   115b6:	2900      	cmp	r1, #0
   115b8:	d103      	bne.n	115c2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x28>
   115ba:	e7ff      	b.n	115bc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x22>
   115bc:	2000      	movs	r0, #0
   115be:	9003      	str	r0, [sp, #12]
   115c0:	e021      	b.n	11606 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   115c2:	2001      	movs	r0, #1
   115c4:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   115c8:	9902      	ldr	r1, [sp, #8]
   115ca:	9000      	str	r0, [sp, #0]
   115cc:	4608      	mov	r0, r1
   115ce:	9900      	ldr	r1, [sp, #0]
   115d0:	f7ff fe39 	bl	11246 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>
   115d4:	9106      	str	r1, [sp, #24]
   115d6:	9005      	str	r0, [sp, #20]
   115d8:	e7ff      	b.n	115da <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x40>
   115da:	9805      	ldr	r0, [sp, #20]
   115dc:	2801      	cmp	r0, #1
   115de:	d003      	beq.n	115e8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x4e>
   115e0:	e7ff      	b.n	115e2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x48>
   115e2:	2000      	movs	r0, #0
   115e4:	9003      	str	r0, [sp, #12]
   115e6:	e021      	b.n	1162c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   115e8:	2000      	movs	r0, #0
   115ea:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   115ee:	9806      	ldr	r0, [sp, #24]
   115f0:	9007      	str	r0, [sp, #28]
   115f2:	a807      	add	r0, sp, #28
   115f4:	9902      	ldr	r1, [sp, #8]
   115f6:	f7ff fe67 	bl	112c8 <_ZN4core3mem4swap17hc4afbec7b5ffb125E>
   115fa:	e7ff      	b.n	115fc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x62>
   115fc:	9807      	ldr	r0, [sp, #28]
   115fe:	9004      	str	r0, [sp, #16]
   11600:	2001      	movs	r0, #1
   11602:	9003      	str	r0, [sp, #12]
   11604:	e012      	b.n	1162c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   11606:	9803      	ldr	r0, [sp, #12]
   11608:	9904      	ldr	r1, [sp, #16]
   1160a:	b00a      	add	sp, #40	; 0x28
   1160c:	bd80      	pop	{r7, pc}
   1160e:	2000      	movs	r0, #0
   11610:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11614:	e7f7      	b.n	11606 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   11616:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1161a:	07c0      	lsls	r0, r0, #31
   1161c:	2800      	cmp	r0, #0
   1161e:	d0f6      	beq.n	1160e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11620:	e7ff      	b.n	11622 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x88>
   11622:	2000      	movs	r0, #0
   11624:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11628:	e7f1      	b.n	1160e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   1162a:	e7f0      	b.n	1160e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   1162c:	9805      	ldr	r0, [sp, #20]
   1162e:	2801      	cmp	r0, #1
   11630:	d0f1      	beq.n	11616 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x7c>
   11632:	e7fa      	b.n	1162a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x90>

00011634 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>:
   11634:	b082      	sub	sp, #8
   11636:	9000      	str	r0, [sp, #0]
   11638:	9101      	str	r1, [sp, #4]
   1163a:	b002      	add	sp, #8
   1163c:	4770      	bx	lr

0001163e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>:
   1163e:	b580      	push	{r7, lr}
   11640:	b086      	sub	sp, #24
   11642:	9003      	str	r0, [sp, #12]
   11644:	9104      	str	r1, [sp, #16]
   11646:	9205      	str	r2, [sp, #20]
   11648:	9002      	str	r0, [sp, #8]
   1164a:	4610      	mov	r0, r2
   1164c:	9a02      	ldr	r2, [sp, #8]
   1164e:	9101      	str	r1, [sp, #4]
   11650:	4611      	mov	r1, r2
   11652:	9a01      	ldr	r2, [sp, #4]
   11654:	f000 f846 	bl	116e4 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>
   11658:	9000      	str	r0, [sp, #0]
   1165a:	e7ff      	b.n	1165c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E+0x1e>
   1165c:	9800      	ldr	r0, [sp, #0]
   1165e:	b006      	add	sp, #24
   11660:	bd80      	pop	{r7, pc}

00011662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>:
   11662:	b084      	sub	sp, #16
   11664:	9002      	str	r0, [sp, #8]
   11666:	9103      	str	r1, [sp, #12]
   11668:	9000      	str	r0, [sp, #0]
   1166a:	9101      	str	r1, [sp, #4]
   1166c:	9801      	ldr	r0, [sp, #4]
   1166e:	b004      	add	sp, #16
   11670:	4770      	bx	lr

00011672 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>:
   11672:	b082      	sub	sp, #8
   11674:	9000      	str	r0, [sp, #0]
   11676:	9101      	str	r1, [sp, #4]
   11678:	b002      	add	sp, #8
   1167a:	4770      	bx	lr

0001167c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>:
   1167c:	b081      	sub	sp, #4
   1167e:	9000      	str	r0, [sp, #0]
   11680:	b001      	add	sp, #4
   11682:	4770      	bx	lr

00011684 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>:
   11684:	b580      	push	{r7, lr}
   11686:	b082      	sub	sp, #8
   11688:	9001      	str	r0, [sp, #4]
   1168a:	f7ff fff7 	bl	1167c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>
   1168e:	9000      	str	r0, [sp, #0]
   11690:	e7ff      	b.n	11692 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE+0xe>
   11692:	9800      	ldr	r0, [sp, #0]
   11694:	b002      	add	sp, #8
   11696:	bd80      	pop	{r7, pc}

00011698 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>:
   11698:	b580      	push	{r7, lr}
   1169a:	b084      	sub	sp, #16
   1169c:	9003      	str	r0, [sp, #12]
   1169e:	f7ff fff1 	bl	11684 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>
   116a2:	9001      	str	r0, [sp, #4]
   116a4:	e7ff      	b.n	116a6 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E+0xe>
   116a6:	9801      	ldr	r0, [sp, #4]
   116a8:	9002      	str	r0, [sp, #8]
   116aa:	9802      	ldr	r0, [sp, #8]
   116ac:	b004      	add	sp, #16
   116ae:	bd80      	pop	{r7, pc}

000116b0 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>:
   116b0:	b082      	sub	sp, #8
   116b2:	9000      	str	r0, [sp, #0]
   116b4:	9101      	str	r1, [sp, #4]
   116b6:	b002      	add	sp, #8
   116b8:	4770      	bx	lr

000116ba <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>:
   116ba:	b580      	push	{r7, lr}
   116bc:	b086      	sub	sp, #24
   116be:	9003      	str	r0, [sp, #12]
   116c0:	9104      	str	r1, [sp, #16]
   116c2:	9205      	str	r2, [sp, #20]
   116c4:	9002      	str	r0, [sp, #8]
   116c6:	4608      	mov	r0, r1
   116c8:	4611      	mov	r1, r2
   116ca:	f7ff ffd2 	bl	11672 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   116ce:	9001      	str	r0, [sp, #4]
   116d0:	e7ff      	b.n	116d2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x18>
   116d2:	9801      	ldr	r0, [sp, #4]
   116d4:	9902      	ldr	r1, [sp, #8]
   116d6:	f7ff ff4a 	bl	1156e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>
   116da:	9000      	str	r0, [sp, #0]
   116dc:	e7ff      	b.n	116de <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x24>
   116de:	9800      	ldr	r0, [sp, #0]
   116e0:	b006      	add	sp, #24
   116e2:	bd80      	pop	{r7, pc}

000116e4 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>:
   116e4:	b580      	push	{r7, lr}
   116e6:	b086      	sub	sp, #24
   116e8:	9003      	str	r0, [sp, #12]
   116ea:	9104      	str	r1, [sp, #16]
   116ec:	9205      	str	r2, [sp, #20]
   116ee:	9002      	str	r0, [sp, #8]
   116f0:	4608      	mov	r0, r1
   116f2:	4611      	mov	r1, r2
   116f4:	f7ff ff9e 	bl	11634 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   116f8:	9001      	str	r0, [sp, #4]
   116fa:	e7ff      	b.n	116fc <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x18>
   116fc:	9801      	ldr	r0, [sp, #4]
   116fe:	9902      	ldr	r1, [sp, #8]
   11700:	f7ff ff1f 	bl	11542 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11704:	9000      	str	r0, [sp, #0]
   11706:	e7ff      	b.n	11708 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x24>
   11708:	9800      	ldr	r0, [sp, #0]
   1170a:	b006      	add	sp, #24
   1170c:	bd80      	pop	{r7, pc}

0001170e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>:
   1170e:	b081      	sub	sp, #4
   11710:	b001      	add	sp, #4
   11712:	4770      	bx	lr

00011714 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>:
   11714:	b580      	push	{r7, lr}
   11716:	b086      	sub	sp, #24
   11718:	f8dd c020 	ldr.w	ip, [sp, #32]
   1171c:	9102      	str	r1, [sp, #8]
   1171e:	9203      	str	r2, [sp, #12]
   11720:	9304      	str	r3, [sp, #16]
   11722:	f8cd c014 	str.w	ip, [sp, #20]
   11726:	f04f 0e00 	mov.w	lr, #0
   1172a:	f8cd e004 	str.w	lr, [sp, #4]
   1172e:	f8cd e000 	str.w	lr, [sp]
   11732:	f8cd e000 	str.w	lr, [sp]
   11736:	6001      	str	r1, [r0, #0]
   11738:	6042      	str	r2, [r0, #4]
   1173a:	9900      	ldr	r1, [sp, #0]
   1173c:	9a01      	ldr	r2, [sp, #4]
   1173e:	6081      	str	r1, [r0, #8]
   11740:	60c2      	str	r2, [r0, #12]
   11742:	6103      	str	r3, [r0, #16]
   11744:	f8c0 c014 	str.w	ip, [r0, #20]
   11748:	b006      	add	sp, #24
   1174a:	bd80      	pop	{r7, pc}

0001174c <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>:
   1174c:	b580      	push	{r7, lr}
   1174e:	b084      	sub	sp, #16
   11750:	9101      	str	r1, [sp, #4]
   11752:	9202      	str	r2, [sp, #8]
   11754:	9901      	ldr	r1, [sp, #4]
   11756:	9a02      	ldr	r2, [sp, #8]
   11758:	f000 fa95 	bl	11c86 <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>
   1175c:	e7ff      	b.n	1175e <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE+0x12>
   1175e:	b004      	add	sp, #16
   11760:	bd80      	pop	{r7, pc}

00011762 <_ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE>:
   11762:	b081      	sub	sp, #4
   11764:	9000      	str	r0, [sp, #0]
   11766:	b001      	add	sp, #4
   11768:	4770      	bx	lr

0001176a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>:
   1176a:	b081      	sub	sp, #4
   1176c:	9000      	str	r0, [sp, #0]
   1176e:	b001      	add	sp, #4
   11770:	4770      	bx	lr

00011772 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>:
   11772:	b580      	push	{r7, lr}
   11774:	b086      	sub	sp, #24
   11776:	460a      	mov	r2, r1
   11778:	9004      	str	r0, [sp, #16]
   1177a:	f88d 1017 	strb.w	r1, [sp, #23]
   1177e:	9203      	str	r2, [sp, #12]
   11780:	f7ff fff3 	bl	1176a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   11784:	9002      	str	r0, [sp, #8]
   11786:	e7ff      	b.n	11788 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x16>
   11788:	9802      	ldr	r0, [sp, #8]
   1178a:	9903      	ldr	r1, [sp, #12]
   1178c:	f000 f806 	bl	1179c <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   11790:	9001      	str	r0, [sp, #4]
   11792:	e7ff      	b.n	11794 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x22>
   11794:	9801      	ldr	r0, [sp, #4]
   11796:	b006      	add	sp, #24
   11798:	bd80      	pop	{r7, pc}
	...

0001179c <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>:
   1179c:	b086      	sub	sp, #24
   1179e:	460a      	mov	r2, r1
   117a0:	f88d 100f 	strb.w	r1, [sp, #15]
   117a4:	9005      	str	r0, [sp, #20]
   117a6:	f89d 100f 	ldrb.w	r1, [sp, #15]
   117aa:	9002      	str	r0, [sp, #8]
   117ac:	9101      	str	r1, [sp, #4]
   117ae:	9901      	ldr	r1, [sp, #4]
   117b0:	e8df f001 	tbb	[pc, r1]
   117b4:	03102317 	.word	0x03102317
   117b8:	001c      	.short	0x001c
   117ba:	f64d 10ac 	movw	r0, #55724	; 0xd9ac
   117be:	f2c0 0001 	movt	r0, #1
   117c2:	f64d 2228 	movw	r2, #55848	; 0xda28
   117c6:	f2c0 0201 	movt	r2, #1
   117ca:	2131      	movs	r1, #49	; 0x31
   117cc:	f003 fcb8 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   117d0:	defe      	udf	#254	; 0xfe
   117d2:	defe      	udf	#254	; 0xfe
   117d4:	9802      	ldr	r0, [sp, #8]
   117d6:	6801      	ldr	r1, [r0, #0]
   117d8:	f3bf 8f5f 	dmb	sy
   117dc:	9104      	str	r1, [sp, #16]
   117de:	e7ff      	b.n	117e0 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x44>
   117e0:	e017      	b.n	11812 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   117e2:	9802      	ldr	r0, [sp, #8]
   117e4:	6801      	ldr	r1, [r0, #0]
   117e6:	9104      	str	r1, [sp, #16]
   117e8:	e7ff      	b.n	117ea <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x4e>
   117ea:	e012      	b.n	11812 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   117ec:	9802      	ldr	r0, [sp, #8]
   117ee:	6801      	ldr	r1, [r0, #0]
   117f0:	f3bf 8f5f 	dmb	sy
   117f4:	9104      	str	r1, [sp, #16]
   117f6:	e7ff      	b.n	117f8 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x5c>
   117f8:	e00b      	b.n	11812 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   117fa:	f64d 2038 	movw	r0, #55864	; 0xda38
   117fe:	f2c0 0001 	movt	r0, #1
   11802:	f64d 2228 	movw	r2, #55848	; 0xda28
   11806:	f2c0 0201 	movt	r2, #1
   1180a:	2128      	movs	r1, #40	; 0x28
   1180c:	f003 fc98 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11810:	defe      	udf	#254	; 0xfe
   11812:	9804      	ldr	r0, [sp, #16]
   11814:	b006      	add	sp, #24
   11816:	4770      	bx	lr

00011818 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>:
   11818:	b081      	sub	sp, #4
   1181a:	9000      	str	r0, [sp, #0]
   1181c:	6800      	ldr	r0, [r0, #0]
   1181e:	b001      	add	sp, #4
   11820:	4770      	bx	lr

00011822 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>:
   11822:	b082      	sub	sp, #8
   11824:	9001      	str	r0, [sp, #4]
   11826:	6801      	ldr	r1, [r0, #0]
   11828:	6840      	ldr	r0, [r0, #4]
   1182a:	9000      	str	r0, [sp, #0]
   1182c:	4608      	mov	r0, r1
   1182e:	9900      	ldr	r1, [sp, #0]
   11830:	b002      	add	sp, #8
   11832:	4770      	bx	lr

00011834 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>:
   11834:	b580      	push	{r7, lr}
   11836:	b08c      	sub	sp, #48	; 0x30
   11838:	9101      	str	r1, [sp, #4]
   1183a:	9202      	str	r2, [sp, #8]
   1183c:	2100      	movs	r1, #0
   1183e:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   11842:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   11846:	2101      	movs	r1, #1
   11848:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   1184c:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   11850:	9901      	ldr	r1, [sp, #4]
   11852:	2900      	cmp	r1, #0
   11854:	460a      	mov	r2, r1
   11856:	bf18      	it	ne
   11858:	2201      	movne	r2, #1
   1185a:	2900      	cmp	r1, #0
   1185c:	9000      	str	r0, [sp, #0]
   1185e:	d001      	beq.n	11864 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x30>
   11860:	e7ff      	b.n	11862 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x2e>
   11862:	e008      	b.n	11876 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x42>
   11864:	2000      	movs	r0, #0
   11866:	9900      	ldr	r1, [sp, #0]
   11868:	6088      	str	r0, [r1, #8]
   1186a:	6048      	str	r0, [r1, #4]
   1186c:	6008      	str	r0, [r1, #0]
   1186e:	2002      	movs	r0, #2
   11870:	6008      	str	r0, [r1, #0]
   11872:	e021      	b.n	118b8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   11874:	defe      	udf	#254	; 0xfe
   11876:	2000      	movs	r0, #0
   11878:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   1187c:	9901      	ldr	r1, [sp, #4]
   1187e:	9a02      	ldr	r2, [sp, #8]
   11880:	910a      	str	r1, [sp, #40]	; 0x28
   11882:	920b      	str	r2, [sp, #44]	; 0x2c
   11884:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11888:	9106      	str	r1, [sp, #24]
   1188a:	9207      	str	r2, [sp, #28]
   1188c:	9906      	ldr	r1, [sp, #24]
   1188e:	9a07      	ldr	r2, [sp, #28]
   11890:	a803      	add	r0, sp, #12
   11892:	f7ff ff5b 	bl	1174c <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>
   11896:	e7ff      	b.n	11898 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x64>
   11898:	9803      	ldr	r0, [sp, #12]
   1189a:	9904      	ldr	r1, [sp, #16]
   1189c:	9a05      	ldr	r2, [sp, #20]
   1189e:	9b00      	ldr	r3, [sp, #0]
   118a0:	609a      	str	r2, [r3, #8]
   118a2:	6059      	str	r1, [r3, #4]
   118a4:	6018      	str	r0, [r3, #0]
   118a6:	e007      	b.n	118b8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   118a8:	9801      	ldr	r0, [sp, #4]
   118aa:	2800      	cmp	r0, #0
   118ac:	d10c      	bne.n	118c8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x94>
   118ae:	e015      	b.n	118dc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa8>
   118b0:	2000      	movs	r0, #0
   118b2:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   118b6:	e7f7      	b.n	118a8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   118b8:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   118bc:	07c0      	lsls	r0, r0, #31
   118be:	2800      	cmp	r0, #0
   118c0:	d1f6      	bne.n	118b0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x7c>
   118c2:	e7f1      	b.n	118a8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   118c4:	b00c      	add	sp, #48	; 0x30
   118c6:	bd80      	pop	{r7, pc}
   118c8:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   118cc:	07c0      	lsls	r0, r0, #31
   118ce:	2800      	cmp	r0, #0
   118d0:	d0f8      	beq.n	118c4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   118d2:	e7ff      	b.n	118d4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa0>
   118d4:	2000      	movs	r0, #0
   118d6:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   118da:	e7f3      	b.n	118c4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   118dc:	e7f2      	b.n	118c4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>

000118de <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>:
   118de:	b081      	sub	sp, #4
   118e0:	b001      	add	sp, #4
   118e2:	4770      	bx	lr

000118e4 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>:
   118e4:	b5b0      	push	{r4, r5, r7, lr}
   118e6:	b081      	sub	sp, #4
   118e8:	9100      	str	r1, [sp, #0]
   118ea:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   118ee:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   118f2:	b001      	add	sp, #4
   118f4:	bdb0      	pop	{r4, r5, r7, pc}

000118f6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>:
   118f6:	b580      	push	{r7, lr}
   118f8:	b088      	sub	sp, #32
   118fa:	9106      	str	r1, [sp, #24]
   118fc:	680a      	ldr	r2, [r1, #0]
   118fe:	1e93      	subs	r3, r2, #2
   11900:	bf18      	it	ne
   11902:	2301      	movne	r3, #1
   11904:	2a02      	cmp	r2, #2
   11906:	9102      	str	r1, [sp, #8]
   11908:	9001      	str	r0, [sp, #4]
   1190a:	d001      	beq.n	11910 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x1a>
   1190c:	e7ff      	b.n	1190e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x18>
   1190e:	e008      	b.n	11922 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x2c>
   11910:	2000      	movs	r0, #0
   11912:	9901      	ldr	r1, [sp, #4]
   11914:	6088      	str	r0, [r1, #8]
   11916:	6048      	str	r0, [r1, #4]
   11918:	6008      	str	r0, [r1, #0]
   1191a:	2002      	movs	r0, #2
   1191c:	6008      	str	r0, [r1, #0]
   1191e:	e00f      	b.n	11940 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   11920:	defe      	udf	#254	; 0xfe
   11922:	9802      	ldr	r0, [sp, #8]
   11924:	9007      	str	r0, [sp, #28]
   11926:	a803      	add	r0, sp, #12
   11928:	9902      	ldr	r1, [sp, #8]
   1192a:	f000 f9b5 	bl	11c98 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>
   1192e:	e7ff      	b.n	11930 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x3a>
   11930:	9803      	ldr	r0, [sp, #12]
   11932:	9904      	ldr	r1, [sp, #16]
   11934:	9a05      	ldr	r2, [sp, #20]
   11936:	9b01      	ldr	r3, [sp, #4]
   11938:	609a      	str	r2, [r3, #8]
   1193a:	6059      	str	r1, [r3, #4]
   1193c:	6018      	str	r0, [r3, #0]
   1193e:	e7ff      	b.n	11940 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   11940:	b008      	add	sp, #32
   11942:	bd80      	pop	{r7, pc}

00011944 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>:
   11944:	b580      	push	{r7, lr}
   11946:	b086      	sub	sp, #24
   11948:	9004      	str	r0, [sp, #16]
   1194a:	6801      	ldr	r1, [r0, #0]
   1194c:	2900      	cmp	r1, #0
   1194e:	9001      	str	r0, [sp, #4]
   11950:	d001      	beq.n	11956 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x12>
   11952:	e7ff      	b.n	11954 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x10>
   11954:	e003      	b.n	1195e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x1a>
   11956:	2000      	movs	r0, #0
   11958:	9002      	str	r0, [sp, #8]
   1195a:	e00d      	b.n	11978 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   1195c:	defe      	udf	#254	; 0xfe
   1195e:	9801      	ldr	r0, [sp, #4]
   11960:	1d01      	adds	r1, r0, #4
   11962:	9105      	str	r1, [sp, #20]
   11964:	4608      	mov	r0, r1
   11966:	f7ff ff57 	bl	11818 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>
   1196a:	9000      	str	r0, [sp, #0]
   1196c:	e7ff      	b.n	1196e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x2a>
   1196e:	9800      	ldr	r0, [sp, #0]
   11970:	9003      	str	r0, [sp, #12]
   11972:	2101      	movs	r1, #1
   11974:	9102      	str	r1, [sp, #8]
   11976:	e7ff      	b.n	11978 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   11978:	9802      	ldr	r0, [sp, #8]
   1197a:	9903      	ldr	r1, [sp, #12]
   1197c:	b006      	add	sp, #24
   1197e:	bd80      	pop	{r7, pc}

00011980 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>:
    fn clone(&self) -> Level {
   11980:	b081      	sub	sp, #4
   11982:	9000      	str	r0, [sp, #0]
        *self
   11984:	6800      	ldr	r0, [r0, #0]
    }
   11986:	b001      	add	sp, #4
   11988:	4770      	bx	lr

0001198a <_ZN3log6Record7builder17hde62ab0132265febE>:
    pub fn builder() -> RecordBuilder<'a> {
   1198a:	b580      	push	{r7, lr}
        RecordBuilder::new()
   1198c:	f000 f802 	bl	11994 <_ZN3log13RecordBuilder3new17haca8312579858419E>
   11990:	e7ff      	b.n	11992 <_ZN3log6Record7builder17hde62ab0132265febE+0x8>
    }
   11992:	bd80      	pop	{r7, pc}

00011994 <_ZN3log13RecordBuilder3new17haca8312579858419E>:
    pub fn new() -> RecordBuilder<'a> {
   11994:	b570      	push	{r4, r5, r6, lr}
   11996:	b0aa      	sub	sp, #168	; 0xa8
                args: format_args!(""),
   11998:	f64d 2178 	movw	r1, #55928	; 0xda78
   1199c:	f2c0 0101 	movt	r1, #1
   119a0:	6809      	ldr	r1, [r1, #0]
   119a2:	466a      	mov	r2, sp
   119a4:	2300      	movs	r3, #0
   119a6:	6013      	str	r3, [r2, #0]
   119a8:	aa16      	add	r2, sp, #88	; 0x58
   119aa:	9004      	str	r0, [sp, #16]
   119ac:	4610      	mov	r0, r2
   119ae:	9103      	str	r1, [sp, #12]
   119b0:	461a      	mov	r2, r3
   119b2:	9b03      	ldr	r3, [sp, #12]
   119b4:	f7ff feae 	bl	11714 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>
   119b8:	e7ff      	b.n	119ba <_ZN3log13RecordBuilder3new17haca8312579858419E+0x26>
   119ba:	a81f      	add	r0, sp, #124	; 0x7c
                metadata: Metadata::builder().build(),
   119bc:	f000 f891 	bl	11ae2 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>
   119c0:	e7ff      	b.n	119c2 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x2e>
   119c2:	a81c      	add	r0, sp, #112	; 0x70
   119c4:	a91f      	add	r1, sp, #124	; 0x7c
   119c6:	f000 f8a5 	bl	11b14 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>
   119ca:	e7ff      	b.n	119cc <_ZN3log13RecordBuilder3new17haca8312579858419E+0x38>
   119cc:	2000      	movs	r0, #0
                module_path: None,
   119ce:	9024      	str	r0, [sp, #144]	; 0x90
   119d0:	9023      	str	r0, [sp, #140]	; 0x8c
   119d2:	9022      	str	r0, [sp, #136]	; 0x88
   119d4:	2102      	movs	r1, #2
   119d6:	9122      	str	r1, [sp, #136]	; 0x88
                file: None,
   119d8:	9027      	str	r0, [sp, #156]	; 0x9c
   119da:	9026      	str	r0, [sp, #152]	; 0x98
   119dc:	9025      	str	r0, [sp, #148]	; 0x94
   119de:	9125      	str	r1, [sp, #148]	; 0x94
                line: None,
   119e0:	9028      	str	r0, [sp, #160]	; 0xa0
            record: Record {
   119e2:	981c      	ldr	r0, [sp, #112]	; 0x70
   119e4:	991d      	ldr	r1, [sp, #116]	; 0x74
   119e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   119e8:	9207      	str	r2, [sp, #28]
   119ea:	9106      	str	r1, [sp, #24]
   119ec:	9005      	str	r0, [sp, #20]
   119ee:	a805      	add	r0, sp, #20
   119f0:	f100 010c 	add.w	r1, r0, #12
   119f4:	aa16      	add	r2, sp, #88	; 0x58
   119f6:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   119fa:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   119fe:	9922      	ldr	r1, [sp, #136]	; 0x88
   11a00:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   11a02:	9b24      	ldr	r3, [sp, #144]	; 0x90
   11a04:	9310      	str	r3, [sp, #64]	; 0x40
   11a06:	920f      	str	r2, [sp, #60]	; 0x3c
   11a08:	910e      	str	r1, [sp, #56]	; 0x38
   11a0a:	9925      	ldr	r1, [sp, #148]	; 0x94
   11a0c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   11a0e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   11a10:	9313      	str	r3, [sp, #76]	; 0x4c
   11a12:	9212      	str	r2, [sp, #72]	; 0x48
   11a14:	9111      	str	r1, [sp, #68]	; 0x44
   11a16:	9928      	ldr	r1, [sp, #160]	; 0xa0
   11a18:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   11a1a:	9114      	str	r1, [sp, #80]	; 0x50
   11a1c:	9215      	str	r2, [sp, #84]	; 0x54
   11a1e:	2244      	movs	r2, #68	; 0x44
        return RecordBuilder {
   11a20:	9904      	ldr	r1, [sp, #16]
   11a22:	9002      	str	r0, [sp, #8]
   11a24:	4608      	mov	r0, r1
   11a26:	9902      	ldr	r1, [sp, #8]
   11a28:	f009 fe96 	bl	1b758 <__aeabi_memcpy>
    }
   11a2c:	b02a      	add	sp, #168	; 0xa8
   11a2e:	bd70      	pop	{r4, r5, r6, pc}

00011a30 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
   11a30:	b5f0      	push	{r4, r5, r6, r7, lr}
   11a32:	b087      	sub	sp, #28
   11a34:	9006      	str	r0, [sp, #24]
   11a36:	466a      	mov	r2, sp
        self.record.args = args;
   11a38:	4613      	mov	r3, r2
   11a3a:	e891 50f0 	ldmia.w	r1, {r4, r5, r6, r7, ip, lr}
   11a3e:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
   11a42:	f100 010c 	add.w	r1, r0, #12
   11a46:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   11a4a:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    }
   11a4e:	b007      	add	sp, #28
   11a50:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011a52 <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
   11a52:	b082      	sub	sp, #8
   11a54:	9000      	str	r0, [sp, #0]
   11a56:	9101      	str	r1, [sp, #4]
        self.record.metadata.level = level;
   11a58:	6001      	str	r1, [r0, #0]
    }
   11a5a:	b002      	add	sp, #8
   11a5c:	4770      	bx	lr

00011a5e <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
   11a5e:	b083      	sub	sp, #12
   11a60:	9000      	str	r0, [sp, #0]
   11a62:	9101      	str	r1, [sp, #4]
   11a64:	9202      	str	r2, [sp, #8]
        self.record.metadata.target = target;
   11a66:	6041      	str	r1, [r0, #4]
   11a68:	6082      	str	r2, [r0, #8]
    }
   11a6a:	b003      	add	sp, #12
   11a6c:	4770      	bx	lr

00011a6e <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
   11a6e:	b580      	push	{r7, lr}
   11a70:	b088      	sub	sp, #32
   11a72:	9005      	str	r0, [sp, #20]
   11a74:	9106      	str	r1, [sp, #24]
   11a76:	9207      	str	r2, [sp, #28]
   11a78:	ab02      	add	r3, sp, #8
        self.record.module_path = path.map(MaybeStaticStr::Static);
   11a7a:	9001      	str	r0, [sp, #4]
   11a7c:	4618      	mov	r0, r3
   11a7e:	f7ff fed9 	bl	11834 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   11a82:	e7ff      	b.n	11a84 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE+0x16>
   11a84:	9802      	ldr	r0, [sp, #8]
   11a86:	9903      	ldr	r1, [sp, #12]
   11a88:	9a04      	ldr	r2, [sp, #16]
   11a8a:	9b01      	ldr	r3, [sp, #4]
   11a8c:	62da      	str	r2, [r3, #44]	; 0x2c
   11a8e:	6299      	str	r1, [r3, #40]	; 0x28
   11a90:	6258      	str	r0, [r3, #36]	; 0x24
    }
   11a92:	4618      	mov	r0, r3
   11a94:	b008      	add	sp, #32
   11a96:	bd80      	pop	{r7, pc}

00011a98 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
   11a98:	b580      	push	{r7, lr}
   11a9a:	b088      	sub	sp, #32
   11a9c:	9005      	str	r0, [sp, #20]
   11a9e:	9106      	str	r1, [sp, #24]
   11aa0:	9207      	str	r2, [sp, #28]
   11aa2:	ab02      	add	r3, sp, #8
        self.record.file = file.map(MaybeStaticStr::Static);
   11aa4:	9001      	str	r0, [sp, #4]
   11aa6:	4618      	mov	r0, r3
   11aa8:	f7ff fec4 	bl	11834 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   11aac:	e7ff      	b.n	11aae <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E+0x16>
   11aae:	9802      	ldr	r0, [sp, #8]
   11ab0:	9903      	ldr	r1, [sp, #12]
   11ab2:	9a04      	ldr	r2, [sp, #16]
   11ab4:	9b01      	ldr	r3, [sp, #4]
   11ab6:	639a      	str	r2, [r3, #56]	; 0x38
   11ab8:	6359      	str	r1, [r3, #52]	; 0x34
   11aba:	6318      	str	r0, [r3, #48]	; 0x30
    }
   11abc:	4618      	mov	r0, r3
   11abe:	b008      	add	sp, #32
   11ac0:	bd80      	pop	{r7, pc}

00011ac2 <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
   11ac2:	b083      	sub	sp, #12
   11ac4:	9000      	str	r0, [sp, #0]
   11ac6:	9101      	str	r1, [sp, #4]
   11ac8:	9202      	str	r2, [sp, #8]
        self.record.line = line;
   11aca:	63c1      	str	r1, [r0, #60]	; 0x3c
   11acc:	6402      	str	r2, [r0, #64]	; 0x40
    }
   11ace:	b003      	add	sp, #12
   11ad0:	4770      	bx	lr

00011ad2 <_ZN3log13RecordBuilder5build17h83529556a009112eE>:
    pub fn build(&self) -> Record<'a> {
   11ad2:	b580      	push	{r7, lr}
   11ad4:	b082      	sub	sp, #8
   11ad6:	9101      	str	r1, [sp, #4]
        self.record.clone()
   11ad8:	f000 f8e8 	bl	11cac <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>
   11adc:	e7ff      	b.n	11ade <_ZN3log13RecordBuilder5build17h83529556a009112eE+0xc>
    }
   11ade:	b002      	add	sp, #8
   11ae0:	bd80      	pop	{r7, pc}

00011ae2 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>:
    pub fn builder() -> MetadataBuilder<'a> {
   11ae2:	b580      	push	{r7, lr}
        MetadataBuilder::new()
   11ae4:	f000 f802 	bl	11aec <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>
   11ae8:	e7ff      	b.n	11aea <_ZN3log8Metadata7builder17ha56bd59835d60a3cE+0x8>
    }
   11aea:	bd80      	pop	{r7, pc}

00011aec <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>:
    pub fn new() -> MetadataBuilder<'a> {
   11aec:	b084      	sub	sp, #16
   11aee:	2103      	movs	r1, #3
                level: Level::Info,
   11af0:	9103      	str	r1, [sp, #12]
            metadata: Metadata {
   11af2:	9903      	ldr	r1, [sp, #12]
   11af4:	9100      	str	r1, [sp, #0]
   11af6:	f64d 2160 	movw	r1, #55904	; 0xda60
   11afa:	f2c0 0101 	movt	r1, #1
   11afe:	9101      	str	r1, [sp, #4]
   11b00:	2100      	movs	r1, #0
   11b02:	9102      	str	r1, [sp, #8]
        MetadataBuilder {
   11b04:	9900      	ldr	r1, [sp, #0]
   11b06:	9a01      	ldr	r2, [sp, #4]
   11b08:	9b02      	ldr	r3, [sp, #8]
   11b0a:	6083      	str	r3, [r0, #8]
   11b0c:	6042      	str	r2, [r0, #4]
   11b0e:	6001      	str	r1, [r0, #0]
    }
   11b10:	b004      	add	sp, #16
   11b12:	4770      	bx	lr

00011b14 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>:
    pub fn build(&self) -> Metadata<'a> {
   11b14:	b580      	push	{r7, lr}
   11b16:	b082      	sub	sp, #8
   11b18:	9101      	str	r1, [sp, #4]
        self.metadata.clone()
   11b1a:	f000 f91c 	bl	11d56 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   11b1e:	e7ff      	b.n	11b20 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E+0xc>
    }
   11b20:	b002      	add	sp, #8
   11b22:	bd80      	pop	{r7, pc}

00011b24 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE>:
    fn enabled(&self, _: &Metadata) -> bool {
   11b24:	b082      	sub	sp, #8
   11b26:	9000      	str	r0, [sp, #0]
   11b28:	9101      	str	r1, [sp, #4]
   11b2a:	2000      	movs	r0, #0
    }
   11b2c:	b002      	add	sp, #8
   11b2e:	4770      	bx	lr

00011b30 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE>:
    fn log(&self, _: &Record) {}
   11b30:	b082      	sub	sp, #8
   11b32:	9000      	str	r0, [sp, #0]
   11b34:	9101      	str	r1, [sp, #4]
   11b36:	b002      	add	sp, #8
   11b38:	4770      	bx	lr

00011b3a <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE>:
    fn flush(&self) {}
   11b3a:	b081      	sub	sp, #4
   11b3c:	9000      	str	r0, [sp, #0]
   11b3e:	b001      	add	sp, #4
   11b40:	4770      	bx	lr

00011b42 <_ZN3log6logger17hf609e7cc1c031552E>:
}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static Log {
   11b42:	b580      	push	{r7, lr}
   11b44:	b084      	sub	sp, #16
   11b46:	2004      	movs	r0, #4
    unsafe {
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   11b48:	f88d 000f 	strb.w	r0, [sp, #15]
   11b4c:	f89d 100f 	ldrb.w	r1, [sp, #15]
   11b50:	f646 2068 	movw	r0, #27240	; 0x6a68
   11b54:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11b58:	f7ff fe0b 	bl	11772 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>
   11b5c:	9000      	str	r0, [sp, #0]
   11b5e:	e7ff      	b.n	11b60 <_ZN3log6logger17hf609e7cc1c031552E+0x1e>
   11b60:	9800      	ldr	r0, [sp, #0]
   11b62:	2802      	cmp	r0, #2
   11b64:	d109      	bne.n	11b7a <_ZN3log6logger17hf609e7cc1c031552E+0x38>
   11b66:	e7ff      	b.n	11b68 <_ZN3log6logger17hf609e7cc1c031552E+0x26>
            static NOP: NopLogger = NopLogger;
            &NOP
        } else {
            LOGGER
   11b68:	f240 00f0 	movw	r0, #240	; 0xf0
   11b6c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11b70:	6801      	ldr	r1, [r0, #0]
   11b72:	6840      	ldr	r0, [r0, #4]
   11b74:	9101      	str	r1, [sp, #4]
   11b76:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   11b78:	e00a      	b.n	11b90 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
            &NOP
   11b7a:	f64d 2094 	movw	r0, #55956	; 0xda94
   11b7e:	f2c0 0001 	movt	r0, #1
   11b82:	9001      	str	r0, [sp, #4]
   11b84:	f64d 207c 	movw	r0, #55932	; 0xda7c
   11b88:	f2c0 0001 	movt	r0, #1
   11b8c:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   11b8e:	e7ff      	b.n	11b90 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
   11b90:	9801      	ldr	r0, [sp, #4]
   11b92:	9902      	ldr	r1, [sp, #8]
        }
    }
}
   11b94:	b004      	add	sp, #16
   11b96:	bd80      	pop	{r7, pc}

00011b98 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
   11b98:	b570      	push	{r4, r5, r6, lr}
   11b9a:	b0ca      	sub	sp, #296	; 0x128
   11b9c:	9141      	str	r1, [sp, #260]	; 0x104
   11b9e:	9242      	str	r2, [sp, #264]	; 0x108
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
   11ba0:	6813      	ldr	r3, [r2, #0]
   11ba2:	f8d2 c004 	ldr.w	ip, [r2, #4]
   11ba6:	9343      	str	r3, [sp, #268]	; 0x10c
   11ba8:	f8cd c110 	str.w	ip, [sp, #272]	; 0x110
   11bac:	f8d2 e008 	ldr.w	lr, [r2, #8]
   11bb0:	68d4      	ldr	r4, [r2, #12]
   11bb2:	f8cd e114 	str.w	lr, [sp, #276]	; 0x114
   11bb6:	9446      	str	r4, [sp, #280]	; 0x118
   11bb8:	6915      	ldr	r5, [r2, #16]
   11bba:	6956      	ldr	r6, [r2, #20]
   11bbc:	9547      	str	r5, [sp, #284]	; 0x11c
   11bbe:	9648      	str	r6, [sp, #288]	; 0x120
   11bc0:	6992      	ldr	r2, [r2, #24]
   11bc2:	9249      	str	r2, [sp, #292]	; 0x124
) {
    logger().log(
   11bc4:	9112      	str	r1, [sp, #72]	; 0x48
   11bc6:	9011      	str	r0, [sp, #68]	; 0x44
   11bc8:	9310      	str	r3, [sp, #64]	; 0x40
   11bca:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   11bce:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   11bd2:	940d      	str	r4, [sp, #52]	; 0x34
   11bd4:	950c      	str	r5, [sp, #48]	; 0x30
   11bd6:	960b      	str	r6, [sp, #44]	; 0x2c
   11bd8:	920a      	str	r2, [sp, #40]	; 0x28
   11bda:	f7ff ffb2 	bl	11b42 <_ZN3log6logger17hf609e7cc1c031552E>
   11bde:	9009      	str	r0, [sp, #36]	; 0x24
   11be0:	9108      	str	r1, [sp, #32]
   11be2:	e7ff      	b.n	11be4 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x4c>
   11be4:	a824      	add	r0, sp, #144	; 0x90
        &Record::builder()
   11be6:	f7ff fed0 	bl	1198a <_ZN3log6Record7builder17hde62ab0132265febE>
   11bea:	e7ff      	b.n	11bec <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x54>
   11bec:	a835      	add	r0, sp, #212	; 0xd4
            .args(args)
   11bee:	4601      	mov	r1, r0
   11bf0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   11bf2:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   11bf6:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   11bfa:	a924      	add	r1, sp, #144	; 0x90
        &Record::builder()
   11bfc:	9007      	str	r0, [sp, #28]
   11bfe:	4608      	mov	r0, r1
   11c00:	9907      	ldr	r1, [sp, #28]
   11c02:	f7ff ff15 	bl	11a30 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>
   11c06:	9006      	str	r0, [sp, #24]
   11c08:	e7ff      	b.n	11c0a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x72>
   11c0a:	9806      	ldr	r0, [sp, #24]
   11c0c:	9912      	ldr	r1, [sp, #72]	; 0x48
   11c0e:	f7ff ff20 	bl	11a52 <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>
   11c12:	9005      	str	r0, [sp, #20]
   11c14:	e7ff      	b.n	11c16 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x7e>
   11c16:	9805      	ldr	r0, [sp, #20]
   11c18:	9910      	ldr	r1, [sp, #64]	; 0x40
   11c1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11c1c:	f7ff ff1f 	bl	11a5e <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>
   11c20:	9004      	str	r0, [sp, #16]
   11c22:	e7ff      	b.n	11c24 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x8c>
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
   11c24:	980e      	ldr	r0, [sp, #56]	; 0x38
   11c26:	903b      	str	r0, [sp, #236]	; 0xec
   11c28:	990d      	ldr	r1, [sp, #52]	; 0x34
   11c2a:	913c      	str	r1, [sp, #240]	; 0xf0
        &Record::builder()
   11c2c:	993b      	ldr	r1, [sp, #236]	; 0xec
   11c2e:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   11c30:	9804      	ldr	r0, [sp, #16]
   11c32:	f7ff ff1c 	bl	11a6e <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>
   11c36:	9003      	str	r0, [sp, #12]
   11c38:	e7ff      	b.n	11c3a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xa2>
            .file_static(Some(file))
   11c3a:	980c      	ldr	r0, [sp, #48]	; 0x30
   11c3c:	903d      	str	r0, [sp, #244]	; 0xf4
   11c3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11c40:	913e      	str	r1, [sp, #248]	; 0xf8
        &Record::builder()
   11c42:	993d      	ldr	r1, [sp, #244]	; 0xf4
   11c44:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
   11c46:	9803      	ldr	r0, [sp, #12]
   11c48:	f7ff ff26 	bl	11a98 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>
   11c4c:	9002      	str	r0, [sp, #8]
   11c4e:	e7ff      	b.n	11c50 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xb8>
            .line(Some(line))
   11c50:	980a      	ldr	r0, [sp, #40]	; 0x28
   11c52:	9040      	str	r0, [sp, #256]	; 0x100
   11c54:	2101      	movs	r1, #1
   11c56:	913f      	str	r1, [sp, #252]	; 0xfc
        &Record::builder()
   11c58:	993f      	ldr	r1, [sp, #252]	; 0xfc
   11c5a:	9a40      	ldr	r2, [sp, #256]	; 0x100
   11c5c:	9802      	ldr	r0, [sp, #8]
   11c5e:	f7ff ff30 	bl	11ac2 <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>
   11c62:	9001      	str	r0, [sp, #4]
   11c64:	e7ff      	b.n	11c66 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xce>
   11c66:	a813      	add	r0, sp, #76	; 0x4c
   11c68:	9901      	ldr	r1, [sp, #4]
   11c6a:	f7ff ff32 	bl	11ad2 <_ZN3log13RecordBuilder5build17h83529556a009112eE>
   11c6e:	e7ff      	b.n	11c70 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xd8>
    logger().log(
   11c70:	9808      	ldr	r0, [sp, #32]
   11c72:	6901      	ldr	r1, [r0, #16]
   11c74:	aa13      	add	r2, sp, #76	; 0x4c
   11c76:	9809      	ldr	r0, [sp, #36]	; 0x24
   11c78:	9100      	str	r1, [sp, #0]
   11c7a:	4611      	mov	r1, r2
   11c7c:	9a00      	ldr	r2, [sp, #0]
   11c7e:	4790      	blx	r2
   11c80:	e7ff      	b.n	11c82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xea>
            .build(),
    );
}
   11c82:	b04a      	add	sp, #296	; 0x128
   11c84:	bd70      	pop	{r4, r5, r6, pc}

00011c86 <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>:
    Static(&'static str),
   11c86:	b082      	sub	sp, #8
   11c88:	9100      	str	r1, [sp, #0]
   11c8a:	9201      	str	r2, [sp, #4]
   11c8c:	6041      	str	r1, [r0, #4]
   11c8e:	6082      	str	r2, [r0, #8]
   11c90:	2100      	movs	r1, #0
   11c92:	6001      	str	r1, [r0, #0]
   11c94:	b002      	add	sp, #8
   11c96:	4770      	bx	lr

00011c98 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   11c98:	b081      	sub	sp, #4
   11c9a:	9100      	str	r1, [sp, #0]
   11c9c:	680a      	ldr	r2, [r1, #0]
   11c9e:	684b      	ldr	r3, [r1, #4]
   11ca0:	6889      	ldr	r1, [r1, #8]
   11ca2:	6081      	str	r1, [r0, #8]
   11ca4:	6043      	str	r3, [r0, #4]
   11ca6:	6002      	str	r2, [r0, #0]
   11ca8:	b001      	add	sp, #4
   11caa:	4770      	bx	lr

00011cac <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>:
#[derive(Clone, Debug)]
   11cac:	b570      	push	{r4, r5, r6, lr}
   11cae:	b09c      	sub	sp, #112	; 0x70
   11cb0:	9116      	str	r1, [sp, #88]	; 0x58
    metadata: Metadata<'a>,
   11cb2:	9117      	str	r1, [sp, #92]	; 0x5c
    args: fmt::Arguments<'a>,
   11cb4:	f101 020c 	add.w	r2, r1, #12
   11cb8:	4613      	mov	r3, r2
   11cba:	9218      	str	r2, [sp, #96]	; 0x60
    module_path: Option<MaybeStaticStr<'a>>,
   11cbc:	f101 0224 	add.w	r2, r1, #36	; 0x24
   11cc0:	4694      	mov	ip, r2
   11cc2:	9219      	str	r2, [sp, #100]	; 0x64
    file: Option<MaybeStaticStr<'a>>,
   11cc4:	f101 0230 	add.w	r2, r1, #48	; 0x30
   11cc8:	4696      	mov	lr, r2
   11cca:	921a      	str	r2, [sp, #104]	; 0x68
    line: Option<u32>,
   11ccc:	f101 023c 	add.w	r2, r1, #60	; 0x3c
   11cd0:	4614      	mov	r4, r2
   11cd2:	921b      	str	r2, [sp, #108]	; 0x6c
   11cd4:	aa07      	add	r2, sp, #28
    metadata: Metadata<'a>,
   11cd6:	9006      	str	r0, [sp, #24]
   11cd8:	4610      	mov	r0, r2
   11cda:	9305      	str	r3, [sp, #20]
   11cdc:	f8cd c010 	str.w	ip, [sp, #16]
   11ce0:	f8cd e00c 	str.w	lr, [sp, #12]
   11ce4:	9402      	str	r4, [sp, #8]
   11ce6:	f000 f836 	bl	11d56 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   11cea:	e7ff      	b.n	11cec <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x40>
   11cec:	a80a      	add	r0, sp, #40	; 0x28
    args: fmt::Arguments<'a>,
   11cee:	9905      	ldr	r1, [sp, #20]
   11cf0:	f7ff fdf8 	bl	118e4 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>
   11cf4:	e7ff      	b.n	11cf6 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x4a>
   11cf6:	a810      	add	r0, sp, #64	; 0x40
    module_path: Option<MaybeStaticStr<'a>>,
   11cf8:	9904      	ldr	r1, [sp, #16]
   11cfa:	f7ff fdfc 	bl	118f6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   11cfe:	e7ff      	b.n	11d00 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x54>
   11d00:	a813      	add	r0, sp, #76	; 0x4c
    file: Option<MaybeStaticStr<'a>>,
   11d02:	9903      	ldr	r1, [sp, #12]
   11d04:	f7ff fdf7 	bl	118f6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   11d08:	e7ff      	b.n	11d0a <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x5e>
    line: Option<u32>,
   11d0a:	9802      	ldr	r0, [sp, #8]
   11d0c:	f7ff fe1a 	bl	11944 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>
   11d10:	9001      	str	r0, [sp, #4]
   11d12:	9100      	str	r1, [sp, #0]
   11d14:	e7ff      	b.n	11d16 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x6a>
#[derive(Clone, Debug)]
   11d16:	9807      	ldr	r0, [sp, #28]
   11d18:	9908      	ldr	r1, [sp, #32]
   11d1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11d1c:	9b06      	ldr	r3, [sp, #24]
   11d1e:	609a      	str	r2, [r3, #8]
   11d20:	6059      	str	r1, [r3, #4]
   11d22:	6018      	str	r0, [r3, #0]
   11d24:	f103 000c 	add.w	r0, r3, #12
   11d28:	a90a      	add	r1, sp, #40	; 0x28
   11d2a:	e891 5074 	ldmia.w	r1, {r2, r4, r5, r6, ip, lr}
   11d2e:	e880 5074 	stmia.w	r0, {r2, r4, r5, r6, ip, lr}
   11d32:	9810      	ldr	r0, [sp, #64]	; 0x40
   11d34:	9911      	ldr	r1, [sp, #68]	; 0x44
   11d36:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11d38:	62da      	str	r2, [r3, #44]	; 0x2c
   11d3a:	6299      	str	r1, [r3, #40]	; 0x28
   11d3c:	6258      	str	r0, [r3, #36]	; 0x24
   11d3e:	9813      	ldr	r0, [sp, #76]	; 0x4c
   11d40:	9914      	ldr	r1, [sp, #80]	; 0x50
   11d42:	9a15      	ldr	r2, [sp, #84]	; 0x54
   11d44:	639a      	str	r2, [r3, #56]	; 0x38
   11d46:	6359      	str	r1, [r3, #52]	; 0x34
   11d48:	6318      	str	r0, [r3, #48]	; 0x30
   11d4a:	9801      	ldr	r0, [sp, #4]
   11d4c:	63d8      	str	r0, [r3, #60]	; 0x3c
   11d4e:	9900      	ldr	r1, [sp, #0]
   11d50:	6419      	str	r1, [r3, #64]	; 0x40
   11d52:	b01c      	add	sp, #112	; 0x70
   11d54:	bd70      	pop	{r4, r5, r6, pc}

00011d56 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   11d56:	b580      	push	{r7, lr}
   11d58:	b088      	sub	sp, #32
   11d5a:	9105      	str	r1, [sp, #20]
    level: Level,
   11d5c:	9106      	str	r1, [sp, #24]
    target: &'a str,
   11d5e:	1d0a      	adds	r2, r1, #4
   11d60:	4613      	mov	r3, r2
   11d62:	9207      	str	r2, [sp, #28]
    level: Level,
   11d64:	9004      	str	r0, [sp, #16]
   11d66:	4608      	mov	r0, r1
   11d68:	9303      	str	r3, [sp, #12]
   11d6a:	f7ff fe09 	bl	11980 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>
   11d6e:	9002      	str	r0, [sp, #8]
   11d70:	e7ff      	b.n	11d72 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x1c>
    target: &'a str,
   11d72:	9803      	ldr	r0, [sp, #12]
   11d74:	f7ff fd55 	bl	11822 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>
   11d78:	9001      	str	r0, [sp, #4]
   11d7a:	9100      	str	r1, [sp, #0]
   11d7c:	e7ff      	b.n	11d7e <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x28>
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   11d7e:	9802      	ldr	r0, [sp, #8]
   11d80:	9904      	ldr	r1, [sp, #16]
   11d82:	6008      	str	r0, [r1, #0]
   11d84:	9a01      	ldr	r2, [sp, #4]
   11d86:	604a      	str	r2, [r1, #4]
   11d88:	9b00      	ldr	r3, [sp, #0]
   11d8a:	608b      	str	r3, [r1, #8]
   11d8c:	b008      	add	sp, #32
   11d8e:	bd80      	pop	{r7, pc}

00011d90 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E>:
   11d90:	b580      	push	{r7, lr}
   11d92:	b084      	sub	sp, #16
   11d94:	9002      	str	r0, [sp, #8]
   11d96:	9103      	str	r1, [sp, #12]
   11d98:	6800      	ldr	r0, [r0, #0]
   11d9a:	f000 f81c 	bl	11dd6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>
   11d9e:	9001      	str	r0, [sp, #4]
   11da0:	e7ff      	b.n	11da2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E+0x12>
   11da2:	9801      	ldr	r0, [sp, #4]
   11da4:	f000 0001 	and.w	r0, r0, #1
   11da8:	b004      	add	sp, #16
   11daa:	bd80      	pop	{r7, pc}

00011dac <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>:
   11dac:	b089      	sub	sp, #36	; 0x24
   11dae:	9005      	str	r0, [sp, #20]
   11db0:	9106      	str	r1, [sp, #24]
   11db2:	9107      	str	r1, [sp, #28]
   11db4:	9907      	ldr	r1, [sp, #28]
   11db6:	9002      	str	r0, [sp, #8]
   11db8:	9101      	str	r1, [sp, #4]
   11dba:	e7ff      	b.n	11dbc <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x10>
   11dbc:	9802      	ldr	r0, [sp, #8]
   11dbe:	9008      	str	r0, [sp, #32]
   11dc0:	9908      	ldr	r1, [sp, #32]
   11dc2:	9100      	str	r1, [sp, #0]
   11dc4:	e7ff      	b.n	11dc6 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x1a>
   11dc6:	9800      	ldr	r0, [sp, #0]
   11dc8:	9003      	str	r0, [sp, #12]
   11dca:	9901      	ldr	r1, [sp, #4]
   11dcc:	9104      	str	r1, [sp, #16]
   11dce:	9803      	ldr	r0, [sp, #12]
   11dd0:	9904      	ldr	r1, [sp, #16]
   11dd2:	b009      	add	sp, #36	; 0x24
   11dd4:	4770      	bx	lr

00011dd6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>:
   11dd6:	b580      	push	{r7, lr}
   11dd8:	b088      	sub	sp, #32
   11dda:	9006      	str	r0, [sp, #24]
   11ddc:	9107      	str	r1, [sp, #28]
   11dde:	9004      	str	r0, [sp, #16]
   11de0:	4608      	mov	r0, r1
   11de2:	9103      	str	r1, [sp, #12]
   11de4:	f004 f84d 	bl	15e82 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   11de8:	9002      	str	r0, [sp, #8]
   11dea:	e7ff      	b.n	11dec <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x16>
   11dec:	9802      	ldr	r0, [sp, #8]
   11dee:	07c1      	lsls	r1, r0, #31
   11df0:	2900      	cmp	r1, #0
   11df2:	d105      	bne.n	11e00 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x2a>
   11df4:	e7ff      	b.n	11df6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x20>
   11df6:	9803      	ldr	r0, [sp, #12]
   11df8:	f004 f847 	bl	15e8a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   11dfc:	9001      	str	r0, [sp, #4]
   11dfe:	e007      	b.n	11e10 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x3a>
   11e00:	9804      	ldr	r0, [sp, #16]
   11e02:	9903      	ldr	r1, [sp, #12]
   11e04:	f004 fe08 	bl	16a18 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   11e08:	f88d 0017 	strb.w	r0, [sp, #23]
   11e0c:	e7ff      	b.n	11e0e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x38>
   11e0e:	e015      	b.n	11e3c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   11e10:	9801      	ldr	r0, [sp, #4]
   11e12:	07c1      	lsls	r1, r0, #31
   11e14:	2900      	cmp	r1, #0
   11e16:	d107      	bne.n	11e28 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x52>
   11e18:	e7ff      	b.n	11e1a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x44>
   11e1a:	9804      	ldr	r0, [sp, #16]
   11e1c:	9903      	ldr	r1, [sp, #12]
   11e1e:	f004 ff88 	bl	16d32 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   11e22:	f88d 0017 	strb.w	r0, [sp, #23]
   11e26:	e007      	b.n	11e38 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x62>
   11e28:	9804      	ldr	r0, [sp, #16]
   11e2a:	9903      	ldr	r1, [sp, #12]
   11e2c:	f004 fe5f 	bl	16aee <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   11e30:	f88d 0017 	strb.w	r0, [sp, #23]
   11e34:	e7ff      	b.n	11e36 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x60>
   11e36:	e000      	b.n	11e3a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   11e38:	e7ff      	b.n	11e3a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   11e3a:	e7ff      	b.n	11e3c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   11e3c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   11e40:	b008      	add	sp, #32
   11e42:	bd80      	pop	{r7, pc}

00011e44 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>:
   11e44:	b086      	sub	sp, #24
   11e46:	9004      	str	r0, [sp, #16]
   11e48:	9105      	str	r1, [sp, #20]
   11e4a:	9002      	str	r0, [sp, #8]
   11e4c:	9103      	str	r1, [sp, #12]
   11e4e:	9802      	ldr	r0, [sp, #8]
   11e50:	9903      	ldr	r1, [sp, #12]
   11e52:	9000      	str	r0, [sp, #0]
   11e54:	9101      	str	r1, [sp, #4]
   11e56:	9800      	ldr	r0, [sp, #0]
   11e58:	9901      	ldr	r1, [sp, #4]
   11e5a:	b006      	add	sp, #24
   11e5c:	4770      	bx	lr

00011e5e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>:
   11e5e:	b580      	push	{r7, lr}
   11e60:	b084      	sub	sp, #16
   11e62:	9002      	str	r0, [sp, #8]
   11e64:	9103      	str	r1, [sp, #12]
   11e66:	f000 f805 	bl	11e74 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>
   11e6a:	9001      	str	r0, [sp, #4]
   11e6c:	e7ff      	b.n	11e6e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE+0x10>
   11e6e:	9801      	ldr	r0, [sp, #4]
   11e70:	b004      	add	sp, #16
   11e72:	bd80      	pop	{r7, pc}

00011e74 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>:
   11e74:	b084      	sub	sp, #16
   11e76:	9001      	str	r0, [sp, #4]
   11e78:	9102      	str	r1, [sp, #8]
   11e7a:	4408      	add	r0, r1
   11e7c:	9003      	str	r0, [sp, #12]
   11e7e:	9803      	ldr	r0, [sp, #12]
   11e80:	9000      	str	r0, [sp, #0]
   11e82:	e7ff      	b.n	11e84 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E+0x10>
   11e84:	9800      	ldr	r0, [sp, #0]
   11e86:	b004      	add	sp, #16
   11e88:	4770      	bx	lr

00011e8a <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>:
   11e8a:	b580      	push	{r7, lr}
   11e8c:	b084      	sub	sp, #16
   11e8e:	9002      	str	r0, [sp, #8]
   11e90:	9103      	str	r1, [sp, #12]
   11e92:	f7ff ffd7 	bl	11e44 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>
   11e96:	9001      	str	r0, [sp, #4]
   11e98:	9100      	str	r1, [sp, #0]
   11e9a:	e7ff      	b.n	11e9c <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E+0x12>
   11e9c:	9801      	ldr	r0, [sp, #4]
   11e9e:	9900      	ldr	r1, [sp, #0]
   11ea0:	b004      	add	sp, #16
   11ea2:	bd80      	pop	{r7, pc}

00011ea4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>:
   11ea4:	b084      	sub	sp, #16
   11ea6:	9002      	str	r0, [sp, #8]
   11ea8:	9103      	str	r1, [sp, #12]
   11eaa:	9000      	str	r0, [sp, #0]
   11eac:	9101      	str	r1, [sp, #4]
   11eae:	9801      	ldr	r0, [sp, #4]
   11eb0:	b004      	add	sp, #16
   11eb2:	4770      	bx	lr

00011eb4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>:
   11eb4:	b082      	sub	sp, #8
   11eb6:	9000      	str	r0, [sp, #0]
   11eb8:	9101      	str	r1, [sp, #4]
   11eba:	b002      	add	sp, #8
   11ebc:	4770      	bx	lr

00011ebe <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>:
   11ebe:	b082      	sub	sp, #8
   11ec0:	9000      	str	r0, [sp, #0]
   11ec2:	9101      	str	r1, [sp, #4]
   11ec4:	7800      	ldrb	r0, [r0, #0]
   11ec6:	7809      	ldrb	r1, [r1, #0]
   11ec8:	1a40      	subs	r0, r0, r1
   11eca:	fab0 f080 	clz	r0, r0
   11ece:	0940      	lsrs	r0, r0, #5
   11ed0:	b002      	add	sp, #8
   11ed2:	4770      	bx	lr

00011ed4 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE>:
    fn deref(&self) -> &[T] {
   11ed4:	b580      	push	{r7, lr}
   11ed6:	b084      	sub	sp, #16
   11ed8:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   11eda:	f002 fd45 	bl	14968 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE>
   11ede:	9002      	str	r0, [sp, #8]
   11ee0:	9101      	str	r1, [sp, #4]
   11ee2:	e7ff      	b.n	11ee4 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE+0x10>
    }
   11ee4:	9802      	ldr	r0, [sp, #8]
   11ee6:	9901      	ldr	r1, [sp, #4]
   11ee8:	b004      	add	sp, #16
   11eea:	bd80      	pop	{r7, pc}

00011eec <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>:
    fn deref(&self) -> &[T] {
   11eec:	b580      	push	{r7, lr}
   11eee:	b084      	sub	sp, #16
   11ef0:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   11ef2:	f002 fd4e 	bl	14992 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>
   11ef6:	9002      	str	r0, [sp, #8]
   11ef8:	9101      	str	r1, [sp, #4]
   11efa:	e7ff      	b.n	11efc <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE+0x10>
    }
   11efc:	9802      	ldr	r0, [sp, #8]
   11efe:	9901      	ldr	r1, [sp, #4]
   11f00:	b004      	add	sp, #16
   11f02:	bd80      	pop	{r7, pc}

00011f04 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   11f04:	b580      	push	{r7, lr}
   11f06:	b084      	sub	sp, #16
   11f08:	9001      	str	r0, [sp, #4]
   11f0a:	9102      	str	r1, [sp, #8]
   11f0c:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   11f0e:	f002 fc8d 	bl	1482c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E>
   11f12:	9000      	str	r0, [sp, #0]
   11f14:	e7ff      	b.n	11f16 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E+0x12>
    }
   11f16:	9800      	ldr	r0, [sp, #0]
   11f18:	f000 0001 	and.w	r0, r0, #1
   11f1c:	b004      	add	sp, #16
   11f1e:	bd80      	pop	{r7, pc}

00011f20 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   11f20:	b580      	push	{r7, lr}
   11f22:	b086      	sub	sp, #24
   11f24:	460a      	mov	r2, r1
   11f26:	9004      	str	r0, [sp, #16]
   11f28:	f88d 1017 	strb.w	r1, [sp, #23]
        self.0.push(item)
   11f2c:	9203      	str	r2, [sp, #12]
   11f2e:	f002 fce0 	bl	148f2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>
   11f32:	9002      	str	r0, [sp, #8]
   11f34:	9101      	str	r1, [sp, #4]
   11f36:	e7ff      	b.n	11f38 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E+0x18>
    }
   11f38:	9802      	ldr	r0, [sp, #8]
   11f3a:	f000 0001 	and.w	r0, r0, #1
   11f3e:	9901      	ldr	r1, [sp, #4]
   11f40:	b006      	add	sp, #24
   11f42:	bd80      	pop	{r7, pc}

00011f44 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E>:
    pub fn clear(&mut self) {
   11f44:	b580      	push	{r7, lr}
   11f46:	b082      	sub	sp, #8
   11f48:	9001      	str	r0, [sp, #4]
        self.0.clear()
   11f4a:	f002 fd04 	bl	14956 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E>
   11f4e:	e7ff      	b.n	11f50 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E+0xc>
    }
   11f50:	b002      	add	sp, #8
   11f52:	bd80      	pop	{r7, pc}

00011f54 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>:
    pub fn clear(&mut self) {
   11f54:	b580      	push	{r7, lr}
   11f56:	b082      	sub	sp, #8
   11f58:	9001      	str	r0, [sp, #4]
        self.0.clear()
   11f5a:	f002 fcf3 	bl	14944 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>
   11f5e:	e7ff      	b.n	11f60 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E+0xc>
    }
   11f60:	b002      	add	sp, #8
   11f62:	bd80      	pop	{r7, pc}

00011f64 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>:
   11f64:	b081      	sub	sp, #4
   11f66:	9000      	str	r0, [sp, #0]
   11f68:	b001      	add	sp, #4
   11f6a:	4770      	bx	lr

00011f6c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>:
   11f6c:	b580      	push	{r7, lr}
   11f6e:	b088      	sub	sp, #32
   11f70:	9006      	str	r0, [sp, #24]
   11f72:	9107      	str	r1, [sp, #28]
   11f74:	9004      	str	r0, [sp, #16]
   11f76:	4608      	mov	r0, r1
   11f78:	9103      	str	r1, [sp, #12]
   11f7a:	f003 ff82 	bl	15e82 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   11f7e:	9002      	str	r0, [sp, #8]
   11f80:	e7ff      	b.n	11f82 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x16>
   11f82:	9802      	ldr	r0, [sp, #8]
   11f84:	07c1      	lsls	r1, r0, #31
   11f86:	2900      	cmp	r1, #0
   11f88:	d105      	bne.n	11f96 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x2a>
   11f8a:	e7ff      	b.n	11f8c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x20>
   11f8c:	9803      	ldr	r0, [sp, #12]
   11f8e:	f003 ff7c 	bl	15e8a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   11f92:	9001      	str	r0, [sp, #4]
   11f94:	e007      	b.n	11fa6 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x3a>
   11f96:	9804      	ldr	r0, [sp, #16]
   11f98:	9903      	ldr	r1, [sp, #12]
   11f9a:	f004 fc80 	bl	1689e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>
   11f9e:	f88d 0017 	strb.w	r0, [sp, #23]
   11fa2:	e7ff      	b.n	11fa4 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x38>
   11fa4:	e015      	b.n	11fd2 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   11fa6:	9801      	ldr	r0, [sp, #4]
   11fa8:	07c1      	lsls	r1, r0, #31
   11faa:	2900      	cmp	r1, #0
   11fac:	d107      	bne.n	11fbe <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x52>
   11fae:	e7ff      	b.n	11fb0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x44>
   11fb0:	9804      	ldr	r0, [sp, #16]
   11fb2:	9903      	ldr	r1, [sp, #12]
   11fb4:	f004 fe06 	bl	16bc4 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>
   11fb8:	f88d 0017 	strb.w	r0, [sp, #23]
   11fbc:	e007      	b.n	11fce <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x62>
   11fbe:	9804      	ldr	r0, [sp, #16]
   11fc0:	9903      	ldr	r1, [sp, #12]
   11fc2:	f004 fc9b 	bl	168fc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>
   11fc6:	f88d 0017 	strb.w	r0, [sp, #23]
   11fca:	e7ff      	b.n	11fcc <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x60>
   11fcc:	e000      	b.n	11fd0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   11fce:	e7ff      	b.n	11fd0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   11fd0:	e7ff      	b.n	11fd2 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   11fd2:	f89d 0017 	ldrb.w	r0, [sp, #23]
   11fd6:	b008      	add	sp, #32
   11fd8:	bd80      	pop	{r7, pc}

00011fda <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>:
   11fda:	b580      	push	{r7, lr}
   11fdc:	b088      	sub	sp, #32
   11fde:	9006      	str	r0, [sp, #24]
   11fe0:	9107      	str	r1, [sp, #28]
   11fe2:	9004      	str	r0, [sp, #16]
   11fe4:	4608      	mov	r0, r1
   11fe6:	9103      	str	r1, [sp, #12]
   11fe8:	f003 ff4b 	bl	15e82 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   11fec:	9002      	str	r0, [sp, #8]
   11fee:	e7ff      	b.n	11ff0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x16>
   11ff0:	9802      	ldr	r0, [sp, #8]
   11ff2:	07c1      	lsls	r1, r0, #31
   11ff4:	2900      	cmp	r1, #0
   11ff6:	d105      	bne.n	12004 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x2a>
   11ff8:	e7ff      	b.n	11ffa <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x20>
   11ffa:	9803      	ldr	r0, [sp, #12]
   11ffc:	f003 ff45 	bl	15e8a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   12000:	9001      	str	r0, [sp, #4]
   12002:	e007      	b.n	12014 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x3a>
   12004:	9804      	ldr	r0, [sp, #16]
   12006:	9903      	ldr	r1, [sp, #12]
   12008:	f004 fd06 	bl	16a18 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   1200c:	f88d 0017 	strb.w	r0, [sp, #23]
   12010:	e7ff      	b.n	12012 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x38>
   12012:	e015      	b.n	12040 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   12014:	9801      	ldr	r0, [sp, #4]
   12016:	07c1      	lsls	r1, r0, #31
   12018:	2900      	cmp	r1, #0
   1201a:	d107      	bne.n	1202c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x52>
   1201c:	e7ff      	b.n	1201e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x44>
   1201e:	9804      	ldr	r0, [sp, #16]
   12020:	9903      	ldr	r1, [sp, #12]
   12022:	f004 fe0c 	bl	16c3e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   12026:	f88d 0017 	strb.w	r0, [sp, #23]
   1202a:	e007      	b.n	1203c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x62>
   1202c:	9804      	ldr	r0, [sp, #16]
   1202e:	9903      	ldr	r1, [sp, #12]
   12030:	f004 fd5d 	bl	16aee <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   12034:	f88d 0017 	strb.w	r0, [sp, #23]
   12038:	e7ff      	b.n	1203a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x60>
   1203a:	e000      	b.n	1203e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   1203c:	e7ff      	b.n	1203e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   1203e:	e7ff      	b.n	12040 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   12040:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12044:	b008      	add	sp, #32
   12046:	bd80      	pop	{r7, pc}

00012048 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>:
   12048:	b580      	push	{r7, lr}
   1204a:	b088      	sub	sp, #32
   1204c:	9006      	str	r0, [sp, #24]
   1204e:	9107      	str	r1, [sp, #28]
   12050:	9004      	str	r0, [sp, #16]
   12052:	4608      	mov	r0, r1
   12054:	9103      	str	r1, [sp, #12]
   12056:	f003 ff14 	bl	15e82 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1205a:	9002      	str	r0, [sp, #8]
   1205c:	e7ff      	b.n	1205e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x16>
   1205e:	9802      	ldr	r0, [sp, #8]
   12060:	07c1      	lsls	r1, r0, #31
   12062:	2900      	cmp	r1, #0
   12064:	d105      	bne.n	12072 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x2a>
   12066:	e7ff      	b.n	12068 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x20>
   12068:	9803      	ldr	r0, [sp, #12]
   1206a:	f003 ff0e 	bl	15e8a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1206e:	9001      	str	r0, [sp, #4]
   12070:	e007      	b.n	12082 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x3a>
   12072:	9804      	ldr	r0, [sp, #16]
   12074:	9903      	ldr	r1, [sp, #12]
   12076:	f004 fccf 	bl	16a18 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   1207a:	f88d 0017 	strb.w	r0, [sp, #23]
   1207e:	e7ff      	b.n	12080 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x38>
   12080:	e015      	b.n	120ae <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   12082:	9801      	ldr	r0, [sp, #4]
   12084:	07c1      	lsls	r1, r0, #31
   12086:	2900      	cmp	r1, #0
   12088:	d107      	bne.n	1209a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x52>
   1208a:	e7ff      	b.n	1208c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x44>
   1208c:	9804      	ldr	r0, [sp, #16]
   1208e:	9903      	ldr	r1, [sp, #12]
   12090:	f004 fe4f 	bl	16d32 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   12094:	f88d 0017 	strb.w	r0, [sp, #23]
   12098:	e007      	b.n	120aa <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x62>
   1209a:	9804      	ldr	r0, [sp, #16]
   1209c:	9903      	ldr	r1, [sp, #12]
   1209e:	f004 fd26 	bl	16aee <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   120a2:	f88d 0017 	strb.w	r0, [sp, #23]
   120a6:	e7ff      	b.n	120a8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x60>
   120a8:	e000      	b.n	120ac <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   120aa:	e7ff      	b.n	120ac <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   120ac:	e7ff      	b.n	120ae <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   120ae:	f89d 0017 	ldrb.w	r0, [sp, #23]
   120b2:	b008      	add	sp, #32
   120b4:	bd80      	pop	{r7, pc}

000120b6 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>:
   120b6:	b580      	push	{r7, lr}
   120b8:	b084      	sub	sp, #16
   120ba:	9002      	str	r0, [sp, #8]
   120bc:	9103      	str	r1, [sp, #12]
   120be:	6800      	ldr	r0, [r0, #0]
   120c0:	6809      	ldr	r1, [r1, #0]
   120c2:	f7ff fefc 	bl	11ebe <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>
   120c6:	9001      	str	r0, [sp, #4]
   120c8:	e7ff      	b.n	120ca <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E+0x14>
   120ca:	9801      	ldr	r0, [sp, #4]
   120cc:	f000 0001 	and.w	r0, r0, #1
   120d0:	b004      	add	sp, #16
   120d2:	bd80      	pop	{r7, pc}

000120d4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>:

/// Non-blocking SPI transfer callback values (not used)
static mut SPI_CALLBACK: SpiCallback = SpiCallback {};

/// Init non-blocking SPI transfer
pub fn spi_noblock_init() -> MynewtResult<()> {
   120d4:	b5b0      	push	{r4, r5, r7, lr}
   120d6:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
   120da:	2000      	movs	r0, #0
    //  Disable SPI port
    unsafe { hal::hal_spi_disable(SPI_NUM) };
   120dc:	f005 fd0a 	bl	17af4 <hal_spi_disable>
   120e0:	e7ff      	b.n	120e2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xe>

    //  Configure SPI port for non-blocking SPI
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   120e2:	f240 01f8 	movw	r1, #248	; 0xf8
   120e6:	f2c2 0100 	movt	r1, #8192	; 0x2000
   120ea:	2000      	movs	r0, #0
   120ec:	f005 fcc0 	bl	17a70 <hal_spi_config>
   120f0:	906a      	str	r0, [sp, #424]	; 0x1a8
   120f2:	e7ff      	b.n	120f4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x20>
   120f4:	f64d 2098 	movw	r0, #55960	; 0xda98
   120f8:	f2c0 0001 	movt	r0, #1
   120fc:	6800      	ldr	r0, [r0, #0]
   120fe:	a96a      	add	r1, sp, #424	; 0x1a8
   12100:	916b      	str	r1, [sp, #428]	; 0x1ac
   12102:	906c      	str	r0, [sp, #432]	; 0x1b0
   12104:	986b      	ldr	r0, [sp, #428]	; 0x1ac
   12106:	f8cd 04fc 	str.w	r0, [sp, #1276]	; 0x4fc
   1210a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
   1210c:	f8cd 1500 	str.w	r1, [sp, #1280]	; 0x500
   12110:	6802      	ldr	r2, [r0, #0]
   12112:	680b      	ldr	r3, [r1, #0]
   12114:	429a      	cmp	r2, r3
   12116:	9068      	str	r0, [sp, #416]	; 0x1a0
   12118:	9167      	str	r1, [sp, #412]	; 0x19c
   1211a:	d10c      	bne.n	12136 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x62>
   1211c:	e7ff      	b.n	1211e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4a>
    let arg = unsafe { core::mem::transmute(&mut SPI_CALLBACK) };
   1211e:	f247 7004 	movw	r0, #30468	; 0x7704
   12122:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12126:	f8cd 0510 	str.w	r0, [sp, #1296]	; 0x510
   1212a:	f8dd 0510 	ldr.w	r0, [sp, #1296]	; 0x510
   1212e:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
   12132:	9066      	str	r0, [sp, #408]	; 0x198
   12134:	e075      	b.n	12222 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x14e>
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   12136:	f64d 20f0 	movw	r0, #56048	; 0xdaf0
   1213a:	f2c0 0001 	movt	r0, #1
   1213e:	6801      	ldr	r1, [r0, #0]
   12140:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   12142:	907c      	str	r0, [sp, #496]	; 0x1f0
   12144:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   12146:	927d      	str	r2, [sp, #500]	; 0x1f4
   12148:	f64d 330c 	movw	r3, #56076	; 0xdb0c
   1214c:	f2c0 0301 	movt	r3, #1
   12150:	681b      	ldr	r3, [r3, #0]
   12152:	f64d 3c10 	movw	ip, #56080	; 0xdb10
   12156:	f2c0 0c01 	movt	ip, #1
   1215a:	f8dc c000 	ldr.w	ip, [ip]
   1215e:	46ee      	mov	lr, sp
   12160:	2400      	movs	r4, #0
   12162:	f8ce 4000 	str.w	r4, [lr]
   12166:	a87e      	add	r0, sp, #504	; 0x1f8
   12168:	2201      	movs	r2, #1
   1216a:	9165      	str	r1, [sp, #404]	; 0x194
   1216c:	4619      	mov	r1, r3
   1216e:	4663      	mov	r3, ip
   12170:	f7f6 fd77 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12174:	e7ff      	b.n	12176 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2>
   12176:	a87c      	add	r0, sp, #496	; 0x1f0
   12178:	9079      	str	r0, [sp, #484]	; 0x1e4
   1217a:	a87d      	add	r0, sp, #500	; 0x1f4
   1217c:	907a      	str	r0, [sp, #488]	; 0x1e8
   1217e:	a87e      	add	r0, sp, #504	; 0x1f8
   12180:	907b      	str	r0, [sp, #492]	; 0x1ec
   12182:	9879      	ldr	r0, [sp, #484]	; 0x1e4
   12184:	f8cd 0504 	str.w	r0, [sp, #1284]	; 0x504
   12188:	997a      	ldr	r1, [sp, #488]	; 0x1e8
   1218a:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
   1218e:	9a7b      	ldr	r2, [sp, #492]	; 0x1ec
   12190:	f8cd 250c 	str.w	r2, [sp, #1292]	; 0x50c
   12194:	f249 43b1 	movw	r3, #38065	; 0x94b1
   12198:	f2c0 0300 	movt	r3, #0
   1219c:	9164      	str	r1, [sp, #400]	; 0x190
   1219e:	4619      	mov	r1, r3
   121a0:	9263      	str	r2, [sp, #396]	; 0x18c
   121a2:	f7f7 f9bd 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   121a6:	9062      	str	r0, [sp, #392]	; 0x188
   121a8:	9161      	str	r1, [sp, #388]	; 0x184
   121aa:	e7ff      	b.n	121ac <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xd8>
   121ac:	f249 41b1 	movw	r1, #38065	; 0x94b1
   121b0:	f2c0 0100 	movt	r1, #0
   121b4:	9864      	ldr	r0, [sp, #400]	; 0x190
   121b6:	f7f7 f9b3 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   121ba:	9060      	str	r0, [sp, #384]	; 0x180
   121bc:	915f      	str	r1, [sp, #380]	; 0x17c
   121be:	e7ff      	b.n	121c0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xec>
   121c0:	f245 710f 	movw	r1, #22287	; 0x570f
   121c4:	f2c0 0101 	movt	r1, #1
   121c8:	9863      	ldr	r0, [sp, #396]	; 0x18c
   121ca:	f7f7 f9e8 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   121ce:	905e      	str	r0, [sp, #376]	; 0x178
   121d0:	915d      	str	r1, [sp, #372]	; 0x174
   121d2:	e7ff      	b.n	121d4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x100>
   121d4:	9862      	ldr	r0, [sp, #392]	; 0x188
   121d6:	9073      	str	r0, [sp, #460]	; 0x1cc
   121d8:	9961      	ldr	r1, [sp, #388]	; 0x184
   121da:	9174      	str	r1, [sp, #464]	; 0x1d0
   121dc:	9a60      	ldr	r2, [sp, #384]	; 0x180
   121de:	9275      	str	r2, [sp, #468]	; 0x1d4
   121e0:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   121e2:	9376      	str	r3, [sp, #472]	; 0x1d8
   121e4:	f8dd c178 	ldr.w	ip, [sp, #376]	; 0x178
   121e8:	f8cd c1dc 	str.w	ip, [sp, #476]	; 0x1dc
   121ec:	f8dd e174 	ldr.w	lr, [sp, #372]	; 0x174
   121f0:	f8cd e1e0 	str.w	lr, [sp, #480]	; 0x1e0
   121f4:	466c      	mov	r4, sp
   121f6:	2503      	movs	r5, #3
   121f8:	6025      	str	r5, [r4, #0]
   121fa:	a86d      	add	r0, sp, #436	; 0x1b4
   121fc:	ab73      	add	r3, sp, #460	; 0x1cc
   121fe:	9965      	ldr	r1, [sp, #404]	; 0x194
   12200:	462a      	mov	r2, r5
   12202:	f7f6 fd2e 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12206:	e7ff      	b.n	12208 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x134>
   12208:	f64d 302c 	movw	r0, #56108	; 0xdb2c
   1220c:	f2c0 0001 	movt	r0, #1
   12210:	f002 ff8f 	bl	15132 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12214:	905c      	str	r0, [sp, #368]	; 0x170
   12216:	e7ff      	b.n	12218 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x144>
   12218:	a86d      	add	r0, sp, #436	; 0x1b4
   1221a:	995c      	ldr	r1, [sp, #368]	; 0x170
   1221c:	f002 ffc6 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12220:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
        SPI_NUM, 
        Some(spi_noblock_handler), 
   12222:	f243 50eb 	movw	r0, #13803	; 0x35eb
   12226:	f2c0 0001 	movt	r0, #1
   1222a:	9085      	str	r0, [sp, #532]	; 0x214
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
   1222c:	9985      	ldr	r1, [sp, #532]	; 0x214
   1222e:	2000      	movs	r0, #0
   12230:	9a66      	ldr	r2, [sp, #408]	; 0x198
   12232:	f005 fcc3 	bl	17bbc <hal_spi_set_txrx_cb>
   12236:	9084      	str	r0, [sp, #528]	; 0x210
   12238:	e7ff      	b.n	1223a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x166>
        arg
    ) };
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   1223a:	f64d 2098 	movw	r0, #55960	; 0xda98
   1223e:	f2c0 0001 	movt	r0, #1
   12242:	6800      	ldr	r0, [r0, #0]
   12244:	a984      	add	r1, sp, #528	; 0x210
   12246:	9186      	str	r1, [sp, #536]	; 0x218
   12248:	9087      	str	r0, [sp, #540]	; 0x21c
   1224a:	9886      	ldr	r0, [sp, #536]	; 0x218
   1224c:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
   12250:	9987      	ldr	r1, [sp, #540]	; 0x21c
   12252:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
   12256:	6802      	ldr	r2, [r0, #0]
   12258:	680b      	ldr	r3, [r1, #0]
   1225a:	429a      	cmp	r2, r3
   1225c:	905b      	str	r0, [sp, #364]	; 0x16c
   1225e:	915a      	str	r1, [sp, #360]	; 0x168
   12260:	d105      	bne.n	1226e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x19a>
   12262:	e7ff      	b.n	12264 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x190>
   12264:	2000      	movs	r0, #0

    //  Enable SPI port and set SS to high to disable SPI device
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12266:	f005 fc1f 	bl	17aa8 <hal_spi_enable>
   1226a:	909f      	str	r0, [sp, #636]	; 0x27c
   1226c:	e075      	b.n	1235a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x286>
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   1226e:	f64d 20f0 	movw	r0, #56048	; 0xdaf0
   12272:	f2c0 0001 	movt	r0, #1
   12276:	6801      	ldr	r1, [r0, #0]
   12278:	985b      	ldr	r0, [sp, #364]	; 0x16c
   1227a:	9097      	str	r0, [sp, #604]	; 0x25c
   1227c:	9a5a      	ldr	r2, [sp, #360]	; 0x168
   1227e:	9298      	str	r2, [sp, #608]	; 0x260
   12280:	f64d 3350 	movw	r3, #56144	; 0xdb50
   12284:	f2c0 0301 	movt	r3, #1
   12288:	681b      	ldr	r3, [r3, #0]
   1228a:	f64d 3c10 	movw	ip, #56080	; 0xdb10
   1228e:	f2c0 0c01 	movt	ip, #1
   12292:	f8dc c000 	ldr.w	ip, [ip]
   12296:	46ee      	mov	lr, sp
   12298:	2400      	movs	r4, #0
   1229a:	f8ce 4000 	str.w	r4, [lr]
   1229e:	a899      	add	r0, sp, #612	; 0x264
   122a0:	2201      	movs	r2, #1
   122a2:	9159      	str	r1, [sp, #356]	; 0x164
   122a4:	4619      	mov	r1, r3
   122a6:	4663      	mov	r3, ip
   122a8:	f7f6 fcdb 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   122ac:	e7ff      	b.n	122ae <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x1da>
   122ae:	a897      	add	r0, sp, #604	; 0x25c
   122b0:	9094      	str	r0, [sp, #592]	; 0x250
   122b2:	a898      	add	r0, sp, #608	; 0x260
   122b4:	9095      	str	r0, [sp, #596]	; 0x254
   122b6:	a899      	add	r0, sp, #612	; 0x264
   122b8:	9096      	str	r0, [sp, #600]	; 0x258
   122ba:	9894      	ldr	r0, [sp, #592]	; 0x250
   122bc:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
   122c0:	9995      	ldr	r1, [sp, #596]	; 0x254
   122c2:	f8cd 1524 	str.w	r1, [sp, #1316]	; 0x524
   122c6:	9a96      	ldr	r2, [sp, #600]	; 0x258
   122c8:	f8cd 2528 	str.w	r2, [sp, #1320]	; 0x528
   122cc:	f249 43b1 	movw	r3, #38065	; 0x94b1
   122d0:	f2c0 0300 	movt	r3, #0
   122d4:	9158      	str	r1, [sp, #352]	; 0x160
   122d6:	4619      	mov	r1, r3
   122d8:	9257      	str	r2, [sp, #348]	; 0x15c
   122da:	f7f7 f921 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   122de:	9056      	str	r0, [sp, #344]	; 0x158
   122e0:	9155      	str	r1, [sp, #340]	; 0x154
   122e2:	e7ff      	b.n	122e4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x210>
   122e4:	f249 41b1 	movw	r1, #38065	; 0x94b1
   122e8:	f2c0 0100 	movt	r1, #0
   122ec:	9858      	ldr	r0, [sp, #352]	; 0x160
   122ee:	f7f7 f917 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   122f2:	9054      	str	r0, [sp, #336]	; 0x150
   122f4:	9153      	str	r1, [sp, #332]	; 0x14c
   122f6:	e7ff      	b.n	122f8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x224>
   122f8:	f245 710f 	movw	r1, #22287	; 0x570f
   122fc:	f2c0 0101 	movt	r1, #1
   12300:	9857      	ldr	r0, [sp, #348]	; 0x15c
   12302:	f7f7 f94c 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12306:	9052      	str	r0, [sp, #328]	; 0x148
   12308:	9151      	str	r1, [sp, #324]	; 0x144
   1230a:	e7ff      	b.n	1230c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x238>
   1230c:	9856      	ldr	r0, [sp, #344]	; 0x158
   1230e:	908e      	str	r0, [sp, #568]	; 0x238
   12310:	9955      	ldr	r1, [sp, #340]	; 0x154
   12312:	918f      	str	r1, [sp, #572]	; 0x23c
   12314:	9a54      	ldr	r2, [sp, #336]	; 0x150
   12316:	9290      	str	r2, [sp, #576]	; 0x240
   12318:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   1231a:	9391      	str	r3, [sp, #580]	; 0x244
   1231c:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
   12320:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
   12324:	f8dd e144 	ldr.w	lr, [sp, #324]	; 0x144
   12328:	f8cd e24c 	str.w	lr, [sp, #588]	; 0x24c
   1232c:	466c      	mov	r4, sp
   1232e:	2503      	movs	r5, #3
   12330:	6025      	str	r5, [r4, #0]
   12332:	a888      	add	r0, sp, #544	; 0x220
   12334:	ab8e      	add	r3, sp, #568	; 0x238
   12336:	9959      	ldr	r1, [sp, #356]	; 0x164
   12338:	462a      	mov	r2, r5
   1233a:	f7f6 fc92 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1233e:	e7ff      	b.n	12340 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x26c>
   12340:	f64d 3054 	movw	r0, #56148	; 0xdb54
   12344:	f2c0 0001 	movt	r0, #1
   12348:	f002 fef3 	bl	15132 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1234c:	9050      	str	r0, [sp, #320]	; 0x140
   1234e:	e7ff      	b.n	12350 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x27c>
   12350:	a888      	add	r0, sp, #544	; 0x220
   12352:	9950      	ldr	r1, [sp, #320]	; 0x140
   12354:	f002 ff2a 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12358:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   1235a:	f64d 2098 	movw	r0, #55960	; 0xda98
   1235e:	f2c0 0001 	movt	r0, #1
   12362:	6800      	ldr	r0, [r0, #0]
   12364:	a99f      	add	r1, sp, #636	; 0x27c
   12366:	91a0      	str	r1, [sp, #640]	; 0x280
   12368:	90a1      	str	r0, [sp, #644]	; 0x284
   1236a:	98a0      	ldr	r0, [sp, #640]	; 0x280
   1236c:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
   12370:	99a1      	ldr	r1, [sp, #644]	; 0x284
   12372:	f8cd 1530 	str.w	r1, [sp, #1328]	; 0x530
   12376:	6802      	ldr	r2, [r0, #0]
   12378:	680b      	ldr	r3, [r1, #0]
   1237a:	429a      	cmp	r2, r3
   1237c:	904f      	str	r0, [sp, #316]	; 0x13c
   1237e:	914e      	str	r1, [sp, #312]	; 0x138
   12380:	d106      	bne.n	12390 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2bc>
   12382:	e7ff      	b.n	12384 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2b0>
   12384:	2019      	movs	r0, #25
   12386:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12388:	f004 ff64 	bl	17254 <hal_gpio_init_out>
   1238c:	90b9      	str	r0, [sp, #740]	; 0x2e4
   1238e:	e075      	b.n	1247c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3a8>
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12390:	f64d 20f0 	movw	r0, #56048	; 0xdaf0
   12394:	f2c0 0001 	movt	r0, #1
   12398:	6801      	ldr	r1, [r0, #0]
   1239a:	984f      	ldr	r0, [sp, #316]	; 0x13c
   1239c:	90b1      	str	r0, [sp, #708]	; 0x2c4
   1239e:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   123a0:	92b2      	str	r2, [sp, #712]	; 0x2c8
   123a2:	f64d 337c 	movw	r3, #56188	; 0xdb7c
   123a6:	f2c0 0301 	movt	r3, #1
   123aa:	681b      	ldr	r3, [r3, #0]
   123ac:	f64d 3c10 	movw	ip, #56080	; 0xdb10
   123b0:	f2c0 0c01 	movt	ip, #1
   123b4:	f8dc c000 	ldr.w	ip, [ip]
   123b8:	46ee      	mov	lr, sp
   123ba:	2400      	movs	r4, #0
   123bc:	f8ce 4000 	str.w	r4, [lr]
   123c0:	a8b3      	add	r0, sp, #716	; 0x2cc
   123c2:	2201      	movs	r2, #1
   123c4:	914d      	str	r1, [sp, #308]	; 0x134
   123c6:	4619      	mov	r1, r3
   123c8:	4663      	mov	r3, ip
   123ca:	f7f6 fc4a 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   123ce:	e7ff      	b.n	123d0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2fc>
   123d0:	a8b1      	add	r0, sp, #708	; 0x2c4
   123d2:	90ae      	str	r0, [sp, #696]	; 0x2b8
   123d4:	a8b2      	add	r0, sp, #712	; 0x2c8
   123d6:	90af      	str	r0, [sp, #700]	; 0x2bc
   123d8:	a8b3      	add	r0, sp, #716	; 0x2cc
   123da:	90b0      	str	r0, [sp, #704]	; 0x2c0
   123dc:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
   123de:	f8cd 0534 	str.w	r0, [sp, #1332]	; 0x534
   123e2:	99af      	ldr	r1, [sp, #700]	; 0x2bc
   123e4:	f8cd 1538 	str.w	r1, [sp, #1336]	; 0x538
   123e8:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
   123ea:	f8cd 253c 	str.w	r2, [sp, #1340]	; 0x53c
   123ee:	f249 43b1 	movw	r3, #38065	; 0x94b1
   123f2:	f2c0 0300 	movt	r3, #0
   123f6:	914c      	str	r1, [sp, #304]	; 0x130
   123f8:	4619      	mov	r1, r3
   123fa:	924b      	str	r2, [sp, #300]	; 0x12c
   123fc:	f7f7 f890 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12400:	904a      	str	r0, [sp, #296]	; 0x128
   12402:	9149      	str	r1, [sp, #292]	; 0x124
   12404:	e7ff      	b.n	12406 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x332>
   12406:	f249 41b1 	movw	r1, #38065	; 0x94b1
   1240a:	f2c0 0100 	movt	r1, #0
   1240e:	984c      	ldr	r0, [sp, #304]	; 0x130
   12410:	f7f7 f886 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12414:	9048      	str	r0, [sp, #288]	; 0x120
   12416:	9147      	str	r1, [sp, #284]	; 0x11c
   12418:	e7ff      	b.n	1241a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x346>
   1241a:	f245 710f 	movw	r1, #22287	; 0x570f
   1241e:	f2c0 0101 	movt	r1, #1
   12422:	984b      	ldr	r0, [sp, #300]	; 0x12c
   12424:	f7f7 f8bb 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12428:	9046      	str	r0, [sp, #280]	; 0x118
   1242a:	9145      	str	r1, [sp, #276]	; 0x114
   1242c:	e7ff      	b.n	1242e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x35a>
   1242e:	984a      	ldr	r0, [sp, #296]	; 0x128
   12430:	90a8      	str	r0, [sp, #672]	; 0x2a0
   12432:	9949      	ldr	r1, [sp, #292]	; 0x124
   12434:	91a9      	str	r1, [sp, #676]	; 0x2a4
   12436:	9a48      	ldr	r2, [sp, #288]	; 0x120
   12438:	92aa      	str	r2, [sp, #680]	; 0x2a8
   1243a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   1243c:	93ab      	str	r3, [sp, #684]	; 0x2ac
   1243e:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   12442:	f8cd c2b0 	str.w	ip, [sp, #688]	; 0x2b0
   12446:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
   1244a:	f8cd e2b4 	str.w	lr, [sp, #692]	; 0x2b4
   1244e:	466c      	mov	r4, sp
   12450:	2503      	movs	r5, #3
   12452:	6025      	str	r5, [r4, #0]
   12454:	a8a2      	add	r0, sp, #648	; 0x288
   12456:	aba8      	add	r3, sp, #672	; 0x2a0
   12458:	994d      	ldr	r1, [sp, #308]	; 0x134
   1245a:	462a      	mov	r2, r5
   1245c:	f7f6 fc01 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12460:	e7ff      	b.n	12462 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x38e>
   12462:	f64d 3080 	movw	r0, #56192	; 0xdb80
   12466:	f2c0 0001 	movt	r0, #1
   1246a:	f002 fe62 	bl	15132 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1246e:	9044      	str	r0, [sp, #272]	; 0x110
   12470:	e7ff      	b.n	12472 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x39e>
   12472:	a8a2      	add	r0, sp, #648	; 0x288
   12474:	9944      	ldr	r1, [sp, #272]	; 0x110
   12476:	f002 fe99 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1247a:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   1247c:	f64d 2098 	movw	r0, #55960	; 0xda98
   12480:	f2c0 0001 	movt	r0, #1
   12484:	6800      	ldr	r0, [r0, #0]
   12486:	a9b9      	add	r1, sp, #740	; 0x2e4
   12488:	91ba      	str	r1, [sp, #744]	; 0x2e8
   1248a:	90bb      	str	r0, [sp, #748]	; 0x2ec
   1248c:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
   1248e:	f8cd 0540 	str.w	r0, [sp, #1344]	; 0x540
   12492:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
   12494:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
   12498:	6802      	ldr	r2, [r0, #0]
   1249a:	680b      	ldr	r3, [r1, #0]
   1249c:	429a      	cmp	r2, r3
   1249e:	9043      	str	r0, [sp, #268]	; 0x10c
   124a0:	9142      	str	r1, [sp, #264]	; 0x108
   124a2:	d106      	bne.n	124b2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3de>
   124a4:	e7ff      	b.n	124a6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3d2>
   124a6:	2012      	movs	r0, #18
   124a8:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   124aa:	f004 fed3 	bl	17254 <hal_gpio_init_out>
   124ae:	90d3      	str	r0, [sp, #844]	; 0x34c
   124b0:	e075      	b.n	1259e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4ca>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   124b2:	f64d 20f0 	movw	r0, #56048	; 0xdaf0
   124b6:	f2c0 0001 	movt	r0, #1
   124ba:	6801      	ldr	r1, [r0, #0]
   124bc:	9843      	ldr	r0, [sp, #268]	; 0x10c
   124be:	90cb      	str	r0, [sp, #812]	; 0x32c
   124c0:	9a42      	ldr	r2, [sp, #264]	; 0x108
   124c2:	92cc      	str	r2, [sp, #816]	; 0x330
   124c4:	f64d 33a4 	movw	r3, #56228	; 0xdba4
   124c8:	f2c0 0301 	movt	r3, #1
   124cc:	681b      	ldr	r3, [r3, #0]
   124ce:	f64d 3c10 	movw	ip, #56080	; 0xdb10
   124d2:	f2c0 0c01 	movt	ip, #1
   124d6:	f8dc c000 	ldr.w	ip, [ip]
   124da:	46ee      	mov	lr, sp
   124dc:	2400      	movs	r4, #0
   124de:	f8ce 4000 	str.w	r4, [lr]
   124e2:	a8cd      	add	r0, sp, #820	; 0x334
   124e4:	2201      	movs	r2, #1
   124e6:	9141      	str	r1, [sp, #260]	; 0x104
   124e8:	4619      	mov	r1, r3
   124ea:	4663      	mov	r3, ip
   124ec:	f7f6 fbb9 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   124f0:	e7ff      	b.n	124f2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x41e>
   124f2:	a8cb      	add	r0, sp, #812	; 0x32c
   124f4:	90c8      	str	r0, [sp, #800]	; 0x320
   124f6:	a8cc      	add	r0, sp, #816	; 0x330
   124f8:	90c9      	str	r0, [sp, #804]	; 0x324
   124fa:	a8cd      	add	r0, sp, #820	; 0x334
   124fc:	90ca      	str	r0, [sp, #808]	; 0x328
   124fe:	98c8      	ldr	r0, [sp, #800]	; 0x320
   12500:	f8cd 0548 	str.w	r0, [sp, #1352]	; 0x548
   12504:	99c9      	ldr	r1, [sp, #804]	; 0x324
   12506:	f8cd 154c 	str.w	r1, [sp, #1356]	; 0x54c
   1250a:	9aca      	ldr	r2, [sp, #808]	; 0x328
   1250c:	f8cd 2550 	str.w	r2, [sp, #1360]	; 0x550
   12510:	f249 43b1 	movw	r3, #38065	; 0x94b1
   12514:	f2c0 0300 	movt	r3, #0
   12518:	9140      	str	r1, [sp, #256]	; 0x100
   1251a:	4619      	mov	r1, r3
   1251c:	923f      	str	r2, [sp, #252]	; 0xfc
   1251e:	f7f6 ffff 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12522:	903e      	str	r0, [sp, #248]	; 0xf8
   12524:	913d      	str	r1, [sp, #244]	; 0xf4
   12526:	e7ff      	b.n	12528 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x454>
   12528:	f249 41b1 	movw	r1, #38065	; 0x94b1
   1252c:	f2c0 0100 	movt	r1, #0
   12530:	9840      	ldr	r0, [sp, #256]	; 0x100
   12532:	f7f6 fff5 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12536:	903c      	str	r0, [sp, #240]	; 0xf0
   12538:	913b      	str	r1, [sp, #236]	; 0xec
   1253a:	e7ff      	b.n	1253c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x468>
   1253c:	f245 710f 	movw	r1, #22287	; 0x570f
   12540:	f2c0 0101 	movt	r1, #1
   12544:	983f      	ldr	r0, [sp, #252]	; 0xfc
   12546:	f7f7 f82a 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1254a:	903a      	str	r0, [sp, #232]	; 0xe8
   1254c:	9139      	str	r1, [sp, #228]	; 0xe4
   1254e:	e7ff      	b.n	12550 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x47c>
   12550:	983e      	ldr	r0, [sp, #248]	; 0xf8
   12552:	90c2      	str	r0, [sp, #776]	; 0x308
   12554:	993d      	ldr	r1, [sp, #244]	; 0xf4
   12556:	91c3      	str	r1, [sp, #780]	; 0x30c
   12558:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   1255a:	92c4      	str	r2, [sp, #784]	; 0x310
   1255c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   1255e:	93c5      	str	r3, [sp, #788]	; 0x314
   12560:	f8dd c0e8 	ldr.w	ip, [sp, #232]	; 0xe8
   12564:	f8cd c318 	str.w	ip, [sp, #792]	; 0x318
   12568:	f8dd e0e4 	ldr.w	lr, [sp, #228]	; 0xe4
   1256c:	f8cd e31c 	str.w	lr, [sp, #796]	; 0x31c
   12570:	466c      	mov	r4, sp
   12572:	2503      	movs	r5, #3
   12574:	6025      	str	r5, [r4, #0]
   12576:	a8bc      	add	r0, sp, #752	; 0x2f0
   12578:	abc2      	add	r3, sp, #776	; 0x308
   1257a:	9941      	ldr	r1, [sp, #260]	; 0x104
   1257c:	462a      	mov	r2, r5
   1257e:	f7f6 fb70 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12582:	e7ff      	b.n	12584 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4b0>
   12584:	f64d 30a8 	movw	r0, #56232	; 0xdba8
   12588:	f2c0 0001 	movt	r0, #1
   1258c:	f002 fdd1 	bl	15132 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12590:	9038      	str	r0, [sp, #224]	; 0xe0
   12592:	e7ff      	b.n	12594 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4c0>
   12594:	a8bc      	add	r0, sp, #752	; 0x2f0
   12596:	9938      	ldr	r1, [sp, #224]	; 0xe0
   12598:	f002 fe08 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1259c:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   1259e:	f64d 2098 	movw	r0, #55960	; 0xda98
   125a2:	f2c0 0001 	movt	r0, #1
   125a6:	6800      	ldr	r0, [r0, #0]
   125a8:	a9d3      	add	r1, sp, #844	; 0x34c
   125aa:	91d4      	str	r1, [sp, #848]	; 0x350
   125ac:	90d5      	str	r0, [sp, #852]	; 0x354
   125ae:	98d4      	ldr	r0, [sp, #848]	; 0x350
   125b0:	f8cd 0554 	str.w	r0, [sp, #1364]	; 0x554
   125b4:	99d5      	ldr	r1, [sp, #852]	; 0x354
   125b6:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
   125ba:	6802      	ldr	r2, [r0, #0]
   125bc:	680b      	ldr	r3, [r1, #0]
   125be:	429a      	cmp	r2, r3
   125c0:	9037      	str	r0, [sp, #220]	; 0xdc
   125c2:	9136      	str	r1, [sp, #216]	; 0xd8
   125c4:	d107      	bne.n	125d6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x502>
   125c6:	e7ff      	b.n	125c8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4f4>

    //  Create Event Queue and Mbuf (Data) Queue that will store the SPI requests
    unsafe { os::os_eventq_init(&mut SPI_EVENT_QUEUE) };
   125c8:	f247 20a4 	movw	r0, #29348	; 0x72a4
   125cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   125d0:	f005 ff4a 	bl	18468 <os_eventq_init>
   125d4:	e075      	b.n	126c2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5ee>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   125d6:	f64d 20f0 	movw	r0, #56048	; 0xdaf0
   125da:	f2c0 0001 	movt	r0, #1
   125de:	6801      	ldr	r1, [r0, #0]
   125e0:	9837      	ldr	r0, [sp, #220]	; 0xdc
   125e2:	90e5      	str	r0, [sp, #916]	; 0x394
   125e4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   125e6:	92e6      	str	r2, [sp, #920]	; 0x398
   125e8:	f64d 33a4 	movw	r3, #56228	; 0xdba4
   125ec:	f2c0 0301 	movt	r3, #1
   125f0:	681b      	ldr	r3, [r3, #0]
   125f2:	f64d 3c10 	movw	ip, #56080	; 0xdb10
   125f6:	f2c0 0c01 	movt	ip, #1
   125fa:	f8dc c000 	ldr.w	ip, [ip]
   125fe:	46ee      	mov	lr, sp
   12600:	2400      	movs	r4, #0
   12602:	f8ce 4000 	str.w	r4, [lr]
   12606:	a8e7      	add	r0, sp, #924	; 0x39c
   12608:	2201      	movs	r2, #1
   1260a:	9135      	str	r1, [sp, #212]	; 0xd4
   1260c:	4619      	mov	r1, r3
   1260e:	4663      	mov	r3, ip
   12610:	f7f6 fb27 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12614:	e7ff      	b.n	12616 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x542>
   12616:	a8e5      	add	r0, sp, #916	; 0x394
   12618:	90e2      	str	r0, [sp, #904]	; 0x388
   1261a:	a8e6      	add	r0, sp, #920	; 0x398
   1261c:	90e3      	str	r0, [sp, #908]	; 0x38c
   1261e:	a8e7      	add	r0, sp, #924	; 0x39c
   12620:	90e4      	str	r0, [sp, #912]	; 0x390
   12622:	98e2      	ldr	r0, [sp, #904]	; 0x388
   12624:	f8cd 055c 	str.w	r0, [sp, #1372]	; 0x55c
   12628:	99e3      	ldr	r1, [sp, #908]	; 0x38c
   1262a:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560
   1262e:	9ae4      	ldr	r2, [sp, #912]	; 0x390
   12630:	f8cd 2564 	str.w	r2, [sp, #1380]	; 0x564
   12634:	f249 43b1 	movw	r3, #38065	; 0x94b1
   12638:	f2c0 0300 	movt	r3, #0
   1263c:	9134      	str	r1, [sp, #208]	; 0xd0
   1263e:	4619      	mov	r1, r3
   12640:	9233      	str	r2, [sp, #204]	; 0xcc
   12642:	f7f6 ff6d 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12646:	9032      	str	r0, [sp, #200]	; 0xc8
   12648:	9131      	str	r1, [sp, #196]	; 0xc4
   1264a:	e7ff      	b.n	1264c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x578>
   1264c:	f249 41b1 	movw	r1, #38065	; 0x94b1
   12650:	f2c0 0100 	movt	r1, #0
   12654:	9834      	ldr	r0, [sp, #208]	; 0xd0
   12656:	f7f6 ff63 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1265a:	9030      	str	r0, [sp, #192]	; 0xc0
   1265c:	912f      	str	r1, [sp, #188]	; 0xbc
   1265e:	e7ff      	b.n	12660 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x58c>
   12660:	f245 710f 	movw	r1, #22287	; 0x570f
   12664:	f2c0 0101 	movt	r1, #1
   12668:	9833      	ldr	r0, [sp, #204]	; 0xcc
   1266a:	f7f6 ff98 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1266e:	902e      	str	r0, [sp, #184]	; 0xb8
   12670:	912d      	str	r1, [sp, #180]	; 0xb4
   12672:	e7ff      	b.n	12674 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5a0>
   12674:	9832      	ldr	r0, [sp, #200]	; 0xc8
   12676:	90dc      	str	r0, [sp, #880]	; 0x370
   12678:	9931      	ldr	r1, [sp, #196]	; 0xc4
   1267a:	91dd      	str	r1, [sp, #884]	; 0x374
   1267c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   1267e:	92de      	str	r2, [sp, #888]	; 0x378
   12680:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   12682:	93df      	str	r3, [sp, #892]	; 0x37c
   12684:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
   12688:	f8cd c380 	str.w	ip, [sp, #896]	; 0x380
   1268c:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
   12690:	f8cd e384 	str.w	lr, [sp, #900]	; 0x384
   12694:	466c      	mov	r4, sp
   12696:	2503      	movs	r5, #3
   12698:	6025      	str	r5, [r4, #0]
   1269a:	a8d6      	add	r0, sp, #856	; 0x358
   1269c:	abdc      	add	r3, sp, #880	; 0x370
   1269e:	9935      	ldr	r1, [sp, #212]	; 0xd4
   126a0:	462a      	mov	r2, r5
   126a2:	f7f6 fade 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   126a6:	e7ff      	b.n	126a8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5d4>
   126a8:	f64d 30b8 	movw	r0, #56248	; 0xdbb8
   126ac:	f2c0 0001 	movt	r0, #1
   126b0:	f002 fd3f 	bl	15132 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   126b4:	902c      	str	r0, [sp, #176]	; 0xb0
   126b6:	e7ff      	b.n	126b8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5e4>
   126b8:	a8d6      	add	r0, sp, #856	; 0x358
   126ba:	992c      	ldr	r1, [sp, #176]	; 0xb0
   126bc:	f002 fd76 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   126c0:	defe      	udf	#254	; 0xfe
    let rc = unsafe { os::os_mqueue_init(
        &mut SPI_DATA_QUEUE, 
        Some(spi_event_callback), 
   126c2:	f642 70cd 	movw	r0, #12237	; 0x2fcd
   126c6:	f2c0 0001 	movt	r0, #1
   126ca:	90ee      	str	r0, [sp, #952]	; 0x3b8
    let rc = unsafe { os::os_mqueue_init(
   126cc:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
   126ce:	f247 208c 	movw	r0, #29324	; 0x728c
   126d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   126d6:	2200      	movs	r2, #0
   126d8:	f005 ff74 	bl	185c4 <os_mqueue_init>
   126dc:	90ed      	str	r0, [sp, #948]	; 0x3b4
   126de:	e7ff      	b.n	126e0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x60c>
        NULL
    ) };
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   126e0:	f64d 2098 	movw	r0, #55960	; 0xda98
   126e4:	f2c0 0001 	movt	r0, #1
   126e8:	6800      	ldr	r0, [r0, #0]
   126ea:	a9ed      	add	r1, sp, #948	; 0x3b4
   126ec:	91ef      	str	r1, [sp, #956]	; 0x3bc
   126ee:	90f0      	str	r0, [sp, #960]	; 0x3c0
   126f0:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
   126f2:	f8cd 0568 	str.w	r0, [sp, #1384]	; 0x568
   126f6:	99f0      	ldr	r1, [sp, #960]	; 0x3c0
   126f8:	f8cd 156c 	str.w	r1, [sp, #1388]	; 0x56c
   126fc:	6802      	ldr	r2, [r0, #0]
   126fe:	680b      	ldr	r3, [r1, #0]
   12700:	429a      	cmp	r2, r3
   12702:	902b      	str	r0, [sp, #172]	; 0xac
   12704:	912a      	str	r1, [sp, #168]	; 0xa8
   12706:	d10a      	bne.n	1271e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x64a>
   12708:	e7ff      	b.n	1270a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x636>

    //  Create the Semaphore that will signal whether the SPI request has completed
    let rc = unsafe { os::os_sem_init(&mut SPI_SEM, 0) };  //  Init to 0 tokens, so caller will block until SPI request is completed.
   1270a:	f247 207c 	movw	r0, #29308	; 0x727c
   1270e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12712:	2100      	movs	r1, #0
   12714:	f006 fc50 	bl	18fb8 <os_sem_init>
   12718:	f8cd 0420 	str.w	r0, [sp, #1056]	; 0x420
   1271c:	e07b      	b.n	12816 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x742>
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   1271e:	f64d 20f0 	movw	r0, #56048	; 0xdaf0
   12722:	f2c0 0001 	movt	r0, #1
   12726:	6801      	ldr	r1, [r0, #0]
   12728:	982b      	ldr	r0, [sp, #172]	; 0xac
   1272a:	f8cd 0400 	str.w	r0, [sp, #1024]	; 0x400
   1272e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   12730:	f8cd 2404 	str.w	r2, [sp, #1028]	; 0x404
   12734:	f64d 33dc 	movw	r3, #56284	; 0xdbdc
   12738:	f2c0 0301 	movt	r3, #1
   1273c:	681b      	ldr	r3, [r3, #0]
   1273e:	f64d 3c10 	movw	ip, #56080	; 0xdb10
   12742:	f2c0 0c01 	movt	ip, #1
   12746:	f8dc c000 	ldr.w	ip, [ip]
   1274a:	46ee      	mov	lr, sp
   1274c:	2400      	movs	r4, #0
   1274e:	f8ce 4000 	str.w	r4, [lr]
   12752:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   12756:	2201      	movs	r2, #1
   12758:	9129      	str	r1, [sp, #164]	; 0xa4
   1275a:	4619      	mov	r1, r3
   1275c:	4663      	mov	r3, ip
   1275e:	f7f6 fa80 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12762:	e7ff      	b.n	12764 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x690>
   12764:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
   12768:	90fd      	str	r0, [sp, #1012]	; 0x3f4
   1276a:	f20d 4004 	addw	r0, sp, #1028	; 0x404
   1276e:	90fe      	str	r0, [sp, #1016]	; 0x3f8
   12770:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   12774:	90ff      	str	r0, [sp, #1020]	; 0x3fc
   12776:	98fd      	ldr	r0, [sp, #1012]	; 0x3f4
   12778:	f8cd 0570 	str.w	r0, [sp, #1392]	; 0x570
   1277c:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
   1277e:	f8cd 1574 	str.w	r1, [sp, #1396]	; 0x574
   12782:	9aff      	ldr	r2, [sp, #1020]	; 0x3fc
   12784:	f8cd 2578 	str.w	r2, [sp, #1400]	; 0x578
   12788:	f249 43b1 	movw	r3, #38065	; 0x94b1
   1278c:	f2c0 0300 	movt	r3, #0
   12790:	9128      	str	r1, [sp, #160]	; 0xa0
   12792:	4619      	mov	r1, r3
   12794:	9227      	str	r2, [sp, #156]	; 0x9c
   12796:	f7f6 fec3 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1279a:	9026      	str	r0, [sp, #152]	; 0x98
   1279c:	9125      	str	r1, [sp, #148]	; 0x94
   1279e:	e7ff      	b.n	127a0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6cc>
   127a0:	f249 41b1 	movw	r1, #38065	; 0x94b1
   127a4:	f2c0 0100 	movt	r1, #0
   127a8:	9828      	ldr	r0, [sp, #160]	; 0xa0
   127aa:	f7f6 feb9 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   127ae:	9024      	str	r0, [sp, #144]	; 0x90
   127b0:	9123      	str	r1, [sp, #140]	; 0x8c
   127b2:	e7ff      	b.n	127b4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6e0>
   127b4:	f245 710f 	movw	r1, #22287	; 0x570f
   127b8:	f2c0 0101 	movt	r1, #1
   127bc:	9827      	ldr	r0, [sp, #156]	; 0x9c
   127be:	f7f6 feee 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   127c2:	9022      	str	r0, [sp, #136]	; 0x88
   127c4:	9121      	str	r1, [sp, #132]	; 0x84
   127c6:	e7ff      	b.n	127c8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6f4>
   127c8:	9826      	ldr	r0, [sp, #152]	; 0x98
   127ca:	90f7      	str	r0, [sp, #988]	; 0x3dc
   127cc:	9925      	ldr	r1, [sp, #148]	; 0x94
   127ce:	91f8      	str	r1, [sp, #992]	; 0x3e0
   127d0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   127d2:	92f9      	str	r2, [sp, #996]	; 0x3e4
   127d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   127d6:	93fa      	str	r3, [sp, #1000]	; 0x3e8
   127d8:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
   127dc:	f8cd c3ec 	str.w	ip, [sp, #1004]	; 0x3ec
   127e0:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
   127e4:	f8cd e3f0 	str.w	lr, [sp, #1008]	; 0x3f0
   127e8:	466c      	mov	r4, sp
   127ea:	2503      	movs	r5, #3
   127ec:	6025      	str	r5, [r4, #0]
   127ee:	a8f1      	add	r0, sp, #964	; 0x3c4
   127f0:	abf7      	add	r3, sp, #988	; 0x3dc
   127f2:	9929      	ldr	r1, [sp, #164]	; 0xa4
   127f4:	462a      	mov	r2, r5
   127f6:	f7f6 fa34 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   127fa:	e7ff      	b.n	127fc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x728>
   127fc:	f64d 30e0 	movw	r0, #56288	; 0xdbe0
   12800:	f2c0 0001 	movt	r0, #1
   12804:	f002 fc95 	bl	15132 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12808:	9020      	str	r0, [sp, #128]	; 0x80
   1280a:	e7ff      	b.n	1280c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x738>
   1280c:	a8f1      	add	r0, sp, #964	; 0x3c4
   1280e:	9920      	ldr	r1, [sp, #128]	; 0x80
   12810:	f002 fccc 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12814:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   12816:	f64d 2098 	movw	r0, #55960	; 0xda98
   1281a:	f2c0 0001 	movt	r0, #1
   1281e:	6800      	ldr	r0, [r0, #0]
   12820:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
   12824:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
   12828:	f8cd 0428 	str.w	r0, [sp, #1064]	; 0x428
   1282c:	f8dd 0424 	ldr.w	r0, [sp, #1060]	; 0x424
   12830:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
   12834:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   12838:	f8cd 1580 	str.w	r1, [sp, #1408]	; 0x580
   1283c:	6802      	ldr	r2, [r0, #0]
   1283e:	680b      	ldr	r3, [r1, #0]
   12840:	429a      	cmp	r2, r3
   12842:	901f      	str	r0, [sp, #124]	; 0x7c
   12844:	911e      	str	r1, [sp, #120]	; 0x78
   12846:	d10a      	bne.n	1285e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x78a>
   12848:	e7ff      	b.n	1284a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x776>

    //  Create the Semaphore that will throttle the number of queued SPI requests
    let rc = unsafe { os::os_sem_init(&mut SPI_THROTTLE_SEM, 2) };  //  Only max 2 requests queued, the next request will block
   1284a:	f247 2084 	movw	r0, #29316	; 0x7284
   1284e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12852:	2102      	movs	r1, #2
   12854:	f006 fbb0 	bl	18fb8 <os_sem_init>
   12858:	f8cd 0488 	str.w	r0, [sp, #1160]	; 0x488
   1285c:	e088      	b.n	12970 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x89c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   1285e:	f64d 20f0 	movw	r0, #56048	; 0xdaf0
   12862:	f2c0 0001 	movt	r0, #1
   12866:	6801      	ldr	r1, [r0, #0]
   12868:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1286a:	f8cd 0468 	str.w	r0, [sp, #1128]	; 0x468
   1286e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   12870:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
   12874:	f64d 4308 	movw	r3, #56328	; 0xdc08
   12878:	f2c0 0301 	movt	r3, #1
   1287c:	681b      	ldr	r3, [r3, #0]
   1287e:	f64d 3c10 	movw	ip, #56080	; 0xdb10
   12882:	f2c0 0c01 	movt	ip, #1
   12886:	f8dc c000 	ldr.w	ip, [ip]
   1288a:	46ee      	mov	lr, sp
   1288c:	2400      	movs	r4, #0
   1288e:	f8ce 4000 	str.w	r4, [lr]
   12892:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   12896:	2201      	movs	r2, #1
   12898:	911d      	str	r1, [sp, #116]	; 0x74
   1289a:	4619      	mov	r1, r3
   1289c:	4663      	mov	r3, ip
   1289e:	f7f6 f9e0 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   128a2:	e7ff      	b.n	128a4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x7d0>
   128a4:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
   128a8:	f8cd 045c 	str.w	r0, [sp, #1116]	; 0x45c
   128ac:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
   128b0:	f8cd 0460 	str.w	r0, [sp, #1120]	; 0x460
   128b4:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   128b8:	f8cd 0464 	str.w	r0, [sp, #1124]	; 0x464
   128bc:	f8dd 045c 	ldr.w	r0, [sp, #1116]	; 0x45c
   128c0:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
   128c4:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   128c8:	f8cd 1588 	str.w	r1, [sp, #1416]	; 0x588
   128cc:	f8dd 2464 	ldr.w	r2, [sp, #1124]	; 0x464
   128d0:	f8cd 258c 	str.w	r2, [sp, #1420]	; 0x58c
   128d4:	f249 5305 	movw	r3, #38149	; 0x9505
   128d8:	f2c0 0300 	movt	r3, #0
   128dc:	911c      	str	r1, [sp, #112]	; 0x70
   128de:	4619      	mov	r1, r3
   128e0:	921b      	str	r2, [sp, #108]	; 0x6c
   128e2:	f7f6 fe47 	bl	9574 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   128e6:	901a      	str	r0, [sp, #104]	; 0x68
   128e8:	9119      	str	r1, [sp, #100]	; 0x64
   128ea:	e7ff      	b.n	128ec <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x818>
   128ec:	f249 5105 	movw	r1, #38149	; 0x9505
   128f0:	f2c0 0100 	movt	r1, #0
   128f4:	981c      	ldr	r0, [sp, #112]	; 0x70
   128f6:	f7f6 fe3d 	bl	9574 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   128fa:	9018      	str	r0, [sp, #96]	; 0x60
   128fc:	9117      	str	r1, [sp, #92]	; 0x5c
   128fe:	e7ff      	b.n	12900 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x82c>
   12900:	f245 710f 	movw	r1, #22287	; 0x570f
   12904:	f2c0 0101 	movt	r1, #1
   12908:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1290a:	f7f6 fe48 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1290e:	9016      	str	r0, [sp, #88]	; 0x58
   12910:	9115      	str	r1, [sp, #84]	; 0x54
   12912:	e7ff      	b.n	12914 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x840>
   12914:	981a      	ldr	r0, [sp, #104]	; 0x68
   12916:	f8cd 0444 	str.w	r0, [sp, #1092]	; 0x444
   1291a:	9919      	ldr	r1, [sp, #100]	; 0x64
   1291c:	f8cd 1448 	str.w	r1, [sp, #1096]	; 0x448
   12920:	9a18      	ldr	r2, [sp, #96]	; 0x60
   12922:	f8cd 244c 	str.w	r2, [sp, #1100]	; 0x44c
   12926:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12928:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
   1292c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
   12930:	f8cd c454 	str.w	ip, [sp, #1108]	; 0x454
   12934:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
   12938:	f8cd e458 	str.w	lr, [sp, #1112]	; 0x458
   1293c:	466c      	mov	r4, sp
   1293e:	2503      	movs	r5, #3
   12940:	6025      	str	r5, [r4, #0]
   12942:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   12946:	f20d 4344 	addw	r3, sp, #1092	; 0x444
   1294a:	991d      	ldr	r1, [sp, #116]	; 0x74
   1294c:	462a      	mov	r2, r5
   1294e:	f7f6 f988 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12952:	e7ff      	b.n	12954 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x880>
   12954:	f64d 400c 	movw	r0, #56332	; 0xdc0c
   12958:	f2c0 0001 	movt	r0, #1
   1295c:	f002 fbe9 	bl	15132 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12960:	9014      	str	r0, [sp, #80]	; 0x50
   12962:	e7ff      	b.n	12964 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x890>
   12964:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   12968:	9914      	ldr	r1, [sp, #80]	; 0x50
   1296a:	f002 fc1f 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1296e:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   12970:	f64d 2098 	movw	r0, #55960	; 0xda98
   12974:	f2c0 0001 	movt	r0, #1
   12978:	6800      	ldr	r0, [r0, #0]
   1297a:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   1297e:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
   12982:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
   12986:	f8dd 048c 	ldr.w	r0, [sp, #1164]	; 0x48c
   1298a:	f8cd 0590 	str.w	r0, [sp, #1424]	; 0x590
   1298e:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   12992:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
   12996:	6802      	ldr	r2, [r0, #0]
   12998:	680b      	ldr	r3, [r1, #0]
   1299a:	429a      	cmp	r2, r3
   1299c:	9013      	str	r0, [sp, #76]	; 0x4c
   1299e:	9112      	str	r1, [sp, #72]	; 0x48
   129a0:	d125      	bne.n	129ee <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x91a>
   129a2:	e7ff      	b.n	129a4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x8d0>
    
    //  Create a task to send SPI requests sequentially from the SPI Event Queue and Mbuf Queue
    os::task_init(                //  Create a new task and start it...
        unsafe { &mut SPI_TASK }, //  Task object will be saved here
        &init_strn!( "spi" ),     //  Name of task
   129a4:	f64d 4038 	movw	r0, #56376	; 0xdc38
   129a8:	f2c0 0001 	movt	r0, #1
   129ac:	6801      	ldr	r1, [r0, #0]
        Some( spi_task_func ),    //  Function to execute when task starts
   129ae:	f642 304f 	movw	r0, #11087	; 0x2b4f
   129b2:	f2c0 0001 	movt	r0, #1
   129b6:	f8cd 04f4 	str.w	r0, [sp, #1268]	; 0x4f4
    os::task_init(                //  Create a new task and start it...
   129ba:	f8dd 24f4 	ldr.w	r2, [sp, #1268]	; 0x4f4
   129be:	4668      	mov	r0, sp
   129c0:	f44f 7380 	mov.w	r3, #256	; 0x100
   129c4:	6103      	str	r3, [r0, #16]
   129c6:	60c3      	str	r3, [r0, #12]
   129c8:	f247 3304 	movw	r3, #29444	; 0x7304
   129cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
   129d0:	6083      	str	r3, [r0, #8]
   129d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   129d6:	6043      	str	r3, [r0, #4]
   129d8:	230a      	movs	r3, #10
   129da:	6003      	str	r3, [r0, #0]
   129dc:	f247 20b4 	movw	r0, #29364	; 0x72b4
   129e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   129e4:	2300      	movs	r3, #0
   129e6:	f7f6 fa36 	bl	8e56 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
   129ea:	9011      	str	r0, [sp, #68]	; 0x44
   129ec:	e088      	b.n	12b00 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   129ee:	f64d 20f0 	movw	r0, #56048	; 0xdaf0
   129f2:	f2c0 0001 	movt	r0, #1
   129f6:	6801      	ldr	r1, [r0, #0]
   129f8:	9813      	ldr	r0, [sp, #76]	; 0x4c
   129fa:	f8cd 04d0 	str.w	r0, [sp, #1232]	; 0x4d0
   129fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12a00:	f8cd 24d4 	str.w	r2, [sp, #1236]	; 0x4d4
   12a04:	f64d 4308 	movw	r3, #56328	; 0xdc08
   12a08:	f2c0 0301 	movt	r3, #1
   12a0c:	681b      	ldr	r3, [r3, #0]
   12a0e:	f64d 3c10 	movw	ip, #56080	; 0xdb10
   12a12:	f2c0 0c01 	movt	ip, #1
   12a16:	f8dc c000 	ldr.w	ip, [ip]
   12a1a:	46ee      	mov	lr, sp
   12a1c:	2400      	movs	r4, #0
   12a1e:	f8ce 4000 	str.w	r4, [lr]
   12a22:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   12a26:	2201      	movs	r2, #1
   12a28:	9110      	str	r1, [sp, #64]	; 0x40
   12a2a:	4619      	mov	r1, r3
   12a2c:	4663      	mov	r3, ip
   12a2e:	f7f6 f918 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12a32:	e7ff      	b.n	12a34 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x960>
   12a34:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   12a38:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
   12a3c:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
   12a40:	f8cd 04c8 	str.w	r0, [sp, #1224]	; 0x4c8
   12a44:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   12a48:	f8cd 04cc 	str.w	r0, [sp, #1228]	; 0x4cc
   12a4c:	f8dd 04c4 	ldr.w	r0, [sp, #1220]	; 0x4c4
   12a50:	f8cd 0598 	str.w	r0, [sp, #1432]	; 0x598
   12a54:	f8dd 14c8 	ldr.w	r1, [sp, #1224]	; 0x4c8
   12a58:	f8cd 159c 	str.w	r1, [sp, #1436]	; 0x59c
   12a5c:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
   12a60:	f8cd 25a0 	str.w	r2, [sp, #1440]	; 0x5a0
   12a64:	f249 5305 	movw	r3, #38149	; 0x9505
   12a68:	f2c0 0300 	movt	r3, #0
   12a6c:	910f      	str	r1, [sp, #60]	; 0x3c
   12a6e:	4619      	mov	r1, r3
   12a70:	920e      	str	r2, [sp, #56]	; 0x38
   12a72:	f7f6 fd7f 	bl	9574 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   12a76:	900d      	str	r0, [sp, #52]	; 0x34
   12a78:	910c      	str	r1, [sp, #48]	; 0x30
   12a7a:	e7ff      	b.n	12a7c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9a8>
   12a7c:	f249 5105 	movw	r1, #38149	; 0x9505
   12a80:	f2c0 0100 	movt	r1, #0
   12a84:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12a86:	f7f6 fd75 	bl	9574 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   12a8a:	900b      	str	r0, [sp, #44]	; 0x2c
   12a8c:	910a      	str	r1, [sp, #40]	; 0x28
   12a8e:	e7ff      	b.n	12a90 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9bc>
   12a90:	f245 710f 	movw	r1, #22287	; 0x570f
   12a94:	f2c0 0101 	movt	r1, #1
   12a98:	980e      	ldr	r0, [sp, #56]	; 0x38
   12a9a:	f7f6 fd80 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12a9e:	9009      	str	r0, [sp, #36]	; 0x24
   12aa0:	9108      	str	r1, [sp, #32]
   12aa2:	e7ff      	b.n	12aa4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9d0>
   12aa4:	980d      	ldr	r0, [sp, #52]	; 0x34
   12aa6:	f8cd 04ac 	str.w	r0, [sp, #1196]	; 0x4ac
   12aaa:	990c      	ldr	r1, [sp, #48]	; 0x30
   12aac:	f8cd 14b0 	str.w	r1, [sp, #1200]	; 0x4b0
   12ab0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12ab2:	f8cd 24b4 	str.w	r2, [sp, #1204]	; 0x4b4
   12ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12ab8:	f8cd 34b8 	str.w	r3, [sp, #1208]	; 0x4b8
   12abc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   12ac0:	f8cd c4bc 	str.w	ip, [sp, #1212]	; 0x4bc
   12ac4:	f8dd e020 	ldr.w	lr, [sp, #32]
   12ac8:	f8cd e4c0 	str.w	lr, [sp, #1216]	; 0x4c0
   12acc:	466c      	mov	r4, sp
   12ace:	2503      	movs	r5, #3
   12ad0:	6025      	str	r5, [r4, #0]
   12ad2:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   12ad6:	f20d 43ac 	addw	r3, sp, #1196	; 0x4ac
   12ada:	9910      	ldr	r1, [sp, #64]	; 0x40
   12adc:	462a      	mov	r2, r5
   12ade:	f7f6 f8c0 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12ae2:	e7ff      	b.n	12ae4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa10>
   12ae4:	f64d 401c 	movw	r0, #56348	; 0xdc1c
   12ae8:	f2c0 0001 	movt	r0, #1
   12aec:	f002 fb21 	bl	15132 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12af0:	9007      	str	r0, [sp, #28]
   12af2:	e7ff      	b.n	12af4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa20>
   12af4:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   12af8:	9907      	ldr	r1, [sp, #28]
   12afa:	f002 fb57 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12afe:	defe      	udf	#254	; 0xfe
    os::task_init(                //  Create a new task and start it...
   12b00:	9811      	ldr	r0, [sp, #68]	; 0x44
   12b02:	f7f6 f91c 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   12b06:	f8cd 04f0 	str.w	r0, [sp, #1264]	; 0x4f0
   12b0a:	e7ff      	b.n	12b0c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa38>
        NULL,  //  Argument to be passed to above function
        10,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut SPI_TASK_STACK }, //  Stack space for the task
        SPI_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
   12b0c:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   12b10:	1e41      	subs	r1, r0, #1
   12b12:	bf18      	it	ne
   12b14:	2101      	movne	r1, #1
   12b16:	2801      	cmp	r0, #1
   12b18:	d001      	beq.n	12b1e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa4a>
   12b1a:	e7ff      	b.n	12b1c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa48>
   12b1c:	e005      	b.n	12b2a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa56>
   12b1e:	2000      	movs	r0, #0
    Ok(())
   12b20:	9069      	str	r0, [sp, #420]	; 0x1a4
   12b22:	2001      	movs	r0, #1
   12b24:	9069      	str	r0, [sp, #420]	; 0x1a4
}
   12b26:	e008      	b.n	12b3a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>
    os::task_init(                //  Create a new task and start it...
   12b28:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
   12b2a:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   12b2e:	f8cd 05a4 	str.w	r0, [sp, #1444]	; 0x5a4
   12b32:	f7ff fa17 	bl	11f64 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   12b36:	9006      	str	r0, [sp, #24]
   12b38:	e003      	b.n	12b42 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa6e>
}
   12b3a:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   12b3c:	f50d 6db5 	add.w	sp, sp, #1448	; 0x5a8
   12b40:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;                               //  `?` means check for error
   12b42:	9806      	ldr	r0, [sp, #24]
   12b44:	f7f6 f8ef 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   12b48:	9069      	str	r0, [sp, #420]	; 0x1a4
   12b4a:	e7ff      	b.n	12b4c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa78>
   12b4c:	e7f5      	b.n	12b3a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>

00012b4e <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E>:

/// SPI Task Function.  Execute sequentially each SPI request posted to our Event Queue.  When there are no requests to process, block until one arrives.
extern "C" fn spi_task_func(_arg: Ptr) {
   12b4e:	b580      	push	{r7, lr}
   12b50:	b082      	sub	sp, #8
   12b52:	9001      	str	r0, [sp, #4]
    loop {
   12b54:	e7ff      	b.n	12b56 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>
        //  Forever read SPI requests and execute them. Will call spi_event_callback().
        os::eventq_run(
   12b56:	f247 20a4 	movw	r0, #29348	; 0x72a4
   12b5a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12b5e:	f7f6 f961 	bl	8e24 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
   12b62:	9000      	str	r0, [sp, #0]
   12b64:	e7ff      	b.n	12b66 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x18>
   12b66:	f64d 413c 	movw	r1, #56380	; 0xdc3c
   12b6a:	f2c0 0101 	movt	r1, #1
   12b6e:	f64d 4348 	movw	r3, #56392	; 0xdc48
   12b72:	f2c0 0301 	movt	r3, #1
   12b76:	220b      	movs	r2, #11
   12b78:	9800      	ldr	r0, [sp, #0]
   12b7a:	f7f6 f8a1 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   12b7e:	e7ff      	b.n	12b80 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x32>
            unsafe { &mut SPI_EVENT_QUEUE }
        ).expect("eventq fail");

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
   12b80:	f005 f954 	bl	17e2c <hal_watchdog_tickle>
   12b84:	e7ff      	b.n	12b86 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x38>
    loop {
   12b86:	e7e6      	b.n	12b56 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>

00012b88 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>:
    }
}

/// Set pending request for non-blocking SPI write for Command Byte. Returns without waiting for write to complete.
pub fn spi_noblock_write_command(cmd: u8) -> MynewtResult<()> {
   12b88:	b580      	push	{r7, lr}
   12b8a:	b08c      	sub	sp, #48	; 0x30
   12b8c:	4601      	mov	r1, r0
   12b8e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    //  If there is a pending Command Byte, enqueue it.
    spi_noblock_write_flush() ? ;
   12b92:	9104      	str	r1, [sp, #16]
   12b94:	f000 f892 	bl	12cbc <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   12b98:	9003      	str	r0, [sp, #12]
   12b9a:	e7ff      	b.n	12b9c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x14>
   12b9c:	9803      	ldr	r0, [sp, #12]
   12b9e:	f7f6 f8ce 	bl	8d3e <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   12ba2:	9006      	str	r0, [sp, #24]
   12ba4:	e7ff      	b.n	12ba6 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x1e>
   12ba6:	9806      	ldr	r0, [sp, #24]
   12ba8:	1e41      	subs	r1, r0, #1
   12baa:	bf18      	it	ne
   12bac:	2101      	movne	r1, #1
   12bae:	2801      	cmp	r0, #1
   12bb0:	d001      	beq.n	12bb6 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2e>
   12bb2:	e7ff      	b.n	12bb4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2c>
   12bb4:	e00c      	b.n	12bd0 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x48>
    //  Set the pending Command Byte.
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   12bb6:	f646 2070 	movw	r0, #27248	; 0x6a70
   12bba:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12bbe:	9904      	ldr	r1, [sp, #16]
   12bc0:	f7ff f9ae 	bl	11f20 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>
   12bc4:	f88d 101d 	strb.w	r1, [sp, #29]
   12bc8:	f88d 001c 	strb.w	r0, [sp, #28]
   12bcc:	e00f      	b.n	12bee <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x66>
    spi_noblock_write_flush() ? ;
   12bce:	defe      	udf	#254	; 0xfe
   12bd0:	9806      	ldr	r0, [sp, #24]
   12bd2:	900b      	str	r0, [sp, #44]	; 0x2c
   12bd4:	f7ff f9c6 	bl	11f64 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   12bd8:	9002      	str	r0, [sp, #8]
   12bda:	e002      	b.n	12be2 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x5a>
        return Err(MynewtError::SYS_EINVAL);
    }
    Ok(())
}
   12bdc:	9805      	ldr	r0, [sp, #20]
   12bde:	b00c      	add	sp, #48	; 0x30
   12be0:	bd80      	pop	{r7, pc}
    spi_noblock_write_flush() ? ;
   12be2:	9802      	ldr	r0, [sp, #8]
   12be4:	f7f6 f89f 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   12be8:	9005      	str	r0, [sp, #20]
   12bea:	e7ff      	b.n	12bec <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x64>
   12bec:	e7f6      	b.n	12bdc <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   12bee:	a807      	add	r0, sp, #28
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   12bf0:	f7f6 f88d 	bl	8d0e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>
   12bf4:	9001      	str	r0, [sp, #4]
   12bf6:	e7ff      	b.n	12bf8 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x70>
   12bf8:	9801      	ldr	r0, [sp, #4]
   12bfa:	07c1      	lsls	r1, r0, #31
   12bfc:	2900      	cmp	r1, #0
   12bfe:	d105      	bne.n	12c0c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x84>
   12c00:	e7ff      	b.n	12c02 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x7a>
   12c02:	2000      	movs	r0, #0
    Ok(())
   12c04:	9005      	str	r0, [sp, #20]
   12c06:	2001      	movs	r0, #1
   12c08:	9005      	str	r0, [sp, #20]
}
   12c0a:	e7e7      	b.n	12bdc <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   12c0c:	f06f 0001 	mvn.w	r0, #1
        return Err(MynewtError::SYS_EINVAL);
   12c10:	9008      	str	r0, [sp, #32]
   12c12:	9808      	ldr	r0, [sp, #32]
   12c14:	9005      	str	r0, [sp, #20]
   12c16:	e7e1      	b.n	12bdc <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>

00012c18 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>:

/// Set pending request for non-blocking SPI write for Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_data(data: &[u8]) -> MynewtResult<()> {
   12c18:	b580      	push	{r7, lr}
   12c1a:	b08e      	sub	sp, #56	; 0x38
   12c1c:	900a      	str	r0, [sp, #40]	; 0x28
   12c1e:	910b      	str	r1, [sp, #44]	; 0x2c
    assert!(unsafe { PENDING_CMD.len() } > 0);  //  Must have Command Byte before Data Bytes
   12c20:	f646 2270 	movw	r2, #27248	; 0x6a70
   12c24:	f2c2 0200 	movt	r2, #8192	; 0x2000
   12c28:	9007      	str	r0, [sp, #28]
   12c2a:	4610      	mov	r0, r2
   12c2c:	9106      	str	r1, [sp, #24]
   12c2e:	f7ff f95d 	bl	11eec <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   12c32:	9005      	str	r0, [sp, #20]
   12c34:	9104      	str	r1, [sp, #16]
   12c36:	e7ff      	b.n	12c38 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x20>
   12c38:	9805      	ldr	r0, [sp, #20]
   12c3a:	9904      	ldr	r1, [sp, #16]
   12c3c:	f7fe fd11 	bl	11662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   12c40:	9003      	str	r0, [sp, #12]
   12c42:	e7ff      	b.n	12c44 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x2c>
   12c44:	9803      	ldr	r0, [sp, #12]
   12c46:	2800      	cmp	r0, #0
   12c48:	d00a      	beq.n	12c60 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x48>
   12c4a:	e7ff      	b.n	12c4c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x34>
    //  Append Data Bytes to Pending Data Bytes.
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   12c4c:	f646 2078 	movw	r0, #27256	; 0x6a78
   12c50:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12c54:	9907      	ldr	r1, [sp, #28]
   12c56:	9a06      	ldr	r2, [sp, #24]
   12c58:	f7ff f954 	bl	11f04 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E>
   12c5c:	9002      	str	r0, [sp, #8]
   12c5e:	e00b      	b.n	12c78 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x60>
    assert!(unsafe { PENDING_CMD.len() } > 0);  //  Must have Command Byte before Data Bytes
   12c60:	f64d 4058 	movw	r0, #56408	; 0xdc58
   12c64:	f2c0 0001 	movt	r0, #1
   12c68:	f64d 428c 	movw	r2, #56460	; 0xdc8c
   12c6c:	f2c0 0201 	movt	r2, #1
   12c70:	2132      	movs	r1, #50	; 0x32
   12c72:	f002 fa65 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12c76:	defe      	udf	#254	; 0xfe
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   12c78:	9802      	ldr	r0, [sp, #8]
   12c7a:	f000 0001 	and.w	r0, r0, #1
   12c7e:	f7f6 f858 	bl	8d32 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   12c82:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   12c86:	e7ff      	b.n	12c88 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x70>
   12c88:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   12c8c:	07c1      	lsls	r1, r0, #31
   12c8e:	2900      	cmp	r1, #0
   12c90:	d001      	beq.n	12c96 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x7e>
   12c92:	e7ff      	b.n	12c94 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x7c>
   12c94:	e005      	b.n	12ca2 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x8a>
   12c96:	2000      	movs	r0, #0
    Ok(())
   12c98:	9008      	str	r0, [sp, #32]
   12c9a:	2001      	movs	r0, #1
   12c9c:	9008      	str	r0, [sp, #32]
}
   12c9e:	e004      	b.n	12caa <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x92>
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   12ca0:	defe      	udf	#254	; 0xfe
   12ca2:	f7f5 ffd3 	bl	8c4c <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   12ca6:	9001      	str	r0, [sp, #4]
   12ca8:	e002      	b.n	12cb0 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x98>
}
   12caa:	9808      	ldr	r0, [sp, #32]
   12cac:	b00e      	add	sp, #56	; 0x38
   12cae:	bd80      	pop	{r7, pc}
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   12cb0:	9801      	ldr	r0, [sp, #4]
   12cb2:	f7f6 f838 	bl	8d26 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   12cb6:	9008      	str	r0, [sp, #32]
   12cb8:	e7ff      	b.n	12cba <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa2>
   12cba:	e7f6      	b.n	12caa <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x92>

00012cbc <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>:

/// Enqueue any pending request for non-blocking SPI write for Command Byte and Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_flush() -> MynewtResult<()> {
   12cbc:	b580      	push	{r7, lr}
   12cbe:	b090      	sub	sp, #64	; 0x40
    //  If no pending request, quit.
    if unsafe { PENDING_CMD.len() } == 0 &&
   12cc0:	f646 2070 	movw	r0, #27248	; 0x6a70
   12cc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12cc8:	f7ff f910 	bl	11eec <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   12ccc:	900b      	str	r0, [sp, #44]	; 0x2c
   12cce:	910a      	str	r1, [sp, #40]	; 0x28
   12cd0:	e016      	b.n	12d00 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x44>
   12cd2:	2001      	movs	r0, #1
   12cd4:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   12cd8:	e00c      	b.n	12cf4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
   12cda:	2000      	movs	r0, #0
   12cdc:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   12ce0:	e008      	b.n	12cf4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
        unsafe { PENDING_DATA.len() } == 0 {
   12ce2:	f646 2078 	movw	r0, #27256	; 0x6a78
   12ce6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12cea:	f7ff f8f3 	bl	11ed4 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE>
   12cee:	9009      	str	r0, [sp, #36]	; 0x24
   12cf0:	9108      	str	r1, [sp, #32]
   12cf2:	e00f      	b.n	12d14 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x58>
    if unsafe { PENDING_CMD.len() } == 0 &&
   12cf4:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   12cf8:	07c0      	lsls	r0, r0, #31
   12cfa:	2800      	cmp	r0, #0
   12cfc:	d11d      	bne.n	12d3a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x7e>
   12cfe:	e013      	b.n	12d28 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x6c>
   12d00:	980b      	ldr	r0, [sp, #44]	; 0x2c
   12d02:	990a      	ldr	r1, [sp, #40]	; 0x28
   12d04:	f7fe fcad 	bl	11662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   12d08:	9007      	str	r0, [sp, #28]
   12d0a:	e7ff      	b.n	12d0c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x50>
   12d0c:	9807      	ldr	r0, [sp, #28]
   12d0e:	2800      	cmp	r0, #0
   12d10:	d0e7      	beq.n	12ce2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x26>
   12d12:	e7e2      	b.n	12cda <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        unsafe { PENDING_DATA.len() } == 0 {
   12d14:	9809      	ldr	r0, [sp, #36]	; 0x24
   12d16:	9908      	ldr	r1, [sp, #32]
   12d18:	f7fe fca3 	bl	11662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   12d1c:	9006      	str	r0, [sp, #24]
   12d1e:	e7ff      	b.n	12d20 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x64>
    if unsafe { PENDING_CMD.len() } == 0 &&
   12d20:	9806      	ldr	r0, [sp, #24]
   12d22:	2800      	cmp	r0, #0
   12d24:	d0d5      	beq.n	12cd2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x16>
   12d26:	e7d8      	b.n	12cda <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        return Ok(());
    }
    //  Enqueue the pending SPI request into the Mbuf Queue
    if let Err(e) = spi_noblock_write(
        unsafe { PENDING_CMD[0] },  //  Command Byte
   12d28:	f646 2070 	movw	r0, #27248	; 0x6a70
   12d2c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12d30:	f7ff f8dc 	bl	11eec <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   12d34:	9005      	str	r0, [sp, #20]
   12d36:	9104      	str	r1, [sp, #16]
   12d38:	e007      	b.n	12d4a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x8e>
   12d3a:	2000      	movs	r0, #0
        return Ok(());
   12d3c:	900c      	str	r0, [sp, #48]	; 0x30
   12d3e:	2001      	movs	r0, #1
   12d40:	900c      	str	r0, [sp, #48]	; 0x30
   12d42:	e7ff      	b.n	12d44 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    }
    //  Else clear the pending request and return Ok.
    unsafe { PENDING_CMD.clear() };
    unsafe { PENDING_DATA.clear() };
    Ok(())
}
   12d44:	980c      	ldr	r0, [sp, #48]	; 0x30
   12d46:	b010      	add	sp, #64	; 0x40
   12d48:	bd80      	pop	{r7, pc}
        unsafe { PENDING_CMD[0] },  //  Command Byte
   12d4a:	9804      	ldr	r0, [sp, #16]
   12d4c:	2800      	cmp	r0, #0
   12d4e:	d03f      	beq.n	12dd0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x114>
   12d50:	e7ff      	b.n	12d52 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x96>
   12d52:	9805      	ldr	r0, [sp, #20]
   12d54:	7801      	ldrb	r1, [r0, #0]
        unsafe { &PENDING_DATA }    //  Data Bytes
   12d56:	f646 2078 	movw	r0, #27256	; 0x6a78
   12d5a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12d5e:	9103      	str	r1, [sp, #12]
   12d60:	f7ff f8b8 	bl	11ed4 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE>
   12d64:	9002      	str	r0, [sp, #8]
   12d66:	9101      	str	r1, [sp, #4]
   12d68:	e7ff      	b.n	12d6a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xae>
    if let Err(e) = spi_noblock_write(
   12d6a:	9803      	ldr	r0, [sp, #12]
   12d6c:	9902      	ldr	r1, [sp, #8]
   12d6e:	9a01      	ldr	r2, [sp, #4]
   12d70:	f000 f837 	bl	12de2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>
   12d74:	900e      	str	r0, [sp, #56]	; 0x38
   12d76:	e7ff      	b.n	12d78 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xbc>
   12d78:	980e      	ldr	r0, [sp, #56]	; 0x38
   12d7a:	2801      	cmp	r0, #1
   12d7c:	d107      	bne.n	12d8e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xd2>
   12d7e:	e7ff      	b.n	12d80 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xc4>
    unsafe { PENDING_CMD.clear() };
   12d80:	f646 2070 	movw	r0, #27248	; 0x6a70
   12d84:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12d88:	f7ff f8e4 	bl	11f54 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   12d8c:	e014      	b.n	12db8 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xfc>
    if let Err(e) = spi_noblock_write(
   12d8e:	980e      	ldr	r0, [sp, #56]	; 0x38
   12d90:	900f      	str	r0, [sp, #60]	; 0x3c
        unsafe { PENDING_CMD.clear() };
   12d92:	f646 2170 	movw	r1, #27248	; 0x6a70
   12d96:	f2c2 0100 	movt	r1, #8192	; 0x2000
   12d9a:	9000      	str	r0, [sp, #0]
   12d9c:	4608      	mov	r0, r1
   12d9e:	f7ff f8d9 	bl	11f54 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   12da2:	e7ff      	b.n	12da4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xe8>
        unsafe { PENDING_DATA.clear() };    
   12da4:	f646 2078 	movw	r0, #27256	; 0x6a78
   12da8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12dac:	f7ff f8ca 	bl	11f44 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E>
   12db0:	e7ff      	b.n	12db2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xf6>
        return Err(e);
   12db2:	9800      	ldr	r0, [sp, #0]
   12db4:	900c      	str	r0, [sp, #48]	; 0x30
   12db6:	e7c5      	b.n	12d44 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    unsafe { PENDING_DATA.clear() };
   12db8:	f646 2078 	movw	r0, #27256	; 0x6a78
   12dbc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12dc0:	f7ff f8c0 	bl	11f44 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E>
   12dc4:	e7ff      	b.n	12dc6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x10a>
   12dc6:	2000      	movs	r0, #0
    Ok(())
   12dc8:	900c      	str	r0, [sp, #48]	; 0x30
   12dca:	2001      	movs	r0, #1
   12dcc:	900c      	str	r0, [sp, #48]	; 0x30
}
   12dce:	e7b9      	b.n	12d44 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
        unsafe { PENDING_CMD[0] },  //  Command Byte
   12dd0:	f64d 409c 	movw	r0, #56476	; 0xdc9c
   12dd4:	f2c0 0001 	movt	r0, #1
   12dd8:	2100      	movs	r1, #0
   12dda:	9a04      	ldr	r2, [sp, #16]
   12ddc:	f002 f9c6 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   12de0:	defe      	udf	#254	; 0xfe

00012de2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>:

/// Enqueue request for non-blocking SPI write. Returns without waiting for write to complete.
/// Request must have a Command Byte, followed by optional Data Bytes.
fn spi_noblock_write(cmd: u8, data: &[u8]) -> MynewtResult<()> {
   12de2:	b580      	push	{r7, lr}
   12de4:	b0a0      	sub	sp, #128	; 0x80
   12de6:	4603      	mov	r3, r0
   12de8:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   12dec:	9116      	str	r1, [sp, #88]	; 0x58
   12dee:	9217      	str	r2, [sp, #92]	; 0x5c
   12df0:	f247 5030 	movw	r0, #30000	; 0x7530
    console::print("spi data "); ////
    console::dump(data.as_ptr(), data.len() as u32); console::print("\n"); ////
    console::flush(); */

    //  Throttle the number of queued SPI requests.
    let timeout = 30_000;
   12df4:	9018      	str	r0, [sp, #96]	; 0x60
   12df6:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   12dfa:	fba0 0c0c 	umull	r0, ip, r0, ip
   12dfe:	f1bc 0f00 	cmp.w	ip, #0
   12e02:	920f      	str	r2, [sp, #60]	; 0x3c
   12e04:	910e      	str	r1, [sp, #56]	; 0x38
   12e06:	900d      	str	r0, [sp, #52]	; 0x34
   12e08:	f040 80c8 	bne.w	12f9c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ba>
   12e0c:	e7ff      	b.n	12e0e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x2c>
   12e0e:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   12e12:	f2c1 0062 	movt	r0, #4194	; 0x1062
   12e16:	990d      	ldr	r1, [sp, #52]	; 0x34
   12e18:	fba1 0200 	umull	r0, r2, r1, r0
   12e1c:	0991      	lsrs	r1, r2, #6
   12e1e:	f247 2284 	movw	r2, #29316	; 0x7284
   12e22:	f2c2 0200 	movt	r2, #8192	; 0x2000
   12e26:	900c      	str	r0, [sp, #48]	; 0x30
   12e28:	4610      	mov	r0, r2
   12e2a:	f006 f8ff 	bl	1902c <os_sem_pend>
   12e2e:	e7ff      	b.n	12e30 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x4e>

    //  Allocate a new mbuf chain to copy the data to be sent.
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   12e30:	980e      	ldr	r0, [sp, #56]	; 0x38
   12e32:	990f      	ldr	r1, [sp, #60]	; 0x3c
   12e34:	f7fe fc15 	bl	11662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   12e38:	900b      	str	r0, [sp, #44]	; 0x2c
   12e3a:	e7ff      	b.n	12e3c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x5a>
   12e3c:	2001      	movs	r0, #1
   12e3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12e40:	fa10 f081 	uxtah	r0, r0, r1
   12e44:	b282      	uxth	r2, r0
   12e46:	4603      	mov	r3, r0
   12e48:	4282      	cmp	r2, r0
   12e4a:	930a      	str	r3, [sp, #40]	; 0x28
   12e4c:	f040 80b2 	bne.w	12fb4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1d2>
   12e50:	e7ff      	b.n	12e52 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x70>
   12e52:	980a      	ldr	r0, [sp, #40]	; 0x28
   12e54:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    let mbuf = unsafe { os::os_msys_get_pkthdr(len, 0) };
   12e58:	b280      	uxth	r0, r0
   12e5a:	2100      	movs	r1, #0
   12e5c:	f005 fdf4 	bl	18a48 <os_msys_get_pkthdr>
   12e60:	4601      	mov	r1, r0
   12e62:	901a      	str	r0, [sp, #104]	; 0x68
   12e64:	9109      	str	r1, [sp, #36]	; 0x24
   12e66:	e7ff      	b.n	12e68 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x86>
    if mbuf.is_null() {  //  If out of memory, quit.
   12e68:	9809      	ldr	r0, [sp, #36]	; 0x24
   12e6a:	f000 ff17 	bl	13c9c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   12e6e:	9008      	str	r0, [sp, #32]
   12e70:	e7ff      	b.n	12e72 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x90>
   12e72:	9808      	ldr	r0, [sp, #32]
   12e74:	07c1      	lsls	r1, r0, #31
   12e76:	2900      	cmp	r1, #0
   12e78:	d106      	bne.n	12e88 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xa6>
   12e7a:	e7ff      	b.n	12e7c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x9a>
   12e7c:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    }

    //  Append the Command Byte to the mbuf chain.
    let rc = unsafe { os::os_mbuf_append(
        mbuf, 
        core::mem::transmute(&cmd), 
   12e80:	901b      	str	r0, [sp, #108]	; 0x6c
   12e82:	991b      	ldr	r1, [sp, #108]	; 0x6c
   12e84:	9107      	str	r1, [sp, #28]
   12e86:	e010      	b.n	12eaa <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc8>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   12e88:	f247 2084 	movw	r0, #29316	; 0x7284
   12e8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12e90:	f006 f89a 	bl	18fc8 <os_sem_release>
   12e94:	e7ff      	b.n	12e96 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xb4>
   12e96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   12e9a:	9012      	str	r0, [sp, #72]	; 0x48
   12e9c:	9812      	ldr	r0, [sp, #72]	; 0x48
   12e9e:	9011      	str	r0, [sp, #68]	; 0x44
   12ea0:	e002      	b.n	12ea8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
        return Err(MynewtError::SYS_EUNKNOWN); 
    }
    Ok(())
}
   12ea2:	9811      	ldr	r0, [sp, #68]	; 0x44
   12ea4:	b020      	add	sp, #128	; 0x80
   12ea6:	bd80      	pop	{r7, pc}
        return Err(MynewtError::SYS_ENOMEM); 
   12ea8:	e7fb      	b.n	12ea2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
   12eaa:	2201      	movs	r2, #1
    let rc = unsafe { os::os_mbuf_append(
   12eac:	9809      	ldr	r0, [sp, #36]	; 0x24
   12eae:	9907      	ldr	r1, [sp, #28]
   12eb0:	f005 fc22 	bl	186f8 <os_mbuf_append>
   12eb4:	4601      	mov	r1, r0
   12eb6:	901c      	str	r0, [sp, #112]	; 0x70
   12eb8:	9106      	str	r1, [sp, #24]
   12eba:	e7ff      	b.n	12ebc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xda>
    if rc != 0 {  //  If out of memory, quit.
   12ebc:	9806      	ldr	r0, [sp, #24]
   12ebe:	2800      	cmp	r0, #0
   12ec0:	d106      	bne.n	12ed0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xee>
   12ec2:	e7ff      	b.n	12ec4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xe2>
        core::mem::transmute(data.as_ptr()), 
   12ec4:	980e      	ldr	r0, [sp, #56]	; 0x38
   12ec6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   12ec8:	f7fe fbd3 	bl	11672 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   12ecc:	9005      	str	r0, [sp, #20]
   12ece:	e011      	b.n	12ef4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x112>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   12ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
   12ed2:	f005 fbf5 	bl	186c0 <os_mbuf_free_chain>
   12ed6:	e7ff      	b.n	12ed8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xf6>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   12ed8:	f247 2084 	movw	r0, #29316	; 0x7284
   12edc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12ee0:	f006 f872 	bl	18fc8 <os_sem_release>
   12ee4:	e7ff      	b.n	12ee6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x104>
   12ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   12eea:	9013      	str	r0, [sp, #76]	; 0x4c
   12eec:	9813      	ldr	r0, [sp, #76]	; 0x4c
   12eee:	9011      	str	r0, [sp, #68]	; 0x44
   12ef0:	e7ff      	b.n	12ef2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
   12ef2:	e7d9      	b.n	12ea8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        core::mem::transmute(data.as_ptr()), 
   12ef4:	9805      	ldr	r0, [sp, #20]
   12ef6:	901d      	str	r0, [sp, #116]	; 0x74
   12ef8:	991d      	ldr	r1, [sp, #116]	; 0x74
   12efa:	9104      	str	r1, [sp, #16]
   12efc:	e7ff      	b.n	12efe <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x11c>
        data.len() as u16
   12efe:	980e      	ldr	r0, [sp, #56]	; 0x38
   12f00:	990f      	ldr	r1, [sp, #60]	; 0x3c
   12f02:	f7fe fbae 	bl	11662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   12f06:	9003      	str	r0, [sp, #12]
   12f08:	e7ff      	b.n	12f0a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x128>
    let rc = unsafe { os::os_mbuf_append(
   12f0a:	9803      	ldr	r0, [sp, #12]
   12f0c:	b282      	uxth	r2, r0
   12f0e:	9809      	ldr	r0, [sp, #36]	; 0x24
   12f10:	9904      	ldr	r1, [sp, #16]
   12f12:	f005 fbf1 	bl	186f8 <os_mbuf_append>
   12f16:	4601      	mov	r1, r0
   12f18:	901e      	str	r0, [sp, #120]	; 0x78
   12f1a:	9102      	str	r1, [sp, #8]
   12f1c:	e7ff      	b.n	12f1e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x13c>
    if rc != 0 {  //  If out of memory, quit.
   12f1e:	9802      	ldr	r0, [sp, #8]
   12f20:	2800      	cmp	r0, #0
   12f22:	d10f      	bne.n	12f44 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x162>
   12f24:	e7ff      	b.n	12f26 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x144>
    let rc = unsafe { os::os_mqueue_put(
   12f26:	f247 208c 	movw	r0, #29324	; 0x728c
   12f2a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12f2e:	f247 21a4 	movw	r1, #29348	; 0x72a4
   12f32:	f2c2 0100 	movt	r1, #8192	; 0x2000
   12f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12f38:	f005 fb60 	bl	185fc <os_mqueue_put>
   12f3c:	4601      	mov	r1, r0
   12f3e:	901f      	str	r0, [sp, #124]	; 0x7c
   12f40:	9101      	str	r1, [sp, #4]
   12f42:	e011      	b.n	12f68 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x186>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   12f44:	9809      	ldr	r0, [sp, #36]	; 0x24
   12f46:	f005 fbbb 	bl	186c0 <os_mbuf_free_chain>
   12f4a:	e7ff      	b.n	12f4c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x16a>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   12f4c:	f247 2084 	movw	r0, #29316	; 0x7284
   12f50:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12f54:	f006 f838 	bl	18fc8 <os_sem_release>
   12f58:	e7ff      	b.n	12f5a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x178>
   12f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   12f5e:	9014      	str	r0, [sp, #80]	; 0x50
   12f60:	9814      	ldr	r0, [sp, #80]	; 0x50
   12f62:	9011      	str	r0, [sp, #68]	; 0x44
   12f64:	e7ff      	b.n	12f66 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
   12f66:	e7c4      	b.n	12ef2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
    if rc != 0 {  //  If out of memory, quit.
   12f68:	9801      	ldr	r0, [sp, #4]
   12f6a:	2800      	cmp	r0, #0
   12f6c:	d105      	bne.n	12f7a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x198>
   12f6e:	e7ff      	b.n	12f70 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x18e>
   12f70:	2000      	movs	r0, #0
    Ok(())
   12f72:	9011      	str	r0, [sp, #68]	; 0x44
   12f74:	2001      	movs	r0, #1
   12f76:	9011      	str	r0, [sp, #68]	; 0x44
}
   12f78:	e793      	b.n	12ea2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   12f7a:	9809      	ldr	r0, [sp, #36]	; 0x24
   12f7c:	f005 fba0 	bl	186c0 <os_mbuf_free_chain>
   12f80:	e7ff      	b.n	12f82 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1a0>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   12f82:	f247 2084 	movw	r0, #29316	; 0x7284
   12f86:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12f8a:	f006 f81d 	bl	18fc8 <os_sem_release>
   12f8e:	e7ff      	b.n	12f90 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ae>
   12f90:	f06f 000c 	mvn.w	r0, #12
        return Err(MynewtError::SYS_EUNKNOWN); 
   12f94:	9015      	str	r0, [sp, #84]	; 0x54
   12f96:	9815      	ldr	r0, [sp, #84]	; 0x54
   12f98:	9011      	str	r0, [sp, #68]	; 0x44
   12f9a:	e7e4      	b.n	12f66 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   12f9c:	f64d 40c0 	movw	r0, #56512	; 0xdcc0
   12fa0:	f2c0 0001 	movt	r0, #1
   12fa4:	f64d 42ac 	movw	r2, #56492	; 0xdcac
   12fa8:	f2c0 0201 	movt	r2, #1
   12fac:	2121      	movs	r1, #33	; 0x21
   12fae:	f002 f8c7 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12fb2:	defe      	udf	#254	; 0xfe
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   12fb4:	f64d 5000 	movw	r0, #56576	; 0xdd00
   12fb8:	f2c0 0001 	movt	r0, #1
   12fbc:	f64d 42e4 	movw	r2, #56548	; 0xdce4
   12fc0:	f2c0 0201 	movt	r2, #1
   12fc4:	211c      	movs	r1, #28
   12fc6:	f002 f8bb 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12fca:	defe      	udf	#254	; 0xfe

00012fcc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E>:

/// Callback for the event that is triggered when an SPI request is added to the queue.
extern "C" fn spi_event_callback(_event: *mut os::os_event) {    
   12fcc:	b5b0      	push	{r4, r5, r7, lr}
   12fce:	b0c4      	sub	sp, #272	; 0x110
   12fd0:	9038      	str	r0, [sp, #224]	; 0xe0
   12fd2:	e7ff      	b.n	12fd4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
    loop {  //  For each mbuf chain found...
        //  Get the next SPI request, stored as an mbuf chain.
        let om = unsafe { os::os_mqueue_get(&mut SPI_DATA_QUEUE) };
   12fd4:	f247 208c 	movw	r0, #29324	; 0x728c
   12fd8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12fdc:	f005 fafb 	bl	185d6 <os_mqueue_get>
   12fe0:	4601      	mov	r1, r0
   12fe2:	9039      	str	r0, [sp, #228]	; 0xe4
   12fe4:	911b      	str	r1, [sp, #108]	; 0x6c
   12fe6:	e7ff      	b.n	12fe8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c>
        if om.is_null() { break; }
   12fe8:	981b      	ldr	r0, [sp, #108]	; 0x6c
   12fea:	f000 fe57 	bl	13c9c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   12fee:	901a      	str	r0, [sp, #104]	; 0x68
   12ff0:	e7ff      	b.n	12ff2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26>
   12ff2:	981a      	ldr	r0, [sp, #104]	; 0x68
   12ff4:	07c1      	lsls	r1, r0, #31
   12ff6:	2900      	cmp	r1, #0
   12ff8:	d106      	bne.n	13008 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x3c>
   12ffa:	e7ff      	b.n	12ffc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x30>

        //  Send the mbuf chain.
        let mut m = om;
   12ffc:	981b      	ldr	r0, [sp, #108]	; 0x6c
   12ffe:	901c      	str	r0, [sp, #112]	; 0x70
   13000:	2101      	movs	r1, #1
        let mut first_byte = true;
   13002:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
        while !m.is_null() {  //  For each mbuf in the chain...
   13006:	e001      	b.n	1300c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>

        //  Release the throttle semaphore to allow next request to be queued.
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
        assert_eq!(rc, 0, "sem fail");    
    }
}
   13008:	b044      	add	sp, #272	; 0x110
   1300a:	bdb0      	pop	{r4, r5, r7, pc}
        while !m.is_null() {  //  For each mbuf in the chain...
   1300c:	981c      	ldr	r0, [sp, #112]	; 0x70
   1300e:	f000 fe45 	bl	13c9c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   13012:	9019      	str	r0, [sp, #100]	; 0x64
   13014:	e7ff      	b.n	13016 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x4a>
   13016:	9819      	ldr	r0, [sp, #100]	; 0x64
   13018:	07c1      	lsls	r1, r0, #31
   1301a:	2900      	cmp	r1, #0
   1301c:	d004      	beq.n	13028 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x5c>
   1301e:	e7ff      	b.n	13020 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x54>
        unsafe { os::os_mbuf_free_chain(om) };
   13020:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13022:	f005 fb4d 	bl	186c0 <os_mbuf_free_chain>
   13026:	e0aa      	b.n	1317e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1b2>
            let data = unsafe { (*m).om_data };  //  Fetch the data
   13028:	981c      	ldr	r0, [sp, #112]	; 0x70
   1302a:	6800      	ldr	r0, [r0, #0]
   1302c:	903a      	str	r0, [sp, #232]	; 0xe8
            let len = unsafe { (*m).om_len };    //  Fetch the length
   1302e:	991c      	ldr	r1, [sp, #112]	; 0x70
   13030:	88c9      	ldrh	r1, [r1, #6]
   13032:	460a      	mov	r2, r1
   13034:	f8ad 10ee 	strh.w	r1, [sp, #238]	; 0xee
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13038:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
   1303c:	07c9      	lsls	r1, r1, #31
   1303e:	2900      	cmp	r1, #0
   13040:	9018      	str	r0, [sp, #96]	; 0x60
   13042:	9217      	str	r2, [sp, #92]	; 0x5c
   13044:	d105      	bne.n	13052 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x86>
   13046:	e7ff      	b.n	13048 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x7c>
                    unsafe { core::mem::transmute(data) }, 
   13048:	9818      	ldr	r0, [sp, #96]	; 0x60
   1304a:	903e      	str	r0, [sp, #248]	; 0xf8
   1304c:	983e      	ldr	r0, [sp, #248]	; 0xf8
   1304e:	9016      	str	r0, [sp, #88]	; 0x58
   13050:	e07b      	b.n	1314a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17e>
   13052:	2000      	movs	r0, #0
                first_byte = false;
   13054:	f88d 0075 	strb.w	r0, [sp, #117]	; 0x75
                    unsafe { core::mem::transmute(data) }, 
   13058:	9818      	ldr	r0, [sp, #96]	; 0x60
   1305a:	903c      	str	r0, [sp, #240]	; 0xf0
   1305c:	983c      	ldr	r0, [sp, #240]	; 0xf0
   1305e:	9015      	str	r0, [sp, #84]	; 0x54
   13060:	e7ff      	b.n	13062 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x96>
   13062:	2001      	movs	r0, #1
                internal_spi_noblock_write(
   13064:	9915      	ldr	r1, [sp, #84]	; 0x54
   13066:	9014      	str	r0, [sp, #80]	; 0x50
   13068:	4608      	mov	r0, r1
   1306a:	9914      	ldr	r1, [sp, #80]	; 0x50
   1306c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1306e:	f000 f921 	bl	132b4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   13072:	9013      	str	r0, [sp, #76]	; 0x4c
   13074:	e7ff      	b.n	13076 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xaa>
   13076:	f64d 511c 	movw	r1, #56604	; 0xdd1c
   1307a:	f2c0 0101 	movt	r1, #1
   1307e:	f64d 5328 	movw	r3, #56616	; 0xdd28
   13082:	f2c0 0301 	movt	r3, #1
   13086:	220c      	movs	r2, #12
   13088:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1308a:	f7f5 fe19 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1308e:	e7ff      	b.n	13090 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xc4>
                if  unsafe { *data } == 0x01 || //  SWRESET
   13090:	9818      	ldr	r0, [sp, #96]	; 0x60
   13092:	7801      	ldrb	r1, [r0, #0]
   13094:	2901      	cmp	r1, #1
   13096:	d013      	beq.n	130c0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   13098:	e01a      	b.n	130d0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x104>
   1309a:	2001      	movs	r0, #1
   1309c:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   130a0:	e008      	b.n	130b4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
   130a2:	2000      	movs	r0, #0
   130a4:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   130a8:	e004      	b.n	130b4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
                    unsafe { *data } == 0x29 {  //  DISPON
   130aa:	9818      	ldr	r0, [sp, #96]	; 0x60
   130ac:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   130ae:	2929      	cmp	r1, #41	; 0x29
   130b0:	d0f3      	beq.n	1309a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   130b2:	e7f6      	b.n	130a2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xd6>
   130b4:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
   130b8:	07c0      	lsls	r0, r0, #31
   130ba:	2800      	cmp	r0, #0
   130bc:	d113      	bne.n	130e6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x11a>
   130be:	e017      	b.n	130f0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   130c0:	2001      	movs	r0, #1
   130c2:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   130c6:	e008      	b.n	130da <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
   130c8:	2000      	movs	r0, #0
   130ca:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   130ce:	e004      	b.n	130da <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
                    unsafe { *data } == 0x11 || //  SLPOUT
   130d0:	9818      	ldr	r0, [sp, #96]	; 0x60
   130d2:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   130d4:	2911      	cmp	r1, #17
   130d6:	d0f3      	beq.n	130c0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   130d8:	e7f6      	b.n	130c8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xfc>
   130da:	f89d 0077 	ldrb.w	r0, [sp, #119]	; 0x77
   130de:	07c0      	lsls	r0, r0, #31
   130e0:	2800      	cmp	r0, #0
   130e2:	d1da      	bne.n	1309a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   130e4:	e7e1      	b.n	130aa <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xde>
   130e6:	20c8      	movs	r0, #200	; 0xc8
                    delay_ms(200);
   130e8:	f000 fb13 	bl	13712 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>
   130ec:	e7ff      	b.n	130ee <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x122>
                if  unsafe { *data } == 0x01 || //  SWRESET
   130ee:	e7ff      	b.n	130f0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   130f0:	2101      	movs	r1, #1
                    unsafe { core::mem::transmute(data.add(1)) }, 
   130f2:	9818      	ldr	r0, [sp, #96]	; 0x60
   130f4:	f7fe fa25 	bl	11542 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   130f8:	9012      	str	r0, [sp, #72]	; 0x48
   130fa:	e7ff      	b.n	130fc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x130>
   130fc:	9812      	ldr	r0, [sp, #72]	; 0x48
   130fe:	903d      	str	r0, [sp, #244]	; 0xf4
   13100:	983d      	ldr	r0, [sp, #244]	; 0xf4
   13102:	9011      	str	r0, [sp, #68]	; 0x44
   13104:	e7ff      	b.n	13106 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x13a>
   13106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   1310a:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1310c:	fa10 f081 	uxtah	r0, r0, r1
   13110:	b282      	uxth	r2, r0
   13112:	4603      	mov	r3, r0
   13114:	4282      	cmp	r2, r0
   13116:	9310      	str	r3, [sp, #64]	; 0x40
   13118:	f040 80c0 	bne.w	1329c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2d0>
   1311c:	e7ff      	b.n	1311e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x152>
   1311e:	9810      	ldr	r0, [sp, #64]	; 0x40
   13120:	b281      	uxth	r1, r0
   13122:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   13124:	9811      	ldr	r0, [sp, #68]	; 0x44
   13126:	f000 f8c5 	bl	132b4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   1312a:	900f      	str	r0, [sp, #60]	; 0x3c
   1312c:	e7ff      	b.n	1312e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x162>
   1312e:	f64d 511c 	movw	r1, #56604	; 0xdd1c
   13132:	f2c0 0101 	movt	r1, #1
   13136:	f64d 5374 	movw	r3, #56692	; 0xdd74
   1313a:	f2c0 0301 	movt	r3, #1
   1313e:	220c      	movs	r2, #12
   13140:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13142:	f7f5 fdbd 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13146:	e7ff      	b.n	13148 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17c>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13148:	e015      	b.n	13176 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
                    len as i32,  //  Write all Data Bytes
   1314a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1314c:	b281      	uxth	r1, r0
   1314e:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   13150:	9816      	ldr	r0, [sp, #88]	; 0x58
   13152:	f000 f8af 	bl	132b4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   13156:	900e      	str	r0, [sp, #56]	; 0x38
   13158:	e7ff      	b.n	1315a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x18e>
   1315a:	f64d 511c 	movw	r1, #56604	; 0xdd1c
   1315e:	f2c0 0101 	movt	r1, #1
   13162:	f64d 5384 	movw	r3, #56708	; 0xdd84
   13166:	f2c0 0301 	movt	r3, #1
   1316a:	220c      	movs	r2, #12
   1316c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1316e:	f7f5 fda7 	bl	8cc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13172:	e7ff      	b.n	13174 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1a8>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13174:	e7ff      	b.n	13176 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
            m = unsafe { (*m).om_next.sle_next };  //  Fetch next mbuf in the chain.
   13176:	981c      	ldr	r0, [sp, #112]	; 0x70
   13178:	68c0      	ldr	r0, [r0, #12]
   1317a:	901c      	str	r0, [sp, #112]	; 0x70
        while !m.is_null() {  //  For each mbuf in the chain...
   1317c:	e746      	b.n	1300c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
   1317e:	f247 2084 	movw	r0, #29316	; 0x7284
   13182:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13186:	f005 ff1f 	bl	18fc8 <os_sem_release>
   1318a:	901e      	str	r0, [sp, #120]	; 0x78
   1318c:	e7ff      	b.n	1318e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c2>
        assert_eq!(rc, 0, "sem fail");    
   1318e:	f64d 2098 	movw	r0, #55960	; 0xda98
   13192:	f2c0 0001 	movt	r0, #1
   13196:	6800      	ldr	r0, [r0, #0]
   13198:	a91e      	add	r1, sp, #120	; 0x78
   1319a:	911f      	str	r1, [sp, #124]	; 0x7c
   1319c:	9020      	str	r0, [sp, #128]	; 0x80
   1319e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   131a0:	903f      	str	r0, [sp, #252]	; 0xfc
   131a2:	9920      	ldr	r1, [sp, #128]	; 0x80
   131a4:	9140      	str	r1, [sp, #256]	; 0x100
   131a6:	6802      	ldr	r2, [r0, #0]
   131a8:	680b      	ldr	r3, [r1, #0]
   131aa:	429a      	cmp	r2, r3
   131ac:	900d      	str	r0, [sp, #52]	; 0x34
   131ae:	910c      	str	r1, [sp, #48]	; 0x30
   131b0:	d101      	bne.n	131b6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1ea>
   131b2:	e7ff      	b.n	131b4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1e8>
    loop {  //  For each mbuf chain found...
   131b4:	e70e      	b.n	12fd4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
        assert_eq!(rc, 0, "sem fail");    
   131b6:	f64d 20f0 	movw	r0, #56048	; 0xdaf0
   131ba:	f2c0 0001 	movt	r0, #1
   131be:	6801      	ldr	r1, [r0, #0]
   131c0:	980d      	ldr	r0, [sp, #52]	; 0x34
   131c2:	9030      	str	r0, [sp, #192]	; 0xc0
   131c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   131c6:	9231      	str	r2, [sp, #196]	; 0xc4
   131c8:	f64d 4308 	movw	r3, #56328	; 0xdc08
   131cc:	f2c0 0301 	movt	r3, #1
   131d0:	681b      	ldr	r3, [r3, #0]
   131d2:	f64d 3c10 	movw	ip, #56080	; 0xdb10
   131d6:	f2c0 0c01 	movt	ip, #1
   131da:	f8dc c000 	ldr.w	ip, [ip]
   131de:	46ee      	mov	lr, sp
   131e0:	2400      	movs	r4, #0
   131e2:	f8ce 4000 	str.w	r4, [lr]
   131e6:	a832      	add	r0, sp, #200	; 0xc8
   131e8:	2201      	movs	r2, #1
   131ea:	910b      	str	r1, [sp, #44]	; 0x2c
   131ec:	4619      	mov	r1, r3
   131ee:	4663      	mov	r3, ip
   131f0:	f7f5 fd37 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   131f4:	e7ff      	b.n	131f6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x22a>
   131f6:	a830      	add	r0, sp, #192	; 0xc0
   131f8:	902d      	str	r0, [sp, #180]	; 0xb4
   131fa:	a831      	add	r0, sp, #196	; 0xc4
   131fc:	902e      	str	r0, [sp, #184]	; 0xb8
   131fe:	a832      	add	r0, sp, #200	; 0xc8
   13200:	902f      	str	r0, [sp, #188]	; 0xbc
   13202:	982d      	ldr	r0, [sp, #180]	; 0xb4
   13204:	9041      	str	r0, [sp, #260]	; 0x104
   13206:	992e      	ldr	r1, [sp, #184]	; 0xb8
   13208:	9142      	str	r1, [sp, #264]	; 0x108
   1320a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   1320c:	9243      	str	r2, [sp, #268]	; 0x10c
   1320e:	f249 5305 	movw	r3, #38149	; 0x9505
   13212:	f2c0 0300 	movt	r3, #0
   13216:	910a      	str	r1, [sp, #40]	; 0x28
   13218:	4619      	mov	r1, r3
   1321a:	9209      	str	r2, [sp, #36]	; 0x24
   1321c:	f7f6 f9aa 	bl	9574 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13220:	9008      	str	r0, [sp, #32]
   13222:	9107      	str	r1, [sp, #28]
   13224:	e7ff      	b.n	13226 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x25a>
   13226:	f249 5105 	movw	r1, #38149	; 0x9505
   1322a:	f2c0 0100 	movt	r1, #0
   1322e:	980a      	ldr	r0, [sp, #40]	; 0x28
   13230:	f7f6 f9a0 	bl	9574 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13234:	9006      	str	r0, [sp, #24]
   13236:	9105      	str	r1, [sp, #20]
   13238:	e7ff      	b.n	1323a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26e>
   1323a:	f245 710f 	movw	r1, #22287	; 0x570f
   1323e:	f2c0 0101 	movt	r1, #1
   13242:	9809      	ldr	r0, [sp, #36]	; 0x24
   13244:	f7f6 f9ab 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13248:	9004      	str	r0, [sp, #16]
   1324a:	9103      	str	r1, [sp, #12]
   1324c:	e7ff      	b.n	1324e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x282>
   1324e:	9808      	ldr	r0, [sp, #32]
   13250:	9027      	str	r0, [sp, #156]	; 0x9c
   13252:	9907      	ldr	r1, [sp, #28]
   13254:	9128      	str	r1, [sp, #160]	; 0xa0
   13256:	9a06      	ldr	r2, [sp, #24]
   13258:	9229      	str	r2, [sp, #164]	; 0xa4
   1325a:	9b05      	ldr	r3, [sp, #20]
   1325c:	932a      	str	r3, [sp, #168]	; 0xa8
   1325e:	f8dd c010 	ldr.w	ip, [sp, #16]
   13262:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
   13266:	f8dd e00c 	ldr.w	lr, [sp, #12]
   1326a:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
   1326e:	466c      	mov	r4, sp
   13270:	2503      	movs	r5, #3
   13272:	6025      	str	r5, [r4, #0]
   13274:	a821      	add	r0, sp, #132	; 0x84
   13276:	ab27      	add	r3, sp, #156	; 0x9c
   13278:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1327a:	462a      	mov	r2, r5
   1327c:	f7f5 fcf1 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13280:	e7ff      	b.n	13282 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2b6>
   13282:	f64d 5094 	movw	r0, #56724	; 0xdd94
   13286:	f2c0 0001 	movt	r0, #1
   1328a:	f001 ff52 	bl	15132 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1328e:	9002      	str	r0, [sp, #8]
   13290:	e7ff      	b.n	13292 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2c6>
   13292:	a821      	add	r0, sp, #132	; 0x84
   13294:	9902      	ldr	r1, [sp, #8]
   13296:	f001 ff89 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1329a:	defe      	udf	#254	; 0xfe
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   1329c:	f64d 5050 	movw	r0, #56656	; 0xdd50
   132a0:	f2c0 0001 	movt	r0, #1
   132a4:	f64d 5238 	movw	r2, #56632	; 0xdd38
   132a8:	f2c0 0201 	movt	r2, #1
   132ac:	2121      	movs	r1, #33	; 0x21
   132ae:	f001 ff47 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   132b2:	defe      	udf	#254	; 0xfe

000132b4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>:

/// Perform non-blocking SPI write in Mynewt OS.  Blocks until SPI write completes.
fn internal_spi_noblock_write(buf: &'static u8, len: i32, is_command: bool) -> MynewtResult<()> {
   132b4:	b5b0      	push	{r4, r5, r7, lr}
   132b6:	b0e8      	sub	sp, #416	; 0x1a0
   132b8:	4613      	mov	r3, r2
   132ba:	9058      	str	r0, [sp, #352]	; 0x160
   132bc:	9159      	str	r1, [sp, #356]	; 0x164
   132be:	f88d 216b 	strb.w	r2, [sp, #363]	; 0x16b
    if len == 0 { return Ok(()); }
   132c2:	2900      	cmp	r1, #0
   132c4:	9121      	str	r1, [sp, #132]	; 0x84
   132c6:	9020      	str	r0, [sp, #128]	; 0x80
   132c8:	931f      	str	r3, [sp, #124]	; 0x7c
   132ca:	d004      	beq.n	132d6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x22>
   132cc:	e7ff      	b.n	132ce <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a>
    assert!(len > 0, "bad spi len");
   132ce:	9821      	ldr	r0, [sp, #132]	; 0x84
   132d0:	2801      	cmp	r0, #1
   132d2:	db0d      	blt.n	132f0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x3c>
   132d4:	e007      	b.n	132e6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x32>
   132d6:	2000      	movs	r0, #0
    if len == 0 { return Ok(()); }
   132d8:	9022      	str	r0, [sp, #136]	; 0x88
   132da:	2001      	movs	r0, #1
   132dc:	9022      	str	r0, [sp, #136]	; 0x88
   132de:	e7ff      	b.n	132e0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
    }

    //  Set SS Pin to high to stop the transfer.
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
    Ok(())
}
   132e0:	9822      	ldr	r0, [sp, #136]	; 0x88
   132e2:	b068      	add	sp, #416	; 0x1a0
   132e4:	bdb0      	pop	{r4, r5, r7, pc}
        if is_command { 0 }
   132e6:	981f      	ldr	r0, [sp, #124]	; 0x7c
   132e8:	07c1      	lsls	r1, r0, #31
   132ea:	2900      	cmp	r1, #0
   132ec:	d10f      	bne.n	1330e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x5a>
   132ee:	e00b      	b.n	13308 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x54>
    assert!(len > 0, "bad spi len");
   132f0:	f64d 50a4 	movw	r0, #56740	; 0xdda4
   132f4:	f2c0 0001 	movt	r0, #1
   132f8:	f64d 52b0 	movw	r2, #56752	; 0xddb0
   132fc:	f2c0 0201 	movt	r2, #1
   13300:	210b      	movs	r1, #11
   13302:	f001 ff1d 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13306:	defe      	udf	#254	; 0xfe
   13308:	2001      	movs	r0, #1
        else { 1 }
   1330a:	9023      	str	r0, [sp, #140]	; 0x8c
        if is_command { 0 }
   1330c:	e002      	b.n	13314 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
   1330e:	2000      	movs	r0, #0
   13310:	9023      	str	r0, [sp, #140]	; 0x8c
   13312:	e7ff      	b.n	13314 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
    unsafe { hal::hal_gpio_write(
   13314:	9923      	ldr	r1, [sp, #140]	; 0x8c
   13316:	2012      	movs	r0, #18
   13318:	f003 ffb8 	bl	1728c <hal_gpio_write>
   1331c:	e7ff      	b.n	1331e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x6a>
   1331e:	2019      	movs	r0, #25
   13320:	2100      	movs	r1, #0
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 0) };
   13322:	f003 ffb3 	bl	1728c <hal_gpio_write>
   13326:	e7ff      	b.n	13328 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x74>
    if len == 1 {  //  If writing only 1 byte...
   13328:	9821      	ldr	r0, [sp, #132]	; 0x84
   1332a:	2801      	cmp	r0, #1
   1332c:	d005      	beq.n	1333a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x86>
   1332e:	e7ff      	b.n	13330 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x7c>
            core::mem::transmute(buf), //  TX Buffer
   13330:	9820      	ldr	r0, [sp, #128]	; 0x80
   13332:	9061      	str	r0, [sp, #388]	; 0x184
   13334:	9961      	ldr	r1, [sp, #388]	; 0x184
   13336:	911e      	str	r1, [sp, #120]	; 0x78
   13338:	e094      	b.n	13464 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1b0>
            core::mem::transmute(buf), //  TX Buffer
   1333a:	9820      	ldr	r0, [sp, #128]	; 0x80
   1333c:	905b      	str	r0, [sp, #364]	; 0x16c
   1333e:	995b      	ldr	r1, [sp, #364]	; 0x16c
   13340:	911d      	str	r1, [sp, #116]	; 0x74
   13342:	e7ff      	b.n	13344 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x90>
   13344:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx(
   13346:	901c      	str	r0, [sp, #112]	; 0x70
   13348:	991d      	ldr	r1, [sp, #116]	; 0x74
   1334a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1334c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1334e:	f004 fc4b 	bl	17be8 <hal_spi_txrx>
   13352:	9024      	str	r0, [sp, #144]	; 0x90
   13354:	e7ff      	b.n	13356 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xa2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13356:	f64d 2098 	movw	r0, #55960	; 0xda98
   1335a:	f2c0 0001 	movt	r0, #1
   1335e:	6800      	ldr	r0, [r0, #0]
   13360:	a924      	add	r1, sp, #144	; 0x90
   13362:	9125      	str	r1, [sp, #148]	; 0x94
   13364:	9026      	str	r0, [sp, #152]	; 0x98
   13366:	9825      	ldr	r0, [sp, #148]	; 0x94
   13368:	905c      	str	r0, [sp, #368]	; 0x170
   1336a:	9926      	ldr	r1, [sp, #152]	; 0x98
   1336c:	915d      	str	r1, [sp, #372]	; 0x174
   1336e:	6802      	ldr	r2, [r0, #0]
   13370:	680b      	ldr	r3, [r1, #0]
   13372:	429a      	cmp	r2, r3
   13374:	901b      	str	r0, [sp, #108]	; 0x6c
   13376:	911a      	str	r1, [sp, #104]	; 0x68
   13378:	d101      	bne.n	1337e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xca>
   1337a:	e7ff      	b.n	1337c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xc8>
    if len == 1 {  //  If writing only 1 byte...
   1337c:	e11f      	b.n	135be <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   1337e:	f64d 20f0 	movw	r0, #56048	; 0xdaf0
   13382:	f2c0 0001 	movt	r0, #1
   13386:	6801      	ldr	r1, [r0, #0]
   13388:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1338a:	9036      	str	r0, [sp, #216]	; 0xd8
   1338c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1338e:	9237      	str	r2, [sp, #220]	; 0xdc
   13390:	f64d 53c8 	movw	r3, #56776	; 0xddc8
   13394:	f2c0 0301 	movt	r3, #1
   13398:	681b      	ldr	r3, [r3, #0]
   1339a:	f64d 3c10 	movw	ip, #56080	; 0xdb10
   1339e:	f2c0 0c01 	movt	ip, #1
   133a2:	f8dc c000 	ldr.w	ip, [ip]
   133a6:	46ee      	mov	lr, sp
   133a8:	2400      	movs	r4, #0
   133aa:	f8ce 4000 	str.w	r4, [lr]
   133ae:	a838      	add	r0, sp, #224	; 0xe0
   133b0:	2201      	movs	r2, #1
   133b2:	9119      	str	r1, [sp, #100]	; 0x64
   133b4:	4619      	mov	r1, r3
   133b6:	4663      	mov	r3, ip
   133b8:	f7f5 fc53 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   133bc:	e7ff      	b.n	133be <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x10a>
   133be:	a836      	add	r0, sp, #216	; 0xd8
   133c0:	9033      	str	r0, [sp, #204]	; 0xcc
   133c2:	a837      	add	r0, sp, #220	; 0xdc
   133c4:	9034      	str	r0, [sp, #208]	; 0xd0
   133c6:	a838      	add	r0, sp, #224	; 0xe0
   133c8:	9035      	str	r0, [sp, #212]	; 0xd4
   133ca:	9833      	ldr	r0, [sp, #204]	; 0xcc
   133cc:	905e      	str	r0, [sp, #376]	; 0x178
   133ce:	9934      	ldr	r1, [sp, #208]	; 0xd0
   133d0:	915f      	str	r1, [sp, #380]	; 0x17c
   133d2:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   133d4:	9260      	str	r2, [sp, #384]	; 0x180
   133d6:	f249 43b1 	movw	r3, #38065	; 0x94b1
   133da:	f2c0 0300 	movt	r3, #0
   133de:	9118      	str	r1, [sp, #96]	; 0x60
   133e0:	4619      	mov	r1, r3
   133e2:	9217      	str	r2, [sp, #92]	; 0x5c
   133e4:	f7f6 f89c 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   133e8:	9016      	str	r0, [sp, #88]	; 0x58
   133ea:	9115      	str	r1, [sp, #84]	; 0x54
   133ec:	e7ff      	b.n	133ee <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x13a>
   133ee:	f249 41b1 	movw	r1, #38065	; 0x94b1
   133f2:	f2c0 0100 	movt	r1, #0
   133f6:	9818      	ldr	r0, [sp, #96]	; 0x60
   133f8:	f7f6 f892 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   133fc:	9014      	str	r0, [sp, #80]	; 0x50
   133fe:	9113      	str	r1, [sp, #76]	; 0x4c
   13400:	e7ff      	b.n	13402 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x14e>
   13402:	f245 710f 	movw	r1, #22287	; 0x570f
   13406:	f2c0 0101 	movt	r1, #1
   1340a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1340c:	f7f6 f8c7 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13410:	9012      	str	r0, [sp, #72]	; 0x48
   13412:	9111      	str	r1, [sp, #68]	; 0x44
   13414:	e7ff      	b.n	13416 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x162>
   13416:	9816      	ldr	r0, [sp, #88]	; 0x58
   13418:	902d      	str	r0, [sp, #180]	; 0xb4
   1341a:	9915      	ldr	r1, [sp, #84]	; 0x54
   1341c:	912e      	str	r1, [sp, #184]	; 0xb8
   1341e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13420:	922f      	str	r2, [sp, #188]	; 0xbc
   13422:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13424:	9330      	str	r3, [sp, #192]	; 0xc0
   13426:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   1342a:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
   1342e:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
   13432:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
   13436:	466c      	mov	r4, sp
   13438:	2503      	movs	r5, #3
   1343a:	6025      	str	r5, [r4, #0]
   1343c:	a827      	add	r0, sp, #156	; 0x9c
   1343e:	ab2d      	add	r3, sp, #180	; 0xb4
   13440:	9919      	ldr	r1, [sp, #100]	; 0x64
   13442:	462a      	mov	r2, r5
   13444:	f7f5 fc0d 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13448:	e7ff      	b.n	1344a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x196>
   1344a:	f64d 50cc 	movw	r0, #56780	; 0xddcc
   1344e:	f2c0 0001 	movt	r0, #1
   13452:	f001 fe6e 	bl	15132 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13456:	9010      	str	r0, [sp, #64]	; 0x40
   13458:	e7ff      	b.n	1345a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a6>
   1345a:	a827      	add	r0, sp, #156	; 0x9c
   1345c:	9910      	ldr	r1, [sp, #64]	; 0x40
   1345e:	f001 fea5 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13462:	defe      	udf	#254	; 0xfe
   13464:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx_noblock(
   13466:	900f      	str	r0, [sp, #60]	; 0x3c
   13468:	991e      	ldr	r1, [sp, #120]	; 0x78
   1346a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1346c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1346e:	f004 fc11 	bl	17c94 <hal_spi_txrx_noblock>
   13472:	903e      	str	r0, [sp, #248]	; 0xf8
   13474:	e7ff      	b.n	13476 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1c2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13476:	f64d 2098 	movw	r0, #55960	; 0xda98
   1347a:	f2c0 0001 	movt	r0, #1
   1347e:	6800      	ldr	r0, [r0, #0]
   13480:	a93e      	add	r1, sp, #248	; 0xf8
   13482:	913f      	str	r1, [sp, #252]	; 0xfc
   13484:	9040      	str	r0, [sp, #256]	; 0x100
   13486:	983f      	ldr	r0, [sp, #252]	; 0xfc
   13488:	9062      	str	r0, [sp, #392]	; 0x188
   1348a:	9940      	ldr	r1, [sp, #256]	; 0x100
   1348c:	9163      	str	r1, [sp, #396]	; 0x18c
   1348e:	6802      	ldr	r2, [r0, #0]
   13490:	680b      	ldr	r3, [r1, #0]
   13492:	429a      	cmp	r2, r3
   13494:	900e      	str	r0, [sp, #56]	; 0x38
   13496:	910d      	str	r1, [sp, #52]	; 0x34
   13498:	d10c      	bne.n	134b4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x200>
   1349a:	e7ff      	b.n	1349c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1e8>
   1349c:	f247 5030 	movw	r0, #30000	; 0x7530
        let timeout = 30_000;
   134a0:	9067      	str	r0, [sp, #412]	; 0x19c
   134a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   134a6:	fba0 0101 	umull	r0, r1, r0, r1
   134aa:	2900      	cmp	r1, #0
   134ac:	900c      	str	r0, [sp, #48]	; 0x30
   134ae:	f040 8090 	bne.w	135d2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x31e>
   134b2:	e072      	b.n	1359a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2e6>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   134b4:	f64d 20f0 	movw	r0, #56048	; 0xdaf0
   134b8:	f2c0 0001 	movt	r0, #1
   134bc:	6801      	ldr	r1, [r0, #0]
   134be:	980e      	ldr	r0, [sp, #56]	; 0x38
   134c0:	9050      	str	r0, [sp, #320]	; 0x140
   134c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   134c4:	9251      	str	r2, [sp, #324]	; 0x144
   134c6:	f64d 53c8 	movw	r3, #56776	; 0xddc8
   134ca:	f2c0 0301 	movt	r3, #1
   134ce:	681b      	ldr	r3, [r3, #0]
   134d0:	f64d 3c10 	movw	ip, #56080	; 0xdb10
   134d4:	f2c0 0c01 	movt	ip, #1
   134d8:	f8dc c000 	ldr.w	ip, [ip]
   134dc:	46ee      	mov	lr, sp
   134de:	2400      	movs	r4, #0
   134e0:	f8ce 4000 	str.w	r4, [lr]
   134e4:	a852      	add	r0, sp, #328	; 0x148
   134e6:	2201      	movs	r2, #1
   134e8:	910b      	str	r1, [sp, #44]	; 0x2c
   134ea:	4619      	mov	r1, r3
   134ec:	4663      	mov	r3, ip
   134ee:	f7f5 fbb8 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   134f2:	e7ff      	b.n	134f4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x240>
   134f4:	a850      	add	r0, sp, #320	; 0x140
   134f6:	904d      	str	r0, [sp, #308]	; 0x134
   134f8:	a851      	add	r0, sp, #324	; 0x144
   134fa:	904e      	str	r0, [sp, #312]	; 0x138
   134fc:	a852      	add	r0, sp, #328	; 0x148
   134fe:	904f      	str	r0, [sp, #316]	; 0x13c
   13500:	984d      	ldr	r0, [sp, #308]	; 0x134
   13502:	9064      	str	r0, [sp, #400]	; 0x190
   13504:	994e      	ldr	r1, [sp, #312]	; 0x138
   13506:	9165      	str	r1, [sp, #404]	; 0x194
   13508:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
   1350a:	9266      	str	r2, [sp, #408]	; 0x198
   1350c:	f249 43b1 	movw	r3, #38065	; 0x94b1
   13510:	f2c0 0300 	movt	r3, #0
   13514:	910a      	str	r1, [sp, #40]	; 0x28
   13516:	4619      	mov	r1, r3
   13518:	9209      	str	r2, [sp, #36]	; 0x24
   1351a:	f7f6 f801 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1351e:	9008      	str	r0, [sp, #32]
   13520:	9107      	str	r1, [sp, #28]
   13522:	e7ff      	b.n	13524 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x270>
   13524:	f249 41b1 	movw	r1, #38065	; 0x94b1
   13528:	f2c0 0100 	movt	r1, #0
   1352c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1352e:	f7f5 fff7 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13532:	9006      	str	r0, [sp, #24]
   13534:	9105      	str	r1, [sp, #20]
   13536:	e7ff      	b.n	13538 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x284>
   13538:	f245 710f 	movw	r1, #22287	; 0x570f
   1353c:	f2c0 0101 	movt	r1, #1
   13540:	9809      	ldr	r0, [sp, #36]	; 0x24
   13542:	f7f6 f82c 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13546:	9004      	str	r0, [sp, #16]
   13548:	9103      	str	r1, [sp, #12]
   1354a:	e7ff      	b.n	1354c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x298>
   1354c:	9808      	ldr	r0, [sp, #32]
   1354e:	9047      	str	r0, [sp, #284]	; 0x11c
   13550:	9907      	ldr	r1, [sp, #28]
   13552:	9148      	str	r1, [sp, #288]	; 0x120
   13554:	9a06      	ldr	r2, [sp, #24]
   13556:	9249      	str	r2, [sp, #292]	; 0x124
   13558:	9b05      	ldr	r3, [sp, #20]
   1355a:	934a      	str	r3, [sp, #296]	; 0x128
   1355c:	f8dd c010 	ldr.w	ip, [sp, #16]
   13560:	f8cd c12c 	str.w	ip, [sp, #300]	; 0x12c
   13564:	f8dd e00c 	ldr.w	lr, [sp, #12]
   13568:	f8cd e130 	str.w	lr, [sp, #304]	; 0x130
   1356c:	466c      	mov	r4, sp
   1356e:	2503      	movs	r5, #3
   13570:	6025      	str	r5, [r4, #0]
   13572:	a841      	add	r0, sp, #260	; 0x104
   13574:	ab47      	add	r3, sp, #284	; 0x11c
   13576:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13578:	462a      	mov	r2, r5
   1357a:	f7f5 fb72 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1357e:	e7ff      	b.n	13580 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2cc>
   13580:	f64d 50dc 	movw	r0, #56796	; 0xdddc
   13584:	f2c0 0001 	movt	r0, #1
   13588:	f001 fdd3 	bl	15132 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1358c:	9002      	str	r0, [sp, #8]
   1358e:	e7ff      	b.n	13590 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2dc>
   13590:	a841      	add	r0, sp, #260	; 0x104
   13592:	9902      	ldr	r1, [sp, #8]
   13594:	f001 fe0a 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13598:	defe      	udf	#254	; 0xfe
   1359a:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   1359e:	f2c1 0062 	movt	r0, #4194	; 0x1062
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   135a2:	990c      	ldr	r1, [sp, #48]	; 0x30
   135a4:	fba1 0200 	umull	r0, r2, r1, r0
   135a8:	0991      	lsrs	r1, r2, #6
   135aa:	f247 227c 	movw	r2, #29308	; 0x727c
   135ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
   135b2:	9001      	str	r0, [sp, #4]
   135b4:	4610      	mov	r0, r2
   135b6:	f005 fd39 	bl	1902c <os_sem_pend>
   135ba:	e7ff      	b.n	135bc <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x308>
    if len == 1 {  //  If writing only 1 byte...
   135bc:	e7ff      	b.n	135be <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
   135be:	2019      	movs	r0, #25
   135c0:	2101      	movs	r1, #1
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
   135c2:	f003 fe63 	bl	1728c <hal_gpio_write>
   135c6:	e7ff      	b.n	135c8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x314>
   135c8:	2000      	movs	r0, #0
    Ok(())
   135ca:	9022      	str	r0, [sp, #136]	; 0x88
   135cc:	2001      	movs	r0, #1
   135ce:	9022      	str	r0, [sp, #136]	; 0x88
}
   135d0:	e686      	b.n	132e0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   135d2:	f64d 40c0 	movw	r0, #56512	; 0xdcc0
   135d6:	f2c0 0001 	movt	r0, #1
   135da:	f64d 52ec 	movw	r2, #56812	; 0xddec
   135de:	f2c0 0201 	movt	r2, #1
   135e2:	2121      	movs	r1, #33	; 0x21
   135e4:	f001 fdac 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   135e8:	defe      	udf	#254	; 0xfe

000135ea <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E>:

/// Called by interrupt handler after Non-blocking SPI transfer has completed
extern "C" fn spi_noblock_handler(_arg: Ptr, _len: i32) {
   135ea:	b5b0      	push	{r4, r5, r7, lr}
   135ec:	b0ae      	sub	sp, #184	; 0xb8
   135ee:	9027      	str	r0, [sp, #156]	; 0x9c
   135f0:	9128      	str	r1, [sp, #160]	; 0xa0
    //  Signal to internal_spi_noblock_write() that SPI request has been completed.
    let rc = unsafe { os::os_sem_release(&mut SPI_SEM) };
   135f2:	f247 207c 	movw	r0, #29308	; 0x727c
   135f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   135fa:	f005 fce5 	bl	18fc8 <os_sem_release>
   135fe:	900d      	str	r0, [sp, #52]	; 0x34
   13600:	e7ff      	b.n	13602 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x18>
    assert_eq!(rc, 0, "sem fail");
   13602:	f64d 2098 	movw	r0, #55960	; 0xda98
   13606:	f2c0 0001 	movt	r0, #1
   1360a:	6800      	ldr	r0, [r0, #0]
   1360c:	a90d      	add	r1, sp, #52	; 0x34
   1360e:	910e      	str	r1, [sp, #56]	; 0x38
   13610:	900f      	str	r0, [sp, #60]	; 0x3c
   13612:	980e      	ldr	r0, [sp, #56]	; 0x38
   13614:	9029      	str	r0, [sp, #164]	; 0xa4
   13616:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13618:	912a      	str	r1, [sp, #168]	; 0xa8
   1361a:	6802      	ldr	r2, [r0, #0]
   1361c:	680b      	ldr	r3, [r1, #0]
   1361e:	429a      	cmp	r2, r3
   13620:	900c      	str	r0, [sp, #48]	; 0x30
   13622:	910b      	str	r1, [sp, #44]	; 0x2c
   13624:	d102      	bne.n	1362c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x42>
   13626:	e7ff      	b.n	13628 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x3e>
}
   13628:	b02e      	add	sp, #184	; 0xb8
   1362a:	bdb0      	pop	{r4, r5, r7, pc}
    assert_eq!(rc, 0, "sem fail");
   1362c:	f64d 20f0 	movw	r0, #56048	; 0xdaf0
   13630:	f2c0 0001 	movt	r0, #1
   13634:	6801      	ldr	r1, [r0, #0]
   13636:	980c      	ldr	r0, [sp, #48]	; 0x30
   13638:	901f      	str	r0, [sp, #124]	; 0x7c
   1363a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1363c:	9220      	str	r2, [sp, #128]	; 0x80
   1363e:	f64d 4308 	movw	r3, #56328	; 0xdc08
   13642:	f2c0 0301 	movt	r3, #1
   13646:	681b      	ldr	r3, [r3, #0]
   13648:	f64d 3c10 	movw	ip, #56080	; 0xdb10
   1364c:	f2c0 0c01 	movt	ip, #1
   13650:	f8dc c000 	ldr.w	ip, [ip]
   13654:	46ee      	mov	lr, sp
   13656:	2400      	movs	r4, #0
   13658:	f8ce 4000 	str.w	r4, [lr]
   1365c:	a821      	add	r0, sp, #132	; 0x84
   1365e:	2201      	movs	r2, #1
   13660:	910a      	str	r1, [sp, #40]	; 0x28
   13662:	4619      	mov	r1, r3
   13664:	4663      	mov	r3, ip
   13666:	f7f5 fafc 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1366a:	e7ff      	b.n	1366c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x82>
   1366c:	a81f      	add	r0, sp, #124	; 0x7c
   1366e:	901c      	str	r0, [sp, #112]	; 0x70
   13670:	a820      	add	r0, sp, #128	; 0x80
   13672:	901d      	str	r0, [sp, #116]	; 0x74
   13674:	a821      	add	r0, sp, #132	; 0x84
   13676:	901e      	str	r0, [sp, #120]	; 0x78
   13678:	981c      	ldr	r0, [sp, #112]	; 0x70
   1367a:	902b      	str	r0, [sp, #172]	; 0xac
   1367c:	991d      	ldr	r1, [sp, #116]	; 0x74
   1367e:	912c      	str	r1, [sp, #176]	; 0xb0
   13680:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13682:	922d      	str	r2, [sp, #180]	; 0xb4
   13684:	f249 5305 	movw	r3, #38149	; 0x9505
   13688:	f2c0 0300 	movt	r3, #0
   1368c:	9109      	str	r1, [sp, #36]	; 0x24
   1368e:	4619      	mov	r1, r3
   13690:	9208      	str	r2, [sp, #32]
   13692:	f7f5 ff6f 	bl	9574 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13696:	9007      	str	r0, [sp, #28]
   13698:	9106      	str	r1, [sp, #24]
   1369a:	e7ff      	b.n	1369c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xb2>
   1369c:	f249 5105 	movw	r1, #38149	; 0x9505
   136a0:	f2c0 0100 	movt	r1, #0
   136a4:	9809      	ldr	r0, [sp, #36]	; 0x24
   136a6:	f7f5 ff65 	bl	9574 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   136aa:	9005      	str	r0, [sp, #20]
   136ac:	9104      	str	r1, [sp, #16]
   136ae:	e7ff      	b.n	136b0 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xc6>
   136b0:	f245 710f 	movw	r1, #22287	; 0x570f
   136b4:	f2c0 0101 	movt	r1, #1
   136b8:	9808      	ldr	r0, [sp, #32]
   136ba:	f7f5 ff70 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   136be:	9003      	str	r0, [sp, #12]
   136c0:	9102      	str	r1, [sp, #8]
   136c2:	e7ff      	b.n	136c4 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xda>
   136c4:	9807      	ldr	r0, [sp, #28]
   136c6:	9016      	str	r0, [sp, #88]	; 0x58
   136c8:	9906      	ldr	r1, [sp, #24]
   136ca:	9117      	str	r1, [sp, #92]	; 0x5c
   136cc:	9a05      	ldr	r2, [sp, #20]
   136ce:	9218      	str	r2, [sp, #96]	; 0x60
   136d0:	9b04      	ldr	r3, [sp, #16]
   136d2:	9319      	str	r3, [sp, #100]	; 0x64
   136d4:	f8dd c00c 	ldr.w	ip, [sp, #12]
   136d8:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
   136dc:	f8dd e008 	ldr.w	lr, [sp, #8]
   136e0:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
   136e4:	466c      	mov	r4, sp
   136e6:	2503      	movs	r5, #3
   136e8:	6025      	str	r5, [r4, #0]
   136ea:	a810      	add	r0, sp, #64	; 0x40
   136ec:	ab16      	add	r3, sp, #88	; 0x58
   136ee:	990a      	ldr	r1, [sp, #40]	; 0x28
   136f0:	462a      	mov	r2, r5
   136f2:	f7f5 fab6 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   136f6:	e7ff      	b.n	136f8 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x10e>
   136f8:	f64d 50fc 	movw	r0, #56828	; 0xddfc
   136fc:	f2c0 0001 	movt	r0, #1
   13700:	f001 fd17 	bl	15132 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13704:	9001      	str	r0, [sp, #4]
   13706:	e7ff      	b.n	13708 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x11e>
   13708:	a810      	add	r0, sp, #64	; 0x40
   1370a:	9901      	ldr	r1, [sp, #4]
   1370c:	f001 fd4e 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13710:	defe      	udf	#254	; 0xfe

00013712 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>:

/// Sleep for the specified number of milliseconds
fn delay_ms(ms: u8) {
   13712:	b580      	push	{r7, lr}
   13714:	b084      	sub	sp, #16
   13716:	4601      	mov	r1, r0
   13718:	f88d 000b 	strb.w	r0, [sp, #11]
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   1371c:	b2c0      	uxtb	r0, r0
   1371e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13722:	fba0 0202 	umull	r0, r2, r0, r2
   13726:	2a00      	cmp	r2, #0
   13728:	9001      	str	r0, [sp, #4]
   1372a:	d110      	bne.n	1374e <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x3c>
   1372c:	e7ff      	b.n	1372e <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x1c>
   1372e:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13732:	f2c1 0062 	movt	r0, #4194	; 0x1062
   13736:	9901      	ldr	r1, [sp, #4]
   13738:	fba1 0200 	umull	r0, r2, r1, r0
   1373c:	0992      	lsrs	r2, r2, #6
   1373e:	9203      	str	r2, [sp, #12]
    unsafe { os::os_time_delay(delay_ticks) };
   13740:	9000      	str	r0, [sp, #0]
   13742:	4610      	mov	r0, r2
   13744:	f005 fdc0 	bl	192c8 <os_time_delay>
   13748:	e7ff      	b.n	1374a <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x38>
}
   1374a:	b004      	add	sp, #16
   1374c:	bd80      	pop	{r7, pc}
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   1374e:	f64d 40c0 	movw	r0, #56512	; 0xdcc0
   13752:	f2c0 0001 	movt	r0, #1
   13756:	f64d 620c 	movw	r2, #56844	; 0xde0c
   1375a:	f2c0 0201 	movt	r2, #1
   1375e:	2121      	movs	r1, #33	; 0x21
   13760:	f001 fcee 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13764:	defe      	udf	#254	; 0xfe

00013766 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>:
};

/// Rust Embedded HAL interface for Mynewt SPI
impl SPI {
    /// Create a new SPI port
    pub fn new() -> Self {
   13766:	b082      	sub	sp, #8
   13768:	2000      	movs	r0, #0
        SPI {
   1376a:	9000      	str	r0, [sp, #0]
   1376c:	9001      	str	r0, [sp, #4]
            spi_num: 0,
            cs_pin:  0,
        }
    }
   1376e:	9800      	ldr	r0, [sp, #0]
   13770:	9901      	ldr	r1, [sp, #4]
   13772:	b002      	add	sp, #8
   13774:	4770      	bx	lr

00013776 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>:

    /// Initiaise the SPI port
    pub fn init(&mut self, spi_num: i32, cs_pin: i32, spi_settings: *mut hal::hal_spi_settings) 
   13776:	b5b0      	push	{r4, r5, r7, lr}
   13778:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
   1377c:	9077      	str	r0, [sp, #476]	; 0x1dc
   1377e:	9178      	str	r1, [sp, #480]	; 0x1e0
   13780:	9279      	str	r2, [sp, #484]	; 0x1e4
   13782:	937a      	str	r3, [sp, #488]	; 0x1e8
        -> MynewtResult<()> {
        let rc = unsafe { hal::hal_spi_config(spi_num, spi_settings) };
   13784:	9028      	str	r0, [sp, #160]	; 0xa0
   13786:	4608      	mov	r0, r1
   13788:	9127      	str	r1, [sp, #156]	; 0x9c
   1378a:	4619      	mov	r1, r3
   1378c:	9226      	str	r2, [sp, #152]	; 0x98
   1378e:	f004 f96f 	bl	17a70 <hal_spi_config>
   13792:	9029      	str	r0, [sp, #164]	; 0xa4
   13794:	e7ff      	b.n	13796 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x20>
        assert_eq!(rc, 0, "spi config fail");
   13796:	f64d 601c 	movw	r0, #56860	; 0xde1c
   1379a:	f2c0 0001 	movt	r0, #1
   1379e:	6800      	ldr	r0, [r0, #0]
   137a0:	a929      	add	r1, sp, #164	; 0xa4
   137a2:	912a      	str	r1, [sp, #168]	; 0xa8
   137a4:	902b      	str	r0, [sp, #172]	; 0xac
   137a6:	982a      	ldr	r0, [sp, #168]	; 0xa8
   137a8:	907b      	str	r0, [sp, #492]	; 0x1ec
   137aa:	992b      	ldr	r1, [sp, #172]	; 0xac
   137ac:	917c      	str	r1, [sp, #496]	; 0x1f0
   137ae:	6802      	ldr	r2, [r0, #0]
   137b0:	680b      	ldr	r3, [r1, #0]
   137b2:	429a      	cmp	r2, r3
   137b4:	9025      	str	r0, [sp, #148]	; 0x94
   137b6:	9124      	str	r1, [sp, #144]	; 0x90
   137b8:	d105      	bne.n	137c6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x50>
   137ba:	e7ff      	b.n	137bc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x46>

        let rc = unsafe { hal::hal_spi_enable(spi_num) };
   137bc:	9827      	ldr	r0, [sp, #156]	; 0x9c
   137be:	f004 f973 	bl	17aa8 <hal_spi_enable>
   137c2:	9043      	str	r0, [sp, #268]	; 0x10c
   137c4:	e072      	b.n	138ac <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x136>
        assert_eq!(rc, 0, "spi config fail");
   137c6:	f64d 6074 	movw	r0, #56948	; 0xde74
   137ca:	f2c0 0001 	movt	r0, #1
   137ce:	6801      	ldr	r1, [r0, #0]
   137d0:	9825      	ldr	r0, [sp, #148]	; 0x94
   137d2:	903b      	str	r0, [sp, #236]	; 0xec
   137d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   137d6:	923c      	str	r2, [sp, #240]	; 0xf0
   137d8:	f64d 6390 	movw	r3, #56976	; 0xde90
   137dc:	f2c0 0301 	movt	r3, #1
   137e0:	681b      	ldr	r3, [r3, #0]
   137e2:	f64d 6c94 	movw	ip, #56980	; 0xde94
   137e6:	f2c0 0c01 	movt	ip, #1
   137ea:	f8dc c000 	ldr.w	ip, [ip]
   137ee:	46ee      	mov	lr, sp
   137f0:	2400      	movs	r4, #0
   137f2:	f8ce 4000 	str.w	r4, [lr]
   137f6:	a83d      	add	r0, sp, #244	; 0xf4
   137f8:	2201      	movs	r2, #1
   137fa:	9123      	str	r1, [sp, #140]	; 0x8c
   137fc:	4619      	mov	r1, r3
   137fe:	4663      	mov	r3, ip
   13800:	f7f5 fa2f 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13804:	e7ff      	b.n	13806 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x90>
   13806:	a83b      	add	r0, sp, #236	; 0xec
   13808:	9038      	str	r0, [sp, #224]	; 0xe0
   1380a:	a83c      	add	r0, sp, #240	; 0xf0
   1380c:	9039      	str	r0, [sp, #228]	; 0xe4
   1380e:	a83d      	add	r0, sp, #244	; 0xf4
   13810:	903a      	str	r0, [sp, #232]	; 0xe8
   13812:	9838      	ldr	r0, [sp, #224]	; 0xe0
   13814:	907d      	str	r0, [sp, #500]	; 0x1f4
   13816:	9939      	ldr	r1, [sp, #228]	; 0xe4
   13818:	917e      	str	r1, [sp, #504]	; 0x1f8
   1381a:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   1381c:	927f      	str	r2, [sp, #508]	; 0x1fc
   1381e:	f249 43b1 	movw	r3, #38065	; 0x94b1
   13822:	f2c0 0300 	movt	r3, #0
   13826:	9122      	str	r1, [sp, #136]	; 0x88
   13828:	4619      	mov	r1, r3
   1382a:	9221      	str	r2, [sp, #132]	; 0x84
   1382c:	f7f5 fe78 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13830:	9020      	str	r0, [sp, #128]	; 0x80
   13832:	911f      	str	r1, [sp, #124]	; 0x7c
   13834:	e7ff      	b.n	13836 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xc0>
   13836:	f249 41b1 	movw	r1, #38065	; 0x94b1
   1383a:	f2c0 0100 	movt	r1, #0
   1383e:	9822      	ldr	r0, [sp, #136]	; 0x88
   13840:	f7f5 fe6e 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13844:	901e      	str	r0, [sp, #120]	; 0x78
   13846:	911d      	str	r1, [sp, #116]	; 0x74
   13848:	e7ff      	b.n	1384a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xd4>
   1384a:	f245 710f 	movw	r1, #22287	; 0x570f
   1384e:	f2c0 0101 	movt	r1, #1
   13852:	9821      	ldr	r0, [sp, #132]	; 0x84
   13854:	f7f5 fea3 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13858:	901c      	str	r0, [sp, #112]	; 0x70
   1385a:	911b      	str	r1, [sp, #108]	; 0x6c
   1385c:	e7ff      	b.n	1385e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xe8>
   1385e:	9820      	ldr	r0, [sp, #128]	; 0x80
   13860:	9032      	str	r0, [sp, #200]	; 0xc8
   13862:	991f      	ldr	r1, [sp, #124]	; 0x7c
   13864:	9133      	str	r1, [sp, #204]	; 0xcc
   13866:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13868:	9234      	str	r2, [sp, #208]	; 0xd0
   1386a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1386c:	9335      	str	r3, [sp, #212]	; 0xd4
   1386e:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
   13872:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
   13876:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
   1387a:	f8cd e0dc 	str.w	lr, [sp, #220]	; 0xdc
   1387e:	466c      	mov	r4, sp
   13880:	2503      	movs	r5, #3
   13882:	6025      	str	r5, [r4, #0]
   13884:	a82c      	add	r0, sp, #176	; 0xb0
   13886:	ab32      	add	r3, sp, #200	; 0xc8
   13888:	9923      	ldr	r1, [sp, #140]	; 0x8c
   1388a:	462a      	mov	r2, r5
   1388c:	f7f5 f9e9 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13890:	e7ff      	b.n	13892 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x11c>
   13892:	f64d 60b0 	movw	r0, #57008	; 0xdeb0
   13896:	f2c0 0001 	movt	r0, #1
   1389a:	f001 fc4a 	bl	15132 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1389e:	901a      	str	r0, [sp, #104]	; 0x68
   138a0:	e7ff      	b.n	138a2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x12c>
   138a2:	a82c      	add	r0, sp, #176	; 0xb0
   138a4:	991a      	ldr	r1, [sp, #104]	; 0x68
   138a6:	f001 fc81 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   138aa:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi enable fail");
   138ac:	f64d 601c 	movw	r0, #56860	; 0xde1c
   138b0:	f2c0 0001 	movt	r0, #1
   138b4:	6800      	ldr	r0, [r0, #0]
   138b6:	a943      	add	r1, sp, #268	; 0x10c
   138b8:	9144      	str	r1, [sp, #272]	; 0x110
   138ba:	9045      	str	r0, [sp, #276]	; 0x114
   138bc:	9844      	ldr	r0, [sp, #272]	; 0x110
   138be:	9080      	str	r0, [sp, #512]	; 0x200
   138c0:	9945      	ldr	r1, [sp, #276]	; 0x114
   138c2:	9181      	str	r1, [sp, #516]	; 0x204
   138c4:	6802      	ldr	r2, [r0, #0]
   138c6:	680b      	ldr	r3, [r1, #0]
   138c8:	429a      	cmp	r2, r3
   138ca:	9019      	str	r0, [sp, #100]	; 0x64
   138cc:	9118      	str	r1, [sp, #96]	; 0x60
   138ce:	d106      	bne.n	138de <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x168>
   138d0:	e7ff      	b.n	138d2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x15c>
   138d2:	2101      	movs	r1, #1

        let rc = unsafe { hal::hal_gpio_init_out(cs_pin, 1) };
   138d4:	9826      	ldr	r0, [sp, #152]	; 0x98
   138d6:	f003 fcbd 	bl	17254 <hal_gpio_init_out>
   138da:	905d      	str	r0, [sp, #372]	; 0x174
   138dc:	e072      	b.n	139c4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x24e>
        assert_eq!(rc, 0, "spi enable fail");
   138de:	f64d 6074 	movw	r0, #56948	; 0xde74
   138e2:	f2c0 0001 	movt	r0, #1
   138e6:	6801      	ldr	r1, [r0, #0]
   138e8:	9819      	ldr	r0, [sp, #100]	; 0x64
   138ea:	9055      	str	r0, [sp, #340]	; 0x154
   138ec:	9a18      	ldr	r2, [sp, #96]	; 0x60
   138ee:	9256      	str	r2, [sp, #344]	; 0x158
   138f0:	f64d 63d8 	movw	r3, #57048	; 0xded8
   138f4:	f2c0 0301 	movt	r3, #1
   138f8:	681b      	ldr	r3, [r3, #0]
   138fa:	f64d 6c94 	movw	ip, #56980	; 0xde94
   138fe:	f2c0 0c01 	movt	ip, #1
   13902:	f8dc c000 	ldr.w	ip, [ip]
   13906:	46ee      	mov	lr, sp
   13908:	2400      	movs	r4, #0
   1390a:	f8ce 4000 	str.w	r4, [lr]
   1390e:	a857      	add	r0, sp, #348	; 0x15c
   13910:	2201      	movs	r2, #1
   13912:	9117      	str	r1, [sp, #92]	; 0x5c
   13914:	4619      	mov	r1, r3
   13916:	4663      	mov	r3, ip
   13918:	f7f5 f9a3 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1391c:	e7ff      	b.n	1391e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1a8>
   1391e:	a855      	add	r0, sp, #340	; 0x154
   13920:	9052      	str	r0, [sp, #328]	; 0x148
   13922:	a856      	add	r0, sp, #344	; 0x158
   13924:	9053      	str	r0, [sp, #332]	; 0x14c
   13926:	a857      	add	r0, sp, #348	; 0x15c
   13928:	9054      	str	r0, [sp, #336]	; 0x150
   1392a:	9852      	ldr	r0, [sp, #328]	; 0x148
   1392c:	9082      	str	r0, [sp, #520]	; 0x208
   1392e:	9953      	ldr	r1, [sp, #332]	; 0x14c
   13930:	9183      	str	r1, [sp, #524]	; 0x20c
   13932:	9a54      	ldr	r2, [sp, #336]	; 0x150
   13934:	9284      	str	r2, [sp, #528]	; 0x210
   13936:	f249 43b1 	movw	r3, #38065	; 0x94b1
   1393a:	f2c0 0300 	movt	r3, #0
   1393e:	9116      	str	r1, [sp, #88]	; 0x58
   13940:	4619      	mov	r1, r3
   13942:	9215      	str	r2, [sp, #84]	; 0x54
   13944:	f7f5 fdec 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13948:	9014      	str	r0, [sp, #80]	; 0x50
   1394a:	9113      	str	r1, [sp, #76]	; 0x4c
   1394c:	e7ff      	b.n	1394e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1d8>
   1394e:	f249 41b1 	movw	r1, #38065	; 0x94b1
   13952:	f2c0 0100 	movt	r1, #0
   13956:	9816      	ldr	r0, [sp, #88]	; 0x58
   13958:	f7f5 fde2 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1395c:	9012      	str	r0, [sp, #72]	; 0x48
   1395e:	9111      	str	r1, [sp, #68]	; 0x44
   13960:	e7ff      	b.n	13962 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1ec>
   13962:	f245 710f 	movw	r1, #22287	; 0x570f
   13966:	f2c0 0101 	movt	r1, #1
   1396a:	9815      	ldr	r0, [sp, #84]	; 0x54
   1396c:	f7f5 fe17 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13970:	9010      	str	r0, [sp, #64]	; 0x40
   13972:	910f      	str	r1, [sp, #60]	; 0x3c
   13974:	e7ff      	b.n	13976 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x200>
   13976:	9814      	ldr	r0, [sp, #80]	; 0x50
   13978:	904c      	str	r0, [sp, #304]	; 0x130
   1397a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1397c:	914d      	str	r1, [sp, #308]	; 0x134
   1397e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13980:	924e      	str	r2, [sp, #312]	; 0x138
   13982:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13984:	934f      	str	r3, [sp, #316]	; 0x13c
   13986:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   1398a:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
   1398e:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   13992:	f8cd e144 	str.w	lr, [sp, #324]	; 0x144
   13996:	466c      	mov	r4, sp
   13998:	2503      	movs	r5, #3
   1399a:	6025      	str	r5, [r4, #0]
   1399c:	a846      	add	r0, sp, #280	; 0x118
   1399e:	ab4c      	add	r3, sp, #304	; 0x130
   139a0:	9917      	ldr	r1, [sp, #92]	; 0x5c
   139a2:	462a      	mov	r2, r5
   139a4:	f7f5 f95d 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   139a8:	e7ff      	b.n	139aa <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x234>
   139aa:	f64d 60dc 	movw	r0, #57052	; 0xdedc
   139ae:	f2c0 0001 	movt	r0, #1
   139b2:	f001 fbbe 	bl	15132 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   139b6:	900e      	str	r0, [sp, #56]	; 0x38
   139b8:	e7ff      	b.n	139ba <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x244>
   139ba:	a846      	add	r0, sp, #280	; 0x118
   139bc:	990e      	ldr	r1, [sp, #56]	; 0x38
   139be:	f001 fbf5 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   139c2:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi init fail");
   139c4:	f64d 601c 	movw	r0, #56860	; 0xde1c
   139c8:	f2c0 0001 	movt	r0, #1
   139cc:	6800      	ldr	r0, [r0, #0]
   139ce:	a95d      	add	r1, sp, #372	; 0x174
   139d0:	915e      	str	r1, [sp, #376]	; 0x178
   139d2:	905f      	str	r0, [sp, #380]	; 0x17c
   139d4:	985e      	ldr	r0, [sp, #376]	; 0x178
   139d6:	9085      	str	r0, [sp, #532]	; 0x214
   139d8:	995f      	ldr	r1, [sp, #380]	; 0x17c
   139da:	9186      	str	r1, [sp, #536]	; 0x218
   139dc:	6802      	ldr	r2, [r0, #0]
   139de:	680b      	ldr	r3, [r1, #0]
   139e0:	429a      	cmp	r2, r3
   139e2:	900d      	str	r0, [sp, #52]	; 0x34
   139e4:	910c      	str	r1, [sp, #48]	; 0x30
   139e6:	d109      	bne.n	139fc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x286>
   139e8:	e7ff      	b.n	139ea <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x274>
        self.spi_num = spi_num;
   139ea:	9827      	ldr	r0, [sp, #156]	; 0x9c
   139ec:	9928      	ldr	r1, [sp, #160]	; 0xa0
   139ee:	6008      	str	r0, [r1, #0]
        self.cs_pin  = cs_pin;
   139f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   139f2:	604a      	str	r2, [r1, #4]
   139f4:	2001      	movs	r0, #1
        Ok(())
    }
   139f6:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
   139fa:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "spi init fail");
   139fc:	f64d 6074 	movw	r0, #56948	; 0xde74
   13a00:	f2c0 0001 	movt	r0, #1
   13a04:	6801      	ldr	r1, [r0, #0]
   13a06:	980d      	ldr	r0, [sp, #52]	; 0x34
   13a08:	906f      	str	r0, [sp, #444]	; 0x1bc
   13a0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13a0c:	9270      	str	r2, [sp, #448]	; 0x1c0
   13a0e:	f64d 7304 	movw	r3, #57092	; 0xdf04
   13a12:	f2c0 0301 	movt	r3, #1
   13a16:	681b      	ldr	r3, [r3, #0]
   13a18:	f64d 6c94 	movw	ip, #56980	; 0xde94
   13a1c:	f2c0 0c01 	movt	ip, #1
   13a20:	f8dc c000 	ldr.w	ip, [ip]
   13a24:	46ee      	mov	lr, sp
   13a26:	2400      	movs	r4, #0
   13a28:	f8ce 4000 	str.w	r4, [lr]
   13a2c:	a871      	add	r0, sp, #452	; 0x1c4
   13a2e:	2201      	movs	r2, #1
   13a30:	910b      	str	r1, [sp, #44]	; 0x2c
   13a32:	4619      	mov	r1, r3
   13a34:	4663      	mov	r3, ip
   13a36:	f7f5 f914 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13a3a:	e7ff      	b.n	13a3c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2c6>
   13a3c:	a86f      	add	r0, sp, #444	; 0x1bc
   13a3e:	906c      	str	r0, [sp, #432]	; 0x1b0
   13a40:	a870      	add	r0, sp, #448	; 0x1c0
   13a42:	906d      	str	r0, [sp, #436]	; 0x1b4
   13a44:	a871      	add	r0, sp, #452	; 0x1c4
   13a46:	906e      	str	r0, [sp, #440]	; 0x1b8
   13a48:	986c      	ldr	r0, [sp, #432]	; 0x1b0
   13a4a:	9087      	str	r0, [sp, #540]	; 0x21c
   13a4c:	996d      	ldr	r1, [sp, #436]	; 0x1b4
   13a4e:	9188      	str	r1, [sp, #544]	; 0x220
   13a50:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
   13a52:	9289      	str	r2, [sp, #548]	; 0x224
   13a54:	f249 43b1 	movw	r3, #38065	; 0x94b1
   13a58:	f2c0 0300 	movt	r3, #0
   13a5c:	910a      	str	r1, [sp, #40]	; 0x28
   13a5e:	4619      	mov	r1, r3
   13a60:	9209      	str	r2, [sp, #36]	; 0x24
   13a62:	f7f5 fd5d 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13a66:	9008      	str	r0, [sp, #32]
   13a68:	9107      	str	r1, [sp, #28]
   13a6a:	e7ff      	b.n	13a6c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2f6>
   13a6c:	f249 41b1 	movw	r1, #38065	; 0x94b1
   13a70:	f2c0 0100 	movt	r1, #0
   13a74:	980a      	ldr	r0, [sp, #40]	; 0x28
   13a76:	f7f5 fd53 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13a7a:	9006      	str	r0, [sp, #24]
   13a7c:	9105      	str	r1, [sp, #20]
   13a7e:	e7ff      	b.n	13a80 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x30a>
   13a80:	f245 710f 	movw	r1, #22287	; 0x570f
   13a84:	f2c0 0101 	movt	r1, #1
   13a88:	9809      	ldr	r0, [sp, #36]	; 0x24
   13a8a:	f7f5 fd88 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13a8e:	9004      	str	r0, [sp, #16]
   13a90:	9103      	str	r1, [sp, #12]
   13a92:	e7ff      	b.n	13a94 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x31e>
   13a94:	9808      	ldr	r0, [sp, #32]
   13a96:	9066      	str	r0, [sp, #408]	; 0x198
   13a98:	9907      	ldr	r1, [sp, #28]
   13a9a:	9167      	str	r1, [sp, #412]	; 0x19c
   13a9c:	9a06      	ldr	r2, [sp, #24]
   13a9e:	9268      	str	r2, [sp, #416]	; 0x1a0
   13aa0:	9b05      	ldr	r3, [sp, #20]
   13aa2:	9369      	str	r3, [sp, #420]	; 0x1a4
   13aa4:	f8dd c010 	ldr.w	ip, [sp, #16]
   13aa8:	f8cd c1a8 	str.w	ip, [sp, #424]	; 0x1a8
   13aac:	f8dd e00c 	ldr.w	lr, [sp, #12]
   13ab0:	f8cd e1ac 	str.w	lr, [sp, #428]	; 0x1ac
   13ab4:	466c      	mov	r4, sp
   13ab6:	2503      	movs	r5, #3
   13ab8:	6025      	str	r5, [r4, #0]
   13aba:	a860      	add	r0, sp, #384	; 0x180
   13abc:	ab66      	add	r3, sp, #408	; 0x198
   13abe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13ac0:	462a      	mov	r2, r5
   13ac2:	f7f5 f8ce 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13ac6:	e7ff      	b.n	13ac8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x352>
   13ac8:	f64d 7008 	movw	r0, #57096	; 0xdf08
   13acc:	f2c0 0001 	movt	r0, #1
   13ad0:	f001 fb2f 	bl	15132 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13ad4:	9002      	str	r0, [sp, #8]
   13ad6:	e7ff      	b.n	13ad8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x362>
   13ad8:	a860      	add	r0, sp, #384	; 0x180
   13ada:	9902      	ldr	r1, [sp, #8]
   13adc:	f001 fb66 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13ae0:	defe      	udf	#254	; 0xfe

00013ae2 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl GPIO {
    /// Create a new output GPIO pin
    pub fn new() -> Self {
   13ae2:	2000      	movs	r0, #0
        GPIO {
            pin: 0,
        }
    }
   13ae4:	4770      	bx	lr

00013ae6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>:

    /// Initialise the output GPIO pin
    pub fn init(&mut self, pin: i32) -> MynewtResult<()> {
   13ae6:	b5b0      	push	{r4, r5, r7, lr}
   13ae8:	b0b0      	sub	sp, #192	; 0xc0
   13aea:	9029      	str	r0, [sp, #164]	; 0xa4
   13aec:	912a      	str	r1, [sp, #168]	; 0xa8
   13aee:	2200      	movs	r2, #0
        //  TODO: let dc = pins.d0.into_push_pull_output(&mut pins.port);
        //  TODO: let rst = pins.d1.into_push_pull_output(&mut pins.port);
        let rc = unsafe { hal::hal_gpio_init_out(pin, 0) };
   13af0:	900e      	str	r0, [sp, #56]	; 0x38
   13af2:	4608      	mov	r0, r1
   13af4:	910d      	str	r1, [sp, #52]	; 0x34
   13af6:	4611      	mov	r1, r2
   13af8:	f003 fbac 	bl	17254 <hal_gpio_init_out>
   13afc:	900f      	str	r0, [sp, #60]	; 0x3c
   13afe:	e7ff      	b.n	13b00 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x1a>
        assert_eq!(rc, 0, "gpio fail");
   13b00:	f64d 601c 	movw	r0, #56860	; 0xde1c
   13b04:	f2c0 0001 	movt	r0, #1
   13b08:	6800      	ldr	r0, [r0, #0]
   13b0a:	a90f      	add	r1, sp, #60	; 0x3c
   13b0c:	9110      	str	r1, [sp, #64]	; 0x40
   13b0e:	9011      	str	r0, [sp, #68]	; 0x44
   13b10:	9810      	ldr	r0, [sp, #64]	; 0x40
   13b12:	902b      	str	r0, [sp, #172]	; 0xac
   13b14:	9911      	ldr	r1, [sp, #68]	; 0x44
   13b16:	912c      	str	r1, [sp, #176]	; 0xb0
   13b18:	6802      	ldr	r2, [r0, #0]
   13b1a:	680b      	ldr	r3, [r1, #0]
   13b1c:	429a      	cmp	r2, r3
   13b1e:	900c      	str	r0, [sp, #48]	; 0x30
   13b20:	910b      	str	r1, [sp, #44]	; 0x2c
   13b22:	d106      	bne.n	13b32 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x4c>
   13b24:	e7ff      	b.n	13b26 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x40>
        self.pin = pin;
   13b26:	980d      	ldr	r0, [sp, #52]	; 0x34
   13b28:	990e      	ldr	r1, [sp, #56]	; 0x38
   13b2a:	6008      	str	r0, [r1, #0]
   13b2c:	2001      	movs	r0, #1
        Ok(())
    }
   13b2e:	b030      	add	sp, #192	; 0xc0
   13b30:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "gpio fail");
   13b32:	f64d 6074 	movw	r0, #56948	; 0xde74
   13b36:	f2c0 0001 	movt	r0, #1
   13b3a:	6801      	ldr	r1, [r0, #0]
   13b3c:	980c      	ldr	r0, [sp, #48]	; 0x30
   13b3e:	9021      	str	r0, [sp, #132]	; 0x84
   13b40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13b42:	9222      	str	r2, [sp, #136]	; 0x88
   13b44:	f64d 732c 	movw	r3, #57132	; 0xdf2c
   13b48:	f2c0 0301 	movt	r3, #1
   13b4c:	681b      	ldr	r3, [r3, #0]
   13b4e:	f64d 6c94 	movw	ip, #56980	; 0xde94
   13b52:	f2c0 0c01 	movt	ip, #1
   13b56:	f8dc c000 	ldr.w	ip, [ip]
   13b5a:	46ee      	mov	lr, sp
   13b5c:	2400      	movs	r4, #0
   13b5e:	f8ce 4000 	str.w	r4, [lr]
   13b62:	a823      	add	r0, sp, #140	; 0x8c
   13b64:	2201      	movs	r2, #1
   13b66:	910a      	str	r1, [sp, #40]	; 0x28
   13b68:	4619      	mov	r1, r3
   13b6a:	4663      	mov	r3, ip
   13b6c:	f7f5 f879 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13b70:	e7ff      	b.n	13b72 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x8c>
   13b72:	a821      	add	r0, sp, #132	; 0x84
   13b74:	901e      	str	r0, [sp, #120]	; 0x78
   13b76:	a822      	add	r0, sp, #136	; 0x88
   13b78:	901f      	str	r0, [sp, #124]	; 0x7c
   13b7a:	a823      	add	r0, sp, #140	; 0x8c
   13b7c:	9020      	str	r0, [sp, #128]	; 0x80
   13b7e:	981e      	ldr	r0, [sp, #120]	; 0x78
   13b80:	902d      	str	r0, [sp, #180]	; 0xb4
   13b82:	991f      	ldr	r1, [sp, #124]	; 0x7c
   13b84:	912e      	str	r1, [sp, #184]	; 0xb8
   13b86:	9a20      	ldr	r2, [sp, #128]	; 0x80
   13b88:	922f      	str	r2, [sp, #188]	; 0xbc
   13b8a:	f249 43b1 	movw	r3, #38065	; 0x94b1
   13b8e:	f2c0 0300 	movt	r3, #0
   13b92:	9109      	str	r1, [sp, #36]	; 0x24
   13b94:	4619      	mov	r1, r3
   13b96:	9208      	str	r2, [sp, #32]
   13b98:	f7f5 fcc2 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13b9c:	9007      	str	r0, [sp, #28]
   13b9e:	9106      	str	r1, [sp, #24]
   13ba0:	e7ff      	b.n	13ba2 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xbc>
   13ba2:	f249 41b1 	movw	r1, #38065	; 0x94b1
   13ba6:	f2c0 0100 	movt	r1, #0
   13baa:	9809      	ldr	r0, [sp, #36]	; 0x24
   13bac:	f7f5 fcb8 	bl	9520 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13bb0:	9005      	str	r0, [sp, #20]
   13bb2:	9104      	str	r1, [sp, #16]
   13bb4:	e7ff      	b.n	13bb6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xd0>
   13bb6:	f245 710f 	movw	r1, #22287	; 0x570f
   13bba:	f2c0 0101 	movt	r1, #1
   13bbe:	9808      	ldr	r0, [sp, #32]
   13bc0:	f7f5 fced 	bl	959e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13bc4:	9003      	str	r0, [sp, #12]
   13bc6:	9102      	str	r1, [sp, #8]
   13bc8:	e7ff      	b.n	13bca <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xe4>
   13bca:	9807      	ldr	r0, [sp, #28]
   13bcc:	9018      	str	r0, [sp, #96]	; 0x60
   13bce:	9906      	ldr	r1, [sp, #24]
   13bd0:	9119      	str	r1, [sp, #100]	; 0x64
   13bd2:	9a05      	ldr	r2, [sp, #20]
   13bd4:	921a      	str	r2, [sp, #104]	; 0x68
   13bd6:	9b04      	ldr	r3, [sp, #16]
   13bd8:	931b      	str	r3, [sp, #108]	; 0x6c
   13bda:	f8dd c00c 	ldr.w	ip, [sp, #12]
   13bde:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
   13be2:	f8dd e008 	ldr.w	lr, [sp, #8]
   13be6:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
   13bea:	466c      	mov	r4, sp
   13bec:	2503      	movs	r5, #3
   13bee:	6025      	str	r5, [r4, #0]
   13bf0:	a812      	add	r0, sp, #72	; 0x48
   13bf2:	ab18      	add	r3, sp, #96	; 0x60
   13bf4:	990a      	ldr	r1, [sp, #40]	; 0x28
   13bf6:	462a      	mov	r2, r5
   13bf8:	f7f5 f833 	bl	8c62 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13bfc:	e7ff      	b.n	13bfe <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x118>
   13bfe:	f64d 7030 	movw	r0, #57136	; 0xdf30
   13c02:	f2c0 0001 	movt	r0, #1
   13c06:	f001 fa94 	bl	15132 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13c0a:	9001      	str	r0, [sp, #4]
   13c0c:	e7ff      	b.n	13c0e <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x128>
   13c0e:	a812      	add	r0, sp, #72	; 0x48
   13c10:	9901      	ldr	r1, [sp, #4]
   13c12:	f001 facb 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13c16:	defe      	udf	#254	; 0xfe

00013c18 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl embedded_hal::digital::v2::OutputPin for GPIO {
    /// Set the GPIO pin to low
    fn set_low(&mut self) -> Result<(), Self::Error> {
   13c18:	b580      	push	{r7, lr}
   13c1a:	b082      	sub	sp, #8
   13c1c:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 0) };
   13c1e:	6800      	ldr	r0, [r0, #0]
   13c20:	2100      	movs	r1, #0
   13c22:	f003 fb33 	bl	1728c <hal_gpio_write>
   13c26:	e7ff      	b.n	13c28 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E+0x10>
   13c28:	2001      	movs	r0, #1
        Ok(())
    }
   13c2a:	b002      	add	sp, #8
   13c2c:	bd80      	pop	{r7, pc}

00013c2e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>:

    /// Set the GPIO pin to high
    fn set_high(&mut self) -> Result<(), Self::Error> {
   13c2e:	b580      	push	{r7, lr}
   13c30:	b082      	sub	sp, #8
   13c32:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 1) };
   13c34:	6800      	ldr	r0, [r0, #0]
   13c36:	2101      	movs	r1, #1
   13c38:	f003 fb28 	bl	1728c <hal_gpio_write>
   13c3c:	e7ff      	b.n	13c3e <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE+0x10>
   13c3e:	2001      	movs	r0, #1
        Ok(())
    }
   13c40:	b002      	add	sp, #8
   13c42:	bd80      	pop	{r7, pc}

00013c44 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>:
impl Delay {
    /// Create a new delay
    pub fn new() -> Self {
        Delay {
        }
    }
   13c44:	4770      	bx	lr

00013c46 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>:
}

/// Rust Embedded HAL interface for Mynewt Delay
impl embedded_hal::blocking::delay::DelayMs<u8> for Delay {
    /// Sleep for the specified number of milliseconds
    fn delay_ms(&mut self, ms: u8) {
   13c46:	b580      	push	{r7, lr}
   13c48:	b086      	sub	sp, #24
   13c4a:	460a      	mov	r2, r1
   13c4c:	9003      	str	r0, [sp, #12]
   13c4e:	f88d 1013 	strb.w	r1, [sp, #19]
        //  TODO: Get this constant from Mynewt
        const OS_TICKS_PER_SEC: u32 = 1000;
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   13c52:	b2c8      	uxtb	r0, r1
   13c54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   13c58:	fba0 0101 	umull	r0, r1, r0, r1
   13c5c:	2900      	cmp	r1, #0
   13c5e:	9002      	str	r0, [sp, #8]
   13c60:	d110      	bne.n	13c84 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3e>
   13c62:	e7ff      	b.n	13c64 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x1e>
   13c64:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13c68:	f2c1 0062 	movt	r0, #4194	; 0x1062
   13c6c:	9902      	ldr	r1, [sp, #8]
   13c6e:	fba1 0200 	umull	r0, r2, r1, r0
   13c72:	0992      	lsrs	r2, r2, #6
   13c74:	9205      	str	r2, [sp, #20]
        unsafe { os::os_time_delay(delay_ticks) };
   13c76:	9001      	str	r0, [sp, #4]
   13c78:	4610      	mov	r0, r2
   13c7a:	f005 fb25 	bl	192c8 <os_time_delay>
   13c7e:	e7ff      	b.n	13c80 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3a>
    }
   13c80:	b006      	add	sp, #24
   13c82:	bd80      	pop	{r7, pc}
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   13c84:	f64d 7050 	movw	r0, #57168	; 0xdf50
   13c88:	f2c0 0001 	movt	r0, #1
   13c8c:	f64d 7240 	movw	r2, #57152	; 0xdf40
   13c90:	f2c0 0201 	movt	r2, #1
   13c94:	2121      	movs	r1, #33	; 0x21
   13c96:	f001 fa53 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13c9a:	defe      	udf	#254	; 0xfe

00013c9c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>:
   13c9c:	b082      	sub	sp, #8
   13c9e:	9001      	str	r0, [sp, #4]
   13ca0:	9000      	str	r0, [sp, #0]
   13ca2:	e7ff      	b.n	13ca4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E+0x8>
   13ca4:	9800      	ldr	r0, [sp, #0]
   13ca6:	fab0 f180 	clz	r1, r0
   13caa:	0948      	lsrs	r0, r1, #5
   13cac:	b002      	add	sp, #8
   13cae:	4770      	bx	lr

00013cb0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>:
   13cb0:	b580      	push	{r7, lr}
   13cb2:	b084      	sub	sp, #16
   13cb4:	9002      	str	r0, [sp, #8]
   13cb6:	9103      	str	r1, [sp, #12]
   13cb8:	f000 f805 	bl	13cc6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   13cbc:	9001      	str	r0, [sp, #4]
   13cbe:	e7ff      	b.n	13cc0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE+0x10>
   13cc0:	9801      	ldr	r0, [sp, #4]
   13cc2:	b004      	add	sp, #16
   13cc4:	bd80      	pop	{r7, pc}

00013cc6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>:
   13cc6:	b084      	sub	sp, #16
   13cc8:	9001      	str	r0, [sp, #4]
   13cca:	9102      	str	r1, [sp, #8]
   13ccc:	4408      	add	r0, r1
   13cce:	9003      	str	r0, [sp, #12]
   13cd0:	9803      	ldr	r0, [sp, #12]
   13cd2:	9000      	str	r0, [sp, #0]
   13cd4:	e7ff      	b.n	13cd6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE+0x10>
   13cd6:	9800      	ldr	r0, [sp, #0]
   13cd8:	b004      	add	sp, #16
   13cda:	4770      	bx	lr

00013cdc <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>:
   13cdc:	b081      	sub	sp, #4
   13cde:	b001      	add	sp, #4
   13ce0:	4770      	bx	lr

00013ce2 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>:

macro_rules! impl_to_primitive_uint_to_uint {
    ($SrcT:ident : $( $(#[$cfg:meta])* fn $method:ident -> $DstT:ident ; )*) => {$(
        #[inline]
        $(#[$cfg])*
        fn $method(&self) -> Option<$DstT> {
   13ce2:	b08a      	sub	sp, #40	; 0x28
   13ce4:	9005      	str	r0, [sp, #20]
   13ce6:	2100      	movs	r1, #0
            let max = $DstT::MAX as $SrcT;
   13ce8:	9107      	str	r1, [sp, #28]
   13cea:	21ff      	movs	r1, #255	; 0xff
   13cec:	9106      	str	r1, [sp, #24]
   13cee:	2108      	movs	r1, #8
   13cf0:	9108      	str	r1, [sp, #32]
   13cf2:	9908      	ldr	r1, [sp, #32]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   13cf4:	9003      	str	r0, [sp, #12]
   13cf6:	9102      	str	r1, [sp, #8]
   13cf8:	e016      	b.n	13d28 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x46>
   13cfa:	2001      	movs	r0, #1
   13cfc:	f88d 0013 	strb.w	r0, [sp, #19]
   13d00:	e00c      	b.n	13d1c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   13d02:	2000      	movs	r0, #0
   13d04:	f88d 0013 	strb.w	r0, [sp, #19]
   13d08:	e008      	b.n	13d1c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   13d0a:	9803      	ldr	r0, [sp, #12]
   13d0c:	6801      	ldr	r1, [r0, #0]
   13d0e:	6842      	ldr	r2, [r0, #4]
   13d10:	f5b1 7180 	subs.w	r1, r1, #256	; 0x100
   13d14:	f172 0200 	sbcs.w	r2, r2, #0
   13d18:	d3ef      	bcc.n	13cfa <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   13d1a:	e7f2      	b.n	13d02 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x20>
   13d1c:	f89d 0013 	ldrb.w	r0, [sp, #19]
   13d20:	07c0      	lsls	r0, r0, #31
   13d22:	2800      	cmp	r0, #0
   13d24:	d10e      	bne.n	13d44 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x62>
   13d26:	e009      	b.n	13d3c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x5a>
   13d28:	2001      	movs	r0, #1
   13d2a:	9009      	str	r0, [sp, #36]	; 0x24
   13d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
   13d2e:	9001      	str	r0, [sp, #4]
   13d30:	e7ff      	b.n	13d32 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x50>
   13d32:	9802      	ldr	r0, [sp, #8]
   13d34:	9901      	ldr	r1, [sp, #4]
   13d36:	4288      	cmp	r0, r1
   13d38:	d9df      	bls.n	13cfa <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   13d3a:	e7e6      	b.n	13d0a <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x28>
   13d3c:	2000      	movs	r0, #0
                Some(*self as $DstT)
            } else {
                None
   13d3e:	f88d 0010 	strb.w	r0, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   13d42:	e007      	b.n	13d54 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
                Some(*self as $DstT)
   13d44:	9803      	ldr	r0, [sp, #12]
   13d46:	7801      	ldrb	r1, [r0, #0]
   13d48:	f88d 1011 	strb.w	r1, [sp, #17]
   13d4c:	2101      	movs	r1, #1
   13d4e:	f88d 1010 	strb.w	r1, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   13d52:	e7ff      	b.n	13d54 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
            }
        }
   13d54:	f89d 0010 	ldrb.w	r0, [sp, #16]
   13d58:	f89d 1011 	ldrb.w	r1, [sp, #17]
   13d5c:	b00a      	add	sp, #40	; 0x28
   13d5e:	4770      	bx	lr

00013d60 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>:
   13d60:	b084      	sub	sp, #16
   13d62:	9002      	str	r0, [sp, #8]
   13d64:	6801      	ldr	r1, [r0, #0]
   13d66:	2900      	cmp	r1, #0
   13d68:	9000      	str	r0, [sp, #0]
   13d6a:	d001      	beq.n	13d70 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x10>
   13d6c:	e7ff      	b.n	13d6e <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0xe>
   13d6e:	e003      	b.n	13d78 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x18>
   13d70:	2000      	movs	r0, #0
   13d72:	9001      	str	r0, [sp, #4]
   13d74:	e006      	b.n	13d84 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   13d76:	defe      	udf	#254	; 0xfe
   13d78:	9800      	ldr	r0, [sp, #0]
   13d7a:	f100 0108 	add.w	r1, r0, #8
   13d7e:	9103      	str	r1, [sp, #12]
   13d80:	9101      	str	r1, [sp, #4]
   13d82:	e7ff      	b.n	13d84 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   13d84:	9801      	ldr	r0, [sp, #4]
   13d86:	b004      	add	sp, #16
   13d88:	4770      	bx	lr

00013d8a <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>:
   13d8a:	b084      	sub	sp, #16
   13d8c:	460b      	mov	r3, r1
   13d8e:	4684      	mov	ip, r0
   13d90:	f88d 000c 	strb.w	r0, [sp, #12]
   13d94:	f88d 100d 	strb.w	r1, [sp, #13]
   13d98:	f89d 000c 	ldrb.w	r0, [sp, #12]
   13d9c:	07c1      	lsls	r1, r0, #31
   13d9e:	2900      	cmp	r1, #0
   13da0:	9202      	str	r2, [sp, #8]
   13da2:	d001      	beq.n	13da8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1e>
   13da4:	e7ff      	b.n	13da6 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1c>
   13da6:	e009      	b.n	13dbc <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x32>
   13da8:	f64d 7071 	movw	r0, #57201	; 0xdf71
   13dac:	f2c0 0001 	movt	r0, #1
   13db0:	212b      	movs	r1, #43	; 0x2b
   13db2:	9a02      	ldr	r2, [sp, #8]
   13db4:	f001 f9c4 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13db8:	defe      	udf	#254	; 0xfe
   13dba:	defe      	udf	#254	; 0xfe
   13dbc:	f89d 000d 	ldrb.w	r0, [sp, #13]
   13dc0:	4601      	mov	r1, r0
   13dc2:	f88d 000f 	strb.w	r0, [sp, #15]
   13dc6:	f89d 000c 	ldrb.w	r0, [sp, #12]
   13dca:	07c0      	lsls	r0, r0, #31
   13dcc:	2800      	cmp	r0, #0
   13dce:	9101      	str	r1, [sp, #4]
   13dd0:	d003      	beq.n	13dda <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x50>
   13dd2:	e7ff      	b.n	13dd4 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>
   13dd4:	9801      	ldr	r0, [sp, #4]
   13dd6:	b004      	add	sp, #16
   13dd8:	4770      	bx	lr
   13dda:	e7fb      	b.n	13dd4 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>

00013ddc <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>:
   13ddc:	b088      	sub	sp, #32
   13dde:	9004      	str	r0, [sp, #16]
   13de0:	9105      	str	r1, [sp, #20]
   13de2:	9804      	ldr	r0, [sp, #16]
   13de4:	2800      	cmp	r0, #0
   13de6:	4601      	mov	r1, r0
   13de8:	bf18      	it	ne
   13dea:	2101      	movne	r1, #1
   13dec:	2800      	cmp	r0, #0
   13dee:	9203      	str	r2, [sp, #12]
   13df0:	d001      	beq.n	13df6 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x1a>
   13df2:	e7ff      	b.n	13df4 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x18>
   13df4:	e009      	b.n	13e0a <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x2e>
   13df6:	f64d 7071 	movw	r0, #57201	; 0xdf71
   13dfa:	f2c0 0001 	movt	r0, #1
   13dfe:	212b      	movs	r1, #43	; 0x2b
   13e00:	9a03      	ldr	r2, [sp, #12]
   13e02:	f001 f99d 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13e06:	defe      	udf	#254	; 0xfe
   13e08:	defe      	udf	#254	; 0xfe
   13e0a:	9804      	ldr	r0, [sp, #16]
   13e0c:	9905      	ldr	r1, [sp, #20]
   13e0e:	9006      	str	r0, [sp, #24]
   13e10:	9107      	str	r1, [sp, #28]
   13e12:	9a04      	ldr	r2, [sp, #16]
   13e14:	2a00      	cmp	r2, #0
   13e16:	9002      	str	r0, [sp, #8]
   13e18:	9101      	str	r1, [sp, #4]
   13e1a:	d004      	beq.n	13e26 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x4a>
   13e1c:	e7ff      	b.n	13e1e <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>
   13e1e:	9802      	ldr	r0, [sp, #8]
   13e20:	9901      	ldr	r1, [sp, #4]
   13e22:	b008      	add	sp, #32
   13e24:	4770      	bx	lr
   13e26:	e7fa      	b.n	13e1e <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>

00013e28 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>:
   13e28:	b082      	sub	sp, #8
   13e2a:	9001      	str	r0, [sp, #4]
   13e2c:	6800      	ldr	r0, [r0, #0]
   13e2e:	2800      	cmp	r0, #0
   13e30:	d104      	bne.n	13e3c <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x14>
   13e32:	e7ff      	b.n	13e34 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0xc>
   13e34:	2000      	movs	r0, #0
   13e36:	f88d 0003 	strb.w	r0, [sp, #3]
   13e3a:	e003      	b.n	13e44 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   13e3c:	2001      	movs	r0, #1
   13e3e:	f88d 0003 	strb.w	r0, [sp, #3]
   13e42:	e7ff      	b.n	13e44 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   13e44:	f89d 0003 	ldrb.w	r0, [sp, #3]
   13e48:	b002      	add	sp, #8
   13e4a:	4770      	bx	lr

00013e4c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>:
   13e4c:	b580      	push	{r7, lr}
   13e4e:	b086      	sub	sp, #24
   13e50:	9000      	str	r0, [sp, #0]
   13e52:	2000      	movs	r0, #0
   13e54:	f88d 000f 	strb.w	r0, [sp, #15]
   13e58:	f88d 000e 	strb.w	r0, [sp, #14]
   13e5c:	2001      	movs	r0, #1
   13e5e:	f88d 000f 	strb.w	r0, [sp, #15]
   13e62:	f88d 000e 	strb.w	r0, [sp, #14]
   13e66:	9800      	ldr	r0, [sp, #0]
   13e68:	2800      	cmp	r0, #0
   13e6a:	4601      	mov	r1, r0
   13e6c:	bf18      	it	ne
   13e6e:	2101      	movne	r1, #1
   13e70:	2800      	cmp	r0, #0
   13e72:	d001      	beq.n	13e78 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2c>
   13e74:	e7ff      	b.n	13e76 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2a>
   13e76:	e004      	b.n	13e82 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x36>
   13e78:	2000      	movs	r0, #0
   13e7a:	f88d 0004 	strb.w	r0, [sp, #4]
   13e7e:	e019      	b.n	13eb4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   13e80:	defe      	udf	#254	; 0xfe
   13e82:	2000      	movs	r0, #0
   13e84:	f88d 000f 	strb.w	r0, [sp, #15]
   13e88:	9900      	ldr	r1, [sp, #0]
   13e8a:	9105      	str	r1, [sp, #20]
   13e8c:	f88d 000e 	strb.w	r0, [sp, #14]
   13e90:	9102      	str	r1, [sp, #8]
   13e92:	9802      	ldr	r0, [sp, #8]
   13e94:	f7f6 fc3b 	bl	a70e <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>
   13e98:	f88d 1005 	strb.w	r1, [sp, #5]
   13e9c:	f88d 0004 	strb.w	r0, [sp, #4]
   13ea0:	e7ff      	b.n	13ea2 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x56>
   13ea2:	e007      	b.n	13eb4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   13ea4:	9800      	ldr	r0, [sp, #0]
   13ea6:	2800      	cmp	r0, #0
   13ea8:	d110      	bne.n	13ecc <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x80>
   13eaa:	e019      	b.n	13ee0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x94>
   13eac:	2000      	movs	r0, #0
   13eae:	f88d 000e 	strb.w	r0, [sp, #14]
   13eb2:	e7f7      	b.n	13ea4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   13eb4:	f89d 000e 	ldrb.w	r0, [sp, #14]
   13eb8:	07c0      	lsls	r0, r0, #31
   13eba:	2800      	cmp	r0, #0
   13ebc:	d1f6      	bne.n	13eac <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x60>
   13ebe:	e7f1      	b.n	13ea4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   13ec0:	f89d 0004 	ldrb.w	r0, [sp, #4]
   13ec4:	f89d 1005 	ldrb.w	r1, [sp, #5]
   13ec8:	b006      	add	sp, #24
   13eca:	bd80      	pop	{r7, pc}
   13ecc:	f89d 000f 	ldrb.w	r0, [sp, #15]
   13ed0:	07c0      	lsls	r0, r0, #31
   13ed2:	2800      	cmp	r0, #0
   13ed4:	d0f4      	beq.n	13ec0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   13ed6:	e7ff      	b.n	13ed8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x8c>
   13ed8:	2000      	movs	r0, #0
   13eda:	f88d 000f 	strb.w	r0, [sp, #15]
   13ede:	e7ef      	b.n	13ec0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   13ee0:	e7ee      	b.n	13ec0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>

00013ee2 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE>:
   13ee2:	b580      	push	{r7, lr}
   13ee4:	b084      	sub	sp, #16
   13ee6:	9002      	str	r0, [sp, #8]
   13ee8:	9103      	str	r1, [sp, #12]
   13eea:	f64d 709c 	movw	r0, #57244	; 0xdf9c
   13eee:	f2c0 0001 	movt	r0, #1
   13ef2:	2202      	movs	r2, #2
   13ef4:	9001      	str	r0, [sp, #4]
   13ef6:	4608      	mov	r0, r1
   13ef8:	9901      	ldr	r1, [sp, #4]
   13efa:	f001 fe41 	bl	15b80 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
   13efe:	9000      	str	r0, [sp, #0]
   13f00:	e7ff      	b.n	13f02 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE+0x20>
   13f02:	9800      	ldr	r0, [sp, #0]
   13f04:	f000 0001 	and.w	r0, r0, #1
   13f08:	b004      	add	sp, #16
   13f0a:	bd80      	pop	{r7, pc}

00013f0c <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>:
   13f0c:	b580      	push	{r7, lr}
   13f0e:	b084      	sub	sp, #16
   13f10:	9001      	str	r0, [sp, #4]
   13f12:	9102      	str	r1, [sp, #8]
   13f14:	9203      	str	r2, [sp, #12]
   13f16:	0052      	lsls	r2, r2, #1
   13f18:	9000      	str	r0, [sp, #0]
   13f1a:	4608      	mov	r0, r1
   13f1c:	9900      	ldr	r1, [sp, #0]
   13f1e:	f007 fc1b 	bl	1b758 <__aeabi_memcpy>
   13f22:	e7ff      	b.n	13f24 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E+0x18>
   13f24:	b004      	add	sp, #16
   13f26:	bd80      	pop	{r7, pc}

00013f28 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>:
   13f28:	b580      	push	{r7, lr}
   13f2a:	b08a      	sub	sp, #40	; 0x28
   13f2c:	4684      	mov	ip, r0
   13f2e:	f88d 0017 	strb.w	r0, [sp, #23]
   13f32:	9107      	str	r1, [sp, #28]
   13f34:	9208      	str	r2, [sp, #32]
   13f36:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13f3a:	ea4f 7ec0 	mov.w	lr, r0, lsl #31
   13f3e:	f1be 0f00 	cmp.w	lr, #0
   13f42:	9304      	str	r3, [sp, #16]
   13f44:	9203      	str	r2, [sp, #12]
   13f46:	9102      	str	r1, [sp, #8]
   13f48:	d00e      	beq.n	13f68 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x40>
   13f4a:	e7ff      	b.n	13f4c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x24>
   13f4c:	4668      	mov	r0, sp
   13f4e:	9904      	ldr	r1, [sp, #16]
   13f50:	6001      	str	r1, [r0, #0]
   13f52:	f64d 73a0 	movw	r3, #57248	; 0xdfa0
   13f56:	f2c0 0301 	movt	r3, #1
   13f5a:	aa06      	add	r2, sp, #24
   13f5c:	9802      	ldr	r0, [sp, #8]
   13f5e:	9903      	ldr	r1, [sp, #12]
   13f60:	f001 f8c0 	bl	150e4 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   13f64:	defe      	udf	#254	; 0xfe
   13f66:	defe      	udf	#254	; 0xfe
   13f68:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13f6c:	07c0      	lsls	r0, r0, #31
   13f6e:	2800      	cmp	r0, #0
   13f70:	d102      	bne.n	13f78 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x50>
   13f72:	e7ff      	b.n	13f74 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>
   13f74:	b00a      	add	sp, #40	; 0x28
   13f76:	bd80      	pop	{r7, pc}
   13f78:	e7fc      	b.n	13f74 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>

00013f7a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>:
   13f7a:	b580      	push	{r7, lr}
   13f7c:	b088      	sub	sp, #32
   13f7e:	9001      	str	r0, [sp, #4]
   13f80:	2000      	movs	r0, #0
   13f82:	f88d 0013 	strb.w	r0, [sp, #19]
   13f86:	f88d 0011 	strb.w	r0, [sp, #17]
   13f8a:	f88d 0012 	strb.w	r0, [sp, #18]
   13f8e:	2001      	movs	r0, #1
   13f90:	f88d 0012 	strb.w	r0, [sp, #18]
   13f94:	f88d 0013 	strb.w	r0, [sp, #19]
   13f98:	f88d 0011 	strb.w	r0, [sp, #17]
   13f9c:	9801      	ldr	r0, [sp, #4]
   13f9e:	1e41      	subs	r1, r0, #1
   13fa0:	bf18      	it	ne
   13fa2:	2101      	movne	r1, #1
   13fa4:	2801      	cmp	r0, #1
   13fa6:	d00d      	beq.n	13fc4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x4a>
   13fa8:	e7ff      	b.n	13faa <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x30>
   13faa:	2000      	movs	r0, #0
   13fac:	f88d 0013 	strb.w	r0, [sp, #19]
   13fb0:	9901      	ldr	r1, [sp, #4]
   13fb2:	9107      	str	r1, [sp, #28]
   13fb4:	f88d 0011 	strb.w	r0, [sp, #17]
   13fb8:	9103      	str	r1, [sp, #12]
   13fba:	9803      	ldr	r0, [sp, #12]
   13fbc:	f7f5 fd67 	bl	9a8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>
   13fc0:	e006      	b.n	13fd0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x56>
   13fc2:	defe      	udf	#254	; 0xfe
   13fc4:	2000      	movs	r0, #0
   13fc6:	f88d 0012 	strb.w	r0, [sp, #18]
   13fca:	f88d 000b 	strb.w	r0, [sp, #11]
   13fce:	e003      	b.n	13fd8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   13fd0:	2001      	movs	r0, #1
   13fd2:	f88d 000b 	strb.w	r0, [sp, #11]
   13fd6:	e7ff      	b.n	13fd8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   13fd8:	f89d 0011 	ldrb.w	r0, [sp, #17]
   13fdc:	07c0      	lsls	r0, r0, #31
   13fde:	2800      	cmp	r0, #0
   13fe0:	d104      	bne.n	13fec <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x72>
   13fe2:	e7ff      	b.n	13fe4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   13fe4:	9801      	ldr	r0, [sp, #4]
   13fe6:	2801      	cmp	r0, #1
   13fe8:	d008      	beq.n	13ffc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x82>
   13fea:	e011      	b.n	14010 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x96>
   13fec:	2000      	movs	r0, #0
   13fee:	f88d 0011 	strb.w	r0, [sp, #17]
   13ff2:	e7f7      	b.n	13fe4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   13ff4:	f89d 000b 	ldrb.w	r0, [sp, #11]
   13ff8:	b008      	add	sp, #32
   13ffa:	bd80      	pop	{r7, pc}
   13ffc:	f89d 0012 	ldrb.w	r0, [sp, #18]
   14000:	07c0      	lsls	r0, r0, #31
   14002:	2800      	cmp	r0, #0
   14004:	d0f6      	beq.n	13ff4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   14006:	e7ff      	b.n	14008 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x8e>
   14008:	2000      	movs	r0, #0
   1400a:	f88d 0012 	strb.w	r0, [sp, #18]
   1400e:	e7f1      	b.n	13ff4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   14010:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14014:	07c0      	lsls	r0, r0, #31
   14016:	2800      	cmp	r0, #0
   14018:	d0ec      	beq.n	13ff4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   1401a:	e7ff      	b.n	1401c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0xa2>
   1401c:	2000      	movs	r0, #0
   1401e:	f88d 0013 	strb.w	r0, [sp, #19]
   14022:	e7e7      	b.n	13ff4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>

00014024 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>:
   14024:	b580      	push	{r7, lr}
   14026:	b088      	sub	sp, #32
   14028:	9001      	str	r0, [sp, #4]
   1402a:	2000      	movs	r0, #0
   1402c:	f88d 0013 	strb.w	r0, [sp, #19]
   14030:	f88d 0011 	strb.w	r0, [sp, #17]
   14034:	f88d 0012 	strb.w	r0, [sp, #18]
   14038:	2001      	movs	r0, #1
   1403a:	f88d 0012 	strb.w	r0, [sp, #18]
   1403e:	f88d 0013 	strb.w	r0, [sp, #19]
   14042:	f88d 0011 	strb.w	r0, [sp, #17]
   14046:	9801      	ldr	r0, [sp, #4]
   14048:	1e41      	subs	r1, r0, #1
   1404a:	bf18      	it	ne
   1404c:	2101      	movne	r1, #1
   1404e:	2801      	cmp	r0, #1
   14050:	d00d      	beq.n	1406e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x4a>
   14052:	e7ff      	b.n	14054 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x30>
   14054:	2000      	movs	r0, #0
   14056:	f88d 0013 	strb.w	r0, [sp, #19]
   1405a:	9901      	ldr	r1, [sp, #4]
   1405c:	9107      	str	r1, [sp, #28]
   1405e:	f88d 0011 	strb.w	r0, [sp, #17]
   14062:	9103      	str	r1, [sp, #12]
   14064:	9803      	ldr	r0, [sp, #12]
   14066:	f7f5 fd08 	bl	9a7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>
   1406a:	e006      	b.n	1407a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x56>
   1406c:	defe      	udf	#254	; 0xfe
   1406e:	2000      	movs	r0, #0
   14070:	f88d 0012 	strb.w	r0, [sp, #18]
   14074:	f88d 000b 	strb.w	r0, [sp, #11]
   14078:	e003      	b.n	14082 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   1407a:	2001      	movs	r0, #1
   1407c:	f88d 000b 	strb.w	r0, [sp, #11]
   14080:	e7ff      	b.n	14082 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   14082:	f89d 0011 	ldrb.w	r0, [sp, #17]
   14086:	07c0      	lsls	r0, r0, #31
   14088:	2800      	cmp	r0, #0
   1408a:	d104      	bne.n	14096 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x72>
   1408c:	e7ff      	b.n	1408e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   1408e:	9801      	ldr	r0, [sp, #4]
   14090:	2801      	cmp	r0, #1
   14092:	d008      	beq.n	140a6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x82>
   14094:	e011      	b.n	140ba <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x96>
   14096:	2000      	movs	r0, #0
   14098:	f88d 0011 	strb.w	r0, [sp, #17]
   1409c:	e7f7      	b.n	1408e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   1409e:	f89d 000b 	ldrb.w	r0, [sp, #11]
   140a2:	b008      	add	sp, #32
   140a4:	bd80      	pop	{r7, pc}
   140a6:	f89d 0012 	ldrb.w	r0, [sp, #18]
   140aa:	07c0      	lsls	r0, r0, #31
   140ac:	2800      	cmp	r0, #0
   140ae:	d0f6      	beq.n	1409e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   140b0:	e7ff      	b.n	140b2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x8e>
   140b2:	2000      	movs	r0, #0
   140b4:	f88d 0012 	strb.w	r0, [sp, #18]
   140b8:	e7f1      	b.n	1409e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   140ba:	f89d 0013 	ldrb.w	r0, [sp, #19]
   140be:	07c0      	lsls	r0, r0, #31
   140c0:	2800      	cmp	r0, #0
   140c2:	d0ec      	beq.n	1409e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   140c4:	e7ff      	b.n	140c6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0xa2>
   140c6:	2000      	movs	r0, #0
   140c8:	f88d 0013 	strb.w	r0, [sp, #19]
   140cc:	e7e7      	b.n	1409e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>

000140ce <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>:
   140ce:	b580      	push	{r7, lr}
   140d0:	b088      	sub	sp, #32
   140d2:	9001      	str	r0, [sp, #4]
   140d4:	2000      	movs	r0, #0
   140d6:	f88d 0013 	strb.w	r0, [sp, #19]
   140da:	f88d 0011 	strb.w	r0, [sp, #17]
   140de:	f88d 0012 	strb.w	r0, [sp, #18]
   140e2:	2001      	movs	r0, #1
   140e4:	f88d 0012 	strb.w	r0, [sp, #18]
   140e8:	f88d 0013 	strb.w	r0, [sp, #19]
   140ec:	f88d 0011 	strb.w	r0, [sp, #17]
   140f0:	9801      	ldr	r0, [sp, #4]
   140f2:	1e41      	subs	r1, r0, #1
   140f4:	bf18      	it	ne
   140f6:	2101      	movne	r1, #1
   140f8:	2801      	cmp	r0, #1
   140fa:	d00d      	beq.n	14118 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x4a>
   140fc:	e7ff      	b.n	140fe <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x30>
   140fe:	2000      	movs	r0, #0
   14100:	f88d 0013 	strb.w	r0, [sp, #19]
   14104:	9901      	ldr	r1, [sp, #4]
   14106:	9107      	str	r1, [sp, #28]
   14108:	f88d 0011 	strb.w	r0, [sp, #17]
   1410c:	9103      	str	r1, [sp, #12]
   1410e:	9803      	ldr	r0, [sp, #12]
   14110:	f7f5 fcb8 	bl	9a84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>
   14114:	e006      	b.n	14124 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x56>
   14116:	defe      	udf	#254	; 0xfe
   14118:	2000      	movs	r0, #0
   1411a:	f88d 0012 	strb.w	r0, [sp, #18]
   1411e:	f88d 000b 	strb.w	r0, [sp, #11]
   14122:	e003      	b.n	1412c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   14124:	2001      	movs	r0, #1
   14126:	f88d 000b 	strb.w	r0, [sp, #11]
   1412a:	e7ff      	b.n	1412c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   1412c:	f89d 0011 	ldrb.w	r0, [sp, #17]
   14130:	07c0      	lsls	r0, r0, #31
   14132:	2800      	cmp	r0, #0
   14134:	d104      	bne.n	14140 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x72>
   14136:	e7ff      	b.n	14138 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   14138:	9801      	ldr	r0, [sp, #4]
   1413a:	2801      	cmp	r0, #1
   1413c:	d008      	beq.n	14150 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x82>
   1413e:	e011      	b.n	14164 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x96>
   14140:	2000      	movs	r0, #0
   14142:	f88d 0011 	strb.w	r0, [sp, #17]
   14146:	e7f7      	b.n	14138 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   14148:	f89d 000b 	ldrb.w	r0, [sp, #11]
   1414c:	b008      	add	sp, #32
   1414e:	bd80      	pop	{r7, pc}
   14150:	f89d 0012 	ldrb.w	r0, [sp, #18]
   14154:	07c0      	lsls	r0, r0, #31
   14156:	2800      	cmp	r0, #0
   14158:	d0f6      	beq.n	14148 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   1415a:	e7ff      	b.n	1415c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x8e>
   1415c:	2000      	movs	r0, #0
   1415e:	f88d 0012 	strb.w	r0, [sp, #18]
   14162:	e7f1      	b.n	14148 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   14164:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14168:	07c0      	lsls	r0, r0, #31
   1416a:	2800      	cmp	r0, #0
   1416c:	d0ec      	beq.n	14148 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   1416e:	e7ff      	b.n	14170 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0xa2>
   14170:	2000      	movs	r0, #0
   14172:	f88d 0013 	strb.w	r0, [sp, #19]
   14176:	e7e7      	b.n	14148 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>

00014178 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>:
   14178:	b082      	sub	sp, #8
   1417a:	2001      	movs	r0, #1
   1417c:	f88d 0003 	strb.w	r0, [sp, #3]
   14180:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14184:	b002      	add	sp, #8
   14186:	4770      	bx	lr

00014188 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>:
    #[inline]
    fn to_u128() -> u128 {
        u128::from(B::to_u8()) | U::to_u128() << 1
    }
    #[inline]
    fn to_usize() -> usize {
   14188:	b580      	push	{r7, lr}
   1418a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1418c:	f000 fdc7 	bl	14d1e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   14190:	9003      	str	r0, [sp, #12]
   14192:	e7ff      	b.n	14194 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0xc>
   14194:	9803      	ldr	r0, [sp, #12]
   14196:	f000 fdc6 	bl	14d26 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   1419a:	9002      	str	r0, [sp, #8]
   1419c:	e7ff      	b.n	1419e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x16>
   1419e:	f000 f80b 	bl	141b8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>
   141a2:	9001      	str	r0, [sp, #4]
   141a4:	e7ff      	b.n	141a6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x1e>
   141a6:	9801      	ldr	r0, [sp, #4]
   141a8:	0041      	lsls	r1, r0, #1
   141aa:	9100      	str	r1, [sp, #0]
   141ac:	e7ff      	b.n	141ae <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x26>
   141ae:	9802      	ldr	r0, [sp, #8]
   141b0:	9900      	ldr	r1, [sp, #0]
   141b2:	4308      	orrs	r0, r1
    }
   141b4:	b004      	add	sp, #16
   141b6:	bd80      	pop	{r7, pc}

000141b8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>:
    fn to_usize() -> usize {
   141b8:	b580      	push	{r7, lr}
   141ba:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   141bc:	f000 fdb1 	bl	14d22 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   141c0:	9003      	str	r0, [sp, #12]
   141c2:	e7ff      	b.n	141c4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0xc>
   141c4:	9803      	ldr	r0, [sp, #12]
   141c6:	f000 fdae 	bl	14d26 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   141ca:	9002      	str	r0, [sp, #8]
   141cc:	e7ff      	b.n	141ce <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x16>
   141ce:	f000 fd46 	bl	14c5e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   141d2:	9001      	str	r0, [sp, #4]
   141d4:	e7ff      	b.n	141d6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x1e>
   141d6:	9801      	ldr	r0, [sp, #4]
   141d8:	0041      	lsls	r1, r0, #1
   141da:	9100      	str	r1, [sp, #0]
   141dc:	e7ff      	b.n	141de <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x26>
   141de:	9802      	ldr	r0, [sp, #8]
   141e0:	9900      	ldr	r1, [sp, #0]
   141e2:	4308      	orrs	r0, r1
    }
   141e4:	b004      	add	sp, #16
   141e6:	bd80      	pop	{r7, pc}

000141e8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>:
    fn to_usize() -> usize {
   141e8:	b580      	push	{r7, lr}
   141ea:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   141ec:	f000 fd97 	bl	14d1e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   141f0:	9003      	str	r0, [sp, #12]
   141f2:	e7ff      	b.n	141f4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0xc>
   141f4:	9803      	ldr	r0, [sp, #12]
   141f6:	f000 fd96 	bl	14d26 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   141fa:	9002      	str	r0, [sp, #8]
   141fc:	e7ff      	b.n	141fe <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x16>
   141fe:	f7ff ffc3 	bl	14188 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>
   14202:	9001      	str	r0, [sp, #4]
   14204:	e7ff      	b.n	14206 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x1e>
   14206:	9801      	ldr	r0, [sp, #4]
   14208:	0041      	lsls	r1, r0, #1
   1420a:	9100      	str	r1, [sp, #0]
   1420c:	e7ff      	b.n	1420e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x26>
   1420e:	9802      	ldr	r0, [sp, #8]
   14210:	9900      	ldr	r1, [sp, #0]
   14212:	4308      	orrs	r0, r1
    }
   14214:	b004      	add	sp, #16
   14216:	bd80      	pop	{r7, pc}

00014218 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>:
   14218:	b580      	push	{r7, lr}
   1421a:	b08c      	sub	sp, #48	; 0x30
   1421c:	9009      	str	r0, [sp, #36]	; 0x24
   1421e:	910a      	str	r1, [sp, #40]	; 0x28
   14220:	920b      	str	r2, [sp, #44]	; 0x2c
   14222:	9006      	str	r0, [sp, #24]
   14224:	4608      	mov	r0, r1
   14226:	9105      	str	r1, [sp, #20]
   14228:	4611      	mov	r1, r2
   1422a:	9204      	str	r2, [sp, #16]
   1422c:	f7f6 fab6 	bl	a79c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   14230:	9003      	str	r0, [sp, #12]
   14232:	e7ff      	b.n	14234 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x1c>
   14234:	9806      	ldr	r0, [sp, #24]
   14236:	9007      	str	r0, [sp, #28]
   14238:	9903      	ldr	r1, [sp, #12]
   1423a:	9108      	str	r1, [sp, #32]
   1423c:	9807      	ldr	r0, [sp, #28]
   1423e:	9908      	ldr	r1, [sp, #32]
   14240:	9a05      	ldr	r2, [sp, #20]
   14242:	9b04      	ldr	r3, [sp, #16]
   14244:	f000 f82d 	bl	142a2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>
   14248:	9002      	str	r0, [sp, #8]
   1424a:	9101      	str	r1, [sp, #4]
   1424c:	e7ff      	b.n	1424e <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x36>
   1424e:	9802      	ldr	r0, [sp, #8]
   14250:	9901      	ldr	r1, [sp, #4]
   14252:	b00c      	add	sp, #48	; 0x30
   14254:	bd80      	pop	{r7, pc}

00014256 <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>:
   14256:	b083      	sub	sp, #12
   14258:	9001      	str	r0, [sp, #4]
   1425a:	9102      	str	r1, [sp, #8]
   1425c:	b003      	add	sp, #12
   1425e:	4770      	bx	lr

00014260 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>:
   14260:	b580      	push	{r7, lr}
   14262:	b08a      	sub	sp, #40	; 0x28
   14264:	9006      	str	r0, [sp, #24]
   14266:	9107      	str	r1, [sp, #28]
   14268:	9208      	str	r2, [sp, #32]
   1426a:	9309      	str	r3, [sp, #36]	; 0x24
   1426c:	9005      	str	r0, [sp, #20]
   1426e:	4610      	mov	r0, r2
   14270:	9104      	str	r1, [sp, #16]
   14272:	4619      	mov	r1, r3
   14274:	f7f6 fa8d 	bl	a792 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   14278:	9003      	str	r0, [sp, #12]
   1427a:	e7ff      	b.n	1427c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x1c>
   1427c:	9803      	ldr	r0, [sp, #12]
   1427e:	9905      	ldr	r1, [sp, #20]
   14280:	f7f6 fb70 	bl	a964 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   14284:	9002      	str	r0, [sp, #8]
   14286:	e7ff      	b.n	14288 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x28>
   14288:	9804      	ldr	r0, [sp, #16]
   1428a:	9905      	ldr	r1, [sp, #20]
   1428c:	1a41      	subs	r1, r0, r1
   1428e:	9802      	ldr	r0, [sp, #8]
   14290:	f7f6 fa72 	bl	a778 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   14294:	9001      	str	r0, [sp, #4]
   14296:	9100      	str	r1, [sp, #0]
   14298:	e7ff      	b.n	1429a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x3a>
   1429a:	9801      	ldr	r0, [sp, #4]
   1429c:	9900      	ldr	r1, [sp, #0]
   1429e:	b00a      	add	sp, #40	; 0x28
   142a0:	bd80      	pop	{r7, pc}

000142a2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>:
   142a2:	b580      	push	{r7, lr}
   142a4:	b08c      	sub	sp, #48	; 0x30
   142a6:	9008      	str	r0, [sp, #32]
   142a8:	9109      	str	r1, [sp, #36]	; 0x24
   142aa:	920a      	str	r2, [sp, #40]	; 0x28
   142ac:	930b      	str	r3, [sp, #44]	; 0x2c
   142ae:	4288      	cmp	r0, r1
   142b0:	9307      	str	r3, [sp, #28]
   142b2:	9206      	str	r2, [sp, #24]
   142b4:	9105      	str	r1, [sp, #20]
   142b6:	9004      	str	r0, [sp, #16]
   142b8:	d806      	bhi.n	142c8 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x26>
   142ba:	e7ff      	b.n	142bc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x1a>
   142bc:	9806      	ldr	r0, [sp, #24]
   142be:	9907      	ldr	r1, [sp, #28]
   142c0:	f7f6 fa6c 	bl	a79c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   142c4:	9003      	str	r0, [sp, #12]
   142c6:	e004      	b.n	142d2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x30>
   142c8:	9804      	ldr	r0, [sp, #16]
   142ca:	9905      	ldr	r1, [sp, #20]
   142cc:	f001 fead 	bl	1602a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   142d0:	defe      	udf	#254	; 0xfe
   142d2:	9805      	ldr	r0, [sp, #20]
   142d4:	9903      	ldr	r1, [sp, #12]
   142d6:	4288      	cmp	r0, r1
   142d8:	d809      	bhi.n	142ee <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x4c>
   142da:	e7ff      	b.n	142dc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x3a>
   142dc:	9804      	ldr	r0, [sp, #16]
   142de:	9905      	ldr	r1, [sp, #20]
   142e0:	9a06      	ldr	r2, [sp, #24]
   142e2:	9b07      	ldr	r3, [sp, #28]
   142e4:	f7ff ffbc 	bl	14260 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>
   142e8:	9002      	str	r0, [sp, #8]
   142ea:	9101      	str	r1, [sp, #4]
   142ec:	e00a      	b.n	14304 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x62>
   142ee:	9806      	ldr	r0, [sp, #24]
   142f0:	9907      	ldr	r1, [sp, #28]
   142f2:	f7f6 fa53 	bl	a79c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   142f6:	9000      	str	r0, [sp, #0]
   142f8:	e7ff      	b.n	142fa <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x58>
   142fa:	9805      	ldr	r0, [sp, #20]
   142fc:	9900      	ldr	r1, [sp, #0]
   142fe:	f001 fe72 	bl	15fe6 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   14302:	defe      	udf	#254	; 0xfe
   14304:	9802      	ldr	r0, [sp, #8]
   14306:	9901      	ldr	r1, [sp, #4]
   14308:	b00c      	add	sp, #48	; 0x30
   1430a:	bd80      	pop	{r7, pc}

0001430c <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>:
        self.style.stroke_width = width;

        self
    }

    fn fill(mut self, color: Option<C>) -> Self {
   1430c:	b5b0      	push	{r4, r5, r7, lr}
   1430e:	b081      	sub	sp, #4
   14310:	469c      	mov	ip, r3
   14312:	4696      	mov	lr, r2
   14314:	f8ad 2000 	strh.w	r2, [sp]
   14318:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
   1431c:	820a      	strh	r2, [r1, #16]
   1431e:	824b      	strh	r3, [r1, #18]

        self
   14320:	c91c      	ldmia	r1!, {r2, r3, r4}
   14322:	c01c      	stmia	r0!, {r2, r3, r4}
   14324:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
   14328:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
   1432c:	b001      	add	sp, #4
   1432e:	bdb0      	pop	{r4, r5, r7, pc}

00014330 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>:
    pub fn new(top_left: Coord, bottom_right: Coord) -> Self {
   14330:	b510      	push	{r4, lr}
   14332:	b08c      	sub	sp, #48	; 0x30
   14334:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   14338:	9108      	str	r1, [sp, #32]
   1433a:	9209      	str	r2, [sp, #36]	; 0x24
   1433c:	930a      	str	r3, [sp, #40]	; 0x28
   1433e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   14342:	f10d 0e14 	add.w	lr, sp, #20
            style: Style::default(),
   14346:	9004      	str	r0, [sp, #16]
   14348:	4670      	mov	r0, lr
   1434a:	9303      	str	r3, [sp, #12]
   1434c:	9202      	str	r2, [sp, #8]
   1434e:	9101      	str	r1, [sp, #4]
   14350:	f8cd c000 	str.w	ip, [sp]
   14354:	f000 f818 	bl	14388 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
   14358:	e7ff      	b.n	1435a <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E+0x2a>
        Rectangle {
   1435a:	9801      	ldr	r0, [sp, #4]
   1435c:	9904      	ldr	r1, [sp, #16]
   1435e:	6008      	str	r0, [r1, #0]
   14360:	9a02      	ldr	r2, [sp, #8]
   14362:	604a      	str	r2, [r1, #4]
   14364:	9b03      	ldr	r3, [sp, #12]
   14366:	608b      	str	r3, [r1, #8]
   14368:	f8dd c000 	ldr.w	ip, [sp]
   1436c:	f8c1 c00c 	str.w	ip, [r1, #12]
   14370:	f8bd e01c 	ldrh.w	lr, [sp, #28]
   14374:	f8a1 e018 	strh.w	lr, [r1, #24]
   14378:	f8dd e014 	ldr.w	lr, [sp, #20]
   1437c:	9c06      	ldr	r4, [sp, #24]
   1437e:	614c      	str	r4, [r1, #20]
   14380:	f8c1 e010 	str.w	lr, [r1, #16]
    }
   14384:	b00c      	add	sp, #48	; 0x30
   14386:	bd10      	pop	{r4, pc}

00014388 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>:

impl<P> Default for Style<P>
where
    P: PixelColor,
{
    fn default() -> Self {
   14388:	b082      	sub	sp, #8
   1438a:	2100      	movs	r1, #0
        Self {
            fill_color: None,
   1438c:	f8ad 1000 	strh.w	r1, [sp]
            stroke_color: None,
   14390:	f8ad 1004 	strh.w	r1, [sp, #4]
        Self {
   14394:	f8bd 1000 	ldrh.w	r1, [sp]
   14398:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1439c:	8001      	strh	r1, [r0, #0]
   1439e:	8042      	strh	r2, [r0, #2]
   143a0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   143a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   143a8:	8081      	strh	r1, [r0, #4]
   143aa:	80c2      	strh	r2, [r0, #6]
   143ac:	2101      	movs	r1, #1
   143ae:	7201      	strb	r1, [r0, #8]
            stroke_width: 1,
        }
    }
   143b0:	b002      	add	sp, #8
   143b2:	4770      	bx	lr

000143b4 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>:
#[derive(ToPrimitive)]
   143b4:	b084      	sub	sp, #16
   143b6:	460a      	mov	r2, r1
   143b8:	4603      	mov	r3, r0
   143ba:	9103      	str	r1, [sp, #12]
   143bc:	9002      	str	r0, [sp, #8]
   143be:	b004      	add	sp, #16
   143c0:	4770      	bx	lr

000143c2 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>:
   143c2:	b510      	push	{r4, lr}
   143c4:	b088      	sub	sp, #32
   143c6:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   143ca:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
   143ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   143d0:	9102      	str	r1, [sp, #8]
   143d2:	9203      	str	r2, [sp, #12]
   143d4:	9304      	str	r3, [sp, #16]
   143d6:	9405      	str	r4, [sp, #20]
   143d8:	f8cd e018 	str.w	lr, [sp, #24]
   143dc:	f8cd c01c 	str.w	ip, [sp, #28]
   143e0:	f8cd e000 	str.w	lr, [sp]
   143e4:	f8cd c004 	str.w	ip, [sp, #4]
   143e8:	6001      	str	r1, [r0, #0]
   143ea:	6042      	str	r2, [r0, #4]
   143ec:	9900      	ldr	r1, [sp, #0]
   143ee:	9a01      	ldr	r2, [sp, #4]
   143f0:	6081      	str	r1, [r0, #8]
   143f2:	60c2      	str	r2, [r0, #12]
   143f4:	6103      	str	r3, [r0, #16]
   143f6:	6144      	str	r4, [r0, #20]
   143f8:	b008      	add	sp, #32
   143fa:	bd10      	pop	{r4, pc}

000143fc <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>:
   143fc:	b580      	push	{r7, lr}
   143fe:	b086      	sub	sp, #24
   14400:	f8dd c020 	ldr.w	ip, [sp, #32]
   14404:	9102      	str	r1, [sp, #8]
   14406:	9203      	str	r2, [sp, #12]
   14408:	9304      	str	r3, [sp, #16]
   1440a:	f8cd c014 	str.w	ip, [sp, #20]
   1440e:	f04f 0e00 	mov.w	lr, #0
   14412:	f8cd e004 	str.w	lr, [sp, #4]
   14416:	f8cd e000 	str.w	lr, [sp]
   1441a:	f8cd e000 	str.w	lr, [sp]
   1441e:	6001      	str	r1, [r0, #0]
   14420:	6042      	str	r2, [r0, #4]
   14422:	9900      	ldr	r1, [sp, #0]
   14424:	9a01      	ldr	r2, [sp, #4]
   14426:	6081      	str	r1, [r0, #8]
   14428:	60c2      	str	r2, [r0, #12]
   1442a:	6103      	str	r3, [r0, #16]
   1442c:	f8c0 c014 	str.w	ip, [r0, #20]
   14430:	b006      	add	sp, #24
   14432:	bd80      	pop	{r7, pc}

00014434 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E>:
   14434:	b580      	push	{r7, lr}
   14436:	b086      	sub	sp, #24
   14438:	460a      	mov	r2, r1
   1443a:	4603      	mov	r3, r0
   1443c:	f88d 0014 	strb.w	r0, [sp, #20]
   14440:	f88d 1015 	strb.w	r1, [sp, #21]
   14444:	9203      	str	r2, [sp, #12]
   14446:	9302      	str	r3, [sp, #8]
   14448:	f000 f865 	bl	14516 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>
   1444c:	9001      	str	r0, [sp, #4]
   1444e:	9100      	str	r1, [sp, #0]
   14450:	e7ff      	b.n	14452 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x1e>
   14452:	9801      	ldr	r0, [sp, #4]
   14454:	f88d 0016 	strb.w	r0, [sp, #22]
   14458:	9900      	ldr	r1, [sp, #0]
   1445a:	f001 0201 	and.w	r2, r1, #1
   1445e:	f88d 2017 	strb.w	r2, [sp, #23]
   14462:	2a00      	cmp	r2, #0
   14464:	d107      	bne.n	14476 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x42>
   14466:	e7ff      	b.n	14468 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x34>
   14468:	9801      	ldr	r0, [sp, #4]
   1446a:	f88d 0011 	strb.w	r0, [sp, #17]
   1446e:	2101      	movs	r1, #1
   14470:	f88d 1010 	strb.w	r1, [sp, #16]
   14474:	e003      	b.n	1447e <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x4a>
   14476:	2000      	movs	r0, #0
   14478:	f88d 0010 	strb.w	r0, [sp, #16]
   1447c:	e7ff      	b.n	1447e <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x4a>
   1447e:	f89d 0010 	ldrb.w	r0, [sp, #16]
   14482:	f89d 1011 	ldrb.w	r1, [sp, #17]
   14486:	b006      	add	sp, #24
   14488:	bd80      	pop	{r7, pc}

0001448a <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>:
   1448a:	b082      	sub	sp, #8
   1448c:	460a      	mov	r2, r1
   1448e:	4603      	mov	r3, r0
   14490:	f88d 0005 	strb.w	r0, [sp, #5]
   14494:	f88d 1006 	strb.w	r1, [sp, #6]
   14498:	4408      	add	r0, r1
   1449a:	f88d 0007 	strb.w	r0, [sp, #7]
   1449e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   144a2:	9000      	str	r0, [sp, #0]
   144a4:	e7ff      	b.n	144a6 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE+0x1c>
   144a6:	9800      	ldr	r0, [sp, #0]
   144a8:	b002      	add	sp, #8
   144aa:	4770      	bx	lr

000144ac <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E>:
   144ac:	b084      	sub	sp, #16
   144ae:	4602      	mov	r2, r0
   144b0:	f88d 0007 	strb.w	r0, [sp, #7]
   144b4:	9102      	str	r1, [sp, #8]
   144b6:	f001 0107 	and.w	r1, r1, #7
   144ba:	4088      	lsls	r0, r1
   144bc:	f88d 000f 	strb.w	r0, [sp, #15]
   144c0:	f89d 000f 	ldrb.w	r0, [sp, #15]
   144c4:	9000      	str	r0, [sp, #0]
   144c6:	e7ff      	b.n	144c8 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E+0x1c>
   144c8:	9800      	ldr	r0, [sp, #0]
   144ca:	b004      	add	sp, #16
   144cc:	4770      	bx	lr

000144ce <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E>:
   144ce:	b084      	sub	sp, #16
   144d0:	b2c2      	uxtb	r2, r0
   144d2:	4603      	mov	r3, r0
   144d4:	f88d 0007 	strb.w	r0, [sp, #7]
   144d8:	9102      	str	r1, [sp, #8]
   144da:	f001 0007 	and.w	r0, r1, #7
   144de:	fa22 f000 	lsr.w	r0, r2, r0
   144e2:	f88d 000f 	strb.w	r0, [sp, #15]
   144e6:	f89d 000f 	ldrb.w	r0, [sp, #15]
   144ea:	9000      	str	r0, [sp, #0]
   144ec:	e7ff      	b.n	144ee <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E+0x20>
   144ee:	9800      	ldr	r0, [sp, #0]
   144f0:	b004      	add	sp, #16
   144f2:	4770      	bx	lr

000144f4 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E>:
   144f4:	b082      	sub	sp, #8
   144f6:	460a      	mov	r2, r1
   144f8:	4603      	mov	r3, r0
   144fa:	f88d 0005 	strb.w	r0, [sp, #5]
   144fe:	f88d 1006 	strb.w	r1, [sp, #6]
   14502:	1a40      	subs	r0, r0, r1
   14504:	f88d 0007 	strb.w	r0, [sp, #7]
   14508:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1450c:	9000      	str	r0, [sp, #0]
   1450e:	e7ff      	b.n	14510 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E+0x1c>
   14510:	9800      	ldr	r0, [sp, #0]
   14512:	b002      	add	sp, #8
   14514:	4770      	bx	lr

00014516 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>:
   14516:	b084      	sub	sp, #16
   14518:	b2c2      	uxtb	r2, r0
   1451a:	460b      	mov	r3, r1
   1451c:	4684      	mov	ip, r0
   1451e:	f88d 000a 	strb.w	r0, [sp, #10]
   14522:	f88d 100b 	strb.w	r1, [sp, #11]
   14526:	fa52 f081 	uxtab	r0, r2, r1
   1452a:	b2c1      	uxtb	r1, r0
   1452c:	1a09      	subs	r1, r1, r0
   1452e:	bf18      	it	ne
   14530:	2101      	movne	r1, #1
   14532:	f88d 000c 	strb.w	r0, [sp, #12]
   14536:	f88d 100d 	strb.w	r1, [sp, #13]
   1453a:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1453e:	f89d 100d 	ldrb.w	r1, [sp, #13]
   14542:	9001      	str	r0, [sp, #4]
   14544:	9100      	str	r1, [sp, #0]
   14546:	e7ff      	b.n	14548 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E+0x32>
   14548:	9801      	ldr	r0, [sp, #4]
   1454a:	f88d 000e 	strb.w	r0, [sp, #14]
   1454e:	9900      	ldr	r1, [sp, #0]
   14550:	f001 0201 	and.w	r2, r1, #1
   14554:	f88d 200f 	strb.w	r2, [sp, #15]
   14558:	f88d 0008 	strb.w	r0, [sp, #8]
   1455c:	f88d 2009 	strb.w	r2, [sp, #9]
   14560:	f89d 0008 	ldrb.w	r0, [sp, #8]
   14564:	f89d 1009 	ldrb.w	r1, [sp, #9]
   14568:	b004      	add	sp, #16
   1456a:	4770      	bx	lr

0001456c <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>:
   1456c:	b580      	push	{r7, lr}
   1456e:	b084      	sub	sp, #16
   14570:	b2ca      	uxtb	r2, r1
   14572:	b2c3      	uxtb	r3, r0
   14574:	468c      	mov	ip, r1
   14576:	4686      	mov	lr, r0
   14578:	f88d 000a 	strb.w	r0, [sp, #10]
   1457c:	f88d 100b 	strb.w	r1, [sp, #11]
   14580:	1a98      	subs	r0, r3, r2
   14582:	b2c1      	uxtb	r1, r0
   14584:	1a09      	subs	r1, r1, r0
   14586:	bf18      	it	ne
   14588:	2101      	movne	r1, #1
   1458a:	f88d 000c 	strb.w	r0, [sp, #12]
   1458e:	f88d 100d 	strb.w	r1, [sp, #13]
   14592:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14596:	f89d 100d 	ldrb.w	r1, [sp, #13]
   1459a:	9001      	str	r0, [sp, #4]
   1459c:	9100      	str	r1, [sp, #0]
   1459e:	e7ff      	b.n	145a0 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E+0x34>
   145a0:	9801      	ldr	r0, [sp, #4]
   145a2:	f88d 000e 	strb.w	r0, [sp, #14]
   145a6:	9900      	ldr	r1, [sp, #0]
   145a8:	f001 0201 	and.w	r2, r1, #1
   145ac:	f88d 200f 	strb.w	r2, [sp, #15]
   145b0:	f88d 0008 	strb.w	r0, [sp, #8]
   145b4:	f88d 2009 	strb.w	r2, [sp, #9]
   145b8:	f89d 0008 	ldrb.w	r0, [sp, #8]
   145bc:	f89d 1009 	ldrb.w	r1, [sp, #9]
   145c0:	b004      	add	sp, #16
   145c2:	bd80      	pop	{r7, pc}

000145c4 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>:
   145c4:	b083      	sub	sp, #12
   145c6:	460a      	mov	r2, r1
   145c8:	4603      	mov	r3, r0
   145ca:	f8ad 0006 	strh.w	r0, [sp, #6]
   145ce:	f8ad 1008 	strh.w	r1, [sp, #8]
   145d2:	4408      	add	r0, r1
   145d4:	f8ad 000a 	strh.w	r0, [sp, #10]
   145d8:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   145dc:	9000      	str	r0, [sp, #0]
   145de:	e7ff      	b.n	145e0 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E+0x1c>
   145e0:	9800      	ldr	r0, [sp, #0]
   145e2:	b003      	add	sp, #12
   145e4:	4770      	bx	lr

000145e6 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>:
   145e6:	b083      	sub	sp, #12
   145e8:	460a      	mov	r2, r1
   145ea:	4603      	mov	r3, r0
   145ec:	f8ad 0006 	strh.w	r0, [sp, #6]
   145f0:	f8ad 1008 	strh.w	r1, [sp, #8]
   145f4:	1a40      	subs	r0, r0, r1
   145f6:	f8ad 000a 	strh.w	r0, [sp, #10]
   145fa:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   145fe:	9000      	str	r0, [sp, #0]
   14600:	e7ff      	b.n	14602 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E+0x1c>
   14602:	9800      	ldr	r0, [sp, #0]
   14604:	b003      	add	sp, #12
   14606:	4770      	bx	lr

00014608 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE>:
   14608:	b5b0      	push	{r4, r5, r7, lr}
   1460a:	b088      	sub	sp, #32
   1460c:	469c      	mov	ip, r3
   1460e:	4696      	mov	lr, r2
   14610:	460c      	mov	r4, r1
   14612:	4605      	mov	r5, r0
   14614:	9103      	str	r1, [sp, #12]
   14616:	9002      	str	r0, [sp, #8]
   14618:	9305      	str	r3, [sp, #20]
   1461a:	9204      	str	r2, [sp, #16]
   1461c:	1a80      	subs	r0, r0, r2
   1461e:	eb61 0103 	sbc.w	r1, r1, r3
   14622:	9107      	str	r1, [sp, #28]
   14624:	9006      	str	r0, [sp, #24]
   14626:	9806      	ldr	r0, [sp, #24]
   14628:	9907      	ldr	r1, [sp, #28]
   1462a:	9001      	str	r0, [sp, #4]
   1462c:	9100      	str	r1, [sp, #0]
   1462e:	e7ff      	b.n	14630 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE+0x28>
   14630:	9801      	ldr	r0, [sp, #4]
   14632:	9900      	ldr	r1, [sp, #0]
   14634:	b008      	add	sp, #32
   14636:	bdb0      	pop	{r4, r5, r7, pc}

00014638 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>:
    fn le(&self, other: &LevelFilter) -> bool {
   14638:	b082      	sub	sp, #8
   1463a:	9000      	str	r0, [sp, #0]
   1463c:	9101      	str	r1, [sp, #4]
        *self as usize <= *other as usize
   1463e:	6800      	ldr	r0, [r0, #0]
   14640:	6809      	ldr	r1, [r1, #0]
   14642:	2200      	movs	r2, #0
   14644:	4288      	cmp	r0, r1
   14646:	bf98      	it	ls
   14648:	2201      	movls	r2, #1
    }
   1464a:	4610      	mov	r0, r2
   1464c:	b002      	add	sp, #8
   1464e:	4770      	bx	lr

00014650 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E>:
   14650:	b081      	sub	sp, #4
   14652:	4601      	mov	r1, r0
   14654:	f88d 0003 	strb.w	r0, [sp, #3]
   14658:	b2c0      	uxtb	r0, r0
   1465a:	b001      	add	sp, #4
   1465c:	4770      	bx	lr

0001465e <_ZN4core3mem4swap17h206518364108b51fE>:
   1465e:	b580      	push	{r7, lr}
   14660:	b082      	sub	sp, #8
   14662:	9000      	str	r0, [sp, #0]
   14664:	9101      	str	r1, [sp, #4]
   14666:	f000 fb80 	bl	14d6a <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE>
   1466a:	e7ff      	b.n	1466c <_ZN4core3mem4swap17h206518364108b51fE+0xe>
   1466c:	b002      	add	sp, #8
   1466e:	bd80      	pop	{r7, pc}

00014670 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE>:
   14670:	b580      	push	{r7, lr}
   14672:	b088      	sub	sp, #32
   14674:	9004      	str	r0, [sp, #16]
   14676:	9105      	str	r1, [sp, #20]
   14678:	9206      	str	r2, [sp, #24]
   1467a:	9307      	str	r3, [sp, #28]
   1467c:	9003      	str	r0, [sp, #12]
   1467e:	4610      	mov	r0, r2
   14680:	9102      	str	r1, [sp, #8]
   14682:	4619      	mov	r1, r3
   14684:	9a03      	ldr	r2, [sp, #12]
   14686:	9b02      	ldr	r3, [sp, #8]
   14688:	f7f4 fb97 	bl	8dba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
   1468c:	9001      	str	r0, [sp, #4]
   1468e:	9100      	str	r1, [sp, #0]
   14690:	e7ff      	b.n	14692 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE+0x22>
   14692:	9801      	ldr	r0, [sp, #4]
   14694:	9900      	ldr	r1, [sp, #0]
   14696:	b008      	add	sp, #32
   14698:	bd80      	pop	{r7, pc}

0001469a <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE>:
   1469a:	b082      	sub	sp, #8
   1469c:	9000      	str	r0, [sp, #0]
   1469e:	9101      	str	r1, [sp, #4]
   146a0:	7800      	ldrb	r0, [r0, #0]
   146a2:	7809      	ldrb	r1, [r1, #0]
   146a4:	2200      	movs	r2, #0
   146a6:	4288      	cmp	r0, r1
   146a8:	bf38      	it	cc
   146aa:	2201      	movcc	r2, #1
   146ac:	4610      	mov	r0, r2
   146ae:	b002      	add	sp, #8
   146b0:	4770      	bx	lr

000146b2 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE>:
   146b2:	b580      	push	{r7, lr}
   146b4:	b088      	sub	sp, #32
   146b6:	9005      	str	r0, [sp, #20]
   146b8:	9106      	str	r1, [sp, #24]
   146ba:	9002      	str	r0, [sp, #8]
   146bc:	4608      	mov	r0, r1
   146be:	f000 fc2f 	bl	14f20 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE>
   146c2:	f88d 1011 	strb.w	r1, [sp, #17]
   146c6:	f88d 0010 	strb.w	r0, [sp, #16]
   146ca:	e7ff      	b.n	146cc <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x1a>
   146cc:	f89d 0010 	ldrb.w	r0, [sp, #16]
   146d0:	07c1      	lsls	r1, r0, #31
   146d2:	2900      	cmp	r1, #0
   146d4:	d005      	beq.n	146e2 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x30>
   146d6:	e7ff      	b.n	146d8 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x26>
   146d8:	2000      	movs	r0, #0
   146da:	f88d 000c 	strb.w	r0, [sp, #12]
   146de:	e011      	b.n	14704 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x52>
   146e0:	defe      	udf	#254	; 0xfe
   146e2:	f89d 0011 	ldrb.w	r0, [sp, #17]
   146e6:	f88d 001f 	strb.w	r0, [sp, #31]
   146ea:	9902      	ldr	r1, [sp, #8]
   146ec:	780a      	ldrb	r2, [r1, #0]
   146ee:	9001      	str	r0, [sp, #4]
   146f0:	4610      	mov	r0, r2
   146f2:	9901      	ldr	r1, [sp, #4]
   146f4:	f7ff fe9e 	bl	14434 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E>
   146f8:	f88d 100d 	strb.w	r1, [sp, #13]
   146fc:	f88d 000c 	strb.w	r0, [sp, #12]
   14700:	e7ff      	b.n	14702 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x50>
   14702:	e7ff      	b.n	14704 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x52>
   14704:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14708:	f89d 100d 	ldrb.w	r1, [sp, #13]
   1470c:	b008      	add	sp, #32
   1470e:	bd80      	pop	{r7, pc}

00014710 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   14710:	b580      	push	{r7, lr}
   14712:	b088      	sub	sp, #32
   14714:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   14716:	1d01      	adds	r1, r0, #4
   14718:	9106      	str	r1, [sp, #24]
   1471a:	9107      	str	r1, [sp, #28]
   1471c:	9004      	str	r0, [sp, #16]
   1471e:	9103      	str	r1, [sp, #12]
   14720:	e7ff      	b.n	14722 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x12>
   14722:	9804      	ldr	r0, [sp, #16]
   14724:	6801      	ldr	r1, [r0, #0]
   14726:	9803      	ldr	r0, [sp, #12]
   14728:	f7f4 fbf7 	bl	8f1a <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   1472c:	9002      	str	r0, [sp, #8]
   1472e:	9101      	str	r1, [sp, #4]
   14730:	e7ff      	b.n	14732 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x22>
    }
   14732:	9802      	ldr	r0, [sp, #8]
   14734:	9901      	ldr	r1, [sp, #4]
   14736:	b008      	add	sp, #32
   14738:	bd80      	pop	{r7, pc}

0001473a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   1473a:	b580      	push	{r7, lr}
   1473c:	b088      	sub	sp, #32
   1473e:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   14740:	1d01      	adds	r1, r0, #4
   14742:	9106      	str	r1, [sp, #24]
   14744:	9107      	str	r1, [sp, #28]
   14746:	9004      	str	r0, [sp, #16]
   14748:	9103      	str	r1, [sp, #12]
   1474a:	e7ff      	b.n	1474c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE+0x12>
   1474c:	9804      	ldr	r0, [sp, #16]
   1474e:	6801      	ldr	r1, [r0, #0]
   14750:	9803      	ldr	r0, [sp, #12]
   14752:	f7f4 fbe2 	bl	8f1a <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   14756:	9002      	str	r0, [sp, #8]
   14758:	9101      	str	r1, [sp, #4]
   1475a:	e7ff      	b.n	1475c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE+0x22>
    }
   1475c:	9802      	ldr	r0, [sp, #8]
   1475e:	9901      	ldr	r1, [sp, #4]
   14760:	b008      	add	sp, #32
   14762:	bd80      	pop	{r7, pc}

00014764 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   14764:	b580      	push	{r7, lr}
   14766:	b08a      	sub	sp, #40	; 0x28
   14768:	460a      	mov	r2, r1
   1476a:	9006      	str	r0, [sp, #24]
   1476c:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   14770:	1d01      	adds	r1, r0, #4
   14772:	9108      	str	r1, [sp, #32]
   14774:	9109      	str	r1, [sp, #36]	; 0x24
   14776:	9005      	str	r0, [sp, #20]
   14778:	9204      	str	r2, [sp, #16]
   1477a:	9103      	str	r1, [sp, #12]
   1477c:	e7ff      	b.n	1477e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x1a>
            .add(self.len)
   1477e:	9805      	ldr	r0, [sp, #20]
   14780:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   14782:	9803      	ldr	r0, [sp, #12]
   14784:	f7fc fedd 	bl	11542 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   14788:	9002      	str	r0, [sp, #8]
   1478a:	e7ff      	b.n	1478c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x28>
   1478c:	9802      	ldr	r0, [sp, #8]
   1478e:	9904      	ldr	r1, [sp, #16]
   14790:	f000 f994 	bl	14abc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   14794:	e7ff      	b.n	14796 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x32>
        self.len += 1;
   14796:	9805      	ldr	r0, [sp, #20]
   14798:	6801      	ldr	r1, [r0, #0]
   1479a:	1c4a      	adds	r2, r1, #1
   1479c:	4613      	mov	r3, r2
   1479e:	428a      	cmp	r2, r1
   147a0:	9301      	str	r3, [sp, #4]
   147a2:	d305      	bcc.n	147b0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x4c>
   147a4:	e7ff      	b.n	147a6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x42>
   147a6:	9801      	ldr	r0, [sp, #4]
   147a8:	9905      	ldr	r1, [sp, #20]
   147aa:	6008      	str	r0, [r1, #0]
    }
   147ac:	b00a      	add	sp, #40	; 0x28
   147ae:	bd80      	pop	{r7, pc}
        self.len += 1;
   147b0:	f24e 0020 	movw	r0, #57376	; 0xe020
   147b4:	f2c0 0001 	movt	r0, #1
   147b8:	f24e 0208 	movw	r2, #57352	; 0xe008
   147bc:	f2c0 0201 	movt	r2, #1
   147c0:	211c      	movs	r1, #28
   147c2:	f000 fcbd 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   147c6:	defe      	udf	#254	; 0xfe

000147c8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   147c8:	b580      	push	{r7, lr}
   147ca:	b08a      	sub	sp, #40	; 0x28
   147cc:	460a      	mov	r2, r1
   147ce:	9006      	str	r0, [sp, #24]
   147d0:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   147d4:	1d01      	adds	r1, r0, #4
   147d6:	9108      	str	r1, [sp, #32]
   147d8:	9109      	str	r1, [sp, #36]	; 0x24
   147da:	9005      	str	r0, [sp, #20]
   147dc:	9204      	str	r2, [sp, #16]
   147de:	9103      	str	r1, [sp, #12]
   147e0:	e7ff      	b.n	147e2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x1a>
            .add(self.len)
   147e2:	9805      	ldr	r0, [sp, #20]
   147e4:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   147e6:	9803      	ldr	r0, [sp, #12]
   147e8:	f7fc feab 	bl	11542 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   147ec:	9002      	str	r0, [sp, #8]
   147ee:	e7ff      	b.n	147f0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x28>
   147f0:	9802      	ldr	r0, [sp, #8]
   147f2:	9904      	ldr	r1, [sp, #16]
   147f4:	f000 f962 	bl	14abc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   147f8:	e7ff      	b.n	147fa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x32>
        self.len += 1;
   147fa:	9805      	ldr	r0, [sp, #20]
   147fc:	6801      	ldr	r1, [r0, #0]
   147fe:	1c4a      	adds	r2, r1, #1
   14800:	4613      	mov	r3, r2
   14802:	428a      	cmp	r2, r1
   14804:	9301      	str	r3, [sp, #4]
   14806:	d305      	bcc.n	14814 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x4c>
   14808:	e7ff      	b.n	1480a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x42>
   1480a:	9801      	ldr	r0, [sp, #4]
   1480c:	9905      	ldr	r1, [sp, #20]
   1480e:	6008      	str	r0, [r1, #0]
    }
   14810:	b00a      	add	sp, #40	; 0x28
   14812:	bd80      	pop	{r7, pc}
        self.len += 1;
   14814:	f24e 0020 	movw	r0, #57376	; 0xe020
   14818:	f2c0 0001 	movt	r0, #1
   1481c:	f24e 0208 	movw	r2, #57352	; 0xe008
   14820:	f2c0 0201 	movt	r2, #1
   14824:	211c      	movs	r1, #28
   14826:	f000 fc8b 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1482a:	defe      	udf	#254	; 0xfe

0001482c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   1482c:	b580      	push	{r7, lr}
   1482e:	b094      	sub	sp, #80	; 0x50
   14830:	900e      	str	r0, [sp, #56]	; 0x38
   14832:	910f      	str	r1, [sp, #60]	; 0x3c
   14834:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   14836:	6803      	ldr	r3, [r0, #0]
   14838:	9009      	str	r0, [sp, #36]	; 0x24
   1483a:	4608      	mov	r0, r1
   1483c:	9108      	str	r1, [sp, #32]
   1483e:	4611      	mov	r1, r2
   14840:	9207      	str	r2, [sp, #28]
   14842:	9306      	str	r3, [sp, #24]
   14844:	f7fc ff0d 	bl	11662 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   14848:	9005      	str	r0, [sp, #20]
   1484a:	e7ff      	b.n	1484c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x20>
   1484c:	9806      	ldr	r0, [sp, #24]
   1484e:	9905      	ldr	r1, [sp, #20]
   14850:	1842      	adds	r2, r0, r1
   14852:	4613      	mov	r3, r2
   14854:	4282      	cmp	r2, r0
   14856:	9304      	str	r3, [sp, #16]
   14858:	d33f      	bcc.n	148da <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xae>
   1485a:	e7ff      	b.n	1485c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x30>
   1485c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1485e:	f000 f8ad 	bl	149bc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE>
   14862:	9003      	str	r0, [sp, #12]
   14864:	e7ff      	b.n	14866 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x3a>
   14866:	9804      	ldr	r0, [sp, #16]
   14868:	9903      	ldr	r1, [sp, #12]
   1486a:	4288      	cmp	r0, r1
   1486c:	d807      	bhi.n	1487e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x52>
   1486e:	e7ff      	b.n	14870 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x44>
            for elem in other {
   14870:	9808      	ldr	r0, [sp, #32]
   14872:	9907      	ldr	r1, [sp, #28]
   14874:	f7f4 fc6f 	bl	9156 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>
   14878:	9002      	str	r0, [sp, #8]
   1487a:	9101      	str	r1, [sp, #4]
   1487c:	e003      	b.n	14886 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x5a>
   1487e:	2001      	movs	r0, #1
            Err(())
   14880:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14884:	e025      	b.n	148d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xa6>
            for elem in other {
   14886:	9802      	ldr	r0, [sp, #8]
   14888:	900b      	str	r0, [sp, #44]	; 0x2c
   1488a:	9901      	ldr	r1, [sp, #4]
   1488c:	910c      	str	r1, [sp, #48]	; 0x30
   1488e:	e7ff      	b.n	14890 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x64>
   14890:	a80b      	add	r0, sp, #44	; 0x2c
   14892:	f7fc fbe1 	bl	11058 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>
   14896:	900d      	str	r0, [sp, #52]	; 0x34
   14898:	e7ff      	b.n	1489a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x6e>
   1489a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1489c:	2800      	cmp	r0, #0
   1489e:	4601      	mov	r1, r0
   148a0:	bf18      	it	ne
   148a2:	2101      	movne	r1, #1
   148a4:	2800      	cmp	r0, #0
   148a6:	d001      	beq.n	148ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x80>
   148a8:	e7ff      	b.n	148aa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x7e>
   148aa:	e004      	b.n	148b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x8a>
   148ac:	2000      	movs	r0, #0
            Ok(())
   148ae:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   148b2:	e00e      	b.n	148d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xa6>
            for elem in other {
   148b4:	defe      	udf	#254	; 0xfe
   148b6:	980d      	ldr	r0, [sp, #52]	; 0x34
   148b8:	9011      	str	r0, [sp, #68]	; 0x44
   148ba:	9012      	str	r0, [sp, #72]	; 0x48
   148bc:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   148be:	f000 f909 	bl	14ad4 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>
   148c2:	9000      	str	r0, [sp, #0]
   148c4:	e7ff      	b.n	148c6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x9a>
   148c6:	9809      	ldr	r0, [sp, #36]	; 0x24
   148c8:	9900      	ldr	r1, [sp, #0]
   148ca:	f7ff ff4b 	bl	14764 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE>
   148ce:	e7ff      	b.n	148d0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xa4>
            for elem in other {
   148d0:	e7de      	b.n	14890 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x64>
    }
   148d2:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   148d6:	b014      	add	sp, #80	; 0x50
   148d8:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   148da:	f24e 0020 	movw	r0, #57376	; 0xe020
   148de:	f2c0 0001 	movt	r0, #1
   148e2:	f24e 023c 	movw	r2, #57404	; 0xe03c
   148e6:	f2c0 0201 	movt	r2, #1
   148ea:	211c      	movs	r1, #28
   148ec:	f000 fc28 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   148f0:	defe      	udf	#254	; 0xfe

000148f2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   148f2:	b580      	push	{r7, lr}
   148f4:	b088      	sub	sp, #32
   148f6:	460a      	mov	r2, r1
   148f8:	9006      	str	r0, [sp, #24]
   148fa:	f88d 101f 	strb.w	r1, [sp, #31]
        if self.len < self.capacity() {
   148fe:	6801      	ldr	r1, [r0, #0]
   14900:	9004      	str	r0, [sp, #16]
   14902:	9203      	str	r2, [sp, #12]
   14904:	9102      	str	r1, [sp, #8]
   14906:	f000 f863 	bl	149d0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>
   1490a:	9001      	str	r0, [sp, #4]
   1490c:	e7ff      	b.n	1490e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x1c>
   1490e:	9802      	ldr	r0, [sp, #8]
   14910:	9901      	ldr	r1, [sp, #4]
   14912:	4288      	cmp	r0, r1
   14914:	d307      	bcc.n	14926 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x34>
   14916:	e7ff      	b.n	14918 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x26>
            Err(item)
   14918:	9803      	ldr	r0, [sp, #12]
   1491a:	f88d 0015 	strb.w	r0, [sp, #21]
   1491e:	2101      	movs	r1, #1
   14920:	f88d 1014 	strb.w	r1, [sp, #20]
        if self.len < self.capacity() {
   14924:	e008      	b.n	14938 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
            unsafe { self.push_unchecked(item) }
   14926:	9804      	ldr	r0, [sp, #16]
   14928:	9903      	ldr	r1, [sp, #12]
   1492a:	f7ff ff4d 	bl	147c8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>
   1492e:	e7ff      	b.n	14930 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x3e>
   14930:	2000      	movs	r0, #0
            Ok(())
   14932:	f88d 0014 	strb.w	r0, [sp, #20]
        if self.len < self.capacity() {
   14936:	e7ff      	b.n	14938 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
    }
   14938:	f89d 0014 	ldrb.w	r0, [sp, #20]
   1493c:	f89d 1015 	ldrb.w	r1, [sp, #21]
   14940:	b008      	add	sp, #32
   14942:	bd80      	pop	{r7, pc}

00014944 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>:
    pub(crate) fn clear(&mut self) {
   14944:	b580      	push	{r7, lr}
   14946:	b082      	sub	sp, #8
   14948:	9001      	str	r0, [sp, #4]
   1494a:	2100      	movs	r1, #0
        self.truncate(0);
   1494c:	f000 f880 	bl	14a50 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>
   14950:	e7ff      	b.n	14952 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E+0xe>
    }
   14952:	b002      	add	sp, #8
   14954:	bd80      	pop	{r7, pc}

00014956 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E>:
    pub(crate) fn clear(&mut self) {
   14956:	b580      	push	{r7, lr}
   14958:	b082      	sub	sp, #8
   1495a:	9001      	str	r0, [sp, #4]
   1495c:	2100      	movs	r1, #0
        self.truncate(0);
   1495e:	f000 f841 	bl	149e4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE>
   14962:	e7ff      	b.n	14964 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E+0xe>
    }
   14964:	b002      	add	sp, #8
   14966:	bd80      	pop	{r7, pc}

00014968 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   14968:	b580      	push	{r7, lr}
   1496a:	b088      	sub	sp, #32
   1496c:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   1496e:	1d01      	adds	r1, r0, #4
   14970:	9106      	str	r1, [sp, #24]
   14972:	9107      	str	r1, [sp, #28]
   14974:	9004      	str	r0, [sp, #16]
   14976:	9103      	str	r1, [sp, #12]
   14978:	e7ff      	b.n	1497a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE+0x12>
   1497a:	9804      	ldr	r0, [sp, #16]
   1497c:	6801      	ldr	r1, [r0, #0]
   1497e:	9803      	ldr	r0, [sp, #12]
   14980:	f7fd fa83 	bl	11e8a <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   14984:	9002      	str	r0, [sp, #8]
   14986:	9101      	str	r1, [sp, #4]
   14988:	e7ff      	b.n	1498a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE+0x22>
    }
   1498a:	9802      	ldr	r0, [sp, #8]
   1498c:	9901      	ldr	r1, [sp, #4]
   1498e:	b008      	add	sp, #32
   14990:	bd80      	pop	{r7, pc}

00014992 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   14992:	b580      	push	{r7, lr}
   14994:	b088      	sub	sp, #32
   14996:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   14998:	1d01      	adds	r1, r0, #4
   1499a:	9106      	str	r1, [sp, #24]
   1499c:	9107      	str	r1, [sp, #28]
   1499e:	9004      	str	r0, [sp, #16]
   149a0:	9103      	str	r1, [sp, #12]
   149a2:	e7ff      	b.n	149a4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x12>
   149a4:	9804      	ldr	r0, [sp, #16]
   149a6:	6801      	ldr	r1, [r0, #0]
   149a8:	9803      	ldr	r0, [sp, #12]
   149aa:	f7fd fa6e 	bl	11e8a <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   149ae:	9002      	str	r0, [sp, #8]
   149b0:	9101      	str	r1, [sp, #4]
   149b2:	e7ff      	b.n	149b4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x22>
    }
   149b4:	9802      	ldr	r0, [sp, #8]
   149b6:	9901      	ldr	r1, [sp, #4]
   149b8:	b008      	add	sp, #32
   149ba:	bd80      	pop	{r7, pc}

000149bc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE>:
    pub(crate) fn capacity(&self) -> usize {
   149bc:	b580      	push	{r7, lr}
   149be:	b082      	sub	sp, #8
   149c0:	9001      	str	r0, [sp, #4]
        N::to_usize()
   149c2:	f000 f91c 	bl	14bfe <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>
   149c6:	9000      	str	r0, [sp, #0]
   149c8:	e7ff      	b.n	149ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE+0xe>
    }
   149ca:	9800      	ldr	r0, [sp, #0]
   149cc:	b002      	add	sp, #8
   149ce:	bd80      	pop	{r7, pc}

000149d0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>:
    pub(crate) fn capacity(&self) -> usize {
   149d0:	b580      	push	{r7, lr}
   149d2:	b082      	sub	sp, #8
   149d4:	9001      	str	r0, [sp, #4]
        N::to_usize()
   149d6:	f000 f942 	bl	14c5e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   149da:	9000      	str	r0, [sp, #0]
   149dc:	e7ff      	b.n	149de <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E+0xe>
    }
   149de:	9800      	ldr	r0, [sp, #0]
   149e0:	b002      	add	sp, #8
   149e2:	bd80      	pop	{r7, pc}

000149e4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE>:
    pub(crate) fn truncate(&mut self, len: usize) {
   149e4:	b580      	push	{r7, lr}
   149e6:	b08a      	sub	sp, #40	; 0x28
   149e8:	9007      	str	r0, [sp, #28]
   149ea:	9108      	str	r1, [sp, #32]
   149ec:	9106      	str	r1, [sp, #24]
   149ee:	9005      	str	r0, [sp, #20]
   149f0:	e7ff      	b.n	149f2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0xe>
            while len < self.len {
   149f2:	9805      	ldr	r0, [sp, #20]
   149f4:	6801      	ldr	r1, [r0, #0]
   149f6:	9a06      	ldr	r2, [sp, #24]
   149f8:	428a      	cmp	r2, r1
   149fa:	d302      	bcc.n	14a02 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x1e>
   149fc:	e7ff      	b.n	149fe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x1a>
    }
   149fe:	b00a      	add	sp, #40	; 0x28
   14a00:	bd80      	pop	{r7, pc}
                self.len -= 1;
   14a02:	9805      	ldr	r0, [sp, #20]
   14a04:	6801      	ldr	r1, [r0, #0]
   14a06:	1e4a      	subs	r2, r1, #1
   14a08:	2901      	cmp	r1, #1
   14a0a:	9204      	str	r2, [sp, #16]
   14a0c:	d314      	bcc.n	14a38 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x54>
   14a0e:	e7ff      	b.n	14a10 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x2c>
   14a10:	9804      	ldr	r0, [sp, #16]
   14a12:	9905      	ldr	r1, [sp, #20]
   14a14:	6008      	str	r0, [r1, #0]
                let len = self.len;
   14a16:	680a      	ldr	r2, [r1, #0]
   14a18:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   14a1a:	4608      	mov	r0, r1
   14a1c:	9203      	str	r2, [sp, #12]
   14a1e:	f7ff fe8c 	bl	1473a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE>
   14a22:	9002      	str	r0, [sp, #8]
   14a24:	9101      	str	r1, [sp, #4]
   14a26:	e7ff      	b.n	14a28 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x44>
   14a28:	9802      	ldr	r0, [sp, #8]
   14a2a:	9901      	ldr	r1, [sp, #4]
   14a2c:	9a03      	ldr	r2, [sp, #12]
   14a2e:	f7fc fe06 	bl	1163e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   14a32:	e7ff      	b.n	14a34 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x50>
   14a34:	e7ff      	b.n	14a36 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x52>
            while len < self.len {
   14a36:	e7dc      	b.n	149f2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0xe>
                self.len -= 1;
   14a38:	f24e 0060 	movw	r0, #57440	; 0xe060
   14a3c:	f2c0 0001 	movt	r0, #1
   14a40:	f24e 024c 	movw	r2, #57420	; 0xe04c
   14a44:	f2c0 0201 	movt	r2, #1
   14a48:	2121      	movs	r1, #33	; 0x21
   14a4a:	f000 fb79 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14a4e:	defe      	udf	#254	; 0xfe

00014a50 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   14a50:	b580      	push	{r7, lr}
   14a52:	b08a      	sub	sp, #40	; 0x28
   14a54:	9007      	str	r0, [sp, #28]
   14a56:	9108      	str	r1, [sp, #32]
   14a58:	9106      	str	r1, [sp, #24]
   14a5a:	9005      	str	r0, [sp, #20]
   14a5c:	e7ff      	b.n	14a5e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
            while len < self.len {
   14a5e:	9805      	ldr	r0, [sp, #20]
   14a60:	6801      	ldr	r1, [r0, #0]
   14a62:	9a06      	ldr	r2, [sp, #24]
   14a64:	428a      	cmp	r2, r1
   14a66:	d302      	bcc.n	14a6e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1e>
   14a68:	e7ff      	b.n	14a6a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1a>
    }
   14a6a:	b00a      	add	sp, #40	; 0x28
   14a6c:	bd80      	pop	{r7, pc}
                self.len -= 1;
   14a6e:	9805      	ldr	r0, [sp, #20]
   14a70:	6801      	ldr	r1, [r0, #0]
   14a72:	1e4a      	subs	r2, r1, #1
   14a74:	2901      	cmp	r1, #1
   14a76:	9204      	str	r2, [sp, #16]
   14a78:	d314      	bcc.n	14aa4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x54>
   14a7a:	e7ff      	b.n	14a7c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x2c>
   14a7c:	9804      	ldr	r0, [sp, #16]
   14a7e:	9905      	ldr	r1, [sp, #20]
   14a80:	6008      	str	r0, [r1, #0]
                let len = self.len;
   14a82:	680a      	ldr	r2, [r1, #0]
   14a84:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   14a86:	4608      	mov	r0, r1
   14a88:	9203      	str	r2, [sp, #12]
   14a8a:	f7ff fe41 	bl	14710 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>
   14a8e:	9002      	str	r0, [sp, #8]
   14a90:	9101      	str	r1, [sp, #4]
   14a92:	e7ff      	b.n	14a94 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x44>
   14a94:	9802      	ldr	r0, [sp, #8]
   14a96:	9901      	ldr	r1, [sp, #4]
   14a98:	9a03      	ldr	r2, [sp, #12]
   14a9a:	f7fc fdd0 	bl	1163e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   14a9e:	e7ff      	b.n	14aa0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x50>
   14aa0:	e7ff      	b.n	14aa2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x52>
            while len < self.len {
   14aa2:	e7dc      	b.n	14a5e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
                self.len -= 1;
   14aa4:	f24e 0060 	movw	r0, #57440	; 0xe060
   14aa8:	f2c0 0001 	movt	r0, #1
   14aac:	f24e 024c 	movw	r2, #57420	; 0xe04c
   14ab0:	f2c0 0201 	movt	r2, #1
   14ab4:	2121      	movs	r1, #33	; 0x21
   14ab6:	f000 fb43 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14aba:	defe      	udf	#254	; 0xfe

00014abc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>:
   14abc:	b580      	push	{r7, lr}
   14abe:	b084      	sub	sp, #16
   14ac0:	460a      	mov	r2, r1
   14ac2:	9002      	str	r0, [sp, #8]
   14ac4:	f88d 100f 	strb.w	r1, [sp, #15]
   14ac8:	9201      	str	r2, [sp, #4]
   14aca:	f7f4 fbcc 	bl	9266 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   14ace:	e7ff      	b.n	14ad0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE+0x14>
   14ad0:	b004      	add	sp, #16
   14ad2:	bd80      	pop	{r7, pc}

00014ad4 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>:
   14ad4:	b081      	sub	sp, #4
   14ad6:	9000      	str	r0, [sp, #0]
   14ad8:	7800      	ldrb	r0, [r0, #0]
   14ada:	b001      	add	sp, #4
   14adc:	4770      	bx	lr

00014ade <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>:
    fn to_usize() -> usize {
   14ade:	b580      	push	{r7, lr}
   14ae0:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14ae2:	f000 fa36 	bl	14f52 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14ae6:	9003      	str	r0, [sp, #12]
   14ae8:	e7ff      	b.n	14aea <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0xc>
   14aea:	9803      	ldr	r0, [sp, #12]
   14aec:	f000 fa37 	bl	14f5e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14af0:	9002      	str	r0, [sp, #8]
   14af2:	e7ff      	b.n	14af4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x16>
   14af4:	f000 f8b3 	bl	14c5e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   14af8:	9001      	str	r0, [sp, #4]
   14afa:	e7ff      	b.n	14afc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x1e>
   14afc:	9801      	ldr	r0, [sp, #4]
   14afe:	0041      	lsls	r1, r0, #1
   14b00:	9100      	str	r1, [sp, #0]
   14b02:	e7ff      	b.n	14b04 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x26>
   14b04:	9802      	ldr	r0, [sp, #8]
   14b06:	9900      	ldr	r1, [sp, #0]
   14b08:	4308      	orrs	r0, r1
    }
   14b0a:	b004      	add	sp, #16
   14b0c:	bd80      	pop	{r7, pc}

00014b0e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>:
    fn to_usize() -> usize {
   14b0e:	b580      	push	{r7, lr}
   14b10:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14b12:	f000 fa1e 	bl	14f52 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14b16:	9003      	str	r0, [sp, #12]
   14b18:	e7ff      	b.n	14b1a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0xc>
   14b1a:	9803      	ldr	r0, [sp, #12]
   14b1c:	f000 fa1f 	bl	14f5e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14b20:	9002      	str	r0, [sp, #8]
   14b22:	e7ff      	b.n	14b24 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x16>
   14b24:	f000 f853 	bl	14bce <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>
   14b28:	9001      	str	r0, [sp, #4]
   14b2a:	e7ff      	b.n	14b2c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x1e>
   14b2c:	9801      	ldr	r0, [sp, #4]
   14b2e:	0041      	lsls	r1, r0, #1
   14b30:	9100      	str	r1, [sp, #0]
   14b32:	e7ff      	b.n	14b34 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x26>
   14b34:	9802      	ldr	r0, [sp, #8]
   14b36:	9900      	ldr	r1, [sp, #0]
   14b38:	4308      	orrs	r0, r1
    }
   14b3a:	b004      	add	sp, #16
   14b3c:	bd80      	pop	{r7, pc}

00014b3e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>:
    fn to_usize() -> usize {
   14b3e:	b580      	push	{r7, lr}
   14b40:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14b42:	f000 fa06 	bl	14f52 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14b46:	9003      	str	r0, [sp, #12]
   14b48:	e7ff      	b.n	14b4a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0xc>
   14b4a:	9803      	ldr	r0, [sp, #12]
   14b4c:	f000 fa07 	bl	14f5e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14b50:	9002      	str	r0, [sp, #8]
   14b52:	e7ff      	b.n	14b54 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x16>
   14b54:	f000 f80b 	bl	14b6e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>
   14b58:	9001      	str	r0, [sp, #4]
   14b5a:	e7ff      	b.n	14b5c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x1e>
   14b5c:	9801      	ldr	r0, [sp, #4]
   14b5e:	0041      	lsls	r1, r0, #1
   14b60:	9100      	str	r1, [sp, #0]
   14b62:	e7ff      	b.n	14b64 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x26>
   14b64:	9802      	ldr	r0, [sp, #8]
   14b66:	9900      	ldr	r1, [sp, #0]
   14b68:	4308      	orrs	r0, r1
    }
   14b6a:	b004      	add	sp, #16
   14b6c:	bd80      	pop	{r7, pc}

00014b6e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>:
    fn to_usize() -> usize {
   14b6e:	b580      	push	{r7, lr}
   14b70:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14b72:	f000 f9ee 	bl	14f52 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14b76:	9003      	str	r0, [sp, #12]
   14b78:	e7ff      	b.n	14b7a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0xc>
   14b7a:	9803      	ldr	r0, [sp, #12]
   14b7c:	f000 f9ef 	bl	14f5e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14b80:	9002      	str	r0, [sp, #8]
   14b82:	e7ff      	b.n	14b84 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x16>
   14b84:	f000 f89b 	bl	14cbe <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>
   14b88:	9001      	str	r0, [sp, #4]
   14b8a:	e7ff      	b.n	14b8c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x1e>
   14b8c:	9801      	ldr	r0, [sp, #4]
   14b8e:	0041      	lsls	r1, r0, #1
   14b90:	9100      	str	r1, [sp, #0]
   14b92:	e7ff      	b.n	14b94 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x26>
   14b94:	9802      	ldr	r0, [sp, #8]
   14b96:	9900      	ldr	r1, [sp, #0]
   14b98:	4308      	orrs	r0, r1
    }
   14b9a:	b004      	add	sp, #16
   14b9c:	bd80      	pop	{r7, pc}

00014b9e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>:
    fn to_usize() -> usize {
   14b9e:	b580      	push	{r7, lr}
   14ba0:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14ba2:	f000 f9d6 	bl	14f52 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14ba6:	9003      	str	r0, [sp, #12]
   14ba8:	e7ff      	b.n	14baa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0xc>
   14baa:	9803      	ldr	r0, [sp, #12]
   14bac:	f000 f9d7 	bl	14f5e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14bb0:	9002      	str	r0, [sp, #8]
   14bb2:	e7ff      	b.n	14bb4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x16>
   14bb4:	f7ff ff93 	bl	14ade <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>
   14bb8:	9001      	str	r0, [sp, #4]
   14bba:	e7ff      	b.n	14bbc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x1e>
   14bbc:	9801      	ldr	r0, [sp, #4]
   14bbe:	0041      	lsls	r1, r0, #1
   14bc0:	9100      	str	r1, [sp, #0]
   14bc2:	e7ff      	b.n	14bc4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x26>
   14bc4:	9802      	ldr	r0, [sp, #8]
   14bc6:	9900      	ldr	r1, [sp, #0]
   14bc8:	4308      	orrs	r0, r1
    }
   14bca:	b004      	add	sp, #16
   14bcc:	bd80      	pop	{r7, pc}

00014bce <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>:
    fn to_usize() -> usize {
   14bce:	b580      	push	{r7, lr}
   14bd0:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14bd2:	f000 f9be 	bl	14f52 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14bd6:	9003      	str	r0, [sp, #12]
   14bd8:	e7ff      	b.n	14bda <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0xc>
   14bda:	9803      	ldr	r0, [sp, #12]
   14bdc:	f000 f9bf 	bl	14f5e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14be0:	9002      	str	r0, [sp, #8]
   14be2:	e7ff      	b.n	14be4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x16>
   14be4:	f000 f823 	bl	14c2e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>
   14be8:	9001      	str	r0, [sp, #4]
   14bea:	e7ff      	b.n	14bec <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x1e>
   14bec:	9801      	ldr	r0, [sp, #4]
   14bee:	0041      	lsls	r1, r0, #1
   14bf0:	9100      	str	r1, [sp, #0]
   14bf2:	e7ff      	b.n	14bf4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x26>
   14bf4:	9802      	ldr	r0, [sp, #8]
   14bf6:	9900      	ldr	r1, [sp, #0]
   14bf8:	4308      	orrs	r0, r1
    }
   14bfa:	b004      	add	sp, #16
   14bfc:	bd80      	pop	{r7, pc}

00014bfe <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>:
    fn to_usize() -> usize {
   14bfe:	b580      	push	{r7, lr}
   14c00:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14c02:	f000 f9a6 	bl	14f52 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14c06:	9003      	str	r0, [sp, #12]
   14c08:	e7ff      	b.n	14c0a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0xc>
   14c0a:	9803      	ldr	r0, [sp, #12]
   14c0c:	f000 f9a7 	bl	14f5e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14c10:	9002      	str	r0, [sp, #8]
   14c12:	e7ff      	b.n	14c14 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x16>
   14c14:	f000 f86b 	bl	14cee <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>
   14c18:	9001      	str	r0, [sp, #4]
   14c1a:	e7ff      	b.n	14c1c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x1e>
   14c1c:	9801      	ldr	r0, [sp, #4]
   14c1e:	0041      	lsls	r1, r0, #1
   14c20:	9100      	str	r1, [sp, #0]
   14c22:	e7ff      	b.n	14c24 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x26>
   14c24:	9802      	ldr	r0, [sp, #8]
   14c26:	9900      	ldr	r1, [sp, #0]
   14c28:	4308      	orrs	r0, r1
    }
   14c2a:	b004      	add	sp, #16
   14c2c:	bd80      	pop	{r7, pc}

00014c2e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>:
    fn to_usize() -> usize {
   14c2e:	b580      	push	{r7, lr}
   14c30:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14c32:	f000 f98e 	bl	14f52 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14c36:	9003      	str	r0, [sp, #12]
   14c38:	e7ff      	b.n	14c3a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0xc>
   14c3a:	9803      	ldr	r0, [sp, #12]
   14c3c:	f000 f98f 	bl	14f5e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14c40:	9002      	str	r0, [sp, #8]
   14c42:	e7ff      	b.n	14c44 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x16>
   14c44:	f000 f823 	bl	14c8e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>
   14c48:	9001      	str	r0, [sp, #4]
   14c4a:	e7ff      	b.n	14c4c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x1e>
   14c4c:	9801      	ldr	r0, [sp, #4]
   14c4e:	0041      	lsls	r1, r0, #1
   14c50:	9100      	str	r1, [sp, #0]
   14c52:	e7ff      	b.n	14c54 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x26>
   14c54:	9802      	ldr	r0, [sp, #8]
   14c56:	9900      	ldr	r1, [sp, #0]
   14c58:	4308      	orrs	r0, r1
    }
   14c5a:	b004      	add	sp, #16
   14c5c:	bd80      	pop	{r7, pc}

00014c5e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>:
    fn to_usize() -> usize {
   14c5e:	b580      	push	{r7, lr}
   14c60:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14c62:	f000 f978 	bl	14f56 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>
   14c66:	9003      	str	r0, [sp, #12]
   14c68:	e7ff      	b.n	14c6a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0xc>
   14c6a:	9803      	ldr	r0, [sp, #12]
   14c6c:	f000 f977 	bl	14f5e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14c70:	9002      	str	r0, [sp, #8]
   14c72:	e7ff      	b.n	14c74 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x16>
   14c74:	f000 f971 	bl	14f5a <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>
   14c78:	9001      	str	r0, [sp, #4]
   14c7a:	e7ff      	b.n	14c7c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x1e>
   14c7c:	9801      	ldr	r0, [sp, #4]
   14c7e:	0041      	lsls	r1, r0, #1
   14c80:	9100      	str	r1, [sp, #0]
   14c82:	e7ff      	b.n	14c84 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x26>
   14c84:	9802      	ldr	r0, [sp, #8]
   14c86:	9900      	ldr	r1, [sp, #0]
   14c88:	4308      	orrs	r0, r1
    }
   14c8a:	b004      	add	sp, #16
   14c8c:	bd80      	pop	{r7, pc}

00014c8e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>:
    fn to_usize() -> usize {
   14c8e:	b580      	push	{r7, lr}
   14c90:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14c92:	f000 f95e 	bl	14f52 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14c96:	9003      	str	r0, [sp, #12]
   14c98:	e7ff      	b.n	14c9a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0xc>
   14c9a:	9803      	ldr	r0, [sp, #12]
   14c9c:	f000 f95f 	bl	14f5e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14ca0:	9002      	str	r0, [sp, #8]
   14ca2:	e7ff      	b.n	14ca4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x16>
   14ca4:	f7ff ff7b 	bl	14b9e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>
   14ca8:	9001      	str	r0, [sp, #4]
   14caa:	e7ff      	b.n	14cac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x1e>
   14cac:	9801      	ldr	r0, [sp, #4]
   14cae:	0041      	lsls	r1, r0, #1
   14cb0:	9100      	str	r1, [sp, #0]
   14cb2:	e7ff      	b.n	14cb4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x26>
   14cb4:	9802      	ldr	r0, [sp, #8]
   14cb6:	9900      	ldr	r1, [sp, #0]
   14cb8:	4308      	orrs	r0, r1
    }
   14cba:	b004      	add	sp, #16
   14cbc:	bd80      	pop	{r7, pc}

00014cbe <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>:
    fn to_usize() -> usize {
   14cbe:	b580      	push	{r7, lr}
   14cc0:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14cc2:	f000 f946 	bl	14f52 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14cc6:	9003      	str	r0, [sp, #12]
   14cc8:	e7ff      	b.n	14cca <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0xc>
   14cca:	9803      	ldr	r0, [sp, #12]
   14ccc:	f000 f947 	bl	14f5e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14cd0:	9002      	str	r0, [sp, #8]
   14cd2:	e7ff      	b.n	14cd4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x16>
   14cd4:	f7ff ff1b 	bl	14b0e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>
   14cd8:	9001      	str	r0, [sp, #4]
   14cda:	e7ff      	b.n	14cdc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x1e>
   14cdc:	9801      	ldr	r0, [sp, #4]
   14cde:	0041      	lsls	r1, r0, #1
   14ce0:	9100      	str	r1, [sp, #0]
   14ce2:	e7ff      	b.n	14ce4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x26>
   14ce4:	9802      	ldr	r0, [sp, #8]
   14ce6:	9900      	ldr	r1, [sp, #0]
   14ce8:	4308      	orrs	r0, r1
    }
   14cea:	b004      	add	sp, #16
   14cec:	bd80      	pop	{r7, pc}

00014cee <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>:
    fn to_usize() -> usize {
   14cee:	b580      	push	{r7, lr}
   14cf0:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14cf2:	f000 f92e 	bl	14f52 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14cf6:	9003      	str	r0, [sp, #12]
   14cf8:	e7ff      	b.n	14cfa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0xc>
   14cfa:	9803      	ldr	r0, [sp, #12]
   14cfc:	f000 f92f 	bl	14f5e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14d00:	9002      	str	r0, [sp, #8]
   14d02:	e7ff      	b.n	14d04 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x16>
   14d04:	f7ff ff1b 	bl	14b3e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>
   14d08:	9001      	str	r0, [sp, #4]
   14d0a:	e7ff      	b.n	14d0c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x1e>
   14d0c:	9801      	ldr	r0, [sp, #4]
   14d0e:	0041      	lsls	r1, r0, #1
   14d10:	9100      	str	r1, [sp, #0]
   14d12:	e7ff      	b.n	14d14 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x26>
   14d14:	9802      	ldr	r0, [sp, #8]
   14d16:	9900      	ldr	r1, [sp, #0]
   14d18:	4308      	orrs	r0, r1
    }
   14d1a:	b004      	add	sp, #16
   14d1c:	bd80      	pop	{r7, pc}

00014d1e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>:
impl Bit for B0 {
    const U8: u8 = 0;
    const BOOL: bool = false;

    #[inline]
    fn to_u8() -> u8 {
   14d1e:	2000      	movs	r0, #0
        0
    }
   14d20:	4770      	bx	lr

00014d22 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>:
impl Bit for B1 {
    const U8: u8 = 1;
    const BOOL: bool = true;

    #[inline]
    fn to_u8() -> u8 {
   14d22:	2001      	movs	r0, #1
        1
    }
   14d24:	4770      	bx	lr

00014d26 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>:
   14d26:	b081      	sub	sp, #4
   14d28:	4601      	mov	r1, r0
   14d2a:	f88d 0003 	strb.w	r0, [sp, #3]
   14d2e:	b2c0      	uxtb	r0, r0
   14d30:	b001      	add	sp, #4
   14d32:	4770      	bx	lr

00014d34 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE>:
   14d34:	b580      	push	{r7, lr}
   14d36:	b08c      	sub	sp, #48	; 0x30
   14d38:	9005      	str	r0, [sp, #20]
   14d3a:	9106      	str	r1, [sp, #24]
   14d3c:	9207      	str	r2, [sp, #28]
   14d3e:	9008      	str	r0, [sp, #32]
   14d40:	9109      	str	r1, [sp, #36]	; 0x24
   14d42:	2301      	movs	r3, #1
   14d44:	930b      	str	r3, [sp, #44]	; 0x2c
   14d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14d48:	9204      	str	r2, [sp, #16]
   14d4a:	9103      	str	r1, [sp, #12]
   14d4c:	9002      	str	r0, [sp, #8]
   14d4e:	9301      	str	r3, [sp, #4]
   14d50:	e7ff      	b.n	14d52 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE+0x1e>
   14d52:	9801      	ldr	r0, [sp, #4]
   14d54:	9904      	ldr	r1, [sp, #16]
   14d56:	fb00 f201 	mul.w	r2, r0, r1
   14d5a:	920a      	str	r2, [sp, #40]	; 0x28
   14d5c:	9802      	ldr	r0, [sp, #8]
   14d5e:	9903      	ldr	r1, [sp, #12]
   14d60:	f000 f850 	bl	14e04 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE>
   14d64:	e7ff      	b.n	14d66 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE+0x32>
   14d66:	b00c      	add	sp, #48	; 0x30
   14d68:	bd80      	pop	{r7, pc}

00014d6a <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE>:
   14d6a:	b580      	push	{r7, lr}
   14d6c:	b088      	sub	sp, #32
   14d6e:	9004      	str	r0, [sp, #16]
   14d70:	9105      	str	r1, [sp, #20]
   14d72:	2201      	movs	r2, #1
   14d74:	9207      	str	r2, [sp, #28]
   14d76:	9a07      	ldr	r2, [sp, #28]
   14d78:	9103      	str	r1, [sp, #12]
   14d7a:	9002      	str	r0, [sp, #8]
   14d7c:	9201      	str	r2, [sp, #4]
   14d7e:	e7ff      	b.n	14d80 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x16>
   14d80:	9801      	ldr	r0, [sp, #4]
   14d82:	2820      	cmp	r0, #32
   14d84:	d306      	bcc.n	14d94 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x2a>
   14d86:	e7ff      	b.n	14d88 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x1e>
   14d88:	2201      	movs	r2, #1
   14d8a:	9802      	ldr	r0, [sp, #8]
   14d8c:	9903      	ldr	r1, [sp, #12]
   14d8e:	f7ff ffd1 	bl	14d34 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE>
   14d92:	e013      	b.n	14dbc <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x52>
   14d94:	9802      	ldr	r0, [sp, #8]
   14d96:	f000 f814 	bl	14dc2 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE>
   14d9a:	4601      	mov	r1, r0
   14d9c:	f88d 001b 	strb.w	r0, [sp, #27]
   14da0:	9100      	str	r1, [sp, #0]
   14da2:	e7ff      	b.n	14da4 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x3a>
   14da4:	2201      	movs	r2, #1
   14da6:	9803      	ldr	r0, [sp, #12]
   14da8:	9902      	ldr	r1, [sp, #8]
   14daa:	f7fc fa66 	bl	1127a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14dae:	e7ff      	b.n	14db0 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x46>
   14db0:	9803      	ldr	r0, [sp, #12]
   14db2:	9900      	ldr	r1, [sp, #0]
   14db4:	f7f4 fa57 	bl	9266 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   14db8:	e7ff      	b.n	14dba <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x50>
   14dba:	e000      	b.n	14dbe <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x54>
   14dbc:	e7ff      	b.n	14dbe <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x54>
   14dbe:	b008      	add	sp, #32
   14dc0:	bd80      	pop	{r7, pc}

00014dc2 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE>:
   14dc2:	b580      	push	{r7, lr}
   14dc4:	b088      	sub	sp, #32
   14dc6:	9004      	str	r0, [sp, #16]
   14dc8:	f89d 1015 	ldrb.w	r1, [sp, #21]
   14dcc:	f88d 100f 	strb.w	r1, [sp, #15]
   14dd0:	9002      	str	r0, [sp, #8]
   14dd2:	e7ff      	b.n	14dd4 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x12>
   14dd4:	f10d 000f 	add.w	r0, sp, #15
   14dd8:	9006      	str	r0, [sp, #24]
   14dda:	9007      	str	r0, [sp, #28]
   14ddc:	e7ff      	b.n	14dde <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x1c>
   14dde:	f10d 010f 	add.w	r1, sp, #15
   14de2:	2201      	movs	r2, #1
   14de4:	9802      	ldr	r0, [sp, #8]
   14de6:	f7fc fa48 	bl	1127a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14dea:	e7ff      	b.n	14dec <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x2a>
   14dec:	f89d 000f 	ldrb.w	r0, [sp, #15]
   14df0:	4601      	mov	r1, r0
   14df2:	f88d 0016 	strb.w	r0, [sp, #22]
   14df6:	f88d 0017 	strb.w	r0, [sp, #23]
   14dfa:	9101      	str	r1, [sp, #4]
   14dfc:	e7ff      	b.n	14dfe <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x3c>
   14dfe:	9801      	ldr	r0, [sp, #4]
   14e00:	b008      	add	sp, #32
   14e02:	bd80      	pop	{r7, pc}

00014e04 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE>:
   14e04:	b5d0      	push	{r4, r6, r7, lr}
   14e06:	af02      	add	r7, sp, #8
   14e08:	b0b4      	sub	sp, #208	; 0xd0
   14e0a:	466c      	mov	r4, sp
   14e0c:	f36f 0404 	bfc	r4, #0, #5
   14e10:	46a5      	mov	sp, r4
   14e12:	9024      	str	r0, [sp, #144]	; 0x90
   14e14:	9125      	str	r1, [sp, #148]	; 0x94
   14e16:	9226      	str	r2, [sp, #152]	; 0x98
   14e18:	2320      	movs	r3, #32
   14e1a:	932f      	str	r3, [sp, #188]	; 0xbc
   14e1c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   14e1e:	9327      	str	r3, [sp, #156]	; 0x9c
   14e20:	920e      	str	r2, [sp, #56]	; 0x38
   14e22:	910d      	str	r1, [sp, #52]	; 0x34
   14e24:	900c      	str	r0, [sp, #48]	; 0x30
   14e26:	930b      	str	r3, [sp, #44]	; 0x2c
   14e28:	e7ff      	b.n	14e2a <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x26>
   14e2a:	2000      	movs	r0, #0
   14e2c:	900f      	str	r0, [sp, #60]	; 0x3c
   14e2e:	e7ff      	b.n	14e30 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x2c>
   14e30:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14e32:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14e34:	4408      	add	r0, r1
   14e36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14e38:	4290      	cmp	r0, r2
   14e3a:	d905      	bls.n	14e48 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x44>
   14e3c:	e7ff      	b.n	14e3e <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x3a>
   14e3e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14e40:	990e      	ldr	r1, [sp, #56]	; 0x38
   14e42:	4288      	cmp	r0, r1
   14e44:	d334      	bcc.n	14eb0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xac>
   14e46:	e067      	b.n	14f18 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x114>
   14e48:	e7ff      	b.n	14e4a <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x46>
   14e4a:	a810      	add	r0, sp, #64	; 0x40
   14e4c:	9032      	str	r0, [sp, #200]	; 0xc8
   14e4e:	9033      	str	r0, [sp, #204]	; 0xcc
   14e50:	e7ff      	b.n	14e52 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x4e>
   14e52:	a810      	add	r0, sp, #64	; 0x40
   14e54:	4601      	mov	r1, r0
   14e56:	9028      	str	r0, [sp, #160]	; 0xa0
   14e58:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14e5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14e5c:	900a      	str	r0, [sp, #40]	; 0x28
   14e5e:	4610      	mov	r0, r2
   14e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14e62:	9109      	str	r1, [sp, #36]	; 0x24
   14e64:	4619      	mov	r1, r3
   14e66:	f7fc fb6c 	bl	11542 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   14e6a:	4601      	mov	r1, r0
   14e6c:	9029      	str	r0, [sp, #164]	; 0xa4
   14e6e:	9108      	str	r1, [sp, #32]
   14e70:	e7ff      	b.n	14e72 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x6e>
   14e72:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14e74:	980d      	ldr	r0, [sp, #52]	; 0x34
   14e76:	f7fc fb64 	bl	11542 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   14e7a:	4601      	mov	r1, r0
   14e7c:	902a      	str	r0, [sp, #168]	; 0xa8
   14e7e:	9107      	str	r1, [sp, #28]
   14e80:	e7ff      	b.n	14e82 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x7e>
   14e82:	9808      	ldr	r0, [sp, #32]
   14e84:	9909      	ldr	r1, [sp, #36]	; 0x24
   14e86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14e88:	f7fc f9f7 	bl	1127a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14e8c:	e7ff      	b.n	14e8e <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x8a>
   14e8e:	9807      	ldr	r0, [sp, #28]
   14e90:	9908      	ldr	r1, [sp, #32]
   14e92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14e94:	f7fc f9f1 	bl	1127a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14e98:	e7ff      	b.n	14e9a <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x96>
   14e9a:	9809      	ldr	r0, [sp, #36]	; 0x24
   14e9c:	9907      	ldr	r1, [sp, #28]
   14e9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14ea0:	f7fc f9eb 	bl	1127a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14ea4:	e7ff      	b.n	14ea6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xa2>
   14ea6:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14ea8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14eaa:	4408      	add	r0, r1
   14eac:	900f      	str	r0, [sp, #60]	; 0x3c
   14eae:	e7bf      	b.n	14e30 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x2c>
   14eb0:	e7ff      	b.n	14eb2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xae>
   14eb2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14eb4:	990e      	ldr	r1, [sp, #56]	; 0x38
   14eb6:	1a08      	subs	r0, r1, r0
   14eb8:	4602      	mov	r2, r0
   14eba:	902b      	str	r0, [sp, #172]	; 0xac
   14ebc:	a81c      	add	r0, sp, #112	; 0x70
   14ebe:	9030      	str	r0, [sp, #192]	; 0xc0
   14ec0:	9031      	str	r0, [sp, #196]	; 0xc4
   14ec2:	9206      	str	r2, [sp, #24]
   14ec4:	9005      	str	r0, [sp, #20]
   14ec6:	e7ff      	b.n	14ec8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xc4>
   14ec8:	9805      	ldr	r0, [sp, #20]
   14eca:	9905      	ldr	r1, [sp, #20]
   14ecc:	912c      	str	r1, [sp, #176]	; 0xb0
   14ece:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14ed0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14ed2:	9004      	str	r0, [sp, #16]
   14ed4:	4610      	mov	r0, r2
   14ed6:	f7fc fb34 	bl	11542 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   14eda:	4601      	mov	r1, r0
   14edc:	902d      	str	r0, [sp, #180]	; 0xb4
   14ede:	9103      	str	r1, [sp, #12]
   14ee0:	e7ff      	b.n	14ee2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xde>
   14ee2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14ee4:	980d      	ldr	r0, [sp, #52]	; 0x34
   14ee6:	f7fc fb2c 	bl	11542 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   14eea:	4601      	mov	r1, r0
   14eec:	902e      	str	r0, [sp, #184]	; 0xb8
   14eee:	9102      	str	r1, [sp, #8]
   14ef0:	e7ff      	b.n	14ef2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xee>
   14ef2:	9803      	ldr	r0, [sp, #12]
   14ef4:	9904      	ldr	r1, [sp, #16]
   14ef6:	9a06      	ldr	r2, [sp, #24]
   14ef8:	f7fc f9bf 	bl	1127a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14efc:	e7ff      	b.n	14efe <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xfa>
   14efe:	9802      	ldr	r0, [sp, #8]
   14f00:	9903      	ldr	r1, [sp, #12]
   14f02:	9a06      	ldr	r2, [sp, #24]
   14f04:	f7fc f9b9 	bl	1127a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14f08:	e7ff      	b.n	14f0a <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x106>
   14f0a:	9804      	ldr	r0, [sp, #16]
   14f0c:	9902      	ldr	r1, [sp, #8]
   14f0e:	9a06      	ldr	r2, [sp, #24]
   14f10:	f7fc f9b3 	bl	1127a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14f14:	e7ff      	b.n	14f16 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x112>
   14f16:	e7ff      	b.n	14f18 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x114>
   14f18:	f1a7 0408 	sub.w	r4, r7, #8
   14f1c:	46a5      	mov	sp, r4
   14f1e:	bdd0      	pop	{r4, r6, r7, pc}

00014f20 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE>:
   14f20:	b083      	sub	sp, #12
   14f22:	9002      	str	r0, [sp, #8]
   14f24:	9000      	str	r0, [sp, #0]
   14f26:	e7ff      	b.n	14f28 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x8>
   14f28:	9800      	ldr	r0, [sp, #0]
   14f2a:	28ff      	cmp	r0, #255	; 0xff
   14f2c:	d807      	bhi.n	14f3e <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x1e>
   14f2e:	e7ff      	b.n	14f30 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x10>
   14f30:	9800      	ldr	r0, [sp, #0]
   14f32:	f88d 0005 	strb.w	r0, [sp, #5]
   14f36:	2100      	movs	r1, #0
   14f38:	f88d 1004 	strb.w	r1, [sp, #4]
   14f3c:	e003      	b.n	14f46 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x26>
   14f3e:	2001      	movs	r0, #1
   14f40:	f88d 0004 	strb.w	r0, [sp, #4]
   14f44:	e7ff      	b.n	14f46 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x26>
   14f46:	f89d 0004 	ldrb.w	r0, [sp, #4]
   14f4a:	f89d 1005 	ldrb.w	r1, [sp, #5]
   14f4e:	b003      	add	sp, #12
   14f50:	4770      	bx	lr

00014f52 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>:
    fn to_u8() -> u8 {
   14f52:	2000      	movs	r0, #0
    }
   14f54:	4770      	bx	lr

00014f56 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>:
    fn to_u8() -> u8 {
   14f56:	2001      	movs	r0, #1
    }
   14f58:	4770      	bx	lr

00014f5a <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>:
    fn to_usize() -> usize {
   14f5a:	2000      	movs	r0, #0
    }
   14f5c:	4770      	bx	lr

00014f5e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>:
   14f5e:	b081      	sub	sp, #4
   14f60:	4601      	mov	r1, r0
   14f62:	f88d 0003 	strb.w	r0, [sp, #3]
   14f66:	b2c0      	uxtb	r0, r0
   14f68:	b001      	add	sp, #4
   14f6a:	4770      	bx	lr

00014f6c <_ZN4core3ptr13drop_in_place17h000c7c147ade2111E>:
   14f6c:	4770      	bx	lr

00014f6e <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE>:
   14f6e:	b5b0      	push	{r4, r5, r7, lr}
   14f70:	b086      	sub	sp, #24
   14f72:	460c      	mov	r4, r1
   14f74:	4605      	mov	r5, r0
   14f76:	f001 fb6c 	bl	16652 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>
   14f7a:	b9a8      	cbnz	r0, 14fa8 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x3a>
   14f7c:	f24e 0384 	movw	r3, #57476	; 0xe084
   14f80:	2200      	movs	r2, #0
   14f82:	f2c0 0301 	movt	r3, #1
   14f86:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   14f8a:	9205      	str	r2, [sp, #20]
   14f8c:	9304      	str	r3, [sp, #16]
   14f8e:	e9cd 2202 	strd	r2, r2, [sp, #8]
   14f92:	2201      	movs	r2, #1
   14f94:	9201      	str	r2, [sp, #4]
   14f96:	f24e 1248 	movw	r2, #57672	; 0xe148
   14f9a:	f2c0 0201 	movt	r2, #1
   14f9e:	9200      	str	r2, [sp, #0]
   14fa0:	466a      	mov	r2, sp
   14fa2:	f000 fbc5 	bl	15730 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   14fa6:	b110      	cbz	r0, 14fae <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x40>
   14fa8:	2001      	movs	r0, #1
   14faa:	b006      	add	sp, #24
   14fac:	bdb0      	pop	{r4, r5, r7, pc}
   14fae:	1d28      	adds	r0, r5, #4
   14fb0:	4621      	mov	r1, r4
   14fb2:	b006      	add	sp, #24
   14fb4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
   14fb8:	f001 bb4b 	b.w	16652 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>

00014fbc <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE>:
   14fbc:	f642 20e1 	movw	r0, #10977	; 0x2ae1
   14fc0:	f243 6134 	movw	r1, #13876	; 0x3634
   14fc4:	f6c9 405d 	movt	r0, #40029	; 0x9c5d
   14fc8:	f6cd 0131 	movt	r1, #55345	; 0xd831
   14fcc:	4770      	bx	lr
	...

00014fd0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>:
   14fd0:	b570      	push	{r4, r5, r6, lr}
   14fd2:	460e      	mov	r6, r1
   14fd4:	3909      	subs	r1, #9
   14fd6:	4604      	mov	r4, r0
   14fd8:	291e      	cmp	r1, #30
   14fda:	d818      	bhi.n	1500e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x3e>
   14fdc:	2002      	movs	r0, #2
   14fde:	2574      	movs	r5, #116	; 0x74
   14fe0:	e8df f001 	tbb	[pc, r1]
   14fe4:	1c1c1019 	.word	0x1c1c1019
   14fe8:	1c1c1c29 	.word	0x1c1c1c29
   14fec:	1c1c1c1c 	.word	0x1c1c1c1c
   14ff0:	1c1c1c1c 	.word	0x1c1c1c1c
   14ff4:	1c1c1c1c 	.word	0x1c1c1c1c
   14ff8:	1c1c1c1c 	.word	0x1c1c1c1c
   14ffc:	1c1c171c 	.word	0x1c1c171c
   15000:	00171c1c 	.word	0x00171c1c
   15004:	2002      	movs	r0, #2
   15006:	256e      	movs	r5, #110	; 0x6e
   15008:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   1500c:	bd70      	pop	{r4, r5, r6, pc}
   1500e:	2e5c      	cmp	r6, #92	; 0x5c
   15010:	d104      	bne.n	1501c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x4c>
   15012:	2002      	movs	r0, #2
   15014:	4635      	mov	r5, r6
   15016:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   1501a:	bd70      	pop	{r4, r5, r6, pc}
   1501c:	2a00      	cmp	r2, #0
   1501e:	d040      	beq.n	150a2 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   15020:	f3c6 1083 	ubfx	r0, r6, #6, #4
   15024:	0ab1      	lsrs	r1, r6, #10
   15026:	f5b6 3ff6 	cmp.w	r6, #125952	; 0x1ec00
   1502a:	d309      	bcc.n	15040 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x70>
   1502c:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
   15030:	d137      	bne.n	150a2 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   15032:	211e      	movs	r1, #30
   15034:	e00b      	b.n	1504e <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x7e>
   15036:	2002      	movs	r0, #2
   15038:	2572      	movs	r5, #114	; 0x72
   1503a:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   1503e:	bd70      	pop	{r4, r5, r6, pc}
   15040:	f64e 32b4 	movw	r2, #60340	; 0xebb4
   15044:	f2c0 0201 	movt	r2, #1
   15048:	5c51      	ldrb	r1, [r2, r1]
   1504a:	291e      	cmp	r1, #30
   1504c:	d842      	bhi.n	150d4 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x104>
   1504e:	f64e 422f 	movw	r2, #60463	; 0xec2f
   15052:	f2c0 0201 	movt	r2, #1
   15056:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   1505a:	5c09      	ldrb	r1, [r1, r0]
   1505c:	298b      	cmp	r1, #139	; 0x8b
   1505e:	d231      	bcs.n	150c4 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xf4>
   15060:	f64e 6020 	movw	r0, #60960	; 0xee20
   15064:	2301      	movs	r3, #1
   15066:	f2c0 0001 	movt	r0, #1
   1506a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   1506e:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
   15072:	f006 013f 	and.w	r1, r6, #63	; 0x3f
   15076:	f8d2 c004 	ldr.w	ip, [r2, #4]
   1507a:	fa03 f501 	lsl.w	r5, r3, r1
   1507e:	f1b1 0220 	subs.w	r2, r1, #32
   15082:	f1c1 0120 	rsb	r1, r1, #32
   15086:	bf58      	it	pl
   15088:	2500      	movpl	r5, #0
   1508a:	2a00      	cmp	r2, #0
   1508c:	ea00 0005 	and.w	r0, r0, r5
   15090:	fa23 f101 	lsr.w	r1, r3, r1
   15094:	bf58      	it	pl
   15096:	fa03 f102 	lslpl.w	r1, r3, r2
   1509a:	ea01 010c 	and.w	r1, r1, ip
   1509e:	4308      	orrs	r0, r1
   150a0:	d105      	bne.n	150ae <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   150a2:	4630      	mov	r0, r6
   150a4:	f001 f989 	bl	163ba <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>
   150a8:	b108      	cbz	r0, 150ae <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   150aa:	2001      	movs	r0, #1
   150ac:	e7b2      	b.n	15014 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   150ae:	f046 0001 	orr.w	r0, r6, #1
   150b2:	2107      	movs	r1, #7
   150b4:	fab0 f080 	clz	r0, r0
   150b8:	f04f 0e05 	mov.w	lr, #5
   150bc:	ea81 0c90 	eor.w	ip, r1, r0, lsr #2
   150c0:	2003      	movs	r0, #3
   150c2:	e7a7      	b.n	15014 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   150c4:	f64e 30a4 	movw	r0, #60324	; 0xeba4
   150c8:	228b      	movs	r2, #139	; 0x8b
   150ca:	f2c0 0001 	movt	r0, #1
   150ce:	f000 f84d 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   150d2:	defe      	udf	#254	; 0xfe
   150d4:	f64e 3094 	movw	r0, #60308	; 0xeb94
   150d8:	221f      	movs	r2, #31
   150da:	f2c0 0001 	movt	r0, #1
   150de:	f000 f845 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   150e2:	defe      	udf	#254	; 0xfe

000150e4 <_ZN4core6option18expect_none_failed17h54d938081af97677E>:
   150e4:	b08e      	sub	sp, #56	; 0x38
   150e6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   150ea:	2002      	movs	r0, #2
   150ec:	a90a      	add	r1, sp, #40	; 0x28
   150ee:	9009      	str	r0, [sp, #36]	; 0x24
   150f0:	9108      	str	r1, [sp, #32]
   150f2:	2100      	movs	r1, #0
   150f4:	9107      	str	r1, [sp, #28]
   150f6:	e9cd 0105 	strd	r0, r1, [sp, #20]
   150fa:	f24e 2050 	movw	r0, #57936	; 0xe250
   150fe:	f2c0 0001 	movt	r0, #1
   15102:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   15106:	9004      	str	r0, [sp, #16]
   15108:	f646 6017 	movw	r0, #28183	; 0x6e17
   1510c:	f2c0 0001 	movt	r0, #1
   15110:	900d      	str	r0, [sp, #52]	; 0x34
   15112:	a802      	add	r0, sp, #8
   15114:	900c      	str	r0, [sp, #48]	; 0x30
   15116:	f646 6021 	movw	r0, #28193	; 0x6e21
   1511a:	f2c0 0001 	movt	r0, #1
   1511e:	4661      	mov	r1, ip
   15120:	900b      	str	r0, [sp, #44]	; 0x2c
   15122:	4668      	mov	r0, sp
   15124:	900a      	str	r0, [sp, #40]	; 0x28
   15126:	a804      	add	r0, sp, #16
   15128:	f000 f840 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1512c:	defe      	udf	#254	; 0xfe

0001512e <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>:
   1512e:	68c0      	ldr	r0, [r0, #12]
   15130:	4770      	bx	lr

00015132 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>:
   15132:	4770      	bx	lr

00015134 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>:
   15134:	e9d0 2100 	ldrd	r2, r1, [r0]
   15138:	4610      	mov	r0, r2
   1513a:	4770      	bx	lr

0001513c <_ZN4core5panic8Location4line17h650a566d9637c91dE>:
   1513c:	6880      	ldr	r0, [r0, #8]
   1513e:	4770      	bx	lr

00015140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>:
   15140:	b088      	sub	sp, #32
   15142:	4694      	mov	ip, r2
   15144:	f24e 0284 	movw	r2, #57476	; 0xe084
   15148:	2300      	movs	r3, #0
   1514a:	f2c0 0201 	movt	r2, #1
   1514e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   15152:	4668      	mov	r0, sp
   15154:	9305      	str	r3, [sp, #20]
   15156:	4661      	mov	r1, ip
   15158:	9204      	str	r2, [sp, #16]
   1515a:	2201      	movs	r2, #1
   1515c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   15160:	9201      	str	r2, [sp, #4]
   15162:	aa06      	add	r2, sp, #24
   15164:	9200      	str	r2, [sp, #0]
   15166:	f000 f821 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1516a:	defe      	udf	#254	; 0xfe

0001516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>:
   1516c:	b08c      	sub	sp, #48	; 0x30
   1516e:	4603      	mov	r3, r0
   15170:	e9cd 1200 	strd	r1, r2, [sp]
   15174:	2002      	movs	r0, #2
   15176:	a908      	add	r1, sp, #32
   15178:	9007      	str	r0, [sp, #28]
   1517a:	9106      	str	r1, [sp, #24]
   1517c:	2100      	movs	r1, #0
   1517e:	9105      	str	r1, [sp, #20]
   15180:	e9cd 0103 	strd	r0, r1, [sp, #12]
   15184:	f24e 2084 	movw	r0, #57988	; 0xe284
   15188:	f2c0 0001 	movt	r0, #1
   1518c:	4669      	mov	r1, sp
   1518e:	9002      	str	r0, [sp, #8]
   15190:	f646 5033 	movw	r0, #27955	; 0x6d33
   15194:	f2c0 0001 	movt	r0, #1
   15198:	900b      	str	r0, [sp, #44]	; 0x2c
   1519a:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   1519e:	a801      	add	r0, sp, #4
   151a0:	9008      	str	r0, [sp, #32]
   151a2:	a802      	add	r0, sp, #8
   151a4:	4619      	mov	r1, r3
   151a6:	f000 f801 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   151aa:	defe      	udf	#254	; 0xfe

000151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>:
   151ac:	b084      	sub	sp, #16
   151ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
   151b2:	f24e 2060 	movw	r0, #57952	; 0xe260
   151b6:	f2c0 0001 	movt	r0, #1
   151ba:	9001      	str	r0, [sp, #4]
   151bc:	f24e 0084 	movw	r0, #57476	; 0xe084
   151c0:	f2c0 0001 	movt	r0, #1
   151c4:	9000      	str	r0, [sp, #0]
   151c6:	4668      	mov	r0, sp
   151c8:	f7f3 fa82 	bl	86d0 <rust_begin_unwind>
   151cc:	defe      	udf	#254	; 0xfe

000151ce <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>:
   151ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151d2:	b081      	sub	sp, #4
   151d4:	2a00      	cmp	r2, #0
   151d6:	f000 80fe 	beq.w	153d6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   151da:	4690      	mov	r8, r2
   151dc:	468a      	mov	sl, r1
   151de:	4681      	mov	r9, r0
   151e0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   151e4:	7800      	ldrb	r0, [r0, #0]
   151e6:	b948      	cbnz	r0, 151fc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x2e>
   151e8:	e014      	b.n	15214 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   151ea:	44da      	add	sl, fp
   151ec:	2c00      	cmp	r4, #0
   151ee:	46a0      	mov	r8, r4
   151f0:	f000 80f1 	beq.w	153d6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   151f4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   151f8:	7800      	ldrb	r0, [r0, #0]
   151fa:	b158      	cbz	r0, 15214 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   151fc:	e9d9 0100 	ldrd	r0, r1, [r9]
   15200:	2204      	movs	r2, #4
   15202:	68cb      	ldr	r3, [r1, #12]
   15204:	f24e 11a4 	movw	r1, #57764	; 0xe1a4
   15208:	f2c0 0101 	movt	r1, #1
   1520c:	4798      	blx	r3
   1520e:	2800      	cmp	r0, #0
   15210:	f040 80e5 	bne.w	153de <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   15214:	f04f 0b00 	mov.w	fp, #0
   15218:	4641      	mov	r1, r8
   1521a:	e008      	b.n	1522e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x60>
   1521c:	ebb8 010b 	subs.w	r1, r8, fp
   15220:	f04f 0000 	mov.w	r0, #0
   15224:	bf38      	it	cc
   15226:	4601      	movcc	r1, r0
   15228:	45c3      	cmp	fp, r8
   1522a:	f200 80a5 	bhi.w	15378 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1aa>
   1522e:	eb0a 0e0b 	add.w	lr, sl, fp
   15232:	2000      	movs	r0, #0
   15234:	f01e 0203 	ands.w	r2, lr, #3
   15238:	bf18      	it	ne
   1523a:	f1d2 0c04 	rsbsne	ip, r2, #4
   1523e:	d120      	bne.n	15282 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xb4>
   15240:	2908      	cmp	r1, #8
   15242:	d357      	bcc.n	152f4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   15244:	f1a1 0208 	sub.w	r2, r1, #8
   15248:	4290      	cmp	r0, r2
   1524a:	d853      	bhi.n	152f4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   1524c:	f85e 3000 	ldr.w	r3, [lr, r0]
   15250:	eb0e 0700 	add.w	r7, lr, r0
   15254:	687f      	ldr	r7, [r7, #4]
   15256:	f083 360a 	eor.w	r6, r3, #168430090	; 0xa0a0a0a
   1525a:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   1525e:	ea26 0303 	bic.w	r3, r6, r3
   15262:	f087 360a 	eor.w	r6, r7, #168430090	; 0xa0a0a0a
   15266:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   1526a:	ea26 0707 	bic.w	r7, r6, r7
   1526e:	433b      	orrs	r3, r7
   15270:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   15274:	d102      	bne.n	1527c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xae>
   15276:	3008      	adds	r0, #8
   15278:	4290      	cmp	r0, r2
   1527a:	d9e7      	bls.n	1524c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x7e>
   1527c:	4288      	cmp	r0, r1
   1527e:	d939      	bls.n	152f4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   15280:	e0b1      	b.n	153e6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x218>
   15282:	458c      	cmp	ip, r1
   15284:	bf88      	it	hi
   15286:	468c      	movhi	ip, r1
   15288:	eb0e 060c 	add.w	r6, lr, ip
   1528c:	2000      	movs	r0, #0
   1528e:	4663      	mov	r3, ip
   15290:	4677      	mov	r7, lr
   15292:	b363      	cbz	r3, 152ee <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   15294:	463a      	mov	r2, r7
   15296:	f812 4b01 	ldrb.w	r4, [r2], #1
   1529a:	f1b4 050a 	subs.w	r5, r4, #10
   1529e:	bf18      	it	ne
   152a0:	2501      	movne	r5, #1
   152a2:	4428      	add	r0, r5
   152a4:	2c0a      	cmp	r4, #10
   152a6:	d059      	beq.n	1535c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   152a8:	42b2      	cmp	r2, r6
   152aa:	d020      	beq.n	152ee <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   152ac:	787a      	ldrb	r2, [r7, #1]
   152ae:	f1b2 040a 	subs.w	r4, r2, #10
   152b2:	bf18      	it	ne
   152b4:	2401      	movne	r4, #1
   152b6:	4420      	add	r0, r4
   152b8:	2a0a      	cmp	r2, #10
   152ba:	d04f      	beq.n	1535c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   152bc:	1cba      	adds	r2, r7, #2
   152be:	42b2      	cmp	r2, r6
   152c0:	d015      	beq.n	152ee <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   152c2:	78ba      	ldrb	r2, [r7, #2]
   152c4:	f1b2 040a 	subs.w	r4, r2, #10
   152c8:	bf18      	it	ne
   152ca:	2401      	movne	r4, #1
   152cc:	4420      	add	r0, r4
   152ce:	2a0a      	cmp	r2, #10
   152d0:	d044      	beq.n	1535c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   152d2:	1cfa      	adds	r2, r7, #3
   152d4:	42b2      	cmp	r2, r6
   152d6:	d00a      	beq.n	152ee <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   152d8:	78fa      	ldrb	r2, [r7, #3]
   152da:	3b04      	subs	r3, #4
   152dc:	3704      	adds	r7, #4
   152de:	f1b2 040a 	subs.w	r4, r2, #10
   152e2:	bf18      	it	ne
   152e4:	2401      	movne	r4, #1
   152e6:	4420      	add	r0, r4
   152e8:	2a0a      	cmp	r2, #10
   152ea:	d1d2      	bne.n	15292 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xc4>
   152ec:	e036      	b.n	1535c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   152ee:	4660      	mov	r0, ip
   152f0:	2908      	cmp	r1, #8
   152f2:	d2a7      	bcs.n	15244 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x76>
   152f4:	eb0e 0700 	add.w	r7, lr, r0
   152f8:	eb0e 0201 	add.w	r2, lr, r1
   152fc:	1a0e      	subs	r6, r1, r0
   152fe:	2100      	movs	r1, #0
   15300:	b3ce      	cbz	r6, 15376 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   15302:	463b      	mov	r3, r7
   15304:	f813 5b01 	ldrb.w	r5, [r3], #1
   15308:	f1b5 040a 	subs.w	r4, r5, #10
   1530c:	bf18      	it	ne
   1530e:	2401      	movne	r4, #1
   15310:	4421      	add	r1, r4
   15312:	2d0a      	cmp	r5, #10
   15314:	d021      	beq.n	1535a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   15316:	4293      	cmp	r3, r2
   15318:	d02d      	beq.n	15376 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   1531a:	787b      	ldrb	r3, [r7, #1]
   1531c:	f1b3 050a 	subs.w	r5, r3, #10
   15320:	bf18      	it	ne
   15322:	2501      	movne	r5, #1
   15324:	4429      	add	r1, r5
   15326:	2b0a      	cmp	r3, #10
   15328:	d017      	beq.n	1535a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   1532a:	1cbb      	adds	r3, r7, #2
   1532c:	4293      	cmp	r3, r2
   1532e:	d022      	beq.n	15376 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   15330:	78bb      	ldrb	r3, [r7, #2]
   15332:	f1b3 050a 	subs.w	r5, r3, #10
   15336:	bf18      	it	ne
   15338:	2501      	movne	r5, #1
   1533a:	4429      	add	r1, r5
   1533c:	2b0a      	cmp	r3, #10
   1533e:	d00c      	beq.n	1535a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   15340:	1cfb      	adds	r3, r7, #3
   15342:	4293      	cmp	r3, r2
   15344:	d017      	beq.n	15376 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   15346:	78fb      	ldrb	r3, [r7, #3]
   15348:	3e04      	subs	r6, #4
   1534a:	3704      	adds	r7, #4
   1534c:	f1b3 050a 	subs.w	r5, r3, #10
   15350:	bf18      	it	ne
   15352:	2501      	movne	r5, #1
   15354:	4429      	add	r1, r5
   15356:	2b0a      	cmp	r3, #10
   15358:	d1d2      	bne.n	15300 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x132>
   1535a:	4408      	add	r0, r1
   1535c:	4458      	add	r0, fp
   1535e:	f100 0b01 	add.w	fp, r0, #1
   15362:	4540      	cmp	r0, r8
   15364:	f4bf af5a 	bcs.w	1521c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   15368:	f81a 0000 	ldrb.w	r0, [sl, r0]
   1536c:	280a      	cmp	r0, #10
   1536e:	f47f af55 	bne.w	1521c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   15372:	2001      	movs	r0, #1
   15374:	e001      	b.n	1537a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1ac>
   15376:	2000      	movs	r0, #0
   15378:	46c3      	mov	fp, r8
   1537a:	f8d9 1008 	ldr.w	r1, [r9, #8]
   1537e:	eba8 040b 	sub.w	r4, r8, fp
   15382:	7008      	strb	r0, [r1, #0]
   15384:	fab4 f084 	clz	r0, r4
   15388:	0942      	lsrs	r2, r0, #5
   1538a:	fabb f08b 	clz	r0, fp
   1538e:	0943      	lsrs	r3, r0, #5
   15390:	e9d9 0100 	ldrd	r0, r1, [r9]
   15394:	ea53 0602 	orrs.w	r6, r3, r2
   15398:	d106      	bne.n	153a8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1da>
   1539a:	45d8      	cmp	r8, fp
   1539c:	d926      	bls.n	153ec <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   1539e:	f91a 200b 	ldrsb.w	r2, [sl, fp]
   153a2:	f112 0f41 	cmn.w	r2, #65	; 0x41
   153a6:	dd21      	ble.n	153ec <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   153a8:	68cb      	ldr	r3, [r1, #12]
   153aa:	4651      	mov	r1, sl
   153ac:	465a      	mov	r2, fp
   153ae:	4798      	blx	r3
   153b0:	b9a8      	cbnz	r0, 153de <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   153b2:	2e00      	cmp	r6, #0
   153b4:	f47f af19 	bne.w	151ea <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   153b8:	45d8      	cmp	r8, fp
   153ba:	d905      	bls.n	153c8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1fa>
   153bc:	f91a 000b 	ldrsb.w	r0, [sl, fp]
   153c0:	f110 0f41 	cmn.w	r0, #65	; 0x41
   153c4:	f73f af11 	bgt.w	151ea <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   153c8:	4650      	mov	r0, sl
   153ca:	4641      	mov	r1, r8
   153cc:	465a      	mov	r2, fp
   153ce:	4643      	mov	r3, r8
   153d0:	f000 fe4d 	bl	1606e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   153d4:	defe      	udf	#254	; 0xfe
   153d6:	2000      	movs	r0, #0
   153d8:	b001      	add	sp, #4
   153da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153de:	2001      	movs	r0, #1
   153e0:	b001      	add	sp, #4
   153e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153e6:	f000 fe20 	bl	1602a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   153ea:	defe      	udf	#254	; 0xfe
   153ec:	4650      	mov	r0, sl
   153ee:	4641      	mov	r1, r8
   153f0:	2200      	movs	r2, #0
   153f2:	465b      	mov	r3, fp
   153f4:	f000 fe3b 	bl	1606e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   153f8:	defe      	udf	#254	; 0xfe

000153fa <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>:
   153fa:	b5f0      	push	{r4, r5, r6, r7, lr}
   153fc:	b08d      	sub	sp, #52	; 0x34
   153fe:	4604      	mov	r4, r0
   15400:	7a00      	ldrb	r0, [r0, #8]
   15402:	b138      	cbz	r0, 15414 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x1a>
   15404:	2001      	movs	r0, #1
   15406:	6861      	ldr	r1, [r4, #4]
   15408:	7220      	strb	r0, [r4, #8]
   1540a:	1c48      	adds	r0, r1, #1
   1540c:	6060      	str	r0, [r4, #4]
   1540e:	4620      	mov	r0, r4
   15410:	b00d      	add	sp, #52	; 0x34
   15412:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15414:	4616      	mov	r6, r2
   15416:	460d      	mov	r5, r1
   15418:	e9d4 1200 	ldrd	r1, r2, [r4]
   1541c:	7808      	ldrb	r0, [r1, #0]
   1541e:	0740      	lsls	r0, r0, #29
   15420:	d419      	bmi.n	15456 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x5c>
   15422:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
   15426:	f24e 21ae 	movw	r1, #58030	; 0xe2ae
   1542a:	f24e 2cb2 	movw	ip, #58034	; 0xe2b2
   1542e:	f2c0 0101 	movt	r1, #1
   15432:	2a00      	cmp	r2, #0
   15434:	f2c0 0c01 	movt	ip, #1
   15438:	bf08      	it	eq
   1543a:	4661      	moveq	r1, ip
   1543c:	68db      	ldr	r3, [r3, #12]
   1543e:	f04f 0202 	mov.w	r2, #2
   15442:	bf08      	it	eq
   15444:	2201      	moveq	r2, #1
   15446:	4798      	blx	r3
   15448:	2800      	cmp	r0, #0
   1544a:	d1db      	bne.n	15404 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   1544c:	68f2      	ldr	r2, [r6, #12]
   1544e:	4628      	mov	r0, r5
   15450:	6821      	ldr	r1, [r4, #0]
   15452:	4790      	blx	r2
   15454:	e7d7      	b.n	15406 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>
   15456:	b95a      	cbnz	r2, 15470 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x76>
   15458:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   1545c:	2202      	movs	r2, #2
   1545e:	68cb      	ldr	r3, [r1, #12]
   15460:	f24e 21b0 	movw	r1, #58032	; 0xe2b0
   15464:	f2c0 0101 	movt	r1, #1
   15468:	4798      	blx	r3
   1546a:	2800      	cmp	r0, #0
   1546c:	d1ca      	bne.n	15404 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   1546e:	6821      	ldr	r1, [r4, #0]
   15470:	2001      	movs	r0, #1
   15472:	f10d 030f 	add.w	r3, sp, #15
   15476:	f88d 000f 	strb.w	r0, [sp, #15]
   1547a:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
   1547e:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
   15482:	e891 5005 	ldmia.w	r1, {r0, r2, ip, lr}
   15486:	e9d1 3704 	ldrd	r3, r7, [r1, #16]
   1548a:	f891 1020 	ldrb.w	r1, [r1, #32]
   1548e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   15492:	a904      	add	r1, sp, #16
   15494:	e9cd 0204 	strd	r0, r2, [sp, #16]
   15498:	f24e 2094 	movw	r0, #58004	; 0xe294
   1549c:	f2c0 0001 	movt	r0, #1
   154a0:	68f2      	ldr	r2, [r6, #12]
   154a2:	900b      	str	r0, [sp, #44]	; 0x2c
   154a4:	4668      	mov	r0, sp
   154a6:	900a      	str	r0, [sp, #40]	; 0x28
   154a8:	4628      	mov	r0, r5
   154aa:	e9cd 3708 	strd	r3, r7, [sp, #32]
   154ae:	e9cd ce06 	strd	ip, lr, [sp, #24]
   154b2:	4790      	blx	r2
   154b4:	2800      	cmp	r0, #0
   154b6:	d1a5      	bne.n	15404 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   154b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   154bc:	2202      	movs	r2, #2
   154be:	68cb      	ldr	r3, [r1, #12]
   154c0:	f24e 21ac 	movw	r1, #58028	; 0xe2ac
   154c4:	f2c0 0101 	movt	r1, #1
   154c8:	4798      	blx	r3
   154ca:	e79c      	b.n	15406 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>

000154cc <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>:
   154cc:	b5b0      	push	{r4, r5, r7, lr}
   154ce:	4604      	mov	r4, r0
   154d0:	7a05      	ldrb	r5, [r0, #8]
   154d2:	6840      	ldr	r0, [r0, #4]
   154d4:	b308      	cbz	r0, 1551a <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4e>
   154d6:	b10d      	cbz	r5, 154dc <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x10>
   154d8:	2501      	movs	r5, #1
   154da:	e01d      	b.n	15518 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   154dc:	2801      	cmp	r0, #1
   154de:	d110      	bne.n	15502 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   154e0:	7a60      	ldrb	r0, [r4, #9]
   154e2:	b170      	cbz	r0, 15502 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   154e4:	6821      	ldr	r1, [r4, #0]
   154e6:	7808      	ldrb	r0, [r1, #0]
   154e8:	0740      	lsls	r0, r0, #29
   154ea:	d40a      	bmi.n	15502 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   154ec:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   154f0:	2201      	movs	r2, #1
   154f2:	68cb      	ldr	r3, [r1, #12]
   154f4:	f24e 21b3 	movw	r1, #58035	; 0xe2b3
   154f8:	f2c0 0101 	movt	r1, #1
   154fc:	2501      	movs	r5, #1
   154fe:	4798      	blx	r3
   15500:	b950      	cbnz	r0, 15518 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   15502:	6821      	ldr	r1, [r4, #0]
   15504:	2201      	movs	r2, #1
   15506:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   1550a:	68cb      	ldr	r3, [r1, #12]
   1550c:	f24e 21b4 	movw	r1, #58036	; 0xe2b4
   15510:	f2c0 0101 	movt	r1, #1
   15514:	4798      	blx	r3
   15516:	4605      	mov	r5, r0
   15518:	7225      	strb	r5, [r4, #8]
   1551a:	2d00      	cmp	r5, #0
   1551c:	bf18      	it	ne
   1551e:	2501      	movne	r5, #1
   15520:	4628      	mov	r0, r5
   15522:	bdb0      	pop	{r4, r5, r7, pc}

00015524 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>:
   15524:	b580      	push	{r7, lr}
   15526:	b082      	sub	sp, #8
   15528:	468c      	mov	ip, r1
   1552a:	2100      	movs	r1, #0
   1552c:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   15530:	9101      	str	r1, [sp, #4]
   15532:	d207      	bcs.n	15544 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x20>
   15534:	f88d c004 	strb.w	ip, [sp, #4]
   15538:	a901      	add	r1, sp, #4
   1553a:	2201      	movs	r2, #1
   1553c:	f7ff fe47 	bl	151ce <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   15540:	b002      	add	sp, #8
   15542:	bd80      	pop	{r7, pc}
   15544:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
   15548:	d210      	bcs.n	1556c <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x48>
   1554a:	ea4f 119c 	mov.w	r1, ip, lsr #6
   1554e:	2306      	movs	r3, #6
   15550:	2202      	movs	r2, #2
   15552:	f363 115f 	bfi	r1, r3, #5, #27
   15556:	f362 1c9f 	bfi	ip, r2, #6, #26
   1555a:	f88d c005 	strb.w	ip, [sp, #5]
   1555e:	f88d 1004 	strb.w	r1, [sp, #4]
   15562:	a901      	add	r1, sp, #4
   15564:	f7ff fe33 	bl	151ce <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   15568:	b002      	add	sp, #8
   1556a:	bd80      	pop	{r7, pc}
   1556c:	2202      	movs	r2, #2
   1556e:	4663      	mov	r3, ip
   15570:	a901      	add	r1, sp, #4
   15572:	f362 139f 	bfi	r3, r2, #6, #26
   15576:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   1557a:	d213      	bcs.n	155a4 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x80>
   1557c:	f88d 3006 	strb.w	r3, [sp, #6]
   15580:	ea4f 139c 	mov.w	r3, ip, lsr #6
   15584:	f362 139f 	bfi	r3, r2, #6, #26
   15588:	f88d 3005 	strb.w	r3, [sp, #5]
   1558c:	ea4f 321c 	mov.w	r2, ip, lsr #12
   15590:	230e      	movs	r3, #14
   15592:	f363 121f 	bfi	r2, r3, #4, #28
   15596:	f88d 2004 	strb.w	r2, [sp, #4]
   1559a:	2203      	movs	r2, #3
   1559c:	f7ff fe17 	bl	151ce <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   155a0:	b002      	add	sp, #8
   155a2:	bd80      	pop	{r7, pc}
   155a4:	f88d 3007 	strb.w	r3, [sp, #7]
   155a8:	ea4f 139c 	mov.w	r3, ip, lsr #6
   155ac:	f362 139f 	bfi	r3, r2, #6, #26
   155b0:	f88d 3006 	strb.w	r3, [sp, #6]
   155b4:	ea4f 331c 	mov.w	r3, ip, lsr #12
   155b8:	f362 139f 	bfi	r3, r2, #6, #26
   155bc:	22f0      	movs	r2, #240	; 0xf0
   155be:	ea42 429c 	orr.w	r2, r2, ip, lsr #18
   155c2:	f88d 3005 	strb.w	r3, [sp, #5]
   155c6:	f88d 2004 	strb.w	r2, [sp, #4]
   155ca:	2204      	movs	r2, #4
   155cc:	f7ff fdff 	bl	151ce <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   155d0:	b002      	add	sp, #8
   155d2:	bd80      	pop	{r7, pc}

000155d4 <_ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE>:
   155d4:	b570      	push	{r4, r5, r6, lr}
   155d6:	b088      	sub	sp, #32
   155d8:	9001      	str	r0, [sp, #4]
   155da:	aa02      	add	r2, sp, #8
   155dc:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   155e0:	f24e 3180 	movw	r1, #58240	; 0xe380
   155e4:	4610      	mov	r0, r2
   155e6:	f2c0 0101 	movt	r1, #1
   155ea:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   155ee:	a801      	add	r0, sp, #4
   155f0:	f000 f89e 	bl	15730 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   155f4:	b008      	add	sp, #32
   155f6:	bd70      	pop	{r4, r5, r6, pc}

000155f8 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E>:
   155f8:	6800      	ldr	r0, [r0, #0]
   155fa:	f7ff bde8 	b.w	151ce <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>

000155fe <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE>:
   155fe:	6800      	ldr	r0, [r0, #0]
   15600:	f7ff bf90 	b.w	15524 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>

00015604 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE>:
   15604:	b570      	push	{r4, r5, r6, lr}
   15606:	b088      	sub	sp, #32
   15608:	6800      	ldr	r0, [r0, #0]
   1560a:	aa02      	add	r2, sp, #8
   1560c:	9001      	str	r0, [sp, #4]
   1560e:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   15612:	4610      	mov	r0, r2
   15614:	f24e 3180 	movw	r1, #58240	; 0xe380
   15618:	f2c0 0101 	movt	r1, #1
   1561c:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   15620:	a801      	add	r0, sp, #4
   15622:	f000 f885 	bl	15730 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   15626:	b008      	add	sp, #32
   15628:	bd70      	pop	{r4, r5, r6, pc}

0001562a <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE>:
   1562a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1562e:	b08d      	sub	sp, #52	; 0x34
   15630:	468c      	mov	ip, r1
   15632:	6801      	ldr	r1, [r0, #0]
   15634:	f248 5e1f 	movw	lr, #34079	; 0x851f
   15638:	f24e 20b7 	movw	r0, #58039	; 0xe2b7
   1563c:	f242 7810 	movw	r8, #10000	; 0x2710
   15640:	4541      	cmp	r1, r8
   15642:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   15646:	f2c0 0001 	movt	r0, #1
   1564a:	d337      	bcc.n	156bc <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x92>
   1564c:	f241 7959 	movw	r9, #5977	; 0x1759
   15650:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   15654:	f10d 0b0c 	add.w	fp, sp, #12
   15658:	2300      	movs	r3, #0
   1565a:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   1565e:	f04f 0a64 	mov.w	sl, #100	; 0x64
   15662:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   15666:	fba1 2409 	umull	r2, r4, r1, r9
   1566a:	42b9      	cmp	r1, r7
   1566c:	ea4f 3254 	mov.w	r2, r4, lsr #13
   15670:	fb02 1418 	mls	r4, r2, r8, r1
   15674:	4611      	mov	r1, r2
   15676:	b2a5      	uxth	r5, r4
   15678:	fba5 560e 	umull	r5, r6, r5, lr
   1567c:	ea4f 1556 	mov.w	r5, r6, lsr #5
   15680:	eb0b 0603 	add.w	r6, fp, r3
   15684:	fb05 441a 	mls	r4, r5, sl, r4
   15688:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   1568c:	f1a3 0304 	sub.w	r3, r3, #4
   15690:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   15694:	b2a4      	uxth	r4, r4
   15696:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   1569a:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   1569e:	d8e2      	bhi.n	15666 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x3c>
   156a0:	f103 0427 	add.w	r4, r3, #39	; 0x27
   156a4:	4611      	mov	r1, r2
   156a6:	2963      	cmp	r1, #99	; 0x63
   156a8:	dc0b      	bgt.n	156c2 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x98>
   156aa:	460b      	mov	r3, r1
   156ac:	2b0a      	cmp	r3, #10
   156ae:	db17      	blt.n	156e0 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xb6>
   156b0:	1ea1      	subs	r1, r4, #2
   156b2:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   156b6:	aa03      	add	r2, sp, #12
   156b8:	5250      	strh	r0, [r2, r1]
   156ba:	e016      	b.n	156ea <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xc0>
   156bc:	2427      	movs	r4, #39	; 0x27
   156be:	2963      	cmp	r1, #99	; 0x63
   156c0:	ddf3      	ble.n	156aa <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x80>
   156c2:	b28a      	uxth	r2, r1
   156c4:	3c02      	subs	r4, #2
   156c6:	fba2 230e 	umull	r2, r3, r2, lr
   156ca:	2264      	movs	r2, #100	; 0x64
   156cc:	095b      	lsrs	r3, r3, #5
   156ce:	fb03 1112 	mls	r1, r3, r2, r1
   156d2:	aa03      	add	r2, sp, #12
   156d4:	b289      	uxth	r1, r1
   156d6:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   156da:	5311      	strh	r1, [r2, r4]
   156dc:	2b0a      	cmp	r3, #10
   156de:	dae7      	bge.n	156b0 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x86>
   156e0:	1e61      	subs	r1, r4, #1
   156e2:	aa03      	add	r2, sp, #12
   156e4:	f103 0030 	add.w	r0, r3, #48	; 0x30
   156e8:	5450      	strb	r0, [r2, r1]
   156ea:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   156ee:	aa03      	add	r2, sp, #12
   156f0:	4411      	add	r1, r2
   156f2:	f24e 0284 	movw	r2, #57476	; 0xe084
   156f6:	e9cd 1000 	strd	r1, r0, [sp]
   156fa:	f2c0 0201 	movt	r2, #1
   156fe:	4660      	mov	r0, ip
   15700:	2101      	movs	r1, #1
   15702:	2300      	movs	r3, #0
   15704:	f000 f8f4 	bl	158f0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   15708:	b00d      	add	sp, #52	; 0x34
   1570a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001570e <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E>:
   1570e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15712:	b086      	sub	sp, #24
   15714:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
   15718:	466a      	mov	r2, sp
   1571a:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
   1571e:	4613      	mov	r3, r2
   15720:	4660      	mov	r0, ip
   15722:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
   15726:	f000 f803 	bl	15730 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   1572a:	b006      	add	sp, #24
   1572c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015730 <_ZN4core3fmt5write17hd95ac78ed22a2252E>:
   15730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15734:	b08b      	sub	sp, #44	; 0x2c
   15736:	2303      	movs	r3, #3
   15738:	6897      	ldr	r7, [r2, #8]
   1573a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1573e:	2320      	movs	r3, #32
   15740:	9303      	str	r3, [sp, #12]
   15742:	2300      	movs	r3, #0
   15744:	2f00      	cmp	r7, #0
   15746:	9302      	str	r3, [sp, #8]
   15748:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1574c:	9306      	str	r3, [sp, #24]
   1574e:	9304      	str	r3, [sp, #16]
   15750:	d07c      	beq.n	1584c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x11c>
   15752:	f8d2 b00c 	ldr.w	fp, [r2, #12]
   15756:	e9d2 9400 	ldrd	r9, r4, [r2]
   1575a:	45a3      	cmp	fp, r4
   1575c:	bf88      	it	hi
   1575e:	46a3      	movhi	fp, r4
   15760:	f1bb 0f00 	cmp.w	fp, #0
   15764:	f000 809b 	beq.w	1589e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   15768:	e9d2 6204 	ldrd	r6, r2, [r2, #16]
   1576c:	68cd      	ldr	r5, [r1, #12]
   1576e:	9201      	str	r2, [sp, #4]
   15770:	e9d9 3200 	ldrd	r3, r2, [r9]
   15774:	4619      	mov	r1, r3
   15776:	47a8      	blx	r5
   15778:	2800      	cmp	r0, #0
   1577a:	f040 809e 	bne.w	158ba <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1577e:	464d      	mov	r5, r9
   15780:	f04f 0a01 	mov.w	sl, #1
   15784:	f04f 0800 	mov.w	r8, #0
   15788:	f04f 0910 	mov.w	r9, #16
   1578c:	eb07 0088 	add.w	r0, r7, r8, lsl #2
   15790:	6841      	ldr	r1, [r0, #4]
   15792:	9103      	str	r1, [sp, #12]
   15794:	7f01      	ldrb	r1, [r0, #28]
   15796:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1579a:	6881      	ldr	r1, [r0, #8]
   1579c:	9102      	str	r1, [sp, #8]
   1579e:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   157a2:	b18a      	cbz	r2, 157c8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x98>
   157a4:	2a02      	cmp	r2, #2
   157a6:	d011      	beq.n	157cc <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   157a8:	9a01      	ldr	r2, [sp, #4]
   157aa:	4291      	cmp	r1, r2
   157ac:	f080 8098 	bcs.w	158e0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   157b0:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
   157b4:	f245 632b 	movw	r3, #22059	; 0x562b
   157b8:	f2c0 0301 	movt	r3, #1
   157bc:	6852      	ldr	r2, [r2, #4]
   157be:	429a      	cmp	r2, r3
   157c0:	d104      	bne.n	157cc <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   157c2:	f856 1031 	ldr.w	r1, [r6, r1, lsl #3]
   157c6:	6809      	ldr	r1, [r1, #0]
   157c8:	2201      	movs	r2, #1
   157ca:	e000      	b.n	157ce <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9e>
   157cc:	2200      	movs	r2, #0
   157ce:	e9cd 2104 	strd	r2, r1, [sp, #16]
   157d2:	f857 1009 	ldr.w	r1, [r7, r9]
   157d6:	68c0      	ldr	r0, [r0, #12]
   157d8:	b180      	cbz	r0, 157fc <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xcc>
   157da:	2802      	cmp	r0, #2
   157dc:	d010      	beq.n	15800 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   157de:	9801      	ldr	r0, [sp, #4]
   157e0:	4281      	cmp	r1, r0
   157e2:	d27d      	bcs.n	158e0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   157e4:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   157e8:	f245 622b 	movw	r2, #22059	; 0x562b
   157ec:	f2c0 0201 	movt	r2, #1
   157f0:	6840      	ldr	r0, [r0, #4]
   157f2:	4290      	cmp	r0, r2
   157f4:	d104      	bne.n	15800 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   157f6:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   157fa:	6801      	ldr	r1, [r0, #0]
   157fc:	2001      	movs	r0, #1
   157fe:	e000      	b.n	15802 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd2>
   15800:	2000      	movs	r0, #0
   15802:	eb07 0209 	add.w	r2, r7, r9
   15806:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1580a:	9801      	ldr	r0, [sp, #4]
   1580c:	f852 1c10 	ldr.w	r1, [r2, #-16]
   15810:	4281      	cmp	r1, r0
   15812:	d25d      	bcs.n	158d0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1a0>
   15814:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   15818:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   1581c:	684a      	ldr	r2, [r1, #4]
   1581e:	a902      	add	r1, sp, #8
   15820:	4790      	blx	r2
   15822:	2800      	cmp	r0, #0
   15824:	d149      	bne.n	158ba <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15826:	45da      	cmp	sl, fp
   15828:	d24b      	bcs.n	158c2 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x192>
   1582a:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   1582e:	eb05 0208 	add.w	r2, r5, r8
   15832:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   15836:	68db      	ldr	r3, [r3, #12]
   15838:	4798      	blx	r3
   1583a:	f109 0920 	add.w	r9, r9, #32
   1583e:	f108 0808 	add.w	r8, r8, #8
   15842:	f10a 0a01 	add.w	sl, sl, #1
   15846:	2800      	cmp	r0, #0
   15848:	d0a0      	beq.n	1578c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x5c>
   1584a:	e036      	b.n	158ba <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1584c:	6956      	ldr	r6, [r2, #20]
   1584e:	e9d2 9400 	ldrd	r9, r4, [r2]
   15852:	42a6      	cmp	r6, r4
   15854:	bf88      	it	hi
   15856:	4626      	movhi	r6, r4
   15858:	b30e      	cbz	r6, 1589e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   1585a:	6917      	ldr	r7, [r2, #16]
   1585c:	e9d9 3200 	ldrd	r3, r2, [r9]
   15860:	68cd      	ldr	r5, [r1, #12]
   15862:	4619      	mov	r1, r3
   15864:	47a8      	blx	r5
   15866:	bb40      	cbnz	r0, 158ba <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15868:	f10d 0808 	add.w	r8, sp, #8
   1586c:	2500      	movs	r5, #0
   1586e:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   15872:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   15876:	684a      	ldr	r2, [r1, #4]
   15878:	4641      	mov	r1, r8
   1587a:	4790      	blx	r2
   1587c:	b9e8      	cbnz	r0, 158ba <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1587e:	f105 0a01 	add.w	sl, r5, #1
   15882:	45b2      	cmp	sl, r6
   15884:	d20d      	bcs.n	158a2 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x172>
   15886:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   1588a:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
   1588e:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   15892:	68db      	ldr	r3, [r3, #12]
   15894:	4798      	blx	r3
   15896:	2800      	cmp	r0, #0
   15898:	4655      	mov	r5, sl
   1589a:	d0e8      	beq.n	1586e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x13e>
   1589c:	e00d      	b.n	158ba <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1589e:	f04f 0a00 	mov.w	sl, #0
   158a2:	4554      	cmp	r4, sl
   158a4:	d910      	bls.n	158c8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   158a6:	eb09 02ca 	add.w	r2, r9, sl, lsl #3
   158aa:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   158ae:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
   158b2:	6852      	ldr	r2, [r2, #4]
   158b4:	68db      	ldr	r3, [r3, #12]
   158b6:	4798      	blx	r3
   158b8:	b130      	cbz	r0, 158c8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   158ba:	2001      	movs	r0, #1
   158bc:	b00b      	add	sp, #44	; 0x2c
   158be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158c2:	46a9      	mov	r9, r5
   158c4:	4554      	cmp	r4, sl
   158c6:	d8ee      	bhi.n	158a6 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x176>
   158c8:	2000      	movs	r0, #0
   158ca:	b00b      	add	sp, #44	; 0x2c
   158cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158d0:	f24e 30b0 	movw	r0, #58288	; 0xe3b0
   158d4:	f2c0 0001 	movt	r0, #1
   158d8:	9a01      	ldr	r2, [sp, #4]
   158da:	f7ff fc47 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   158de:	defe      	udf	#254	; 0xfe
   158e0:	f24e 30c0 	movw	r0, #58304	; 0xe3c0
   158e4:	f2c0 0001 	movt	r0, #1
   158e8:	9a01      	ldr	r2, [sp, #4]
   158ea:	f7ff fc3f 	bl	1516c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   158ee:	defe      	udf	#254	; 0xfe

000158f0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>:
   158f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158f4:	b083      	sub	sp, #12
   158f6:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
   158fa:	469a      	mov	sl, r3
   158fc:	4604      	mov	r4, r0
   158fe:	b1e1      	cbz	r1, 1593a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x4a>
   15900:	f8d4 e000 	ldr.w	lr, [r4]
   15904:	f04f 082b 	mov.w	r8, #43	; 0x2b
   15908:	f01e 0101 	ands.w	r1, lr, #1
   1590c:	bf08      	it	eq
   1590e:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
   15912:	eb01 0907 	add.w	r9, r1, r7
   15916:	ea5f 714e 	movs.w	r1, lr, lsl #29
   1591a:	d517      	bpl.n	1594c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x5c>
   1591c:	f1ba 0f00 	cmp.w	sl, #0
   15920:	d033      	beq.n	1598a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9a>
   15922:	f1aa 0101 	sub.w	r1, sl, #1
   15926:	f00a 0c03 	and.w	ip, sl, #3
   1592a:	2903      	cmp	r1, #3
   1592c:	d22f      	bcs.n	1598e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9e>
   1592e:	2100      	movs	r1, #0
   15930:	4613      	mov	r3, r2
   15932:	f1bc 0f00 	cmp.w	ip, #0
   15936:	d152      	bne.n	159de <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xee>
   15938:	e069      	b.n	15a0e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   1593a:	f8d4 e000 	ldr.w	lr, [r4]
   1593e:	f107 0901 	add.w	r9, r7, #1
   15942:	f04f 082d 	mov.w	r8, #45	; 0x2d
   15946:	ea5f 714e 	movs.w	r1, lr, lsl #29
   1594a:	d4e7      	bmi.n	1591c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x2c>
   1594c:	f04f 0a00 	mov.w	sl, #0
   15950:	2200      	movs	r2, #0
   15952:	68a0      	ldr	r0, [r4, #8]
   15954:	2801      	cmp	r0, #1
   15956:	d161      	bne.n	15a1c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   15958:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   1595c:	45cb      	cmp	fp, r9
   1595e:	d95d      	bls.n	15a1c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   15960:	ea5f 700e 	movs.w	r0, lr, lsl #28
   15964:	d46e      	bmi.n	15a44 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x154>
   15966:	9202      	str	r2, [sp, #8]
   15968:	ebab 0109 	sub.w	r1, fp, r9
   1596c:	f894 2020 	ldrb.w	r2, [r4, #32]
   15970:	2000      	movs	r0, #0
   15972:	46a9      	mov	r9, r5
   15974:	460e      	mov	r6, r1
   15976:	2a03      	cmp	r2, #3
   15978:	bf08      	it	eq
   1597a:	2201      	moveq	r2, #1
   1597c:	e8df f002 	tbb	[pc, r2]
   15980:	02840287 	.word	0x02840287
   15984:	2600      	movs	r6, #0
   15986:	4608      	mov	r0, r1
   15988:	e081      	b.n	15a8e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x19e>
   1598a:	2100      	movs	r1, #0
   1598c:	e03f      	b.n	15a0e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   1598e:	ebac 060a 	sub.w	r6, ip, sl
   15992:	2100      	movs	r1, #0
   15994:	4693      	mov	fp, r2
   15996:	4613      	mov	r3, r2
   15998:	e9cd 7501 	strd	r7, r5, [sp, #4]
   1599c:	781a      	ldrb	r2, [r3, #0]
   1599e:	785d      	ldrb	r5, [r3, #1]
   159a0:	7898      	ldrb	r0, [r3, #2]
   159a2:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   159a6:	78df      	ldrb	r7, [r3, #3]
   159a8:	2a80      	cmp	r2, #128	; 0x80
   159aa:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
   159ae:	bf08      	it	eq
   159b0:	3101      	addeq	r1, #1
   159b2:	2a80      	cmp	r2, #128	; 0x80
   159b4:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   159b8:	bf08      	it	eq
   159ba:	3101      	addeq	r1, #1
   159bc:	2880      	cmp	r0, #128	; 0x80
   159be:	f007 00c0 	and.w	r0, r7, #192	; 0xc0
   159c2:	bf08      	it	eq
   159c4:	3101      	addeq	r1, #1
   159c6:	2880      	cmp	r0, #128	; 0x80
   159c8:	bf08      	it	eq
   159ca:	3101      	addeq	r1, #1
   159cc:	3304      	adds	r3, #4
   159ce:	3604      	adds	r6, #4
   159d0:	d1e4      	bne.n	1599c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xac>
   159d2:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   159d6:	465a      	mov	r2, fp
   159d8:	f1bc 0f00 	cmp.w	ip, #0
   159dc:	d017      	beq.n	15a0e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   159de:	7818      	ldrb	r0, [r3, #0]
   159e0:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   159e4:	2880      	cmp	r0, #128	; 0x80
   159e6:	bf08      	it	eq
   159e8:	3101      	addeq	r1, #1
   159ea:	f1bc 0f01 	cmp.w	ip, #1
   159ee:	d00e      	beq.n	15a0e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   159f0:	7858      	ldrb	r0, [r3, #1]
   159f2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   159f6:	2880      	cmp	r0, #128	; 0x80
   159f8:	bf08      	it	eq
   159fa:	3101      	addeq	r1, #1
   159fc:	f1bc 0f02 	cmp.w	ip, #2
   15a00:	d005      	beq.n	15a0e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   15a02:	7898      	ldrb	r0, [r3, #2]
   15a04:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15a08:	2880      	cmp	r0, #128	; 0x80
   15a0a:	bf08      	it	eq
   15a0c:	3101      	addeq	r1, #1
   15a0e:	eb09 000a 	add.w	r0, r9, sl
   15a12:	eba0 0901 	sub.w	r9, r0, r1
   15a16:	68a0      	ldr	r0, [r4, #8]
   15a18:	2801      	cmp	r0, #1
   15a1a:	d09d      	beq.n	15958 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x68>
   15a1c:	4620      	mov	r0, r4
   15a1e:	4641      	mov	r1, r8
   15a20:	4653      	mov	r3, sl
   15a22:	f000 f893 	bl	15b4c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   15a26:	b120      	cbz	r0, 15a32 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x142>
   15a28:	2601      	movs	r6, #1
   15a2a:	4630      	mov	r0, r6
   15a2c:	b003      	add	sp, #12
   15a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a32:	69e1      	ldr	r1, [r4, #28]
   15a34:	463a      	mov	r2, r7
   15a36:	69a0      	ldr	r0, [r4, #24]
   15a38:	68cb      	ldr	r3, [r1, #12]
   15a3a:	4629      	mov	r1, r5
   15a3c:	b003      	add	sp, #12
   15a3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a42:	4718      	bx	r3
   15a44:	6860      	ldr	r0, [r4, #4]
   15a46:	2601      	movs	r6, #1
   15a48:	9002      	str	r0, [sp, #8]
   15a4a:	2030      	movs	r0, #48	; 0x30
   15a4c:	f894 1020 	ldrb.w	r1, [r4, #32]
   15a50:	4653      	mov	r3, sl
   15a52:	6060      	str	r0, [r4, #4]
   15a54:	4620      	mov	r0, r4
   15a56:	9101      	str	r1, [sp, #4]
   15a58:	4641      	mov	r1, r8
   15a5a:	f884 6020 	strb.w	r6, [r4, #32]
   15a5e:	f000 f875 	bl	15b4c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   15a62:	2800      	cmp	r0, #0
   15a64:	d1e1      	bne.n	15a2a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   15a66:	f894 2020 	ldrb.w	r2, [r4, #32]
   15a6a:	ebab 0109 	sub.w	r1, fp, r9
   15a6e:	2000      	movs	r0, #0
   15a70:	46a9      	mov	r9, r5
   15a72:	2a03      	cmp	r2, #3
   15a74:	bf08      	it	eq
   15a76:	2201      	moveq	r2, #1
   15a78:	460e      	mov	r6, r1
   15a7a:	e8df f002 	tbb	[pc, r2]
   15a7e:	0235      	.short	0x0235
   15a80:	0232      	.short	0x0232
   15a82:	2600      	movs	r6, #0
   15a84:	4608      	mov	r0, r1
   15a86:	e02f      	b.n	15ae8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1f8>
   15a88:	0848      	lsrs	r0, r1, #1
   15a8a:	3101      	adds	r1, #1
   15a8c:	084e      	lsrs	r6, r1, #1
   15a8e:	1c45      	adds	r5, r0, #1
   15a90:	3d01      	subs	r5, #1
   15a92:	d007      	beq.n	15aa4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1b4>
   15a94:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   15a98:	6861      	ldr	r1, [r4, #4]
   15a9a:	6912      	ldr	r2, [r2, #16]
   15a9c:	4790      	blx	r2
   15a9e:	2800      	cmp	r0, #0
   15aa0:	d0f6      	beq.n	15a90 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1a0>
   15aa2:	e7c1      	b.n	15a28 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15aa4:	9a02      	ldr	r2, [sp, #8]
   15aa6:	4620      	mov	r0, r4
   15aa8:	4641      	mov	r1, r8
   15aaa:	4653      	mov	r3, sl
   15aac:	f8d4 b004 	ldr.w	fp, [r4, #4]
   15ab0:	f000 f84c 	bl	15b4c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   15ab4:	2800      	cmp	r0, #0
   15ab6:	d1b7      	bne.n	15a28 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15ab8:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   15abc:	463a      	mov	r2, r7
   15abe:	68cb      	ldr	r3, [r1, #12]
   15ac0:	4649      	mov	r1, r9
   15ac2:	4798      	blx	r3
   15ac4:	2800      	cmp	r0, #0
   15ac6:	d1af      	bne.n	15a28 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15ac8:	e9d4 5406 	ldrd	r5, r4, [r4, #24]
   15acc:	1c77      	adds	r7, r6, #1
   15ace:	2601      	movs	r6, #1
   15ad0:	3f01      	subs	r7, #1
   15ad2:	d02c      	beq.n	15b2e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x23e>
   15ad4:	6922      	ldr	r2, [r4, #16]
   15ad6:	4628      	mov	r0, r5
   15ad8:	4659      	mov	r1, fp
   15ada:	4790      	blx	r2
   15adc:	2800      	cmp	r0, #0
   15ade:	d0f7      	beq.n	15ad0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1e0>
   15ae0:	e7a3      	b.n	15a2a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   15ae2:	0848      	lsrs	r0, r1, #1
   15ae4:	3101      	adds	r1, #1
   15ae6:	084e      	lsrs	r6, r1, #1
   15ae8:	1c45      	adds	r5, r0, #1
   15aea:	3d01      	subs	r5, #1
   15aec:	d007      	beq.n	15afe <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x20e>
   15aee:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   15af2:	6861      	ldr	r1, [r4, #4]
   15af4:	6912      	ldr	r2, [r2, #16]
   15af6:	4790      	blx	r2
   15af8:	2800      	cmp	r0, #0
   15afa:	d0f6      	beq.n	15aea <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1fa>
   15afc:	e794      	b.n	15a28 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15afe:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   15b02:	463a      	mov	r2, r7
   15b04:	68cb      	ldr	r3, [r1, #12]
   15b06:	4649      	mov	r1, r9
   15b08:	f8d4 8004 	ldr.w	r8, [r4, #4]
   15b0c:	4798      	blx	r3
   15b0e:	2800      	cmp	r0, #0
   15b10:	f47f af8a 	bne.w	15a28 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15b14:	e9d4 9506 	ldrd	r9, r5, [r4, #24]
   15b18:	1c77      	adds	r7, r6, #1
   15b1a:	2601      	movs	r6, #1
   15b1c:	3f01      	subs	r7, #1
   15b1e:	d00b      	beq.n	15b38 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x248>
   15b20:	692a      	ldr	r2, [r5, #16]
   15b22:	4648      	mov	r0, r9
   15b24:	4641      	mov	r1, r8
   15b26:	4790      	blx	r2
   15b28:	2800      	cmp	r0, #0
   15b2a:	d0f7      	beq.n	15b1c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x22c>
   15b2c:	e77d      	b.n	15a2a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   15b2e:	2600      	movs	r6, #0
   15b30:	4630      	mov	r0, r6
   15b32:	b003      	add	sp, #12
   15b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b38:	9801      	ldr	r0, [sp, #4]
   15b3a:	2600      	movs	r6, #0
   15b3c:	f884 0020 	strb.w	r0, [r4, #32]
   15b40:	9802      	ldr	r0, [sp, #8]
   15b42:	6060      	str	r0, [r4, #4]
   15b44:	4630      	mov	r0, r6
   15b46:	b003      	add	sp, #12
   15b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015b4c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>:
   15b4c:	b570      	push	{r4, r5, r6, lr}
   15b4e:	461c      	mov	r4, r3
   15b50:	4615      	mov	r5, r2
   15b52:	4606      	mov	r6, r0
   15b54:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   15b58:	d006      	beq.n	15b68 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   15b5a:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
   15b5e:	6912      	ldr	r2, [r2, #16]
   15b60:	4790      	blx	r2
   15b62:	b108      	cbz	r0, 15b68 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   15b64:	2001      	movs	r0, #1
   15b66:	bd70      	pop	{r4, r5, r6, pc}
   15b68:	b13d      	cbz	r5, 15b7a <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x2e>
   15b6a:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
   15b6e:	4622      	mov	r2, r4
   15b70:	68cb      	ldr	r3, [r1, #12]
   15b72:	4629      	mov	r1, r5
   15b74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15b78:	4718      	bx	r3
   15b7a:	2000      	movs	r0, #0
   15b7c:	bd70      	pop	{r4, r5, r6, pc}
	...

00015b80 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>:
   15b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b84:	b081      	sub	sp, #4
   15b86:	f8d0 e008 	ldr.w	lr, [r0, #8]
   15b8a:	4682      	mov	sl, r0
   15b8c:	6900      	ldr	r0, [r0, #16]
   15b8e:	4691      	mov	r9, r2
   15b90:	4688      	mov	r8, r1
   15b92:	f1be 0f01 	cmp.w	lr, #1
   15b96:	d111      	bne.n	15bbc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x3c>
   15b98:	2801      	cmp	r0, #1
   15b9a:	d012      	beq.n	15bc2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x42>
   15b9c:	f1b9 0f00 	cmp.w	r9, #0
   15ba0:	f000 80c5 	beq.w	15d2e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1ae>
   15ba4:	f1a9 0101 	sub.w	r1, r9, #1
   15ba8:	f009 0003 	and.w	r0, r9, #3
   15bac:	2903      	cmp	r1, #3
   15bae:	d267      	bcs.n	15c80 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x100>
   15bb0:	2100      	movs	r1, #0
   15bb2:	4642      	mov	r2, r8
   15bb4:	2800      	cmp	r0, #0
   15bb6:	f040 8083 	bne.w	15cc0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x140>
   15bba:	e097      	b.n	15cec <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   15bbc:	2801      	cmp	r0, #1
   15bbe:	f040 80bd 	bne.w	15d3c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   15bc2:	f1b9 0f00 	cmp.w	r9, #0
   15bc6:	d054      	beq.n	15c72 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xf2>
   15bc8:	f8da 0014 	ldr.w	r0, [sl, #20]
   15bcc:	eb08 0109 	add.w	r1, r8, r9
   15bd0:	2200      	movs	r2, #0
   15bd2:	4647      	mov	r7, r8
   15bd4:	1c43      	adds	r3, r0, #1
   15bd6:	4646      	mov	r6, r8
   15bd8:	463c      	mov	r4, r7
   15bda:	f914 5b01 	ldrsb.w	r5, [r4], #1
   15bde:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   15be2:	b2e8      	uxtb	r0, r5
   15be4:	dc2e      	bgt.n	15c44 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   15be6:	428c      	cmp	r4, r1
   15be8:	d01a      	beq.n	15c20 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xa0>
   15bea:	787d      	ldrb	r5, [r7, #1]
   15bec:	1cbc      	adds	r4, r7, #2
   15bee:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   15bf2:	4627      	mov	r7, r4
   15bf4:	f000 0b1f 	and.w	fp, r0, #31
   15bf8:	28df      	cmp	r0, #223	; 0xdf
   15bfa:	d917      	bls.n	15c2c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xac>
   15bfc:	428f      	cmp	r7, r1
   15bfe:	d018      	beq.n	15c32 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xb2>
   15c00:	f817 4b01 	ldrb.w	r4, [r7], #1
   15c04:	f004 0c3f 	and.w	ip, r4, #63	; 0x3f
   15c08:	463c      	mov	r4, r7
   15c0a:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   15c0e:	28f0      	cmp	r0, #240	; 0xf0
   15c10:	d316      	bcc.n	15c40 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc0>
   15c12:	428f      	cmp	r7, r1
   15c14:	d020      	beq.n	15c58 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xd8>
   15c16:	f817 0b01 	ldrb.w	r0, [r7], #1
   15c1a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   15c1e:	e01d      	b.n	15c5c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xdc>
   15c20:	2500      	movs	r5, #0
   15c22:	460f      	mov	r7, r1
   15c24:	f000 0b1f 	and.w	fp, r0, #31
   15c28:	28df      	cmp	r0, #223	; 0xdf
   15c2a:	d8e7      	bhi.n	15bfc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x7c>
   15c2c:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
   15c30:	e008      	b.n	15c44 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   15c32:	f04f 0c00 	mov.w	ip, #0
   15c36:	460f      	mov	r7, r1
   15c38:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   15c3c:	28f0      	cmp	r0, #240	; 0xf0
   15c3e:	d2e8      	bcs.n	15c12 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x92>
   15c40:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
   15c44:	4627      	mov	r7, r4
   15c46:	3b01      	subs	r3, #1
   15c48:	d065      	beq.n	15d16 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x196>
   15c4a:	1b90      	subs	r0, r2, r6
   15c4c:	42b9      	cmp	r1, r7
   15c4e:	eb00 0207 	add.w	r2, r0, r7
   15c52:	463e      	mov	r6, r7
   15c54:	d1c0      	bne.n	15bd8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x58>
   15c56:	e061      	b.n	15d1c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   15c58:	2000      	movs	r0, #0
   15c5a:	4627      	mov	r7, r4
   15c5c:	f44f 14e0 	mov.w	r4, #1835008	; 0x1c0000
   15c60:	ea04 448b 	and.w	r4, r4, fp, lsl #18
   15c64:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   15c68:	4428      	add	r0, r5
   15c6a:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   15c6e:	d1ea      	bne.n	15c46 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc6>
   15c70:	e054      	b.n	15d1c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   15c72:	2200      	movs	r2, #0
   15c74:	f1be 0f01 	cmp.w	lr, #1
   15c78:	d054      	beq.n	15d24 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   15c7a:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   15c7e:	e062      	b.n	15d46 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1c6>
   15c80:	eba0 0309 	sub.w	r3, r0, r9
   15c84:	2100      	movs	r1, #0
   15c86:	4642      	mov	r2, r8
   15c88:	7817      	ldrb	r7, [r2, #0]
   15c8a:	7856      	ldrb	r6, [r2, #1]
   15c8c:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
   15c90:	7895      	ldrb	r5, [r2, #2]
   15c92:	78d4      	ldrb	r4, [r2, #3]
   15c94:	2f80      	cmp	r7, #128	; 0x80
   15c96:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
   15c9a:	bf08      	it	eq
   15c9c:	3101      	addeq	r1, #1
   15c9e:	2f80      	cmp	r7, #128	; 0x80
   15ca0:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
   15ca4:	bf08      	it	eq
   15ca6:	3101      	addeq	r1, #1
   15ca8:	2f80      	cmp	r7, #128	; 0x80
   15caa:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   15cae:	bf08      	it	eq
   15cb0:	3101      	addeq	r1, #1
   15cb2:	2f80      	cmp	r7, #128	; 0x80
   15cb4:	bf08      	it	eq
   15cb6:	3101      	addeq	r1, #1
   15cb8:	3204      	adds	r2, #4
   15cba:	3304      	adds	r3, #4
   15cbc:	d1e4      	bne.n	15c88 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x108>
   15cbe:	b1a8      	cbz	r0, 15cec <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   15cc0:	7813      	ldrb	r3, [r2, #0]
   15cc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15cc6:	2b80      	cmp	r3, #128	; 0x80
   15cc8:	bf08      	it	eq
   15cca:	3101      	addeq	r1, #1
   15ccc:	2801      	cmp	r0, #1
   15cce:	d00d      	beq.n	15cec <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   15cd0:	7853      	ldrb	r3, [r2, #1]
   15cd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15cd6:	2b80      	cmp	r3, #128	; 0x80
   15cd8:	bf08      	it	eq
   15cda:	3101      	addeq	r1, #1
   15cdc:	2802      	cmp	r0, #2
   15cde:	d005      	beq.n	15cec <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   15ce0:	7890      	ldrb	r0, [r2, #2]
   15ce2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15ce6:	2880      	cmp	r0, #128	; 0x80
   15ce8:	bf08      	it	eq
   15cea:	3101      	addeq	r1, #1
   15cec:	f8da 000c 	ldr.w	r0, [sl, #12]
   15cf0:	eba9 0101 	sub.w	r1, r9, r1
   15cf4:	4281      	cmp	r1, r0
   15cf6:	d221      	bcs.n	15d3c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   15cf8:	f1b9 0f00 	cmp.w	r9, #0
   15cfc:	d029      	beq.n	15d52 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d2>
   15cfe:	f1a9 0101 	sub.w	r1, r9, #1
   15d02:	f009 0c03 	and.w	ip, r9, #3
   15d06:	2903      	cmp	r1, #3
   15d08:	d225      	bcs.n	15d56 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d6>
   15d0a:	2100      	movs	r1, #0
   15d0c:	4643      	mov	r3, r8
   15d0e:	f1bc 0f00 	cmp.w	ip, #0
   15d12:	d142      	bne.n	15d9a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x21a>
   15d14:	e059      	b.n	15dca <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   15d16:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   15d1a:	d167      	bne.n	15dec <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x26c>
   15d1c:	464a      	mov	r2, r9
   15d1e:	f1be 0f01 	cmp.w	lr, #1
   15d22:	d1aa      	bne.n	15c7a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   15d24:	4691      	mov	r9, r2
   15d26:	f1b9 0f00 	cmp.w	r9, #0
   15d2a:	f47f af3b 	bne.w	15ba4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24>
   15d2e:	2100      	movs	r1, #0
   15d30:	f8da 000c 	ldr.w	r0, [sl, #12]
   15d34:	eba9 0101 	sub.w	r1, r9, r1
   15d38:	4281      	cmp	r1, r0
   15d3a:	d3dd      	bcc.n	15cf8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x178>
   15d3c:	f8da 101c 	ldr.w	r1, [sl, #28]
   15d40:	464a      	mov	r2, r9
   15d42:	f8da 0018 	ldr.w	r0, [sl, #24]
   15d46:	68cb      	ldr	r3, [r1, #12]
   15d48:	4641      	mov	r1, r8
   15d4a:	b001      	add	sp, #4
   15d4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d50:	4718      	bx	r3
   15d52:	2100      	movs	r1, #0
   15d54:	e039      	b.n	15dca <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   15d56:	ebac 0709 	sub.w	r7, ip, r9
   15d5a:	2100      	movs	r1, #0
   15d5c:	4643      	mov	r3, r8
   15d5e:	781e      	ldrb	r6, [r3, #0]
   15d60:	785d      	ldrb	r5, [r3, #1]
   15d62:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
   15d66:	789c      	ldrb	r4, [r3, #2]
   15d68:	78da      	ldrb	r2, [r3, #3]
   15d6a:	2e80      	cmp	r6, #128	; 0x80
   15d6c:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   15d70:	bf08      	it	eq
   15d72:	3101      	addeq	r1, #1
   15d74:	2e80      	cmp	r6, #128	; 0x80
   15d76:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
   15d7a:	bf08      	it	eq
   15d7c:	3101      	addeq	r1, #1
   15d7e:	2e80      	cmp	r6, #128	; 0x80
   15d80:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   15d84:	bf08      	it	eq
   15d86:	3101      	addeq	r1, #1
   15d88:	2a80      	cmp	r2, #128	; 0x80
   15d8a:	bf08      	it	eq
   15d8c:	3101      	addeq	r1, #1
   15d8e:	3304      	adds	r3, #4
   15d90:	3704      	adds	r7, #4
   15d92:	d1e4      	bne.n	15d5e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1de>
   15d94:	f1bc 0f00 	cmp.w	ip, #0
   15d98:	d017      	beq.n	15dca <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   15d9a:	781a      	ldrb	r2, [r3, #0]
   15d9c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   15da0:	2a80      	cmp	r2, #128	; 0x80
   15da2:	bf08      	it	eq
   15da4:	3101      	addeq	r1, #1
   15da6:	f1bc 0f01 	cmp.w	ip, #1
   15daa:	d00e      	beq.n	15dca <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   15dac:	785a      	ldrb	r2, [r3, #1]
   15dae:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   15db2:	2a80      	cmp	r2, #128	; 0x80
   15db4:	bf08      	it	eq
   15db6:	3101      	addeq	r1, #1
   15db8:	f1bc 0f02 	cmp.w	ip, #2
   15dbc:	d005      	beq.n	15dca <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   15dbe:	789a      	ldrb	r2, [r3, #2]
   15dc0:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   15dc4:	2a80      	cmp	r2, #128	; 0x80
   15dc6:	bf08      	it	eq
   15dc8:	3101      	addeq	r1, #1
   15dca:	f89a 3020 	ldrb.w	r3, [sl, #32]
   15dce:	eba1 0109 	sub.w	r1, r1, r9
   15dd2:	4401      	add	r1, r0
   15dd4:	2000      	movs	r0, #0
   15dd6:	1eda      	subs	r2, r3, #3
   15dd8:	bf18      	it	ne
   15dda:	461a      	movne	r2, r3
   15ddc:	460e      	mov	r6, r1
   15dde:	e8df f002 	tbb	[pc, r2]
   15de2:	0216      	.short	0x0216
   15de4:	0213      	.short	0x0213
   15de6:	2600      	movs	r6, #0
   15de8:	4608      	mov	r0, r1
   15dea:	e010      	b.n	15e0e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x28e>
   15dec:	2a00      	cmp	r2, #0
   15dee:	bf18      	it	ne
   15df0:	454a      	cmpne	r2, r9
   15df2:	d134      	bne.n	15e5e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2de>
   15df4:	4640      	mov	r0, r8
   15df6:	2800      	cmp	r0, #0
   15df8:	bf0c      	ite	eq
   15dfa:	464a      	moveq	r2, r9
   15dfc:	4680      	movne	r8, r0
   15dfe:	f1be 0f01 	cmp.w	lr, #1
   15e02:	f43f af8f 	beq.w	15d24 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   15e06:	e738      	b.n	15c7a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   15e08:	0848      	lsrs	r0, r1, #1
   15e0a:	3101      	adds	r1, #1
   15e0c:	084e      	lsrs	r6, r1, #1
   15e0e:	1c44      	adds	r4, r0, #1
   15e10:	3c01      	subs	r4, #1
   15e12:	d008      	beq.n	15e26 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2a6>
   15e14:	e9da 0206 	ldrd	r0, r2, [sl, #24]
   15e18:	f8da 1004 	ldr.w	r1, [sl, #4]
   15e1c:	6912      	ldr	r2, [r2, #16]
   15e1e:	4790      	blx	r2
   15e20:	2800      	cmp	r0, #0
   15e22:	d0f5      	beq.n	15e10 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x290>
   15e24:	e013      	b.n	15e4e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   15e26:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   15e2a:	464a      	mov	r2, r9
   15e2c:	68cb      	ldr	r3, [r1, #12]
   15e2e:	4641      	mov	r1, r8
   15e30:	f8da 7004 	ldr.w	r7, [sl, #4]
   15e34:	4798      	blx	r3
   15e36:	b950      	cbnz	r0, 15e4e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   15e38:	e9da 4506 	ldrd	r4, r5, [sl, #24]
   15e3c:	3601      	adds	r6, #1
   15e3e:	3e01      	subs	r6, #1
   15e40:	d009      	beq.n	15e56 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2d6>
   15e42:	692a      	ldr	r2, [r5, #16]
   15e44:	4620      	mov	r0, r4
   15e46:	4639      	mov	r1, r7
   15e48:	4790      	blx	r2
   15e4a:	2800      	cmp	r0, #0
   15e4c:	d0f7      	beq.n	15e3e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2be>
   15e4e:	2001      	movs	r0, #1
   15e50:	b001      	add	sp, #4
   15e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e56:	2000      	movs	r0, #0
   15e58:	b001      	add	sp, #4
   15e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e5e:	454a      	cmp	r2, r9
   15e60:	d204      	bcs.n	15e6c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ec>
   15e62:	f918 0002 	ldrsb.w	r0, [r8, r2]
   15e66:	f110 0f40 	cmn.w	r0, #64	; 0x40
   15e6a:	dac3      	bge.n	15df4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x274>
   15e6c:	2000      	movs	r0, #0
   15e6e:	2200      	movs	r2, #0
   15e70:	2800      	cmp	r0, #0
   15e72:	bf0c      	ite	eq
   15e74:	464a      	moveq	r2, r9
   15e76:	4680      	movne	r8, r0
   15e78:	f1be 0f01 	cmp.w	lr, #1
   15e7c:	f43f af52 	beq.w	15d24 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   15e80:	e6fb      	b.n	15c7a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>

00015e82 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>:
   15e82:	7800      	ldrb	r0, [r0, #0]
   15e84:	f3c0 1000 	ubfx	r0, r0, #4, #1
   15e88:	4770      	bx	lr

00015e8a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>:
   15e8a:	7800      	ldrb	r0, [r0, #0]
   15e8c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   15e90:	4770      	bx	lr

00015e92 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>:
   15e92:	b570      	push	{r4, r5, r6, lr}
   15e94:	460d      	mov	r5, r1
   15e96:	4606      	mov	r6, r0
   15e98:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   15e9c:	461c      	mov	r4, r3
   15e9e:	68cb      	ldr	r3, [r1, #12]
   15ea0:	4611      	mov	r1, r2
   15ea2:	4622      	mov	r2, r4
   15ea4:	4798      	blx	r3
   15ea6:	7230      	strb	r0, [r6, #8]
   15ea8:	fab4 f084 	clz	r0, r4
   15eac:	0940      	lsrs	r0, r0, #5
   15eae:	7270      	strb	r0, [r6, #9]
   15eb0:	2000      	movs	r0, #0
   15eb2:	e9c6 5000 	strd	r5, r0, [r6]
   15eb6:	bd70      	pop	{r4, r5, r6, pc}

00015eb8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E>:
   15eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15ebc:	b085      	sub	sp, #20
   15ebe:	460c      	mov	r4, r1
   15ec0:	4605      	mov	r5, r0
   15ec2:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   15ec6:	690a      	ldr	r2, [r1, #16]
   15ec8:	2127      	movs	r1, #39	; 0x27
   15eca:	4790      	blx	r2
   15ecc:	b118      	cbz	r0, 15ed6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x1e>
   15ece:	2001      	movs	r0, #1
   15ed0:	b005      	add	sp, #20
   15ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15ed6:	6829      	ldr	r1, [r5, #0]
   15ed8:	a801      	add	r0, sp, #4
   15eda:	2201      	movs	r2, #1
   15edc:	f7ff f878 	bl	14fd0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>
   15ee0:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   15ee4:	f04f 091c 	mov.w	r9, #28
   15ee8:	f8dd 800c 	ldr.w	r8, [sp, #12]
   15eec:	f5b5 1f88 	cmp.w	r5, #1114112	; 0x110000
   15ef0:	f89d 6010 	ldrb.w	r6, [sp, #16]
   15ef4:	d139      	bne.n	15f6a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xb2>
   15ef6:	f44f 1588 	mov.w	r5, #1114112	; 0x110000
   15efa:	2f02      	cmp	r7, #2
   15efc:	f0c0 806b 	bcc.w	15fd6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x11e>
   15f00:	d00c      	beq.n	15f1c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x64>
   15f02:	b2f0      	uxtb	r0, r6
   15f04:	2604      	movs	r6, #4
   15f06:	2703      	movs	r7, #3
   15f08:	215c      	movs	r1, #92	; 0x5c
   15f0a:	e8df f000 	tbb	[pc, r0]
   15f0e:	0364      	.short	0x0364
   15f10:	09242010 	.word	0x09242010
   15f14:	2600      	movs	r6, #0
   15f16:	2703      	movs	r7, #3
   15f18:	217d      	movs	r1, #125	; 0x7d
   15f1a:	e001      	b.n	15f20 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   15f1c:	2701      	movs	r7, #1
   15f1e:	215c      	movs	r1, #92	; 0x5c
   15f20:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   15f24:	6912      	ldr	r2, [r2, #16]
   15f26:	4790      	blx	r2
   15f28:	2800      	cmp	r0, #0
   15f2a:	d0e6      	beq.n	15efa <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x42>
   15f2c:	e7cf      	b.n	15ece <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   15f2e:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   15f32:	2602      	movs	r6, #2
   15f34:	2703      	movs	r7, #3
   15f36:	f1b8 0f00 	cmp.w	r8, #0
   15f3a:	fa25 f100 	lsr.w	r1, r5, r0
   15f3e:	bf08      	it	eq
   15f40:	2601      	moveq	r6, #1
   15f42:	bf18      	it	ne
   15f44:	f1a8 0801 	subne.w	r8, r8, #1
   15f48:	f367 111f 	bfi	r1, r7, #4, #28
   15f4c:	e7e8      	b.n	15f20 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   15f4e:	2602      	movs	r6, #2
   15f50:	2703      	movs	r7, #3
   15f52:	217b      	movs	r1, #123	; 0x7b
   15f54:	e7e4      	b.n	15f20 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   15f56:	2703      	movs	r7, #3
   15f58:	2175      	movs	r1, #117	; 0x75
   15f5a:	2603      	movs	r6, #3
   15f5c:	e7e0      	b.n	15f20 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   15f5e:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   15f62:	6912      	ldr	r2, [r2, #16]
   15f64:	4790      	blx	r2
   15f66:	2800      	cmp	r0, #0
   15f68:	d1b1      	bne.n	15ece <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   15f6a:	4638      	mov	r0, r7
   15f6c:	2701      	movs	r7, #1
   15f6e:	215c      	movs	r1, #92	; 0x5c
   15f70:	e8df f000 	tbb	[pc, r0]
   15f74:	06020331 	.word	0x06020331
   15f78:	e7f1      	b.n	15f5e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   15f7a:	2700      	movs	r7, #0
   15f7c:	4629      	mov	r1, r5
   15f7e:	e7ee      	b.n	15f5e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   15f80:	b2f0      	uxtb	r0, r6
   15f82:	2604      	movs	r6, #4
   15f84:	2703      	movs	r7, #3
   15f86:	215c      	movs	r1, #92	; 0x5c
   15f88:	e8df f000 	tbb	[pc, r0]
   15f8c:	1d080425 	.word	0x1d080425
   15f90:	0321      	.short	0x0321
   15f92:	e7e4      	b.n	15f5e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   15f94:	2600      	movs	r6, #0
   15f96:	2703      	movs	r7, #3
   15f98:	217d      	movs	r1, #125	; 0x7d
   15f9a:	e7e0      	b.n	15f5e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   15f9c:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   15fa0:	2602      	movs	r6, #2
   15fa2:	2703      	movs	r7, #3
   15fa4:	fa25 f000 	lsr.w	r0, r5, r0
   15fa8:	f000 000f 	and.w	r0, r0, #15
   15fac:	f100 0157 	add.w	r1, r0, #87	; 0x57
   15fb0:	280a      	cmp	r0, #10
   15fb2:	bf38      	it	cc
   15fb4:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   15fb8:	f1b8 0f00 	cmp.w	r8, #0
   15fbc:	bf0c      	ite	eq
   15fbe:	2601      	moveq	r6, #1
   15fc0:	f1a8 0801 	subne.w	r8, r8, #1
   15fc4:	e7cb      	b.n	15f5e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   15fc6:	2602      	movs	r6, #2
   15fc8:	2703      	movs	r7, #3
   15fca:	217b      	movs	r1, #123	; 0x7b
   15fcc:	e7c7      	b.n	15f5e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   15fce:	2703      	movs	r7, #3
   15fd0:	2175      	movs	r1, #117	; 0x75
   15fd2:	2603      	movs	r6, #3
   15fd4:	e7c3      	b.n	15f5e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   15fd6:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   15fda:	690a      	ldr	r2, [r1, #16]
   15fdc:	2127      	movs	r1, #39	; 0x27
   15fde:	b005      	add	sp, #20
   15fe0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15fe4:	4710      	bx	r2

00015fe6 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>:
   15fe6:	b08c      	sub	sp, #48	; 0x30
   15fe8:	e9cd 0100 	strd	r0, r1, [sp]
   15fec:	2002      	movs	r0, #2
   15fee:	a908      	add	r1, sp, #32
   15ff0:	9007      	str	r0, [sp, #28]
   15ff2:	9106      	str	r1, [sp, #24]
   15ff4:	2100      	movs	r1, #0
   15ff6:	9105      	str	r1, [sp, #20]
   15ff8:	e9cd 0103 	strd	r0, r1, [sp, #12]
   15ffc:	f24e 4010 	movw	r0, #58384	; 0xe410
   16000:	f2c0 0001 	movt	r0, #1
   16004:	a901      	add	r1, sp, #4
   16006:	9002      	str	r0, [sp, #8]
   16008:	f646 5033 	movw	r0, #27955	; 0x6d33
   1600c:	f2c0 0001 	movt	r0, #1
   16010:	900b      	str	r0, [sp, #44]	; 0x2c
   16012:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   16016:	4668      	mov	r0, sp
   16018:	f24e 4120 	movw	r1, #58400	; 0xe420
   1601c:	9008      	str	r0, [sp, #32]
   1601e:	a802      	add	r0, sp, #8
   16020:	f2c0 0101 	movt	r1, #1
   16024:	f7ff f8c2 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16028:	defe      	udf	#254	; 0xfe

0001602a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>:
   1602a:	b08c      	sub	sp, #48	; 0x30
   1602c:	e9cd 0100 	strd	r0, r1, [sp]
   16030:	2002      	movs	r0, #2
   16032:	a908      	add	r1, sp, #32
   16034:	9007      	str	r0, [sp, #28]
   16036:	9106      	str	r1, [sp, #24]
   16038:	2100      	movs	r1, #0
   1603a:	9105      	str	r1, [sp, #20]
   1603c:	e9cd 0103 	strd	r0, r1, [sp, #12]
   16040:	f24e 4054 	movw	r0, #58452	; 0xe454
   16044:	f2c0 0001 	movt	r0, #1
   16048:	a901      	add	r1, sp, #4
   1604a:	9002      	str	r0, [sp, #8]
   1604c:	f646 5033 	movw	r0, #27955	; 0x6d33
   16050:	f2c0 0001 	movt	r0, #1
   16054:	900b      	str	r0, [sp, #44]	; 0x2c
   16056:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   1605a:	4668      	mov	r0, sp
   1605c:	f24e 4164 	movw	r1, #58468	; 0xe464
   16060:	9008      	str	r0, [sp, #32]
   16062:	a802      	add	r0, sp, #8
   16064:	f2c0 0101 	movt	r1, #1
   16068:	f7ff f8a0 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1606c:	defe      	udf	#254	; 0xfe

0001606e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>:
   1606e:	b09a      	sub	sp, #104	; 0x68
   16070:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   16074:	e9cd 2300 	strd	r2, r3, [sp]
   16078:	d802      	bhi.n	16080 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12>
   1607a:	2501      	movs	r5, #1
   1607c:	468c      	mov	ip, r1
   1607e:	e03e      	b.n	160fe <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   16080:	f1c1 0e00 	rsb	lr, r1, #0
   16084:	f44f 7c80 	mov.w	ip, #256	; 0x100
   16088:	458c      	cmp	ip, r1
   1608a:	d205      	bcs.n	16098 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2a>
   1608c:	f910 400c 	ldrsb.w	r4, [r0, ip]
   16090:	f114 0f41 	cmn.w	r4, #65	; 0x41
   16094:	f300 8108 	bgt.w	162a8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23a>
   16098:	eb0e 040c 	add.w	r4, lr, ip
   1609c:	f1ac 0601 	sub.w	r6, ip, #1
   160a0:	2c01      	cmp	r4, #1
   160a2:	d02a      	beq.n	160fa <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   160a4:	428e      	cmp	r6, r1
   160a6:	d206      	bcs.n	160b6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x48>
   160a8:	eb00 050c 	add.w	r5, r0, ip
   160ac:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
   160b0:	f115 0f41 	cmn.w	r5, #65	; 0x41
   160b4:	dc21      	bgt.n	160fa <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   160b6:	f1ac 0602 	sub.w	r6, ip, #2
   160ba:	2c02      	cmp	r4, #2
   160bc:	d01d      	beq.n	160fa <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   160be:	428e      	cmp	r6, r1
   160c0:	d206      	bcs.n	160d0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x62>
   160c2:	eb00 050c 	add.w	r5, r0, ip
   160c6:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
   160ca:	f115 0f41 	cmn.w	r5, #65	; 0x41
   160ce:	dc14      	bgt.n	160fa <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   160d0:	f1ac 0603 	sub.w	r6, ip, #3
   160d4:	2c03      	cmp	r4, #3
   160d6:	d010      	beq.n	160fa <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   160d8:	428e      	cmp	r6, r1
   160da:	d206      	bcs.n	160ea <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x7c>
   160dc:	eb00 050c 	add.w	r5, r0, ip
   160e0:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
   160e4:	f115 0f41 	cmn.w	r5, #65	; 0x41
   160e8:	dc07      	bgt.n	160fa <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   160ea:	f1bc 0c04 	subs.w	ip, ip, #4
   160ee:	f04f 0500 	mov.w	r5, #0
   160f2:	d004      	beq.n	160fe <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   160f4:	2c04      	cmp	r4, #4
   160f6:	d1c7      	bne.n	16088 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1a>
   160f8:	e001      	b.n	160fe <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   160fa:	2500      	movs	r5, #0
   160fc:	46b4      	mov	ip, r6
   160fe:	2605      	movs	r6, #5
   16100:	2d00      	cmp	r5, #0
   16102:	f24e 5532 	movw	r5, #58674	; 0xe532
   16106:	e9cd 0c02 	strd	r0, ip, [sp, #8]
   1610a:	bf18      	it	ne
   1610c:	2600      	movne	r6, #0
   1610e:	9605      	str	r6, [sp, #20]
   16110:	f24e 0684 	movw	r6, #57476	; 0xe084
   16114:	f2c0 0501 	movt	r5, #1
   16118:	f2c0 0601 	movt	r6, #1
   1611c:	bf18      	it	ne
   1611e:	4635      	movne	r5, r6
   16120:	428a      	cmp	r2, r1
   16122:	9504      	str	r5, [sp, #16]
   16124:	bf98      	it	ls
   16126:	428b      	cmpls	r3, r1
   16128:	d92a      	bls.n	16180 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x112>
   1612a:	428a      	cmp	r2, r1
   1612c:	f04f 0003 	mov.w	r0, #3
   16130:	a910      	add	r1, sp, #64	; 0x40
   16132:	bf88      	it	hi
   16134:	4613      	movhi	r3, r2
   16136:	900f      	str	r0, [sp, #60]	; 0x3c
   16138:	910e      	str	r1, [sp, #56]	; 0x38
   1613a:	2100      	movs	r1, #0
   1613c:	910d      	str	r1, [sp, #52]	; 0x34
   1613e:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   16142:	f24e 5058 	movw	r0, #58712	; 0xe558
   16146:	f2c0 0001 	movt	r0, #1
   1614a:	a904      	add	r1, sp, #16
   1614c:	900a      	str	r0, [sp, #40]	; 0x28
   1614e:	f646 6021 	movw	r0, #28193	; 0x6e21
   16152:	f2c0 0001 	movt	r0, #1
   16156:	9308      	str	r3, [sp, #32]
   16158:	9015      	str	r0, [sp, #84]	; 0x54
   1615a:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
   1615e:	a802      	add	r0, sp, #8
   16160:	f24e 5170 	movw	r1, #58736	; 0xe570
   16164:	9012      	str	r0, [sp, #72]	; 0x48
   16166:	f646 5033 	movw	r0, #27955	; 0x6d33
   1616a:	f2c0 0101 	movt	r1, #1
   1616e:	f2c0 0001 	movt	r0, #1
   16172:	9011      	str	r0, [sp, #68]	; 0x44
   16174:	a808      	add	r0, sp, #32
   16176:	9010      	str	r0, [sp, #64]	; 0x40
   16178:	a80a      	add	r0, sp, #40	; 0x28
   1617a:	f7ff f817 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1617e:	defe      	udf	#254	; 0xfe
   16180:	429a      	cmp	r2, r3
   16182:	f200 80f1 	bhi.w	16368 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2fa>
   16186:	2a00      	cmp	r2, #0
   16188:	bf18      	it	ne
   1618a:	4291      	cmpne	r1, r2
   1618c:	d109      	bne.n	161a2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x134>
   1618e:	461a      	mov	r2, r3
   16190:	2a00      	cmp	r2, #0
   16192:	9206      	str	r2, [sp, #24]
   16194:	bf18      	it	ne
   16196:	428a      	cmpne	r2, r1
   16198:	d10e      	bne.n	161b8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x14a>
   1619a:	4613      	mov	r3, r2
   1619c:	428b      	cmp	r3, r1
   1619e:	d047      	beq.n	16230 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   161a0:	e052      	b.n	16248 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   161a2:	d9f5      	bls.n	16190 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x122>
   161a4:	5686      	ldrsb	r6, [r0, r2]
   161a6:	f116 0f40 	cmn.w	r6, #64	; 0x40
   161aa:	bfa8      	it	ge
   161ac:	461a      	movge	r2, r3
   161ae:	2a00      	cmp	r2, #0
   161b0:	9206      	str	r2, [sp, #24]
   161b2:	bf18      	it	ne
   161b4:	428a      	cmpne	r2, r1
   161b6:	d0f0      	beq.n	1619a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   161b8:	f1a0 0c01 	sub.w	ip, r0, #1
   161bc:	f101 0e02 	add.w	lr, r1, #2
   161c0:	1ccc      	adds	r4, r1, #3
   161c2:	1c4d      	adds	r5, r1, #1
   161c4:	1d0e      	adds	r6, r1, #4
   161c6:	428a      	cmp	r2, r1
   161c8:	d206      	bcs.n	161d8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x16a>
   161ca:	eb0c 0302 	add.w	r3, ip, r2
   161ce:	f993 3001 	ldrsb.w	r3, [r3, #1]
   161d2:	f113 0f41 	cmn.w	r3, #65	; 0x41
   161d6:	dce0      	bgt.n	1619a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   161d8:	1e53      	subs	r3, r2, #1
   161da:	bf18      	it	ne
   161dc:	4295      	cmpne	r5, r2
   161de:	d025      	beq.n	1622c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   161e0:	428b      	cmp	r3, r1
   161e2:	d204      	bcs.n	161ee <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x180>
   161e4:	f91c 7002 	ldrsb.w	r7, [ip, r2]
   161e8:	f117 0f41 	cmn.w	r7, #65	; 0x41
   161ec:	dc1e      	bgt.n	1622c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   161ee:	1e93      	subs	r3, r2, #2
   161f0:	bf18      	it	ne
   161f2:	4596      	cmpne	lr, r2
   161f4:	d01a      	beq.n	1622c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   161f6:	428b      	cmp	r3, r1
   161f8:	d206      	bcs.n	16208 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x19a>
   161fa:	eb0c 0702 	add.w	r7, ip, r2
   161fe:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
   16202:	f117 0f41 	cmn.w	r7, #65	; 0x41
   16206:	dc11      	bgt.n	1622c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   16208:	1ed3      	subs	r3, r2, #3
   1620a:	bf18      	it	ne
   1620c:	4294      	cmpne	r4, r2
   1620e:	d00d      	beq.n	1622c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   16210:	428b      	cmp	r3, r1
   16212:	d206      	bcs.n	16222 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1b4>
   16214:	eb0c 0702 	add.w	r7, ip, r2
   16218:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
   1621c:	f117 0f41 	cmn.w	r7, #65	; 0x41
   16220:	dc04      	bgt.n	1622c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   16222:	1f13      	subs	r3, r2, #4
   16224:	d002      	beq.n	1622c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   16226:	4296      	cmp	r6, r2
   16228:	461a      	mov	r2, r3
   1622a:	d1cc      	bne.n	161c6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x158>
   1622c:	428b      	cmp	r3, r1
   1622e:	d10b      	bne.n	16248 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   16230:	f24e 2020 	movw	r0, #57888	; 0xe220
   16234:	f24e 52c0 	movw	r2, #58816	; 0xe5c0
   16238:	f2c0 0001 	movt	r0, #1
   1623c:	f2c0 0201 	movt	r2, #1
   16240:	212b      	movs	r1, #43	; 0x2b
   16242:	f7fe ff7d 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16246:	defe      	udf	#254	; 0xfe
   16248:	18c5      	adds	r5, r0, r3
   1624a:	462e      	mov	r6, r5
   1624c:	f916 4b01 	ldrsb.w	r4, [r6], #1
   16250:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   16254:	b2e2      	uxtb	r2, r4
   16256:	dd02      	ble.n	1625e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1f0>
   16258:	9207      	str	r2, [sp, #28]
   1625a:	2101      	movs	r1, #1
   1625c:	e04d      	b.n	162fa <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   1625e:	4408      	add	r0, r1
   16260:	4286      	cmp	r6, r0
   16262:	d10b      	bne.n	1627c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x20e>
   16264:	2500      	movs	r5, #0
   16266:	4606      	mov	r6, r0
   16268:	f002 011f 	and.w	r1, r2, #31
   1626c:	2adf      	cmp	r2, #223	; 0xdf
   1626e:	d80d      	bhi.n	1628c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x21e>
   16270:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
   16274:	2880      	cmp	r0, #128	; 0x80
   16276:	9007      	str	r0, [sp, #28]
   16278:	d333      	bcc.n	162e2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   1627a:	e034      	b.n	162e6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   1627c:	7869      	ldrb	r1, [r5, #1]
   1627e:	1cae      	adds	r6, r5, #2
   16280:	f001 053f 	and.w	r5, r1, #63	; 0x3f
   16284:	f002 011f 	and.w	r1, r2, #31
   16288:	2adf      	cmp	r2, #223	; 0xdf
   1628a:	d9f1      	bls.n	16270 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x202>
   1628c:	4286      	cmp	r6, r0
   1628e:	d10d      	bne.n	162ac <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23e>
   16290:	2400      	movs	r4, #0
   16292:	4606      	mov	r6, r0
   16294:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   16298:	2af0      	cmp	r2, #240	; 0xf0
   1629a:	d20f      	bcs.n	162bc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x24e>
   1629c:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
   162a0:	2880      	cmp	r0, #128	; 0x80
   162a2:	9007      	str	r0, [sp, #28]
   162a4:	d31d      	bcc.n	162e2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   162a6:	e01e      	b.n	162e6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   162a8:	2500      	movs	r5, #0
   162aa:	e728      	b.n	160fe <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   162ac:	f816 4b01 	ldrb.w	r4, [r6], #1
   162b0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   162b4:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   162b8:	2af0      	cmp	r2, #240	; 0xf0
   162ba:	d3ef      	bcc.n	1629c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x22e>
   162bc:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   162c0:	ea02 4181 	and.w	r1, r2, r1, lsl #18
   162c4:	4286      	cmp	r6, r0
   162c6:	bf1a      	itte	ne
   162c8:	7830      	ldrbne	r0, [r6, #0]
   162ca:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
   162ce:	2000      	moveq	r0, #0
   162d0:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
   162d4:	4408      	add	r0, r1
   162d6:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   162da:	d0a9      	beq.n	16230 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   162dc:	2880      	cmp	r0, #128	; 0x80
   162de:	9007      	str	r0, [sp, #28]
   162e0:	d201      	bcs.n	162e6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   162e2:	2101      	movs	r1, #1
   162e4:	e009      	b.n	162fa <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   162e6:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   162ea:	d201      	bcs.n	162f0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x282>
   162ec:	2102      	movs	r1, #2
   162ee:	e004      	b.n	162fa <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   162f0:	2104      	movs	r1, #4
   162f2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   162f6:	bf38      	it	cc
   162f8:	2103      	movcc	r1, #3
   162fa:	4419      	add	r1, r3
   162fc:	aa10      	add	r2, sp, #64	; 0x40
   162fe:	a808      	add	r0, sp, #32
   16300:	e9cd 3108 	strd	r3, r1, [sp, #32]
   16304:	2105      	movs	r1, #5
   16306:	910f      	str	r1, [sp, #60]	; 0x3c
   16308:	920e      	str	r2, [sp, #56]	; 0x38
   1630a:	2200      	movs	r2, #0
   1630c:	920d      	str	r2, [sp, #52]	; 0x34
   1630e:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
   16312:	f24e 51fc 	movw	r1, #58876	; 0xe5fc
   16316:	f2c0 0101 	movt	r1, #1
   1631a:	aa04      	add	r2, sp, #16
   1631c:	910a      	str	r1, [sp, #40]	; 0x28
   1631e:	f646 6121 	movw	r1, #28193	; 0x6e21
   16322:	f2c0 0101 	movt	r1, #1
   16326:	9119      	str	r1, [sp, #100]	; 0x64
   16328:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
   1632c:	a902      	add	r1, sp, #8
   1632e:	9116      	str	r1, [sp, #88]	; 0x58
   16330:	f644 716f 	movw	r1, #20335	; 0x4f6f
   16334:	f2c0 0101 	movt	r1, #1
   16338:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   1633c:	f645 60b9 	movw	r0, #24249	; 0x5eb9
   16340:	f2c0 0001 	movt	r0, #1
   16344:	f24e 6124 	movw	r1, #58916	; 0xe624
   16348:	9013      	str	r0, [sp, #76]	; 0x4c
   1634a:	a807      	add	r0, sp, #28
   1634c:	9012      	str	r0, [sp, #72]	; 0x48
   1634e:	f646 5033 	movw	r0, #27955	; 0x6d33
   16352:	f2c0 0001 	movt	r0, #1
   16356:	f2c0 0101 	movt	r1, #1
   1635a:	9011      	str	r0, [sp, #68]	; 0x44
   1635c:	a806      	add	r0, sp, #24
   1635e:	9010      	str	r0, [sp, #64]	; 0x40
   16360:	a80a      	add	r0, sp, #40	; 0x28
   16362:	f7fe ff23 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16366:	defe      	udf	#254	; 0xfe
   16368:	2004      	movs	r0, #4
   1636a:	a910      	add	r1, sp, #64	; 0x40
   1636c:	900f      	str	r0, [sp, #60]	; 0x3c
   1636e:	910e      	str	r1, [sp, #56]	; 0x38
   16370:	2100      	movs	r1, #0
   16372:	910d      	str	r1, [sp, #52]	; 0x34
   16374:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   16378:	f24e 5090 	movw	r0, #58768	; 0xe590
   1637c:	f2c0 0001 	movt	r0, #1
   16380:	a904      	add	r1, sp, #16
   16382:	900a      	str	r0, [sp, #40]	; 0x28
   16384:	f646 6021 	movw	r0, #28193	; 0x6e21
   16388:	f2c0 0001 	movt	r0, #1
   1638c:	9017      	str	r0, [sp, #92]	; 0x5c
   1638e:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
   16392:	a802      	add	r0, sp, #8
   16394:	9014      	str	r0, [sp, #80]	; 0x50
   16396:	f646 5033 	movw	r0, #27955	; 0x6d33
   1639a:	a901      	add	r1, sp, #4
   1639c:	f2c0 0001 	movt	r0, #1
   163a0:	9013      	str	r0, [sp, #76]	; 0x4c
   163a2:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
   163a6:	f24e 51b0 	movw	r1, #58800	; 0xe5b0
   163aa:	4668      	mov	r0, sp
   163ac:	f2c0 0101 	movt	r1, #1
   163b0:	9010      	str	r0, [sp, #64]	; 0x40
   163b2:	a80a      	add	r0, sp, #40	; 0x28
   163b4:	f7fe fefa 	bl	151ac <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   163b8:	defe      	udf	#254	; 0xfe

000163ba <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>:
   163ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   163be:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   163c2:	d270      	bcs.n	164a6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xec>
   163c4:	f24e 6e44 	movw	lr, #58948	; 0xe644
   163c8:	f24e 6896 	movw	r8, #59030	; 0xe696
   163cc:	fa1f f980 	uxth.w	r9, r0
   163d0:	f2c0 0e01 	movt	lr, #1
   163d4:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   163d8:	f04f 0a00 	mov.w	sl, #0
   163dc:	f2c0 0801 	movt	r8, #1
   163e0:	4675      	mov	r5, lr
   163e2:	786e      	ldrb	r6, [r5, #1]
   163e4:	4652      	mov	r2, sl
   163e6:	782b      	ldrb	r3, [r5, #0]
   163e8:	3502      	adds	r5, #2
   163ea:	44b2      	add	sl, r6
   163ec:	4563      	cmp	r3, ip
   163ee:	d129      	bne.n	16444 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x8a>
   163f0:	4592      	cmp	sl, r2
   163f2:	f0c0 8112 	bcc.w	1661a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   163f6:	ea4f 035a 	mov.w	r3, sl, lsr #1
   163fa:	2b92      	cmp	r3, #146	; 0x92
   163fc:	f200 8112 	bhi.w	16624 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x26a>
   16400:	eb08 0302 	add.w	r3, r8, r2
   16404:	199a      	adds	r2, r3, r6
   16406:	b31e      	cbz	r6, 16450 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   16408:	461f      	mov	r7, r3
   1640a:	b2c4      	uxtb	r4, r0
   1640c:	f817 1b01 	ldrb.w	r1, [r7], #1
   16410:	42a1      	cmp	r1, r4
   16412:	f000 80b6 	beq.w	16582 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   16416:	4297      	cmp	r7, r2
   16418:	d01a      	beq.n	16450 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   1641a:	7859      	ldrb	r1, [r3, #1]
   1641c:	42a1      	cmp	r1, r4
   1641e:	f000 80b0 	beq.w	16582 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   16422:	1c99      	adds	r1, r3, #2
   16424:	4291      	cmp	r1, r2
   16426:	d013      	beq.n	16450 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   16428:	7899      	ldrb	r1, [r3, #2]
   1642a:	42a1      	cmp	r1, r4
   1642c:	f000 80a9 	beq.w	16582 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   16430:	1cd9      	adds	r1, r3, #3
   16432:	4291      	cmp	r1, r2
   16434:	d00c      	beq.n	16450 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   16436:	1d19      	adds	r1, r3, #4
   16438:	78db      	ldrb	r3, [r3, #3]
   1643a:	3e04      	subs	r6, #4
   1643c:	42a3      	cmp	r3, r4
   1643e:	460b      	mov	r3, r1
   16440:	d1e1      	bne.n	16406 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x4c>
   16442:	e09e      	b.n	16582 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   16444:	d808      	bhi.n	16458 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   16446:	f10e 0252 	add.w	r2, lr, #82	; 0x52
   1644a:	4295      	cmp	r5, r2
   1644c:	d1c9      	bne.n	163e2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   1644e:	e003      	b.n	16458 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   16450:	f10e 0152 	add.w	r1, lr, #82	; 0x52
   16454:	428d      	cmp	r5, r1
   16456:	d1c4      	bne.n	163e2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   16458:	f24e 75bb 	movw	r5, #59323	; 0xe7bb
   1645c:	2101      	movs	r1, #1
   1645e:	f2c0 0501 	movt	r5, #1
   16462:	4628      	mov	r0, r5
   16464:	4602      	mov	r2, r0
   16466:	f812 7b01 	ldrb.w	r7, [r2], #1
   1646a:	b27e      	sxtb	r6, r7
   1646c:	2e00      	cmp	r6, #0
   1646e:	d404      	bmi.n	1647a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xc0>
   16470:	4610      	mov	r0, r2
   16472:	ebb9 0907 	subs.w	r9, r9, r7
   16476:	d50f      	bpl.n	16498 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xde>
   16478:	e0bd      	b.n	165f6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   1647a:	f505 739d 	add.w	r3, r5, #314	; 0x13a
   1647e:	429a      	cmp	r2, r3
   16480:	f000 80db 	beq.w	1663a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   16484:	7842      	ldrb	r2, [r0, #1]
   16486:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   1648a:	3002      	adds	r0, #2
   1648c:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   16490:	ebb9 0907 	subs.w	r9, r9, r7
   16494:	f100 80af 	bmi.w	165f6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16498:	f505 729d 	add.w	r2, r5, #314	; 0x13a
   1649c:	f081 0101 	eor.w	r1, r1, #1
   164a0:	4290      	cmp	r0, r2
   164a2:	d1df      	bne.n	16464 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xaa>
   164a4:	e0a7      	b.n	165f6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   164a6:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
   164aa:	d26f      	bcs.n	1658c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1d2>
   164ac:	f64e 0ef5 	movw	lr, #59637	; 0xe8f5
   164b0:	f64e 183b 	movw	r8, #59707	; 0xe93b
   164b4:	fa1f f980 	uxth.w	r9, r0
   164b8:	f2c0 0e01 	movt	lr, #1
   164bc:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   164c0:	f04f 0a00 	mov.w	sl, #0
   164c4:	f2c0 0801 	movt	r8, #1
   164c8:	4675      	mov	r5, lr
   164ca:	786e      	ldrb	r6, [r5, #1]
   164cc:	4652      	mov	r2, sl
   164ce:	782b      	ldrb	r3, [r5, #0]
   164d0:	3502      	adds	r5, #2
   164d2:	44b2      	add	sl, r6
   164d4:	4563      	cmp	r3, ip
   164d6:	d125      	bne.n	16524 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x16a>
   164d8:	4592      	cmp	sl, r2
   164da:	f0c0 809e 	bcc.w	1661a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   164de:	f1ba 0fa6 	cmp.w	sl, #166	; 0xa6
   164e2:	f200 80a5 	bhi.w	16630 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x276>
   164e6:	eb08 0302 	add.w	r3, r8, r2
   164ea:	199a      	adds	r2, r3, r6
   164ec:	b306      	cbz	r6, 16530 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   164ee:	461f      	mov	r7, r3
   164f0:	b2c4      	uxtb	r4, r0
   164f2:	f817 1b01 	ldrb.w	r1, [r7], #1
   164f6:	42a1      	cmp	r1, r4
   164f8:	d043      	beq.n	16582 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   164fa:	4297      	cmp	r7, r2
   164fc:	d018      	beq.n	16530 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   164fe:	7859      	ldrb	r1, [r3, #1]
   16500:	42a1      	cmp	r1, r4
   16502:	d03e      	beq.n	16582 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   16504:	1c99      	adds	r1, r3, #2
   16506:	4291      	cmp	r1, r2
   16508:	d012      	beq.n	16530 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   1650a:	7899      	ldrb	r1, [r3, #2]
   1650c:	42a1      	cmp	r1, r4
   1650e:	d038      	beq.n	16582 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   16510:	1cd9      	adds	r1, r3, #3
   16512:	4291      	cmp	r1, r2
   16514:	d00c      	beq.n	16530 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   16516:	1d19      	adds	r1, r3, #4
   16518:	78db      	ldrb	r3, [r3, #3]
   1651a:	3e04      	subs	r6, #4
   1651c:	42a3      	cmp	r3, r4
   1651e:	460b      	mov	r3, r1
   16520:	d1e4      	bne.n	164ec <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x132>
   16522:	e02e      	b.n	16582 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   16524:	d808      	bhi.n	16538 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   16526:	f10e 0246 	add.w	r2, lr, #70	; 0x46
   1652a:	4295      	cmp	r5, r2
   1652c:	d1cd      	bne.n	164ca <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   1652e:	e003      	b.n	16538 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   16530:	f10e 0146 	add.w	r1, lr, #70	; 0x46
   16534:	428d      	cmp	r5, r1
   16536:	d1c8      	bne.n	164ca <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   16538:	f64e 15e1 	movw	r5, #59873	; 0xe9e1
   1653c:	2101      	movs	r1, #1
   1653e:	f2c0 0501 	movt	r5, #1
   16542:	4628      	mov	r0, r5
   16544:	4602      	mov	r2, r0
   16546:	f812 7b01 	ldrb.w	r7, [r2], #1
   1654a:	b27e      	sxtb	r6, r7
   1654c:	2e00      	cmp	r6, #0
   1654e:	d40a      	bmi.n	16566 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1ac>
   16550:	4610      	mov	r0, r2
   16552:	ebb9 0907 	subs.w	r9, r9, r7
   16556:	d44e      	bmi.n	165f6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16558:	f505 72cc 	add.w	r2, r5, #408	; 0x198
   1655c:	f081 0101 	eor.w	r1, r1, #1
   16560:	4290      	cmp	r0, r2
   16562:	d1ef      	bne.n	16544 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x18a>
   16564:	e047      	b.n	165f6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16566:	f505 73cc 	add.w	r3, r5, #408	; 0x198
   1656a:	429a      	cmp	r2, r3
   1656c:	d065      	beq.n	1663a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   1656e:	7842      	ldrb	r2, [r0, #1]
   16570:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   16574:	3002      	adds	r0, #2
   16576:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   1657a:	ebb9 0907 	subs.w	r9, r9, r7
   1657e:	d5eb      	bpl.n	16558 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x19e>
   16580:	e039      	b.n	165f6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16582:	2100      	movs	r1, #0
   16584:	f001 0001 	and.w	r0, r1, #1
   16588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1658c:	f240 51e2 	movw	r1, #1506	; 0x5e2
   16590:	f240 63e2 	movw	r3, #1762	; 0x6e2
   16594:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
   16598:	1842      	adds	r2, r0, r1
   1659a:	f2c0 030b 	movt	r3, #11
   1659e:	2100      	movs	r1, #0
   165a0:	429a      	cmp	r2, r3
   165a2:	d328      	bcc.n	165f6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   165a4:	f241 421f 	movw	r2, #5151	; 0x141f
   165a8:	f640 431f 	movw	r3, #3103	; 0xc1f
   165ac:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   165b0:	4402      	add	r2, r0
   165b2:	429a      	cmp	r2, r3
   165b4:	bf21      	itttt	cs
   165b6:	f243 125e 	movwcs	r2, #12638	; 0x315e
   165ba:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   165be:	4402      	addcs	r2, r0
   165c0:	2a0e      	cmpcs	r2, #14
   165c2:	d318      	bcc.n	165f6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   165c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   165c8:	f64b 031e 	movw	r3, #47134	; 0xb81e
   165cc:	f2c0 021f 	movt	r2, #31
   165d0:	f2c0 0302 	movt	r3, #2
   165d4:	4002      	ands	r2, r0
   165d6:	429a      	cmp	r2, r3
   165d8:	d00d      	beq.n	165f6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   165da:	f645 1229 	movw	r2, #22825	; 0x5929
   165de:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   165e2:	4402      	add	r2, r0
   165e4:	2a29      	cmp	r2, #41	; 0x29
   165e6:	bf21      	itttt	cs
   165e8:	f644 02cb 	movwcs	r2, #18635	; 0x48cb
   165ec:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   165f0:	4402      	addcs	r2, r0
   165f2:	2a0b      	cmpcs	r2, #11
   165f4:	d203      	bcs.n	165fe <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x244>
   165f6:	f001 0001 	and.w	r0, r1, #1
   165fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   165fe:	f5a0 2060 	sub.w	r0, r0, #917504	; 0xe0000
   16602:	f64f 620f 	movw	r2, #65039	; 0xfe0f
   16606:	f5a0 71f8 	sub.w	r1, r0, #496	; 0x1f0
   1660a:	2000      	movs	r0, #0
   1660c:	f2c0 0202 	movt	r2, #2
   16610:	4291      	cmp	r1, r2
   16612:	bf88      	it	hi
   16614:	2001      	movhi	r0, #1
   16616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1661a:	4610      	mov	r0, r2
   1661c:	4651      	mov	r1, sl
   1661e:	f7ff fd04 	bl	1602a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16622:	defe      	udf	#254	; 0xfe
   16624:	4650      	mov	r0, sl
   16626:	f240 1125 	movw	r1, #293	; 0x125
   1662a:	f7ff fcdc 	bl	15fe6 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   1662e:	defe      	udf	#254	; 0xfe
   16630:	4650      	mov	r0, sl
   16632:	21a6      	movs	r1, #166	; 0xa6
   16634:	f7ff fcd7 	bl	15fe6 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   16638:	defe      	udf	#254	; 0xfe
   1663a:	f24e 2020 	movw	r0, #57888	; 0xe220
   1663e:	f24e 6234 	movw	r2, #58932	; 0xe634
   16642:	f2c0 0001 	movt	r0, #1
   16646:	f2c0 0201 	movt	r2, #1
   1664a:	212b      	movs	r1, #43	; 0x2b
   1664c:	f7fe fd78 	bl	15140 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16650:	defe      	udf	#254	; 0xfe

00016652 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>:
   16652:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16656:	b0a3      	sub	sp, #140	; 0x8c
   16658:	468c      	mov	ip, r1
   1665a:	6809      	ldr	r1, [r1, #0]
   1665c:	06ca      	lsls	r2, r1, #27
   1665e:	d44a      	bmi.n	166f6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xa4>
   16660:	6804      	ldr	r4, [r0, #0]
   16662:	0688      	lsls	r0, r1, #26
   16664:	f100 8089 	bmi.w	1677a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x128>
   16668:	f248 5e1f 	movw	lr, #34079	; 0x851f
   1666c:	f24e 22b7 	movw	r2, #58039	; 0xe2b7
   16670:	f242 7810 	movw	r8, #10000	; 0x2710
   16674:	4544      	cmp	r4, r8
   16676:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   1667a:	f2c0 0201 	movt	r2, #1
   1667e:	f0c0 80e3 	bcc.w	16848 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1f6>
   16682:	f241 7959 	movw	r9, #5977	; 0x1759
   16686:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   1668a:	f10d 0b0c 	add.w	fp, sp, #12
   1668e:	2300      	movs	r3, #0
   16690:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   16694:	f04f 0a64 	mov.w	sl, #100	; 0x64
   16698:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   1669c:	fba4 0109 	umull	r0, r1, r4, r9
   166a0:	42bc      	cmp	r4, r7
   166a2:	ea4f 3051 	mov.w	r0, r1, lsr #13
   166a6:	fb00 4118 	mls	r1, r0, r8, r4
   166aa:	4604      	mov	r4, r0
   166ac:	b28d      	uxth	r5, r1
   166ae:	fba5 560e 	umull	r5, r6, r5, lr
   166b2:	ea4f 1556 	mov.w	r5, r6, lsr #5
   166b6:	eb0b 0603 	add.w	r6, fp, r3
   166ba:	fb05 111a 	mls	r1, r5, sl, r1
   166be:	f832 5015 	ldrh.w	r5, [r2, r5, lsl #1]
   166c2:	f1a3 0304 	sub.w	r3, r3, #4
   166c6:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   166ca:	b289      	uxth	r1, r1
   166cc:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   166d0:	f8a6 1025 	strh.w	r1, [r6, #37]	; 0x25
   166d4:	d8e2      	bhi.n	1669c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x4a>
   166d6:	f103 0127 	add.w	r1, r3, #39	; 0x27
   166da:	4604      	mov	r4, r0
   166dc:	2c63      	cmp	r4, #99	; 0x63
   166de:	f300 80b7 	bgt.w	16850 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1fe>
   166e2:	4623      	mov	r3, r4
   166e4:	2b0a      	cmp	r3, #10
   166e6:	f2c0 80c3 	blt.w	16870 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x21e>
   166ea:	1e88      	subs	r0, r1, #2
   166ec:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   166f0:	aa03      	add	r2, sp, #12
   166f2:	5211      	strh	r1, [r2, r0]
   166f4:	e0c1      	b.n	1687a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x228>
   166f6:	6800      	ldr	r0, [r0, #0]
   166f8:	f10d 0e0c 	add.w	lr, sp, #12
   166fc:	2381      	movs	r3, #129	; 0x81
   166fe:	2100      	movs	r1, #0
   16700:	f000 020f 	and.w	r2, r0, #15
   16704:	f102 0457 	add.w	r4, r2, #87	; 0x57
   16708:	2a0a      	cmp	r2, #10
   1670a:	bf38      	it	cc
   1670c:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   16710:	eb0e 0203 	add.w	r2, lr, r3
   16714:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   16718:	f802 4c02 	strb.w	r4, [r2, #-2]
   1671c:	d071      	beq.n	16802 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   1671e:	0904      	lsrs	r4, r0, #4
   16720:	f004 040f 	and.w	r4, r4, #15
   16724:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16728:	2c0a      	cmp	r4, #10
   1672a:	bf38      	it	cc
   1672c:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16730:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   16734:	f802 5c03 	strb.w	r5, [r2, #-3]
   16738:	d079      	beq.n	1682e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   1673a:	0a04      	lsrs	r4, r0, #8
   1673c:	f004 040f 	and.w	r4, r4, #15
   16740:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16744:	2c0a      	cmp	r4, #10
   16746:	bf38      	it	cc
   16748:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1674c:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   16750:	f802 5c04 	strb.w	r5, [r2, #-4]
   16754:	d073      	beq.n	1683e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   16756:	0b04      	lsrs	r4, r0, #12
   16758:	3b04      	subs	r3, #4
   1675a:	f004 040f 	and.w	r4, r4, #15
   1675e:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16762:	2c0a      	cmp	r4, #10
   16764:	bf38      	it	cc
   16766:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1676a:	f802 5c05 	strb.w	r5, [r2, #-5]
   1676e:	0c02      	lsrs	r2, r0, #16
   16770:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   16774:	4610      	mov	r0, r2
   16776:	d1c3      	bne.n	16700 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xae>
   16778:	e03f      	b.n	167fa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1a8>
   1677a:	f10d 0e0c 	add.w	lr, sp, #12
   1677e:	2381      	movs	r3, #129	; 0x81
   16780:	2100      	movs	r1, #0
   16782:	f004 000f 	and.w	r0, r4, #15
   16786:	eb0e 0203 	add.w	r2, lr, r3
   1678a:	f100 0537 	add.w	r5, r0, #55	; 0x37
   1678e:	280a      	cmp	r0, #10
   16790:	bf38      	it	cc
   16792:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   16796:	ebb1 1f14 	cmp.w	r1, r4, lsr #4
   1679a:	f802 5c02 	strb.w	r5, [r2, #-2]
   1679e:	d030      	beq.n	16802 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   167a0:	0920      	lsrs	r0, r4, #4
   167a2:	f000 000f 	and.w	r0, r0, #15
   167a6:	f100 0537 	add.w	r5, r0, #55	; 0x37
   167aa:	280a      	cmp	r0, #10
   167ac:	bf38      	it	cc
   167ae:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   167b2:	ebb1 2f14 	cmp.w	r1, r4, lsr #8
   167b6:	f802 5c03 	strb.w	r5, [r2, #-3]
   167ba:	d038      	beq.n	1682e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   167bc:	0a20      	lsrs	r0, r4, #8
   167be:	f000 000f 	and.w	r0, r0, #15
   167c2:	f100 0537 	add.w	r5, r0, #55	; 0x37
   167c6:	280a      	cmp	r0, #10
   167c8:	bf38      	it	cc
   167ca:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   167ce:	ebb1 3f14 	cmp.w	r1, r4, lsr #12
   167d2:	f802 5c04 	strb.w	r5, [r2, #-4]
   167d6:	d032      	beq.n	1683e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   167d8:	0b20      	lsrs	r0, r4, #12
   167da:	3b04      	subs	r3, #4
   167dc:	f000 000f 	and.w	r0, r0, #15
   167e0:	f100 0537 	add.w	r5, r0, #55	; 0x37
   167e4:	280a      	cmp	r0, #10
   167e6:	bf38      	it	cc
   167e8:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   167ec:	0c20      	lsrs	r0, r4, #16
   167ee:	ebb1 4f14 	cmp.w	r1, r4, lsr #16
   167f2:	4604      	mov	r4, r0
   167f4:	f802 5c05 	strb.w	r5, [r2, #-5]
   167f8:	d1c3      	bne.n	16782 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x130>
   167fa:	1e58      	subs	r0, r3, #1
   167fc:	2881      	cmp	r0, #129	; 0x81
   167fe:	d305      	bcc.n	1680c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   16800:	e019      	b.n	16836 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   16802:	1e59      	subs	r1, r3, #1
   16804:	1e98      	subs	r0, r3, #2
   16806:	460b      	mov	r3, r1
   16808:	2881      	cmp	r0, #129	; 0x81
   1680a:	d214      	bcs.n	16836 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   1680c:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   16810:	f24e 22b5 	movw	r2, #58037	; 0xe2b5
   16814:	4470      	add	r0, lr
   16816:	f2c0 0201 	movt	r2, #1
   1681a:	e9cd 0100 	strd	r0, r1, [sp]
   1681e:	4660      	mov	r0, ip
   16820:	2101      	movs	r1, #1
   16822:	2302      	movs	r3, #2
   16824:	f7ff f864 	bl	158f0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16828:	b023      	add	sp, #140	; 0x8c
   1682a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1682e:	1ed8      	subs	r0, r3, #3
   16830:	3b02      	subs	r3, #2
   16832:	2881      	cmp	r0, #129	; 0x81
   16834:	d3ea      	bcc.n	1680c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   16836:	2180      	movs	r1, #128	; 0x80
   16838:	f7ff fbf7 	bl	1602a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1683c:	defe      	udf	#254	; 0xfe
   1683e:	1f18      	subs	r0, r3, #4
   16840:	3b03      	subs	r3, #3
   16842:	2881      	cmp	r0, #129	; 0x81
   16844:	d3e2      	bcc.n	1680c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   16846:	e7f6      	b.n	16836 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   16848:	2127      	movs	r1, #39	; 0x27
   1684a:	2c63      	cmp	r4, #99	; 0x63
   1684c:	f77f af49 	ble.w	166e2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x90>
   16850:	b2a0      	uxth	r0, r4
   16852:	3902      	subs	r1, #2
   16854:	fba0 030e 	umull	r0, r3, r0, lr
   16858:	af03      	add	r7, sp, #12
   1685a:	2064      	movs	r0, #100	; 0x64
   1685c:	095b      	lsrs	r3, r3, #5
   1685e:	fb03 4010 	mls	r0, r3, r0, r4
   16862:	b280      	uxth	r0, r0
   16864:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   16868:	5278      	strh	r0, [r7, r1]
   1686a:	2b0a      	cmp	r3, #10
   1686c:	f6bf af3d 	bge.w	166ea <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x98>
   16870:	1e48      	subs	r0, r1, #1
   16872:	aa03      	add	r2, sp, #12
   16874:	f103 0130 	add.w	r1, r3, #48	; 0x30
   16878:	5411      	strb	r1, [r2, r0]
   1687a:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   1687e:	aa03      	add	r2, sp, #12
   16880:	4410      	add	r0, r2
   16882:	f24e 0284 	movw	r2, #57476	; 0xe084
   16886:	e9cd 0100 	strd	r0, r1, [sp]
   1688a:	f2c0 0201 	movt	r2, #1
   1688e:	4660      	mov	r0, ip
   16890:	2101      	movs	r1, #1
   16892:	2300      	movs	r3, #0
   16894:	f7ff f82c 	bl	158f0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16898:	b023      	add	sp, #140	; 0x8c
   1689a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001689e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>:
   1689e:	b580      	push	{r7, lr}
   168a0:	b0a2      	sub	sp, #136	; 0x88
   168a2:	7802      	ldrb	r2, [r0, #0]
   168a4:	468c      	mov	ip, r1
   168a6:	f002 030f 	and.w	r3, r2, #15
   168aa:	f103 0057 	add.w	r0, r3, #87	; 0x57
   168ae:	2b0a      	cmp	r3, #10
   168b0:	bf38      	it	cc
   168b2:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   168b6:	2300      	movs	r3, #0
   168b8:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   168bc:	d00b      	beq.n	168d6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x38>
   168be:	0913      	lsrs	r3, r2, #4
   168c0:	f103 0157 	add.w	r1, r3, #87	; 0x57
   168c4:	2aa0      	cmp	r2, #160	; 0xa0
   168c6:	bf38      	it	cc
   168c8:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   168cc:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   168d0:	227e      	movs	r2, #126	; 0x7e
   168d2:	2302      	movs	r3, #2
   168d4:	e001      	b.n	168da <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x3c>
   168d6:	227f      	movs	r2, #127	; 0x7f
   168d8:	2301      	movs	r3, #1
   168da:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   168de:	a802      	add	r0, sp, #8
   168e0:	4410      	add	r0, r2
   168e2:	f24e 22b5 	movw	r2, #58037	; 0xe2b5
   168e6:	e9cd 0300 	strd	r0, r3, [sp]
   168ea:	f2c0 0201 	movt	r2, #1
   168ee:	4660      	mov	r0, ip
   168f0:	2101      	movs	r1, #1
   168f2:	2302      	movs	r3, #2
   168f4:	f7fe fffc 	bl	158f0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   168f8:	b022      	add	sp, #136	; 0x88
   168fa:	bd80      	pop	{r7, pc}

000168fc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>:
   168fc:	b580      	push	{r7, lr}
   168fe:	b0a2      	sub	sp, #136	; 0x88
   16900:	7802      	ldrb	r2, [r0, #0]
   16902:	468c      	mov	ip, r1
   16904:	f002 030f 	and.w	r3, r2, #15
   16908:	f103 0037 	add.w	r0, r3, #55	; 0x37
   1690c:	2b0a      	cmp	r3, #10
   1690e:	bf38      	it	cc
   16910:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   16914:	2300      	movs	r3, #0
   16916:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   1691a:	d00b      	beq.n	16934 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x38>
   1691c:	0913      	lsrs	r3, r2, #4
   1691e:	f103 0137 	add.w	r1, r3, #55	; 0x37
   16922:	2aa0      	cmp	r2, #160	; 0xa0
   16924:	bf38      	it	cc
   16926:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   1692a:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   1692e:	227e      	movs	r2, #126	; 0x7e
   16930:	2302      	movs	r3, #2
   16932:	e001      	b.n	16938 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x3c>
   16934:	227f      	movs	r2, #127	; 0x7f
   16936:	2301      	movs	r3, #1
   16938:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   1693c:	a802      	add	r0, sp, #8
   1693e:	4410      	add	r0, r2
   16940:	f24e 22b5 	movw	r2, #58037	; 0xe2b5
   16944:	e9cd 0300 	strd	r0, r3, [sp]
   16948:	f2c0 0201 	movt	r2, #1
   1694c:	4660      	mov	r0, ip
   1694e:	2101      	movs	r1, #1
   16950:	2302      	movs	r3, #2
   16952:	f7fe ffcd 	bl	158f0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16956:	b022      	add	sp, #136	; 0x88
   16958:	bd80      	pop	{r7, pc}

0001695a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>:
   1695a:	b580      	push	{r7, lr}
   1695c:	b0a2      	sub	sp, #136	; 0x88
   1695e:	8800      	ldrh	r0, [r0, #0]
   16960:	468c      	mov	ip, r1
   16962:	f000 020f 	and.w	r2, r0, #15
   16966:	f102 0357 	add.w	r3, r2, #87	; 0x57
   1696a:	2a0a      	cmp	r2, #10
   1696c:	bf38      	it	cc
   1696e:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   16972:	2200      	movs	r2, #0
   16974:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   16978:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   1697c:	d02a      	beq.n	169d4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x7a>
   1697e:	0903      	lsrs	r3, r0, #4
   16980:	f003 030f 	and.w	r3, r3, #15
   16984:	f103 0157 	add.w	r1, r3, #87	; 0x57
   16988:	2b0a      	cmp	r3, #10
   1698a:	bf38      	it	cc
   1698c:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   16990:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   16994:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   16998:	d031      	beq.n	169fe <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xa4>
   1699a:	0a01      	lsrs	r1, r0, #8
   1699c:	f001 010f 	and.w	r1, r1, #15
   169a0:	f101 0257 	add.w	r2, r1, #87	; 0x57
   169a4:	290a      	cmp	r1, #10
   169a6:	bf38      	it	cc
   169a8:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   169ac:	2100      	movs	r1, #0
   169ae:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   169b2:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   169b6:	d027      	beq.n	16a08 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xae>
   169b8:	0b00      	lsrs	r0, r0, #12
   169ba:	f100 0157 	add.w	r1, r0, #87	; 0x57
   169be:	280a      	cmp	r0, #10
   169c0:	bf38      	it	cc
   169c2:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   169c6:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   169ca:	227d      	movs	r2, #125	; 0x7d
   169cc:	207c      	movs	r0, #124	; 0x7c
   169ce:	2881      	cmp	r0, #129	; 0x81
   169d0:	d304      	bcc.n	169dc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   169d2:	e01d      	b.n	16a10 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   169d4:	2280      	movs	r2, #128	; 0x80
   169d6:	207f      	movs	r0, #127	; 0x7f
   169d8:	2881      	cmp	r0, #129	; 0x81
   169da:	d219      	bcs.n	16a10 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   169dc:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   169e0:	ab02      	add	r3, sp, #8
   169e2:	4418      	add	r0, r3
   169e4:	2101      	movs	r1, #1
   169e6:	e9cd 0200 	strd	r0, r2, [sp]
   169ea:	f24e 22b5 	movw	r2, #58037	; 0xe2b5
   169ee:	f2c0 0201 	movt	r2, #1
   169f2:	4660      	mov	r0, ip
   169f4:	2302      	movs	r3, #2
   169f6:	f7fe ff7b 	bl	158f0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   169fa:	b022      	add	sp, #136	; 0x88
   169fc:	bd80      	pop	{r7, pc}
   169fe:	207e      	movs	r0, #126	; 0x7e
   16a00:	227f      	movs	r2, #127	; 0x7f
   16a02:	2881      	cmp	r0, #129	; 0x81
   16a04:	d3ea      	bcc.n	169dc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   16a06:	e003      	b.n	16a10 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   16a08:	207d      	movs	r0, #125	; 0x7d
   16a0a:	227e      	movs	r2, #126	; 0x7e
   16a0c:	2881      	cmp	r0, #129	; 0x81
   16a0e:	d3e5      	bcc.n	169dc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   16a10:	2180      	movs	r1, #128	; 0x80
   16a12:	f7ff fb0a 	bl	1602a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16a16:	defe      	udf	#254	; 0xfe

00016a18 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>:
   16a18:	b5b0      	push	{r4, r5, r7, lr}
   16a1a:	b0a2      	sub	sp, #136	; 0x88
   16a1c:	6800      	ldr	r0, [r0, #0]
   16a1e:	f10d 0e08 	add.w	lr, sp, #8
   16a22:	468c      	mov	ip, r1
   16a24:	2381      	movs	r3, #129	; 0x81
   16a26:	2100      	movs	r1, #0
   16a28:	f000 020f 	and.w	r2, r0, #15
   16a2c:	f102 0457 	add.w	r4, r2, #87	; 0x57
   16a30:	2a0a      	cmp	r2, #10
   16a32:	bf38      	it	cc
   16a34:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   16a38:	eb0e 0203 	add.w	r2, lr, r3
   16a3c:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   16a40:	f802 4c02 	strb.w	r4, [r2, #-2]
   16a44:	d030      	beq.n	16aa8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x90>
   16a46:	0904      	lsrs	r4, r0, #4
   16a48:	f004 040f 	and.w	r4, r4, #15
   16a4c:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16a50:	2c0a      	cmp	r4, #10
   16a52:	bf38      	it	cc
   16a54:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16a58:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   16a5c:	f802 5c03 	strb.w	r5, [r2, #-3]
   16a60:	d028      	beq.n	16ab4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x9c>
   16a62:	0a04      	lsrs	r4, r0, #8
   16a64:	f004 040f 	and.w	r4, r4, #15
   16a68:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16a6c:	2c0a      	cmp	r4, #10
   16a6e:	bf38      	it	cc
   16a70:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16a74:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   16a78:	f802 5c04 	strb.w	r5, [r2, #-4]
   16a7c:	d01f      	beq.n	16abe <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xa6>
   16a7e:	0b04      	lsrs	r4, r0, #12
   16a80:	3b04      	subs	r3, #4
   16a82:	f004 040f 	and.w	r4, r4, #15
   16a86:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16a8a:	2c0a      	cmp	r4, #10
   16a8c:	bf38      	it	cc
   16a8e:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16a92:	f802 5c05 	strb.w	r5, [r2, #-5]
   16a96:	0c02      	lsrs	r2, r0, #16
   16a98:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   16a9c:	4610      	mov	r0, r2
   16a9e:	d1c3      	bne.n	16a28 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x10>
   16aa0:	1e58      	subs	r0, r3, #1
   16aa2:	2881      	cmp	r0, #129	; 0x81
   16aa4:	d30f      	bcc.n	16ac6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   16aa6:	e01e      	b.n	16ae6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   16aa8:	1e59      	subs	r1, r3, #1
   16aaa:	1e98      	subs	r0, r3, #2
   16aac:	460b      	mov	r3, r1
   16aae:	2881      	cmp	r0, #129	; 0x81
   16ab0:	d309      	bcc.n	16ac6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   16ab2:	e018      	b.n	16ae6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   16ab4:	1ed8      	subs	r0, r3, #3
   16ab6:	3b02      	subs	r3, #2
   16ab8:	2881      	cmp	r0, #129	; 0x81
   16aba:	d304      	bcc.n	16ac6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   16abc:	e013      	b.n	16ae6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   16abe:	1f18      	subs	r0, r3, #4
   16ac0:	3b03      	subs	r3, #3
   16ac2:	2881      	cmp	r0, #129	; 0x81
   16ac4:	d20f      	bcs.n	16ae6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   16ac6:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   16aca:	f24e 22b5 	movw	r2, #58037	; 0xe2b5
   16ace:	4470      	add	r0, lr
   16ad0:	f2c0 0201 	movt	r2, #1
   16ad4:	e9cd 0100 	strd	r0, r1, [sp]
   16ad8:	4660      	mov	r0, ip
   16ada:	2101      	movs	r1, #1
   16adc:	2302      	movs	r3, #2
   16ade:	f7fe ff07 	bl	158f0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16ae2:	b022      	add	sp, #136	; 0x88
   16ae4:	bdb0      	pop	{r4, r5, r7, pc}
   16ae6:	2180      	movs	r1, #128	; 0x80
   16ae8:	f7ff fa9f 	bl	1602a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16aec:	defe      	udf	#254	; 0xfe

00016aee <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>:
   16aee:	b5b0      	push	{r4, r5, r7, lr}
   16af0:	b0a2      	sub	sp, #136	; 0x88
   16af2:	6800      	ldr	r0, [r0, #0]
   16af4:	f10d 0e08 	add.w	lr, sp, #8
   16af8:	468c      	mov	ip, r1
   16afa:	2381      	movs	r3, #129	; 0x81
   16afc:	2100      	movs	r1, #0
   16afe:	f000 020f 	and.w	r2, r0, #15
   16b02:	f102 0437 	add.w	r4, r2, #55	; 0x37
   16b06:	2a0a      	cmp	r2, #10
   16b08:	bf38      	it	cc
   16b0a:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   16b0e:	eb0e 0203 	add.w	r2, lr, r3
   16b12:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   16b16:	f802 4c02 	strb.w	r4, [r2, #-2]
   16b1a:	d030      	beq.n	16b7e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x90>
   16b1c:	0904      	lsrs	r4, r0, #4
   16b1e:	f004 040f 	and.w	r4, r4, #15
   16b22:	f104 0537 	add.w	r5, r4, #55	; 0x37
   16b26:	2c0a      	cmp	r4, #10
   16b28:	bf38      	it	cc
   16b2a:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16b2e:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   16b32:	f802 5c03 	strb.w	r5, [r2, #-3]
   16b36:	d028      	beq.n	16b8a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x9c>
   16b38:	0a04      	lsrs	r4, r0, #8
   16b3a:	f004 040f 	and.w	r4, r4, #15
   16b3e:	f104 0537 	add.w	r5, r4, #55	; 0x37
   16b42:	2c0a      	cmp	r4, #10
   16b44:	bf38      	it	cc
   16b46:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16b4a:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   16b4e:	f802 5c04 	strb.w	r5, [r2, #-4]
   16b52:	d01f      	beq.n	16b94 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xa6>
   16b54:	0b04      	lsrs	r4, r0, #12
   16b56:	3b04      	subs	r3, #4
   16b58:	f004 040f 	and.w	r4, r4, #15
   16b5c:	f104 0537 	add.w	r5, r4, #55	; 0x37
   16b60:	2c0a      	cmp	r4, #10
   16b62:	bf38      	it	cc
   16b64:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16b68:	f802 5c05 	strb.w	r5, [r2, #-5]
   16b6c:	0c02      	lsrs	r2, r0, #16
   16b6e:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   16b72:	4610      	mov	r0, r2
   16b74:	d1c3      	bne.n	16afe <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x10>
   16b76:	1e58      	subs	r0, r3, #1
   16b78:	2881      	cmp	r0, #129	; 0x81
   16b7a:	d30f      	bcc.n	16b9c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   16b7c:	e01e      	b.n	16bbc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   16b7e:	1e59      	subs	r1, r3, #1
   16b80:	1e98      	subs	r0, r3, #2
   16b82:	460b      	mov	r3, r1
   16b84:	2881      	cmp	r0, #129	; 0x81
   16b86:	d309      	bcc.n	16b9c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   16b88:	e018      	b.n	16bbc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   16b8a:	1ed8      	subs	r0, r3, #3
   16b8c:	3b02      	subs	r3, #2
   16b8e:	2881      	cmp	r0, #129	; 0x81
   16b90:	d304      	bcc.n	16b9c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   16b92:	e013      	b.n	16bbc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   16b94:	1f18      	subs	r0, r3, #4
   16b96:	3b03      	subs	r3, #3
   16b98:	2881      	cmp	r0, #129	; 0x81
   16b9a:	d20f      	bcs.n	16bbc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   16b9c:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   16ba0:	f24e 22b5 	movw	r2, #58037	; 0xe2b5
   16ba4:	4470      	add	r0, lr
   16ba6:	f2c0 0201 	movt	r2, #1
   16baa:	e9cd 0100 	strd	r0, r1, [sp]
   16bae:	4660      	mov	r0, ip
   16bb0:	2101      	movs	r1, #1
   16bb2:	2302      	movs	r3, #2
   16bb4:	f7fe fe9c 	bl	158f0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16bb8:	b022      	add	sp, #136	; 0x88
   16bba:	bdb0      	pop	{r4, r5, r7, pc}
   16bbc:	2180      	movs	r1, #128	; 0x80
   16bbe:	f7ff fa34 	bl	1602a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16bc2:	defe      	udf	#254	; 0xfe

00016bc4 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>:
   16bc4:	b580      	push	{r7, lr}
   16bc6:	b08c      	sub	sp, #48	; 0x30
   16bc8:	7802      	ldrb	r2, [r0, #0]
   16bca:	2a64      	cmp	r2, #100	; 0x64
   16bcc:	d314      	bcc.n	16bf8 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x34>
   16bce:	f248 501f 	movw	r0, #34079	; 0x851f
   16bd2:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
   16bd6:	fba2 0300 	umull	r0, r3, r2, r0
   16bda:	2064      	movs	r0, #100	; 0x64
   16bdc:	095b      	lsrs	r3, r3, #5
   16bde:	fb03 2010 	mls	r0, r3, r0, r2
   16be2:	f24e 22b7 	movw	r2, #58039	; 0xe2b7
   16be6:	f2c0 0201 	movt	r2, #1
   16bea:	b2c0      	uxtb	r0, r0
   16bec:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   16bf0:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   16bf4:	2024      	movs	r0, #36	; 0x24
   16bf6:	e003      	b.n	16c00 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x3c>
   16bf8:	2a0a      	cmp	r2, #10
   16bfa:	d206      	bcs.n	16c0a <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x46>
   16bfc:	2026      	movs	r0, #38	; 0x26
   16bfe:	4613      	mov	r3, r2
   16c00:	f103 0230 	add.w	r2, r3, #48	; 0x30
   16c04:	ab02      	add	r3, sp, #8
   16c06:	541a      	strb	r2, [r3, r0]
   16c08:	e008      	b.n	16c1c <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x58>
   16c0a:	f24e 20b7 	movw	r0, #58039	; 0xe2b7
   16c0e:	f2c0 0001 	movt	r0, #1
   16c12:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   16c16:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   16c1a:	2025      	movs	r0, #37	; 0x25
   16c1c:	f1c0 0227 	rsb	r2, r0, #39	; 0x27
   16c20:	ab02      	add	r3, sp, #8
   16c22:	4418      	add	r0, r3
   16c24:	2300      	movs	r3, #0
   16c26:	e9cd 0200 	strd	r0, r2, [sp]
   16c2a:	f24e 0284 	movw	r2, #57476	; 0xe084
   16c2e:	4608      	mov	r0, r1
   16c30:	f2c0 0201 	movt	r2, #1
   16c34:	2101      	movs	r1, #1
   16c36:	f7fe fe5b 	bl	158f0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16c3a:	b00c      	add	sp, #48	; 0x30
   16c3c:	bd80      	pop	{r7, pc}

00016c3e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>:
   16c3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c42:	b08f      	sub	sp, #60	; 0x3c
   16c44:	6805      	ldr	r5, [r0, #0]
   16c46:	f248 581f 	movw	r8, #34079	; 0x851f
   16c4a:	460e      	mov	r6, r1
   16c4c:	f24e 21b7 	movw	r1, #58039	; 0xe2b7
   16c50:	2d00      	cmp	r5, #0
   16c52:	f242 7910 	movw	r9, #10000	; 0x2710
   16c56:	462b      	mov	r3, r5
   16c58:	f2c5 18eb 	movt	r8, #20971	; 0x51eb
   16c5c:	bf48      	it	mi
   16c5e:	426b      	negmi	r3, r5
   16c60:	454b      	cmp	r3, r9
   16c62:	f2c0 0101 	movt	r1, #1
   16c66:	d33a      	bcc.n	16cde <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa0>
   16c68:	f241 7a59 	movw	sl, #5977	; 0x1759
   16c6c:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
   16c70:	f10d 0e14 	add.w	lr, sp, #20
   16c74:	2400      	movs	r4, #0
   16c76:	f2cd 1ab7 	movt	sl, #53687	; 0xd1b7
   16c7a:	f04f 0b64 	mov.w	fp, #100	; 0x64
   16c7e:	f2c0 50f5 	movt	r0, #1525	; 0x5f5
   16c82:	e9cd 5603 	strd	r5, r6, [sp, #12]
   16c86:	fba3 250a 	umull	r2, r5, r3, sl
   16c8a:	eb0e 0704 	add.w	r7, lr, r4
   16c8e:	3c04      	subs	r4, #4
   16c90:	4283      	cmp	r3, r0
   16c92:	ea4f 3255 	mov.w	r2, r5, lsr #13
   16c96:	fb02 3519 	mls	r5, r2, r9, r3
   16c9a:	4613      	mov	r3, r2
   16c9c:	b2ae      	uxth	r6, r5
   16c9e:	fba6 6c08 	umull	r6, ip, r6, r8
   16ca2:	ea4f 165c 	mov.w	r6, ip, lsr #5
   16ca6:	fb06 551b 	mls	r5, r6, fp, r5
   16caa:	f831 6016 	ldrh.w	r6, [r1, r6, lsl #1]
   16cae:	f8a7 6023 	strh.w	r6, [r7, #35]	; 0x23
   16cb2:	b2ad      	uxth	r5, r5
   16cb4:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   16cb8:	f8a7 5025 	strh.w	r5, [r7, #37]	; 0x25
   16cbc:	d8e3      	bhi.n	16c86 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x48>
   16cbe:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
   16cc2:	f104 0027 	add.w	r0, r4, #39	; 0x27
   16cc6:	4613      	mov	r3, r2
   16cc8:	2b63      	cmp	r3, #99	; 0x63
   16cca:	dc0b      	bgt.n	16ce4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa6>
   16ccc:	461a      	mov	r2, r3
   16cce:	2a0a      	cmp	r2, #10
   16cd0:	db17      	blt.n	16d02 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xc4>
   16cd2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   16cd6:	3802      	subs	r0, #2
   16cd8:	aa05      	add	r2, sp, #20
   16cda:	5211      	strh	r1, [r2, r0]
   16cdc:	e016      	b.n	16d0c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xce>
   16cde:	2027      	movs	r0, #39	; 0x27
   16ce0:	2b63      	cmp	r3, #99	; 0x63
   16ce2:	ddf3      	ble.n	16ccc <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x8e>
   16ce4:	b29a      	uxth	r2, r3
   16ce6:	3802      	subs	r0, #2
   16ce8:	fba2 2708 	umull	r2, r7, r2, r8
   16cec:	097a      	lsrs	r2, r7, #5
   16cee:	2764      	movs	r7, #100	; 0x64
   16cf0:	fb02 3317 	mls	r3, r2, r7, r3
   16cf4:	af05      	add	r7, sp, #20
   16cf6:	b29b      	uxth	r3, r3
   16cf8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   16cfc:	523b      	strh	r3, [r7, r0]
   16cfe:	2a0a      	cmp	r2, #10
   16d00:	dae7      	bge.n	16cd2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x94>
   16d02:	3801      	subs	r0, #1
   16d04:	f102 0130 	add.w	r1, r2, #48	; 0x30
   16d08:	aa05      	add	r2, sp, #20
   16d0a:	5411      	strb	r1, [r2, r0]
   16d0c:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   16d10:	aa05      	add	r2, sp, #20
   16d12:	4410      	add	r0, r2
   16d14:	f24e 0284 	movw	r2, #57476	; 0xe084
   16d18:	e9cd 0100 	strd	r0, r1, [sp]
   16d1c:	43e8      	mvns	r0, r5
   16d1e:	0fc1      	lsrs	r1, r0, #31
   16d20:	f2c0 0201 	movt	r2, #1
   16d24:	4630      	mov	r0, r6
   16d26:	2300      	movs	r3, #0
   16d28:	f7fe fde2 	bl	158f0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16d2c:	b00f      	add	sp, #60	; 0x3c
   16d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016d32 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>:
   16d32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d36:	b08d      	sub	sp, #52	; 0x34
   16d38:	468c      	mov	ip, r1
   16d3a:	6801      	ldr	r1, [r0, #0]
   16d3c:	f248 5e1f 	movw	lr, #34079	; 0x851f
   16d40:	f24e 20b7 	movw	r0, #58039	; 0xe2b7
   16d44:	f242 7810 	movw	r8, #10000	; 0x2710
   16d48:	4541      	cmp	r1, r8
   16d4a:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   16d4e:	f2c0 0001 	movt	r0, #1
   16d52:	d337      	bcc.n	16dc4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x92>
   16d54:	f241 7959 	movw	r9, #5977	; 0x1759
   16d58:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   16d5c:	f10d 0b0c 	add.w	fp, sp, #12
   16d60:	2300      	movs	r3, #0
   16d62:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   16d66:	f04f 0a64 	mov.w	sl, #100	; 0x64
   16d6a:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   16d6e:	fba1 2409 	umull	r2, r4, r1, r9
   16d72:	42b9      	cmp	r1, r7
   16d74:	ea4f 3254 	mov.w	r2, r4, lsr #13
   16d78:	fb02 1418 	mls	r4, r2, r8, r1
   16d7c:	4611      	mov	r1, r2
   16d7e:	b2a5      	uxth	r5, r4
   16d80:	fba5 560e 	umull	r5, r6, r5, lr
   16d84:	ea4f 1556 	mov.w	r5, r6, lsr #5
   16d88:	eb0b 0603 	add.w	r6, fp, r3
   16d8c:	fb05 441a 	mls	r4, r5, sl, r4
   16d90:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   16d94:	f1a3 0304 	sub.w	r3, r3, #4
   16d98:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   16d9c:	b2a4      	uxth	r4, r4
   16d9e:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   16da2:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   16da6:	d8e2      	bhi.n	16d6e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x3c>
   16da8:	f103 0427 	add.w	r4, r3, #39	; 0x27
   16dac:	4611      	mov	r1, r2
   16dae:	2963      	cmp	r1, #99	; 0x63
   16db0:	dc0b      	bgt.n	16dca <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x98>
   16db2:	460b      	mov	r3, r1
   16db4:	2b0a      	cmp	r3, #10
   16db6:	db17      	blt.n	16de8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xb6>
   16db8:	1ea1      	subs	r1, r4, #2
   16dba:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   16dbe:	aa03      	add	r2, sp, #12
   16dc0:	5250      	strh	r0, [r2, r1]
   16dc2:	e016      	b.n	16df2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xc0>
   16dc4:	2427      	movs	r4, #39	; 0x27
   16dc6:	2963      	cmp	r1, #99	; 0x63
   16dc8:	ddf3      	ble.n	16db2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x80>
   16dca:	b28a      	uxth	r2, r1
   16dcc:	3c02      	subs	r4, #2
   16dce:	fba2 230e 	umull	r2, r3, r2, lr
   16dd2:	2264      	movs	r2, #100	; 0x64
   16dd4:	095b      	lsrs	r3, r3, #5
   16dd6:	fb03 1112 	mls	r1, r3, r2, r1
   16dda:	aa03      	add	r2, sp, #12
   16ddc:	b289      	uxth	r1, r1
   16dde:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   16de2:	5311      	strh	r1, [r2, r4]
   16de4:	2b0a      	cmp	r3, #10
   16de6:	dae7      	bge.n	16db8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x86>
   16de8:	1e61      	subs	r1, r4, #1
   16dea:	aa03      	add	r2, sp, #12
   16dec:	f103 0030 	add.w	r0, r3, #48	; 0x30
   16df0:	5450      	strb	r0, [r2, r1]
   16df2:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   16df6:	aa03      	add	r2, sp, #12
   16df8:	4411      	add	r1, r2
   16dfa:	f24e 0284 	movw	r2, #57476	; 0xe084
   16dfe:	e9cd 1000 	strd	r1, r0, [sp]
   16e02:	f2c0 0201 	movt	r2, #1
   16e06:	4660      	mov	r0, ip
   16e08:	2101      	movs	r1, #1
   16e0a:	2300      	movs	r3, #0
   16e0c:	f7fe fd70 	bl	158f0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16e10:	b00d      	add	sp, #52	; 0x34
   16e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016e16 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E>:
   16e16:	e9d0 2000 	ldrd	r2, r0, [r0]
   16e1a:	68c3      	ldr	r3, [r0, #12]
   16e1c:	4610      	mov	r0, r2
   16e1e:	4718      	bx	r3

00016e20 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E>:
   16e20:	460b      	mov	r3, r1
   16e22:	e9d0 1200 	ldrd	r1, r2, [r0]
   16e26:	4618      	mov	r0, r3
   16e28:	f7fe beaa 	b.w	15b80 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>

00016e2c <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
   16e2c:	4b07      	ldr	r3, [pc, #28]	; (16e4c <__semihost+0x20>)
   16e2e:	781b      	ldrb	r3, [r3, #0]
   16e30:	b14b      	cbz	r3, 16e46 <__semihost+0x1a>
static int __semihost(int command, void* message) {
   16e32:	b410      	push	{r4}
   16e34:	4602      	mov	r2, r0
   16e36:	460c      	mov	r4, r1
    __asm( 
   16e38:	4610      	mov	r0, r2
   16e3a:	4621      	mov	r1, r4
   16e3c:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
   16e3e:	2000      	movs	r0, #0
}
   16e40:	f85d 4b04 	ldr.w	r4, [sp], #4
   16e44:	4770      	bx	lr
    if (!log_enabled) return -1;
   16e46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   16e4a:	4770      	bx	lr
   16e4c:	20000100 	.word	0x20000100

00016e50 <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   16e50:	4b02      	ldr	r3, [pc, #8]	; (16e5c <debugger_connected+0xc>)
   16e52:	6818      	ldr	r0, [r3, #0]
}
   16e54:	f000 0001 	and.w	r0, r0, #1
   16e58:	4770      	bx	lr
   16e5a:	bf00      	nop
   16e5c:	e000edf0 	.word	0xe000edf0

00016e60 <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
   16e60:	b570      	push	{r4, r5, r6, lr}
   16e62:	b084      	sub	sp, #16
   16e64:	4606      	mov	r6, r0
   16e66:	460d      	mov	r5, r1
   16e68:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
   16e6a:	f7ff fff1 	bl	16e50 <debugger_connected>
   16e6e:	4603      	mov	r3, r0
   16e70:	b108      	cbz	r0, 16e76 <semihost_write+0x16>
    if (length == 0) { return 0; }
   16e72:	b91c      	cbnz	r4, 16e7c <semihost_write+0x1c>
   16e74:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
   16e76:	4618      	mov	r0, r3
   16e78:	b004      	add	sp, #16
   16e7a:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
   16e7c:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
   16e7e:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
   16e80:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
   16e82:	a901      	add	r1, sp, #4
   16e84:	2005      	movs	r0, #5
   16e86:	f7ff ffd1 	bl	16e2c <__semihost>
   16e8a:	4603      	mov	r3, r0
   16e8c:	e7f3      	b.n	16e76 <semihost_write+0x16>
	...

00016e90 <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
   16e90:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
   16e92:	4b0e      	ldr	r3, [pc, #56]	; (16ecc <console_flush+0x3c>)
   16e94:	781b      	ldrb	r3, [r3, #0]
   16e96:	b1bb      	cbz	r3, 16ec8 <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
   16e98:	4b0d      	ldr	r3, [pc, #52]	; (16ed0 <console_flush+0x40>)
   16e9a:	681d      	ldr	r5, [r3, #0]
   16e9c:	b1a5      	cbz	r5, 16ec8 <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   16e9e:	4b0d      	ldr	r3, [pc, #52]	; (16ed4 <console_flush+0x44>)
   16ea0:	685b      	ldr	r3, [r3, #4]
   16ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
   16ea6:	b97b      	cbnz	r3, 16ec8 <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
   16ea8:	4b09      	ldr	r3, [pc, #36]	; (16ed0 <console_flush+0x40>)
   16eaa:	2200      	movs	r2, #0
   16eac:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
   16eae:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
   16eb0:	e005      	b.n	16ebe <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
   16eb2:	88e2      	ldrh	r2, [r4, #6]
   16eb4:	6821      	ldr	r1, [r4, #0]
   16eb6:	2002      	movs	r0, #2
   16eb8:	f7ff ffd2 	bl	16e60 <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
   16ebc:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
   16ebe:	2c00      	cmp	r4, #0
   16ec0:	d1f7      	bne.n	16eb2 <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
   16ec2:	4628      	mov	r0, r5
   16ec4:	f001 fbfc 	bl	186c0 <os_mbuf_free_chain>
}
   16ec8:	bd38      	pop	{r3, r4, r5, pc}
   16eca:	bf00      	nop
   16ecc:	20000100 	.word	0x20000100
   16ed0:	20007704 	.word	0x20007704
   16ed4:	e000ed00 	.word	0xe000ed00

00016ed8 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
   16ed8:	b508      	push	{r3, lr}
   16eda:	f7ff ffd9 	bl	16e90 <console_flush>
   16ede:	bd08      	pop	{r3, pc}

00016ee0 <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
   16ee0:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
   16ee2:	4b12      	ldr	r3, [pc, #72]	; (16f2c <console_buffer+0x4c>)
   16ee4:	781b      	ldrb	r3, [r3, #0]
   16ee6:	b903      	cbnz	r3, 16eea <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
   16ee8:	bd38      	pop	{r3, r4, r5, pc}
   16eea:	460d      	mov	r5, r1
   16eec:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
   16eee:	f7ff ffaf 	bl	16e50 <debugger_connected>
   16ef2:	2800      	cmp	r0, #0
   16ef4:	d0f8      	beq.n	16ee8 <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
   16ef6:	4b0e      	ldr	r3, [pc, #56]	; (16f30 <console_buffer+0x50>)
   16ef8:	681b      	ldr	r3, [r3, #0]
   16efa:	b173      	cbz	r3, 16f1a <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
   16efc:	4b0c      	ldr	r3, [pc, #48]	; (16f30 <console_buffer+0x50>)
   16efe:	6818      	ldr	r0, [r3, #0]
   16f00:	f001 fbf0 	bl	186e4 <os_mbuf_len>
   16f04:	4428      	add	r0, r5
   16f06:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   16f0a:	d2ed      	bcs.n	16ee8 <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
   16f0c:	b2aa      	uxth	r2, r5
   16f0e:	4621      	mov	r1, r4
   16f10:	4b07      	ldr	r3, [pc, #28]	; (16f30 <console_buffer+0x50>)
   16f12:	6818      	ldr	r0, [r3, #0]
   16f14:	f001 fbf0 	bl	186f8 <os_mbuf_append>
   16f18:	e7e6      	b.n	16ee8 <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
   16f1a:	2100      	movs	r1, #0
   16f1c:	b2a8      	uxth	r0, r5
   16f1e:	f001 fd93 	bl	18a48 <os_msys_get_pkthdr>
   16f22:	4b03      	ldr	r3, [pc, #12]	; (16f30 <console_buffer+0x50>)
   16f24:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
   16f26:	2800      	cmp	r0, #0
   16f28:	d1e8      	bne.n	16efc <console_buffer+0x1c>
   16f2a:	e7dd      	b.n	16ee8 <console_buffer+0x8>
   16f2c:	20000100 	.word	0x20000100
   16f30:	20007704 	.word	0x20007704

00016f34 <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
   16f34:	b500      	push	{lr}
   16f36:	b083      	sub	sp, #12
   16f38:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
   16f3c:	280d      	cmp	r0, #13
   16f3e:	d004      	beq.n	16f4a <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
   16f40:	2101      	movs	r1, #1
   16f42:	f10d 0007 	add.w	r0, sp, #7
   16f46:	f7ff ffcb 	bl	16ee0 <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
   16f4a:	b003      	add	sp, #12
   16f4c:	f85d fb04 	ldr.w	pc, [sp], #4

00016f50 <console_printhex>:
void console_printhex(uint8_t v) {
   16f50:	b510      	push	{r4, lr}
   16f52:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   16f54:	2310      	movs	r3, #16
    int length = 0;
   16f56:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   16f58:	e005      	b.n	16f66 <console_printhex+0x16>
        v = v % divisor;
   16f5a:	fbb0 f1f3 	udiv	r1, r0, r3
   16f5e:	fb03 0011 	mls	r0, r3, r1, r0
   16f62:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   16f64:	091b      	lsrs	r3, r3, #4
   16f66:	b18b      	cbz	r3, 16f8c <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
   16f68:	fbb0 f4f3 	udiv	r4, r0, r3
   16f6c:	f104 0130 	add.w	r1, r4, #48	; 0x30
   16f70:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
   16f72:	2939      	cmp	r1, #57	; 0x39
   16f74:	d902      	bls.n	16f7c <console_printhex+0x2c>
   16f76:	f104 0157 	add.w	r1, r4, #87	; 0x57
   16f7a:	b2c9      	uxtb	r1, r1
            if (length < size) {
   16f7c:	2a02      	cmp	r2, #2
   16f7e:	dcec      	bgt.n	16f5a <console_printhex+0xa>
                buffer[length++] = digit;
   16f80:	ac02      	add	r4, sp, #8
   16f82:	4414      	add	r4, r2
   16f84:	f804 1c04 	strb.w	r1, [r4, #-4]
   16f88:	3201      	adds	r2, #1
   16f8a:	e7e6      	b.n	16f5a <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
   16f8c:	b92a      	cbnz	r2, 16f9a <console_printhex+0x4a>
   16f8e:	ab02      	add	r3, sp, #8
   16f90:	4413      	add	r3, r2
   16f92:	2130      	movs	r1, #48	; 0x30
   16f94:	f803 1c04 	strb.w	r1, [r3, #-4]
   16f98:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
   16f9a:	2a02      	cmp	r2, #2
   16f9c:	dc04      	bgt.n	16fa8 <console_printhex+0x58>
   16f9e:	ab02      	add	r3, sp, #8
   16fa0:	441a      	add	r2, r3
   16fa2:	2300      	movs	r3, #0
   16fa4:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
   16fa8:	2300      	movs	r3, #0
   16faa:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
   16fae:	a801      	add	r0, sp, #4
   16fb0:	f002 fb73 	bl	1969a <strlen>
   16fb4:	4601      	mov	r1, r0
   16fb6:	a801      	add	r0, sp, #4
   16fb8:	f7ff ff92 	bl	16ee0 <console_buffer>
}
   16fbc:	b002      	add	sp, #8
   16fbe:	bd10      	pop	{r4, pc}

00016fc0 <console_printint>:
void console_printint(int i) {
   16fc0:	b508      	push	{r3, lr}
    console_printf("%d", i);
   16fc2:	4601      	mov	r1, r0
   16fc4:	4801      	ldr	r0, [pc, #4]	; (16fcc <console_printint+0xc>)
   16fc6:	f000 f873 	bl	170b0 <console_printf>
}
   16fca:	bd08      	pop	{r3, pc}
   16fcc:	0001f27c 	.word	0x0001f27c

00016fd0 <console_dump>:
    if (buffer == NULL || len == 0) { return; }
   16fd0:	b180      	cbz	r0, 16ff4 <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
   16fd2:	b570      	push	{r4, r5, r6, lr}
   16fd4:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
   16fd6:	b161      	cbz	r1, 16ff2 <console_dump+0x22>
   16fd8:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
   16fda:	2400      	movs	r4, #0
   16fdc:	e007      	b.n	16fee <console_dump+0x1e>
   16fde:	5d30      	ldrb	r0, [r6, r4]
   16fe0:	f7ff ffb6 	bl	16f50 <console_printhex>
   16fe4:	2101      	movs	r1, #1
   16fe6:	4804      	ldr	r0, [pc, #16]	; (16ff8 <console_dump+0x28>)
   16fe8:	f7ff ff7a 	bl	16ee0 <console_buffer>
   16fec:	3401      	adds	r4, #1
   16fee:	42ac      	cmp	r4, r5
   16ff0:	d3f5      	bcc.n	16fde <console_dump+0xe>
}
   16ff2:	bd70      	pop	{r4, r5, r6, pc}
   16ff4:	4770      	bx	lr
   16ff6:	bf00      	nop
   16ff8:	0001f278 	.word	0x0001f278

00016ffc <console_out_nolock>:

int console_out_nolock(int character) {
   16ffc:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   16ffe:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
   17000:	4b0b      	ldr	r3, [pc, #44]	; (17030 <console_out_nolock+0x34>)
   17002:	781b      	ldrb	r3, [r3, #0]
   17004:	b953      	cbnz	r3, 1701c <console_out_nolock+0x20>
   17006:	4604      	mov	r4, r0
    if ('\n' == c) {
   17008:	2d0a      	cmp	r5, #10
   1700a:	d009      	beq.n	17020 <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
   1700c:	4b09      	ldr	r3, [pc, #36]	; (17034 <console_out_nolock+0x38>)
   1700e:	2201      	movs	r2, #1
   17010:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
   17012:	4628      	mov	r0, r5
   17014:	f7ff ff8e 	bl	16f34 <semihosting_console_write_ch>
    return character;
   17018:	4620      	mov	r0, r4
}
   1701a:	bd38      	pop	{r3, r4, r5, pc}
   1701c:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
   1701e:	e7fc      	b.n	1701a <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
   17020:	200d      	movs	r0, #13
   17022:	f7ff ff87 	bl	16f34 <semihosting_console_write_ch>
        console_is_midline = 0;
   17026:	4b03      	ldr	r3, [pc, #12]	; (17034 <console_out_nolock+0x38>)
   17028:	2200      	movs	r2, #0
   1702a:	601a      	str	r2, [r3, #0]
   1702c:	e7f1      	b.n	17012 <console_out_nolock+0x16>
   1702e:	bf00      	nop
   17030:	2000e5b4 	.word	0x2000e5b4
   17034:	2000e5b8 	.word	0x2000e5b8

00017038 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
   17038:	2000      	movs	r0, #0
   1703a:	4770      	bx	lr

0001703c <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
   1703c:	b570      	push	{r4, r5, r6, lr}
   1703e:	4606      	mov	r6, r0
   17040:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
   17042:	2400      	movs	r4, #0
   17044:	42ac      	cmp	r4, r5
   17046:	da07      	bge.n	17058 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
   17048:	5d30      	ldrb	r0, [r6, r4]
   1704a:	f7ff ffd7 	bl	16ffc <console_out_nolock>
   1704e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   17052:	d001      	beq.n	17058 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
   17054:	3401      	adds	r4, #1
   17056:	e7f5      	b.n	17044 <console_write+0x8>
    }
}
   17058:	bd70      	pop	{r4, r5, r6, pc}

0001705a <console_blocking_mode>:

void console_blocking_mode(void) {
   1705a:	b508      	push	{r3, lr}
    disable_buffer();
   1705c:	f7ff ff3c 	bl	16ed8 <disable_buffer>
}
   17060:	bd08      	pop	{r3, pc}
	...

00017064 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
   17064:	b510      	push	{r4, lr}
   17066:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   17068:	4b0d      	ldr	r3, [pc, #52]	; (170a0 <console_pkg_init+0x3c>)
   1706a:	781b      	ldrb	r3, [r3, #0]
   1706c:	b193      	cbz	r3, 17094 <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
   1706e:	480d      	ldr	r0, [pc, #52]	; (170a4 <console_pkg_init+0x40>)
   17070:	f001 f9fa 	bl	18468 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   17074:	480c      	ldr	r0, [pc, #48]	; (170a8 <console_pkg_init+0x44>)
   17076:	f001 fd15 	bl	18aa4 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
   1707a:	f7ff ffdd 	bl	17038 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   1707e:	b138      	cbz	r0, 17090 <console_pkg_init+0x2c>
   17080:	2000      	movs	r0, #0
   17082:	9000      	str	r0, [sp, #0]
   17084:	4b09      	ldr	r3, [pc, #36]	; (170ac <console_pkg_init+0x48>)
   17086:	681c      	ldr	r4, [r3, #0]
   17088:	4603      	mov	r3, r0
   1708a:	4602      	mov	r2, r0
   1708c:	4601      	mov	r1, r0
   1708e:	47a0      	blx	r4
}
   17090:	b002      	add	sp, #8
   17092:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   17094:	461a      	mov	r2, r3
   17096:	4619      	mov	r1, r3
   17098:	4618      	mov	r0, r3
   1709a:	f000 fed1 	bl	17e40 <__assert_func>
   1709e:	bf00      	nop
   170a0:	2000e5bc 	.word	0x2000e5bc
   170a4:	20007708 	.word	0x20007708
   170a8:	20007718 	.word	0x20007718
   170ac:	20000104 	.word	0x20000104

000170b0 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   170b0:	b40f      	push	{r0, r1, r2, r3}
   170b2:	b510      	push	{r4, lr}
   170b4:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   170b6:	f000 f81f 	bl	170f8 <console_get_ticks>
   170ba:	b160      	cbz	r0, 170d6 <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   170bc:	4b0c      	ldr	r3, [pc, #48]	; (170f0 <console_printf+0x40>)
   170be:	681b      	ldr	r3, [r3, #0]
   170c0:	b10b      	cbz	r3, 170c6 <console_printf+0x16>
    num_chars = 0;
   170c2:	2400      	movs	r4, #0
   170c4:	e008      	b.n	170d8 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   170c6:	f002 f8d9 	bl	1927c <os_time_get>
   170ca:	4601      	mov	r1, r0
   170cc:	4809      	ldr	r0, [pc, #36]	; (170f4 <console_printf+0x44>)
   170ce:	f002 fd97 	bl	19c00 <printf>
   170d2:	4604      	mov	r4, r0
   170d4:	e000      	b.n	170d8 <console_printf+0x28>
    num_chars = 0;
   170d6:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
   170d8:	a905      	add	r1, sp, #20
   170da:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
   170dc:	9804      	ldr	r0, [sp, #16]
   170de:	f002 fdbf 	bl	19c60 <vprintf>
    va_end(args);

    return num_chars;
}
   170e2:	4420      	add	r0, r4
   170e4:	b002      	add	sp, #8
   170e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   170ea:	b004      	add	sp, #16
   170ec:	4770      	bx	lr
   170ee:	bf00      	nop
   170f0:	2000e5b8 	.word	0x2000e5b8
   170f4:	0001f280 	.word	0x0001f280

000170f8 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   170f8:	4b01      	ldr	r3, [pc, #4]	; (17100 <console_get_ticks+0x8>)
   170fa:	7818      	ldrb	r0, [r3, #0]
   170fc:	4770      	bx	lr
   170fe:	bf00      	nop
   17100:	20007724 	.word	0x20007724

00017104 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   17104:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   17106:	f000 fe9b 	bl	17e40 <__assert_func>
	...

0001710c <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   1710c:	4b01      	ldr	r3, [pc, #4]	; (17114 <sysinit_start+0x8>)
   1710e:	2201      	movs	r2, #1
   17110:	701a      	strb	r2, [r3, #0]
}
   17112:	4770      	bx	lr
   17114:	2000e5bc 	.word	0x2000e5bc

00017118 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   17118:	4b01      	ldr	r3, [pc, #4]	; (17120 <sysinit_end+0x8>)
   1711a:	2200      	movs	r2, #0
   1711c:	701a      	strb	r2, [r3, #0]
}
   1711e:	4770      	bx	lr
   17120:	2000e5bc 	.word	0x2000e5bc

00017124 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   17124:	4a09      	ldr	r2, [pc, #36]	; (1714c <NVIC_Relocate+0x28>)
   17126:	4b0a      	ldr	r3, [pc, #40]	; (17150 <NVIC_Relocate+0x2c>)
   17128:	429a      	cmp	r2, r3
   1712a:	d00a      	beq.n	17142 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   1712c:	2300      	movs	r3, #0
   1712e:	e006      	b.n	1713e <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
   17130:	4a07      	ldr	r2, [pc, #28]	; (17150 <NVIC_Relocate+0x2c>)
   17132:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   17136:	4a05      	ldr	r2, [pc, #20]	; (1714c <NVIC_Relocate+0x28>)
   17138:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   1713c:	3301      	adds	r3, #1
   1713e:	2b35      	cmp	r3, #53	; 0x35
   17140:	ddf6      	ble.n	17130 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   17142:	4a02      	ldr	r2, [pc, #8]	; (1714c <NVIC_Relocate+0x28>)
   17144:	4b03      	ldr	r3, [pc, #12]	; (17154 <NVIC_Relocate+0x30>)
   17146:	609a      	str	r2, [r3, #8]
#endif
}
   17148:	4770      	bx	lr
   1714a:	bf00      	nop
   1714c:	20000000 	.word	0x20000000
   17150:	00008020 	.word	0x00008020
   17154:	e000ed00 	.word	0xe000ed00

00017158 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
   17158:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   1715a:	2400      	movs	r4, #0
   1715c:	e000      	b.n	17160 <hal_gpio_irq_handler+0x8>
   1715e:	3401      	adds	r4, #1
   17160:	2c07      	cmp	r4, #7
   17162:	dc1c      	bgt.n	1719e <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
   17164:	f104 0340 	add.w	r3, r4, #64	; 0x40
   17168:	4a0d      	ldr	r2, [pc, #52]	; (171a0 <hal_gpio_irq_handler+0x48>)
   1716a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1716e:	2b00      	cmp	r3, #0
   17170:	d0f5      	beq.n	1715e <hal_gpio_irq_handler+0x6>
   17172:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   17176:	2301      	movs	r3, #1
   17178:	40a3      	lsls	r3, r4
   1717a:	421a      	tst	r2, r3
   1717c:	d0ef      	beq.n	1715e <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
   1717e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   17182:	4a07      	ldr	r2, [pc, #28]	; (171a0 <hal_gpio_irq_handler+0x48>)
   17184:	2100      	movs	r1, #0
   17186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
   1718a:	4b06      	ldr	r3, [pc, #24]	; (171a4 <hal_gpio_irq_handler+0x4c>)
   1718c:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   17190:	2a00      	cmp	r2, #0
   17192:	d0e4      	beq.n	1715e <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
   17194:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   17198:	6858      	ldr	r0, [r3, #4]
   1719a:	4790      	blx	r2
   1719c:	e7df      	b.n	1715e <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
   1719e:	bd10      	pop	{r4, pc}
   171a0:	40006000 	.word	0x40006000
   171a4:	20007728 	.word	0x20007728

000171a8 <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
   171a8:	4b06      	ldr	r3, [pc, #24]	; (171c4 <hal_gpio_irq_setup+0x1c>)
   171aa:	781b      	ldrb	r3, [r3, #0]
   171ac:	b94b      	cbnz	r3, 171c2 <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   171ae:	4b06      	ldr	r3, [pc, #24]	; (171c8 <hal_gpio_irq_setup+0x20>)
   171b0:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   171b2:	4a06      	ldr	r2, [pc, #24]	; (171cc <hal_gpio_irq_setup+0x24>)
   171b4:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   171b6:	4b06      	ldr	r3, [pc, #24]	; (171d0 <hal_gpio_irq_setup+0x28>)
   171b8:	2240      	movs	r2, #64	; 0x40
   171ba:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
   171bc:	4b01      	ldr	r3, [pc, #4]	; (171c4 <hal_gpio_irq_setup+0x1c>)
   171be:	2201      	movs	r2, #1
   171c0:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
   171c2:	4770      	bx	lr
   171c4:	20007768 	.word	0x20007768
   171c8:	e000ed00 	.word	0xe000ed00
   171cc:	00017159 	.word	0x00017159
   171d0:	e000e100 	.word	0xe000e100

000171d4 <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   171d4:	2000      	movs	r0, #0
   171d6:	2807      	cmp	r0, #7
   171d8:	dc05      	bgt.n	171e6 <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
   171da:	4b04      	ldr	r3, [pc, #16]	; (171ec <hal_gpio_find_empty_slot+0x18>)
   171dc:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   171e0:	b11b      	cbz	r3, 171ea <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   171e2:	3001      	adds	r0, #1
   171e4:	e7f7      	b.n	171d6 <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
   171e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   171ea:	4770      	bx	lr
   171ec:	20007728 	.word	0x20007728

000171f0 <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
   171f0:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   171f2:	2000      	movs	r0, #0
   171f4:	e000      	b.n	171f8 <hal_gpio_find_pin+0x8>
   171f6:	3001      	adds	r0, #1
   171f8:	2807      	cmp	r0, #7
   171fa:	dc0e      	bgt.n	1721a <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
   171fc:	4b08      	ldr	r3, [pc, #32]	; (17220 <hal_gpio_find_pin+0x30>)
   171fe:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   17202:	2b00      	cmp	r3, #0
   17204:	d0f7      	beq.n	171f6 <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
   17206:	f500 73a2 	add.w	r3, r0, #324	; 0x144
   1720a:	4a06      	ldr	r2, [pc, #24]	; (17224 <hal_gpio_find_pin+0x34>)
   1720c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17210:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
   17214:	428b      	cmp	r3, r1
   17216:	d1ee      	bne.n	171f6 <hal_gpio_find_pin+0x6>
   17218:	e001      	b.n	1721e <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
   1721a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1721e:	4770      	bx	lr
   17220:	20007728 	.word	0x20007728
   17224:	40006000 	.word	0x40006000

00017228 <hal_gpio_init_in>:
    switch (pull) {
   17228:	2901      	cmp	r1, #1
   1722a:	d003      	beq.n	17234 <hal_gpio_init_in+0xc>
   1722c:	2902      	cmp	r1, #2
   1722e:	d00f      	beq.n	17250 <hal_gpio_init_in+0x28>
        conf = 0;
   17230:	2100      	movs	r1, #0
        break;
   17232:	e000      	b.n	17236 <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
   17234:	210c      	movs	r1, #12
    port->PIN_CNF[pin_index] = conf;
   17236:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1723a:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   1723e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
   17242:	2301      	movs	r3, #1
   17244:	fa03 f000 	lsl.w	r0, r3, r0
   17248:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
   1724c:	2000      	movs	r0, #0
   1724e:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
   17250:	2104      	movs	r1, #4
   17252:	e7f0      	b.n	17236 <hal_gpio_init_in+0xe>

00017254 <hal_gpio_init_out>:
    if (val) {
   17254:	b999      	cbnz	r1, 1727e <hal_gpio_init_out+0x2a>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   17256:	2301      	movs	r3, #1
   17258:	4083      	lsls	r3, r0
   1725a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1725e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   17262:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   17266:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   1726a:	2103      	movs	r1, #3
   1726c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
   17270:	2301      	movs	r3, #1
   17272:	fa03 f000 	lsl.w	r0, r3, r0
   17276:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
   1727a:	2000      	movs	r0, #0
   1727c:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   1727e:	2301      	movs	r3, #1
   17280:	4083      	lsls	r3, r0
   17282:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   17286:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1728a:	e7ea      	b.n	17262 <hal_gpio_init_out+0xe>

0001728c <hal_gpio_write>:
    if (val) {
   1728c:	b939      	cbnz	r1, 1729e <hal_gpio_write+0x12>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   1728e:	2301      	movs	r3, #1
   17290:	fa03 f000 	lsl.w	r0, r3, r0
   17294:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17298:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1729c:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   1729e:	2301      	movs	r3, #1
   172a0:	fa03 f000 	lsl.w	r0, r3, r0
   172a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   172a8:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   172ac:	4770      	bx	lr

000172ae <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
   172ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   172b2:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
   172b6:	2301      	movs	r3, #1
   172b8:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   172ba:	421a      	tst	r2, r3
   172bc:	d108      	bne.n	172d0 <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   172be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   172c2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   172c6:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   172ca:	f000 0001 	and.w	r0, r0, #1
}
   172ce:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   172d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   172d4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   172d8:	fa23 f000 	lsr.w	r0, r3, r0
   172dc:	f000 0001 	and.w	r0, r0, #1
   172e0:	4770      	bx	lr
	...

000172e4 <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
   172e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   172e8:	4680      	mov	r8, r0
   172ea:	460f      	mov	r7, r1
   172ec:	4616      	mov	r6, r2
   172ee:	461c      	mov	r4, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
   172f0:	f7ff ff5a 	bl	171a8 <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
   172f4:	f7ff ff6e 	bl	171d4 <hal_gpio_find_empty_slot>
    if (i < 0) {
   172f8:	1e05      	subs	r5, r0, #0
   172fa:	db27      	blt.n	1734c <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
   172fc:	f89d 1018 	ldrb.w	r1, [sp, #24]
   17300:	4640      	mov	r0, r8
   17302:	f7ff ff91 	bl	17228 <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
   17306:	2c02      	cmp	r4, #2
   17308:	d01d      	beq.n	17346 <hal_gpio_irq_init+0x62>
   1730a:	2c03      	cmp	r4, #3
   1730c:	d018      	beq.n	17340 <hal_gpio_irq_init+0x5c>
   1730e:	2c01      	cmp	r4, #1
   17310:	d002      	beq.n	17318 <hal_gpio_irq_init+0x34>
        break;
    case HAL_GPIO_TRIG_BOTH:
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
        break;
    default:
        return -1;
   17312:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17316:	e011      	b.n	1733c <hal_gpio_irq_init+0x58>
        conf = GPIOTE_CONFIG_POLARITY_LoToHi << GPIOTE_CONFIG_POLARITY_Pos;
   17318:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
   1731c:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
   17320:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
   17324:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   17328:	4b0a      	ldr	r3, [pc, #40]	; (17354 <hal_gpio_irq_init+0x70>)
   1732a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
   1732e:	4b0a      	ldr	r3, [pc, #40]	; (17358 <hal_gpio_irq_init+0x74>)
   17330:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
   17334:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   17338:	605e      	str	r6, [r3, #4]

    return 0;
   1733a:	2000      	movs	r0, #0
}
   1733c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
   17340:	f44f 3040 	mov.w	r0, #196608	; 0x30000
        break;
   17344:	e7ea      	b.n	1731c <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
   17346:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1734a:	e7e7      	b.n	1731c <hal_gpio_irq_init+0x38>
        return -1;
   1734c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17350:	e7f4      	b.n	1733c <hal_gpio_irq_init+0x58>
   17352:	bf00      	nop
   17354:	40006000 	.word	0x40006000
   17358:	20007728 	.word	0x20007728

0001735c <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
   1735c:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
   1735e:	f7ff ff47 	bl	171f0 <hal_gpio_find_pin>
    if (i < 0) {
   17362:	2800      	cmp	r0, #0
   17364:	db0a      	blt.n	1737c <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
   17366:	4a06      	ldr	r2, [pc, #24]	; (17380 <hal_gpio_irq_enable+0x24>)
   17368:	f100 0340 	add.w	r3, r0, #64	; 0x40
   1736c:	2100      	movs	r1, #0
   1736e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
   17372:	2301      	movs	r3, #1
   17374:	fa03 f000 	lsl.w	r0, r3, r0
   17378:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
   1737c:	bd08      	pop	{r3, pc}
   1737e:	bf00      	nop
   17380:	40006000 	.word	0x40006000

00017384 <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   17384:	3801      	subs	r0, #1
   17386:	bf00      	nop
   17388:	bf00      	nop
   1738a:	bf00      	nop
   1738c:	bf00      	nop
   1738e:	bf00      	nop
   17390:	bf00      	nop
   17392:	bf00      	nop
   17394:	bf00      	nop
   17396:	bf00      	nop
   17398:	bf00      	nop
   1739a:	bf00      	nop
   1739c:	bf00      	nop
   1739e:	bf00      	nop
   173a0:	bf00      	nop
   173a2:	bf00      	nop
   173a4:	bf00      	nop
   173a6:	bf00      	nop
   173a8:	bf00      	nop
   173aa:	bf00      	nop
   173ac:	bf00      	nop
   173ae:	bf00      	nop
   173b0:	bf00      	nop
   173b2:	bf00      	nop
   173b4:	bf00      	nop
   173b6:	bf00      	nop
   173b8:	bf00      	nop
   173ba:	bf00      	nop
   173bc:	bf00      	nop
   173be:	bf00      	nop
   173c0:	bf00      	nop
   173c2:	bf00      	nop
   173c4:	bf00      	nop
   173c6:	bf00      	nop
   173c8:	bf00      	nop
   173ca:	bf00      	nop
   173cc:	bf00      	nop
   173ce:	bf00      	nop
   173d0:	bf00      	nop
   173d2:	bf00      	nop
   173d4:	bf00      	nop
   173d6:	bf00      	nop
   173d8:	bf00      	nop
   173da:	bf00      	nop
   173dc:	bf00      	nop
   173de:	bf00      	nop
   173e0:	bf00      	nop
   173e2:	bf00      	nop
   173e4:	bf00      	nop
   173e6:	bf00      	nop
   173e8:	bf00      	nop
   173ea:	bf00      	nop
   173ec:	bf00      	nop
   173ee:	bf00      	nop
   173f0:	bf00      	nop
   173f2:	bf00      	nop
   173f4:	bf00      	nop
   173f6:	bf00      	nop
   173f8:	bf00      	nop
   173fa:	d1c3      	bne.n	17384 <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   173fc:	4770      	bx	lr
	...

00017400 <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   17400:	2801      	cmp	r0, #1
   17402:	d806      	bhi.n	17412 <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   17404:	4b06      	ldr	r3, [pc, #24]	; (17420 <hal_i2c_resolve+0x20>)
   17406:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1740a:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   1740c:	b12b      	cbz	r3, 1741a <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   1740e:	2000      	movs	r0, #0
}
   17410:	4770      	bx	lr
        *out_i2c = NULL;
   17412:	2300      	movs	r3, #0
   17414:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   17416:	2002      	movs	r0, #2
   17418:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   1741a:	2002      	movs	r0, #2
   1741c:	4770      	bx	lr
   1741e:	bf00      	nop
   17420:	0001f288 	.word	0x0001f288

00017424 <hal_i2c_convert_status>:
 * Converts an nRF SDK I2C status to a HAL I2C error code.
 */
static int
hal_i2c_convert_status(int nrf_status)
{
    if (nrf_status == 0) {
   17424:	b148      	cbz	r0, 1743a <hal_i2c_convert_status+0x16>
        return 0;
    } else if (nrf_status & NRF_TWIM_ERROR_DATA_NACK) {
   17426:	f010 0f04 	tst.w	r0, #4
   1742a:	d107      	bne.n	1743c <hal_i2c_convert_status+0x18>
        return HAL_I2C_ERR_DATA_NACK;
    } else if (nrf_status & NRF_TWIM_ERROR_ADDRESS_NACK) {
   1742c:	f010 0f02 	tst.w	r0, #2
   17430:	d101      	bne.n	17436 <hal_i2c_convert_status+0x12>
        return HAL_I2C_ERR_ADDR_NACK;
    } else {
        return HAL_I2C_ERR_UNKNOWN;
   17432:	2001      	movs	r0, #1
    }
}
   17434:	4770      	bx	lr
        return HAL_I2C_ERR_ADDR_NACK;
   17436:	2004      	movs	r0, #4
   17438:	4770      	bx	lr
   1743a:	4770      	bx	lr
        return HAL_I2C_ERR_DATA_NACK;
   1743c:	2005      	movs	r0, #5
   1743e:	4770      	bx	lr

00017440 <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   17440:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17444:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   17448:	fa23 f000 	lsr.w	r0, r3, r0
}
   1744c:	f000 0001 	and.w	r0, r0, #1
   17450:	4770      	bx	lr

00017452 <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   17452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17456:	4605      	mov	r5, r0
   17458:	460e      	mov	r6, r1
    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(scl_pin);
    sda_port = HAL_GPIO_PORT(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   1745a:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1745e:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   17462:	f240 630c 	movw	r3, #1548	; 0x60c
   17466:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   1746a:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   1746e:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   17472:	2101      	movs	r1, #1
   17474:	f7ff ff0a 	bl	1728c <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   17478:	2101      	movs	r1, #1
   1747a:	4630      	mov	r0, r6
   1747c:	f7ff ff06 	bl	1728c <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF_CLR;
   17480:	f240 630d 	movw	r3, #1549	; 0x60d
   17484:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF_CLR;
   17488:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   1748c:	2004      	movs	r0, #4
   1748e:	f7ff ff79 	bl	17384 <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   17492:	2400      	movs	r4, #0
   17494:	2c08      	cmp	r4, #8
   17496:	dc14      	bgt.n	174c2 <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   17498:	4630      	mov	r0, r6
   1749a:	f7ff ffd1 	bl	17440 <read_gpio_inbuffer>
   1749e:	b978      	cbnz	r0, 174c0 <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   174a0:	2100      	movs	r1, #0
   174a2:	4628      	mov	r0, r5
   174a4:	f7ff fef2 	bl	1728c <hal_gpio_write>
        hal_i2c_delay_us(4);
   174a8:	2004      	movs	r0, #4
   174aa:	f7ff ff6b 	bl	17384 <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   174ae:	2101      	movs	r1, #1
   174b0:	4628      	mov	r0, r5
   174b2:	f7ff feeb 	bl	1728c <hal_gpio_write>
        hal_i2c_delay_us(4);
   174b6:	2004      	movs	r0, #4
   174b8:	f7ff ff64 	bl	17384 <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   174bc:	3401      	adds	r4, #1
   174be:	e7e9      	b.n	17494 <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   174c0:	b154      	cbz	r4, 174d8 <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   174c2:	2100      	movs	r1, #0
   174c4:	4630      	mov	r0, r6
   174c6:	f7ff fee1 	bl	1728c <hal_gpio_write>
    hal_i2c_delay_us(4);
   174ca:	2004      	movs	r0, #4
   174cc:	f7ff ff5a 	bl	17384 <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   174d0:	2101      	movs	r1, #1
   174d2:	4630      	mov	r0, r6
   174d4:	f7ff feda 	bl	1728c <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   174d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   174dc:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   174e0:	f240 620c 	movw	r2, #1548	; 0x60c
   174e4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   174e8:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   174ec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   174f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000174f4 <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   174f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   174f6:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   174f8:	b1a1      	cbz	r1, 17524 <hal_i2c_init+0x30>
   174fa:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   174fc:	a901      	add	r1, sp, #4
   174fe:	f7ff ff7f 	bl	17400 <hal_i2c_resolve>
    if (rc != 0) {
   17502:	4606      	mov	r6, r0
   17504:	bba8      	cbnz	r0, 17572 <hal_i2c_init+0x7e>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   17506:	9b01      	ldr	r3, [sp, #4]
   17508:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   1750a:	68a3      	ldr	r3, [r4, #8]
   1750c:	2bfa      	cmp	r3, #250	; 0xfa
   1750e:	d035      	beq.n	1757c <hal_i2c_init+0x88>
   17510:	d90e      	bls.n	17530 <hal_i2c_init+0x3c>
   17512:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   17516:	d02f      	beq.n	17578 <hal_i2c_init+0x84>
   17518:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   1751c:	d131      	bne.n	17582 <hal_i2c_init+0x8e>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   1751e:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   17522:	e009      	b.n	17538 <hal_i2c_init+0x44>
    assert(usercfg != NULL);
   17524:	2300      	movs	r3, #0
   17526:	461a      	mov	r2, r3
   17528:	4619      	mov	r1, r3
   1752a:	4618      	mov	r0, r3
   1752c:	f000 fc88 	bl	17e40 <__assert_func>
    switch (cfg->i2c_frequency) {
   17530:	2b64      	cmp	r3, #100	; 0x64
   17532:	d126      	bne.n	17582 <hal_i2c_init+0x8e>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   17534:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   17538:	6861      	ldr	r1, [r4, #4]
   1753a:	6820      	ldr	r0, [r4, #0]
   1753c:	f7ff ff89 	bl	17452 <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   17540:	6823      	ldr	r3, [r4, #0]
   17542:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   17546:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1754a:	f240 610c 	movw	r1, #1548	; 0x60c
   1754e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   17552:	6863      	ldr	r3, [r4, #4]
   17554:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17558:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   1755c:	6823      	ldr	r3, [r4, #0]
   1755e:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   17562:	6863      	ldr	r3, [r4, #4]
   17564:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   17568:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1756c:	2305      	movs	r3, #5
   1756e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   17572:	4630      	mov	r0, r6
   17574:	b003      	add	sp, #12
   17576:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   17578:	4f03      	ldr	r7, [pc, #12]	; (17588 <hal_i2c_init+0x94>)
        break;
   1757a:	e7dd      	b.n	17538 <hal_i2c_init+0x44>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   1757c:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   17580:	e7da      	b.n	17538 <hal_i2c_init+0x44>
        rc = HAL_I2C_ERR_INVAL;
   17582:	2602      	movs	r6, #2
   17584:	e7f5      	b.n	17572 <hal_i2c_init+0x7e>
   17586:	bf00      	nop
   17588:	06147ae9 	.word	0x06147ae9

0001758c <hal_i2c_master_write>:
}

int
hal_i2c_master_write(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                     uint32_t timo, uint8_t last_op)
{
   1758c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17590:	b083      	sub	sp, #12
   17592:	4688      	mov	r8, r1
   17594:	4615      	mov	r5, r2
   17596:	469a      	mov	sl, r3
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   17598:	a901      	add	r1, sp, #4
   1759a:	f7ff ff31 	bl	17400 <hal_i2c_resolve>
    if (rc != 0) {
   1759e:	4681      	mov	r9, r0
   175a0:	b118      	cbz	r0, 175aa <hal_i2c_master_write+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   175a2:	4648      	mov	r0, r9
   175a4:	b003      	add	sp, #12
   175a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   175aa:	9b01      	ldr	r3, [sp, #4]
   175ac:	681c      	ldr	r4, [r3, #0]
    regs->ADDRESS = pdata->address;
   175ae:	f898 3000 	ldrb.w	r3, [r8]
   175b2:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    regs->EVENTS_ERROR = 0;
   175b6:	2300      	movs	r3, #0
   175b8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   175bc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   175c0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->SHORTS = 0;
   175c4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTTX);
   175c8:	f104 0708 	add.w	r7, r4, #8
    int retry = 2;
   175cc:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   175d0:	2300      	movs	r3, #0
   175d2:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   175d6:	2301      	movs	r3, #1
   175d8:	603b      	str	r3, [r7, #0]
        end_ticks = os_cputime_get32() +
   175da:	f000 fe61 	bl	182a0 <os_cputime_get32>
   175de:	f100 0664 	add.w	r6, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   175e2:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   175e6:	f7ff fe62 	bl	172ae <hal_gpio_read>
   175ea:	b1b0      	cbz	r0, 1761a <hal_i2c_master_write+0x8e>
   175ec:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   175f0:	b99b      	cbnz	r3, 1761a <hal_i2c_master_write+0x8e>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   175f2:	f000 fe55 	bl	182a0 <os_cputime_get32>
   175f6:	1b80      	subs	r0, r0, r6
   175f8:	2800      	cmp	r0, #0
   175fa:	dbf2      	blt.n	175e2 <hal_i2c_master_write+0x56>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   175fc:	2300      	movs	r3, #0
   175fe:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   17602:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   17606:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   1760a:	f7ff ff22 	bl	17452 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1760e:	2305      	movs	r3, #5
   17610:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   17614:	f1bb 0b01 	subs.w	fp, fp, #1
   17618:	d1da      	bne.n	175d0 <hal_i2c_master_write+0x44>
    start = os_time_get();
   1761a:	f001 fe2f 	bl	1927c <os_time_get>
   1761e:	4606      	mov	r6, r0
    for (i = 0; i < pdata->len; i++) {
   17620:	464f      	mov	r7, r9
   17622:	e003      	b.n	1762c <hal_i2c_master_write+0xa0>
        if (regs->EVENTS_ERROR) {
   17624:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17628:	b9db      	cbnz	r3, 17662 <hal_i2c_master_write+0xd6>
    for (i = 0; i < pdata->len; i++) {
   1762a:	3701      	adds	r7, #1
   1762c:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   17630:	42bb      	cmp	r3, r7
   17632:	dd24      	ble.n	1767e <hal_i2c_master_write+0xf2>
        regs->EVENTS_TXDSENT = 0;
   17634:	2300      	movs	r3, #0
   17636:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        regs->TXD = pdata->buffer[i];
   1763a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1763e:	5ddb      	ldrb	r3, [r3, r7]
   17640:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        while (!regs->EVENTS_TXDSENT && !regs->EVENTS_ERROR) {
   17644:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   17648:	2b00      	cmp	r3, #0
   1764a:	d1eb      	bne.n	17624 <hal_i2c_master_write+0x98>
   1764c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17650:	2b00      	cmp	r3, #0
   17652:	d1e7      	bne.n	17624 <hal_i2c_master_write+0x98>
            if (os_time_get() - start > timo) {
   17654:	f001 fe12 	bl	1927c <os_time_get>
   17658:	1b80      	subs	r0, r0, r6
   1765a:	42a8      	cmp	r0, r5
   1765c:	d9f2      	bls.n	17644 <hal_i2c_master_write+0xb8>
                rc = HAL_I2C_ERR_TIMEOUT;
   1765e:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   17662:	2301      	movs	r3, #1
   17664:	6163      	str	r3, [r4, #20]
    if (regs->EVENTS_ERROR) {
   17666:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1766a:	2b00      	cmp	r3, #0
   1766c:	d099      	beq.n	175a2 <hal_i2c_master_write+0x16>
        nrf_status = regs->ERRORSRC;
   1766e:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   17672:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   17676:	f7ff fed5 	bl	17424 <hal_i2c_convert_status>
   1767a:	4681      	mov	r9, r0
   1767c:	e791      	b.n	175a2 <hal_i2c_master_write+0x16>
    if (last_op) {
   1767e:	f1ba 0f00 	cmp.w	sl, #0
   17682:	d08e      	beq.n	175a2 <hal_i2c_master_write+0x16>
        regs->EVENTS_STOPPED = 0;
   17684:	2300      	movs	r3, #0
   17686:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        regs->TASKS_STOP = 1;
   1768a:	2301      	movs	r3, #1
   1768c:	6163      	str	r3, [r4, #20]
        while (!regs->EVENTS_STOPPED && !regs->EVENTS_ERROR) {
   1768e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   17692:	b953      	cbnz	r3, 176aa <hal_i2c_master_write+0x11e>
   17694:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17698:	b93b      	cbnz	r3, 176aa <hal_i2c_master_write+0x11e>
            if (os_time_get() - start > timo) {
   1769a:	f001 fdef 	bl	1927c <os_time_get>
   1769e:	1b80      	subs	r0, r0, r6
   176a0:	42a8      	cmp	r0, r5
   176a2:	d9f4      	bls.n	1768e <hal_i2c_master_write+0x102>
                rc = HAL_I2C_ERR_TIMEOUT;
   176a4:	f04f 0903 	mov.w	r9, #3
   176a8:	e7db      	b.n	17662 <hal_i2c_master_write+0xd6>
        if (regs->EVENTS_ERROR) {
   176aa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   176ae:	2b00      	cmp	r3, #0
   176b0:	d1d7      	bne.n	17662 <hal_i2c_master_write+0xd6>
   176b2:	e776      	b.n	175a2 <hal_i2c_master_write+0x16>

000176b4 <hal_i2c_master_read>:

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timo, uint8_t last_op)
{
   176b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176b8:	b085      	sub	sp, #20
   176ba:	460f      	mov	r7, r1
   176bc:	4615      	mov	r5, r2
   176be:	9301      	str	r3, [sp, #4]
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   176c0:	a903      	add	r1, sp, #12
   176c2:	f7ff fe9d 	bl	17400 <hal_i2c_resolve>
    if (rc != 0) {
   176c6:	4681      	mov	r9, r0
   176c8:	b118      	cbz	r0, 176d2 <hal_i2c_master_read+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   176ca:	4648      	mov	r0, r9
   176cc:	b005      	add	sp, #20
   176ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   176d2:	9b03      	ldr	r3, [sp, #12]
   176d4:	681c      	ldr	r4, [r3, #0]
    start = os_time_get();
   176d6:	f001 fdd1 	bl	1927c <os_time_get>
   176da:	4606      	mov	r6, r0
    if (regs->EVENTS_RXDREADY) {
   176dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   176e0:	b11b      	cbz	r3, 176ea <hal_i2c_master_read+0x36>
        (void)regs->RXD;
   176e2:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
        (void)regs->RXD;
   176e6:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    regs->EVENTS_ERROR = 0;
   176ea:	2300      	movs	r3, #0
   176ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   176f0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   176f4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->EVENTS_RXDREADY = 0;
   176f8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    regs->ADDRESS = pdata->address;
   176fc:	783b      	ldrb	r3, [r7, #0]
   176fe:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (pdata->len == 1 && last_op) {
   17702:	887b      	ldrh	r3, [r7, #2]
   17704:	2b01      	cmp	r3, #1
   17706:	d02e      	beq.n	17766 <hal_i2c_master_read+0xb2>
        regs->SHORTS = TWI_SHORTS_BB_SUSPEND_Msk;
   17708:	2301      	movs	r3, #1
   1770a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTRX);
   1770e:	46a2      	mov	sl, r4
    int retry = 2;
   17710:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   17714:	2300      	movs	r3, #0
   17716:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   1771a:	2301      	movs	r3, #1
   1771c:	f8ca 3000 	str.w	r3, [sl]
        end_ticks = os_cputime_get32() +
   17720:	f000 fdbe 	bl	182a0 <os_cputime_get32>
   17724:	f100 0864 	add.w	r8, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   17728:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1772c:	f7ff fdbf 	bl	172ae <hal_gpio_read>
   17730:	b1b8      	cbz	r0, 17762 <hal_i2c_master_read+0xae>
   17732:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   17736:	b9a3      	cbnz	r3, 17762 <hal_i2c_master_read+0xae>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   17738:	f000 fdb2 	bl	182a0 <os_cputime_get32>
   1773c:	eba0 0008 	sub.w	r0, r0, r8
   17740:	2800      	cmp	r0, #0
   17742:	dbf1      	blt.n	17728 <hal_i2c_master_read+0x74>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   17744:	2300      	movs	r3, #0
   17746:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   1774a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1774e:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   17752:	f7ff fe7e 	bl	17452 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   17756:	2305      	movs	r3, #5
   17758:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   1775c:	f1bb 0b01 	subs.w	fp, fp, #1
   17760:	d1d8      	bne.n	17714 <hal_i2c_master_read+0x60>
    int retry = 2;
   17762:	46c8      	mov	r8, r9
   17764:	e017      	b.n	17796 <hal_i2c_master_read+0xe2>
    if (pdata->len == 1 && last_op) {
   17766:	9b01      	ldr	r3, [sp, #4]
   17768:	2b00      	cmp	r3, #0
   1776a:	d0cd      	beq.n	17708 <hal_i2c_master_read+0x54>
        regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   1776c:	2302      	movs	r3, #2
   1776e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   17772:	e7cc      	b.n	1770e <hal_i2c_master_read+0x5a>
        if (regs->EVENTS_ERROR) {
   17774:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17778:	bb0b      	cbnz	r3, 177be <hal_i2c_master_read+0x10a>
        pdata->buffer[i] = regs->RXD;
   1777a:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
   1777e:	687b      	ldr	r3, [r7, #4]
   17780:	f803 2008 	strb.w	r2, [r3, r8]
        if (i == pdata->len - 2) {
   17784:	887b      	ldrh	r3, [r7, #2]
   17786:	3b02      	subs	r3, #2
   17788:	4543      	cmp	r3, r8
   1778a:	d02a      	beq.n	177e2 <hal_i2c_master_read+0x12e>
        regs->EVENTS_RXDREADY = 0;
   1778c:	2300      	movs	r3, #0
   1778e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    for (i = 0; i < pdata->len; i++) {
   17792:	f108 0801 	add.w	r8, r8, #1
   17796:	887b      	ldrh	r3, [r7, #2]
   17798:	4543      	cmp	r3, r8
   1779a:	dd96      	ble.n	176ca <hal_i2c_master_read+0x16>
        regs->TASKS_RESUME = 1;
   1779c:	2301      	movs	r3, #1
   1779e:	6223      	str	r3, [r4, #32]
        while (!regs->EVENTS_RXDREADY && !regs->EVENTS_ERROR) {
   177a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   177a4:	2b00      	cmp	r3, #0
   177a6:	d1e5      	bne.n	17774 <hal_i2c_master_read+0xc0>
   177a8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   177ac:	2b00      	cmp	r3, #0
   177ae:	d1e1      	bne.n	17774 <hal_i2c_master_read+0xc0>
            if (os_time_get() - start > timo) {
   177b0:	f001 fd64 	bl	1927c <os_time_get>
   177b4:	1b80      	subs	r0, r0, r6
   177b6:	42a8      	cmp	r0, r5
   177b8:	d9f2      	bls.n	177a0 <hal_i2c_master_read+0xec>
                rc = HAL_I2C_ERR_TIMEOUT;
   177ba:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   177be:	2301      	movs	r3, #1
   177c0:	6163      	str	r3, [r4, #20]
    regs->SHORTS = 0;
   177c2:	2300      	movs	r3, #0
   177c4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (regs->EVENTS_ERROR) {
   177c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   177cc:	2b00      	cmp	r3, #0
   177ce:	f43f af7c 	beq.w	176ca <hal_i2c_master_read+0x16>
        nrf_status = regs->ERRORSRC;
   177d2:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   177d6:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   177da:	f7ff fe23 	bl	17424 <hal_i2c_convert_status>
   177de:	4681      	mov	r9, r0
   177e0:	e773      	b.n	176ca <hal_i2c_master_read+0x16>
            if (last_op) {
   177e2:	9b01      	ldr	r3, [sp, #4]
   177e4:	2b00      	cmp	r3, #0
   177e6:	d0d1      	beq.n	1778c <hal_i2c_master_read+0xd8>
                regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   177e8:	2302      	movs	r3, #2
   177ea:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   177ee:	e7cd      	b.n	1778c <hal_i2c_master_read+0xd8>

000177f0 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   177f0:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   177f2:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   177f4:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   177f8:	b32b      	cbz	r3, 17846 <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   177fa:	2300      	movs	r3, #0
   177fc:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   17800:	7843      	ldrb	r3, [r0, #1]
   17802:	b303      	cbz	r3, 17846 <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   17804:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   17808:	88c3      	ldrh	r3, [r0, #6]
   1780a:	fa13 f382 	uxtah	r3, r3, r2
   1780e:	b29b      	uxth	r3, r3
   17810:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   17812:	8881      	ldrh	r1, [r0, #4]
   17814:	428b      	cmp	r3, r1
   17816:	d217      	bcs.n	17848 <nrf52_irqm_handler+0x58>
   17818:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   1781a:	6984      	ldr	r4, [r0, #24]
   1781c:	4414      	add	r4, r2
   1781e:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   17820:	1acb      	subs	r3, r1, r3
   17822:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   17824:	2bff      	cmp	r3, #255	; 0xff
   17826:	bf28      	it	cs
   17828:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   1782a:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   1782e:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   17832:	69c1      	ldr	r1, [r0, #28]
   17834:	b129      	cbz	r1, 17842 <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   17836:	440a      	add	r2, r1
   17838:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   1783a:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   1783e:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   17842:	2301      	movs	r3, #1
   17844:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   17846:	bd38      	pop	{r3, r4, r5, pc}
   17848:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   1784a:	6a03      	ldr	r3, [r0, #32]
   1784c:	b10b      	cbz	r3, 17852 <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   1784e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   17850:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   17852:	2300      	movs	r3, #0
   17854:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   17856:	2340      	movs	r3, #64	; 0x40
   17858:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   1785c:	e7f3      	b.n	17846 <nrf52_irqm_handler+0x56>
	...

00017860 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   17860:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   17862:	4b04      	ldr	r3, [pc, #16]	; (17874 <nrf52_spi0_irq_handler+0x14>)
   17864:	781b      	ldrb	r3, [r3, #0]
   17866:	b103      	cbz	r3, 1786a <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   17868:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   1786a:	4802      	ldr	r0, [pc, #8]	; (17874 <nrf52_spi0_irq_handler+0x14>)
   1786c:	f7ff ffc0 	bl	177f0 <nrf52_irqm_handler>
}
   17870:	e7fa      	b.n	17868 <nrf52_spi0_irq_handler+0x8>
   17872:	bf00      	nop
   17874:	2000e5c0 	.word	0x2000e5c0

00017878 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   17878:	2301      	movs	r3, #1
   1787a:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   1787c:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   17880:	2b00      	cmp	r3, #0
   17882:	d0fb      	beq.n	1787c <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   17884:	2300      	movs	r3, #0
   17886:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   1788a:	4770      	bx	lr

0001788c <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   1788c:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   1788e:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   17890:	780b      	ldrb	r3, [r1, #0]
   17892:	2b03      	cmp	r3, #3
   17894:	d80c      	bhi.n	178b0 <hal_spi_config_slave+0x24>
   17896:	e8df f003 	tbb	[pc, r3]
   1789a:	0e02      	.short	0x0e02
   1789c:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1789e:	2300      	movs	r3, #0
    rc = 0;
   178a0:	4618      	mov	r0, r3
   178a2:	e00a      	b.n	178ba <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   178a4:	2304      	movs	r3, #4
    rc = 0;
   178a6:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   178a8:	e007      	b.n	178ba <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   178aa:	2306      	movs	r3, #6
    rc = 0;
   178ac:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   178ae:	e004      	b.n	178ba <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   178b0:	2300      	movs	r3, #0
            rc = EINVAL;
   178b2:	2016      	movs	r0, #22
            break;
   178b4:	e001      	b.n	178ba <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   178b6:	2302      	movs	r3, #2
    rc = 0;
   178b8:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   178ba:	784c      	ldrb	r4, [r1, #1]
   178bc:	2c01      	cmp	r4, #1
   178be:	d006      	beq.n	178ce <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   178c0:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   178c4:	788b      	ldrb	r3, [r1, #2]
   178c6:	b92b      	cbnz	r3, 178d4 <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   178c8:	f85d 4b04 	ldr.w	r4, [sp], #4
   178cc:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   178ce:	f043 0301 	orr.w	r3, r3, #1
   178d2:	e7f5      	b.n	178c0 <hal_spi_config_slave+0x34>
            rc = EINVAL;
   178d4:	2016      	movs	r0, #22
    return rc;
   178d6:	e7f7      	b.n	178c8 <hal_spi_config_slave+0x3c>

000178d8 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   178d8:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   178da:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   178dc:	2501      	movs	r5, #1
   178de:	409d      	lsls	r5, r3
   178e0:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   178e4:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   178e8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   178ec:	2503      	movs	r5, #3
   178ee:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   178f2:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   178f4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   178f8:	2500      	movs	r5, #0
   178fa:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   178fe:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   17900:	780c      	ldrb	r4, [r1, #0]
   17902:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   17906:	784c      	ldrb	r4, [r1, #1]
   17908:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   1790c:	7889      	ldrb	r1, [r1, #2]
   1790e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   17912:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17916:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   1791a:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1791e:	4919      	ldr	r1, [pc, #100]	; (17984 <hal_spi_init_master+0xac>)
   17920:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   17922:	3310      	adds	r3, #16
   17924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   17928:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1792c:	42ab      	cmp	r3, r5
   1792e:	db22      	blt.n	17976 <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17930:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   17934:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   17938:	22e0      	movs	r2, #224	; 0xe0
   1793a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   1793e:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   17942:	2b00      	cmp	r3, #0
   17944:	db08      	blt.n	17958 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17946:	f003 011f 	and.w	r1, r3, #31
   1794a:	095b      	lsrs	r3, r3, #5
   1794c:	2201      	movs	r2, #1
   1794e:	408a      	lsls	r2, r1
   17950:	3360      	adds	r3, #96	; 0x60
   17952:	490d      	ldr	r1, [pc, #52]	; (17988 <hal_spi_init_master+0xb0>)
   17954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   17958:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1795c:	2b00      	cmp	r3, #0
   1795e:	db07      	blt.n	17970 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17960:	f003 011f 	and.w	r1, r3, #31
   17964:	095b      	lsrs	r3, r3, #5
   17966:	2201      	movs	r2, #1
   17968:	408a      	lsls	r2, r1
   1796a:	4907      	ldr	r1, [pc, #28]	; (17988 <hal_spi_init_master+0xb0>)
   1796c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   17970:	2000      	movs	r0, #0
   17972:	bc30      	pop	{r4, r5}
   17974:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17976:	f003 030f 	and.w	r3, r3, #15
   1797a:	4a04      	ldr	r2, [pc, #16]	; (1798c <hal_spi_init_master+0xb4>)
   1797c:	441a      	add	r2, r3
   1797e:	23e0      	movs	r3, #224	; 0xe0
   17980:	7613      	strb	r3, [r2, #24]
   17982:	e7dc      	b.n	1793e <hal_spi_init_master+0x66>
   17984:	e000ed00 	.word	0xe000ed00
   17988:	e000e100 	.word	0xe000e100
   1798c:	e000ecfc 	.word	0xe000ecfc

00017990 <hal_spi_config_master>:
{
   17990:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   17992:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   17994:	680c      	ldr	r4, [r1, #0]
   17996:	684b      	ldr	r3, [r1, #4]
   17998:	6084      	str	r4, [r0, #8]
   1799a:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   1799c:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   179a0:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   179a4:	7808      	ldrb	r0, [r1, #0]
   179a6:	2801      	cmp	r0, #1
   179a8:	d916      	bls.n	179d8 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   179aa:	2001      	movs	r0, #1
   179ac:	4098      	lsls	r0, r3
   179ae:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   179b2:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   179b6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   179ba:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   179be:	2403      	movs	r4, #3
   179c0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   179c4:	788b      	ldrb	r3, [r1, #2]
   179c6:	b973      	cbnz	r3, 179e6 <hal_spi_config_master+0x56>
    rc = 0;
   179c8:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   179ca:	780b      	ldrb	r3, [r1, #0]
   179cc:	2b03      	cmp	r3, #3
   179ce:	d812      	bhi.n	179f6 <hal_spi_config_master+0x66>
   179d0:	e8df f003 	tbb	[pc, r3]
   179d4:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   179d8:	2001      	movs	r0, #1
   179da:	4098      	lsls	r0, r3
   179dc:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   179e0:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   179e4:	e7e7      	b.n	179b6 <hal_spi_config_master+0x26>
            rc = EINVAL;
   179e6:	2016      	movs	r0, #22
   179e8:	e7ef      	b.n	179ca <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   179ea:	2300      	movs	r3, #0
   179ec:	e007      	b.n	179fe <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   179ee:	2304      	movs	r3, #4
            break;
   179f0:	e005      	b.n	179fe <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   179f2:	2306      	movs	r3, #6
            break;
   179f4:	e003      	b.n	179fe <hal_spi_config_master+0x6e>
            nrf_config = 0;
   179f6:	2300      	movs	r3, #0
            rc = EINVAL;
   179f8:	2016      	movs	r0, #22
            break;
   179fa:	e000      	b.n	179fe <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   179fc:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   179fe:	784c      	ldrb	r4, [r1, #1]
   17a00:	2c01      	cmp	r4, #1
   17a02:	d010      	beq.n	17a26 <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   17a04:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   17a08:	684b      	ldr	r3, [r1, #4]
   17a0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   17a0e:	d023      	beq.n	17a58 <hal_spi_config_master+0xc8>
   17a10:	d80c      	bhi.n	17a2c <hal_spi_config_master+0x9c>
   17a12:	2bfa      	cmp	r3, #250	; 0xfa
   17a14:	d029      	beq.n	17a6a <hal_spi_config_master+0xda>
   17a16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   17a1a:	d01a      	beq.n	17a52 <hal_spi_config_master+0xc2>
   17a1c:	2b7d      	cmp	r3, #125	; 0x7d
   17a1e:	d011      	beq.n	17a44 <hal_spi_config_master+0xb4>
            frequency = 0;
   17a20:	2300      	movs	r3, #0
            rc = EINVAL;
   17a22:	2016      	movs	r0, #22
            break;
   17a24:	e010      	b.n	17a48 <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   17a26:	f043 0301 	orr.w	r3, r3, #1
   17a2a:	e7eb      	b.n	17a04 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   17a2c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   17a30:	d015      	beq.n	17a5e <hal_spi_config_master+0xce>
   17a32:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   17a36:	d015      	beq.n	17a64 <hal_spi_config_master+0xd4>
   17a38:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   17a3c:	d1f0      	bne.n	17a20 <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   17a3e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   17a42:	e001      	b.n	17a48 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   17a44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   17a48:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   17a4c:	f85d 4b04 	ldr.w	r4, [sp], #4
   17a50:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   17a52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   17a56:	e7f7      	b.n	17a48 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   17a58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   17a5c:	e7f4      	b.n	17a48 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   17a5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   17a62:	e7f1      	b.n	17a48 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   17a64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   17a68:	e7ee      	b.n	17a48 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   17a6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   17a6e:	e7eb      	b.n	17a48 <hal_spi_config_master+0xb8>

00017a70 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17a70:	2802      	cmp	r0, #2
   17a72:	dc10      	bgt.n	17a96 <hal_spi_config+0x26>
{
   17a74:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17a76:	4b0b      	ldr	r3, [pc, #44]	; (17aa4 <hal_spi_config+0x34>)
   17a78:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   17a7c:	b168      	cbz	r0, 17a9a <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   17a7e:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   17a80:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   17a84:	b95b      	cbnz	r3, 17a9e <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17a86:	7803      	ldrb	r3, [r0, #0]
   17a88:	b113      	cbz	r3, 17a90 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   17a8a:	f7ff feff 	bl	1788c <hal_spi_config_slave>
    }

err:
    return (rc);
}
   17a8e:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   17a90:	f7ff ff7e 	bl	17990 <hal_spi_config_master>
   17a94:	e7fb      	b.n	17a8e <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17a96:	2016      	movs	r0, #22
}
   17a98:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17a9a:	2016      	movs	r0, #22
   17a9c:	e7f7      	b.n	17a8e <hal_spi_config+0x1e>
        return -1;
   17a9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17aa2:	e7f4      	b.n	17a8e <hal_spi_config+0x1e>
   17aa4:	0001f290 	.word	0x0001f290

00017aa8 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17aa8:	2802      	cmp	r0, #2
   17aaa:	dc1b      	bgt.n	17ae4 <hal_spi_enable+0x3c>
   17aac:	4b10      	ldr	r3, [pc, #64]	; (17af0 <hal_spi_enable+0x48>)
   17aae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   17ab2:	b1cb      	cbz	r3, 17ae8 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17ab4:	781a      	ldrb	r2, [r3, #0]
   17ab6:	b17a      	cbz	r2, 17ad8 <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   17ab8:	6a1a      	ldr	r2, [r3, #32]
   17aba:	b1ba      	cbz	r2, 17aec <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   17abc:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   17abe:	2000      	movs	r0, #0
   17ac0:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   17ac4:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   17ac8:	f240 4202 	movw	r2, #1026	; 0x402
   17acc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   17ad0:	2202      	movs	r2, #2
   17ad2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   17ad6:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   17ad8:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   17ada:	2201      	movs	r2, #1
   17adc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   17ae0:	2000      	movs	r0, #0
   17ae2:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17ae4:	2016      	movs	r0, #22
   17ae6:	4770      	bx	lr
   17ae8:	2016      	movs	r0, #22
   17aea:	4770      	bx	lr
            rc = EINVAL;
   17aec:	2016      	movs	r0, #22

err:
    return rc;
}
   17aee:	4770      	bx	lr
   17af0:	0001f290 	.word	0x0001f290

00017af4 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17af4:	2802      	cmp	r0, #2
   17af6:	dc2a      	bgt.n	17b4e <hal_spi_disable+0x5a>
{
   17af8:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17afa:	4b17      	ldr	r3, [pc, #92]	; (17b58 <hal_spi_disable+0x64>)
   17afc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   17b00:	b33c      	cbz	r4, 17b52 <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17b02:	7823      	ldrb	r3, [r4, #0]
   17b04:	b9ab      	cbnz	r3, 17b32 <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   17b06:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   17b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17b0c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   17b10:	7863      	ldrb	r3, [r4, #1]
   17b12:	b943      	cbnz	r3, 17b26 <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   17b14:	2300      	movs	r3, #0
   17b16:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   17b1a:	2000      	movs	r0, #0
   17b1c:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   17b1e:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   17b20:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   17b22:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   17b24:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   17b26:	4628      	mov	r0, r5
   17b28:	f7ff fea6 	bl	17878 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   17b2c:	2300      	movs	r3, #0
   17b2e:	7063      	strb	r3, [r4, #1]
   17b30:	e7f0      	b.n	17b14 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   17b32:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   17b34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17b38:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   17b3c:	2300      	movs	r3, #0
   17b3e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   17b42:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   17b46:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   17b4a:	70e3      	strb	r3, [r4, #3]
   17b4c:	e7e5      	b.n	17b1a <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17b4e:	2016      	movs	r0, #22
}
   17b50:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17b52:	2016      	movs	r0, #22
    return rc;
   17b54:	e7e6      	b.n	17b24 <hal_spi_disable+0x30>
   17b56:	bf00      	nop
   17b58:	0001f290 	.word	0x0001f290

00017b5c <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17b5c:	2802      	cmp	r0, #2
   17b5e:	dc1d      	bgt.n	17b9c <hal_spi_init+0x40>
{
   17b60:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17b62:	4b13      	ldr	r3, [pc, #76]	; (17bb0 <hal_spi_init+0x54>)
   17b64:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   17b68:	b1d4      	cbz	r4, 17ba0 <hal_spi_init+0x44>
    if (cfg == NULL) {
   17b6a:	b1d9      	cbz	r1, 17ba4 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   17b6c:	2a01      	cmp	r2, #1
   17b6e:	d81b      	bhi.n	17ba8 <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   17b70:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   17b72:	b9d8      	cbnz	r0, 17bac <hal_spi_init+0x50>
   17b74:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   17b76:	2303      	movs	r3, #3
   17b78:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   17b7a:	b94a      	cbnz	r2, 17b90 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   17b7c:	4b0d      	ldr	r3, [pc, #52]	; (17bb4 <hal_spi_init+0x58>)
   17b7e:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   17b80:	f7ff ffb8 	bl	17af4 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   17b84:	4a0c      	ldr	r2, [pc, #48]	; (17bb8 <hal_spi_init+0x5c>)
   17b86:	4629      	mov	r1, r5
   17b88:	4620      	mov	r0, r4
   17b8a:	f7ff fea5 	bl	178d8 <hal_spi_init_master>
   17b8e:	e00c      	b.n	17baa <hal_spi_init+0x4e>
            assert(0);
   17b90:	2300      	movs	r3, #0
   17b92:	461a      	mov	r2, r3
   17b94:	4619      	mov	r1, r3
   17b96:	4618      	mov	r0, r3
   17b98:	f000 f952 	bl	17e40 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17b9c:	2016      	movs	r0, #22
}
   17b9e:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17ba0:	2016      	movs	r0, #22
   17ba2:	e002      	b.n	17baa <hal_spi_init+0x4e>
    rc = EINVAL;
   17ba4:	2016      	movs	r0, #22
   17ba6:	e000      	b.n	17baa <hal_spi_init+0x4e>
   17ba8:	2016      	movs	r0, #22
}
   17baa:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   17bac:	2016      	movs	r0, #22
    return (rc);
   17bae:	e7fc      	b.n	17baa <hal_spi_init+0x4e>
   17bb0:	0001f290 	.word	0x0001f290
   17bb4:	40003000 	.word	0x40003000
   17bb8:	00017861 	.word	0x00017861

00017bbc <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17bbc:	2802      	cmp	r0, #2
   17bbe:	dc0a      	bgt.n	17bd6 <hal_spi_set_txrx_cb+0x1a>
   17bc0:	4b08      	ldr	r3, [pc, #32]	; (17be4 <hal_spi_set_txrx_cb+0x28>)
   17bc2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   17bc6:	b143      	cbz	r3, 17bda <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   17bc8:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   17bca:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   17bce:	b930      	cbnz	r0, 17bde <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   17bd0:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   17bd2:	625a      	str	r2, [r3, #36]	; 0x24
   17bd4:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17bd6:	2016      	movs	r0, #22
   17bd8:	4770      	bx	lr
   17bda:	2016      	movs	r0, #22
   17bdc:	4770      	bx	lr
        rc = -1;
   17bde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   17be2:	4770      	bx	lr
   17be4:	0001f290 	.word	0x0001f290

00017be8 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   17be8:	2b00      	cmp	r3, #0
   17bea:	d046      	beq.n	17c7a <hal_spi_txrx+0x92>
{
   17bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17bee:	460d      	mov	r5, r1
   17bf0:	4617      	mov	r7, r2
   17bf2:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   17bf4:	2802      	cmp	r0, #2
   17bf6:	dc42      	bgt.n	17c7e <hal_spi_txrx+0x96>
   17bf8:	4b25      	ldr	r3, [pc, #148]	; (17c90 <hal_spi_txrx+0xa8>)
   17bfa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   17bfe:	2b00      	cmp	r3, #0
   17c00:	d03f      	beq.n	17c82 <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17c02:	781a      	ldrb	r2, [r3, #0]
   17c04:	2a00      	cmp	r2, #0
   17c06:	d13e      	bne.n	17c86 <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   17c08:	2900      	cmp	r1, #0
   17c0a:	d03e      	beq.n	17c8a <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   17c0c:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   17c0e:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   17c12:	2b07      	cmp	r3, #7
   17c14:	d004      	beq.n	17c20 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   17c16:	b95b      	cbnz	r3, 17c30 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   17c18:	2301      	movs	r3, #1
   17c1a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   17c1e:	e007      	b.n	17c30 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   17c20:	f7ff ff68 	bl	17af4 <hal_spi_disable>
   17c24:	e7f8      	b.n	17c18 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   17c26:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   17c2a:	2300      	movs	r3, #0
   17c2c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   17c30:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17c34:	2b00      	cmp	r3, #0
   17c36:	d1f6      	bne.n	17c26 <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   17c38:	782b      	ldrb	r3, [r5, #0]
   17c3a:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   17c3e:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   17c40:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   17c42:	2200      	movs	r2, #0
   17c44:	e00d      	b.n	17c62 <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   17c46:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17c4a:	2b00      	cmp	r3, #0
   17c4c:	d0fb      	beq.n	17c46 <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   17c4e:	2300      	movs	r3, #0
   17c50:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   17c54:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   17c58:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   17c5a:	b10f      	cbz	r7, 17c60 <hal_spi_txrx+0x78>
                *rxd = rxval;
   17c5c:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   17c60:	3201      	adds	r2, #1
   17c62:	42b2      	cmp	r2, r6
   17c64:	da07      	bge.n	17c76 <hal_spi_txrx+0x8e>
            if (txcnt) {
   17c66:	2900      	cmp	r1, #0
   17c68:	d0ed      	beq.n	17c46 <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   17c6a:	786b      	ldrb	r3, [r5, #1]
   17c6c:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   17c70:	3901      	subs	r1, #1
                ++txd;
   17c72:	3501      	adds	r5, #1
   17c74:	e7e7      	b.n	17c46 <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   17c76:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   17c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   17c7a:	2016      	movs	r0, #22
}
   17c7c:	4770      	bx	lr
    return rc;
   17c7e:	2016      	movs	r0, #22
   17c80:	e7fa      	b.n	17c78 <hal_spi_txrx+0x90>
   17c82:	2016      	movs	r0, #22
   17c84:	e7f8      	b.n	17c78 <hal_spi_txrx+0x90>
   17c86:	2016      	movs	r0, #22
   17c88:	e7f6      	b.n	17c78 <hal_spi_txrx+0x90>
   17c8a:	2016      	movs	r0, #22
   17c8c:	e7f4      	b.n	17c78 <hal_spi_txrx+0x90>
   17c8e:	bf00      	nop
   17c90:	0001f290 	.word	0x0001f290

00017c94 <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17c94:	2802      	cmp	r0, #2
   17c96:	dc57      	bgt.n	17d48 <hal_spi_txrx_noblock+0xb4>
{
   17c98:	b430      	push	{r4, r5}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17c9a:	4c35      	ldr	r4, [pc, #212]	; (17d70 <hal_spi_txrx_noblock+0xdc>)
   17c9c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   17ca0:	2800      	cmp	r0, #0
   17ca2:	d053      	beq.n	17d4c <hal_spi_txrx_noblock+0xb8>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   17ca4:	6a04      	ldr	r4, [r0, #32]
   17ca6:	2c00      	cmp	r4, #0
   17ca8:	d052      	beq.n	17d50 <hal_spi_txrx_noblock+0xbc>
   17caa:	2b00      	cmp	r3, #0
   17cac:	d052      	beq.n	17d54 <hal_spi_txrx_noblock+0xc0>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17cae:	7804      	ldrb	r4, [r0, #0]
   17cb0:	2c00      	cmp	r4, #0
   17cb2:	d137      	bne.n	17d24 <hal_spi_txrx_noblock+0x90>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   17cb4:	2900      	cmp	r1, #0
   17cb6:	d050      	beq.n	17d5a <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   17cb8:	7844      	ldrb	r4, [r0, #1]
   17cba:	2c00      	cmp	r4, #0
   17cbc:	d14f      	bne.n	17d5e <hal_spi_txrx_noblock+0xca>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   17cbe:	6904      	ldr	r4, [r0, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   17cc0:	2540      	movs	r5, #64	; 0x40
   17cc2:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   17cc6:	2501      	movs	r5, #1
   17cc8:	7045      	strb	r5, [r0, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   17cca:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
   17cce:	2d07      	cmp	r5, #7
   17cd0:	d005      	beq.n	17cde <hal_spi_txrx_noblock+0x4a>
            spim->ENABLE = 0;
   17cd2:	2500      	movs	r5, #0
   17cd4:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   17cd8:	2507      	movs	r5, #7
   17cda:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   17cde:	2500      	movs	r5, #0
   17ce0:	80c5      	strh	r5, [r0, #6]
        spi->nhs_buflen = len;
   17ce2:	8083      	strh	r3, [r0, #4]
        spi->nhs_txbuf = txbuf;
   17ce4:	6181      	str	r1, [r0, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   17ce6:	2bff      	cmp	r3, #255	; 0xff
   17ce8:	bfa8      	it	ge
   17cea:	23ff      	movge	r3, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   17cec:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   17cf0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   17cf4:	61c2      	str	r2, [r0, #28]
        if (rxbuf == NULL) {
   17cf6:	b172      	cbz	r2, 17d16 <hal_spi_txrx_noblock+0x82>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   17cf8:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   17cfc:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   17d00:	2000      	movs	r0, #0
   17d02:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   17d06:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        spim->TASKS_START = 1;
   17d0a:	2301      	movs	r3, #1
   17d0c:	6123      	str	r3, [r4, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   17d0e:	2340      	movs	r3, #64	; 0x40
   17d10:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   17d14:	e01f      	b.n	17d56 <hal_spi_txrx_noblock+0xc2>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   17d16:	3002      	adds	r0, #2
   17d18:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   17d1c:	2301      	movs	r3, #1
   17d1e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
   17d22:	e7ed      	b.n	17d00 <hal_spi_txrx_noblock+0x6c>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   17d24:	b161      	cbz	r1, 17d40 <hal_spi_txrx_noblock+0xac>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   17d26:	2bff      	cmp	r3, #255	; 0xff
   17d28:	dc1c      	bgt.n	17d64 <hal_spi_txrx_noblock+0xd0>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   17d2a:	78c4      	ldrb	r4, [r0, #3]
   17d2c:	b9e4      	cbnz	r4, 17d68 <hal_spi_txrx_noblock+0xd4>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   17d2e:	61c2      	str	r2, [r0, #28]
        spi->nhs_txbuf = txbuf;
   17d30:	6181      	str	r1, [r0, #24]
        spi->nhs_buflen = len;
   17d32:	8083      	strh	r3, [r0, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   17d34:	2301      	movs	r3, #1
   17d36:	70c3      	strb	r3, [r0, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   17d38:	6902      	ldr	r2, [r0, #16]
   17d3a:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   17d3c:	2000      	movs	r0, #0
   17d3e:	e00a      	b.n	17d56 <hal_spi_txrx_noblock+0xc2>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   17d40:	2a00      	cmp	r2, #0
   17d42:	d1f0      	bne.n	17d26 <hal_spi_txrx_noblock+0x92>
    rc = EINVAL;
   17d44:	2016      	movs	r0, #22
   17d46:	e006      	b.n	17d56 <hal_spi_txrx_noblock+0xc2>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17d48:	2016      	movs	r0, #22

err:
    return rc;
}
   17d4a:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17d4c:	2016      	movs	r0, #22
   17d4e:	e002      	b.n	17d56 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   17d50:	2016      	movs	r0, #22
   17d52:	e000      	b.n	17d56 <hal_spi_txrx_noblock+0xc2>
   17d54:	2016      	movs	r0, #22
}
   17d56:	bc30      	pop	{r4, r5}
   17d58:	4770      	bx	lr
    rc = EINVAL;
   17d5a:	2016      	movs	r0, #22
   17d5c:	e7fb      	b.n	17d56 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   17d5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17d62:	e7f8      	b.n	17d56 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   17d64:	2016      	movs	r0, #22
   17d66:	e7f6      	b.n	17d56 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   17d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17d6c:	e7f3      	b.n	17d56 <hal_spi_txrx_noblock+0xc2>
   17d6e:	bf00      	nop
   17d70:	0001f290 	.word	0x0001f290

00017d74 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   17d74:	b508      	push	{r3, lr}
    assert(0);
   17d76:	2300      	movs	r3, #0
   17d78:	461a      	mov	r2, r3
   17d7a:	4619      	mov	r1, r3
   17d7c:	4618      	mov	r0, r3
   17d7e:	f000 f85f 	bl	17e40 <__assert_func>
	...

00017d84 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   17d84:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   17d86:	4b06      	ldr	r3, [pc, #24]	; (17da0 <nrf52_wdt_irq_handler+0x1c>)
   17d88:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   17d8c:	f013 0f01 	tst.w	r3, #1
   17d90:	d100      	bne.n	17d94 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   17d92:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   17d94:	4b02      	ldr	r3, [pc, #8]	; (17da0 <nrf52_wdt_irq_handler+0x1c>)
   17d96:	2200      	movs	r2, #0
   17d98:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   17d9c:	f7ff ffea 	bl	17d74 <nrf52_hal_wdt_default_handler>
   17da0:	40010000 	.word	0x40010000

00017da4 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   17da4:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   17da6:	4b17      	ldr	r3, [pc, #92]	; (17e04 <hal_watchdog_init+0x60>)
   17da8:	2201      	movs	r2, #1
   17daa:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   17dae:	4b16      	ldr	r3, [pc, #88]	; (17e08 <hal_watchdog_init+0x64>)
   17db0:	4298      	cmp	r0, r3
   17db2:	d821      	bhi.n	17df8 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   17db4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   17db8:	0153      	lsls	r3, r2, #5
   17dba:	4a14      	ldr	r2, [pc, #80]	; (17e0c <hal_watchdog_init+0x68>)
   17dbc:	fba2 2303 	umull	r2, r3, r2, r3
   17dc0:	08db      	lsrs	r3, r3, #3
   17dc2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   17dc6:	4b0f      	ldr	r3, [pc, #60]	; (17e04 <hal_watchdog_init+0x60>)
   17dc8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   17dcc:	4a10      	ldr	r2, [pc, #64]	; (17e10 <hal_watchdog_init+0x6c>)
   17dce:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   17dd0:	4910      	ldr	r1, [pc, #64]	; (17e14 <hal_watchdog_init+0x70>)
   17dd2:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17dd6:	4a10      	ldr	r2, [pc, #64]	; (17e18 <hal_watchdog_init+0x74>)
   17dd8:	21e0      	movs	r1, #224	; 0xe0
   17dda:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17dde:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   17de2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17de6:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   17de8:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   17dec:	f042 0201 	orr.w	r2, r2, #1
   17df0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   17df4:	2000      	movs	r0, #0
   17df6:	bd08      	pop	{r3, pc}
        assert(0);
   17df8:	2300      	movs	r3, #0
   17dfa:	461a      	mov	r2, r3
   17dfc:	4619      	mov	r1, r3
   17dfe:	4618      	mov	r0, r3
   17e00:	f000 f81e 	bl	17e40 <__assert_func>
   17e04:	40010000 	.word	0x40010000
   17e08:	02aaaaaa 	.word	0x02aaaaaa
   17e0c:	10624dd3 	.word	0x10624dd3
   17e10:	e000ed00 	.word	0xe000ed00
   17e14:	00017d85 	.word	0x00017d85
   17e18:	e000e100 	.word	0xe000e100

00017e1c <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   17e1c:	4b02      	ldr	r3, [pc, #8]	; (17e28 <hal_watchdog_enable+0xc>)
   17e1e:	2201      	movs	r2, #1
   17e20:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   17e24:	601a      	str	r2, [r3, #0]
}
   17e26:	4770      	bx	lr
   17e28:	40010000 	.word	0x40010000

00017e2c <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   17e2c:	4b02      	ldr	r3, [pc, #8]	; (17e38 <hal_watchdog_tickle+0xc>)
   17e2e:	4a03      	ldr	r2, [pc, #12]	; (17e3c <hal_watchdog_tickle+0x10>)
   17e30:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   17e34:	4770      	bx	lr
   17e36:	bf00      	nop
   17e38:	40010000 	.word	0x40010000
   17e3c:	6e524635 	.word	0x6e524635

00017e40 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   17e40:	b508      	push	{r3, lr}
   17e42:	4675      	mov	r5, lr
   17e44:	4604      	mov	r4, r0
   17e46:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   17e48:	f001 fa90 	bl	1936c <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   17e4c:	f7ff f905 	bl	1705a <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   17e50:	b18c      	cbz	r4, 17e76 <__assert_func+0x36>
   17e52:	4633      	mov	r3, r6
   17e54:	4622      	mov	r2, r4
   17e56:	4629      	mov	r1, r5
   17e58:	4809      	ldr	r0, [pc, #36]	; (17e80 <__assert_func+0x40>)
   17e5a:	f7ff f929 	bl	170b0 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
   17e5e:	f7f0 f991 	bl	8184 <hal_debugger_connected>
   17e62:	b100      	cbz	r0, 17e66 <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
   17e64:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   17e66:	4b07      	ldr	r3, [pc, #28]	; (17e84 <__assert_func+0x44>)
   17e68:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   17e6c:	605a      	str	r2, [r3, #4]
    asm("isb");
   17e6e:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   17e72:	f7f0 f98f 	bl	8194 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   17e76:	4629      	mov	r1, r5
   17e78:	4803      	ldr	r0, [pc, #12]	; (17e88 <__assert_func+0x48>)
   17e7a:	f7ff f919 	bl	170b0 <console_printf>
   17e7e:	e7ee      	b.n	17e5e <__assert_func+0x1e>
   17e80:	0001f2ac 	.word	0x0001f2ac
   17e84:	e000ed00 	.word	0xe000ed00
   17e88:	0001f29c 	.word	0x0001f29c

00017e8c <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   17e8c:	b500      	push	{lr}
   17e8e:	b083      	sub	sp, #12
   17e90:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   17e92:	f7ff f8e2 	bl	1705a <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   17e96:	4d1b      	ldr	r5, [pc, #108]	; (17f04 <os_default_irq+0x78>)
   17e98:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   17e9a:	6822      	ldr	r2, [r4, #0]
   17e9c:	f3c1 0108 	ubfx	r1, r1, #0, #9
   17ea0:	4819      	ldr	r0, [pc, #100]	; (17f08 <os_default_irq+0x7c>)
   17ea2:	f7ff f905 	bl	170b0 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   17ea6:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   17ea8:	6883      	ldr	r3, [r0, #8]
   17eaa:	6842      	ldr	r2, [r0, #4]
   17eac:	6801      	ldr	r1, [r0, #0]
   17eae:	68c0      	ldr	r0, [r0, #12]
   17eb0:	9000      	str	r0, [sp, #0]
   17eb2:	4816      	ldr	r0, [pc, #88]	; (17f0c <os_default_irq+0x80>)
   17eb4:	f7ff f8fc 	bl	170b0 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   17eb8:	6923      	ldr	r3, [r4, #16]
   17eba:	9300      	str	r3, [sp, #0]
   17ebc:	68e3      	ldr	r3, [r4, #12]
   17ebe:	68a2      	ldr	r2, [r4, #8]
   17ec0:	6861      	ldr	r1, [r4, #4]
   17ec2:	4813      	ldr	r0, [pc, #76]	; (17f10 <os_default_irq+0x84>)
   17ec4:	f7ff f8f4 	bl	170b0 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   17ec8:	6a23      	ldr	r3, [r4, #32]
   17eca:	9300      	str	r3, [sp, #0]
   17ecc:	69e3      	ldr	r3, [r4, #28]
   17ece:	69a2      	ldr	r2, [r4, #24]
   17ed0:	6961      	ldr	r1, [r4, #20]
   17ed2:	4810      	ldr	r0, [pc, #64]	; (17f14 <os_default_irq+0x88>)
   17ed4:	f7ff f8ec 	bl	170b0 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   17ed8:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   17eda:	6983      	ldr	r3, [r0, #24]
   17edc:	6942      	ldr	r2, [r0, #20]
   17ede:	6901      	ldr	r1, [r0, #16]
   17ee0:	69c0      	ldr	r0, [r0, #28]
   17ee2:	9000      	str	r0, [sp, #0]
   17ee4:	480c      	ldr	r0, [pc, #48]	; (17f18 <os_default_irq+0x8c>)
   17ee6:	f7ff f8e3 	bl	170b0 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   17eea:	6869      	ldr	r1, [r5, #4]
   17eec:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   17eee:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17ef0:	480a      	ldr	r0, [pc, #40]	; (17f1c <os_default_irq+0x90>)
   17ef2:	f7ff f8dd 	bl	170b0 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   17ef6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   17ef8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   17efa:	4809      	ldr	r0, [pc, #36]	; (17f20 <os_default_irq+0x94>)
   17efc:	f7ff f8d8 	bl	170b0 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   17f00:	f7f0 f948 	bl	8194 <hal_system_reset>
   17f04:	e000ed00 	.word	0xe000ed00
   17f08:	0001f2c4 	.word	0x0001f2c4
   17f0c:	0001f2f8 	.word	0x0001f2f8
   17f10:	0001f32c 	.word	0x0001f32c
   17f14:	0001f360 	.word	0x0001f360
   17f18:	0001f394 	.word	0x0001f394
   17f1c:	0001f3c8 	.word	0x0001f3c8
   17f20:	0001f3f0 	.word	0x0001f3f0

00017f24 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   17f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
   17f26:	f7ff ff81 	bl	17e2c <hal_watchdog_tickle>
    sanity_last = 0;
   17f2a:	2500      	movs	r5, #0
   17f2c:	e00b      	b.n	17f46 <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   17f2e:	f000 fec7 	bl	18cc0 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   17f32:	f7ff ff7b 	bl	17e2c <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
   17f36:	4625      	mov	r5, r4
   17f38:	e011      	b.n	17f5e <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   17f3a:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   17f3c:	f002 f842 	bl	19fc4 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   17f40:	4638      	mov	r0, r7
   17f42:	f001 fa19 	bl	19378 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   17f46:	4a14      	ldr	r2, [pc, #80]	; (17f98 <os_idle_task+0x74>)
   17f48:	6813      	ldr	r3, [r2, #0]
   17f4a:	3301      	adds	r3, #1
   17f4c:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   17f4e:	f001 f995 	bl	1927c <os_time_get>
   17f52:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
   17f54:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   17f58:	1ac3      	subs	r3, r0, r3
   17f5a:	2b00      	cmp	r3, #0
   17f5c:	dce7      	bgt.n	17f2e <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   17f5e:	f001 fa05 	bl	1936c <os_arch_save_sr>
   17f62:	4607      	mov	r7, r0
        now = os_time_get();
   17f64:	f001 f98a 	bl	1927c <os_time_get>
   17f68:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
   17f6a:	f000 ffd7 	bl	18f1c <os_sched_wakeup_ticks>
   17f6e:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   17f70:	4630      	mov	r0, r6
   17f72:	f000 f975 	bl	18260 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   17f76:	42a0      	cmp	r0, r4
   17f78:	bf28      	it	cs
   17f7a:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
   17f7c:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   17f80:	1b9b      	subs	r3, r3, r6
   17f82:	4298      	cmp	r0, r3
   17f84:	bf28      	it	cs
   17f86:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
   17f88:	280b      	cmp	r0, #11
   17f8a:	d9d6      	bls.n	17f3a <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
   17f8c:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   17f90:	d9d4      	bls.n	17f3c <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
   17f92:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   17f96:	e7d1      	b.n	17f3c <os_idle_task+0x18>
   17f98:	2000e68c 	.word	0x2000e68c

00017f9c <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   17f9c:	b508      	push	{r3, lr}
   17f9e:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   17fa0:	2100      	movs	r1, #0
   17fa2:	4608      	mov	r0, r1
   17fa4:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   17fa6:	2300      	movs	r3, #0
   17fa8:	461a      	mov	r2, r3
   17faa:	4619      	mov	r1, r3
   17fac:	4618      	mov	r0, r3
   17fae:	f7ff ff47 	bl	17e40 <__assert_func>
	...

00017fb4 <os_started>:
}
   17fb4:	4b01      	ldr	r3, [pc, #4]	; (17fbc <os_started+0x8>)
   17fb6:	6818      	ldr	r0, [r3, #0]
   17fb8:	4770      	bx	lr
   17fba:	bf00      	nop
   17fbc:	2000e688 	.word	0x2000e688

00017fc0 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   17fc0:	b500      	push	{lr}
   17fc2:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   17fc4:	2340      	movs	r3, #64	; 0x40
   17fc6:	9303      	str	r3, [sp, #12]
   17fc8:	4b15      	ldr	r3, [pc, #84]	; (18020 <os_init_idle_task+0x60>)
   17fca:	9302      	str	r3, [sp, #8]
   17fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17fd0:	9301      	str	r3, [sp, #4]
   17fd2:	23ff      	movs	r3, #255	; 0xff
   17fd4:	9300      	str	r3, [sp, #0]
   17fd6:	2300      	movs	r3, #0
   17fd8:	4a12      	ldr	r2, [pc, #72]	; (18024 <os_init_idle_task+0x64>)
   17fda:	4913      	ldr	r1, [pc, #76]	; (18028 <os_init_idle_task+0x68>)
   17fdc:	4813      	ldr	r0, [pc, #76]	; (1802c <os_init_idle_task+0x6c>)
   17fde:	f001 f88d 	bl	190fc <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   17fe2:	b950      	cbnz	r0, 17ffa <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   17fe4:	f000 fea2 	bl	18d2c <os_sanity_init>
    assert(rc == 0);
   17fe8:	b968      	cbnz	r0, 18006 <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   17fea:	f247 5030 	movw	r0, #30000	; 0x7530
   17fee:	f7ff fed9 	bl	17da4 <hal_watchdog_init>
    assert(rc == 0);
   17ff2:	b970      	cbnz	r0, 18012 <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
   17ff4:	b005      	add	sp, #20
   17ff6:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   17ffa:	2300      	movs	r3, #0
   17ffc:	461a      	mov	r2, r3
   17ffe:	4619      	mov	r1, r3
   18000:	4618      	mov	r0, r3
   18002:	f7ff ff1d 	bl	17e40 <__assert_func>
    assert(rc == 0);
   18006:	2300      	movs	r3, #0
   18008:	461a      	mov	r2, r3
   1800a:	4619      	mov	r1, r3
   1800c:	4618      	mov	r0, r3
   1800e:	f7ff ff17 	bl	17e40 <__assert_func>
    assert(rc == 0);
   18012:	2300      	movs	r3, #0
   18014:	461a      	mov	r2, r3
   18016:	4619      	mov	r1, r3
   18018:	4618      	mov	r0, r3
   1801a:	f7ff ff11 	bl	17e40 <__assert_func>
   1801e:	bf00      	nop
   18020:	20007770 	.word	0x20007770
   18024:	00017f25 	.word	0x00017f25
   18028:	0001f414 	.word	0x0001f414
   1802c:	2000e5e8 	.word	0x2000e5e8

00018030 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   18030:	b510      	push	{r4, lr}
   18032:	b084      	sub	sp, #16
   18034:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   18036:	4b24      	ldr	r3, [pc, #144]	; (180c8 <os_init+0x98>)
   18038:	2200      	movs	r2, #0
   1803a:	601a      	str	r2, [r3, #0]
   1803c:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   1803e:	4b23      	ldr	r3, [pc, #140]	; (180cc <os_init+0x9c>)
   18040:	601a      	str	r2, [r3, #0]
   18042:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   18044:	f000 faba 	bl	185bc <os_eventq_dflt_get>
   18048:	f000 fa0e 	bl	18468 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   1804c:	f000 fa04 	bl	18458 <os_dev_reset>

    err = os_arch_os_init();
   18050:	f001 f9c6 	bl	193e0 <os_arch_os_init>
    assert(err == OS_OK);
   18054:	bb00      	cbnz	r0, 18098 <os_init+0x68>

    if (main_fn) {
   18056:	b18c      	cbz	r4, 1807c <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   18058:	f44f 6300 	mov.w	r3, #2048	; 0x800
   1805c:	9303      	str	r3, [sp, #12]
   1805e:	4b1c      	ldr	r3, [pc, #112]	; (180d0 <os_init+0xa0>)
   18060:	9302      	str	r3, [sp, #8]
   18062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18066:	9301      	str	r3, [sp, #4]
   18068:	237f      	movs	r3, #127	; 0x7f
   1806a:	9300      	str	r3, [sp, #0]
   1806c:	4623      	mov	r3, r4
   1806e:	4a19      	ldr	r2, [pc, #100]	; (180d4 <os_init+0xa4>)
   18070:	4919      	ldr	r1, [pc, #100]	; (180d8 <os_init+0xa8>)
   18072:	481a      	ldr	r0, [pc, #104]	; (180dc <os_init+0xac>)
   18074:	f001 f842 	bl	190fc <os_task_init>
   18078:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   1807a:	b998      	cbnz	r0, 180a4 <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   1807c:	f001 fe72 	bl	19d64 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   18080:	2001      	movs	r0, #1
   18082:	f000 f985 	bl	18390 <os_dev_initialize_all>
   18086:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   18088:	b990      	cbnz	r0, 180b0 <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   1808a:	2002      	movs	r0, #2
   1808c:	f000 f980 	bl	18390 <os_dev_initialize_all>
   18090:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   18092:	b998      	cbnz	r0, 180bc <os_init+0x8c>
}
   18094:	b004      	add	sp, #16
   18096:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   18098:	2300      	movs	r3, #0
   1809a:	461a      	mov	r2, r3
   1809c:	4619      	mov	r1, r3
   1809e:	4618      	mov	r0, r3
   180a0:	f7ff fece 	bl	17e40 <__assert_func>
        assert(err == 0);
   180a4:	2300      	movs	r3, #0
   180a6:	461a      	mov	r2, r3
   180a8:	4619      	mov	r1, r3
   180aa:	4618      	mov	r0, r3
   180ac:	f7ff fec8 	bl	17e40 <__assert_func>
    assert(err == OS_OK);
   180b0:	2300      	movs	r3, #0
   180b2:	461a      	mov	r2, r3
   180b4:	4619      	mov	r1, r3
   180b6:	4618      	mov	r0, r3
   180b8:	f7ff fec2 	bl	17e40 <__assert_func>
    assert(err == OS_OK);
   180bc:	2300      	movs	r3, #0
   180be:	461a      	mov	r2, r3
   180c0:	4619      	mov	r1, r3
   180c2:	4618      	mov	r0, r3
   180c4:	f7ff febc 	bl	17e40 <__assert_func>
   180c8:	2000e690 	.word	0x2000e690
   180cc:	2000e6b8 	.word	0x2000e6b8
   180d0:	20007870 	.word	0x20007870
   180d4:	00017f9d 	.word	0x00017f9d
   180d8:	0001f40c 	.word	0x0001f40c
   180dc:	2000e638 	.word	0x2000e638

000180e0 <os_start>:

void
os_start(void)
{
   180e0:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   180e2:	f7ff fe9b 	bl	17e1c <hal_watchdog_enable>

    err = os_arch_os_start();
   180e6:	f001 f9db 	bl	194a0 <os_arch_os_start>
    assert(err == OS_OK);
   180ea:	b900      	cbnz	r0, 180ee <os_start+0xe>
#else
    assert(0);
#endif
}
   180ec:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   180ee:	2300      	movs	r3, #0
   180f0:	461a      	mov	r2, r3
   180f2:	4619      	mov	r1, r3
   180f4:	4618      	mov	r0, r3
   180f6:	f7ff fea3 	bl	17e40 <__assert_func>
	...

000180fc <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   180fc:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   180fe:	4b0c      	ldr	r3, [pc, #48]	; (18130 <os_pkg_init+0x34>)
   18100:	781b      	ldrb	r3, [r3, #0]
   18102:	b14b      	cbz	r3, 18118 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   18104:	2003      	movs	r0, #3
   18106:	f000 f943 	bl	18390 <os_dev_initialize_all>
   1810a:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1810c:	b948      	cbnz	r0, 18122 <os_pkg_init+0x26>

    os_mempool_module_init();
   1810e:	f000 fc25 	bl	1895c <os_mempool_module_init>
    os_msys_init();
   18112:	f000 fcad 	bl	18a70 <os_msys_init>
}
   18116:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   18118:	461a      	mov	r2, r3
   1811a:	4619      	mov	r1, r3
   1811c:	4618      	mov	r0, r3
   1811e:	f7ff fe8f 	bl	17e40 <__assert_func>
    assert(err == OS_OK);
   18122:	2300      	movs	r3, #0
   18124:	461a      	mov	r2, r3
   18126:	4619      	mov	r1, r3
   18128:	4618      	mov	r0, r3
   1812a:	f7ff fe89 	bl	17e40 <__assert_func>
   1812e:	bf00      	nop
   18130:	2000e5bc 	.word	0x2000e5bc

00018134 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   18134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18136:	4604      	mov	r4, r0
   18138:	460d      	mov	r5, r1
   1813a:	4617      	mov	r7, r2
   1813c:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   1813e:	2220      	movs	r2, #32
   18140:	2100      	movs	r1, #0
   18142:	f001 fa80 	bl	19646 <memset>
    c->c_ev.ev_cb = ev_cb;
   18146:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   18148:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   1814a:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   1814c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00018150 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   18150:	b538      	push	{r3, r4, r5, lr}
   18152:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   18154:	f001 f90a 	bl	1936c <os_arch_save_sr>
   18158:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   1815a:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   1815c:	b13b      	cbz	r3, 1816e <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1815e:	69a2      	ldr	r2, [r4, #24]
   18160:	b172      	cbz	r2, 18180 <os_callout_stop+0x30>
   18162:	61d3      	str	r3, [r2, #28]
   18164:	69e3      	ldr	r3, [r4, #28]
   18166:	69a2      	ldr	r2, [r4, #24]
   18168:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   1816a:	2300      	movs	r3, #0
   1816c:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   1816e:	6920      	ldr	r0, [r4, #16]
   18170:	b110      	cbz	r0, 18178 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   18172:	4621      	mov	r1, r4
   18174:	f000 fa02 	bl	1857c <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   18178:	4628      	mov	r0, r5
   1817a:	f001 f8fd 	bl	19378 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   1817e:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   18180:	4a01      	ldr	r2, [pc, #4]	; (18188 <os_callout_stop+0x38>)
   18182:	6053      	str	r3, [r2, #4]
   18184:	e7ee      	b.n	18164 <os_callout_stop+0x14>
   18186:	bf00      	nop
   18188:	2000e690 	.word	0x2000e690

0001818c <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   1818c:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   1818e:	6903      	ldr	r3, [r0, #16]
   18190:	b1c3      	cbz	r3, 181c4 <os_callout_reset+0x38>
   18192:	4605      	mov	r5, r0
   18194:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   18196:	2900      	cmp	r1, #0
   18198:	db2f      	blt.n	181fa <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   1819a:	f001 f8e7 	bl	1936c <os_arch_save_sr>
   1819e:	4606      	mov	r6, r0

    os_callout_stop(c);
   181a0:	4628      	mov	r0, r5
   181a2:	f7ff ffd5 	bl	18150 <os_callout_stop>

    if (ticks == 0) {
   181a6:	b904      	cbnz	r4, 181aa <os_callout_reset+0x1e>
        ticks = 1;
   181a8:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
   181aa:	f001 f867 	bl	1927c <os_time_get>
   181ae:	4420      	add	r0, r4
   181b0:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   181b2:	4b13      	ldr	r3, [pc, #76]	; (18200 <os_callout_reset+0x74>)
   181b4:	681b      	ldr	r3, [r3, #0]
   181b6:	b153      	cbz	r3, 181ce <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   181b8:	695a      	ldr	r2, [r3, #20]
   181ba:	1a82      	subs	r2, r0, r2
   181bc:	2a00      	cmp	r2, #0
   181be:	db06      	blt.n	181ce <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   181c0:	699b      	ldr	r3, [r3, #24]
   181c2:	e7f8      	b.n	181b6 <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   181c4:	461a      	mov	r2, r3
   181c6:	4619      	mov	r1, r3
   181c8:	4618      	mov	r0, r3
   181ca:	f7ff fe39 	bl	17e40 <__assert_func>
            break;
        }
    }

    if (entry) {
   181ce:	b15b      	cbz	r3, 181e8 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   181d0:	69da      	ldr	r2, [r3, #28]
   181d2:	61ea      	str	r2, [r5, #28]
   181d4:	61ab      	str	r3, [r5, #24]
   181d6:	69da      	ldr	r2, [r3, #28]
   181d8:	6015      	str	r5, [r2, #0]
   181da:	3518      	adds	r5, #24
   181dc:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   181de:	4630      	mov	r0, r6
   181e0:	f001 f8ca 	bl	19378 <os_arch_restore_sr>

    ret = OS_OK;
   181e4:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   181e6:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   181e8:	2300      	movs	r3, #0
   181ea:	61ab      	str	r3, [r5, #24]
   181ec:	4b04      	ldr	r3, [pc, #16]	; (18200 <os_callout_reset+0x74>)
   181ee:	685a      	ldr	r2, [r3, #4]
   181f0:	61ea      	str	r2, [r5, #28]
   181f2:	6015      	str	r5, [r2, #0]
   181f4:	3518      	adds	r5, #24
   181f6:	605d      	str	r5, [r3, #4]
   181f8:	e7f1      	b.n	181de <os_callout_reset+0x52>
        ret = OS_EINVAL;
   181fa:	2002      	movs	r0, #2
    return ret;
   181fc:	e7f3      	b.n	181e6 <os_callout_reset+0x5a>
   181fe:	bf00      	nop
   18200:	2000e690 	.word	0x2000e690

00018204 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   18204:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   18206:	f001 f839 	bl	1927c <os_time_get>
   1820a:	4605      	mov	r5, r0
   1820c:	e00f      	b.n	1822e <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   1820e:	69e2      	ldr	r2, [r4, #28]
   18210:	4b12      	ldr	r3, [pc, #72]	; (1825c <os_callout_tick+0x58>)
   18212:	605a      	str	r2, [r3, #4]
   18214:	69e3      	ldr	r3, [r4, #28]
   18216:	69a2      	ldr	r2, [r4, #24]
   18218:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   1821a:	2300      	movs	r3, #0
   1821c:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   1821e:	f001 f8ab 	bl	19378 <os_arch_restore_sr>

        if (c) {
   18222:	b1d4      	cbz	r4, 1825a <os_callout_tick+0x56>
            if (c->c_evq) {
   18224:	6920      	ldr	r0, [r4, #16]
   18226:	b9a0      	cbnz	r0, 18252 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   18228:	6863      	ldr	r3, [r4, #4]
   1822a:	4620      	mov	r0, r4
   1822c:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
   1822e:	f001 f89d 	bl	1936c <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   18232:	4b0a      	ldr	r3, [pc, #40]	; (1825c <os_callout_tick+0x58>)
   18234:	681c      	ldr	r4, [r3, #0]
        if (c) {
   18236:	2c00      	cmp	r4, #0
   18238:	d0f1      	beq.n	1821e <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   1823a:	6963      	ldr	r3, [r4, #20]
   1823c:	1aeb      	subs	r3, r5, r3
   1823e:	2b00      	cmp	r3, #0
   18240:	db05      	blt.n	1824e <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   18242:	69a3      	ldr	r3, [r4, #24]
   18244:	2b00      	cmp	r3, #0
   18246:	d0e2      	beq.n	1820e <os_callout_tick+0xa>
   18248:	69e2      	ldr	r2, [r4, #28]
   1824a:	61da      	str	r2, [r3, #28]
   1824c:	e7e2      	b.n	18214 <os_callout_tick+0x10>
                c = NULL;
   1824e:	2400      	movs	r4, #0
   18250:	e7e5      	b.n	1821e <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
   18252:	4621      	mov	r1, r4
   18254:	f000 f915 	bl	18482 <os_eventq_put>
   18258:	e7e9      	b.n	1822e <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   1825a:	bd38      	pop	{r3, r4, r5, pc}
   1825c:	2000e690 	.word	0x2000e690

00018260 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   18260:	b510      	push	{r4, lr}
   18262:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   18264:	f001 f88b 	bl	1937e <os_arch_in_critical>
   18268:	b130      	cbz	r0, 18278 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   1826a:	4b09      	ldr	r3, [pc, #36]	; (18290 <os_callout_wakeup_ticks+0x30>)
   1826c:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   1826e:	b15b      	cbz	r3, 18288 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   18270:	6958      	ldr	r0, [r3, #20]
   18272:	1b00      	subs	r0, r0, r4
   18274:	d406      	bmi.n	18284 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   18276:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   18278:	2300      	movs	r3, #0
   1827a:	461a      	mov	r2, r3
   1827c:	4619      	mov	r1, r3
   1827e:	4618      	mov	r0, r3
   18280:	f7ff fdde 	bl	17e40 <__assert_func>
            rt = 0;     /* callout time is in the past */
   18284:	2000      	movs	r0, #0
   18286:	e7f6      	b.n	18276 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   18288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1828c:	e7f3      	b.n	18276 <os_callout_wakeup_ticks+0x16>
   1828e:	bf00      	nop
   18290:	2000e690 	.word	0x2000e690

00018294 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   18294:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   18296:	4601      	mov	r1, r0
   18298:	2000      	movs	r0, #0
   1829a:	f002 f84d 	bl	1a338 <hal_timer_config>
    return rc;
}
   1829e:	bd08      	pop	{r3, pc}

000182a0 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
   182a0:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   182a2:	2000      	movs	r0, #0
   182a4:	f002 f8c4 	bl	1a430 <hal_timer_read>
    return cpu_time;
}
   182a8:	bd08      	pop	{r3, pc}
	...

000182ac <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   182ac:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   182ae:	4b15      	ldr	r3, [pc, #84]	; (18304 <os_dev_add+0x58>)
   182b0:	681d      	ldr	r5, [r3, #0]
   182b2:	b115      	cbz	r5, 182ba <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   182b4:	462b      	mov	r3, r5
    prev_dev = NULL;
   182b6:	2400      	movs	r4, #0
   182b8:	e008      	b.n	182cc <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   182ba:	4603      	mov	r3, r0
   182bc:	f843 5f20 	str.w	r5, [r3, #32]!
   182c0:	4a10      	ldr	r2, [pc, #64]	; (18304 <os_dev_add+0x58>)
   182c2:	6053      	str	r3, [r2, #4]
   182c4:	6010      	str	r0, [r2, #0]
        return (0);
   182c6:	e010      	b.n	182ea <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   182c8:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   182ca:	6a1b      	ldr	r3, [r3, #32]
   182cc:	b143      	cbz	r3, 182e0 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
   182ce:	7e01      	ldrb	r1, [r0, #24]
   182d0:	7e1a      	ldrb	r2, [r3, #24]
   182d2:	4291      	cmp	r1, r2
   182d4:	d304      	bcc.n	182e0 <os_dev_add+0x34>
   182d6:	d1f7      	bne.n	182c8 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
   182d8:	7e41      	ldrb	r1, [r0, #25]
   182da:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
   182dc:	4291      	cmp	r1, r2
   182de:	d2f3      	bcs.n	182c8 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   182e0:	b15c      	cbz	r4, 182fa <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   182e2:	6a23      	ldr	r3, [r4, #32]
   182e4:	6203      	str	r3, [r0, #32]
   182e6:	b11b      	cbz	r3, 182f0 <os_dev_add+0x44>
   182e8:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   182ea:	2000      	movs	r0, #0
   182ec:	bc30      	pop	{r4, r5}
   182ee:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   182f0:	f100 0320 	add.w	r3, r0, #32
   182f4:	4a03      	ldr	r2, [pc, #12]	; (18304 <os_dev_add+0x58>)
   182f6:	6053      	str	r3, [r2, #4]
   182f8:	e7f6      	b.n	182e8 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   182fa:	6205      	str	r5, [r0, #32]
   182fc:	4b01      	ldr	r3, [pc, #4]	; (18304 <os_dev_add+0x58>)
   182fe:	6018      	str	r0, [r3, #0]
   18300:	e7f3      	b.n	182ea <os_dev_add+0x3e>
   18302:	bf00      	nop
   18304:	20009870 	.word	0x20009870

00018308 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   18308:	b510      	push	{r4, lr}
   1830a:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   1830c:	6903      	ldr	r3, [r0, #16]
   1830e:	6941      	ldr	r1, [r0, #20]
   18310:	4798      	blx	r3
    if (rc != 0) {
   18312:	4603      	mov	r3, r0
   18314:	b128      	cbz	r0, 18322 <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   18316:	7ee2      	ldrb	r2, [r4, #27]
   18318:	f012 0f08 	tst.w	r2, #8
   1831c:	d105      	bne.n	1832a <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   1831e:	2300      	movs	r3, #0
   18320:	e003      	b.n	1832a <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   18322:	7ee2      	ldrb	r2, [r4, #27]
   18324:	f042 0201 	orr.w	r2, r2, #1
   18328:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
   1832a:	4618      	mov	r0, r3
   1832c:	bd10      	pop	{r4, pc}

0001832e <os_dev_init>:
    dev->od_name = name;
   1832e:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   18330:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   18332:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   18334:	2300      	movs	r3, #0
   18336:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
   18338:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
   1833a:	9a00      	ldr	r2, [sp, #0]
   1833c:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
   1833e:	9a01      	ldr	r2, [sp, #4]
   18340:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   18342:	6003      	str	r3, [r0, #0]
   18344:	6043      	str	r3, [r0, #4]
   18346:	6083      	str	r3, [r0, #8]
   18348:	60c3      	str	r3, [r0, #12]
}
   1834a:	4618      	mov	r0, r3
   1834c:	4770      	bx	lr
	...

00018350 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   18350:	b530      	push	{r4, r5, lr}
   18352:	b083      	sub	sp, #12
   18354:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   18356:	9c07      	ldr	r4, [sp, #28]
   18358:	9401      	str	r4, [sp, #4]
   1835a:	9c06      	ldr	r4, [sp, #24]
   1835c:	9400      	str	r4, [sp, #0]
   1835e:	f7ff ffe6 	bl	1832e <os_dev_init>
    if (rc != 0) {
   18362:	4603      	mov	r3, r0
   18364:	b110      	cbz	r0, 1836c <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   18366:	4618      	mov	r0, r3
   18368:	b003      	add	sp, #12
   1836a:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   1836c:	4628      	mov	r0, r5
   1836e:	f7ff ff9d 	bl	182ac <os_dev_add>
    if (rc != 0) {
   18372:	4603      	mov	r3, r0
   18374:	2800      	cmp	r0, #0
   18376:	d1f6      	bne.n	18366 <os_dev_create+0x16>
    if (g_os_started) {
   18378:	4a04      	ldr	r2, [pc, #16]	; (1838c <os_dev_create+0x3c>)
   1837a:	6812      	ldr	r2, [r2, #0]
   1837c:	2a00      	cmp	r2, #0
   1837e:	d0f2      	beq.n	18366 <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
   18380:	4628      	mov	r0, r5
   18382:	f7ff ffc1 	bl	18308 <os_dev_initialize>
   18386:	4603      	mov	r3, r0
    return (rc);
   18388:	e7ed      	b.n	18366 <os_dev_create+0x16>
   1838a:	bf00      	nop
   1838c:	2000e688 	.word	0x2000e688

00018390 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   18390:	b538      	push	{r3, r4, r5, lr}
   18392:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   18394:	4b08      	ldr	r3, [pc, #32]	; (183b8 <os_dev_initialize_all+0x28>)
   18396:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   18398:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1839a:	e000      	b.n	1839e <os_dev_initialize_all+0xe>
   1839c:	6a24      	ldr	r4, [r4, #32]
   1839e:	b144      	cbz	r4, 183b2 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   183a0:	7e23      	ldrb	r3, [r4, #24]
   183a2:	42ab      	cmp	r3, r5
   183a4:	d1fa      	bne.n	1839c <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   183a6:	4620      	mov	r0, r4
   183a8:	f7ff ffae 	bl	18308 <os_dev_initialize>
            if (rc) {
   183ac:	4602      	mov	r2, r0
   183ae:	2800      	cmp	r0, #0
   183b0:	d0f4      	beq.n	1839c <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   183b2:	4610      	mov	r0, r2
   183b4:	bd38      	pop	{r3, r4, r5, pc}
   183b6:	bf00      	nop
   183b8:	20009870 	.word	0x20009870

000183bc <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   183bc:	b538      	push	{r3, r4, r5, lr}
   183be:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   183c0:	4b05      	ldr	r3, [pc, #20]	; (183d8 <os_dev_lookup+0x1c>)
   183c2:	681c      	ldr	r4, [r3, #0]
   183c4:	b134      	cbz	r4, 183d4 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   183c6:	4629      	mov	r1, r5
   183c8:	69e0      	ldr	r0, [r4, #28]
   183ca:	f001 f958 	bl	1967e <strcmp>
   183ce:	b108      	cbz	r0, 183d4 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   183d0:	6a24      	ldr	r4, [r4, #32]
   183d2:	e7f7      	b.n	183c4 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   183d4:	4620      	mov	r0, r4
   183d6:	bd38      	pop	{r3, r4, r5, pc}
   183d8:	20009870 	.word	0x20009870

000183dc <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   183dc:	b570      	push	{r4, r5, r6, lr}
   183de:	460d      	mov	r5, r1
   183e0:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   183e2:	f7ff ffeb 	bl	183bc <os_dev_lookup>
    if (dev == NULL) {
   183e6:	4604      	mov	r4, r0
   183e8:	b1a0      	cbz	r0, 18414 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   183ea:	7ec3      	ldrb	r3, [r0, #27]
   183ec:	f013 0f01 	tst.w	r3, #1
   183f0:	d012      	beq.n	18418 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   183f2:	6803      	ldr	r3, [r0, #0]
   183f4:	b11b      	cbz	r3, 183fe <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   183f6:	4632      	mov	r2, r6
   183f8:	4629      	mov	r1, r5
   183fa:	4798      	blx	r3
        if (rc != 0) {
   183fc:	b970      	cbnz	r0, 1841c <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   183fe:	f000 ffb5 	bl	1936c <os_arch_save_sr>
    ++dev->od_open_ref;
   18402:	7ea3      	ldrb	r3, [r4, #26]
   18404:	3301      	adds	r3, #1
   18406:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   18408:	7ee3      	ldrb	r3, [r4, #27]
   1840a:	f043 0302 	orr.w	r3, r3, #2
   1840e:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   18410:	f000 ffb2 	bl	19378 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   18414:	4620      	mov	r0, r4
   18416:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   18418:	2400      	movs	r4, #0
   1841a:	e7fb      	b.n	18414 <os_dev_open+0x38>
    return (NULL);
   1841c:	2400      	movs	r4, #0
   1841e:	e7f9      	b.n	18414 <os_dev_open+0x38>

00018420 <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
   18420:	b1b0      	cbz	r0, 18450 <os_dev_close+0x30>
{
   18422:	b510      	push	{r4, lr}
   18424:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
   18426:	68c3      	ldr	r3, [r0, #12]
   18428:	b113      	cbz	r3, 18430 <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
   1842a:	4798      	blx	r3
        if (rc != 0) {
   1842c:	4603      	mov	r3, r0
   1842e:	b968      	cbnz	r0, 1844c <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   18430:	f000 ff9c 	bl	1936c <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
   18434:	7ea3      	ldrb	r3, [r4, #26]
   18436:	3b01      	subs	r3, #1
   18438:	b2db      	uxtb	r3, r3
   1843a:	76a3      	strb	r3, [r4, #26]
   1843c:	b91b      	cbnz	r3, 18446 <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
   1843e:	7ee3      	ldrb	r3, [r4, #27]
   18440:	f023 0306 	bic.w	r3, r3, #6
   18444:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
   18446:	f000 ff97 	bl	19378 <os_arch_restore_sr>

    return (0);
   1844a:	2300      	movs	r3, #0
err:
    return (rc);
}
   1844c:	4618      	mov	r0, r3
   1844e:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
   18450:	2302      	movs	r3, #2
}
   18452:	4618      	mov	r0, r3
   18454:	4770      	bx	lr
	...

00018458 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   18458:	4b02      	ldr	r3, [pc, #8]	; (18464 <os_dev_reset+0xc>)
   1845a:	2200      	movs	r2, #0
   1845c:	601a      	str	r2, [r3, #0]
   1845e:	605b      	str	r3, [r3, #4]
}
   18460:	4770      	bx	lr
   18462:	bf00      	nop
   18464:	20009870 	.word	0x20009870

00018468 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   18468:	2200      	movs	r2, #0
   1846a:	6002      	str	r2, [r0, #0]
   1846c:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   1846e:	4603      	mov	r3, r0
   18470:	f843 2f08 	str.w	r2, [r3, #8]!
   18474:	60c3      	str	r3, [r0, #12]
}
   18476:	4770      	bx	lr

00018478 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   18478:	68c0      	ldr	r0, [r0, #12]
}
   1847a:	3000      	adds	r0, #0
   1847c:	bf18      	it	ne
   1847e:	2001      	movne	r0, #1
   18480:	4770      	bx	lr

00018482 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   18482:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   18484:	b1f0      	cbz	r0, 184c4 <os_eventq_put+0x42>
   18486:	460c      	mov	r4, r1
   18488:	4605      	mov	r5, r0
   1848a:	f7ff fff5 	bl	18478 <os_eventq_inited>
   1848e:	b1c8      	cbz	r0, 184c4 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   18490:	f000 ff6c 	bl	1936c <os_arch_save_sr>
   18494:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   18496:	7823      	ldrb	r3, [r4, #0]
   18498:	b9d3      	cbnz	r3, 184d0 <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   1849a:	2301      	movs	r3, #1
   1849c:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   1849e:	2300      	movs	r3, #0
   184a0:	60e3      	str	r3, [r4, #12]
   184a2:	68eb      	ldr	r3, [r5, #12]
   184a4:	601c      	str	r4, [r3, #0]
   184a6:	340c      	adds	r4, #12
   184a8:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
   184aa:	6868      	ldr	r0, [r5, #4]
   184ac:	b1b8      	cbz	r0, 184de <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   184ae:	7b03      	ldrb	r3, [r0, #12]
   184b0:	2b02      	cmp	r3, #2
   184b2:	d010      	beq.n	184d6 <os_eventq_put+0x54>
    resched = 0;
   184b4:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   184b6:	2300      	movs	r3, #0
   184b8:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   184ba:	4630      	mov	r0, r6
   184bc:	f000 ff5c 	bl	19378 <os_arch_restore_sr>

    if (resched) {
   184c0:	b97c      	cbnz	r4, 184e2 <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   184c2:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   184c4:	2300      	movs	r3, #0
   184c6:	461a      	mov	r2, r3
   184c8:	4619      	mov	r1, r3
   184ca:	4618      	mov	r0, r3
   184cc:	f7ff fcb8 	bl	17e40 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   184d0:	f000 ff52 	bl	19378 <os_arch_restore_sr>
   184d4:	e7f5      	b.n	184c2 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   184d6:	f000 fcc7 	bl	18e68 <os_sched_wakeup>
            resched = 1;
   184da:	2401      	movs	r4, #1
   184dc:	e7eb      	b.n	184b6 <os_eventq_put+0x34>
    resched = 0;
   184de:	2400      	movs	r4, #0
   184e0:	e7eb      	b.n	184ba <os_eventq_put+0x38>
        os_sched(NULL);
   184e2:	2000      	movs	r0, #0
   184e4:	f000 fd40 	bl	18f68 <os_sched>
   184e8:	e7eb      	b.n	184c2 <os_eventq_put+0x40>

000184ea <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   184ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   184ec:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   184ee:	f000 fc67 	bl	18dc0 <os_sched_get_current_task>
   184f2:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   184f4:	682b      	ldr	r3, [r5, #0]
   184f6:	4283      	cmp	r3, r0
   184f8:	d001      	beq.n	184fe <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   184fa:	b9db      	cbnz	r3, 18534 <os_eventq_get+0x4a>
            evq->evq_owner = t;
   184fc:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   184fe:	f000 ff35 	bl	1936c <os_arch_save_sr>
   18502:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   18504:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
   18506:	b9de      	cbnz	r6, 18540 <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   18508:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   1850a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1850e:	4620      	mov	r0, r4
   18510:	f000 fc62 	bl	18dd8 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   18514:	7b63      	ldrb	r3, [r4, #13]
   18516:	f043 0308 	orr.w	r3, r3, #8
   1851a:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   1851c:	4638      	mov	r0, r7
   1851e:	f000 ff2b 	bl	19378 <os_arch_restore_sr>

        os_sched(NULL);
   18522:	2000      	movs	r0, #0
   18524:	f000 fd20 	bl	18f68 <os_sched>

        OS_ENTER_CRITICAL(sr);
   18528:	f000 ff20 	bl	1936c <os_arch_save_sr>
   1852c:	4607      	mov	r7, r0
        evq->evq_task = NULL;
   1852e:	2300      	movs	r3, #0
   18530:	606b      	str	r3, [r5, #4]
        goto pull_one;
   18532:	e7e7      	b.n	18504 <os_eventq_get+0x1a>
            assert(0);
   18534:	2300      	movs	r3, #0
   18536:	461a      	mov	r2, r3
   18538:	4619      	mov	r1, r3
   1853a:	4618      	mov	r0, r3
   1853c:	f7ff fc80 	bl	17e40 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   18540:	68f3      	ldr	r3, [r6, #12]
   18542:	60ab      	str	r3, [r5, #8]
   18544:	b153      	cbz	r3, 1855c <os_eventq_get+0x72>
        ev->ev_queued = 0;
   18546:	2300      	movs	r3, #0
   18548:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   1854a:	7b63      	ldrb	r3, [r4, #13]
   1854c:	f023 0308 	bic.w	r3, r3, #8
   18550:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   18552:	4638      	mov	r0, r7
   18554:	f000 ff10 	bl	19378 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   18558:	4630      	mov	r0, r6
   1855a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1855c:	f105 0308 	add.w	r3, r5, #8
   18560:	60eb      	str	r3, [r5, #12]
   18562:	e7f0      	b.n	18546 <os_eventq_get+0x5c>

00018564 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   18564:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   18566:	f7ff ffc0 	bl	184ea <os_eventq_get>
    assert(ev->ev_cb != NULL);
   1856a:	6843      	ldr	r3, [r0, #4]
   1856c:	b10b      	cbz	r3, 18572 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   1856e:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   18570:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   18572:	461a      	mov	r2, r3
   18574:	4619      	mov	r1, r3
   18576:	4618      	mov	r0, r3
   18578:	f7ff fc62 	bl	17e40 <__assert_func>

0001857c <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   1857c:	b538      	push	{r3, r4, r5, lr}
   1857e:	4605      	mov	r5, r0
   18580:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   18582:	f000 fef3 	bl	1936c <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   18586:	7823      	ldrb	r3, [r4, #0]
   18588:	b183      	cbz	r3, 185ac <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1858a:	68aa      	ldr	r2, [r5, #8]
   1858c:	42a2      	cmp	r2, r4
   1858e:	d107      	bne.n	185a0 <os_eventq_remove+0x24>
   18590:	68d3      	ldr	r3, [r2, #12]
   18592:	60ab      	str	r3, [r5, #8]
   18594:	b953      	cbnz	r3, 185ac <os_eventq_remove+0x30>
   18596:	f105 0308 	add.w	r3, r5, #8
   1859a:	60eb      	str	r3, [r5, #12]
   1859c:	e006      	b.n	185ac <os_eventq_remove+0x30>
   1859e:	461a      	mov	r2, r3
   185a0:	68d3      	ldr	r3, [r2, #12]
   185a2:	42a3      	cmp	r3, r4
   185a4:	d1fb      	bne.n	1859e <os_eventq_remove+0x22>
   185a6:	68db      	ldr	r3, [r3, #12]
   185a8:	60d3      	str	r3, [r2, #12]
   185aa:	b123      	cbz	r3, 185b6 <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
   185ac:	2300      	movs	r3, #0
   185ae:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   185b0:	f000 fee2 	bl	19378 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   185b4:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   185b6:	320c      	adds	r2, #12
   185b8:	60ea      	str	r2, [r5, #12]
   185ba:	e7f7      	b.n	185ac <os_eventq_remove+0x30>

000185bc <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   185bc:	4800      	ldr	r0, [pc, #0]	; (185c0 <os_eventq_dflt_get+0x4>)
   185be:	4770      	bx	lr
   185c0:	20009878 	.word	0x20009878

000185c4 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   185c4:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   185c6:	2000      	movs	r0, #0
   185c8:	6018      	str	r0, [r3, #0]
   185ca:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   185cc:	6098      	str	r0, [r3, #8]
   185ce:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   185d0:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   185d2:	611a      	str	r2, [r3, #16]

    return (0);
}
   185d4:	4770      	bx	lr

000185d6 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   185d6:	b538      	push	{r3, r4, r5, lr}
   185d8:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   185da:	f000 fec7 	bl	1936c <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   185de:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   185e0:	b114      	cbz	r4, 185e8 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   185e2:	6863      	ldr	r3, [r4, #4]
   185e4:	602b      	str	r3, [r5, #0]
   185e6:	b12b      	cbz	r3, 185f4 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   185e8:	f000 fec6 	bl	19378 <os_arch_restore_sr>

    if (mp) {
   185ec:	b124      	cbz	r4, 185f8 <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   185ee:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   185f2:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   185f4:	606d      	str	r5, [r5, #4]
   185f6:	e7f7      	b.n	185e8 <os_mqueue_get+0x12>
        m = NULL;
   185f8:	2000      	movs	r0, #0
    return (m);
   185fa:	e7fa      	b.n	185f2 <os_mqueue_get+0x1c>

000185fc <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   185fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   185fe:	7953      	ldrb	r3, [r2, #5]
   18600:	2b07      	cmp	r3, #7
   18602:	d916      	bls.n	18632 <os_mqueue_put+0x36>
   18604:	4614      	mov	r4, r2
   18606:	460e      	mov	r6, r1
   18608:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   1860a:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   1860e:	f000 fead 	bl	1936c <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   18612:	2300      	movs	r3, #0
   18614:	f844 3f14 	str.w	r3, [r4, #20]!
   18618:	686b      	ldr	r3, [r5, #4]
   1861a:	601f      	str	r7, [r3, #0]
   1861c:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   1861e:	f000 feab 	bl	19378 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   18622:	b146      	cbz	r6, 18636 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   18624:	f105 0108 	add.w	r1, r5, #8
   18628:	4630      	mov	r0, r6
   1862a:	f7ff ff2a 	bl	18482 <os_eventq_put>
    }

    return (0);
   1862e:	2000      	movs	r0, #0
   18630:	e000      	b.n	18634 <os_mqueue_put+0x38>
err:
    return (rc);
   18632:	2002      	movs	r0, #2
}
   18634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   18636:	2000      	movs	r0, #0
   18638:	e7fc      	b.n	18634 <os_mqueue_put+0x38>

0001863a <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   1863a:	3a10      	subs	r2, #16
   1863c:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   1863e:	6041      	str	r1, [r0, #4]

    return (0);
}
   18640:	2000      	movs	r0, #0
   18642:	4770      	bx	lr

00018644 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   18644:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   18646:	8803      	ldrh	r3, [r0, #0]
   18648:	428b      	cmp	r3, r1
   1864a:	d312      	bcc.n	18672 <os_mbuf_get+0x2e>
   1864c:	460d      	mov	r5, r1
   1864e:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   18650:	6840      	ldr	r0, [r0, #4]
   18652:	f000 f947 	bl	188e4 <os_memblock_get>
    if (!om) {
   18656:	4603      	mov	r3, r0
   18658:	b148      	cbz	r0, 1866e <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   1865a:	2200      	movs	r2, #0
   1865c:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
   1865e:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
   18660:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
   18662:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   18664:	f100 0110 	add.w	r1, r0, #16
   18668:	4429      	add	r1, r5
   1866a:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
   1866c:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   1866e:	4618      	mov	r0, r3
   18670:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   18672:	2300      	movs	r3, #0
    return om;
   18674:	e7fb      	b.n	1866e <os_mbuf_get+0x2a>

00018676 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   18676:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   18678:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   1867c:	8803      	ldrh	r3, [r0, #0]
   1867e:	42ab      	cmp	r3, r5
   18680:	d310      	bcc.n	186a4 <os_mbuf_get_pkthdr+0x2e>
   18682:	2dff      	cmp	r5, #255	; 0xff
   18684:	d810      	bhi.n	186a8 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   18686:	2100      	movs	r1, #0
   18688:	f7ff ffdc 	bl	18644 <os_mbuf_get>
    if (om) {
   1868c:	4603      	mov	r3, r0
   1868e:	b138      	cbz	r0, 186a0 <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
   18690:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
   18692:	6802      	ldr	r2, [r0, #0]
   18694:	4415      	add	r5, r2
   18696:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   18698:	2200      	movs	r2, #0
   1869a:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
   1869c:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   1869e:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   186a0:	4618      	mov	r0, r3
   186a2:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   186a4:	2300      	movs	r3, #0
   186a6:	e7fb      	b.n	186a0 <os_mbuf_get_pkthdr+0x2a>
   186a8:	2300      	movs	r3, #0
    return om;
   186aa:	e7f9      	b.n	186a0 <os_mbuf_get_pkthdr+0x2a>

000186ac <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   186ac:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   186ae:	6883      	ldr	r3, [r0, #8]
   186b0:	b123      	cbz	r3, 186bc <os_mbuf_free+0x10>
   186b2:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   186b4:	6858      	ldr	r0, [r3, #4]
   186b6:	f000 f93d 	bl	18934 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   186ba:	bd08      	pop	{r3, pc}
    rc = 0;
   186bc:	2000      	movs	r0, #0
    return (rc);
   186be:	e7fc      	b.n	186ba <os_mbuf_free+0xe>

000186c0 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
   186c0:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   186c2:	b160      	cbz	r0, 186de <os_mbuf_free_chain+0x1e>
{
   186c4:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   186c6:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
   186c8:	4618      	mov	r0, r3
   186ca:	f7ff ffef 	bl	186ac <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
   186ce:	4623      	mov	r3, r4
        if (rc != 0) {
   186d0:	4602      	mov	r2, r0
   186d2:	b910      	cbnz	r0, 186da <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
   186d4:	2c00      	cmp	r4, #0
   186d6:	d1f6      	bne.n	186c6 <os_mbuf_free_chain+0x6>
    }

    rc = 0;
   186d8:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   186da:	4610      	mov	r0, r2
   186dc:	bd10      	pop	{r4, pc}
    rc = 0;
   186de:	2200      	movs	r2, #0
}
   186e0:	4610      	mov	r0, r2
   186e2:	4770      	bx	lr

000186e4 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
   186e4:	2300      	movs	r3, #0
    while (om != NULL) {
   186e6:	e003      	b.n	186f0 <os_mbuf_len+0xc>
        len += om->om_len;
   186e8:	88c2      	ldrh	r2, [r0, #6]
   186ea:	4413      	add	r3, r2
   186ec:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
   186ee:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
   186f0:	2800      	cmp	r0, #0
   186f2:	d1f9      	bne.n	186e8 <os_mbuf_len+0x4>
    }

    return len;
}
   186f4:	4618      	mov	r0, r3
   186f6:	4770      	bx	lr

000186f8 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   186f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   186fc:	2800      	cmp	r0, #0
   186fe:	d04d      	beq.n	1879c <os_mbuf_append+0xa4>
   18700:	460f      	mov	r7, r1
   18702:	4691      	mov	r9, r2
   18704:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   18706:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   1870a:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   1870c:	e000      	b.n	18710 <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
   1870e:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   18710:	68eb      	ldr	r3, [r5, #12]
   18712:	2b00      	cmp	r3, #0
   18714:	d1fb      	bne.n	1870e <os_mbuf_append+0x16>
    }

    remainder = len;
   18716:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   18718:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1871a:	f105 0410 	add.w	r4, r5, #16
   1871e:	881b      	ldrh	r3, [r3, #0]
   18720:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   18722:	6828      	ldr	r0, [r5, #0]
   18724:	88eb      	ldrh	r3, [r5, #6]
   18726:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   18728:	1a24      	subs	r4, r4, r0
   1872a:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   1872c:	b164      	cbz	r4, 18748 <os_mbuf_append+0x50>
        if (space > remainder) {
   1872e:	454c      	cmp	r4, r9
   18730:	dd00      	ble.n	18734 <os_mbuf_append+0x3c>
            space = remainder;
   18732:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   18734:	4622      	mov	r2, r4
   18736:	4639      	mov	r1, r7
   18738:	f000 ff78 	bl	1962c <memcpy>

        last->om_len += space;
   1873c:	88eb      	ldrh	r3, [r5, #6]
   1873e:	4423      	add	r3, r4
   18740:	80eb      	strh	r3, [r5, #6]
        data += space;
   18742:	4427      	add	r7, r4
        remainder -= space;
   18744:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   18748:	2e00      	cmp	r6, #0
   1874a:	dd16      	ble.n	1877a <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
   1874c:	2100      	movs	r1, #0
   1874e:	4640      	mov	r0, r8
   18750:	f7ff ff78 	bl	18644 <os_mbuf_get>
        if (!new) {
   18754:	4604      	mov	r4, r0
   18756:	b180      	cbz	r0, 1877a <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   18758:	f8b8 2000 	ldrh.w	r2, [r8]
   1875c:	42b2      	cmp	r2, r6
   1875e:	bfa8      	it	ge
   18760:	4632      	movge	r2, r6
   18762:	b292      	uxth	r2, r2
   18764:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   18766:	4639      	mov	r1, r7
   18768:	6800      	ldr	r0, [r0, #0]
   1876a:	f000 ff5f 	bl	1962c <memcpy>
        data += new->om_len;
   1876e:	88e3      	ldrh	r3, [r4, #6]
   18770:	441f      	add	r7, r3
        remainder -= new->om_len;
   18772:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
   18774:	60ec      	str	r4, [r5, #12]
        last = new;
   18776:	4625      	mov	r5, r4
   18778:	e7e6      	b.n	18748 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   1877a:	f89a 3005 	ldrb.w	r3, [sl, #5]
   1877e:	2b07      	cmp	r3, #7
   18780:	d907      	bls.n	18792 <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   18782:	eba9 0906 	sub.w	r9, r9, r6
   18786:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   1878a:	fa13 f989 	uxtah	r9, r3, r9
   1878e:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   18792:	b106      	cbz	r6, 18796 <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
   18794:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
   18796:	4630      	mov	r0, r6
   18798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   1879c:	2602      	movs	r6, #2
   1879e:	e7fa      	b.n	18796 <os_mbuf_append+0x9e>

000187a0 <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
   187a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   187a4:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
   187a6:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
   187aa:	2700      	movs	r7, #0
    head = NULL;
   187ac:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   187ae:	e017      	b.n	187e0 <os_mbuf_dup+0x40>
    startoff = 0;
   187b0:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   187b2:	4623      	mov	r3, r4
   187b4:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   187b8:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   187ba:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
   187bc:	b299      	uxth	r1, r3
   187be:	4640      	mov	r0, r8
   187c0:	f7ff ff40 	bl	18644 <os_mbuf_get>
   187c4:	4605      	mov	r5, r0
   187c6:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
   187c8:	b188      	cbz	r0, 187ee <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
   187ca:	7923      	ldrb	r3, [r4, #4]
   187cc:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
   187ce:	88e3      	ldrh	r3, [r4, #6]
   187d0:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
   187d2:	88e2      	ldrh	r2, [r4, #6]
   187d4:	6821      	ldr	r1, [r4, #0]
   187d6:	6828      	ldr	r0, [r5, #0]
   187d8:	f000 ff28 	bl	1962c <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   187dc:	68e4      	ldr	r4, [r4, #12]
   187de:	462f      	mov	r7, r5
   187e0:	b14c      	cbz	r4, 187f6 <os_mbuf_dup+0x56>
        if (head) {
   187e2:	b15e      	cbz	r6, 187fc <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   187e4:	7963      	ldrb	r3, [r4, #5]
   187e6:	2b07      	cmp	r3, #7
   187e8:	d9e2      	bls.n	187b0 <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
   187ea:	b299      	uxth	r1, r3
   187ec:	e7e1      	b.n	187b2 <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
   187ee:	4630      	mov	r0, r6
   187f0:	f7ff ff66 	bl	186c0 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
   187f4:	462e      	mov	r6, r5
}
   187f6:	4630      	mov	r0, r6
   187f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   187fc:	7963      	ldrb	r3, [r4, #5]
   187fe:	2b07      	cmp	r3, #7
   18800:	d911      	bls.n	18826 <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
   18802:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   18804:	4623      	mov	r3, r4
   18806:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1880a:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1880c:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
   1880e:	b299      	uxth	r1, r3
   18810:	4640      	mov	r0, r8
   18812:	f7ff ff17 	bl	18644 <os_mbuf_get>
            if (!head) {
   18816:	4606      	mov	r6, r0
   18818:	2800      	cmp	r0, #0
   1881a:	d0ec      	beq.n	187f6 <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
   1881c:	7963      	ldrb	r3, [r4, #5]
   1881e:	2b07      	cmp	r3, #7
   18820:	d803      	bhi.n	1882a <os_mbuf_dup+0x8a>
            copy = head;
   18822:	4605      	mov	r5, r0
   18824:	e7d1      	b.n	187ca <os_mbuf_dup+0x2a>
    startoff = 0;
   18826:	2100      	movs	r1, #0
   18828:	e7ec      	b.n	18804 <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
   1882a:	88c3      	ldrh	r3, [r0, #6]
   1882c:	b973      	cbnz	r3, 1884c <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   1882e:	f100 0510 	add.w	r5, r0, #16
   18832:	7962      	ldrb	r2, [r4, #5]
   18834:	f104 0110 	add.w	r1, r4, #16
   18838:	4628      	mov	r0, r5
   1883a:	f000 fef7 	bl	1962c <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   1883e:	7963      	ldrb	r3, [r4, #5]
   18840:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   18842:	7963      	ldrb	r3, [r4, #5]
   18844:	441d      	add	r5, r3
   18846:	6035      	str	r5, [r6, #0]
            copy = head;
   18848:	4635      	mov	r5, r6
   1884a:	e7be      	b.n	187ca <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
   1884c:	2300      	movs	r3, #0
   1884e:	461a      	mov	r2, r3
   18850:	4619      	mov	r1, r3
   18852:	4618      	mov	r0, r3
   18854:	f7ff faf4 	bl	17e40 <__assert_func>

00018858 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   18858:	2800      	cmp	r0, #0
   1885a:	d031      	beq.n	188c0 <os_mempool_init_internal+0x68>
{
   1885c:	b430      	push	{r4, r5}
   1885e:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   18860:	2a00      	cmp	r2, #0
   18862:	d02f      	beq.n	188c4 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   18864:	b1bb      	cbz	r3, 18896 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   18866:	b113      	cbz	r3, 1886e <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   18868:	f013 0f03 	tst.w	r3, #3
   1886c:	d12c      	bne.n	188c8 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   1886e:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   18870:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   18872:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   18874:	f89d 000c 	ldrb.w	r0, [sp, #12]
   18878:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   1887a:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   1887c:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   1887e:	9802      	ldr	r0, [sp, #8]
   18880:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   18882:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   18884:	b199      	cbz	r1, 188ae <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   18886:	f012 0f03 	tst.w	r2, #3
   1888a:	d002      	beq.n	18892 <os_mempool_init_internal+0x3a>
   1888c:	f022 0203 	bic.w	r2, r2, #3
   18890:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   18892:	2001      	movs	r0, #1
   18894:	e007      	b.n	188a6 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   18896:	2900      	cmp	r1, #0
   18898:	d0e5      	beq.n	18866 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   1889a:	2003      	movs	r0, #3
   1889c:	e00e      	b.n	188bc <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   1889e:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   188a0:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   188a2:	3001      	adds	r0, #1
            block_addr += true_block_size;
   188a4:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   188a6:	4281      	cmp	r1, r0
   188a8:	dcf9      	bgt.n	1889e <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   188aa:	2200      	movs	r2, #0
   188ac:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   188ae:	2000      	movs	r0, #0
   188b0:	6120      	str	r0, [r4, #16]
   188b2:	4b06      	ldr	r3, [pc, #24]	; (188cc <os_mempool_init_internal+0x74>)
   188b4:	685a      	ldr	r2, [r3, #4]
   188b6:	6014      	str	r4, [r2, #0]
   188b8:	3410      	adds	r4, #16
   188ba:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   188bc:	bc30      	pop	{r4, r5}
   188be:	4770      	bx	lr
        return OS_INVALID_PARM;
   188c0:	2003      	movs	r0, #3
}
   188c2:	4770      	bx	lr
        return OS_INVALID_PARM;
   188c4:	2003      	movs	r0, #3
   188c6:	e7f9      	b.n	188bc <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   188c8:	2004      	movs	r0, #4
   188ca:	e7f7      	b.n	188bc <os_mempool_init_internal+0x64>
   188cc:	2000e698 	.word	0x2000e698

000188d0 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   188d0:	b510      	push	{r4, lr}
   188d2:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   188d4:	2400      	movs	r4, #0
   188d6:	9401      	str	r4, [sp, #4]
   188d8:	9c04      	ldr	r4, [sp, #16]
   188da:	9400      	str	r4, [sp, #0]
   188dc:	f7ff ffbc 	bl	18858 <os_mempool_init_internal>
}
   188e0:	b002      	add	sp, #8
   188e2:	bd10      	pop	{r4, pc}

000188e4 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   188e4:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   188e6:	b1a0      	cbz	r0, 18912 <os_memblock_get+0x2e>
   188e8:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   188ea:	f000 fd3f 	bl	1936c <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   188ee:	88e3      	ldrh	r3, [r4, #6]
   188f0:	b153      	cbz	r3, 18908 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   188f2:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   188f4:	682a      	ldr	r2, [r5, #0]
   188f6:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   188f8:	3b01      	subs	r3, #1
   188fa:	b29b      	uxth	r3, r3
   188fc:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   188fe:	8922      	ldrh	r2, [r4, #8]
   18900:	4293      	cmp	r3, r2
   18902:	d202      	bcs.n	1890a <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   18904:	8123      	strh	r3, [r4, #8]
   18906:	e000      	b.n	1890a <os_memblock_get+0x26>
    block = NULL;
   18908:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   1890a:	f000 fd35 	bl	19378 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   1890e:	4628      	mov	r0, r5
   18910:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   18912:	2500      	movs	r5, #0
    return (void *)block;
   18914:	e7fb      	b.n	1890e <os_memblock_get+0x2a>

00018916 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   18916:	b538      	push	{r3, r4, r5, lr}
   18918:	4604      	mov	r4, r0
   1891a:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   1891c:	f000 fd26 	bl	1936c <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   18920:	6963      	ldr	r3, [r4, #20]
   18922:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   18924:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   18926:	88e3      	ldrh	r3, [r4, #6]
   18928:	3301      	adds	r3, #1
   1892a:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   1892c:	f000 fd24 	bl	19378 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   18930:	2000      	movs	r0, #0
   18932:	bd38      	pop	{r3, r4, r5, pc}

00018934 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   18934:	b168      	cbz	r0, 18952 <os_memblock_put+0x1e>
{
   18936:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
   18938:	b169      	cbz	r1, 18956 <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   1893a:	7a83      	ldrb	r3, [r0, #10]
   1893c:	f013 0f01 	tst.w	r3, #1
   18940:	d004      	beq.n	1894c <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   18942:	69c3      	ldr	r3, [r0, #28]
   18944:	b113      	cbz	r3, 1894c <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   18946:	6a02      	ldr	r2, [r0, #32]
   18948:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   1894a:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
   1894c:	f7ff ffe3 	bl	18916 <os_memblock_put_from_cb>
   18950:	e7fb      	b.n	1894a <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
   18952:	2003      	movs	r0, #3
}
   18954:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   18956:	2003      	movs	r0, #3
   18958:	e7f7      	b.n	1894a <os_memblock_put+0x16>
	...

0001895c <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   1895c:	4b02      	ldr	r3, [pc, #8]	; (18968 <os_mempool_module_init+0xc>)
   1895e:	2200      	movs	r2, #0
   18960:	601a      	str	r2, [r3, #0]
   18962:	605b      	str	r3, [r3, #4]
}
   18964:	4770      	bx	lr
   18966:	bf00      	nop
   18968:	2000e698 	.word	0x2000e698

0001896c <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1896c:	4b02      	ldr	r3, [pc, #8]	; (18978 <os_msys_find_biggest_pool+0xc>)
   1896e:	6818      	ldr	r0, [r3, #0]
   18970:	b108      	cbz	r0, 18976 <os_msys_find_biggest_pool+0xa>
   18972:	6858      	ldr	r0, [r3, #4]
   18974:	3808      	subs	r0, #8
}
   18976:	4770      	bx	lr
   18978:	2000010c 	.word	0x2000010c

0001897c <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1897c:	4b09      	ldr	r3, [pc, #36]	; (189a4 <os_msys_find_pool+0x28>)
   1897e:	6819      	ldr	r1, [r3, #0]
   18980:	460b      	mov	r3, r1
   18982:	b123      	cbz	r3, 1898e <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
   18984:	881a      	ldrh	r2, [r3, #0]
   18986:	4282      	cmp	r2, r0
   18988:	d201      	bcs.n	1898e <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1898a:	689b      	ldr	r3, [r3, #8]
   1898c:	e7f9      	b.n	18982 <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
   1898e:	b10b      	cbz	r3, 18994 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   18990:	4618      	mov	r0, r3
   18992:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   18994:	b119      	cbz	r1, 1899e <os_msys_find_pool+0x22>
   18996:	4b03      	ldr	r3, [pc, #12]	; (189a4 <os_msys_find_pool+0x28>)
   18998:	685b      	ldr	r3, [r3, #4]
   1899a:	3b08      	subs	r3, #8
   1899c:	e7f8      	b.n	18990 <os_msys_find_pool+0x14>
   1899e:	460b      	mov	r3, r1
    return (pool);
   189a0:	e7f6      	b.n	18990 <os_msys_find_pool+0x14>
   189a2:	bf00      	nop
   189a4:	2000010c 	.word	0x2000010c

000189a8 <os_msys_register>:
{
   189a8:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   189aa:	4b11      	ldr	r3, [pc, #68]	; (189f0 <os_msys_register+0x48>)
   189ac:	681d      	ldr	r5, [r3, #0]
   189ae:	462b      	mov	r3, r5
    prev = NULL;
   189b0:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   189b2:	b133      	cbz	r3, 189c2 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   189b4:	8801      	ldrh	r1, [r0, #0]
   189b6:	881a      	ldrh	r2, [r3, #0]
   189b8:	4291      	cmp	r1, r2
   189ba:	d302      	bcc.n	189c2 <os_msys_register+0x1a>
        prev = pool;
   189bc:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   189be:	689b      	ldr	r3, [r3, #8]
   189c0:	e7f7      	b.n	189b2 <os_msys_register+0xa>
    if (prev) {
   189c2:	b15c      	cbz	r4, 189dc <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   189c4:	68a3      	ldr	r3, [r4, #8]
   189c6:	6083      	str	r3, [r0, #8]
   189c8:	b11b      	cbz	r3, 189d2 <os_msys_register+0x2a>
   189ca:	60a0      	str	r0, [r4, #8]
}
   189cc:	2000      	movs	r0, #0
   189ce:	bc30      	pop	{r4, r5}
   189d0:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   189d2:	f100 0308 	add.w	r3, r0, #8
   189d6:	4a06      	ldr	r2, [pc, #24]	; (189f0 <os_msys_register+0x48>)
   189d8:	6053      	str	r3, [r2, #4]
   189da:	e7f6      	b.n	189ca <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   189dc:	6085      	str	r5, [r0, #8]
   189de:	b115      	cbz	r5, 189e6 <os_msys_register+0x3e>
   189e0:	4b03      	ldr	r3, [pc, #12]	; (189f0 <os_msys_register+0x48>)
   189e2:	6018      	str	r0, [r3, #0]
   189e4:	e7f2      	b.n	189cc <os_msys_register+0x24>
   189e6:	f100 0308 	add.w	r3, r0, #8
   189ea:	4a01      	ldr	r2, [pc, #4]	; (189f0 <os_msys_register+0x48>)
   189ec:	6053      	str	r3, [r2, #4]
   189ee:	e7f7      	b.n	189e0 <os_msys_register+0x38>
   189f0:	2000010c 	.word	0x2000010c

000189f4 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   189f4:	b530      	push	{r4, r5, lr}
   189f6:	b083      	sub	sp, #12
   189f8:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   189fa:	9d07      	ldr	r5, [sp, #28]
   189fc:	9501      	str	r5, [sp, #4]
   189fe:	9d06      	ldr	r5, [sp, #24]
   18a00:	9500      	str	r5, [sp, #0]
   18a02:	f001 f96d 	bl	19ce0 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   18a06:	b138      	cbz	r0, 18a18 <os_msys_init_once+0x24>
   18a08:	2000      	movs	r0, #0
   18a0a:	9000      	str	r0, [sp, #0]
   18a0c:	4b09      	ldr	r3, [pc, #36]	; (18a34 <os_msys_init_once+0x40>)
   18a0e:	681d      	ldr	r5, [r3, #0]
   18a10:	4603      	mov	r3, r0
   18a12:	4602      	mov	r2, r0
   18a14:	4601      	mov	r1, r0
   18a16:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
   18a18:	4620      	mov	r0, r4
   18a1a:	f7ff ffc5 	bl	189a8 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   18a1e:	b138      	cbz	r0, 18a30 <os_msys_init_once+0x3c>
   18a20:	2000      	movs	r0, #0
   18a22:	9000      	str	r0, [sp, #0]
   18a24:	4b03      	ldr	r3, [pc, #12]	; (18a34 <os_msys_init_once+0x40>)
   18a26:	681c      	ldr	r4, [r3, #0]
   18a28:	4603      	mov	r3, r0
   18a2a:	4602      	mov	r2, r0
   18a2c:	4601      	mov	r1, r0
   18a2e:	47a0      	blx	r4
}
   18a30:	b003      	add	sp, #12
   18a32:	bd30      	pop	{r4, r5, pc}
   18a34:	20000104 	.word	0x20000104

00018a38 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   18a38:	4b02      	ldr	r3, [pc, #8]	; (18a44 <os_msys_reset+0xc>)
   18a3a:	2200      	movs	r2, #0
   18a3c:	601a      	str	r2, [r3, #0]
   18a3e:	605b      	str	r3, [r3, #4]
}
   18a40:	4770      	bx	lr
   18a42:	bf00      	nop
   18a44:	2000010c 	.word	0x2000010c

00018a48 <os_msys_get_pkthdr>:
{
   18a48:	b510      	push	{r4, lr}
   18a4a:	460c      	mov	r4, r1
    if (dsize == 0) {
   18a4c:	b930      	cbnz	r0, 18a5c <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   18a4e:	f7ff ff8d 	bl	1896c <os_msys_find_biggest_pool>
    if (!pool) {
   18a52:	b158      	cbz	r0, 18a6c <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   18a54:	b2e1      	uxtb	r1, r4
   18a56:	f7ff fe0e 	bl	18676 <os_mbuf_get_pkthdr>
}
   18a5a:	bd10      	pop	{r4, pc}
   18a5c:	f101 0308 	add.w	r3, r1, #8
   18a60:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   18a62:	4403      	add	r3, r0
   18a64:	b298      	uxth	r0, r3
   18a66:	f7ff ff89 	bl	1897c <os_msys_find_pool>
   18a6a:	e7f2      	b.n	18a52 <os_msys_get_pkthdr+0xa>
    return (NULL);
   18a6c:	2000      	movs	r0, #0
   18a6e:	e7f4      	b.n	18a5a <os_msys_get_pkthdr+0x12>

00018a70 <os_msys_init>:

void
os_msys_init(void)
{
   18a70:	b500      	push	{lr}
   18a72:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   18a74:	f7ff ffe0 	bl	18a38 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   18a78:	4b06      	ldr	r3, [pc, #24]	; (18a94 <os_msys_init+0x24>)
   18a7a:	9301      	str	r3, [sp, #4]
   18a7c:	f44f 7392 	mov.w	r3, #292	; 0x124
   18a80:	9300      	str	r3, [sp, #0]
   18a82:	2340      	movs	r3, #64	; 0x40
   18a84:	4a04      	ldr	r2, [pc, #16]	; (18a98 <os_msys_init+0x28>)
   18a86:	4905      	ldr	r1, [pc, #20]	; (18a9c <os_msys_init+0x2c>)
   18a88:	4805      	ldr	r0, [pc, #20]	; (18aa0 <os_msys_init+0x30>)
   18a8a:	f7ff ffb3 	bl	189f4 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   18a8e:	b003      	add	sp, #12
   18a90:	f85d fb04 	ldr.w	pc, [sp], #4
   18a94:	0001f41c 	.word	0x0001f41c
   18a98:	2000e188 	.word	0x2000e188
   18a9c:	2000e194 	.word	0x2000e194
   18aa0:	20009888 	.word	0x20009888

00018aa4 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   18aa4:	4603      	mov	r3, r0
   18aa6:	b128      	cbz	r0, 18ab4 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   18aa8:	2000      	movs	r0, #0
   18aaa:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   18aac:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   18aae:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   18ab0:	6018      	str	r0, [r3, #0]
   18ab2:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   18ab4:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   18ab6:	4770      	bx	lr

00018ab8 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   18ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   18aba:	4b2c      	ldr	r3, [pc, #176]	; (18b6c <os_mutex_release+0xb4>)
   18abc:	681b      	ldr	r3, [r3, #0]
   18abe:	2b00      	cmp	r3, #0
   18ac0:	d04d      	beq.n	18b5e <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   18ac2:	2800      	cmp	r0, #0
   18ac4:	d04d      	beq.n	18b62 <os_mutex_release+0xaa>
   18ac6:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   18ac8:	f000 f97a 	bl	18dc0 <os_sched_get_current_task>
   18acc:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   18ace:	88e3      	ldrh	r3, [r4, #6]
   18ad0:	2b00      	cmp	r3, #0
   18ad2:	d048      	beq.n	18b66 <os_mutex_release+0xae>
   18ad4:	68a2      	ldr	r2, [r4, #8]
   18ad6:	4282      	cmp	r2, r0
   18ad8:	d001      	beq.n	18ade <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
   18ada:	2005      	movs	r0, #5
   18adc:	e040      	b.n	18b60 <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   18ade:	2b01      	cmp	r3, #1
   18ae0:	d003      	beq.n	18aea <os_mutex_release+0x32>
        --mu->mu_level;
   18ae2:	3b01      	subs	r3, #1
   18ae4:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   18ae6:	2000      	movs	r0, #0
        goto done;
   18ae8:	e03a      	b.n	18b60 <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
   18aea:	f000 fc3f 	bl	1936c <os_arch_save_sr>
   18aee:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   18af0:	88e3      	ldrh	r3, [r4, #6]
   18af2:	3b01      	subs	r3, #1
   18af4:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   18af6:	7aea      	ldrb	r2, [r5, #11]
   18af8:	7963      	ldrb	r3, [r4, #5]
   18afa:	429a      	cmp	r2, r3
   18afc:	d11e      	bne.n	18b3c <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   18afe:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   18b00:	b146      	cbz	r6, 18b14 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   18b02:	69f3      	ldr	r3, [r6, #28]
   18b04:	b1fb      	cbz	r3, 18b46 <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
   18b06:	4630      	mov	r0, r6
   18b08:	f000 f9ae 	bl	18e68 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   18b0c:	2301      	movs	r3, #1
   18b0e:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   18b10:	7af3      	ldrb	r3, [r6, #11]
   18b12:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   18b14:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   18b16:	b116      	cbz	r6, 18b1e <os_mutex_release+0x66>
        rdy->t_lockcnt++;
   18b18:	7bb3      	ldrb	r3, [r6, #14]
   18b1a:	3301      	adds	r3, #1
   18b1c:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   18b1e:	7bab      	ldrb	r3, [r5, #14]
   18b20:	3b01      	subs	r3, #1
   18b22:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   18b24:	f000 fa1a 	bl	18f5c <os_sched_next_task>
   18b28:	4604      	mov	r4, r0
    if (rdy != current) {
   18b2a:	4285      	cmp	r5, r0
   18b2c:	d010      	beq.n	18b50 <os_mutex_release+0x98>
        resched = 1;
   18b2e:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   18b30:	4638      	mov	r0, r7
   18b32:	f000 fc21 	bl	19378 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   18b36:	b96d      	cbnz	r5, 18b54 <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
   18b38:	2000      	movs	r0, #0
   18b3a:	e011      	b.n	18b60 <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
   18b3c:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   18b3e:	4628      	mov	r0, r5
   18b40:	f000 fa24 	bl	18f8c <os_sched_resort>
   18b44:	e7db      	b.n	18afe <os_mutex_release+0x46>
        assert(rdy->t_obj);
   18b46:	461a      	mov	r2, r3
   18b48:	4619      	mov	r1, r3
   18b4a:	4618      	mov	r0, r3
   18b4c:	f7ff f978 	bl	17e40 <__assert_func>
    resched = 0;
   18b50:	2500      	movs	r5, #0
   18b52:	e7ed      	b.n	18b30 <os_mutex_release+0x78>
        os_sched(rdy);
   18b54:	4620      	mov	r0, r4
   18b56:	f000 fa07 	bl	18f68 <os_sched>
    ret = OS_OK;
   18b5a:	2000      	movs	r0, #0
   18b5c:	e000      	b.n	18b60 <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
   18b5e:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   18b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   18b62:	2003      	movs	r0, #3
   18b64:	e7fc      	b.n	18b60 <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
   18b66:	2005      	movs	r0, #5
   18b68:	e7fa      	b.n	18b60 <os_mutex_release+0xa8>
   18b6a:	bf00      	nop
   18b6c:	2000e688 	.word	0x2000e688

00018b70 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   18b70:	4b36      	ldr	r3, [pc, #216]	; (18c4c <os_mutex_pend+0xdc>)
   18b72:	681b      	ldr	r3, [r3, #0]
   18b74:	2b00      	cmp	r3, #0
   18b76:	d065      	beq.n	18c44 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   18b78:	2800      	cmp	r0, #0
   18b7a:	d065      	beq.n	18c48 <os_mutex_pend+0xd8>
{
   18b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18b80:	460f      	mov	r7, r1
   18b82:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   18b84:	f000 fbf2 	bl	1936c <os_arch_save_sr>
   18b88:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   18b8a:	f000 f919 	bl	18dc0 <os_sched_get_current_task>
   18b8e:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
   18b90:	88e3      	ldrh	r3, [r4, #6]
   18b92:	b19b      	cbz	r3, 18bbc <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   18b94:	68a2      	ldr	r2, [r4, #8]
   18b96:	4282      	cmp	r2, r0
   18b98:	d01e      	beq.n	18bd8 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   18b9a:	b327      	cbz	r7, 18be6 <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   18b9c:	7ad1      	ldrb	r1, [r2, #11]
   18b9e:	7ac3      	ldrb	r3, [r0, #11]
   18ba0:	4299      	cmp	r1, r3
   18ba2:	d825      	bhi.n	18bf0 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   18ba4:	6821      	ldr	r1, [r4, #0]
   18ba6:	b369      	cbz	r1, 18c04 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   18ba8:	460b      	mov	r3, r1
    last = NULL;
   18baa:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   18bac:	b32b      	cbz	r3, 18bfa <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
   18bae:	7ae8      	ldrb	r0, [r5, #11]
   18bb0:	7ada      	ldrb	r2, [r3, #11]
   18bb2:	4290      	cmp	r0, r2
   18bb4:	d321      	bcc.n	18bfa <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
   18bb6:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   18bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   18bba:	e7f7      	b.n	18bac <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   18bbc:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
   18bbe:	7ac3      	ldrb	r3, [r0, #11]
   18bc0:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
   18bc2:	7b83      	ldrb	r3, [r0, #14]
   18bc4:	3301      	adds	r3, #1
   18bc6:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   18bc8:	2301      	movs	r3, #1
   18bca:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   18bcc:	4640      	mov	r0, r8
   18bce:	f000 fbd3 	bl	19378 <os_arch_restore_sr>
        ret = OS_OK;
   18bd2:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   18bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
   18bd8:	3301      	adds	r3, #1
   18bda:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   18bdc:	4640      	mov	r0, r8
   18bde:	f000 fbcb 	bl	19378 <os_arch_restore_sr>
        ret = OS_OK;
   18be2:	2000      	movs	r0, #0
        goto done;
   18be4:	e7f6      	b.n	18bd4 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
   18be6:	4640      	mov	r0, r8
   18be8:	f000 fbc6 	bl	19378 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   18bec:	2006      	movs	r0, #6
        goto done;
   18bee:	e7f1      	b.n	18bd4 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
   18bf0:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
   18bf2:	68a0      	ldr	r0, [r4, #8]
   18bf4:	f000 f9ca 	bl	18f8c <os_sched_resort>
   18bf8:	e7d4      	b.n	18ba4 <os_mutex_pend+0x34>
    if (last) {
   18bfa:	b11e      	cbz	r6, 18c04 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   18bfc:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   18bfe:	64eb      	str	r3, [r5, #76]	; 0x4c
   18c00:	64f5      	str	r5, [r6, #76]	; 0x4c
   18c02:	e001      	b.n	18c08 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   18c04:	64e9      	str	r1, [r5, #76]	; 0x4c
   18c06:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
   18c08:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   18c0a:	7b6b      	ldrb	r3, [r5, #13]
   18c0c:	f043 0304 	orr.w	r3, r3, #4
   18c10:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
   18c12:	4639      	mov	r1, r7
   18c14:	4628      	mov	r0, r5
   18c16:	f000 f8df 	bl	18dd8 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   18c1a:	4640      	mov	r0, r8
   18c1c:	f000 fbac 	bl	19378 <os_arch_restore_sr>
    os_sched(NULL);
   18c20:	2000      	movs	r0, #0
   18c22:	f000 f9a1 	bl	18f68 <os_sched>
    OS_ENTER_CRITICAL(sr);
   18c26:	f000 fba1 	bl	1936c <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   18c2a:	7b6b      	ldrb	r3, [r5, #13]
   18c2c:	f023 0304 	bic.w	r3, r3, #4
   18c30:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
   18c32:	f000 fba1 	bl	19378 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
   18c36:	68a3      	ldr	r3, [r4, #8]
   18c38:	42ab      	cmp	r3, r5
   18c3a:	d001      	beq.n	18c40 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
   18c3c:	2006      	movs	r0, #6
   18c3e:	e7c9      	b.n	18bd4 <os_mutex_pend+0x64>
        ret = OS_OK;
   18c40:	2000      	movs	r0, #0
   18c42:	e7c7      	b.n	18bd4 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
   18c44:	2009      	movs	r0, #9
   18c46:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   18c48:	2003      	movs	r0, #3
}
   18c4a:	4770      	bx	lr
   18c4c:	2000e688 	.word	0x2000e688

00018c50 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   18c50:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   18c52:	4b05      	ldr	r3, [pc, #20]	; (18c68 <os_sanity_check_list_lock+0x18>)
   18c54:	6818      	ldr	r0, [r3, #0]
   18c56:	b900      	cbnz	r0, 18c5a <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   18c58:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   18c5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18c5e:	4803      	ldr	r0, [pc, #12]	; (18c6c <os_sanity_check_list_lock+0x1c>)
   18c60:	f7ff ff86 	bl	18b70 <os_mutex_pend>
err:
   18c64:	e7f8      	b.n	18c58 <os_sanity_check_list_lock+0x8>
   18c66:	bf00      	nop
   18c68:	2000e688 	.word	0x2000e688
   18c6c:	2000e6a0 	.word	0x2000e6a0

00018c70 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   18c70:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   18c72:	4b04      	ldr	r3, [pc, #16]	; (18c84 <os_sanity_check_list_unlock+0x14>)
   18c74:	6818      	ldr	r0, [r3, #0]
   18c76:	b900      	cbnz	r0, 18c7a <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   18c78:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   18c7a:	4803      	ldr	r0, [pc, #12]	; (18c88 <os_sanity_check_list_unlock+0x18>)
   18c7c:	f7ff ff1c 	bl	18ab8 <os_mutex_release>
err:
   18c80:	e7fa      	b.n	18c78 <os_sanity_check_list_unlock+0x8>
   18c82:	bf00      	nop
   18c84:	2000e688 	.word	0x2000e688
   18c88:	2000e6a0 	.word	0x2000e6a0

00018c8c <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
   18c8c:	2300      	movs	r3, #0
   18c8e:	6003      	str	r3, [r0, #0]
   18c90:	6043      	str	r3, [r0, #4]
   18c92:	6083      	str	r3, [r0, #8]
   18c94:	60c3      	str	r3, [r0, #12]
   18c96:	6103      	str	r3, [r0, #16]
}
   18c98:	4618      	mov	r0, r3
   18c9a:	4770      	bx	lr

00018c9c <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   18c9c:	b510      	push	{r4, lr}
   18c9e:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   18ca0:	f7ff ffd6 	bl	18c50 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   18ca4:	4603      	mov	r3, r0
   18ca6:	b108      	cbz	r0, 18cac <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
   18ca8:	4618      	mov	r0, r3
   18caa:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   18cac:	4b03      	ldr	r3, [pc, #12]	; (18cbc <os_sanity_check_register+0x20>)
   18cae:	681a      	ldr	r2, [r3, #0]
   18cb0:	6122      	str	r2, [r4, #16]
   18cb2:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   18cb4:	f7ff ffdc 	bl	18c70 <os_sanity_check_list_unlock>
   18cb8:	4603      	mov	r3, r0
err:
   18cba:	e7f5      	b.n	18ca8 <os_sanity_check_register+0xc>
   18cbc:	2000e1b0 	.word	0x2000e1b0

00018cc0 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   18cc0:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   18cc2:	f7ff ffc5 	bl	18c50 <os_sanity_check_list_lock>
    if (rc != 0) {
   18cc6:	b910      	cbnz	r0, 18cce <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   18cc8:	4b17      	ldr	r3, [pc, #92]	; (18d28 <os_sanity_run+0x68>)
   18cca:	681c      	ldr	r4, [r3, #0]
   18ccc:	e00e      	b.n	18cec <os_sanity_run+0x2c>
        assert(0);
   18cce:	2300      	movs	r3, #0
   18cd0:	461a      	mov	r2, r3
   18cd2:	4619      	mov	r1, r3
   18cd4:	4618      	mov	r0, r3
   18cd6:	f7ff f8b3 	bl	17e40 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   18cda:	f000 facf 	bl	1927c <os_time_get>
   18cde:	6823      	ldr	r3, [r4, #0]
   18ce0:	6862      	ldr	r2, [r4, #4]
   18ce2:	4413      	add	r3, r2
   18ce4:	1ac3      	subs	r3, r0, r3
   18ce6:	2b00      	cmp	r3, #0
   18ce8:	dc0d      	bgt.n	18d06 <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   18cea:	6924      	ldr	r4, [r4, #16]
   18cec:	b18c      	cbz	r4, 18d12 <os_sanity_run+0x52>
        if (sc->sc_func) {
   18cee:	68a3      	ldr	r3, [r4, #8]
   18cf0:	2b00      	cmp	r3, #0
   18cf2:	d0f2      	beq.n	18cda <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
   18cf4:	68e1      	ldr	r1, [r4, #12]
   18cf6:	4620      	mov	r0, r4
   18cf8:	4798      	blx	r3
            if (rc == OS_OK) {
   18cfa:	2800      	cmp	r0, #0
   18cfc:	d1ed      	bne.n	18cda <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
   18cfe:	f000 fabd 	bl	1927c <os_time_get>
   18d02:	6020      	str	r0, [r4, #0]
                continue;
   18d04:	e7f1      	b.n	18cea <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   18d06:	2300      	movs	r3, #0
   18d08:	461a      	mov	r2, r3
   18d0a:	4619      	mov	r1, r3
   18d0c:	4618      	mov	r0, r3
   18d0e:	f7ff f897 	bl	17e40 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   18d12:	f7ff ffad 	bl	18c70 <os_sanity_check_list_unlock>
    if (rc != 0) {
   18d16:	b900      	cbnz	r0, 18d1a <os_sanity_run+0x5a>
        assert(0);
    }
}
   18d18:	bd10      	pop	{r4, pc}
        assert(0);
   18d1a:	2300      	movs	r3, #0
   18d1c:	461a      	mov	r2, r3
   18d1e:	4619      	mov	r1, r3
   18d20:	4618      	mov	r0, r3
   18d22:	f7ff f88d 	bl	17e40 <__assert_func>
   18d26:	bf00      	nop
   18d28:	2000e1b0 	.word	0x2000e1b0

00018d2c <os_sanity_init>:

int
os_sanity_init(void)
{
   18d2c:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   18d2e:	4802      	ldr	r0, [pc, #8]	; (18d38 <os_sanity_init+0xc>)
   18d30:	f7ff feb8 	bl	18aa4 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   18d34:	bd08      	pop	{r3, pc}
   18d36:	bf00      	nop
   18d38:	2000e6a0 	.word	0x2000e6a0

00018d3c <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   18d3c:	7b03      	ldrb	r3, [r0, #12]
   18d3e:	2b01      	cmp	r3, #1
   18d40:	d001      	beq.n	18d46 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   18d42:	2002      	movs	r0, #2
}
   18d44:	4770      	bx	lr
{
   18d46:	b510      	push	{r4, lr}
   18d48:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   18d4a:	f000 fb0f 	bl	1936c <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   18d4e:	4b0f      	ldr	r3, [pc, #60]	; (18d8c <os_sched_insert+0x50>)
   18d50:	681b      	ldr	r3, [r3, #0]
   18d52:	b12b      	cbz	r3, 18d60 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   18d54:	7ae1      	ldrb	r1, [r4, #11]
   18d56:	7ada      	ldrb	r2, [r3, #11]
   18d58:	4291      	cmp	r1, r2
   18d5a:	d301      	bcc.n	18d60 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   18d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   18d5e:	e7f8      	b.n	18d52 <os_sched_insert+0x16>
    if (entry) {
   18d60:	b153      	cbz	r3, 18d78 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   18d62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18d64:	64a2      	str	r2, [r4, #72]	; 0x48
   18d66:	6463      	str	r3, [r4, #68]	; 0x44
   18d68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18d6a:	6014      	str	r4, [r2, #0]
   18d6c:	3444      	adds	r4, #68	; 0x44
   18d6e:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   18d70:	f000 fb02 	bl	19378 <os_arch_restore_sr>
    return (0);
   18d74:	2000      	movs	r0, #0
}
   18d76:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   18d78:	2300      	movs	r3, #0
   18d7a:	6463      	str	r3, [r4, #68]	; 0x44
   18d7c:	4b03      	ldr	r3, [pc, #12]	; (18d8c <os_sched_insert+0x50>)
   18d7e:	685a      	ldr	r2, [r3, #4]
   18d80:	64a2      	str	r2, [r4, #72]	; 0x48
   18d82:	6014      	str	r4, [r2, #0]
   18d84:	3444      	adds	r4, #68	; 0x44
   18d86:	605c      	str	r4, [r3, #4]
   18d88:	e7f2      	b.n	18d70 <os_sched_insert+0x34>
   18d8a:	bf00      	nop
   18d8c:	20000114 	.word	0x20000114

00018d90 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   18d90:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   18d92:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   18d94:	3301      	adds	r3, #1
   18d96:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
   18d98:	4b06      	ldr	r3, [pc, #24]	; (18db4 <os_sched_ctx_sw_hook+0x24>)
   18d9a:	681c      	ldr	r4, [r3, #0]
   18d9c:	4b06      	ldr	r3, [pc, #24]	; (18db8 <os_sched_ctx_sw_hook+0x28>)
   18d9e:	6818      	ldr	r0, [r3, #0]
   18da0:	4906      	ldr	r1, [pc, #24]	; (18dbc <os_sched_ctx_sw_hook+0x2c>)
   18da2:	680b      	ldr	r3, [r1, #0]
   18da4:	1ac2      	subs	r2, r0, r3
   18da6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   18da8:	4413      	add	r3, r2
   18daa:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
   18dac:	6008      	str	r0, [r1, #0]
}
   18dae:	f85d 4b04 	ldr.w	r4, [sp], #4
   18db2:	4770      	bx	lr
   18db4:	2000e6b0 	.word	0x2000e6b0
   18db8:	2000e6c0 	.word	0x2000e6c0
   18dbc:	2000e6ac 	.word	0x2000e6ac

00018dc0 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   18dc0:	4b01      	ldr	r3, [pc, #4]	; (18dc8 <os_sched_get_current_task+0x8>)
   18dc2:	6818      	ldr	r0, [r3, #0]
   18dc4:	4770      	bx	lr
   18dc6:	bf00      	nop
   18dc8:	2000e6b0 	.word	0x2000e6b0

00018dcc <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   18dcc:	4b01      	ldr	r3, [pc, #4]	; (18dd4 <os_sched_set_current_task+0x8>)
   18dce:	6018      	str	r0, [r3, #0]
}
   18dd0:	4770      	bx	lr
   18dd2:	bf00      	nop
   18dd4:	2000e6b0 	.word	0x2000e6b0

00018dd8 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   18dd8:	b538      	push	{r3, r4, r5, lr}
   18dda:	4604      	mov	r4, r0
   18ddc:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   18dde:	6c43      	ldr	r3, [r0, #68]	; 0x44
   18de0:	b1d3      	cbz	r3, 18e18 <os_sched_sleep+0x40>
   18de2:	6c82      	ldr	r2, [r0, #72]	; 0x48
   18de4:	649a      	str	r2, [r3, #72]	; 0x48
   18de6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   18de8:	6c62      	ldr	r2, [r4, #68]	; 0x44
   18dea:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   18dec:	2302      	movs	r3, #2
   18dee:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   18df0:	f000 fa44 	bl	1927c <os_time_get>
   18df4:	4428      	add	r0, r5
   18df6:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   18df8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   18dfc:	d010      	beq.n	18e20 <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   18dfe:	4b18      	ldr	r3, [pc, #96]	; (18e60 <os_sched_sleep+0x88>)
   18e00:	681b      	ldr	r3, [r3, #0]
   18e02:	b1d3      	cbz	r3, 18e3a <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   18e04:	7b5a      	ldrb	r2, [r3, #13]
   18e06:	f012 0f01 	tst.w	r2, #1
   18e0a:	d116      	bne.n	18e3a <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   18e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   18e0e:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   18e10:	2a00      	cmp	r2, #0
   18e12:	dc12      	bgt.n	18e3a <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   18e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   18e16:	e7f4      	b.n	18e02 <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   18e18:	6c82      	ldr	r2, [r0, #72]	; 0x48
   18e1a:	4b12      	ldr	r3, [pc, #72]	; (18e64 <os_sched_sleep+0x8c>)
   18e1c:	605a      	str	r2, [r3, #4]
   18e1e:	e7e2      	b.n	18de6 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   18e20:	7b63      	ldrb	r3, [r4, #13]
   18e22:	f043 0301 	orr.w	r3, r3, #1
   18e26:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   18e28:	2300      	movs	r3, #0
   18e2a:	6463      	str	r3, [r4, #68]	; 0x44
   18e2c:	4b0c      	ldr	r3, [pc, #48]	; (18e60 <os_sched_sleep+0x88>)
   18e2e:	685a      	ldr	r2, [r3, #4]
   18e30:	64a2      	str	r2, [r4, #72]	; 0x48
   18e32:	6014      	str	r4, [r2, #0]
   18e34:	3444      	adds	r4, #68	; 0x44
   18e36:	605c      	str	r4, [r3, #4]
   18e38:	e007      	b.n	18e4a <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
   18e3a:	b143      	cbz	r3, 18e4e <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   18e3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18e3e:	64a2      	str	r2, [r4, #72]	; 0x48
   18e40:	6463      	str	r3, [r4, #68]	; 0x44
   18e42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18e44:	6014      	str	r4, [r2, #0]
   18e46:	3444      	adds	r4, #68	; 0x44
   18e48:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   18e4a:	2000      	movs	r0, #0
   18e4c:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   18e4e:	2300      	movs	r3, #0
   18e50:	6463      	str	r3, [r4, #68]	; 0x44
   18e52:	4b03      	ldr	r3, [pc, #12]	; (18e60 <os_sched_sleep+0x88>)
   18e54:	685a      	ldr	r2, [r3, #4]
   18e56:	64a2      	str	r2, [r4, #72]	; 0x48
   18e58:	6014      	str	r4, [r2, #0]
   18e5a:	3444      	adds	r4, #68	; 0x44
   18e5c:	605c      	str	r4, [r3, #4]
   18e5e:	e7f4      	b.n	18e4a <os_sched_sleep+0x72>
   18e60:	2000011c 	.word	0x2000011c
   18e64:	20000114 	.word	0x20000114

00018e68 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   18e68:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   18e6a:	7b03      	ldrb	r3, [r0, #12]
   18e6c:	2b02      	cmp	r3, #2
   18e6e:	d108      	bne.n	18e82 <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   18e70:	69c3      	ldr	r3, [r0, #28]
   18e72:	b1db      	cbz	r3, 18eac <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   18e74:	681a      	ldr	r2, [r3, #0]
   18e76:	b152      	cbz	r2, 18e8e <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   18e78:	4282      	cmp	r2, r0
   18e7a:	d10f      	bne.n	18e9c <os_sched_wakeup+0x34>
   18e7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   18e7e:	601a      	str	r2, [r3, #0]
   18e80:	e011      	b.n	18ea6 <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
   18e82:	2300      	movs	r3, #0
   18e84:	461a      	mov	r2, r3
   18e86:	4619      	mov	r1, r3
   18e88:	4618      	mov	r0, r3
   18e8a:	f7fe ffd9 	bl	17e40 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   18e8e:	2300      	movs	r3, #0
   18e90:	461a      	mov	r2, r3
   18e92:	4619      	mov	r1, r3
   18e94:	4618      	mov	r0, r3
   18e96:	f7fe ffd3 	bl	17e40 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   18e9a:	461a      	mov	r2, r3
   18e9c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   18e9e:	4283      	cmp	r3, r0
   18ea0:	d1fb      	bne.n	18e9a <os_sched_wakeup+0x32>
   18ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   18ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   18ea6:	2300      	movs	r3, #0
   18ea8:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   18eaa:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   18eac:	2301      	movs	r3, #1
   18eae:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   18eb0:	2300      	movs	r3, #0
   18eb2:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   18eb4:	7b43      	ldrb	r3, [r0, #13]
   18eb6:	f023 0301 	bic.w	r3, r3, #1
   18eba:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   18ebc:	6c43      	ldr	r3, [r0, #68]	; 0x44
   18ebe:	b143      	cbz	r3, 18ed2 <os_sched_wakeup+0x6a>
   18ec0:	6c82      	ldr	r2, [r0, #72]	; 0x48
   18ec2:	649a      	str	r2, [r3, #72]	; 0x48
   18ec4:	6c83      	ldr	r3, [r0, #72]	; 0x48
   18ec6:	6c42      	ldr	r2, [r0, #68]	; 0x44
   18ec8:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   18eca:	f7ff ff37 	bl	18d3c <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   18ece:	2000      	movs	r0, #0
   18ed0:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   18ed2:	6c82      	ldr	r2, [r0, #72]	; 0x48
   18ed4:	4b01      	ldr	r3, [pc, #4]	; (18edc <os_sched_wakeup+0x74>)
   18ed6:	605a      	str	r2, [r3, #4]
   18ed8:	e7f4      	b.n	18ec4 <os_sched_wakeup+0x5c>
   18eda:	bf00      	nop
   18edc:	2000011c 	.word	0x2000011c

00018ee0 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   18ee0:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   18ee2:	f000 f9cb 	bl	1927c <os_time_get>
   18ee6:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   18ee8:	f000 fa40 	bl	1936c <os_arch_save_sr>
   18eec:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   18eee:	4b0a      	ldr	r3, [pc, #40]	; (18f18 <os_sched_os_timer_exp+0x38>)
   18ef0:	6818      	ldr	r0, [r3, #0]
    while (t) {
   18ef2:	b160      	cbz	r0, 18f0e <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   18ef4:	7b43      	ldrb	r3, [r0, #13]
   18ef6:	f013 0f01 	tst.w	r3, #1
   18efa:	d108      	bne.n	18f0e <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
   18efc:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   18efe:	6b43      	ldr	r3, [r0, #52]	; 0x34
   18f00:	1aeb      	subs	r3, r5, r3
   18f02:	2b00      	cmp	r3, #0
   18f04:	db03      	blt.n	18f0e <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
   18f06:	f7ff ffaf 	bl	18e68 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   18f0a:	4620      	mov	r0, r4
   18f0c:	e7f1      	b.n	18ef2 <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
   18f0e:	4630      	mov	r0, r6
   18f10:	f000 fa32 	bl	19378 <os_arch_restore_sr>
}
   18f14:	bd70      	pop	{r4, r5, r6, pc}
   18f16:	bf00      	nop
   18f18:	2000011c 	.word	0x2000011c

00018f1c <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   18f1c:	b510      	push	{r4, lr}
   18f1e:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   18f20:	f000 fa2d 	bl	1937e <os_arch_in_critical>
   18f24:	b150      	cbz	r0, 18f3c <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   18f26:	4b0c      	ldr	r3, [pc, #48]	; (18f58 <os_sched_wakeup_ticks+0x3c>)
   18f28:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   18f2a:	b17b      	cbz	r3, 18f4c <os_sched_wakeup_ticks+0x30>
   18f2c:	7b5a      	ldrb	r2, [r3, #13]
   18f2e:	f012 0f01 	tst.w	r2, #1
   18f32:	d10e      	bne.n	18f52 <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   18f34:	6b58      	ldr	r0, [r3, #52]	; 0x34
   18f36:	1b00      	subs	r0, r0, r4
   18f38:	d406      	bmi.n	18f48 <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   18f3a:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   18f3c:	2300      	movs	r3, #0
   18f3e:	461a      	mov	r2, r3
   18f40:	4619      	mov	r1, r3
   18f42:	4618      	mov	r0, r3
   18f44:	f7fe ff7c 	bl	17e40 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   18f48:	2000      	movs	r0, #0
   18f4a:	e7f6      	b.n	18f3a <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   18f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18f50:	e7f3      	b.n	18f3a <os_sched_wakeup_ticks+0x1e>
   18f52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   18f56:	e7f0      	b.n	18f3a <os_sched_wakeup_ticks+0x1e>
   18f58:	2000011c 	.word	0x2000011c

00018f5c <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   18f5c:	4b01      	ldr	r3, [pc, #4]	; (18f64 <os_sched_next_task+0x8>)
   18f5e:	6818      	ldr	r0, [r3, #0]
   18f60:	4770      	bx	lr
   18f62:	bf00      	nop
   18f64:	20000114 	.word	0x20000114

00018f68 <os_sched>:
{
   18f68:	b538      	push	{r3, r4, r5, lr}
   18f6a:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   18f6c:	f000 f9fe 	bl	1936c <os_arch_save_sr>
   18f70:	4605      	mov	r5, r0
    if (!next_t) {
   18f72:	b134      	cbz	r4, 18f82 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   18f74:	4620      	mov	r0, r4
   18f76:	f000 f9ef 	bl	19358 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   18f7a:	4628      	mov	r0, r5
   18f7c:	f000 f9fc 	bl	19378 <os_arch_restore_sr>
}
   18f80:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   18f82:	f7ff ffeb 	bl	18f5c <os_sched_next_task>
   18f86:	4604      	mov	r4, r0
   18f88:	e7f4      	b.n	18f74 <os_sched+0xc>
	...

00018f8c <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   18f8c:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   18f8e:	7b03      	ldrb	r3, [r0, #12]
   18f90:	2b01      	cmp	r3, #1
   18f92:	d000      	beq.n	18f96 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   18f94:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   18f96:	6c43      	ldr	r3, [r0, #68]	; 0x44
   18f98:	b13b      	cbz	r3, 18faa <os_sched_resort+0x1e>
   18f9a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   18f9c:	649a      	str	r2, [r3, #72]	; 0x48
   18f9e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   18fa0:	6c42      	ldr	r2, [r0, #68]	; 0x44
   18fa2:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   18fa4:	f7ff feca 	bl	18d3c <os_sched_insert>
}
   18fa8:	e7f4      	b.n	18f94 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   18faa:	6c82      	ldr	r2, [r0, #72]	; 0x48
   18fac:	4b01      	ldr	r3, [pc, #4]	; (18fb4 <os_sched_resort+0x28>)
   18fae:	605a      	str	r2, [r3, #4]
   18fb0:	e7f5      	b.n	18f9e <os_sched_resort+0x12>
   18fb2:	bf00      	nop
   18fb4:	20000114 	.word	0x20000114

00018fb8 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   18fb8:	4603      	mov	r3, r0
   18fba:	b118      	cbz	r0, 18fc4 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   18fbc:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   18fbe:	2000      	movs	r0, #0
   18fc0:	6018      	str	r0, [r3, #0]
   18fc2:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   18fc4:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   18fc6:	4770      	bx	lr

00018fc8 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   18fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   18fca:	4b17      	ldr	r3, [pc, #92]	; (19028 <os_sem_release+0x60>)
   18fcc:	681b      	ldr	r3, [r3, #0]
   18fce:	b33b      	cbz	r3, 19020 <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   18fd0:	b340      	cbz	r0, 19024 <os_sem_release+0x5c>
   18fd2:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   18fd4:	f7ff fef4 	bl	18dc0 <os_sched_get_current_task>
   18fd8:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   18fda:	f000 f9c7 	bl	1936c <os_arch_save_sr>
   18fde:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   18fe0:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   18fe2:	b165      	cbz	r5, 18ffe <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   18fe4:	7b6b      	ldrb	r3, [r5, #13]
   18fe6:	f023 0302 	bic.w	r3, r3, #2
   18fea:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   18fec:	4628      	mov	r0, r5
   18fee:	f7ff ff3b 	bl	18e68 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   18ff2:	7afa      	ldrb	r2, [r7, #11]
   18ff4:	7aeb      	ldrb	r3, [r5, #11]
   18ff6:	429a      	cmp	r2, r3
   18ff8:	d80b      	bhi.n	19012 <os_sem_release+0x4a>
    resched = 0;
   18ffa:	2400      	movs	r4, #0
   18ffc:	e003      	b.n	19006 <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   18ffe:	88e3      	ldrh	r3, [r4, #6]
   19000:	3301      	adds	r3, #1
   19002:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   19004:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   19006:	4630      	mov	r0, r6
   19008:	f000 f9b6 	bl	19378 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1900c:	b91c      	cbnz	r4, 19016 <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   1900e:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   19010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   19012:	2401      	movs	r4, #1
   19014:	e7f7      	b.n	19006 <os_sem_release+0x3e>
        os_sched(rdy);
   19016:	4628      	mov	r0, r5
   19018:	f7ff ffa6 	bl	18f68 <os_sched>
    ret = OS_OK;
   1901c:	2000      	movs	r0, #0
   1901e:	e7f7      	b.n	19010 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   19020:	2009      	movs	r0, #9
   19022:	e7f5      	b.n	19010 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   19024:	2003      	movs	r0, #3
   19026:	e7f3      	b.n	19010 <os_sem_release+0x48>
   19028:	2000e688 	.word	0x2000e688

0001902c <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   1902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   1902e:	4b2c      	ldr	r3, [pc, #176]	; (190e0 <os_sem_pend+0xb4>)
   19030:	681b      	ldr	r3, [r3, #0]
   19032:	2b00      	cmp	r3, #0
   19034:	d04f      	beq.n	190d6 <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   19036:	2800      	cmp	r0, #0
   19038:	d04f      	beq.n	190da <os_sem_pend+0xae>
   1903a:	460d      	mov	r5, r1
   1903c:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   1903e:	f7ff febf 	bl	18dc0 <os_sched_get_current_task>
   19042:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   19044:	f000 f992 	bl	1936c <os_arch_save_sr>
   19048:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   1904a:	88e3      	ldrh	r3, [r4, #6]
   1904c:	b14b      	cbz	r3, 19062 <os_sem_pend+0x36>
        sem->sem_tokens--;
   1904e:	3b01      	subs	r3, #1
   19050:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   19052:	2400      	movs	r4, #0
    sched = 0;
   19054:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   19056:	4638      	mov	r0, r7
   19058:	f000 f98e 	bl	19378 <os_arch_restore_sr>

    if (sched) {
   1905c:	bb45      	cbnz	r5, 190b0 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   1905e:	4620      	mov	r0, r4
   19060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   19062:	b315      	cbz	r5, 190aa <os_sem_pend+0x7e>
        current->t_obj = sem;
   19064:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   19066:	7b73      	ldrb	r3, [r6, #13]
   19068:	f043 0302 	orr.w	r3, r3, #2
   1906c:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   1906e:	f8d4 c000 	ldr.w	ip, [r4]
   19072:	f1bc 0f00 	cmp.w	ip, #0
   19076:	d00e      	beq.n	19096 <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   19078:	4663      	mov	r3, ip
        last = NULL;
   1907a:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1907c:	b133      	cbz	r3, 1908c <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   1907e:	7af1      	ldrb	r1, [r6, #11]
   19080:	7ada      	ldrb	r2, [r3, #11]
   19082:	4291      	cmp	r1, r2
   19084:	d302      	bcc.n	1908c <os_sem_pend+0x60>
                last = entry;
   19086:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   19088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1908a:	e7f7      	b.n	1907c <os_sem_pend+0x50>
        if (last) {
   1908c:	b118      	cbz	r0, 19096 <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   1908e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   19090:	64f3      	str	r3, [r6, #76]	; 0x4c
   19092:	64c6      	str	r6, [r0, #76]	; 0x4c
   19094:	e002      	b.n	1909c <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   19096:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   1909a:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   1909c:	4629      	mov	r1, r5
   1909e:	4630      	mov	r0, r6
   190a0:	f7ff fe9a 	bl	18dd8 <os_sched_sleep>
        ret = OS_OK;
   190a4:	2400      	movs	r4, #0
        sched = 1;
   190a6:	2501      	movs	r5, #1
   190a8:	e7d5      	b.n	19056 <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   190aa:	2406      	movs	r4, #6
    sched = 0;
   190ac:	2500      	movs	r5, #0
   190ae:	e7d2      	b.n	19056 <os_sem_pend+0x2a>
        os_sched(NULL);
   190b0:	2000      	movs	r0, #0
   190b2:	f7ff ff59 	bl	18f68 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   190b6:	7b73      	ldrb	r3, [r6, #13]
   190b8:	f013 0f02 	tst.w	r3, #2
   190bc:	d101      	bne.n	190c2 <os_sem_pend+0x96>
            ret = OS_OK;
   190be:	2400      	movs	r4, #0
   190c0:	e7cd      	b.n	1905e <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   190c2:	f000 f953 	bl	1936c <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   190c6:	7b73      	ldrb	r3, [r6, #13]
   190c8:	f023 0302 	bic.w	r3, r3, #2
   190cc:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   190ce:	f000 f953 	bl	19378 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   190d2:	2406      	movs	r4, #6
   190d4:	e7c3      	b.n	1905e <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   190d6:	2409      	movs	r4, #9
   190d8:	e7c1      	b.n	1905e <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   190da:	2403      	movs	r4, #3
   190dc:	e7bf      	b.n	1905e <os_sem_pend+0x32>
   190de:	bf00      	nop
   190e0:	2000e688 	.word	0x2000e688

000190e4 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   190e4:	2300      	movs	r3, #0
   190e6:	e003      	b.n	190f0 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
   190e8:	4a03      	ldr	r2, [pc, #12]	; (190f8 <_clear_stack+0x14>)
   190ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   190ee:	3301      	adds	r3, #1
   190f0:	428b      	cmp	r3, r1
   190f2:	dbf9      	blt.n	190e8 <_clear_stack+0x4>
    }
}
   190f4:	4770      	bx	lr
   190f6:	bf00      	nop
   190f8:	deadbeef 	.word	0xdeadbeef

000190fc <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
   190fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19100:	4604      	mov	r4, r0
   19102:	460f      	mov	r7, r1
   19104:	4690      	mov	r8, r2
   19106:	461d      	mov	r5, r3
   19108:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
   1910c:	2250      	movs	r2, #80	; 0x50
   1910e:	2100      	movs	r1, #0
   19110:	f000 fa99 	bl	19646 <memset>

    t->t_func = func;
   19114:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
   19118:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   1911a:	f000 f927 	bl	1936c <os_arch_save_sr>
    rc = g_task_id;
   1911e:	4b2b      	ldr	r3, [pc, #172]	; (191cc <os_task_init+0xd0>)
   19120:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
   19122:	1c6a      	adds	r2, r5, #1
   19124:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   19126:	f000 f927 	bl	19378 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
   1912a:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
   1912c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   19130:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
   19132:	2301      	movs	r3, #1
   19134:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   19136:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
   19138:	2300      	movs	r3, #0
   1913a:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
   1913c:	f104 0720 	add.w	r7, r4, #32
   19140:	4638      	mov	r0, r7
   19142:	f7ff fda3 	bl	18c8c <os_sanity_check_init>
    if (rc != OS_OK) {
   19146:	4605      	mov	r5, r0
   19148:	2800      	cmp	r0, #0
   1914a:	d132      	bne.n	191b2 <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
   1914c:	9b07      	ldr	r3, [sp, #28]
   1914e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   19152:	d005      	beq.n	19160 <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
   19154:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
   19156:	4638      	mov	r0, r7
   19158:	f7ff fda0 	bl	18c9c <os_sanity_check_register>
        if (rc != OS_OK) {
   1915c:	4605      	mov	r5, r0
   1915e:	bb40      	cbnz	r0, 191b2 <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
   19160:	4631      	mov	r1, r6
   19162:	9808      	ldr	r0, [sp, #32]
   19164:	f7ff ffbe 	bl	190e4 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
   19168:	9b08      	ldr	r3, [sp, #32]
   1916a:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   1916e:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
   19170:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
   19172:	4632      	mov	r2, r6
   19174:	4620      	mov	r0, r4
   19176:	f000 f907 	bl	19388 <os_arch_task_stack_init>
   1917a:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1917c:	4b14      	ldr	r3, [pc, #80]	; (191d0 <os_task_init+0xd4>)
   1917e:	681b      	ldr	r3, [r3, #0]
   19180:	b15b      	cbz	r3, 1919a <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
   19182:	7ae1      	ldrb	r1, [r4, #11]
   19184:	7ada      	ldrb	r2, [r3, #11]
   19186:	4291      	cmp	r1, r2
   19188:	d001      	beq.n	1918e <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1918a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1918c:	e7f8      	b.n	19180 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
   1918e:	2300      	movs	r3, #0
   19190:	461a      	mov	r2, r3
   19192:	4619      	mov	r1, r3
   19194:	4618      	mov	r0, r3
   19196:	f7fe fe53 	bl	17e40 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1919a:	6423      	str	r3, [r4, #64]	; 0x40
   1919c:	4b0c      	ldr	r3, [pc, #48]	; (191d0 <os_task_init+0xd4>)
   1919e:	685a      	ldr	r2, [r3, #4]
   191a0:	6014      	str	r4, [r2, #0]
   191a2:	f104 0240 	add.w	r2, r4, #64	; 0x40
   191a6:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
   191a8:	4620      	mov	r0, r4
   191aa:	f7ff fdc7 	bl	18d3c <os_sched_insert>
   191ae:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   191b0:	b110      	cbz	r0, 191b8 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
   191b2:	4628      	mov	r0, r5
   191b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
   191b8:	f7fe fefc 	bl	17fb4 <os_started>
   191bc:	b908      	cbnz	r0, 191c2 <os_task_init+0xc6>
    return (0);
   191be:	4605      	mov	r5, r0
   191c0:	e7f7      	b.n	191b2 <os_task_init+0xb6>
        os_sched(NULL);
   191c2:	2000      	movs	r0, #0
   191c4:	f7ff fed0 	bl	18f68 <os_sched>
   191c8:	e7f3      	b.n	191b2 <os_task_init+0xb6>
   191ca:	bf00      	nop
   191cc:	2000e6b4 	.word	0x2000e6b4
   191d0:	2000e6b8 	.word	0x2000e6b8

000191d4 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   191d4:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   191d8:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   191da:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   191de:	e9d1 4500 	ldrd	r4, r5, [r1]
   191e2:	eb14 0b03 	adds.w	fp, r4, r3
   191e6:	f145 0c00 	adc.w	ip, r5, #0
   191ea:	e9c2 bc00 	strd	fp, ip, [r2]
   191ee:	688b      	ldr	r3, [r1, #8]
   191f0:	f641 6184 	movw	r1, #7812	; 0x1e84
   191f4:	fb01 3000 	mla	r0, r1, r0, r3
   191f8:	6090      	str	r0, [r2, #8]
   191fa:	4b08      	ldr	r3, [pc, #32]	; (1921c <os_deltatime+0x48>)
   191fc:	4298      	cmp	r0, r3
   191fe:	dd0a      	ble.n	19216 <os_deltatime+0x42>
   19200:	f11b 0401 	adds.w	r4, fp, #1
   19204:	f14c 0500 	adc.w	r5, ip, #0
   19208:	e9c2 4500 	strd	r4, r5, [r2]
   1920c:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   19210:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   19214:	6090      	str	r0, [r2, #8]
}
   19216:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1921a:	4770      	bx	lr
   1921c:	000f423f 	.word	0x000f423f

00019220 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   19220:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   19222:	1e04      	subs	r4, r0, #0
   19224:	db0d      	blt.n	19242 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   19226:	f000 f8a1 	bl	1936c <os_arch_save_sr>
   1922a:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   1922c:	4a11      	ldr	r2, [pc, #68]	; (19274 <os_time_tick+0x54>)
   1922e:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
   19230:	18e0      	adds	r0, r4, r3
   19232:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   19234:	ea90 0f03 	teq	r0, r3
   19238:	d409      	bmi.n	1924e <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   1923a:	4628      	mov	r0, r5
   1923c:	f000 f89c 	bl	19378 <os_arch_restore_sr>
}
   19240:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   19242:	2300      	movs	r3, #0
   19244:	461a      	mov	r2, r3
   19246:	4619      	mov	r1, r3
   19248:	4618      	mov	r0, r3
   1924a:	f7fe fdf9 	bl	17e40 <__assert_func>
        delta = g_os_time - basetod.ostime;
   1924e:	4e0a      	ldr	r6, [pc, #40]	; (19278 <os_time_tick+0x58>)
   19250:	4631      	mov	r1, r6
   19252:	f851 4b08 	ldr.w	r4, [r1], #8
   19256:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   19258:	460a      	mov	r2, r1
   1925a:	4620      	mov	r0, r4
   1925c:	f7ff ffba 	bl	191d4 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   19260:	f106 0118 	add.w	r1, r6, #24
   19264:	460a      	mov	r2, r1
   19266:	4620      	mov	r0, r4
   19268:	f7ff ffb4 	bl	191d4 <os_deltatime>
        basetod.ostime = g_os_time;
   1926c:	4b01      	ldr	r3, [pc, #4]	; (19274 <os_time_tick+0x54>)
   1926e:	681b      	ldr	r3, [r3, #0]
   19270:	6033      	str	r3, [r6, #0]
   19272:	e7e2      	b.n	1923a <os_time_tick+0x1a>
   19274:	2000e6c0 	.word	0x2000e6c0
   19278:	2000e1b8 	.word	0x2000e1b8

0001927c <os_time_get>:
}
   1927c:	4b01      	ldr	r3, [pc, #4]	; (19284 <os_time_get+0x8>)
   1927e:	6818      	ldr	r0, [r3, #0]
   19280:	4770      	bx	lr
   19282:	bf00      	nop
   19284:	2000e6c0 	.word	0x2000e6c0

00019288 <os_time_advance>:

void
os_time_advance(int ticks)
{
   19288:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   1928a:	1e04      	subs	r4, r0, #0
   1928c:	db09      	blt.n	192a2 <os_time_advance+0x1a>

    if (ticks > 0) {
   1928e:	2c00      	cmp	r4, #0
   19290:	dd06      	ble.n	192a0 <os_time_advance+0x18>
        if (!os_started()) {
   19292:	f7fe fe8f 	bl	17fb4 <os_started>
   19296:	b950      	cbnz	r0, 192ae <os_time_advance+0x26>
            g_os_time += ticks;
   19298:	4a0a      	ldr	r2, [pc, #40]	; (192c4 <os_time_advance+0x3c>)
   1929a:	6813      	ldr	r3, [r2, #0]
   1929c:	441c      	add	r4, r3
   1929e:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   192a0:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   192a2:	2300      	movs	r3, #0
   192a4:	461a      	mov	r2, r3
   192a6:	4619      	mov	r1, r3
   192a8:	4618      	mov	r0, r3
   192aa:	f7fe fdc9 	bl	17e40 <__assert_func>
            os_time_tick(ticks);
   192ae:	4620      	mov	r0, r4
   192b0:	f7ff ffb6 	bl	19220 <os_time_tick>
            os_callout_tick();
   192b4:	f7fe ffa6 	bl	18204 <os_callout_tick>
            os_sched_os_timer_exp();
   192b8:	f7ff fe12 	bl	18ee0 <os_sched_os_timer_exp>
            os_sched(NULL);
   192bc:	2000      	movs	r0, #0
   192be:	f7ff fe53 	bl	18f68 <os_sched>
}
   192c2:	e7ed      	b.n	192a0 <os_time_advance+0x18>
   192c4:	2000e6c0 	.word	0x2000e6c0

000192c8 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   192c8:	b900      	cbnz	r0, 192cc <os_time_delay+0x4>
   192ca:	4770      	bx	lr
{
   192cc:	b538      	push	{r3, r4, r5, lr}
   192ce:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   192d0:	f000 f84c 	bl	1936c <os_arch_save_sr>
   192d4:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   192d6:	f7ff fd73 	bl	18dc0 <os_sched_get_current_task>
   192da:	4621      	mov	r1, r4
   192dc:	f7ff fd7c 	bl	18dd8 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   192e0:	4628      	mov	r0, r5
   192e2:	f000 f849 	bl	19378 <os_arch_restore_sr>
        os_sched(NULL);
   192e6:	2000      	movs	r0, #0
   192e8:	f7ff fe3e 	bl	18f68 <os_sched>
    }
}
   192ec:	bd38      	pop	{r3, r4, r5, pc}
	...

000192f0 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   192f0:	b570      	push	{r4, r5, r6, lr}
   192f2:	4605      	mov	r5, r0
   192f4:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   192f6:	f000 f839 	bl	1936c <os_arch_save_sr>
   192fa:	4606      	mov	r6, r0
    if (tv != NULL) {
   192fc:	b145      	cbz	r5, 19310 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   192fe:	f7ff ffbd 	bl	1927c <os_time_get>
   19302:	4908      	ldr	r1, [pc, #32]	; (19324 <os_gettimeofday+0x34>)
   19304:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   19308:	462a      	mov	r2, r5
   1930a:	1ac0      	subs	r0, r0, r3
   1930c:	f7ff ff62 	bl	191d4 <os_deltatime>
    }

    if (tz != NULL) {
   19310:	b114      	cbz	r4, 19318 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   19312:	4b04      	ldr	r3, [pc, #16]	; (19324 <os_gettimeofday+0x34>)
   19314:	6a98      	ldr	r0, [r3, #40]	; 0x28
   19316:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   19318:	4630      	mov	r0, r6
   1931a:	f000 f82d 	bl	19378 <os_arch_restore_sr>

    return (0);
}
   1931e:	2000      	movs	r0, #0
   19320:	bd70      	pop	{r4, r5, r6, pc}
   19322:	bf00      	nop
   19324:	2000e1b8 	.word	0x2000e1b8

00019328 <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   19328:	b538      	push	{r3, r4, r5, lr}
   1932a:	4604      	mov	r4, r0
   1932c:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   1932e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19332:	2300      	movs	r3, #0
   19334:	01c0      	lsls	r0, r0, #7
   19336:	0e61      	lsrs	r1, r4, #25
   19338:	f002 f88a 	bl	1b450 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   1933c:	2901      	cmp	r1, #1
   1933e:	bf08      	it	eq
   19340:	2800      	cmpeq	r0, #0
   19342:	d202      	bcs.n	1934a <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   19344:	6028      	str	r0, [r5, #0]
    return 0;
   19346:	2000      	movs	r0, #0
}
   19348:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   1934a:	2002      	movs	r0, #2
   1934c:	e7fc      	b.n	19348 <os_time_ms_to_ticks+0x20>

0001934e <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
   1934e:	b508      	push	{r3, lr}
    os_time_advance(1);
   19350:	2001      	movs	r0, #1
   19352:	f7ff ff99 	bl	19288 <os_time_advance>
}
   19356:	bd08      	pop	{r3, pc}

00019358 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
   19358:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   1935a:	f7ff fd19 	bl	18d90 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   1935e:	4b02      	ldr	r3, [pc, #8]	; (19368 <os_arch_ctx_sw+0x10>)
   19360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19364:	605a      	str	r2, [r3, #4]
}
   19366:	bd08      	pop	{r3, pc}
   19368:	e000ed00 	.word	0xe000ed00

0001936c <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1936c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   19370:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
   19372:	f000 0001 	and.w	r0, r0, #1
   19376:	4770      	bx	lr

00019378 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
   19378:	b900      	cbnz	r0, 1937c <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   1937a:	b662      	cpsie	i
        __enable_irq();
    }
}
   1937c:	4770      	bx	lr

0001937e <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1937e:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
   19382:	f000 0001 	and.w	r0, r0, #1
   19386:	4770      	bx	lr

00019388 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   19388:	b570      	push	{r4, r5, r6, lr}
   1938a:	4606      	mov	r6, r0
   1938c:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   1938e:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
   19392:	2309      	movs	r3, #9
   19394:	e003      	b.n	1939e <os_arch_task_stack_init+0x16>
        s[i] = 0;
   19396:	2200      	movs	r2, #0
   19398:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
   1939c:	3301      	adds	r3, #1
   1939e:	2b0d      	cmp	r3, #13
   193a0:	ddf9      	ble.n	19396 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   193a2:	4620      	mov	r0, r4
   193a4:	f000 f8b6 	bl	19514 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   193a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   193ac:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
   193b0:	6973      	ldr	r3, [r6, #20]
   193b2:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   193b6:	69b3      	ldr	r3, [r6, #24]
   193b8:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
   193bc:	f06f 0302 	mvn.w	r3, #2
   193c0:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
   193c4:	4620      	mov	r0, r4
   193c6:	bd70      	pop	{r4, r5, r6, pc}

000193c8 <os_arch_init>:

void
os_arch_init(void)
{
   193c8:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   193ca:	4a04      	ldr	r2, [pc, #16]	; (193dc <os_arch_init+0x14>)
   193cc:	6953      	ldr	r3, [r2, #20]
   193ce:	f043 0310 	orr.w	r3, r3, #16
   193d2:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   193d4:	f7fe fdf4 	bl	17fc0 <os_init_idle_task>
}
   193d8:	bd08      	pop	{r3, pc}
   193da:	bf00      	nop
   193dc:	e000ed00 	.word	0xe000ed00

000193e0 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   193e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   193e2:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   193e6:	b90c      	cbnz	r4, 193ec <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   193e8:	2400      	movs	r4, #0
   193ea:	e009      	b.n	19400 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   193ec:	2007      	movs	r0, #7
   193ee:	e02e      	b.n	1944e <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   193f0:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   193f4:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   193f8:	26ff      	movs	r6, #255	; 0xff
   193fa:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   193fe:	3401      	adds	r4, #1
   19400:	2cef      	cmp	r4, #239	; 0xef
   19402:	d9f5      	bls.n	193f0 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   19404:	f06f 040d 	mvn.w	r4, #13
   19408:	e007      	b.n	1941a <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   1940a:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1940c:	4e12      	ldr	r6, [pc, #72]	; (19458 <os_arch_os_init+0x78>)
   1940e:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   19410:	3510      	adds	r5, #16
   19412:	4f12      	ldr	r7, [pc, #72]	; (1945c <os_arch_os_init+0x7c>)
   19414:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   19418:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1941a:	2c25      	cmp	r4, #37	; 0x25
   1941c:	ddf5      	ble.n	1940a <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1941e:	4c0e      	ldr	r4, [pc, #56]	; (19458 <os_arch_os_init+0x78>)
   19420:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   19422:	4e0f      	ldr	r6, [pc, #60]	; (19460 <os_arch_os_init+0x80>)
   19424:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   19426:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   19428:	4e0e      	ldr	r6, [pc, #56]	; (19464 <os_arch_os_init+0x84>)
   1942a:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1942c:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1942e:	4e0e      	ldr	r6, [pc, #56]	; (19468 <os_arch_os_init+0x88>)
   19430:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19432:	25e0      	movs	r5, #224	; 0xe0
   19434:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   19438:	2520      	movs	r5, #32
   1943a:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1943c:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   19440:	f014 0f01 	tst.w	r4, #1
   19444:	d004      	beq.n	19450 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   19446:	f8df c024 	ldr.w	ip, [pc, #36]	; 1946c <os_arch_os_init+0x8c>
   1944a:	df00      	svc	0
        err = OS_OK;
   1944c:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   1944e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   19450:	f7ff ffba 	bl	193c8 <os_arch_init>
        err = OS_OK;
   19454:	2000      	movs	r0, #0
   19456:	e7fa      	b.n	1944e <os_arch_os_init+0x6e>
   19458:	e000ed00 	.word	0xe000ed00
   1945c:	000195b3 	.word	0x000195b3
   19460:	0001951b 	.word	0x0001951b
   19464:	00019561 	.word	0x00019561
   19468:	000195a7 	.word	0x000195a7
   1946c:	000193c9 	.word	0x000193c9

00019470 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   19470:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   19472:	f7ff fd73 	bl	18f5c <os_sched_next_task>
   19476:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   19478:	f7ff fca8 	bl	18dcc <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   1947c:	6823      	ldr	r3, [r4, #0]
   1947e:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   19480:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   19484:	2106      	movs	r1, #6
   19486:	2080      	movs	r0, #128	; 0x80
   19488:	f000 fde8 	bl	1a05c <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   1948c:	4b03      	ldr	r3, [pc, #12]	; (1949c <os_arch_start+0x2c>)
   1948e:	2201      	movs	r2, #1
   19490:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   19492:	4620      	mov	r0, r4
   19494:	f7ff ff60 	bl	19358 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   19498:	69a0      	ldr	r0, [r4, #24]
   1949a:	bd10      	pop	{r4, pc}
   1949c:	2000e688 	.word	0x2000e688

000194a0 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   194a0:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   194a2:	4814      	ldr	r0, [pc, #80]	; (194f4 <os_arch_os_start+0x54>)
   194a4:	6800      	ldr	r0, [r0, #0]
   194a6:	3804      	subs	r0, #4
   194a8:	f000 f82a 	bl	19500 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   194ac:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   194b0:	b9d4      	cbnz	r4, 194e8 <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   194b2:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   194b6:	f004 0403 	and.w	r4, r4, #3
   194ba:	2c03      	cmp	r4, #3
   194bc:	d808      	bhi.n	194d0 <os_arch_os_start+0x30>
   194be:	e8df f004 	tbb	[pc, r4]
   194c2:	1515      	.short	0x1515
   194c4:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   194c6:	4c0c      	ldr	r4, [pc, #48]	; (194f8 <os_arch_os_start+0x58>)
   194c8:	6824      	ldr	r4, [r4, #0]
   194ca:	f014 0f01 	tst.w	r4, #1
   194ce:	d10f      	bne.n	194f0 <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
   194d0:	f8df c028 	ldr.w	ip, [pc, #40]	; 194fc <os_arch_os_start+0x5c>
   194d4:	df00      	svc	0
   194d6:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
   194d8:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   194da:	4c07      	ldr	r4, [pc, #28]	; (194f8 <os_arch_os_start+0x58>)
   194dc:	6824      	ldr	r4, [r4, #0]
   194de:	f014 0f01 	tst.w	r4, #1
   194e2:	d1f5      	bne.n	194d0 <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
   194e4:	2008      	movs	r0, #8
   194e6:	e7f7      	b.n	194d8 <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
   194e8:	2007      	movs	r0, #7
   194ea:	e7f5      	b.n	194d8 <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
   194ec:	2008      	movs	r0, #8
   194ee:	e7f3      	b.n	194d8 <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
   194f0:	2008      	movs	r0, #8
   194f2:	e7f1      	b.n	194d8 <os_arch_os_start+0x38>
   194f4:	2000e5e8 	.word	0x2000e5e8
   194f8:	2000e1e8 	.word	0x2000e1e8
   194fc:	00019471 	.word	0x00019471

00019500 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   19500:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   19504:	4832      	ldr	r0, [pc, #200]	; (195d0 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   19506:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   19508:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1950a:	f380 8814 	msr	CONTROL, r0
        ISB
   1950e:	f3bf 8f6f 	isb	sy
        BX      LR
   19512:	4770      	bx	lr

00019514 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   19514:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   19518:	4770      	bx	lr

0001951a <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   1951a:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   1951e:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   19520:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   19524:	b951      	cbnz	r1, 1953c <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   19526:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1952a:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   1952c:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1952e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   19532:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   19536:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   1953a:	4770      	bx	lr

0001953c <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1953c:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   1953e:	4a25      	ldr	r2, [pc, #148]	; (195d4 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   19540:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   19542:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   19544:	d809      	bhi.n	1955a <SVC_Done>

        LDR     R4,=SVC_Table-4
   19546:	4c24      	ldr	r4, [pc, #144]	; (195d8 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   19548:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1954c:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   19550:	47a0      	blx	r4

        MRS     R12,PSP
   19552:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   19556:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0001955a <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1955a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   1955e:	4770      	bx	lr

00019560 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   19560:	4b1e      	ldr	r3, [pc, #120]	; (195dc <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   19562:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   19564:	4b1e      	ldr	r3, [pc, #120]	; (195e0 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   19566:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   19568:	4291      	cmp	r1, r2
        IT      EQ
   1956a:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   1956c:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   1956e:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
   19572:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
   19576:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
   19578:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
   1957c:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   19580:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   19584:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   19586:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
   1958a:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
   1958e:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
   19592:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
   19594:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
   19598:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
   1959c:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
   195a0:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   195a4:	4770      	bx	lr

000195a6 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   195a6:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   195a8:	f7ff fed1 	bl	1934e <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   195ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   195b0:	4770      	bx	lr

000195b2 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   195b2:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   195b6:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   195b8:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   195bc:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   195c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   195c4:	4668      	mov	r0, sp
        BL      os_default_irq
   195c6:	f7fe fc61 	bl	17e8c <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   195ca:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   195ce:	4770      	bx	lr
        LDR     R0,=os_flags
   195d0:	2000e1e8 	.word	0x2000e1e8
        LDR     R2,=SVC_Count
   195d4:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   195d8:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   195dc:	20000114 	.word	0x20000114
        LDR     R3,=g_current_task      /* Get current task */
   195e0:	2000e6b0 	.word	0x2000e6b0

000195e4 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   195e4:	b470      	push	{r4, r5, r6}
   195e6:	f04f 0500 	mov.w	r5, #0
   195ea:	f022 0603 	bic.w	r6, r2, #3
   195ee:	e005      	b.n	195fc <test1>

000195f0 <loop1>:
   195f0:	5943      	ldr	r3, [r0, r5]
   195f2:	594c      	ldr	r4, [r1, r5]
   195f4:	42a3      	cmp	r3, r4
   195f6:	d104      	bne.n	19602 <res1>
   195f8:	f105 0504 	add.w	r5, r5, #4

000195fc <test1>:
   195fc:	42b5      	cmp	r5, r6
   195fe:	d1f7      	bne.n	195f0 <loop1>
   19600:	e00d      	b.n	1961e <test2>

00019602 <res1>:
   19602:	ba1b      	rev	r3, r3
   19604:	ba24      	rev	r4, r4
   19606:	1b1b      	subs	r3, r3, r4
   19608:	bf8c      	ite	hi
   1960a:	2301      	movhi	r3, #1
   1960c:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   19610:	e009      	b.n	19626 <done>

00019612 <loop2>:
   19612:	5d43      	ldrb	r3, [r0, r5]
   19614:	5d4c      	ldrb	r4, [r1, r5]
   19616:	1b1b      	subs	r3, r3, r4
   19618:	d105      	bne.n	19626 <done>
   1961a:	f105 0501 	add.w	r5, r5, #1

0001961e <test2>:
   1961e:	4295      	cmp	r5, r2
   19620:	d1f7      	bne.n	19612 <loop2>
   19622:	f04f 0300 	mov.w	r3, #0

00019626 <done>:
   19626:	4618      	mov	r0, r3
   19628:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   1962a:	4770      	bx	lr

0001962c <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   1962c:	e001      	b.n	19632 <test1>

0001962e <loop1>:
   1962e:	588b      	ldr	r3, [r1, r2]
   19630:	5083      	str	r3, [r0, r2]

00019632 <test1>:
   19632:	3a04      	subs	r2, #4
   19634:	d5fb      	bpl.n	1962e <loop1>
   19636:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   1963a:	e001      	b.n	19640 <test2>

0001963c <loop2>:
   1963c:	5c8b      	ldrb	r3, [r1, r2]
   1963e:	5483      	strb	r3, [r0, r2]

00019640 <test2>:
   19640:	3a01      	subs	r2, #1
   19642:	d5fb      	bpl.n	1963c <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   19644:	4770      	bx	lr

00019646 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   19646:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   19648:	4605      	mov	r5, r0
   1964a:	b2c9      	uxtb	r1, r1
   1964c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   19650:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   19654:	18ab      	adds	r3, r5, r2
   19656:	2403      	movs	r4, #3
   19658:	4023      	ands	r3, r4
   1965a:	1ad3      	subs	r3, r2, r3
   1965c:	d40b      	bmi.n	19676 <memset+0x30>
   1965e:	e001      	b.n	19664 <memset+0x1e>
   19660:	3a01      	subs	r2, #1
   19662:	54a9      	strb	r1, [r5, r2]
   19664:	429a      	cmp	r2, r3
   19666:	d1fb      	bne.n	19660 <memset+0x1a>
   19668:	e000      	b.n	1966c <memset+0x26>
   1966a:	50a9      	str	r1, [r5, r2]
   1966c:	3a04      	subs	r2, #4
   1966e:	d5fc      	bpl.n	1966a <memset+0x24>
   19670:	3204      	adds	r2, #4
   19672:	e000      	b.n	19676 <memset+0x30>
   19674:	54a9      	strb	r1, [r5, r2]
   19676:	3a01      	subs	r2, #1
   19678:	d5fc      	bpl.n	19674 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   1967a:	bc30      	pop	{r4, r5}
   1967c:	4770      	bx	lr

0001967e <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   1967e:	b430      	push	{r4, r5}
   19680:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   19682:	1c55      	adds	r5, r2, #1
   19684:	7813      	ldrb	r3, [r2, #0]
   19686:	1c4c      	adds	r4, r1, #1
   19688:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
   1968a:	1a18      	subs	r0, r3, r0
   1968c:	d103      	bne.n	19696 <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
   1968e:	462a      	mov	r2, r5
   19690:	4621      	mov	r1, r4
		if (d || !ch)
   19692:	2b00      	cmp	r3, #0
   19694:	d1f5      	bne.n	19682 <strcmp+0x4>
			break;
	}

	return d;
}
   19696:	bc30      	pop	{r4, r5}
   19698:	4770      	bx	lr

0001969a <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   1969a:	4603      	mov	r3, r0
	while (*ss)
   1969c:	e000      	b.n	196a0 <strlen+0x6>
		ss++;
   1969e:	3301      	adds	r3, #1
	while (*ss)
   196a0:	781a      	ldrb	r2, [r3, #0]
   196a2:	2a00      	cmp	r2, #0
   196a4:	d1fb      	bne.n	1969e <strlen+0x4>
	return ss - s;
}
   196a6:	1a18      	subs	r0, r3, r0
   196a8:	4770      	bx	lr

000196aa <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   196aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   196ae:	b082      	sub	sp, #8
   196b0:	e9cd 0100 	strd	r0, r1, [sp]
   196b4:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   196b6:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   196ba:	2401      	movs	r4, #1
   196bc:	2500      	movs	r5, #0
    while (num / d >= p->base)
   196be:	e004      	b.n	196ca <ui2a+0x20>
        d *= p->base;
   196c0:	fb06 f305 	mul.w	r3, r6, r5
   196c4:	fba4 4506 	umull	r4, r5, r4, r6
   196c8:	441d      	add	r5, r3
    while (num / d >= p->base)
   196ca:	4622      	mov	r2, r4
   196cc:	462b      	mov	r3, r5
   196ce:	e9dd 0100 	ldrd	r0, r1, [sp]
   196d2:	f001 febd 	bl	1b450 <__aeabi_uldivmod>
   196d6:	f899 6003 	ldrb.w	r6, [r9, #3]
   196da:	2700      	movs	r7, #0
   196dc:	42b9      	cmp	r1, r7
   196de:	bf08      	it	eq
   196e0:	42b0      	cmpeq	r0, r6
   196e2:	d2ed      	bcs.n	196c0 <ui2a+0x16>
    int n = 0;
   196e4:	f04f 0a00 	mov.w	sl, #0
   196e8:	e007      	b.n	196fa <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   196ea:	2330      	movs	r3, #48	; 0x30
   196ec:	441e      	add	r6, r3
   196ee:	f888 6000 	strb.w	r6, [r8]
            ++n;
   196f2:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   196f6:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   196fa:	ea54 0305 	orrs.w	r3, r4, r5
   196fe:	d02e      	beq.n	1975e <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   19700:	4622      	mov	r2, r4
   19702:	462b      	mov	r3, r5
   19704:	e9dd 0100 	ldrd	r0, r1, [sp]
   19708:	f001 fea2 	bl	1b450 <__aeabi_uldivmod>
   1970c:	4606      	mov	r6, r0
   1970e:	460f      	mov	r7, r1
        num %= d;
   19710:	4622      	mov	r2, r4
   19712:	462b      	mov	r3, r5
   19714:	e9dd 0100 	ldrd	r0, r1, [sp]
   19718:	f001 fe9a 	bl	1b450 <__aeabi_uldivmod>
   1971c:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   19720:	f899 2003 	ldrb.w	r2, [r9, #3]
   19724:	2300      	movs	r3, #0
   19726:	4620      	mov	r0, r4
   19728:	4629      	mov	r1, r5
   1972a:	f001 fe91 	bl	1b450 <__aeabi_uldivmod>
   1972e:	4604      	mov	r4, r0
   19730:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   19732:	f1ba 0f00 	cmp.w	sl, #0
   19736:	d105      	bne.n	19744 <ui2a+0x9a>
   19738:	ea56 0307 	orrs.w	r3, r6, r7
   1973c:	d102      	bne.n	19744 <ui2a+0x9a>
   1973e:	ea54 0305 	orrs.w	r3, r4, r5
   19742:	d1da      	bne.n	196fa <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   19744:	2f00      	cmp	r7, #0
   19746:	bf08      	it	eq
   19748:	2e0a      	cmpeq	r6, #10
   1974a:	d3ce      	bcc.n	196ea <ui2a+0x40>
   1974c:	f899 3002 	ldrb.w	r3, [r9, #2]
   19750:	f013 0f04 	tst.w	r3, #4
   19754:	d001      	beq.n	1975a <ui2a+0xb0>
   19756:	2337      	movs	r3, #55	; 0x37
   19758:	e7c8      	b.n	196ec <ui2a+0x42>
   1975a:	2357      	movs	r3, #87	; 0x57
   1975c:	e7c6      	b.n	196ec <ui2a+0x42>
        }
    }
    *bf = 0;
   1975e:	2300      	movs	r3, #0
   19760:	f888 3000 	strb.w	r3, [r8]
}
   19764:	b002      	add	sp, #8
   19766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001976a <i2a>:

static void i2a(long long int num, struct param *p)
{
   1976a:	b508      	push	{r3, lr}
    if (num < 0) {
   1976c:	2800      	cmp	r0, #0
   1976e:	f171 0300 	sbcs.w	r3, r1, #0
   19772:	db02      	blt.n	1977a <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   19774:	f7ff ff99 	bl	196aa <ui2a>
}
   19778:	bd08      	pop	{r3, pc}
        num = -num;
   1977a:	4240      	negs	r0, r0
   1977c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   19780:	7893      	ldrb	r3, [r2, #2]
   19782:	f043 0301 	orr.w	r3, r3, #1
   19786:	7093      	strb	r3, [r2, #2]
   19788:	e7f4      	b.n	19774 <i2a+0xa>

0001978a <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1978a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1978e:	b2db      	uxtb	r3, r3
   19790:	2b09      	cmp	r3, #9
   19792:	d90b      	bls.n	197ac <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   19794:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   19798:	b2db      	uxtb	r3, r3
   1979a:	2b05      	cmp	r3, #5
   1979c:	d908      	bls.n	197b0 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   1979e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   197a2:	b2db      	uxtb	r3, r3
   197a4:	2b05      	cmp	r3, #5
   197a6:	d805      	bhi.n	197b4 <a2d+0x2a>
        return ch - 'A' + 10;
   197a8:	3837      	subs	r0, #55	; 0x37
   197aa:	4770      	bx	lr
        return ch - '0';
   197ac:	3830      	subs	r0, #48	; 0x30
   197ae:	4770      	bx	lr
        return ch - 'a' + 10;
   197b0:	3857      	subs	r0, #87	; 0x57
   197b2:	4770      	bx	lr
    else
        return -1;
   197b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   197b8:	4770      	bx	lr

000197ba <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   197ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   197be:	4605      	mov	r5, r0
   197c0:	4688      	mov	r8, r1
   197c2:	4617      	mov	r7, r2
   197c4:	4699      	mov	r9, r3
    const char *p = *src;
   197c6:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   197c8:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   197ca:	4628      	mov	r0, r5
   197cc:	f7ff ffdd 	bl	1978a <a2d>
   197d0:	2800      	cmp	r0, #0
   197d2:	db06      	blt.n	197e2 <a2i+0x28>
        if (digit > base)
   197d4:	42b8      	cmp	r0, r7
   197d6:	dc04      	bgt.n	197e2 <a2i+0x28>
            break;
        num = num * base + digit;
   197d8:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   197dc:	7825      	ldrb	r5, [r4, #0]
   197de:	3401      	adds	r4, #1
   197e0:	e7f3      	b.n	197ca <a2i+0x10>
    }
    *src = p;
   197e2:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   197e6:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   197ea:	4628      	mov	r0, r5
   197ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000197f0 <putf>:

static int putf(FILE *putp, char c)
{
   197f0:	b500      	push	{lr}
   197f2:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   197f4:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   197f8:	6803      	ldr	r3, [r0, #0]
   197fa:	681b      	ldr	r3, [r3, #0]
   197fc:	b14b      	cbz	r3, 19812 <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   197fe:	2201      	movs	r2, #1
   19800:	f10d 0107 	add.w	r1, sp, #7
   19804:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   19806:	2801      	cmp	r0, #1
   19808:	d005      	beq.n	19816 <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   1980a:	2000      	movs	r0, #0
    else
        return 1;
}
   1980c:	b003      	add	sp, #12
   1980e:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   19812:	2000      	movs	r0, #0
   19814:	e7fa      	b.n	1980c <putf+0x1c>
        return 1;
   19816:	2001      	movs	r0, #1
   19818:	e7f8      	b.n	1980c <putf+0x1c>
	...

0001981c <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   1981c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19820:	4606      	mov	r6, r0
   19822:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   19824:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   19826:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   19828:	e001      	b.n	1982e <putchw+0x12>
        n--;
   1982a:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   1982c:	4613      	mov	r3, r2
   1982e:	1c5a      	adds	r2, r3, #1
   19830:	781b      	ldrb	r3, [r3, #0]
   19832:	b10b      	cbz	r3, 19838 <putchw+0x1c>
   19834:	2c00      	cmp	r4, #0
   19836:	dcf8      	bgt.n	1982a <putchw+0xe>
    if (p->sign)
   19838:	78bb      	ldrb	r3, [r7, #2]
   1983a:	f013 0f01 	tst.w	r3, #1
   1983e:	d000      	beq.n	19842 <putchw+0x26>
        n--;
   19840:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   19842:	887b      	ldrh	r3, [r7, #2]
   19844:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   19848:	b29b      	uxth	r3, r3
   1984a:	f241 0202 	movw	r2, #4098	; 0x1002
   1984e:	4293      	cmp	r3, r2
   19850:	d01c      	beq.n	1988c <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   19852:	f640 0202 	movw	r2, #2050	; 0x802
   19856:	4293      	cmp	r3, r2
   19858:	d01a      	beq.n	19890 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   1985a:	683b      	ldr	r3, [r7, #0]
   1985c:	4d35      	ldr	r5, [pc, #212]	; (19934 <putchw+0x118>)
   1985e:	401d      	ands	r5, r3
   19860:	b1f5      	cbz	r5, 198a0 <putchw+0x84>
    unsigned written = 0;
   19862:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   19864:	78bb      	ldrb	r3, [r7, #2]
   19866:	f013 0f01 	tst.w	r3, #1
   1986a:	d11f      	bne.n	198ac <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   1986c:	887b      	ldrh	r3, [r7, #2]
   1986e:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   19872:	b29b      	uxth	r3, r3
   19874:	f241 0202 	movw	r2, #4098	; 0x1002
   19878:	4293      	cmp	r3, r2
   1987a:	d01d      	beq.n	198b8 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   1987c:	f640 0202 	movw	r2, #2050	; 0x802
   19880:	4293      	cmp	r3, r2
   19882:	d02a      	beq.n	198da <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   19884:	787b      	ldrb	r3, [r7, #1]
   19886:	bba3      	cbnz	r3, 198f2 <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   19888:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   1988a:	e03d      	b.n	19908 <putchw+0xec>
        n -= 2;
   1988c:	3c02      	subs	r4, #2
   1988e:	e7e4      	b.n	1985a <putchw+0x3e>
        n--;
   19890:	3c01      	subs	r4, #1
   19892:	e7e2      	b.n	1985a <putchw+0x3e>
            written += putf(putp, ' ');
   19894:	2120      	movs	r1, #32
   19896:	4630      	mov	r0, r6
   19898:	f7ff ffaa 	bl	197f0 <putf>
   1989c:	4405      	add	r5, r0
        while (n-- > 0)
   1989e:	4644      	mov	r4, r8
   198a0:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   198a4:	2c00      	cmp	r4, #0
   198a6:	dcf5      	bgt.n	19894 <putchw+0x78>
   198a8:	4644      	mov	r4, r8
   198aa:	e7db      	b.n	19864 <putchw+0x48>
        written += putf(putp, '-');
   198ac:	212d      	movs	r1, #45	; 0x2d
   198ae:	4630      	mov	r0, r6
   198b0:	f7ff ff9e 	bl	197f0 <putf>
   198b4:	4405      	add	r5, r0
   198b6:	e7d9      	b.n	1986c <putchw+0x50>
        written += putf(putp, '0');
   198b8:	2130      	movs	r1, #48	; 0x30
   198ba:	4630      	mov	r0, r6
   198bc:	f7ff ff98 	bl	197f0 <putf>
   198c0:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   198c2:	78bb      	ldrb	r3, [r7, #2]
   198c4:	f013 0f04 	tst.w	r3, #4
   198c8:	d005      	beq.n	198d6 <putchw+0xba>
   198ca:	2158      	movs	r1, #88	; 0x58
   198cc:	4630      	mov	r0, r6
   198ce:	f7ff ff8f 	bl	197f0 <putf>
   198d2:	4405      	add	r5, r0
   198d4:	e7d6      	b.n	19884 <putchw+0x68>
   198d6:	2178      	movs	r1, #120	; 0x78
   198d8:	e7f8      	b.n	198cc <putchw+0xb0>
        written += putf(putp, '0');
   198da:	2130      	movs	r1, #48	; 0x30
   198dc:	4630      	mov	r0, r6
   198de:	f7ff ff87 	bl	197f0 <putf>
   198e2:	4405      	add	r5, r0
   198e4:	e7ce      	b.n	19884 <putchw+0x68>
            written += putf(putp, '0');
   198e6:	2130      	movs	r1, #48	; 0x30
   198e8:	4630      	mov	r0, r6
   198ea:	f7ff ff81 	bl	197f0 <putf>
   198ee:	4405      	add	r5, r0
        while (n-- > 0)
   198f0:	4644      	mov	r4, r8
   198f2:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   198f6:	2c00      	cmp	r4, #0
   198f8:	dcf5      	bgt.n	198e6 <putchw+0xca>
   198fa:	4644      	mov	r4, r8
   198fc:	e7c4      	b.n	19888 <putchw+0x6c>
        written += putf(putp, ch);
   198fe:	4630      	mov	r0, r6
   19900:	f7ff ff76 	bl	197f0 <putf>
   19904:	4405      	add	r5, r0
    while ((ch = *bf++))
   19906:	4643      	mov	r3, r8
   19908:	f103 0801 	add.w	r8, r3, #1
   1990c:	7819      	ldrb	r1, [r3, #0]
   1990e:	2900      	cmp	r1, #0
   19910:	d1f5      	bne.n	198fe <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   19912:	78bb      	ldrb	r3, [r7, #2]
   19914:	f013 0f08 	tst.w	r3, #8
   19918:	d106      	bne.n	19928 <putchw+0x10c>
   1991a:	e008      	b.n	1992e <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   1991c:	2120      	movs	r1, #32
   1991e:	4630      	mov	r0, r6
   19920:	f7ff ff66 	bl	197f0 <putf>
   19924:	4405      	add	r5, r0
        while (n-- > 0)
   19926:	463c      	mov	r4, r7
   19928:	1e67      	subs	r7, r4, #1
   1992a:	2c00      	cmp	r4, #0
   1992c:	dcf6      	bgt.n	1991c <putchw+0x100>
    }
    
    return written;
}
   1992e:	4628      	mov	r0, r5
   19930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19934:	0008ff00 	.word	0x0008ff00

00019938 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   19938:	b160      	cbz	r0, 19954 <intarg+0x1c>
   1993a:	2801      	cmp	r0, #1
   1993c:	d017      	beq.n	1996e <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   1993e:	bb19      	cbnz	r1, 19988 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   19940:	6813      	ldr	r3, [r2, #0]
   19942:	3307      	adds	r3, #7
   19944:	f023 0307 	bic.w	r3, r3, #7
   19948:	f103 0108 	add.w	r1, r3, #8
   1994c:	6011      	str	r1, [r2, #0]
   1994e:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   19952:	4770      	bx	lr
        if (sign) {
   19954:	b129      	cbz	r1, 19962 <intarg+0x2a>
            val = va_arg(*va, int);
   19956:	6813      	ldr	r3, [r2, #0]
   19958:	1d19      	adds	r1, r3, #4
   1995a:	6011      	str	r1, [r2, #0]
   1995c:	6818      	ldr	r0, [r3, #0]
   1995e:	17c1      	asrs	r1, r0, #31
   19960:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   19962:	6813      	ldr	r3, [r2, #0]
   19964:	1d19      	adds	r1, r3, #4
   19966:	6011      	str	r1, [r2, #0]
   19968:	6818      	ldr	r0, [r3, #0]
   1996a:	2100      	movs	r1, #0
   1996c:	4770      	bx	lr
        if (sign) {
   1996e:	b129      	cbz	r1, 1997c <intarg+0x44>
            val = va_arg(*va, long);
   19970:	6813      	ldr	r3, [r2, #0]
   19972:	1d19      	adds	r1, r3, #4
   19974:	6011      	str	r1, [r2, #0]
   19976:	6818      	ldr	r0, [r3, #0]
   19978:	17c1      	asrs	r1, r0, #31
   1997a:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   1997c:	6813      	ldr	r3, [r2, #0]
   1997e:	1d19      	adds	r1, r3, #4
   19980:	6011      	str	r1, [r2, #0]
   19982:	6818      	ldr	r0, [r3, #0]
   19984:	2100      	movs	r1, #0
   19986:	4770      	bx	lr
            val = va_arg(*va, long long);
   19988:	6813      	ldr	r3, [r2, #0]
   1998a:	3307      	adds	r3, #7
   1998c:	f023 0307 	bic.w	r3, r3, #7
   19990:	f103 0108 	add.w	r1, r3, #8
   19994:	6011      	str	r1, [r2, #0]
   19996:	e9d3 0100 	ldrd	r0, r1, [r3]
   1999a:	4770      	bx	lr

0001999c <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   1999c:	b570      	push	{r4, r5, r6, lr}
   1999e:	b08a      	sub	sp, #40	; 0x28
   199a0:	4605      	mov	r5, r0
   199a2:	9101      	str	r1, [sp, #4]
   199a4:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   199a6:	ab02      	add	r3, sp, #8
   199a8:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   199aa:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   199ac:	9b01      	ldr	r3, [sp, #4]
   199ae:	1c5a      	adds	r2, r3, #1
   199b0:	9201      	str	r2, [sp, #4]
   199b2:	7819      	ldrb	r1, [r3, #0]
   199b4:	2900      	cmp	r1, #0
   199b6:	f000 811c 	beq.w	19bf2 <tfp_format+0x256>
        if (ch != '%') {
   199ba:	2925      	cmp	r1, #37	; 0x25
   199bc:	d004      	beq.n	199c8 <tfp_format+0x2c>
            written += putf(putp, ch);
   199be:	4628      	mov	r0, r5
   199c0:	f7ff ff16 	bl	197f0 <putf>
   199c4:	4404      	add	r4, r0
   199c6:	e7f1      	b.n	199ac <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   199c8:	2200      	movs	r2, #0
   199ca:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   199ce:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   199d2:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   199d6:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   199da:	f362 0382 	bfi	r3, r2, #2, #1
   199de:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   199e2:	9b01      	ldr	r3, [sp, #4]
   199e4:	1c5a      	adds	r2, r3, #1
   199e6:	9201      	str	r2, [sp, #4]
   199e8:	7818      	ldrb	r0, [r3, #0]
   199ea:	b128      	cbz	r0, 199f8 <tfp_format+0x5c>
                switch (ch) {
   199ec:	282d      	cmp	r0, #45	; 0x2d
   199ee:	d04e      	beq.n	19a8e <tfp_format+0xf2>
   199f0:	2830      	cmp	r0, #48	; 0x30
   199f2:	d03c      	beq.n	19a6e <tfp_format+0xd2>
   199f4:	2823      	cmp	r0, #35	; 0x23
   199f6:	d043      	beq.n	19a80 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   199f8:	282a      	cmp	r0, #42	; 0x2a
   199fa:	d052      	beq.n	19aa2 <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   199fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   19a00:	b2db      	uxtb	r3, r3
   19a02:	2b09      	cmp	r3, #9
   19a04:	d961      	bls.n	19aca <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   19a06:	286c      	cmp	r0, #108	; 0x6c
   19a08:	d065      	beq.n	19ad6 <tfp_format+0x13a>
            lng = 0;
   19a0a:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   19a0c:	287a      	cmp	r0, #122	; 0x7a
   19a0e:	d06f      	beq.n	19af0 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   19a10:	2869      	cmp	r0, #105	; 0x69
   19a12:	f000 808e 	beq.w	19b32 <tfp_format+0x196>
   19a16:	d970      	bls.n	19afa <tfp_format+0x15e>
   19a18:	2873      	cmp	r0, #115	; 0x73
   19a1a:	f000 80dd 	beq.w	19bd8 <tfp_format+0x23c>
   19a1e:	f200 8099 	bhi.w	19b54 <tfp_format+0x1b8>
   19a22:	286f      	cmp	r0, #111	; 0x6f
   19a24:	f000 80c7 	beq.w	19bb6 <tfp_format+0x21a>
   19a28:	2870      	cmp	r0, #112	; 0x70
   19a2a:	d1bf      	bne.n	199ac <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   19a2c:	9b00      	ldr	r3, [sp, #0]
   19a2e:	1d1a      	adds	r2, r3, #4
   19a30:	9200      	str	r2, [sp, #0]
   19a32:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   19a34:	2310      	movs	r3, #16
   19a36:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   19a3a:	aa08      	add	r2, sp, #32
   19a3c:	2100      	movs	r1, #0
   19a3e:	f7ff fe34 	bl	196aa <ui2a>
                p.width = 2 * sizeof(void*);
   19a42:	2308      	movs	r3, #8
   19a44:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   19a48:	2301      	movs	r3, #1
   19a4a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   19a4e:	2130      	movs	r1, #48	; 0x30
   19a50:	4628      	mov	r0, r5
   19a52:	f7ff fecd 	bl	197f0 <putf>
   19a56:	4404      	add	r4, r0
                written += putf(putp, 'x');
   19a58:	2178      	movs	r1, #120	; 0x78
   19a5a:	4628      	mov	r0, r5
   19a5c:	f7ff fec8 	bl	197f0 <putf>
   19a60:	4404      	add	r4, r0
                written += putchw(putp, &p);
   19a62:	a908      	add	r1, sp, #32
   19a64:	4628      	mov	r0, r5
   19a66:	f7ff fed9 	bl	1981c <putchw>
   19a6a:	4404      	add	r4, r0
                break;
   19a6c:	e79e      	b.n	199ac <tfp_format+0x10>
                    if (!p.left) {
   19a6e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   19a72:	f013 0f08 	tst.w	r3, #8
   19a76:	d1b4      	bne.n	199e2 <tfp_format+0x46>
                        p.lz = 1;
   19a78:	2301      	movs	r3, #1
   19a7a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   19a7e:	e7b0      	b.n	199e2 <tfp_format+0x46>
                    p.alt = 1;
   19a80:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   19a84:	f043 0302 	orr.w	r3, r3, #2
   19a88:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   19a8c:	e7a9      	b.n	199e2 <tfp_format+0x46>
                    p.left = 1;
   19a8e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   19a92:	f043 0308 	orr.w	r3, r3, #8
   19a96:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   19a9a:	2300      	movs	r3, #0
   19a9c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   19aa0:	e79f      	b.n	199e2 <tfp_format+0x46>
                i = intarg(0, 1, &va);
   19aa2:	466a      	mov	r2, sp
   19aa4:	2101      	movs	r1, #1
   19aa6:	2000      	movs	r0, #0
   19aa8:	f7ff ff46 	bl	19938 <intarg>
                if (i > UCHAR_MAX) {
   19aac:	28ff      	cmp	r0, #255	; 0xff
   19aae:	dd07      	ble.n	19ac0 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   19ab0:	23ff      	movs	r3, #255	; 0xff
   19ab2:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   19ab6:	9b01      	ldr	r3, [sp, #4]
   19ab8:	1c5a      	adds	r2, r3, #1
   19aba:	9201      	str	r2, [sp, #4]
   19abc:	7818      	ldrb	r0, [r3, #0]
   19abe:	e7a2      	b.n	19a06 <tfp_format+0x6a>
                } else if (i > 0) {
   19ac0:	2800      	cmp	r0, #0
   19ac2:	ddf8      	ble.n	19ab6 <tfp_format+0x11a>
                    p.width = i;
   19ac4:	f88d 0020 	strb.w	r0, [sp, #32]
   19ac8:	e7f5      	b.n	19ab6 <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   19aca:	ab08      	add	r3, sp, #32
   19acc:	220a      	movs	r2, #10
   19ace:	a901      	add	r1, sp, #4
   19ad0:	f7ff fe73 	bl	197ba <a2i>
   19ad4:	e797      	b.n	19a06 <tfp_format+0x6a>
                ch = *(fmt++);
   19ad6:	9b01      	ldr	r3, [sp, #4]
   19ad8:	1c5a      	adds	r2, r3, #1
   19ada:	9201      	str	r2, [sp, #4]
   19adc:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   19ade:	286c      	cmp	r0, #108	; 0x6c
   19ae0:	d001      	beq.n	19ae6 <tfp_format+0x14a>
                lng = 1;
   19ae2:	2601      	movs	r6, #1
   19ae4:	e792      	b.n	19a0c <tfp_format+0x70>
                    ch = *(fmt++);
   19ae6:	1c9a      	adds	r2, r3, #2
   19ae8:	9201      	str	r2, [sp, #4]
   19aea:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   19aec:	2602      	movs	r6, #2
   19aee:	e78d      	b.n	19a0c <tfp_format+0x70>
                ch = *(fmt++);
   19af0:	9b01      	ldr	r3, [sp, #4]
   19af2:	1c5a      	adds	r2, r3, #1
   19af4:	9201      	str	r2, [sp, #4]
   19af6:	7818      	ldrb	r0, [r3, #0]
   19af8:	e78a      	b.n	19a10 <tfp_format+0x74>
            switch (ch) {
   19afa:	2858      	cmp	r0, #88	; 0x58
   19afc:	d040      	beq.n	19b80 <tfp_format+0x1e4>
   19afe:	d80a      	bhi.n	19b16 <tfp_format+0x17a>
   19b00:	2800      	cmp	r0, #0
   19b02:	d076      	beq.n	19bf2 <tfp_format+0x256>
   19b04:	2825      	cmp	r0, #37	; 0x25
   19b06:	f47f af51 	bne.w	199ac <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   19b0a:	4601      	mov	r1, r0
   19b0c:	4628      	mov	r0, r5
   19b0e:	f7ff fe6f 	bl	197f0 <putf>
   19b12:	4404      	add	r4, r0
                break;
   19b14:	e74a      	b.n	199ac <tfp_format+0x10>
            switch (ch) {
   19b16:	2863      	cmp	r0, #99	; 0x63
   19b18:	d108      	bne.n	19b2c <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   19b1a:	9b00      	ldr	r3, [sp, #0]
   19b1c:	1d1a      	adds	r2, r3, #4
   19b1e:	9200      	str	r2, [sp, #0]
   19b20:	7819      	ldrb	r1, [r3, #0]
   19b22:	4628      	mov	r0, r5
   19b24:	f7ff fe64 	bl	197f0 <putf>
   19b28:	4404      	add	r4, r0
                break;
   19b2a:	e73f      	b.n	199ac <tfp_format+0x10>
            switch (ch) {
   19b2c:	2864      	cmp	r0, #100	; 0x64
   19b2e:	f47f af3d 	bne.w	199ac <tfp_format+0x10>
                p.base = 10;
   19b32:	230a      	movs	r3, #10
   19b34:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   19b38:	466a      	mov	r2, sp
   19b3a:	2101      	movs	r1, #1
   19b3c:	4630      	mov	r0, r6
   19b3e:	f7ff fefb 	bl	19938 <intarg>
   19b42:	aa08      	add	r2, sp, #32
   19b44:	f7ff fe11 	bl	1976a <i2a>
                written += putchw(putp, &p);
   19b48:	a908      	add	r1, sp, #32
   19b4a:	4628      	mov	r0, r5
   19b4c:	f7ff fe66 	bl	1981c <putchw>
   19b50:	4404      	add	r4, r0
                break;
   19b52:	e72b      	b.n	199ac <tfp_format+0x10>
            switch (ch) {
   19b54:	2875      	cmp	r0, #117	; 0x75
   19b56:	d110      	bne.n	19b7a <tfp_format+0x1de>
                p.base = 10;
   19b58:	230a      	movs	r3, #10
   19b5a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   19b5e:	466a      	mov	r2, sp
   19b60:	2100      	movs	r1, #0
   19b62:	4630      	mov	r0, r6
   19b64:	f7ff fee8 	bl	19938 <intarg>
   19b68:	aa08      	add	r2, sp, #32
   19b6a:	f7ff fd9e 	bl	196aa <ui2a>
                written += putchw(putp, &p);
   19b6e:	a908      	add	r1, sp, #32
   19b70:	4628      	mov	r0, r5
   19b72:	f7ff fe53 	bl	1981c <putchw>
   19b76:	4404      	add	r4, r0
                break;
   19b78:	e718      	b.n	199ac <tfp_format+0x10>
            switch (ch) {
   19b7a:	2878      	cmp	r0, #120	; 0x78
   19b7c:	f47f af16 	bne.w	199ac <tfp_format+0x10>
                p.base = 16;
   19b80:	2310      	movs	r3, #16
   19b82:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   19b86:	2858      	cmp	r0, #88	; 0x58
   19b88:	bf14      	ite	ne
   19b8a:	2300      	movne	r3, #0
   19b8c:	2301      	moveq	r3, #1
   19b8e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   19b92:	f363 0282 	bfi	r2, r3, #2, #1
   19b96:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   19b9a:	466a      	mov	r2, sp
   19b9c:	2100      	movs	r1, #0
   19b9e:	4630      	mov	r0, r6
   19ba0:	f7ff feca 	bl	19938 <intarg>
   19ba4:	aa08      	add	r2, sp, #32
   19ba6:	f7ff fd80 	bl	196aa <ui2a>
                written += putchw(putp, &p);
   19baa:	a908      	add	r1, sp, #32
   19bac:	4628      	mov	r0, r5
   19bae:	f7ff fe35 	bl	1981c <putchw>
   19bb2:	4404      	add	r4, r0
                break;
   19bb4:	e6fa      	b.n	199ac <tfp_format+0x10>
                p.base = 8;
   19bb6:	2308      	movs	r3, #8
   19bb8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   19bbc:	466a      	mov	r2, sp
   19bbe:	2100      	movs	r1, #0
   19bc0:	4630      	mov	r0, r6
   19bc2:	f7ff feb9 	bl	19938 <intarg>
   19bc6:	aa08      	add	r2, sp, #32
   19bc8:	f7ff fd6f 	bl	196aa <ui2a>
                written += putchw(putp, &p);
   19bcc:	a908      	add	r1, sp, #32
   19bce:	4628      	mov	r0, r5
   19bd0:	f7ff fe24 	bl	1981c <putchw>
   19bd4:	4404      	add	r4, r0
                break;
   19bd6:	e6e9      	b.n	199ac <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   19bd8:	9b00      	ldr	r3, [sp, #0]
   19bda:	1d1a      	adds	r2, r3, #4
   19bdc:	9200      	str	r2, [sp, #0]
   19bde:	681b      	ldr	r3, [r3, #0]
   19be0:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   19be2:	a908      	add	r1, sp, #32
   19be4:	4628      	mov	r0, r5
   19be6:	f7ff fe19 	bl	1981c <putchw>
   19bea:	4404      	add	r4, r0
                p.bf = bf;
   19bec:	ab02      	add	r3, sp, #8
   19bee:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   19bf0:	e6dc      	b.n	199ac <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   19bf2:	4620      	mov	r0, r4
   19bf4:	b00a      	add	sp, #40	; 0x28
   19bf6:	bd70      	pop	{r4, r5, r6, pc}

00019bf8 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   19bf8:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   19bfa:	f7ff fecf 	bl	1999c <tfp_format>
}
   19bfe:	bd08      	pop	{r3, pc}

00019c00 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   19c00:	b40f      	push	{r0, r1, r2, r3}
   19c02:	b500      	push	{lr}
   19c04:	b083      	sub	sp, #12
   19c06:	aa04      	add	r2, sp, #16
   19c08:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   19c0c:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   19c0e:	4b04      	ldr	r3, [pc, #16]	; (19c20 <printf+0x20>)
   19c10:	6818      	ldr	r0, [r3, #0]
   19c12:	f7ff fff1 	bl	19bf8 <vfprintf>
    va_end(va);
    return rv;
}
   19c16:	b003      	add	sp, #12
   19c18:	f85d eb04 	ldr.w	lr, [sp], #4
   19c1c:	b004      	add	sp, #16
   19c1e:	4770      	bx	lr
   19c20:	0001f42c 	.word	0x0001f42c

00019c24 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   19c24:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c26:	b085      	sub	sp, #20
   19c28:	4605      	mov	r5, r0
   19c2a:	460c      	mov	r4, r1
   19c2c:	4616      	mov	r6, r2
   19c2e:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   19c30:	460a      	mov	r2, r1
   19c32:	4601      	mov	r1, r0
   19c34:	4668      	mov	r0, sp
   19c36:	f000 f835 	bl	19ca4 <fmemopen_w>
    tfp_format(f, fmt, va);
   19c3a:	463a      	mov	r2, r7
   19c3c:	4631      	mov	r1, r6
   19c3e:	f7ff fead 	bl	1999c <tfp_format>
    if (size > 0) {
   19c42:	b12c      	cbz	r4, 19c50 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   19c44:	9b02      	ldr	r3, [sp, #8]
   19c46:	42a3      	cmp	r3, r4
   19c48:	d305      	bcc.n	19c56 <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   19c4a:	3c01      	subs	r4, #1
   19c4c:	2300      	movs	r3, #0
   19c4e:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   19c50:	9802      	ldr	r0, [sp, #8]
   19c52:	b005      	add	sp, #20
   19c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   19c56:	9b01      	ldr	r3, [sp, #4]
   19c58:	2200      	movs	r2, #0
   19c5a:	701a      	strb	r2, [r3, #0]
   19c5c:	e7f8      	b.n	19c50 <vsnprintf+0x2c>
	...

00019c60 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   19c60:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   19c62:	460a      	mov	r2, r1
   19c64:	4601      	mov	r1, r0
   19c66:	4b02      	ldr	r3, [pc, #8]	; (19c70 <vprintf+0x10>)
   19c68:	6818      	ldr	r0, [r3, #0]
   19c6a:	f7ff ffc5 	bl	19bf8 <vfprintf>
}
   19c6e:	bd08      	pop	{r3, pc}
   19c70:	0001f42c 	.word	0x0001f42c

00019c74 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   19c74:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   19c76:	2500      	movs	r5, #0
    
    while (n--)
   19c78:	e000      	b.n	19c7c <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   19c7a:	4622      	mov	r2, r4
    while (n--)
   19c7c:	1e54      	subs	r4, r2, #1
   19c7e:	b16a      	cbz	r2, 19c9c <memfile_write+0x28>
        f->bytes_written++;
   19c80:	6883      	ldr	r3, [r0, #8]
   19c82:	3301      	adds	r3, #1
   19c84:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   19c86:	68c2      	ldr	r2, [r0, #12]
   19c88:	4293      	cmp	r3, r2
   19c8a:	d8f6      	bhi.n	19c7a <memfile_write+0x6>
            *f->buffer++ = *bp++;
   19c8c:	6843      	ldr	r3, [r0, #4]
   19c8e:	1c5a      	adds	r2, r3, #1
   19c90:	6042      	str	r2, [r0, #4]
   19c92:	780a      	ldrb	r2, [r1, #0]
   19c94:	701a      	strb	r2, [r3, #0]
            i++;
   19c96:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   19c98:	3101      	adds	r1, #1
   19c9a:	e7ee      	b.n	19c7a <memfile_write+0x6>
        }
    }
    
    return i;
}
   19c9c:	4628      	mov	r0, r5
   19c9e:	bc30      	pop	{r4, r5}
   19ca0:	4770      	bx	lr
	...

00019ca4 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   19ca4:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   19ca6:	4c04      	ldr	r4, [pc, #16]	; (19cb8 <fmemopen_w+0x14>)
   19ca8:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   19caa:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   19cac:	2100      	movs	r1, #0
   19cae:	6081      	str	r1, [r0, #8]
    storage->size = size;
   19cb0:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   19cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
   19cb6:	4770      	bx	lr
   19cb8:	0001f424 	.word	0x0001f424

00019cbc <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   19cbc:	2000      	movs	r0, #0
   19cbe:	4770      	bx	lr

00019cc0 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   19cc0:	b510      	push	{r4, lr}
   19cc2:	4608      	mov	r0, r1
   19cc4:	4614      	mov	r4, r2
    console_write(bp, n);
   19cc6:	4611      	mov	r1, r2
   19cc8:	f7fd f9b8 	bl	1703c <console_write>
    return n;
}
   19ccc:	4620      	mov	r0, r4
   19cce:	bd10      	pop	{r4, pc}

00019cd0 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
   19cd0:	b508      	push	{r3, lr}
    sysinit();
   19cd2:	f7fd fa1b 	bl	1710c <sysinit_start>
   19cd6:	f000 f81b 	bl	19d10 <sysinit_app>
   19cda:	f7fd fa1d 	bl	17118 <sysinit_end>
}
   19cde:	bd08      	pop	{r3, pc}

00019ce0 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   19ce0:	b570      	push	{r4, r5, r6, lr}
   19ce2:	b082      	sub	sp, #8
   19ce4:	460c      	mov	r4, r1
   19ce6:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   19ce8:	b29d      	uxth	r5, r3
   19cea:	9b07      	ldr	r3, [sp, #28]
   19cec:	9300      	str	r3, [sp, #0]
   19cee:	4603      	mov	r3, r0
   19cf0:	9a06      	ldr	r2, [sp, #24]
   19cf2:	4629      	mov	r1, r5
   19cf4:	4620      	mov	r0, r4
   19cf6:	f7fe fdeb 	bl	188d0 <os_mempool_init>
    if (rc != 0) {
   19cfa:	b108      	cbz	r0, 19d00 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   19cfc:	b002      	add	sp, #8
   19cfe:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   19d00:	462b      	mov	r3, r5
   19d02:	9a06      	ldr	r2, [sp, #24]
   19d04:	b292      	uxth	r2, r2
   19d06:	4621      	mov	r1, r4
   19d08:	4630      	mov	r0, r6
   19d0a:	f7fe fc96 	bl	1863a <os_mbuf_pool_init>
   19d0e:	e7f5      	b.n	19cfc <mem_init_mbuf_pool+0x1c>

00019d10 <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
   19d10:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   19d12:	f7fe f9f3 	bl	180fc <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   19d16:	f001 f985 	bl	1b024 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   19d1a:	f7fd f9a3 	bl	17064 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
   19d1e:	f001 fac7 	bl	1b2b0 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   19d22:	f001 f9b7 	bl	1b094 <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   19d26:	f001 f8e1 	bl	1aeec <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
   19d2a:	f001 f8f1 	bl	1af10 <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   19d2e:	f001 f8f0 	bl	1af12 <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   19d32:	f001 f8ef 	bl	1af14 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
   19d36:	f001 f8ee 	bl	1af16 <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
   19d3a:	f001 f8ed 	bl	1af18 <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   19d3e:	f000 fbd1 	bl	1a4e4 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   19d42:	f000 fd1f 	bl	1a784 <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   19d46:	f000 ff3d 	bl	1abc4 <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   19d4a:	f000 feb3 	bl	1aab4 <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   19d4e:	f000 fe3d 	bl	1a9cc <init_sensor_coap>
}
   19d52:	bd08      	pop	{r3, pc}

00019d54 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   19d54:	b908      	cbnz	r0, 19d5a <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   19d56:	4802      	ldr	r0, [pc, #8]	; (19d60 <hal_bsp_flash_dev+0xc>)
   19d58:	4770      	bx	lr
    }

    return NULL;
   19d5a:	2000      	movs	r0, #0
}
   19d5c:	4770      	bx	lr
   19d5e:	bf00      	nop
   19d60:	0001f430 	.word	0x0001f430

00019d64 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   19d64:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   19d66:	f7ee fa2b 	bl	81c0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   19d6a:	f000 fbb3 	bl	1a4d4 <nrf52_periph_create>
}
   19d6e:	bd08      	pop	{r3, pc}

00019d70 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   19d70:	2300      	movs	r3, #0
   19d72:	4a07      	ldr	r2, [pc, #28]	; (19d90 <nrf52k_flash_wait_ready+0x20>)
   19d74:	4293      	cmp	r3, r2
   19d76:	dc06      	bgt.n	19d86 <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   19d78:	4a06      	ldr	r2, [pc, #24]	; (19d94 <nrf52k_flash_wait_ready+0x24>)
   19d7a:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   19d7e:	2a01      	cmp	r2, #1
   19d80:	d004      	beq.n	19d8c <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   19d82:	3301      	adds	r3, #1
   19d84:	e7f5      	b.n	19d72 <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   19d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19d8a:	4770      	bx	lr
            return 0;
   19d8c:	2000      	movs	r0, #0
}
   19d8e:	4770      	bx	lr
   19d90:	0001869f 	.word	0x0001869f
   19d94:	4001e000 	.word	0x4001e000

00019d98 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   19d98:	b538      	push	{r3, r4, r5, lr}
   19d9a:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   19d9c:	f7ff ffe8 	bl	19d70 <nrf52k_flash_wait_ready>
   19da0:	b9f0      	cbnz	r0, 19de0 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   19da2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   19da6:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   19da8:	4b0f      	ldr	r3, [pc, #60]	; (19de8 <nrf52k_flash_erase_sector+0x50>)
   19daa:	2202      	movs	r2, #2
   19dac:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   19db0:	f7ff ffde 	bl	19d70 <nrf52k_flash_wait_ready>
   19db4:	b148      	cbz	r0, 19dca <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   19db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   19dba:	4a0b      	ldr	r2, [pc, #44]	; (19de8 <nrf52k_flash_erase_sector+0x50>)
   19dbc:	2100      	movs	r1, #0
   19dbe:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   19dc2:	b904      	cbnz	r4, 19dc6 <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   19dc4:	b662      	cpsie	i
    return rc;
}
   19dc6:	4618      	mov	r0, r3
   19dc8:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   19dca:	4b07      	ldr	r3, [pc, #28]	; (19de8 <nrf52k_flash_erase_sector+0x50>)
   19dcc:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   19dd0:	f7ff ffce 	bl	19d70 <nrf52k_flash_wait_ready>
   19dd4:	4603      	mov	r3, r0
   19dd6:	2800      	cmp	r0, #0
   19dd8:	d0ef      	beq.n	19dba <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   19dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19dde:	e7ec      	b.n	19dba <nrf52k_flash_erase_sector+0x22>
        return -1;
   19de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19de4:	e7ef      	b.n	19dc6 <nrf52k_flash_erase_sector+0x2e>
   19de6:	bf00      	nop
   19de8:	4001e000 	.word	0x4001e000

00019dec <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   19dec:	2000      	movs	r0, #0
   19dee:	4770      	bx	lr

00019df0 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   19df0:	297f      	cmp	r1, #127	; 0x7f
   19df2:	dc06      	bgt.n	19e02 <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   19df4:	0309      	lsls	r1, r1, #12
   19df6:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   19df8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   19dfc:	601a      	str	r2, [r3, #0]
}
   19dfe:	2000      	movs	r0, #0
   19e00:	4770      	bx	lr
{
   19e02:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   19e04:	2300      	movs	r3, #0
   19e06:	461a      	mov	r2, r3
   19e08:	4619      	mov	r1, r3
   19e0a:	4618      	mov	r0, r3
   19e0c:	f7fe f818 	bl	17e40 <__assert_func>

00019e10 <nrf52k_flash_write>:
{
   19e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19e14:	b082      	sub	sp, #8
   19e16:	460d      	mov	r5, r1
   19e18:	4616      	mov	r6, r2
   19e1a:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   19e1c:	f7ff ffa8 	bl	19d70 <nrf52k_flash_wait_ready>
   19e20:	2800      	cmp	r0, #0
   19e22:	d158      	bne.n	19ed6 <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   19e24:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   19e28:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   19e2a:	4b2c      	ldr	r3, [pc, #176]	; (19edc <nrf52k_flash_write+0xcc>)
   19e2c:	2201      	movs	r2, #1
   19e2e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   19e32:	f015 0803 	ands.w	r8, r5, #3
   19e36:	d10b      	bne.n	19e50 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   19e38:	2c03      	cmp	r4, #3
   19e3a:	d925      	bls.n	19e88 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   19e3c:	f7ff ff98 	bl	19d70 <nrf52k_flash_wait_ready>
   19e40:	2800      	cmp	r0, #0
   19e42:	d139      	bne.n	19eb8 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   19e44:	f856 3b04 	ldr.w	r3, [r6], #4
   19e48:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   19e4c:	3c04      	subs	r4, #4
   19e4e:	e7f3      	b.n	19e38 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   19e50:	f7ff ff8e 	bl	19d70 <nrf52k_flash_wait_ready>
   19e54:	bb68      	cbnz	r0, 19eb2 <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   19e56:	f025 0a03 	bic.w	sl, r5, #3
   19e5a:	f8da 3000 	ldr.w	r3, [sl]
   19e5e:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   19e60:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   19e64:	45a1      	cmp	r9, r4
   19e66:	d900      	bls.n	19e6a <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   19e68:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   19e6a:	464a      	mov	r2, r9
   19e6c:	4631      	mov	r1, r6
   19e6e:	ab01      	add	r3, sp, #4
   19e70:	eb03 0008 	add.w	r0, r3, r8
   19e74:	f7ff fbda 	bl	1962c <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   19e78:	9b01      	ldr	r3, [sp, #4]
   19e7a:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   19e7e:	444d      	add	r5, r9
        num_bytes -= cnt;
   19e80:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   19e84:	444e      	add	r6, r9
   19e86:	e7d7      	b.n	19e38 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   19e88:	b164      	cbz	r4, 19ea4 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   19e8a:	682b      	ldr	r3, [r5, #0]
   19e8c:	a802      	add	r0, sp, #8
   19e8e:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   19e92:	4622      	mov	r2, r4
   19e94:	4631      	mov	r1, r6
   19e96:	f7ff fbc9 	bl	1962c <memcpy>
        if (nrf52k_flash_wait_ready()) {
   19e9a:	f7ff ff69 	bl	19d70 <nrf52k_flash_wait_ready>
   19e9e:	b9b8      	cbnz	r0, 19ed0 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   19ea0:	9b01      	ldr	r3, [sp, #4]
   19ea2:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   19ea4:	f7ff ff64 	bl	19d70 <nrf52k_flash_wait_ready>
   19ea8:	4603      	mov	r3, r0
   19eaa:	b138      	cbz	r0, 19ebc <nrf52k_flash_write+0xac>
        rc = -1;
   19eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19eb0:	e004      	b.n	19ebc <nrf52k_flash_write+0xac>
    int rc = -1;
   19eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19eb6:	e001      	b.n	19ebc <nrf52k_flash_write+0xac>
   19eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   19ebc:	4a07      	ldr	r2, [pc, #28]	; (19edc <nrf52k_flash_write+0xcc>)
   19ebe:	2100      	movs	r1, #0
   19ec0:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   19ec4:	b907      	cbnz	r7, 19ec8 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   19ec6:	b662      	cpsie	i
}
   19ec8:	4618      	mov	r0, r3
   19eca:	b002      	add	sp, #8
   19ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   19ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19ed4:	e7f2      	b.n	19ebc <nrf52k_flash_write+0xac>
        return -1;
   19ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19eda:	e7f5      	b.n	19ec8 <nrf52k_flash_write+0xb8>
   19edc:	4001e000 	.word	0x4001e000

00019ee0 <nrf52k_flash_read>:
{
   19ee0:	b508      	push	{r3, lr}
   19ee2:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   19ee4:	461a      	mov	r2, r3
   19ee6:	f7ff fba1 	bl	1962c <memcpy>
}
   19eea:	2000      	movs	r0, #0
   19eec:	bd08      	pop	{r3, pc}
	...

00019ef0 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   19ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   19ef2:	f7ff fa3b 	bl	1936c <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   19ef6:	4b31      	ldr	r3, [pc, #196]	; (19fbc <nrf52_timer_handler+0xcc>)
   19ef8:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   19efc:	4b30      	ldr	r3, [pc, #192]	; (19fc0 <nrf52_timer_handler+0xd0>)
   19efe:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   19f00:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   19f04:	d225      	bcs.n	19f52 <nrf52_timer_handler+0x62>
   19f06:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   19f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   19f0c:	d227      	bcs.n	19f5e <nrf52_timer_handler+0x6e>
    result = x - y;
   19f0e:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   19f10:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   19f14:	d129      	bne.n	19f6a <nrf52_timer_handler+0x7a>
        return (result & 0x007fffff);
   19f16:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   19f1a:	4f29      	ldr	r7, [pc, #164]	; (19fc0 <nrf52_timer_handler+0xd0>)
   19f1c:	683c      	ldr	r4, [r7, #0]
   19f1e:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   19f22:	4628      	mov	r0, r5
   19f24:	f7ff f9b0 	bl	19288 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   19f28:	4b24      	ldr	r3, [pc, #144]	; (19fbc <nrf52_timer_handler+0xcc>)
   19f2a:	2200      	movs	r2, #0
   19f2c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   19f30:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   19f32:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   19f34:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   19f38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   19f3c:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   19f3e:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   19f40:	f7ff fa1d 	bl	1937e <os_arch_in_critical>
   19f44:	bb28      	cbnz	r0, 19f92 <nrf52_timer_handler+0xa2>
   19f46:	2300      	movs	r3, #0
   19f48:	461a      	mov	r2, r3
   19f4a:	4619      	mov	r1, r3
   19f4c:	4618      	mov	r0, r3
   19f4e:	f7fd ff77 	bl	17e40 <__assert_func>
    assert(x <= 0xffffff);
   19f52:	2300      	movs	r3, #0
   19f54:	461a      	mov	r2, r3
   19f56:	4619      	mov	r1, r3
   19f58:	4618      	mov	r0, r3
   19f5a:	f7fd ff71 	bl	17e40 <__assert_func>
    assert(y <= 0xffffff);
   19f5e:	2300      	movs	r3, #0
   19f60:	461a      	mov	r2, r3
   19f62:	4619      	mov	r1, r3
   19f64:	4618      	mov	r0, r3
   19f66:	f7fd ff6b 	bl	17e40 <__assert_func>
        return (result | 0xff800000);
   19f6a:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   19f6e:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   19f72:	e7d2      	b.n	19f1a <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   19f74:	2300      	movs	r3, #0
   19f76:	461a      	mov	r2, r3
   19f78:	4619      	mov	r1, r3
   19f7a:	4618      	mov	r0, r3
   19f7c:	f7fd ff60 	bl	17e40 <__assert_func>
        return (result | 0xff800000);
   19f80:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   19f84:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   19f88:	2a02      	cmp	r2, #2
   19f8a:	dc13      	bgt.n	19fb4 <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   19f8c:	4a0c      	ldr	r2, [pc, #48]	; (19fc0 <nrf52_timer_handler+0xd0>)
   19f8e:	6814      	ldr	r4, [r2, #0]
   19f90:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   19f92:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   19f96:	4a09      	ldr	r2, [pc, #36]	; (19fbc <nrf52_timer_handler+0xcc>)
   19f98:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   19f9c:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   19fa0:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   19fa4:	d2e6      	bcs.n	19f74 <nrf52_timer_handler+0x84>
    result = x - y;
   19fa6:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   19fa8:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   19fac:	d1e8      	bne.n	19f80 <nrf52_timer_handler+0x90>
        return (result & 0x007fffff);
   19fae:	f3c2 0216 	ubfx	r2, r2, #0, #23
   19fb2:	e7e9      	b.n	19f88 <nrf52_timer_handler+0x98>

    OS_EXIT_CRITICAL(sr);
   19fb4:	4630      	mov	r0, r6
   19fb6:	f7ff f9df 	bl	19378 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   19fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19fbc:	40011000 	.word	0x40011000
   19fc0:	2000e6c4 	.word	0x2000e6c4

00019fc4 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   19fc4:	b538      	push	{r3, r4, r5, lr}
   19fc6:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   19fc8:	f7ff f9d9 	bl	1937e <os_arch_in_critical>
   19fcc:	b1a0      	cbz	r0, 19ff8 <os_tick_idle+0x34>

    if (ticks > 0) {
   19fce:	2d00      	cmp	r5, #0
   19fd0:	d038      	beq.n	1a044 <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   19fd2:	4b20      	ldr	r3, [pc, #128]	; (1a054 <os_tick_idle+0x90>)
   19fd4:	685b      	ldr	r3, [r3, #4]
   19fd6:	42ab      	cmp	r3, r5
   19fd8:	d200      	bcs.n	19fdc <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   19fda:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   19fdc:	4b1d      	ldr	r3, [pc, #116]	; (1a054 <os_tick_idle+0x90>)
   19fde:	689c      	ldr	r4, [r3, #8]
   19fe0:	681a      	ldr	r2, [r3, #0]
   19fe2:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   19fe6:	f7ff f9ca 	bl	1937e <os_arch_in_critical>
   19fea:	b9d0      	cbnz	r0, 1a022 <os_tick_idle+0x5e>
   19fec:	2300      	movs	r3, #0
   19fee:	461a      	mov	r2, r3
   19ff0:	4619      	mov	r1, r3
   19ff2:	4618      	mov	r0, r3
   19ff4:	f7fd ff24 	bl	17e40 <__assert_func>
    OS_ASSERT_CRITICAL();
   19ff8:	2300      	movs	r3, #0
   19ffa:	461a      	mov	r2, r3
   19ffc:	4619      	mov	r1, r3
   19ffe:	4618      	mov	r0, r3
   1a000:	f7fd ff1e 	bl	17e40 <__assert_func>
    assert(y <= 0xffffff);
   1a004:	2300      	movs	r3, #0
   1a006:	461a      	mov	r2, r3
   1a008:	4619      	mov	r1, r3
   1a00a:	4618      	mov	r0, r3
   1a00c:	f7fd ff18 	bl	17e40 <__assert_func>
        return (result | 0xff800000);
   1a010:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1a014:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   1a018:	2b02      	cmp	r3, #2
   1a01a:	dc13      	bgt.n	1a044 <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1a01c:	4b0d      	ldr	r3, [pc, #52]	; (1a054 <os_tick_idle+0x90>)
   1a01e:	681c      	ldr	r4, [r3, #0]
   1a020:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1a022:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1a026:	4b0c      	ldr	r3, [pc, #48]	; (1a058 <os_tick_idle+0x94>)
   1a028:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1a02c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1a030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1a034:	d2e6      	bcs.n	1a004 <os_tick_idle+0x40>
    result = x - y;
   1a036:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1a038:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1a03c:	d1e8      	bne.n	1a010 <os_tick_idle+0x4c>
        return (result & 0x007fffff);
   1a03e:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1a042:	e7e9      	b.n	1a018 <os_tick_idle+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
   1a044:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1a048:	bf30      	wfi

    if (ticks > 0) {
   1a04a:	b905      	cbnz	r5, 1a04e <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1a04c:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1a04e:	f7ff ff4f 	bl	19ef0 <nrf52_timer_handler>
}
   1a052:	e7fb      	b.n	1a04c <os_tick_idle+0x88>
   1a054:	2000e6c4 	.word	0x2000e6c4
   1a058:	40011000 	.word	0x40011000

0001a05c <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1a05c:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1a05e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a062:	fbb3 f3f0 	udiv	r3, r3, r0
   1a066:	fb00 f303 	mul.w	r3, r0, r3
   1a06a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1a06e:	d136      	bne.n	1a0de <os_tick_init+0x82>
   1a070:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1a072:	4d1e      	ldr	r5, [pc, #120]	; (1a0ec <os_tick_init+0x90>)
   1a074:	2600      	movs	r6, #0
   1a076:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1a078:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a07c:	fbb3 f0f0 	udiv	r0, r3, r0
   1a080:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1a082:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1a086:	fbb3 f0f0 	udiv	r0, r3, r0
   1a08a:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1a08c:	f7ff f96e 	bl	1936c <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a090:	0164      	lsls	r4, r4, #5
   1a092:	b2e4      	uxtb	r4, r4
   1a094:	4b16      	ldr	r3, [pc, #88]	; (1a0f0 <os_tick_init+0x94>)
   1a096:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a09a:	4a16      	ldr	r2, [pc, #88]	; (1a0f4 <os_tick_init+0x98>)
   1a09c:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a09e:	4916      	ldr	r1, [pc, #88]	; (1a0f8 <os_tick_init+0x9c>)
   1a0a0:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a0a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1a0a8:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1a0aa:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1a0ae:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1a0b2:	2201      	movs	r2, #1
   1a0b4:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1a0b6:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1a0b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a0bc:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1a0c0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1a0c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1a0c8:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1a0cc:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1a0d0:	6829      	ldr	r1, [r5, #0]
   1a0d2:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1a0d6:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1a0d8:	f7ff f94e 	bl	19378 <os_arch_restore_sr>
}
   1a0dc:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1a0de:	2300      	movs	r3, #0
   1a0e0:	461a      	mov	r2, r3
   1a0e2:	4619      	mov	r1, r3
   1a0e4:	4618      	mov	r0, r3
   1a0e6:	f7fd feab 	bl	17e40 <__assert_func>
   1a0ea:	bf00      	nop
   1a0ec:	2000e6c4 	.word	0x2000e6c4
   1a0f0:	e000e100 	.word	0xe000e100
   1a0f4:	e000ed00 	.word	0xe000ed00
   1a0f8:	00019ef1 	.word	0x00019ef1

0001a0fc <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1a0fc:	2301      	movs	r3, #1
   1a0fe:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1a100:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1a104:	4770      	bx	lr
	...

0001a108 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1a108:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1a10a:	7883      	ldrb	r3, [r0, #2]
   1a10c:	b393      	cbz	r3, 1a174 <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1a10e:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1a110:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1a114:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1a118:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1a11a:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1a11e:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1a122:	b11d      	cbz	r5, 1a12c <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
   1a124:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1a128:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1a12c:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1a12e:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1a130:	2b02      	cmp	r3, #2
   1a132:	dc0e      	bgt.n	1a152 <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1a134:	7842      	ldrb	r2, [r0, #1]
   1a136:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1a138:	2b00      	cmp	r3, #0
   1a13a:	db15      	blt.n	1a168 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a13c:	f002 021f 	and.w	r2, r2, #31
   1a140:	095b      	lsrs	r3, r3, #5
   1a142:	2101      	movs	r1, #1
   1a144:	fa01 f202 	lsl.w	r2, r1, r2
   1a148:	3340      	adds	r3, #64	; 0x40
   1a14a:	491b      	ldr	r1, [pc, #108]	; (1a1b8 <nrf_timer_set_ocmp+0xb0>)
   1a14c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1a150:	e00a      	b.n	1a168 <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
   1a152:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1a156:	d208      	bcs.n	1a16a <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1a158:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1a15c:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1a160:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1a164:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1a168:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1a16a:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1a16e:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1a172:	e7f5      	b.n	1a160 <nrf_timer_set_ocmp+0x58>
   1a174:	460d      	mov	r5, r1
   1a176:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1a178:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1a17a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1a17e:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1a182:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1a186:	2200      	movs	r2, #0
   1a188:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1a18c:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1a190:	f7ff ffb4 	bl	1a0fc <nrf_read_timer_cntr>
   1a194:	1b40      	subs	r0, r0, r5
   1a196:	2800      	cmp	r0, #0
   1a198:	dbe6      	blt.n	1a168 <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1a19a:	7862      	ldrb	r2, [r4, #1]
   1a19c:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1a19e:	2b00      	cmp	r3, #0
   1a1a0:	dbe2      	blt.n	1a168 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a1a2:	f002 021f 	and.w	r2, r2, #31
   1a1a6:	095b      	lsrs	r3, r3, #5
   1a1a8:	2101      	movs	r1, #1
   1a1aa:	fa01 f202 	lsl.w	r2, r1, r2
   1a1ae:	3340      	adds	r3, #64	; 0x40
   1a1b0:	4901      	ldr	r1, [pc, #4]	; (1a1b8 <nrf_timer_set_ocmp+0xb0>)
   1a1b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1a1b6:	e7d7      	b.n	1a168 <nrf_timer_set_ocmp+0x60>
   1a1b8:	e000e100 	.word	0xe000e100

0001a1bc <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1a1bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1a1c0:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1a1c4:	4770      	bx	lr

0001a1c6 <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1a1c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1a1ca:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1a1ce:	4770      	bx	lr

0001a1d0 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1a1d0:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1a1d2:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a1d4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a1d8:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1a1da:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1a1dc:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1a1e0:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1a1e4:	b1ad      	cbz	r5, 1a212 <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1a1e6:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1a1ea:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1a1ec:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1a1f0:	2500      	movs	r5, #0
   1a1f2:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1a1f6:	7840      	ldrb	r0, [r0, #1]
   1a1f8:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1a1fa:	42aa      	cmp	r2, r5
   1a1fc:	db09      	blt.n	1a212 <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a1fe:	f000 001f 	and.w	r0, r0, #31
   1a202:	0952      	lsrs	r2, r2, #5
   1a204:	2501      	movs	r5, #1
   1a206:	fa05 f000 	lsl.w	r0, r5, r0
   1a20a:	3240      	adds	r2, #64	; 0x40
   1a20c:	4d04      	ldr	r5, [pc, #16]	; (1a220 <hal_timer_read_bsptimer+0x50>)
   1a20e:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1a212:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1a216:	b904      	cbnz	r4, 1a21a <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1a218:	b662      	cpsie	i

    return tcntr;
}
   1a21a:	bc30      	pop	{r4, r5}
   1a21c:	4770      	bx	lr
   1a21e:	bf00      	nop
   1a220:	e000e100 	.word	0xe000e100

0001a224 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1a224:	b570      	push	{r4, r5, r6, lr}
   1a226:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a228:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a22c:	b672      	cpsid	i
   1a22e:	e013      	b.n	1a258 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1a230:	6928      	ldr	r0, [r5, #16]
   1a232:	f7ff ff63 	bl	1a0fc <nrf_read_timer_cntr>
            delta = 0;
   1a236:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1a238:	68e3      	ldr	r3, [r4, #12]
   1a23a:	1ac0      	subs	r0, r0, r3
   1a23c:	4290      	cmp	r0, r2
   1a23e:	db19      	blt.n	1a274 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1a240:	6923      	ldr	r3, [r4, #16]
   1a242:	b1a3      	cbz	r3, 1a26e <hal_timer_chk_queue+0x4a>
   1a244:	6962      	ldr	r2, [r4, #20]
   1a246:	615a      	str	r2, [r3, #20]
   1a248:	6963      	ldr	r3, [r4, #20]
   1a24a:	6922      	ldr	r2, [r4, #16]
   1a24c:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1a24e:	2300      	movs	r3, #0
   1a250:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1a252:	6863      	ldr	r3, [r4, #4]
   1a254:	68a0      	ldr	r0, [r4, #8]
   1a256:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1a258:	696c      	ldr	r4, [r5, #20]
   1a25a:	b15c      	cbz	r4, 1a274 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1a25c:	78ab      	ldrb	r3, [r5, #2]
   1a25e:	2b00      	cmp	r3, #0
   1a260:	d0e6      	beq.n	1a230 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1a262:	4628      	mov	r0, r5
   1a264:	f7ff ffb4 	bl	1a1d0 <hal_timer_read_bsptimer>
            delta = -3;
   1a268:	f06f 0202 	mvn.w	r2, #2
   1a26c:	e7e4      	b.n	1a238 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1a26e:	6963      	ldr	r3, [r4, #20]
   1a270:	61ab      	str	r3, [r5, #24]
   1a272:	e7e9      	b.n	1a248 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1a274:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1a276:	b133      	cbz	r3, 1a286 <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1a278:	68d9      	ldr	r1, [r3, #12]
   1a27a:	4628      	mov	r0, r5
   1a27c:	f7ff ff44 	bl	1a108 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1a280:	b906      	cbnz	r6, 1a284 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1a282:	b662      	cpsie	i
}
   1a284:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1a286:	78ab      	ldrb	r3, [r5, #2]
   1a288:	b11b      	cbz	r3, 1a292 <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1a28a:	6928      	ldr	r0, [r5, #16]
   1a28c:	f7ff ff9b 	bl	1a1c6 <nrf_rtc_disable_ocmp>
   1a290:	e7f6      	b.n	1a280 <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1a292:	6928      	ldr	r0, [r5, #16]
   1a294:	f7ff ff92 	bl	1a1bc <nrf_timer_disable_ocmp>
   1a298:	e7f2      	b.n	1a280 <hal_timer_chk_queue+0x5c>

0001a29a <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1a29a:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1a29c:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1a29e:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1a2a2:	b113      	cbz	r3, 1a2aa <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1a2a4:	2300      	movs	r3, #0
   1a2a6:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1a2aa:	6883      	ldr	r3, [r0, #8]
   1a2ac:	3301      	adds	r3, #1
   1a2ae:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1a2b0:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1a2b4:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1a2b8:	d100      	bne.n	1a2bc <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1a2ba:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1a2bc:	f7ff ffb2 	bl	1a224 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1a2c0:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1a2c4:	e7f9      	b.n	1a2ba <hal_timer_irq_handler+0x20>
	...

0001a2c8 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1a2c8:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1a2ca:	4802      	ldr	r0, [pc, #8]	; (1a2d4 <nrf52_timer0_irq_handler+0xc>)
   1a2cc:	f7ff ffe5 	bl	1a29a <hal_timer_irq_handler>
}
   1a2d0:	bd08      	pop	{r3, pc}
   1a2d2:	bf00      	nop
   1a2d4:	2000e6d0 	.word	0x2000e6d0

0001a2d8 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1a2d8:	2805      	cmp	r0, #5
   1a2da:	dc1c      	bgt.n	1a316 <hal_timer_init+0x3e>
   1a2dc:	4b12      	ldr	r3, [pc, #72]	; (1a328 <hal_timer_init+0x50>)
   1a2de:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1a2e2:	b1d3      	cbz	r3, 1a31a <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1a2e4:	781a      	ldrb	r2, [r3, #0]
   1a2e6:	b9d2      	cbnz	r2, 1a31e <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1a2e8:	b9d8      	cbnz	r0, 1a322 <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1a2ea:	4a10      	ldr	r2, [pc, #64]	; (1a32c <hal_timer_init+0x54>)
   1a2ec:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1a2ee:	2208      	movs	r2, #8
   1a2f0:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a2f2:	4b0f      	ldr	r3, [pc, #60]	; (1a330 <hal_timer_init+0x58>)
   1a2f4:	f44f 7280 	mov.w	r2, #256	; 0x100
   1a2f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1a2fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1a300:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a304:	22e0      	movs	r2, #224	; 0xe0
   1a306:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a30a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1a30e:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a310:	4a08      	ldr	r2, [pc, #32]	; (1a334 <hal_timer_init+0x5c>)
   1a312:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1a314:	4770      	bx	lr

err:
    return rc;
   1a316:	2016      	movs	r0, #22
   1a318:	4770      	bx	lr
   1a31a:	2016      	movs	r0, #22
   1a31c:	4770      	bx	lr
   1a31e:	2016      	movs	r0, #22
   1a320:	4770      	bx	lr
   1a322:	2016      	movs	r0, #22
}
   1a324:	4770      	bx	lr
   1a326:	bf00      	nop
   1a328:	0001f464 	.word	0x0001f464
   1a32c:	40008000 	.word	0x40008000
   1a330:	e000e100 	.word	0xe000e100
   1a334:	0001a2c9 	.word	0x0001a2c9

0001a338 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1a338:	2805      	cmp	r0, #5
   1a33a:	dc65      	bgt.n	1a408 <hal_timer_config+0xd0>
   1a33c:	4b39      	ldr	r3, [pc, #228]	; (1a424 <hal_timer_config+0xec>)
   1a33e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a342:	2800      	cmp	r0, #0
   1a344:	d062      	beq.n	1a40c <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1a346:	4b38      	ldr	r3, [pc, #224]	; (1a428 <hal_timer_config+0xf0>)
   1a348:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1a34c:	7803      	ldrb	r3, [r0, #0]
   1a34e:	2b00      	cmp	r3, #0
   1a350:	d15e      	bne.n	1a410 <hal_timer_config+0xd8>
   1a352:	2900      	cmp	r1, #0
   1a354:	d05e      	beq.n	1a414 <hal_timer_config+0xdc>
   1a356:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1a35a:	d85d      	bhi.n	1a418 <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
   1a35c:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1a35e:	2a00      	cmp	r2, #0
   1a360:	d05c      	beq.n	1a41c <hal_timer_config+0xe4>
{
   1a362:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1a364:	2901      	cmp	r1, #1
   1a366:	d013      	beq.n	1a390 <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1a368:	2301      	movs	r3, #1
   1a36a:	2b09      	cmp	r3, #9
   1a36c:	d810      	bhi.n	1a390 <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
   1a36e:	2201      	movs	r2, #1
   1a370:	409a      	lsls	r2, r3
   1a372:	428a      	cmp	r2, r1
   1a374:	d202      	bcs.n	1a37c <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1a376:	3301      	adds	r3, #1
   1a378:	b2db      	uxtb	r3, r3
   1a37a:	e7f6      	b.n	1a36a <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
   1a37c:	1e5c      	subs	r4, r3, #1
   1a37e:	2501      	movs	r5, #1
   1a380:	fa05 f404 	lsl.w	r4, r5, r4
   1a384:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
   1a386:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1a388:	428c      	cmp	r4, r1
   1a38a:	d201      	bcs.n	1a390 <hal_timer_config+0x58>
                    prescaler -= 1;
   1a38c:	3b01      	subs	r3, #1
   1a38e:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1a390:	4a25      	ldr	r2, [pc, #148]	; (1a428 <hal_timer_config+0xf0>)
   1a392:	411a      	asrs	r2, r3
   1a394:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
   1a396:	2201      	movs	r2, #1
   1a398:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a39a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a39e:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1a3a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a3a4:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1a3a8:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1a3ac:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1a3b0:	d00c      	beq.n	1a3cc <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1a3b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a3b6:	2100      	movs	r1, #0
   1a3b8:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1a3bc:	2101      	movs	r1, #1
   1a3be:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1a3c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a3c4:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1a3c8:	2a00      	cmp	r2, #0
   1a3ca:	d0f9      	beq.n	1a3c0 <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1a3cc:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1a3ce:	2101      	movs	r1, #1
   1a3d0:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1a3d2:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1a3d4:	2500      	movs	r5, #0
   1a3d6:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1a3da:	2503      	movs	r5, #3
   1a3dc:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1a3e0:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1a3e4:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1a3e6:	7842      	ldrb	r2, [r0, #1]
   1a3e8:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1a3ea:	2b00      	cmp	r3, #0
   1a3ec:	db07      	blt.n	1a3fe <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a3ee:	f002 021f 	and.w	r2, r2, #31
   1a3f2:	095b      	lsrs	r3, r3, #5
   1a3f4:	fa01 f202 	lsl.w	r2, r1, r2
   1a3f8:	490c      	ldr	r1, [pc, #48]	; (1a42c <hal_timer_config+0xf4>)
   1a3fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1a3fe:	b97c      	cbnz	r4, 1a420 <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
   1a400:	b662      	cpsie	i

    return 0;
   1a402:	2000      	movs	r0, #0

err:
    return rc;
}
   1a404:	bc30      	pop	{r4, r5}
   1a406:	4770      	bx	lr
    return rc;
   1a408:	2016      	movs	r0, #22
   1a40a:	4770      	bx	lr
   1a40c:	2016      	movs	r0, #22
   1a40e:	4770      	bx	lr
   1a410:	2016      	movs	r0, #22
   1a412:	4770      	bx	lr
   1a414:	2016      	movs	r0, #22
   1a416:	4770      	bx	lr
   1a418:	2016      	movs	r0, #22
   1a41a:	4770      	bx	lr
   1a41c:	2016      	movs	r0, #22
}
   1a41e:	4770      	bx	lr
    return 0;
   1a420:	2000      	movs	r0, #0
   1a422:	e7ef      	b.n	1a404 <hal_timer_config+0xcc>
   1a424:	0001f464 	.word	0x0001f464
   1a428:	00f42400 	.word	0x00f42400
   1a42c:	e000e100 	.word	0xe000e100

0001a430 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1a430:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1a432:	2805      	cmp	r0, #5
   1a434:	dc0c      	bgt.n	1a450 <hal_timer_read+0x20>
   1a436:	4b09      	ldr	r3, [pc, #36]	; (1a45c <hal_timer_read+0x2c>)
   1a438:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a43c:	b140      	cbz	r0, 1a450 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1a43e:	7883      	ldrb	r3, [r0, #2]
   1a440:	b91b      	cbnz	r3, 1a44a <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1a442:	6900      	ldr	r0, [r0, #16]
   1a444:	f7ff fe5a 	bl	1a0fc <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1a448:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1a44a:	f7ff fec1 	bl	1a1d0 <hal_timer_read_bsptimer>
   1a44e:	e7fb      	b.n	1a448 <hal_timer_read+0x18>
    assert(0);
   1a450:	2300      	movs	r3, #0
   1a452:	461a      	mov	r2, r3
   1a454:	4619      	mov	r1, r3
   1a456:	4618      	mov	r0, r3
   1a458:	f7fd fcf2 	bl	17e40 <__assert_func>
   1a45c:	0001f464 	.word	0x0001f464

0001a460 <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
   1a460:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1a462:	2100      	movs	r1, #0
   1a464:	4608      	mov	r0, r1
   1a466:	f7ff ff37 	bl	1a2d8 <hal_timer_init>
    assert(rc == 0);
   1a46a:	b920      	cbnz	r0, 1a476 <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1a46c:	4808      	ldr	r0, [pc, #32]	; (1a490 <nrf52_periph_create_timers+0x30>)
   1a46e:	f7fd ff11 	bl	18294 <os_cputime_init>
    assert(rc == 0);
   1a472:	b930      	cbnz	r0, 1a482 <nrf52_periph_create_timers+0x22>
#endif
}
   1a474:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1a476:	2300      	movs	r3, #0
   1a478:	461a      	mov	r2, r3
   1a47a:	4619      	mov	r1, r3
   1a47c:	4618      	mov	r0, r3
   1a47e:	f7fd fcdf 	bl	17e40 <__assert_func>
    assert(rc == 0);
   1a482:	2300      	movs	r3, #0
   1a484:	461a      	mov	r2, r3
   1a486:	4619      	mov	r1, r3
   1a488:	4618      	mov	r0, r3
   1a48a:	f7fd fcd9 	bl	17e40 <__assert_func>
   1a48e:	bf00      	nop
   1a490:	000f4240 	.word	0x000f4240

0001a494 <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   1a494:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   1a496:	4906      	ldr	r1, [pc, #24]	; (1a4b0 <nrf52_periph_create_i2c+0x1c>)
   1a498:	2001      	movs	r0, #1
   1a49a:	f7fd f82b 	bl	174f4 <hal_i2c_init>
    assert(rc == 0);
   1a49e:	b900      	cbnz	r0, 1a4a2 <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   1a4a0:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1a4a2:	2300      	movs	r3, #0
   1a4a4:	461a      	mov	r2, r3
   1a4a6:	4619      	mov	r1, r3
   1a4a8:	4618      	mov	r0, r3
   1a4aa:	f7fd fcc9 	bl	17e40 <__assert_func>
   1a4ae:	bf00      	nop
   1a4b0:	0001f47c 	.word	0x0001f47c

0001a4b4 <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   1a4b4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1a4b6:	2200      	movs	r2, #0
   1a4b8:	4905      	ldr	r1, [pc, #20]	; (1a4d0 <nrf52_periph_create_spi+0x1c>)
   1a4ba:	4610      	mov	r0, r2
   1a4bc:	f7fd fb4e 	bl	17b5c <hal_spi_init>
    assert(rc == 0);
   1a4c0:	b900      	cbnz	r0, 1a4c4 <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
   1a4c2:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1a4c4:	2300      	movs	r3, #0
   1a4c6:	461a      	mov	r2, r3
   1a4c8:	4619      	mov	r1, r3
   1a4ca:	4618      	mov	r0, r3
   1a4cc:	f7fd fcb8 	bl	17e40 <__assert_func>
   1a4d0:	0001f488 	.word	0x0001f488

0001a4d4 <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1a4d4:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1a4d6:	f7ff ffc3 	bl	1a460 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1a4da:	f7ff ffdb 	bl	1a494 <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1a4de:	f7ff ffe9 	bl	1a4b4 <nrf52_periph_create_spi>
}
   1a4e2:	bd08      	pop	{r3, pc}

0001a4e4 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1a4e4:	4770      	bx	lr
	...

0001a4e8 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   1a4e8:	4b08      	ldr	r3, [pc, #32]	; (1a50c <sensor_mgr_remove+0x24>)
   1a4ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a4ec:	4282      	cmp	r2, r0
   1a4ee:	d104      	bne.n	1a4fa <sensor_mgr_remove+0x12>
   1a4f0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   1a4f4:	631a      	str	r2, [r3, #48]	; 0x30
   1a4f6:	4770      	bx	lr
   1a4f8:	461a      	mov	r2, r3
   1a4fa:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1a4fe:	4283      	cmp	r3, r0
   1a500:	d1fa      	bne.n	1a4f8 <sensor_mgr_remove+0x10>
   1a502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1a506:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1a50a:	4770      	bx	lr
   1a50c:	2000e6f0 	.word	0x2000e6f0

0001a510 <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   1a510:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   1a512:	6a03      	ldr	r3, [r0, #32]
   1a514:	b993      	cbnz	r3, 1a53c <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a516:	4b15      	ldr	r3, [pc, #84]	; (1a56c <sensor_mgr_insert+0x5c>)
   1a518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1a51a:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a51c:	e002      	b.n	1a524 <sensor_mgr_insert+0x14>
            prev = cursor;
   1a51e:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1a524:	2b00      	cmp	r3, #0
   1a526:	d1fa      	bne.n	1a51e <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   1a528:	b1c9      	cbz	r1, 1a55e <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1a52a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1a52e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   1a532:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   1a536:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a53a:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a53c:	4b0b      	ldr	r3, [pc, #44]	; (1a56c <sensor_mgr_insert+0x5c>)
   1a53e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1a540:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a542:	2b00      	cmp	r3, #0
   1a544:	d0f0      	beq.n	1a528 <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   1a546:	6a1a      	ldr	r2, [r3, #32]
   1a548:	2a00      	cmp	r2, #0
   1a54a:	d0ed      	beq.n	1a528 <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   1a54c:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1a54e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1a550:	1b12      	subs	r2, r2, r4
   1a552:	2a00      	cmp	r2, #0
   1a554:	dbe8      	blt.n	1a528 <sensor_mgr_insert+0x18>
        prev = cursor;
   1a556:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a558:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1a55c:	e7f1      	b.n	1a542 <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   1a55e:	4b03      	ldr	r3, [pc, #12]	; (1a56c <sensor_mgr_insert+0x5c>)
   1a560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a562:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   1a566:	6318      	str	r0, [r3, #48]	; 0x30
   1a568:	e7e5      	b.n	1a536 <sensor_mgr_insert+0x26>
   1a56a:	bf00      	nop
   1a56c:	2000e6f0 	.word	0x2000e6f0

0001a570 <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   1a570:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   1a572:	fab0 f080 	clz	r0, r0
   1a576:	0940      	lsrs	r0, r0, #5
   1a578:	4770      	bx	lr
	...

0001a57c <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   1a57c:	4b01      	ldr	r3, [pc, #4]	; (1a584 <sensor_mgr_evq_set+0x8>)
   1a57e:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   1a580:	4770      	bx	lr
   1a582:	bf00      	nop
   1a584:	2000e6f0 	.word	0x2000e6f0

0001a588 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   1a588:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   1a58c:	e9d1 2300 	ldrd	r2, r3, [r1]
   1a590:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1a594:	ea02 0b04 	and.w	fp, r2, r4
   1a598:	ea03 0c05 	and.w	ip, r3, r5
   1a59c:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   1a5a0:	ea0b 0200 	and.w	r2, fp, r0
   1a5a4:	ea0c 0301 	and.w	r3, ip, r1
   1a5a8:	4313      	orrs	r3, r2
}
   1a5aa:	bf14      	ite	ne
   1a5ac:	2001      	movne	r0, #1
   1a5ae:	2000      	moveq	r0, #0
   1a5b0:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1a5b4:	4770      	bx	lr

0001a5b6 <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   1a5b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a5ba:	b083      	sub	sp, #12
   1a5bc:	4605      	mov	r5, r0
   1a5be:	4689      	mov	r9, r1
   1a5c0:	4690      	mov	r8, r2
   1a5c2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   1a5c6:	790b      	ldrb	r3, [r1, #4]
   1a5c8:	2b01      	cmp	r3, #1
   1a5ca:	d013      	beq.n	1a5f4 <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1a5cc:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1a5ce:	e000      	b.n	1a5d2 <sensor_read_data_func+0x1c>
   1a5d0:	6924      	ldr	r4, [r4, #16]
   1a5d2:	b17c      	cbz	r4, 1a5f4 <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   1a5d4:	e9d4 0100 	ldrd	r0, r1, [r4]
   1a5d8:	ea00 0206 	and.w	r2, r0, r6
   1a5dc:	ea01 0307 	and.w	r3, r1, r7
   1a5e0:	4313      	orrs	r3, r2
   1a5e2:	d0f5      	beq.n	1a5d0 <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   1a5e4:	68a3      	ldr	r3, [r4, #8]
   1a5e6:	68e1      	ldr	r1, [r4, #12]
   1a5e8:	e9cd 6700 	strd	r6, r7, [sp]
   1a5ec:	4642      	mov	r2, r8
   1a5ee:	4628      	mov	r0, r5
   1a5f0:	4798      	blx	r3
   1a5f2:	e7ed      	b.n	1a5d0 <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   1a5f4:	f8d9 3000 	ldr.w	r3, [r9]
   1a5f8:	b14b      	cbz	r3, 1a60e <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1a5fa:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1a5fe:	e9cd 6700 	strd	r6, r7, [sp]
   1a602:	4642      	mov	r2, r8
   1a604:	4628      	mov	r0, r5
   1a606:	4798      	blx	r3
    }

    return (0);
}
   1a608:	b003      	add	sp, #12
   1a60a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1a60e:	2000      	movs	r0, #0
   1a610:	e7fa      	b.n	1a608 <sensor_read_data_func+0x52>
	...

0001a614 <sensor_base_ts_update_event>:
{
   1a614:	b530      	push	{r4, r5, lr}
   1a616:	b087      	sub	sp, #28
    ticks = os_time_get();
   1a618:	f7fe fe30 	bl	1927c <os_time_get>
   1a61c:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1a61e:	a901      	add	r1, sp, #4
   1a620:	a802      	add	r0, sp, #8
   1a622:	f7fe fe65 	bl	192f0 <os_gettimeofday>
    if (rc) {
   1a626:	b138      	cbz	r0, 1a638 <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   1a628:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1a62c:	4621      	mov	r1, r4
   1a62e:	4809      	ldr	r0, [pc, #36]	; (1a654 <sensor_base_ts_update_event+0x40>)
   1a630:	f7fd fdac 	bl	1818c <os_callout_reset>
}
   1a634:	b007      	add	sp, #28
   1a636:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   1a638:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   1a63c:	4d06      	ldr	r5, [pc, #24]	; (1a658 <sensor_base_ts_update_event+0x44>)
   1a63e:	ab06      	add	r3, sp, #24
   1a640:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1a644:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1a648:	9b01      	ldr	r3, [sp, #4]
   1a64a:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1a64c:	f7fd fe28 	bl	182a0 <os_cputime_get32>
   1a650:	6168      	str	r0, [r5, #20]
   1a652:	e7eb      	b.n	1a62c <sensor_base_ts_update_event+0x18>
   1a654:	2000e724 	.word	0x2000e724
   1a658:	2000e748 	.word	0x2000e748

0001a65c <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   1a65c:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1a660:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   1a662:	f7fd fe1d 	bl	182a0 <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   1a666:	4a0e      	ldr	r2, [pc, #56]	; (1a6a0 <sensor_up_timestamp+0x44>)
   1a668:	6955      	ldr	r5, [r2, #20]
   1a66a:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   1a66c:	6460      	str	r0, [r4, #68]	; 0x44
   1a66e:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1a670:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1a674:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1a676:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1a678:	4b0a      	ldr	r3, [pc, #40]	; (1a6a4 <sensor_up_timestamp+0x48>)
   1a67a:	fba3 c305 	umull	ip, r3, r3, r5
   1a67e:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1a680:	eb10 0b03 	adds.w	fp, r0, r3
   1a684:	f141 0c00 	adc.w	ip, r1, #0
   1a688:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   1a68c:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   1a690:	4905      	ldr	r1, [pc, #20]	; (1a6a8 <sensor_up_timestamp+0x4c>)
   1a692:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
   1a696:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1a698:	63a1      	str	r1, [r4, #56]	; 0x38

}
   1a69a:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1a69e:	bf00      	nop
   1a6a0:	2000e748 	.word	0x2000e748
   1a6a4:	431bde83 	.word	0x431bde83
   1a6a8:	000f4240 	.word	0x000f4240

0001a6ac <sensor_mgr_lock>:
{
   1a6ac:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1a6ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a6b2:	4804      	ldr	r0, [pc, #16]	; (1a6c4 <sensor_mgr_lock+0x18>)
   1a6b4:	f7fe fa5c 	bl	18b70 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1a6b8:	b108      	cbz	r0, 1a6be <sensor_mgr_lock+0x12>
   1a6ba:	2809      	cmp	r0, #9
   1a6bc:	d000      	beq.n	1a6c0 <sensor_mgr_lock+0x14>
}
   1a6be:	bd08      	pop	{r3, pc}
        return (0);
   1a6c0:	2000      	movs	r0, #0
   1a6c2:	e7fc      	b.n	1a6be <sensor_mgr_lock+0x12>
   1a6c4:	2000e6f0 	.word	0x2000e6f0

0001a6c8 <sensor_mgr_unlock>:
{
   1a6c8:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1a6ca:	4802      	ldr	r0, [pc, #8]	; (1a6d4 <sensor_mgr_unlock+0xc>)
   1a6cc:	f7fe f9f4 	bl	18ab8 <os_mutex_release>
}
   1a6d0:	bd08      	pop	{r3, pc}
   1a6d2:	bf00      	nop
   1a6d4:	2000e6f0 	.word	0x2000e6f0

0001a6d8 <sensor_mgr_evq_get>:
}
   1a6d8:	4b01      	ldr	r3, [pc, #4]	; (1a6e0 <sensor_mgr_evq_get+0x8>)
   1a6da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1a6dc:	4770      	bx	lr
   1a6de:	bf00      	nop
   1a6e0:	2000e6f0 	.word	0x2000e6f0

0001a6e4 <sensor_mgr_init>:
{
   1a6e4:	b570      	push	{r4, r5, r6, lr}
   1a6e6:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1a6e8:	f7fd ff68 	bl	185bc <os_eventq_dflt_get>
   1a6ec:	f7ff ff46 	bl	1a57c <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   1a6f0:	4b1c      	ldr	r3, [pc, #112]	; (1a764 <sensor_mgr_init+0x80>)
   1a6f2:	9300      	str	r3, [sp, #0]
   1a6f4:	4b1c      	ldr	r3, [pc, #112]	; (1a768 <sensor_mgr_init+0x84>)
   1a6f6:	2218      	movs	r2, #24
   1a6f8:	2105      	movs	r1, #5
   1a6fa:	481c      	ldr	r0, [pc, #112]	; (1a76c <sensor_mgr_init+0x88>)
   1a6fc:	f7fe f8e8 	bl	188d0 <os_mempool_init>
    assert(rc == OS_OK);
   1a700:	bb50      	cbnz	r0, 1a758 <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   1a702:	f7ff ffe9 	bl	1a6d8 <sensor_mgr_evq_get>
   1a706:	4e1a      	ldr	r6, [pc, #104]	; (1a770 <sensor_mgr_init+0x8c>)
   1a708:	2300      	movs	r3, #0
   1a70a:	4a1a      	ldr	r2, [pc, #104]	; (1a774 <sensor_mgr_init+0x90>)
   1a70c:	4601      	mov	r1, r0
   1a70e:	4630      	mov	r0, r6
   1a710:	f7fd fd10 	bl	18134 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   1a714:	ad04      	add	r5, sp, #16
   1a716:	a903      	add	r1, sp, #12
   1a718:	4628      	mov	r0, r5
   1a71a:	f7fe fde9 	bl	192f0 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1a71e:	4c16      	ldr	r4, [pc, #88]	; (1a778 <sensor_mgr_init+0x94>)
   1a720:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1a724:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1a728:	9b03      	ldr	r3, [sp, #12]
   1a72a:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1a72c:	f7fd fdb8 	bl	182a0 <os_cputime_get32>
   1a730:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   1a732:	f7ff ffd1 	bl	1a6d8 <sensor_mgr_evq_get>
   1a736:	4c11      	ldr	r4, [pc, #68]	; (1a77c <sensor_mgr_init+0x98>)
   1a738:	2300      	movs	r3, #0
   1a73a:	4a11      	ldr	r2, [pc, #68]	; (1a780 <sensor_mgr_init+0x9c>)
   1a73c:	4601      	mov	r1, r0
   1a73e:	4620      	mov	r0, r4
   1a740:	f7fd fcf8 	bl	18134 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   1a744:	2180      	movs	r1, #128	; 0x80
   1a746:	4620      	mov	r0, r4
   1a748:	f7fd fd20 	bl	1818c <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   1a74c:	f1a6 000c 	sub.w	r0, r6, #12
   1a750:	f7fe f9a8 	bl	18aa4 <os_mutex_init>
}
   1a754:	b008      	add	sp, #32
   1a756:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   1a758:	2300      	movs	r3, #0
   1a75a:	461a      	mov	r2, r3
   1a75c:	4619      	mov	r1, r3
   1a75e:	4618      	mov	r0, r3
   1a760:	f7fd fb6e 	bl	17e40 <__assert_func>
   1a764:	0001f48c 	.word	0x0001f48c
   1a768:	2000e1ec 	.word	0x2000e1ec
   1a76c:	2000e264 	.word	0x2000e264
   1a770:	2000e6fc 	.word	0x2000e6fc
   1a774:	0001a951 	.word	0x0001a951
   1a778:	2000e748 	.word	0x2000e748
   1a77c:	2000e724 	.word	0x2000e724
   1a780:	0001a615 	.word	0x0001a615

0001a784 <sensor_pkg_init>:
{
   1a784:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1a786:	f7ff ffad 	bl	1a6e4 <sensor_mgr_init>
}
   1a78a:	bd08      	pop	{r3, pc}

0001a78c <sensor_lock>:
{
   1a78c:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   1a78e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a792:	3004      	adds	r0, #4
   1a794:	f7fe f9ec 	bl	18b70 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1a798:	b108      	cbz	r0, 1a79e <sensor_lock+0x12>
   1a79a:	2809      	cmp	r0, #9
   1a79c:	d000      	beq.n	1a7a0 <sensor_lock+0x14>
}
   1a79e:	bd08      	pop	{r3, pc}
        return (0);
   1a7a0:	2000      	movs	r0, #0
   1a7a2:	e7fc      	b.n	1a79e <sensor_lock+0x12>

0001a7a4 <sensor_unlock>:
{
   1a7a4:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1a7a6:	3004      	adds	r0, #4
   1a7a8:	f7fe f986 	bl	18ab8 <os_mutex_release>
}
   1a7ac:	bd08      	pop	{r3, pc}

0001a7ae <sensor_update_nextrun>:
{
   1a7ae:	b530      	push	{r4, r5, lr}
   1a7b0:	b083      	sub	sp, #12
   1a7b2:	4604      	mov	r4, r0
   1a7b4:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1a7b6:	a901      	add	r1, sp, #4
   1a7b8:	6a00      	ldr	r0, [r0, #32]
   1a7ba:	f7fe fdb5 	bl	19328 <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1a7be:	4620      	mov	r0, r4
   1a7c0:	f7ff ffe4 	bl	1a78c <sensor_lock>
    sensor_mgr_remove(sensor);
   1a7c4:	4620      	mov	r0, r4
   1a7c6:	f7ff fe8f 	bl	1a4e8 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1a7ca:	9b01      	ldr	r3, [sp, #4]
   1a7cc:	441d      	add	r5, r3
   1a7ce:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   1a7d0:	4620      	mov	r0, r4
   1a7d2:	f7ff fe9d 	bl	1a510 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1a7d6:	4620      	mov	r0, r4
   1a7d8:	f7ff ffe4 	bl	1a7a4 <sensor_unlock>
}
   1a7dc:	b003      	add	sp, #12
   1a7de:	bd30      	pop	{r4, r5, pc}

0001a7e0 <sensor_calc_nextrun_delta>:
{
   1a7e0:	b538      	push	{r3, r4, r5, lr}
   1a7e2:	4605      	mov	r5, r0
   1a7e4:	460c      	mov	r4, r1
    sensor_lock(sensor);
   1a7e6:	f7ff ffd1 	bl	1a78c <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1a7ea:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1a7ec:	1b0c      	subs	r4, r1, r4
   1a7ee:	d404      	bmi.n	1a7fa <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   1a7f0:	4628      	mov	r0, r5
   1a7f2:	f7ff ffd7 	bl	1a7a4 <sensor_unlock>
}
   1a7f6:	4620      	mov	r0, r4
   1a7f8:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1a7fa:	2400      	movs	r4, #0
   1a7fc:	e7f8      	b.n	1a7f0 <sensor_calc_nextrun_delta+0x10>
	...

0001a800 <sensor_find_min_nextrun_sensor>:
{
   1a800:	b570      	push	{r4, r5, r6, lr}
   1a802:	4606      	mov	r6, r0
   1a804:	460d      	mov	r5, r1
    sensor_mgr_lock();
   1a806:	f7ff ff51 	bl	1a6ac <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1a80a:	4b05      	ldr	r3, [pc, #20]	; (1a820 <sensor_find_min_nextrun_sensor+0x20>)
   1a80c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1a80e:	4631      	mov	r1, r6
   1a810:	4620      	mov	r0, r4
   1a812:	f7ff ffe5 	bl	1a7e0 <sensor_calc_nextrun_delta>
   1a816:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   1a818:	f7ff ff56 	bl	1a6c8 <sensor_mgr_unlock>
}
   1a81c:	4620      	mov	r0, r4
   1a81e:	bd70      	pop	{r4, r5, r6, pc}
   1a820:	2000e6f0 	.word	0x2000e6f0

0001a824 <sensor_mgr_register>:
{
   1a824:	b538      	push	{r3, r4, r5, lr}
   1a826:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   1a828:	f7ff ff40 	bl	1a6ac <sensor_mgr_lock>
    if (rc != 0) {
   1a82c:	4604      	mov	r4, r0
   1a82e:	b108      	cbz	r0, 1a834 <sensor_mgr_register+0x10>
}
   1a830:	4620      	mov	r0, r4
   1a832:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   1a834:	4628      	mov	r0, r5
   1a836:	f7ff ffa9 	bl	1a78c <sensor_lock>
    if (rc != 0) {
   1a83a:	4604      	mov	r4, r0
   1a83c:	2800      	cmp	r0, #0
   1a83e:	d1f7      	bne.n	1a830 <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1a840:	4628      	mov	r0, r5
   1a842:	f7ff fe65 	bl	1a510 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1a846:	4628      	mov	r0, r5
   1a848:	f7ff ffac 	bl	1a7a4 <sensor_unlock>
    sensor_mgr_unlock();
   1a84c:	f7ff ff3c 	bl	1a6c8 <sensor_mgr_unlock>
    return (0);
   1a850:	e7ee      	b.n	1a830 <sensor_mgr_register+0xc>

0001a852 <sensor_init>:
{
   1a852:	b538      	push	{r3, r4, r5, lr}
   1a854:	4604      	mov	r4, r0
   1a856:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   1a858:	2288      	movs	r2, #136	; 0x88
   1a85a:	2100      	movs	r1, #0
   1a85c:	f7fe fef3 	bl	19646 <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1a860:	1d20      	adds	r0, r4, #4
   1a862:	f7fe f91f 	bl	18aa4 <os_mutex_init>
    if (rc != 0) {
   1a866:	4603      	mov	r3, r0
   1a868:	b900      	cbnz	r0, 1a86c <sensor_init+0x1a>
    sensor->s_dev = dev;
   1a86a:	6025      	str	r5, [r4, #0]
}
   1a86c:	4618      	mov	r0, r3
   1a86e:	bd38      	pop	{r3, r4, r5, pc}

0001a870 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   1a870:	b530      	push	{r4, r5, lr}
   1a872:	b089      	sub	sp, #36	; 0x24
   1a874:	4604      	mov	r4, r0
   1a876:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   1a87a:	f7ff ff87 	bl	1a78c <sensor_lock>
    if (rc) {
   1a87e:	4605      	mov	r5, r0
   1a880:	b9f8      	cbnz	r0, 1a8c2 <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   1a882:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a884:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   1a886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a888:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   1a88a:	a904      	add	r1, sp, #16
   1a88c:	4620      	mov	r0, r4
   1a88e:	f7ff fe7b 	bl	1a588 <sensor_mgr_match_bytype>
   1a892:	b1e0      	cbz	r0, 1a8ce <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   1a894:	4620      	mov	r0, r4
   1a896:	f7ff fee1 	bl	1a65c <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1a89a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1a89c:	6819      	ldr	r1, [r3, #0]
   1a89e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a8a0:	9302      	str	r3, [sp, #8]
   1a8a2:	ab06      	add	r3, sp, #24
   1a8a4:	9301      	str	r3, [sp, #4]
   1a8a6:	4b0b      	ldr	r3, [pc, #44]	; (1a8d4 <sensor_read+0x64>)
   1a8a8:	9300      	str	r3, [sp, #0]
   1a8aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1a8ae:	4620      	mov	r0, r4
   1a8b0:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1a8b2:	4605      	mov	r5, r0
   1a8b4:	b128      	cbz	r0, 1a8c2 <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   1a8b6:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1a8b8:	b11b      	cbz	r3, 1a8c2 <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1a8ba:	4602      	mov	r2, r0
   1a8bc:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1a8be:	4620      	mov	r0, r4
   1a8c0:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1a8c2:	4620      	mov	r0, r4
   1a8c4:	f7ff ff6e 	bl	1a7a4 <sensor_unlock>
    return (rc);
}
   1a8c8:	4628      	mov	r0, r5
   1a8ca:	b009      	add	sp, #36	; 0x24
   1a8cc:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1a8ce:	f06f 0503 	mvn.w	r5, #3
   1a8d2:	e7f6      	b.n	1a8c2 <sensor_read+0x52>
   1a8d4:	0001a5b7 	.word	0x0001a5b7

0001a8d8 <sensor_mgr_poll_bytype>:
{
   1a8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a8da:	b085      	sub	sp, #20
   1a8dc:	4616      	mov	r6, r2
   1a8de:	461f      	mov	r7, r3
   1a8e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1a8e2:	b10c      	cbz	r4, 1a8e8 <sensor_mgr_poll_bytype+0x10>
   1a8e4:	8aa3      	ldrh	r3, [r4, #20]
   1a8e6:	b9cb      	cbnz	r3, 1a91c <sensor_mgr_poll_bytype+0x44>
   1a8e8:	4632      	mov	r2, r6
   1a8ea:	463b      	mov	r3, r7
   1a8ec:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1a8ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a8f2:	9102      	str	r1, [sp, #8]
   1a8f4:	2100      	movs	r1, #0
   1a8f6:	9101      	str	r1, [sp, #4]
   1a8f8:	9100      	str	r1, [sp, #0]
   1a8fa:	f7ff ffb9 	bl	1a870 <sensor_read>
        sensor_lock(sensor);
   1a8fe:	4628      	mov	r0, r5
   1a900:	f7ff ff44 	bl	1a78c <sensor_lock>
        if (stt) {
   1a904:	b12c      	cbz	r4, 1a912 <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   1a906:	8aa3      	ldrh	r3, [r4, #20]
   1a908:	b91b      	cbnz	r3, 1a912 <sensor_mgr_poll_bytype+0x3a>
   1a90a:	8a63      	ldrh	r3, [r4, #18]
   1a90c:	b10b      	cbz	r3, 1a912 <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1a90e:	3b01      	subs	r3, #1
   1a910:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1a912:	4628      	mov	r0, r5
   1a914:	f7ff ff46 	bl	1a7a4 <sensor_unlock>
}
   1a918:	b005      	add	sp, #20
   1a91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1a91c:	3b01      	subs	r3, #1
   1a91e:	82a3      	strh	r3, [r4, #20]
}
   1a920:	e7fa      	b.n	1a918 <sensor_mgr_poll_bytype+0x40>

0001a922 <sensor_poll_per_type_trait>:
{
   1a922:	b570      	push	{r4, r5, r6, lr}
   1a924:	b082      	sub	sp, #8
   1a926:	4605      	mov	r5, r0
   1a928:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1a92a:	f7ff ff2f 	bl	1a78c <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1a92e:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1a930:	e007      	b.n	1a942 <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1a932:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a936:	9601      	str	r6, [sp, #4]
   1a938:	9400      	str	r4, [sp, #0]
   1a93a:	4628      	mov	r0, r5
   1a93c:	f7ff ffcc 	bl	1a8d8 <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1a940:	6a24      	ldr	r4, [r4, #32]
   1a942:	2c00      	cmp	r4, #0
   1a944:	d1f5      	bne.n	1a932 <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   1a946:	4628      	mov	r0, r5
   1a948:	f7ff ff2c 	bl	1a7a4 <sensor_unlock>
}
   1a94c:	b002      	add	sp, #8
   1a94e:	bd70      	pop	{r4, r5, r6, pc}

0001a950 <sensor_mgr_wakeup_event>:
{
   1a950:	b570      	push	{r4, r5, r6, lr}
   1a952:	b084      	sub	sp, #16
    now = os_time_get();
   1a954:	f7fe fc92 	bl	1927c <os_time_get>
   1a958:	4605      	mov	r5, r0
    sensor_mgr_lock();
   1a95a:	f7ff fea7 	bl	1a6ac <sensor_mgr_lock>
   1a95e:	e012      	b.n	1a986 <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   1a960:	4620      	mov	r0, r4
   1a962:	f7ff ff1f 	bl	1a7a4 <sensor_unlock>
            sensor_mgr_unlock();
   1a966:	f7ff feaf 	bl	1a6c8 <sensor_mgr_unlock>
}
   1a96a:	b004      	add	sp, #16
   1a96c:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   1a96e:	4632      	mov	r2, r6
   1a970:	4629      	mov	r1, r5
   1a972:	4620      	mov	r0, r4
   1a974:	f7ff ffd5 	bl	1a922 <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   1a978:	4629      	mov	r1, r5
   1a97a:	4620      	mov	r0, r4
   1a97c:	f7ff ff17 	bl	1a7ae <sensor_update_nextrun>
        sensor_unlock(cursor);
   1a980:	4620      	mov	r0, r4
   1a982:	f7ff ff0f 	bl	1a7a4 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1a986:	a903      	add	r1, sp, #12
   1a988:	4628      	mov	r0, r5
   1a98a:	f7ff ff39 	bl	1a800 <sensor_find_min_nextrun_sensor>
   1a98e:	4604      	mov	r4, r0
        sensor_lock(cursor);
   1a990:	f7ff fefc 	bl	1a78c <sensor_lock>
        if (!cursor->s_poll_rate) {
   1a994:	6a23      	ldr	r3, [r4, #32]
   1a996:	2b00      	cmp	r3, #0
   1a998:	d0e2      	beq.n	1a960 <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1a99a:	9e03      	ldr	r6, [sp, #12]
   1a99c:	b96e      	cbnz	r6, 1a9ba <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1a99e:	4620      	mov	r0, r4
   1a9a0:	f7ff fde6 	bl	1a570 <sensor_type_traits_empty>
   1a9a4:	2800      	cmp	r0, #0
   1a9a6:	d0e2      	beq.n	1a96e <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   1a9a8:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1a9ac:	9501      	str	r5, [sp, #4]
   1a9ae:	2100      	movs	r1, #0
   1a9b0:	9100      	str	r1, [sp, #0]
   1a9b2:	4620      	mov	r0, r4
   1a9b4:	f7ff ff90 	bl	1a8d8 <sensor_mgr_poll_bytype>
   1a9b8:	e7de      	b.n	1a978 <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1a9ba:	f7ff fe85 	bl	1a6c8 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1a9be:	9903      	ldr	r1, [sp, #12]
   1a9c0:	4801      	ldr	r0, [pc, #4]	; (1a9c8 <sensor_mgr_wakeup_event+0x78>)
   1a9c2:	f7fd fbe3 	bl	1818c <os_callout_reset>
   1a9c6:	e7d0      	b.n	1a96a <sensor_mgr_wakeup_event+0x1a>
   1a9c8:	2000e6fc 	.word	0x2000e6fc

0001a9cc <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1a9cc:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1a9ce:	2101      	movs	r1, #1
   1a9d0:	4806      	ldr	r0, [pc, #24]	; (1a9ec <init_sensor_coap+0x20>)
   1a9d2:	f7fe faf1 	bl	18fb8 <os_sem_init>
    assert(rc == OS_OK);
   1a9d6:	b918      	cbnz	r0, 1a9e0 <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   1a9d8:	4b05      	ldr	r3, [pc, #20]	; (1a9f0 <init_sensor_coap+0x24>)
   1a9da:	2201      	movs	r2, #1
   1a9dc:	701a      	strb	r2, [r3, #0]
}
   1a9de:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   1a9e0:	2300      	movs	r3, #0
   1a9e2:	461a      	mov	r2, r3
   1a9e4:	4619      	mov	r1, r3
   1a9e6:	4618      	mov	r0, r3
   1a9e8:	f7fd fa2a 	bl	17e40 <__assert_func>
   1a9ec:	2000e280 	.word	0x2000e280
   1a9f0:	2000e288 	.word	0x2000e288

0001a9f4 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1a9f4:	4b04      	ldr	r3, [pc, #16]	; (1aa08 <is_sensor_node+0x14>)
   1a9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a9fa:	4313      	orrs	r3, r2
   1a9fc:	d101      	bne.n	1aa02 <is_sensor_node+0xe>
    return false;
   1a9fe:	2000      	movs	r0, #0
}
   1aa00:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1aa02:	2001      	movs	r0, #1
   1aa04:	4770      	bx	lr
   1aa06:	bf00      	nop
   1aa08:	2000e2a0 	.word	0x2000e2a0

0001aa0c <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1aa0c:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1aa0e:	4b16      	ldr	r3, [pc, #88]	; (1aa68 <get_hardware_id+0x5c>)
   1aa10:	681b      	ldr	r3, [r3, #0]
   1aa12:	b10b      	cbz	r3, 1aa18 <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   1aa14:	4815      	ldr	r0, [pc, #84]	; (1aa6c <get_hardware_id+0x60>)
   1aa16:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   1aa18:	f000 fcee 	bl	1b3f8 <hal_bsp_hw_id_len>
   1aa1c:	4b12      	ldr	r3, [pc, #72]	; (1aa68 <get_hardware_id+0x5c>)
   1aa1e:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1aa20:	280b      	cmp	r0, #11
   1aa22:	d914      	bls.n	1aa4e <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1aa24:	210c      	movs	r1, #12
   1aa26:	4811      	ldr	r0, [pc, #68]	; (1aa6c <get_hardware_id+0x60>)
   1aa28:	f000 fce8 	bl	1b3fc <hal_bsp_hw_id>
   1aa2c:	4b0e      	ldr	r3, [pc, #56]	; (1aa68 <get_hardware_id+0x5c>)
   1aa2e:	6018      	str	r0, [r3, #0]
   1aa30:	2800      	cmp	r0, #0
   1aa32:	dd12      	ble.n	1aa5a <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   1aa34:	490e      	ldr	r1, [pc, #56]	; (1aa70 <get_hardware_id+0x64>)
   1aa36:	480f      	ldr	r0, [pc, #60]	; (1aa74 <get_hardware_id+0x68>)
   1aa38:	f7fc fb3a 	bl	170b0 <console_printf>
   1aa3c:	4b0a      	ldr	r3, [pc, #40]	; (1aa68 <get_hardware_id+0x5c>)
   1aa3e:	6819      	ldr	r1, [r3, #0]
   1aa40:	480a      	ldr	r0, [pc, #40]	; (1aa6c <get_hardware_id+0x60>)
   1aa42:	f7fc fac5 	bl	16fd0 <console_dump>
   1aa46:	480c      	ldr	r0, [pc, #48]	; (1aa78 <get_hardware_id+0x6c>)
   1aa48:	f7fc fb32 	bl	170b0 <console_printf>
   1aa4c:	e7e2      	b.n	1aa14 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1aa4e:	2300      	movs	r3, #0
   1aa50:	461a      	mov	r2, r3
   1aa52:	4619      	mov	r1, r3
   1aa54:	4618      	mov	r0, r3
   1aa56:	f7fd f9f3 	bl	17e40 <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1aa5a:	2300      	movs	r3, #0
   1aa5c:	461a      	mov	r2, r3
   1aa5e:	4619      	mov	r1, r3
   1aa60:	4618      	mov	r0, r3
   1aa62:	f7fd f9ed 	bl	17e40 <__assert_func>
   1aa66:	bf00      	nop
   1aa68:	2000e298 	.word	0x2000e298
   1aa6c:	2000e28c 	.word	0x2000e28c
   1aa70:	0001f530 	.word	0x0001f530
   1aa74:	0001f4e8 	.word	0x0001f4e8
   1aa78:	0001f648 	.word	0x0001f648

0001aa7c <is_collector_node>:
bool is_collector_node(void) {
   1aa7c:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   1aa7e:	f7ff ffc5 	bl	1aa0c <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1aa82:	220c      	movs	r2, #12
   1aa84:	4903      	ldr	r1, [pc, #12]	; (1aa94 <is_collector_node+0x18>)
   1aa86:	f7fe fdad 	bl	195e4 <memcmp>
   1aa8a:	b108      	cbz	r0, 1aa90 <is_collector_node+0x14>
    return false; 
   1aa8c:	2000      	movs	r0, #0
}
   1aa8e:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1aa90:	2001      	movs	r0, #1
   1aa92:	e7fc      	b.n	1aa8e <is_collector_node+0x12>
   1aa94:	0001f4a0 	.word	0x0001f4a0

0001aa98 <is_standalone_node>:
bool is_standalone_node(void) {
   1aa98:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1aa9a:	f7ff ffef 	bl	1aa7c <is_collector_node>
   1aa9e:	b928      	cbnz	r0, 1aaac <is_standalone_node+0x14>
   1aaa0:	4604      	mov	r4, r0
   1aaa2:	f7ff ffa7 	bl	1a9f4 <is_sensor_node>
   1aaa6:	b910      	cbnz	r0, 1aaae <is_standalone_node+0x16>
   1aaa8:	2401      	movs	r4, #1
   1aaaa:	e000      	b.n	1aaae <is_standalone_node+0x16>
    return false;
   1aaac:	2400      	movs	r4, #0
}
   1aaae:	4620      	mov	r0, r4
   1aab0:	bd10      	pop	{r4, pc}
	...

0001aab4 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   1aab4:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1aab6:	2400      	movs	r4, #0
   1aab8:	2c04      	cmp	r4, #4
   1aaba:	dc15      	bgt.n	1aae8 <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1aabc:	4b23      	ldr	r3, [pc, #140]	; (1ab4c <sensor_network_init+0x98>)
   1aabe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aac6:	4922      	ldr	r1, [pc, #136]	; (1ab50 <sensor_network_init+0x9c>)
   1aac8:	4822      	ldr	r0, [pc, #136]	; (1ab54 <sensor_network_init+0xa0>)
   1aaca:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1aace:	f000 fcaf 	bl	1b430 <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1aad2:	3001      	adds	r0, #1
   1aad4:	280b      	cmp	r0, #11
   1aad6:	dc01      	bgt.n	1aadc <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1aad8:	3401      	adds	r4, #1
   1aada:	e7ed      	b.n	1aab8 <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1aadc:	2300      	movs	r3, #0
   1aade:	461a      	mov	r2, r3
   1aae0:	4619      	mov	r1, r3
   1aae2:	4618      	mov	r0, r3
   1aae4:	f7fd f9ac 	bl	17e40 <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   1aae8:	f7ff ff90 	bl	1aa0c <get_hardware_id>
   1aaec:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1aaee:	2400      	movs	r4, #0
   1aaf0:	2c04      	cmp	r4, #4
   1aaf2:	dc19      	bgt.n	1ab28 <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   1aaf4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1aaf8:	0093      	lsls	r3, r2, #2
   1aafa:	220c      	movs	r2, #12
   1aafc:	4916      	ldr	r1, [pc, #88]	; (1ab58 <sensor_network_init+0xa4>)
   1aafe:	4419      	add	r1, r3
   1ab00:	4628      	mov	r0, r5
   1ab02:	f7fe fd6f 	bl	195e4 <memcmp>
   1ab06:	b108      	cbz	r0, 1ab0c <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1ab08:	3401      	adds	r4, #1
   1ab0a:	e7f1      	b.n	1aaf0 <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
   1ab0c:	4b0f      	ldr	r3, [pc, #60]	; (1ab4c <sensor_network_init+0x98>)
   1ab0e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1ab12:	e9d3 0100 	ldrd	r0, r1, [r3]
   1ab16:	4b11      	ldr	r3, [pc, #68]	; (1ab5c <sensor_network_init+0xa8>)
   1ab18:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1ab1c:	1c63      	adds	r3, r4, #1
   1ab1e:	4a10      	ldr	r2, [pc, #64]	; (1ab60 <sensor_network_init+0xac>)
   1ab20:	4910      	ldr	r1, [pc, #64]	; (1ab64 <sensor_network_init+0xb0>)
   1ab22:	4811      	ldr	r0, [pc, #68]	; (1ab68 <sensor_network_init+0xb4>)
   1ab24:	f7fc fac4 	bl	170b0 <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1ab28:	f7ff ffa8 	bl	1aa7c <is_collector_node>
   1ab2c:	b940      	cbnz	r0, 1ab40 <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1ab2e:	f7ff ffb3 	bl	1aa98 <is_standalone_node>
   1ab32:	b150      	cbz	r0, 1ab4a <sensor_network_init+0x96>
   1ab34:	4a0a      	ldr	r2, [pc, #40]	; (1ab60 <sensor_network_init+0xac>)
   1ab36:	490b      	ldr	r1, [pc, #44]	; (1ab64 <sensor_network_init+0xb0>)
   1ab38:	480c      	ldr	r0, [pc, #48]	; (1ab6c <sensor_network_init+0xb8>)
   1ab3a:	f7fc fab9 	bl	170b0 <console_printf>
}
   1ab3e:	e004      	b.n	1ab4a <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1ab40:	4a07      	ldr	r2, [pc, #28]	; (1ab60 <sensor_network_init+0xac>)
   1ab42:	4908      	ldr	r1, [pc, #32]	; (1ab64 <sensor_network_init+0xb0>)
   1ab44:	480a      	ldr	r0, [pc, #40]	; (1ab70 <sensor_network_init+0xbc>)
   1ab46:	f7fc fab3 	bl	170b0 <console_printf>
}
   1ab4a:	bd38      	pop	{r3, r4, r5, pc}
   1ab4c:	0001f548 	.word	0x0001f548
   1ab50:	0001f4f0 	.word	0x0001f4f0
   1ab54:	20000130 	.word	0x20000130
   1ab58:	0001f4ac 	.word	0x0001f4ac
   1ab5c:	2000e2a0 	.word	0x2000e2a0
   1ab60:	0001f4f8 	.word	0x0001f4f8
   1ab64:	0001f530 	.word	0x0001f530
   1ab68:	0001f500 	.word	0x0001f500
   1ab6c:	0001f520 	.word	0x0001f520
   1ab70:	0001f510 	.word	0x0001f510

0001ab74 <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1ab74:	b530      	push	{r4, r5, lr}
   1ab76:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1ab78:	2200      	movs	r2, #0
   1ab7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ab7e:	4810      	ldr	r0, [pc, #64]	; (1abc0 <config_device+0x4c>)
   1ab80:	f7fd fc2c 	bl	183dc <os_dev_open>
    assert(dev != NULL);
   1ab84:	b178      	cbz	r0, 1aba6 <config_device+0x32>
   1ab86:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1ab88:	4668      	mov	r0, sp
   1ab8a:	f000 f86c 	bl	1ac66 <temp_stub_default_cfg>
    assert(rc == 0);
   1ab8e:	b980      	cbnz	r0, 1abb2 <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1ab90:	4669      	mov	r1, sp
   1ab92:	4620      	mov	r0, r4
   1ab94:	f000 f900 	bl	1ad98 <temp_stub_config>
   1ab98:	4605      	mov	r5, r0
    os_dev_close(dev);
   1ab9a:	4620      	mov	r0, r4
   1ab9c:	f7fd fc40 	bl	18420 <os_dev_close>
    return rc;
}
   1aba0:	4628      	mov	r0, r5
   1aba2:	b003      	add	sp, #12
   1aba4:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1aba6:	2300      	movs	r3, #0
   1aba8:	461a      	mov	r2, r3
   1abaa:	4619      	mov	r1, r3
   1abac:	4618      	mov	r0, r3
   1abae:	f7fd f947 	bl	17e40 <__assert_func>
    assert(rc == 0);
   1abb2:	2300      	movs	r3, #0
   1abb4:	461a      	mov	r2, r3
   1abb6:	4619      	mov	r1, r3
   1abb8:	4618      	mov	r0, r3
   1abba:	f7fd f941 	bl	17e40 <__assert_func>
   1abbe:	bf00      	nop
   1abc0:	0001f570 	.word	0x0001f570

0001abc4 <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1abc4:	b510      	push	{r4, lr}
   1abc6:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1abc8:	4c10      	ldr	r4, [pc, #64]	; (1ac0c <temp_stub_create+0x48>)
   1abca:	4621      	mov	r1, r4
   1abcc:	4810      	ldr	r0, [pc, #64]	; (1ac10 <temp_stub_create+0x4c>)
   1abce:	f7fc fa6f 	bl	170b0 <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1abd2:	4b10      	ldr	r3, [pc, #64]	; (1ac14 <temp_stub_create+0x50>)
   1abd4:	9301      	str	r3, [sp, #4]
   1abd6:	4b10      	ldr	r3, [pc, #64]	; (1ac18 <temp_stub_create+0x54>)
   1abd8:	9300      	str	r3, [sp, #0]
   1abda:	2300      	movs	r3, #0
   1abdc:	2201      	movs	r2, #1
   1abde:	4621      	mov	r1, r4
   1abe0:	480e      	ldr	r0, [pc, #56]	; (1ac1c <temp_stub_create+0x58>)
   1abe2:	f7fd fbb5 	bl	18350 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1abe6:	b920      	cbnz	r0, 1abf2 <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1abe8:	f7ff ffc4 	bl	1ab74 <config_device>
    assert(rc == 0);
   1abec:	b938      	cbnz	r0, 1abfe <temp_stub_create+0x3a>
}
   1abee:	b002      	add	sp, #8
   1abf0:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1abf2:	2300      	movs	r3, #0
   1abf4:	461a      	mov	r2, r3
   1abf6:	4619      	mov	r1, r3
   1abf8:	4618      	mov	r0, r3
   1abfa:	f7fd f921 	bl	17e40 <__assert_func>
    assert(rc == 0);
   1abfe:	2300      	movs	r3, #0
   1ac00:	461a      	mov	r2, r3
   1ac02:	4619      	mov	r1, r3
   1ac04:	4618      	mov	r0, r3
   1ac06:	f7fd f91b 	bl	17e40 <__assert_func>
   1ac0a:	bf00      	nop
   1ac0c:	0001f570 	.word	0x0001f570
   1ac10:	0001f57c 	.word	0x0001f57c
   1ac14:	2000e2e0 	.word	0x2000e2e0
   1ac18:	0001ac75 	.word	0x0001ac75
   1ac1c:	2000e2f8 	.word	0x2000e2f8

0001ac20 <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1ac20:	2000      	movs	r0, #0
   1ac22:	4770      	bx	lr

0001ac24 <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1ac24:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1ac28:	2100      	movs	r1, #0
   1ac2a:	ea50 0301 	orrs.w	r3, r0, r1
   1ac2e:	d004      	beq.n	1ac3a <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1ac30:	9b00      	ldr	r3, [sp, #0]
   1ac32:	2201      	movs	r2, #1
   1ac34:	701a      	strb	r2, [r3, #0]
    return (0);
   1ac36:	2000      	movs	r0, #0
   1ac38:	4770      	bx	lr
err:
    return (rc);
   1ac3a:	f06f 0001 	mvn.w	r0, #1
}
   1ac3e:	4770      	bx	lr

0001ac40 <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1ac40:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1ac42:	b120      	cbz	r0, 1ac4e <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1ac44:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1ac48:	d007      	beq.n	1ac5a <temp_stub_open+0x1a>
}
   1ac4a:	2000      	movs	r0, #0
   1ac4c:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1ac4e:	2300      	movs	r3, #0
   1ac50:	461a      	mov	r2, r3
   1ac52:	4619      	mov	r1, r3
   1ac54:	4618      	mov	r0, r3
   1ac56:	f7fd f8f3 	bl	17e40 <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1ac5a:	2300      	movs	r3, #0
   1ac5c:	461a      	mov	r2, r3
   1ac5e:	4619      	mov	r1, r3
   1ac60:	4618      	mov	r0, r3
   1ac62:	f7fd f8ed 	bl	17e40 <__assert_func>

0001ac66 <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1ac66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ac6a:	2300      	movs	r3, #0
   1ac6c:	e9c0 2300 	strd	r2, r3, [r0]
}
   1ac70:	2000      	movs	r0, #0
   1ac72:	4770      	bx	lr

0001ac74 <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1ac76:	b379      	cbz	r1, 1acd8 <temp_stub_init+0x64>
   1ac78:	460d      	mov	r5, r1
   1ac7a:	b380      	cbz	r0, 1acde <temp_stub_init+0x6a>
   1ac7c:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1ac7e:	30b0      	adds	r0, #176	; 0xb0
   1ac80:	f7ff fff1 	bl	1ac66 <temp_stub_default_cfg>
    if (rc) { goto err; }
   1ac84:	4603      	mov	r3, r0
   1ac86:	b108      	cbz	r0, 1ac8c <temp_stub_init+0x18>
}
   1ac88:	4618      	mov	r0, r3
   1ac8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1ac8c:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1ac90:	4621      	mov	r1, r4
   1ac92:	4630      	mov	r0, r6
   1ac94:	f7ff fddd 	bl	1a852 <sensor_init>
    if (rc != 0) { goto err; }
   1ac98:	4603      	mov	r3, r0
   1ac9a:	2800      	cmp	r0, #0
   1ac9c:	d1f4      	bne.n	1ac88 <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1ac9e:	4b11      	ldr	r3, [pc, #68]	; (1ace4 <temp_stub_init+0x70>)
   1aca0:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1aca2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1aca6:	2300      	movs	r3, #0
   1aca8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1acac:	682a      	ldr	r2, [r5, #0]
   1acae:	686f      	ldr	r7, [r5, #4]
   1acb0:	68a8      	ldr	r0, [r5, #8]
   1acb2:	68e9      	ldr	r1, [r5, #12]
   1acb4:	6722      	str	r2, [r4, #112]	; 0x70
   1acb6:	6767      	str	r7, [r4, #116]	; 0x74
   1acb8:	67a0      	str	r0, [r4, #120]	; 0x78
   1acba:	67e1      	str	r1, [r4, #124]	; 0x7c
   1acbc:	692a      	ldr	r2, [r5, #16]
   1acbe:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1acc2:	4630      	mov	r0, r6
   1acc4:	f7ff fdae 	bl	1a824 <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1acc8:	4603      	mov	r3, r0
   1acca:	2800      	cmp	r0, #0
   1accc:	d1dc      	bne.n	1ac88 <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1acce:	4a06      	ldr	r2, [pc, #24]	; (1ace8 <temp_stub_init+0x74>)
   1acd0:	6022      	str	r2, [r4, #0]
   1acd2:	4a06      	ldr	r2, [pc, #24]	; (1acec <temp_stub_init+0x78>)
   1acd4:	60e2      	str	r2, [r4, #12]
    return (0);
   1acd6:	e7d7      	b.n	1ac88 <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1acd8:	f06f 0308 	mvn.w	r3, #8
   1acdc:	e7d4      	b.n	1ac88 <temp_stub_init+0x14>
   1acde:	f06f 0308 	mvn.w	r3, #8
   1ace2:	e7d1      	b.n	1ac88 <temp_stub_init+0x14>
   1ace4:	0001f58c 	.word	0x0001f58c
   1ace8:	0001ac41 	.word	0x0001ac41
   1acec:	0001ac21 	.word	0x0001ac21

0001acf0 <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1acf0:	b538      	push	{r3, r4, r5, lr}
   1acf2:	460d      	mov	r5, r1
   1acf4:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1acf6:	4808      	ldr	r0, [pc, #32]	; (1ad18 <temp_stub_get_raw_temperature+0x28>)
   1acf8:	f7fc f9da 	bl	170b0 <console_printf>
    assert(temp_sum);
   1acfc:	b134      	cbz	r4, 1ad0c <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1acfe:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1ad02:	fb01 f105 	mul.w	r1, r1, r5
   1ad06:	6021      	str	r1, [r4, #0]
}
   1ad08:	2000      	movs	r0, #0
   1ad0a:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1ad0c:	2300      	movs	r3, #0
   1ad0e:	461a      	mov	r2, r3
   1ad10:	4619      	mov	r1, r3
   1ad12:	4618      	mov	r0, r3
   1ad14:	f7fd f894 	bl	17e40 <__assert_func>
   1ad18:	0001f5b4 	.word	0x0001f5b4

0001ad1c <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1ad1c:	b530      	push	{r4, r5, lr}
   1ad1e:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1ad20:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1ad24:	2500      	movs	r5, #0
   1ad26:	ea54 0305 	orrs.w	r3, r4, r5
   1ad2a:	d032      	beq.n	1ad92 <temp_stub_sensor_read+0x76>
   1ad2c:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1ad2e:	6805      	ldr	r5, [r0, #0]
   1ad30:	b165      	cbz	r5, 1ad4c <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1ad32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ad36:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1ad38:	2200      	movs	r2, #0
   1ad3a:	4611      	mov	r1, r2
   1ad3c:	4628      	mov	r0, r5
   1ad3e:	f7ff ff7f 	bl	1ac40 <temp_stub_open>
        if (rc) { goto err; }
   1ad42:	4603      	mov	r3, r0
   1ad44:	b140      	cbz	r0, 1ad58 <temp_stub_sensor_read+0x3c>
}
   1ad46:	4618      	mov	r0, r3
   1ad48:	b007      	add	sp, #28
   1ad4a:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1ad4c:	2300      	movs	r3, #0
   1ad4e:	461a      	mov	r2, r3
   1ad50:	4619      	mov	r1, r3
   1ad52:	4618      	mov	r0, r3
   1ad54:	f7fd f874 	bl	17e40 <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1ad58:	2300      	movs	r3, #0
   1ad5a:	aa03      	add	r2, sp, #12
   1ad5c:	2101      	movs	r1, #1
   1ad5e:	4628      	mov	r0, r5
   1ad60:	f7ff ffc6 	bl	1acf0 <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1ad64:	4603      	mov	r3, r0
   1ad66:	2800      	cmp	r0, #0
   1ad68:	d1ed      	bne.n	1ad46 <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1ad6a:	9a03      	ldr	r2, [sp, #12]
   1ad6c:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1ad6e:	2201      	movs	r2, #1
   1ad70:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1ad74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ad76:	2a00      	cmp	r2, #0
   1ad78:	d0e5      	beq.n	1ad46 <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1ad7a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1ad7e:	2300      	movs	r3, #0
   1ad80:	e9cd 2300 	strd	r2, r3, [sp]
   1ad84:	aa04      	add	r2, sp, #16
   1ad86:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ad88:	4620      	mov	r0, r4
   1ad8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ad8c:	4798      	blx	r3
   1ad8e:	4603      	mov	r3, r0
   1ad90:	e7d9      	b.n	1ad46 <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1ad92:	f06f 0301 	mvn.w	r3, #1
   1ad96:	e7d6      	b.n	1ad46 <temp_stub_sensor_read+0x2a>

0001ad98 <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1ad98:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1ad9a:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1ad9e:	d009      	beq.n	1adb4 <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1ada0:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1ada4:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1ada8:	e9d1 2300 	ldrd	r2, r3, [r1]
   1adac:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1adb0:	2000      	movs	r0, #0
   1adb2:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1adb4:	2300      	movs	r3, #0
   1adb6:	461a      	mov	r2, r3
   1adb8:	4619      	mov	r1, r3
   1adba:	4618      	mov	r0, r3
   1adbc:	f7fd f840 	bl	17e40 <__assert_func>

0001adc0 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   1adc0:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1adc2:	e002      	b.n	1adca <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   1adc4:	4618      	mov	r0, r3
   1adc6:	f000 f85b 	bl	1ae80 <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1adca:	4808      	ldr	r0, [pc, #32]	; (1adec <oc_buffer_tx+0x2c>)
   1adcc:	f7fd fc03 	bl	185d6 <os_mqueue_get>
   1add0:	4603      	mov	r3, r0
   1add2:	b148      	cbz	r0, 1ade8 <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   1add4:	2200      	movs	r2, #0
   1add6:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   1add8:	7e1a      	ldrb	r2, [r3, #24]
   1adda:	f012 0f08 	tst.w	r2, #8
   1adde:	d0f1      	beq.n	1adc4 <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   1ade0:	4618      	mov	r0, r3
   1ade2:	f000 f85d 	bl	1aea0 <oc_send_multicast_message>
   1ade6:	e7f0      	b.n	1adca <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   1ade8:	bd08      	pop	{r3, pc}
   1adea:	bf00      	nop
   1adec:	2000e3d0 	.word	0x2000e3d0

0001adf0 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   1adf0:	b500      	push	{lr}
   1adf2:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   1adf4:	4808      	ldr	r0, [pc, #32]	; (1ae18 <oc_buffer_rx+0x28>)
   1adf6:	f7fd fbee 	bl	185d6 <os_mqueue_get>
   1adfa:	9001      	str	r0, [sp, #4]
   1adfc:	b140      	cbz	r0, 1ae10 <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   1adfe:	a801      	add	r0, sp, #4
   1ae00:	f000 faa2 	bl	1b348 <__wrap_coap_receive>
#endif
        if (m) {
   1ae04:	9801      	ldr	r0, [sp, #4]
   1ae06:	2800      	cmp	r0, #0
   1ae08:	d0f4      	beq.n	1adf4 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   1ae0a:	f7fd fc59 	bl	186c0 <os_mbuf_free_chain>
   1ae0e:	e7f1      	b.n	1adf4 <oc_buffer_rx+0x4>
        }
    }
}
   1ae10:	b003      	add	sp, #12
   1ae12:	f85d fb04 	ldr.w	pc, [sp], #4
   1ae16:	bf00      	nop
   1ae18:	2000e3b8 	.word	0x2000e3b8

0001ae1c <oc_buffer_init>:

void
oc_buffer_init(void)
{
   1ae1c:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   1ae1e:	2200      	movs	r2, #0
   1ae20:	4904      	ldr	r1, [pc, #16]	; (1ae34 <oc_buffer_init+0x18>)
   1ae22:	4805      	ldr	r0, [pc, #20]	; (1ae38 <oc_buffer_init+0x1c>)
   1ae24:	f7fd fbce 	bl	185c4 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   1ae28:	2200      	movs	r2, #0
   1ae2a:	4904      	ldr	r1, [pc, #16]	; (1ae3c <oc_buffer_init+0x20>)
   1ae2c:	4804      	ldr	r0, [pc, #16]	; (1ae40 <oc_buffer_init+0x24>)
   1ae2e:	f7fd fbc9 	bl	185c4 <os_mqueue_init>
}
   1ae32:	bd08      	pop	{r3, pc}
   1ae34:	0001adf1 	.word	0x0001adf1
   1ae38:	2000e3b8 	.word	0x2000e3b8
   1ae3c:	0001adc1 	.word	0x0001adc1
   1ae40:	2000e3d0 	.word	0x2000e3d0

0001ae44 <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   1ae44:	b500      	push	{lr}
   1ae46:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   1ae48:	4b07      	ldr	r3, [pc, #28]	; (1ae68 <oc_ri_mem_init+0x24>)
   1ae4a:	9300      	str	r3, [sp, #0]
   1ae4c:	4b07      	ldr	r3, [pc, #28]	; (1ae6c <oc_ri_mem_init+0x28>)
   1ae4e:	2264      	movs	r2, #100	; 0x64
   1ae50:	2102      	movs	r1, #2
   1ae52:	4807      	ldr	r0, [pc, #28]	; (1ae70 <oc_ri_mem_init+0x2c>)
   1ae54:	f7fd fd3c 	bl	188d0 <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   1ae58:	f000 f860 	bl	1af1c <oc_rep_init>
#endif
    oc_buffer_init();
   1ae5c:	f7ff ffde 	bl	1ae1c <oc_buffer_init>
}
   1ae60:	b003      	add	sp, #12
   1ae62:	f85d fb04 	ldr.w	pc, [sp], #4
   1ae66:	bf00      	nop
   1ae68:	0001f5cc 	.word	0x0001f5cc
   1ae6c:	2000e3e8 	.word	0x2000e3e8
   1ae70:	2000e4b0 	.word	0x2000e4b0

0001ae74 <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   1ae74:	4b01      	ldr	r3, [pc, #4]	; (1ae7c <oc_evq_set+0x8>)
   1ae76:	6018      	str	r0, [r3, #0]
}
   1ae78:	4770      	bx	lr
   1ae7a:	bf00      	nop
   1ae7c:	2000e4cc 	.word	0x2000e4cc

0001ae80 <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   1ae80:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   1ae82:	7e03      	ldrb	r3, [r0, #24]
   1ae84:	f003 0307 	and.w	r3, r3, #7
   1ae88:	4a04      	ldr	r2, [pc, #16]	; (1ae9c <oc_send_buffer+0x1c>)
   1ae8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   1ae8e:	b113      	cbz	r3, 1ae96 <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   1ae90:	68db      	ldr	r3, [r3, #12]
   1ae92:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   1ae94:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   1ae96:	f7fd fc13 	bl	186c0 <os_mbuf_free_chain>
}
   1ae9a:	e7fb      	b.n	1ae94 <oc_send_buffer+0x14>
   1ae9c:	2000e760 	.word	0x2000e760

0001aea0 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   1aea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aea4:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1aea6:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   1aea8:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1aeaa:	e002      	b.n	1aeb2 <oc_send_multicast_message+0x12>
   1aeac:	4635      	mov	r5, r6
   1aeae:	3401      	adds	r4, #1
   1aeb0:	462e      	mov	r6, r5
   1aeb2:	2c07      	cmp	r4, #7
   1aeb4:	dc12      	bgt.n	1aedc <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   1aeb6:	4b0c      	ldr	r3, [pc, #48]	; (1aee8 <oc_send_multicast_message+0x48>)
   1aeb8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1aebc:	2d00      	cmp	r5, #0
   1aebe:	d0f5      	beq.n	1aeac <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   1aec0:	2e00      	cmp	r6, #0
   1aec2:	d0f4      	beq.n	1aeae <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   1aec4:	4638      	mov	r0, r7
   1aec6:	f7fd fc6b 	bl	187a0 <os_mbuf_dup>
   1aeca:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   1aecc:	6933      	ldr	r3, [r6, #16]
   1aece:	4638      	mov	r0, r7
   1aed0:	4798      	blx	r3
            if (!n) {
   1aed2:	f1b8 0f00 	cmp.w	r8, #0
   1aed6:	d005      	beq.n	1aee4 <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   1aed8:	4647      	mov	r7, r8
   1aeda:	e7e8      	b.n	1aeae <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   1aedc:	b116      	cbz	r6, 1aee4 <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   1aede:	6933      	ldr	r3, [r6, #16]
   1aee0:	4638      	mov	r0, r7
   1aee2:	4798      	blx	r3
    }
}
   1aee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aee8:	2000e760 	.word	0x2000e760

0001aeec <oc_init>:
    return rc;
}

void
oc_init(void)
{
   1aeec:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1aeee:	4b07      	ldr	r3, [pc, #28]	; (1af0c <oc_init+0x20>)
   1aef0:	781b      	ldrb	r3, [r3, #0]
   1aef2:	b133      	cbz	r3, 1af02 <oc_init+0x16>
    oc_ri_mem_init();
   1aef4:	f7ff ffa6 	bl	1ae44 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   1aef8:	f7fd fb60 	bl	185bc <os_eventq_dflt_get>
   1aefc:	f7ff ffba 	bl	1ae74 <oc_evq_set>
}
   1af00:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1af02:	461a      	mov	r2, r3
   1af04:	4619      	mov	r1, r3
   1af06:	4618      	mov	r0, r3
   1af08:	f7fc ff9a 	bl	17e40 <__assert_func>
   1af0c:	2000e5bc 	.word	0x2000e5bc

0001af10 <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1af10:	4770      	bx	lr

0001af12 <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1af12:	4770      	bx	lr

0001af14 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1af14:	4770      	bx	lr

0001af16 <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1af16:	4770      	bx	lr

0001af18 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1af18:	4770      	bx	lr
	...

0001af1c <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   1af1c:	b500      	push	{lr}
   1af1e:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   1af20:	4b05      	ldr	r3, [pc, #20]	; (1af38 <oc_rep_init+0x1c>)
   1af22:	9300      	str	r3, [sp, #0]
   1af24:	4b05      	ldr	r3, [pc, #20]	; (1af3c <oc_rep_init+0x20>)
   1af26:	2218      	movs	r2, #24
   1af28:	2102      	movs	r1, #2
   1af2a:	4805      	ldr	r0, [pc, #20]	; (1af40 <oc_rep_init+0x24>)
   1af2c:	f7fd fcd0 	bl	188d0 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   1af30:	b003      	add	sp, #12
   1af32:	f85d fb04 	ldr.w	pc, [sp], #4
   1af36:	bf00      	nop
   1af38:	0001f5d8 	.word	0x0001f5d8
   1af3c:	2000e4ec 	.word	0x2000e4ec
   1af40:	2000e4d0 	.word	0x2000e4d0

0001af44 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1af44:	b570      	push	{r4, r5, r6, lr}
   1af46:	b086      	sub	sp, #24
   1af48:	4605      	mov	r5, r0
   1af4a:	460e      	mov	r6, r1
   1af4c:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1af4e:	2300      	movs	r3, #0
   1af50:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1af52:	f000 f9ad 	bl	1b2b0 <mfg_init>

    mfg_open(&reader);
   1af56:	a801      	add	r0, sp, #4
   1af58:	f000 f9c6 	bl	1b2e8 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1af5c:	6823      	ldr	r3, [r4, #0]
   1af5e:	42ab      	cmp	r3, r5
   1af60:	da29      	bge.n	1afb6 <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1af62:	2102      	movs	r1, #2
   1af64:	a801      	add	r0, sp, #4
   1af66:	f000 f98c 	bl	1b282 <mfg_seek_next_with_type>
   1af6a:	4603      	mov	r3, r0
        switch (rc) {
   1af6c:	f110 0f0f 	cmn.w	r0, #15
   1af70:	d003      	beq.n	1af7a <flash_map_read_mfg+0x36>
   1af72:	b120      	cbz	r0, 1af7e <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
   1af74:	4618      	mov	r0, r3
   1af76:	b006      	add	sp, #24
   1af78:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   1af7a:	2300      	movs	r3, #0
   1af7c:	e7fa      	b.n	1af74 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1af7e:	a903      	add	r1, sp, #12
   1af80:	a801      	add	r0, sp, #4
   1af82:	f000 f98b 	bl	1b29c <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1af86:	4603      	mov	r3, r0
   1af88:	2800      	cmp	r0, #0
   1af8a:	d1f3      	bne.n	1af74 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   1af8c:	6823      	ldr	r3, [r4, #0]
   1af8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1af92:	009a      	lsls	r2, r3, #2
   1af94:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   1af96:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1af9a:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   1af9c:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1afa0:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   1afa2:	f8dd 200e 	ldr.w	r2, [sp, #14]
   1afa6:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   1afa8:	f8dd 2012 	ldr.w	r2, [sp, #18]
   1afac:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   1afae:	6823      	ldr	r3, [r4, #0]
   1afb0:	3301      	adds	r3, #1
   1afb2:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1afb4:	e7d2      	b.n	1af5c <flash_map_read_mfg+0x18>
            return -1;
   1afb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1afba:	e7db      	b.n	1af74 <flash_map_read_mfg+0x30>

0001afbc <flash_area_open>:
{
   1afbc:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1afbe:	4b0d      	ldr	r3, [pc, #52]	; (1aff4 <flash_area_open+0x38>)
   1afc0:	681d      	ldr	r5, [r3, #0]
   1afc2:	b1a5      	cbz	r5, 1afee <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
   1afc4:	2300      	movs	r3, #0
   1afc6:	4a0c      	ldr	r2, [pc, #48]	; (1aff8 <flash_area_open+0x3c>)
   1afc8:	6812      	ldr	r2, [r2, #0]
   1afca:	429a      	cmp	r2, r3
   1afcc:	dd0b      	ble.n	1afe6 <flash_area_open+0x2a>
        area = flash_map + i;
   1afce:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1afd2:	00a2      	lsls	r2, r4, #2
   1afd4:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
   1afd6:	5caa      	ldrb	r2, [r5, r2]
   1afd8:	4282      	cmp	r2, r0
   1afda:	d001      	beq.n	1afe0 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
   1afdc:	3301      	adds	r3, #1
   1afde:	e7f2      	b.n	1afc6 <flash_area_open+0xa>
            *fap = area;
   1afe0:	600c      	str	r4, [r1, #0]
            return 0;
   1afe2:	2000      	movs	r0, #0
   1afe4:	e001      	b.n	1afea <flash_area_open+0x2e>
    return SYS_ENOENT;
   1afe6:	f06f 0003 	mvn.w	r0, #3
}
   1afea:	bc30      	pop	{r4, r5}
   1afec:	4770      	bx	lr
        return SYS_EACCES;
   1afee:	f06f 0006 	mvn.w	r0, #6
   1aff2:	e7fa      	b.n	1afea <flash_area_open+0x2e>
   1aff4:	2000e784 	.word	0x2000e784
   1aff8:	2000e780 	.word	0x2000e780

0001affc <flash_area_read>:
{
   1affc:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1affe:	6884      	ldr	r4, [r0, #8]
   1b000:	428c      	cmp	r4, r1
   1b002:	d308      	bcc.n	1b016 <flash_area_read+0x1a>
   1b004:	18cd      	adds	r5, r1, r3
   1b006:	42ac      	cmp	r4, r5
   1b008:	d308      	bcc.n	1b01c <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1b00a:	6844      	ldr	r4, [r0, #4]
   1b00c:	4421      	add	r1, r4
   1b00e:	7840      	ldrb	r0, [r0, #1]
   1b010:	f000 f9c8 	bl	1b3a4 <hal_flash_read>
}
   1b014:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   1b016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b01a:	e7fb      	b.n	1b014 <flash_area_read+0x18>
   1b01c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b020:	e7f8      	b.n	1b014 <flash_area_read+0x18>
	...

0001b024 <flash_map_init>:

void
flash_map_init(void)
{
   1b024:	b510      	push	{r4, lr}
   1b026:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1b028:	4b14      	ldr	r3, [pc, #80]	; (1b07c <flash_map_init+0x58>)
   1b02a:	781b      	ldrb	r3, [r3, #0]
   1b02c:	b303      	cbz	r3, 1b070 <flash_map_init+0x4c>

    rc = hal_flash_init();
   1b02e:	f000 f9a5 	bl	1b37c <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1b032:	b138      	cbz	r0, 1b044 <flash_map_init+0x20>
   1b034:	2000      	movs	r0, #0
   1b036:	9000      	str	r0, [sp, #0]
   1b038:	4b11      	ldr	r3, [pc, #68]	; (1b080 <flash_map_init+0x5c>)
   1b03a:	681c      	ldr	r4, [r3, #0]
   1b03c:	4603      	mov	r3, r0
   1b03e:	4602      	mov	r2, r0
   1b040:	4601      	mov	r1, r0
   1b042:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1b044:	4b0f      	ldr	r3, [pc, #60]	; (1b084 <flash_map_init+0x60>)
   1b046:	4a10      	ldr	r2, [pc, #64]	; (1b088 <flash_map_init+0x64>)
   1b048:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1b04a:	4b10      	ldr	r3, [pc, #64]	; (1b08c <flash_map_init+0x68>)
   1b04c:	2206      	movs	r2, #6
   1b04e:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1b050:	aa03      	add	r2, sp, #12
   1b052:	490f      	ldr	r1, [pc, #60]	; (1b090 <flash_map_init+0x6c>)
   1b054:	200a      	movs	r0, #10
   1b056:	f7ff ff75 	bl	1af44 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1b05a:	b938      	cbnz	r0, 1b06c <flash_map_init+0x48>
   1b05c:	9b03      	ldr	r3, [sp, #12]
   1b05e:	2b00      	cmp	r3, #0
   1b060:	dd04      	ble.n	1b06c <flash_map_init+0x48>
        flash_map = mfg_areas;
   1b062:	4a08      	ldr	r2, [pc, #32]	; (1b084 <flash_map_init+0x60>)
   1b064:	490a      	ldr	r1, [pc, #40]	; (1b090 <flash_map_init+0x6c>)
   1b066:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1b068:	4a08      	ldr	r2, [pc, #32]	; (1b08c <flash_map_init+0x68>)
   1b06a:	6013      	str	r3, [r2, #0]
    }
}
   1b06c:	b004      	add	sp, #16
   1b06e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1b070:	461a      	mov	r2, r3
   1b072:	4619      	mov	r1, r3
   1b074:	4618      	mov	r0, r3
   1b076:	f7fc fee3 	bl	17e40 <__assert_func>
   1b07a:	bf00      	nop
   1b07c:	2000e5bc 	.word	0x2000e5bc
   1b080:	20000104 	.word	0x20000104
   1b084:	2000e784 	.word	0x2000e784
   1b088:	0001f5e4 	.word	0x0001f5e4
   1b08c:	2000e780 	.word	0x2000e780
   1b090:	2000e51c 	.word	0x2000e51c

0001b094 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   1b094:	4770      	bx	lr
	...

0001b098 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1b098:	b530      	push	{r4, r5, lr}
   1b09a:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1b09c:	7885      	ldrb	r5, [r0, #2]
   1b09e:	4b21      	ldr	r3, [pc, #132]	; (1b124 <mfg_seek_next_aux+0x8c>)
   1b0a0:	681b      	ldr	r3, [r3, #0]
   1b0a2:	429d      	cmp	r5, r3
   1b0a4:	da32      	bge.n	1b10c <mfg_seek_next_aux+0x74>
   1b0a6:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1b0a8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1b0ac:	0093      	lsls	r3, r2, #2
   1b0ae:	a901      	add	r1, sp, #4
   1b0b0:	4a1d      	ldr	r2, [pc, #116]	; (1b128 <mfg_seek_next_aux+0x90>)
   1b0b2:	5cd0      	ldrb	r0, [r2, r3]
   1b0b4:	f7ff ff82 	bl	1afbc <flash_area_open>
    if (rc != 0) {
   1b0b8:	bb58      	cbnz	r0, 1b112 <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1b0ba:	6862      	ldr	r2, [r4, #4]
   1b0bc:	b9c2      	cbnz	r2, 1b0f0 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1b0be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1b0c2:	00aa      	lsls	r2, r5, #2
   1b0c4:	4b18      	ldr	r3, [pc, #96]	; (1b128 <mfg_seek_next_aux+0x90>)
   1b0c6:	4413      	add	r3, r2
   1b0c8:	685b      	ldr	r3, [r3, #4]
   1b0ca:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1b0cc:	6861      	ldr	r1, [r4, #4]
   1b0ce:	9801      	ldr	r0, [sp, #4]
   1b0d0:	6883      	ldr	r3, [r0, #8]
   1b0d2:	3b08      	subs	r3, #8
   1b0d4:	4299      	cmp	r1, r3
   1b0d6:	d310      	bcc.n	1b0fa <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1b0d8:	78a3      	ldrb	r3, [r4, #2]
   1b0da:	1c59      	adds	r1, r3, #1
   1b0dc:	4a11      	ldr	r2, [pc, #68]	; (1b124 <mfg_seek_next_aux+0x8c>)
   1b0de:	6812      	ldr	r2, [r2, #0]
   1b0e0:	4291      	cmp	r1, r2
   1b0e2:	da19      	bge.n	1b118 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1b0e4:	2200      	movs	r2, #0
   1b0e6:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1b0e8:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1b0ea:	f06f 0305 	mvn.w	r3, #5
   1b0ee:	e015      	b.n	1b11c <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1b0f0:	7863      	ldrb	r3, [r4, #1]
   1b0f2:	4413      	add	r3, r2
   1b0f4:	3302      	adds	r3, #2
   1b0f6:	6063      	str	r3, [r4, #4]
   1b0f8:	e7e8      	b.n	1b0cc <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1b0fa:	2302      	movs	r3, #2
   1b0fc:	4622      	mov	r2, r4
   1b0fe:	f7ff ff7d 	bl	1affc <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1b102:	4603      	mov	r3, r0
   1b104:	b150      	cbz	r0, 1b11c <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   1b106:	f06f 0304 	mvn.w	r3, #4
   1b10a:	e007      	b.n	1b11c <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   1b10c:	f06f 0301 	mvn.w	r3, #1
   1b110:	e004      	b.n	1b11c <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   1b112:	f06f 0304 	mvn.w	r3, #4
   1b116:	e001      	b.n	1b11c <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   1b118:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   1b11c:	4618      	mov	r0, r3
   1b11e:	b003      	add	sp, #12
   1b120:	bd30      	pop	{r4, r5, pc}
   1b122:	bf00      	nop
   1b124:	2000e5b0 	.word	0x2000e5b0
   1b128:	2000e598 	.word	0x2000e598

0001b12c <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1b12c:	b530      	push	{r4, r5, lr}
   1b12e:	b085      	sub	sp, #20
   1b130:	4605      	mov	r5, r0
   1b132:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1b134:	a903      	add	r1, sp, #12
   1b136:	f7ff ff41 	bl	1afbc <flash_area_open>
    if (rc != 0) {
   1b13a:	b9e8      	cbnz	r0, 1b178 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1b13c:	9803      	ldr	r0, [sp, #12]
   1b13e:	6881      	ldr	r1, [r0, #8]
   1b140:	2308      	movs	r3, #8
   1b142:	aa01      	add	r2, sp, #4
   1b144:	3908      	subs	r1, #8
   1b146:	f7ff ff59 	bl	1affc <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1b14a:	4601      	mov	r1, r0
   1b14c:	b9b8      	cbnz	r0, 1b17e <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1b14e:	9a02      	ldr	r2, [sp, #8]
   1b150:	4b11      	ldr	r3, [pc, #68]	; (1b198 <mfg_read_mmr+0x6c>)
   1b152:	429a      	cmp	r2, r3
   1b154:	d116      	bne.n	1b184 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1b156:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1b15a:	2b02      	cmp	r3, #2
   1b15c:	d115      	bne.n	1b18a <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1b15e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1b162:	9b03      	ldr	r3, [sp, #12]
   1b164:	689b      	ldr	r3, [r3, #8]
   1b166:	429a      	cmp	r2, r3
   1b168:	d812      	bhi.n	1b190 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1b16a:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1b16c:	7025      	strb	r5, [r4, #0]
   1b16e:	6063      	str	r3, [r4, #4]
   1b170:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1b172:	4608      	mov	r0, r1
   1b174:	b005      	add	sp, #20
   1b176:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1b178:	f06f 0104 	mvn.w	r1, #4
   1b17c:	e7f9      	b.n	1b172 <mfg_read_mmr+0x46>
        return SYS_EIO;
   1b17e:	f06f 0104 	mvn.w	r1, #4
   1b182:	e7f6      	b.n	1b172 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1b184:	f06f 0108 	mvn.w	r1, #8
   1b188:	e7f3      	b.n	1b172 <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   1b18a:	f06f 010b 	mvn.w	r1, #11
   1b18e:	e7f0      	b.n	1b172 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1b190:	f06f 0108 	mvn.w	r1, #8
   1b194:	e7ed      	b.n	1b172 <mfg_read_mmr+0x46>
   1b196:	bf00      	nop
   1b198:	3bb2a269 	.word	0x3bb2a269

0001b19c <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1b19c:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1b19e:	2300      	movs	r3, #0
   1b1a0:	4a11      	ldr	r2, [pc, #68]	; (1b1e8 <mfg_read_next_mmr+0x4c>)
   1b1a2:	6812      	ldr	r2, [r2, #0]
   1b1a4:	429a      	cmp	r2, r3
   1b1a6:	dd08      	ble.n	1b1ba <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   1b1a8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1b1ac:	008a      	lsls	r2, r1, #2
   1b1ae:	490f      	ldr	r1, [pc, #60]	; (1b1ec <mfg_read_next_mmr+0x50>)
   1b1b0:	5c8a      	ldrb	r2, [r1, r2]
   1b1b2:	4282      	cmp	r2, r0
   1b1b4:	d011      	beq.n	1b1da <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1b1b6:	3301      	adds	r3, #1
   1b1b8:	e7f2      	b.n	1b1a0 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1b1ba:	2a01      	cmp	r2, #1
   1b1bc:	dc11      	bgt.n	1b1e2 <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1b1be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1b1c2:	0093      	lsls	r3, r2, #2
   1b1c4:	4909      	ldr	r1, [pc, #36]	; (1b1ec <mfg_read_next_mmr+0x50>)
   1b1c6:	4419      	add	r1, r3
   1b1c8:	f7ff ffb0 	bl	1b12c <mfg_read_mmr>
    if (rc != 0) {
   1b1cc:	4603      	mov	r3, r0
   1b1ce:	b930      	cbnz	r0, 1b1de <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   1b1d0:	4905      	ldr	r1, [pc, #20]	; (1b1e8 <mfg_read_next_mmr+0x4c>)
   1b1d2:	680a      	ldr	r2, [r1, #0]
   1b1d4:	3201      	adds	r2, #1
   1b1d6:	600a      	str	r2, [r1, #0]
    return 0;
   1b1d8:	e001      	b.n	1b1de <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   1b1da:	f06f 030a 	mvn.w	r3, #10
}
   1b1de:	4618      	mov	r0, r3
   1b1e0:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1b1e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b1e6:	e7fa      	b.n	1b1de <mfg_read_next_mmr+0x42>
   1b1e8:	2000e5b0 	.word	0x2000e5b0
   1b1ec:	2000e598 	.word	0x2000e598

0001b1f0 <mfg_open_flash_area>:
{
   1b1f0:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1b1f2:	7883      	ldrb	r3, [r0, #2]
   1b1f4:	4a0b      	ldr	r2, [pc, #44]	; (1b224 <mfg_open_flash_area+0x34>)
   1b1f6:	6812      	ldr	r2, [r2, #0]
   1b1f8:	4293      	cmp	r3, r2
   1b1fa:	da0a      	bge.n	1b212 <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   1b1fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b200:	009a      	lsls	r2, r3, #2
   1b202:	4b09      	ldr	r3, [pc, #36]	; (1b228 <mfg_open_flash_area+0x38>)
   1b204:	5c98      	ldrb	r0, [r3, r2]
   1b206:	f7ff fed9 	bl	1afbc <flash_area_open>
    if (rc != 0) {
   1b20a:	4603      	mov	r3, r0
   1b20c:	b938      	cbnz	r0, 1b21e <mfg_open_flash_area+0x2e>
}
   1b20e:	4618      	mov	r0, r3
   1b210:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1b212:	2300      	movs	r3, #0
   1b214:	461a      	mov	r2, r3
   1b216:	4619      	mov	r1, r3
   1b218:	4618      	mov	r0, r3
   1b21a:	f7fc fe11 	bl	17e40 <__assert_func>
        return SYS_EIO;
   1b21e:	f06f 0304 	mvn.w	r3, #4
   1b222:	e7f4      	b.n	1b20e <mfg_open_flash_area+0x1e>
   1b224:	2000e5b0 	.word	0x2000e5b0
   1b228:	2000e598 	.word	0x2000e598

0001b22c <mfg_read_tlv_body>:
{
   1b22c:	b570      	push	{r4, r5, r6, lr}
   1b22e:	b082      	sub	sp, #8
   1b230:	4606      	mov	r6, r0
   1b232:	460c      	mov	r4, r1
   1b234:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1b236:	a901      	add	r1, sp, #4
   1b238:	f7ff ffda 	bl	1b1f0 <mfg_open_flash_area>
    if (rc != 0) {
   1b23c:	4603      	mov	r3, r0
   1b23e:	b110      	cbz	r0, 1b246 <mfg_read_tlv_body+0x1a>
}
   1b240:	4618      	mov	r0, r3
   1b242:	b002      	add	sp, #8
   1b244:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1b246:	462a      	mov	r2, r5
   1b248:	2100      	movs	r1, #0
   1b24a:	4620      	mov	r0, r4
   1b24c:	f7fe f9fb 	bl	19646 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1b250:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1b252:	6871      	ldr	r1, [r6, #4]
   1b254:	42ab      	cmp	r3, r5
   1b256:	bfa8      	it	ge
   1b258:	462b      	movge	r3, r5
   1b25a:	4622      	mov	r2, r4
   1b25c:	3102      	adds	r1, #2
   1b25e:	9801      	ldr	r0, [sp, #4]
   1b260:	f7ff fecc 	bl	1affc <flash_area_read>
    if (rc != 0) {
   1b264:	4603      	mov	r3, r0
   1b266:	2800      	cmp	r0, #0
   1b268:	d0ea      	beq.n	1b240 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   1b26a:	f06f 0304 	mvn.w	r3, #4
   1b26e:	e7e7      	b.n	1b240 <mfg_read_tlv_body+0x14>

0001b270 <mfg_seek_next>:
{
   1b270:	b510      	push	{r4, lr}
   1b272:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1b274:	4620      	mov	r0, r4
   1b276:	f7ff ff0f 	bl	1b098 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1b27a:	f110 0f06 	cmn.w	r0, #6
   1b27e:	d0f9      	beq.n	1b274 <mfg_seek_next+0x4>
}
   1b280:	bd10      	pop	{r4, pc}

0001b282 <mfg_seek_next_with_type>:
{
   1b282:	b538      	push	{r3, r4, r5, lr}
   1b284:	4604      	mov	r4, r0
   1b286:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1b288:	4620      	mov	r0, r4
   1b28a:	f7ff fff1 	bl	1b270 <mfg_seek_next>
        if (rc != 0) {
   1b28e:	4602      	mov	r2, r0
   1b290:	b910      	cbnz	r0, 1b298 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1b292:	7823      	ldrb	r3, [r4, #0]
   1b294:	42ab      	cmp	r3, r5
   1b296:	d1f7      	bne.n	1b288 <mfg_seek_next_with_type+0x6>
}
   1b298:	4610      	mov	r0, r2
   1b29a:	bd38      	pop	{r3, r4, r5, pc}

0001b29c <mfg_read_tlv_flash_area>:
{
   1b29c:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1b29e:	220a      	movs	r2, #10
   1b2a0:	f7ff ffc4 	bl	1b22c <mfg_read_tlv_body>
}
   1b2a4:	bd08      	pop	{r3, pc}

0001b2a6 <mfg_read_tlv_mmr_ref>:
{
   1b2a6:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1b2a8:	2201      	movs	r2, #1
   1b2aa:	f7ff ffbf 	bl	1b22c <mfg_read_tlv_body>
}
   1b2ae:	bd08      	pop	{r3, pc}

0001b2b0 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1b2b0:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1b2b2:	4b0b      	ldr	r3, [pc, #44]	; (1b2e0 <mfg_init+0x30>)
   1b2b4:	781b      	ldrb	r3, [r3, #0]
   1b2b6:	b94b      	cbnz	r3, 1b2cc <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   1b2b8:	4b09      	ldr	r3, [pc, #36]	; (1b2e0 <mfg_init+0x30>)
   1b2ba:	2201      	movs	r2, #1
   1b2bc:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1b2be:	4b09      	ldr	r3, [pc, #36]	; (1b2e4 <mfg_init+0x34>)
   1b2c0:	781b      	ldrb	r3, [r3, #0]
   1b2c2:	b123      	cbz	r3, 1b2ce <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1b2c4:	2000      	movs	r0, #0
   1b2c6:	f7ff ff69 	bl	1b19c <mfg_read_next_mmr>
    if (rc != 0) {
   1b2ca:	b128      	cbz	r0, 1b2d8 <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
   1b2cc:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1b2ce:	461a      	mov	r2, r3
   1b2d0:	4619      	mov	r1, r3
   1b2d2:	4618      	mov	r0, r3
   1b2d4:	f7fc fdb4 	bl	17e40 <__assert_func>
    rc = mfg_read_mmr_refs();
   1b2d8:	f000 f80e 	bl	1b2f8 <mfg_read_mmr_refs>
err:
   1b2dc:	e7f6      	b.n	1b2cc <mfg_init+0x1c>
   1b2de:	bf00      	nop
   1b2e0:	2000e594 	.word	0x2000e594
   1b2e4:	2000e5bc 	.word	0x2000e5bc

0001b2e8 <mfg_open>:
{
   1b2e8:	b510      	push	{r4, lr}
   1b2ea:	4604      	mov	r4, r0
    mfg_init();
   1b2ec:	f7ff ffe0 	bl	1b2b0 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1b2f0:	2300      	movs	r3, #0
   1b2f2:	6023      	str	r3, [r4, #0]
   1b2f4:	6063      	str	r3, [r4, #4]
}
   1b2f6:	bd10      	pop	{r4, pc}

0001b2f8 <mfg_read_mmr_refs>:
{
   1b2f8:	b500      	push	{lr}
   1b2fa:	b085      	sub	sp, #20
    mfg_open(&reader);
   1b2fc:	a801      	add	r0, sp, #4
   1b2fe:	f7ff fff3 	bl	1b2e8 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1b302:	2104      	movs	r1, #4
   1b304:	eb0d 0001 	add.w	r0, sp, r1
   1b308:	f7ff ffbb 	bl	1b282 <mfg_seek_next_with_type>
   1b30c:	4603      	mov	r3, r0
        switch (rc) {
   1b30e:	f110 0f0f 	cmn.w	r0, #15
   1b312:	d004      	beq.n	1b31e <mfg_read_mmr_refs+0x26>
   1b314:	b128      	cbz	r0, 1b322 <mfg_read_mmr_refs+0x2a>
}
   1b316:	4618      	mov	r0, r3
   1b318:	b005      	add	sp, #20
   1b31a:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   1b31e:	2300      	movs	r3, #0
   1b320:	e7f9      	b.n	1b316 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1b322:	a903      	add	r1, sp, #12
   1b324:	a801      	add	r0, sp, #4
   1b326:	f7ff ffbe 	bl	1b2a6 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1b32a:	4603      	mov	r3, r0
   1b32c:	2800      	cmp	r0, #0
   1b32e:	d1f2      	bne.n	1b316 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1b330:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1b334:	f7ff ff32 	bl	1b19c <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1b338:	4603      	mov	r3, r0
   1b33a:	2800      	cmp	r0, #0
   1b33c:	d0e1      	beq.n	1b302 <mfg_read_mmr_refs+0xa>
   1b33e:	f110 0f0b 	cmn.w	r0, #11
   1b342:	d0de      	beq.n	1b302 <mfg_read_mmr_refs+0xa>
   1b344:	e7e7      	b.n	1b316 <mfg_read_mmr_refs+0x1e>
	...

0001b348 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   1b348:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   1b34a:	4803      	ldr	r0, [pc, #12]	; (1b358 <__wrap_coap_receive+0x10>)
   1b34c:	f7fb feb0 	bl	170b0 <console_printf>
    return -1;
}
   1b350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b354:	bd08      	pop	{r3, pc}
   1b356:	bf00      	nop
   1b358:	0001f62c 	.word	0x0001f62c

0001b35c <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   1b35c:	4770      	bx	lr

0001b35e <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1b35e:	6843      	ldr	r3, [r0, #4]
   1b360:	428b      	cmp	r3, r1
   1b362:	d808      	bhi.n	1b376 <hal_flash_check_addr+0x18>
   1b364:	6882      	ldr	r2, [r0, #8]
   1b366:	4413      	add	r3, r2
   1b368:	428b      	cmp	r3, r1
   1b36a:	d301      	bcc.n	1b370 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1b36c:	2000      	movs	r0, #0
}
   1b36e:	4770      	bx	lr
        return SYS_EINVAL;
   1b370:	f06f 0001 	mvn.w	r0, #1
   1b374:	4770      	bx	lr
   1b376:	f06f 0001 	mvn.w	r0, #1
   1b37a:	4770      	bx	lr

0001b37c <hal_flash_init>:
{
   1b37c:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1b37e:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1b380:	462c      	mov	r4, r5
   1b382:	e001      	b.n	1b388 <hal_flash_init+0xc>
   1b384:	3401      	adds	r4, #1
   1b386:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1b388:	4620      	mov	r0, r4
   1b38a:	f7fe fce3 	bl	19d54 <hal_bsp_flash_dev>
        if (!hf) {
   1b38e:	b138      	cbz	r0, 1b3a0 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1b390:	6802      	ldr	r2, [r0, #0]
   1b392:	6952      	ldr	r2, [r2, #20]
   1b394:	4790      	blx	r2
   1b396:	2800      	cmp	r0, #0
   1b398:	d0f4      	beq.n	1b384 <hal_flash_init+0x8>
            rc = SYS_EIO;
   1b39a:	f06f 0504 	mvn.w	r5, #4
   1b39e:	e7f1      	b.n	1b384 <hal_flash_init+0x8>
}
   1b3a0:	4628      	mov	r0, r5
   1b3a2:	bd38      	pop	{r3, r4, r5, pc}

0001b3a4 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1b3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b3a8:	460d      	mov	r5, r1
   1b3aa:	4690      	mov	r8, r2
   1b3ac:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1b3ae:	f7fe fcd1 	bl	19d54 <hal_bsp_flash_dev>
    if (!hf) {
   1b3b2:	b1c0      	cbz	r0, 1b3e6 <hal_flash_read+0x42>
   1b3b4:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1b3b6:	4629      	mov	r1, r5
   1b3b8:	f7ff ffd1 	bl	1b35e <hal_flash_check_addr>
   1b3bc:	b9b0      	cbnz	r0, 1b3ec <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1b3be:	19a9      	adds	r1, r5, r6
   1b3c0:	4620      	mov	r0, r4
   1b3c2:	f7ff ffcc 	bl	1b35e <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1b3c6:	b9a0      	cbnz	r0, 1b3f2 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1b3c8:	6823      	ldr	r3, [r4, #0]
   1b3ca:	681f      	ldr	r7, [r3, #0]
   1b3cc:	4633      	mov	r3, r6
   1b3ce:	4642      	mov	r2, r8
   1b3d0:	4629      	mov	r1, r5
   1b3d2:	4620      	mov	r0, r4
   1b3d4:	47b8      	blx	r7
    if (rc != 0) {
   1b3d6:	4603      	mov	r3, r0
   1b3d8:	b910      	cbnz	r0, 1b3e0 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1b3da:	4618      	mov	r0, r3
   1b3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1b3e0:	f06f 0304 	mvn.w	r3, #4
   1b3e4:	e7f9      	b.n	1b3da <hal_flash_read+0x36>
        return SYS_EINVAL;
   1b3e6:	f06f 0301 	mvn.w	r3, #1
   1b3ea:	e7f6      	b.n	1b3da <hal_flash_read+0x36>
        return SYS_EINVAL;
   1b3ec:	f06f 0301 	mvn.w	r3, #1
   1b3f0:	e7f3      	b.n	1b3da <hal_flash_read+0x36>
   1b3f2:	f06f 0301 	mvn.w	r3, #1
   1b3f6:	e7f0      	b.n	1b3da <hal_flash_read+0x36>

0001b3f8 <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   1b3f8:	2010      	movs	r0, #16
   1b3fa:	4770      	bx	lr

0001b3fc <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   1b3fc:	b570      	push	{r4, r5, r6, lr}
   1b3fe:	4606      	mov	r6, r0
   1b400:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   1b402:	460d      	mov	r5, r1
   1b404:	2908      	cmp	r1, #8
   1b406:	bf28      	it	cs
   1b408:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   1b40a:	462a      	mov	r2, r5
   1b40c:	4906      	ldr	r1, [pc, #24]	; (1b428 <hal_bsp_hw_id+0x2c>)
   1b40e:	f7fe f90d 	bl	1962c <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   1b412:	1b64      	subs	r4, r4, r5
   1b414:	2c08      	cmp	r4, #8
   1b416:	bf28      	it	cs
   1b418:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   1b41a:	4622      	mov	r2, r4
   1b41c:	4903      	ldr	r1, [pc, #12]	; (1b42c <hal_bsp_hw_id+0x30>)
   1b41e:	1970      	adds	r0, r6, r5
   1b420:	f7fe f904 	bl	1962c <memcpy>

    return len + cnt;
}
   1b424:	1928      	adds	r0, r5, r4
   1b426:	bd70      	pop	{r4, r5, r6, pc}
   1b428:	10000060 	.word	0x10000060
   1b42c:	100000a4 	.word	0x100000a4

0001b430 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1b430:	b40e      	push	{r1, r2, r3}
   1b432:	b500      	push	{lr}
   1b434:	b082      	sub	sp, #8
   1b436:	ab03      	add	r3, sp, #12
   1b438:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1b43c:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1b43e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b442:	f7fe fbef 	bl	19c24 <vsnprintf>
	va_end(ap);

	return rv;
}
   1b446:	b002      	add	sp, #8
   1b448:	f85d eb04 	ldr.w	lr, [sp], #4
   1b44c:	b003      	add	sp, #12
   1b44e:	4770      	bx	lr

0001b450 <__aeabi_uldivmod>:
   1b450:	b953      	cbnz	r3, 1b468 <__aeabi_uldivmod+0x18>
   1b452:	b94a      	cbnz	r2, 1b468 <__aeabi_uldivmod+0x18>
   1b454:	2900      	cmp	r1, #0
   1b456:	bf08      	it	eq
   1b458:	2800      	cmpeq	r0, #0
   1b45a:	bf1c      	itt	ne
   1b45c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1b460:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1b464:	f000 b972 	b.w	1b74c <__aeabi_idiv0>
   1b468:	f1ad 0c08 	sub.w	ip, sp, #8
   1b46c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1b470:	f000 f806 	bl	1b480 <__udivmoddi4>
   1b474:	f8dd e004 	ldr.w	lr, [sp, #4]
   1b478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1b47c:	b004      	add	sp, #16
   1b47e:	4770      	bx	lr

0001b480 <__udivmoddi4>:
   1b480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b484:	9e08      	ldr	r6, [sp, #32]
   1b486:	4604      	mov	r4, r0
   1b488:	4688      	mov	r8, r1
   1b48a:	2b00      	cmp	r3, #0
   1b48c:	d14b      	bne.n	1b526 <__udivmoddi4+0xa6>
   1b48e:	428a      	cmp	r2, r1
   1b490:	4615      	mov	r5, r2
   1b492:	d967      	bls.n	1b564 <__udivmoddi4+0xe4>
   1b494:	fab2 f282 	clz	r2, r2
   1b498:	b14a      	cbz	r2, 1b4ae <__udivmoddi4+0x2e>
   1b49a:	f1c2 0720 	rsb	r7, r2, #32
   1b49e:	fa01 f302 	lsl.w	r3, r1, r2
   1b4a2:	fa20 f707 	lsr.w	r7, r0, r7
   1b4a6:	4095      	lsls	r5, r2
   1b4a8:	ea47 0803 	orr.w	r8, r7, r3
   1b4ac:	4094      	lsls	r4, r2
   1b4ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1b4b2:	0c23      	lsrs	r3, r4, #16
   1b4b4:	fbb8 f7fe 	udiv	r7, r8, lr
   1b4b8:	fa1f fc85 	uxth.w	ip, r5
   1b4bc:	fb0e 8817 	mls	r8, lr, r7, r8
   1b4c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   1b4c4:	fb07 f10c 	mul.w	r1, r7, ip
   1b4c8:	4299      	cmp	r1, r3
   1b4ca:	d909      	bls.n	1b4e0 <__udivmoddi4+0x60>
   1b4cc:	18eb      	adds	r3, r5, r3
   1b4ce:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1b4d2:	f080 811b 	bcs.w	1b70c <__udivmoddi4+0x28c>
   1b4d6:	4299      	cmp	r1, r3
   1b4d8:	f240 8118 	bls.w	1b70c <__udivmoddi4+0x28c>
   1b4dc:	3f02      	subs	r7, #2
   1b4de:	442b      	add	r3, r5
   1b4e0:	1a5b      	subs	r3, r3, r1
   1b4e2:	b2a4      	uxth	r4, r4
   1b4e4:	fbb3 f0fe 	udiv	r0, r3, lr
   1b4e8:	fb0e 3310 	mls	r3, lr, r0, r3
   1b4ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1b4f0:	fb00 fc0c 	mul.w	ip, r0, ip
   1b4f4:	45a4      	cmp	ip, r4
   1b4f6:	d909      	bls.n	1b50c <__udivmoddi4+0x8c>
   1b4f8:	192c      	adds	r4, r5, r4
   1b4fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1b4fe:	f080 8107 	bcs.w	1b710 <__udivmoddi4+0x290>
   1b502:	45a4      	cmp	ip, r4
   1b504:	f240 8104 	bls.w	1b710 <__udivmoddi4+0x290>
   1b508:	3802      	subs	r0, #2
   1b50a:	442c      	add	r4, r5
   1b50c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1b510:	eba4 040c 	sub.w	r4, r4, ip
   1b514:	2700      	movs	r7, #0
   1b516:	b11e      	cbz	r6, 1b520 <__udivmoddi4+0xa0>
   1b518:	40d4      	lsrs	r4, r2
   1b51a:	2300      	movs	r3, #0
   1b51c:	e9c6 4300 	strd	r4, r3, [r6]
   1b520:	4639      	mov	r1, r7
   1b522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b526:	428b      	cmp	r3, r1
   1b528:	d909      	bls.n	1b53e <__udivmoddi4+0xbe>
   1b52a:	2e00      	cmp	r6, #0
   1b52c:	f000 80eb 	beq.w	1b706 <__udivmoddi4+0x286>
   1b530:	2700      	movs	r7, #0
   1b532:	e9c6 0100 	strd	r0, r1, [r6]
   1b536:	4638      	mov	r0, r7
   1b538:	4639      	mov	r1, r7
   1b53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b53e:	fab3 f783 	clz	r7, r3
   1b542:	2f00      	cmp	r7, #0
   1b544:	d147      	bne.n	1b5d6 <__udivmoddi4+0x156>
   1b546:	428b      	cmp	r3, r1
   1b548:	d302      	bcc.n	1b550 <__udivmoddi4+0xd0>
   1b54a:	4282      	cmp	r2, r0
   1b54c:	f200 80fa 	bhi.w	1b744 <__udivmoddi4+0x2c4>
   1b550:	1a84      	subs	r4, r0, r2
   1b552:	eb61 0303 	sbc.w	r3, r1, r3
   1b556:	2001      	movs	r0, #1
   1b558:	4698      	mov	r8, r3
   1b55a:	2e00      	cmp	r6, #0
   1b55c:	d0e0      	beq.n	1b520 <__udivmoddi4+0xa0>
   1b55e:	e9c6 4800 	strd	r4, r8, [r6]
   1b562:	e7dd      	b.n	1b520 <__udivmoddi4+0xa0>
   1b564:	b902      	cbnz	r2, 1b568 <__udivmoddi4+0xe8>
   1b566:	deff      	udf	#255	; 0xff
   1b568:	fab2 f282 	clz	r2, r2
   1b56c:	2a00      	cmp	r2, #0
   1b56e:	f040 808f 	bne.w	1b690 <__udivmoddi4+0x210>
   1b572:	1b49      	subs	r1, r1, r5
   1b574:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1b578:	fa1f f885 	uxth.w	r8, r5
   1b57c:	2701      	movs	r7, #1
   1b57e:	fbb1 fcfe 	udiv	ip, r1, lr
   1b582:	0c23      	lsrs	r3, r4, #16
   1b584:	fb0e 111c 	mls	r1, lr, ip, r1
   1b588:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1b58c:	fb08 f10c 	mul.w	r1, r8, ip
   1b590:	4299      	cmp	r1, r3
   1b592:	d907      	bls.n	1b5a4 <__udivmoddi4+0x124>
   1b594:	18eb      	adds	r3, r5, r3
   1b596:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1b59a:	d202      	bcs.n	1b5a2 <__udivmoddi4+0x122>
   1b59c:	4299      	cmp	r1, r3
   1b59e:	f200 80cd 	bhi.w	1b73c <__udivmoddi4+0x2bc>
   1b5a2:	4684      	mov	ip, r0
   1b5a4:	1a59      	subs	r1, r3, r1
   1b5a6:	b2a3      	uxth	r3, r4
   1b5a8:	fbb1 f0fe 	udiv	r0, r1, lr
   1b5ac:	fb0e 1410 	mls	r4, lr, r0, r1
   1b5b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   1b5b4:	fb08 f800 	mul.w	r8, r8, r0
   1b5b8:	45a0      	cmp	r8, r4
   1b5ba:	d907      	bls.n	1b5cc <__udivmoddi4+0x14c>
   1b5bc:	192c      	adds	r4, r5, r4
   1b5be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1b5c2:	d202      	bcs.n	1b5ca <__udivmoddi4+0x14a>
   1b5c4:	45a0      	cmp	r8, r4
   1b5c6:	f200 80b6 	bhi.w	1b736 <__udivmoddi4+0x2b6>
   1b5ca:	4618      	mov	r0, r3
   1b5cc:	eba4 0408 	sub.w	r4, r4, r8
   1b5d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1b5d4:	e79f      	b.n	1b516 <__udivmoddi4+0x96>
   1b5d6:	f1c7 0c20 	rsb	ip, r7, #32
   1b5da:	40bb      	lsls	r3, r7
   1b5dc:	fa22 fe0c 	lsr.w	lr, r2, ip
   1b5e0:	ea4e 0e03 	orr.w	lr, lr, r3
   1b5e4:	fa01 f407 	lsl.w	r4, r1, r7
   1b5e8:	fa20 f50c 	lsr.w	r5, r0, ip
   1b5ec:	fa21 f30c 	lsr.w	r3, r1, ip
   1b5f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
   1b5f4:	4325      	orrs	r5, r4
   1b5f6:	fbb3 f9f8 	udiv	r9, r3, r8
   1b5fa:	0c2c      	lsrs	r4, r5, #16
   1b5fc:	fb08 3319 	mls	r3, r8, r9, r3
   1b600:	fa1f fa8e 	uxth.w	sl, lr
   1b604:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1b608:	fb09 f40a 	mul.w	r4, r9, sl
   1b60c:	429c      	cmp	r4, r3
   1b60e:	fa02 f207 	lsl.w	r2, r2, r7
   1b612:	fa00 f107 	lsl.w	r1, r0, r7
   1b616:	d90b      	bls.n	1b630 <__udivmoddi4+0x1b0>
   1b618:	eb1e 0303 	adds.w	r3, lr, r3
   1b61c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1b620:	f080 8087 	bcs.w	1b732 <__udivmoddi4+0x2b2>
   1b624:	429c      	cmp	r4, r3
   1b626:	f240 8084 	bls.w	1b732 <__udivmoddi4+0x2b2>
   1b62a:	f1a9 0902 	sub.w	r9, r9, #2
   1b62e:	4473      	add	r3, lr
   1b630:	1b1b      	subs	r3, r3, r4
   1b632:	b2ad      	uxth	r5, r5
   1b634:	fbb3 f0f8 	udiv	r0, r3, r8
   1b638:	fb08 3310 	mls	r3, r8, r0, r3
   1b63c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1b640:	fb00 fa0a 	mul.w	sl, r0, sl
   1b644:	45a2      	cmp	sl, r4
   1b646:	d908      	bls.n	1b65a <__udivmoddi4+0x1da>
   1b648:	eb1e 0404 	adds.w	r4, lr, r4
   1b64c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1b650:	d26b      	bcs.n	1b72a <__udivmoddi4+0x2aa>
   1b652:	45a2      	cmp	sl, r4
   1b654:	d969      	bls.n	1b72a <__udivmoddi4+0x2aa>
   1b656:	3802      	subs	r0, #2
   1b658:	4474      	add	r4, lr
   1b65a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1b65e:	fba0 8902 	umull	r8, r9, r0, r2
   1b662:	eba4 040a 	sub.w	r4, r4, sl
   1b666:	454c      	cmp	r4, r9
   1b668:	46c2      	mov	sl, r8
   1b66a:	464b      	mov	r3, r9
   1b66c:	d354      	bcc.n	1b718 <__udivmoddi4+0x298>
   1b66e:	d051      	beq.n	1b714 <__udivmoddi4+0x294>
   1b670:	2e00      	cmp	r6, #0
   1b672:	d069      	beq.n	1b748 <__udivmoddi4+0x2c8>
   1b674:	ebb1 050a 	subs.w	r5, r1, sl
   1b678:	eb64 0403 	sbc.w	r4, r4, r3
   1b67c:	fa04 fc0c 	lsl.w	ip, r4, ip
   1b680:	40fd      	lsrs	r5, r7
   1b682:	40fc      	lsrs	r4, r7
   1b684:	ea4c 0505 	orr.w	r5, ip, r5
   1b688:	e9c6 5400 	strd	r5, r4, [r6]
   1b68c:	2700      	movs	r7, #0
   1b68e:	e747      	b.n	1b520 <__udivmoddi4+0xa0>
   1b690:	f1c2 0320 	rsb	r3, r2, #32
   1b694:	fa20 f703 	lsr.w	r7, r0, r3
   1b698:	4095      	lsls	r5, r2
   1b69a:	fa01 f002 	lsl.w	r0, r1, r2
   1b69e:	fa21 f303 	lsr.w	r3, r1, r3
   1b6a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1b6a6:	4338      	orrs	r0, r7
   1b6a8:	0c01      	lsrs	r1, r0, #16
   1b6aa:	fbb3 f7fe 	udiv	r7, r3, lr
   1b6ae:	fa1f f885 	uxth.w	r8, r5
   1b6b2:	fb0e 3317 	mls	r3, lr, r7, r3
   1b6b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1b6ba:	fb07 f308 	mul.w	r3, r7, r8
   1b6be:	428b      	cmp	r3, r1
   1b6c0:	fa04 f402 	lsl.w	r4, r4, r2
   1b6c4:	d907      	bls.n	1b6d6 <__udivmoddi4+0x256>
   1b6c6:	1869      	adds	r1, r5, r1
   1b6c8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   1b6cc:	d22f      	bcs.n	1b72e <__udivmoddi4+0x2ae>
   1b6ce:	428b      	cmp	r3, r1
   1b6d0:	d92d      	bls.n	1b72e <__udivmoddi4+0x2ae>
   1b6d2:	3f02      	subs	r7, #2
   1b6d4:	4429      	add	r1, r5
   1b6d6:	1acb      	subs	r3, r1, r3
   1b6d8:	b281      	uxth	r1, r0
   1b6da:	fbb3 f0fe 	udiv	r0, r3, lr
   1b6de:	fb0e 3310 	mls	r3, lr, r0, r3
   1b6e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1b6e6:	fb00 f308 	mul.w	r3, r0, r8
   1b6ea:	428b      	cmp	r3, r1
   1b6ec:	d907      	bls.n	1b6fe <__udivmoddi4+0x27e>
   1b6ee:	1869      	adds	r1, r5, r1
   1b6f0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1b6f4:	d217      	bcs.n	1b726 <__udivmoddi4+0x2a6>
   1b6f6:	428b      	cmp	r3, r1
   1b6f8:	d915      	bls.n	1b726 <__udivmoddi4+0x2a6>
   1b6fa:	3802      	subs	r0, #2
   1b6fc:	4429      	add	r1, r5
   1b6fe:	1ac9      	subs	r1, r1, r3
   1b700:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   1b704:	e73b      	b.n	1b57e <__udivmoddi4+0xfe>
   1b706:	4637      	mov	r7, r6
   1b708:	4630      	mov	r0, r6
   1b70a:	e709      	b.n	1b520 <__udivmoddi4+0xa0>
   1b70c:	4607      	mov	r7, r0
   1b70e:	e6e7      	b.n	1b4e0 <__udivmoddi4+0x60>
   1b710:	4618      	mov	r0, r3
   1b712:	e6fb      	b.n	1b50c <__udivmoddi4+0x8c>
   1b714:	4541      	cmp	r1, r8
   1b716:	d2ab      	bcs.n	1b670 <__udivmoddi4+0x1f0>
   1b718:	ebb8 0a02 	subs.w	sl, r8, r2
   1b71c:	eb69 020e 	sbc.w	r2, r9, lr
   1b720:	3801      	subs	r0, #1
   1b722:	4613      	mov	r3, r2
   1b724:	e7a4      	b.n	1b670 <__udivmoddi4+0x1f0>
   1b726:	4660      	mov	r0, ip
   1b728:	e7e9      	b.n	1b6fe <__udivmoddi4+0x27e>
   1b72a:	4618      	mov	r0, r3
   1b72c:	e795      	b.n	1b65a <__udivmoddi4+0x1da>
   1b72e:	4667      	mov	r7, ip
   1b730:	e7d1      	b.n	1b6d6 <__udivmoddi4+0x256>
   1b732:	4681      	mov	r9, r0
   1b734:	e77c      	b.n	1b630 <__udivmoddi4+0x1b0>
   1b736:	3802      	subs	r0, #2
   1b738:	442c      	add	r4, r5
   1b73a:	e747      	b.n	1b5cc <__udivmoddi4+0x14c>
   1b73c:	f1ac 0c02 	sub.w	ip, ip, #2
   1b740:	442b      	add	r3, r5
   1b742:	e72f      	b.n	1b5a4 <__udivmoddi4+0x124>
   1b744:	4638      	mov	r0, r7
   1b746:	e708      	b.n	1b55a <__udivmoddi4+0xda>
   1b748:	4637      	mov	r7, r6
   1b74a:	e6e9      	b.n	1b520 <__udivmoddi4+0xa0>

0001b74c <__aeabi_idiv0>:
   1b74c:	4770      	bx	lr
   1b74e:	bf00      	nop

0001b750 <__aeabi_memclr>:
   1b750:	2200      	movs	r2, #0
   1b752:	f000 b803 	b.w	1b75c <__aeabi_memset>
   1b756:	bf00      	nop

0001b758 <__aeabi_memcpy>:
   1b758:	f7fd bf68 	b.w	1962c <memcpy>

0001b75c <__aeabi_memset>:
   1b75c:	b470      	push	{r4, r5, r6}
   1b75e:	0784      	lsls	r4, r0, #30
   1b760:	d046      	beq.n	1b7f0 <__aeabi_memset+0x94>
   1b762:	1e4c      	subs	r4, r1, #1
   1b764:	2900      	cmp	r1, #0
   1b766:	d041      	beq.n	1b7ec <__aeabi_memset+0x90>
   1b768:	b2d5      	uxtb	r5, r2
   1b76a:	4603      	mov	r3, r0
   1b76c:	e002      	b.n	1b774 <__aeabi_memset+0x18>
   1b76e:	1e61      	subs	r1, r4, #1
   1b770:	b3e4      	cbz	r4, 1b7ec <__aeabi_memset+0x90>
   1b772:	460c      	mov	r4, r1
   1b774:	f803 5b01 	strb.w	r5, [r3], #1
   1b778:	0799      	lsls	r1, r3, #30
   1b77a:	d1f8      	bne.n	1b76e <__aeabi_memset+0x12>
   1b77c:	2c03      	cmp	r4, #3
   1b77e:	d92e      	bls.n	1b7de <__aeabi_memset+0x82>
   1b780:	b2d5      	uxtb	r5, r2
   1b782:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1b786:	2c0f      	cmp	r4, #15
   1b788:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1b78c:	d919      	bls.n	1b7c2 <__aeabi_memset+0x66>
   1b78e:	4626      	mov	r6, r4
   1b790:	f103 0110 	add.w	r1, r3, #16
   1b794:	3e10      	subs	r6, #16
   1b796:	2e0f      	cmp	r6, #15
   1b798:	f841 5c10 	str.w	r5, [r1, #-16]
   1b79c:	f841 5c0c 	str.w	r5, [r1, #-12]
   1b7a0:	f841 5c08 	str.w	r5, [r1, #-8]
   1b7a4:	f841 5c04 	str.w	r5, [r1, #-4]
   1b7a8:	f101 0110 	add.w	r1, r1, #16
   1b7ac:	d8f2      	bhi.n	1b794 <__aeabi_memset+0x38>
   1b7ae:	f1a4 0110 	sub.w	r1, r4, #16
   1b7b2:	f021 010f 	bic.w	r1, r1, #15
   1b7b6:	f004 040f 	and.w	r4, r4, #15
   1b7ba:	3110      	adds	r1, #16
   1b7bc:	2c03      	cmp	r4, #3
   1b7be:	440b      	add	r3, r1
   1b7c0:	d90d      	bls.n	1b7de <__aeabi_memset+0x82>
   1b7c2:	461e      	mov	r6, r3
   1b7c4:	4621      	mov	r1, r4
   1b7c6:	3904      	subs	r1, #4
   1b7c8:	2903      	cmp	r1, #3
   1b7ca:	f846 5b04 	str.w	r5, [r6], #4
   1b7ce:	d8fa      	bhi.n	1b7c6 <__aeabi_memset+0x6a>
   1b7d0:	1f21      	subs	r1, r4, #4
   1b7d2:	f021 0103 	bic.w	r1, r1, #3
   1b7d6:	3104      	adds	r1, #4
   1b7d8:	440b      	add	r3, r1
   1b7da:	f004 0403 	and.w	r4, r4, #3
   1b7de:	b12c      	cbz	r4, 1b7ec <__aeabi_memset+0x90>
   1b7e0:	b2d2      	uxtb	r2, r2
   1b7e2:	441c      	add	r4, r3
   1b7e4:	f803 2b01 	strb.w	r2, [r3], #1
   1b7e8:	42a3      	cmp	r3, r4
   1b7ea:	d1fb      	bne.n	1b7e4 <__aeabi_memset+0x88>
   1b7ec:	bc70      	pop	{r4, r5, r6}
   1b7ee:	4770      	bx	lr
   1b7f0:	460c      	mov	r4, r1
   1b7f2:	4603      	mov	r3, r0
   1b7f4:	e7c2      	b.n	1b77c <__aeabi_memset+0x20>
   1b7f6:	5344      	.short	0x5344
   1b7f8:	61662050 	.word	0x61662050
   1b7fc:	43546c69 	.word	0x43546c69
   1b800:	61662048 	.word	0x61662048
   1b804:	45476c69 	.word	0x45476c69
   1b808:	61662054 	.word	0x61662054
   1b80c:	55526c69 	.word	0x55526c69
   1b810:	6166204e 	.word	0x6166204e
   1b814:	6c69      	.short	0x6c69
   1b816:	7572      	.short	0x7572
   1b818:	612f7473 	.word	0x612f7473
   1b81c:	732f7070 	.word	0x732f7070
   1b820:	6c2f6372 	.word	0x6c2f6372
   1b824:	722e6269 	.word	0x722e6269
   1b828:	00000073 	.word	0x00000073
   1b82c:	0001b816 	.word	0x0001b816
   1b830:	00000013 	.word	0x00000013
   1b834:	0000005b 	.word	0x0000005b
   1b838:	00000005 	.word	0x00000005
   1b83c:	0001b816 	.word	0x0001b816
   1b840:	00000013 	.word	0x00000013
   1b844:	00000064 	.word	0x00000064
   1b848:	00000005 	.word	0x00000005
   1b84c:	50494843 	.word	0x50494843
   1b850:	61662038 	.word	0x61662038
   1b854:	00006c69 	.word	0x00006c69
   1b858:	0001b816 	.word	0x0001b816
   1b85c:	00000013 	.word	0x00000013
   1b860:	00000076 	.word	0x00000076
   1b864:	00000005 	.word	0x00000005
   1b868:	0001b816 	.word	0x0001b816
   1b86c:	00000013 	.word	0x00000013
   1b870:	0000007c 	.word	0x0000007c
   1b874:	0000000d 	.word	0x0000000d
   1b878:	0001b816 	.word	0x0001b816
   1b87c:	00000013 	.word	0x00000013
   1b880:	0000007b 	.word	0x0000007b
   1b884:	00000009 	.word	0x00000009
   1b888:	696e6170 	.word	0x696e6170
   1b88c:	2063      	.short	0x2063
   1b88e:	6f6e      	.short	0x6f6e
   1b890:	636f6c20 	.word	0x636f6c20
   1b894:	0a          	.byte	0x0a
   1b895:	61          	.byte	0x61
   1b896:	2074      	.short	0x2074
   1b898:	6e696c20 	.word	0x6e696c20
   1b89c:	2065      	.short	0x2065
   1b89e:	000a      	.short	0x000a
   1b8a0:	0001b816 	.word	0x0001b816
   1b8a4:	00000013 	.word	0x00000013
   1b8a8:	00000094 	.word	0x00000094
   1b8ac:	00000014 	.word	0x00000014
   1b8b0:	00008851 	.word	0x00008851
   1b8b4:	00000004 	.word	0x00000004
   1b8b8:	00000004 	.word	0x00000004
   1b8bc:	00008c57 	.word	0x00008c57
   1b8c0:	6573552f 	.word	0x6573552f
   1b8c4:	4c2f7372 	.word	0x4c2f7372
   1b8c8:	79707075 	.word	0x79707075
   1b8cc:	61632e2f 	.word	0x61632e2f
   1b8d0:	2f6f6772 	.word	0x2f6f6772
   1b8d4:	69676572 	.word	0x69676572
   1b8d8:	79727473 	.word	0x79727473
   1b8dc:	6372732f 	.word	0x6372732f
   1b8e0:	7469672f 	.word	0x7469672f
   1b8e4:	2e627568 	.word	0x2e627568
   1b8e8:	2d6d6f63 	.word	0x2d6d6f63
   1b8ec:	63636531 	.word	0x63636531
   1b8f0:	39393236 	.word	0x39393236
   1b8f4:	65396264 	.word	0x65396264
   1b8f8:	33323863 	.word	0x33323863
   1b8fc:	6165682f 	.word	0x6165682f
   1b900:	73656c70 	.word	0x73656c70
   1b904:	2e302d73 	.word	0x2e302d73
   1b908:	2f312e35 	.word	0x2f312e35
   1b90c:	2f637273 	.word	0x2f637273
   1b910:	2e636576 	.word	0x2e636576
   1b914:	00007372 	.word	0x00007372
   1b918:	0001b8c0 	.word	0x0001b8c0
   1b91c:	00000056 	.word	0x00000056
   1b920:	000001e8 	.word	0x000001e8
   1b924:	0000000d 	.word	0x0000000d
	...

0001b930 <str.0>:
   1b930:	65747461 2074706d 61206f74 77206464     attempt to add w
   1b940:	20687469 7265766f 776f6c66 00000000     ith overflow....
   1b950:	0001b94c 0001b950 65737361 6f697472     L...P...assertio
   1b960:	6166206e 64656c69 2860203a 7466656c     n failed: `(left
   1b970:	203d3d20 68676972 0a602974 656c2020      == right)`.  le
   1b980:	203a7466 0a2c6060 67697220 203a7468     ft: ``,. right: 
   1b990:	203a6060 0001b958 0000002d 0001b985     ``: X...-.......
   1b9a0:	0000000c 0001b991 00000003 0001b994     ................
   1b9b0:	6e206f6e 006c6c75 0001b9b0 00000007     no null.........
   1b9c0:	0001b9b8 0001b9c4 74737572 6e796d2f     ........rust/myn
   1b9d0:	2f747765 2f637273 2e62696c 00007372     ewt/src/lib.rs..
   1b9e0:	0001b9c8 00000016 000000db 00000011     ................
   1b9f0:	00008f13 00000004 00000004 00008c57     ............W...
   1ba00:	65737361 6f697472 6166206e 64656c69     assertion failed
   1ba10:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   1ba20:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   1ba30:	67697220 203a7468 203a6060 0001ba00      right: ``: ....
   1ba40:	0000002d 0001ba2d 0000000c 0001ba39     -...-.......9...
   1ba50:	00000003 0001ba3c 74736564 74616e69     ....<...destinat
   1ba60:	206e6f69 20646e61 72756f73 73206563     ion and source s
   1ba70:	6563696c 61682073 64206576 65666669     lices have diffe
   1ba80:	746e6572 6e656c20 73687467 0001ba58     rent lengthsX...
   1ba90:	00000034 0001ba8c 0001ba98 7375722f     4.........../rus
   1baa0:	352f6374 66613765 39363634 65303866     tc/5e7af4669f80e
   1bab0:	38366635 31343132 30353066 61333931     5f682141f050193a
   1bac0:	39373662 62646661 2f316234 2f637273     b679afdb4b1/src/
   1bad0:	6362696c 2f65726f 7263616d 6d2f736f     libcore/macros/m
   1bae0:	722e646f 00000073 0001ba9c 00000049     od.rs.......I...
   1baf0:	00000012 0000000d 656d6f53 656e6f4e     ........SomeNone
   1bb00:	00008f0b 00000004 00000004 000094e9     ................
   1bb10:	00000060 0001bb10 20697073 73756c66     `.......spi flus
   1bb20:	61662068 552f6c69 73726573 70754c2f     h fail/Users/Lup
   1bb30:	502f7970 54656e69 2f656d69 656e6970     py/PineTime/pine
   1bb40:	656d6974 7375722d 796d2d74 7477656e     time-rust-mynewt
   1bb50:	7375722f 74732f74 35333737 64636c2d     /rust/st7735-lcd
   1bb60:	7461622d 722d6863 72732f73 696c2f63     -batch-rs/src/li
   1bb70:	73722e62 20697073 61746164 69616620     b.rsspi data fai
   1bb80:	0000006c 0001bb26 0000004e 000000b0     l...&...N.......
   1bb90:	00000009 0001bb26 0000004e 00000098     ....&...N.......
   1bba0:	0000000d 20697073 20646d63 6c696166     ....spi cmd fail
   1bbb0:	0001bb26 0000004e 00000097 00000009     &...N...........
   1bbc0:	0001bb26 0000004e 0000009d 00000011     &...N...........
   1bbd0:	0001bb26 0000004e 0000009c 0000000d     &...N...........
   1bbe0:	0001bb26 0000004e 000000c5 0000002d     &...N.......-...
   1bbf0:	0001bb26 0000004e 000000c9 0000002d     &...N.......-...
   1bc00:	0001bb26 0000004e 000000d8 00000019     &...N...........

0001bc10 <str.0>:
   1bc10:	65747461 2074706d 61206f74 77206464     attempt to add w
   1bc20:	20687469 7265766f 776f6c66 0001bb26     ith overflow&...
   1bc30:	0000004e 000000d9 00000019 0001bb26     N...........&...
   1bc40:	0000004e 000000db 00000019 0001bb26     N...........&...
   1bc50:	0000004e 000000dc 00000019 20697073     N...........spi 
   1bc60:	74696e69 69616620 0000006c 0001bb26     init fail...&...
   1bc70:	0000004e 00000066 00000009 002d2c01     N...f........,-.
   1bc80:	0001bc7c 012d2c01 00002d2c 0001bc84     |....,-.,-......
   1bc90:	00000007 0001bc90 008402a2 0001bc98     ................
   1bca0:	000000c5 0001bca0 0000000a 0001bca8     ................
   1bcb0:	00002a8a 0001bcb0 0000ee8a 0001bcb8     .*..............
   1bcc0:	0000000e 0001bcc0 00000000 0001bcc8     ................
   1bcd0:	00000008 0001bcd0 00000005 0001bcd8     ................
   1bce0:	0001bb26 0000004e 00000088 00000009     &...N...........
   1bcf0:	74737552 756f7420 73206863 6f736e65     Rust touch senso
   1bd00:	00000a72 00000000 0001bd04 65737361     r...........asse
   1bd10:	6f697472 6166206e 64656c69 2860203a     rtion failed: `(
   1bd20:	7466656c 203d3d20 68676972 0a602974     left == right)`.
   1bd30:	656c2020 203a7466 0a2c6060 67697220       left: ``,. rig
   1bd40:	203a7468 203a6060 0001bd0c 0000002d     ht: ``: ....-...
   1bd50:	0001bd39 0000000c 0001bd45 00000003     9.......E.......
   1bd60:	0001bd48 20515249 74696e69 69616620     H...IRQ init fai
   1bd70:	0000006c 0001bd64 0000000d 0001bd74     l...d.......t...
   1bd80:	0001bd80 74737572 7070612f 6372732f     ....rust/app/src
   1bd90:	756f742f 735f6863 6f736e65 73722e72     /touch_sensor.rs
   1bda0:	0001bd84 0000001c 0000003f 00000005     ........?.......
   1bdb0:	20633269 72646461 0001bd84 0000001c     i2c addr........
   1bdc0:	0000004b 00000011 63756f74 74616468     K.......touchdat
   1bdd0:	61662061 00006c69 0001bd84 0000001c     a fail..........
   1bde0:	00000056 00000009 0001bd84 0000001c     V...............
   1bdf0:	0000005a 00000031 64616572 756f7420     Z...1...read tou
   1be00:	61646863 66206174 006c6961 0001bd84     chdata fail.....
   1be10:	0000001c 00000089 00000005 0001bd84     ................
   1be20:	0000001c 00000095 00000037 00000000     ........7.......

0001be30 <str.0>:
   1be30:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1be40:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1be50:	00000077 0001bd84 0000001c 00000095     w...............
   1be60:	00000024 00000000 00000000 00000000     $...............

0001be70 <str.1>:
   1be70:	65747461 2074706d 61206f74 77206464     attempt to add w
   1be80:	20687469 7265766f 776f6c66 0001bd84     ith overflow....
   1be90:	0000001c 00000095 00000020 0001bd84     ........ .......
   1bea0:	0000001c 00000099 00000009 0001bd84     ................
   1beb0:	0000001c 0000009a 00000037 0001bd84     ........7.......
   1bec0:	0000001c 0000009a 00000023 0001bd84     ........#.......
   1bed0:	0000001c 0000009a 0000001f 0001bd84     ................
   1bee0:	0000001c 0000009b 00000037 0001bd84     ........7.......
   1bef0:	0000001c 0000009b 00000023 0001bd84     ........#.......
   1bf00:	0000001c 0000009b 0000001f 0001bd84     ................
   1bf10:	0000001c 0000009c 00000009 0001bd84     ................
   1bf20:	0000001c 0000009e 00000037 0001bd84     ........7.......
   1bf30:	0000001c 0000009e 00000023 0001bd84     ........#.......
   1bf40:	0000001c 0000009e 0000001f 0001bd84     ................
   1bf50:	0000001c 0000009f 00000037 0001bd84     ........7.......
   1bf60:	0000001c 0000009f 00000023 0001bd84     ........#.......
   1bf70:	0000001c 0000009f 0000001f 0001bd84     ................
   1bf80:	0000001c 000000a0 00000009 0001bd84     ................
   1bf90:	0000001c 000000a4 00000030 0001bd84     ........0.......
   1bfa0:	0000001c 000000a4 0000001a 0001bd84     ................
   1bfb0:	0000001c 000000a4 00000016 0001bd84     ................
   1bfc0:	0000001c 000000a3 00000009 0001bd84     ................
   1bfd0:	0000001c 000000a6 00000030 0001bd84     ........0.......
   1bfe0:	0000001c 000000a6 0000001a 0001bd84     ................
   1bff0:	0000001c 000000a6 00000016 0001bd84     ................
   1c000:	0000001c 000000a5 00000009 0001bd84     ................
   1c010:	0000001c 000000aa 0000002d 0001bd84     ........-.......
   1c020:	0000001c 000000aa 0000001a 0001bd84     ................
   1c030:	0000001c 000000aa 00000016 0001bd84     ................
   1c040:	0000001c 000000a9 00000009 0001bd84     ................
   1c050:	0000001c 000000ac 0000002d 0001bd84     ........-.......
   1c060:	0000001c 000000ac 0000001a 0001bd84     ................
   1c070:	0000001c 000000ac 00000016 0001bd84     ................
   1c080:	0000001c 000000ab 00000009 0001bd84     ................
   1c090:	0000001c 000000af 0000000d 0001bd84     ................
   1c0a0:	0000001c 000000af 0000002c 20633269     ........,...i2c 
   1c0b0:	00667562 0001bd84 0000001c 000000f1     buf.............
   1c0c0:	00000005 0001bd84 0000001c 000000f2     ................
   1c0d0:	0000000d 0001bd84 0000001c 000000f2     ................
   1c0e0:	00000005 20633269 6c696166 73552f0a     ....i2c fail./Us
   1c0f0:	2f737265 7070754c 632e2f79 6f677261     ers/Luppy/.cargo
   1c100:	6765722f 72747369 72732f79 69672f63     /registry/src/gi
   1c110:	62756874 6d6f632e 6365312d 39323663     thub.com-1ecc629
   1c120:	39626439 32386365 65682f33 656c7061     9db9ec823/heaple
   1c130:	302d7373 312e352e 6372732f 6365762f     ss-0.5.1/src/vec
   1c140:	0073722e 0001c0ed 00000056 00000066     .rs.....V...f...
   1c150:	00000009 00000000 00000000 00000000     ................

0001c160 <str.0>:
   1c160:	65747461 2074706d 61206f74 77206464     attempt to add w
   1c170:	20687469 7265766f 776f6c66 0001c0ed     ith overflow....
   1c180:	00000056 0000003e 0000000c 74737552     V...>.......Rust
   1c190:	49484320 630a3850 38706968 00000000      CHIP8.chip8....
   1c1a0:	00000000 0001c197 00000006 0001c1a0     ................
   1c1b0:	50494843 74732038 65747261 25120a64     CHIP8 started..%
   1c1c0:	43415053 4e492045 45444156 30205352     SPACE INVADERS 0
   1c1d0:	2031392e 44207942 64697661 4e495720     .91 By David WIN
   1c1e0:	60524554 62006100 d0dda308 f2087118     TER`.a.b.....q..
   1c1f0:	1220311e 6108702d 12403000 6c05692d     .1 .-p.a.0@.-i.l
   1c200:	23006e15 f00a6091 3007f015 234b1200     .n.#.`.....0..K#
   1c210:	12017e91 68006645 6a00691c 6c0a6b04     .~..Ef.h.i.j.k.l
   1c220:	6e3c6d04 23e0000f fd512375 e0046015     .m<n...#u#Q..`..
   1c230:	237d129e 78003875 607523ff 129ee006     ..}#u8.x.#u`....
   1c240:	3875238b 23017839 12003675 e005609f     .#u89x.#u6...`..
   1c250:	66e9129e 841b6501 d4d9a380 d4d9a351     ...f.e......Q...
   1c260:	35ff7551 66ad12ff d4e91200 12013f51     Qu.5...f....Q?..
   1c270:	6651d4e9 73408300 62b58303 622283f8     ..Qf..@s...b.."b
   1c280:	12003308 827d23c9 12084306 121033d3     .3...#}..C...3..
   1c290:	827d23d5 12183306 827d23dd 12204306     .#}..3...#}..C .
   1c2a0:	122833e7 3e7d23e9 79071300 69184906     .3(..#}>...y.I.i
   1c2b0:	6b046a00 7d046c0a 000f6ef4 235123e0     .j.k.l.}.n...#Q#
   1c2c0:	1215fd75 3707f76f fd6f1200 8b512315     u...o..7..o..#Q.
   1c2d0:	13123ba4 6a027c1b 13023bfc 6a027c23     .;...|.j.;..#|.j
   1c2e0:	3c512304 006f1218 60dda4e0 62086114     .#Q<..o....`.a.b
   1c2f0:	701fd00f 301ef208 6033132c f015f0ff     ...p...0,.3`....
   1c300:	13003007 000af041 fe06a7e0 a3251265     .0..A.......e.%.
   1c310:	611ef9c1 81692308 81692306 81692306     ...a.#i..#i..#i.
   1c320:	7b692306 80ee00d0 301280e0 7bc6db00     .#i{.......0...{
   1c330:	a3ee000c d81c60d9 23ee0004 23238e51     .....`.....#Q.##
   1c340:	f0056051 f015f018 13003007 6aee0089     Q`.......0.....j
   1c350:	6be08d00 12a1e904 fd0ca657 3065f01e     ...k....W.....e0
   1c360:	6aaf13ff 6d046b00 13016e01 f00aa597     ...j.k.m.n......
   1c370:	7bc6db1e 7a017d08 13073a01 3cee0097     ...{.}.z.:.....<
   1c380:	99ffff7e ffff7e99 7ee72424 7e3c3cff     ~....~..$$.~.<<~
   1c390:	3c4281db 10dbff7e 00fe7c38 3f007f00     ..B<~...8|.....?
   1c3a0:	00007f00 01010100 03030303 203f0000     ..............? 
   1c3b0:	20202020 3f202020 00ff0808 fc00fe00            ?........
   1c3c0:	0000fe00 42427e00 62626262 00ff0000     .....~BBbbbb....
   1c3d0:	00000000 ff000000 00ff0000 7d41007d     ............}.A}
   1c3e0:	007d7d05 c6c2c200 38286c44 00ff0000     .}}.....Dl(8....
   1c3f0:	00000000 ff000000 00ff0000 f71410f7     ................
   1c400:	000404f7 fe447c00 c2c2c2c2 00ff0000     .....|D.........
   1c410:	00000000 ff000000 00ff0000 e82820ef     ............. (.
   1c420:	002f2fe8 c585f900 f9c5c5c5 00ff0000     .//.............
   1c430:	00000000 ff000000 00ff0000 302000be     .............. 0
   1c440:	00bebe20 e704f700 f4848585 00ff0000      ...............
   1c450:	00000000 ff000000 00ff0000 3f007f00     ...............?
   1c460:	00007f00 ef28ef00 6f60e000 00ff0000     ......(...`o....
   1c470:	00000000 ff000000 00ff0000 fc00fe00     ................
   1c480:	0000fe00 c000c000 c0c0c0c0 04fc0000     ................
   1c490:	04040404 fc040404 f9ff1010 9a8bb981     ................
   1c4a0:	fa00fa9a 9b9a9a8a 25e6f899 3434f425     ...........%%.44
   1c4b0:	14170034 26363734 5050dfc7 dfd8d85c     4...476&..PP\...
   1c4c0:	1f11df00 d9191b12 86fe447c 84fc8686     ........|D......
   1c4d0:	fe8282fe c0c080fe 82fcfec0 fcc2c2c2     ................
   1c4e0:	c0f880fe 80fefec0 c0c0c0f0 86be80fe     ................
   1c4f0:	8686fe86 868686fe 10101010 18181010     ................
   1c500:	78484818 c0b0909c 80809cb0 fec0c0c0     .HHx............
   1c510:	869292ee 82fe8686 86868686 8686827c     ............|...
   1c520:	82fe7c86 c0c0c0fe cac2827c 86fe7ac4     .|......|....z..
   1c530:	849c90fe 02fec0fe 10fefe02 30303030     ............0000
   1c540:	c2c28282 8282fec2 1038ee82 92968686     ..........8.....
   1c550:	4482ee92 82443838 30fe8282 02fe3030     ...D88D....000..
   1c560:	fe80f01e 00000000 00000606 c0606000     .............``.
   1c570:	00000000 18180000 18001818 180cc67c     ............|...
   1c580:	00001800 0000fefe 868682fe 0808fe86     ................
   1c590:	18181808 c0fe02fe 02fefec0 fe06061e     ................
   1c5a0:	fec4c484 80fe0404 fe0606fe fec0c0c0     ................
   1c5b0:	02fefe82 06060602 86fe447c 82fefe86     ........|D......
   1c5c0:	060606fe 4444fe44 a8a844fe a8a8a8a8     ....D.DD.D......
   1c5d0:	005a6ca8 30a8180c 12007e4e a86c6618     .lZ....0N~...fl.
   1c5e0:	2454665a 48480066 06a81218 0012a890     ZfT$f.HH........
   1c5f0:	a812307e 724e3084 a8a86618 a8a8a8a8     ~0...0Nr.f......
   1c600:	a8785490 726c7848 6c1812a8 90546672     .Tx.Hxlr...lrfT.
   1c610:	182a72a8 7e4e30a8 66181200 5472a86c     .r*..0N~...fl.rT
   1c620:	18665aa8 724e187e 182a72a8 30a86630     .Zf.~.Nr.r*.0f.0
   1c630:	6c007e4e 9c4e5430 a8a8a8a8 48a8a8a8     N~.l0TN........H
   1c640:	a8187e54 66785490 302a6ca8 3084a85a     T~...Txf.l*0Z..0
   1c650:	d8a82a72 124e00a8 a8a2e4a8 a8124e00     r*....N......N..
   1c660:	54542a6c 3084a872 dea82a72 2a72a89c     l*TTr..0r*....r*
   1c670:	540ca818 72785a48 66a86618 66545a18     ...THZxr.f.f.ZTf
   1c680:	72a86c72 a872002a a8182a72 007e4e30     rl.r*.r.r*..0N~.
   1c690:	6c661812 186600a8 0c4e30a8 6c001866     ..fl..f..0N.f..l
   1c6a0:	a8244e30 30182a72 541ea866 9c180c66     0N$.r*.0f..Tf...
   1c6b0:	545424a8 7842a812 aea83c0c a8a8a8a8     .$TT..Bx.<......
   1c6c0:	ffa8a8a8 00000000 00000000 00000000     ................
   1c6d0:	43000000 38504948 6e6f6420 48430a65     ...CHIP8 done.CH
   1c6e0:	20385049 756f6873 6e20646c 6520746f     IP8 should not e
   1c6f0:	7572646e 612f7473 732f7070 632f6372     ndrust/app/src/c
   1c700:	38706968 0073722e 0001c6f2 00000015     hip8.rs.........
   1c710:	00000048 00000005                       H.......

0001c718 <_ZN3app5chip88PIXEL_ON17hd77974d73295a467E>:
   1c718:	ffffffff ffffffff ffffffff ffffffff     ................
   1c728:	ffffffff ffffffff                       ........

0001c730 <_ZN3app5chip89PIXEL_OFF17h40a5f2316b800b23E>:
	...
   1c748:	766f2078 6c667265 0000776f 0001c6f2     x overflow......
   1c758:	00000015 00000087 00000009 766f2079     ............y ov
   1c768:	6c667265 0000776f 0001c6f2 00000015     erflow..........
   1c778:	00000088 00000009 0001c6f2 00000015     ................
   1c788:	00000089 00000015                       ........

0001c790 <str.0>:
   1c790:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1c7a0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1c7b0:	00000077 0001c6f2 00000015 00000089     w...............
   1c7c0:	00000011 00000000 00000000 00000000     ................

0001c7d0 <str.1>:
   1c7d0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1c7e0:	20687469 7265766f 776f6c66 0001c6f2     ith overflow....
   1c7f0:	00000015 0000008a 00000012 0001c6f2     ................
   1c800:	00000015 0000008c 0000001d 0001c6f2     ................
   1c810:	00000015 0000008d 0000001d 0001c6f2     ................
   1c820:	00000015 0000008e 00000009 0001c6f2     ................
   1c830:	00000015 0000008f 00000009 65747865     ............exte
   1c840:	6620646e 656c6961 00000064 0001c6f2     nd failed.......
   1c850:	00000015 00000093 00000009 0001c6f2     ................
   1c860:	00000015 00000095 0000000d 00000000     ................

0001c870 <str.2>:
   1c870:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1c880:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1c890:	00000077 0001c6f2 00000015 00000096     w...............
   1c8a0:	0000000d 20746573 65786970 6620736c     ....set pixels f
   1c8b0:	656c6961 00000064 0001c6f2 00000015     ailed...........
   1c8c0:	00000094 00000009 0001c6f2 00000015     ................
   1c8d0:	000000a7 00000009 0001c6f2 00000015     ................
   1c8e0:	000000a8 00000009 0001c6f2 00000015     ................
   1c8f0:	000000a9 00000015 0001c6f2 00000015     ................
   1c900:	000000a9 00000011 0001c6f2 00000015     ................
   1c910:	000000aa 00000012 73746573 20657a69     ........setsize 
   1c920:	000a202c 0001c6f2 00000015 000000d0     , ..............
   1c930:	00000012 50494843 6f742038 20686375     ....CHIP8 touch 
   1c940:	20746f6e 646e6168 0a64656c 6c6c6163     not handled.call
   1c950:	60206465 6974704f 3a3a6e6f 72776e75     ed `Option::unwr
   1c960:	29287061 6e6f2060 60206120 656e6f4e     ap()` on a `None
   1c970:	61762060 7365756c 66206970 6873756c     ` valuespi flush
   1c980:	69616620 73552f6c 2f737265 7070754c      fail/Users/Lupp
   1c990:	69502f79 6954656e 702f656d 74656e69     y/PineTime/pinet
   1c9a0:	2d656d69 74737572 6e796d2d 2f747765     ime-rust-mynewt/
   1c9b0:	74737572 3774732f 2d353337 2d64636c     rust/st7735-lcd-
   1c9c0:	63746162 73722d68 6372732f 62696c2f     batch-rs/src/lib
   1c9d0:	0073722e 0001c985 0000004e 000000fe     .rs.....N.......
   1c9e0:	00000009 0001c985 0000004e 000000f3     ........N.......
   1c9f0:	00000009 6573552f 4c2f7372 79707075     ..../Users/Luppy
   1ca00:	61632e2f 2f6f6772 69676572 79727473     /.cargo/registry
   1ca10:	6372732f 7469672f 2e627568 2d6d6f63     /src/github.com-
   1ca20:	63636531 39393236 65396264 33323863     1ecc6299db9ec823
   1ca30:	62696c2f 70696863 2e302d38 2f322e31     /libchip8-0.1.2/
   1ca40:	2f637273 2e62696c 00007372 0001c9f4     src/lib.rs......
   1ca50:	00000056 0000009d 00000014 0001c9f4     V...............
   1ca60:	00000056 000000d4 00000011 0001c9f4     V...............
   1ca70:	00000056 000000d5 0000001a 00000000     V...............

0001ca80 <str.0>:
   1ca80:	65747461 2074706d 61206f74 77206464     attempt to add w
   1ca90:	20687469 7265766f 776f6c66 0001c9f4     ith overflow....
   1caa0:	00000056 000000d5 00000011 00000005     V...............
   1cab0:	0001caac 4c205d5b 78562044 495b202c     ....[] LD Vx, [I
   1cac0:	0000005d 0001cab4 00000001 0001cab5     ]...............
   1cad0:	0000000c 0001cac4 00000000 00000020     ............ ...
   1cae0:	00000008 00000002 00000000 00000000     ................
   1caf0:	00000004 00000003 0001cad8 6362696c     ............libc
   1cb00:	38706968 4b53205d 78562050 504a205d     hip8] SKP Vx] JP
   1cb10:	6e6e6e20 00000040 00000020 0001cafc      nnn@... .......
   1cb20:	00000008 0001cafc 00000008 0001c9f4     ................
   1cb30:	00000056 000001a1 0001cb1c 0001c9f4     V...............
   1cb40:	00000056 000001a3 0000001d 0001c9f4     V...............
   1cb50:	00000056 000001a4 0000002a 0001c9f4     V.......*.......
   1cb60:	00000056 000001a4 00000021 0001c9f4     V.......!.......
   1cb70:	00000056 000001a4 00000015 444c205d     V...........] LD
   1cb80:	5d495b20 7856202c 0001cab4 00000001      [I], Vx........
   1cb90:	0001cb7c 0000000c 0001cb88 0001cafc     |...............
   1cba0:	00000008 0001cafc 00000008 0001c9f4     ................
   1cbb0:	00000056 0000019a 0001cb9c 0001c9f4     V...............
   1cbc0:	00000056 0000019c 0000001d 0001c9f4     V...............
   1cbd0:	00000056 0000019d 00000035 0001c9f4     V.......5.......
   1cbe0:	00000056 0000019d 0000001e 0001c9f4     V...............
   1cbf0:	00000056 0000019d 00000015 444c205d     V...........] LD
   1cc00:	202c4220 00007856 0001cab4 00000001      B, Vx..........
   1cc10:	0001cbfc 0000000a 0001cc08 0001cafc     ................
   1cc20:	00000008 0001cafc 00000008 0001c9f4     ................
   1cc30:	00000056 00000193 0001cc1c 0001c9f4     V...............
   1cc40:	00000056 00000194 0000001b 0001c9f4     V...............
   1cc50:	00000056 00000195 00000011 0001c9f4     V...............
   1cc60:	00000056 00000196 0000001a 0001c9f4     V...............
   1cc70:	00000056 00000196 00000011 0001c9f4     V...............
   1cc80:	00000056 00000197 0000001a 0001c9f4     V...............
   1cc90:	00000056 00000197 00000011 444c205d     V...........] LD
   1cca0:	202c4620 00007856 0001cab4 00000001      F, Vx..........
   1ccb0:	0001cc9c 0000000a 0001cca8 0001cafc     ................
   1ccc0:	00000008 0001cafc 00000008 0001c9f4     ................
   1ccd0:	00000056 0000018f 0001ccbc 0001c9f4     V...............
   1cce0:	00000056 00000190 0000001b 0001c9f4     V...............
   1ccf0:	00000056 00000190 0000001a 00000000     V...............

0001cd00 <str.1>:
   1cd00:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1cd10:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1cd20:	41205d77 49204444 7856202c 0001cab4     w] ADD I, Vx....
   1cd30:	00000001 0001cd21 0000000b 0001cd2c     ....!.......,...
   1cd40:	0001cafc 00000008 0001cafc 00000008     ................
   1cd50:	0001c9f4 00000056 0000018b 0001cd40     ....V.......@...
   1cd60:	0001c9f4 00000056 0000018c 0000002e     ....V...........
   1cd70:	444c205d 2c545320 00785620 0001cab4     ] LD ST, Vx.....
   1cd80:	00000001 0001cd70 0000000b 0001cd7c     ....p.......|...
   1cd90:	0001cafc 00000008 0001cafc 00000008     ................
   1cda0:	0001c9f4 00000056 00000187 0001cd90     ....V...........
   1cdb0:	0001c9f4 00000056 00000188 0000001b     ....V...........
   1cdc0:	444c205d 2c544420 00785620 0001cab4     ] LD DT, Vx.....
   1cdd0:	00000001 0001cdc0 0000000b 0001cdcc     ................
   1cde0:	0001cafc 00000008 0001cafc 00000008     ................
   1cdf0:	0001c9f4 00000056 00000183 0001cde0     ....V...........
   1ce00:	0001c9f4 00000056 00000184 0000001b     ....V...........
   1ce10:	444c205d 2c785620 00004b20 0001cab4     ] LD Vx, K......
   1ce20:	00000001 0001ce10 0000000a 0001ce1c     ................
   1ce30:	0001cafc 00000008 0001cafc 00000008     ................
   1ce40:	0001c9f4 00000056 0000017f 0001ce30     ....V.......0...
   1ce50:	0001c9f4 00000056 00000180 00000011     ....V...........
   1ce60:	444c205d 2c785620 00544420 0001cab4     ] LD Vx, DT.....
   1ce70:	00000001 0001ce60 0000000b 0001ce6c     ....`.......l...
   1ce80:	0001cafc 00000008 0001cafc 00000008     ................
   1ce90:	0001c9f4 00000056 0000017b 0001ce80     ....V...{.......
   1cea0:	0001c9f4 00000056 0000017c 00000011     ....V...|.......
   1ceb0:	4b53205d 5620504e 00000078 0001cab4     ] SKNP Vx.......
   1cec0:	00000001 0001ceb0 00000009 0001cebc     ................
   1ced0:	0001cafc 00000008 0001cafc 00000008     ................
   1cee0:	0001c9f4 00000056 00000175 0001ced0     ....V...u.......
   1cef0:	0001c9f4 00000056 00000176 00000021     ....V...v...!...
   1cf00:	0001cab4 00000001 0001cb04 00000008     ................
   1cf10:	0001cf00 0001cafc 00000008 0001cafc     ................
   1cf20:	00000008 0001c9f4 00000056 0000016f     ........V...o...
   1cf30:	0001cf14 0001c9f4 00000056 00000170     ........V...p...
   1cf40:	00000020 5244205d 78562057 7956202c      ...] DRW Vx, Vy
   1cf50:	006e202c 0001cab4 00000001 0001cf44     , n.........D...
   1cf60:	0000000f 0001cf54 0001cafc 00000008     ....T...........
   1cf70:	0001cafc 00000008 0001c9f4 00000056     ............V...
   1cf80:	00000156 0001cf68 0001c9f4 00000056     V...h.......V...
   1cf90:	00000157 0000001d 0001c9f4 00000056     W...........V...
   1cfa0:	00000158 0000001d 0001c9f4 00000056     X...........V...
   1cfb0:	0000015e 00000026 0001c9f4 00000056     ^...&.......V...
   1cfc0:	0000015e 0000001d 0001c9f4 00000056     ^...........V...
   1cfd0:	00000160 00000021 00000000 00000000     `...!...........

0001cfe0 <str.2>:
   1cfe0:	65747461 2074706d 63206f74 75636c61     attempt to calcu
   1cff0:	6574616c 65687420 6d657220 646e6961     late the remaind
   1d000:	77207265 20687469 69642061 6f736976     er with a diviso
   1d010:	666f2072 72657a20 0000006f 0001c9f4     r of zero.......
   1d020:	00000056 00000163 00000025 0001c9f4     V...c...%.......
   1d030:	00000056 00000165 0000002d 00000000     V...e...-.......

0001d040 <str.3>:
   1d040:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1d050:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1d060:	00000077 0001c9f4 00000056 00000165     w.......V...e...
   1d070:	00000028 00000000 00000000 00000000     (...............

0001d080 <str.4>:
   1d080:	65747461 2074706d 73206f74 74666968     attempt to shift
   1d090:	66656c20 69772074 6f206874 66726576      left with overf
   1d0a0:	5d776f6c 444e5220 2c785620 006b6b20     low] RND Vx, kk.
   1d0b0:	0001cab4 00000001 0001d0a3 0000000c     ................
   1d0c0:	0001d0b0 0001cafc 00000008 0001cafc     ................
   1d0d0:	00000008 0001c9f4 00000056 00000152     ........V...R...
   1d0e0:	0001d0c4 0001c9f4 00000056 00000153     ........V...S...
   1d0f0:	00000011 504a205d 2c305620 6e6e6e20     ....] JP V0, nnn
   1d100:	0001cab4 00000001 0001d0f4 0000000c     ................
   1d110:	0001d100 0001cafc 00000008 0001cafc     ................
   1d120:	00000008 0001c9f4 00000056 0000014e     ........V...N...
   1d130:	0001d114 444c205d 202c4920 006e6e6e     ....] LD I, nnn.
   1d140:	0001cab4 00000001 0001d134 0000000b     ........4.......
   1d150:	0001d140 0001cafc 00000008 0001cafc     @...............
   1d160:	00000008 0001c9f4 00000056 0000014a     ........V...J...
   1d170:	0001d154 4e53205d 78562045 7956202c     T...] SNE Vx, Vy
   1d180:	0001cab4 00000001 0001d174 0000000c     ........t.......
   1d190:	0001d180 0001cafc 00000008 0001cafc     ................
   1d1a0:	00000008 0001c9f4 00000056 00000144     ........V...D...
   1d1b0:	0001d194 0001c9f4 00000056 00000145     ........V...E...
   1d1c0:	00000014 0001c9f4 00000056 00000145     ........V...E...
   1d1d0:	00000021 4853205d 7856204c 7956202c     !...] SHL Vx, Vy
   1d1e0:	0001cab4 00000001 0001d1d4 0000000c     ................
   1d1f0:	0001d1e0 0001cafc 00000008 0001cafc     ................
   1d200:	00000008 0001c9f4 00000056 0000013f     ........V...?...
   1d210:	0001d1f4 0001c9f4 00000056 00000140     ........V...@...
   1d220:	00000020 0001c9f4 00000056 00000141      .......V...A...
   1d230:	0000001d 0001c9f4 00000056 00000141     ........V...A...
   1d240:	00000011 5553205d 56204e42 56202c78     ....] SUBN Vx, V
   1d250:	00000079 0001cab4 00000001 0001d244     y...........D...
   1d260:	0000000d 0001d254 0001cafc 00000008     ....T...........
   1d270:	0001cafc 00000008 0001c9f4 00000056     ............V...
   1d280:	00000139 0001d268 0001c9f4 00000056     9...h.......V...
   1d290:	0000013a 0000001e 0001c9f4 00000056     :...........V...
   1d2a0:	0000013a 00000038 0001c9f4 00000056     :...8.......V...
   1d2b0:	0000013b 00000011 4853205d 78562052     ;.......] SHR Vx
   1d2c0:	7956202c 0001cab4 00000001 0001d2b8     , Vy............
   1d2d0:	0000000c 0001d2c4 0001cafc 00000008     ................
   1d2e0:	0001cafc 00000008 0001c9f4 00000056     ............V...
   1d2f0:	00000134 0001d2d8 0001c9f4 00000056     4...........V...
   1d300:	00000135 0000001f 0001c9f4 00000056     5...........V...
   1d310:	00000136 0000001d 0001c9f4 00000056     6...........V...
   1d320:	00000136 00000011 5553205d 78562042     6.......] SUB Vx
   1d330:	7956202c 0001cab4 00000001 0001d328     , Vy........(...
   1d340:	0000000c 0001d334 0001cafc 00000008     ....4...........
   1d350:	0001cafc 00000008 0001c9f4 00000056     ............V...
   1d360:	0000012e 0001d348 0001c9f4 00000056     ....H.......V...
   1d370:	0000012f 0000001e 0001c9f4 00000056     /...........V...
   1d380:	0000012f 00000038 0001c9f4 00000056     /...8.......V...
   1d390:	00000130 00000011 4441205d 78562044     0.......] ADD Vx
   1d3a0:	7956202c 0001cab4 00000001 0001d398     , Vy............
   1d3b0:	0000000c 0001d3a4 0001cafc 00000008     ................
   1d3c0:	0001cafc 00000008 0001c9f4 00000056     ............V...
   1d3d0:	00000128 0001d3b8 0001c9f4 00000056     (...........V...
   1d3e0:	00000129 0000001e 0001c9f4 00000056     )...........V...
   1d3f0:	00000129 00000038 0001c9f4 00000056     )...8.......V...
   1d400:	0000012a 00000011 4f58205d 78562052     *.......] XOR Vx
   1d410:	7956202c 0001cab4 00000001 0001d408     , Vy............
   1d420:	0000000c 0001d414 0001cafc 00000008     ................
   1d430:	0001cafc 00000008 0001c9f4 00000056     ............V...
   1d440:	00000124 0001d428 0001c9f4 00000056     $...(.......V...
   1d450:	00000125 0000001e 0001c9f4 00000056     %...........V...
   1d460:	00000125 00000011 4e41205d 78562044     %.......] AND Vx
   1d470:	7956202c 0001cab4 00000001 0001d468     , Vy........h...
   1d480:	0000000c 0001d474 0001cafc 00000008     ....t...........
   1d490:	0001cafc 00000008 0001c9f4 00000056     ............V...
   1d4a0:	00000120 0001d488 0001c9f4 00000056      ...........V...
   1d4b0:	00000121 0000001e 0001c9f4 00000056     !...........V...
   1d4c0:	00000121 00000011 524f205d 2c785620     !.......] OR Vx,
   1d4d0:	00795620 0001cab4 00000001 0001d4c8      Vy.............
   1d4e0:	0000000b 0001d4d4 0001cafc 00000008     ................
   1d4f0:	0001cafc 00000008 0001c9f4 00000056     ............V...
   1d500:	0000011c 0001d4e8 0001c9f4 00000056     ............V...
   1d510:	0000011d 0000001e 0001c9f4 00000056     ............V...
   1d520:	0000011d 00000011 444c205d 2c785620     ........] LD Vx,
   1d530:	00795620 0001cab4 00000001 0001d528      Vy.........(...
   1d540:	0000000b 0001d534 0001cafc 00000008     ....4...........
   1d550:	0001cafc 00000008 0001c9f4 00000056     ............V...
   1d560:	00000118 0001d548 0001c9f4 00000056     ....H.......V...
   1d570:	00000119 0000001d 0001c9f4 00000056     ............V...
   1d580:	00000119 00000011 4441205d 78562044     ........] ADD Vx
   1d590:	6b6b202c 0001cab4 00000001 0001d588     , kk............
   1d5a0:	0000000c 0001d594 0001cafc 00000008     ................
   1d5b0:	0001cafc 00000008 0001c9f4 00000056     ............V...
   1d5c0:	00000114 0001d5a8 0001c9f4 00000056     ............V...
   1d5d0:	00000115 0000001d 0001c9f4 00000056     ............V...
   1d5e0:	00000115 00000011 444c205d 2c785620     ........] LD Vx,
   1d5f0:	006b6b20 0001cab4 00000001 0001d5e8      kk.............
   1d600:	0000000b 0001d5f4 0001cafc 00000008     ................
   1d610:	0001cafc 00000008 0001c9f4 00000056     ............V...
   1d620:	00000110 0001d608 0001c9f4 00000056     ............V...
   1d630:	00000111 00000011 6e49205d 696c6176     ........] Invali
   1d640:	706f2064 0000203a 0001cab4 00000001     d op: ..........
   1d650:	0001d638 0000000e 0001d648 00000000     8.......H.......
   1d660:	00000020 00000008 00000002 00000000      ...............
   1d670:	00000000 00000004 00000003 00000001     ................
   1d680:	00000020 00000008 00000002 00000000      ...............
   1d690:	00000000 00000004 00000003 0001d65c     ............\...
   1d6a0:	633a3a3c 3a65726f 63616d3a 3a736f72     <::core::macros:
   1d6b0:	6e61703a 6d206369 6f726361 00003e73     :panic macros>..
   1d6c0:	0001d6a0 0000001e 00000005 00000032     ............2...
   1d6d0:	4553205d 2c785620 00795620 0001cab4     ] SE Vx, Vy.....
   1d6e0:	00000001 0001d6d0 0000000b 0001d6dc     ................
   1d6f0:	0001cafc 00000008 0001cafc 00000008     ................
   1d700:	0001c9f4 00000056 0000010a 0001d6f0     ....V...........
   1d710:	0001c9f4 00000056 0000010b 00000014     ....V...........
   1d720:	0001c9f4 00000056 0000010b 00000021     ....V.......!...
   1d730:	4e53205d 78562045 6b6b202c 0001cab4     ] SNE Vx, kk....
   1d740:	00000001 0001d730 0000000c 0001d73c     ....0.......<...
   1d750:	0001cafc 00000008 0001cafc 00000008     ................
   1d760:	0001c9f4 00000056 00000104 0001d750     ....V.......P...
   1d770:	0001c9f4 00000056 00000105 00000014     ....V...........
   1d780:	4553205d 20785620 00006b6b 0001cab4     ] SE Vx kk......
   1d790:	00000001 0001d780 0000000a 0001d78c     ................
   1d7a0:	0001cafc 00000008 0001cafc 00000008     ................
   1d7b0:	0001c9f4 00000056 000000fe 0001d7a0     ....V...........
   1d7c0:	0001c9f4 00000056 000000ff 00000014     ....V...........
   1d7d0:	4143205d 6e204c4c 00006e6e 0001cab4     ] CALL nnn......
   1d7e0:	00000001 0001d7d0 0000000a 0001d7dc     ................
   1d7f0:	0001cafc 00000008 0001cafc 00000008     ................
   1d800:	0001c9f4 00000056 000000f9 0001d7f0     ....V...........
   1d810:	0001cab4 00000001 0001cb0c 00000008     ................
   1d820:	0001d810 0001cafc 00000008 0001cafc     ................
   1d830:	00000008 0001c9f4 00000056 000000f5     ........V.......
   1d840:	0001d824 5953205d 6e6e2053 0000006e     $...] SYS nnn...
   1d850:	0001cab4 00000001 0001d844 00000009     ........D.......
   1d860:	0001d850 0001cafc 00000008 0001cafc     P...............
   1d870:	00000008 0001c9f4 00000056 000000f1     ........V.......
   1d880:	0001d864 20746f6e 6c706d69 6e656d65     d...not implemen
   1d890:	00646574 0001d6a0 0000001e 00000002     ted.............
   1d8a0:	00000002 4552205d 00000054 0001cab4     ....] RET.......
   1d8b0:	00000001 0001d8a4 00000005 0001d8ac     ................
   1d8c0:	0001cafc 00000008 0001cafc 00000008     ................
   1d8d0:	0001c9f4 00000056 000000ec 0001d8c0     ....V...........
   1d8e0:	4c43205d 00000053 0001cab4 00000001     ] CLS...........
   1d8f0:	0001d8e0 00000005 0001d8e8 0001cafc     ................
   1d900:	00000008 0001cafc 00000008 0001c9f4     ................
   1d910:	00000056 000000e5 0001d8fc 0001c9f4     V...............
   1d920:	00000056 00000093 0000001b 0001c9f4     V...............
   1d930:	00000056 00000097 00000009 0001c9f4     V...............
   1d940:	00000056 000000bb 0000000d 0001c9f4     V...............
   1d950:	00000056 000000be 0000000d              V...........

0001d95c <_ZN8libchip87CHARBUF17h227c6d0d7e24574cE>:
   1d95c:	909090f0 206020f0 10f07020 f0f080f0     ..... `  p......
   1d96c:	f010f010 10f09090 f080f010 80f0f010     ................
   1d97c:	f0f090f0 40402010 90f090f0 f090f0f0     ..... @@........
   1d98c:	90f0f010 e09090f0 e090e090 808080f0     ................
   1d99c:	9090e0f0 80f0e090 f0f080f0 8080f080     ................
   1d9ac:	72656874 73692065 206f6e20 68637573     there is no such
   1d9bc:	69687420 6120676e 6e612073 71636120      thing as an acq
   1d9cc:	65726975 6c65722f 65736165 616f6c20     uire/release loa
   1d9dc:	75722f64 2f637473 61376535 36363466     d/rustc/5e7af466
   1d9ec:	30386639 36663565 34313238 35306631     9f80e5f682141f05
   1d9fc:	33393130 37366261 64666139 31623462     0193ab679afdb4b1
   1da0c:	6372732f 62696c2f 65726f63 63616d2f     /src/libcore/mac
   1da1c:	2f736f72 2e646f6d 00007372 0001d9dd     ros/mod.rs......
   1da2c:	00000049 0000000a 00000009 72656874     I...........ther
   1da3c:	73692065 206f6e20 68637573 69687420     e is no such thi
   1da4c:	6120676e 20612073 656c6572 20657361     ng as a release 
   1da5c:	64616f6c 00011763 00000000 00000001     loadc...........
   1da6c:	00011b25 00011b31 00011b3b 0001da60     %...1...;...`...
   1da7c:	00011763 00000000 00000001 00011b25     c...........%...
   1da8c:	00011b31 00011b3b                       1...;...

0001da94 <_ZN3log6logger3NOP17h5a3de47970f20990E>:
   1da94:	00697073 0001bd04 65737361 6f697472     spi.....assertio
   1daa4:	6166206e 64656c69 2860203a 7466656c     n failed: `(left
   1dab4:	203d3d20 68676972 0a602974 656c2020      == right)`.  le
   1dac4:	203a7466 0a2c6060 67697220 203a7468     ft: ``,. right: 
   1dad4:	203a6060 0001da9c 0000002d 0001dac9     ``: ....-.......
   1dae4:	0000000c 0001dad5 00000003 0001dad8     ................
   1daf4:	20697073 666e6f63 66206769 006c6961     spi config fail.
   1db04:	0001daf4 0000000f 0001db04 0001db10     ................
   1db14:	74737572 6e796d2f 2f747765 2f637273     rust/mynewt/src/
   1db24:	2e697073 00007372 0001db14 00000016     spi.rs..........
   1db34:	00000050 0000004a 20697073 66206263     P...J...spi cb f
   1db44:	006c6961 0001db3c 0000000b 0001db48     ail.<.......H...
   1db54:	0001db14 00000016 00000057 00000005     ........W.......
   1db64:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   1db74:	0001db64 0000000f 0001db74 0001db14     d.......t.......
   1db84:	00000016 0000005a 00000037 6f697067     ....Z...7...gpio
   1db94:	69616620 0000006c 0001db90 00000009      fail...........
   1dba4:	0001db9c 0001db14 00000016 0000005b     ............[...
   1dbb4:	00000040 0001db14 00000016 0000005c     @...........\...
   1dbc4:	00000040 6575716d 66206575 006c6961     @...mqueue fail.
   1dbd4:	0001dbc8 0000000b 0001dbd4 0001db14     ................
   1dbe4:	00000016 00000065 00000005 206d6573     ....e.......sem 
   1dbf4:	6c696166 20697073 6c696166 0001dbf0     failspi fail....
   1dc04:	00000008 0001dc00 0001db14 00000016     ................
   1dc14:	00000069 00000005 0001db14 00000016     i...............
   1dc24:	0000006d 00000005 00000000 0001da94     m...............
   1dc34:	00000004 0001dc2c 6e657665 66207174     ....,...eventq f
   1dc44:	006c6961 0001db14 00000016 00000081     ail.............
   1dc54:	00000009 65737361 6f697472 6166206e     ....assertion fa
   1dc64:	64656c69 6e75203a 65666173 50207b20     iled: unsafe { P
   1dc74:	49444e45 435f474e 6c2e444d 29286e65     ENDING_CMD.len()
   1dc84:	3e207d20 00003020 0001db14 00000016      } > 0..........
   1dc94:	00000097 00000005 0001db14 00000016     ................
   1dca4:	000000a6 00000012 0001db14 00000016     ................
   1dcb4:	000000bf 00000035 00000000              ....5.......

0001dcc0 <str.0>:
   1dcc0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1dcd0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1dce0:	00000077 0001db14 00000016 000000c2     w...............
   1dcf0:	0000000f 00000000 00000000 00000000     ................

0001dd00 <str.1>:
   1dd00:	65747461 2074706d 61206f74 77206464     attempt to add w
   1dd10:	20687469 7265766f 776f6c66 20746e69     ith overflowint 
   1dd20:	20697073 6c696166 0001db14 00000016     spi fail........
   1dd30:	000000ff 00000011 0001db14 00000016     ................
   1dd40:	0000010f 00000015 00000000 00000000     ................

0001dd50 <str.2>:
   1dd50:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1dd60:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1dd70:	00000077 0001db14 00000016 0000010d     w...............
   1dd80:	00000011 0001db14 00000016 00000115     ................
   1dd90:	00000011 0001db14 00000016 00000122     ............"...
   1dda0:	00000009 20646162 20697073 006e656c     ....bad spi len.
   1ddb0:	0001db14 00000016 00000129 00000005     ........).......
   1ddc0:	0001dbf8 00000008 0001ddc0 0001db14     ................
   1ddd0:	00000016 0000013f 00000009 0001db14     ....?...........
   1dde0:	00000016 00000148 00000009 0001db14     ....H...........
   1ddf0:	00000016 0000014c 00000030 0001db14     ....L...0.......
   1de00:	00000016 00000158 00000005 0001db14     ....X...........
   1de10:	00000016 0000015d 00000017 0001bd04     ....]...........
   1de20:	65737361 6f697472 6166206e 64656c69     assertion failed
   1de30:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   1de40:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   1de50:	67697220 203a7468 203a6060 0001de20      right: ``:  ...
   1de60:	0000002d 0001de4d 0000000c 0001de59     -...M.......Y...
   1de70:	00000003 0001de5c 20697073 666e6f63     ....\...spi conf
   1de80:	66206769 006c6961 0001de78 0000000f     ig fail.x.......
   1de90:	0001de88 0001de94 74737572 6e796d2f     ........rust/myn
   1dea0:	2f747765 2f637273 2e6c6168 00007372     ewt/src/hal.rs..
   1deb0:	0001de98 00000016 00000016 00000009     ................
   1dec0:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   1ded0:	0001dec0 0000000f 0001ded0 0001de98     ................
   1dee0:	00000016 00000019 00000009 20697073     ............spi 
   1def0:	74696e69 69616620 0000006c 0001deec     init fail.......
   1df00:	0000000d 0001defc 0001de98 00000016     ................
   1df10:	0000001c 00000009 6f697067 69616620     ........gpio fai
   1df20:	0000006c 0001df18 00000009 0001df24     l...........$...
   1df30:	0001de98 00000016 00000045 00000009     ........E.......
   1df40:	0001de98 00000016 0000006c 0000001b     ........l.......

0001df50 <str.0>:
   1df50:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1df60:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1df70:	6c616377 2064656c 74704f60 3a6e6f69     wcalled `Option:
   1df80:	776e753a 28706172 6f206029 2061206e     :unwrap()` on a 
   1df90:	6e6f4e60 76206065 65756c61 00002928     `None` value()..
   1dfa0:	0000a72d 00000000 00000001 00013ee3     -............>..
   1dfb0:	6573552f 4c2f7372 79707075 61632e2f     /Users/Luppy/.ca
   1dfc0:	2f6f6772 69676572 79727473 6372732f     rgo/registry/src
   1dfd0:	7469672f 2e627568 2d6d6f63 63636531     /github.com-1ecc
   1dfe0:	39393236 65396264 33323863 6165682f     6299db9ec823/hea
   1dff0:	73656c70 2e302d73 2f312e35 2f637273     pless-0.5.1/src/
   1e000:	2e636576 00007372 0001dfb0 00000056     vec.rs......V...
   1e010:	00000066 00000009 00000000 00000000     f...............

0001e020 <str.0>:
   1e020:	65747461 2074706d 61206f74 77206464     attempt to add w
   1e030:	20687469 7265766f 776f6c66 0001dfb0     ith overflow....
   1e040:	00000056 0000003e 0000000c 0001dfb0     V...>...........
   1e050:	00000056 0000007e 00000011 00000000     V...~...........

0001e060 <str.1>:
   1e060:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1e070:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1e080:	00000077 2f637273 6362696c 2f65726f     w...src/libcore/
   1e090:	2f6d756e 32636564 2f746c66 66776172     num/dec2flt/rawf
   1e0a0:	73722e70 65646e69 756f2078 666f2074     p.rsindex out of
   1e0b0:	756f6220 3a73646e 65687420 6e656c20      bounds: the len
   1e0c0:	20736920 00000000 00000020 00000008      is .... .......
   1e0d0:	00000002 00000000 00000000 00000002     ................
   1e0e0:	00000003 2f637273 6362696c 2f65726f     ....src/libcore/
   1e0f0:	63696e75 2f65646f 6e697270 6c626174     unicode/printabl
   1e100:	73722e65 00000000 00000020 00000004     e.rs.... .......
   1e110:	00000002 00000000 00000002 00000000     ................
   1e120:	00000003 00000000 00000020 00000008     ........ .......
   1e130:	00000002 00000000 00000001 00000001     ................
   1e140:	00000003 002e2e60 0001e145 00000002     ....`...E.......
   1e150:	65726c61 20796461 72726f62 6465776f     already borrowed
   1e160:	68772029 73206e65 6963696c 6020676e     ) when slicing `
   1e170:	72616843 46797254 456d6f72 726f7272     CharTryFromError
   1e180:	6f636544 74556564 45363166 726f7272     DecodeUtf16Error

0001e190 <_ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE>:
   1e190:	00010201 00000000 00000000 00000000     ................
   1e1a0:	72657469 20202020 2e2e202c 65757274     iter    , ..true
   1e1b0:	72657449 203d3c20 61746164 646e696b     Iter <= datakind
   1e1c0:	746e616d 73756c70 6f72655a 79706f43     mantplusZeroCopy
   1e1d0:	7373654c 65646f63 65707954 656e6f44     LesscodeTypeDone
   1e1e0:	72616843 6b636142 68746f42 6d657449     CharBackBothItem
   1e1f0:	656c6966 656e696c 7466654c 6c696174     filelineLefttail
   1e200:	656b6177 706f7264 32783875 32783869     wakedropu8x2i8x2
   1e210:	34783875 34783869 38783875 38783869     u8x4i8x4u8x8i8x8
   1e220:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   1e230:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   1e240:	656e6f4e 61762060 3a65756c 00000020     None` value: ...
   1e250:	0001e084 00000000 0001e24b 00000002     ........K.......
   1e260:	00014f6d 00000000 00000001 00014fbd     mO...........O..
   1e270:	74756220 65687420 646e6920 69207865      but the index i
   1e280:	00002073 0001e0a4 00000020 0001e270     s ...... ...p...
   1e290:	00000012 00014f6d 0000000c 00000004     ....mO..........
   1e2a0:	000151cf 00015525 000155d5 202c0a2c     .Q..%U...U..,., 
   1e2b0:	2c280a28 30783029 30313030 30333032     (.(,)0x000102030
   1e2c0:	30353034 30373036 31393038 31313130     4050607080910111
   1e2d0:	31333132 31353134 31373136 32393138     2131415161718192
   1e2e0:	32313230 32333232 32353234 32373236     0212223242526272
   1e2f0:	33393238 33313330 33333332 33353334     8293031323334353
   1e300:	33373336 34393338 34313430 34333432     6373839404142434
   1e310:	34353434 34373436 35393438 35313530     4454647484950515
   1e320:	35333532 35353534 35373536 36393538     2535455565758596
   1e330:	36313630 36333632 36353634 36373636     0616263646566676
   1e340:	37393638 37313730 37333732 37353734     8697071727374757
   1e350:	37373736 38393738 38313830 38333832     6777879808182838
   1e360:	38353834 38373836 39393838 39313930     4858687888990919
   1e370:	39333932 39353934 39373936 00393938     293949596979899.
   1e380:	00014f6d 00000004 00000004 000155f9     mO...........U..
   1e390:	000155ff 00015605 2f637273 6362696c     .U...V..src/libc
   1e3a0:	2f65726f 2f746d66 2e646f6d 00007372     ore/fmt/mod.rs..
   1e3b0:	0001e398 00000016 0000043b 00000011     ........;.......
   1e3c0:	0001e398 00000016 00000445 00000024     ........E...$...
   1e3d0:	2f637273 6362696c 2f65726f 63696c73     src/libcore/slic
   1e3e0:	6f6d2f65 73722e64 65646e69 6f202078     e/mod.rsindex  o
   1e3f0:	6f207475 61722066 2065676e 20726f66     ut of range for 
   1e400:	63696c73 666f2065 6e656c20 20687467     slice of length 
   1e410:	0001e3e8 00000006 0001e3ee 00000022     ............"...
   1e420:	0001e3d0 00000018 00000a72 00000005     ........r.......
   1e430:	63696c73 6e692065 20786564 72617473     slice index star
   1e440:	61207374 62202074 65207475 2073646e     ts at  but ends 
   1e450:	00207461 0001e430 00000016 0001e446     at .0.......F...
   1e460:	0000000d 0001e3d0 00000018 00000a78     ............x...
   1e470:	00000005 696e6966 64656873 73796168     ....finishedhays
   1e480:	6b636174 79622820 20736574 6167654e     tack (bytes Nega
   1e490:	65766974 69736f50 65766974 65746e69     tivePositiveinte
   1e4a0:	6c617267 61706e55 64656b63 69666e49     gralUnpackedInfi
   1e4b0:	6574696e 756e694d 77615273 7265764f     niteMinusRawOver
   1e4c0:	776f6c66 6b636162 72657469 6f746e49     flowbackiterInto
   1e4d0:	72657449 61636f6c 6e6f6974 61636f4c     IterlocationLoca
   1e4e0:	6e6f6974 72616573 72656863 69736f70     tionsearcherposi
   1e4f0:	6e6f6974 74697263 736f705f 656e694c     tioncrit_posLine
   1e500:	796e4173 57776152 72656b61 6f6c6c41     sAnyRawWakerAllo
   1e510:	72724563 38746e69 745f3478 2f637273     cErrint8x4_tsrc/
   1e520:	6362696c 2f65726f 2f727473 2e646f6d     libcore/str/mod.
   1e530:	2e5b7372 625d2e2e 20657479 65646e69     rs[...]byte inde
   1e540:	69202078 756f2073 666f2074 756f6220     x  is out of bou
   1e550:	2073646e 6020666f 0001e537 0000000b     nds of `7.......
   1e560:	0001e542 00000016 0001e144 00000001     B.......D.......
   1e570:	0001e51c 00000016 00000853 00000009     ........S.......
   1e580:	69676562 3d3c206e 646e6520 00002820     begin <= end (..
   1e590:	0001e580 0000000e 0001e1b4 00000004     ................
   1e5a0:	0001e160 00000010 0001e144 00000001     `.......D.......
   1e5b0:	0001e51c 00000016 00000857 00000005     ........W.......
   1e5c0:	0001e51c 00000016 00000868 0000000e     ........h.......
   1e5d0:	20736920 20746f6e 68632061 62207261      is not a char b
   1e5e0:	646e756f 3b797261 20746920 69207369     oundary; it is i
   1e5f0:	6469736e 20292065 6020666f 0001e537     nside ) of `7...
   1e600:	0000000b 0001e5d0 00000026 0001e484     ........&.......
   1e610:	00000008 0001e5f6 00000006 0001e144     ............D...
   1e620:	00000001 0001e51c 00000016 0000086a     ............j...
   1e630:	00000005 0001e0e4 00000020 0000001a     ........ .......
   1e640:	00000028 05030100 03060605 08080607     (...............
   1e650:	1c0a1109 140c190b 0d0e120d 0310040f     ................
   1e660:	09131212 05170116 03190218 021c071a     ................
   1e670:	161f011d 042b0320 0b2d022c 0330012e     .... .+.,.-...0.
   1e680:	01320231 02a902a7 08ab04aa 05fb02fa     1.2.............
   1e690:	03fe04fd 78ad09ff a28d8b79 8b585730     .......xy...0WX.
   1e6a0:	1d1c908c 4b0f0edd 2efcfb4c 5d5c3f2f     .......KL.../?\]
   1e6b0:	84e2b55f 92918e8d bbbab1a9 cac9c6c5     _...............
   1e6c0:	ffe5e4de 12110400 37343129 493d3b3a     ........)147:;=I
   1e6d0:	8e845d4a b4b1a992 cac6bbba e5e4cfce     J]..............
   1e6e0:	0e0d0400 31291211 453b3a34 5e4a4946     ......)14:;EFIJ^
   1e6f0:	91846564 cec99d9b 29110dcf 64574945     de.........)EIWd
   1e700:	a9918d65 c5bbbab4 e5e4dfc9 110d04f0     e...............
   1e710:	65644945 b2848180 d5bfbebc 83f1f0d7     EIde............
   1e720:	a6a48b85 c7c5bfbe dbdacfce cdbd9848     ............H...
   1e730:	49cfcec6 59574f4e 8e895f5e b7b6b18f     ...INOWY^_......
   1e740:	c7c6c1bf 171611d7 f7f65c5b 0d80fffe     ........[\......
   1e750:	dfde716d 6e1f0f0e 5f1d1c6f afae7e7d     mq.....no.._}~..
   1e760:	16fabcbb 461f1e17 584f4e47 7e5e5c5a     .......FGNOXZ\^~
   1e770:	d4c5b57f f1f0dcd5 8f7372f5 97967574     .........rs.tu..
   1e780:	2e265f2f b7afa72f d7cfc7bf 97409adf     /_&./.........@.
   1e790:	1f8f3098 ffcec1c0 5b5a4f4e 100f0807     .0......NOZ[....
   1e7a0:	efee2f27 3d376f6e 9045423f 53fffe91     '/..no7=?BE....S
   1e7b0:	c9c87567 d9d8d1d0 00fffee7 82225f20     gu.......... _".
   1e7c0:	448204df 06041b08 0eac8111 1e35ab80     ...D..........5.
   1e7d0:	03e08015 04010819 0434042f 07010307     ......../.4.....
   1e7e0:	0a110706 07120f50 04020855 03090a1c     ....P...U.......
   1e7f0:	03070308 03030302 0305040c 0e01060b     ................
   1e800:	033a0515 05060711 07570710 0d150702     ..:.......W.....
   1e810:	03430450 0401032d 0c0f0611 251d043a     P.C.-.......:..%
   1e820:	046d205f c880256a 03b08205 fd82061a     _ m.j%..........
   1e830:	15075903 1409170b 6a0c140c 1a060a06     .Y.........j....
   1e840:	2b075906 2c0a4605 01040c04 2c0b3103     .Y.+.F.,.....1.,
   1e850:	0b061a04 06ac8003 411f060a 032d044c     ...........AL.-.
   1e860:	033c0874 073c030f 052b0838 1811ff82     t.<...<.8.+.....
   1e870:	2d112f08 21102003 048c800f 0b199782     ./.-. .!........
   1e880:	05948815 073b052f 09180e02 7430b080     ..../.;.......0t
   1e890:	1ad6800c ff80050c 05b68005 c69b0c24     ............$...
   1e8a0:	1030d20a 37038d84 145c8109 8008b880     ..0....7..\.....
   1e8b0:	043530c7 0838060a 060c0846 031e0b74     .05...8.F...t...
   1e8c0:	0959045a 1c188380 4809160a 068a8008     Z.Y........H....
   1e8d0:	170ca4ab 04a13104 0726da81 8005050c     .....1....&.....
   1e8e0:	6d8111a5 2a287810 80044c06 be80048d     ...m.x(*.L......
   1e8f0:	0f031b03 0106000d 04010301 09080802     ................
   1e900:	0b050a02 11011002 13051204 15021411     ................
   1e910:	19021702 1d051c04 6a012408 bc026b03     .........$.j.k..
   1e920:	d402d102 d609d50c da02d702 e105e001     ................
   1e930:	ee02e802 f904f020 0c02fa06 4e3e3b27     .... .......';>N
   1e940:	9e9e8f4f 0907069f 563e3d36 04d1d0f3     O.......6=>V....
   1e950:	37361814 35bd5756 12e0cfce 9e8e8987     ..67VW.5........
   1e960:	110e0d04 34312912 4946453a 644f4e4a     .....)14:EFIJNOd
   1e970:	b65c5a65 a81c1bb7 09d9d8a9 a8919037     eZ\.........7...
   1e980:	3e3b0a07 928f6966 efee5f6f 9b9a625a     ..;>fi..o_..Zb..
   1e990:	9d552827 a4a3a1a0 baada8a7 0b06c4bc     '(U.............
   1e9a0:	3a1d150c a651453f a0cdcca7 221a1907     ...:?EQ........"
   1e9b0:	c53f3e25 232004c6 33282625 4a483a38     %>?... #%&(38:HJ
   1e9c0:	5553504c 5c5a5856 6563605e 78736b66     LPSUVXZ\^`cefksx
   1e9d0:	a48a7f7d c0b0afaa a3720cd0 6ecccba4     }.........r....n
   1e9e0:	7b225e6f 2d040305 01046503 82802e2f     o^"{...-.e../...
   1e9f0:	0f31031d 0924041c 052b051e 2a0e0444     ..1...$...+.D..*
   1ea00:	2406aa80 28042404 010b3408 37819080     ...$.$.(.4.....7
   1ea10:	080a1609 03399880 30090863 03210516     ......9.c..0..!.
   1ea20:	4001051b 054b0438 070a042f 20400709     ...@8.K./.....@ 
   1ea30:	090c0427 053a0336 0c04071a 37495007     '...6.:......PI7
   1ea40:	07330d33 810a082e 81801f26 802a0828     3.3.....&...(.*.
   1ea50:	4e091786 430f1e04 0a07190e 27094706     ...N...C.....G.'
   1ea60:	3f0b7509 3b062a41 51060a05 10050106     .u.?A*.;...Q....
   1ea70:	8b800503 08482060 5ea6800a 0a0b4522     ....` H....^"E..
   1ea80:	39130d06 2c360a07 c0801004 0c53643c     ...9..6,....<dS.
   1ea90:	45a08001 5308481b 0781391d 031d0a46     ...E.H.S.9..F...
   1eaa0:	03374947 060a080e 810a0739 c7801936     GI7.....9...6...
   1eab0:	9b830d32 800b7566 84bc8ac4 82d18f2f     2...fu....../...
   1eac0:	82b9a147 042a0739 0a266002 05280a46     G...9.*..`&.F.(.
   1ead0:	5bb08213 39044b65 04401107 08f8971c     ...[eK.9..@.....
   1eae0:	0da5f382 03311f81 81080411 6b04898c     ......1........k
   1eaf0:	09030d05 60931007 730af680 46176e08     .......`...s.n.F
   1eb00:	0c149a80 80190957 03478187 150f4285     ....W.....G..B..
   1eb10:	802b5085 1a032dd5 70810204 8501053a     .P+..-.....p:...
   1eb20:	29d78000 040a044c 44118302 c2803d4c     ...)L......DL=..
   1eb30:	0401063c 341b0555 2c0e8102 560c6404     <...U..4...,.d.V
   1eb40:	5d030d0a 1d393d03 09042c0d 060e0207     ...].=9..,......
   1eb50:	d6839a80 0b030d0a 590c7405 0c140c07     .........t.Y....
   1eb60:	0a083804 1e082806 31037752 0ca68003     .8...(..Rw.1....
   1eb70:	05030414 85060d03 6372736a 62696c2f     ........jsrc/lib
   1eb80:	65726f63 696e752f 65646f63 646f6d2f     core/unicode/mod
   1eb90:	0073722e 0001eb79 0000001a 00000038     .rs.y.......8...
   1eba0:	0000000f 0001eb79 0000001a 00000039     ....y.......9...
   1ebb0:	00000010                                ....

0001ebb4 <_ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E>:
   1ebb4:	1b150f04 17120319 0e000011 00000016     ................
	...
   1ebdc:	00130600 00000000 00000000 00000000     ................
   1ebec:	00000000 07020000 0c08000a 1a181c1d     ................
	...
   1ec0c:	01050000 00000000 00000000 00000000     ................
   1ec1c:	00000000 10000000 00000000 0009000b     ................
   1ec2c:	                                         ...

0001ec2f <_ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E>:
	...
   1ec4b:	00120f00 00000000 00000000 00000000     ................
   1ec5b:	0000001f 00000000 00000000 00000000     ................
   1ec6b:	1d664649 00000000 00000000 00000000     IFf.............
   1ec7b:	00003e8a 00000000 00000000 4b000000     .>.............K
   1ec8b:	00000053 00000000 00000000 42236700     S............g#B
	...
   1eca7:	0000003d 00230000 00000000 00000000     =.....#.........
   1ecb7:	2d000075 00000000 00000000 00000000     u..-............
   1ecc7:	003c4e82 00000000 00000000 63000000     .N<............c
   1ecd7:	25000000 00005a00 00000000 00368100     ...%.Z........6.
   1ece7:	00000300 00000000 00000000 0000002f     ............/...
   1ecf7:	00000000 00001000 13000000 00000800     ................
	...
   1ed0f:	43000000 89007200 00000000 00000000     ...C.r..........
   1ed1f:	00070000 057d0000 37003f18 64400987     ......}..?.7..@d
   1ed2f:	00210000 00000000 00000000 00000000     ..!.............
   1ed3f:	4100000a 00000000 00000000 00000000     ...A............
   1ed4f:	0030000c 0000005c 00717719 44354760     ..0.\....wq.`G5D
   1ed5f:	7400002e 2c651139 507f5e51 34000000     ...t9.e,Q^.P...4
   1ed6f:	00000031 00000053 3a000000 00000000     1...S......:....
   1ed7f:	88001a38 696b2b5f 845d4f5d 14682a80     8..._+ki]O]..*h.
   1ed8f:	0017003b 00000000 00000000 00000000     ;...............
   1ed9f:	57000055 83000000 00000000 00000000     U..W............
   1edaf:	00000059 26000000 00161b6e 00000000     Y......&n.......
   1edbf:	001c4a6d 00000000 00000000 00002400     mJ...........$..
   1edcf:	0052007c 0015067b 48000000 00000000     |.R.{......H....
   1eddf:	2776287e 2200296c 0d610e5b 04627056     ~(v'l)."[.a.Vpb.
   1edef:	02782085 1e7a0000 00540179 00000033     . x...z.y.T.3...
   1edff:	00587386 0b6f454d 3200006a 00004c6c     .sX.MEo.j..2lL..
   1ee0f:	00008a89 3e8a8a8a 00000000 00000000     .......>........
	...

0001ee20 <_ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E>:
	...
   1ee28:	00000001 00000000 0000000d 00000000     ................
   1ee38:	0000001c 00000000 00000040 00000000     ........@.......
   1ee48:	000000b6 00000000 000000bf 00000000     ................
   1ee58:	000003f8 00000000 000007f0 00000000     ................
   1ee68:	000007ff 00000000 00001000 00000000     ................
   1ee78:	00001e00 00000000 00003800 00000000     .........8......
   1ee88:	00003f00 00000000 00007f80 00000000     .?..............
   1ee98:	00008000 00000000 0001ffc0 00000000     ................
   1eea8:	0003ff80 00000000 00078000 00000000     ................
   1eeb8:	007f0000 00000000 00802001 00000000     ......... ......
   1eec8:	00a30000 00000000 037ffc00 00000000     ................
   1eed8:	06000000 00000000 07ff0000 00000000     ................
   1eee8:	09800000 00000000 0e000000 00000000     ................
   1eef8:	0e7e0080 00000000 20002064 00000000     ..~.....d . ....
   1ef08:	200ffe40 00000000 30000001 00000000     @.. .......0....
   1ef18:	40000000 00000000 4000005c 00000000     ...@....\..@....
   1ef28:	60000000 00000000 805c8400 00000000     ...`......\.....
   1ef38:	c0000000 00000000 e0000000 00000000     ................
   1ef48:	00000000 00000001 0cf00000 00000001     ................
   1ef58:	00603044 0000000c 00603dc1 0000000c     D0`......=`.....
   1ef68:	0080201e 0000000c 00c0201e 0000000c     . ....... ......
   1ef78:	00fe21fe 0000000c 00000000 00000020     .!.......... ...
   1ef88:	00000000 00000060 00000844 00000060     ....`...D...`...
   1ef98:	00000000 000000f0 00000060 00000200     ........`.......
   1efa8:	f9ffff7f 000007db 80000000 000007f8     ................
   1efb8:	e0000000 00000fbc 00000000 00002120     ............ !..
   1efc8:	00000003 00003b3c 00000fe7 00003c00     ....<;.......<..
   1efd8:	9fc00000 00003d9f fbc00000 00003eef     .....=.......>..
   1efe8:	00000000 00003fc0 00000000 0000f000     .....?..........
   1eff8:	00000000 0000fc00 f8000010 0000fffe     ................
   1f008:	0000ffff 0000ffff ffffffff 0000ffff     ................
   1f018:	fffff800 00010000 00000000 0001ffc0     ................
   1f028:	ffff0000 0001ffff 00000000 00030000     ................
   1f038:	00000000 00038000 00000000 0003a340     ............@...
   1f048:	00000000 00080000 000c0000 000c0000     ................
   1f058:	00000004 000ff800 00000000 00180000     ................
   1f068:	001c0000 001c0000 c3000000 001e0001     ................
   1f078:	00000000 001f0000 00800001 001f1fc0     ................
   1f088:	00000007 001fef80 ffffffff 00201fff     .............. .
   1f098:	00023986 00230000 00000002 00403000     .9....#......0@.
   1f0a8:	00000000 00667e00 fffc0000 006dfcff     .....~f.......m.
   1f0b8:	00000000 007f0000 00000000 00bf2800     .............(..
   1f0c8:	00000000 00cff000 03000000 02a00000     ................
   1f0d8:	fff70000 031021fd 00000003 06780000     .....!........x.
   1f0e8:	00000000 06ff8000 00000000 07c00000     ................
   1f0f8:	00000000 07f20000 00000000 0e040187     ................
   1f108:	00000006 10000000 00001008 10000000     ................
   1f118:	00000007 14000000 0000000f 17f00000     ................
   1f128:	00000000 1ff20000 feffe0df 1fffffff     ................
   1f138:	00000000 20000000 00000000 200ff800     ....... ....... 
   1f148:	00000007 33c80000 00000000 3fb00000     .......3.......?
   1f158:	00000000 3ff78000 00000004 40000000     .......?.......@
   1f168:	0080201e 4000000c 00000000 40d38000     . .....@.......@
   1f178:	00000002 50000000 00000003 58000000     .......P.......X
   1f188:	00000000 66fde000 000007fe 79f80000     .......f.......y
   1f198:	00000003 7fc00000 00000000 7ffe0000     ................
   1f1a8:	00000000 7fff0000 00000000 80000000     ................
   1f1b8:	0000007f 80000000 00000030 8003ffff     ........0.......
   1f1c8:	0000f06e 87000000 00000002 90000000     n...............
   1f1d8:	7f400000 9ff81fe5 00000000 a5f90000     ..@.............
   1f1e8:	00000000 a7f80000 00000000 b03c8000     ..............<.
   1f1f8:	00000000 b47e0000 00000000 bf7f0000     ......~.........
   1f208:	fffe0000 bfffffff 00000011 c0000000     ................
   1f218:	00000000 c19d0000 00000002 d0000000     ................
   1f228:	00000000 f807c3a0 ffffffff f87fffff     ................
   1f238:	ffffffff fbffffff 000021be fc00000c     .........!......
   1f248:	00000000 ff000000 00000002 ff000000     ................
   1f258:	00020000 ffff0000 fff80000 fffffffb     ................
   1f268:	00000000 ffffffff ffffffff ffffffff     ................
   1f278:	00000020 00006425 6c363025 00002075      ...%d..%06lu ..

0001f288 <nrf52_hal_i2cs>:
   1f288:	00000000 20000108                       ....... 

0001f290 <nrf52_hal_spis>:
   1f290:	2000e5c0 00000000 00000000 65737341     ... ........Asse
   1f2a0:	40207472 25783020 00000a78 65737341     rt @ 0x%x...Asse
   1f2b0:	40207472 25783020 202d2078 253a7325     rt @ 0x%x - %s:%
   1f2c0:	00000a64 61686e55 656c646e 6e692064     d...Unhandled in
   1f2d0:	72726574 20747075 646c2528 65202c29     terrupt (%ld), e
   1f2e0:	70656378 6e6f6974 20707320 30257830     xception sp 0x%0
   1f2f0:	0a786c38 00000000 3a307220 30257830     8lx..... r0:0x%0
   1f300:	20786c38 3a317220 30257830 20786c38     8lx  r1:0x%08lx 
   1f310:	3a327220 30257830 20786c38 3a337220      r2:0x%08lx  r3:
   1f320:	30257830 0a786c38 00000000 3a347220     0x%08lx..... r4:
   1f330:	30257830 20786c38 3a357220 30257830     0x%08lx  r5:0x%0
   1f340:	20786c38 3a367220 30257830 20786c38     8lx  r6:0x%08lx 
   1f350:	3a377220 30257830 0a786c38 00000000      r7:0x%08lx.....
   1f360:	3a387220 30257830 20786c38 3a397220      r8:0x%08lx  r9:
   1f370:	30257830 20786c38 3a303172 30257830     0x%08lx r10:0x%0
   1f380:	20786c38 3a313172 30257830 0a786c38     8lx r11:0x%08lx.
   1f390:	00000000 3a323172 30257830 20786c38     ....r12:0x%08lx 
   1f3a0:	3a726c20 30257830 20786c38 3a637020      lr:0x%08lx  pc:
   1f3b0:	30257830 20786c38 3a727370 30257830     0x%08lx psr:0x%0
   1f3c0:	0a786c38 00000000 52534349 2578303a     8lx.....ICSR:0x%
   1f3d0:	786c3830 53464820 78303a52 6c383025     08lx HFSR:0x%08l
   1f3e0:	46432078 303a5253 38302578 000a786c     x CFSR:0x%08lx..
   1f3f0:	52414642 2578303a 786c3830 464d4d20     BFAR:0x%08lx MMF
   1f400:	303a5241 38302578 000a786c 6e69616d     AR:0x%08lx..main
   1f410:	00000000 656c6469 00000000 7379736d     ....idle....msys
   1f420:	0000315f                                _1..

0001f424 <MemFile_methods>:
   1f424:	00019c75 00000000                       u.......

0001f42c <stdout>:
   1f42c:	20000124                                $.. 

0001f430 <nrf52k_flash_dev>:
   1f430:	0001f448 00000000 00080000 00000080     H...............
   1f440:	00000001 000000ff                       ........

0001f448 <nrf52k_flash_funcs>:
   1f448:	00019ee1 00019e11 00019d99 00019df1     ................
   1f458:	00000000 00019ded 00000000              ............

0001f464 <nrf52_hal_timers>:
   1f464:	2000e6d0 00000000 00000000 00000000     ... ............
	...

0001f47c <hal_i2c1_cfg>:
   1f47c:	00000007 00000006 00000064              ........d...

0001f488 <os_bsp_spi0m_cfg>:
   1f488:	001d0302 736e6573 6e5f726f 6669746f     ....sensor_notif
   1f498:	7476655f 00000073                       _evts...

0001f4a0 <COLLECTOR_NODE_HW_ID>:
   1f4a0:	066aff57 50547878 67242949              W.j.xxTPI)$g

0001f4ac <SENSOR_NODE_HW_IDS>:
   1f4ac:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   1f4bc:	08070605 020b0a09 04030201 08070605     ................
   1f4cc:	030b0a09 04030201 08070605 040b0a09     ................
   1f4dc:	04030201 08070605 050b0a09 77687325     ............%shw
   1f4ec:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   1f4fc:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   1f50c:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   1f51c:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   1f52c:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   1f53c:	0a732520 00000000 00000000               %s.........

0001f548 <sensor_node_addresses>:
   1f548:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   1f558:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   1f568:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   1f578:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   1f588:	00000a73                                s...

0001f58c <g_temp_stub_sensor_driver>:
   1f58c:	0001ad1d 0001ac25 00000000 00000000     ....%...........
	...
   1f5b4:	20425453 64616572 6d657420 65732070     STB read temp se
   1f5c4:	726f736e 0000000a 635f636f 62635f6c     nsor....oc_cl_cb
   1f5d4:	00000073 725f636f 6f5f7065 00000000     s...oc_rep_o....

0001f5e4 <sysflash_map_dflt>:
	...
   1f5ec:	00004000 00000001 00008000 00073c00     .@...........<..
   1f5fc:	00000002 0007bc00 00000400 00000003     ................
   1f60c:	0007c000 00001000 00000010 00004000     .............@..
   1f61c:	00004000 00000011 0007d000 00003000     .@...........0..
   1f62c:	70616f63 6365725f 65766965 544f4e20     coap_receive NOT
   1f63c:	504d4920 454d454c 4445544e 0000000a      IMPLEMENTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  95812	    108	  59192	 155112	  25de8	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
